uint64_t ___ZL33nw_protocol_test_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(void *a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  const char *v12;
  int v13;
  uint64_t v14;
  void *v15;
  NSObject *v17;
  uint64_t v18;
  BOOL v19;
  const char *v20;
  const char *v21;
  unsigned int v22;
  NSObject *log;
  _DWORD *v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  unsigned int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  unsigned int v34;
  uint64_t v35;

  v2 = (_DWORD *)a2;
  v35 = *MEMORY[0x1E4F143B8];
  v4 = *(void *)(a2 + 32);
  v5 = *(void **)(a2 + 40);
  if (v4)
  {
    *(void *)(v4 + 40) = v5;
    v5 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1[4] + 8) + 48) = v5;
  }
  *v5 = v4;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  v6 = nw_frame_unclaimed_length((_DWORD *)a2);
  v24 = v2;
  if (gLogDatapath)
  {
    v17 = __nwlog_obj();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      v18 = a1[6];
      v19 = v18 == 0;
      *(_DWORD *)buf = 136446978;
      v20 = (const char *)(v18 + 32);
      v26 = "nw_protocol_test_get_input_frames_block_invoke";
      if (v19) {
        v20 = "";
      }
      v27 = 2082;
      v28 = v20;
      v29 = 1024;
      v30 = v6;
      v31 = 1024;
      v32 = 11;
      _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Splitting frame of size %u into chunks of size %u", buf, 0x22u);
    }
  }
  if (v6 >= 0xC)
  {
    do
    {
      v7 = nw_frame_split((uint64_t *)&v24, 0xBu);
      v8 = nw_frame_unclaimed_length(v24);
      v9 = a1[7];
      *(void *)(v7 + 32) = 0;
      v10 = *(uint64_t **)(v9 + 8);
      *(void *)(v7 + 40) = v10;
      *v10 = v7;
      *(void *)(v9 + 8) = v7 + 32;
      ++*(_DWORD *)(*(void *)(a1[5] + 8) + 24);
      if (gLogDatapath)
      {
        log = __nwlog_obj();
        if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
        {
          v11 = a1[6];
          if (v11) {
            v12 = (const char *)(v11 + 32);
          }
          else {
            v12 = "";
          }
          v21 = v12;
          v22 = *(_DWORD *)(*(void *)(a1[5] + 8) + 24);
          v13 = nw_frame_unclaimed_length((_DWORD *)v7);
          *(_DWORD *)buf = 136447234;
          v26 = "nw_protocol_test_get_input_frames_block_invoke";
          v27 = 2082;
          v28 = v21;
          v29 = 1024;
          v30 = v22;
          v31 = 1024;
          v32 = v13;
          v33 = 1024;
          v34 = v8;
          _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Split frame into small frame %u of size %u, remaining frame of size %u", buf, 0x28u);
        }
      }
    }
    while (v8 > 0xB);
    v2 = v24;
  }
  v14 = a1[7];
  *((void *)v2 + 4) = 0;
  v15 = *(void **)(v14 + 8);
  *((void *)v2 + 5) = v15;
  *v15 = v2;
  *(void *)(v14 + 8) = v2 + 8;
  ++*(_DWORD *)(*(void *)(a1[5] + 8) + 24);
  return 1;
}

BOOL ___ZL33nw_protocol_test_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_31(void *a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 32);
  v5 = *(void **)(a2 + 40);
  if (v4)
  {
    *(void *)(v4 + 40) = v5;
    v5 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1[4] + 8) + 48) = v5;
  }
  void *v5 = v4;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  if (!*(void *)(a2 + 112)
    || (*(_WORD *)(a2 + 204) & 0x100) != 0
    && g_channel_check_validity
    && !g_channel_check_validity(a2, *(void *)(a2 + 88)))
  {
    v9 = 0;
    unsigned int v8 = 0;
LABEL_13:
    size_t v10 = 1;
    int v11 = 1;
    goto LABEL_14;
  }
  int v6 = *(_DWORD *)(a2 + 52);
  if (!v6)
  {
    unsigned int v8 = 0;
    v9 = (const void *)(*(void *)(a2 + 112) + *(unsigned int *)(a2 + 56));
    goto LABEL_13;
  }
  uint64_t v7 = *(unsigned int *)(a2 + 56);
  unsigned int v8 = v6 - (v7 + *(_DWORD *)(a2 + 60));
  v9 = (const void *)(*(void *)(a2 + 112) + v7);
  size_t v10 = v8 + 1;
  if (v8 == -1)
  {
    v24 = __nwlog_obj();
    os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v27 = "strict_malloc";
    v25 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v25);
    if (result) {
      goto LABEL_30;
    }
    free(v25);
    size_t v10 = 0;
    int v11 = 0;
    unsigned int v8 = -1;
  }
  else
  {
    int v11 = v8 + 1;
  }
LABEL_14:
  v12 = (char *)malloc_type_malloc(v10, 0xF2B69DE5uLL);
  if (!v12)
  {
    v19 = __nwlog_obj();
    os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    v27 = "strict_malloc";
    __int16 v28 = 2048;
    size_t v29 = v10;
    v20 = (void *)_os_log_send_and_compose_impl();
    BOOL result = __nwlog_abort((uint64_t)v20);
    if (!result)
    {
      free(v20);
      memcpy((void *)1, v9, v8);
      uint64_t v15 = nw_frame_create(0, 0, v11, (uint64_t)__nw_frame_custom_finalizer, 0);
      if (v15) {
        goto LABEL_16;
      }
      goto LABEL_18;
    }
LABEL_30:
    __break(1u);
    return result;
  }
  v13 = v12;
  memcpy(v12 + 1, v9, v8);
  uint64_t v15 = nw_frame_create(0, (uint64_t)v13, v11, (uint64_t)__nw_frame_custom_finalizer, 0);
  if (v15)
  {
LABEL_16:
    *(_WORD *)(v15 + 204) |= 1u;
    nw_frame_claim(v15, v14, 1, 0);
    goto LABEL_18;
  }
  free(v13);
LABEL_18:
  if (gLogDatapath)
  {
    v21 = __nwlog_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v22 = a1[6];
      *(_DWORD *)buf = 136446978;
      v27 = "nw_protocol_test_get_input_frames_block_invoke";
      if (v22) {
        v23 = (const char *)(v22 + 32);
      }
      else {
        v23 = "";
      }
      __int16 v28 = 2082;
      size_t v29 = (size_t)v23;
      __int16 v30 = 2048;
      uint64_t v31 = v15;
      __int16 v32 = 2048;
      uint64_t v33 = a2;
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Created new frame %p from frame %p", buf, 0x2Au);
    }
  }
  nw_frame_finalize(a2);
  uint64_t v16 = a1[7];
  *(void *)(v15 + 32) = 0;
  v17 = *(uint64_t **)(v16 + 8);
  *(void *)(v15 + 40) = v17;
  uint64_t *v17 = v15;
  *(void *)(v16 + 8) = v15 + 32;
  ++*(_DWORD *)(*(void *)(a1[5] + 8) + 24);
  return 1;
}

uint64_t ___ZL33nw_protocol_test_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_33(void *a1, _DWORD *a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  int v3 = nw_frame_unclaimed_length(a2);
  if (gLogDatapath)
  {
    v21 = __nwlog_obj();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v22 = a1[4];
      *(_DWORD *)buf = 136446722;
      v51 = "nw_protocol_test_get_input_frames_block_invoke";
      if (v22) {
        v23 = (const char *)(v22 + 32);
      }
      else {
        v23 = "";
      }
      __int16 v52 = 2082;
      v53 = (void *)v23;
      __int16 v54 = 1024;
      LODWORD(v55) = v3;
      _os_log_impl(&dword_1830D4000, v21, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Disconnect on input: frame_length %u", buf, 0x1Cu);
    }
  }
  if (v3 && (*(unsigned char *)(a1[4] + 117) & 1) == 0)
  {
    if (gLogDatapath)
    {
      __int16 v30 = __nwlog_obj();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v31 = a1[4];
        if (v31) {
          __int16 v32 = (const char *)(v31 + 32);
        }
        else {
          __int16 v32 = "";
        }
        *(_DWORD *)buf = 136446466;
        v51 = "nw_protocol_test_get_input_frames_block_invoke";
        __int16 v52 = 2082;
        v53 = (void *)v32;
        _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Disconnecting on input", buf, 0x16u);
      }
    }
    uint64_t v4 = a1[5];
    if (v4)
    {
      uint64_t v5 = a1[6];
      int v6 = *(void **)(v4 + 40);
      if (v6 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v7 = *(void *)(v4 + 88);
        if (v7) {
          *(void *)(v4 + 88) = v7 + 1;
        }
      }
      if (v5)
      {
        unsigned int v8 = *(void **)(v5 + 40);
        if (v8 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v9 = *(void *)(v5 + 88);
          if (v9) {
            *(void *)(v5 + 88) = v9 + 1;
          }
        }
        uint64_t v10 = *(void *)(v4 + 24);
        if (v10)
        {
          int v11 = *(void (**)(uint64_t, uint64_t))(v10 + 48);
          if (v11)
          {
            v11(v4, v5);
LABEL_16:
            if (v8 != &nw_protocol_ref_counted_handle) {
              goto LABEL_18;
            }
            if (*(_UNKNOWN **)(v5 + 40) != &nw_protocol_ref_counted_handle) {
              goto LABEL_18;
            }
            uint64_t v17 = *(void *)(v5 + 88);
            if (!v17) {
              goto LABEL_18;
            }
            uint64_t v18 = v17 - 1;
            *(void *)(v5 + 88) = v18;
            if (v18) {
              goto LABEL_18;
            }
            v19 = *(void (***)(void))(v5 + 64);
            if (v19)
            {
              *(void *)(v5 + 64) = 0;
              v19[2](v19);
              _Block_release(v19);
            }
            if (*(unsigned char *)(v5 + 72))
            {
              v20 = *(const void **)(v5 + 64);
              if (v20) {
                _Block_release(v20);
              }
            }
            goto LABEL_37;
          }
        }
        __nwlog_obj();
        v24 = *(const char **)(v4 + 16);
        *(_DWORD *)buf = 136446722;
        v51 = "__nw_protocol_disconnected";
        if (!v24) {
          v24 = "invalid";
        }
        __int16 v52 = 2082;
        v53 = (void *)v24;
        __int16 v54 = 2048;
        uint64_t v55 = v4;
        v25 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v48 = 0;
        if (__nwlog_fault(v25, &type, &v48))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            v26 = __nwlog_obj();
            os_log_type_t v27 = type;
            if (!os_log_type_enabled(v26, type)) {
              goto LABEL_92;
            }
            __int16 v28 = *(const char **)(v4 + 16);
            if (!v28) {
              __int16 v28 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v51 = "__nw_protocol_disconnected";
            __int16 v52 = 2082;
            v53 = (void *)v28;
            __int16 v54 = 2048;
            uint64_t v55 = v4;
            size_t v29 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback";
            goto LABEL_91;
          }
          if (!v48)
          {
            v26 = __nwlog_obj();
            os_log_type_t v27 = type;
            if (!os_log_type_enabled(v26, type)) {
              goto LABEL_92;
            }
            v46 = *(const char **)(v4 + 16);
            if (!v46) {
              v46 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v51 = "__nw_protocol_disconnected";
            __int16 v52 = 2082;
            v53 = (void *)v46;
            __int16 v54 = 2048;
            uint64_t v55 = v4;
            size_t v29 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback, backtrace limit exceeded";
            goto LABEL_91;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          v26 = __nwlog_obj();
          os_log_type_t v27 = type;
          BOOL v40 = os_log_type_enabled(v26, type);
          if (backtrace_string)
          {
            if (v40)
            {
              v41 = *(const char **)(v4 + 16);
              if (!v41) {
                v41 = "invalid";
              }
              *(_DWORD *)buf = 136446978;
              v51 = "__nw_protocol_disconnected";
              __int16 v52 = 2082;
              v53 = (void *)v41;
              __int16 v54 = 2048;
              uint64_t v55 = v4;
              __int16 v56 = 2082;
              v57 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s protocol %{public}s (%p) has invalid disconnected callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }
            free(backtrace_string);
            goto LABEL_92;
          }
          if (v40)
          {
            v47 = *(const char **)(v4 + 16);
            if (!v47) {
              v47 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            v51 = "__nw_protocol_disconnected";
            __int16 v52 = 2082;
            v53 = (void *)v47;
            __int16 v54 = 2048;
            uint64_t v55 = v4;
            size_t v29 = "%{public}s protocol %{public}s (%p) has invalid disconnected callback, no backtrace";
LABEL_91:
            _os_log_impl(&dword_1830D4000, v26, v27, v29, buf, 0x20u);
          }
        }
LABEL_92:
        if (v25) {
          free(v25);
        }
        goto LABEL_16;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v51 = "__nw_protocol_disconnected";
      uint64_t v5 = _os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v48 = 0;
      if (!__nwlog_fault((const char *)v5, &type, &v48)) {
        goto LABEL_106;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        v36 = __nwlog_obj();
        os_log_type_t v37 = type;
        if (!os_log_type_enabled(v36, type)) {
          goto LABEL_106;
        }
        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_disconnected";
        v38 = "%{public}s called with null other_protocol";
      }
      else if (v48)
      {
        v44 = (char *)__nw_create_backtrace_string();
        v36 = __nwlog_obj();
        os_log_type_t v37 = type;
        BOOL v45 = os_log_type_enabled(v36, type);
        if (v44)
        {
          if (v45)
          {
            *(_DWORD *)buf = 136446466;
            v51 = "__nw_protocol_disconnected";
            __int16 v52 = 2082;
            v53 = v44;
            _os_log_impl(&dword_1830D4000, v36, v37, "%{public}s called with null other_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v44);
          if (!v5) {
            goto LABEL_18;
          }
          goto LABEL_37;
        }
        if (!v45)
        {
LABEL_106:
          if (!v5)
          {
LABEL_18:
            if (v6 != &nw_protocol_ref_counted_handle) {
              goto LABEL_20;
            }
            if (*(_UNKNOWN **)(v4 + 40) != &nw_protocol_ref_counted_handle) {
              goto LABEL_20;
            }
            uint64_t v13 = *(void *)(v4 + 88);
            if (!v13) {
              goto LABEL_20;
            }
            uint64_t v14 = v13 - 1;
            *(void *)(v4 + 88) = v14;
            if (v14) {
              goto LABEL_20;
            }
            uint64_t v15 = *(void (***)(void))(v4 + 64);
            if (v15)
            {
              *(void *)(v4 + 64) = 0;
              v15[2](v15);
              _Block_release(v15);
            }
            if (*(unsigned char *)(v4 + 72))
            {
              uint64_t v16 = *(const void **)(v4 + 64);
              if (v16) {
                _Block_release(v16);
              }
            }
            goto LABEL_29;
          }
LABEL_37:
          free((void *)v5);
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_disconnected";
        v38 = "%{public}s called with null other_protocol, no backtrace";
      }
      else
      {
        v36 = __nwlog_obj();
        os_log_type_t v37 = type;
        if (!os_log_type_enabled(v36, type)) {
          goto LABEL_106;
        }
        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_disconnected";
        v38 = "%{public}s called with null other_protocol, backtrace limit exceeded";
      }
      _os_log_impl(&dword_1830D4000, v36, v37, v38, buf, 0xCu);
      goto LABEL_106;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v51 = "__nw_protocol_disconnected";
    uint64_t v4 = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v48 = 0;
    if (__nwlog_fault((const char *)v4, &type, &v48))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v33 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (!os_log_type_enabled(v33, type)) {
          goto LABEL_101;
        }
        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_disconnected";
        v35 = "%{public}s called with null protocol";
        goto LABEL_100;
      }
      if (!v48)
      {
        uint64_t v33 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (!os_log_type_enabled(v33, type)) {
          goto LABEL_101;
        }
        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_disconnected";
        v35 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_100;
      }
      v42 = (char *)__nw_create_backtrace_string();
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v34 = type;
      BOOL v43 = os_log_type_enabled(v33, type);
      if (v42)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446466;
          v51 = "__nw_protocol_disconnected";
          __int16 v52 = 2082;
          v53 = v42;
          _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v42);
        if (!v4) {
          goto LABEL_20;
        }
LABEL_29:
        free((void *)v4);
LABEL_20:
        uint64_t result = 0;
        *(unsigned char *)(a1[4] + 117) |= 1u;
        return result;
      }
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        v51 = "__nw_protocol_disconnected";
        v35 = "%{public}s called with null protocol, no backtrace";
LABEL_100:
        _os_log_impl(&dword_1830D4000, v33, v34, v35, buf, 0xCu);
      }
    }
LABEL_101:
    if (!v4) {
      goto LABEL_20;
    }
    goto LABEL_29;
  }
  return 1;
}

uint64_t *nw::retained_ptr<nw_protocol *>::~retained_ptr(uint64_t *a1)
{
  if (a1[1])
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      if (*(_UNKNOWN **)(v2 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v4 = *(void *)(v2 + 88);
        if (v4)
        {
          uint64_t v5 = v4 - 1;
          *(void *)(v2 + 88) = v5;
          if (!v5)
          {
            int v6 = *(void (***)(void))(v2 + 64);
            if (v6)
            {
              *(void *)(v2 + 64) = 0;
              v6[2](v6);
              _Block_release(v6);
            }
            if (*(unsigned char *)(v2 + 72))
            {
              uint64_t v7 = *(const void **)(v2 + 64);
              if (v7) {
                _Block_release(v7);
              }
            }
            free((void *)v2);
          }
        }
      }
    }
  }
  *a1 = 0;
  return a1;
}

uint64_t ___ZL33nw_protocol_test_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_35(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void **)(a2 + 40);
  uint64_t v2 = (void *)(a2 + 32);
  if (v3)
  {
    *(void *)(v3 + 40) = v4;
    uint64_t v4 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1[4] + 8) + 48) = v4;
  }
  *uint64_t v4 = v3;
  *uint64_t v2 = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v5 = a1[6];
  int v6 = *(void **)(v5 + 8);
  *(void *)(a2 + 40) = v6;
  *int v6 = a2;
  *(void *)(v5 + 8) = v2;
  ++*(_DWORD *)(*(void *)(a1[5] + 8) + 24);
  return 1;
}

uint64_t ___ZL33nw_protocol_test_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_37(void *a1, _DWORD *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  v42 = a2;
  uint64_t v3 = nw_frame_split((uint64_t *)&v42, 0);
  if (gLogDatapath)
  {
    v35 = __nwlog_obj();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v36 = a1[6];
      if (v36) {
        os_log_type_t v37 = (const char *)(v36 + 32);
      }
      else {
        os_log_type_t v37 = "";
      }
      v38 = v42;
      int v39 = nw_frame_unclaimed_length(v42);
      *(_DWORD *)buf = 136447234;
      v44 = "nw_protocol_test_get_input_frames_block_invoke";
      __int16 v45 = 2082;
      v46 = v37;
      __int16 v47 = 2048;
      uint64_t v48 = v3;
      __int16 v49 = 2048;
      v50 = v38;
      __int16 v51 = 1024;
      LODWORD(v52) = v39;
      _os_log_impl(&dword_1830D4000, v35, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s inserting empty frame %p before existing frame %p (%u bytes)", buf, 0x30u);
    }
  }
  uint64_t v4 = *(void *)(*(void *)(a1[4] + 8) + 24);
  uint64_t v5 = (uint64_t *)a1[7];
  uint64_t v6 = v3 + 32;
  if (v4)
  {
    uint64_t v7 = v5 + 1;
    uint64_t v9 = *(void *)(v4 + 32);
    unsigned int v8 = (uint64_t *)(v4 + 32);
    *(void *)(v3 + 32) = v9;
    uint64_t v10 = (uint64_t *)(v9 + 40);
    if (v9) {
      uint64_t v7 = v10;
    }
    *uint64_t v7 = v6;
    *unsigned int v8 = v3;
    *(void *)(v3 + 40) = v8;
    uint64_t v11 = *(void *)(a1[5] + 8);
    uint64_t v12 = *(unsigned int *)(v11 + 24) + 1;
    uint64_t v13 = v12 << 31 >> 31;
    *(_DWORD *)(v11 + 24) = v12;
    if (v13 != v12 || v13 < 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v14 = (_DWORD *)*(unsigned int *)(*(void *)(a1[5] + 8) + 24);
      *(_DWORD *)buf = 136446978;
      v44 = "nw_protocol_test_get_input_frames_block_invoke";
      __int16 v45 = 2082;
      v46 = "count";
      __int16 v47 = 2048;
      uint64_t v48 = 1;
      __int16 v49 = 2048;
      v50 = v14;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v40 = 0;
      if (!__nwlog_fault(v15, &type, &v40)) {
        goto LABEL_40;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = gLogObj;
        os_log_type_t v17 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_40;
        }
LABEL_10:
        uint64_t v18 = (_DWORD *)*(unsigned int *)(*(void *)(a1[5] + 8) + 24);
        *(_DWORD *)buf = 136446978;
        v44 = "nw_protocol_test_get_input_frames_block_invoke";
        __int16 v45 = 2082;
        v46 = "count";
        __int16 v47 = 2048;
        uint64_t v48 = 1;
        __int16 v49 = 2048;
        v50 = v18;
        v19 = "%{public}s Overflow: %{public}s, increment %llu, result %llu";
LABEL_39:
        _os_log_impl(&dword_1830D4000, v16, v17, v19, buf, 0x2Au);
        goto LABEL_40;
      }
      if (v40)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = gLogObj;
        os_log_type_t v17 = type;
        BOOL v27 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v27)
          {
            __int16 v28 = (_DWORD *)*(unsigned int *)(*(void *)(a1[5] + 8) + 24);
            *(_DWORD *)buf = 136447234;
            v44 = "nw_protocol_test_get_input_frames_block_invoke";
            __int16 v45 = 2082;
            v46 = "count";
            __int16 v47 = 2048;
            uint64_t v48 = 1;
            __int16 v49 = 2048;
            v50 = v28;
            __int16 v51 = 2082;
            __int16 v52 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(backtrace_string);
          goto LABEL_40;
        }
        if (!v27) {
          goto LABEL_40;
        }
        goto LABEL_38;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v16 = gLogObj;
      os_log_type_t v17 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_40;
      }
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v20 = *v5;
    *(void *)(v3 + 32) = *v5;
    if (v20) {
      v21 = (uint64_t *)(v20 + 40);
    }
    else {
      v21 = v5 + 1;
    }
    uint64_t *v21 = v6;
    uint64_t *v5 = v3;
    *(void *)(v3 + 40) = v5;
    uint64_t v22 = *(void *)(a1[5] + 8);
    uint64_t v23 = *(unsigned int *)(v22 + 24) + 1;
    uint64_t v24 = v23 << 31 >> 31;
    *(_DWORD *)(v22 + 24) = v23;
    if (v24 != v23 || v24 < 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v25 = (_DWORD *)*(unsigned int *)(*(void *)(a1[5] + 8) + 24);
      *(_DWORD *)buf = 136446978;
      v44 = "nw_protocol_test_get_input_frames_block_invoke";
      __int16 v45 = 2082;
      v46 = "count";
      __int16 v47 = 2048;
      uint64_t v48 = 1;
      __int16 v49 = 2048;
      v50 = v25;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v40 = 0;
      if (!__nwlog_fault(v15, &type, &v40)) {
        goto LABEL_40;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = gLogObj;
        os_log_type_t v17 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_40;
        }
        goto LABEL_10;
      }
      if (v40)
      {
        size_t v29 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v16 = gLogObj;
        os_log_type_t v17 = type;
        BOOL v30 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (v29)
        {
          if (v30)
          {
            uint64_t v31 = (_DWORD *)*(unsigned int *)(*(void *)(a1[5] + 8) + 24);
            *(_DWORD *)buf = 136447234;
            v44 = "nw_protocol_test_get_input_frames_block_invoke";
            __int16 v45 = 2082;
            v46 = "count";
            __int16 v47 = 2048;
            uint64_t v48 = 1;
            __int16 v49 = 2048;
            v50 = v31;
            __int16 v51 = 2082;
            __int16 v52 = v29;
            _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v29);
          if (!v15) {
            goto LABEL_42;
          }
          goto LABEL_41;
        }
        if (!v30)
        {
LABEL_40:
          if (!v15)
          {
LABEL_42:
            *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = -1;
            goto LABEL_43;
          }
LABEL_41:
          free(v15);
          goto LABEL_42;
        }
LABEL_38:
        uint64_t v33 = (_DWORD *)*(unsigned int *)(*(void *)(a1[5] + 8) + 24);
        *(_DWORD *)buf = 136446978;
        v44 = "nw_protocol_test_get_input_frames_block_invoke";
        __int16 v45 = 2082;
        v46 = "count";
        __int16 v47 = 2048;
        uint64_t v48 = 1;
        __int16 v49 = 2048;
        v50 = v33;
        v19 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace";
        goto LABEL_39;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v16 = gLogObj;
      os_log_type_t v17 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_40;
      }
LABEL_32:
      __int16 v32 = (_DWORD *)*(unsigned int *)(*(void *)(a1[5] + 8) + 24);
      *(_DWORD *)buf = 136446978;
      v44 = "nw_protocol_test_get_input_frames_block_invoke";
      __int16 v45 = 2082;
      v46 = "count";
      __int16 v47 = 2048;
      uint64_t v48 = 1;
      __int16 v49 = 2048;
      v50 = v32;
      v19 = "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded";
      goto LABEL_39;
    }
  }
LABEL_43:
  *(void *)(*(void *)(a1[4] + 8) + 24) = v42;
  return 1;
}

void __nw_frame_malloc_finalizer(nw_frame *a1, BOOL a2, void *a3)
{
  buffer = (void *)nw_frame_get_buffer((uint64_t)a1, 0);
  if (buffer) {
    free(buffer);
  }
  nw_frame_reset((uint64_t)a1, 0, 0, 0, 0);
  if (a1)
  {
    os_release(a1);
  }
}

uint64_t nw_protocol_test_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      int v4 = a3;
      uint64_t v5 = nw_protocol_common_remove_input_handler_with_cleanup_blocks(a1, a2, a3, 0, 0);
      if (v4)
      {
        if (a1[1].output_handler_context)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v6 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446466;
            v19 = "nw_protocol_test_destroy";
            __int16 v20 = 2082;
            v21 = a1 + 2;
            _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s %{public}s Cancelling output frame failure timer", buf, 0x16u);
          }
          nw_queue_cancel_source((uint64_t)a1[1].output_handler_context);
          a1[1].output_handler_context = 0;
        }
        nw_protocol_destroy((uint64_t)&a1[1].output_handler, 0);
      }
      return v5;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_test_remove_input_handler";
    unsigned int v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16)) {
      goto LABEL_37;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_test_remove_input_handler";
        uint64_t v11 = "%{public}s called with null test";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (!v16)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_test_remove_input_handler";
        uint64_t v11 = "%{public}s called with null test, backtrace limit exceeded";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v15 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_test_remove_input_handler";
        uint64_t v11 = "%{public}s called with null test, no backtrace";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      v19 = "nw_protocol_test_remove_input_handler";
      __int16 v20 = 2082;
      v21 = (nw_protocol *)backtrace_string;
      uint64_t v14 = "%{public}s called with null test, dumping backtrace:%{public}s";
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_protocol_test_remove_input_handler";
  unsigned int v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v8, &type, &v16)) {
    goto LABEL_37;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v16)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_test_remove_input_handler";
        uint64_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v13 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_test_remove_input_handler";
        uint64_t v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      v19 = "nw_protocol_test_remove_input_handler";
      __int16 v20 = 2082;
      v21 = (nw_protocol *)backtrace_string;
      uint64_t v14 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_26:
      _os_log_impl(&dword_1830D4000, v9, v10, v14, buf, 0x16u);
    }
LABEL_27:
    free(backtrace_string);
    goto LABEL_37;
  }
  uint64_t v9 = __nwlog_obj();
  os_log_type_t v10 = type;
  if (os_log_type_enabled(v9, type))
  {
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_test_remove_input_handler";
    uint64_t v11 = "%{public}s called with null protocol";
LABEL_36:
    _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
  }
LABEL_37:
  if (v8) {
    free(v8);
  }
  return 0;
}

uint64_t nw_protocol_test_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v68 = "nw_protocol_test_add_input_handler";
    os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v65 = 0;
    if (!__nwlog_fault(v17, &type, &v65)) {
      goto LABEL_63;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_63;
      }
      *(_DWORD *)buf = 136446210;
      v68 = "nw_protocol_test_add_input_handler";
      __int16 v20 = "%{public}s called with null protocol";
    }
    else if (v65)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      BOOL v52 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v52)
        {
          *(_DWORD *)buf = 136446466;
          v68 = "nw_protocol_test_add_input_handler";
          __int16 v69 = 2082;
          v70 = (nw_protocol_identifier *)backtrace_string;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_63;
      }
      if (!v52) {
        goto LABEL_63;
      }
      *(_DWORD *)buf = 136446210;
      v68 = "nw_protocol_test_add_input_handler";
      __int16 v20 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v18 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (!os_log_type_enabled(v18, type)) {
        goto LABEL_63;
      }
      *(_DWORD *)buf = 136446210;
      v68 = "nw_protocol_test_add_input_handler";
      __int16 v20 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_62;
  }
  if (a1->handle == &nw_protocol_ref_counted_handle)
  {
    if ((nw_protocol_common_add_input_handler((uint64_t)a1, (uint64_t)a2) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v12 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v68 = "nw_protocol_test_add_input_handler";
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s failed to add input handler", buf, 0xCu);
      }
      return 0;
    }
    v61[0] = MEMORY[0x1E4F143A8];
    v61[1] = 0x40000000;
    v62 = ___ZL34nw_protocol_test_add_input_handlerP11nw_protocolS0__block_invoke;
    v63 = &__block_descriptor_tmp_24_85774;
    p_output_handler = &a1[1].output_handler;
    if (a1->handle != &nw_protocol_ref_counted_handle)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v68 = "nw_protocol_test_access_options";
      os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v65 = 0;
      if (!__nwlog_fault(v17, &type, &v65)) {
        goto LABEL_63;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (!os_log_type_enabled(v18, type)) {
          goto LABEL_63;
        }
        *(_DWORD *)buf = 136446210;
        v68 = "nw_protocol_test_access_options";
        __int16 v20 = "%{public}s called with null test";
      }
      else if (v65)
      {
        size_t v29 = (char *)__nw_create_backtrace_string();
        uint64_t v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        BOOL v57 = os_log_type_enabled(v18, type);
        if (v29)
        {
          if (v57)
          {
            *(_DWORD *)buf = 136446466;
            v68 = "nw_protocol_test_access_options";
            __int16 v69 = 2082;
            v70 = (nw_protocol_identifier *)v29;
            uint64_t v31 = "%{public}s called with null test, dumping backtrace:%{public}s";
            goto LABEL_45;
          }
          goto LABEL_46;
        }
        if (!v57) {
          goto LABEL_63;
        }
        *(_DWORD *)buf = 136446210;
        v68 = "nw_protocol_test_access_options";
        __int16 v20 = "%{public}s called with null test, no backtrace";
      }
      else
      {
        uint64_t v18 = __nwlog_obj();
        os_log_type_t v19 = type;
        if (!os_log_type_enabled(v18, type)) {
          goto LABEL_63;
        }
        *(_DWORD *)buf = 136446210;
        v68 = "nw_protocol_test_access_options";
        __int16 v20 = "%{public}s called with null test, backtrace limit exceeded";
      }
      goto LABEL_62;
    }
    callbacks = a1[1].callbacks;
    if (callbacks) {
      a1[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
    }
    int v4 = a1->callbacks;
    if (v4)
    {
      get_parameters = (uint64_t (*)(nw_protocol *))v4->get_parameters;
      if (get_parameters)
      {
        uint64_t v6 = (void *)get_parameters(a1);
LABEL_10:
        if (a1->handle == &nw_protocol_ref_counted_handle)
        {
          BOOL v13 = a1[1].callbacks;
          if (v13)
          {
            uint64_t v14 = (nw_protocol_callbacks *)((char *)v13 - 1);
            a1[1].callbacks = v14;
            if (!v14)
            {
              BOOL v15 = *(void (***)(void))a1[1].flow_id;
              if (v15)
              {
                *(void *)a1[1].flow_id = 0;
                v15[2](v15);
                _Block_release(v15);
              }
              if (a1[1].flow_id[8])
              {
                char v16 = *(const void **)a1[1].flow_id;
                if (v16) {
                  _Block_release(v16);
                }
              }
              free(a1);
            }
          }
        }
        if (v6)
        {
          if (nw_protocol_copy_test_definition::onceToken != -1) {
            dispatch_once(&nw_protocol_copy_test_definition::onceToken, &__block_literal_global_85364);
          }
          if (nw_protocol_copy_test_definition::test_definition)
          {
            uint64_t v7 = os_retain((void *)nw_protocol_copy_test_definition::test_definition);
            if (v7)
            {
              unsigned int v8 = v7;
              uint64_t v9 = nw_parameters_copy_protocol_options_for_definition(v6, v7);
              if (v9)
              {
                os_log_type_t v10 = v9;
                if (nw_protocol_options_is_test_protocol(v9))
                {
                  uint64_t v11 = v62((uint64_t)v61, v10);
LABEL_81:
                  os_release(v8);
                  os_release(v10);
                  return v11;
                }
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                *(_DWORD *)buf = 136446210;
                v68 = "nw_protocol_test_access_options";
                v25 = (char *)_os_log_send_and_compose_impl();
                os_log_type_t type = OS_LOG_TYPE_ERROR;
                char v65 = 0;
                if (__nwlog_fault(v25, &type, &v65))
                {
                  if (type == OS_LOG_TYPE_FAULT)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    uint64_t v26 = gLogObj;
                    os_log_type_t v27 = type;
                    if (os_log_type_enabled((os_log_t)gLogObj, type))
                    {
                      *(_DWORD *)buf = 136446210;
                      v68 = "nw_protocol_test_access_options";
                      __int16 v28 = "%{public}s Failed to copy test protocol options";
LABEL_76:
                      BOOL v43 = v26;
                      os_log_type_t v44 = v27;
LABEL_77:
                      _os_log_impl(&dword_1830D4000, v43, v44, v28, buf, 0xCu);
                    }
                  }
                  else if (v65)
                  {
                    uint64_t v36 = (char *)__nw_create_backtrace_string();
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    os_log_type_t v37 = gLogObj;
                    os_log_type_t v38 = type;
                    BOOL v39 = os_log_type_enabled((os_log_t)gLogObj, type);
                    if (v36)
                    {
                      if (v39)
                      {
                        *(_DWORD *)buf = 136446466;
                        v68 = "nw_protocol_test_access_options";
                        __int16 v69 = 2082;
                        v70 = (nw_protocol_identifier *)v36;
                        _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s Failed to copy test protocol options, dumping backtrace:%{public}s", buf, 0x16u);
                      }
                      free(v36);
                      goto LABEL_78;
                    }
                    if (v39)
                    {
                      *(_DWORD *)buf = 136446210;
                      v68 = "nw_protocol_test_access_options";
                      __int16 v28 = "%{public}s Failed to copy test protocol options, no backtrace";
                      BOOL v43 = v37;
                      os_log_type_t v44 = v38;
                      goto LABEL_77;
                    }
                  }
                  else
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    uint64_t v26 = gLogObj;
                    os_log_type_t v27 = type;
                    if (os_log_type_enabled((os_log_t)gLogObj, type))
                    {
                      *(_DWORD *)buf = 136446210;
                      v68 = "nw_protocol_test_access_options";
                      __int16 v28 = "%{public}s Failed to copy test protocol options, backtrace limit exceeded";
                      goto LABEL_76;
                    }
                  }
                }
LABEL_78:
                if (v25) {
                  free(v25);
                }
                uint64_t v11 = 0;
                goto LABEL_81;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              *(_DWORD *)buf = 136446210;
              v68 = "nw_protocol_test_access_options";
              v21 = (char *)_os_log_send_and_compose_impl();
              os_log_type_t type = OS_LOG_TYPE_ERROR;
              char v65 = 0;
              if (!__nwlog_fault(v21, &type, &v65)) {
                goto LABEL_69;
              }
              if (type == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                uint64_t v22 = gLogObj;
                os_log_type_t v23 = type;
                if (os_log_type_enabled((os_log_t)gLogObj, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v68 = "nw_protocol_test_access_options";
                  uint64_t v24 = "%{public}s Failed to copy protocol options";
LABEL_67:
                  char v40 = v22;
                  os_log_type_t v41 = v23;
LABEL_68:
                  _os_log_impl(&dword_1830D4000, v40, v41, v24, buf, 0xCu);
                }
              }
              else if (v65)
              {
                __int16 v32 = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                uint64_t v33 = gLogObj;
                os_log_type_t v34 = type;
                BOOL v35 = os_log_type_enabled((os_log_t)gLogObj, type);
                if (v32)
                {
                  if (v35)
                  {
                    *(_DWORD *)buf = 136446466;
                    v68 = "nw_protocol_test_access_options";
                    __int16 v69 = 2082;
                    v70 = (nw_protocol_identifier *)v32;
                    _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s Failed to copy protocol options, dumping backtrace:%{public}s", buf, 0x16u);
                  }
                  free(v32);
                  goto LABEL_69;
                }
                if (v35)
                {
                  *(_DWORD *)buf = 136446210;
                  v68 = "nw_protocol_test_access_options";
                  uint64_t v24 = "%{public}s Failed to copy protocol options, no backtrace";
                  char v40 = v33;
                  os_log_type_t v41 = v34;
                  goto LABEL_68;
                }
              }
              else
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                uint64_t v22 = gLogObj;
                os_log_type_t v23 = type;
                if (os_log_type_enabled((os_log_t)gLogObj, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v68 = "nw_protocol_test_access_options";
                  uint64_t v24 = "%{public}s Failed to copy protocol options, backtrace limit exceeded";
                  goto LABEL_67;
                }
              }
LABEL_69:
              if (v21) {
                free(v21);
              }
              os_release(v8);
              return 0;
            }
          }
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          v68 = "nw_protocol_test_access_options";
          os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v65 = 0;
          if (__nwlog_fault(v17, &type, &v65))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              uint64_t v18 = __nwlog_obj();
              os_log_type_t v19 = type;
              if (!os_log_type_enabled(v18, type)) {
                goto LABEL_63;
              }
              *(_DWORD *)buf = 136446210;
              v68 = "nw_protocol_test_access_options";
              __int16 v20 = "%{public}s called with null definition";
              goto LABEL_62;
            }
            if (!v65)
            {
              uint64_t v18 = __nwlog_obj();
              os_log_type_t v19 = type;
              if (!os_log_type_enabled(v18, type)) {
                goto LABEL_63;
              }
              *(_DWORD *)buf = 136446210;
              v68 = "nw_protocol_test_access_options";
              __int16 v20 = "%{public}s called with null definition, backtrace limit exceeded";
              goto LABEL_62;
            }
            size_t v29 = (char *)__nw_create_backtrace_string();
            uint64_t v18 = __nwlog_obj();
            os_log_type_t v19 = type;
            BOOL v30 = os_log_type_enabled(v18, type);
            if (!v29)
            {
              if (!v30) {
                goto LABEL_63;
              }
              *(_DWORD *)buf = 136446210;
              v68 = "nw_protocol_test_access_options";
              __int16 v20 = "%{public}s called with null definition, no backtrace";
              goto LABEL_62;
            }
            if (v30)
            {
              *(_DWORD *)buf = 136446466;
              v68 = "nw_protocol_test_access_options";
              __int16 v69 = 2082;
              v70 = (nw_protocol_identifier *)v29;
              uint64_t v31 = "%{public}s called with null definition, dumping backtrace:%{public}s";
LABEL_45:
              _os_log_impl(&dword_1830D4000, v18, v19, v31, buf, 0x16u);
              goto LABEL_46;
            }
            goto LABEL_46;
          }
          goto LABEL_63;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v68 = "nw_protocol_test_access_options";
        os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v65 = 0;
        if (!__nwlog_fault(v17, &type, &v65)) {
          goto LABEL_63;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          uint64_t v18 = __nwlog_obj();
          os_log_type_t v19 = type;
          if (!os_log_type_enabled(v18, type)) {
            goto LABEL_63;
          }
          *(_DWORD *)buf = 136446210;
          v68 = "nw_protocol_test_access_options";
          __int16 v20 = "%{public}s called with null parameters";
        }
        else if (v65)
        {
          size_t v29 = (char *)__nw_create_backtrace_string();
          uint64_t v18 = __nwlog_obj();
          os_log_type_t v19 = type;
          BOOL v58 = os_log_type_enabled(v18, type);
          if (v29)
          {
            if (v58)
            {
              *(_DWORD *)buf = 136446466;
              v68 = "nw_protocol_test_access_options";
              __int16 v69 = 2082;
              v70 = (nw_protocol_identifier *)v29;
              uint64_t v31 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
              goto LABEL_45;
            }
            goto LABEL_46;
          }
          if (!v58) {
            goto LABEL_63;
          }
          *(_DWORD *)buf = 136446210;
          v68 = "nw_protocol_test_access_options";
          __int16 v20 = "%{public}s called with null parameters, no backtrace";
        }
        else
        {
          uint64_t v18 = __nwlog_obj();
          os_log_type_t v19 = type;
          if (!os_log_type_enabled(v18, type)) {
            goto LABEL_63;
          }
          *(_DWORD *)buf = 136446210;
          v68 = "nw_protocol_test_access_options";
          __int16 v20 = "%{public}s called with null parameters, backtrace limit exceeded";
        }
LABEL_62:
        _os_log_impl(&dword_1830D4000, v18, v19, v20, buf, 0xCu);
        goto LABEL_63;
      }
    }
    __nwlog_obj();
    identifier = a1->identifier;
    *(_DWORD *)buf = 136446722;
    v68 = "__nw_protocol_get_parameters";
    if (!identifier) {
      identifier = (nw_protocol_identifier *)"invalid";
    }
    __int16 v69 = 2082;
    v70 = identifier;
    __int16 v71 = 2048;
    v72 = a1;
    v46 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v65 = 0;
    if (__nwlog_fault(v46, &type, &v65))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v47 = __nwlog_obj();
        os_log_type_t v48 = type;
        if (os_log_type_enabled(v47, type))
        {
          __int16 v49 = a1->identifier;
          if (!v49) {
            __int16 v49 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)buf = 136446722;
          v68 = "__nw_protocol_get_parameters";
          __int16 v69 = 2082;
          v70 = v49;
          __int16 v71 = 2048;
          v72 = a1;
          v50 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback";
LABEL_151:
          _os_log_impl(&dword_1830D4000, v47, v48, v50, buf, 0x20u);
        }
      }
      else if (v65)
      {
        __int16 v54 = (char *)__nw_create_backtrace_string();
        __int16 v47 = __nwlog_obj();
        os_log_type_t v48 = type;
        BOOL v55 = os_log_type_enabled(v47, type);
        if (v54)
        {
          if (v55)
          {
            if (a1->identifier) {
              __int16 v56 = a1->identifier;
            }
            else {
              __int16 v56 = (nw_protocol_identifier *)"invalid";
            }
            *(_DWORD *)buf = 136446978;
            v68 = "__nw_protocol_get_parameters";
            __int16 v69 = 2082;
            v70 = v56;
            __int16 v71 = 2048;
            v72 = a1;
            __int16 v73 = 2082;
            v74 = v54;
            _os_log_impl(&dword_1830D4000, v47, v48, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v54);
          goto LABEL_152;
        }
        if (v55)
        {
          v60 = a1->identifier;
          if (!v60) {
            v60 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)buf = 136446722;
          v68 = "__nw_protocol_get_parameters";
          __int16 v69 = 2082;
          v70 = v60;
          __int16 v71 = 2048;
          v72 = a1;
          v50 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace";
          goto LABEL_151;
        }
      }
      else
      {
        __int16 v47 = __nwlog_obj();
        os_log_type_t v48 = type;
        if (os_log_type_enabled(v47, type))
        {
          v59 = a1->identifier;
          if (!v59) {
            v59 = (nw_protocol_identifier *)"invalid";
          }
          *(_DWORD *)buf = 136446722;
          v68 = "__nw_protocol_get_parameters";
          __int16 v69 = 2082;
          v70 = v59;
          __int16 v71 = 2048;
          v72 = a1;
          v50 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded";
          goto LABEL_151;
        }
      }
    }
LABEL_152:
    if (v46) {
      free(v46);
    }
    uint64_t v6 = 0;
    goto LABEL_10;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v68 = "nw_protocol_test_add_input_handler";
  os_log_type_t v17 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v65 = 0;
  if (!__nwlog_fault(v17, &type, &v65)) {
    goto LABEL_63;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (!os_log_type_enabled(v18, type)) {
      goto LABEL_63;
    }
    *(_DWORD *)buf = 136446210;
    v68 = "nw_protocol_test_add_input_handler";
    __int16 v20 = "%{public}s called with null test";
    goto LABEL_62;
  }
  if (!v65)
  {
    uint64_t v18 = __nwlog_obj();
    os_log_type_t v19 = type;
    if (!os_log_type_enabled(v18, type)) {
      goto LABEL_63;
    }
    *(_DWORD *)buf = 136446210;
    v68 = "nw_protocol_test_add_input_handler";
    __int16 v20 = "%{public}s called with null test, backtrace limit exceeded";
    goto LABEL_62;
  }
  size_t v29 = (char *)__nw_create_backtrace_string();
  uint64_t v18 = __nwlog_obj();
  os_log_type_t v19 = type;
  BOOL v53 = os_log_type_enabled(v18, type);
  if (v29)
  {
    if (v53)
    {
      *(_DWORD *)buf = 136446466;
      v68 = "nw_protocol_test_add_input_handler";
      __int16 v69 = 2082;
      v70 = (nw_protocol_identifier *)v29;
      uint64_t v31 = "%{public}s called with null test, dumping backtrace:%{public}s";
      goto LABEL_45;
    }
LABEL_46:
    free(v29);
    if (!v17) {
      return 0;
    }
    goto LABEL_64;
  }
  if (v53)
  {
    *(_DWORD *)buf = 136446210;
    v68 = "nw_protocol_test_add_input_handler";
    __int16 v20 = "%{public}s called with null test, no backtrace";
    goto LABEL_62;
  }
LABEL_63:
  if (v17) {
LABEL_64:
  }
    free(v17);
  return 0;
}

uint64_t ___ZL34nw_protocol_test_add_input_handlerP11nw_protocolS0__block_invoke(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (nw_protocol_options_is_test_protocol(a2))
  {
    *(void *)os_log_type_t type = 0;
    BOOL v15 = type;
    uint64_t v16 = 0x2000000000;
    uint64_t v17 = 0;
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 0x40000000;
    *(void *)&buf[16] = ___ZL38nw_protocol_test_options_get_test_modeP19nw_protocol_options_block_invoke;
    __int16 v20 = &unk_1E524AC60;
    v21 = type;
    nw_protocol_options_access_handle(a2, buf);
    uint64_t v4 = *((void *)v15 + 3);
    _Block_object_dispose(type, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode";
  unsigned int v8 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v8, type, &v18))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode";
        uint64_t v11 = "%{public}s protocol options are not test protocol";
LABEL_19:
        _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type[0];
      BOOL v13 = os_log_type_enabled(v9, type[0]);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s protocol options are not test protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode";
        uint64_t v11 = "%{public}s protocol options are not test protocol, no backtrace";
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode";
        uint64_t v11 = "%{public}s protocol options are not test protocol, backtrace limit exceeded";
        goto LABEL_19;
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
  uint64_t v4 = 0;
LABEL_3:
  **(void **)(a1 + 32) = v4;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v5 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
  {
    uint64_t v6 = **(void **)(a1 + 32);
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_test_add_input_handler_block_invoke";
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v6;
    _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_INFO, "%{public}s Got test mode flags: %llu", buf, 0x16u);
  }
  return 1;
}

uint64_t ___ZL38nw_protocol_test_options_get_test_modeP19nw_protocol_options_block_invoke(uint64_t a1, void *a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a2;
  return 1;
}

NWConcrete_nw_protocol_options *nw_protocol_test_create_options()
{
  if (nw_protocol_copy_test_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_test_definition::onceToken, &__block_literal_global_85364);
  }
  if (nw_protocol_copy_test_definition::test_definition)
  {
    v0 = os_retain((void *)nw_protocol_copy_test_definition::test_definition);
    options = nw_protocol_create_options(v0);
    if (v0) {
      os_release(v0);
    }
    return options;
  }
  else
  {
    return nw_protocol_create_options(0);
  }
}

void nw_protocol_test_options_set_test_mode(void *a1, int a2, char a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (nw_protocol_options_is_test_protocol(a1))
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 0x40000000;
    v12[2] = __nw_protocol_test_options_set_test_mode_block_invoke;
    v12[3] = &__block_descriptor_tmp_6_85787;
    char v14 = a3;
    int v13 = a2;
    nw_protocol_options_access_handle(a1, v12);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v18 = "nw_protocol_test_options_set_test_mode";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v16 = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v6, &v16, &v15))
  {
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = v16;
      if (!os_log_type_enabled(v7, v16)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      char v18 = "nw_protocol_test_options_set_test_mode";
      uint64_t v9 = "%{public}s protocol options are not test protocol";
      goto LABEL_17;
    }
    if (!v15)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = v16;
      if (!os_log_type_enabled(v7, v16)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      char v18 = "nw_protocol_test_options_set_test_mode";
      uint64_t v9 = "%{public}s protocol options are not test protocol, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = v16;
    BOOL v11 = os_log_type_enabled(v7, v16);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        char v18 = "nw_protocol_test_options_set_test_mode";
        __int16 v19 = 2082;
        __int16 v20 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s protocol options are not test protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      char v18 = "nw_protocol_test_options_set_test_mode";
      uint64_t v9 = "%{public}s protocol options are not test protocol, no backtrace";
LABEL_17:
      _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    }
  }
LABEL_18:
  if (v6) {
    free(v6);
  }
}

uint64_t __nw_protocol_test_options_set_test_mode_block_invoke(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 36)) {
    uint64_t v2 = *a2 | (1 << *(_DWORD *)(a1 + 32));
  }
  else {
    uint64_t v2 = 0;
  }
  *a2 = v2;
  return 1;
}

BOOL nw_protocol_test_options_get_test_mode_enabled(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (nw_protocol_options_is_test_protocol(a1))
    {
      *(void *)buf = 0;
      *(void *)&buf[8] = buf;
      *(void *)&buf[16] = 0x2000000000;
      char v19 = 0;
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 0x40000000;
      v14[2] = __nw_protocol_test_options_get_test_mode_enabled_block_invoke;
      v14[3] = &unk_1E524AB38;
      v14[4] = buf;
      int v15 = a2;
      nw_protocol_options_access_handle(a1, v14);
      BOOL v4 = *(unsigned char *)(*(void *)&buf[8] + 24) != 0;
      _Block_object_dispose(buf, 8);
      return v4;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode_enabled";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v16 = 0;
    if (!__nwlog_fault(v6, &type, &v16)) {
      goto LABEL_32;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode_enabled";
        uint64_t v9 = "%{public}s protocol options are not test protocol";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (!v16)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode_enabled";
        uint64_t v9 = "%{public}s protocol options are not test protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode_enabled";
        uint64_t v9 = "%{public}s protocol options are not test protocol, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode_enabled";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      uint64_t v12 = "%{public}s protocol options are not test protocol, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode_enabled";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (!__nwlog_fault(v6, &type, &v16)) {
    goto LABEL_32;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v16)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode_enabled";
        uint64_t v9 = "%{public}s called with null mode, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode_enabled";
        uint64_t v9 = "%{public}s called with null mode, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode_enabled";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      uint64_t v12 = "%{public}s called with null mode, dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_1830D4000, v7, v8, v12, buf, 0x16u);
    }
LABEL_22:
    free(backtrace_string);
    goto LABEL_32;
  }
  uint64_t v7 = __nwlog_obj();
  os_log_type_t v8 = type;
  if (os_log_type_enabled(v7, type))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_test_options_get_test_mode_enabled";
    uint64_t v9 = "%{public}s called with null mode";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
  }
LABEL_32:
  if (v6) {
    free(v6);
  }
  return 0;
}

uint64_t __nw_protocol_test_options_get_test_mode_enabled_block_invoke(uint64_t a1, void *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*a2 & (1 << *(_DWORD *)(a1 + 40))) != 0;
  return 1;
}

void nw_protocol_test_options_set_finalize_output_frames_handler(void *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (nw_protocol_options_is_test_protocol(a1))
  {
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 0x40000000;
    v10[2] = __nw_protocol_test_options_set_finalize_output_frames_handler_block_invoke;
    v10[3] = &unk_1E524AB60;
    v10[4] = a2;
    nw_protocol_options_access_handle(a1, v10);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v14 = "nw_protocol_test_options_set_finalize_output_frames_handler";
  BOOL v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v12 = OS_LOG_TYPE_ERROR;
  char v11 = 0;
  if (__nwlog_fault(v4, &v12, &v11))
  {
    if (v12 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = v12;
      if (!os_log_type_enabled(v5, v12)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_test_options_set_finalize_output_frames_handler";
      uint64_t v7 = "%{public}s protocol options are not test protocol";
      goto LABEL_17;
    }
    if (!v11)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = v12;
      if (!os_log_type_enabled(v5, v12)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_test_options_set_finalize_output_frames_handler";
      uint64_t v7 = "%{public}s protocol options are not test protocol, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = v12;
    BOOL v9 = os_log_type_enabled(v5, v12);
    if (backtrace_string)
    {
      if (v9)
      {
        *(_DWORD *)buf = 136446466;
        char v14 = "nw_protocol_test_options_set_finalize_output_frames_handler";
        __int16 v15 = 2082;
        char v16 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s protocol options are not test protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446210;
      char v14 = "nw_protocol_test_options_set_finalize_output_frames_handler";
      uint64_t v7 = "%{public}s protocol options are not test protocol, no backtrace";
LABEL_17:
      _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    }
  }
LABEL_18:
  if (v4) {
    free(v4);
  }
}

uint64_t __nw_protocol_test_options_set_finalize_output_frames_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    BOOL v4 = _Block_copy(v3);
    char v5 = *(unsigned char *)(a2 + 16);
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
  }
  else
  {
    BOOL v4 = 0;
    char v5 = *(unsigned char *)(a2 + 16);
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
  }
  os_log_type_t v6 = *(const void **)(a2 + 8);
  if (v6)
  {
    _Block_release(v6);
    char v5 = *(unsigned char *)(a2 + 16);
  }
LABEL_7:
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v5 | 1;
  return 1;
}

void nw_protocol_test_options_set_event_handler(void *a1, int a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v21 = "nw_protocol_test_options_set_event_handler";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v19 = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (!__nwlog_fault(v6, &v19, &v18)) {
      goto LABEL_47;
    }
    if (v19 != OS_LOG_TYPE_FAULT)
    {
      if (!v18)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = v19;
        if (!os_log_type_enabled(v7, v19)) {
          goto LABEL_47;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_protocol_test_options_set_event_handler";
        BOOL v9 = "%{public}s called with null options, backtrace limit exceeded";
        goto LABEL_46;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = v19;
      BOOL v11 = os_log_type_enabled(v7, v19);
      if (!backtrace_string)
      {
        if (!v11) {
          goto LABEL_47;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_protocol_test_options_set_event_handler";
        BOOL v9 = "%{public}s called with null options, no backtrace";
        goto LABEL_46;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v21 = "nw_protocol_test_options_set_event_handler";
        __int16 v22 = 2082;
        os_log_type_t v23 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_47;
    }
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = v19;
    if (!os_log_type_enabled(v7, v19)) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v21 = "nw_protocol_test_options_set_event_handler";
    BOOL v9 = "%{public}s called with null options";
LABEL_46:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    goto LABEL_47;
  }
  char v3 = a2;
  if (a2)
  {
    if (nw_protocol_options_is_test_protocol(a1))
    {
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 0x40000000;
      v16[2] = __nw_protocol_test_options_set_event_handler_block_invoke;
      v16[3] = &unk_1E524ABB0;
      char v17 = v3;
      v16[4] = a3;
      nw_protocol_options_access_handle(a1, v16);
      return;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v21 = "nw_protocol_test_options_set_event_handler";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v19 = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v6, &v19, &v18))
    {
      if (v19 == OS_LOG_TYPE_FAULT)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = v19;
        if (!os_log_type_enabled(v7, v19)) {
          goto LABEL_47;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_protocol_test_options_set_event_handler";
        BOOL v9 = "%{public}s protocol options are not test protocol";
        goto LABEL_46;
      }
      if (!v18)
      {
        uint64_t v7 = __nwlog_obj();
        os_log_type_t v8 = v19;
        if (!os_log_type_enabled(v7, v19)) {
          goto LABEL_47;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_protocol_test_options_set_event_handler";
        BOOL v9 = "%{public}s protocol options are not test protocol, backtrace limit exceeded";
        goto LABEL_46;
      }
      os_log_type_t v12 = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = v19;
      BOOL v15 = os_log_type_enabled(v7, v19);
      if (!v12)
      {
        if (!v15) {
          goto LABEL_47;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v21 = "nw_protocol_test_options_set_event_handler";
        BOOL v9 = "%{public}s protocol options are not test protocol, no backtrace";
        goto LABEL_46;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v21 = "nw_protocol_test_options_set_event_handler";
        __int16 v22 = 2082;
        os_log_type_t v23 = v12;
        char v14 = "%{public}s protocol options are not test protocol, dumping backtrace:%{public}s";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
LABEL_47:
    if (v6) {
      goto LABEL_48;
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v21 = "nw_protocol_test_options_set_event_handler";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v19 = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (!__nwlog_fault(v6, &v19, &v18)) {
    goto LABEL_47;
  }
  if (v19 == OS_LOG_TYPE_FAULT)
  {
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = v19;
    if (!os_log_type_enabled(v7, v19)) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v21 = "nw_protocol_test_options_set_event_handler";
    BOOL v9 = "%{public}s called with null event";
    goto LABEL_46;
  }
  if (!v18)
  {
    uint64_t v7 = __nwlog_obj();
    os_log_type_t v8 = v19;
    if (!os_log_type_enabled(v7, v19)) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v21 = "nw_protocol_test_options_set_event_handler";
    BOOL v9 = "%{public}s called with null event, backtrace limit exceeded";
    goto LABEL_46;
  }
  os_log_type_t v12 = (char *)__nw_create_backtrace_string();
  uint64_t v7 = __nwlog_obj();
  os_log_type_t v8 = v19;
  BOOL v13 = os_log_type_enabled(v7, v19);
  if (!v12)
  {
    if (!v13) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v21 = "nw_protocol_test_options_set_event_handler";
    BOOL v9 = "%{public}s called with null event, no backtrace";
    goto LABEL_46;
  }
  if (v13)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v21 = "nw_protocol_test_options_set_event_handler";
    __int16 v22 = 2082;
    os_log_type_t v23 = v12;
    char v14 = "%{public}s called with null event, dumping backtrace:%{public}s";
LABEL_31:
    _os_log_impl(&dword_1830D4000, v7, v8, v14, buf, 0x16u);
  }
LABEL_32:
  free(v12);
  if (v6) {
LABEL_48:
  }
    free(v6);
}

uint64_t __nw_protocol_test_options_set_event_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 40) == 1)
  {
    uint64_t v7 = *(const void **)(a1 + 32);
    if (v7)
    {
      os_log_type_t v8 = _Block_copy(v7);
      char v9 = *(unsigned char *)(a2 + 32);
      if ((v9 & 1) == 0) {
        goto LABEL_18;
      }
    }
    else
    {
      os_log_type_t v8 = 0;
      char v9 = *(unsigned char *)(a2 + 32);
      if ((v9 & 1) == 0)
      {
LABEL_18:
        *(void *)(a2 + 24) = v8;
        *(unsigned char *)(a2 + 32) = v9 | 1;
        return 1;
      }
    }
    char v14 = *(const void **)(a2 + 24);
    if (v14)
    {
      _Block_release(v14);
      char v9 = *(unsigned char *)(a2 + 32);
    }
    goto LABEL_18;
  }
  if (*(unsigned char *)(a1 + 40)) {
    return 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v21 = "nw_protocol_test_options_set_event_handler_block_invoke";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v18 = 0;
  if (__nwlog_fault(v2, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = gLogObj;
      os_log_type_t v4 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_23;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v21 = "nw_protocol_test_options_set_event_handler_block_invoke";
      char v5 = "%{public}s Invalid event supplied";
LABEL_21:
      BOOL v15 = v3;
      os_log_type_t v16 = v4;
LABEL_22:
      _os_log_impl(&dword_1830D4000, v15, v16, v5, buf, 0xCu);
      goto LABEL_23;
    }
    if (!v18)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v3 = gLogObj;
      os_log_type_t v4 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_23;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v21 = "nw_protocol_test_options_set_event_handler_block_invoke";
      char v5 = "%{public}s Invalid event supplied, backtrace limit exceeded";
      goto LABEL_21;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v11 = gLogObj;
    os_log_type_t v12 = type;
    BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v21 = "nw_protocol_test_options_set_event_handler_block_invoke";
        __int16 v22 = 2082;
        os_log_type_t v23 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s Invalid event supplied, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_23;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v21 = "nw_protocol_test_options_set_event_handler_block_invoke";
      char v5 = "%{public}s Invalid event supplied, no backtrace";
      BOOL v15 = v11;
      os_log_type_t v16 = v12;
      goto LABEL_22;
    }
  }
LABEL_23:
  if (v2) {
    free(v2);
  }
  return 1;
}

void nw_protocol_test_options_set_message_properties(void *a1, int a2, char a3, char a4, char a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (nw_protocol_options_is_test_protocol(a1))
  {
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 0x40000000;
    v16[2] = __nw_protocol_test_options_set_message_properties_block_invoke;
    v16[3] = &__block_descriptor_tmp_12_85831;
    int v17 = a2;
    char v18 = a3;
    char v19 = a4;
    char v20 = a5;
    nw_protocol_options_access_handle(a1, v16);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v24 = "nw_protocol_test_options_set_message_properties";
  os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (__nwlog_fault(v10, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_protocol_test_options_set_message_properties";
      BOOL v13 = "%{public}s protocol options are not test protocol";
      goto LABEL_17;
    }
    if (!v21)
    {
      BOOL v11 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (!os_log_type_enabled(v11, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_protocol_test_options_set_message_properties";
      BOOL v13 = "%{public}s protocol options are not test protocol, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v11 = __nwlog_obj();
    os_log_type_t v12 = type;
    BOOL v15 = os_log_type_enabled(v11, type);
    if (backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v24 = "nw_protocol_test_options_set_message_properties";
        __int16 v25 = 2082;
        uint64_t v26 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s protocol options are not test protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v24 = "nw_protocol_test_options_set_message_properties";
      BOOL v13 = "%{public}s protocol options are not test protocol, no backtrace";
LABEL_17:
      _os_log_impl(&dword_1830D4000, v11, v12, v13, buf, 0xCu);
    }
  }
LABEL_18:
  if (v10) {
    free(v10);
  }
}

uint64_t __nw_protocol_test_options_set_message_properties_block_invoke(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 44) | 1;
  *(unsigned char *)(a2 + 44) = v2;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 32);
  char v3 = v2 & 0xFD | (2 * *(unsigned char *)(a1 + 36));
  *(unsigned char *)(a2 + 44) = v3;
  char v4 = v3 & 0xFB | (4 * *(unsigned char *)(a1 + 37));
  *(unsigned char *)(a2 + 44) = v4;
  *(unsigned char *)(a2 + 44) = v4 & 0xF7 | (8 * *(unsigned char *)(a1 + 38));
  return 1;
}

id *nw_protocol_test_create_metadata()
{
  if (nw_protocol_copy_test_definition::onceToken != -1) {
    dispatch_once(&nw_protocol_copy_test_definition::onceToken, &__block_literal_global_85364);
  }
  if (nw_protocol_copy_test_definition::test_definition)
  {
    v0 = os_retain((void *)nw_protocol_copy_test_definition::test_definition);
    singleton = nw_protocol_metadata_create_singleton(v0);
    if (v0) {
      os_release(v0);
    }
    return singleton;
  }
  else
  {
    return nw_protocol_metadata_create_singleton(0);
  }
}

BOOL nw_protocol_metadata_is_test_protocol(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    v1 = a1;
    id v2 = v1[1];

    if (nw_protocol_copy_test_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_test_definition::onceToken, &__block_literal_global_85364);
    }
    if (nw_protocol_copy_test_definition::test_definition) {
      char v3 = os_retain((void *)nw_protocol_copy_test_definition::test_definition);
    }
    else {
      char v3 = 0;
    }
    BOOL is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, (uint64_t)v3);
    if (v2) {
      os_release(v2);
    }
    if (v3) {
      os_release(v3);
    }
    return is_equal_unsafe;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v15 = "nw_protocol_metadata_is_test_protocol";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_protocol_metadata_is_test_protocol";
        char v9 = "%{public}s called with null metadata";
LABEL_25:
        _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v15 = "nw_protocol_metadata_is_test_protocol";
          __int16 v16 = 2082;
          int v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_26;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_protocol_metadata_is_test_protocol";
        char v9 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_protocol_metadata_is_test_protocol";
        char v9 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_25;
      }
    }
  }
LABEL_26:
  if (v6) {
    free(v6);
  }
  return 0;
}

void sub_183CF4250(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_183CF42D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_183CF432C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_183CF4D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_183CF4F80(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

const char *nw_browse_descriptor_get_description(void *a1, int a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  char v3 = a1;
  char v4 = v3;
  if (!v3)
  {
    os_log_type_t v8 = "<NULL>";
    goto LABEL_15;
  }
  uint64_t v5 = 8;
  if (a2) {
    uint64_t v5 = 10;
  }
  os_log_type_t v6 = (const char **)&v3[v5];
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __nw_browse_descriptor_get_description_block_invoke;
  aBlock[3] = &unk_1E524AE68;
  __int16 v22 = &v3[v5];
  char v21 = v3;
  char v23 = a2;
  uint64_t v7 = (void (**)(void))_Block_copy(aBlock);
  os_unfair_lock_lock(v4 + 12);
  v7[2](v7);
  os_unfair_lock_unlock(v4 + 12);

  os_log_type_t v8 = *v6;
  if (!*v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    __int16 v25 = "nw_browse_descriptor_get_description";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v18 = 0;
    if (__nwlog_fault(v10, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v11 = (id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v25 = "nw_browse_descriptor_get_description";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s description is NULL", buf, 0xCu);
        }
      }
      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v11 = (id)gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v25 = "nw_browse_descriptor_get_description";
            __int16 v26 = 2082;
            uint64_t v27 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v15, "%{public}s description is NULL, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v10) {
            goto LABEL_12;
          }
          goto LABEL_11;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v25 = "nw_browse_descriptor_get_description";
          _os_log_impl(&dword_1830D4000, v11, v15, "%{public}s description is NULL, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v11 = (id)gLogObj;
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v25 = "nw_browse_descriptor_get_description";
          _os_log_impl(&dword_1830D4000, v11, v17, "%{public}s description is NULL, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v10)
    {
LABEL_12:
      os_log_type_t v8 = "?";
      goto LABEL_13;
    }
LABEL_11:
    free(v10);
    goto LABEL_12;
  }
LABEL_13:

LABEL_15:
  return v8;
}

void sub_183CF5458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_browse_descriptor_get_description_block_invoke(uint64_t result)
{
  v1 = *(char ***)(result + 40);
  if (!*v1)
  {
    uint64_t v2 = *(void *)(result + 32);
    int v3 = *(_DWORD *)(v2 + 8);
    if (v3 == 2)
    {
      return asprintf(v1, "<nw_browse_descriptor application_service %s bundle_id=%s device_types=%x>");
    }
    else if (v3 == 1)
    {
      uint64_t v5 = *(const char **)(v2 + 24);
      if (*(unsigned char *)(result + 48) && v5 && strcmp(*(const char **)(v2 + 24), "local")) {
        strcmp(v5, "local.");
      }
      return asprintf(v1, "<nw_browse_descriptor bonjour %s.%s %s>");
    }
    else if (v3)
    {
      return asprintf(v1, "<nw_browse_descriptor custom type %d>");
    }
    else
    {
      char v4 = *(char ***)(result + 40);
      return asprintf(v4, "<nw_browse_descriptor invalid>");
    }
  }
  return result;
}

nw_browse_descriptor_t nw_browse_descriptor_create_bonjour_service(const char *type, const char *domain)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (!type)
  {
    char v19 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_browse_descriptor_create_bonjour_service";
    char v20 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t typea = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (__nwlog_fault(v20, &typea, &v31))
    {
      if (typea == OS_LOG_TYPE_FAULT)
      {
        char v21 = __nwlog_obj();
        os_log_type_t v22 = typea;
        if (os_log_type_enabled(v21, typea))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v34 = "nw_browse_descriptor_create_bonjour_service";
          _os_log_impl(&dword_1830D4000, v21, v22, "%{public}s called with null type", buf, 0xCu);
        }
      }
      else if (v31)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v21 = __nwlog_obj();
        os_log_type_t v26 = typea;
        BOOL v27 = os_log_type_enabled(v21, typea);
        if (backtrace_string)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v34 = "nw_browse_descriptor_create_bonjour_service";
            __int16 v35 = 2082;
            uint64_t v36 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v21, v26, "%{public}s called with null type, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_51;
        }
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v34 = "nw_browse_descriptor_create_bonjour_service";
          _os_log_impl(&dword_1830D4000, v21, v26, "%{public}s called with null type, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        char v21 = __nwlog_obj();
        os_log_type_t v30 = typea;
        if (os_log_type_enabled(v21, typea))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v34 = "nw_browse_descriptor_create_bonjour_service";
          _os_log_impl(&dword_1830D4000, v21, v30, "%{public}s called with null type, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_51:
    if (v20) {
      free(v20);
    }
    return 0;
  }
  char v4 = objc_alloc_init(NWConcrete_nw_browse_descriptor);
  uint64_t v5 = v4;
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "nw_browse_descriptor_create_bonjour_service";
    BOOL v11 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t typea = OS_LOG_TYPE_ERROR;
    char v31 = 0;
    if (__nwlog_fault(v11, &typea, &v31))
    {
      if (typea == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (id)gLogObj;
        os_log_type_t v13 = typea;
        if (os_log_type_enabled(v12, typea))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v34 = "nw_browse_descriptor_create_bonjour_service";
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s [nw_browse_descriptor init] failed", buf, 0xCu);
        }
      }
      else if (v31)
      {
        os_log_type_t v15 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (id)gLogObj;
        os_log_type_t v16 = typea;
        BOOL v17 = os_log_type_enabled(v12, typea);
        if (v15)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v34 = "nw_browse_descriptor_create_bonjour_service";
            __int16 v35 = 2082;
            uint64_t v36 = v15;
            _os_log_impl(&dword_1830D4000, v12, v16, "%{public}s [nw_browse_descriptor init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v15);
          if (!v11) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v34 = "nw_browse_descriptor_create_bonjour_service";
          _os_log_impl(&dword_1830D4000, v12, v16, "%{public}s [nw_browse_descriptor init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v12 = (id)gLogObj;
        os_log_type_t v18 = typea;
        if (os_log_type_enabled(v12, typea))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v34 = "nw_browse_descriptor_create_bonjour_service";
          _os_log_impl(&dword_1830D4000, v12, v18, "%{public}s [nw_browse_descriptor init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v11) {
      goto LABEL_17;
    }
LABEL_16:
    free(v11);
    goto LABEL_17;
  }
  *((_DWORD *)v4 + 2) = 1;
  os_log_type_t v6 = strdup(type);
  if (!v6)
  {
    char v23 = __nwlog_obj();
    os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    os_log_type_t v34 = "strict_strdup";
    uint64_t v24 = (void *)_os_log_send_and_compose_impl();

    nw_browse_descriptor_t result = (nw_browse_descriptor_t)__nwlog_abort((uint64_t)v24);
    if (result) {
      goto LABEL_54;
    }
    free(v24);
  }
  *((void *)v5 + 2) = v6;
  size_t v7 = strlen(type) - 1;
  if (type[v7] == 46) {
    v6[v7] = 0;
  }
  if (!domain) {
    goto LABEL_9;
  }
  os_log_type_t v8 = strdup(domain);
  if (v8)
  {
LABEL_8:
    *((void *)v5 + 3) = v8;
LABEL_9:
    *((unsigned char *)v5 + 112) &= ~1u;
    id v9 = v5;
LABEL_17:

    return (nw_browse_descriptor_t)v5;
  }
  uint64_t v28 = __nwlog_obj();
  os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  os_log_type_t v34 = "strict_strdup";
  size_t v29 = (void *)_os_log_send_and_compose_impl();

  nw_browse_descriptor_t result = (nw_browse_descriptor_t)__nwlog_abort((uint64_t)v29);
  if (!result)
  {
    free(v29);
    goto LABEL_8;
  }
LABEL_54:
  __break(1u);
  return result;
}

const char *__cdecl nw_browse_descriptor_get_bonjour_service_type(nw_browse_descriptor_t descriptor)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_browse_descriptor_t v1 = descriptor;
  nw_browse_descriptor_t v2 = v1;
  if (v1)
  {
    isa = (const char *)v1[2].isa;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_browse_descriptor_get_bonjour_service_type";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_bonjour_service_type";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_browse_descriptor_get_bonjour_service_type";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_bonjour_service_type";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      size_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_bonjour_service_type";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  isa = 0;
LABEL_3:

  return isa;
}

const char *__cdecl nw_browse_descriptor_get_bonjour_service_domain(nw_browse_descriptor_t descriptor)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_browse_descriptor_t v1 = descriptor;
  nw_browse_descriptor_t v2 = v1;
  if (v1)
  {
    isa = (const char *)v1[3].isa;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_browse_descriptor_get_bonjour_service_domain";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      size_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_bonjour_service_domain";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      size_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_browse_descriptor_get_bonjour_service_domain";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_bonjour_service_domain";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      size_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_bonjour_service_domain";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  isa = 0;
LABEL_3:

  return isa;
}

BOOL nw_browse_descriptor_create_application_service_with_bundle_id(const char *a1, const char *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    os_log_type_t v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v33 = "nw_browse_descriptor_create_application_service_with_bundle_id";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v19, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        char v20 = __nwlog_obj();
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v33 = "nw_browse_descriptor_create_application_service_with_bundle_id";
          _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null application_service_name", buf, 0xCu);
        }
      }
      else if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        char v20 = __nwlog_obj();
        os_log_type_t v25 = type;
        BOOL v26 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v33 = "nw_browse_descriptor_create_application_service_with_bundle_id";
            __int16 v34 = 2082;
            __int16 v35 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null application_service_name, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_50;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v33 = "nw_browse_descriptor_create_application_service_with_bundle_id";
          _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null application_service_name, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        char v20 = __nwlog_obj();
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v33 = "nw_browse_descriptor_create_application_service_with_bundle_id";
          _os_log_impl(&dword_1830D4000, v20, v29, "%{public}s called with null application_service_name, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_50:
    if (v19) {
      free(v19);
    }
    return 0;
  }
  char v4 = objc_alloc_init(NWConcrete_nw_browse_descriptor);
  uint64_t v5 = v4;
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    uint64_t v33 = "nw_browse_descriptor_create_application_service_with_bundle_id";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v30 = 0;
    if (__nwlog_fault(v10, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v11 = (id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v33 = "nw_browse_descriptor_create_application_service_with_bundle_id";
          _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s [nw_browse_descriptor init] failed", buf, 0xCu);
        }
      }
      else if (v30)
      {
        char v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v11 = (id)gLogObj;
        os_log_type_t v15 = type;
        BOOL v16 = os_log_type_enabled(v11, type);
        if (v14)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v33 = "nw_browse_descriptor_create_application_service_with_bundle_id";
            __int16 v34 = 2082;
            __int16 v35 = v14;
            _os_log_impl(&dword_1830D4000, v11, v15, "%{public}s [nw_browse_descriptor init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v14);
          if (!v10) {
            goto LABEL_15;
          }
          goto LABEL_14;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v33 = "nw_browse_descriptor_create_application_service_with_bundle_id";
          _os_log_impl(&dword_1830D4000, v11, v15, "%{public}s [nw_browse_descriptor init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v11 = (id)gLogObj;
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v33 = "nw_browse_descriptor_create_application_service_with_bundle_id";
          _os_log_impl(&dword_1830D4000, v11, v17, "%{public}s [nw_browse_descriptor init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v10) {
      goto LABEL_15;
    }
LABEL_14:
    free(v10);
    goto LABEL_15;
  }
  *((_DWORD *)v4 + 2) = 2;
  os_log_type_t v6 = strdup(a1);
  if (v6)
  {
    *((void *)v5 + 9) = v6;
    if (!a2)
    {
LABEL_7:
      os_log_type_t v8 = v5;
LABEL_15:

      return (BOOL)v5;
    }
  }
  else
  {
    os_log_type_t v22 = __nwlog_obj();
    os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    uint64_t v33 = "strict_strdup";
    char v23 = (void *)_os_log_send_and_compose_impl();

    BOOL result = __nwlog_abort((uint64_t)v23);
    if (result) {
      goto LABEL_53;
    }
    free(v23);
    *((void *)v5 + 9) = 0;
    if (!a2) {
      goto LABEL_7;
    }
  }
  size_t v7 = strdup(a2);
  if (v7)
  {
LABEL_6:
    *((void *)v5 + 10) = v7;
    goto LABEL_7;
  }
  BOOL v27 = __nwlog_obj();
  os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  uint64_t v33 = "strict_strdup";
  uint64_t v28 = (void *)_os_log_send_and_compose_impl();

  BOOL result = __nwlog_abort((uint64_t)v28);
  if (!result)
  {
    free(v28);
    goto LABEL_6;
  }
LABEL_53:
  __break(1u);
  return result;
}

nw_browse_descriptor_t nw_browse_descriptor_create_application_service(const char *application_service_name)
{
  if (nw_utilities_get_self_name::onceToken != -1) {
    dispatch_once(&nw_utilities_get_self_name::onceToken, &__block_literal_global_11_44681);
  }
  nw_browse_descriptor_t v2 = (const char *)nw_utilities_get_self_name::name;

  return (nw_browse_descriptor_t)nw_browse_descriptor_create_application_service_with_bundle_id(application_service_name, v2);
}

const char *__cdecl nw_browse_descriptor_get_application_service_name(nw_browse_descriptor_t descriptor)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  nw_browse_descriptor_t v1 = descriptor;
  nw_browse_descriptor_t v2 = v1;
  if (!v1)
  {
    char v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_get_application_service_name";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v5, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v6 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_get_application_service_name";
          _os_log_impl(&dword_1830D4000, v6, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }
LABEL_20:

        goto LABEL_21;
      }
      if (!v19)
      {
        os_log_type_t v6 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_get_application_service_name";
          _os_log_impl(&dword_1830D4000, v6, v18, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_get_application_service_name";
          _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v22 = "nw_browse_descriptor_get_application_service_name";
        __int16 v23 = 2082;
        uint64_t v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v5)
    {
LABEL_23:
      isa = 0;
      goto LABEL_24;
    }
LABEL_22:
    free(v5);
    goto LABEL_23;
  }
  if (LODWORD(v1[1].isa) != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_get_application_service_name";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v5, &type, &v19)) {
      goto LABEL_21;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_browse_descriptor_get_application_service_name";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s Browse descriptor not of type application service", buf, 0xCu);
      }
    }
    else if (v19)
    {
      os_log_type_t v8 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (v8)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_browse_descriptor_get_application_service_name";
          __int16 v23 = 2082;
          uint64_t v24 = v8;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s Browse descriptor not of type application service, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v8);
        if (!v5) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_browse_descriptor_get_application_service_name";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s Browse descriptor not of type application service, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_browse_descriptor_get_application_service_name";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s Browse descriptor not of type application service, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_20;
  }
  isa = (const char *)v1[9].isa;
LABEL_24:

  return isa;
}

uint64_t nw_browse_descriptor_get_type(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_browse_descriptor_t v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[2];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_browse_descriptor_get_type";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_type";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_browse_descriptor_get_type";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_type";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_type";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_browse_descriptor_get_bundle_id(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (!v1)
  {
    char v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_get_bundle_id";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v5, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v6 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_get_bundle_id";
          _os_log_impl(&dword_1830D4000, v6, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }
LABEL_20:

        goto LABEL_21;
      }
      if (!v19)
      {
        os_log_type_t v6 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_get_bundle_id";
          _os_log_impl(&dword_1830D4000, v6, v18, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_get_bundle_id";
          _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v22 = "nw_browse_descriptor_get_bundle_id";
        __int16 v23 = 2082;
        uint64_t v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v5)
    {
LABEL_23:
      uint64_t v3 = 0;
      goto LABEL_24;
    }
LABEL_22:
    free(v5);
    goto LABEL_23;
  }
  if (*((_DWORD *)v1 + 2) != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_get_bundle_id";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v5, &type, &v19)) {
      goto LABEL_21;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_browse_descriptor_get_bundle_id";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s Browse descriptor not of type application service", buf, 0xCu);
      }
    }
    else if (v19)
    {
      os_log_type_t v8 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (v8)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_browse_descriptor_get_bundle_id";
          __int16 v23 = 2082;
          uint64_t v24 = v8;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s Browse descriptor not of type application service, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v8);
        if (!v5) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_browse_descriptor_get_bundle_id";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s Browse descriptor not of type application service, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_browse_descriptor_get_bundle_id";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s Browse descriptor not of type application service, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_20;
  }
  uint64_t v3 = *((void *)v1 + 10);
LABEL_24:

  return v3;
}

void nw_browse_descriptor_set_device_types(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    char v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_set_device_types";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_set_device_types";
          _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (!v19)
      {
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_set_device_types";
          _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_set_device_types";
          _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v22 = "nw_browse_descriptor_set_device_types";
        __int16 v23 = 2082;
        uint64_t v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v6) {
      goto LABEL_23;
    }
LABEL_22:
    free(v6);
    goto LABEL_23;
  }
  if (*((_DWORD *)v3 + 2) == 2)
  {
    *((_DWORD *)v3 + 22) = a2;
    goto LABEL_23;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  os_log_type_t v22 = "nw_browse_descriptor_set_device_types";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19)) {
    goto LABEL_21;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = (id)gLogObj;
    os_log_type_t v8 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v22 = "nw_browse_descriptor_set_device_types";
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s Browse descriptor not of type application service", buf, 0xCu);
    }
LABEL_20:

    goto LABEL_21;
  }
  if (!v19)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = (id)gLogObj;
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v22 = "nw_browse_descriptor_set_device_types";
      _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s Browse descriptor not of type application service, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_20;
  }
  os_log_type_t v9 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v7 = (id)gLogObj;
  os_log_type_t v10 = type;
  BOOL v11 = os_log_type_enabled(v7, type);
  if (!v9)
  {
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v22 = "nw_browse_descriptor_set_device_types";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s Browse descriptor not of type application service, no backtrace", buf, 0xCu);
    }
    goto LABEL_20;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v22 = "nw_browse_descriptor_set_device_types";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s Browse descriptor not of type application service, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v9);
  if (v6) {
    goto LABEL_22;
  }
LABEL_23:
}

uint64_t nw_browse_descriptor_get_device_types(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (!v1)
  {
    char v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_get_device_types";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v5, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v6 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_get_device_types";
          _os_log_impl(&dword_1830D4000, v6, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }
LABEL_20:

        goto LABEL_21;
      }
      if (!v19)
      {
        os_log_type_t v6 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_get_device_types";
          _os_log_impl(&dword_1830D4000, v6, v18, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_get_device_types";
          _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v22 = "nw_browse_descriptor_get_device_types";
        __int16 v23 = 2082;
        uint64_t v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v5)
    {
LABEL_23:
      uint64_t v3 = 0;
      goto LABEL_24;
    }
LABEL_22:
    free(v5);
    goto LABEL_23;
  }
  if (v1[2] != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_get_device_types";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v5, &type, &v19)) {
      goto LABEL_21;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_browse_descriptor_get_device_types";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s Browse descriptor not of type application service", buf, 0xCu);
      }
    }
    else if (v19)
    {
      os_log_type_t v8 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (v8)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_browse_descriptor_get_device_types";
          __int16 v23 = 2082;
          uint64_t v24 = v8;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s Browse descriptor not of type application service, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v8);
        if (!v5) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_browse_descriptor_get_device_types";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s Browse descriptor not of type application service, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_browse_descriptor_get_device_types";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s Browse descriptor not of type application service, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_20;
  }
  uint64_t v3 = v1[22];
LABEL_24:

  return v3;
}

BOOL nw_browse_descriptor_is_device_type_set(void *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    BOOL v5 = (*((_DWORD *)v3 + 22) & a2) != 0;
    goto LABEL_3;
  }
  os_log_type_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_browse_descriptor_is_device_type_set";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_browse_descriptor_is_device_type_set";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_browse_descriptor_is_device_type_set";
          __int16 v19 = 2082;
          char v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_browse_descriptor_is_device_type_set";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_browse_descriptor_is_device_type_set";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
  BOOL v5 = 0;
LABEL_3:

  return v5;
}

void nw_browse_descriptor_set_browse_scope(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    BOOL v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_set_browse_scope";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_set_browse_scope";
          _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (!v19)
      {
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_set_browse_scope";
          _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_set_browse_scope";
          _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v22 = "nw_browse_descriptor_set_browse_scope";
        __int16 v23 = 2082;
        uint64_t v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v6) {
      goto LABEL_23;
    }
LABEL_22:
    free(v6);
    goto LABEL_23;
  }
  if (*((_DWORD *)v3 + 2) == 2)
  {
    *((_DWORD *)v3 + 23) = a2;
    goto LABEL_23;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  os_log_type_t v22 = "nw_browse_descriptor_set_browse_scope";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19)) {
    goto LABEL_21;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = (id)gLogObj;
    os_log_type_t v8 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v22 = "nw_browse_descriptor_set_browse_scope";
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s Browse descriptor not of type application service", buf, 0xCu);
    }
LABEL_20:

    goto LABEL_21;
  }
  if (!v19)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = (id)gLogObj;
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v22 = "nw_browse_descriptor_set_browse_scope";
      _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s Browse descriptor not of type application service, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_20;
  }
  os_log_type_t v9 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v7 = (id)gLogObj;
  os_log_type_t v10 = type;
  BOOL v11 = os_log_type_enabled(v7, type);
  if (!v9)
  {
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v22 = "nw_browse_descriptor_set_browse_scope";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s Browse descriptor not of type application service, no backtrace", buf, 0xCu);
    }
    goto LABEL_20;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v22 = "nw_browse_descriptor_set_browse_scope";
    __int16 v23 = 2082;
    uint64_t v24 = v9;
    _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s Browse descriptor not of type application service, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v9);
  if (v6) {
    goto LABEL_22;
  }
LABEL_23:
}

uint64_t nw_browse_descriptor_get_browse_scope(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (!v1)
  {
    BOOL v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_get_browse_scope";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v5, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v6 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_get_browse_scope";
          _os_log_impl(&dword_1830D4000, v6, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }
LABEL_20:

        goto LABEL_21;
      }
      if (!v19)
      {
        os_log_type_t v6 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_get_browse_scope";
          _os_log_impl(&dword_1830D4000, v6, v18, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_get_browse_scope";
          _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v22 = "nw_browse_descriptor_get_browse_scope";
        __int16 v23 = 2082;
        uint64_t v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v5)
    {
LABEL_23:
      uint64_t v3 = 0;
      goto LABEL_24;
    }
LABEL_22:
    free(v5);
    goto LABEL_23;
  }
  if (v1[2] != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_get_browse_scope";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v5, &type, &v19)) {
      goto LABEL_21;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_browse_descriptor_get_browse_scope";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s Browse descriptor not of type application service", buf, 0xCu);
      }
    }
    else if (v19)
    {
      os_log_type_t v8 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (v8)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_browse_descriptor_get_browse_scope";
          __int16 v23 = 2082;
          uint64_t v24 = v8;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s Browse descriptor not of type application service, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v8);
        if (!v5) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_browse_descriptor_get_browse_scope";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s Browse descriptor not of type application service, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_browse_descriptor_get_browse_scope";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s Browse descriptor not of type application service, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_20;
  }
  uint64_t v3 = v1[23];
LABEL_24:

  return v3;
}

BOOL nw_browse_descriptor_is_browse_scope_set(void *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (v3)
  {
    BOOL v5 = (*((_DWORD *)v3 + 23) & a2) != 0;
    goto LABEL_3;
  }
  os_log_type_t v7 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v18 = "nw_browse_descriptor_is_browse_scope_set";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_browse_descriptor_is_browse_scope_set";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v18 = "nw_browse_descriptor_is_browse_scope_set";
          __int16 v19 = 2082;
          char v20 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_browse_descriptor_is_browse_scope_set";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v18 = "nw_browse_descriptor_is_browse_scope_set";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
  BOOL v5 = 0;
LABEL_3:

  return v5;
}

void nw_browse_descriptor_add_device_filter(void *a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    os_log_type_t v8 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v25 = "nw_browse_descriptor_add_device_filter";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22)) {
      goto LABEL_40;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_browse_descriptor_add_device_filter";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v25 = "nw_browse_descriptor_add_device_filter";
          __int16 v26 = 2082;
          BOOL v27 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9) {
          goto LABEL_6;
        }
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_browse_descriptor_add_device_filter";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v25 = "nw_browse_descriptor_add_device_filter";
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (a2)
  {
    if (!v3[13])
    {
      BOOL v5 = nw_array_create();
      os_log_type_t v6 = (void *)v4[13];
      v4[13] = v5;
    }
    os_log_type_t v7 = [NSString stringWithCString:a2 encoding:1];
    nw_array_append(v4[13], v7);

    goto LABEL_6;
  }
  os_log_type_t v12 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v25 = "nw_browse_descriptor_add_device_filter";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v22 = 0;
  if (!__nwlog_fault(v9, &type, &v22)) {
    goto LABEL_40;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v25 = "nw_browse_descriptor_add_device_filter";
      _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null device_filters", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v22)
  {
    os_log_type_t v10 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v25 = "nw_browse_descriptor_add_device_filter";
      _os_log_impl(&dword_1830D4000, v10, v21, "%{public}s called with null device_filters, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  BOOL v17 = (char *)__nw_create_backtrace_string();
  os_log_type_t v10 = __nwlog_obj();
  os_log_type_t v18 = type;
  BOOL v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v25 = "nw_browse_descriptor_add_device_filter";
      _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null device_filters, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    uint64_t v25 = "nw_browse_descriptor_add_device_filter";
    __int16 v26 = 2082;
    BOOL v27 = v17;
    _os_log_impl(&dword_1830D4000, v10, v18, "%{public}s called with null device_filters, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9) {
    goto LABEL_41;
  }
LABEL_6:
}

void sub_183CF97A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_browse_descriptor_get_device_filter_count(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    id v3 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v14 = "nw_browse_descriptor_get_device_filter_count";
    id v4 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v11 = 0;
    if (__nwlog_fault(v4, &type, &v11))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v5 = __nwlog_obj();
        os_log_type_t v6 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v14 = "nw_browse_descriptor_get_device_filter_count";
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null descriptor", buf, 0xCu);
        }
      }
      else if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        BOOL v5 = __nwlog_obj();
        os_log_type_t v8 = type;
        BOOL v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v14 = "nw_browse_descriptor_get_device_filter_count";
            __int16 v15 = 2082;
            BOOL v16 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v9)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v14 = "nw_browse_descriptor_get_device_filter_count";
          _os_log_impl(&dword_1830D4000, v5, v8, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        BOOL v5 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v14 = "nw_browse_descriptor_get_device_filter_count";
          _os_log_impl(&dword_1830D4000, v5, v10, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v4) {
      free(v4);
    }
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 104);
  if (v1) {
    return (uint64_t)(*(void *)(v1 + 24) - *(void *)(v1 + 16)) >> 3;
  }
  return 0;
}

void nw_browse_descriptor_enumerate_device_filters(void *a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  BOOL v5 = v4;
  if (!v3)
  {
    os_log_type_t v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v26 = "nw_browse_descriptor_enumerate_device_filters";
    os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_browse_descriptor_enumerate_device_filters";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v9 = __nwlog_obj();
      os_log_type_t v14 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v26 = "nw_browse_descriptor_enumerate_device_filters";
          __int16 v27 = 2082;
          uint64_t v28 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_browse_descriptor_enumerate_device_filters";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      BOOL v9 = __nwlog_obj();
      os_log_type_t v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v26 = "nw_browse_descriptor_enumerate_device_filters";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    os_log_type_t v6 = (atomic_uchar *)v3[13];
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = __nw_browse_descriptor_enumerate_device_filters_block_invoke;
    v21[3] = &unk_1E524AE90;
    id v22 = v4;
    nw_array_apply(v6, (uint64_t)v21);

    goto LABEL_4;
  }
  char v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v26 = "nw_browse_descriptor_enumerate_device_filters";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v9 = __nwlog_obj();
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v26 = "nw_browse_descriptor_enumerate_device_filters";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null enumerator", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    BOOL v9 = __nwlog_obj();
    os_log_type_t v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      __int16 v26 = "nw_browse_descriptor_enumerate_device_filters";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  BOOL v16 = (char *)__nw_create_backtrace_string();
  BOOL v9 = __nwlog_obj();
  os_log_type_t v17 = type;
  BOOL v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      __int16 v26 = "nw_browse_descriptor_enumerate_device_filters";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    __int16 v26 = "nw_browse_descriptor_enumerate_device_filters";
    __int16 v27 = 2082;
    uint64_t v28 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

uint64_t __nw_browse_descriptor_enumerate_device_filters_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  [v4 cStringUsingEncoding:1];
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();

  return v5;
}

void sub_183CF9FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_browse_descriptor_clear_device_filters(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (v1)
  {
    id v3 = (void *)*((void *)v1 + 13);
    *((void *)v1 + 13) = 0;

    goto LABEL_3;
  }
  id v4 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v15 = "nw_browse_descriptor_clear_device_filters";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_browse_descriptor_clear_device_filters";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v15 = "nw_browse_descriptor_clear_device_filters";
          __int16 v16 = 2082;
          os_log_type_t v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_browse_descriptor_clear_device_filters";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v15 = "nw_browse_descriptor_clear_device_filters";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v5) {
    free(v5);
  }
LABEL_3:
}

NWConcrete_nw_browse_descriptor *nw_browse_descriptor_create_custom(unsigned int a1, void *a2, void *a3)
{
  *(void *)&v46[13] = *MEMORY[0x1E4F143B8];
  os_log_type_t v6 = a2;
  id v7 = a3;
  if (v6)
  {
    if (a1 <= 0x3E7)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v8 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      os_log_type_t v44 = "nw_browse_descriptor_create_custom";
      __int16 v45 = 1024;
      *(_DWORD *)v46 = 1000;
      os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v41 = 0;
      if (!__nwlog_fault(v9, &type, &v41)) {
        goto LABEL_52;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v44 = "nw_browse_descriptor_create_custom";
          __int16 v45 = 1024;
          *(_DWORD *)v46 = 1000;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s Custom browse descriptor type values must start at %d", buf, 0x12u);
        }
LABEL_51:

        goto LABEL_52;
      }
      if (!v41)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (id)gLogObj;
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v44 = "nw_browse_descriptor_create_custom";
          __int16 v45 = 1024;
          *(_DWORD *)v46 = 1000;
          _os_log_impl(&dword_1830D4000, v10, v28, "%{public}s Custom browse descriptor type values must start at %d, backtrace limit exceeded", buf, 0x12u);
        }
        goto LABEL_51;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v10 = (id)gLogObj;
      os_log_type_t v20 = type;
      BOOL v21 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v44 = "nw_browse_descriptor_create_custom";
          __int16 v45 = 1024;
          *(_DWORD *)v46 = 1000;
          _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s Custom browse descriptor type values must start at %d, no backtrace", buf, 0x12u);
        }
        goto LABEL_51;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v44 = "nw_browse_descriptor_create_custom";
        __int16 v45 = 1024;
        *(_DWORD *)v46 = 1000;
        v46[2] = 2082;
        *(void *)&v46[3] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v20, "%{public}s Custom browse descriptor type values must start at %d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }
LABEL_27:

      free(backtrace_string);
      if (!v9) {
        goto LABEL_54;
      }
      goto LABEL_53;
    }
    if (dispatch_data_get_size(v6) >= 0x401)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v12 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      os_log_type_t v44 = "nw_browse_descriptor_create_custom";
      __int16 v45 = 1024;
      *(_DWORD *)v46 = 1024;
      os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v41 = 0;
      if (!__nwlog_fault(v9, &type, &v41)) {
        goto LABEL_52;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (id)gLogObj;
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v44 = "nw_browse_descriptor_create_custom";
          __int16 v45 = 1024;
          *(_DWORD *)v46 = 1024;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s Custom data size must be no larger than %d", buf, 0x12u);
        }
        goto LABEL_51;
      }
      if (!v41)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v10 = (id)gLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v44 = "nw_browse_descriptor_create_custom";
          __int16 v45 = 1024;
          *(_DWORD *)v46 = 1024;
          _os_log_impl(&dword_1830D4000, v10, v29, "%{public}s Custom data size must be no larger than %d, backtrace limit exceeded", buf, 0x12u);
        }
        goto LABEL_51;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v10 = (id)gLogObj;
      os_log_type_t v22 = type;
      BOOL v23 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v44 = "nw_browse_descriptor_create_custom";
          __int16 v45 = 1024;
          *(_DWORD *)v46 = 1024;
          _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s Custom data size must be no larger than %d, no backtrace", buf, 0x12u);
        }
        goto LABEL_51;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446722;
        os_log_type_t v44 = "nw_browse_descriptor_create_custom";
        __int16 v45 = 1024;
        *(_DWORD *)v46 = 1024;
        v46[2] = 2082;
        *(void *)&v46[3] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v10, v22, "%{public}s Custom data size must be no larger than %d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }
      goto LABEL_27;
    }
    os_log_type_t v14 = objc_alloc_init(NWConcrete_nw_browse_descriptor);
    BOOL v15 = v14;
    if (v14)
    {
      *((_DWORD *)v14 + 2) = a1;
      objc_storeStrong((id *)v14 + 7, a2);
      if (v7)
      {
        __int16 v16 = _Block_copy(v7);
        os_log_type_t v17 = (void *)*((void *)v15 + 8);
        *((void *)v15 + 8) = v16;
      }
      uint64_t v18 = v15;
      goto LABEL_63;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v24 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v44 = "nw_browse_descriptor_create_custom";
    uint64_t v25 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    if (__nwlog_fault(v25, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v26 = (id)gLogObj;
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v44 = "nw_browse_descriptor_create_custom";
          _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s [nw_browse_descriptor init] failed", buf, 0xCu);
        }
      }
      else if (v41)
      {
        char v30 = (char *)__nw_create_backtrace_string();
        __int16 v26 = __nwlog_obj();
        os_log_type_t v31 = type;
        BOOL v32 = os_log_type_enabled(v26, type);
        if (v30)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v44 = "nw_browse_descriptor_create_custom";
            __int16 v45 = 2082;
            *(void *)v46 = v30;
            _os_log_impl(&dword_1830D4000, v26, v31, "%{public}s [nw_browse_descriptor init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v30);
          if (!v25) {
            goto LABEL_63;
          }
          goto LABEL_62;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v44 = "nw_browse_descriptor_create_custom";
          _os_log_impl(&dword_1830D4000, v26, v31, "%{public}s [nw_browse_descriptor init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __int16 v26 = __nwlog_obj();
        os_log_type_t v33 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v44 = "nw_browse_descriptor_create_custom";
          _os_log_impl(&dword_1830D4000, v26, v33, "%{public}s [nw_browse_descriptor init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v25)
    {
LABEL_63:

      goto LABEL_64;
    }
LABEL_62:
    free(v25);
    goto LABEL_63;
  }
  __int16 v35 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v44 = "nw_browse_descriptor_create_custom";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v41 = 0;
  if (__nwlog_fault(v9, &type, &v41))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v36 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v44 = "nw_browse_descriptor_create_custom";
        _os_log_impl(&dword_1830D4000, v10, v36, "%{public}s called with null custom_data", buf, 0xCu);
      }
      goto LABEL_51;
    }
    if (!v41)
    {
      BOOL v10 = __nwlog_obj();
      os_log_type_t v40 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v44 = "nw_browse_descriptor_create_custom";
        _os_log_impl(&dword_1830D4000, v10, v40, "%{public}s called with null custom_data, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_51;
    }
    uint64_t v37 = (char *)__nw_create_backtrace_string();
    BOOL v10 = __nwlog_obj();
    os_log_type_t v38 = type;
    BOOL v39 = os_log_type_enabled(v10, type);
    if (!v37)
    {
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v44 = "nw_browse_descriptor_create_custom";
        _os_log_impl(&dword_1830D4000, v10, v38, "%{public}s called with null custom_data, no backtrace", buf, 0xCu);
      }
      goto LABEL_51;
    }
    if (v39)
    {
      *(_DWORD *)buf = 136446466;
      os_log_type_t v44 = "nw_browse_descriptor_create_custom";
      __int16 v45 = 2082;
      *(void *)v46 = v37;
      _os_log_impl(&dword_1830D4000, v10, v38, "%{public}s called with null custom_data, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v37);
  }
LABEL_52:
  if (v9) {
LABEL_53:
  }
    free(v9);
LABEL_54:
  BOOL v15 = 0;
LABEL_64:

  return v15;
}

void sub_183CFAD30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_browse_descriptor_copy_custom_data(void *a1)
{
  *(void *)&v24[13] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (!v1)
  {
    os_log_type_t v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_copy_custom_data";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v5, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v6 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_copy_custom_data";
          _os_log_impl(&dword_1830D4000, v6, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }
LABEL_20:

        goto LABEL_21;
      }
      if (!v19)
      {
        os_log_type_t v6 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_copy_custom_data";
          _os_log_impl(&dword_1830D4000, v6, v18, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_copy_custom_data";
          _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v22 = "nw_browse_descriptor_copy_custom_data";
        __int16 v23 = 2082;
        *(void *)id v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v5)
    {
LABEL_23:
      id v3 = 0;
      goto LABEL_24;
    }
LABEL_22:
    free(v5);
    goto LABEL_23;
  }
  if (*((_DWORD *)v1 + 2) <= 0x3E7u)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    os_log_type_t v22 = "nw_browse_descriptor_copy_custom_data";
    __int16 v23 = 1024;
    *(_DWORD *)id v24 = 1000;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v5, &type, &v19)) {
      goto LABEL_21;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v22 = "nw_browse_descriptor_copy_custom_data";
        __int16 v23 = 1024;
        *(_DWORD *)id v24 = 1000;
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s Custom browse type values must start at %d", buf, 0x12u);
      }
    }
    else if (v19)
    {
      id v8 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (v8)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v22 = "nw_browse_descriptor_copy_custom_data";
          __int16 v23 = 1024;
          *(_DWORD *)id v24 = 1000;
          v24[2] = 2082;
          *(void *)&v24[3] = v8;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s Custom browse type values must start at %d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }

        free(v8);
        if (!v5) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v22 = "nw_browse_descriptor_copy_custom_data";
        __int16 v23 = 1024;
        *(_DWORD *)id v24 = 1000;
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s Custom browse type values must start at %d, no backtrace", buf, 0x12u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v22 = "nw_browse_descriptor_copy_custom_data";
        __int16 v23 = 1024;
        *(_DWORD *)id v24 = 1000;
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s Custom browse type values must start at %d, backtrace limit exceeded", buf, 0x12u);
      }
    }
    goto LABEL_20;
  }
  id v3 = v1[7];
LABEL_24:

  return v3;
}

BOOL nw_browse_descriptor_is_custom_type(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (v1)
  {
    BOOL v3 = *((_DWORD *)v1 + 2) > 0x3E7u;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_browse_descriptor_is_custom_type";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_is_custom_type";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_browse_descriptor_is_custom_type";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_is_custom_type";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_is_custom_type";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

void *nw_browse_descriptor_copy_custom_browse_block(void *a1)
{
  *(void *)&v24[13] = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (!v1)
  {
    char v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_copy_custom_browse_block";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v5, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v6 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_copy_custom_browse_block";
          _os_log_impl(&dword_1830D4000, v6, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }
LABEL_20:

        goto LABEL_21;
      }
      if (!v19)
      {
        os_log_type_t v6 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_copy_custom_browse_block";
          _os_log_impl(&dword_1830D4000, v6, v18, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_copy_custom_browse_block";
          _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v22 = "nw_browse_descriptor_copy_custom_browse_block";
        __int16 v23 = 2082;
        *(void *)id v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v5)
    {
LABEL_23:
      BOOL v3 = 0;
      goto LABEL_24;
    }
LABEL_22:
    free(v5);
    goto LABEL_23;
  }
  if (*((_DWORD *)v1 + 2) <= 0x3E7u)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    os_log_type_t v22 = "nw_browse_descriptor_copy_custom_browse_block";
    __int16 v23 = 1024;
    *(_DWORD *)id v24 = 1000;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v5, &type, &v19)) {
      goto LABEL_21;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v22 = "nw_browse_descriptor_copy_custom_browse_block";
        __int16 v23 = 1024;
        *(_DWORD *)id v24 = 1000;
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s Custom browse type values must start at %d", buf, 0x12u);
      }
    }
    else if (v19)
    {
      os_log_type_t v8 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (v8)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446722;
          os_log_type_t v22 = "nw_browse_descriptor_copy_custom_browse_block";
          __int16 v23 = 1024;
          *(_DWORD *)id v24 = 1000;
          v24[2] = 2082;
          *(void *)&v24[3] = v8;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s Custom browse type values must start at %d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }

        free(v8);
        if (!v5) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v22 = "nw_browse_descriptor_copy_custom_browse_block";
        __int16 v23 = 1024;
        *(_DWORD *)id v24 = 1000;
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s Custom browse type values must start at %d, no backtrace", buf, 0x12u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v22 = "nw_browse_descriptor_copy_custom_browse_block";
        __int16 v23 = 1024;
        *(_DWORD *)id v24 = 1000;
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s Custom browse type values must start at %d, backtrace limit exceeded", buf, 0x12u);
      }
    }
    goto LABEL_20;
  }
  BOOL v3 = _Block_copy(v1[8]);
LABEL_24:

  return v3;
}

BOOL nw_browse_descriptor_is_meta_query(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (!v1)
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v17 = "nw_browse_descriptor_is_meta_query";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v17 = "nw_browse_descriptor_is_meta_query";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v17 = "nw_browse_descriptor_is_meta_query";
            __int16 v18 = 2082;
            char v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v17 = "nw_browse_descriptor_is_meta_query";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v17 = "nw_browse_descriptor_is_meta_query";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_21:
    if (v6) {
      free(v6);
    }
    goto LABEL_23;
  }
  if (*((_DWORD *)v1 + 2) != 1 || (BOOL v3 = v1[2]) == 0)
  {
LABEL_23:
    BOOL v4 = 0;
    goto LABEL_24;
  }
  BOOL v4 = strcmp(v3, "_services._dns-sd._udp") == 0;
LABEL_24:

  return v4;
}

void nw_browse_descriptor_set_include_txt_record(nw_browse_descriptor_t descriptor, BOOL include_txt_record)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_browse_descriptor_t v3 = descriptor;
  nw_browse_descriptor_t v4 = v3;
  if (v3)
  {
    LOBYTE(v3[14].isa) = (uint64_t)v3[14].isa & 0xFE | include_txt_record;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_browse_descriptor_set_include_txt_record";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_set_include_txt_record";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_browse_descriptor_set_include_txt_record";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_set_include_txt_record";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_set_include_txt_record";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

BOOL nw_browse_descriptor_get_include_txt_record(nw_browse_descriptor_t descriptor)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_browse_descriptor_t v1 = descriptor;
  nw_browse_descriptor_t v2 = v1;
  if (v1)
  {
    BOOL v3 = (uint64_t)v1[14].isa & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_browse_descriptor_get_include_txt_record";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_include_txt_record";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_browse_descriptor_get_include_txt_record";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_include_txt_record";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_include_txt_record";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  BOOL v3 = 0;
LABEL_3:

  return v3;
}

void nw_browse_descriptor_set_sign_results(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_browse_descriptor_t v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 2;
    }
    else {
      char v5 = 0;
    }
    *((unsigned char *)v3 + 112) = *((unsigned char *)v3 + 112) & 0xFD | v5;
    goto LABEL_6;
  }
  os_log_type_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_browse_descriptor_set_sign_results";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_browse_descriptor_set_sign_results";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_browse_descriptor_set_sign_results";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_browse_descriptor_set_sign_results";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_browse_descriptor_set_sign_results";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

uint64_t nw_browse_descriptor_get_sign_results(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_browse_descriptor_t v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[112] >> 1) & 1;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_browse_descriptor_get_sign_results";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_sign_results";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_browse_descriptor_get_sign_results";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_sign_results";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_sign_results";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_browse_descriptor_set_discover_application_service_endpoints_only(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_browse_descriptor_t v4 = v3;
  if (v3)
  {
    if (a2) {
      char v5 = 4;
    }
    else {
      char v5 = 0;
    }
    *((unsigned char *)v3 + 112) = *((unsigned char *)v3 + 112) & 0xFB | v5;
    goto LABEL_6;
  }
  os_log_type_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v17 = "nw_browse_descriptor_set_discover_application_service_endpoints_only";
  os_log_type_t v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_browse_descriptor_set_discover_application_service_endpoints_only";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v17 = "nw_browse_descriptor_set_discover_application_service_endpoints_only";
          __int16 v18 = 2082;
          uint64_t v19 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_browse_descriptor_set_discover_application_service_endpoints_only";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v17 = "nw_browse_descriptor_set_discover_application_service_endpoints_only";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_23:
  if (v7) {
    free(v7);
  }
LABEL_6:
}

uint64_t nw_browse_descriptor_get_discover_application_service_endpoints_only(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_browse_descriptor_t v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (v1[112] >> 2) & 1;
    goto LABEL_3;
  }
  char v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_browse_descriptor_get_discover_application_service_endpoints_only";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_discover_application_service_endpoints_only";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null descriptor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_browse_descriptor_get_discover_application_service_endpoints_only";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_discover_application_service_endpoints_only";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_browse_descriptor_get_discover_application_service_endpoints_only";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

void nw_browse_descriptor_set_invitation_scope(void *a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  nw_browse_descriptor_t v4 = v3;
  if (!v3)
  {
    char v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_set_invitation_scope";
    os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v6, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_set_invitation_scope";
          _os_log_impl(&dword_1830D4000, v7, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (!v19)
      {
        os_log_type_t v7 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_set_invitation_scope";
          _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v7 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_set_invitation_scope";
          _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v22 = "nw_browse_descriptor_set_invitation_scope";
        __int16 v23 = 2082;
        id v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v7, v16, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v6) {
      goto LABEL_23;
    }
LABEL_22:
    free(v6);
    goto LABEL_23;
  }
  if (*((_DWORD *)v3 + 2) == 2)
  {
    *((_DWORD *)v3 + 24) = a2;
    goto LABEL_23;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  os_log_type_t v22 = "nw_browse_descriptor_set_invitation_scope";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19)) {
    goto LABEL_21;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = (id)gLogObj;
    os_log_type_t v8 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v22 = "nw_browse_descriptor_set_invitation_scope";
      _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s Browse descriptor not of type application service", buf, 0xCu);
    }
LABEL_20:

    goto LABEL_21;
  }
  if (!v19)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v7 = (id)gLogObj;
    os_log_type_t v12 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v22 = "nw_browse_descriptor_set_invitation_scope";
      _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s Browse descriptor not of type application service, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_20;
  }
  os_log_type_t v9 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  os_log_type_t v7 = (id)gLogObj;
  os_log_type_t v10 = type;
  BOOL v11 = os_log_type_enabled(v7, type);
  if (!v9)
  {
    if (v11)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v22 = "nw_browse_descriptor_set_invitation_scope";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s Browse descriptor not of type application service, no backtrace", buf, 0xCu);
    }
    goto LABEL_20;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v22 = "nw_browse_descriptor_set_invitation_scope";
    __int16 v23 = 2082;
    id v24 = v9;
    _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s Browse descriptor not of type application service, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v9);
  if (v6) {
    goto LABEL_22;
  }
LABEL_23:
}

uint64_t nw_browse_descriptor_get_invitation_scope(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  nw_browse_descriptor_t v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (!v1)
  {
    char v13 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_get_invitation_scope";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (__nwlog_fault(v5, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v6 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_get_invitation_scope";
          _os_log_impl(&dword_1830D4000, v6, v14, "%{public}s called with null descriptor", buf, 0xCu);
        }
LABEL_20:

        goto LABEL_21;
      }
      if (!v19)
      {
        os_log_type_t v6 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_get_invitation_scope";
          _os_log_impl(&dword_1830D4000, v6, v18, "%{public}s called with null descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_20;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v6 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v22 = "nw_browse_descriptor_get_invitation_scope";
          _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_20;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        os_log_type_t v22 = "nw_browse_descriptor_get_invitation_scope";
        __int16 v23 = 2082;
        id v24 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_21:
    if (!v5)
    {
LABEL_23:
      uint64_t v3 = 0;
      goto LABEL_24;
    }
LABEL_22:
    free(v5);
    goto LABEL_23;
  }
  if (v1[2] != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    os_log_type_t v22 = "nw_browse_descriptor_get_invitation_scope";
    id v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v5, &type, &v19)) {
      goto LABEL_21;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_browse_descriptor_get_invitation_scope";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s Browse descriptor not of type application service", buf, 0xCu);
      }
    }
    else if (v19)
    {
      os_log_type_t v8 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v9 = type;
      BOOL v10 = os_log_type_enabled(v6, type);
      if (v8)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v22 = "nw_browse_descriptor_get_invitation_scope";
          __int16 v23 = 2082;
          id v24 = v8;
          _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s Browse descriptor not of type application service, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v8);
        if (!v5) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_browse_descriptor_get_invitation_scope";
        _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s Browse descriptor not of type application service, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v6 = (id)gLogObj;
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v22 = "nw_browse_descriptor_get_invitation_scope";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s Browse descriptor not of type application service, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_20;
  }
  uint64_t v3 = v1[24];
LABEL_24:

  return v3;
}

void sub_183CFDBE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_association_create_with_evaluator_block_invoke(uint64_t a1, void *a2)
{
}

uint64_t ___ZL27nw_association_update_pathsP25NWConcrete_nw_associationPU21objcproto10OS_nw_path8NSObject_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  id v4 = nw_hash_node_get_object(a2);
  uint64_t extra = nw_hash_node_get_extra(a2);
  os_log_type_t v6 = (uint64_t *)extra;
  BOOL v43 = v4;
  if (!*(void *)(extra + 32)) {
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(extra + 40);
  time_t v8 = time(0);
  time_t v9 = v6[4];
  int v10 = v8 > v9;
  os_log_type_t v11 = *(void **)(a1 + 40);
  os_log_type_t v12 = *(void **)(*(void *)(a1 + 32) + 32);
  char v13 = v4;
  id v14 = v12;
  id v15 = v11;
  if (!v13)
  {
    __int16 v35 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v47 = "nw_protocol_definition_should_flush_cache";
    os_log_type_t v36 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v36, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v37 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v47 = "nw_protocol_definition_should_flush_cache";
          _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s called with null definition", buf, 0xCu);
        }
      }
      else if (v44)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v37 = __nwlog_obj();
        os_log_type_t v40 = type;
        BOOL v41 = os_log_type_enabled(v37, type);
        if (backtrace_string)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446466;
            __int16 v47 = "nw_protocol_definition_should_flush_cache";
            __int16 v48 = 2082;
            __int16 v49 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v37, v40, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_57;
        }
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          __int16 v47 = "nw_protocol_definition_should_flush_cache";
          _os_log_impl(&dword_1830D4000, v37, v40, "%{public}s called with null definition, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        uint64_t v37 = __nwlog_obj();
        os_log_type_t v42 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)buf = 136446210;
          __int16 v47 = "nw_protocol_definition_should_flush_cache";
          _os_log_impl(&dword_1830D4000, v37, v42, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_57:
    if (v36) {
      free(v36);
    }

    id v4 = v43;
    goto LABEL_22;
  }
  uint64_t v16 = v13[9];
  if (v16)
  {
    BOOL v17 = *(uint64_t (**)(void *, uint64_t, BOOL, id, id))(v16 + 64);
    if (v17) {
      int v10 = v17(v13, v7, v8 > v9, v14, v15);
    }
  }

  id v4 = v43;
  if (!v10) {
    goto LABEL_22;
  }
LABEL_7:
  uint64_t v18 = v6[5];
  if (v18) {
    nw_protocol_definition_deallocate_cache_entry(v4, v18);
  }
  nw_context_remove_cache_entry(*(void **)(a1 + 48), v6);
  if (nw_hash_table_remove_node(*(void *)(*(void *)(a1 + 32) + 56), a2)
    || nw_path_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 32) + 16)))
  {
    goto LABEL_22;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  id v19 = (id)gconnectionLogObj;
  logging_description = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 32) + 8));
  *(_DWORD *)buf = 136446722;
  __int16 v47 = "nw_association_update_paths_block_invoke";
  __int16 v48 = 2082;
  __int16 v49 = (void *)logging_description;
  __int16 v50 = 2048;
  uint64_t v51 = a2;
  BOOL v21 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v44 = 0;
  if (__nwlog_fault(v21, &type, &v44))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v22 = (id)gconnectionLogObj;
      os_log_type_t v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        id v24 = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 32) + 8));
        *(_DWORD *)buf = 136446722;
        __int16 v47 = "nw_association_update_paths_block_invoke";
        __int16 v48 = 2082;
        __int16 v49 = (void *)v24;
        __int16 v50 = 2048;
        uint64_t v51 = a2;
        _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s <nw_association %{public}s> failed to remove cache entry for node %p", buf, 0x20u);
      }
    }
    else if (v44)
    {
      __int16 v26 = __nw_create_backtrace_string();
      if (v26)
      {
        os_log_type_t v27 = (char *)v26;
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        os_log_type_t v28 = (id)gconnectionLogObj;
        os_log_type_t v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          char v30 = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 32) + 8));
          *(_DWORD *)buf = 136446978;
          __int16 v47 = "nw_association_update_paths_block_invoke";
          __int16 v48 = 2082;
          __int16 v49 = (void *)v30;
          __int16 v50 = 2048;
          uint64_t v51 = a2;
          __int16 v52 = 2082;
          BOOL v53 = v27;
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s <nw_association %{public}s> failed to remove cache entry for node %p, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v27);
        id v4 = v43;
        if (v21) {
          goto LABEL_21;
        }
        goto LABEL_22;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v22 = (id)gconnectionLogObj;
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v22, type))
      {
        __int16 v34 = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 32) + 8));
        *(_DWORD *)buf = 136446722;
        __int16 v47 = "nw_association_update_paths_block_invoke";
        __int16 v48 = 2082;
        __int16 v49 = (void *)v34;
        __int16 v50 = 2048;
        uint64_t v51 = a2;
        _os_log_impl(&dword_1830D4000, v22, v33, "%{public}s <nw_association %{public}s> failed to remove cache entry for node %p, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v22 = (id)gconnectionLogObj;
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v22, type))
      {
        BOOL v32 = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 32) + 8));
        *(_DWORD *)buf = 136446722;
        __int16 v47 = "nw_association_update_paths_block_invoke";
        __int16 v48 = 2082;
        __int16 v49 = (void *)v32;
        __int16 v50 = 2048;
        uint64_t v51 = a2;
        _os_log_impl(&dword_1830D4000, v22, v31, "%{public}s <nw_association %{public}s> failed to remove cache entry for node %p, backtrace limit exceeded", buf, 0x20u);
      }
    }
  }
  id v4 = v43;
  if (v21) {
LABEL_21:
  }
    free(v21);
LABEL_22:

  return 1;
}

void sub_183CFE310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZL27nw_association_update_pathsP25NWConcrete_nw_associationPU21objcproto10OS_nw_path8NSObject_block_invoke_85(uint64_t a1, uint64_t a2)
{
  id v4 = nw_hash_node_get_object(a2);
  uint64_t extra = nw_hash_node_get_extra(a2);
  if (*(unsigned char *)(extra + 8))
  {
    os_log_type_t v6 = (void (**)(void *, void *, void))_Block_copy(*(const void **)extra);
    v6[2](v6, v4, *(void *)(a1 + 32));
  }
  return 1;
}

void sub_183CFE3DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_association_update_with_evaluator_block_invoke(uint64_t a1, void *a2)
{
}

id nw_association_copy_endpoint(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  nw_browse_descriptor_t v1 = a1;
  nw_browse_descriptor_t v2 = v1;
  if (v1)
  {
    id v3 = v1[1];
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v16 = "nw_association_copy_endpoint";
  os_log_type_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_association_copy_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null association", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v16 = "nw_association_copy_endpoint";
          __int16 v17 = 2082;
          uint64_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_association_copy_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null association, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v16 = "nw_association_copy_endpoint";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void ___ZL36nw_association_schedule_deactivationP25NWConcrete_nw_association_block_invoke(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  nw_context_assert_queue(*(void **)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(v2 + 40);
  if (v3 && *(_DWORD *)(v3 + 40))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v4 = (id)gLogObj;
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    id v5 = *(const char **)(a1 + 40);
    *(_DWORD *)buf = 136446466;
    v46 = "nw_association_schedule_deactivation_block_invoke";
    __int16 v47 = 2114;
    __int16 v48 = v5;
    os_log_type_t v6 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v6)) {
      goto LABEL_79;
    }
    free(v6);
    uint64_t v2 = *(void *)(a1 + 40);
  }
  if ((*(unsigned char *)(v2 + 76) & 1) == 0) {
    goto LABEL_8;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v7 = (id)gLogObj;
  os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  os_log_type_t v8 = *(const char **)(a1 + 40);
  *(_DWORD *)buf = 136446466;
  v46 = "nw_association_schedule_deactivation_block_invoke";
  __int16 v47 = 2114;
  __int16 v48 = v8;
  time_t v9 = (void *)_os_log_send_and_compose_impl();

  if (__nwlog_abort((uint64_t)v9))
  {
LABEL_79:
    __break(1u);
    return;
  }
  free(v9);
  uint64_t v2 = *(void *)(a1 + 40);
LABEL_8:
  uint64_t v10 = *(void *)(v2 + 64);
  if (v10)
  {
    nw_queue_cancel_source(v10);
    *(void *)(*(void *)(a1 + 40) + 64) = 0;
    uint64_t v2 = *(void *)(a1 + 40);
  }
  if (!nw_path_parameters_get_logging_disabled(*(void *)(v2 + 16)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    BOOL v11 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      logging_description = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 40) + 8));
      *(_DWORD *)buf = 136446466;
      v46 = "nw_association_schedule_deactivation_block_invoke";
      __int16 v47 = 2082;
      __int16 v48 = logging_description;
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_INFO, "%{public}s <nw_association %{public}s> becoming dormant", buf, 0x16u);
    }
  }
  *(unsigned char *)(*(void *)(a1 + 40) + 76) |= 1u;
  nw_path_evaluator_cancel(*(void **)(*(void *)(a1 + 40) + 24));
  char v13 = *(void **)(*(void *)(a1 + 40) + 24);
  *(void *)(*(void *)(a1 + 40) + 24) = 0;

  id v14 = *(os_unfair_lock_s **)(*(void *)(a1 + 40) + 48);
  if (v14)
  {
    if (v14[10]._os_unfair_lock_opaque)
    {
      if (nw_path_parameters_get_logging_disabled(*(void *)(*(void *)(a1 + 40) + 16))) {
        goto LABEL_31;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      id v15 = (id)gconnectionLogObj;
      uint64_t v16 = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 40) + 8));
      *(_DWORD *)buf = 136446466;
      v46 = "nw_association_schedule_deactivation_block_invoke";
      __int16 v47 = 2082;
      __int16 v48 = v16;
      __int16 v17 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v43 = 0;
      if ((__nwlog_fault(v17, &type, &v43) & 1) == 0)
      {
LABEL_28:
        if (!v17) {
          goto LABEL_31;
        }
        goto LABEL_29;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v18 = (id)gconnectionLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          uint64_t v20 = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 40) + 8));
          *(_DWORD *)buf = 136446466;
          v46 = "nw_association_schedule_deactivation_block_invoke";
          __int16 v47 = 2082;
          __int16 v48 = v20;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s <nw_association %{public}s> dormant, but connected flow handles is non-empty", buf, 0x16u);
        }
LABEL_27:

        goto LABEL_28;
      }
      if (!v43)
      {
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        uint64_t v18 = (id)gconnectionLogObj;
        os_log_type_t v37 = type;
        if (os_log_type_enabled(v18, type))
        {
          os_log_type_t v38 = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 40) + 8));
          *(_DWORD *)buf = 136446466;
          v46 = "nw_association_schedule_deactivation_block_invoke";
          __int16 v47 = 2082;
          __int16 v48 = v38;
          _os_log_impl(&dword_1830D4000, v18, v37, "%{public}s <nw_association %{public}s> dormant, but connected flow handles is non-empty, backtrace limit exceeded", buf, 0x16u);
        }
        goto LABEL_27;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      uint64_t v18 = (id)gconnectionLogObj;
      os_log_type_t v30 = type;
      BOOL v31 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v31)
        {
          BOOL v41 = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 40) + 8));
          *(_DWORD *)buf = 136446466;
          v46 = "nw_association_schedule_deactivation_block_invoke";
          __int16 v47 = 2082;
          __int16 v48 = v41;
          _os_log_impl(&dword_1830D4000, v18, v30, "%{public}s <nw_association %{public}s> dormant, but connected flow handles is non-empty, no backtrace", buf, 0x16u);
        }
        goto LABEL_27;
      }
      if (v31)
      {
        BOOL v32 = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 40) + 8));
        *(_DWORD *)buf = 136446722;
        v46 = "nw_association_schedule_deactivation_block_invoke";
        __int16 v47 = 2082;
        __int16 v48 = v32;
        __int16 v49 = 2082;
        __int16 v50 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v18, v30, "%{public}s <nw_association %{public}s> dormant, but connected flow handles is non-empty, dumping backtrace:%{public}s", buf, 0x20u);
      }

      free(backtrace_string);
      if (v17) {
LABEL_29:
      }
        free(v17);
    }
    else
    {
      _nw_hash_table_release(v14);
      *(void *)(*(void *)(a1 + 40) + 48) = 0;
    }
  }
LABEL_31:
  uint64_t v21 = *(void *)(a1 + 40);
  os_log_type_t v22 = *(os_unfair_lock_s **)(v21 + 40);
  if (!v22) {
    return;
  }
  if (!v22[10]._os_unfair_lock_opaque)
  {
    _nw_hash_table_release(v22);
    *(void *)(*(void *)(a1 + 40) + 40) = 0;
    return;
  }
  if (nw_path_parameters_get_logging_disabled(*(void *)(v21 + 16))) {
    return;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  id v23 = (id)gconnectionLogObj;
  id v24 = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 40) + 8));
  *(_DWORD *)buf = 136446466;
  v46 = "nw_association_schedule_deactivation_block_invoke";
  __int16 v47 = 2082;
  __int16 v48 = v24;
  uint64_t v25 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v43 = 0;
  if (__nwlog_fault(v25, &type, &v43))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      __int16 v26 = (id)gconnectionLogObj;
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v26, type))
      {
        os_log_type_t v28 = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 40) + 8));
        *(_DWORD *)buf = 136446466;
        v46 = "nw_association_schedule_deactivation_block_invoke";
        __int16 v47 = 2082;
        __int16 v48 = v28;
        _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s <nw_association %{public}s> dormant, but handles hash table is non-empty", buf, 0x16u);
      }
    }
    else if (v43)
    {
      os_log_type_t v33 = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      __int16 v26 = (id)gconnectionLogObj;
      os_log_type_t v34 = type;
      BOOL v35 = os_log_type_enabled(v26, type);
      if (v33)
      {
        if (v35)
        {
          os_log_type_t v36 = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 40) + 8));
          *(_DWORD *)buf = 136446722;
          v46 = "nw_association_schedule_deactivation_block_invoke";
          __int16 v47 = 2082;
          __int16 v48 = v36;
          __int16 v49 = 2082;
          __int16 v50 = v33;
          _os_log_impl(&dword_1830D4000, v26, v34, "%{public}s <nw_association %{public}s> dormant, but handles hash table is non-empty, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v33);
        if (v25) {
          goto LABEL_44;
        }
        return;
      }
      if (v35)
      {
        os_log_type_t v42 = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 40) + 8));
        *(_DWORD *)buf = 136446466;
        v46 = "nw_association_schedule_deactivation_block_invoke";
        __int16 v47 = 2082;
        __int16 v48 = v42;
        _os_log_impl(&dword_1830D4000, v26, v34, "%{public}s <nw_association %{public}s> dormant, but handles hash table is non-empty, no backtrace", buf, 0x16u);
      }
    }
    else
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      __int16 v26 = (id)gconnectionLogObj;
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v26, type))
      {
        os_log_type_t v40 = nw_endpoint_get_logging_description(*(void **)(*(void *)(a1 + 40) + 8));
        *(_DWORD *)buf = 136446466;
        v46 = "nw_association_schedule_deactivation_block_invoke";
        __int16 v47 = 2082;
        __int16 v48 = v40;
        _os_log_impl(&dword_1830D4000, v26, v39, "%{public}s <nw_association %{public}s> dormant, but handles hash table is non-empty, backtrace limit exceeded", buf, 0x16u);
      }
    }
  }
  if (v25) {
LABEL_44:
  }
    free(v25);
}

void sub_183CFF01C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_association_register(void *a1, void *a2, void *a3, int a4, void *a5)
{
}

void nw_association_mark_flow_disconnected(void *a1, void *a2)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    BOOL v57 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v71 = "nw_association_mark_flow_disconnected";
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v68 = 0;
    if (!__nwlog_fault(v16, &type, &v68)) {
      goto LABEL_106;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v17 = __nwlog_obj();
      os_log_type_t v58 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v71 = "nw_association_mark_flow_disconnected";
        _os_log_impl(&dword_1830D4000, v17, v58, "%{public}s called with null association", buf, 0xCu);
      }
    }
    else if (v68)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v17 = __nwlog_obj();
      os_log_type_t v62 = type;
      BOOL v63 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (v63)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v71 = "nw_association_mark_flow_disconnected";
          __int16 v72 = 2082;
          __int16 v73 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v17, v62, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_106;
      }
      if (v63)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v71 = "nw_association_mark_flow_disconnected";
        _os_log_impl(&dword_1830D4000, v17, v62, "%{public}s called with null association, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v17 = __nwlog_obj();
      os_log_type_t v66 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v71 = "nw_association_mark_flow_disconnected";
        _os_log_impl(&dword_1830D4000, v17, v66, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_140:

    goto LABEL_106;
  }
  if (!v4)
  {
    v59 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v71 = "nw_association_mark_flow_disconnected";
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v68 = 0;
    if (!__nwlog_fault(v16, &type, &v68)) {
      goto LABEL_106;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v17 = __nwlog_obj();
      os_log_type_t v60 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v71 = "nw_association_mark_flow_disconnected";
        _os_log_impl(&dword_1830D4000, v17, v60, "%{public}s called with null handle", buf, 0xCu);
      }
      goto LABEL_140;
    }
    if (!v68)
    {
      __int16 v17 = __nwlog_obj();
      os_log_type_t v67 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v71 = "nw_association_mark_flow_disconnected";
        _os_log_impl(&dword_1830D4000, v17, v67, "%{public}s called with null handle, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_140;
    }
    uint64_t v21 = (char *)__nw_create_backtrace_string();
    __int16 v17 = __nwlog_obj();
    os_log_type_t v64 = type;
    BOOL v65 = os_log_type_enabled(v17, type);
    if (!v21)
    {
      if (v65)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v71 = "nw_association_mark_flow_disconnected";
        _os_log_impl(&dword_1830D4000, v17, v64, "%{public}s called with null handle, no backtrace", buf, 0xCu);
      }
      goto LABEL_140;
    }
    if (v65)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v71 = "nw_association_mark_flow_disconnected";
      __int16 v72 = 2082;
      __int16 v73 = v21;
      _os_log_impl(&dword_1830D4000, v17, v64, "%{public}s called with null handle, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_31;
  }
  id v6 = nw_path_parameters_copy_context(*((void **)v3 + 2));
  nw_context_assert_queue(v6);

  uint64_t v7 = *((void *)v3 + 5);
  if (!v7)
  {
    if (nw_path_parameters_get_logging_disabled(*((void *)v3 + 2))) {
      goto LABEL_108;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    id v14 = (id)gconnectionLogObj;
    logging_description = nw_endpoint_get_logging_description(*((void **)v3 + 1));
    *(_DWORD *)buf = 136446466;
    __int16 v71 = "nw_association_mark_flow_disconnected";
    __int16 v72 = 2082;
    __int16 v73 = (void *)logging_description;
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v68 = 0;
    if (!__nwlog_fault(v16, &type, &v68)) {
      goto LABEL_106;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      __int16 v17 = (id)gconnectionLogObj;
      os_log_type_t v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        os_log_type_t v19 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446466;
        __int16 v71 = "nw_association_mark_flow_disconnected";
        __int16 v72 = 2082;
        __int16 v73 = (void *)v19;
        _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s <nw_association %{public}s> does not have a handle hash table", buf, 0x16u);
      }
      goto LABEL_140;
    }
    if (!v68)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      __int16 v17 = (id)gconnectionLogObj;
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v17, type))
      {
        os_log_type_t v30 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446466;
        __int16 v71 = "nw_association_mark_flow_disconnected";
        __int16 v72 = 2082;
        __int16 v73 = (void *)v30;
        _os_log_impl(&dword_1830D4000, v17, v29, "%{public}s <nw_association %{public}s> does not have a handle hash table, backtrace limit exceeded", buf, 0x16u);
      }
      goto LABEL_140;
    }
    uint64_t v20 = __nw_create_backtrace_string();
    if (!v20)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      __int16 v17 = (id)gconnectionLogObj;
      os_log_type_t v31 = type;
      if (os_log_type_enabled(v17, type))
      {
        BOOL v32 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446466;
        __int16 v71 = "nw_association_mark_flow_disconnected";
        __int16 v72 = 2082;
        __int16 v73 = (void *)v32;
        _os_log_impl(&dword_1830D4000, v17, v31, "%{public}s <nw_association %{public}s> does not have a handle hash table, no backtrace", buf, 0x16u);
      }
      goto LABEL_140;
    }
    uint64_t v21 = (char *)v20;
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    __int16 v17 = (id)gconnectionLogObj;
    os_log_type_t v22 = type;
    if (os_log_type_enabled(v17, type))
    {
      id v23 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
      *(_DWORD *)buf = 136446722;
      __int16 v71 = "nw_association_mark_flow_disconnected";
      __int16 v72 = 2082;
      __int16 v73 = (void *)v23;
      __int16 v74 = 2082;
      uint64_t v75 = v21;
      _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s <nw_association %{public}s> does not have a handle hash table, dumping backtrace:%{public}s", buf, 0x20u);
    }
LABEL_31:

    free(v21);
    if (!v16) {
      goto LABEL_108;
    }
    goto LABEL_107;
  }
  if (!nw_hash_table_get_node(v7, (uint64_t)v5, 0) && !nw_path_parameters_get_logging_disabled(*((void *)v3 + 2)))
  {
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    id v8 = (id)gconnectionLogObj;
    time_t v9 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
    *(_DWORD *)buf = 136446722;
    __int16 v71 = "nw_association_mark_flow_disconnected";
    __int16 v72 = 2082;
    __int16 v73 = (void *)v9;
    __int16 v74 = 2048;
    uint64_t v75 = v5;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v68 = 0;
    if (!__nwlog_fault(v10, &type, &v68))
    {
LABEL_61:
      if (!v10) {
        goto LABEL_63;
      }
      goto LABEL_62;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      BOOL v11 = (id)gconnectionLogObj;
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        char v13 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446722;
        __int16 v71 = "nw_association_mark_flow_disconnected";
        __int16 v72 = 2082;
        __int16 v73 = (void *)v13;
        __int16 v74 = 2048;
        uint64_t v75 = v5;
        _os_log_impl(&dword_1830D4000, v11, v12, "%{public}s <nw_association %{public}s> does not have handle %p registered", buf, 0x20u);
      }
LABEL_60:

      goto LABEL_61;
    }
    if (!v68)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      BOOL v11 = (id)gconnectionLogObj;
      os_log_type_t v33 = type;
      if (os_log_type_enabled(v11, type))
      {
        os_log_type_t v34 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446722;
        __int16 v71 = "nw_association_mark_flow_disconnected";
        __int16 v72 = 2082;
        __int16 v73 = (void *)v34;
        __int16 v74 = 2048;
        uint64_t v75 = v5;
        _os_log_impl(&dword_1830D4000, v11, v33, "%{public}s <nw_association %{public}s> does not have handle %p registered, backtrace limit exceeded", buf, 0x20u);
      }
      goto LABEL_60;
    }
    id v24 = __nw_create_backtrace_string();
    if (!v24)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      BOOL v11 = (id)gconnectionLogObj;
      os_log_type_t v35 = type;
      if (os_log_type_enabled(v11, type))
      {
        os_log_type_t v36 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446722;
        __int16 v71 = "nw_association_mark_flow_disconnected";
        __int16 v72 = 2082;
        __int16 v73 = (void *)v36;
        __int16 v74 = 2048;
        uint64_t v75 = v5;
        _os_log_impl(&dword_1830D4000, v11, v35, "%{public}s <nw_association %{public}s> does not have handle %p registered, no backtrace", buf, 0x20u);
      }
      goto LABEL_60;
    }
    uint64_t v25 = (char *)v24;
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    __int16 v26 = (id)gconnectionLogObj;
    os_log_type_t v27 = type;
    if (os_log_type_enabled(v26, type))
    {
      os_log_type_t v28 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
      *(_DWORD *)buf = 136446978;
      __int16 v71 = "nw_association_mark_flow_disconnected";
      __int16 v72 = 2082;
      __int16 v73 = (void *)v28;
      __int16 v74 = 2048;
      uint64_t v75 = v5;
      __int16 v76 = 2082;
      v77 = v25;
      _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s <nw_association %{public}s> does not have handle %p registered, dumping backtrace:%{public}s", buf, 0x2Au);
    }

    free(v25);
    if (v10) {
LABEL_62:
    }
      free(v10);
  }
LABEL_63:
  uint64_t v37 = *((void *)v3 + 6);
  if (!v37)
  {
    if (nw_path_parameters_get_logging_disabled(*((void *)v3 + 2))) {
      goto LABEL_108;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    __int16 v45 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
    {
      v46 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
      *(_DWORD *)buf = 136446466;
      __int16 v71 = "nw_association_mark_flow_disconnected";
      __int16 v72 = 2082;
      __int16 v73 = (void *)v46;
      _os_log_impl(&dword_1830D4000, v45, OS_LOG_TYPE_INFO, "%{public}s <nw_association %{public}s> does not have a connected flow hash table", buf, 0x16u);
    }
LABEL_81:

    goto LABEL_108;
  }
  BOOL node = nw_hash_table_get_node(v37, (uint64_t)v5, 0);
  if (!node)
  {
    if (nw_path_parameters_get_logging_disabled(*((void *)v3 + 2))) {
      goto LABEL_108;
    }
    if (__nwlog_connection_log::onceToken != -1) {
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
    }
    __int16 v45 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
    {
      __int16 v47 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
      *(_DWORD *)buf = 136446722;
      __int16 v71 = "nw_association_mark_flow_disconnected";
      __int16 v72 = 2082;
      __int16 v73 = (void *)v47;
      __int16 v74 = 2048;
      uint64_t v75 = v5;
      _os_log_impl(&dword_1830D4000, v45, OS_LOG_TYPE_INFO, "%{public}s <nw_association %{public}s> does not have connected flow %p registered", buf, 0x20u);
    }
    goto LABEL_81;
  }
  BOOL v39 = node;
  if (nw_hash_table_remove_node(*((void *)v3 + 6), node)
    || nw_path_parameters_get_logging_disabled(*((void *)v3 + 2)))
  {
    goto LABEL_108;
  }
  if (__nwlog_connection_log::onceToken != -1) {
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
  }
  id v40 = (id)gconnectionLogObj;
  BOOL v41 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
  *(_DWORD *)buf = 136446722;
  __int16 v71 = "nw_association_mark_flow_disconnected";
  __int16 v72 = 2082;
  __int16 v73 = (void *)v41;
  __int16 v74 = 2048;
  uint64_t v75 = (char *)v39;
  uint64_t v16 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v68 = 0;
  if (__nwlog_fault(v16, &type, &v68))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v42 = (id)gconnectionLogObj;
      os_log_type_t v43 = type;
      if (os_log_type_enabled(v42, type))
      {
        char v44 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446722;
        __int16 v71 = "nw_association_mark_flow_disconnected";
        __int16 v72 = 2082;
        __int16 v73 = (void *)v44;
        __int16 v74 = 2048;
        uint64_t v75 = (char *)v39;
        _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s <nw_association %{public}s> failed to remove connected flow for node %p", buf, 0x20u);
      }
    }
    else if (v68)
    {
      __int16 v48 = __nw_create_backtrace_string();
      if (v48)
      {
        __int16 v49 = (char *)v48;
        if (__nwlog_connection_log::onceToken != -1) {
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
        }
        __int16 v50 = (id)gconnectionLogObj;
        os_log_type_t v51 = type;
        if (os_log_type_enabled(v50, type))
        {
          __int16 v52 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
          *(_DWORD *)buf = 136446978;
          __int16 v71 = "nw_association_mark_flow_disconnected";
          __int16 v72 = 2082;
          __int16 v73 = (void *)v52;
          __int16 v74 = 2048;
          uint64_t v75 = (char *)v39;
          __int16 v76 = 2082;
          v77 = v49;
          _os_log_impl(&dword_1830D4000, v50, v51, "%{public}s <nw_association %{public}s> failed to remove connected flow for node %p, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v49);
        if (v16) {
          goto LABEL_107;
        }
        goto LABEL_108;
      }
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v42 = (id)gconnectionLogObj;
      os_log_type_t v55 = type;
      if (os_log_type_enabled(v42, type))
      {
        __int16 v56 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446722;
        __int16 v71 = "nw_association_mark_flow_disconnected";
        __int16 v72 = 2082;
        __int16 v73 = (void *)v56;
        __int16 v74 = 2048;
        uint64_t v75 = (char *)v39;
        _os_log_impl(&dword_1830D4000, v42, v55, "%{public}s <nw_association %{public}s> failed to remove connected flow for node %p, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      if (__nwlog_connection_log::onceToken != -1) {
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
      }
      os_log_type_t v42 = (id)gconnectionLogObj;
      os_log_type_t v53 = type;
      if (os_log_type_enabled(v42, type))
      {
        uint64_t v54 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446722;
        __int16 v71 = "nw_association_mark_flow_disconnected";
        __int16 v72 = 2082;
        __int16 v73 = (void *)v54;
        __int16 v74 = 2048;
        uint64_t v75 = (char *)v39;
        _os_log_impl(&dword_1830D4000, v42, v53, "%{public}s <nw_association %{public}s> failed to remove connected flow for node %p, backtrace limit exceeded", buf, 0x20u);
      }
    }
  }
LABEL_106:
  if (v16) {
LABEL_107:
  }
    free(v16);
LABEL_108:
}

void sub_183D000FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_path_flow_registration *nw_association_create_flow(uint64_t a1, int a2, int a3, int a4, int a5, _OWORD *a6, _DWORD *a7)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return nw_path_evaluator_create_flow_inner(*(void **)(a1 + 24), a2, a3, a5, a4, a6, 0, 0, a7);
  }
  id v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v19 = "nw_association_create_flow";
  time_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_association_create_flow";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null association", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v19 = "nw_association_create_flow";
          __int16 v20 = 2082;
          uint64_t v21 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_association_create_flow";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null association, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v19 = "nw_association_create_flow";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_19:
  if (v9) {
    free(v9);
  }
  return 0;
}

void nw_association_clear_cached_content_for_protocol(void *a1, void *a2)
{
}

NWConcrete_nw_interface_status_monitor *nw_connection_create_interface_status_monitor(void *a1)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = (id *)v1;
    id v4 = v3[2];

    id v5 = nw_parameters_copy_context(v4);
    id v6 = v5;
    if (!v5)
    {
      uint64_t v25 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      uint64_t v54 = "nw_connection_create_interface_status_monitor";
      __int16 v26 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v51 = 0;
      if (!__nwlog_fault(v26, &type, &v51)) {
        goto LABEL_87;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v54 = "nw_connection_create_interface_status_monitor";
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v51)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v39 = type;
        BOOL v40 = os_log_type_enabled(v27, type);
        if (backtrace_string)
        {
          if (v40)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v54 = "nw_connection_create_interface_status_monitor";
            __int16 v55 = 2082;
            __int16 v56 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v27, v39, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v26) {
            goto LABEL_89;
          }
          goto LABEL_88;
        }
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v54 = "nw_connection_create_interface_status_monitor";
          _os_log_impl(&dword_1830D4000, v27, v39, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v48 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v54 = "nw_connection_create_interface_status_monitor";
          _os_log_impl(&dword_1830D4000, v27, v48, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }
      goto LABEL_86;
    }
    uint64_t v7 = (dispatch_queue_t *)v5;
    id v8 = v7;
    if (((_BYTE)v7[17] & 8) == 0) {
      dispatch_assert_queue_V2(v7[1]);
    }

    if ((*((unsigned char *)v3 + 109) & 0x40) != 0)
    {
      time_t v9 = objc_alloc_init(NWConcrete_nw_interface_status_monitor);
      if (v9)
      {
        uint64_t v10 = (OS_nw_channel *)nw_endpoint_handler_copy_channel(v3[18]);
        channel = v9->channel;
        v9->channel = v10;

        if (v9->channel)
        {
          os_log_type_t v12 = (void *)nw_endpoint_handler_copy_connected_path(v3[18]);
          os_log_type_t v13 = v12;
          if (v12)
          {
            BOOL v14 = (OS_nw_interface *)nw_path_copy_interface(v12);
            interface = v9->interface;
            v9->interface = v14;
          }
          char v16 = v9;

          goto LABEL_19;
        }
        __int16 v17 = v3[2];
        if (v17 && !nw_path_parameters_get_logging_disabled(v17[13]))
        {
          if (__nwlog_connection_log::onceToken != -1) {
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_28);
          }
          os_log_type_t v18 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            int v19 = *((_DWORD *)v3 + 112);
            *(_DWORD *)buf = 136446466;
            uint64_t v54 = "nw_connection_create_interface_status_monitor";
            __int16 v55 = 1024;
            LODWORD(v56) = v19;
            _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_INFO, "%{public}s [C%u] Cannot start an interface monitor, channel is not available", buf, 0x12u);
          }
        }
LABEL_18:
        char v16 = 0;
LABEL_19:

LABEL_20:
        goto LABEL_21;
      }
      os_log_type_t v31 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      uint64_t v54 = "nw_connection_create_interface_status_monitor";
      BOOL v32 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v51 = 0;
      if (__nwlog_fault(v32, &type, &v51))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v33 = __nwlog_obj();
          os_log_type_t v34 = type;
          if (os_log_type_enabled(v33, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v54 = "nw_connection_create_interface_status_monitor";
            _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s called with null monitor", buf, 0xCu);
          }
        }
        else if (v51)
        {
          char v44 = (char *)__nw_create_backtrace_string();
          os_log_type_t v33 = __nwlog_obj();
          os_log_type_t v45 = type;
          BOOL v46 = os_log_type_enabled(v33, type);
          if (v44)
          {
            if (v46)
            {
              *(_DWORD *)buf = 136446466;
              uint64_t v54 = "nw_connection_create_interface_status_monitor";
              __int16 v55 = 2082;
              __int16 v56 = v44;
              _os_log_impl(&dword_1830D4000, v33, v45, "%{public}s called with null monitor, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v44);
            goto LABEL_93;
          }
          if (v46)
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v54 = "nw_connection_create_interface_status_monitor";
            _os_log_impl(&dword_1830D4000, v33, v45, "%{public}s called with null monitor, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          os_log_type_t v33 = __nwlog_obj();
          os_log_type_t v50 = type;
          if (os_log_type_enabled(v33, type))
          {
            *(_DWORD *)buf = 136446210;
            uint64_t v54 = "nw_connection_create_interface_status_monitor";
            _os_log_impl(&dword_1830D4000, v33, v50, "%{public}s called with null monitor, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_93:
      if (v32) {
        free(v32);
      }
      goto LABEL_18;
    }
    os_log_type_t v29 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v54 = "nw_connection_create_interface_status_monitor";
    __int16 v26 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v51 = 0;
    if (__nwlog_fault(v26, &type, &v51))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v54 = "nw_connection_create_interface_status_monitor";
          _os_log_impl(&dword_1830D4000, v27, v30, "%{public}s called with null connection->endpoint_handler_connected", buf, 0xCu);
        }
LABEL_86:

        goto LABEL_87;
      }
      if (!v51)
      {
        os_log_type_t v27 = __nwlog_obj();
        os_log_type_t v49 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v54 = "nw_connection_create_interface_status_monitor";
          _os_log_impl(&dword_1830D4000, v27, v49, "%{public}s called with null connection->endpoint_handler_connected, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_86;
      }
      BOOL v41 = (char *)__nw_create_backtrace_string();
      os_log_type_t v27 = __nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v43 = os_log_type_enabled(v27, type);
      if (!v41)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v54 = "nw_connection_create_interface_status_monitor";
          _os_log_impl(&dword_1830D4000, v27, v42, "%{public}s called with null connection->endpoint_handler_connected, no backtrace", buf, 0xCu);
        }
        goto LABEL_86;
      }
      if (v43)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v54 = "nw_connection_create_interface_status_monitor";
        __int16 v55 = 2082;
        __int16 v56 = v41;
        _os_log_impl(&dword_1830D4000, v27, v42, "%{public}s called with null connection->endpoint_handler_connected, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v41);
    }
LABEL_87:
    if (!v26)
    {
LABEL_89:
      char v16 = 0;
      goto LABEL_20;
    }
LABEL_88:
    free(v26);
    goto LABEL_89;
  }
  uint64_t v21 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v54 = "nw_connection_create_interface_status_monitor";
  uint64_t v22 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v51 = 0;
  if (__nwlog_fault(v22, &type, &v51))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v54 = "nw_connection_create_interface_status_monitor";
        _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v51)
    {
      os_log_type_t v35 = (char *)__nw_create_backtrace_string();
      id v23 = __nwlog_obj();
      os_log_type_t v36 = type;
      BOOL v37 = os_log_type_enabled(v23, type);
      if (v35)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v54 = "nw_connection_create_interface_status_monitor";
          __int16 v55 = 2082;
          __int16 v56 = v35;
          _os_log_impl(&dword_1830D4000, v23, v36, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v35);
        goto LABEL_78;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v54 = "nw_connection_create_interface_status_monitor";
        _os_log_impl(&dword_1830D4000, v23, v36, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v23 = __nwlog_obj();
      os_log_type_t v47 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v54 = "nw_connection_create_interface_status_monitor";
        _os_log_impl(&dword_1830D4000, v23, v47, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_78:
  if (v22) {
    free(v22);
  }
  char v16 = 0;
LABEL_21:

  return v16;
}

void sub_183D01210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id nw_interface_status_monitor_copy_interface(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[1];
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v16 = "nw_interface_status_monitor_copy_interface";
  id v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_interface_status_monitor_copy_interface";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null monitor", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          char v16 = "nw_interface_status_monitor_copy_interface";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null monitor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_interface_status_monitor_copy_interface";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null monitor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        char v16 = "nw_interface_status_monitor_copy_interface";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null monitor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void nw_interface_status_monitor_cancel(void *a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *((unsigned char *)v1 + 72) |= 1u;
    id v3 = (void *)v1[2];
    v1[2] = 0;

    uint64_t v4 = v2[7];
    if (v4)
    {
      nw_queue_cancel_source(v4);
      v2[7] = 0;
    }
    uint64_t v5 = v2[8];
    if (v5)
    {
      nw_queue_cancel_source(v5);
      v2[8] = 0;
    }
    id v6 = (const void *)v2[5];
    if (v6 && v2[6])
    {
      uint64_t v7 = _Block_copy(v6);
      os_log_type_t v8 = v2[6];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __nw_interface_status_monitor_cancel_block_invoke;
      block[3] = &unk_1E524AFA8;
      id v29 = v7;
      id v9 = v7;
      dispatch_async(v8, block);
    }
    os_log_type_t v10 = (const void *)v2[3];
    if (v10 && v2[4])
    {
      BOOL v11 = _Block_copy(v10);
      os_log_type_t v12 = v2[4];
      v26[0] = MEMORY[0x1E4F143A8];
      v26[1] = 3221225472;
      v26[2] = __nw_interface_status_monitor_cancel_block_invoke_2;
      v26[3] = &unk_1E524AFA8;
      id v27 = v11;
      id v13 = v11;
      dispatch_async(v12, v26);
    }
    BOOL v14 = (void *)v2[5];
    v2[5] = 0;

    os_log_type_t v15 = (void *)v2[6];
    v2[6] = 0;

    char v16 = (void *)v2[3];
    v2[3] = 0;

    __int16 v17 = (void *)v2[4];
    v2[4] = 0;

    goto LABEL_13;
  }
  os_log_type_t v18 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v33 = "nw_interface_status_monitor_cancel";
  uint64_t v19 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v31 = OS_LOG_TYPE_ERROR;
  char v30 = 0;
  if (__nwlog_fault(v19, &v31, &v30))
  {
    if (v31 == OS_LOG_TYPE_FAULT)
    {
      __int16 v20 = __nwlog_obj();
      os_log_type_t v21 = v31;
      if (os_log_type_enabled(v20, v31))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v33 = "nw_interface_status_monitor_cancel";
        _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null monitor", buf, 0xCu);
      }
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v20 = __nwlog_obj();
      os_log_type_t v23 = v31;
      BOOL v24 = os_log_type_enabled(v20, v31);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v33 = "nw_interface_status_monitor_cancel";
          __int16 v34 = 2082;
          os_log_type_t v35 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s called with null monitor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v33 = "nw_interface_status_monitor_cancel";
        _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s called with null monitor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v20 = __nwlog_obj();
      os_log_type_t v25 = v31;
      if (os_log_type_enabled(v20, v31))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v33 = "nw_interface_status_monitor_cancel";
        _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null monitor, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_30:
  if (v19) {
    free(v19);
  }
LABEL_13:
}

void sub_183D018E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __nw_interface_status_monitor_cancel_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __nw_interface_status_monitor_cancel_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void nw_interface_status_monitor_set_update_handler(void *a1, void *a2, void *a3)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  os_log_type_t v8 = v7;
  if (!v5)
  {
    os_log_type_t v18 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v61[0] = 0;
    if (!__nwlog_fault(v19, type, v61)) {
      goto LABEL_70;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v20 = __nwlog_obj();
      os_log_type_t v21 = type[0];
      if (os_log_type_enabled(v20, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
        _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s called with null monitor", buf, 0xCu);
      }
    }
    else if (v61[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v20 = __nwlog_obj();
      os_log_type_t v27 = type[0];
      BOOL v28 = os_log_type_enabled(v20, type[0]);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v20, v27, "%{public}s called with null monitor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_70:
        if (!v19) {
          goto LABEL_14;
        }
LABEL_71:
        free(v19);
        goto LABEL_14;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
        _os_log_impl(&dword_1830D4000, v20, v27, "%{public}s called with null monitor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v20 = __nwlog_obj();
      os_log_type_t v34 = type[0];
      if (os_log_type_enabled(v20, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
        _os_log_impl(&dword_1830D4000, v20, v34, "%{public}s called with null monitor, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_69:

    goto LABEL_70;
  }
  if (!v7)
  {
    uint64_t v22 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v61[0] = 0;
    if (!__nwlog_fault(v19, type, v61)) {
      goto LABEL_70;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v20 = __nwlog_obj();
      os_log_type_t v23 = type[0];
      if (os_log_type_enabled(v20, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
        _os_log_impl(&dword_1830D4000, v20, v23, "%{public}s called with null handler", buf, 0xCu);
      }
      goto LABEL_69;
    }
    if (!v61[0])
    {
      __int16 v20 = __nwlog_obj();
      os_log_type_t v35 = type[0];
      if (os_log_type_enabled(v20, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
        _os_log_impl(&dword_1830D4000, v20, v35, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_69;
    }
    id v29 = (char *)__nw_create_backtrace_string();
    __int16 v20 = __nwlog_obj();
    os_log_type_t v30 = type[0];
    BOOL v31 = os_log_type_enabled(v20, type[0]);
    if (!v29)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
        _os_log_impl(&dword_1830D4000, v20, v30, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_69;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v29;
      _os_log_impl(&dword_1830D4000, v20, v30, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (!v6)
  {
    BOOL v24 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v61[0] = 0;
    if (!__nwlog_fault(v19, type, v61)) {
      goto LABEL_70;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v20 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (os_log_type_enabled(v20, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
        _os_log_impl(&dword_1830D4000, v20, v25, "%{public}s called with null queue", buf, 0xCu);
      }
      goto LABEL_69;
    }
    if (!v61[0])
    {
      __int16 v20 = __nwlog_obj();
      os_log_type_t v36 = type[0];
      if (os_log_type_enabled(v20, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
        _os_log_impl(&dword_1830D4000, v20, v36, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_69;
    }
    id v29 = (char *)__nw_create_backtrace_string();
    __int16 v20 = __nwlog_obj();
    os_log_type_t v32 = type[0];
    BOOL v33 = os_log_type_enabled(v20, type[0]);
    if (!v29)
    {
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
        _os_log_impl(&dword_1830D4000, v20, v32, "%{public}s called with null queue, no backtrace", buf, 0xCu);
      }
      goto LABEL_69;
    }
    if (v33)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_update_handler";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v29;
      _os_log_impl(&dword_1830D4000, v20, v32, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(v29);
    if (!v19) {
      goto LABEL_14;
    }
    goto LABEL_71;
  }
  if ((*((unsigned char *)v5 + 72) & 1) != 0 || !*((void *)v5 + 2))
  {
    v48[0] = MEMORY[0x1E4F143A8];
    v48[1] = 3221225472;
    v48[2] = __nw_interface_status_monitor_set_update_handler_block_invoke;
    v48[3] = &unk_1E524AFA8;
    id v49 = v7;
    dispatch_async(v6, v48);

    goto LABEL_14;
  }
  id v9 = _Block_copy(v7);
  os_log_type_t v10 = (void *)*((void *)v5 + 5);
  *((void *)v5 + 5) = v9;

  objc_storeStrong((id *)v5 + 6, a2);
  if (!*((void *)v5 + 8))
  {
    uint64_t v11 = *((void *)v5 + 2);
    v46[0] = MEMORY[0x1E4F143A8];
    v46[1] = 3221225472;
    v46[2] = __nw_interface_status_monitor_set_update_handler_block_invoke_2;
    v46[3] = &unk_1E524AFF8;
    id v47 = v5;
    if (v11)
    {
      nw_context_assert_queue(*(void **)(v11 + 152));
      if (*(void *)(v11 + 136))
      {
        int v12 = os_channel_configure_interface_advisory();
        if (v12)
        {
          LODWORD(source) = v12;
          *((void *)v5 + 8) = 0;
        }
        else
        {
          dispatch_group_enter(*(dispatch_group_t *)(v11 + 208));
          id v13 = *(void **)(v11 + 152);
          int v14 = *(_DWORD *)(v11 + 432);
          *(void *)buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[8] = 0x40000000;
          *(void *)&buf[16] = __nw_channel_create_interface_advisory_source_block_invoke;
          os_log_type_t v58 = &unk_1E524B578;
          v59 = v46;
          uint64_t v60 = v11;
          *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
          uint64_t v51 = 0x40000000;
          __int16 v52 = __nw_channel_create_interface_advisory_source_block_invoke_2;
          os_log_type_t v53 = &__block_descriptor_tmp_13_88352;
          uint64_t v54 = v11;
          uint64_t source = nw_queue_context_create_source(v13, v14, 5, 4u, buf, type);
          nw_queue_activate_source(source);
          *((void *)v5 + 8) = source;
          if (source)
          {
LABEL_12:

            goto LABEL_14;
          }
        }
      }
      else
      {
        LODWORD(source) = 6;
        *((void *)v5 + 8) = 0;
      }
LABEL_11:
      char v16 = (void *)*((void *)v5 + 5);
      *((void *)v5 + 5) = 0;

      __int16 v17 = (void *)*((void *)v5 + 6);
      *((void *)v5 + 6) = 0;

      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __nw_interface_status_monitor_set_update_handler_block_invoke_4;
      block[3] = &unk_1E524B020;
      id v44 = v8;
      int v45 = source;
      dispatch_async(v6, block);

      goto LABEL_12;
    }
    __nwlog_obj();
    *(_DWORD *)v61 = 136446210;
    os_log_type_t v62 = "nw_channel_create_interface_advisory_source";
    BOOL v37 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v56 = OS_LOG_TYPE_ERROR;
    char v55 = 0;
    if (__nwlog_fault(v37, &v56, &v55))
    {
      if (v56 == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v38 = __nwlog_obj();
        os_log_type_t v39 = v56;
        if (os_log_type_enabled(v38, v56))
        {
          *(_DWORD *)v61 = 136446210;
          os_log_type_t v62 = "nw_channel_create_interface_advisory_source";
          BOOL v40 = "%{public}s called with null channel";
LABEL_81:
          _os_log_impl(&dword_1830D4000, v38, v39, v40, v61, 0xCu);
        }
      }
      else if (v55)
      {
        BOOL v41 = (char *)__nw_create_backtrace_string();
        os_log_type_t v38 = __nwlog_obj();
        os_log_type_t v39 = v56;
        BOOL v42 = os_log_type_enabled(v38, v56);
        if (v41)
        {
          if (v42)
          {
            *(_DWORD *)v61 = 136446466;
            os_log_type_t v62 = "nw_channel_create_interface_advisory_source";
            __int16 v63 = 2082;
            os_log_type_t v64 = v41;
            _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s called with null channel, dumping backtrace:%{public}s", v61, 0x16u);
          }
          free(v41);
          goto LABEL_82;
        }
        if (v42)
        {
          *(_DWORD *)v61 = 136446210;
          os_log_type_t v62 = "nw_channel_create_interface_advisory_source";
          BOOL v40 = "%{public}s called with null channel, no backtrace";
          goto LABEL_81;
        }
      }
      else
      {
        os_log_type_t v38 = __nwlog_obj();
        os_log_type_t v39 = v56;
        if (os_log_type_enabled(v38, v56))
        {
          *(_DWORD *)v61 = 136446210;
          os_log_type_t v62 = "nw_channel_create_interface_advisory_source";
          BOOL v40 = "%{public}s called with null channel, backtrace limit exceeded";
          goto LABEL_81;
        }
      }
    }
LABEL_82:
    if (v37) {
      free(v37);
    }
    LODWORD(source) = 0;
    *((void *)v5 + 8) = 0;
    goto LABEL_11;
  }
LABEL_14:
}

uint64_t __nw_interface_status_monitor_set_update_handler_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __nw_interface_status_monitor_set_update_handler_block_invoke_2(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  os_log_type_t v8 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 40));
  id v9 = v8;
  if (v8 && (os_log_type_t v10 = *(NSObject **)(*(void *)(a1 + 32) + 48)) != 0)
  {
    v16[0] = 0;
    v16[1] = v16;
    v16[2] = 0x2020000000;
    v16[3] = a2;
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __nw_interface_status_monitor_set_update_handler_block_invoke_3;
    v11[3] = &unk_1E524AFD0;
    id v12 = v8;
    id v13 = v16;
    uint64_t v14 = a3;
    int v15 = a4;
    dispatch_async(v10, v11);

    _Block_object_dispose(v16, 8);
  }
  else if (a2)
  {
    free(a2);
  }
}

uint64_t __nw_interface_status_monitor_set_update_handler_block_invoke_4(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 40);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 22;
  }
  return (*(uint64_t (**)(void, void, void, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0, 0, v2);
}

void __nw_interface_status_monitor_set_update_handler_block_invoke_3(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v2)
  {
    free(v2);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void nw_interface_status_monitor_set_packet_event_handler(void *a1, void *a2, void *a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  os_log_type_t v8 = v7;
  if (!v5)
  {
    __int16 v17 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v60[0] = 0;
    if (!__nwlog_fault(v18, type, v60)) {
      goto LABEL_68;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v20 = type[0];
      if (os_log_type_enabled(v19, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
        _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null monitor", buf, 0xCu);
      }
    }
    else if (v60[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v26 = type[0];
      BOOL v27 = os_log_type_enabled(v19, type[0]);
      if (backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v19, v26, "%{public}s called with null monitor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_68:
        if (!v18) {
          goto LABEL_13;
        }
LABEL_69:
        free(v18);
        goto LABEL_13;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
        _os_log_impl(&dword_1830D4000, v19, v26, "%{public}s called with null monitor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v33 = type[0];
      if (os_log_type_enabled(v19, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
        _os_log_impl(&dword_1830D4000, v19, v33, "%{public}s called with null monitor, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_67:

    goto LABEL_68;
  }
  if (!v7)
  {
    os_log_type_t v21 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v60[0] = 0;
    if (!__nwlog_fault(v18, type, v60)) {
      goto LABEL_68;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v22 = type[0];
      if (os_log_type_enabled(v19, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
        _os_log_impl(&dword_1830D4000, v19, v22, "%{public}s called with null handler", buf, 0xCu);
      }
      goto LABEL_67;
    }
    if (!v60[0])
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v34 = type[0];
      if (os_log_type_enabled(v19, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
        _os_log_impl(&dword_1830D4000, v19, v34, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_67;
    }
    BOOL v28 = (char *)__nw_create_backtrace_string();
    uint64_t v19 = __nwlog_obj();
    os_log_type_t v29 = type[0];
    BOOL v30 = os_log_type_enabled(v19, type[0]);
    if (!v28)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
        _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_67;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v28;
      _os_log_impl(&dword_1830D4000, v19, v29, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_43;
  }
  if (!v6)
  {
    os_log_type_t v23 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
    os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v60[0] = 0;
    if (!__nwlog_fault(v18, type, v60)) {
      goto LABEL_68;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v24 = type[0];
      if (os_log_type_enabled(v19, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
        _os_log_impl(&dword_1830D4000, v19, v24, "%{public}s called with null queue", buf, 0xCu);
      }
      goto LABEL_67;
    }
    if (!v60[0])
    {
      uint64_t v19 = __nwlog_obj();
      os_log_type_t v35 = type[0];
      if (os_log_type_enabled(v19, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
        _os_log_impl(&dword_1830D4000, v19, v35, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_67;
    }
    BOOL v28 = (char *)__nw_create_backtrace_string();
    uint64_t v19 = __nwlog_obj();
    os_log_type_t v31 = type[0];
    BOOL v32 = os_log_type_enabled(v19, type[0]);
    if (!v28)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
        _os_log_impl(&dword_1830D4000, v19, v31, "%{public}s called with null queue, no backtrace", buf, 0xCu);
      }
      goto LABEL_67;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_interface_status_monitor_set_packet_event_handler";
      *(_WORD *)&buf[12] = 2082;
      *(void *)&buf[14] = v28;
      _os_log_impl(&dword_1830D4000, v19, v31, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_43:

    free(v28);
    if (!v18) {
      goto LABEL_13;
    }
    goto LABEL_69;
  }
  if ((*((unsigned char *)v5 + 72) & 1) != 0 || !*((void *)v5 + 2))
  {
    v47[0] = MEMORY[0x1E4F143A8];
    v47[1] = 3221225472;
    v47[2] = __nw_interface_status_monitor_set_packet_event_handler_block_invoke;
    v47[3] = &unk_1E524AFA8;
    id v48 = v7;
    dispatch_async(v6, v47);

    goto LABEL_13;
  }
  id v9 = _Block_copy(v7);
  os_log_type_t v10 = (void *)*((void *)v5 + 3);
  *((void *)v5 + 3) = v9;

  objc_storeStrong((id *)v5 + 4, a2);
  if (!*((void *)v5 + 7))
  {
    uint64_t v11 = *((void *)v5 + 2);
    v45[0] = MEMORY[0x1E4F143A8];
    v45[1] = 3221225472;
    v45[2] = __nw_interface_status_monitor_set_packet_event_handler_block_invoke_2;
    v45[3] = &unk_1E524B070;
    id v46 = v5;
    if (v11)
    {
      nw_context_assert_queue(*(void **)(v11 + 152));
      if (*(void *)(v11 + 136))
      {
        dispatch_group_enter(*(dispatch_group_t *)(v11 + 208));
        id v12 = *(void **)(v11 + 152);
        int v13 = *(_DWORD *)(v11 + 432);
        *(void *)buf = MEMORY[0x1E4F143A8];
        *(void *)&buf[8] = 0x40000000;
        *(void *)&buf[16] = __nw_channel_create_event_source_block_invoke;
        uint64_t v57 = &unk_1E524B530;
        os_log_type_t v58 = v45;
        uint64_t v59 = v11;
        *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
        uint64_t v50 = 0x40000000;
        uint64_t v51 = __nw_channel_create_event_source_block_invoke_10;
        __int16 v52 = &__block_descriptor_tmp_11_88335;
        uint64_t v53 = v11;
        uint64_t source = nw_queue_context_create_source(v12, v13, 5, 2u, buf, type);
        nw_queue_activate_source(source);
        *((void *)v5 + 7) = source;
        if (source)
        {
LABEL_11:

          goto LABEL_13;
        }
      }
      else
      {
        LODWORD(source) = 6;
        *((void *)v5 + 7) = 0;
      }
LABEL_10:
      int v15 = (void *)*((void *)v5 + 3);
      *((void *)v5 + 3) = 0;

      char v16 = (void *)*((void *)v5 + 4);
      *((void *)v5 + 4) = 0;

      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __nw_interface_status_monitor_set_packet_event_handler_block_invoke_4;
      block[3] = &unk_1E524B020;
      id v43 = v8;
      int v44 = source;
      dispatch_async(v6, block);

      goto LABEL_11;
    }
    __nwlog_obj();
    *(_DWORD *)uint64_t v60 = 136446210;
    v61 = "nw_channel_create_event_source";
    os_log_type_t v36 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v55 = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (__nwlog_fault(v36, &v55, &v54))
    {
      if (v55 == OS_LOG_TYPE_FAULT)
      {
        BOOL v37 = __nwlog_obj();
        os_log_type_t v38 = v55;
        if (os_log_type_enabled(v37, v55))
        {
          *(_DWORD *)uint64_t v60 = 136446210;
          v61 = "nw_channel_create_event_source";
          os_log_type_t v39 = "%{public}s called with null channel";
LABEL_79:
          _os_log_impl(&dword_1830D4000, v37, v38, v39, v60, 0xCu);
        }
      }
      else if (v54)
      {
        BOOL v40 = (char *)__nw_create_backtrace_string();
        BOOL v37 = __nwlog_obj();
        os_log_type_t v38 = v55;
        BOOL v41 = os_log_type_enabled(v37, v55);
        if (v40)
        {
          if (v41)
          {
            *(_DWORD *)uint64_t v60 = 136446466;
            v61 = "nw_channel_create_event_source";
            __int16 v62 = 2082;
            __int16 v63 = v40;
            _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s called with null channel, dumping backtrace:%{public}s", v60, 0x16u);
          }
          free(v40);
          goto LABEL_80;
        }
        if (v41)
        {
          *(_DWORD *)uint64_t v60 = 136446210;
          v61 = "nw_channel_create_event_source";
          os_log_type_t v39 = "%{public}s called with null channel, no backtrace";
          goto LABEL_79;
        }
      }
      else
      {
        BOOL v37 = __nwlog_obj();
        os_log_type_t v38 = v55;
        if (os_log_type_enabled(v37, v55))
        {
          *(_DWORD *)uint64_t v60 = 136446210;
          v61 = "nw_channel_create_event_source";
          os_log_type_t v39 = "%{public}s called with null channel, backtrace limit exceeded";
          goto LABEL_79;
        }
      }
    }
LABEL_80:
    if (v36) {
      free(v36);
    }
    LODWORD(source) = 0;
    *((void *)v5 + 7) = 0;
    goto LABEL_10;
  }
LABEL_13:
}

uint64_t __nw_interface_status_monitor_set_packet_event_handler_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void __nw_interface_status_monitor_set_packet_event_handler_block_invoke_2(uint64_t a1, int a2, void *a3, uint64_t a4, int a5)
{
  os_log_type_t v10 = _Block_copy(*(const void **)(*(void *)(a1 + 32) + 24));
  uint64_t v11 = v10;
  if (v10 && (id v12 = *(NSObject **)(*(void *)(a1 + 32) + 32)) != 0)
  {
    v19[0] = 0;
    v19[1] = v19;
    v19[2] = 0x2020000000;
    v19[3] = a3;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = __nw_interface_status_monitor_set_packet_event_handler_block_invoke_3;
    v13[3] = &unk_1E524B048;
    id v14 = v10;
    int v15 = v19;
    uint64_t v16 = a4;
    int v17 = a2;
    int v18 = a5;
    dispatch_async(v12, v13);

    _Block_object_dispose(v19, 8);
  }
  else if (a3)
  {
    free(a3);
  }
}

uint64_t __nw_interface_status_monitor_set_packet_event_handler_block_invoke_4(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 40);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 22;
  }
  return (*(uint64_t (**)(void, void, void, void, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0, 0, 0, v2);
}

void __nw_interface_status_monitor_set_packet_event_handler_block_invoke_3(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v2)
  {
    free(v2);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void ___ZL26nw_protocol_ipv6_callbacksv_block_invoke()
{
  nw_protocol_ipv6_callbacks(void)::callbacks = nw_protocol_one_to_one_callbacks_new();
  nw_protocol_callbacks_set_add_input_handler((void *)nw_protocol_ipv6_callbacks(void)::callbacks, (uint64_t)nw_protocol_ipv6_add_input_handler);
  nw_protocol_callbacks_set_replace_input_handler(nw_protocol_ipv6_callbacks(void)::callbacks, (uint64_t)nw_protocol_ipv6_replace_input_handler);
  nw_protocol_callbacks_set_remove_input_handler(nw_protocol_ipv6_callbacks(void)::callbacks, (uint64_t)nw_protocol_ipv6_remove_input_handler);
  nw_protocol_callbacks_set_get_input_frames(nw_protocol_ipv6_callbacks(void)::callbacks, (uint64_t)nw_protocol_ipv6_get_input_frames);
  nw_protocol_callbacks_set_get_output_frames(nw_protocol_ipv6_callbacks(void)::callbacks, (uint64_t)nw_protocol_ipv6_get_output_frames);
  nw_protocol_callbacks_set_finalize_output_frames(nw_protocol_ipv6_callbacks(void)::callbacks, (uint64_t)nw_protocol_ipv6_finalize_output_frames);
  nw_protocol_callbacks_set_connected(nw_protocol_ipv6_callbacks(void)::callbacks, (uint64_t)nw_protocol_ipv6_connected);
  nw_protocol_callbacks_set_disconnected(nw_protocol_ipv6_callbacks(void)::callbacks, (uint64_t)nw_protocol_ipv6_disconnected);
  nw_protocol_callbacks_set_get_message_properties(nw_protocol_ipv6_callbacks(void)::callbacks, (uint64_t)nw_protocol_ipv6_get_message_properties);
  nw_protocol_callbacks_set_copy_info(nw_protocol_ipv6_callbacks(void)::callbacks, (uint64_t)nw_protocol_ipv6_copy_info);
  nw_protocol_callbacks_set_updated_path(nw_protocol_ipv6_callbacks(void)::callbacks, (uint64_t)nw_protocol_ipv6_updated_path);
  nw_protocol_callbacks_set_notify(nw_protocol_ipv6_callbacks(void)::callbacks, (uint64_t)nw_protocol_ipv6_notify);
  uint64_t v0 = nw_protocol_ipv6_callbacks(void)::callbacks;

  nw_protocol_callbacks_set_error(v0, (uint64_t)nw_protocol_ipv6_error);
}

void nw_protocol_ipv6_error(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v46 = "nw_protocol_ipv6_error";
    uint64_t default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (!__nwlog_fault((const char *)default_input_handler, &type, &v43)) {
      goto LABEL_47;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      id v46 = "nw_protocol_ipv6_error";
      uint64_t v16 = "%{public}s called with null protocol";
      goto LABEL_45;
    }
    if (v43)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v37 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (!v37) {
          goto LABEL_92;
        }
        *(_DWORD *)buf = 136446466;
        id v46 = "nw_protocol_ipv6_error";
        __int16 v47 = 2082;
        id v48 = backtrace_string;
        os_log_type_t v38 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_91;
      }
      if (!v37) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      id v46 = "nw_protocol_ipv6_error";
      uint64_t v16 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      id v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      id v46 = "nw_protocol_ipv6_error";
      uint64_t v16 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_45:
    os_log_type_t v25 = v14;
    os_log_type_t v26 = v15;
LABEL_46:
    _os_log_impl(&dword_1830D4000, v25, v26, v16, buf, 0xCu);
    goto LABEL_47;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    id v46 = "nw_protocol_ipv6_error";
    uint64_t default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (!__nwlog_fault((const char *)default_input_handler, &type, &v43)) {
      goto LABEL_47;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      id v46 = "nw_protocol_ipv6_error";
      uint64_t v16 = "%{public}s called with null ipv6";
      goto LABEL_45;
    }
    if (v43)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v39 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (!v39) {
          goto LABEL_92;
        }
        *(_DWORD *)buf = 136446466;
        id v46 = "nw_protocol_ipv6_error";
        __int16 v47 = 2082;
        id v48 = backtrace_string;
        os_log_type_t v38 = "%{public}s called with null ipv6, dumping backtrace:%{public}s";
        goto LABEL_91;
      }
      if (!v39) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      id v46 = "nw_protocol_ipv6_error";
      uint64_t v16 = "%{public}s called with null ipv6, no backtrace";
    }
    else
    {
      id v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      id v46 = "nw_protocol_ipv6_error";
      uint64_t v16 = "%{public}s called with null ipv6, backtrace limit exceeded";
    }
    goto LABEL_45;
  }
  if (a2)
  {
    uint64_t default_input_handler = (uint64_t)a1->default_input_handler;
    if (default_input_handler)
    {
      uint64_t v4 = *(void **)(default_input_handler + 40);
      if (v4 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v5 = *(void *)(default_input_handler + 88);
        if (v5) {
          *(void *)(default_input_handler + 88) = v5 + 1;
        }
      }
      handle = a2->handle;
      if (handle == &nw_protocol_ref_counted_handle)
      {
        callbacks = a2[1].callbacks;
        if (callbacks) {
          a2[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
        }
      }
      uint64_t v8 = *(void *)(default_input_handler + 24);
      if (v8)
      {
        id v9 = *(void (**)(uint64_t, nw_protocol *))(v8 + 56);
        if (v9)
        {
          v9(default_input_handler, a2);
          goto LABEL_14;
        }
      }
      __nwlog_obj();
      BOOL v27 = *(const char **)(default_input_handler + 16);
      *(_DWORD *)buf = 136446722;
      id v46 = "__nw_protocol_error";
      if (!v27) {
        BOOL v27 = "invalid";
      }
      __int16 v47 = 2082;
      id v48 = (void *)v27;
      __int16 v49 = 2048;
      uint64_t v50 = default_input_handler;
      BOOL v28 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v43 = 0;
      if (__nwlog_fault(v28, &type, &v43))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v29 = __nwlog_obj();
          os_log_type_t v30 = type;
          if (!os_log_type_enabled(v29, type)) {
            goto LABEL_109;
          }
          os_log_type_t v31 = *(const char **)(default_input_handler + 16);
          if (!v31) {
            os_log_type_t v31 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          id v46 = "__nw_protocol_error";
          __int16 v47 = 2082;
          id v48 = (void *)v31;
          __int16 v49 = 2048;
          uint64_t v50 = default_input_handler;
          BOOL v32 = "%{public}s protocol %{public}s (%p) has invalid error callback";
          goto LABEL_108;
        }
        if (!v43)
        {
          os_log_type_t v29 = __nwlog_obj();
          os_log_type_t v30 = type;
          if (!os_log_type_enabled(v29, type)) {
            goto LABEL_109;
          }
          BOOL v41 = *(const char **)(default_input_handler + 16);
          if (!v41) {
            BOOL v41 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          id v46 = "__nw_protocol_error";
          __int16 v47 = 2082;
          id v48 = (void *)v41;
          __int16 v49 = 2048;
          uint64_t v50 = default_input_handler;
          BOOL v32 = "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded";
          goto LABEL_108;
        }
        os_log_type_t v33 = (char *)__nw_create_backtrace_string();
        os_log_type_t v29 = __nwlog_obj();
        os_log_type_t v30 = type;
        BOOL v34 = os_log_type_enabled(v29, type);
        if (v33)
        {
          if (v34)
          {
            os_log_type_t v35 = *(const char **)(default_input_handler + 16);
            if (!v35) {
              os_log_type_t v35 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            id v46 = "__nw_protocol_error";
            __int16 v47 = 2082;
            id v48 = (void *)v35;
            __int16 v49 = 2048;
            uint64_t v50 = default_input_handler;
            __int16 v51 = 2082;
            __int16 v52 = v33;
            _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v33);
          goto LABEL_109;
        }
        if (v34)
        {
          BOOL v42 = *(const char **)(default_input_handler + 16);
          if (!v42) {
            BOOL v42 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          id v46 = "__nw_protocol_error";
          __int16 v47 = 2082;
          id v48 = (void *)v42;
          __int16 v49 = 2048;
          uint64_t v50 = default_input_handler;
          BOOL v32 = "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace";
LABEL_108:
          _os_log_impl(&dword_1830D4000, v29, v30, v32, buf, 0x20u);
        }
      }
LABEL_109:
      if (v28) {
        free(v28);
      }
LABEL_14:
      if (handle == &nw_protocol_ref_counted_handle && a2->handle == &nw_protocol_ref_counted_handle)
      {
        os_log_type_t v21 = a2[1].callbacks;
        if (v21)
        {
          os_log_type_t v22 = (nw_protocol_callbacks *)((char *)v21 - 1);
          a2[1].callbacks = v22;
          if (!v22)
          {
            os_log_type_t v23 = *(void (***)(void))a2[1].flow_id;
            if (v23)
            {
              *(void *)a2[1].flow_id = 0;
              v23[2](v23);
              _Block_release(v23);
            }
            if (a2[1].flow_id[8])
            {
              os_log_type_t v24 = *(const void **)a2[1].flow_id;
              if (v24) {
                _Block_release(v24);
              }
            }
            free(a2);
          }
        }
      }
      if (v4 == &nw_protocol_ref_counted_handle
        && *(_UNKNOWN **)(default_input_handler + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v10 = *(void *)(default_input_handler + 88);
        if (v10)
        {
          uint64_t v11 = v10 - 1;
          *(void *)(default_input_handler + 88) = v11;
          if (!v11)
          {
            id v12 = *(void (***)(void))(default_input_handler + 64);
            if (v12)
            {
              *(void *)(default_input_handler + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if (*(unsigned char *)(default_input_handler + 72))
            {
              int v13 = *(const void **)(default_input_handler + 64);
              if (v13) {
                _Block_release(v13);
              }
            }
            goto LABEL_48;
          }
        }
      }
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    id v46 = "nw_protocol_ipv6_error";
    uint64_t default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault((const char *)default_input_handler, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v14 = gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_47;
        }
        *(_DWORD *)buf = 136446210;
        id v46 = "nw_protocol_ipv6_error";
        uint64_t v16 = "%{public}s ipv6_error requires a default input handler";
        goto LABEL_45;
      }
      if (!v43)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v14 = gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_47;
        }
        *(_DWORD *)buf = 136446210;
        id v46 = "nw_protocol_ipv6_error";
        uint64_t v16 = "%{public}s ipv6_error requires a default input handler, backtrace limit exceeded";
        goto LABEL_45;
      }
      int v17 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v18 = gLogObj;
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v17)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          id v46 = "nw_protocol_ipv6_error";
          __int16 v47 = 2082;
          id v48 = v17;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s ipv6_error requires a default input handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v17);
        if (default_input_handler) {
          goto LABEL_48;
        }
        return;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        id v46 = "nw_protocol_ipv6_error";
        uint64_t v16 = "%{public}s ipv6_error requires a default input handler, no backtrace";
        os_log_type_t v25 = v18;
        os_log_type_t v26 = v19;
        goto LABEL_46;
      }
    }
LABEL_47:
    if (!default_input_handler) {
      return;
    }
    goto LABEL_48;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v46 = "nw_protocol_ipv6_error";
  uint64_t default_input_handler = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v43 = 0;
  if (!__nwlog_fault((const char *)default_input_handler, &type, &v43)) {
    goto LABEL_47;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    id v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446210;
    id v46 = "nw_protocol_ipv6_error";
    uint64_t v16 = "%{public}s called with null other_protocol";
    goto LABEL_45;
  }
  if (!v43)
  {
    id v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446210;
    id v46 = "nw_protocol_ipv6_error";
    uint64_t v16 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    goto LABEL_45;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  id v14 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v40 = os_log_type_enabled(v14, type);
  if (!backtrace_string)
  {
    if (!v40) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446210;
    id v46 = "nw_protocol_ipv6_error";
    uint64_t v16 = "%{public}s called with null other_protocol, no backtrace";
    goto LABEL_45;
  }
  if (!v40) {
    goto LABEL_92;
  }
  *(_DWORD *)buf = 136446466;
  id v46 = "nw_protocol_ipv6_error";
  __int16 v47 = 2082;
  id v48 = backtrace_string;
  os_log_type_t v38 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_91:
  _os_log_impl(&dword_1830D4000, v14, v15, v38, buf, 0x16u);
LABEL_92:
  free(backtrace_string);
  if (default_input_handler) {
LABEL_48:
  }
    free((void *)default_input_handler);
}

void nw_protocol_ipv6_notify(uint64_t a1, uint64_t a2, unsigned int a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v49 = "nw_protocol_ipv6_notify";
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v22, &type, &v46)) {
      goto LABEL_131;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v49 = "nw_protocol_ipv6_notify";
      os_log_type_t v25 = "%{public}s called with null protocol";
    }
    else if (v46)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v27 = os_log_type_enabled(v23, type);
      if (backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v49 = "nw_protocol_ipv6_notify";
          __int16 v50 = 2082;
          __int16 v51 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_131:
        if (!v22) {
          return;
        }
        goto LABEL_132;
      }
      if (!v27) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v49 = "nw_protocol_ipv6_notify";
      os_log_type_t v25 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v49 = "nw_protocol_ipv6_notify";
      os_log_type_t v25 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_130;
  }
  if (*(_UNKNOWN **)(a1 + 40) != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v49 = "nw_protocol_ipv6_notify";
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v22, &type, &v46)) {
      goto LABEL_131;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v46)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (!os_log_type_enabled(v23, type)) {
          goto LABEL_131;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v49 = "nw_protocol_ipv6_notify";
        os_log_type_t v25 = "%{public}s called with null ipv6, backtrace limit exceeded";
        goto LABEL_130;
      }
      BOOL v28 = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v29 = os_log_type_enabled(v23, type);
      if (!v28)
      {
        if (!v29) {
          goto LABEL_131;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v49 = "nw_protocol_ipv6_notify";
        os_log_type_t v25 = "%{public}s called with null ipv6, no backtrace";
        goto LABEL_130;
      }
      if (!v29) {
        goto LABEL_99;
      }
      *(_DWORD *)buf = 136446466;
      __int16 v49 = "nw_protocol_ipv6_notify";
      __int16 v50 = 2082;
      __int16 v51 = v28;
      os_log_type_t v30 = "%{public}s called with null ipv6, dumping backtrace:%{public}s";
      goto LABEL_98;
    }
    os_log_type_t v23 = __nwlog_obj();
    os_log_type_t v24 = type;
    if (!os_log_type_enabled(v23, type)) {
      goto LABEL_131;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v49 = "nw_protocol_ipv6_notify";
    os_log_type_t v25 = "%{public}s called with null ipv6";
LABEL_130:
    _os_log_impl(&dword_1830D4000, v23, v24, v25, buf, 0xCu);
    goto LABEL_131;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v49 = "nw_protocol_ipv6_notify";
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v22, &type, &v46)) {
      goto LABEL_131;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v46)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (!os_log_type_enabled(v23, type)) {
          goto LABEL_131;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v49 = "nw_protocol_ipv6_notify";
        os_log_type_t v25 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_130;
      }
      BOOL v28 = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v31 = os_log_type_enabled(v23, type);
      if (!v28)
      {
        if (!v31) {
          goto LABEL_131;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v49 = "nw_protocol_ipv6_notify";
        os_log_type_t v25 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_130;
      }
      if (!v31) {
        goto LABEL_99;
      }
      *(_DWORD *)buf = 136446466;
      __int16 v49 = "nw_protocol_ipv6_notify";
      __int16 v50 = 2082;
      __int16 v51 = v28;
      os_log_type_t v30 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_98;
    }
    os_log_type_t v23 = __nwlog_obj();
    os_log_type_t v24 = type;
    if (!os_log_type_enabled(v23, type)) {
      goto LABEL_131;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v49 = "nw_protocol_ipv6_notify";
    os_log_type_t v25 = "%{public}s called with null other_protocol";
    goto LABEL_130;
  }
  uint64_t v8 = a1 + 96;
  if (a3 == 17)
  {
    if (*(void *)(a1 + 32) != a2) {
      goto LABEL_13;
    }
    id v12 = *(void **)(a2 + 40);
    if (v12 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v13 = *(void *)(a2 + 88);
      if (v13) {
        *(void *)(a2 + 88) = v13 + 1;
      }
    }
    uint64_t v14 = *(void *)(a2 + 24);
    if (v14)
    {
      os_log_type_t v15 = *(uint64_t (**)(uint64_t))(v14 + 200);
      if (v15)
      {
        uint64_t v16 = v15(a2);
        if (v12 != &nw_protocol_ref_counted_handle)
        {
LABEL_22:
          if (v16)
          {
            if (nw_endpoint_get_address_family(v16) == 30)
            {
              *(sockaddr *)(a1 + 152) = *(sockaddr *)&nw_endpoint_get_address(v16)->sa_data[6];
              if ((*(unsigned char *)(a1 + 254) & 1) == 0)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                int v17 = gLogObj;
                if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 136446978;
                  __int16 v49 = "nw_protocol_ipv6_notify";
                  __int16 v50 = 2082;
                  __int16 v51 = (void *)(a1 + 255);
                  __int16 v52 = 2080;
                  uint64_t v53 = " ";
                  __int16 v54 = 2048;
                  os_log_type_t v55 = (char *)v8;
                  _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s%p updated local address", buf, 0x2Au);
                }
              }
            }
          }
          goto LABEL_13;
        }
LABEL_21:
        if (*(_UNKNOWN **)(a2 + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v18 = *(void *)(a2 + 88);
          if (v18)
          {
            uint64_t v19 = v18 - 1;
            *(void *)(a2 + 88) = v19;
            if (!v19)
            {
              BOOL v20 = *(void (***)(void))(a2 + 64);
              if (v20)
              {
                *(void *)(a2 + 64) = 0;
                v20[2](v20);
                _Block_release(v20);
              }
              if (*(unsigned char *)(a2 + 72))
              {
                os_log_type_t v21 = *(const void **)(a2 + 64);
                if (v21) {
                  _Block_release(v21);
                }
              }
              free((void *)a2);
            }
          }
        }
        goto LABEL_22;
      }
    }
    __nwlog_obj();
    BOOL v32 = *(const char **)(a2 + 16);
    *(_DWORD *)buf = 136446722;
    __int16 v49 = "__nw_protocol_get_output_local_endpoint";
    if (!v32) {
      BOOL v32 = "invalid";
    }
    __int16 v50 = 2082;
    __int16 v51 = (void *)v32;
    __int16 v52 = 2048;
    uint64_t v53 = (const char *)a2;
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    int v45 = (char *)_os_log_send_and_compose_impl();
    if (__nwlog_fault(v45, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v33 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (!os_log_type_enabled(v33, type)) {
          goto LABEL_138;
        }
        os_log_type_t v35 = *(const char **)(a2 + 16);
        if (!v35) {
          os_log_type_t v35 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        __int16 v49 = "__nw_protocol_get_output_local_endpoint";
        __int16 v50 = 2082;
        __int16 v51 = (void *)v35;
        __int16 v52 = 2048;
        uint64_t v53 = (const char *)a2;
        os_log_type_t v36 = "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback";
LABEL_137:
        _os_log_impl(&dword_1830D4000, v33, v34, v36, buf, 0x20u);
        goto LABEL_138;
      }
      if (!v46)
      {
        os_log_type_t v33 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (!os_log_type_enabled(v33, type)) {
          goto LABEL_138;
        }
        char v43 = *(const char **)(a2 + 16);
        if (!v43) {
          char v43 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        __int16 v49 = "__nw_protocol_get_output_local_endpoint";
        __int16 v50 = 2082;
        __int16 v51 = (void *)v43;
        __int16 v52 = 2048;
        uint64_t v53 = (const char *)a2;
        os_log_type_t v36 = "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback, backtrace limit exceeded";
        goto LABEL_137;
      }
      BOOL v40 = (char *)__nw_create_backtrace_string();
      os_log_type_t v33 = __nwlog_obj();
      os_log_type_t v34 = type;
      BOOL v41 = os_log_type_enabled(v33, type);
      if (!v40)
      {
        uint64_t v8 = a1 + 96;
        if (!v41) {
          goto LABEL_138;
        }
        int v44 = *(const char **)(a2 + 16);
        if (!v44) {
          int v44 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        __int16 v49 = "__nw_protocol_get_output_local_endpoint";
        __int16 v50 = 2082;
        __int16 v51 = (void *)v44;
        __int16 v52 = 2048;
        uint64_t v53 = (const char *)a2;
        os_log_type_t v36 = "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback, no backtrace";
        goto LABEL_137;
      }
      if (v41)
      {
        BOOL v42 = *(const char **)(a2 + 16);
        if (!v42) {
          BOOL v42 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        __int16 v49 = "__nw_protocol_get_output_local_endpoint";
        __int16 v50 = 2082;
        __int16 v51 = (void *)v42;
        __int16 v52 = 2048;
        uint64_t v53 = (const char *)a2;
        __int16 v54 = 2082;
        os_log_type_t v55 = v40;
        _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s protocol %{public}s (%p) has invalid get_output_local_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v40);
      uint64_t v8 = a1 + 96;
    }
LABEL_138:
    if (v45) {
      free(v45);
    }
    uint64_t v16 = 0;
    if (v12 != &nw_protocol_ref_counted_handle) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (a3 != 14)
  {
LABEL_13:
    nw_protocol_common_notify(a1, a2, a3);
    return;
  }
  if (*(void *)(a1 + 48) != a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v49 = "nw_protocol_ipv6_notify";
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v22, &type, &v46)) {
      goto LABEL_131;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v46)
      {
        os_log_type_t v23 = __nwlog_obj();
        os_log_type_t v24 = type;
        if (!os_log_type_enabled(v23, type)) {
          goto LABEL_131;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v49 = "nw_protocol_ipv6_notify";
        os_log_type_t v25 = "%{public}s called with null (other_protocol == nw_protocol_get_input_handler(&ipv6->protocol)), backtrace limit exceeded";
        goto LABEL_130;
      }
      BOOL v28 = (char *)__nw_create_backtrace_string();
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      BOOL v37 = os_log_type_enabled(v23, type);
      if (!v28)
      {
        if (!v37) {
          goto LABEL_131;
        }
        *(_DWORD *)buf = 136446210;
        __int16 v49 = "nw_protocol_ipv6_notify";
        os_log_type_t v25 = "%{public}s called with null (other_protocol == nw_protocol_get_input_handler(&ipv6->protocol)), no backtrace";
        goto LABEL_130;
      }
      if (!v37) {
        goto LABEL_99;
      }
      *(_DWORD *)buf = 136446466;
      __int16 v49 = "nw_protocol_ipv6_notify";
      __int16 v50 = 2082;
      __int16 v51 = v28;
      os_log_type_t v30 = "%{public}s called with null (other_protocol == nw_protocol_get_input_handler(&ipv6->protocol)), dumping back"
            "trace:%{public}s";
      goto LABEL_98;
    }
    os_log_type_t v23 = __nwlog_obj();
    os_log_type_t v24 = type;
    if (!os_log_type_enabled(v23, type)) {
      goto LABEL_131;
    }
    *(_DWORD *)buf = 136446210;
    __int16 v49 = "nw_protocol_ipv6_notify";
    os_log_type_t v25 = "%{public}s called with null (other_protocol == nw_protocol_get_input_handler(&ipv6->protocol))";
    goto LABEL_130;
  }
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v49 = "nw_protocol_ipv6_notify";
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v22, &type, &v46)) {
      goto LABEL_131;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v49 = "nw_protocol_ipv6_notify";
      os_log_type_t v25 = "%{public}s called with null (val != nil)";
      goto LABEL_130;
    }
    if (!v46)
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v49 = "nw_protocol_ipv6_notify";
      os_log_type_t v25 = "%{public}s called with null (val != nil), backtrace limit exceeded";
      goto LABEL_130;
    }
    BOOL v28 = (char *)__nw_create_backtrace_string();
    os_log_type_t v23 = __nwlog_obj();
    os_log_type_t v24 = type;
    BOOL v38 = os_log_type_enabled(v23, type);
    if (!v28)
    {
      if (!v38) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v49 = "nw_protocol_ipv6_notify";
      os_log_type_t v25 = "%{public}s called with null (val != nil), no backtrace";
      goto LABEL_130;
    }
    if (!v38) {
      goto LABEL_99;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v49 = "nw_protocol_ipv6_notify";
    __int16 v50 = 2082;
    __int16 v51 = v28;
    os_log_type_t v30 = "%{public}s called with null (val != nil), dumping backtrace:%{public}s";
LABEL_98:
    _os_log_impl(&dword_1830D4000, v23, v24, v30, buf, 0x16u);
    goto LABEL_99;
  }
  if (a5 != 1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v49 = "nw_protocol_ipv6_notify";
    os_log_type_t v22 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v46 = 0;
    if (!__nwlog_fault(v22, &type, &v46)) {
      goto LABEL_131;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v49 = "nw_protocol_ipv6_notify";
      os_log_type_t v25 = "%{public}s called with null (len == sizeof(BOOL))";
      goto LABEL_130;
    }
    if (!v46)
    {
      os_log_type_t v23 = __nwlog_obj();
      os_log_type_t v24 = type;
      if (!os_log_type_enabled(v23, type)) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v49 = "nw_protocol_ipv6_notify";
      os_log_type_t v25 = "%{public}s called with null (len == sizeof(BOOL)), backtrace limit exceeded";
      goto LABEL_130;
    }
    BOOL v28 = (char *)__nw_create_backtrace_string();
    os_log_type_t v23 = __nwlog_obj();
    os_log_type_t v24 = type;
    BOOL v39 = os_log_type_enabled(v23, type);
    if (!v28)
    {
      if (!v39) {
        goto LABEL_131;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v49 = "nw_protocol_ipv6_notify";
      os_log_type_t v25 = "%{public}s called with null (len == sizeof(BOOL)), no backtrace";
      goto LABEL_130;
    }
    if (v39)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v49 = "nw_protocol_ipv6_notify";
      __int16 v50 = 2082;
      __int16 v51 = v28;
      os_log_type_t v30 = "%{public}s called with null (len == sizeof(BOOL)), dumping backtrace:%{public}s";
      goto LABEL_98;
    }
LABEL_99:
    free(v28);
    if (!v22) {
      return;
    }
LABEL_132:
    free(v22);
    return;
  }
  char v9 = *(unsigned char *)(a1 + 254);
  *(unsigned char *)(a1 + 254) = v9 & 0xF7 | (8 * *a4);
  if ((v9 & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v10 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      int v11 = (*(unsigned __int8 *)(a1 + 254) >> 3) & 1;
      *(_DWORD *)buf = 136447234;
      __int16 v49 = "nw_protocol_ipv6_notify";
      __int16 v50 = 2082;
      __int16 v51 = (void *)(a1 + 255);
      __int16 v52 = 2080;
      uint64_t v53 = " ";
      __int16 v54 = 2048;
      os_log_type_t v55 = (char *)(a1 + 96);
      __int16 v56 = 1024;
      int v57 = v11;
      _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s%p segmentation offload notify enable %d", buf, 0x30u);
    }
  }
}

uint64_t nw_protocol_ipv6_updated_path(nw_protocol *a1, nw_protocol *a2, nw_path *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v18 = "nw_protocol_ipv6_updated_path";
    id v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v6, &type, &v15)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v18 = "nw_protocol_ipv6_updated_path";
      char v9 = "%{public}s called with null protocol";
LABEL_44:
      _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
      goto LABEL_45;
    }
    if (!v15)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv6_updated_path";
        char v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v11 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv6_updated_path";
        char v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    if (!v11) {
      goto LABEL_31;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v18 = "nw_protocol_ipv6_updated_path";
    __int16 v19 = 2082;
    BOOL v20 = backtrace_string;
    id v12 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_30:
    _os_log_impl(&dword_1830D4000, v7, v8, v12, buf, 0x16u);
    goto LABEL_31;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v18 = "nw_protocol_ipv6_updated_path";
    id v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v6, &type, &v15)) {
      goto LABEL_45;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_45;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v18 = "nw_protocol_ipv6_updated_path";
      char v9 = "%{public}s called with null ipv6";
      goto LABEL_44;
    }
    if (!v15)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv6_updated_path";
        char v9 = "%{public}s called with null ipv6, backtrace limit exceeded";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v13 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv6_updated_path";
        char v9 = "%{public}s called with null ipv6, no backtrace";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    if (!v13) {
      goto LABEL_31;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v18 = "nw_protocol_ipv6_updated_path";
    __int16 v19 = 2082;
    BOOL v20 = backtrace_string;
    id v12 = "%{public}s called with null ipv6, dumping backtrace:%{public}s";
    goto LABEL_30;
  }
  if (a3)
  {
    LODWORD(a1[3].output_handler_context) = nw_path_get_maximum_packet_size(a3);
    LODWORD(a1[3].handle) = nw_path_get_mtu(a3);
    return 1;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v18 = "nw_protocol_ipv6_updated_path";
  id v6 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (!__nwlog_fault(v6, &type, &v15)) {
    goto LABEL_45;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v15)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv6_updated_path";
        char v9 = "%{public}s called with null path, backtrace limit exceeded";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v14 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v18 = "nw_protocol_ipv6_updated_path";
        char v9 = "%{public}s called with null path, no backtrace";
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v18 = "nw_protocol_ipv6_updated_path";
      __int16 v19 = 2082;
      BOOL v20 = backtrace_string;
      id v12 = "%{public}s called with null path, dumping backtrace:%{public}s";
      goto LABEL_30;
    }
LABEL_31:
    free(backtrace_string);
    goto LABEL_45;
  }
  id v7 = __nwlog_obj();
  os_log_type_t v8 = type;
  if (os_log_type_enabled(v7, type))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v18 = "nw_protocol_ipv6_updated_path";
    char v9 = "%{public}s called with null path";
    goto LABEL_44;
  }
LABEL_45:
  if (v6) {
    free(v6);
  }
  return 0;
}

BOOL nw_protocol_ipv6_copy_info(uint64_t a1, int a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v20 = "nw_protocol_ipv6_copy_info";
    id v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v6, &type, &v17)) {
      goto LABEL_36;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v17)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (!os_log_type_enabled(v7, type)) {
          goto LABEL_36;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_protocol_ipv6_copy_info";
        char v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_35;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (!backtrace_string)
      {
        if (!v11) {
          goto LABEL_36;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v20 = "nw_protocol_ipv6_copy_info";
        char v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_35;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v20 = "nw_protocol_ipv6_copy_info";
        __int16 v21 = 2082;
        uint64_t v22 = (uint64_t)backtrace_string;
        id v12 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_25:
        _os_log_impl(&dword_1830D4000, v7, v8, v12, buf, 0x16u);
      }
LABEL_26:
      free(backtrace_string);
      goto LABEL_36;
    }
    id v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    if (!os_log_type_enabled(v7, type)) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v20 = "nw_protocol_ipv6_copy_info";
    char v9 = "%{public}s called with null protocol";
LABEL_35:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
LABEL_36:
    if (v6) {
      free(v6);
    }
    return 0;
  }
  if (*(_UNKNOWN **)(a1 + 40) != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v20 = "nw_protocol_ipv6_copy_info";
    id v6 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v6, &type, &v17)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v20 = "nw_protocol_ipv6_copy_info";
      char v9 = "%{public}s called with null ipv6";
      goto LABEL_35;
    }
    if (!v17)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (!os_log_type_enabled(v7, type)) {
        goto LABEL_36;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v20 = "nw_protocol_ipv6_copy_info";
      char v9 = "%{public}s called with null ipv6, backtrace limit exceeded";
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    id v7 = __nwlog_obj();
    os_log_type_t v8 = type;
    BOOL v16 = os_log_type_enabled(v7, type);
    if (backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        BOOL v20 = "nw_protocol_ipv6_copy_info";
        __int16 v21 = 2082;
        uint64_t v22 = (uint64_t)backtrace_string;
        id v12 = "%{public}s called with null ipv6, dumping backtrace:%{public}s";
        goto LABEL_25;
      }
      goto LABEL_26;
    }
    if (!v16) {
      goto LABEL_36;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v20 = "nw_protocol_ipv6_copy_info";
    char v9 = "%{public}s called with null ipv6, no backtrace";
    goto LABEL_35;
  }
  if (a2 != 5) {
    return 0;
  }
  uint64_t v5 = (char *)malloc_type_calloc(1uLL, 0xB8uLL, 0xEAFB8F1AuLL);
  if (v5) {
    goto LABEL_5;
  }
  BOOL v13 = __nwlog_obj();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  BOOL v20 = "strict_calloc";
  __int16 v21 = 2048;
  uint64_t v22 = 1;
  __int16 v23 = 2048;
  uint64_t v24 = 184;
  BOOL v14 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
LABEL_5:
    *(_OWORD *)(v5 + 8) = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(v5 + 24) = *(_OWORD *)(a1 + 120);
    *((void *)v5 + 5) = *(void *)(a1 + 96);
    if (a3) {
      *a3 = 184;
    }
    return (BOOL)v5;
  }
  __break(1u);
  return result;
}

void nw_protocol_ipv6_get_message_properties(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v15 = "nw_protocol_ipv6_get_message_properties";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      char v15 = "nw_protocol_ipv6_get_message_properties";
      id v7 = "%{public}s called with null protocol";
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          char v15 = "nw_protocol_ipv6_get_message_properties";
          __int16 v16 = 2082;
          char v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_34:
        if (!v4) {
          return;
        }
LABEL_35:
        free(v4);
        return;
      }
      if (!v9) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      char v15 = "nw_protocol_ipv6_get_message_properties";
      id v7 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      char v15 = "nw_protocol_ipv6_get_message_properties";
      id v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_33:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    goto LABEL_34;
  }
  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    if (a3)
    {
      unsigned int v3 = a3[1] & 0xFFFFFFF8 | 1;
      *a3 = *(_DWORD *)(a1 + 248);
      a3[1] = v3;
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  char v15 = "nw_protocol_ipv6_get_message_properties";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12)) {
    goto LABEL_34;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    char v15 = "nw_protocol_ipv6_get_message_properties";
    id v7 = "%{public}s called with null ipv6";
    goto LABEL_33;
  }
  if (!v12)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    char v15 = "nw_protocol_ipv6_get_message_properties";
    id v7 = "%{public}s called with null ipv6, backtrace limit exceeded";
    goto LABEL_33;
  }
  uint64_t v10 = (char *)__nw_create_backtrace_string();
  uint64_t v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  BOOL v11 = os_log_type_enabled(v5, type);
  if (!v10)
  {
    if (!v11) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    char v15 = "nw_protocol_ipv6_get_message_properties";
    id v7 = "%{public}s called with null ipv6, no backtrace";
    goto LABEL_33;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    char v15 = "nw_protocol_ipv6_get_message_properties";
    __int16 v16 = 2082;
    char v17 = v10;
    _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null ipv6, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v10);
  if (v4) {
    goto LABEL_35;
  }
}

void nw_protocol_ipv6_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v27 = "nw_protocol_ipv6_disconnected";
    uint64_t default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault((const char *)default_input_handler, &type, &v24)) {
      goto LABEL_59;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v24)
      {
        char v17 = __nwlog_obj();
        os_log_type_t v18 = type;
        if (!os_log_type_enabled(v17, type)) {
          goto LABEL_59;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v27 = "nw_protocol_ipv6_disconnected";
        __int16 v19 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_58;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      BOOL v21 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (!v21) {
          goto LABEL_59;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v27 = "nw_protocol_ipv6_disconnected";
        __int16 v19 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_58;
      }
      if (!v21)
      {
LABEL_48:
        free(backtrace_string);
        if (!default_input_handler) {
          return;
        }
LABEL_30:
        free((void *)default_input_handler);
        return;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v27 = "nw_protocol_ipv6_disconnected";
      __int16 v28 = 2082;
      BOOL v29 = backtrace_string;
      uint64_t v22 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_47:
      _os_log_impl(&dword_1830D4000, v17, v18, v22, buf, 0x16u);
      goto LABEL_48;
    }
    char v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (!os_log_type_enabled(v17, type)) {
      goto LABEL_59;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v27 = "nw_protocol_ipv6_disconnected";
    __int16 v19 = "%{public}s called with null protocol";
LABEL_58:
    _os_log_impl(&dword_1830D4000, v17, v18, v19, buf, 0xCu);
LABEL_59:
    if (!default_input_handler) {
      return;
    }
    goto LABEL_30;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v27 = "nw_protocol_ipv6_disconnected";
    uint64_t default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault((const char *)default_input_handler, &type, &v24)) {
      goto LABEL_59;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      char v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_59;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v27 = "nw_protocol_ipv6_disconnected";
      __int16 v19 = "%{public}s called with null ipv6";
      goto LABEL_58;
    }
    if (!v24)
    {
      char v17 = __nwlog_obj();
      os_log_type_t v18 = type;
      if (!os_log_type_enabled(v17, type)) {
        goto LABEL_59;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v27 = "nw_protocol_ipv6_disconnected";
      __int16 v19 = "%{public}s called with null ipv6, backtrace limit exceeded";
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    char v17 = __nwlog_obj();
    os_log_type_t v18 = type;
    BOOL v23 = os_log_type_enabled(v17, type);
    if (backtrace_string)
    {
      if (!v23) {
        goto LABEL_48;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v27 = "nw_protocol_ipv6_disconnected";
      __int16 v28 = 2082;
      BOOL v29 = backtrace_string;
      uint64_t v22 = "%{public}s called with null ipv6, dumping backtrace:%{public}s";
      goto LABEL_47;
    }
    if (!v23) {
      goto LABEL_59;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v27 = "nw_protocol_ipv6_disconnected";
    __int16 v19 = "%{public}s called with null ipv6, no backtrace";
    goto LABEL_58;
  }
  a1[2].identifier = 0;
  uint64_t default_input_handler = (uint64_t)a1->default_input_handler;
  if (default_input_handler)
  {
    uint64_t v4 = *(void *)(default_input_handler + 24);
    if (v4)
    {
      uint64_t v5 = *(void (**)(uint64_t, nw_protocol *))(v4 + 48);
      if (v5)
      {
        os_log_type_t v6 = *(void **)(default_input_handler + 40);
        if (v6 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v7 = *(void *)(default_input_handler + 88);
          if (v7) {
            *(void *)(default_input_handler + 88) = v7 + 1;
          }
        }
        callbacks = a1[1].callbacks;
        if (callbacks) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
        }
        v5(default_input_handler, a1);
        if (a1->handle == &nw_protocol_ref_counted_handle)
        {
          BOOL v9 = a1[1].callbacks;
          if (v9)
          {
            uint64_t v10 = (nw_protocol_callbacks *)((char *)v9 - 1);
            a1[1].callbacks = v10;
            if (!v10)
            {
              BOOL v11 = *(void (***)(void))a1[1].flow_id;
              if (v11)
              {
                *(void *)a1[1].flow_id = 0;
                v11[2](v11);
                _Block_release(v11);
              }
              if (a1[1].flow_id[8])
              {
                char v12 = *(const void **)a1[1].flow_id;
                if (v12) {
                  _Block_release(v12);
                }
              }
              free(a1);
            }
          }
        }
        if (v6 == &nw_protocol_ref_counted_handle
          && *(_UNKNOWN **)(default_input_handler + 40) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v13 = *(void *)(default_input_handler + 88);
          if (v13)
          {
            uint64_t v14 = v13 - 1;
            *(void *)(default_input_handler + 88) = v14;
            if (!v14)
            {
              char v15 = *(void (***)(void))(default_input_handler + 64);
              if (v15)
              {
                *(void *)(default_input_handler + 64) = 0;
                v15[2](v15);
                _Block_release(v15);
              }
              if (*(unsigned char *)(default_input_handler + 72))
              {
                __int16 v16 = *(const void **)(default_input_handler + 64);
                if (v16) {
                  _Block_release(v16);
                }
              }
              goto LABEL_30;
            }
          }
        }
      }
    }
  }
}

void nw_protocol_ipv6_connected(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
    os_log_type_t v55 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (!__nwlog_fault(v55, &type, &v83)) {
      goto LABEL_171;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v56 = __nwlog_obj();
      os_log_type_t v57 = type;
      if (!os_log_type_enabled(v56, type)) {
        goto LABEL_171;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
      uint64_t v58 = "%{public}s called with null protocol";
      goto LABEL_170;
    }
    if (!v83)
    {
      __int16 v56 = __nwlog_obj();
      os_log_type_t v57 = type;
      if (!os_log_type_enabled(v56, type)) {
        goto LABEL_171;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
      uint64_t v58 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_170;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v56 = __nwlog_obj();
    os_log_type_t v57 = type;
    BOOL v67 = os_log_type_enabled(v56, type);
    if (!backtrace_string)
    {
      if (!v67) {
        goto LABEL_171;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
      uint64_t v58 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_170;
    }
    if (v67)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
      __int16 v86 = 2082;
      v87 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v56, v57, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_171:
    if (!v55) {
      return;
    }
    goto LABEL_172;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
    os_log_type_t v55 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (!__nwlog_fault(v55, &type, &v83)) {
      goto LABEL_171;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v56 = __nwlog_obj();
      os_log_type_t v57 = type;
      if (!os_log_type_enabled(v56, type)) {
        goto LABEL_171;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
      uint64_t v58 = "%{public}s called with null ipv6";
      goto LABEL_170;
    }
    if (!v83)
    {
      __int16 v56 = __nwlog_obj();
      os_log_type_t v57 = type;
      if (!os_log_type_enabled(v56, type)) {
        goto LABEL_171;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
      uint64_t v58 = "%{public}s called with null ipv6, backtrace limit exceeded";
      goto LABEL_170;
    }
    char v68 = (char *)__nw_create_backtrace_string();
    __int16 v56 = __nwlog_obj();
    os_log_type_t v57 = type;
    BOOL v69 = os_log_type_enabled(v56, type);
    if (v68)
    {
      if (v69)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
        __int16 v86 = 2082;
        v87 = v68;
        _os_log_impl(&dword_1830D4000, v56, v57, "%{public}s called with null ipv6, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v68);
      if (!v55) {
        return;
      }
LABEL_172:
      BOOL v42 = (nw_protocol *)v55;
LABEL_88:
      free(v42);
      return;
    }
    if (v69)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
      uint64_t v58 = "%{public}s called with null ipv6, no backtrace";
LABEL_170:
      _os_log_impl(&dword_1830D4000, v56, v57, v58, buf, 0xCu);
      goto LABEL_171;
    }
    goto LABEL_171;
  }
  if ((BYTE6(a1[3].output_handler_context) & 1) == 0)
  {
    if (gLogDatapath)
    {
      uint64_t v59 = __nwlog_obj();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
        __int16 v86 = 2082;
        v87 = (char *)&a1[3].output_handler_context + 7;
        __int16 v88 = 2080;
        v89 = " ";
        __int16 v90 = 2048;
        p_output_handler = (char *)&a1[1].output_handler;
        _os_log_impl(&dword_1830D4000, v59, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s%p Got a connected event from the lower layer", buf, 0x2Au);
      }
    }
  }
  uint64_t default_input_handler = a1->default_input_handler;
  if (a1->output_handler != a2)
  {
    if (!default_input_handler) {
      return;
    }
    callbacks = default_input_handler->callbacks;
    if (!callbacks) {
      return;
    }
    if (!a2) {
      return;
    }
    connected = (void (*)(nw_protocol *, nw_protocol *))callbacks->connected;
    if (!connected) {
      return;
    }
    handle = default_input_handler->handle;
    if (handle == &nw_protocol_ref_counted_handle)
    {
      os_log_type_t v8 = default_input_handler[1].callbacks;
      if (v8) {
        default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v8->add_input_handler + 1);
      }
    }
    if (a2->handle != &nw_protocol_ref_counted_handle)
    {
      connected(default_input_handler, a2);
      goto LABEL_77;
    }
    BOOL v23 = a2[1].callbacks;
    if (v23) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v23->add_input_handler + 1);
    }
    connected(default_input_handler, a2);
    if (a2->handle == &nw_protocol_ref_counted_handle)
    {
      char v24 = a2[1].callbacks;
      if (v24)
      {
        uint64_t v25 = (nw_protocol_callbacks *)((char *)v24 - 1);
        a2[1].callbacks = v25;
        if (!v25)
        {
          os_log_type_t v26 = *(void (***)(void))a2[1].flow_id;
          if (v26)
          {
            *(void *)a2[1].flow_id = 0;
            v26[2](v26);
            _Block_release(v26);
          }
          if (a2[1].flow_id[8])
          {
            BOOL v27 = *(const void **)a2[1].flow_id;
            if (v27) {
              _Block_release(v27);
            }
          }
          __int16 v28 = a2;
LABEL_76:
          free(v28);
          goto LABEL_77;
        }
      }
    }
    goto LABEL_77;
  }
  if (!default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
    v70 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v83 = 0;
    if (__nwlog_fault(v70, &type, &v83))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v71 = __nwlog_obj();
        os_log_type_t v72 = type;
        if (os_log_type_enabled(v71, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
          __int16 v73 = "%{public}s called with null protocol";
LABEL_188:
          _os_log_impl(&dword_1830D4000, v71, v72, v73, buf, 0xCu);
        }
      }
      else if (v83)
      {
        v77 = (char *)__nw_create_backtrace_string();
        __int16 v71 = __nwlog_obj();
        os_log_type_t v72 = type;
        BOOL v78 = os_log_type_enabled(v71, type);
        if (v77)
        {
          if (v78)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
            __int16 v86 = 2082;
            v87 = v77;
            _os_log_impl(&dword_1830D4000, v71, v72, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v77);
          goto LABEL_189;
        }
        if (v78)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
          __int16 v73 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_188;
        }
      }
      else
      {
        __int16 v71 = __nwlog_obj();
        os_log_type_t v72 = type;
        if (os_log_type_enabled(v71, type))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
          __int16 v73 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_188;
        }
      }
    }
LABEL_189:
    if (v70) {
      free(v70);
    }
    uint64_t v13 = 0;
    goto LABEL_23;
  }
  BOOL v9 = default_input_handler->handle;
  if (v9 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v10 = default_input_handler[1].callbacks;
    if (v10) {
      default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v10->add_input_handler + 1);
    }
  }
  BOOL v11 = default_input_handler->callbacks;
  if (v11)
  {
    get_parameters = (uint64_t (*)(nw_protocol *))v11->get_parameters;
    if (get_parameters)
    {
      uint64_t v13 = (void *)get_parameters(default_input_handler);
      if (v9 != &nw_protocol_ref_counted_handle) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
  }
  __nwlog_obj();
  name = default_input_handler->identifier->name;
  *(_DWORD *)buf = 136446722;
  *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
  if (!name) {
    name = "invalid";
  }
  __int16 v86 = 2082;
  v87 = (char *)name;
  __int16 v88 = 2048;
  v89 = (const char *)default_input_handler;
  v61 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v83 = 0;
  if (!__nwlog_fault(v61, &type, &v83)) {
    goto LABEL_180;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    __int16 v62 = __nwlog_obj();
    os_log_type_t v63 = type;
    if (!os_log_type_enabled(v62, type)) {
      goto LABEL_180;
    }
    uint64_t v64 = default_input_handler->identifier->name;
    if (!v64) {
      uint64_t v64 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
    __int16 v86 = 2082;
    v87 = (char *)v64;
    __int16 v88 = 2048;
    v89 = (const char *)default_input_handler;
    uint64_t v65 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback";
LABEL_179:
    _os_log_impl(&dword_1830D4000, v62, v63, v65, buf, 0x20u);
    goto LABEL_180;
  }
  if (!v83)
  {
    __int16 v62 = __nwlog_obj();
    os_log_type_t v63 = type;
    if (!os_log_type_enabled(v62, type)) {
      goto LABEL_180;
    }
    v79 = default_input_handler->identifier->name;
    if (!v79) {
      v79 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
    __int16 v86 = 2082;
    v87 = (char *)v79;
    __int16 v88 = 2048;
    v89 = (const char *)default_input_handler;
    uint64_t v65 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded";
    goto LABEL_179;
  }
  v82 = v9;
  __int16 v74 = (char *)__nw_create_backtrace_string();
  __int16 v62 = __nwlog_obj();
  os_log_type_t v63 = type;
  BOOL v75 = os_log_type_enabled(v62, type);
  if (!v74)
  {
    BOOL v9 = v82;
    if (!v75) {
      goto LABEL_180;
    }
    v81 = default_input_handler->identifier->name;
    if (!v81) {
      v81 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
    __int16 v86 = 2082;
    v87 = (char *)v81;
    __int16 v88 = 2048;
    v89 = (const char *)default_input_handler;
    uint64_t v65 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace";
    goto LABEL_179;
  }
  if (v75)
  {
    __int16 v76 = default_input_handler->identifier->name;
    if (!v76) {
      __int16 v76 = "invalid";
    }
    *(_DWORD *)buf = 136446978;
    *(void *)&uint8_t buf[4] = "__nw_protocol_get_parameters";
    __int16 v86 = 2082;
    v87 = (char *)v76;
    __int16 v88 = 2048;
    v89 = (const char *)default_input_handler;
    __int16 v90 = 2082;
    p_output_handler = v74;
    _os_log_impl(&dword_1830D4000, v62, v63, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v74);
  BOOL v9 = v82;
LABEL_180:
  if (v61) {
    free(v61);
  }
  uint64_t v13 = 0;
  if (v9 == &nw_protocol_ref_counted_handle)
  {
LABEL_22:
    if (default_input_handler->handle == &nw_protocol_ref_counted_handle)
    {
      char v43 = default_input_handler[1].callbacks;
      if (v43)
      {
        int v44 = (nw_protocol_callbacks *)((char *)v43 - 1);
        default_input_handler[1].callbacks = v44;
        if (!v44)
        {
          int v45 = *(void (***)(void))default_input_handler[1].flow_id;
          if (v45)
          {
            *(void *)default_input_handler[1].flow_id = 0;
            v45[2](v45);
            _Block_release(v45);
          }
          if (default_input_handler[1].flow_id[8])
          {
            char v46 = *(const void **)default_input_handler[1].flow_id;
            if (v46) {
              _Block_release(v46);
            }
          }
          free(default_input_handler);
        }
      }
    }
  }
LABEL_23:
  id v14 = nw_parameters_copy_context(v13);
  id v15 = nw_path_copy_flow_registration(v14, (uint64_t)a1);
  if (v15)
  {
    __int16 v16 = v15;
    stats_region = (nw_protocol_identifier *)nw_path_flow_registration_get_stats_region(v15, (uint64_t)a1->identifier->name);
    a1[2].identifier = stats_region;
    if (!stats_region)
    {
      if ((BYTE6(a1[3].output_handler_context) & 1) == 0)
      {
        if (gLogDatapath)
        {
          v80 = __nwlog_obj();
          if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_connected";
            __int16 v86 = 2082;
            v87 = (char *)&a1[3].output_handler_context + 7;
            __int16 v88 = 2080;
            v89 = " ";
            __int16 v90 = 2048;
            p_output_handler = (char *)&a1[1].output_handler;
            __int16 v92 = 2048;
            v93 = &g_ip6_stats;
            _os_log_impl(&dword_1830D4000, v80, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s%p ipv6->ip6_stats is NULL setting to global %p", buf, 0x34u);
          }
        }
      }
      a1[2].identifier = (nw_protocol_identifier *)&g_ip6_stats;
    }
    os_release(v16);
  }
  if (v14) {
    os_release(v14);
  }
  *(void *)buf = 0;
  output_handler = a1->output_handler;
  if (output_handler)
  {
    __int16 v19 = output_handler->callbacks;
    if (v19)
    {
      get_message_properties = (void (*)(nw_protocol *, nw_protocol *, unsigned char *))v19->get_message_properties;
      if (get_message_properties)
      {
        BOOL v21 = output_handler->handle;
        if (v21 == &nw_protocol_ref_counted_handle)
        {
          uint64_t v22 = output_handler[1].callbacks;
          if (v22) {
            output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v22->add_input_handler + 1);
          }
        }
        if (a1->handle == &nw_protocol_ref_counted_handle)
        {
          BOOL v29 = a1[1].callbacks;
          if (v29) {
            a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v29->add_input_handler + 1);
          }
          get_message_properties(output_handler, a1, buf);
          if (a1->handle == &nw_protocol_ref_counted_handle)
          {
            __int16 v47 = a1[1].callbacks;
            if (v47)
            {
              id v48 = (nw_protocol_callbacks *)((char *)v47 - 1);
              a1[1].callbacks = v48;
              if (!v48)
              {
                __int16 v49 = *(void (***)(void))a1[1].flow_id;
                if (v49)
                {
                  *(void *)a1[1].flow_id = 0;
                  v49[2](v49);
                  _Block_release(v49);
                }
                if (a1[1].flow_id[8])
                {
                  __int16 v50 = *(const void **)a1[1].flow_id;
                  if (v50) {
                    _Block_release(v50);
                  }
                }
                free(a1);
              }
            }
          }
        }
        else
        {
          get_message_properties(output_handler, a1, buf);
        }
        if (v21 == &nw_protocol_ref_counted_handle && output_handler->handle == &nw_protocol_ref_counted_handle)
        {
          __int16 v51 = output_handler[1].callbacks;
          if (v51)
          {
            __int16 v52 = (nw_protocol_callbacks *)((char *)v51 - 1);
            output_handler[1].callbacks = v52;
            if (!v52)
            {
              uint64_t v53 = *(void (***)(void))output_handler[1].flow_id;
              if (v53)
              {
                *(void *)output_handler[1].flow_id = 0;
                v53[2](v53);
                _Block_release(v53);
              }
              if (output_handler[1].flow_id[8])
              {
                __int16 v54 = *(const void **)output_handler[1].flow_id;
                if (v54) {
                  _Block_release(v54);
                }
              }
              free(output_handler);
            }
          }
        }
        if ((*(_DWORD *)buf - 1) <= 0xFFFFFFFD) {
          HIDWORD(a1[3].handle) = *(_DWORD *)buf;
        }
      }
    }
  }
  uint64_t default_input_handler = a1->default_input_handler;
  if (!default_input_handler) {
    return;
  }
  uint64_t v30 = default_input_handler->callbacks;
  if (!v30) {
    return;
  }
  BOOL v31 = (void (*)(nw_protocol *, nw_protocol *))v30->connected;
  if (!v31) {
    return;
  }
  handle = default_input_handler->handle;
  if (handle == &nw_protocol_ref_counted_handle)
  {
    BOOL v32 = default_input_handler[1].callbacks;
    if (v32) {
      default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v32->add_input_handler + 1);
    }
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    v31(default_input_handler, a1);
    goto LABEL_77;
  }
  os_log_type_t v33 = a1[1].callbacks;
  if (v33) {
    a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v33->add_input_handler + 1);
  }
  v31(default_input_handler, a1);
  if (a1->handle == &nw_protocol_ref_counted_handle)
  {
    os_log_type_t v34 = a1[1].callbacks;
    if (v34)
    {
      os_log_type_t v35 = (nw_protocol_callbacks *)((char *)v34 - 1);
      a1[1].callbacks = v35;
      if (!v35)
      {
        os_log_type_t v36 = *(void (***)(void))a1[1].flow_id;
        if (v36)
        {
          *(void *)a1[1].flow_id = 0;
          v36[2](v36);
          _Block_release(v36);
        }
        if (a1[1].flow_id[8])
        {
          BOOL v37 = *(const void **)a1[1].flow_id;
          if (v37) {
            _Block_release(v37);
          }
        }
        __int16 v28 = a1;
        goto LABEL_76;
      }
    }
  }
LABEL_77:
  if (handle == &nw_protocol_ref_counted_handle && default_input_handler->handle == &nw_protocol_ref_counted_handle)
  {
    BOOL v38 = default_input_handler[1].callbacks;
    if (v38)
    {
      BOOL v39 = (nw_protocol_callbacks *)((char *)v38 - 1);
      default_input_handler[1].callbacks = v39;
      if (!v39)
      {
        BOOL v40 = *(void (***)(void))default_input_handler[1].flow_id;
        if (v40)
        {
          *(void *)default_input_handler[1].flow_id = 0;
          v40[2](v40);
          _Block_release(v40);
        }
        if (default_input_handler[1].flow_id[8])
        {
          BOOL v41 = *(const void **)default_input_handler[1].flow_id;
          if (v41) {
            _Block_release(v41);
          }
        }
        BOOL v42 = default_input_handler;
        goto LABEL_88;
      }
    }
  }
}

uint64_t nw_protocol_ipv6_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v47 = "nw_protocol_ipv6_finalize_output_frames";
    char v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (!__nwlog_fault(v24, &type, &v44)) {
      goto LABEL_90;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_90;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v47 = "nw_protocol_ipv6_finalize_output_frames";
      BOOL v27 = "%{public}s called with null protocol";
LABEL_89:
      _os_log_impl(&dword_1830D4000, v25, v26, v27, buf, 0xCu);
      goto LABEL_90;
    }
    if (!v44)
    {
      uint64_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v47 = "nw_protocol_ipv6_finalize_output_frames";
        BOOL v27 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_89;
      }
      goto LABEL_90;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v25 = __nwlog_obj();
    os_log_type_t v26 = type;
    BOOL v32 = os_log_type_enabled(v25, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v47 = "nw_protocol_ipv6_finalize_output_frames";
        BOOL v27 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_89;
      }
      goto LABEL_90;
    }
    if (!v32) {
      goto LABEL_63;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v47 = "nw_protocol_ipv6_finalize_output_frames";
    __int16 v48 = 2082;
    __int16 v49 = backtrace_string;
    os_log_type_t v33 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_62:
    _os_log_impl(&dword_1830D4000, v25, v26, v33, buf, 0x16u);
    goto LABEL_63;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v47 = "nw_protocol_ipv6_finalize_output_frames";
    char v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (!__nwlog_fault(v24, &type, &v44)) {
      goto LABEL_90;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (!os_log_type_enabled(v25, type)) {
        goto LABEL_90;
      }
      *(_DWORD *)buf = 136446210;
      __int16 v47 = "nw_protocol_ipv6_finalize_output_frames";
      BOOL v27 = "%{public}s called with null ipv6";
      goto LABEL_89;
    }
    if (!v44)
    {
      uint64_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v47 = "nw_protocol_ipv6_finalize_output_frames";
        BOOL v27 = "%{public}s called with null ipv6, backtrace limit exceeded";
        goto LABEL_89;
      }
      goto LABEL_90;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v25 = __nwlog_obj();
    os_log_type_t v26 = type;
    BOOL v34 = os_log_type_enabled(v25, type);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v47 = "nw_protocol_ipv6_finalize_output_frames";
        BOOL v27 = "%{public}s called with null ipv6, no backtrace";
        goto LABEL_89;
      }
      goto LABEL_90;
    }
    if (!v34) {
      goto LABEL_63;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v47 = "nw_protocol_ipv6_finalize_output_frames";
    __int16 v48 = 2082;
    __int16 v49 = backtrace_string;
    os_log_type_t v33 = "%{public}s called with null ipv6, dumping backtrace:%{public}s";
    goto LABEL_62;
  }
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 0x40000000;
  BOOL v39 = ___ZL39nw_protocol_ipv6_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
  BOOL v40 = &__block_descriptor_tmp_53_87156;
  p_output_handler = &a1[1].output_handler;
  BOOL v42 = a2;
  char v43 = a1;
  tqh_first = a2->tqh_first;
  do
  {
    if (!tqh_first) {
      break;
    }
    uint64_t v5 = (nw_frame *)*((void *)tqh_first + 4);
    char v6 = ((uint64_t (*)(void *))v39)(v38);
    tqh_first = v5;
  }
  while ((v6 & 1) != 0);
  output_handler = a1->output_handler;
  if (!output_handler)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    __int16 v47 = "__nw_protocol_finalize_output_frames";
    char v24 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (!__nwlog_fault(v24, &type, &v44)) {
      goto LABEL_90;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v47 = "__nw_protocol_finalize_output_frames";
        BOOL v27 = "%{public}s called with null protocol";
        goto LABEL_89;
      }
LABEL_90:
      if (v24) {
        free(v24);
      }
      return 0;
    }
    if (!v44)
    {
      uint64_t v25 = __nwlog_obj();
      os_log_type_t v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v47 = "__nw_protocol_finalize_output_frames";
        BOOL v27 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_89;
      }
      goto LABEL_90;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v25 = __nwlog_obj();
    os_log_type_t v26 = type;
    BOOL v35 = os_log_type_enabled(v25, type);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v47 = "__nw_protocol_finalize_output_frames";
        BOOL v27 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_89;
      }
      goto LABEL_90;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      __int16 v47 = "__nw_protocol_finalize_output_frames";
      __int16 v48 = 2082;
      __int16 v49 = backtrace_string;
      os_log_type_t v33 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_62;
    }
LABEL_63:
    free(backtrace_string);
    goto LABEL_90;
  }
  handle = output_handler->handle;
  if (handle == &nw_protocol_ref_counted_handle)
  {
    callbacks = output_handler[1].callbacks;
    if (callbacks) {
      output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
    }
  }
  uint64_t v10 = output_handler->callbacks;
  if (v10)
  {
    finalize_output_frames = (uint64_t (*)(nw_protocol *, nw_frame_array_s *))v10->finalize_output_frames;
    if (finalize_output_frames)
    {
      uint64_t v12 = finalize_output_frames(output_handler, a2);
      if (handle != &nw_protocol_ref_counted_handle) {
        return v12;
      }
      goto LABEL_13;
    }
  }
  __nwlog_obj();
  name = output_handler->identifier->name;
  *(_DWORD *)buf = 136446722;
  __int16 v47 = "__nw_protocol_finalize_output_frames";
  if (!name) {
    name = "invalid";
  }
  __int16 v48 = 2082;
  __int16 v49 = (void *)name;
  __int16 v50 = 2048;
  __int16 v51 = output_handler;
  __int16 v19 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v44 = 0;
  if (!__nwlog_fault(v19, &type, &v44)) {
    goto LABEL_73;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    BOOL v20 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_73;
    }
    uint64_t v22 = output_handler->identifier->name;
    if (!v22) {
      uint64_t v22 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    __int16 v47 = "__nw_protocol_finalize_output_frames";
    __int16 v48 = 2082;
    __int16 v49 = (void *)v22;
    __int16 v50 = 2048;
    __int16 v51 = output_handler;
    BOOL v23 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback";
LABEL_72:
    _os_log_impl(&dword_1830D4000, v20, v21, v23, buf, 0x20u);
    goto LABEL_73;
  }
  if (!v44)
  {
    BOOL v20 = __nwlog_obj();
    os_log_type_t v21 = type;
    if (!os_log_type_enabled(v20, type)) {
      goto LABEL_73;
    }
    os_log_type_t v36 = output_handler->identifier->name;
    if (!v36) {
      os_log_type_t v36 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    __int16 v47 = "__nw_protocol_finalize_output_frames";
    __int16 v48 = 2082;
    __int16 v49 = (void *)v36;
    __int16 v50 = 2048;
    __int16 v51 = output_handler;
    BOOL v23 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, backtrace limit exceeded";
    goto LABEL_72;
  }
  __int16 v28 = (char *)__nw_create_backtrace_string();
  BOOL v20 = __nwlog_obj();
  os_log_type_t v21 = type;
  BOOL v29 = os_log_type_enabled(v20, type);
  if (!v28)
  {
    if (!v29) {
      goto LABEL_73;
    }
    BOOL v37 = output_handler->identifier->name;
    if (!v37) {
      BOOL v37 = "invalid";
    }
    *(_DWORD *)buf = 136446722;
    __int16 v47 = "__nw_protocol_finalize_output_frames";
    __int16 v48 = 2082;
    __int16 v49 = (void *)v37;
    __int16 v50 = 2048;
    __int16 v51 = output_handler;
    BOOL v23 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, no backtrace";
    goto LABEL_72;
  }
  if (v29)
  {
    uint64_t v30 = output_handler->identifier->name;
    if (!v30) {
      uint64_t v30 = "invalid";
    }
    *(_DWORD *)buf = 136446978;
    __int16 v47 = "__nw_protocol_finalize_output_frames";
    __int16 v48 = 2082;
    __int16 v49 = (void *)v30;
    __int16 v50 = 2048;
    __int16 v51 = output_handler;
    __int16 v52 = 2082;
    uint64_t v53 = v28;
    _os_log_impl(&dword_1830D4000, v20, v21, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v28);
LABEL_73:
  if (v19) {
    free(v19);
  }
  uint64_t v12 = 0;
  if (handle == &nw_protocol_ref_counted_handle)
  {
LABEL_13:
    if (output_handler->handle == &nw_protocol_ref_counted_handle)
    {
      id v14 = output_handler[1].callbacks;
      if (v14)
      {
        id v15 = (nw_protocol_callbacks *)((char *)v14 - 1);
        output_handler[1].callbacks = v15;
        if (!v15)
        {
          __int16 v16 = *(void (***)(void))output_handler[1].flow_id;
          if (v16)
          {
            *(void *)output_handler[1].flow_id = 0;
            v16[2](v16);
            _Block_release(v16);
          }
          if (output_handler[1].flow_id[8])
          {
            char v17 = *(const void **)output_handler[1].flow_id;
            if (v17) {
              _Block_release(v17);
            }
          }
          free(output_handler);
        }
      }
    }
  }
  return v12;
}

uint64_t ___ZL39nw_protocol_ipv6_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (nw_frame_get_finalizer_context(a2) == *(void *)(a1 + 32))
  {
    uint64_t v11 = *(void *)(a2 + 32);
    uint64_t v12 = *(void **)(a2 + 40);
    if (v11)
    {
      *(void *)(v11 + 40) = v12;
      uint64_t v12 = *(void **)(a2 + 40);
    }
    else
    {
      *(void *)(*(void *)(a1 + 40) + 8) = v12;
    }
    void *v12 = v11;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    nw_frame_finalize(a2);
  }
  else
  {
    nw_frame_unclaim(a2, v4, 0x28u, 0);
    int v30 = 0;
    uint64_t v5 = (_DWORD *)nw_frame_unclaimed_bytes(a2, &v30);
    uint64_t v6 = *(void *)(a1 + 32);
    if (v5)
    {
      uint64_t v7 = v5;
      uint64_t v8 = *(void *)(v6 + 48);
      if (v8) {
        ++*(void *)(v8 + 192);
      }
      unsigned int v9 = *(_DWORD *)(v6 + 144) & 0xFFFFFF0F;
      _DWORD *v5 = v9;
      if (a2)
      {
        int v10 = v9 | ((*(unsigned char *)(a2 + 186) & 3) << 12);
        _DWORD *v5 = v10;
        if (*(unsigned char *)(a2 + 184))
        {
          unsigned int v9 = v10 | bswap32((*(unsigned char *)(a2 + 184) & 0x3F) << 22);
          _DWORD *v5 = v9;
        }
LABEL_8:
        *(unsigned char *)uint64_t v7 = v9 & 0xF | 0x60;
        *((unsigned char *)v7 + 6) = *(unsigned char *)(*(void *)(a1 + 32) + 156);
        *((unsigned char *)v7 + 7) = *(unsigned char *)(*(void *)(a1 + 32) + 157);
        *(_OWORD *)(v7 + 2) = *(_OWORD *)(*(void *)(a1 + 32) + 56);
        *(_OWORD *)(v7 + 6) = *(_OWORD *)(*(void *)(a1 + 32) + 72);
        *((_WORD *)v7 + 2) = bswap32((unsigned __int16)v30 - 40) >> 16;
        ++**(void **)(a1 + 32);
        return 1;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      BOOL v34 = "__nw_frame_get_ecn_flag";
      os_log_type_t v18 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v31 = 0;
      if (__nwlog_fault(v18, &type, &v31))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __int16 v19 = __nwlog_obj();
          os_log_type_t v20 = type;
          if (!os_log_type_enabled(v19, type)) {
            goto LABEL_37;
          }
          *(_DWORD *)buf = 136446210;
          BOOL v34 = "__nw_frame_get_ecn_flag";
          os_log_type_t v21 = "%{public}s called with null frame";
LABEL_36:
          _os_log_impl(&dword_1830D4000, v19, v20, v21, buf, 0xCu);
          goto LABEL_37;
        }
        if (!v31)
        {
          __int16 v19 = __nwlog_obj();
          os_log_type_t v20 = type;
          if (!os_log_type_enabled(v19, type)) {
            goto LABEL_37;
          }
          *(_DWORD *)buf = 136446210;
          BOOL v34 = "__nw_frame_get_ecn_flag";
          os_log_type_t v21 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_36;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __int16 v19 = __nwlog_obj();
        os_log_type_t v20 = type;
        BOOL v23 = os_log_type_enabled(v19, type);
        if (!backtrace_string)
        {
          if (!v23) {
            goto LABEL_37;
          }
          *(_DWORD *)buf = 136446210;
          BOOL v34 = "__nw_frame_get_ecn_flag";
          os_log_type_t v21 = "%{public}s called with null frame, no backtrace";
          goto LABEL_36;
        }
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v34 = "__nw_frame_get_ecn_flag";
          __int16 v35 = 2082;
          os_log_type_t v36 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v19, v20, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
      }
LABEL_37:
      if (v18) {
        free(v18);
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      BOOL v34 = "__nw_frame_get_dscp_value";
      char v24 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v31 = 0;
      if (!__nwlog_fault(v24, &type, &v31)) {
        goto LABEL_53;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v25 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v34 = "__nw_frame_get_dscp_value";
          BOOL v27 = "%{public}s called with null frame";
LABEL_52:
          _os_log_impl(&dword_1830D4000, v25, v26, v27, buf, 0xCu);
        }
      }
      else if (v31)
      {
        __int16 v28 = (char *)__nw_create_backtrace_string();
        uint64_t v25 = __nwlog_obj();
        os_log_type_t v26 = type;
        BOOL v29 = os_log_type_enabled(v25, type);
        if (v28)
        {
          if (v29)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v34 = "__nw_frame_get_dscp_value";
            __int16 v35 = 2082;
            os_log_type_t v36 = v28;
            _os_log_impl(&dword_1830D4000, v25, v26, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v28);
          goto LABEL_53;
        }
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v34 = "__nw_frame_get_dscp_value";
          BOOL v27 = "%{public}s called with null frame, no backtrace";
          goto LABEL_52;
        }
      }
      else
      {
        uint64_t v25 = __nwlog_obj();
        os_log_type_t v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v34 = "__nw_frame_get_dscp_value";
          BOOL v27 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_52;
        }
      }
LABEL_53:
      if (v24) {
        free(v24);
      }
      LOBYTE(v9) = *(unsigned char *)v7;
      goto LABEL_8;
    }
    if (!v6 || (*(unsigned char *)(v6 + 158) & 1) == 0)
    {
      id v14 = __nwlog_obj();
      BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
      uint64_t v6 = *(void *)(a1 + 32);
      if (v15)
      {
        __int16 v16 = (const char *)(v6 + 159);
        if (!v6) {
          __int16 v16 = "";
        }
        *(_DWORD *)buf = 136446978;
        BOOL v34 = "nw_protocol_ipv6_finalize_output_frames_block_invoke";
        __int16 v35 = 2082;
        os_log_type_t v36 = (void *)v16;
        char v17 = " ";
        if (!v6) {
          char v17 = "";
        }
        __int16 v37 = 2080;
        BOOL v38 = v17;
        __int16 v39 = 2048;
        uint64_t v40 = v6;
        _os_log_impl(&dword_1830D4000, v14, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s%p Frame is no longer valid", buf, 0x2Au);
        uint64_t v6 = *(void *)(a1 + 32);
      }
    }
    *(void *)(v6 + 48) = 0;
  }
  return 1;
}

uint64_t nw_protocol_ipv6_get_output_frames(nw_protocol *a1, nw_protocol *a2, size_t count, unsigned int a4, int a5, nw_frame_array_s *a6)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      int v8 = count;
      if (a5
        && LODWORD(a1[3].output_handler_context) < count
        && (BYTE6(a1[3].output_handler_context) & 8) == 0)
      {
        BOOL v9 = nw_calloc_type<unsigned char>(count);
        uint64_t v10 = nw_frame_create(0, v9, v8, (uint64_t)nw_protocol_ipv6_frame_output_finalizer, (uint64_t)&a1[1].output_handler);
        uint64_t v11 = v10;
        if (v10)
        {
          *(_WORD *)(v10 + 204) |= 1u;
          *(void *)(v10 + 16) = 0;
          output_handler = a1[3].output_handler;
          *(void *)(v10 + 24) = output_handler;
          *(void *)output_handler->flow_id = v10;
          a1[3].output_handler = (nw_protocol *)(v10 + 16);
LABEL_65:
          *(void *)(v11 + 32) = 0;
          tqh_last = a6->tqh_last;
          *(void *)(v11 + 40) = tqh_last;
          *tqh_last = (nw_frame *)v11;
          a6->tqh_last = (nw_frame **)(v11 + 32);
          return 1;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446466;
        v81 = "nw_protocol_ipv6_create_output_frame";
        __int16 v82 = 1024;
        *(_DWORD *)char v83 = v8;
        os_log_type_t v33 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v78 = 0;
        if (__nwlog_fault(v33, &type, &v78))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v34 = gLogObj;
            os_log_type_t v35 = type;
            if (os_log_type_enabled((os_log_t)gLogObj, type))
            {
              *(_DWORD *)buf = 136446466;
              v81 = "nw_protocol_ipv6_create_output_frame";
              __int16 v82 = 1024;
              *(_DWORD *)char v83 = v8;
              os_log_type_t v36 = "%{public}s nw_frame_create(%u) failed";
LABEL_60:
              _os_log_impl(&dword_1830D4000, v34, v35, v36, buf, 0x12u);
            }
          }
          else if (v78)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v34 = gLogObj;
            os_log_type_t v35 = type;
            BOOL v38 = os_log_type_enabled((os_log_t)gLogObj, type);
            if (backtrace_string)
            {
              if (v38)
              {
                *(_DWORD *)buf = 136446722;
                v81 = "nw_protocol_ipv6_create_output_frame";
                __int16 v82 = 1024;
                *(_DWORD *)char v83 = v8;
                *(_WORD *)&v83[4] = 2082;
                *(void *)&v83[6] = backtrace_string;
                _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s nw_frame_create(%u) failed, dumping backtrace:%{public}s", buf, 0x1Cu);
              }
              free(backtrace_string);
              goto LABEL_61;
            }
            if (v38)
            {
              *(_DWORD *)buf = 136446466;
              v81 = "nw_protocol_ipv6_create_output_frame";
              __int16 v82 = 1024;
              *(_DWORD *)char v83 = v8;
              os_log_type_t v36 = "%{public}s nw_frame_create(%u) failed, no backtrace";
              goto LABEL_60;
            }
          }
          else
          {
            BOOL v34 = __nwlog_obj();
            os_log_type_t v35 = type;
            if (os_log_type_enabled(v34, type))
            {
              *(_DWORD *)buf = 136446466;
              v81 = "nw_protocol_ipv6_create_output_frame";
              __int16 v82 = 1024;
              *(_DWORD *)char v83 = v8;
              os_log_type_t v36 = "%{public}s nw_frame_create(%u) failed, backtrace limit exceeded";
              goto LABEL_60;
            }
          }
        }
LABEL_61:
        if (v33) {
          free(v33);
        }
        if (v9) {
          free((void *)v9);
        }
        goto LABEL_65;
      }
      if (count >= 0xFFFFFFD8) {
        uint64_t v13 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v13 = (count + 40);
      }
      if (a4 >= 0xFFFFFFD8) {
        uint64_t v14 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v14 = a4 + 40;
      }
      BOOL v15 = a1->output_handler;
      if (v15)
      {
        handle = v15->handle;
        if (handle == &nw_protocol_ref_counted_handle)
        {
          callbacks = v15[1].callbacks;
          if (callbacks) {
            v15[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
          }
        }
        os_log_type_t v18 = a1[1].callbacks;
        if (v18) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v18->add_input_handler + 1);
        }
        if (a6)
        {
          __int16 v19 = v15->callbacks;
          if (v19)
          {
            get_output_frames = (uint64_t (*)(nw_protocol *, nw_protocol *, uint64_t, uint64_t))v19->get_output_frames;
            if (get_output_frames)
            {
              uint64_t v21 = get_output_frames(v15, a1, v13, v14);
              goto LABEL_24;
            }
          }
          __nwlog_obj();
          name = v15->identifier->name;
          *(_DWORD *)buf = 136446722;
          v81 = "__nw_protocol_get_output_frames";
          if (!name) {
            name = "invalid";
          }
          __int16 v82 = 2082;
          *(void *)char v83 = name;
          *(_WORD *)&v83[8] = 2048;
          *(void *)&v83[10] = v15;
          BOOL v42 = (char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v78 = 0;
          if (__nwlog_fault(v42, &type, &v78))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              char v43 = __nwlog_obj();
              os_log_type_t v44 = type;
              if (!os_log_type_enabled(v43, type)) {
                goto LABEL_154;
              }
              int v45 = v15->identifier->name;
              if (!v45) {
                int v45 = "invalid";
              }
              *(_DWORD *)buf = 136446722;
              v81 = "__nw_protocol_get_output_frames";
              __int16 v82 = 2082;
              *(void *)char v83 = v45;
              *(_WORD *)&v83[8] = 2048;
              *(void *)&v83[10] = v15;
              char v46 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback";
LABEL_131:
              v70 = v43;
              os_log_type_t v71 = v44;
              uint32_t v72 = 32;
LABEL_153:
              _os_log_impl(&dword_1830D4000, v70, v71, v46, buf, v72);
              goto LABEL_154;
            }
            if (!v78)
            {
              char v43 = __nwlog_obj();
              os_log_type_t v44 = type;
              if (!os_log_type_enabled(v43, type)) {
                goto LABEL_154;
              }
              char v68 = v15->identifier->name;
              if (!v68) {
                char v68 = "invalid";
              }
              *(_DWORD *)buf = 136446722;
              v81 = "__nw_protocol_get_output_frames";
              __int16 v82 = 2082;
              *(void *)char v83 = v68;
              *(_WORD *)&v83[8] = 2048;
              *(void *)&v83[10] = v15;
              char v46 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, backtrace limit exceeded";
              goto LABEL_131;
            }
            os_log_type_t v57 = (char *)__nw_create_backtrace_string();
            char v43 = __nwlog_obj();
            os_log_type_t v44 = type;
            BOOL v58 = os_log_type_enabled(v43, type);
            if (!v57)
            {
              if (!v58) {
                goto LABEL_154;
              }
              BOOL v69 = v15->identifier->name;
              if (!v69) {
                BOOL v69 = "invalid";
              }
              *(_DWORD *)buf = 136446722;
              v81 = "__nw_protocol_get_output_frames";
              __int16 v82 = 2082;
              *(void *)char v83 = v69;
              *(_WORD *)&v83[8] = 2048;
              *(void *)&v83[10] = v15;
              char v46 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, no backtrace";
              goto LABEL_131;
            }
            if (v58)
            {
              uint64_t v59 = v15->identifier->name;
              if (!v59) {
                uint64_t v59 = "invalid";
              }
              *(_DWORD *)buf = 136446978;
              v81 = "__nw_protocol_get_output_frames";
              __int16 v82 = 2082;
              *(void *)char v83 = v59;
              *(_WORD *)&v83[8] = 2048;
              *(void *)&v83[10] = v15;
              __int16 v84 = 2082;
              v85 = v57;
              _os_log_impl(&dword_1830D4000, v43, v44, "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }
            free(v57);
          }
LABEL_154:
          if (!v42)
          {
LABEL_156:
            uint64_t v21 = 0;
LABEL_24:
            if (a1->handle == &nw_protocol_ref_counted_handle)
            {
              uint64_t v25 = a1[1].callbacks;
              if (v25)
              {
                os_log_type_t v26 = (nw_protocol_callbacks *)((char *)v25 - 1);
                a1[1].callbacks = v26;
                if (!v26)
                {
                  BOOL v27 = *(void (***)(void))a1[1].flow_id;
                  if (v27)
                  {
                    *(void *)a1[1].flow_id = 0;
                    v27[2](v27);
                    _Block_release(v27);
                  }
                  if (a1[1].flow_id[8])
                  {
                    __int16 v28 = *(const void **)a1[1].flow_id;
                    if (v28) {
                      _Block_release(v28);
                    }
                  }
                  free(a1);
                }
              }
            }
            if (handle == &nw_protocol_ref_counted_handle && v15->handle == &nw_protocol_ref_counted_handle)
            {
              BOOL v29 = v15[1].callbacks;
              if (v29)
              {
                int v30 = (nw_protocol_callbacks *)((char *)v29 - 1);
                v15[1].callbacks = v30;
                if (!v30)
                {
                  char v31 = *(void (***)(void))v15[1].flow_id;
                  if (v31)
                  {
                    *(void *)v15[1].flow_id = 0;
                    v31[2](v31);
                    _Block_release(v31);
                  }
                  if (v15[1].flow_id[8])
                  {
                    BOOL v32 = *(const void **)v15[1].flow_id;
                    if (v32) {
                      _Block_release(v32);
                    }
                  }
                  free(v15);
                }
              }
            }
LABEL_27:
            v73[0] = MEMORY[0x1E4F143A8];
            v73[1] = 0x40000000;
            __int16 v74 = (uint64_t (*)(void *))___ZL34nw_protocol_ipv6_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
            BOOL v75 = &__block_descriptor_tmp_49_87224;
            p_output_handler = &a1[1].output_handler;
            v77 = a1;
            tqh_first = a6->tqh_first;
            do
            {
              if (!tqh_first) {
                break;
              }
              BOOL v23 = (nw_frame *)*((void *)tqh_first + 4);
              char v24 = v74(v73);
              tqh_first = v23;
            }
            while ((v24 & 1) != 0);
            return v21;
          }
LABEL_155:
          free(v42);
          goto LABEL_156;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        v81 = "__nw_protocol_get_output_frames";
        BOOL v42 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v78 = 0;
        if (!__nwlog_fault(v42, &type, &v78)) {
          goto LABEL_154;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          os_log_type_t v55 = __nwlog_obj();
          os_log_type_t v56 = type;
          if (!os_log_type_enabled(v55, type)) {
            goto LABEL_154;
          }
          *(_DWORD *)buf = 136446210;
          v81 = "__nw_protocol_get_output_frames";
          char v46 = "%{public}s called with null return_array";
        }
        else if (v78)
        {
          os_log_type_t v66 = (char *)__nw_create_backtrace_string();
          os_log_type_t v55 = __nwlog_obj();
          os_log_type_t v56 = type;
          BOOL v67 = os_log_type_enabled(v55, type);
          if (v66)
          {
            if (v67)
            {
              *(_DWORD *)buf = 136446466;
              v81 = "__nw_protocol_get_output_frames";
              __int16 v82 = 2082;
              *(void *)char v83 = v66;
              _os_log_impl(&dword_1830D4000, v55, v56, "%{public}s called with null return_array, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v66);
            if (!v42) {
              goto LABEL_156;
            }
            goto LABEL_155;
          }
          if (!v67) {
            goto LABEL_154;
          }
          *(_DWORD *)buf = 136446210;
          v81 = "__nw_protocol_get_output_frames";
          char v46 = "%{public}s called with null return_array, no backtrace";
        }
        else
        {
          os_log_type_t v55 = __nwlog_obj();
          os_log_type_t v56 = type;
          if (!os_log_type_enabled(v55, type)) {
            goto LABEL_154;
          }
          *(_DWORD *)buf = 136446210;
          v81 = "__nw_protocol_get_output_frames";
          char v46 = "%{public}s called with null return_array, backtrace limit exceeded";
        }
        v70 = v55;
        os_log_type_t v71 = v56;
        uint32_t v72 = 12;
        goto LABEL_153;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v81 = "__nw_protocol_get_output_frames";
      __int16 v51 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v78 = 0;
      if (__nwlog_fault(v51, &type, &v78))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __int16 v52 = __nwlog_obj();
          os_log_type_t v53 = type;
          if (os_log_type_enabled(v52, type))
          {
            *(_DWORD *)buf = 136446210;
            v81 = "__nw_protocol_get_output_frames";
            uint64_t v54 = "%{public}s called with null protocol";
LABEL_146:
            _os_log_impl(&dword_1830D4000, v52, v53, v54, buf, 0xCu);
          }
        }
        else if (v78)
        {
          uint64_t v64 = (char *)__nw_create_backtrace_string();
          __int16 v52 = __nwlog_obj();
          os_log_type_t v53 = type;
          BOOL v65 = os_log_type_enabled(v52, type);
          if (v64)
          {
            if (v65)
            {
              *(_DWORD *)buf = 136446466;
              v81 = "__nw_protocol_get_output_frames";
              __int16 v82 = 2082;
              *(void *)char v83 = v64;
              _os_log_impl(&dword_1830D4000, v52, v53, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v64);
            goto LABEL_147;
          }
          if (v65)
          {
            *(_DWORD *)buf = 136446210;
            v81 = "__nw_protocol_get_output_frames";
            uint64_t v54 = "%{public}s called with null protocol, no backtrace";
            goto LABEL_146;
          }
        }
        else
        {
          __int16 v52 = __nwlog_obj();
          os_log_type_t v53 = type;
          if (os_log_type_enabled(v52, type))
          {
            *(_DWORD *)buf = 136446210;
            v81 = "__nw_protocol_get_output_frames";
            uint64_t v54 = "%{public}s called with null protocol, backtrace limit exceeded";
            goto LABEL_146;
          }
        }
      }
LABEL_147:
      if (v51) {
        free(v51);
      }
      uint64_t v21 = 0;
      goto LABEL_27;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v81 = "nw_protocol_ipv6_get_output_frames";
    __int16 v47 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v78 = 0;
    if (!__nwlog_fault(v47, &type, &v78)) {
      goto LABEL_141;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __int16 v48 = __nwlog_obj();
      os_log_type_t v49 = type;
      if (os_log_type_enabled(v48, type))
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_protocol_ipv6_get_output_frames";
        __int16 v50 = "%{public}s called with null ipv6";
        goto LABEL_140;
      }
      goto LABEL_141;
    }
    if (!v78)
    {
      __int16 v48 = __nwlog_obj();
      os_log_type_t v49 = type;
      if (os_log_type_enabled(v48, type))
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_protocol_ipv6_get_output_frames";
        __int16 v50 = "%{public}s called with null ipv6, backtrace limit exceeded";
        goto LABEL_140;
      }
      goto LABEL_141;
    }
    uint64_t v60 = (char *)__nw_create_backtrace_string();
    __int16 v48 = __nwlog_obj();
    os_log_type_t v49 = type;
    BOOL v63 = os_log_type_enabled(v48, type);
    if (!v60)
    {
      if (v63)
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_protocol_ipv6_get_output_frames";
        __int16 v50 = "%{public}s called with null ipv6, no backtrace";
        goto LABEL_140;
      }
      goto LABEL_141;
    }
    if (v63)
    {
      *(_DWORD *)buf = 136446466;
      v81 = "nw_protocol_ipv6_get_output_frames";
      __int16 v82 = 2082;
      *(void *)char v83 = v60;
      __int16 v62 = "%{public}s called with null ipv6, dumping backtrace:%{public}s";
      goto LABEL_106;
    }
    goto LABEL_107;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v81 = "nw_protocol_ipv6_get_output_frames";
  __int16 v47 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v78 = 0;
  if (!__nwlog_fault(v47, &type, &v78)) {
    goto LABEL_141;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v78)
    {
      __int16 v48 = __nwlog_obj();
      os_log_type_t v49 = type;
      if (os_log_type_enabled(v48, type))
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_protocol_ipv6_get_output_frames";
        __int16 v50 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_140;
      }
      goto LABEL_141;
    }
    uint64_t v60 = (char *)__nw_create_backtrace_string();
    __int16 v48 = __nwlog_obj();
    os_log_type_t v49 = type;
    BOOL v61 = os_log_type_enabled(v48, type);
    if (!v60)
    {
      if (v61)
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_protocol_ipv6_get_output_frames";
        __int16 v50 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_140;
      }
      goto LABEL_141;
    }
    if (v61)
    {
      *(_DWORD *)buf = 136446466;
      v81 = "nw_protocol_ipv6_get_output_frames";
      __int16 v82 = 2082;
      *(void *)char v83 = v60;
      __int16 v62 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_106:
      _os_log_impl(&dword_1830D4000, v48, v49, v62, buf, 0x16u);
    }
LABEL_107:
    free(v60);
    goto LABEL_141;
  }
  __int16 v48 = __nwlog_obj();
  os_log_type_t v49 = type;
  if (os_log_type_enabled(v48, type))
  {
    *(_DWORD *)buf = 136446210;
    v81 = "nw_protocol_ipv6_get_output_frames";
    __int16 v50 = "%{public}s called with null protocol";
LABEL_140:
    _os_log_impl(&dword_1830D4000, v48, v49, v50, buf, 0xCu);
  }
LABEL_141:
  if (v47) {
    free(v47);
  }
  return 0;
}

uint64_t ___ZL34nw_protocol_ipv6_get_output_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(uint64_t a1, _DWORD *a2)
{
  if ((*(unsigned char *)(*(void *)(a1 + 32) + 158) & 2) != 0)
  {
    unsigned int v4 = nw_frame_unclaimed_length(a2);
    if (v4 >= 0x500) {
      int v3 = v4 - 1280;
    }
    else {
      int v3 = 0;
    }
  }
  else
  {
    int v3 = 0;
  }
  nw_frame_claim((uint64_t)a2, (uint64_t)a2, 40, v3);
  return 1;
}

void nw_protocol_ipv6_frame_output_finalizer(nw_frame *a1, int a2, void *a3)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    goto LABEL_49;
  }
  unsigned int v112 = 0;
  uint64_t v5 = nw_frame_unclaimed_bytes((uint64_t)a1, &v112);
  if (!v5 || !v112) {
    goto LABEL_49;
  }
  uint64_t v6 = v5;
  v110[0] = 0;
  v110[1] = v110;
  int v111 = 0;
  v110[2] = 0x2000000000;
  uint32_t v7 = arc4random();
  v109[0] = 0;
  v109[1] = v109;
  uint64_t v8 = *(a3 - 8);
  BOOL v9 = (void *)&unk_183D5C000;
  if (!v8)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v116 = "__nw_protocol_get_output_frames";
    uint64_t v59 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v114 = OS_LOG_TYPE_ERROR;
    char v113 = 0;
    if (!__nwlog_fault(v59, &v114, &v113)) {
      goto LABEL_152;
    }
    if (v114 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v60 = __nwlog_obj();
      os_log_type_t v61 = v114;
      if (!os_log_type_enabled(v60, v114)) {
        goto LABEL_152;
      }
      *(_DWORD *)buf = 136446210;
      v116 = "__nw_protocol_get_output_frames";
      __int16 v62 = "%{public}s called with null protocol";
    }
    else if (v113)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v60 = __nwlog_obj();
      os_log_type_t v61 = v114;
      BOOL v73 = os_log_type_enabled(v60, v114);
      if (backtrace_string)
      {
        if (v73)
        {
          *(_DWORD *)buf = 136446466;
          v116 = "__nw_protocol_get_output_frames";
          __int16 v117 = 2082;
          v118 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v60, v61, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        BOOL v9 = (void *)&unk_183D5C000;
        goto LABEL_152;
      }
      BOOL v9 = (void *)&unk_183D5C000;
      if (!v73)
      {
LABEL_152:
        if (v59) {
          free(v59);
        }
        goto LABEL_27;
      }
      *(_DWORD *)buf = 136446210;
      v116 = "__nw_protocol_get_output_frames";
      __int16 v62 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v60 = __nwlog_obj();
      os_log_type_t v61 = v114;
      if (!os_log_type_enabled(v60, v114)) {
        goto LABEL_152;
      }
      *(_DWORD *)buf = 136446210;
      v116 = "__nw_protocol_get_output_frames";
      __int16 v62 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v60, v61, v62, buf, 0xCu);
    goto LABEL_152;
  }
  uint32_t v10 = v7;
  unsigned int v11 = *((_DWORD *)a3 + 38);
  int v12 = *((_DWORD *)a3 + 35);
  uint64_t v13 = *(void **)(v8 + 40);
  if (v13 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v14 = *(void *)(v8 + 88);
    if (v14) {
      *(void *)(v8 + 88) = v14 + 1;
    }
  }
  BOOL v15 = (void *)*(a3 - 7);
  if (v15 == &nw_protocol_ref_counted_handle)
  {
    uint64_t v16 = *(a3 - 1);
    if (v16) {
      *(a3 - 1) = v16 + 1;
    }
  }
  uint64_t v17 = *(void *)(v8 + 24);
  if (v17)
  {
    os_log_type_t v18 = *(uint64_t (**)(uint64_t, void *, void, void, uint64_t, void *))(v17 + 88);
    if (v18)
    {
      unsigned int v19 = v18(v8, a3 - 12, v12 + v12 * (v112 / v11), v12 + v12 * (v112 / v11), 32, v109);
      if (v15 != &nw_protocol_ref_counted_handle) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
  }
  __nwlog_obj();
  os_log_type_t v53 = *(const char **)(v8 + 16);
  *(_DWORD *)buf = 136446722;
  v116 = "__nw_protocol_get_output_frames";
  if (!v53) {
    os_log_type_t v53 = "invalid";
  }
  __int16 v117 = 2082;
  v118 = (char *)v53;
  __int16 v119 = 2048;
  v120 = (const char *)v8;
  uint64_t v54 = (const char *)_os_log_send_and_compose_impl();
  os_log_type_t v114 = OS_LOG_TYPE_ERROR;
  char v113 = 0;
  uint64_t v94 = (char *)v54;
  if (__nwlog_fault(v54, &v114, &v113))
  {
    if (v114 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v55 = __nwlog_obj();
      os_log_type_t v56 = v114;
      os_log_t log = v55;
      if (!os_log_type_enabled(v55, v114)) {
        goto LABEL_129;
      }
      os_log_type_t v57 = *(const char **)(v8 + 16);
      if (!v57) {
        os_log_type_t v57 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      v116 = "__nw_protocol_get_output_frames";
      __int16 v117 = 2082;
      v118 = (char *)v57;
      __int16 v119 = 2048;
      v120 = (const char *)v8;
      BOOL v58 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback";
LABEL_127:
      __int16 v84 = log;
      os_log_type_t v85 = v56;
LABEL_128:
      _os_log_impl(&dword_1830D4000, v84, v85, v58, buf, 0x20u);
      goto LABEL_129;
    }
    if (!v113)
    {
      __int16 v82 = __nwlog_obj();
      os_log_type_t v56 = v114;
      os_log_t log = v82;
      if (!os_log_type_enabled(v82, v114)) {
        goto LABEL_129;
      }
      char v83 = *(const char **)(v8 + 16);
      if (!v83) {
        char v83 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      v116 = "__nw_protocol_get_output_frames";
      __int16 v117 = 2082;
      v118 = (char *)v83;
      __int16 v119 = 2048;
      v120 = (const char *)v8;
      BOOL v58 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, backtrace limit exceeded";
      goto LABEL_127;
    }
    BOOL v63 = (char *)__nw_create_backtrace_string();
    loga = __nwlog_obj();
    os_log_type_t type = v114;
    BOOL v64 = os_log_type_enabled(loga, v114);
    if (v63)
    {
      if (v64)
      {
        BOOL v65 = *(const char **)(v8 + 16);
        if (!v65) {
          BOOL v65 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        v116 = "__nw_protocol_get_output_frames";
        __int16 v117 = 2082;
        v118 = (char *)v65;
        __int16 v119 = 2048;
        v120 = (const char *)v8;
        __int16 v121 = 2082;
        v122 = v63;
        _os_log_impl(&dword_1830D4000, loga, type, "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v63);
    }
    else if (v64)
    {
      uint64_t v86 = *(const char **)(v8 + 16);
      if (!v86) {
        uint64_t v86 = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      v116 = "__nw_protocol_get_output_frames";
      __int16 v117 = 2082;
      v118 = (char *)v86;
      __int16 v119 = 2048;
      v120 = (const char *)v8;
      BOOL v58 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, no backtrace";
      __int16 v84 = loga;
      os_log_type_t v85 = type;
      goto LABEL_128;
    }
  }
LABEL_129:
  if (v94) {
    free(v94);
  }
  unsigned int v19 = 0;
  if (v15 == &nw_protocol_ref_counted_handle)
  {
LABEL_14:
    if ((_UNKNOWN *)*(a3 - 7) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v41 = *(a3 - 1);
      if (v41)
      {
        uint64_t v42 = v41 - 1;
        *(a3 - 1) = v42;
        if (!v42)
        {
          char v43 = (void (**)(void))*(a3 - 4);
          if (v43)
          {
            *(a3 - 4) = 0;
            v43[2](v43);
            _Block_release(v43);
          }
          if (*(unsigned char *)(a3 - 3))
          {
            os_log_type_t v44 = (const void *)*(a3 - 4);
            if (v44) {
              _Block_release(v44);
            }
          }
          free(a3 - 12);
        }
      }
    }
  }
LABEL_15:
  if (v13 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v8 + 40) == &nw_protocol_ref_counted_handle)
  {
    uint64_t v45 = *(void *)(v8 + 88);
    if (v45)
    {
      uint64_t v46 = v45 - 1;
      *(void *)(v8 + 88) = v46;
      if (!v46)
      {
        __int16 v47 = *(void (***)(void))(v8 + 64);
        if (v47)
        {
          *(void *)(v8 + 64) = 0;
          v47[2](v47);
          _Block_release(v47);
        }
        if (*(unsigned char *)(v8 + 72))
        {
          __int16 v48 = *(const void **)(v8 + 64);
          if (v48) {
            _Block_release(v48);
          }
        }
        free((void *)v8);
      }
    }
  }
  BOOL v9 = &unk_183D5C000;
  if (!v19)
  {
LABEL_27:
    if ((*((unsigned char *)a3 + 158) & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v27 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136447234;
        v116 = "nw_protocol_ipv6_frame_output_finalizer";
        __int16 v117 = 2082;
        v118 = (char *)a3 + 159;
        __int16 v119 = 2080;
        v120 = " ";
        __int16 v121 = 2048;
        v122 = (char *)a3;
        __int16 v123 = 1024;
        unsigned int v124 = v112;
        _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s%p Not enough bytes to fragment %u", buf, 0x30u);
      }
    }
    v105[0] = MEMORY[0x1E4F143A8];
    v105[1] = v9[315];
    v106 = ___ZL39nw_protocol_ipv6_frame_output_finalizerP8nw_framebPv_block_invoke;
    v107 = &__block_descriptor_tmp_50_87226;
    v108 = v109;
    uint64_t v28 = v109[0];
    do
    {
      if (!v28) {
        break;
      }
      uint64_t v29 = *(void *)(v28 + 32);
      char v30 = ((uint64_t (*)(void *))v106)(v105);
      uint64_t v28 = v29;
    }
    while ((v30 & 1) != 0);
    goto LABEL_48;
  }
  unsigned int v20 = 0;
  unsigned int v21 = v112;
  uint64_t v22 = v109[0];
  while (v22)
  {
    int v26 = *(_DWORD *)(v22 + 52);
    if (v26) {
      v26 -= *(_DWORD *)(v22 + 56) + *(_DWORD *)(v22 + 60);
    }
    uint64_t v22 = *(void *)(v22 + 32);
    BOOL v23 = __CFADD__(v20, v26);
    unsigned int v24 = v20 + v26;
    v20 += v26;
    if (v23) {
      unsigned int v25 = -1;
    }
    else {
      unsigned int v25 = v24;
    }
    if (v25 >= v112) {
      goto LABEL_34;
    }
  }
  if (v20 < v112) {
    goto LABEL_27;
  }
LABEL_34:
  if ((*((unsigned char *)a3 + 158) & 1) == 0 && gLogDatapath)
  {
    __int16 v74 = __nwlog_obj();
    BOOL v75 = os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG);
    unsigned int v21 = v112;
    if (v75)
    {
      *(_DWORD *)buf = 136447490;
      v116 = "nw_protocol_ipv6_frame_output_finalizer";
      __int16 v117 = 2082;
      v118 = (char *)a3 + 159;
      __int16 v119 = 2080;
      v120 = " ";
      __int16 v121 = 2048;
      v122 = (char *)a3;
      __int16 v123 = 1024;
      unsigned int v124 = v19;
      __int16 v125 = 1024;
      unsigned int v126 = v112;
      _os_log_impl(&dword_1830D4000, v74, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s%p Got %u packets to fragment %u bytes", buf, 0x36u);
      unsigned int v21 = v112;
    }
    BOOL v9 = (void *)&unk_183D5C000;
  }
  v95[0] = MEMORY[0x1E4F143A8];
  v95[1] = v9[315];
  v96 = ___ZL39nw_protocol_ipv6_frame_output_finalizerP8nw_framebPv_block_invoke_51;
  v97 = &unk_1E524B3D0;
  v98 = v110;
  v99 = v109;
  v100 = a3;
  v101 = a1;
  unsigned int v103 = v21;
  uint32_t v104 = v10;
  uint64_t v102 = v6;
  uint64_t v31 = v109[0];
  do
  {
    if (!v31) {
      break;
    }
    uint64_t v32 = *(void *)(v31 + 32);
    char v33 = ((uint64_t (*)(void *))v96)(v95);
    uint64_t v31 = v32;
  }
  while ((v33 & 1) != 0);
  uint64_t v34 = *(a3 - 8);
  if (v34)
  {
    os_log_type_t v35 = *(void **)(v34 + 40);
    if (v35 == &nw_protocol_ref_counted_handle)
    {
      uint64_t v36 = *(void *)(v34 + 88);
      if (v36) {
        *(void *)(v34 + 88) = v36 + 1;
      }
    }
    uint64_t v37 = *(void *)(v34 + 24);
    if (v37)
    {
      BOOL v38 = *(void (**)(uint64_t, void *))(v37 + 96);
      if (v38)
      {
        v38(v34, v109);
LABEL_46:
        if (v35 != &nw_protocol_ref_counted_handle) {
          goto LABEL_48;
        }
        if (*(_UNKNOWN **)(v34 + 40) != &nw_protocol_ref_counted_handle) {
          goto LABEL_48;
        }
        uint64_t v49 = *(void *)(v34 + 88);
        if (!v49) {
          goto LABEL_48;
        }
        uint64_t v50 = v49 - 1;
        *(void *)(v34 + 88) = v50;
        if (v50) {
          goto LABEL_48;
        }
        __int16 v51 = *(void (***)(void))(v34 + 64);
        if (v51)
        {
          *(void *)(v34 + 64) = 0;
          v51[2](v51);
          _Block_release(v51);
        }
        if (*(unsigned char *)(v34 + 72))
        {
          __int16 v52 = *(const void **)(v34 + 64);
          if (v52) {
            _Block_release(v52);
          }
        }
        goto LABEL_76;
      }
    }
    __nwlog_obj();
    os_log_type_t v66 = *(const char **)(v34 + 16);
    *(_DWORD *)buf = 136446722;
    v116 = "__nw_protocol_finalize_output_frames";
    if (!v66) {
      os_log_type_t v66 = "invalid";
    }
    __int16 v117 = 2082;
    v118 = (char *)v66;
    __int16 v119 = 2048;
    v120 = (const char *)v34;
    BOOL v67 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v114 = OS_LOG_TYPE_ERROR;
    char v113 = 0;
    if (__nwlog_fault(v67, &v114, &v113))
    {
      if (v114 == OS_LOG_TYPE_FAULT)
      {
        char v68 = __nwlog_obj();
        os_log_type_t v69 = v114;
        if (!os_log_type_enabled(v68, v114)) {
          goto LABEL_159;
        }
        v70 = *(const char **)(v34 + 16);
        if (!v70) {
          v70 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v116 = "__nw_protocol_finalize_output_frames";
        __int16 v117 = 2082;
        v118 = (char *)v70;
        __int16 v119 = 2048;
        v120 = (const char *)v34;
        os_log_type_t v71 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback";
        goto LABEL_158;
      }
      if (!v113)
      {
        char v68 = __nwlog_obj();
        os_log_type_t v69 = v114;
        if (!os_log_type_enabled(v68, v114)) {
          goto LABEL_159;
        }
        v89 = *(const char **)(v34 + 16);
        if (!v89) {
          v89 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v116 = "__nw_protocol_finalize_output_frames";
        __int16 v117 = 2082;
        v118 = (char *)v89;
        __int16 v119 = 2048;
        v120 = (const char *)v34;
        os_log_type_t v71 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, backtrace limit exceeded";
        goto LABEL_158;
      }
      v79 = (char *)__nw_create_backtrace_string();
      char v68 = __nwlog_obj();
      os_log_type_t v69 = v114;
      BOOL v80 = os_log_type_enabled(v68, v114);
      if (v79)
      {
        if (v80)
        {
          v81 = *(const char **)(v34 + 16);
          if (!v81) {
            v81 = "invalid";
          }
          *(_DWORD *)buf = 136446978;
          v116 = "__nw_protocol_finalize_output_frames";
          __int16 v117 = 2082;
          v118 = (char *)v81;
          __int16 v119 = 2048;
          v120 = (const char *)v34;
          __int16 v121 = 2082;
          v122 = v79;
          _os_log_impl(&dword_1830D4000, v68, v69, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
        }
        free(v79);
        goto LABEL_159;
      }
      if (v80)
      {
        __int16 v90 = *(const char **)(v34 + 16);
        if (!v90) {
          __int16 v90 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v116 = "__nw_protocol_finalize_output_frames";
        __int16 v117 = 2082;
        v118 = (char *)v90;
        __int16 v119 = 2048;
        v120 = (const char *)v34;
        os_log_type_t v71 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, no backtrace";
LABEL_158:
        _os_log_impl(&dword_1830D4000, v68, v69, v71, buf, 0x20u);
      }
    }
LABEL_159:
    if (v67) {
      free(v67);
    }
    goto LABEL_46;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v116 = "__nw_protocol_finalize_output_frames";
  uint64_t v34 = _os_log_send_and_compose_impl();
  os_log_type_t v114 = OS_LOG_TYPE_ERROR;
  char v113 = 0;
  if (!__nwlog_fault((const char *)v34, &v114, &v113))
  {
LABEL_166:
    if (!v34) {
      goto LABEL_48;
    }
    goto LABEL_76;
  }
  if (v114 == OS_LOG_TYPE_FAULT)
  {
    __int16 v76 = __nwlog_obj();
    os_log_type_t v77 = v114;
    if (!os_log_type_enabled(v76, v114)) {
      goto LABEL_166;
    }
    *(_DWORD *)buf = 136446210;
    v116 = "__nw_protocol_finalize_output_frames";
    char v78 = "%{public}s called with null protocol";
LABEL_165:
    _os_log_impl(&dword_1830D4000, v76, v77, v78, buf, 0xCu);
    goto LABEL_166;
  }
  if (!v113)
  {
    __int16 v76 = __nwlog_obj();
    os_log_type_t v77 = v114;
    if (!os_log_type_enabled(v76, v114)) {
      goto LABEL_166;
    }
    *(_DWORD *)buf = 136446210;
    v116 = "__nw_protocol_finalize_output_frames";
    char v78 = "%{public}s called with null protocol, backtrace limit exceeded";
    goto LABEL_165;
  }
  v87 = (char *)__nw_create_backtrace_string();
  __int16 v76 = __nwlog_obj();
  os_log_type_t v77 = v114;
  BOOL v88 = os_log_type_enabled(v76, v114);
  if (!v87)
  {
    if (!v88) {
      goto LABEL_166;
    }
    *(_DWORD *)buf = 136446210;
    v116 = "__nw_protocol_finalize_output_frames";
    char v78 = "%{public}s called with null protocol, no backtrace";
    goto LABEL_165;
  }
  if (v88)
  {
    *(_DWORD *)buf = 136446466;
    v116 = "__nw_protocol_finalize_output_frames";
    __int16 v117 = 2082;
    v118 = v87;
    _os_log_impl(&dword_1830D4000, v76, v77, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v87);
  if (!v34) {
    goto LABEL_48;
  }
LABEL_76:
  free((void *)v34);
LABEL_48:
  _Block_object_dispose(v110, 8);
LABEL_49:
  nw_frame_free_buffer((uint64_t)a1);
  uint64_t v39 = *((void *)a1 + 2);
  uint64_t v40 = (void *)*((void *)a1 + 3);
  if (v39)
  {
    *(void *)(v39 + 24) = v40;
    uint64_t v40 = (void *)*((void *)a1 + 3);
  }
  else
  {
    a3[16] = v40;
  }
  *uint64_t v40 = v39;
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  os_release(a1);
}

uint64_t ___ZL39nw_protocol_ipv6_frame_output_finalizerP8nw_framebPv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  int v3 = *(void **)(a2 + 40);
  if (v2)
  {
    *(void *)(v2 + 40) = v3;
    int v3 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 8) = v3;
  }
  *int v3 = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return 1;
}

uint64_t ___ZL39nw_protocol_ipv6_frame_output_finalizerP8nw_framebPv_block_invoke_51(uint64_t a1, uint64_t a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) >= *(_DWORD *)(a1 + 72)
    || (v40 = 0, unsigned int v4 = (unsigned int *)nw_frame_unclaimed_bytes(a2, &v40), v5 = v40, v40 <= 0x2F))
  {
    uint64_t v6 = *(void *)(a2 + 32);
    uint32_t v7 = *(void **)(a2 + 40);
    if (v6)
    {
      *(void *)(v6 + 40) = v7;
      uint32_t v7 = *(void **)(a2 + 40);
    }
    else
    {
      *(void *)(*(void *)(a1 + 40) + 8) = v7;
    }
    *uint32_t v7 = v6;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    nw_frame_finalize(a2);
    return 1;
  }
  uint64_t v8 = v4;
  uint64_t v9 = *(void *)(a1 + 48);
  if (v4)
  {
    unsigned int v10 = *(_DWORD *)(v9 + 136);
    if (v40 > v10)
    {
      unsigned int v40 = *(_DWORD *)(v9 + 136);
      unsigned int v5 = v10;
    }
    unint64_t v11 = v5 - 48;
    unint64_t v12 = (*(_DWORD *)(a1 + 72) - *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    if ((v11 & 0xFFFFFFF8) >= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11 & 0xFFFFFFF8;
    }
    uint64_t v14 = *(void *)(v9 + 48);
    if (v14) {
      ++*(void *)(v14 + 232);
    }
    unsigned int v15 = *(_DWORD *)(v9 + 144) & 0xFFFFFF0F;
    *unsigned int v4 = v15;
    uint64_t v16 = *(void *)(a1 + 56);
    if (v16)
    {
      unsigned int v17 = (*(unsigned char *)(v16 + 186) & 3) << 20;
LABEL_17:
      *uint64_t v8 = v15 | bswap32(v17);
      *(unsigned char *)uint64_t v8 = v15 & 0xF | 0x60;
      *((unsigned char *)v8 + 6) = 44;
      *((unsigned char *)v8 + 7) = *(unsigned char *)(*(void *)(a1 + 48) + 157);
      *(_OWORD *)(v8 + 2) = *(_OWORD *)(*(void *)(a1 + 48) + 56);
      *(_OWORD *)(v8 + 6) = *(_OWORD *)(*(void *)(a1 + 48) + 72);
      *((_WORD *)v8 + 2) = bswap32(v13 + 8) >> 16;
      uint64_t v18 = *(void *)(a1 + 48);
      *((unsigned char *)v8 + 40) = *(unsigned char *)(v18 + 156);
      *((unsigned char *)v8 + 41) = 0;
      v8[11] = *(_DWORD *)(a1 + 76);
      *((_WORD *)v8 + 21) = (bswap32(*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) >> 16) | ((v11 <= v12) << 8);
      ++*(void *)v18;
      if ((*(unsigned char *)(v18 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          char v30 = __nwlog_obj();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v31 = *(void *)(a1 + 48);
            uint64_t v32 = (const char *)(v31 + 159);
            char v33 = "";
            if (!v31) {
              uint64_t v32 = "";
            }
            int v34 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
            if (v31) {
              char v33 = " ";
            }
            int v35 = *(_DWORD *)(a1 + 76);
            *(_DWORD *)buf = 136447746;
            os_log_type_t v44 = "nw_protocol_ipv6_frame_output_finalizer_block_invoke";
            __int16 v45 = 2082;
            uint64_t v46 = (void *)v32;
            __int16 v47 = 2080;
            __int16 v48 = v33;
            __int16 v49 = 2048;
            uint64_t v50 = v31;
            __int16 v51 = 1024;
            int v52 = v13;
            __int16 v53 = 1024;
            int v54 = v34;
            __int16 v55 = 1024;
            int v56 = v35;
            _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s%p Writing fragment of length %u at offset %u with ID %u", buf, 0x3Cu);
          }
        }
      }
      memcpy(v8 + 12, (const void *)(*(void *)(a1 + 64) + *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)), v13);
      nw_frame_claim(a2, v19, v13 + 48, 0);
      nw_frame_collapse(a2);
      nw_frame_unclaim(a2, v20, v13 + 48, 0);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += v13;
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v44 = "__nw_frame_get_ecn_flag";
    int v26 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v41 = 0;
    uint64_t v39 = (char *)v26;
    if (__nwlog_fault(v26, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v27 = __nwlog_obj();
        os_log_type_t v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          os_log_type_t v44 = "__nw_frame_get_ecn_flag";
          uint64_t v29 = "%{public}s called with null frame";
LABEL_49:
          _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0xCu);
        }
      }
      else
      {
        unint64_t v36 = v11;
        if (v41)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          BOOL v27 = __nwlog_obj();
          os_log_type_t v28 = type;
          BOOL v38 = os_log_type_enabled(v27, type);
          if (backtrace_string)
          {
            if (v38)
            {
              *(_DWORD *)buf = 136446466;
              os_log_type_t v44 = "__nw_frame_get_ecn_flag";
              __int16 v45 = 2082;
              uint64_t v46 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(backtrace_string);
            unint64_t v11 = v36;
            goto LABEL_50;
          }
          unint64_t v11 = v36;
          if (v38)
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v44 = "__nw_frame_get_ecn_flag";
            uint64_t v29 = "%{public}s called with null frame, no backtrace";
            goto LABEL_49;
          }
        }
        else
        {
          BOOL v27 = __nwlog_obj();
          os_log_type_t v28 = type;
          if (os_log_type_enabled(v27, type))
          {
            *(_DWORD *)buf = 136446210;
            os_log_type_t v44 = "__nw_frame_get_ecn_flag";
            uint64_t v29 = "%{public}s called with null frame, backtrace limit exceeded";
            goto LABEL_49;
          }
        }
      }
    }
LABEL_50:
    if (v39) {
      free(v39);
    }
    unsigned int v17 = 0;
    unsigned int v15 = *v8;
    goto LABEL_17;
  }
  if (!v9 || (*(unsigned char *)(v9 + 158) & 1) == 0)
  {
    uint64_t v22 = __nwlog_obj();
    BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_INFO);
    uint64_t v9 = *(void *)(a1 + 48);
    if (v23)
    {
      unsigned int v24 = (const char *)(v9 + 159);
      if (!v9) {
        unsigned int v24 = "";
      }
      *(_DWORD *)buf = 136446978;
      os_log_type_t v44 = "nw_protocol_ipv6_frame_output_finalizer_block_invoke";
      __int16 v45 = 2082;
      uint64_t v46 = (void *)v24;
      unsigned int v25 = " ";
      if (!v9) {
        unsigned int v25 = "";
      }
      __int16 v47 = 2080;
      __int16 v48 = v25;
      __int16 v49 = 2048;
      uint64_t v50 = v9;
      _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s%p Fragment frame is no longer valid", buf, 0x2Au);
      uint64_t v9 = *(void *)(a1 + 48);
    }
  }
  *(void *)(v9 + 48) = 0;
  return 1;
}

uint64_t nw_protocol_ipv6_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  uint64_t v206 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_get_input_frames";
    unsigned int v124 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v192) = 16;
    v188[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v124, &v192, v188)) {
      goto LABEL_245;
    }
    if (v192 == 17)
    {
      __int16 v121 = __nwlog_obj();
      os_log_type_t v122 = v192;
      if (os_log_type_enabled(v121, (os_log_type_t)v192))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_get_input_frames";
        __int16 v123 = "%{public}s called with null protocol";
LABEL_244:
        _os_log_impl(&dword_1830D4000, v121, v122, v123, buf, 0xCu);
      }
LABEL_245:
      if (v124) {
        free(v124);
      }
      return 0;
    }
    if (v188[0] == OS_LOG_TYPE_DEFAULT)
    {
      __int16 v121 = __nwlog_obj();
      os_log_type_t v122 = v192;
      if (os_log_type_enabled(v121, (os_log_type_t)v192))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_get_input_frames";
        __int16 v123 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_244;
      }
      goto LABEL_245;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v121 = __nwlog_obj();
    os_log_type_t v122 = v192;
    BOOL v128 = os_log_type_enabled(v121, (os_log_type_t)v192);
    if (!backtrace_string)
    {
      if (v128)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_get_input_frames";
        __int16 v123 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_244;
      }
      goto LABEL_245;
    }
    if (v128)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_get_input_frames";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      v129 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_234:
      _os_log_impl(&dword_1830D4000, v121, v122, v129, buf, 0x16u);
    }
LABEL_235:
    free(backtrace_string);
    goto LABEL_245;
  }
  handle = a1->handle;
  p_output_handler = &a1[1].output_handler;
  if (handle == &nw_protocol_ref_counted_handle) {
    uint64_t v8 = &a1[1].output_handler;
  }
  else {
    uint64_t v8 = 0;
  }
  if (handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_get_input_frames";
    unsigned int v124 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v192) = 16;
    v188[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v124, &v192, v188)) {
      goto LABEL_245;
    }
    if (v192 == 17)
    {
      __int16 v121 = __nwlog_obj();
      os_log_type_t v122 = v192;
      if (os_log_type_enabled(v121, (os_log_type_t)v192))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_get_input_frames";
        __int16 v123 = "%{public}s called with null ipv6";
        goto LABEL_244;
      }
      goto LABEL_245;
    }
    if (v188[0] == OS_LOG_TYPE_DEFAULT)
    {
      __int16 v121 = __nwlog_obj();
      os_log_type_t v122 = v192;
      if (os_log_type_enabled(v121, (os_log_type_t)v192))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_get_input_frames";
        __int16 v123 = "%{public}s called with null ipv6, backtrace limit exceeded";
        goto LABEL_244;
      }
      goto LABEL_245;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v121 = __nwlog_obj();
    os_log_type_t v122 = v192;
    BOOL v130 = os_log_type_enabled(v121, (os_log_type_t)v192);
    if (!backtrace_string)
    {
      if (v130)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_get_input_frames";
        __int16 v123 = "%{public}s called with null ipv6, no backtrace";
        goto LABEL_244;
      }
      goto LABEL_245;
    }
    if (v130)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_get_input_frames";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = backtrace_string;
      v129 = "%{public}s called with null ipv6, dumping backtrace:%{public}s";
      goto LABEL_234;
    }
    goto LABEL_235;
  }
  if (a3 >= 0xFFFFFFD8) {
    int v9 = -1;
  }
  else {
    int v9 = a3 + 40;
  }
  int v10 = a4 + 40;
  if (a4 >= 0xFFFFFFD8) {
    int v10 = -1;
  }
  unsigned int v147 = v10;
  unsigned int v148 = v9;
  uint64_t v192 = 0;
  v193 = &v192;
  int v195 = 0;
  uint64_t v194 = 0x2000000000;
  v144 = (char *)&a1[3].output_handler_context + 7;
  output_handler = a1->output_handler;
  if (!output_handler)
  {
LABEL_195:
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
    char v113 = (char *)_os_log_send_and_compose_impl();
    v188[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v186[0]) = 0;
    if (!__nwlog_fault(v113, v188, v186)) {
      goto LABEL_209;
    }
    if (v188[0] == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v114 = __nwlog_obj();
      os_log_type_t v115 = v188[0];
      if (!os_log_type_enabled(v114, v188[0])) {
        goto LABEL_209;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
      v116 = "%{public}s called with null protocol";
    }
    else if (LOBYTE(v186[0]))
    {
      __int16 v117 = (char *)__nw_create_backtrace_string();
      os_log_type_t v114 = __nwlog_obj();
      os_log_type_t v115 = v188[0];
      BOOL v118 = os_log_type_enabled(v114, v188[0]);
      if (v117)
      {
        if (v118)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v117;
          _os_log_impl(&dword_1830D4000, v114, v115, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v117);
LABEL_209:
        if (v113) {
          free(v113);
        }
        *((_DWORD *)v193 + 6) = 0;
LABEL_212:
        if ((BYTE6(a1[3].output_handler_context) & 1) == 0)
        {
          if (gLogDatapath)
          {
            unsigned int v126 = __nwlog_obj();
            if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_get_input_frames";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v144;
              *(_WORD *)&buf[22] = 2080;
              v199 = " ";
              __int16 v200 = 2048;
              v201 = (char *)p_output_handler;
              _os_log_impl(&dword_1830D4000, v126, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s%p No IPv6 input frames", buf, 0x2Au);
            }
          }
        }
        goto LABEL_214;
      }
      if (!v118) {
        goto LABEL_209;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
      v116 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      os_log_type_t v114 = __nwlog_obj();
      os_log_type_t v115 = v188[0];
      if (!os_log_type_enabled(v114, v188[0])) {
        goto LABEL_209;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
      v116 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v114, v115, v116, buf, 0xCu);
    goto LABEL_209;
  }
  unint64_t v12 = a6;
  while (2)
  {
    v150 = output_handler->handle;
    if (v150 == &nw_protocol_ref_counted_handle)
    {
      callbacks = output_handler[1].callbacks;
      if (callbacks) {
        output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
      }
    }
    uint64_t v14 = a1->handle;
    if (v14 == &nw_protocol_ref_counted_handle)
    {
      unsigned int v15 = a1[1].callbacks;
      if (v15) {
        a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v15->add_input_handler + 1);
      }
    }
    if (!v12)
    {
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
      v95 = (const char *)_os_log_send_and_compose_impl();
      v188[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v186[0]) = 0;
      os_log_t logc = (os_log_t)v95;
      if (!__nwlog_fault(v95, v188, v186)) {
        goto LABEL_186;
      }
      if (v188[0] == OS_LOG_TYPE_FAULT)
      {
        v96 = __nwlog_obj();
        os_log_type_t v97 = v188[0];
        *(void *)typeb = v96;
        if (!os_log_type_enabled(v96, v188[0])) {
          goto LABEL_186;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
        __int16 v92 = *(NSObject **)typeb;
        os_log_type_t v93 = v97;
        uint64_t v94 = "%{public}s called with null return_array";
        uint32_t v98 = 12;
        goto LABEL_185;
      }
      if (LOBYTE(v186[0]))
      {
        v99 = (char *)__nw_create_backtrace_string();
        typed = __nwlog_obj();
        os_log_type_t v132 = v188[0];
        BOOL v106 = os_log_type_enabled(typed, v188[0]);
        if (v99)
        {
          if (v106)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v99;
            uint64_t v102 = typed;
            os_log_type_t v103 = v132;
            uint32_t v104 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
            uint32_t v105 = 22;
LABEL_174:
            _os_log_impl(&dword_1830D4000, v102, v103, v104, buf, v105);
          }
LABEL_175:
          free(v99);
          goto LABEL_186;
        }
        if (v106)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
          __int16 v92 = typed;
          os_log_type_t v93 = v132;
          uint64_t v94 = "%{public}s called with null return_array, no backtrace";
          uint32_t v98 = 12;
          goto LABEL_185;
        }
      }
      else
      {
        int v111 = __nwlog_obj();
        os_log_type_t v112 = v188[0];
        *(void *)typef = v111;
        if (os_log_type_enabled(v111, v188[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
          __int16 v92 = *(NSObject **)typef;
          os_log_type_t v93 = v112;
          uint64_t v94 = "%{public}s called with null return_array, backtrace limit exceeded";
          uint32_t v98 = 12;
          goto LABEL_185;
        }
      }
LABEL_186:
      if (logc) {
        free(logc);
      }
      int v18 = 0;
      if (v14 != &nw_protocol_ref_counted_handle) {
        goto LABEL_26;
      }
      goto LABEL_25;
    }
    uint64_t v16 = output_handler->callbacks;
    if (!v16
      || (get_input_frames = (uint64_t (*)(void, void, void, void, void, void))v16->get_input_frames) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      name = output_handler->identifier->name;
      if (!name) {
        name = "invalid";
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = name;
      *(_WORD *)&buf[22] = 2048;
      v199 = (const char *)output_handler;
      BOOL v88 = (const char *)_os_log_send_and_compose_impl();
      v188[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v186[0]) = 0;
      os_log_t logc = (os_log_t)v88;
      if (__nwlog_fault(v88, v188, v186))
      {
        if (v188[0] == OS_LOG_TYPE_FAULT)
        {
          v89 = __nwlog_obj();
          os_log_type_t v90 = v188[0];
          *(void *)os_log_type_t typea = v89;
          if (!os_log_type_enabled(v89, v188[0])) {
            goto LABEL_186;
          }
          v91 = output_handler->identifier->name;
          if (!v91) {
            v91 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v91;
          *(_WORD *)&buf[22] = 2048;
          v199 = (const char *)output_handler;
          __int16 v92 = *(NSObject **)typea;
          os_log_type_t v93 = v90;
          uint64_t v94 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback";
LABEL_184:
          uint32_t v98 = 32;
LABEL_185:
          _os_log_impl(&dword_1830D4000, v92, v93, v94, buf, v98);
          goto LABEL_186;
        }
        if (!LOBYTE(v186[0]))
        {
          v107 = __nwlog_obj();
          os_log_type_t v108 = v188[0];
          *(void *)typee = v107;
          if (!os_log_type_enabled(v107, v188[0])) {
            goto LABEL_186;
          }
          v109 = output_handler->identifier->name;
          if (!v109) {
            v109 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v109;
          *(_WORD *)&buf[22] = 2048;
          v199 = (const char *)output_handler;
          __int16 v92 = *(NSObject **)typee;
          os_log_type_t v93 = v108;
          uint64_t v94 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, backtrace limit exceeded";
          goto LABEL_184;
        }
        v99 = (char *)__nw_create_backtrace_string();
        typec = __nwlog_obj();
        os_log_type_t v131 = v188[0];
        BOOL v100 = os_log_type_enabled(typec, v188[0]);
        if (!v99)
        {
          if (!v100) {
            goto LABEL_186;
          }
          v110 = output_handler->identifier->name;
          if (!v110) {
            v110 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v110;
          *(_WORD *)&buf[22] = 2048;
          v199 = (const char *)output_handler;
          __int16 v92 = typec;
          os_log_type_t v93 = v131;
          uint64_t v94 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, no backtrace";
          goto LABEL_184;
        }
        if (v100)
        {
          v101 = output_handler->identifier->name;
          if (!v101) {
            v101 = "invalid";
          }
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v101;
          *(_WORD *)&buf[22] = 2048;
          v199 = (const char *)output_handler;
          __int16 v200 = 2082;
          v201 = v99;
          uint64_t v102 = typec;
          os_log_type_t v103 = v131;
          uint32_t v104 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, dumping backtrace:%{public}s";
          uint32_t v105 = 42;
          goto LABEL_174;
        }
        goto LABEL_175;
      }
      goto LABEL_186;
    }
    int v18 = get_input_frames(output_handler, a1, v148, v147, a5, v12);
    if (v14 == &nw_protocol_ref_counted_handle)
    {
LABEL_25:
      if (a1->handle == &nw_protocol_ref_counted_handle)
      {
        char v83 = a1[1].callbacks;
        if (v83)
        {
          __int16 v84 = (nw_protocol_callbacks *)((char *)v83 - 1);
          a1[1].callbacks = v84;
          if (!v84)
          {
            os_log_type_t v85 = *(void (***)(void))a1[1].flow_id;
            if (v85)
            {
              *(void *)a1[1].flow_id = 0;
              v85[2](v85);
              _Block_release(v85);
            }
            if (a1[1].flow_id[8])
            {
              uint64_t v86 = *(const void **)a1[1].flow_id;
              if (v86) {
                _Block_release(v86);
              }
            }
            free(a1);
          }
        }
      }
    }
LABEL_26:
    if (v150 == &nw_protocol_ref_counted_handle && output_handler->handle == &nw_protocol_ref_counted_handle)
    {
      v79 = output_handler[1].callbacks;
      if (v79)
      {
        BOOL v80 = (nw_protocol_callbacks *)((char *)v79 - 1);
        output_handler[1].callbacks = v80;
        if (!v80)
        {
          v81 = *(void (***)(void))output_handler[1].flow_id;
          if (v81)
          {
            *(void *)output_handler[1].flow_id = 0;
            v81[2](v81);
            _Block_release(v81);
          }
          if (output_handler[1].flow_id[8])
          {
            __int16 v82 = *(const void **)output_handler[1].flow_id;
            if (v82) {
              _Block_release(v82);
            }
          }
          free(output_handler);
        }
      }
    }
    *((_DWORD *)v193 + 6) = v18;
    if (!v18) {
      goto LABEL_212;
    }
    *(void *)v188 = 0;
    v189 = v188;
    int v191 = 0;
    uint64_t v190 = 0x2000000000;
    v186[0] = 0;
    v186[1] = v186;
    v186[2] = 0x2000000000;
    char v187 = 0;
    v182[0] = 0;
    v182[1] = v182;
    v182[2] = 0x2000000000;
    char v183 = 0;
    uint64_t v184 = 0;
    v185 = (nw_frame **)&v184;
    v172[0] = MEMORY[0x1E4F143A8];
    v172[1] = 0x40000000;
    v173 = (uint64_t (*)(void *))___ZL33nw_protocol_ipv6_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke;
    v174 = &unk_1E524B288;
    v175 = v186;
    v176 = v182;
    v179 = v12;
    v180 = v8;
    v181 = &v184;
    v177 = &v192;
    v178 = v188;
    tqh_first = v12->tqh_first;
    do
    {
      if (!tqh_first) {
        break;
      }
      uint64_t v20 = (nw_frame *)*((void *)tqh_first + 4);
      char v21 = v173(v172);
      tqh_first = v20;
    }
    while ((v21 & 1) != 0);
    char v171 = 0;
    do
    {
      int v24 = nw_protocol_ipv6_process_reassembly((uint64_t)v8, 0, (uint64_t)&v184, 0, &v171);
      *((_DWORD *)v193 + 6) += v24;
      if (!v171) {
        break;
      }
      v170[0] = 0;
      v170[1] = v170;
      uint64_t v166 = 0;
      v167 = &v166;
      int v169 = 0;
      uint64_t v168 = 0x2000000000;
      unsigned int v25 = a1->output_handler;
      if (!v25)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
        int v54 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t v197 = OS_LOG_TYPE_ERROR;
        char v196 = 0;
        if (!__nwlog_fault(v54, &v197, &v196)) {
          goto LABEL_127;
        }
        if (v197 == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v55 = gLogObj;
          os_log_type_t v56 = v197;
          if (os_log_type_enabled((os_log_t)gLogObj, v197))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
            uint64_t v57 = v55;
            os_log_type_t v58 = v56;
            uint64_t v59 = "%{public}s called with null protocol";
            goto LABEL_126;
          }
          goto LABEL_127;
        }
        if (v196)
        {
          os_log_type_t v66 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          BOOL v67 = gLogObj;
          os_log_type_t v68 = v197;
          BOOL v69 = os_log_type_enabled((os_log_t)gLogObj, v197);
          if (v66)
          {
            if (v69)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v66;
              _os_log_impl(&dword_1830D4000, v67, v68, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v66);
            goto LABEL_127;
          }
          if (!v69)
          {
LABEL_127:
            if (v54) {
              free(v54);
            }
            int v32 = 0;
            goto LABEL_52;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
          uint64_t v57 = v67;
          os_log_type_t v58 = v68;
          uint64_t v59 = "%{public}s called with null protocol, no backtrace";
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v73 = gLogObj;
          os_log_type_t v74 = v197;
          if (!os_log_type_enabled((os_log_t)gLogObj, v197)) {
            goto LABEL_127;
          }
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
          uint64_t v57 = v73;
          os_log_type_t v58 = v74;
          uint64_t v59 = "%{public}s called with null protocol, backtrace limit exceeded";
        }
LABEL_126:
        _os_log_impl(&dword_1830D4000, v57, v58, v59, buf, 0xCu);
        goto LABEL_127;
      }
      int v26 = v25->handle;
      if (v26 == &nw_protocol_ref_counted_handle)
      {
        BOOL v27 = v25[1].callbacks;
        if (v27) {
          v25[1].callbacks = (nw_protocol_callbacks *)((char *)&v27->add_input_handler + 1);
        }
      }
      os_log_type_t v28 = a1->handle;
      if (v28 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v29 = a1[1].callbacks;
        if (v29) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v29->add_input_handler + 1);
        }
      }
      char v30 = v25->callbacks;
      if (!v30
        || (uint64_t v31 = (uint64_t (*)(nw_protocol *, nw_protocol *, uint64_t, uint64_t, uint64_t, void *))v30->get_input_frames) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v47 = v25->identifier->name;
        if (!v47) {
          __int16 v47 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v47;
        *(_WORD *)&buf[22] = 2048;
        v199 = (const char *)v25;
        __int16 v48 = (const char *)_os_log_send_and_compose_impl();
        os_log_type_t v197 = OS_LOG_TYPE_ERROR;
        char v196 = 0;
        v151 = (char *)v48;
        if (__nwlog_fault(v48, &v197, &v196))
        {
          if (v197 != OS_LOG_TYPE_FAULT)
          {
            if (v196)
            {
              uint64_t v60 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              loga = gLogObj;
              os_log_type_t type = v197;
              BOOL v61 = os_log_type_enabled((os_log_t)gLogObj, v197);
              if (v60)
              {
                if (v61)
                {
                  __int16 v62 = v25->identifier->name;
                  if (!v62) {
                    __int16 v62 = "invalid";
                  }
                  *(_DWORD *)buf = 136446978;
                  *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = v62;
                  *(_WORD *)&buf[22] = 2048;
                  v199 = (const char *)v25;
                  __int16 v200 = 2082;
                  v201 = v60;
                  _os_log_impl(&dword_1830D4000, loga, type, "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
                }
                free(v60);
                goto LABEL_118;
              }
              if (!v61) {
                goto LABEL_118;
              }
              uint32_t v72 = v25->identifier->name;
              if (!v72) {
                uint32_t v72 = "invalid";
              }
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v72;
              *(_WORD *)&buf[22] = 2048;
              v199 = (const char *)v25;
              __int16 v51 = loga;
              os_log_type_t v52 = type;
              __int16 v53 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, no backtrace";
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v70 = v197;
              os_log_t logb = (os_log_t)gLogObj;
              if (!os_log_type_enabled((os_log_t)gLogObj, v197)) {
                goto LABEL_118;
              }
              os_log_type_t v71 = v25->identifier->name;
              if (!v71) {
                os_log_type_t v71 = "invalid";
              }
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v71;
              *(_WORD *)&buf[22] = 2048;
              v199 = (const char *)v25;
              __int16 v51 = logb;
              os_log_type_t v52 = v70;
              __int16 v53 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback, backtrace limit exceeded";
            }
LABEL_117:
            _os_log_impl(&dword_1830D4000, v51, v52, v53, buf, 0x20u);
            goto LABEL_118;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v49 = v197;
          os_log_t log = (os_log_t)gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, v197))
          {
            uint64_t v50 = v25->identifier->name;
            if (!v50) {
              uint64_t v50 = "invalid";
            }
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "__nw_protocol_get_input_frames";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v50;
            *(_WORD *)&buf[22] = 2048;
            v199 = (const char *)v25;
            __int16 v51 = log;
            os_log_type_t v52 = v49;
            __int16 v53 = "%{public}s protocol %{public}s (%p) has invalid get_input_frames callback";
            goto LABEL_117;
          }
        }
LABEL_118:
        if (v151) {
          free(v151);
        }
        int v32 = 0;
        if (v28 != &nw_protocol_ref_counted_handle) {
          goto LABEL_50;
        }
LABEL_49:
        if (a1->handle == &nw_protocol_ref_counted_handle)
        {
          uint64_t v39 = a1[1].callbacks;
          if (v39)
          {
            unsigned int v40 = (nw_protocol_callbacks *)((char *)v39 - 1);
            a1[1].callbacks = v40;
            if (!v40)
            {
              char v41 = *(void (***)(void))a1[1].flow_id;
              if (v41)
              {
                *(void *)a1[1].flow_id = 0;
                v41[2](v41);
                _Block_release(v41);
              }
              if (a1[1].flow_id[8])
              {
                uint64_t v42 = *(const void **)a1[1].flow_id;
                if (v42) {
                  _Block_release(v42);
                }
              }
              free(a1);
            }
          }
        }
        goto LABEL_50;
      }
      int v32 = v31(v25, a1, 1, 0xFFFFFFFFLL, 1, v170);
      if (v28 == &nw_protocol_ref_counted_handle) {
        goto LABEL_49;
      }
LABEL_50:
      if (v26 == &nw_protocol_ref_counted_handle && v25->handle == &nw_protocol_ref_counted_handle)
      {
        char v43 = v25[1].callbacks;
        if (v43)
        {
          os_log_type_t v44 = (nw_protocol_callbacks *)((char *)v43 - 1);
          v25[1].callbacks = v44;
          if (!v44)
          {
            __int16 v45 = *(void (***)(void))v25[1].flow_id;
            if (v45)
            {
              *(void *)v25[1].flow_id = 0;
              v45[2](v45);
              _Block_release(v45);
            }
            if (v25[1].flow_id[8])
            {
              uint64_t v46 = *(const void **)v25[1].flow_id;
              if (v46) {
                _Block_release(v46);
              }
            }
            free(v25);
          }
        }
      }
LABEL_52:
      int v169 = v32;
      if (*((_DWORD *)v167 + 6))
      {
        if ((BYTE6(a1[3].output_handler_context) & 1) == 0)
        {
          if (gLogDatapath)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            BOOL v63 = gLogObj;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
            {
              int v64 = *((_DWORD *)v167 + 6);
              BOOL v65 = "s";
              if (v64 == 1) {
                BOOL v65 = "";
              }
              *(_DWORD *)buf = 136447490;
              *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_get_input_frames";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v144;
              *(_WORD *)&buf[22] = 2080;
              v199 = " ";
              __int16 v200 = 2048;
              v201 = (char *)p_output_handler;
              __int16 v202 = 1024;
              int v203 = v64;
              __int16 v204 = 2080;
              v205 = v65;
              _os_log_impl(&dword_1830D4000, v63, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s%p Found %u IPv6 extra fragment%s", buf, 0x3Au);
            }
          }
        }
        *(void *)buf = 0;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x2000000000;
        LOBYTE(v199) = 0;
        v157[0] = MEMORY[0x1E4F143A8];
        v157[1] = 0x40000000;
        v158 = (uint64_t (*)(void *))___ZL33nw_protocol_ipv6_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_40;
        v159 = &unk_1E524B2B0;
        v164 = v170;
        v165 = &v184;
        v160 = &v166;
        v161 = v188;
        v162 = buf;
        v163 = v8;
        uint64_t v33 = v170[0];
        do
        {
          if (!v33) {
            break;
          }
          uint64_t v34 = *(void *)(v33 + 32);
          char v35 = v158(v157);
          uint64_t v33 = v34;
        }
        while ((v35 & 1) != 0);
        v152[0] = MEMORY[0x1E4F143A8];
        v152[1] = 0x40000000;
        v153 = ___ZL33nw_protocol_ipv6_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_2;
        v154 = &__block_descriptor_tmp_42_87267;
        v155 = v170;
        v156 = v8;
        uint64_t v36 = v170[0];
        do
        {
          if (!v36) {
            break;
          }
          uint64_t v37 = *(void *)(v36 + 32);
          char v38 = ((uint64_t (*)(void *))v153)(v152);
          uint64_t v36 = v37;
        }
        while ((v38 & 1) != 0);
        if (*(unsigned char *)(*(void *)&buf[8] + 24)) {
          int v22 = 34;
        }
        else {
          int v22 = 0;
        }
        _Block_object_dispose(buf, 8);
      }
      else
      {
        int v22 = 34;
      }
      _Block_object_dispose(&v166, 8);
      if (v22) {
        BOOL v23 = 1;
      }
      else {
        BOOL v23 = v171 == 0;
      }
    }
    while (!v23);
    unint64_t v12 = a6;
    if (v184)
    {
      *a6->tqh_last = (nw_frame *)v184;
      BOOL v75 = v185;
      *(void *)(v184 + 40) = a6->tqh_last;
      a6->tqh_last = v75;
      uint64_t v184 = 0;
      v185 = (nw_frame **)&v184;
    }
    *((_DWORD *)v193 + 6) += *((_DWORD *)v189 + 6);
    int v76 = nw_protocol_ipv6_process_reassembly((uint64_t)v8, 0, (uint64_t)a6, 1, 0);
    int v77 = *((_DWORD *)v193 + 6) + v76;
    *((_DWORD *)v193 + 6) = v77;
    if (!v77)
    {
      if ((BYTE6(a1[3].output_handler_context) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        char v78 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_get_input_frames";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v144;
          *(_WORD *)&buf[22] = 2080;
          v199 = " ";
          __int16 v200 = 2048;
          v201 = (char *)p_output_handler;
          _os_log_impl(&dword_1830D4000, v78, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s%p Dropped inbound packets, checking for more", buf, 0x2Au);
        }
      }
      _Block_object_dispose(v182, 8);
      _Block_object_dispose(v186, 8);
      _Block_object_dispose(v188, 8);
      output_handler = a1->output_handler;
      if (!output_handler) {
        goto LABEL_195;
      }
      continue;
    }
    break;
  }
  _Block_object_dispose(v182, 8);
  _Block_object_dispose(v186, 8);
  _Block_object_dispose(v188, 8);
LABEL_214:
  uint64_t v119 = *((unsigned int *)v193 + 6);
  _Block_object_dispose(&v192, 8);
  return v119;
}

uint64_t ___ZL33nw_protocol_ipv6_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke(void *a1, uint64_t a2, __n128 a3, __n128 a4)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a1[4] + 8);
  if (!*(unsigned char *)(v6 + 24))
  {
    if (a2)
    {
      unsigned int v8 = *(unsigned __int16 *)(a2 + 204) | (*(unsigned __int8 *)(a2 + 206) << 16);
      goto LABEL_12;
    }
LABEL_49:
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v41 = "__nw_frame_is_single_ip_aggregate";
    int v32 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (__nwlog_fault(v32, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v33 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          char v41 = "__nw_frame_is_single_ip_aggregate";
          char v35 = "%{public}s called with null frame";
LABEL_62:
          _os_log_impl(&dword_1830D4000, v33, v34, v35, buf, 0xCu);
        }
      }
      else if (v38)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v33 = __nwlog_obj();
        os_log_type_t v34 = type;
        BOOL v37 = os_log_type_enabled(v33, type);
        if (backtrace_string)
        {
          if (v37)
          {
            *(_DWORD *)buf = 136446466;
            char v41 = "__nw_frame_is_single_ip_aggregate";
            __int16 v42 = 2082;
            char v43 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_63;
        }
        if (v37)
        {
          *(_DWORD *)buf = 136446210;
          char v41 = "__nw_frame_is_single_ip_aggregate";
          char v35 = "%{public}s called with null frame, no backtrace";
          goto LABEL_62;
        }
      }
      else
      {
        uint64_t v33 = __nwlog_obj();
        os_log_type_t v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          char v41 = "__nw_frame_is_single_ip_aggregate";
          char v35 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_62;
        }
      }
    }
LABEL_63:
    if (v32) {
      free(v32);
    }
    LOBYTE(v17) = 0;
    uint64_t v6 = *(void *)(a1[4] + 8);
    goto LABEL_13;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    char v41 = "__nw_frame_is_packet_chain_member";
    int v26 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (!__nwlog_fault(v26, &type, &v38)) {
      goto LABEL_47;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      BOOL v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      char v41 = "__nw_frame_is_packet_chain_member";
      uint64_t v29 = "%{public}s called with null frame";
    }
    else if (v38)
    {
      char v30 = (char *)__nw_create_backtrace_string();
      BOOL v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      BOOL v31 = os_log_type_enabled(v27, type);
      if (v30)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          char v41 = "__nw_frame_is_packet_chain_member";
          __int16 v42 = 2082;
          char v43 = v30;
          _os_log_impl(&dword_1830D4000, v27, v28, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v30);
        goto LABEL_47;
      }
      if (!v31)
      {
LABEL_47:
        if (v26) {
          free(v26);
        }
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136446210;
      char v41 = "__nw_frame_is_packet_chain_member";
      uint64_t v29 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      BOOL v27 = __nwlog_obj();
      os_log_type_t v28 = type;
      if (!os_log_type_enabled(v27, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      char v41 = "__nw_frame_is_packet_chain_member";
      uint64_t v29 = "%{public}s called with null frame, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v27, v28, v29, buf, 0xCu);
    goto LABEL_47;
  }
  int v7 = *(unsigned __int16 *)(a2 + 204);
  unsigned int v8 = v7 | (*(unsigned __int8 *)(a2 + 206) << 16);
  if ((v7 & 0x40) == 0)
  {
LABEL_12:
    int v17 = (v8 >> 7) & 1;
LABEL_13:
    *(unsigned char *)(v6 + 24) = v17;
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = nw_protocol_ipv6_process_input_frame(a1[9], a2, a1[8], a1[10], (_DWORD *)(*(void *)(a1[6] + 8) + 24), (_DWORD *)(*(void *)(a1[7] + 8) + 24), a3, a4);
    if (*(unsigned char *)(*(void *)(a1[5] + 8) + 24)) {
      return 1;
    }
    --*(_DWORD *)(*(void *)(a1[6] + 8) + 24);
    goto LABEL_15;
  }
  if (*(unsigned char *)(*(void *)(a1[5] + 8) + 24)) {
    return 1;
  }
  uint64_t v9 = *(void *)(a1[6] + 8);
  int v10 = *(_DWORD *)(v9 + 24);
  *(_DWORD *)(v9 + 24) = v10 - 1;
  if (!v10)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v11 = *(unsigned int *)(*(void *)(a1[6] + 8) + 24);
    *(_DWORD *)buf = 136446978;
    char v41 = "nw_protocol_ipv6_get_input_frames_block_invoke";
    __int16 v42 = 2082;
    char v43 = "count";
    __int16 v44 = 2048;
    uint64_t v45 = 1;
    __int16 v46 = 2048;
    uint64_t v47 = v11;
    unint64_t v12 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v38 = 0;
    if (__nwlog_fault(v12, &type, &v38))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        size_t v13 = gLogObj;
        os_log_type_t v14 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          uint64_t v15 = *(unsigned int *)(*(void *)(a1[6] + 8) + 24);
          *(_DWORD *)buf = 136446978;
          char v41 = "nw_protocol_ipv6_get_input_frames_block_invoke";
          __int16 v42 = 2082;
          char v43 = "count";
          __int16 v44 = 2048;
          uint64_t v45 = 1;
          __int16 v46 = 2048;
          uint64_t v47 = v15;
          uint64_t v16 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_29:
          _os_log_impl(&dword_1830D4000, v13, v14, v16, buf, 0x2Au);
        }
      }
      else if (v38)
      {
        char v21 = (char *)__nw_create_backtrace_string();
        size_t v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        BOOL v22 = os_log_type_enabled(v13, type);
        if (v21)
        {
          if (v22)
          {
            uint64_t v23 = *(unsigned int *)(*(void *)(a1[6] + 8) + 24);
            *(_DWORD *)buf = 136447234;
            char v41 = "nw_protocol_ipv6_get_input_frames_block_invoke";
            __int16 v42 = 2082;
            char v43 = "count";
            __int16 v44 = 2048;
            uint64_t v45 = 1;
            __int16 v46 = 2048;
            uint64_t v47 = v23;
            __int16 v48 = 2082;
            os_log_type_t v49 = v21;
            _os_log_impl(&dword_1830D4000, v13, v14, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }
          free(v21);
          goto LABEL_30;
        }
        if (v22)
        {
          uint64_t v25 = *(unsigned int *)(*(void *)(a1[6] + 8) + 24);
          *(_DWORD *)buf = 136446978;
          char v41 = "nw_protocol_ipv6_get_input_frames_block_invoke";
          __int16 v42 = 2082;
          char v43 = "count";
          __int16 v44 = 2048;
          uint64_t v45 = 1;
          __int16 v46 = 2048;
          uint64_t v47 = v25;
          uint64_t v16 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
          goto LABEL_29;
        }
      }
      else
      {
        size_t v13 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          uint64_t v24 = *(unsigned int *)(*(void *)(a1[6] + 8) + 24);
          *(_DWORD *)buf = 136446978;
          char v41 = "nw_protocol_ipv6_get_input_frames_block_invoke";
          __int16 v42 = 2082;
          char v43 = "count";
          __int16 v44 = 2048;
          uint64_t v45 = 1;
          __int16 v46 = 2048;
          uint64_t v47 = v24;
          uint64_t v16 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
          goto LABEL_29;
        }
      }
    }
LABEL_30:
    if (v12) {
      free(v12);
    }
    *(_DWORD *)(*(void *)(a1[6] + 8) + 24) = 0;
  }
LABEL_15:
  uint64_t v18 = *(void *)(a2 + 32);
  uint64_t v19 = *(void **)(a2 + 40);
  if (v18)
  {
    *(void *)(v18 + 40) = v19;
    uint64_t v19 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(a1[8] + 8) = v19;
  }
  void *v19 = v18;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return 1;
}

uint64_t nw_protocol_ipv6_process_reassembly(uint64_t a1, int a2, uint64_t a3, int a4, unsigned char *a5)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 88);
  if (!v8)
  {
    uint64_t v12 = 0;
    goto LABEL_81;
  }
  if (!a5 && *(_DWORD *)(a1 + 148) == a2 && a4 == 0)
  {
    uint64_t v12 = 0;
LABEL_82:
    *(_DWORD *)(a1 + 148) = a2;
    return v12;
  }
  if (!a3)
  {
    uint64_t v12 = 0;
    if (!a4) {
      goto LABEL_81;
    }
    goto LABEL_74;
  }
  uint64_t v88 = 0;
  v89 = &v88;
  uint64_t v90 = 0x2000000000;
  char v91 = 0;
  uint64_t v84 = 0;
  os_log_type_t v85 = &v84;
  uint64_t v86 = 0x2000000000;
  __int16 v87 = 0;
  v78[0] = MEMORY[0x1E4F143A8];
  v78[1] = 0x40000000;
  v79 = (uint64_t (*)(void *))___ZL43nw_protocol_ipv6_append_reassembled_packetsP16nw_protocol_ipv6P16nw_frame_array_sPb_block_invoke;
  BOOL v80 = &unk_1E524B320;
  __int16 v82 = &v88;
  uint64_t v83 = a1;
  v81 = &v84;
  do
  {
    if (!v8) {
      break;
    }
    uint64_t v13 = *(void *)(v8 + 32);
    char v14 = v79(v78);
    uint64_t v8 = v13;
  }
  while ((v14 & 1) != 0);
  if (!*((unsigned char *)v89 + 24))
  {
    if ((*(unsigned char *)(a1 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v60 = __nwlog_obj();
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
        {
          int v61 = *(_DWORD *)(a1 + 148);
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = a1 + 159;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&unsigned char buf[24] = " ";
          LOWORD(v93) = 2048;
          *(void *)((char *)&v93 + 2) = a1;
          WORD5(v93) = 1024;
          HIDWORD(v93) = v61;
          _os_log_impl(&dword_1830D4000, v60, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s%p Fragments for IPv6 Fragment ID %u incomplete", buf, 0x30u);
        }
      }
    }
    uint64_t v12 = 0;
    if (a5) {
      *a5 = 1;
    }
    goto LABEL_73;
  }
  int v15 = *((unsigned __int16 *)v85 + 12) + 40;
  uint64_t v16 = nw_calloc_type<unsigned char>(*((unsigned __int16 *)v85 + 12) + 40);
  uint64_t v17 = nw_frame_create(0, v16, v15, (uint64_t)nw_protocol_ipv6_frame_input_finalizer, a1);
  if (!v17)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v15;
    os_log_type_t v28 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v75[0]) = 0;
    if (__nwlog_fault(v28, type, v75))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v29 = __nwlog_obj();
        os_log_type_t v30 = type[0];
        if (os_log_type_enabled(v29, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v15;
          BOOL v31 = "%{public}s nw_frame_create(%u) failed";
LABEL_54:
          _os_log_impl(&dword_1830D4000, v29, v30, v31, buf, 0x12u);
        }
      }
      else if (LOBYTE(v75[0]))
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        uint64_t v29 = __nwlog_obj();
        os_log_type_t v30 = type[0];
        BOOL v33 = os_log_type_enabled(v29, type[0]);
        if (backtrace_string)
        {
          if (v33)
          {
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v15;
            *(_WORD *)&buf[18] = 2082;
            *(void *)&buf[20] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s nw_frame_create(%u) failed, dumping backtrace:%{public}s", buf, 0x1Cu);
          }
          free(backtrace_string);
          goto LABEL_55;
        }
        if (v33)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v15;
          BOOL v31 = "%{public}s nw_frame_create(%u) failed, no backtrace";
          goto LABEL_54;
        }
      }
      else
      {
        uint64_t v29 = __nwlog_obj();
        os_log_type_t v30 = type[0];
        if (os_log_type_enabled(v29, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v15;
          BOOL v31 = "%{public}s nw_frame_create(%u) failed, backtrace limit exceeded";
          goto LABEL_54;
        }
      }
    }
LABEL_55:
    if (v28) {
      free(v28);
    }
    if (v16) {
      free((void *)v16);
    }
    uint64_t v12 = 0;
    goto LABEL_73;
  }
  uint64_t v18 = v17;
  if ((*(unsigned char *)(a1 + 158) & 1) == 0)
  {
    if (gLogDatapath)
    {
      __int16 v53 = __nwlog_obj();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
      {
        int v54 = *(_DWORD *)(a1 + 148);
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 159;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&unsigned char buf[24] = " ";
        LOWORD(v93) = 2048;
        *(void *)((char *)&v93 + 2) = a1;
        WORD5(v93) = 1024;
        HIDWORD(v93) = v54;
        *(_WORD *)uint64_t v94 = 1024;
        *(_DWORD *)&v94[2] = v15;
        _os_log_impl(&dword_1830D4000, v53, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s%p Fragments for IPv6 Fragment ID %u are complete, aggregate length %u", buf, 0x36u);
      }
    }
  }
  uint64_t v19 = *(void *)(a1 + 88);
  unsigned int v77 = 0;
  uint64_t v20 = nw_frame_unclaimed_bytes(v19, &v77);
  if (v20)
  {
    if (v77 > 0x27)
    {
      uint64_t v22 = *(void *)(v20 + 32);
      long long v23 = *(_OWORD *)(v20 + 16);
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v20;
      *(_OWORD *)(v16 + 16) = v23;
      *(void *)(v16 + 32) = v22;
      *(_WORD *)(v16 + 4) = bswap32(*((unsigned __int16 *)v85 + 12)) >> 16;
      if ((*(_WORD *)(v18 + 204) & 8) == 0)
      {
        uint64_t v24 = v18 + 120;
        uint64_t v25 = *(void **)(v18 + 168);
        if (v25)
        {
          os_release(v25);
          *(void *)(v18 + 168) = 0;
        }
        uint64_t v26 = *(void *)(v18 + 64);
        *(unsigned char *)(v18 + 186) |= 0x40u;
        if (v26)
        {
          if (v26 != v24)
          {
            __nwlog_obj();
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "__nw_frame_set_metadata";
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v26;
            *(_WORD *)&buf[22] = 2048;
            *(void *)&unsigned char buf[24] = v18 + 120;
            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v75[0]) = 0;
            BOOL v69 = (char *)_os_log_send_and_compose_impl();
            if (!__nwlog_fault(v69, type, v75)) {
              goto LABEL_64;
            }
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              BOOL v67 = __nwlog_obj();
              os_log_type_t log = type[0];
              if (!os_log_type_enabled(v67, type[0])) {
                goto LABEL_64;
              }
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_frame_set_metadata";
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = v26;
              *(_WORD *)&buf[22] = 2048;
              *(void *)&unsigned char buf[24] = v18 + 120;
              BOOL v27 = "%{public}s Existing metadata %p doesn't match expected %p";
            }
            else
            {
              if (LOBYTE(v75[0]))
              {
                os_log_type_t v68 = __nw_create_backtrace_string();
                loga = __nwlog_obj();
                os_log_type_t v64 = type[0];
                BOOL v34 = os_log_type_enabled(loga, type[0]);
                char v35 = (char *)v68;
                if (v68)
                {
                  if (v34)
                  {
                    *(_DWORD *)buf = 136446978;
                    *(void *)&uint8_t buf[4] = "__nw_frame_set_metadata";
                    *(_WORD *)&unsigned char buf[12] = 2048;
                    *(void *)&buf[14] = v26;
                    *(_WORD *)&buf[22] = 2048;
                    *(void *)&unsigned char buf[24] = v18 + 120;
                    LOWORD(v93) = 2082;
                    *(void *)((char *)&v93 + 2) = v68;
                    _os_log_impl(&dword_1830D4000, loga, v64, "%{public}s Existing metadata %p doesn't match expected %p, dumping backtrace:%{public}s", buf, 0x2Au);
                    char v35 = (char *)v68;
                  }
                  free(v35);
                  goto LABEL_64;
                }
                if (!v34)
                {
LABEL_64:
                  if (v69) {
                    free(v69);
                  }
                  goto LABEL_66;
                }
                *(_DWORD *)buf = 136446722;
                *(void *)&uint8_t buf[4] = "__nw_frame_set_metadata";
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&buf[14] = v26;
                *(_WORD *)&buf[22] = 2048;
                *(void *)&unsigned char buf[24] = v18 + 120;
                BOOL v27 = "%{public}s Existing metadata %p doesn't match expected %p, no backtrace";
                uint64_t v36 = loga;
                os_log_type_t v37 = v64;
LABEL_63:
                _os_log_impl(&dword_1830D4000, v36, v37, v27, buf, 0x20u);
                goto LABEL_64;
              }
              BOOL v67 = __nwlog_obj();
              os_log_type_t log = type[0];
              if (!os_log_type_enabled(v67, type[0])) {
                goto LABEL_64;
              }
              *(_DWORD *)buf = 136446722;
              *(void *)&uint8_t buf[4] = "__nw_frame_set_metadata";
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(void *)&buf[14] = v26;
              *(_WORD *)&buf[22] = 2048;
              *(void *)&unsigned char buf[24] = v18 + 120;
              BOOL v27 = "%{public}s Existing metadata %p doesn't match expected %p, backtrace limit exceeded";
            }
            uint64_t v36 = v67;
            os_log_type_t v37 = log;
            goto LABEL_63;
          }
        }
        else
        {
          *(void *)(v18 + 64) = v24;
          *(void *)(v18 + 72) = v24;
          *(void *)(v18 + 120) = 0;
          *(void *)(v18 + 128) = v18 + 64;
        }
      }
LABEL_66:
      nw_frame_claim(v18, v21, 40, 0);
      v75[0] = 0;
      v75[1] = v75;
      int v76 = 40;
      v75[2] = 0x2000000000;
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = ___ZL43nw_protocol_ipv6_append_reassembled_packetsP16nw_protocol_ipv6P16nw_frame_array_sPb_block_invoke_45;
      *(void *)&unsigned char buf[24] = &unk_1E524B348;
      *(void *)&long long v93 = v75;
      *((void *)&v93 + 1) = a1;
      *(_DWORD *)&v94[8] = v15;
      *(void *)uint64_t v94 = v16;
      uint64_t v38 = *(void *)(a1 + 88);
      do
      {
        if (!v38) {
          break;
        }
        uint64_t v39 = *(void *)(v38 + 32);
        char v40 = (*(uint64_t (**)(unsigned char *))&buf[16])(buf);
        uint64_t v38 = v39;
      }
      while ((v40 & 1) != 0);
      *(void *)(v18 + 16) = 0;
      char v41 = *(uint64_t **)(a1 + 112);
      *(void *)(v18 + 24) = v41;
      uint64_t *v41 = v18;
      *(void *)(a1 + 112) = v18 + 16;
      *(void *)(v18 + 32) = 0;
      __int16 v42 = *(uint64_t **)(a3 + 8);
      *(void *)(v18 + 40) = v42;
      uint64_t *v42 = v18;
      *(void *)(a3 + 8) = v18 + 32;
      *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
      uint64_t v71 = 0x40000000;
      uint32_t v72 = ___ZL43nw_protocol_ipv6_append_reassembled_packetsP16nw_protocol_ipv6P16nw_frame_array_sPb_block_invoke_47;
      uint64_t v73 = &__block_descriptor_tmp_48_87338;
      uint64_t v74 = a1;
      uint64_t v43 = *(void *)(a1 + 88);
      do
      {
        if (!v43) {
          break;
        }
        uint64_t v44 = *(void *)(v43 + 32);
        char v45 = ((uint64_t (*)(os_log_type_t *))v72)(type);
        uint64_t v43 = v44;
      }
      while ((v45 & 1) != 0);
      _Block_object_dispose(v75, 8);
      uint64_t v12 = 1;
      goto LABEL_73;
    }
    if (*(unsigned char *)(a1 + 158))
    {
LABEL_114:
      os_release((void *)v18);
      uint64_t v12 = 0;
      goto LABEL_73;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136447234;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = a1 + 159;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&unsigned char buf[24] = " ";
    LOWORD(v93) = 2048;
    *(void *)((char *)&v93 + 2) = a1;
    WORD5(v93) = 1024;
    HIDWORD(v93) = v77;
    os_log_type_t v56 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v75[0]) = 0;
    if (__nwlog_fault(v56, type, v75))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v57 = __nwlog_obj();
        os_log_type_t v58 = type[0];
        if (!os_log_type_enabled(v57, type[0])) {
          goto LABEL_112;
        }
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 159;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&unsigned char buf[24] = " ";
        LOWORD(v93) = 2048;
        *(void *)((char *)&v93 + 2) = a1;
        WORD5(v93) = 1024;
        HIDWORD(v93) = v77;
        uint64_t v59 = "%{public}s %{public}s%s%p Invalid first IPv6 reassembly frame (length %u)";
        goto LABEL_111;
      }
      if (!LOBYTE(v75[0]))
      {
        uint64_t v57 = __nwlog_obj();
        os_log_type_t v58 = type[0];
        if (!os_log_type_enabled(v57, type[0])) {
          goto LABEL_112;
        }
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 159;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&unsigned char buf[24] = " ";
        LOWORD(v93) = 2048;
        *(void *)((char *)&v93 + 2) = a1;
        WORD5(v93) = 1024;
        HIDWORD(v93) = v77;
        uint64_t v59 = "%{public}s %{public}s%s%p Invalid first IPv6 reassembly frame (length %u), backtrace limit exceeded";
        goto LABEL_111;
      }
      __int16 v62 = (char *)__nw_create_backtrace_string();
      uint64_t v57 = __nwlog_obj();
      os_log_type_t v58 = type[0];
      BOOL v63 = os_log_type_enabled(v57, type[0]);
      if (v62)
      {
        if (v63)
        {
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = a1 + 159;
          *(_WORD *)&buf[22] = 2080;
          *(void *)&unsigned char buf[24] = " ";
          LOWORD(v93) = 2048;
          *(void *)((char *)&v93 + 2) = a1;
          WORD5(v93) = 1024;
          HIDWORD(v93) = v77;
          *(_WORD *)uint64_t v94 = 2082;
          *(void *)&v94[2] = v62;
          _os_log_impl(&dword_1830D4000, v57, v58, "%{public}s %{public}s%s%p Invalid first IPv6 reassembly frame (length %u), dumping backtrace:%{public}s", buf, 0x3Au);
        }
        free(v62);
        goto LABEL_112;
      }
      if (v63)
      {
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 159;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&unsigned char buf[24] = " ";
        LOWORD(v93) = 2048;
        *(void *)((char *)&v93 + 2) = a1;
        WORD5(v93) = 1024;
        HIDWORD(v93) = v77;
        uint64_t v59 = "%{public}s %{public}s%s%p Invalid first IPv6 reassembly frame (length %u), no backtrace";
LABEL_111:
        _os_log_impl(&dword_1830D4000, v57, v58, v59, buf, 0x30u);
      }
    }
LABEL_112:
    if (v56) {
      free(v56);
    }
    goto LABEL_114;
  }
  if ((*(unsigned char *)(a1 + 158) & 1) == 0)
  {
    uint64_t v55 = __nwlog_obj();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_append_reassembled_packets";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = a1 + 159;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&unsigned char buf[24] = " ";
      LOWORD(v93) = 2048;
      *(void *)((char *)&v93 + 2) = a1;
      _os_log_impl(&dword_1830D4000, v55, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s%p Frame is no longer valid", buf, 0x2Au);
    }
  }
  *(void *)(a1 + 48) = 0;
  uint64_t v12 = 0;
LABEL_73:
  _Block_object_dispose(&v84, 8);
  _Block_object_dispose(&v88, 8);
  if (!a4) {
    goto LABEL_81;
  }
LABEL_74:
  for (int i = 0; ; ++i)
  {
    uint64_t v47 = *(void *)(a1 + 88);
    if (!v47) {
      break;
    }
    uint64_t v48 = *(void *)(v47 + 32);
    os_log_type_t v49 = *(void **)(v47 + 40);
    if (v48)
    {
      *(void *)(v48 + 40) = v49;
      os_log_type_t v49 = *(void **)(v47 + 40);
    }
    else
    {
      *(void *)(a1 + 96) = v49;
    }
    *os_log_type_t v49 = v48;
    *(void *)(v47 + 32) = 0;
    *(void *)(v47 + 40) = 0;
    nw_frame_finalize(v47);
  }
  if (i)
  {
    if ((*(unsigned char *)(a1 + 158) & 1) == 0)
    {
      __int16 v51 = __nwlog_obj();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        int v52 = *(_DWORD *)(a1 + 148);
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_reassembly";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 159;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&unsigned char buf[24] = " ";
        LOWORD(v93) = 2048;
        *(void *)((char *)&v93 + 2) = a1;
        WORD5(v93) = 1024;
        HIDWORD(v93) = v52;
        *(_WORD *)uint64_t v94 = 1024;
        *(_DWORD *)&v94[2] = i;
        _os_log_impl(&dword_1830D4000, v51, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s%p Failed to reassemble IPv6 Fragmentation ID %u, dropping %u frames", buf, 0x36u);
      }
    }
  }
LABEL_81:
  if (!a5) {
    goto LABEL_82;
  }
  return v12;
}

uint64_t ___ZL33nw_protocol_ipv6_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_40(void *a1, uint64_t a2, __n128 a3, __n128 a4)
{
  if (!nw_protocol_ipv6_process_input_frame(a1[7], a2, a1[8], a1[9], (_DWORD *)(*(void *)(a1[4] + 8) + 24), (_DWORD *)(*(void *)(a1[5] + 8) + 24), a3, a4))
  {
    --*(_DWORD *)(*(void *)(a1[4] + 8) + 24);
    uint64_t v6 = *(void *)(a2 + 32);
    int v7 = *(void **)(a2 + 40);
    if (v6)
    {
      *(void *)(v6 + 40) = v7;
      int v7 = *(void **)(a2 + 40);
    }
    else
    {
      *(void *)(a1[8] + 8) = v7;
    }
    *int v7 = v6;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    nw_frame_finalize(a2);
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  }
  return 1;
}

uint64_t ___ZL33nw_protocol_ipv6_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 32);
  unsigned int v4 = *(void **)(a2 + 40);
  if (v3)
  {
    *(void *)(v3 + 40) = v4;
    unsigned int v4 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 8) = v4;
  }
  *unsigned int v4 = v3;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5 || (*(unsigned char *)(v5 + 158) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = (const char *)(v7 + 159);
      if (!v7) {
        uint64_t v8 = "";
      }
      int v11 = 136446978;
      uint64_t v12 = "nw_protocol_ipv6_get_input_frames_block_invoke_2";
      __int16 v13 = 2082;
      char v14 = v8;
      if (v7) {
        uint64_t v9 = " ";
      }
      else {
        uint64_t v9 = "";
      }
      __int16 v15 = 2080;
      uint64_t v16 = v9;
      __int16 v17 = 2048;
      uint64_t v18 = v7;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s%p Dropping unused IPv6 extra fragment", (uint8_t *)&v11, 0x2Au);
    }
  }
  return 1;
}

BOOL nw_protocol_ipv6_process_input_frame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, _DWORD *a6, __n128 a7, __n128 a8)
{
  uint64_t v151 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
    uint64_t v95 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v144 = OS_LOG_TYPE_ERROR;
    char v143 = 0;
    if (!__nwlog_fault(v95, &v144, &v143)) {
      goto LABEL_232;
    }
    if (v144 == OS_LOG_TYPE_FAULT)
    {
      v96 = __nwlog_obj();
      os_log_type_t v97 = v144;
      if (!os_log_type_enabled(v96, v144)) {
        goto LABEL_232;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      uint32_t v98 = "%{public}s called with null ipv6";
      goto LABEL_231;
    }
    if (!v143)
    {
      v96 = __nwlog_obj();
      os_log_type_t v97 = v144;
      if (!os_log_type_enabled(v96, v144)) {
        goto LABEL_232;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      uint32_t v98 = "%{public}s called with null ipv6, backtrace limit exceeded";
      goto LABEL_231;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v96 = __nwlog_obj();
    os_log_type_t v97 = v144;
    BOOL v113 = os_log_type_enabled(v96, v144);
    if (!backtrace_string)
    {
      if (!v113) {
        goto LABEL_232;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      uint32_t v98 = "%{public}s called with null ipv6, no backtrace";
      goto LABEL_231;
    }
    if (!v113) {
      goto LABEL_214;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    os_log_type_t v114 = "%{public}s called with null ipv6, dumping backtrace:%{public}s";
LABEL_213:
    _os_log_impl(&dword_1830D4000, v96, v97, v114, buf, 0x16u);
    goto LABEL_214;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
    uint64_t v95 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v144 = OS_LOG_TYPE_ERROR;
    char v143 = 0;
    if (!__nwlog_fault(v95, &v144, &v143)) {
      goto LABEL_232;
    }
    if (v144 == OS_LOG_TYPE_FAULT)
    {
      v96 = __nwlog_obj();
      os_log_type_t v97 = v144;
      if (!os_log_type_enabled(v96, v144)) {
        goto LABEL_232;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      uint32_t v98 = "%{public}s called with null frame";
      goto LABEL_231;
    }
    if (!v143)
    {
      v96 = __nwlog_obj();
      os_log_type_t v97 = v144;
      if (!os_log_type_enabled(v96, v144)) {
        goto LABEL_232;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      uint32_t v98 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_231;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v96 = __nwlog_obj();
    os_log_type_t v97 = v144;
    BOOL v115 = os_log_type_enabled(v96, v144);
    if (!backtrace_string)
    {
      if (!v115) {
        goto LABEL_232;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      uint32_t v98 = "%{public}s called with null frame, no backtrace";
      goto LABEL_231;
    }
    if (!v115) {
      goto LABEL_214;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    os_log_type_t v114 = "%{public}s called with null frame, dumping backtrace:%{public}s";
    goto LABEL_213;
  }
  if (!a5)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
    uint64_t v95 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v144 = OS_LOG_TYPE_ERROR;
    char v143 = 0;
    if (!__nwlog_fault(v95, &v144, &v143)) {
      goto LABEL_232;
    }
    if (v144 == OS_LOG_TYPE_FAULT)
    {
      v96 = __nwlog_obj();
      os_log_type_t v97 = v144;
      if (!os_log_type_enabled(v96, v144)) {
        goto LABEL_232;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      uint32_t v98 = "%{public}s called with null count";
      goto LABEL_231;
    }
    if (!v143)
    {
      v96 = __nwlog_obj();
      os_log_type_t v97 = v144;
      if (!os_log_type_enabled(v96, v144)) {
        goto LABEL_232;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      uint32_t v98 = "%{public}s called with null count, backtrace limit exceeded";
      goto LABEL_231;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v96 = __nwlog_obj();
    os_log_type_t v97 = v144;
    BOOL v116 = os_log_type_enabled(v96, v144);
    if (!backtrace_string)
    {
      if (!v116) {
        goto LABEL_232;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      uint32_t v98 = "%{public}s called with null count, no backtrace";
      goto LABEL_231;
    }
    if (!v116) {
      goto LABEL_214;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = backtrace_string;
    os_log_type_t v114 = "%{public}s called with null count, dumping backtrace:%{public}s";
    goto LABEL_213;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
    uint64_t v95 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v144 = OS_LOG_TYPE_ERROR;
    char v143 = 0;
    if (!__nwlog_fault(v95, &v144, &v143)) {
      goto LABEL_232;
    }
    if (v144 == OS_LOG_TYPE_FAULT)
    {
      v96 = __nwlog_obj();
      os_log_type_t v97 = v144;
      if (!os_log_type_enabled(v96, v144)) {
        goto LABEL_232;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      uint32_t v98 = "%{public}s called with null reassembly_count";
      goto LABEL_231;
    }
    if (!v143)
    {
      v96 = __nwlog_obj();
      os_log_type_t v97 = v144;
      if (!os_log_type_enabled(v96, v144)) {
        goto LABEL_232;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      uint32_t v98 = "%{public}s called with null reassembly_count, backtrace limit exceeded";
      goto LABEL_231;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v96 = __nwlog_obj();
    os_log_type_t v97 = v144;
    BOOL v117 = os_log_type_enabled(v96, v144);
    if (backtrace_string)
    {
      if (v117)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        os_log_type_t v114 = "%{public}s called with null reassembly_count, dumping backtrace:%{public}s";
        goto LABEL_213;
      }
LABEL_214:
      free(backtrace_string);
      goto LABEL_232;
    }
    if (!v117) {
      goto LABEL_232;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
    uint32_t v98 = "%{public}s called with null reassembly_count, no backtrace";
LABEL_231:
    _os_log_impl(&dword_1830D4000, v96, v97, v98, buf, 0xCu);
LABEL_232:
    if (v95) {
      free(v95);
    }
    return 0;
  }
  if (!*(void *)(a2 + 112)
    || (*(_WORD *)(a2 + 204) & 0x100) != 0
    && g_channel_check_validity
    && !g_channel_check_validity(a2, *(void *)(a2 + 88)))
  {
    unsigned int v16 = 0;
    __int16 v17 = 0;
  }
  else
  {
    int v15 = *(_DWORD *)(a2 + 52);
    uint64_t v14 = *(unsigned int *)(a2 + 56);
    if (v15) {
      unsigned int v16 = v15 - (v14 + *(_DWORD *)(a2 + 60));
    }
    else {
      unsigned int v16 = 0;
    }
    __int16 v17 = (int *)(*(void *)(a2 + 112) + v14);
  }
  if ((*(_WORD *)(a2 + 204) & 0x80) != 0) {
    unsigned int v16 = *(unsigned __int16 *)(a2 + 196);
  }
  if (v17)
  {
    uint64_t v18 = *(void **)(a1 + 48);
    if (v18) {
      ++*v18;
    }
    if (v16 <= 0x27)
    {
      if ((*(unsigned char *)(a1 + 158) & 1) == 0)
      {
        BOOL v100 = __nwlog_obj();
        if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136447234;
          *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = a1 + 159;
          *(_WORD *)&buf[22] = 2080;
          v146 = " ";
          __int16 v147 = 2048;
          uint64_t v148 = a1;
          __int16 v149 = 1024;
          LODWORD(v150) = v16;
          _os_log_impl(&dword_1830D4000, v100, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s%p Received IPv6 packet with incorrect length %u", buf, 0x30u);
        }
      }
      uint64_t v101 = *(void *)(a1 + 48);
      if (v101)
      {
        BOOL result = 0;
        ++*(void *)(v101 + 8);
        return result;
      }
      return 0;
    }
    if ((*(unsigned char *)v17 & 0xF0) != 0x60)
    {
      if ((*(unsigned char *)(a1 + 158) & 1) == 0)
      {
        uint64_t v102 = __nwlog_obj();
        if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446978;
          *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = a1 + 159;
          *(_WORD *)&buf[22] = 2080;
          v146 = " ";
          __int16 v147 = 2048;
          uint64_t v148 = a1;
          _os_log_impl(&dword_1830D4000, v102, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s%p Not an IPv6 packet", buf, 0x2Au);
        }
      }
      uint64_t v103 = *(void *)(a1 + 48);
      if (v103)
      {
        BOOL result = 0;
        ++*(void *)(v103 + 48);
        return result;
      }
      return 0;
    }
    if (*((void *)v17 + 1) != *(void *)(a1 + 72) || *((void *)v17 + 2) != *(void *)(a1 + 80))
    {
      if (*(unsigned char *)(a1 + 158)) {
        return 0;
      }
      uint32_t v104 = __nwlog_obj();
      BOOL result = os_log_type_enabled(v104, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = a1 + 159;
      *(_WORD *)&buf[22] = 2080;
      v146 = " ";
      __int16 v147 = 2048;
      uint64_t v148 = a1;
      uint32_t v105 = "%{public}s %{public}s%s%p Received remote address that did not match";
LABEL_185:
      _os_log_impl(&dword_1830D4000, v104, OS_LOG_TYPE_ERROR, v105, buf, 0x2Au);
      return 0;
    }
    if (*((void *)v17 + 3) != *(void *)(a1 + 56) || *((void *)v17 + 4) != *(void *)(a1 + 64))
    {
      if (*(unsigned char *)(a1 + 158)) {
        return 0;
      }
      uint32_t v104 = __nwlog_obj();
      BOOL result = os_log_type_enabled(v104, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = a1 + 159;
      *(_WORD *)&buf[22] = 2080;
      v146 = " ";
      __int16 v147 = 2048;
      uint64_t v148 = a1;
      uint32_t v105 = "%{public}s %{public}s%s%p Received local address that did not match";
      goto LABEL_185;
    }
    uint64_t v134 = a4;
    v135 = a6;
    uint64_t v21 = bswap32(*((unsigned __int16 *)v17 + 2)) >> 16;
    unint64_t v22 = v21 + 40;
    if (v21 + 40 > (unint64_t)v16)
    {
      if ((*(unsigned char *)(a1 + 158) & 1) == 0)
      {
        BOOL v106 = __nwlog_obj();
        if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = a1 + 159;
          *(_WORD *)&buf[22] = 2080;
          v146 = " ";
          __int16 v147 = 2048;
          uint64_t v148 = a1;
          __int16 v149 = 1024;
          LODWORD(v150) = v21;
          WORD2(v150) = 1024;
          *(_DWORD *)((char *)&v150 + 6) = v16;
          _os_log_impl(&dword_1830D4000, v106, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s%p Received IPv6 packet with incorrect length, expected %u received %u", buf, 0x36u);
        }
      }
      uint64_t v107 = *(void *)(a1 + 48);
      if (v107)
      {
        BOOL result = 0;
        ++*(void *)(v107 + 16);
        return result;
      }
      return 0;
    }
    if (v21 + 40 != v16 && (*(unsigned char *)(a1 + 158) & 1) == 0)
    {
      os_log_type_t v108 = __nwlog_obj();
      if (os_log_type_enabled(v108, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 159;
        *(_WORD *)&buf[22] = 2080;
        v146 = " ";
        __int16 v147 = 2048;
        uint64_t v148 = a1;
        __int16 v149 = 1024;
        LODWORD(v150) = v21;
        WORD2(v150) = 1024;
        *(_DWORD *)((char *)&v150 + 6) = (unsigned __int16)(v16 - 40);
        _os_log_impl(&dword_1830D4000, v108, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s%p Received length mismatch with IPv6 %u != %u", buf, 0x36u);
      }
    }
    unsigned int v23 = *v17;
    *(unsigned char *)(a2 + 186) = *(unsigned char *)(a2 + 186) & 0xFC | (*v17 >> 12) & 3;
    *(unsigned char *)(a2 + 184) = (bswap32(*v17) >> 22) & 0x3F;
    int v24 = (v23 >> 12) & 3;
    switch(v24)
    {
      case 3:
        uint64_t v25 = (void *)(a1 + 32);
        break;
      case 2:
        uint64_t v25 = (void *)(a1 + 24);
        break;
      case 1:
        uint64_t v25 = (void *)(a1 + 16);
        break;
      default:
        goto LABEL_40;
    }
    ++*v25;
LABEL_40:
    char v26 = *(unsigned char *)(a1 + 158);
    if ((v26 & 4) != 0)
    {
      uint64_t v109 = mach_continuous_time();
      int v110 = *(_WORD *)(a2 + 204) & 0xFFEF | (*(unsigned __int8 *)(a2 + 206) << 16);
      *(_WORD *)(a2 + 204) &= ~0x10u;
      *(unsigned char *)(a2 + 206) = BYTE2(v110);
      *(void *)(a2 + 152) = v109;
      char v26 = *(unsigned char *)(a1 + 158);
    }
    uint64_t v131 = a3;
    os_log_type_t v132 = a5;
    unsigned int v133 = v16;
    if ((v26 & 0x10) != 0) {
      *(unsigned char *)(a2 + 185) = *((unsigned char *)v17 + 7);
    }
    if ((*(_WORD *)(a2 + 204) & 8) != 0) {
      goto LABEL_65;
    }
    uint64_t v27 = a2 + 120;
    os_log_type_t v28 = *(void **)(a2 + 168);
    if (v28)
    {
      os_release(v28);
      *(void *)(a2 + 168) = 0;
    }
    uint64_t v29 = *(void *)(a2 + 64);
    *(unsigned char *)(a2 + 186) |= 0x40u;
    if (v29)
    {
      if (v29 != v27)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = "__nw_frame_set_metadata";
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v29;
        *(_WORD *)&buf[22] = 2048;
        v146 = (const char *)(a2 + 120);
        os_log_type_t v30 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t v144 = OS_LOG_TYPE_ERROR;
        char v143 = 0;
        if (!__nwlog_fault(v30, &v144, &v143)) {
          goto LABEL_63;
        }
        if (v144 == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v31 = gLogObj;
          os_log_type_t v32 = v144;
          if (!os_log_type_enabled((os_log_t)gLogObj, v144)) {
            goto LABEL_63;
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_frame_set_metadata";
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v29;
          *(_WORD *)&buf[22] = 2048;
          v146 = (const char *)(a2 + 120);
          BOOL v33 = "%{public}s Existing metadata %p doesn't match expected %p";
        }
        else
        {
          if (v143)
          {
            BOOL v34 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            char v35 = gLogObj;
            os_log_type_t v36 = v144;
            BOOL v37 = os_log_type_enabled((os_log_t)gLogObj, v144);
            if (v34)
            {
              if (v37)
              {
                *(_DWORD *)buf = 136446978;
                *(void *)&uint8_t buf[4] = "__nw_frame_set_metadata";
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&buf[14] = v29;
                *(_WORD *)&buf[22] = 2048;
                v146 = (const char *)(a2 + 120);
                __int16 v147 = 2082;
                uint64_t v148 = (uint64_t)v34;
                _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s Existing metadata %p doesn't match expected %p, dumping backtrace:%{public}s", buf, 0x2Au);
              }
              free(v34);
              goto LABEL_63;
            }
            if (!v37)
            {
LABEL_63:
              if (v30) {
                free(v30);
              }
              goto LABEL_65;
            }
            *(_DWORD *)buf = 136446722;
            *(void *)&uint8_t buf[4] = "__nw_frame_set_metadata";
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v29;
            *(_WORD *)&buf[22] = 2048;
            v146 = (const char *)(a2 + 120);
            BOOL v33 = "%{public}s Existing metadata %p doesn't match expected %p, no backtrace";
            uint64_t v38 = v35;
            os_log_type_t v39 = v36;
LABEL_62:
            _os_log_impl(&dword_1830D4000, v38, v39, v33, buf, 0x20u);
            goto LABEL_63;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v31 = gLogObj;
          os_log_type_t v32 = v144;
          if (!os_log_type_enabled((os_log_t)gLogObj, v144)) {
            goto LABEL_63;
          }
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = "__nw_frame_set_metadata";
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&buf[14] = v29;
          *(_WORD *)&buf[22] = 2048;
          v146 = (const char *)(a2 + 120);
          BOOL v33 = "%{public}s Existing metadata %p doesn't match expected %p, backtrace limit exceeded";
        }
        uint64_t v38 = v31;
        os_log_type_t v39 = v32;
        goto LABEL_62;
      }
    }
    else
    {
      *(void *)(a2 + 64) = v27;
      *(void *)(a2 + 72) = v27;
      *(void *)(a2 + 120) = 0;
      *(void *)(a2 + 128) = a2 + 64;
    }
LABEL_65:
    int v40 = *((unsigned __int8 *)v17 + 6);
    if (v40 == *(unsigned __int8 *)(a1 + 156))
    {
      LOWORD(v41) = 0;
      int v42 = 0;
      LOBYTE(v43) = 0;
      unsigned int v44 = 40;
      goto LABEL_112;
    }
    int v43 = 0;
    int v42 = 0;
    unsigned int v41 = 0;
    unsigned int v44 = 40;
    a7.n128_u64[0] = 136447490;
    char v45 = "%{public}s %{public}s%s%p Received IPv6 extension type %u length %u";
    a8.n128_u64[0] = 136447746;
    while (1)
    {
      if ((*(_WORD *)(a2 + 204) & 0x80) != 0)
      {
        unsigned __int32 v124 = a7.n128_u32[0];
        if (*(unsigned char *)(a1 + 158)) {
          goto LABEL_112;
        }
        int v130 = v42;
        char v55 = v43;
        __int16 v56 = v41;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 159;
        *(_WORD *)&buf[22] = 2080;
        v146 = " ";
        __int16 v147 = 2048;
        uint64_t v148 = a1;
        __int16 v149 = 1024;
        LODWORD(v150) = v133;
        uint64_t v57 = (const char *)_os_log_send_and_compose_impl();
        os_log_type_t v144 = OS_LOG_TYPE_ERROR;
        os_log_type_t v58 = (char *)v57;
        char v143 = 0;
        if (__nwlog_fault(v57, &v144, &v143))
        {
          if (v144 != OS_LOG_TYPE_FAULT)
          {
            if (v143)
            {
              __int16 v62 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              os_log_type_t v63 = v144;
              __int16 v121 = gLogObj;
              BOOL v64 = os_log_type_enabled((os_log_t)gLogObj, v144);
              if (v62)
              {
                if (v64)
                {
                  *(_DWORD *)buf = v124;
                  *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
                  *(_WORD *)&unsigned char buf[12] = 2082;
                  *(void *)&buf[14] = a1 + 159;
                  *(_WORD *)&buf[22] = 2080;
                  v146 = " ";
                  __int16 v147 = 2048;
                  uint64_t v148 = a1;
                  __int16 v149 = 1024;
                  LODWORD(v150) = v133;
                  WORD2(v150) = 2082;
                  *(void *)((char *)&v150 + 6) = v62;
                  _os_log_impl(&dword_1830D4000, v121, v63, "%{public}s %{public}s%s%p Received IPv6 extension-headers on a super-packet of length %u, dumping backtrace:%{public}s", buf, 0x3Au);
                }
                free(v62);
                goto LABEL_109;
              }
              if (!v64) {
                goto LABEL_109;
              }
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = a1 + 159;
              *(_WORD *)&buf[22] = 2080;
              v146 = " ";
              __int16 v147 = 2048;
              uint64_t v148 = a1;
              __int16 v149 = 1024;
              LODWORD(v150) = v133;
              int v61 = "%{public}s %{public}s%s%p Received IPv6 extension-headers on a super-packet of length %u, no backtrace";
              uint32_t v72 = v121;
              os_log_type_t v73 = v63;
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v59 = gLogObj;
              os_log_type_t v60 = v144;
              if (!os_log_type_enabled((os_log_t)gLogObj, v144)) {
                goto LABEL_109;
              }
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = a1 + 159;
              *(_WORD *)&buf[22] = 2080;
              v146 = " ";
              __int16 v147 = 2048;
              uint64_t v148 = a1;
              __int16 v149 = 1024;
              LODWORD(v150) = v133;
              int v61 = "%{public}s %{public}s%s%p Received IPv6 extension-headers on a super-packet of length %u, backtrace limit exceeded";
LABEL_107:
              uint32_t v72 = v59;
              os_log_type_t v73 = v60;
            }
            _os_log_impl(&dword_1830D4000, v72, v73, v61, buf, 0x30u);
            goto LABEL_109;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v59 = gLogObj;
          os_log_type_t v60 = v144;
          if (os_log_type_enabled((os_log_t)gLogObj, v144))
          {
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = a1 + 159;
            *(_WORD *)&buf[22] = 2080;
            v146 = " ";
            __int16 v147 = 2048;
            uint64_t v148 = a1;
            __int16 v149 = 1024;
            LODWORD(v150) = v133;
            int v61 = "%{public}s %{public}s%s%p Received IPv6 extension-headers on a super-packet of length %u";
            goto LABEL_107;
          }
        }
LABEL_109:
        if (v58) {
          free(v58);
        }
        LOWORD(v41) = v56;
        LOBYTE(v43) = v55;
        int v42 = v130;
LABEL_112:
        if (v40 == *(unsigned __int8 *)(a1 + 156))
        {
          char v74 = v43;
          __int16 v75 = v41;
          int v76 = v42;
          *v135 += nw_protocol_ipv6_process_reassembly(a1, v42, v134, 0, 0);
          if (v76)
          {
            uint64_t v78 = *(void *)(a2 + 32);
            v79 = *(void **)(a2 + 40);
            BOOL v80 = (void *)(a2 + 32);
            if (v78)
            {
              *(void *)(v78 + 40) = v79;
              v79 = *(void **)(a2 + 40);
            }
            else
            {
              *(void *)(v131 + 8) = v79;
            }
            void *v79 = v78;
            void *v80 = 0;
            *(void *)(a2 + 40) = 0;
            if (v75)
            {
              if (v74)
              {
                *(void *)buf = 0;
                *(void *)&buf[8] = buf;
                *(void *)&buf[16] = 0x2000000000;
                LOBYTE(v146) = 0;
                v136[0] = MEMORY[0x1E4F143A8];
                v136[1] = 0x40000000;
                v137 = ___ZL36nw_protocol_ipv6_process_input_frameP16nw_protocol_ipv6P8nw_frameP16nw_frame_array_sS4_PjS5__block_invoke;
                v138 = &unk_1E524B2F8;
                __int16 v142 = v75;
                uint64_t v140 = a1;
                uint64_t v141 = a2;
                v139 = buf;
                uint64_t v82 = *(void *)(a1 + 88);
                do
                {
                  if (!v82) {
                    break;
                  }
                  uint64_t v83 = *(void *)(v82 + 32);
                  char v84 = ((uint64_t (*)(void *))v137)(v136);
                  uint64_t v82 = v83;
                }
                while ((v84 & 1) != 0);
                if (!*(unsigned char *)(*(void *)&buf[8] + 24))
                {
                  *(void *)(a2 + 32) = 0;
                  os_log_type_t v85 = *(uint64_t **)(a1 + 96);
                  *(void *)(a2 + 40) = v85;
                  uint64_t *v85 = a2;
                  *(void *)(a1 + 96) = v80;
                }
                _Block_object_dispose(buf, 8);
              }
              else
              {
                uint64_t v90 = *(uint64_t **)(a1 + 96);
                *(void *)(a2 + 40) = v90;
                *uint64_t v90 = a2;
                *(void *)(a1 + 96) = v80;
              }
            }
            else
            {
              uint64_t v87 = *(void *)(a1 + 88);
              uint64_t v86 = (uint64_t *)(a1 + 88);
              *(void *)(a2 + 32) = v87;
              uint64_t v88 = (void *)(v87 + 40);
              if (v87) {
                v89 = v88;
              }
              else {
                v89 = v86 + 1;
              }
              void *v89 = v80;
              *uint64_t v86 = a2;
              *(void *)(a2 + 40) = v86;
            }
            --*v132;
          }
          else
          {
            uint64_t v81 = *(void *)(a1 + 48);
            if (v81) {
              ++*(void *)(v81 + 104);
            }
            nw_frame_claim(a2, v77, v44, v133 - v22);
            ++*(void *)(a1 + 8);
          }
          return 1;
        }
        uint64_t v111 = *(void *)(a1 + 48);
        if (v111)
        {
          BOOL result = 0;
          ++*(void *)(v111 + 160);
          return result;
        }
        return 0;
      }
      if (v40 > 43)
      {
        if (v40 != 60)
        {
          if (v40 != 44) {
            goto LABEL_100;
          }
          if ((unint64_t)v44 + 8 > v22)
          {
            int v65 = v42;
            char v66 = v43;
            __int16 v67 = v41;
            if ((*(unsigned char *)(a1 + 158) & 1) != 0
              || (uint64_t v94 = __nwlog_obj(), !os_log_type_enabled(v94, OS_LOG_TYPE_ERROR)))
            {
              int v40 = 44;
            }
            else
            {
              *(_DWORD *)buf = 136447234;
              *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = a1 + 159;
              *(_WORD *)&buf[22] = 2080;
              v146 = " ";
              __int16 v147 = 2048;
              uint64_t v148 = a1;
              __int16 v149 = 2048;
              *(void *)&long long v150 = v22;
              _os_log_impl(&dword_1830D4000, v94, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s%p IPv6 fragment header cannot fit in packet length %lu", buf, 0x34u);
              int v40 = 44;
            }
            goto LABEL_104;
          }
          __int16 v46 = (unsigned __int8 *)v17 + v44;
          int v40 = *v46;
          v44 += 8;
          int v42 = *((_DWORD *)v46 + 1);
          unsigned int v47 = *((unsigned __int16 *)v46 + 1);
          unsigned int v41 = bswap32(v47 & 0xFFFFF8FF) >> 16;
          int v43 = (v47 >> 8) & 1;
          if ((*(unsigned char *)(a1 + 158) & 1) == 0 && gLogDatapath)
          {
            __n128 v122 = a7;
            __n128 v126 = a8;
            int v48 = *((_DWORD *)v46 + 1);
            unsigned int v49 = v41;
            BOOL v128 = __nwlog_obj();
            if (os_log_type_enabled(v128, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = v126.n128_u32[0];
              *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = a1 + 159;
              *(_WORD *)&buf[22] = 2080;
              v146 = " ";
              __int16 v147 = 2048;
              uint64_t v148 = a1;
              __int16 v149 = 1024;
              LODWORD(v150) = v49;
              WORD2(v150) = 1024;
              *(_DWORD *)((char *)&v150 + 6) = (unsigned __int16)(v47 & 0x100) >> 8;
              WORD5(v150) = 1024;
              HIDWORD(v150) = v48;
              _os_log_impl(&dword_1830D4000, v128, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s%p Received IPv6 fragment offset %u more %u id %u", buf, 0x3Cu);
              a7 = v122;
              a8 = v126;
              int v42 = v48;
              unsigned int v41 = v49;
              int v43 = (v47 >> 8) & 1;
            }
            else
            {
              unsigned int v41 = v49;
              int v43 = (v47 >> 8) & 1;
              int v42 = v48;
              a7 = v122;
              a8 = v126;
            }
            char v45 = "%{public}s %{public}s%s%p Received IPv6 extension type %u length %u";
          }
          goto LABEL_69;
        }
      }
      else if (v40 && v40 != 43)
      {
LABEL_100:
        int v65 = v42;
        char v66 = v43;
        __int16 v67 = v41;
        if ((*(unsigned char *)(a1 + 158) & 1) == 0)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v68 = gLogObj;
          if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136447234;
            *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = a1 + 159;
            *(_WORD *)&buf[22] = 2080;
            v146 = " ";
            __int16 v147 = 2048;
            uint64_t v148 = a1;
            __int16 v149 = 1024;
            LODWORD(v150) = v40;
            BOOL v69 = "%{public}s %{public}s%s%p Don't know how to handle IPv6 next protocol %u";
            os_log_type_t v70 = v68;
            uint32_t v71 = 48;
            goto LABEL_103;
          }
        }
LABEL_104:
        LOWORD(v41) = v67;
        LOBYTE(v43) = v66;
        int v42 = v65;
        goto LABEL_112;
      }
      if ((unint64_t)v44 + 2 > v22)
      {
        int v65 = v42;
        char v66 = v43;
        __int16 v67 = v41;
        if (*(unsigned char *)(a1 + 158)) {
          goto LABEL_104;
        }
        __int16 v92 = __nwlog_obj();
        if (!os_log_type_enabled(v92, OS_LOG_TYPE_ERROR)) {
          goto LABEL_104;
        }
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 159;
        *(_WORD *)&buf[22] = 2080;
        v146 = " ";
        __int16 v147 = 2048;
        uint64_t v148 = a1;
        __int16 v149 = 2048;
        *(void *)&long long v150 = v22;
        BOOL v69 = "%{public}s %{public}s%s%p IPv6 extension header cannot fit in packet length %lu";
        os_log_type_t v70 = v92;
        uint32_t v71 = 52;
LABEL_103:
        _os_log_impl(&dword_1830D4000, v70, OS_LOG_TYPE_ERROR, v69, buf, v71);
        goto LABEL_104;
      }
      uint64_t v50 = (unsigned __int8 *)v17 + v44;
      int v51 = 8 * v50[1] + 8;
      unsigned int v52 = v51 + v44;
      if (v51 + v44 > v22)
      {
        unsigned __int32 v125 = a7.n128_u32[0];
        int v65 = v42;
        char v66 = v43;
        __int16 v67 = v41;
        if (*(unsigned char *)(a1 + 158)) {
          goto LABEL_104;
        }
        long long v93 = __nwlog_obj();
        if (!os_log_type_enabled(v93, OS_LOG_TYPE_ERROR)) {
          goto LABEL_104;
        }
        *(_DWORD *)buf = v125;
        *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = a1 + 159;
        *(_WORD *)&buf[22] = 2080;
        v146 = " ";
        __int16 v147 = 2048;
        uint64_t v148 = a1;
        __int16 v149 = 1024;
        LODWORD(v150) = v51;
        WORD2(v150) = 2048;
        *(void *)((char *)&v150 + 6) = v22;
        BOOL v69 = "%{public}s %{public}s%s%p IPv6 extension header length %u cannot fit in packet length %lu";
        os_log_type_t v70 = v93;
        uint32_t v71 = 58;
        goto LABEL_103;
      }
      if ((*(unsigned char *)(a1 + 158) & 1) == 0)
      {
        if (gLogDatapath)
        {
          unsigned int v119 = v41;
          int v120 = v43;
          int v129 = v42;
          __n128 v123 = a7;
          __n128 v127 = a8;
          __int16 v53 = v45;
          os_log_type_t log = __nwlog_obj();
          BOOL v54 = os_log_type_enabled(log, OS_LOG_TYPE_DEBUG);
          a7 = v123;
          a8 = v127;
          char v45 = v53;
          int v42 = v129;
          unsigned int v41 = v119;
          int v43 = v120;
          if (v54)
          {
            *(_DWORD *)buf = v123.n128_u32[0];
            *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = a1 + 159;
            *(_WORD *)&buf[22] = 2080;
            v146 = " ";
            __int16 v147 = 2048;
            uint64_t v148 = a1;
            __int16 v149 = 1024;
            LODWORD(v150) = v40;
            WORD2(v150) = 1024;
            *(_DWORD *)((char *)&v150 + 6) = v51;
            _os_log_impl(&dword_1830D4000, log, OS_LOG_TYPE_DEBUG, v53, buf, 0x36u);
            a7 = v123;
            a8 = v127;
            char v45 = v53;
            int v42 = v129;
            unsigned int v41 = v119;
            int v43 = v120;
          }
        }
      }
      int v40 = *v50;
      unsigned int v44 = v52;
LABEL_69:
      if (v40 == *(unsigned __int8 *)(a1 + 156)) {
        goto LABEL_112;
      }
    }
  }
  if ((*(unsigned char *)(a1 + 158) & 1) == 0)
  {
    v99 = __nwlog_obj();
    if (os_log_type_enabled(v99, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = "nw_protocol_ipv6_process_input_frame";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = a1 + 159;
      *(_WORD *)&buf[22] = 2080;
      v146 = " ";
      __int16 v147 = 2048;
      uint64_t v148 = a1;
      _os_log_impl(&dword_1830D4000, v99, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s%p Frame is no longer valid", buf, 0x2Au);
    }
  }
  BOOL result = 0;
  *(void *)(a1 + 48) = 0;
  return result;
}

uint64_t ___ZL36nw_protocol_ipv6_process_input_frameP16nw_protocol_ipv6P8nw_frameP16nw_frame_array_sS4_PjS5__block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v13 = 0;
  int v12 = 0;
  uint64_t v11 = 0;
  int fragment_values_for_frame = nw_protocol_ipv6_get_fragment_values_for_frame(*(void *)(a1 + 40), a2, 0, &v13, 0, &v11, &v12);
  uint64_t result = 0;
  if (fragment_values_for_frame)
  {
    uint64_t result = 1;
    if (v12 + v13 == *(unsigned __int16 *)(a1 + 56))
    {
      uint64_t v6 = *(void *)(a1 + 48);
      uint64_t v7 = (void *)(*(void *)(a1 + 40) + 96);
      uint64_t v9 = *(void *)(a2 + 32);
      uint64_t v8 = (void *)(a2 + 32);
      *(void *)(v6 + 32) = v9;
      int v10 = (void *)(v9 + 40);
      if (v9) {
        uint64_t v7 = v10;
      }
      *uint64_t v7 = v6 + 32;
      *uint64_t v8 = v6;
      *(void *)(v6 + 40) = v8;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      return 0;
    }
  }
  return result;
}

uint64_t nw_protocol_ipv6_get_fragment_values_for_frame(uint64_t a1, uint64_t a2, unsigned char *a3, _WORD *a4, _DWORD *a5, void *a6, _DWORD *a7)
{
  *(void *)&v56[7] = *MEMORY[0x1E4F143B8];
  unsigned int v46 = 0;
  uint64_t v12 = nw_frame_unclaimed_bytes(a2, &v46);
  if (!v12)
  {
    if (!a1 || (*(unsigned char *)(a1 + 158) & 1) == 0)
    {
      uint64_t v31 = __nwlog_obj();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        os_log_type_t v32 = (const char *)(a1 + 159);
        if (!a1) {
          os_log_type_t v32 = "";
        }
        *(_DWORD *)buf = 136446978;
        int v48 = "nw_protocol_ipv6_get_fragment_values_for_frame";
        __int16 v49 = 2082;
        uint64_t v50 = v32;
        BOOL v33 = " ";
        if (!a1) {
          BOOL v33 = "";
        }
        __int16 v51 = 2080;
        unsigned int v52 = v33;
        __int16 v53 = 2048;
        uint64_t v54 = a1;
        _os_log_impl(&dword_1830D4000, v31, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s%p Frame is no longer valid", buf, 0x2Au);
      }
    }
    char v18 = 0;
    *(void *)(a1 + 48) = 0;
    return v18 & 1;
  }
  unsigned int v13 = v46;
  if (v46 <= 0x27)
  {
    if (a1)
    {
      if (*(unsigned char *)(a1 + 158))
      {
LABEL_79:
        char v18 = 0;
        return v18 & 1;
      }
      BOOL v34 = " ";
    }
    else
    {
      BOOL v34 = "";
    }
    __nwlog_obj();
    if (a1) {
      char v35 = (const char *)(a1 + 159);
    }
    else {
      char v35 = "";
    }
    *(_DWORD *)buf = 136447234;
    int v48 = "nw_protocol_ipv6_get_fragment_values_for_frame";
    __int16 v49 = 2082;
    uint64_t v50 = v35;
    __int16 v51 = 2080;
    unsigned int v52 = v34;
    __int16 v53 = 2048;
    uint64_t v54 = a1;
    __int16 v55 = 1024;
    v56[0] = v46;
    os_log_type_t v36 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v36, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        BOOL v37 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (!os_log_type_enabled(v37, type)) {
          goto LABEL_77;
        }
        *(_DWORD *)buf = 136447234;
        int v48 = "nw_protocol_ipv6_get_fragment_values_for_frame";
        __int16 v49 = 2082;
        uint64_t v50 = v35;
        __int16 v51 = 2080;
        unsigned int v52 = v34;
        __int16 v53 = 2048;
        uint64_t v54 = a1;
        __int16 v55 = 1024;
        v56[0] = v46;
        os_log_type_t v39 = "%{public}s %{public}s%s%p IPv6 fragment header cannot fit in packet length %u";
        goto LABEL_76;
      }
      if (!v44)
      {
        BOOL v37 = __nwlog_obj();
        os_log_type_t v38 = type;
        if (!os_log_type_enabled(v37, type)) {
          goto LABEL_77;
        }
        *(_DWORD *)buf = 136447234;
        int v48 = "nw_protocol_ipv6_get_fragment_values_for_frame";
        __int16 v49 = 2082;
        uint64_t v50 = v35;
        __int16 v51 = 2080;
        unsigned int v52 = v34;
        __int16 v53 = 2048;
        uint64_t v54 = a1;
        __int16 v55 = 1024;
        v56[0] = v46;
        os_log_type_t v39 = "%{public}s %{public}s%s%p IPv6 fragment header cannot fit in packet length %u, backtrace limit exceeded";
        goto LABEL_76;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v37 = __nwlog_obj();
      os_log_type_t v38 = type;
      BOOL v41 = os_log_type_enabled(v37, type);
      if (backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136447490;
          int v48 = "nw_protocol_ipv6_get_fragment_values_for_frame";
          __int16 v49 = 2082;
          uint64_t v50 = v35;
          __int16 v51 = 2080;
          unsigned int v52 = v34;
          __int16 v53 = 2048;
          uint64_t v54 = a1;
          __int16 v55 = 1024;
          v56[0] = v46;
          LOWORD(v56[1]) = 2082;
          *(void *)((char *)&v56[1] + 2) = backtrace_string;
          _os_log_impl(&dword_1830D4000, v37, v38, "%{public}s %{public}s%s%p IPv6 fragment header cannot fit in packet length %u, dumping backtrace:%{public}s", buf, 0x3Au);
        }
        free(backtrace_string);
        goto LABEL_77;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136447234;
        int v48 = "nw_protocol_ipv6_get_fragment_values_for_frame";
        __int16 v49 = 2082;
        uint64_t v50 = v35;
        __int16 v51 = 2080;
        unsigned int v52 = v34;
        __int16 v53 = 2048;
        uint64_t v54 = a1;
        __int16 v55 = 1024;
        v56[0] = v46;
        os_log_type_t v39 = "%{public}s %{public}s%s%p IPv6 fragment header cannot fit in packet length %u, no backtrace";
LABEL_76:
        _os_log_impl(&dword_1830D4000, v37, v38, v39, buf, 0x30u);
      }
    }
LABEL_77:
    if (v36) {
      free(v36);
    }
    goto LABEL_79;
  }
  uint64_t v14 = v12;
  uint64_t v15 = bswap32(*(unsigned __int16 *)(v12 + 4)) >> 16;
  int v16 = *(unsigned __int8 *)(v12 + 6);
  int v17 = *(unsigned __int8 *)(a1 + 156);
  if (v16 != v17)
  {
    uint64_t v42 = a1;
    char v18 = 0;
    unint64_t v20 = v15 + 40;
    unsigned int v19 = 40;
    while (1)
    {
      if (v16 > 43)
      {
        if (v16 == 60) {
          goto LABEL_22;
        }
        if (v16 != 44) {
          goto LABEL_26;
        }
        if ((unint64_t)v19 + 8 > v20)
        {
          int v26 = v15;
          if ((*(unsigned char *)(v42 + 158) & 1) == 0)
          {
            os_log_type_t v30 = __nwlog_obj();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136447234;
              int v48 = "nw_protocol_ipv6_get_fragment_values_for_frame";
              __int16 v49 = 2082;
              uint64_t v50 = (const char *)(v42 + 159);
              __int16 v51 = 2080;
              unsigned int v52 = " ";
              __int16 v53 = 2048;
              uint64_t v54 = v42;
              __int16 v55 = 2048;
              *(void *)__int16 v56 = v20;
              a1 = v42;
              _os_log_impl(&dword_1830D4000, v30, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s%p IPv6 fragment header cannot fit in packet length %lu", buf, 0x34u);
              int v16 = 44;
              goto LABEL_46;
            }
          }
          int v16 = 44;
LABEL_45:
          a1 = v42;
          goto LABEL_46;
        }
        uint64_t v21 = (unsigned __int8 *)(v12 + v19);
        int v16 = *v21;
        if (a5) {
          *a5 = *((_DWORD *)v21 + 1);
        }
        if (a3) {
          *a3 = v21[3] & 1;
        }
        v19 += 8;
        if (a4) {
          *a4 = bswap32(*((_WORD *)v21 + 1) & 0xF8FF) >> 16;
        }
        char v18 = 1;
        if (v16 == v17)
        {
LABEL_25:
          int v16 = v17;
LABEL_26:
          a1 = v42;
          goto LABEL_27;
        }
      }
      else
      {
        if (v16 && v16 != 43) {
          goto LABEL_26;
        }
LABEL_22:
        if ((unint64_t)v19 + 2 > v20)
        {
          int v26 = v15;
          if ((*(unsigned char *)(v42 + 158) & 1) == 0)
          {
            uint64_t v27 = __nwlog_obj();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136447234;
              int v48 = "nw_protocol_ipv6_get_fragment_values_for_frame";
              __int16 v49 = 2082;
              uint64_t v50 = (const char *)(v42 + 159);
              __int16 v51 = 2080;
              unsigned int v52 = " ";
              __int16 v53 = 2048;
              uint64_t v54 = v42;
              __int16 v55 = 2048;
              *(void *)__int16 v56 = v20;
              a1 = v42;
              _os_log_impl(&dword_1830D4000, v27, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s%p IPv6 extension header cannot fit in packet length %lu", buf, 0x34u);
LABEL_46:
              int v24 = a7;
              LODWORD(v15) = v26;
              goto LABEL_28;
            }
          }
          goto LABEL_45;
        }
        unint64_t v22 = (unsigned __int8 *)(v12 + v19);
        int v23 = 8 * v22[1] + 8;
        if (v23 + v19 > v13)
        {
          int v28 = v15;
          if ((*(unsigned char *)(v42 + 158) & 1) != 0
            || (uint64_t v29 = __nwlog_obj(), !os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)))
          {
            a1 = v42;
          }
          else
          {
            *(_DWORD *)buf = 136447490;
            int v48 = "nw_protocol_ipv6_get_fragment_values_for_frame";
            __int16 v49 = 2082;
            uint64_t v50 = (const char *)(v42 + 159);
            __int16 v51 = 2080;
            unsigned int v52 = " ";
            __int16 v53 = 2048;
            uint64_t v54 = v42;
            __int16 v55 = 1024;
            v56[0] = v23;
            LOWORD(v56[1]) = 2048;
            *(void *)((char *)&v56[1] + 2) = v20;
            a1 = v42;
            _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s%p IPv6 extension header length %u cannot fit in packet length %lu", buf, 0x3Au);
          }
          int v24 = a7;
          LODWORD(v15) = v28;
          goto LABEL_28;
        }
        int v16 = *v22;
        v19 += v23;
        if (v16 == v17) {
          goto LABEL_25;
        }
      }
    }
  }
  char v18 = 0;
  unsigned int v19 = 40;
LABEL_27:
  int v24 = a7;
LABEL_28:
  if (a6 && v24 && v16 == *(unsigned __int8 *)(a1 + 156))
  {
    *a6 = v14 + v19;
    _DWORD *v24 = v15 - v19 + 40;
  }
  return v18 & 1;
}

uint64_t ___ZL43nw_protocol_ipv6_append_reassembled_packetsP16nw_protocol_ipv6P16nw_frame_array_sPb_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  char v24 = 0;
  unsigned __int16 v23 = 0;
  int v22 = 0;
  uint64_t v21 = 0;
  int v20 = 0;
  int fragment_values_for_frame = nw_protocol_ipv6_get_fragment_values_for_frame(a1[6], a2, &v24, &v23, &v22, &v21, &v20);
  uint64_t result = 0;
  if (fragment_values_for_frame)
  {
    uint64_t v5 = a1[6];
    if (!v5 || (*(unsigned char *)(v5 + 158) & 1) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v15 = __nwlog_obj();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v16 = a1[6];
          int v17 = "";
          char v18 = (const char *)(v16 + 159);
          if (v16) {
            int v17 = " ";
          }
          else {
            char v18 = "";
          }
          int v19 = *(unsigned __int16 *)(*(void *)(a1[4] + 8) + 24);
          *(_DWORD *)buf = 136448002;
          int v26 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
          __int16 v27 = 2082;
          int v28 = v18;
          __int16 v29 = 2080;
          os_log_type_t v30 = v17;
          __int16 v31 = 2048;
          uint64_t v32 = v16;
          __int16 v33 = 1024;
          int v34 = v22;
          __int16 v35 = 1024;
          int v36 = v20;
          __int16 v37 = 1024;
          int v38 = v23;
          __int16 v39 = 1024;
          int v40 = v19;
          _os_log_impl(&dword_1830D4000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s%p Examining fragment for IPv6 Fragment ID %u, length %u offset %u aggregate length %u", buf, 0x42u);
        }
      }
    }
    uint64_t v6 = *(void *)(a1[4] + 8);
    if (v23 == *(unsigned __int16 *)(v6 + 24))
    {
      BOOL v7 = __CFADD__(v23, v20);
      unsigned int v8 = v23 + v20;
      *(_WORD *)(v6 + 24) = v8;
      if (!v7 && v8 < 0x10000)
      {
        uint64_t result = 1;
        if (v24) {
          return result;
        }
        goto LABEL_18;
      }
      uint64_t v9 = a1[6];
      if (!v9 || (*(unsigned char *)(v9 + 158) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v10 = gLogObj;
        LODWORD(result) = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
        if (!result)
        {
LABEL_18:
          *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = result;
          return 0;
        }
        uint64_t v11 = a1[6];
        uint64_t v12 = "";
        unsigned int v13 = (const char *)(v11 + 159);
        if (v11) {
          uint64_t v12 = " ";
        }
        else {
          unsigned int v13 = "";
        }
        int v14 = *(unsigned __int16 *)(*(void *)(a1[4] + 8) + 24);
        *(_DWORD *)buf = 136447490;
        int v26 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
        __int16 v27 = 2082;
        int v28 = v13;
        __int16 v29 = 2080;
        os_log_type_t v30 = v12;
        __int16 v31 = 2048;
        uint64_t v32 = v11;
        __int16 v33 = 1024;
        int v34 = v20;
        __int16 v35 = 1024;
        int v36 = v14;
        _os_log_impl(&dword_1830D4000, v10, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s%p Cannot add %u to existing offset %u", buf, 0x36u);
      }
    }
    LOBYTE(result) = 0;
    goto LABEL_18;
  }
  return result;
}

uint64_t ___ZL43nw_protocol_ipv6_append_reassembled_packetsP16nw_protocol_ipv6P16nw_frame_array_sPb_block_invoke_45(uint64_t a1, uint64_t a2)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  __int16 v67 = 0;
  *(void *)&__n[1] = 0;
  __n[0] = 0;
  int fragment_values_for_frame = nw_protocol_ipv6_get_fragment_values_for_frame(*(void *)(a1 + 40), a2, 0, &v67, 0, &__n[1], __n);
  uint64_t result = 0;
  if (fragment_values_for_frame)
  {
    uint64_t v5 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if ((__n[0] + v5) <= *(_DWORD *)(a1 + 56))
    {
      memcpy((void *)(*(void *)(a1 + 48) + v5), *(const void **)&__n[1], __n[0]);
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
      int v7 = *(_DWORD *)(v6 + 24);
      BOOL v8 = __CFADD__(v7, __n[0]);
      *(_DWORD *)(v6 + 24) = v7 + __n[0];
      if (!v8) {
        return 1;
      }
      uint64_t v9 = *(void *)(a1 + 40);
      if (v9 && (*(unsigned char *)(v9 + 158) & 1) != 0) {
        return 0;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = (const char *)(v10 + 159);
      if (v10)
      {
        uint64_t v12 = " ";
      }
      else
      {
        uint64_t v11 = "";
        uint64_t v12 = "";
      }
      int v13 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      *(_DWORD *)buf = 136447490;
      BOOL v69 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
      __int16 v70 = 2082;
      uint32_t v71 = v11;
      __int16 v72 = 2080;
      os_log_type_t v73 = v12;
      __int16 v74 = 2048;
      uint64_t v75 = v10;
      __int16 v76 = 1024;
      int v77 = __n[0];
      __int16 v78 = 1024;
      int v79 = v13;
      int v14 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v64 = 0;
      if (__nwlog_fault(v14, &type, &v64))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v15 = gLogObj;
          os_log_type_t v16 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_36;
          }
          uint64_t v17 = *(void *)(a1 + 40);
          char v18 = (const char *)(v17 + 159);
          if (v17)
          {
            int v19 = " ";
          }
          else
          {
            char v18 = "";
            int v19 = "";
          }
          int v20 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
          *(_DWORD *)buf = 136447490;
          BOOL v69 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
          __int16 v70 = 2082;
          uint32_t v71 = v18;
          __int16 v72 = 2080;
          os_log_type_t v73 = v19;
          __int16 v74 = 2048;
          uint64_t v75 = v17;
          __int16 v76 = 1024;
          int v77 = __n[0];
          __int16 v78 = 1024;
          int v79 = v20;
          uint64_t v21 = "%{public}s %{public}s%s%p Cannot add %u to new frame offset %u";
          goto LABEL_35;
        }
        if (!v64)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v15 = gLogObj;
          os_log_type_t v16 = type;
          if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
            goto LABEL_36;
          }
          uint64_t v28 = *(void *)(a1 + 40);
          __int16 v29 = (const char *)(v28 + 159);
          if (v28)
          {
            os_log_type_t v30 = " ";
          }
          else
          {
            __int16 v29 = "";
            os_log_type_t v30 = "";
          }
          int v31 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
          *(_DWORD *)buf = 136447490;
          BOOL v69 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
          __int16 v70 = 2082;
          uint32_t v71 = v29;
          __int16 v72 = 2080;
          os_log_type_t v73 = v30;
          __int16 v74 = 2048;
          uint64_t v75 = v28;
          __int16 v76 = 1024;
          int v77 = __n[0];
          __int16 v78 = 1024;
          int v79 = v31;
          uint64_t v21 = "%{public}s %{public}s%s%p Cannot add %u to new frame offset %u, backtrace limit exceeded";
          goto LABEL_35;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v15 = gLogObj;
        os_log_type_t v16 = type;
        BOOL v23 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (!backtrace_string)
        {
          if (!v23) {
            goto LABEL_36;
          }
          uint64_t v32 = *(void *)(a1 + 40);
          __int16 v33 = (const char *)(v32 + 159);
          if (v32)
          {
            int v34 = " ";
          }
          else
          {
            __int16 v33 = "";
            int v34 = "";
          }
          int v35 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
          *(_DWORD *)buf = 136447490;
          BOOL v69 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
          __int16 v70 = 2082;
          uint32_t v71 = v33;
          __int16 v72 = 2080;
          os_log_type_t v73 = v34;
          __int16 v74 = 2048;
          uint64_t v75 = v32;
          __int16 v76 = 1024;
          int v77 = __n[0];
          __int16 v78 = 1024;
          int v79 = v35;
          uint64_t v21 = "%{public}s %{public}s%s%p Cannot add %u to new frame offset %u, no backtrace";
          goto LABEL_35;
        }
        if (v23)
        {
          uint64_t v24 = *(void *)(a1 + 40);
          uint64_t v25 = (const char *)(v24 + 159);
          if (v24)
          {
            int v26 = " ";
          }
          else
          {
            uint64_t v25 = "";
            int v26 = "";
          }
          int v27 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
          *(_DWORD *)buf = 136447746;
          BOOL v69 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
          __int16 v70 = 2082;
          uint32_t v71 = v25;
          __int16 v72 = 2080;
          os_log_type_t v73 = v26;
          __int16 v74 = 2048;
          uint64_t v75 = v24;
          __int16 v76 = 1024;
          int v77 = __n[0];
          __int16 v78 = 1024;
          int v79 = v27;
          __int16 v80 = 2082;
          uint64_t v81 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s %{public}s%s%p Cannot add %u to new frame offset %u, dumping backtrace:%{public}s", buf, 0x40u);
        }
        free(backtrace_string);
      }
LABEL_36:
      if (!v14) {
        return 0;
      }
LABEL_37:
      free(v14);
      return 0;
    }
    uint64_t v36 = *(void *)(a1 + 40);
    if (v36 && (*(unsigned char *)(v36 + 158) & 1) != 0) {
      return 0;
    }
    __nwlog_obj();
    uint64_t v37 = *(void *)(a1 + 40);
    int v38 = (const char *)(v37 + 159);
    if (!v37) {
      int v38 = "";
    }
    int v39 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v37) {
      int v40 = " ";
    }
    else {
      int v40 = "";
    }
    int v41 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)buf = 136447490;
    BOOL v69 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
    __int16 v70 = 2082;
    uint32_t v71 = v38;
    __int16 v72 = 2080;
    os_log_type_t v73 = v40;
    __int16 v74 = 2048;
    uint64_t v75 = v37;
    __int16 v76 = 1024;
    int v77 = __n[0] + v39;
    __int16 v78 = 1024;
    int v79 = v41;
    int v14 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v64 = 0;
    if (!__nwlog_fault(v14, &type, &v64)) {
      goto LABEL_36;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_36;
      }
      uint64_t v42 = *(void *)(a1 + 40);
      int v43 = (const char *)(v42 + 159);
      if (v42)
      {
        char v44 = " ";
      }
      else
      {
        int v43 = "";
        char v44 = "";
      }
      int v45 = __n[0] + *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      int v46 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)buf = 136447490;
      BOOL v69 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
      __int16 v70 = 2082;
      uint32_t v71 = v43;
      __int16 v72 = 2080;
      os_log_type_t v73 = v44;
      __int16 v74 = 2048;
      uint64_t v75 = v42;
      __int16 v76 = 1024;
      int v77 = v45;
      __int16 v78 = 1024;
      int v79 = v46;
      uint64_t v21 = "%{public}s %{public}s%s%p Invalid IP reassembly frame (total length %u > %u)";
    }
    else if (v64)
    {
      unsigned int v47 = (char *)__nw_create_backtrace_string();
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      BOOL v48 = os_log_type_enabled(v15, type);
      if (v47)
      {
        if (v48)
        {
          uint64_t v49 = *(void *)(a1 + 40);
          uint64_t v50 = (const char *)(v49 + 159);
          if (v49)
          {
            __int16 v51 = " ";
          }
          else
          {
            uint64_t v50 = "";
            __int16 v51 = "";
          }
          int v52 = __n[0] + *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
          int v53 = *(_DWORD *)(a1 + 56);
          *(_DWORD *)buf = 136447746;
          BOOL v69 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
          __int16 v70 = 2082;
          uint32_t v71 = v50;
          __int16 v72 = 2080;
          os_log_type_t v73 = v51;
          __int16 v74 = 2048;
          uint64_t v75 = v49;
          __int16 v76 = 1024;
          int v77 = v52;
          __int16 v78 = 1024;
          int v79 = v53;
          __int16 v80 = 2082;
          uint64_t v81 = v47;
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s %{public}s%s%p Invalid IP reassembly frame (total length %u > %u), dumping backtrace:%{public}s", buf, 0x40u);
        }
        free(v47);
        if (!v14) {
          return 0;
        }
        goto LABEL_37;
      }
      if (!v48) {
        goto LABEL_36;
      }
      uint64_t v59 = *(void *)(a1 + 40);
      os_log_type_t v60 = (const char *)(v59 + 159);
      if (v59)
      {
        int v61 = " ";
      }
      else
      {
        os_log_type_t v60 = "";
        int v61 = "";
      }
      int v62 = __n[0] + *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      int v63 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)buf = 136447490;
      BOOL v69 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
      __int16 v70 = 2082;
      uint32_t v71 = v60;
      __int16 v72 = 2080;
      os_log_type_t v73 = v61;
      __int16 v74 = 2048;
      uint64_t v75 = v59;
      __int16 v76 = 1024;
      int v77 = v62;
      __int16 v78 = 1024;
      int v79 = v63;
      uint64_t v21 = "%{public}s %{public}s%s%p Invalid IP reassembly frame (total length %u > %u), no backtrace";
    }
    else
    {
      uint64_t v15 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (!os_log_type_enabled(v15, type)) {
        goto LABEL_36;
      }
      uint64_t v54 = *(void *)(a1 + 40);
      __int16 v55 = (const char *)(v54 + 159);
      if (v54)
      {
        __int16 v56 = " ";
      }
      else
      {
        __int16 v55 = "";
        __int16 v56 = "";
      }
      int v57 = __n[0] + *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      int v58 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)buf = 136447490;
      BOOL v69 = "nw_protocol_ipv6_append_reassembled_packets_block_invoke";
      __int16 v70 = 2082;
      uint32_t v71 = v55;
      __int16 v72 = 2080;
      os_log_type_t v73 = v56;
      __int16 v74 = 2048;
      uint64_t v75 = v54;
      __int16 v76 = 1024;
      int v77 = v57;
      __int16 v78 = 1024;
      int v79 = v58;
      uint64_t v21 = "%{public}s %{public}s%s%p Invalid IP reassembly frame (total length %u > %u), backtrace limit exceeded";
    }
LABEL_35:
    _os_log_impl(&dword_1830D4000, v15, v16, v21, buf, 0x36u);
    goto LABEL_36;
  }
  return result;
}

uint64_t ___ZL43nw_protocol_ipv6_append_reassembled_packetsP16nw_protocol_ipv6P16nw_frame_array_sPb_block_invoke_47(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = *(void **)(a2 + 40);
  if (v2)
  {
    *(void *)(v2 + 40) = v3;
    uint64_t v3 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 96) = v3;
  }
  *uint64_t v3 = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return 1;
}

void nw_protocol_ipv6_frame_input_finalizer(nw_frame *a1, BOOL a2, void *a3)
{
  nw_frame_free_buffer((uint64_t)a1);
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v6 = (void *)*((void *)a1 + 3);
  if (v5)
  {
    *(void *)(v5 + 24) = v6;
    uint64_t v6 = (void *)*((void *)a1 + 3);
  }
  else
  {
    a3[14] = v6;
  }
  *uint64_t v6 = v5;
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;

  os_release(a1);
}

uint64_t nw_protocol_ipv6_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v59 = "nw_protocol_ipv6_remove_input_handler";
    char v44 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v56 = 0;
    if (!__nwlog_fault(v44, &type, &v56)) {
      goto LABEL_117;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v56)
      {
        int v41 = __nwlog_obj();
        os_log_type_t v42 = type;
        if (!os_log_type_enabled(v41, type)) {
          goto LABEL_117;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v59 = "nw_protocol_ipv6_remove_input_handler";
        int v43 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_116;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v41 = __nwlog_obj();
      os_log_type_t v42 = type;
      BOOL v51 = os_log_type_enabled(v41, type);
      if (!backtrace_string)
      {
        if (!v51) {
          goto LABEL_117;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v59 = "nw_protocol_ipv6_remove_input_handler";
        int v43 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_116;
      }
      if (v51)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v59 = "nw_protocol_ipv6_remove_input_handler";
        __int16 v60 = 2082;
        int v61 = backtrace_string;
        int v52 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_99:
        _os_log_impl(&dword_1830D4000, v41, v42, v52, buf, 0x16u);
      }
LABEL_100:
      free(backtrace_string);
      goto LABEL_117;
    }
    int v41 = __nwlog_obj();
    os_log_type_t v42 = type;
    if (!os_log_type_enabled(v41, type)) {
      goto LABEL_117;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v59 = "nw_protocol_ipv6_remove_input_handler";
    int v43 = "%{public}s called with null protocol";
LABEL_116:
    _os_log_impl(&dword_1830D4000, v41, v42, v43, buf, 0xCu);
LABEL_117:
    if (v44) {
      free(v44);
    }
    return 0;
  }
  handle = a1->handle;
  if (handle == &nw_protocol_ref_counted_handle) {
    p_output_handler = &a1[1].output_handler;
  }
  else {
    p_output_handler = 0;
  }
  if (handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v59 = "nw_protocol_ipv6_remove_input_handler";
    char v44 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v56 = 0;
    if (!__nwlog_fault(v44, &type, &v56)) {
      goto LABEL_117;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v41 = __nwlog_obj();
      os_log_type_t v42 = type;
      if (!os_log_type_enabled(v41, type)) {
        goto LABEL_117;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v59 = "nw_protocol_ipv6_remove_input_handler";
      int v43 = "%{public}s called with null ipv6";
      goto LABEL_116;
    }
    if (!v56)
    {
      int v41 = __nwlog_obj();
      os_log_type_t v42 = type;
      if (!os_log_type_enabled(v41, type)) {
        goto LABEL_117;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v59 = "nw_protocol_ipv6_remove_input_handler";
      int v43 = "%{public}s called with null ipv6, backtrace limit exceeded";
      goto LABEL_116;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v41 = __nwlog_obj();
    os_log_type_t v42 = type;
    BOOL v53 = os_log_type_enabled(v41, type);
    if (backtrace_string)
    {
      if (v53)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v59 = "nw_protocol_ipv6_remove_input_handler";
        __int16 v60 = 2082;
        int v61 = backtrace_string;
        int v52 = "%{public}s called with null ipv6, dumping backtrace:%{public}s";
        goto LABEL_99;
      }
      goto LABEL_100;
    }
    if (!v53) {
      goto LABEL_117;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v59 = "nw_protocol_ipv6_remove_input_handler";
    int v43 = "%{public}s called with null ipv6, no backtrace";
    goto LABEL_116;
  }
  if (a2)
  {
    if (a2->output_handler == a1)
    {
      callbacks = a1[1].callbacks;
      if (callbacks)
      {
        uint64_t v9 = (nw_protocol_callbacks *)((char *)callbacks - 1);
        a1[1].callbacks = v9;
        if (!v9)
        {
          uint64_t v10 = *(void (***)(void))a1[1].flow_id;
          if (v10)
          {
            *(void *)a1[1].flow_id = 0;
            v10[2](v10);
            _Block_release(v10);
          }
          if (a1[1].flow_id[8])
          {
            uint64_t v11 = *(const void **)a1[1].flow_id;
            if (v11) {
              _Block_release(v11);
            }
          }
          free(a1);
        }
      }
      a2->output_handler = 0;
    }
    goto LABEL_18;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v59 = "__nw_protocol_get_output_handler";
  int v46 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v56 = 0;
  if (__nwlog_fault(v46, &type, &v56))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v47 = __nwlog_obj();
      os_log_type_t v48 = type;
      if (!os_log_type_enabled(v47, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v59 = "__nw_protocol_get_output_handler";
      uint64_t v49 = "%{public}s called with null protocol";
      goto LABEL_121;
    }
    if (!v56)
    {
      unsigned int v47 = __nwlog_obj();
      os_log_type_t v48 = type;
      if (!os_log_type_enabled(v47, type)) {
        goto LABEL_122;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v59 = "__nw_protocol_get_output_handler";
      uint64_t v49 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_121;
    }
    uint64_t v54 = (char *)__nw_create_backtrace_string();
    unsigned int v47 = __nwlog_obj();
    os_log_type_t v48 = type;
    BOOL v55 = os_log_type_enabled(v47, type);
    if (v54)
    {
      if (v55)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v59 = "__nw_protocol_get_output_handler";
        __int16 v60 = 2082;
        int v61 = v54;
        _os_log_impl(&dword_1830D4000, v47, v48, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v54);
      goto LABEL_122;
    }
    if (v55)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v59 = "__nw_protocol_get_output_handler";
      uint64_t v49 = "%{public}s called with null protocol, no backtrace";
LABEL_121:
      _os_log_impl(&dword_1830D4000, v47, v48, v49, buf, 0xCu);
    }
  }
LABEL_122:
  if (v46) {
    free(v46);
  }
LABEL_18:
  if (a1->default_input_handler != a2) {
    return 0;
  }
  nw_protocol_ip_register_segmentation_offload_notification(a1, 0);
  uint64_t default_input_handler = a1->default_input_handler;
  if (default_input_handler)
  {
    if (default_input_handler->handle == &nw_protocol_ref_counted_handle)
    {
      int v19 = default_input_handler[1].callbacks;
      if (v19)
      {
        int v20 = (nw_protocol_callbacks *)((char *)v19 - 1);
        default_input_handler[1].callbacks = v20;
        if (!v20)
        {
          uint64_t v21 = *(void (***)(void))default_input_handler[1].flow_id;
          if (v21)
          {
            *(void *)default_input_handler[1].flow_id = 0;
            v21[2](v21);
            _Block_release(v21);
          }
          if (default_input_handler[1].flow_id[8])
          {
            int v22 = *(const void **)default_input_handler[1].flow_id;
            if (v22) {
              _Block_release(v22);
            }
          }
          free(default_input_handler);
        }
      }
    }
    a1->uint64_t default_input_handler = 0;
  }
  output_handler = a1->output_handler;
  if (output_handler)
  {
    uint64_t v15 = output_handler->callbacks;
    if (v15)
    {
      remove_input_handler = (void (*)(nw_protocol *, nw_protocol *, uint64_t))v15->remove_input_handler;
      if (remove_input_handler)
      {
        uint64_t v17 = output_handler->handle;
        if (v17 == &nw_protocol_ref_counted_handle)
        {
          char v18 = output_handler[1].callbacks;
          if (v18) {
            output_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v18->add_input_handler + 1);
          }
        }
        if (a1->handle == &nw_protocol_ref_counted_handle)
        {
          BOOL v23 = a1[1].callbacks;
          if (v23) {
            a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v23->add_input_handler + 1);
          }
          remove_input_handler(output_handler, a1, a3);
          if (a1->handle == &nw_protocol_ref_counted_handle)
          {
            __int16 v33 = a1[1].callbacks;
            if (v33)
            {
              int v34 = (nw_protocol_callbacks *)((char *)v33 - 1);
              a1[1].callbacks = v34;
              if (!v34)
              {
                int v35 = *(void (***)(void))a1[1].flow_id;
                if (v35)
                {
                  *(void *)a1[1].flow_id = 0;
                  v35[2](v35);
                  _Block_release(v35);
                }
                if (a1[1].flow_id[8])
                {
                  uint64_t v36 = *(const void **)a1[1].flow_id;
                  if (v36) {
                    _Block_release(v36);
                  }
                }
                free(a1);
              }
            }
          }
        }
        else
        {
          remove_input_handler(output_handler, a1, a3);
        }
        if (v17 == &nw_protocol_ref_counted_handle && output_handler->handle == &nw_protocol_ref_counted_handle)
        {
          uint64_t v37 = output_handler[1].callbacks;
          if (v37)
          {
            int v38 = (nw_protocol_callbacks *)((char *)v37 - 1);
            output_handler[1].callbacks = v38;
            if (!v38)
            {
              int v39 = *(void (***)(void))output_handler[1].flow_id;
              if (v39)
              {
                *(void *)output_handler[1].flow_id = 0;
                v39[2](v39);
                _Block_release(v39);
              }
              if (output_handler[1].flow_id[8])
              {
                int v40 = *(const void **)output_handler[1].flow_id;
                if (v40) {
                  _Block_release(v40);
                }
              }
              free(output_handler);
            }
          }
        }
      }
    }
  }
  if (a3)
  {
    while (1)
    {
      output_handler_context = a1[2].output_handler_context;
      if (!output_handler_context) {
        break;
      }
      uint64_t v25 = output_handler_context[4];
      int v26 = (void *)output_handler_context[5];
      if (v25)
      {
        *(void *)(v25 + 40) = v26;
        int v26 = (void *)output_handler_context[5];
      }
      else
      {
        *(void *)a1[3].flow_id = v26;
      }
      void *v26 = v25;
      output_handler_context[4] = 0;
      output_handler_context[5] = 0;
      nw_frame_finalize((uint64_t)output_handler_context);
    }
    while (1)
    {
      int v27 = p_output_handler[13];
      if (!v27) {
        break;
      }
      identifier = v27->identifier;
      __int16 v29 = (nw_protocol *)v27->callbacks;
      if (identifier)
      {
        *(void *)&identifier->name[24] = v29;
        __int16 v29 = (nw_protocol *)v27->callbacks;
      }
      else
      {
        p_output_handler[14] = v29;
      }
      *(void *)v29->flow_id = identifier;
      v27->identifier = 0;
      v27->callbacks = 0;
      nw_frame_free_buffer((uint64_t)v27);
      os_release(v27);
    }
    while (1)
    {
      os_log_type_t v30 = p_output_handler[15];
      if (!v30) {
        break;
      }
      int v31 = v30->identifier;
      uint64_t v32 = (nw_protocol *)v30->callbacks;
      if (v31)
      {
        *(void *)&v31->name[24] = v32;
        uint64_t v32 = (nw_protocol *)v30->callbacks;
      }
      else
      {
        p_output_handler[16] = v32;
      }
      *(void *)v32->flow_id = v31;
      v30->identifier = 0;
      v30->callbacks = 0;
      nw_frame_free_buffer((uint64_t)v30);
      os_release(v30);
    }
    nw_protocol_destroy((uint64_t)p_output_handler, 0);
  }
  return 1;
}

uint64_t nw_protocol_ipv6_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v8, &type, &v20)) {
      goto LABEL_77;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
      uint64_t v11 = "%{public}s called with null protocol";
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
          __int16 v24 = 2082;
          uint64_t v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_77:
        if (!v8) {
          return 0;
        }
LABEL_78:
        free(v8);
        return 0;
      }
      if (!v13) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
      uint64_t v11 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
      uint64_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_76;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v8, &type, &v20)) {
      goto LABEL_77;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v20)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_77;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
        uint64_t v11 = "%{public}s called with null ipv6, backtrace limit exceeded";
        goto LABEL_76;
      }
      int v14 = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!v14)
      {
        if (!v15) {
          goto LABEL_77;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
        uint64_t v11 = "%{public}s called with null ipv6, no backtrace";
        goto LABEL_76;
      }
      if (!v15) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
      __int16 v24 = 2082;
      uint64_t v25 = v14;
      os_log_type_t v16 = "%{public}s called with null ipv6, dumping backtrace:%{public}s";
      goto LABEL_53;
    }
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_77;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
    uint64_t v11 = "%{public}s called with null ipv6";
LABEL_76:
    _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
    goto LABEL_77;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v8, &type, &v20)) {
      goto LABEL_77;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v20)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_77;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
        uint64_t v11 = "%{public}s called with null old_input_protocol, backtrace limit exceeded";
        goto LABEL_76;
      }
      int v14 = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!v14)
      {
        if (!v17) {
          goto LABEL_77;
        }
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
        uint64_t v11 = "%{public}s called with null old_input_protocol, no backtrace";
        goto LABEL_76;
      }
      if (!v17) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446466;
      BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
      __int16 v24 = 2082;
      uint64_t v25 = v14;
      os_log_type_t v16 = "%{public}s called with null old_input_protocol, dumping backtrace:%{public}s";
      goto LABEL_53;
    }
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_77;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
    uint64_t v11 = "%{public}s called with null old_input_protocol";
    goto LABEL_76;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v8, &type, &v20)) {
      goto LABEL_77;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
      uint64_t v11 = "%{public}s called with null new_input_protocol";
      goto LABEL_76;
    }
    if (!v20)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
      uint64_t v11 = "%{public}s called with null new_input_protocol, backtrace limit exceeded";
      goto LABEL_76;
    }
    int v14 = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v18 = os_log_type_enabled(v9, type);
    if (!v14)
    {
      if (!v18) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
      uint64_t v11 = "%{public}s called with null new_input_protocol, no backtrace";
      goto LABEL_76;
    }
    if (!v18) {
      goto LABEL_54;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
    __int16 v24 = 2082;
    uint64_t v25 = v14;
    os_log_type_t v16 = "%{public}s called with null new_input_protocol, dumping backtrace:%{public}s";
LABEL_53:
    _os_log_impl(&dword_1830D4000, v9, v10, v16, buf, 0x16u);
    goto LABEL_54;
  }
  if (a3->identifier) {
    identifier = a3->identifier;
  }
  else {
    identifier = (nw_protocol_identifier *)"invalid";
  }
  if (!strncmp(identifier->name, "quic", 4uLL))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v8, &type, &v20)) {
      goto LABEL_77;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
      uint64_t v11 = "%{public}s Attempt to add quic to ip";
      goto LABEL_76;
    }
    if (!v20)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
      uint64_t v11 = "%{public}s Attempt to add quic to ip, backtrace limit exceeded";
      goto LABEL_76;
    }
    int v14 = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v19 = os_log_type_enabled(v9, type);
    if (!v14)
    {
      if (!v19) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
      uint64_t v11 = "%{public}s Attempt to add quic to ip, no backtrace";
      goto LABEL_76;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v23 = "nw_protocol_ipv6_replace_input_handler";
      __int16 v24 = 2082;
      uint64_t v25 = v14;
      os_log_type_t v16 = "%{public}s Attempt to add quic to ip, dumping backtrace:%{public}s";
      goto LABEL_53;
    }
LABEL_54:
    free(v14);
    if (!v8) {
      return 0;
    }
    goto LABEL_78;
  }

  return nw_protocol_common_replace_input_handler((uint64_t)a1, a2, (uint64_t)a3);
}

uint64_t nw_protocol_ipv6_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v157 = "nw_protocol_ipv6_add_input_handler";
    uint64_t v68 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v154 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v68, type, &v154)) {
      goto LABEL_363;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (v154 == OS_LOG_TYPE_DEFAULT)
      {
        BOOL v69 = __nwlog_obj();
        os_log_type_t v70 = type[0];
        if (os_log_type_enabled(v69, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v157 = "nw_protocol_ipv6_add_input_handler";
          uint32_t v71 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_362;
        }
        goto LABEL_363;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v69 = __nwlog_obj();
      os_log_type_t v70 = type[0];
      BOOL v79 = os_log_type_enabled(v69, type[0]);
      if (!backtrace_string)
      {
        if (v79)
        {
          *(_DWORD *)buf = 136446210;
          v157 = "nw_protocol_ipv6_add_input_handler";
          uint32_t v71 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_362;
        }
        goto LABEL_363;
      }
      if (!v79) {
        goto LABEL_187;
      }
      *(_DWORD *)buf = 136446466;
      v157 = "nw_protocol_ipv6_add_input_handler";
      __int16 v158 = 2082;
      v159 = (nw_protocol_identifier *)backtrace_string;
      __int16 v80 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_186;
    }
    BOOL v69 = __nwlog_obj();
    os_log_type_t v70 = type[0];
    if (!os_log_type_enabled(v69, type[0])) {
      goto LABEL_363;
    }
    *(_DWORD *)buf = 136446210;
    v157 = "nw_protocol_ipv6_add_input_handler";
    uint32_t v71 = "%{public}s called with null protocol";
LABEL_362:
    _os_log_impl(&dword_1830D4000, v69, v70, v71, buf, 0xCu);
    goto LABEL_363;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v157 = "nw_protocol_ipv6_add_input_handler";
    uint64_t v68 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v154 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v68, type, &v154)) {
      goto LABEL_363;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (v154 == OS_LOG_TYPE_DEFAULT)
      {
        BOOL v69 = __nwlog_obj();
        os_log_type_t v70 = type[0];
        if (os_log_type_enabled(v69, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v157 = "nw_protocol_ipv6_add_input_handler";
          uint32_t v71 = "%{public}s called with null ipv6, backtrace limit exceeded";
          goto LABEL_362;
        }
        goto LABEL_363;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      BOOL v69 = __nwlog_obj();
      os_log_type_t v70 = type[0];
      BOOL v81 = os_log_type_enabled(v69, type[0]);
      if (!backtrace_string)
      {
        if (v81)
        {
          *(_DWORD *)buf = 136446210;
          v157 = "nw_protocol_ipv6_add_input_handler";
          uint32_t v71 = "%{public}s called with null ipv6, no backtrace";
          goto LABEL_362;
        }
        goto LABEL_363;
      }
      if (!v81) {
        goto LABEL_187;
      }
      *(_DWORD *)buf = 136446466;
      v157 = "nw_protocol_ipv6_add_input_handler";
      __int16 v158 = 2082;
      v159 = (nw_protocol_identifier *)backtrace_string;
      __int16 v80 = "%{public}s called with null ipv6, dumping backtrace:%{public}s";
      goto LABEL_186;
    }
    BOOL v69 = __nwlog_obj();
    os_log_type_t v70 = type[0];
    if (!os_log_type_enabled(v69, type[0])) {
      goto LABEL_363;
    }
    *(_DWORD *)buf = 136446210;
    v157 = "nw_protocol_ipv6_add_input_handler";
    uint32_t v71 = "%{public}s called with null ipv6";
    goto LABEL_362;
  }
  if (a1->default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v157 = "nw_protocol_ipv6_add_input_handler";
    uint64_t v68 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v154 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v68, type, &v154)) {
      goto LABEL_363;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v69 = __nwlog_obj();
      os_log_type_t v70 = type[0];
      if (!os_log_type_enabled(v69, type[0])) {
        goto LABEL_363;
      }
      *(_DWORD *)buf = 136446210;
      v157 = "nw_protocol_ipv6_add_input_handler";
      uint32_t v71 = "%{public}s Default input handler already exists";
      goto LABEL_362;
    }
    if (v154 == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v69 = __nwlog_obj();
      os_log_type_t v70 = type[0];
      if (os_log_type_enabled(v69, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v157 = "nw_protocol_ipv6_add_input_handler";
        uint32_t v71 = "%{public}s Default input handler already exists, backtrace limit exceeded";
        goto LABEL_362;
      }
      goto LABEL_363;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v69 = __nwlog_obj();
    os_log_type_t v70 = type[0];
    BOOL v82 = os_log_type_enabled(v69, type[0]);
    if (!backtrace_string)
    {
      if (v82)
      {
        *(_DWORD *)buf = 136446210;
        v157 = "nw_protocol_ipv6_add_input_handler";
        uint32_t v71 = "%{public}s Default input handler already exists, no backtrace";
        goto LABEL_362;
      }
      goto LABEL_363;
    }
    if (!v82) {
      goto LABEL_187;
    }
    *(_DWORD *)buf = 136446466;
    v157 = "nw_protocol_ipv6_add_input_handler";
    __int16 v158 = 2082;
    v159 = (nw_protocol_identifier *)backtrace_string;
    __int16 v80 = "%{public}s Default input handler already exists, dumping backtrace:%{public}s";
LABEL_186:
    _os_log_impl(&dword_1830D4000, v69, v70, v80, buf, 0x16u);
    goto LABEL_187;
  }
  if (!a2)
  {
    if (!strncmp("invalid", "quic", 4uLL)) {
      goto LABEL_152;
    }
    nw_protocol_set_flow_id_from_protocol(a1, 0);
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v157 = "__nw_protocol_get_output_handler";
    int v7 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v154 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v7, type, &v154))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        BOOL v8 = __nwlog_obj();
        os_log_type_t v9 = type[0];
        if (!os_log_type_enabled(v8, type[0])) {
          goto LABEL_57;
        }
        *(_DWORD *)buf = 136446210;
        v157 = "__nw_protocol_get_output_handler";
        os_log_type_t v10 = "%{public}s called with null protocol";
LABEL_56:
        _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
        goto LABEL_57;
      }
      if (v154 == OS_LOG_TYPE_DEFAULT)
      {
        BOOL v8 = __nwlog_obj();
        os_log_type_t v9 = type[0];
        if (!os_log_type_enabled(v8, type[0])) {
          goto LABEL_57;
        }
        *(_DWORD *)buf = 136446210;
        v157 = "__nw_protocol_get_output_handler";
        os_log_type_t v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_56;
      }
      uint64_t v25 = (char *)__nw_create_backtrace_string();
      BOOL v8 = __nwlog_obj();
      os_log_type_t v9 = type[0];
      BOOL v26 = os_log_type_enabled(v8, type[0]);
      if (!v25)
      {
        if (!v26) {
          goto LABEL_57;
        }
        *(_DWORD *)buf = 136446210;
        v157 = "__nw_protocol_get_output_handler";
        os_log_type_t v10 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_56;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        v157 = "__nw_protocol_get_output_handler";
        __int16 v158 = 2082;
        v159 = (nw_protocol_identifier *)v25;
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v25);
    }
LABEL_57:
    if (v7) {
      free(v7);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v157 = "__nw_protocol_set_output_handler";
    int v31 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v154 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v31, type, &v154))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        uint64_t v32 = __nwlog_obj();
        os_log_type_t v33 = type[0];
        if (!os_log_type_enabled(v32, type[0])) {
          goto LABEL_73;
        }
        *(_DWORD *)buf = 136446210;
        v157 = "__nw_protocol_set_output_handler";
        int v34 = "%{public}s called with null protocol";
LABEL_72:
        _os_log_impl(&dword_1830D4000, v32, v33, v34, buf, 0xCu);
        goto LABEL_73;
      }
      if (v154 == OS_LOG_TYPE_DEFAULT)
      {
        uint64_t v32 = __nwlog_obj();
        os_log_type_t v33 = type[0];
        if (!os_log_type_enabled(v32, type[0])) {
          goto LABEL_73;
        }
        *(_DWORD *)buf = 136446210;
        v157 = "__nw_protocol_set_output_handler";
        int v34 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_72;
      }
      int v35 = (char *)__nw_create_backtrace_string();
      uint64_t v32 = __nwlog_obj();
      os_log_type_t v33 = type[0];
      BOOL v36 = os_log_type_enabled(v32, type[0]);
      if (!v35)
      {
        if (!v36) {
          goto LABEL_73;
        }
        *(_DWORD *)buf = 136446210;
        v157 = "__nw_protocol_set_output_handler";
        int v34 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_72;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        v157 = "__nw_protocol_set_output_handler";
        __int16 v158 = 2082;
        v159 = (nw_protocol_identifier *)v35;
        _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v35);
    }
LABEL_73:
    if (v31) {
      free(v31);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v157 = "__nw_protocol_get_parameters";
    uint64_t v37 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v154 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v37, type, &v154))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        int v38 = __nwlog_obj();
        os_log_type_t v39 = type[0];
        if (!os_log_type_enabled(v38, type[0])) {
          goto LABEL_89;
        }
        *(_DWORD *)buf = 136446210;
        v157 = "__nw_protocol_get_parameters";
        int v40 = "%{public}s called with null protocol";
LABEL_88:
        _os_log_impl(&dword_1830D4000, v38, v39, v40, buf, 0xCu);
        goto LABEL_89;
      }
      if (v154 == OS_LOG_TYPE_DEFAULT)
      {
        int v38 = __nwlog_obj();
        os_log_type_t v39 = type[0];
        if (!os_log_type_enabled(v38, type[0])) {
          goto LABEL_89;
        }
        *(_DWORD *)buf = 136446210;
        v157 = "__nw_protocol_get_parameters";
        int v40 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_88;
      }
      int v41 = (char *)__nw_create_backtrace_string();
      int v38 = __nwlog_obj();
      os_log_type_t v39 = type[0];
      BOOL v42 = os_log_type_enabled(v38, type[0]);
      if (!v41)
      {
        if (!v42) {
          goto LABEL_89;
        }
        *(_DWORD *)buf = 136446210;
        v157 = "__nw_protocol_get_parameters";
        int v40 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_88;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        v157 = "__nw_protocol_get_parameters";
        __int16 v158 = 2082;
        v159 = (nw_protocol_identifier *)v41;
        _os_log_impl(&dword_1830D4000, v38, v39, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v41);
    }
LABEL_89:
    if (v37) {
      free(v37);
    }
    BYTE4(a1[3].output_handler_context) = nw_parameters_get_ip_protocol(0);
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v157 = "__nw_protocol_get_local_endpoint";
    int v43 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v154 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v43, type, &v154))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        char v44 = __nwlog_obj();
        os_log_type_t v45 = type[0];
        if (!os_log_type_enabled(v44, type[0])) {
          goto LABEL_105;
        }
        *(_DWORD *)buf = 136446210;
        v157 = "__nw_protocol_get_local_endpoint";
        int v46 = "%{public}s called with null protocol";
LABEL_104:
        _os_log_impl(&dword_1830D4000, v44, v45, v46, buf, 0xCu);
        goto LABEL_105;
      }
      if (v154 == OS_LOG_TYPE_DEFAULT)
      {
        char v44 = __nwlog_obj();
        os_log_type_t v45 = type[0];
        if (!os_log_type_enabled(v44, type[0])) {
          goto LABEL_105;
        }
        *(_DWORD *)buf = 136446210;
        v157 = "__nw_protocol_get_local_endpoint";
        int v46 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_104;
      }
      unsigned int v47 = (char *)__nw_create_backtrace_string();
      char v44 = __nwlog_obj();
      os_log_type_t v45 = type[0];
      BOOL v48 = os_log_type_enabled(v44, type[0]);
      if (!v47)
      {
        if (!v48) {
          goto LABEL_105;
        }
        *(_DWORD *)buf = 136446210;
        v157 = "__nw_protocol_get_local_endpoint";
        int v46 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_104;
      }
      if (v48)
      {
        *(_DWORD *)buf = 136446466;
        v157 = "__nw_protocol_get_local_endpoint";
        __int16 v158 = 2082;
        v159 = (nw_protocol_identifier *)v47;
        _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v47);
    }
LABEL_105:
    if (v43) {
      free(v43);
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v157 = "__nw_protocol_get_remote_endpoint";
    uint64_t v49 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v154 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v49, type, &v154)) {
      goto LABEL_121;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      uint64_t v50 = __nwlog_obj();
      os_log_type_t v51 = type[0];
      if (os_log_type_enabled(v50, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v157 = "__nw_protocol_get_remote_endpoint";
        int v52 = "%{public}s called with null protocol";
LABEL_120:
        _os_log_impl(&dword_1830D4000, v50, v51, v52, buf, 0xCu);
      }
    }
    else if (v154)
    {
      BOOL v53 = (char *)__nw_create_backtrace_string();
      uint64_t v50 = __nwlog_obj();
      os_log_type_t v51 = type[0];
      BOOL v54 = os_log_type_enabled(v50, type[0]);
      if (v53)
      {
        if (v54)
        {
          *(_DWORD *)buf = 136446466;
          v157 = "__nw_protocol_get_remote_endpoint";
          __int16 v158 = 2082;
          v159 = (nw_protocol_identifier *)v53;
          _os_log_impl(&dword_1830D4000, v50, v51, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v53);
        goto LABEL_121;
      }
      if (v54)
      {
        *(_DWORD *)buf = 136446210;
        v157 = "__nw_protocol_get_remote_endpoint";
        int v52 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_120;
      }
    }
    else
    {
      uint64_t v50 = __nwlog_obj();
      os_log_type_t v51 = type[0];
      if (os_log_type_enabled(v50, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v157 = "__nw_protocol_get_remote_endpoint";
        int v52 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_120;
      }
    }
LABEL_121:
    if (v49) {
      free(v49);
    }
    uint64_t v21 = 0;
    os_log_type_t v16 = 0;
    BOOL v55 = 0;
    goto LABEL_227;
  }
  if (a2->identifier) {
    identifier = a2->identifier;
  }
  else {
    identifier = (nw_protocol_identifier *)"invalid";
  }
  if (!strncmp(identifier->name, "quic", 4uLL))
  {
LABEL_152:
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v157 = "nw_protocol_ipv6_add_input_handler";
    uint64_t v68 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v154 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v68, type, &v154)) {
      goto LABEL_363;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      BOOL v69 = __nwlog_obj();
      os_log_type_t v70 = type[0];
      if (os_log_type_enabled(v69, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v157 = "nw_protocol_ipv6_add_input_handler";
        uint32_t v71 = "%{public}s Attempt to add quic to ip";
        goto LABEL_362;
      }
LABEL_363:
      if (v68) {
        free(v68);
      }
      return 0;
    }
    if (v154 == OS_LOG_TYPE_DEFAULT)
    {
      BOOL v69 = __nwlog_obj();
      os_log_type_t v70 = type[0];
      if (os_log_type_enabled(v69, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v157 = "nw_protocol_ipv6_add_input_handler";
        uint32_t v71 = "%{public}s Attempt to add quic to ip, backtrace limit exceeded";
        goto LABEL_362;
      }
      goto LABEL_363;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    BOOL v69 = __nwlog_obj();
    os_log_type_t v70 = type[0];
    BOOL v83 = os_log_type_enabled(v69, type[0]);
    if (!backtrace_string)
    {
      if (v83)
      {
        *(_DWORD *)buf = 136446210;
        v157 = "nw_protocol_ipv6_add_input_handler";
        uint32_t v71 = "%{public}s Attempt to add quic to ip, no backtrace";
        goto LABEL_362;
      }
      goto LABEL_363;
    }
    if (v83)
    {
      *(_DWORD *)buf = 136446466;
      v157 = "nw_protocol_ipv6_add_input_handler";
      __int16 v158 = 2082;
      v159 = (nw_protocol_identifier *)backtrace_string;
      __int16 v80 = "%{public}s Attempt to add quic to ip, dumping backtrace:%{public}s";
      goto LABEL_186;
    }
LABEL_187:
    free(backtrace_string);
    goto LABEL_363;
  }
  a1->uint64_t default_input_handler = a2;
  if (a2->handle == &nw_protocol_ref_counted_handle)
  {
    callbacks = a2[1].callbacks;
    if (callbacks) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
    }
  }
  nw_protocol_set_flow_id_from_protocol(a1, a2);
  if (a2->output_handler)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      v157 = "nw_protocol_ipv6_add_input_handler";
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Output handler already exists for protocol being added as input handler", buf, 0xCu);
    }
  }
  else
  {
    a2->output_handler = a1;
    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      uint64_t v11 = a1[1].callbacks;
      if (v11) {
        a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v11->add_input_handler + 1);
      }
    }
  }
  handle = a2->handle;
  if (handle == &nw_protocol_ref_counted_handle)
  {
    BOOL v13 = a2[1].callbacks;
    if (v13) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v13->add_input_handler + 1);
    }
  }
  int v14 = a2->callbacks;
  if (v14)
  {
    get_parameters = (uint64_t (*)(nw_protocol *))v14->get_parameters;
    if (get_parameters)
    {
      os_log_type_t v16 = (void *)get_parameters(a2);
      if (handle != &nw_protocol_ref_counted_handle) {
        goto LABEL_30;
      }
      goto LABEL_29;
    }
  }
  __nwlog_obj();
  char v56 = a2->identifier;
  if (!v56) {
    char v56 = (nw_protocol_identifier *)"invalid";
  }
  *(_DWORD *)buf = 136446722;
  v157 = "__nw_protocol_get_parameters";
  __int16 v158 = 2082;
  v159 = v56;
  __int16 v160 = 2048;
  v161 = a2;
  int v57 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v154 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v57, type, &v154))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v58 = __nwlog_obj();
      os_log_type_t v59 = type[0];
      if (!os_log_type_enabled(v58, type[0])) {
        goto LABEL_209;
      }
      __int16 v60 = a2->identifier;
      if (!v60) {
        __int16 v60 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)buf = 136446722;
      v157 = "__nw_protocol_get_parameters";
      __int16 v158 = 2082;
      v159 = v60;
      __int16 v160 = 2048;
      v161 = a2;
      int v61 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback";
LABEL_208:
      _os_log_impl(&dword_1830D4000, v58, v59, v61, buf, 0x20u);
      goto LABEL_209;
    }
    if (v154 == OS_LOG_TYPE_DEFAULT)
    {
      int v58 = __nwlog_obj();
      os_log_type_t v59 = type[0];
      if (!os_log_type_enabled(v58, type[0])) {
        goto LABEL_209;
      }
      char v84 = a2->identifier;
      if (!v84) {
        char v84 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)buf = 136446722;
      v157 = "__nw_protocol_get_parameters";
      __int16 v158 = 2082;
      v159 = v84;
      __int16 v160 = 2048;
      v161 = a2;
      int v61 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded";
      goto LABEL_208;
    }
    __int16 v72 = (char *)__nw_create_backtrace_string();
    int v58 = __nwlog_obj();
    os_log_type_t v59 = type[0];
    BOOL v73 = os_log_type_enabled(v58, type[0]);
    if (!v72)
    {
      if (!v73) {
        goto LABEL_209;
      }
      uint64_t v86 = a2->identifier;
      if (!v86) {
        uint64_t v86 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)buf = 136446722;
      v157 = "__nw_protocol_get_parameters";
      __int16 v158 = 2082;
      v159 = v86;
      __int16 v160 = 2048;
      v161 = a2;
      int v61 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace";
      goto LABEL_208;
    }
    if (v73)
    {
      __int16 v74 = a2->identifier;
      if (!v74) {
        __int16 v74 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)buf = 136446978;
      v157 = "__nw_protocol_get_parameters";
      __int16 v158 = 2082;
      v159 = v74;
      __int16 v160 = 2048;
      v161 = a2;
      __int16 v162 = 2082;
      v163 = v72;
      _os_log_impl(&dword_1830D4000, v58, v59, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(v72);
  }
LABEL_209:
  if (v57) {
    free(v57);
  }
  os_log_type_t v16 = 0;
  if (handle == &nw_protocol_ref_counted_handle)
  {
LABEL_29:
    if (a2->handle == &nw_protocol_ref_counted_handle)
    {
      int v27 = a2[1].callbacks;
      if (v27)
      {
        uint64_t v28 = (nw_protocol_callbacks *)((char *)v27 - 1);
        a2[1].callbacks = v28;
        if (!v28)
        {
          __int16 v29 = *(void (***)(void))a2[1].flow_id;
          if (v29)
          {
            *(void *)a2[1].flow_id = 0;
            v29[2](v29);
            _Block_release(v29);
          }
          if (a2[1].flow_id[8])
          {
            os_log_type_t v30 = *(const void **)a2[1].flow_id;
            if (v30) {
              _Block_release(v30);
            }
          }
          free(a2);
        }
      }
    }
  }
LABEL_30:
  BYTE4(a1[3].output_handler_context) = nw_parameters_get_ip_protocol(v16);
  BOOL v17 = a2->handle;
  if (v17 == &nw_protocol_ref_counted_handle)
  {
    BOOL v18 = a2[1].callbacks;
    if (v18) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v18->add_input_handler + 1);
    }
  }
  BOOL v19 = a2->callbacks;
  if (v19)
  {
    get_local_endpoint = (uint64_t (*)(nw_protocol *))v19->get_local_endpoint;
    if (get_local_endpoint)
    {
      uint64_t v21 = get_local_endpoint(a2);
      if (v17 != &nw_protocol_ref_counted_handle) {
        goto LABEL_36;
      }
      goto LABEL_221;
    }
  }
  __nwlog_obj();
  uint64_t v62 = a2->identifier;
  if (!v62) {
    uint64_t v62 = (nw_protocol_identifier *)"invalid";
  }
  *(_DWORD *)buf = 136446722;
  v157 = "__nw_protocol_get_local_endpoint";
  __int16 v158 = 2082;
  v159 = v62;
  __int16 v160 = 2048;
  v161 = a2;
  int v63 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v154 = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v63, type, &v154))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      char v64 = __nwlog_obj();
      os_log_type_t v65 = type[0];
      if (!os_log_type_enabled(v64, type[0])) {
        goto LABEL_218;
      }
      char v66 = a2->identifier;
      if (!v66) {
        char v66 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)buf = 136446722;
      v157 = "__nw_protocol_get_local_endpoint";
      __int16 v158 = 2082;
      v159 = v66;
      __int16 v160 = 2048;
      v161 = a2;
      __int16 v67 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback";
LABEL_217:
      _os_log_impl(&dword_1830D4000, v64, v65, v67, buf, 0x20u);
      goto LABEL_218;
    }
    if (v154 == OS_LOG_TYPE_DEFAULT)
    {
      char v64 = __nwlog_obj();
      os_log_type_t v65 = type[0];
      if (!os_log_type_enabled(v64, type[0])) {
        goto LABEL_218;
      }
      os_log_type_t v85 = a2->identifier;
      if (!v85) {
        os_log_type_t v85 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)buf = 136446722;
      v157 = "__nw_protocol_get_local_endpoint";
      __int16 v158 = 2082;
      v159 = v85;
      __int16 v160 = 2048;
      v161 = a2;
      __int16 v67 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, backtrace limit exceeded";
      goto LABEL_217;
    }
    uint64_t v75 = (char *)__nw_create_backtrace_string();
    char v64 = __nwlog_obj();
    os_log_type_t v65 = type[0];
    BOOL v76 = os_log_type_enabled(v64, type[0]);
    if (!v75)
    {
      if (!v76) {
        goto LABEL_218;
      }
      uint64_t v87 = a2->identifier;
      if (!v87) {
        uint64_t v87 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)buf = 136446722;
      v157 = "__nw_protocol_get_local_endpoint";
      __int16 v158 = 2082;
      v159 = v87;
      __int16 v160 = 2048;
      v161 = a2;
      __int16 v67 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, no backtrace";
      goto LABEL_217;
    }
    if (v76)
    {
      int v77 = a2->identifier;
      if (!v77) {
        int v77 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)buf = 136446978;
      v157 = "__nw_protocol_get_local_endpoint";
      __int16 v158 = 2082;
      v159 = v77;
      __int16 v160 = 2048;
      v161 = a2;
      __int16 v162 = 2082;
      v163 = v75;
      _os_log_impl(&dword_1830D4000, v64, v65, "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(v75);
  }
LABEL_218:
  if (v63) {
    free(v63);
  }
  uint64_t v21 = 0;
  if (v17 != &nw_protocol_ref_counted_handle) {
    goto LABEL_36;
  }
LABEL_221:
  if (a2->handle != &nw_protocol_ref_counted_handle)
  {
    BOOL v23 = 0;
    goto LABEL_223;
  }
  BOOL v118 = a2[1].callbacks;
  if (v118)
  {
    unsigned int v119 = (nw_protocol_callbacks *)((char *)v118 - 1);
    a2[1].callbacks = v119;
    if (!v119)
    {
      int v120 = *(void (***)(void))a2[1].flow_id;
      if (v120)
      {
        *(void *)a2[1].flow_id = 0;
        v120[2](v120);
        _Block_release(v120);
      }
      if (a2[1].flow_id[8])
      {
        __int16 v121 = *(const void **)a2[1].flow_id;
        if (v121) {
          _Block_release(v121);
        }
      }
      free(a2);
    }
  }
LABEL_36:
  int v22 = a2->handle;
  BOOL v23 = v22 == &nw_protocol_ref_counted_handle;
  if (v22 == &nw_protocol_ref_counted_handle)
  {
    __int16 v24 = a2[1].callbacks;
    if (v24) {
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v24->add_input_handler + 1);
    }
  }
LABEL_223:
  uint64_t v88 = a2->callbacks;
  if (v88)
  {
    get_remote_endpoint = (uint64_t (*)(nw_protocol *))v88->get_remote_endpoint;
    if (get_remote_endpoint)
    {
      BOOL v55 = get_remote_endpoint(a2);
      if (!v23) {
        goto LABEL_227;
      }
      goto LABEL_226;
    }
  }
  __nwlog_obj();
  BOOL v128 = a2->identifier;
  if (!v128) {
    BOOL v128 = (nw_protocol_identifier *)"invalid";
  }
  *(_DWORD *)buf = 136446722;
  v157 = "__nw_protocol_get_remote_endpoint";
  __int16 v158 = 2082;
  v159 = v128;
  __int16 v160 = 2048;
  v161 = a2;
  int v129 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  os_log_type_t v154 = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v129, type, &v154)) {
    goto LABEL_344;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    int v130 = __nwlog_obj();
    os_log_type_t v131 = type[0];
    if (!os_log_type_enabled(v130, type[0])) {
      goto LABEL_344;
    }
    os_log_type_t v132 = a2->identifier;
    if (!v132) {
      os_log_type_t v132 = (nw_protocol_identifier *)"invalid";
    }
    *(_DWORD *)buf = 136446722;
    v157 = "__nw_protocol_get_remote_endpoint";
    __int16 v158 = 2082;
    v159 = v132;
    __int16 v160 = 2048;
    v161 = a2;
    unsigned int v133 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback";
LABEL_342:
    long long v150 = v130;
LABEL_343:
    _os_log_impl(&dword_1830D4000, v150, v131, v133, buf, 0x20u);
    goto LABEL_344;
  }
  if (v154 == OS_LOG_TYPE_DEFAULT)
  {
    int v130 = __nwlog_obj();
    os_log_type_t v131 = type[0];
    if (!os_log_type_enabled(v130, type[0])) {
      goto LABEL_344;
    }
    __int16 v149 = a2->identifier;
    if (!v149) {
      __int16 v149 = (nw_protocol_identifier *)"invalid";
    }
    *(_DWORD *)buf = 136446722;
    v157 = "__nw_protocol_get_remote_endpoint";
    __int16 v158 = 2082;
    v159 = v149;
    __int16 v160 = 2048;
    v161 = a2;
    unsigned int v133 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, backtrace limit exceeded";
    goto LABEL_342;
  }
  uint64_t v141 = (char *)__nw_create_backtrace_string();
  __int16 v142 = __nwlog_obj();
  os_log_type_t v131 = type[0];
  os_log_type_t log = v142;
  BOOL v143 = os_log_type_enabled(v142, type[0]);
  if (v141)
  {
    if (v143)
    {
      os_log_type_t v144 = a2->identifier;
      if (!v144) {
        os_log_type_t v144 = (nw_protocol_identifier *)"invalid";
      }
      *(_DWORD *)buf = 136446978;
      v157 = "__nw_protocol_get_remote_endpoint";
      __int16 v158 = 2082;
      v159 = v144;
      __int16 v160 = 2048;
      v161 = a2;
      __int16 v162 = 2082;
      v163 = v141;
      _os_log_impl(&dword_1830D4000, log, v131, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(v141);
  }
  else if (v143)
  {
    uint64_t v151 = a2->identifier;
    if (!v151) {
      uint64_t v151 = (nw_protocol_identifier *)"invalid";
    }
    *(_DWORD *)buf = 136446722;
    v157 = "__nw_protocol_get_remote_endpoint";
    __int16 v158 = 2082;
    v159 = v151;
    __int16 v160 = 2048;
    v161 = a2;
    unsigned int v133 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, no backtrace";
    long long v150 = log;
    goto LABEL_343;
  }
LABEL_344:
  if (v129) {
    free(v129);
  }
  BOOL v55 = 0;
  if (v23)
  {
LABEL_226:
    if (a2->handle == &nw_protocol_ref_counted_handle)
    {
      os_log_type_t v114 = a2[1].callbacks;
      if (v114)
      {
        BOOL v115 = (nw_protocol_callbacks *)((char *)v114 - 1);
        a2[1].callbacks = v115;
        if (!v115)
        {
          BOOL v116 = *(void (***)(void))a2[1].flow_id;
          if (v116)
          {
            *(void *)a2[1].flow_id = 0;
            v116[2](v116);
            _Block_release(v116);
          }
          if (a2[1].flow_id[8])
          {
            BOOL v117 = *(const void **)a2[1].flow_id;
            if (v117) {
              _Block_release(v117);
            }
          }
          free(a2);
        }
      }
    }
  }
LABEL_227:
  if (nw_endpoint_get_address_family(v21) == 30) {
    *(sockaddr *)&a1[2].callbacks = *(sockaddr *)&nw_endpoint_get_address(v21)->sa_data[6];
  }
  if (nw_endpoint_get_address_family(v55) == 30) {
    *(sockaddr *)&a1[2].handle = *(sockaddr *)&nw_endpoint_get_address(v55)->sa_data[6];
  }
  *(_OWORD *)os_log_type_t type = *(_OWORD *)a1->flow_id;
  LODWORD(a1[3].default_input_handler) = net_flowhash((int *)type, 0x10u, flowhash_seed) & 0xFFFF0F00;
  uint64_t default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v157 = "__nw_protocol_get_path";
    uint64_t v134 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v154 = OS_LOG_TYPE_ERROR;
    char v153 = 0;
    if (!__nwlog_fault(v134, &v154, &v153)) {
      goto LABEL_369;
    }
    if (v154 == OS_LOG_TYPE_FAULT)
    {
      v135 = __nwlog_obj();
      os_log_type_t v136 = v154;
      if (!os_log_type_enabled(v135, v154)) {
        goto LABEL_369;
      }
      *(_DWORD *)buf = 136446210;
      v157 = "__nw_protocol_get_path";
      v137 = "%{public}s called with null protocol";
    }
    else if (v153)
    {
      v145 = (char *)__nw_create_backtrace_string();
      v135 = __nwlog_obj();
      os_log_type_t v136 = v154;
      BOOL v146 = os_log_type_enabled(v135, v154);
      if (v145)
      {
        if (v146)
        {
          *(_DWORD *)buf = 136446466;
          v157 = "__nw_protocol_get_path";
          __int16 v158 = 2082;
          v159 = (nw_protocol_identifier *)v145;
          _os_log_impl(&dword_1830D4000, v135, v136, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v145);
        goto LABEL_369;
      }
      if (!v146)
      {
LABEL_369:
        if (v134) {
          free(v134);
        }
        goto LABEL_241;
      }
      *(_DWORD *)buf = 136446210;
      v157 = "__nw_protocol_get_path";
      v137 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v135 = __nwlog_obj();
      os_log_type_t v136 = v154;
      if (!os_log_type_enabled(v135, v154)) {
        goto LABEL_369;
      }
      *(_DWORD *)buf = 136446210;
      v157 = "__nw_protocol_get_path";
      v137 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v135, v136, v137, buf, 0xCu);
    goto LABEL_369;
  }
  char v91 = default_input_handler->handle;
  if (v91 == &nw_protocol_ref_counted_handle)
  {
    __int16 v92 = default_input_handler[1].callbacks;
    if (v92) {
      default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v92->add_input_handler + 1);
    }
  }
  long long v93 = default_input_handler->callbacks;
  if (!v93 || (get_path = (uint64_t (*)(nw_protocol *))v93->get_path) == 0)
  {
    __nwlog_obj();
    name = default_input_handler->identifier->name;
    *(_DWORD *)buf = 136446722;
    v157 = "__nw_protocol_get_path";
    if (!name) {
      name = "invalid";
    }
    __int16 v158 = 2082;
    v159 = (nw_protocol_identifier *)name;
    __int16 v160 = 2048;
    v161 = default_input_handler;
    __n128 v123 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t v154 = OS_LOG_TYPE_ERROR;
    char v153 = 0;
    if (__nwlog_fault(v123, &v154, &v153))
    {
      if (v154 == OS_LOG_TYPE_FAULT)
      {
        unsigned __int32 v124 = __nwlog_obj();
        os_log_type_t v125 = v154;
        if (!os_log_type_enabled(v124, v154)) {
          goto LABEL_334;
        }
        __n128 v126 = default_input_handler->identifier->name;
        if (!v126) {
          __n128 v126 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v157 = "__nw_protocol_get_path";
        __int16 v158 = 2082;
        v159 = (nw_protocol_identifier *)v126;
        __int16 v160 = 2048;
        v161 = default_input_handler;
        __n128 v127 = "%{public}s protocol %{public}s (%p) has invalid get_path callback";
LABEL_333:
        _os_log_impl(&dword_1830D4000, v124, v125, v127, buf, 0x20u);
        goto LABEL_334;
      }
      if (!v153)
      {
        unsigned __int32 v124 = __nwlog_obj();
        os_log_type_t v125 = v154;
        if (!os_log_type_enabled(v124, v154)) {
          goto LABEL_334;
        }
        __int16 v147 = default_input_handler->identifier->name;
        if (!v147) {
          __int16 v147 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v157 = "__nw_protocol_get_path";
        __int16 v158 = 2082;
        v159 = (nw_protocol_identifier *)v147;
        __int16 v160 = 2048;
        v161 = default_input_handler;
        __n128 v127 = "%{public}s protocol %{public}s (%p) has invalid get_path callback, backtrace limit exceeded";
        goto LABEL_333;
      }
      v138 = (char *)__nw_create_backtrace_string();
      unsigned __int32 v124 = __nwlog_obj();
      os_log_type_t v125 = v154;
      BOOL v139 = os_log_type_enabled(v124, v154);
      if (!v138)
      {
        if (!v139) {
          goto LABEL_334;
        }
        uint64_t v148 = default_input_handler->identifier->name;
        if (!v148) {
          uint64_t v148 = "invalid";
        }
        *(_DWORD *)buf = 136446722;
        v157 = "__nw_protocol_get_path";
        __int16 v158 = 2082;
        v159 = (nw_protocol_identifier *)v148;
        __int16 v160 = 2048;
        v161 = default_input_handler;
        __n128 v127 = "%{public}s protocol %{public}s (%p) has invalid get_path callback, no backtrace";
        goto LABEL_333;
      }
      if (v139)
      {
        uint64_t v140 = default_input_handler->identifier->name;
        if (!v140) {
          uint64_t v140 = "invalid";
        }
        *(_DWORD *)buf = 136446978;
        v157 = "__nw_protocol_get_path";
        __int16 v158 = 2082;
        v159 = (nw_protocol_identifier *)v140;
        __int16 v160 = 2048;
        v161 = default_input_handler;
        __int16 v162 = 2082;
        v163 = v138;
        _os_log_impl(&dword_1830D4000, v124, v125, "%{public}s protocol %{public}s (%p) has invalid get_path callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v138);
    }
LABEL_334:
    if (v123) {
      free(v123);
    }
    uint64_t v95 = 0;
    if (v91 != &nw_protocol_ref_counted_handle) {
      goto LABEL_239;
    }
    goto LABEL_238;
  }
  uint64_t v95 = (void *)get_path(default_input_handler);
  if (v91 == &nw_protocol_ref_counted_handle)
  {
LABEL_238:
    if (default_input_handler->handle == &nw_protocol_ref_counted_handle)
    {
      int v110 = default_input_handler[1].callbacks;
      if (v110)
      {
        uint64_t v111 = (nw_protocol_callbacks *)((char *)v110 - 1);
        default_input_handler[1].callbacks = v111;
        if (!v111)
        {
          os_log_type_t v112 = *(void (***)(void))default_input_handler[1].flow_id;
          if (v112)
          {
            *(void *)default_input_handler[1].flow_id = 0;
            v112[2](v112);
            _Block_release(v112);
          }
          if (default_input_handler[1].flow_id[8])
          {
            BOOL v113 = *(const void **)default_input_handler[1].flow_id;
            if (v113) {
              _Block_release(v113);
            }
          }
          free(default_input_handler);
        }
      }
    }
  }
LABEL_239:
  if (v95)
  {
    LODWORD(a1[3].output_handler_context) = nw_path_get_maximum_packet_size(v95);
    LODWORD(a1[3].handle) = nw_path_get_mtu(v95);
  }
LABEL_241:
  v96 = nw_parameters_copy_protocol_options_legacy(v16, a1);
  if (v96)
  {
    os_log_type_t v97 = v96;
    uint32_t v98 = v97;
    uint64_t v99 = 0;
    HIBYTE(a1[3].output_handler_context) = 0;
    BOOL v100 = (char *)&a1[3].output_handler_context + 7;
    unint64_t v101 = 84;
    while (1)
    {
      int v102 = v97[v99 + 48];
      v100[v99] = v102;
      if (!v102) {
        break;
      }
      --v101;
      ++v99;
      if (v101 <= 1)
      {
        v100[v99] = 0;
        break;
      }
    }

    int hop_limit = nw_ip_options_get_hop_limit(v98);
    if (hop_limit) {
      char v104 = hop_limit;
    }
    else {
      char v104 = 64;
    }
    BYTE5(a1[3].output_handler_context) = v104;
    if (nw_ip_options_get_use_minimum_mtu(v98)) {
      char v105 = 2;
    }
    else {
      char v105 = 0;
    }
    BYTE6(a1[3].output_handler_context) = BYTE6(a1[3].output_handler_context) & 0xFD | v105;
    if (nw_ip_options_get_calculate_receive_time(v98)) {
      char v106 = 4;
    }
    else {
      char v106 = 0;
    }
    BYTE6(a1[3].output_handler_context) = BYTE6(a1[3].output_handler_context) & 0xFB | v106;
    if (nw_ip_options_get_receive_hop_limit(v98)) {
      char v107 = 16;
    }
    else {
      char v107 = 0;
    }
    BYTE6(a1[3].output_handler_context) = BYTE6(a1[3].output_handler_context) & 0xEF | v107;
    os_release(v98);
  }
  else
  {
    BYTE5(a1[3].output_handler_context) = 64;
  }
  uint64_t v108 = 1;
  nw_protocol_ip_register_segmentation_offload_notification(a1, 1);
  return v108;
}

void nw_protocol_ipv4_error(nw_protocol *a1, nw_protocol *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v46 = "nw_protocol_ipv4_error";
    uint64_t default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (!__nwlog_fault((const char *)default_input_handler, &type, &v43)) {
      goto LABEL_47;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      int v46 = "nw_protocol_ipv4_error";
      os_log_type_t v16 = "%{public}s called with null protocol";
      goto LABEL_45;
    }
    if (v43)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v37 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (!v37) {
          goto LABEL_92;
        }
        *(_DWORD *)buf = 136446466;
        int v46 = "nw_protocol_ipv4_error";
        __int16 v47 = 2082;
        BOOL v48 = backtrace_string;
        int v38 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
        goto LABEL_91;
      }
      if (!v37) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      int v46 = "nw_protocol_ipv4_error";
      os_log_type_t v16 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      int v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      int v46 = "nw_protocol_ipv4_error";
      os_log_type_t v16 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_45:
    uint64_t v25 = v14;
    os_log_type_t v26 = v15;
LABEL_46:
    _os_log_impl(&dword_1830D4000, v25, v26, v16, buf, 0xCu);
    goto LABEL_47;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v46 = "nw_protocol_ipv4_error";
    uint64_t default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (!__nwlog_fault((const char *)default_input_handler, &type, &v43)) {
      goto LABEL_47;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      int v46 = "nw_protocol_ipv4_error";
      os_log_type_t v16 = "%{public}s called with null ipv4";
      goto LABEL_45;
    }
    if (v43)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      BOOL v39 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (!v39) {
          goto LABEL_92;
        }
        *(_DWORD *)buf = 136446466;
        int v46 = "nw_protocol_ipv4_error";
        __int16 v47 = 2082;
        BOOL v48 = backtrace_string;
        int v38 = "%{public}s called with null ipv4, dumping backtrace:%{public}s";
        goto LABEL_91;
      }
      if (!v39) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      int v46 = "nw_protocol_ipv4_error";
      os_log_type_t v16 = "%{public}s called with null ipv4, no backtrace";
    }
    else
    {
      int v14 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (!os_log_type_enabled(v14, type)) {
        goto LABEL_47;
      }
      *(_DWORD *)buf = 136446210;
      int v46 = "nw_protocol_ipv4_error";
      os_log_type_t v16 = "%{public}s called with null ipv4, backtrace limit exceeded";
    }
    goto LABEL_45;
  }
  if (a2)
  {
    uint64_t default_input_handler = (uint64_t)a1->default_input_handler;
    if (default_input_handler)
    {
      unsigned int v4 = *(void **)(default_input_handler + 40);
      if (v4 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v5 = *(void *)(default_input_handler + 88);
        if (v5) {
          *(void *)(default_input_handler + 88) = v5 + 1;
        }
      }
      handle = a2->handle;
      if (handle == &nw_protocol_ref_counted_handle)
      {
        callbacks = a2[1].callbacks;
        if (callbacks) {
          a2[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
        }
      }
      uint64_t v8 = *(void *)(default_input_handler + 24);
      if (v8)
      {
        os_log_type_t v9 = *(void (**)(uint64_t, nw_protocol *))(v8 + 56);
        if (v9)
        {
          v9(default_input_handler, a2);
          goto LABEL_14;
        }
      }
      __nwlog_obj();
      int v27 = *(const char **)(default_input_handler + 16);
      *(_DWORD *)buf = 136446722;
      int v46 = "__nw_protocol_error";
      if (!v27) {
        int v27 = "invalid";
      }
      __int16 v47 = 2082;
      BOOL v48 = (void *)v27;
      __int16 v49 = 2048;
      uint64_t v50 = default_input_handler;
      uint64_t v28 = (char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v43 = 0;
      if (__nwlog_fault(v28, &type, &v43))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __int16 v29 = __nwlog_obj();
          os_log_type_t v30 = type;
          if (!os_log_type_enabled(v29, type)) {
            goto LABEL_109;
          }
          int v31 = *(const char **)(default_input_handler + 16);
          if (!v31) {
            int v31 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          int v46 = "__nw_protocol_error";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v31;
          __int16 v49 = 2048;
          uint64_t v50 = default_input_handler;
          uint64_t v32 = "%{public}s protocol %{public}s (%p) has invalid error callback";
          goto LABEL_108;
        }
        if (!v43)
        {
          __int16 v29 = __nwlog_obj();
          os_log_type_t v30 = type;
          if (!os_log_type_enabled(v29, type)) {
            goto LABEL_109;
          }
          int v41 = *(const char **)(default_input_handler + 16);
          if (!v41) {
            int v41 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          int v46 = "__nw_protocol_error";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v41;
          __int16 v49 = 2048;
          uint64_t v50 = default_input_handler;
          uint64_t v32 = "%{public}s protocol %{public}s (%p) has invalid error callback, backtrace limit exceeded";
          goto LABEL_108;
        }
        os_log_type_t v33 = (char *)__nw_create_backtrace_string();
        __int16 v29 = __nwlog_obj();
        os_log_type_t v30 = type;
        BOOL v34 = os_log_type_enabled(v29, type);
        if (v33)
        {
          if (v34)
          {
            int v35 = *(const char **)(default_input_handler + 16);
            if (!v35) {
              int v35 = "invalid";
            }
            *(_DWORD *)buf = 136446978;
            int v46 = "__nw_protocol_error";
            __int16 v47 = 2082;
            BOOL v48 = (void *)v35;
            __int16 v49 = 2048;
            uint64_t v50 = default_input_handler;
            __int16 v51 = 2082;
            int v52 = v33;
            _os_log_impl(&dword_1830D4000, v29, v30, "%{public}s protocol %{public}s (%p) has invalid error callback, dumping backtrace:%{public}s", buf, 0x2Au);
          }
          free(v33);
          goto LABEL_109;
        }
        if (v34)
        {
          BOOL v42 = *(const char **)(default_input_handler + 16);
          if (!v42) {
            BOOL v42 = "invalid";
          }
          *(_DWORD *)buf = 136446722;
          int v46 = "__nw_protocol_error";
          __int16 v47 = 2082;
          BOOL v48 = (void *)v42;
          __int16 v49 = 2048;
          uint64_t v50 = default_input_handler;
          uint64_t v32 = "%{public}s protocol %{public}s (%p) has invalid error callback, no backtrace";
LABEL_108:
          _os_log_impl(&dword_1830D4000, v29, v30, v32, buf, 0x20u);
        }
      }
LABEL_109:
      if (v28) {
        free(v28);
      }
LABEL_14:
      if (handle == &nw_protocol_ref_counted_handle && a2->handle == &nw_protocol_ref_counted_handle)
      {
        uint64_t v21 = a2[1].callbacks;
        if (v21)
        {
          int v22 = (nw_protocol_callbacks *)((char *)v21 - 1);
          a2[1].callbacks = v22;
          if (!v22)
          {
            BOOL v23 = *(void (***)(void))a2[1].flow_id;
            if (v23)
            {
              *(void *)a2[1].flow_id = 0;
              v23[2](v23);
              _Block_release(v23);
            }
            if (a2[1].flow_id[8])
            {
              __int16 v24 = *(const void **)a2[1].flow_id;
              if (v24) {
                _Block_release(v24);
              }
            }
            free(a2);
          }
        }
      }
      if (v4 == &nw_protocol_ref_counted_handle
        && *(_UNKNOWN **)(default_input_handler + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v10 = *(void *)(default_input_handler + 88);
        if (v10)
        {
          uint64_t v11 = v10 - 1;
          *(void *)(default_input_handler + 88) = v11;
          if (!v11)
          {
            uint64_t v12 = *(void (***)(void))(default_input_handler + 64);
            if (v12)
            {
              *(void *)(default_input_handler + 64) = 0;
              v12[2](v12);
              _Block_release(v12);
            }
            if (*(unsigned char *)(default_input_handler + 72))
            {
              BOOL v13 = *(const void **)(default_input_handler + 64);
              if (v13) {
                _Block_release(v13);
              }
            }
            goto LABEL_48;
          }
        }
      }
      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    int v46 = "nw_protocol_ipv4_error";
    uint64_t default_input_handler = _os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v43 = 0;
    if (__nwlog_fault((const char *)default_input_handler, &type, &v43))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v14 = gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_47;
        }
        *(_DWORD *)buf = 136446210;
        int v46 = "nw_protocol_ipv4_error";
        os_log_type_t v16 = "%{public}s ipv4_error requires a default input handler";
        goto LABEL_45;
      }
      if (!v43)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v14 = gLogObj;
        os_log_type_t v15 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
          goto LABEL_47;
        }
        *(_DWORD *)buf = 136446210;
        int v46 = "nw_protocol_ipv4_error";
        os_log_type_t v16 = "%{public}s ipv4_error requires a default input handler, backtrace limit exceeded";
        goto LABEL_45;
      }
      BOOL v17 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      BOOL v18 = gLogObj;
      os_log_type_t v19 = type;
      BOOL v20 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (v17)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          int v46 = "nw_protocol_ipv4_error";
          __int16 v47 = 2082;
          BOOL v48 = v17;
          _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s ipv4_error requires a default input handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v17);
        if (default_input_handler) {
          goto LABEL_48;
        }
        return;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        int v46 = "nw_protocol_ipv4_error";
        os_log_type_t v16 = "%{public}s ipv4_error requires a default input handler, no backtrace";
        uint64_t v25 = v18;
        os_log_type_t v26 = v19;
        goto LABEL_46;
      }
    }
LABEL_47:
    if (!default_input_handler) {
      return;
    }
    goto LABEL_48;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v46 = "nw_protocol_ipv4_error";
  uint64_t default_input_handler = _os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v43 = 0;
  if (!__nwlog_fault((const char *)default_input_handler, &type, &v43)) {
    goto LABEL_47;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446210;
    int v46 = "nw_protocol_ipv4_error";
    os_log_type_t v16 = "%{public}s called with null other_protocol";
    goto LABEL_45;
  }
  if (!v43)
  {
    int v14 = __nwlog_obj();
    os_log_type_t v15 = type;
    if (!os_log_type_enabled(v14, type)) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446210;
    int v46 = "nw_protocol_ipv4_error";
    os_log_type_t v16 = "%{public}s called with null other_protocol, backtrace limit exceeded";
    goto LABEL_45;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  int v14 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v40 = os_log_type_enabled(v14, type);
  if (!backtrace_string)
  {
    if (!v40) {
      goto LABEL_47;
    }
    *(_DWORD *)buf = 136446210;
    int v46 = "nw_protocol_ipv4_error";
    os_log_type_t v16 = "%{public}s called with null other_protocol, no backtrace";
    goto LABEL_45;
  }
  if (!v40) {
    goto LABEL_92;
  }
  *(_DWORD *)buf = 136446466;
  int v46 = "nw_protocol_ipv4_error";
  __int16 v47 = 2082;
  BOOL v48 = backtrace_string;
  int v38 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
LABEL_91:
  _os_log_impl(&dword_1830D4000, v14, v15, v38, buf, 0x16u);
LABEL_92:
  free(backtrace_string);
  if (default_input_handler) {
LABEL_48:
  }
    free((void *)default_input_handler);
}

void nw_protocol_ipv4_get_message_properties(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v15 = "nw_protocol_ipv4_get_message_properties";
    unsigned int v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12)) {
      goto LABEL_34;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_protocol_ipv4_get_message_properties";
      int v7 = "%{public}s called with null protocol";
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      BOOL v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v15 = "nw_protocol_ipv4_get_message_properties";
          __int16 v16 = 2082;
          BOOL v17 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_34:
        if (!v4) {
          return;
        }
LABEL_35:
        free(v4);
        return;
      }
      if (!v9) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_protocol_ipv4_get_message_properties";
      int v7 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v5 = __nwlog_obj();
      os_log_type_t v6 = type;
      if (!os_log_type_enabled(v5, type)) {
        goto LABEL_34;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v15 = "nw_protocol_ipv4_get_message_properties";
      int v7 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_33:
    _os_log_impl(&dword_1830D4000, v5, v6, v7, buf, 0xCu);
    goto LABEL_34;
  }
  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
  {
    if (a3)
    {
      unsigned int v3 = a3[1] & 0xFFFFFFF8 | 1;
      *a3 = *(_DWORD *)(a1 + 208);
      a3[1] = v3;
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v15 = "nw_protocol_ipv4_get_message_properties";
  unsigned int v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12)) {
    goto LABEL_34;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v15 = "nw_protocol_ipv4_get_message_properties";
    int v7 = "%{public}s called with null ipv4";
    goto LABEL_33;
  }
  if (!v12)
  {
    uint64_t v5 = __nwlog_obj();
    os_log_type_t v6 = type;
    if (!os_log_type_enabled(v5, type)) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v15 = "nw_protocol_ipv4_get_message_properties";
    int v7 = "%{public}s called with null ipv4, backtrace limit exceeded";
    goto LABEL_33;
  }
  uint64_t v10 = (char *)__nw_create_backtrace_string();
  uint64_t v5 = __nwlog_obj();
  os_log_type_t v6 = type;
  BOOL v11 = os_log_type_enabled(v5, type);
  if (!v10)
  {
    if (!v11) {
      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446210;
    os_log_type_t v15 = "nw_protocol_ipv4_get_message_properties";
    int v7 = "%{public}s called with null ipv4, no backtrace";
    goto LABEL_33;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v15 = "nw_protocol_ipv4_get_message_properties";
    __int16 v16 = 2082;
    BOOL v17 = v10;
    _os_log_impl(&dword_1830D4000, v5, v6, "%{public}s called with null ipv4, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v10);
  if (v4) {
    goto LABEL_35;
  }
}

uint64_t nw_ipv4_checksum(unsigned __int16 *a1)
{
  if ((a1 & 3) != 0)
  {
    unsigned int v1 = vaddlvq_u16(*(uint16x8_t *)a1) + a1[8] + a1[9];
    LODWORD(v2) = HIWORD(v1) + (unsigned __int16)v1 + ((HIWORD(v1) + (unsigned __int16)v1) >> 16);
  }
  else
  {
    unint64_t v3 = vaddlvq_u32(*(uint32x4_t *)a1);
    unint64_t v4 = ((v3 + *((unsigned int *)a1 + 4)) >> 32) + (v3 + *((_DWORD *)a1 + 4));
    unint64_t v2 = (((v4 >> 16) + (unsigned __int16)v4) >> 16) + (unsigned __int16)(WORD1(v4) + v4);
    LOWORD(v2) = WORD1(v2) + v2;
  }
  return (unsigned __int16)~(_WORD)v2;
}

void nw_protocol_ipv4_frame_output_finalizer(nw_frame *a1, int a2, void *a3)
{
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unsigned int v111 = 0;
    uint64_t v5 = nw_frame_unclaimed_bytes((uint64_t)a1, &v111);
    if (v5)
    {
      if (v111)
      {
        uint64_t v6 = v5;
        v109[0] = 0;
        v109[1] = v109;
        int v110 = 0;
        void v109[2] = 0x2000000000;
        __int16 __buf = 0;
        arc4random_buf(&__buf, 2uLL);
        v107[0] = 0;
        v107[1] = v107;
        uint64_t v7 = *(a3 - 8);
        if (v7)
        {
          unsigned int v8 = *((_DWORD *)a3 + 28);
          int v9 = *((_DWORD *)a3 + 30);
          uint64_t v10 = *(void **)(v7 + 40);
          if (v10 == &nw_protocol_ref_counted_handle)
          {
            uint64_t v11 = *(void *)(v7 + 88);
            if (v11) {
              *(void *)(v7 + 88) = v11 + 1;
            }
          }
          char v12 = (void *)*(a3 - 7);
          if (v12 == &nw_protocol_ref_counted_handle)
          {
            uint64_t v13 = *(a3 - 1);
            if (v13) {
              *(a3 - 1) = v13 + 1;
            }
          }
          uint64_t v14 = *(void *)(v7 + 24);
          if (v14)
          {
            os_log_type_t v15 = *(uint64_t (**)(uint64_t, void *, void, void, uint64_t, void *))(v14 + 88);
            if (v15)
            {
              unsigned int v16 = v15(v7, a3 - 12, v9 + v9 * (v111 / v8), v9 + v9 * (v111 / v8), 32, v107);
              if (v12 != &nw_protocol_ref_counted_handle) {
                goto LABEL_15;
              }
              goto LABEL_14;
            }
          }
          __nwlog_obj();
          __int16 v51 = *(const char **)(v7 + 16);
          *(_DWORD *)buf = 136446722;
          BOOL v115 = "__nw_protocol_get_output_frames";
          if (!v51) {
            __int16 v51 = "invalid";
          }
          __int16 v116 = 2082;
          BOOL v117 = (char *)v51;
          __int16 v118 = 2048;
          unsigned int v119 = (const char *)v7;
          int v52 = (const char *)_os_log_send_and_compose_impl();
          os_log_type_t v113 = OS_LOG_TYPE_ERROR;
          char v112 = 0;
          __int16 v92 = (char *)v52;
          if (__nwlog_fault(v52, &v113, &v112))
          {
            if (v113 == OS_LOG_TYPE_FAULT)
            {
              uint64_t v53 = __nwlog_obj();
              os_log_type_t v54 = v113;
              os_log_t log = v53;
              if (!os_log_type_enabled(v53, v113)) {
                goto LABEL_131;
              }
              BOOL v55 = *(const char **)(v7 + 16);
              if (!v55) {
                BOOL v55 = "invalid";
              }
              *(_DWORD *)buf = 136446722;
              BOOL v115 = "__nw_protocol_get_output_frames";
              __int16 v116 = 2082;
              BOOL v117 = (char *)v55;
              __int16 v118 = 2048;
              unsigned int v119 = (const char *)v7;
              char v56 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback";
LABEL_129:
              BOOL v82 = log;
              os_log_type_t v83 = v54;
LABEL_130:
              _os_log_impl(&dword_1830D4000, v82, v83, v56, buf, 0x20u);
              goto LABEL_131;
            }
            if (!v112)
            {
              __int16 v80 = __nwlog_obj();
              os_log_type_t v54 = v113;
              os_log_t log = v80;
              if (!os_log_type_enabled(v80, v113)) {
                goto LABEL_131;
              }
              BOOL v81 = *(const char **)(v7 + 16);
              if (!v81) {
                BOOL v81 = "invalid";
              }
              *(_DWORD *)buf = 136446722;
              BOOL v115 = "__nw_protocol_get_output_frames";
              __int16 v116 = 2082;
              BOOL v117 = (char *)v81;
              __int16 v118 = 2048;
              unsigned int v119 = (const char *)v7;
              char v56 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, backtrace limit exceeded";
              goto LABEL_129;
            }
            backtrace_string = (char *)__nw_create_backtrace_string();
            loga = __nwlog_obj();
            os_log_type_t type = v113;
            BOOL v62 = os_log_type_enabled(loga, v113);
            if (backtrace_string)
            {
              if (v62)
              {
                int v63 = *(const char **)(v7 + 16);
                if (!v63) {
                  int v63 = "invalid";
                }
                *(_DWORD *)buf = 136446978;
                BOOL v115 = "__nw_protocol_get_output_frames";
                __int16 v116 = 2082;
                BOOL v117 = (char *)v63;
                __int16 v118 = 2048;
                unsigned int v119 = (const char *)v7;
                __int16 v120 = 2082;
                __int16 v121 = backtrace_string;
                _os_log_impl(&dword_1830D4000, loga, type, "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
              }
              free(backtrace_string);
            }
            else if (v62)
            {
              char v84 = *(const char **)(v7 + 16);
              if (!v84) {
                char v84 = "invalid";
              }
              *(_DWORD *)buf = 136446722;
              BOOL v115 = "__nw_protocol_get_output_frames";
              __int16 v116 = 2082;
              BOOL v117 = (char *)v84;
              __int16 v118 = 2048;
              unsigned int v119 = (const char *)v7;
              char v56 = "%{public}s protocol %{public}s (%p) has invalid get_output_frames callback, no backtrace";
              BOOL v82 = loga;
              os_log_type_t v83 = type;
              goto LABEL_130;
            }
          }
LABEL_131:
          if (v92) {
            free(v92);
          }
          unsigned int v16 = 0;
          if (v12 != &nw_protocol_ref_counted_handle)
          {
LABEL_15:
            if (v10 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v7 + 40) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v43 = *(void *)(v7 + 88);
              if (v43)
              {
                uint64_t v44 = v43 - 1;
                *(void *)(v7 + 88) = v44;
                if (!v44)
                {
                  os_log_type_t v45 = *(void (***)(void))(v7 + 64);
                  if (v45)
                  {
                    *(void *)(v7 + 64) = 0;
                    v45[2](v45);
                    _Block_release(v45);
                  }
                  if (*(unsigned char *)(v7 + 72))
                  {
                    int v46 = *(const void **)(v7 + 64);
                    if (v46) {
                      _Block_release(v46);
                    }
                  }
                  free((void *)v7);
                }
              }
            }
            if (v16)
            {
              unsigned int v17 = 0;
              unsigned int v18 = v111;
              uint64_t v19 = v107[0];
              while (v19)
              {
                int v23 = *(_DWORD *)(v19 + 52);
                if (v23) {
                  v23 -= *(_DWORD *)(v19 + 56) + *(_DWORD *)(v19 + 60);
                }
                uint64_t v19 = *(void *)(v19 + 32);
                BOOL v20 = __CFADD__(v17, v23);
                unsigned int v21 = v17 + v23;
                v17 += v23;
                if (v20) {
                  unsigned int v22 = -1;
                }
                else {
                  unsigned int v22 = v21;
                }
                if (v22 >= v111) {
                  goto LABEL_34;
                }
              }
              if (v17 < v111) {
                goto LABEL_27;
              }
LABEL_34:
              if ((a3[17] & 1) == 0)
              {
                if (gLogDatapath)
                {
                  __int16 v72 = __nwlog_obj();
                  BOOL v73 = os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG);
                  unsigned int v18 = v111;
                  if (v73)
                  {
                    *(_DWORD *)buf = 136447490;
                    BOOL v115 = "nw_protocol_ipv4_frame_output_finalizer";
                    __int16 v116 = 2082;
                    BOOL v117 = (char *)a3 + 137;
                    __int16 v118 = 2080;
                    unsigned int v119 = " ";
                    __int16 v120 = 2048;
                    __int16 v121 = (char *)a3;
                    __int16 v122 = 1024;
                    unsigned int v123 = v16;
                    __int16 v124 = 1024;
                    unsigned int v125 = v111;
                    _os_log_impl(&dword_1830D4000, v72, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s%p Got %u packets to fragment %u bytes", buf, 0x36u);
                    unsigned int v18 = v111;
                  }
                }
              }
              v93[0] = MEMORY[0x1E4F143A8];
              v93[1] = 0x40000000;
              uint64_t v94 = ___ZL39nw_protocol_ipv4_frame_output_finalizerP8nw_framebPv_block_invoke_33;
              uint64_t v95 = &unk_1E524B220;
              unsigned int v101 = v18;
              v96 = v109;
              os_log_type_t v97 = v107;
              uint32_t v98 = a3;
              uint64_t v99 = a1;
              __int16 v102 = __buf;
              uint64_t v100 = v6;
              uint64_t v28 = v107[0];
              do
              {
                if (!v28) {
                  break;
                }
                uint64_t v29 = *(void *)(v28 + 32);
                char v30 = ((uint64_t (*)(void *))v94)(v93);
                uint64_t v28 = v29;
              }
              while ((v30 & 1) != 0);
              uint64_t v31 = *(a3 - 8);
              if (v31)
              {
                uint64_t v32 = *(void **)(v31 + 40);
                if (v32 == &nw_protocol_ref_counted_handle)
                {
                  uint64_t v33 = *(void *)(v31 + 88);
                  if (v33) {
                    *(void *)(v31 + 88) = v33 + 1;
                  }
                }
                uint64_t v34 = *(void *)(v31 + 24);
                if (v34)
                {
                  int v35 = *(void (**)(uint64_t, void *))(v34 + 96);
                  if (v35)
                  {
                    v35(v31, v107);
LABEL_46:
                    if (v32 != &nw_protocol_ref_counted_handle) {
                      goto LABEL_48;
                    }
                    if (*(_UNKNOWN **)(v31 + 40) != &nw_protocol_ref_counted_handle) {
                      goto LABEL_48;
                    }
                    uint64_t v47 = *(void *)(v31 + 88);
                    if (!v47) {
                      goto LABEL_48;
                    }
                    uint64_t v48 = v47 - 1;
                    *(void *)(v31 + 88) = v48;
                    if (v48) {
                      goto LABEL_48;
                    }
                    __int16 v49 = *(void (***)(void))(v31 + 64);
                    if (v49)
                    {
                      *(void *)(v31 + 64) = 0;
                      v49[2](v49);
                      _Block_release(v49);
                    }
                    if (*(unsigned char *)(v31 + 72))
                    {
                      uint64_t v50 = *(const void **)(v31 + 64);
                      if (v50) {
                        _Block_release(v50);
                      }
                    }
                    goto LABEL_78;
                  }
                }
                __nwlog_obj();
                char v64 = *(const char **)(v31 + 16);
                *(_DWORD *)buf = 136446722;
                BOOL v115 = "__nw_protocol_finalize_output_frames";
                if (!v64) {
                  char v64 = "invalid";
                }
                __int16 v116 = 2082;
                BOOL v117 = (char *)v64;
                __int16 v118 = 2048;
                unsigned int v119 = (const char *)v31;
                os_log_type_t v65 = (char *)_os_log_send_and_compose_impl();
                os_log_type_t v113 = OS_LOG_TYPE_ERROR;
                char v112 = 0;
                if (__nwlog_fault(v65, &v113, &v112))
                {
                  if (v113 == OS_LOG_TYPE_FAULT)
                  {
                    char v66 = __nwlog_obj();
                    os_log_type_t v67 = v113;
                    if (!os_log_type_enabled(v66, v113)) {
                      goto LABEL_161;
                    }
                    uint64_t v68 = *(const char **)(v31 + 16);
                    if (!v68) {
                      uint64_t v68 = "invalid";
                    }
                    *(_DWORD *)buf = 136446722;
                    BOOL v115 = "__nw_protocol_finalize_output_frames";
                    __int16 v116 = 2082;
                    BOOL v117 = (char *)v68;
                    __int16 v118 = 2048;
                    unsigned int v119 = (const char *)v31;
                    BOOL v69 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback";
                    goto LABEL_160;
                  }
                  if (!v112)
                  {
                    char v66 = __nwlog_obj();
                    os_log_type_t v67 = v113;
                    if (!os_log_type_enabled(v66, v113)) {
                      goto LABEL_161;
                    }
                    uint64_t v87 = *(const char **)(v31 + 16);
                    if (!v87) {
                      uint64_t v87 = "invalid";
                    }
                    *(_DWORD *)buf = 136446722;
                    BOOL v115 = "__nw_protocol_finalize_output_frames";
                    __int16 v116 = 2082;
                    BOOL v117 = (char *)v87;
                    __int16 v118 = 2048;
                    unsigned int v119 = (const char *)v31;
                    BOOL v69 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, backtrace limit exceeded";
                    goto LABEL_160;
                  }
                  int v77 = (char *)__nw_create_backtrace_string();
                  char v66 = __nwlog_obj();
                  os_log_type_t v67 = v113;
                  BOOL v78 = os_log_type_enabled(v66, v113);
                  if (v77)
                  {
                    if (v78)
                    {
                      BOOL v79 = *(const char **)(v31 + 16);
                      if (!v79) {
                        BOOL v79 = "invalid";
                      }
                      *(_DWORD *)buf = 136446978;
                      BOOL v115 = "__nw_protocol_finalize_output_frames";
                      __int16 v116 = 2082;
                      BOOL v117 = (char *)v79;
                      __int16 v118 = 2048;
                      unsigned int v119 = (const char *)v31;
                      __int16 v120 = 2082;
                      __int16 v121 = v77;
                      _os_log_impl(&dword_1830D4000, v66, v67, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
                    }
                    free(v77);
                    goto LABEL_161;
                  }
                  if (v78)
                  {
                    uint64_t v88 = *(const char **)(v31 + 16);
                    if (!v88) {
                      uint64_t v88 = "invalid";
                    }
                    *(_DWORD *)buf = 136446722;
                    BOOL v115 = "__nw_protocol_finalize_output_frames";
                    __int16 v116 = 2082;
                    BOOL v117 = (char *)v88;
                    __int16 v118 = 2048;
                    unsigned int v119 = (const char *)v31;
                    BOOL v69 = "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, no backtrace";
LABEL_160:
                    _os_log_impl(&dword_1830D4000, v66, v67, v69, buf, 0x20u);
                  }
                }
LABEL_161:
                if (v65) {
                  free(v65);
                }
                goto LABEL_46;
              }
              __nwlog_obj();
              *(_DWORD *)buf = 136446210;
              BOOL v115 = "__nw_protocol_finalize_output_frames";
              uint64_t v31 = _os_log_send_and_compose_impl();
              os_log_type_t v113 = OS_LOG_TYPE_ERROR;
              char v112 = 0;
              if (__nwlog_fault((const char *)v31, &v113, &v112))
              {
                if (v113 == OS_LOG_TYPE_FAULT)
                {
                  __int16 v74 = __nwlog_obj();
                  os_log_type_t v75 = v113;
                  if (!os_log_type_enabled(v74, v113)) {
                    goto LABEL_168;
                  }
                  *(_DWORD *)buf = 136446210;
                  BOOL v115 = "__nw_protocol_finalize_output_frames";
                  BOOL v76 = "%{public}s called with null protocol";
                  goto LABEL_167;
                }
                if (!v112)
                {
                  __int16 v74 = __nwlog_obj();
                  os_log_type_t v75 = v113;
                  if (!os_log_type_enabled(v74, v113)) {
                    goto LABEL_168;
                  }
                  *(_DWORD *)buf = 136446210;
                  BOOL v115 = "__nw_protocol_finalize_output_frames";
                  BOOL v76 = "%{public}s called with null protocol, backtrace limit exceeded";
                  goto LABEL_167;
                }
                os_log_type_t v85 = (char *)__nw_create_backtrace_string();
                __int16 v74 = __nwlog_obj();
                os_log_type_t v75 = v113;
                BOOL v86 = os_log_type_enabled(v74, v113);
                if (v85)
                {
                  if (v86)
                  {
                    *(_DWORD *)buf = 136446466;
                    BOOL v115 = "__nw_protocol_finalize_output_frames";
                    __int16 v116 = 2082;
                    BOOL v117 = v85;
                    _os_log_impl(&dword_1830D4000, v74, v75, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
                  }
                  free(v85);
                  if (!v31) {
                    goto LABEL_48;
                  }
LABEL_78:
                  free((void *)v31);
LABEL_48:
                  _Block_object_dispose(v109, 8);
                  goto LABEL_49;
                }
                if (v86)
                {
                  *(_DWORD *)buf = 136446210;
                  BOOL v115 = "__nw_protocol_finalize_output_frames";
                  BOOL v76 = "%{public}s called with null protocol, no backtrace";
LABEL_167:
                  _os_log_impl(&dword_1830D4000, v74, v75, v76, buf, 0xCu);
                }
              }
LABEL_168:
              if (!v31) {
                goto LABEL_48;
              }
              goto LABEL_78;
            }
LABEL_27:
            if ((a3[17] & 1) == 0)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v24 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136447234;
                BOOL v115 = "nw_protocol_ipv4_frame_output_finalizer";
                __int16 v116 = 2082;
                BOOL v117 = (char *)a3 + 137;
                __int16 v118 = 2080;
                unsigned int v119 = " ";
                __int16 v120 = 2048;
                __int16 v121 = (char *)a3;
                __int16 v122 = 1024;
                unsigned int v123 = v111;
                _os_log_impl(&dword_1830D4000, v24, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s%p Not enough bytes to fragment %u", buf, 0x30u);
              }
            }
            v103[0] = MEMORY[0x1E4F143A8];
            v103[1] = 0x40000000;
            char v104 = ___ZL39nw_protocol_ipv4_frame_output_finalizerP8nw_framebPv_block_invoke;
            char v105 = &__block_descriptor_tmp_32_87661;
            char v106 = v107;
            uint64_t v25 = v107[0];
            do
            {
              if (!v25) {
                break;
              }
              uint64_t v26 = *(void *)(v25 + 32);
              char v27 = ((uint64_t (*)(void *))v104)(v103);
              uint64_t v25 = v26;
            }
            while ((v27 & 1) != 0);
            goto LABEL_48;
          }
LABEL_14:
          if ((_UNKNOWN *)*(a3 - 7) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v39 = *(a3 - 1);
            if (v39)
            {
              uint64_t v40 = v39 - 1;
              *(a3 - 1) = v40;
              if (!v40)
              {
                int v41 = (void (**)(void))*(a3 - 4);
                if (v41)
                {
                  *(a3 - 4) = 0;
                  v41[2](v41);
                  _Block_release(v41);
                }
                if (*(unsigned char *)(a3 - 3))
                {
                  BOOL v42 = (const void *)*(a3 - 4);
                  if (v42) {
                    _Block_release(v42);
                  }
                }
                free(a3 - 12);
              }
            }
          }
          goto LABEL_15;
        }
        __nwlog_obj();
        *(_DWORD *)buf = 136446210;
        BOOL v115 = "__nw_protocol_get_output_frames";
        int v57 = (char *)_os_log_send_and_compose_impl();
        os_log_type_t v113 = OS_LOG_TYPE_ERROR;
        char v112 = 0;
        if (__nwlog_fault(v57, &v113, &v112))
        {
          if (v113 == OS_LOG_TYPE_FAULT)
          {
            int v58 = __nwlog_obj();
            os_log_type_t v59 = v113;
            if (!os_log_type_enabled(v58, v113)) {
              goto LABEL_154;
            }
            *(_DWORD *)buf = 136446210;
            BOOL v115 = "__nw_protocol_get_output_frames";
            __int16 v60 = "%{public}s called with null protocol";
            goto LABEL_153;
          }
          if (!v112)
          {
            int v58 = __nwlog_obj();
            os_log_type_t v59 = v113;
            if (!os_log_type_enabled(v58, v113)) {
              goto LABEL_154;
            }
            *(_DWORD *)buf = 136446210;
            BOOL v115 = "__nw_protocol_get_output_frames";
            __int16 v60 = "%{public}s called with null protocol, backtrace limit exceeded";
            goto LABEL_153;
          }
          os_log_type_t v70 = (char *)__nw_create_backtrace_string();
          int v58 = __nwlog_obj();
          os_log_type_t v59 = v113;
          BOOL v71 = os_log_type_enabled(v58, v113);
          if (v70)
          {
            if (v71)
            {
              *(_DWORD *)buf = 136446466;
              BOOL v115 = "__nw_protocol_get_output_frames";
              __int16 v116 = 2082;
              BOOL v117 = v70;
              _os_log_impl(&dword_1830D4000, v58, v59, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(v70);
            goto LABEL_154;
          }
          if (v71)
          {
            *(_DWORD *)buf = 136446210;
            BOOL v115 = "__nw_protocol_get_output_frames";
            __int16 v60 = "%{public}s called with null protocol, no backtrace";
LABEL_153:
            _os_log_impl(&dword_1830D4000, v58, v59, v60, buf, 0xCu);
          }
        }
LABEL_154:
        if (v57) {
          free(v57);
        }
        goto LABEL_27;
      }
    }
  }
LABEL_49:
  buffer = (void *)nw_frame_get_buffer((uint64_t)a1, 0);
  if (buffer) {
    free(buffer);
  }
  uint64_t v37 = *((void *)a1 + 2);
  int v38 = (void *)*((void *)a1 + 3);
  if (v37)
  {
    *(void *)(v37 + 24) = v38;
    int v38 = (void *)*((void *)a1 + 3);
  }
  else
  {
    a3[13] = v38;
  }
  void *v38 = v37;
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  os_release(a1);
}

uint64_t ___ZL39nw_protocol_ipv4_frame_output_finalizerP8nw_framebPv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  unint64_t v3 = *(void **)(a2 + 40);
  if (v2)
  {
    *(void *)(v2 + 40) = v3;
    unint64_t v3 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 8) = v3;
  }
  *unint64_t v3 = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return 1;
}

uint64_t ___ZL39nw_protocol_ipv4_frame_output_finalizerP8nw_framebPv_block_invoke_33(uint64_t a1, uint64_t a2)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) >= *(_DWORD *)(a1 + 72)
    || (v53 = 0, uint64_t v4 = nw_frame_unclaimed_bytes(a2, &v53), v5 = v53, v53 <= 0x13))
  {
    uint64_t v6 = *(void *)(a2 + 32);
    uint64_t v7 = *(void **)(a2 + 40);
    if (v6)
    {
      *(void *)(v6 + 40) = v7;
      uint64_t v7 = *(void **)(a2 + 40);
    }
    else
    {
      *(void *)(*(void *)(a1 + 40) + 8) = v7;
    }
    *uint64_t v7 = v6;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    nw_frame_finalize(a2);
    return 1;
  }
  unsigned int v8 = (unsigned __int16 *)v4;
  uint64_t v9 = *(void *)(a1 + 48);
  if (v4)
  {
    unsigned int v10 = *(_DWORD *)(v9 + 116);
    if (v53 > v10)
    {
      unsigned int v53 = *(_DWORD *)(v9 + 116);
      unsigned int v5 = v10;
    }
    unint64_t v11 = v5 - 20;
    unint64_t v12 = (*(_DWORD *)(a1 + 72) - *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    if ((v11 & 0xFFFFFFF8) >= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11 & 0xFFFFFFF8;
    }
    uint64_t v14 = *(void *)(v9 + 48);
    if (v14) {
      ++*(void *)(v14 + 232);
    }
    *(void *)(v4 + 12) = *(void *)(v9 + 56);
    *(unsigned char *)(v4 + 9) = *(unsigned char *)(v9 + 134);
    *(unsigned char *)(v4 + 8) = *(unsigned char *)(v9 + 135);
    *(unsigned char *)uint64_t v4 = 69;
    *(_WORD *)(v4 + 2) = bswap32(v13 + 20) >> 16;
    uint64_t v15 = *(void *)(a1 + 56);
    if (v15)
    {
      char v16 = *(unsigned char *)(v15 + 186) & 3;
      goto LABEL_17;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v57 = "__nw_frame_get_ecn_flag";
    uint64_t v33 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    int v52 = (char *)v33;
    if (__nwlog_fault(v33, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v34 = __nwlog_obj();
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v34, type))
        {
          *(_DWORD *)buf = 136446210;
          int v57 = "__nw_frame_get_ecn_flag";
          BOOL v36 = "%{public}s called with null frame";
LABEL_67:
          _os_log_impl(&dword_1830D4000, v34, v35, v36, buf, 0xCu);
        }
      }
      else
      {
        unint64_t v47 = v12;
        if (v54)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          uint64_t v34 = __nwlog_obj();
          os_log_type_t v35 = type;
          BOOL v49 = os_log_type_enabled(v34, type);
          if (backtrace_string)
          {
            if (v49)
            {
              *(_DWORD *)buf = 136446466;
              int v57 = "__nw_frame_get_ecn_flag";
              __int16 v58 = 2082;
              os_log_type_t v59 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v34, v35, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
            }
            free(backtrace_string);
            unint64_t v12 = v47;
            goto LABEL_68;
          }
          unint64_t v12 = v47;
          if (v49)
          {
            *(_DWORD *)buf = 136446210;
            int v57 = "__nw_frame_get_ecn_flag";
            BOOL v36 = "%{public}s called with null frame, no backtrace";
            goto LABEL_67;
          }
        }
        else
        {
          uint64_t v34 = __nwlog_obj();
          os_log_type_t v35 = type;
          if (os_log_type_enabled(v34, type))
          {
            *(_DWORD *)buf = 136446210;
            int v57 = "__nw_frame_get_ecn_flag";
            BOOL v36 = "%{public}s called with null frame, backtrace limit exceeded";
            goto LABEL_67;
          }
        }
      }
    }
LABEL_68:
    if (v52) {
      free(v52);
    }
    char v16 = 0;
LABEL_17:
    *((unsigned char *)v8 + 1) = v16;
    unsigned int v17 = (bswap32(*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) >> 3) >> 16) | (32 * (v11 <= v12));
    v8[3] = v17;
    int v18 = *(unsigned __int16 *)(a1 + 76);
    v8[2] = v18;
    v8[5] = 0;
    uint64_t v19 = *(void *)(a1 + 48);
    if ((*(unsigned char *)(v19 + 136) & 0x10) == 0)
    {
      if ((v8 & 3) != 0)
      {
        unsigned int v20 = vaddvq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)(v8 + 6))) + v8[1] + *v8 + v18 + v8[4] + v17;
        LODWORD(v21) = HIWORD(v20) + (unsigned __int16)v20 + ((HIWORD(v20) + (unsigned __int16)v20) >> 16);
      }
      else
      {
        unint64_t v23 = vaddlvq_u32(*(uint32x4_t *)v8);
        unint64_t v24 = ((v23 + *((unsigned int *)v8 + 4)) >> 32) + (v23 + *((_DWORD *)v8 + 4));
        unint64_t v21 = (((v24 >> 16) + (unsigned __int16)v24) >> 16) + (unsigned __int16)(WORD1(v24) + v24);
        LOWORD(v21) = WORD1(v21) + v21;
      }
      v8[5] = ~(_WORD)v21;
      uint64_t v25 = *(void *)(v19 + 48);
      if (v25) {
        *(int64x2_t *)(v25 + 312) = vaddq_s64(*(int64x2_t *)(v25 + 312), (int64x2_t)xmmword_183D5CDF0);
      }
LABEL_26:
      ++*(void *)v19;
      if ((*(unsigned char *)(v19 + 136) & 1) == 0)
      {
        if (gLogDatapath)
        {
          uint64_t v37 = __nwlog_obj();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v38 = *(void *)(a1 + 48);
            uint64_t v39 = (const char *)(v38 + 137);
            uint64_t v40 = "";
            if (!v38) {
              uint64_t v39 = "";
            }
            int v41 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
            if (v38) {
              uint64_t v40 = " ";
            }
            int v42 = *(unsigned __int16 *)(a1 + 76);
            *(_DWORD *)buf = 136447746;
            int v57 = "nw_protocol_ipv4_frame_output_finalizer_block_invoke";
            __int16 v58 = 2082;
            os_log_type_t v59 = (void *)v39;
            __int16 v60 = 2080;
            int v61 = v40;
            __int16 v62 = 2048;
            uint64_t v63 = v38;
            __int16 v64 = 1024;
            int v65 = v13;
            __int16 v66 = 1024;
            int v67 = v41;
            __int16 v68 = 1024;
            int v69 = v42;
            _os_log_impl(&dword_1830D4000, v37, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s%p Writing fragment of length %u at offset %u with ID %u", buf, 0x3Cu);
          }
        }
      }
      memcpy(v8 + 10, (const void *)(*(void *)(a1 + 64) + *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)), v13);
      nw_frame_claim(a2, v26, v13 + 20, 0);
      nw_frame_collapse(a2);
      nw_frame_unclaim(a2, v27, v13 + 20, 0);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += v13;
      return 1;
    }
    uint64_t v22 = *(void *)(a1 + 56);
    if (v22)
    {
      if ((*(_WORD *)(v22 + 204) & 0x100) != 0) {
        *(unsigned char *)(v22 + 203) |= 4u;
      }
      goto LABEL_26;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v57 = "__nw_frame_add_internet_csum_flags";
    uint64_t v43 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v54 = 0;
    if (__nwlog_fault(v43, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v44 = __nwlog_obj();
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          int v57 = "__nw_frame_add_internet_csum_flags";
          int v46 = "%{public}s called with null frame";
LABEL_75:
          _os_log_impl(&dword_1830D4000, v44, v45, v46, buf, 0xCu);
        }
      }
      else if (v54)
      {
        uint64_t v50 = (char *)__nw_create_backtrace_string();
        uint64_t v44 = __nwlog_obj();
        os_log_type_t v45 = type;
        BOOL v51 = os_log_type_enabled(v44, type);
        if (v50)
        {
          if (v51)
          {
            *(_DWORD *)buf = 136446466;
            int v57 = "__nw_frame_add_internet_csum_flags";
            __int16 v58 = 2082;
            os_log_type_t v59 = v50;
            _os_log_impl(&dword_1830D4000, v44, v45, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v50);
          goto LABEL_76;
        }
        if (v51)
        {
          *(_DWORD *)buf = 136446210;
          int v57 = "__nw_frame_add_internet_csum_flags";
          int v46 = "%{public}s called with null frame, no backtrace";
          goto LABEL_75;
        }
      }
      else
      {
        uint64_t v44 = __nwlog_obj();
        os_log_type_t v45 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          int v57 = "__nw_frame_add_internet_csum_flags";
          int v46 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_75;
        }
      }
    }
LABEL_76:
    if (v43) {
      free(v43);
    }
    uint64_t v19 = *(void *)(a1 + 48);
    goto LABEL_26;
  }
  if (!v9 || (*(unsigned char *)(v9 + 136) & 1) == 0)
  {
    uint64_t v29 = __nwlog_obj();
    BOOL v30 = os_log_type_enabled(v29, OS_LOG_TYPE_INFO);
    uint64_t v9 = *(void *)(a1 + 48);
    if (v30)
    {
      uint64_t v31 = (const char *)(v9 + 137);
      if (!v9) {
        uint64_t v31 = "";
      }
      *(_DWORD *)buf = 136446978;
      int v57 = "nw_protocol_ipv4_frame_output_finalizer_block_invoke";
      __int16 v58 = 2082;
      os_log_type_t v59 = (void *)v31;
      uint64_t v32 = " ";
      if (!v9) {
        uint64_t v32 = "";
      }
      __int16 v60 = 2080;
      int v61 = v32;
      __int16 v62 = 2048;
      uint64_t v63 = v9;
      _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s%p Fragment frame is no longer valid", buf, 0x2Au);
      uint64_t v9 = *(void *)(a1 + 48);
    }
  }
  *(void *)(v9 + 48) = 0;
  return 1;
}

uint64_t ___ZL33nw_protocol_ipv4_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_22(void *a1, uint64_t a2)
{
  if (!nw_protocol_ipv4_process_input_frame(a1[7], a2, a1[8], a1[9], (_DWORD *)(*(void *)(a1[4] + 8) + 24), (_DWORD *)(*(void *)(a1[5] + 8) + 24)))
  {
    --*(_DWORD *)(*(void *)(a1[4] + 8) + 24);
    uint64_t v4 = *(void *)(a2 + 32);
    unsigned int v5 = *(void **)(a2 + 40);
    if (v4)
    {
      *(void *)(v4 + 40) = v5;
      unsigned int v5 = *(void **)(a2 + 40);
    }
    else
    {
      *(void *)(a1[8] + 8) = v5;
    }
    void *v5 = v4;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    nw_frame_finalize(a2);
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  }
  return 1;
}

uint64_t ___ZL33nw_protocol_ipv4_get_input_framesP11nw_protocolS0_jjjP16nw_frame_array_s_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void **)(a2 + 40);
  if (v3)
  {
    *(void *)(v3 + 40) = v4;
    uint64_t v4 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 8) = v4;
  }
  *uint64_t v4 = v3;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5 || (*(unsigned char *)(v5 + 136) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      unsigned int v8 = (const char *)(v7 + 137);
      if (!v7) {
        unsigned int v8 = "";
      }
      int v11 = 136446978;
      unint64_t v12 = "nw_protocol_ipv4_get_input_frames_block_invoke_2";
      __int16 v13 = 2082;
      uint64_t v14 = v8;
      if (v7) {
        uint64_t v9 = " ";
      }
      else {
        uint64_t v9 = "";
      }
      __int16 v15 = 2080;
      char v16 = v9;
      __int16 v17 = 2048;
      uint64_t v18 = v7;
      _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s%p Dropping unused IPv4 extra fragment", (uint8_t *)&v11, 0x2Au);
    }
  }
  return 1;
}

uint64_t ___ZL36nw_protocol_ipv4_process_input_frameP16nw_protocol_ipv4P8nw_frameP16nw_frame_array_sS4_PjS5__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  unsigned int v41 = 0;
  uint64_t v4 = nw_frame_unclaimed_bytes(a2, &v41);
  if (v4)
  {
    if (v41 > 0x13)
    {
      uint64_t v5 = v41 + ((bswap32(*(unsigned __int16 *)(v4 + 6)) >> 13) & 0xFFF8) - 20;
      uint64_t result = 1;
      if (v5 != *(unsigned __int16 *)(a1 + 56)) {
        return result;
      }
      uint64_t v7 = *(void *)(a1 + 48);
      unsigned int v8 = (void *)(*(void *)(a1 + 40) + 72);
      uint64_t v10 = *(void *)(a2 + 32);
      uint64_t v9 = (void *)(a2 + 32);
      *(void *)(v7 + 32) = v10;
      int v11 = (void *)(v10 + 40);
      if (v10) {
        unsigned int v8 = v11;
      }
      *unsigned int v8 = v7 + 32;
      void *v9 = v7;
      *(void *)(v7 + 40) = v9;
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      return 0;
    }
    uint64_t v17 = *(void *)(a1 + 40);
    if (v17 && (*(unsigned char *)(v17 + 136) & 1) != 0) {
      return 0;
    }
    __nwlog_obj();
    uint64_t v18 = *(void *)(a1 + 40);
    uint64_t v19 = (const char *)(v18 + 137);
    *(_DWORD *)buf = 136447234;
    uint64_t v43 = "nw_protocol_ipv4_process_input_frame_block_invoke";
    __int16 v44 = 2082;
    if (v18)
    {
      unsigned int v20 = " ";
    }
    else
    {
      uint64_t v19 = "";
      unsigned int v20 = "";
    }
    os_log_type_t v45 = v19;
    __int16 v46 = 2080;
    unint64_t v47 = v20;
    __int16 v48 = 2048;
    uint64_t v49 = v18;
    __int16 v50 = 1024;
    unsigned int v51 = v41;
    unint64_t v21 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v39 = 0;
    if (__nwlog_fault(v21, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_49;
        }
        uint64_t v24 = *(void *)(a1 + 40);
        uint64_t v25 = (const char *)(v24 + 137);
        if (v24)
        {
          uint64_t v26 = " ";
        }
        else
        {
          uint64_t v25 = "";
          uint64_t v26 = "";
        }
        *(_DWORD *)buf = 136447234;
        uint64_t v43 = "nw_protocol_ipv4_process_input_frame_block_invoke";
        __int16 v44 = 2082;
        os_log_type_t v45 = v25;
        __int16 v46 = 2080;
        unint64_t v47 = v26;
        __int16 v48 = 2048;
        uint64_t v49 = v24;
        __int16 v50 = 1024;
        unsigned int v51 = v41;
        uint64_t v27 = "%{public}s %{public}s%s%p Invalid IP reassembly frame for ordering (length %u)";
        goto LABEL_48;
      }
      if (!v39)
      {
        uint64_t v22 = __nwlog_obj();
        os_log_type_t v23 = type;
        if (!os_log_type_enabled(v22, type)) {
          goto LABEL_49;
        }
        uint64_t v33 = *(void *)(a1 + 40);
        uint64_t v34 = (const char *)(v33 + 137);
        if (v33)
        {
          os_log_type_t v35 = " ";
        }
        else
        {
          uint64_t v34 = "";
          os_log_type_t v35 = "";
        }
        *(_DWORD *)buf = 136447234;
        uint64_t v43 = "nw_protocol_ipv4_process_input_frame_block_invoke";
        __int16 v44 = 2082;
        os_log_type_t v45 = v34;
        __int16 v46 = 2080;
        unint64_t v47 = v35;
        __int16 v48 = 2048;
        uint64_t v49 = v33;
        __int16 v50 = 1024;
        unsigned int v51 = v41;
        uint64_t v27 = "%{public}s %{public}s%s%p Invalid IP reassembly frame for ordering (length %u), backtrace limit exceeded";
        goto LABEL_48;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v22 = __nwlog_obj();
      os_log_type_t v23 = type;
      BOOL v29 = os_log_type_enabled(v22, type);
      if (backtrace_string)
      {
        if (v29)
        {
          uint64_t v30 = *(void *)(a1 + 40);
          uint64_t v31 = (const char *)(v30 + 137);
          uint64_t v32 = "";
          if (v30) {
            uint64_t v32 = " ";
          }
          else {
            uint64_t v31 = "";
          }
          *(_DWORD *)buf = 136447490;
          uint64_t v43 = "nw_protocol_ipv4_process_input_frame_block_invoke";
          __int16 v44 = 2082;
          os_log_type_t v45 = v31;
          __int16 v46 = 2080;
          unint64_t v47 = v32;
          __int16 v48 = 2048;
          uint64_t v49 = v30;
          __int16 v50 = 1024;
          unsigned int v51 = v41;
          __int16 v52 = 2082;
          unsigned int v53 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v22, v23, "%{public}s %{public}s%s%p Invalid IP reassembly frame for ordering (length %u), dumping backtrace:%{public}s", buf, 0x3Au);
        }
        free(backtrace_string);
        goto LABEL_49;
      }
      BOOL v36 = "";
      if (v29)
      {
        uint64_t v37 = *(void *)(a1 + 40);
        uint64_t v38 = (const char *)(v37 + 137);
        if (v37) {
          BOOL v36 = " ";
        }
        else {
          uint64_t v38 = "";
        }
        *(_DWORD *)buf = 136447234;
        uint64_t v43 = "nw_protocol_ipv4_process_input_frame_block_invoke";
        __int16 v44 = 2082;
        os_log_type_t v45 = v38;
        __int16 v46 = 2080;
        unint64_t v47 = v36;
        __int16 v48 = 2048;
        uint64_t v49 = v37;
        __int16 v50 = 1024;
        unsigned int v51 = v41;
        uint64_t v27 = "%{public}s %{public}s%s%p Invalid IP reassembly frame for ordering (length %u), no backtrace";
LABEL_48:
        _os_log_impl(&dword_1830D4000, v22, v23, v27, buf, 0x30u);
      }
    }
LABEL_49:
    if (v21) {
      free(v21);
    }
    return 0;
  }
  uint64_t v12 = *(void *)(a1 + 40);
  if (!v12 || (*(unsigned char *)(v12 + 136) & 1) == 0)
  {
    __int16 v13 = __nwlog_obj();
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
    uint64_t v12 = *(void *)(a1 + 40);
    if (v14)
    {
      __int16 v15 = (const char *)(v12 + 137);
      if (!v12) {
        __int16 v15 = "";
      }
      *(_DWORD *)buf = 136446978;
      uint64_t v43 = "nw_protocol_ipv4_process_input_frame_block_invoke";
      __int16 v44 = 2082;
      os_log_type_t v45 = v15;
      char v16 = " ";
      if (!v12) {
        char v16 = "";
      }
      __int16 v46 = 2080;
      unint64_t v47 = v16;
      __int16 v48 = 2048;
      uint64_t v49 = v12;
      _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s%p Frame is no longer valid", buf, 0x2Au);
      uint64_t v12 = *(void *)(a1 + 40);
    }
  }
  uint64_t result = 0;
  *(void *)(v12 + 48) = 0;
  return result;
}

uint64_t ___ZL43nw_protocol_ipv4_append_reassembled_packetsP16nw_protocol_ipv4P16nw_frame_array_sPb_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  unsigned int v28 = 0;
  uint64_t v3 = nw_frame_unclaimed_bytes(a2, &v28);
  if (v3)
  {
    uint64_t v4 = v3;
    unsigned int v5 = (bswap32(*(unsigned __int16 *)(v3 + 6)) >> 13) & 0x7FFF8;
    uint64_t v6 = bswap32(*(unsigned __int16 *)(v3 + 2)) >> 16;
    uint64_t v7 = a1[6];
    if (!v7 || (*(unsigned char *)(v7 + 136) & 1) == 0)
    {
      if (gLogDatapath)
      {
        uint64_t v22 = __nwlog_obj();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v23 = a1[6];
          uint64_t v24 = (const char *)(v23 + 137);
          uint64_t v25 = "";
          if (!v23) {
            uint64_t v24 = "";
          }
          int v26 = *(unsigned __int16 *)(v23 + 132);
          if (v23) {
            uint64_t v25 = " ";
          }
          int v27 = *(unsigned __int16 *)(*(void *)(a1[4] + 8) + 24);
          *(_DWORD *)buf = 136448258;
          uint64_t v30 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
          __int16 v31 = 2082;
          uint64_t v32 = v24;
          __int16 v33 = 2080;
          uint64_t v34 = v25;
          __int16 v35 = 2048;
          uint64_t v36 = v23;
          __int16 v37 = 1024;
          *(_DWORD *)uint64_t v38 = v26;
          *(_WORD *)&v38[4] = 1024;
          *(_DWORD *)&v38[6] = v28;
          *(_WORD *)char v39 = 1024;
          *(_DWORD *)&v39[2] = v6;
          __int16 v40 = 1024;
          int v41 = (unsigned __int16)v5;
          __int16 v42 = 1024;
          int v43 = v27;
          _os_log_impl(&dword_1830D4000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%s%p Examining fragment for IP ID %u, length %u ip_len %u offset %u aggregate length %u", buf, 0x48u);
        }
      }
    }
    uint64_t v8 = *(void *)(a1[4] + 8);
    if (*(unsigned __int16 *)(v8 + 24) == (unsigned __int16)v5)
    {
      unint64_t v9 = v6 - 20 + (unsigned __int16)v5;
      *(_WORD *)(v8 + 24) = v9;
      if (!__CFADD__(v6 - 20, (unsigned __int16)v5) && v9 < 0x10000)
      {
        uint64_t result = 1;
        if ((*(_WORD *)(v4 + 6) & 0x20) == 0)
        {
          *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
          return 0;
        }
        return result;
      }
      uint64_t v11 = a1[6];
      if (!v11 || (*(unsigned char *)(v11 + 136) & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v12 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
        {
          uint64_t v13 = a1[6];
          BOOL v14 = (const char *)(v13 + 137);
          __int16 v15 = "";
          if (v13) {
            __int16 v15 = " ";
          }
          else {
            BOOL v14 = "";
          }
          int v16 = *(unsigned __int16 *)(*(void *)(a1[4] + 8) + 24);
          *(_DWORD *)buf = 136447490;
          uint64_t v30 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
          __int16 v31 = 2082;
          uint64_t v32 = v14;
          __int16 v33 = 2080;
          uint64_t v34 = v15;
          __int16 v35 = 2048;
          uint64_t v36 = v13;
          __int16 v37 = 2048;
          *(void *)uint64_t v38 = v28 - 20;
          *(_WORD *)&v38[8] = 1024;
          *(_DWORD *)char v39 = v16;
          _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%s%p Cannot add %lu to existing offset %u", buf, 0x3Au);
        }
      }
    }
    uint64_t result = 0;
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 0;
    return result;
  }
  uint64_t v17 = a1[6];
  if (!v17 || (*(unsigned char *)(v17 + 136) & 1) == 0)
  {
    uint64_t v18 = __nwlog_obj();
    BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_INFO);
    uint64_t v17 = a1[6];
    if (v19)
    {
      unsigned int v20 = (const char *)(v17 + 137);
      if (!v17) {
        unsigned int v20 = "";
      }
      *(_DWORD *)buf = 136446978;
      uint64_t v30 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
      __int16 v31 = 2082;
      uint64_t v32 = v20;
      unint64_t v21 = " ";
      if (!v17) {
        unint64_t v21 = "";
      }
      __int16 v33 = 2080;
      uint64_t v34 = v21;
      __int16 v35 = 2048;
      uint64_t v36 = v17;
      _os_log_impl(&dword_1830D4000, v18, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s%p Frame is no longer valid", buf, 0x2Au);
      uint64_t v17 = a1[6];
    }
  }
  uint64_t result = 0;
  *(void *)(v17 + 48) = 0;
  return result;
}

uint64_t ___ZL43nw_protocol_ipv4_append_reassembled_packetsP16nw_protocol_ipv4P16nw_frame_array_sPb_block_invoke_27(uint64_t a1, uint64_t a2)
{
  *(void *)&v130[11] = *MEMORY[0x1E4F143B8];
  unsigned int v118 = 0;
  uint64_t v3 = nw_frame_unclaimed_bytes(a2, &v118);
  if (v3)
  {
    if (v118 <= 0x13)
    {
      uint64_t v43 = *(void *)(a1 + 40);
      if (v43 && (*(unsigned char *)(v43 + 136) & 1) != 0) {
        return 0;
      }
      __nwlog_obj();
      uint64_t v44 = *(void *)(a1 + 40);
      os_log_type_t v45 = (const char *)(v44 + 137);
      *(_DWORD *)buf = 136447234;
      __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
      __int16 v121 = 2082;
      if (v44)
      {
        __int16 v46 = " ";
      }
      else
      {
        os_log_type_t v45 = "";
        __int16 v46 = "";
      }
      __int16 v122 = v45;
      __int16 v123 = 2080;
      __int16 v124 = v46;
      __int16 v125 = 2048;
      uint64_t v126 = v44;
      __int16 v127 = 1024;
      unsigned int v128 = v118;
      unint64_t v47 = (const char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v116 = 0;
      if (__nwlog_fault(v47, &type, &v116))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __int16 v48 = __nwlog_obj();
          os_log_type_t v49 = type;
          if (!os_log_type_enabled(v48, type)) {
            goto LABEL_143;
          }
          uint64_t v50 = *(void *)(a1 + 40);
          unsigned int v51 = (const char *)(v50 + 137);
          if (v50)
          {
            __int16 v52 = " ";
          }
          else
          {
            unsigned int v51 = "";
            __int16 v52 = "";
          }
          *(_DWORD *)buf = 136447234;
          __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
          __int16 v121 = 2082;
          __int16 v122 = v51;
          __int16 v123 = 2080;
          __int16 v124 = v52;
          __int16 v125 = 2048;
          uint64_t v126 = v50;
          __int16 v127 = 1024;
          unsigned int v128 = v118;
          unsigned int v53 = "%{public}s %{public}s%s%p Invalid IP reassembly frame (length %u)";
        }
        else if (v116)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __int16 v48 = __nwlog_obj();
          os_log_type_t v49 = type;
          BOOL v75 = os_log_type_enabled(v48, type);
          if (backtrace_string)
          {
            if (v75)
            {
              uint64_t v76 = *(void *)(a1 + 40);
              int v77 = (const char *)(v76 + 137);
              if (v76)
              {
                BOOL v78 = " ";
              }
              else
              {
                int v77 = "";
                BOOL v78 = "";
              }
              *(_DWORD *)buf = 136447490;
              __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
              __int16 v121 = 2082;
              __int16 v122 = v77;
              __int16 v123 = 2080;
              __int16 v124 = v78;
              __int16 v125 = 2048;
              uint64_t v126 = v76;
              __int16 v127 = 1024;
              unsigned int v128 = v118;
              __int16 v129 = 2082;
              *(void *)int v130 = backtrace_string;
              _os_log_impl(&dword_1830D4000, v48, v49, "%{public}s %{public}s%s%p Invalid IP reassembly frame (length %u), dumping backtrace:%{public}s", buf, 0x3Au);
            }
            free(backtrace_string);
            goto LABEL_143;
          }
          if (!v75) {
            goto LABEL_143;
          }
          uint64_t v102 = *(void *)(a1 + 40);
          uint64_t v103 = (const char *)(v102 + 137);
          if (v102)
          {
            char v104 = " ";
          }
          else
          {
            uint64_t v103 = "";
            char v104 = "";
          }
          *(_DWORD *)buf = 136447234;
          __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
          __int16 v121 = 2082;
          __int16 v122 = v103;
          __int16 v123 = 2080;
          __int16 v124 = v104;
          __int16 v125 = 2048;
          uint64_t v126 = v102;
          __int16 v127 = 1024;
          unsigned int v128 = v118;
          unsigned int v53 = "%{public}s %{public}s%s%p Invalid IP reassembly frame (length %u), no backtrace";
        }
        else
        {
          __int16 v48 = __nwlog_obj();
          os_log_type_t v49 = type;
          if (!os_log_type_enabled(v48, type)) {
            goto LABEL_143;
          }
          uint64_t v91 = *(void *)(a1 + 40);
          __int16 v92 = (const char *)(v91 + 137);
          if (v91)
          {
            long long v93 = " ";
          }
          else
          {
            __int16 v92 = "";
            long long v93 = "";
          }
          *(_DWORD *)buf = 136447234;
          __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
          __int16 v121 = 2082;
          __int16 v122 = v92;
          __int16 v123 = 2080;
          __int16 v124 = v93;
          __int16 v125 = 2048;
          uint64_t v126 = v91;
          __int16 v127 = 1024;
          unsigned int v128 = v118;
          unsigned int v53 = "%{public}s %{public}s%s%p Invalid IP reassembly frame (length %u), backtrace limit exceeded";
        }
        char v105 = v48;
        os_log_type_t v106 = v49;
        uint32_t v107 = 48;
LABEL_142:
        _os_log_impl(&dword_1830D4000, v105, v106, v53, buf, v107);
      }
    }
    else
    {
      unsigned int v4 = bswap32(*(unsigned __int16 *)(v3 + 2)) >> 16;
      if (v118 >= v4)
      {
        unsigned int v5 = v4 - 20;
        uint64_t v6 = *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        if (v6 + v4 - 20 <= *(_DWORD *)(a1 + 56))
        {
          memcpy((void *)(*(void *)(a1 + 48) + v6), (const void *)(v3 + 20), v4 - 20);
          uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
          int v8 = *(_DWORD *)(v7 + 24);
          *(_DWORD *)(v7 + 24) = v8 + v5;
          if (!__CFADD__(v8, v5)) {
            return 1;
          }
          uint64_t v9 = *(void *)(a1 + 40);
          if (v9 && (*(unsigned char *)(v9 + 136) & 1) != 0) {
            return 0;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v10 = *(void *)(a1 + 40);
          uint64_t v11 = (const char *)(v10 + 137);
          if (v10)
          {
            uint64_t v12 = " ";
          }
          else
          {
            uint64_t v11 = "";
            uint64_t v12 = "";
          }
          int v13 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
          *(_DWORD *)buf = 136447490;
          __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
          __int16 v121 = 2082;
          __int16 v122 = v11;
          __int16 v123 = 2080;
          __int16 v124 = v12;
          __int16 v125 = 2048;
          uint64_t v126 = v10;
          __int16 v127 = 1024;
          unsigned int v128 = v4 - 20;
          __int16 v129 = 1024;
          *(_DWORD *)int v130 = v13;
          BOOL v14 = (const char *)_os_log_send_and_compose_impl();
          os_log_type_t type = OS_LOG_TYPE_ERROR;
          char v116 = 0;
          if (__nwlog_fault(v14, &type, &v116))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v15 = gLogObj;
              os_log_type_t v16 = type;
              if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
                goto LABEL_38;
              }
              uint64_t v17 = *(void *)(a1 + 40);
              uint64_t v18 = (const char *)(v17 + 137);
              if (v17)
              {
                BOOL v19 = " ";
              }
              else
              {
                uint64_t v18 = "";
                BOOL v19 = "";
              }
              int v20 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
              *(_DWORD *)buf = 136447490;
              __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
              __int16 v121 = 2082;
              __int16 v122 = v18;
              __int16 v123 = 2080;
              __int16 v124 = v19;
              __int16 v125 = 2048;
              uint64_t v126 = v17;
              __int16 v127 = 1024;
              unsigned int v128 = v4 - 20;
              __int16 v129 = 1024;
              *(_DWORD *)int v130 = v20;
              unint64_t v21 = "%{public}s %{public}s%s%p Cannot add %u to new frame offset %u";
              goto LABEL_37;
            }
            if (!v116)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v15 = gLogObj;
              os_log_type_t v16 = type;
              if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
                goto LABEL_38;
              }
              uint64_t v29 = *(void *)(a1 + 40);
              uint64_t v30 = (const char *)(v29 + 137);
              if (v29)
              {
                __int16 v31 = " ";
              }
              else
              {
                uint64_t v30 = "";
                __int16 v31 = "";
              }
              int v32 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
              *(_DWORD *)buf = 136447490;
              __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
              __int16 v121 = 2082;
              __int16 v122 = v30;
              __int16 v123 = 2080;
              __int16 v124 = v31;
              __int16 v125 = 2048;
              uint64_t v126 = v29;
              __int16 v127 = 1024;
              unsigned int v128 = v4 - 20;
              __int16 v129 = 1024;
              *(_DWORD *)int v130 = v32;
              unint64_t v21 = "%{public}s %{public}s%s%p Cannot add %u to new frame offset %u, backtrace limit exceeded";
              goto LABEL_37;
            }
            uint64_t v23 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            __int16 v15 = gLogObj;
            os_log_type_t v16 = type;
            BOOL v24 = os_log_type_enabled((os_log_t)gLogObj, type);
            if (!v23)
            {
              if (!v24) {
                goto LABEL_38;
              }
              uint64_t v33 = *(void *)(a1 + 40);
              uint64_t v34 = (const char *)(v33 + 137);
              if (v33)
              {
                __int16 v35 = " ";
              }
              else
              {
                uint64_t v34 = "";
                __int16 v35 = "";
              }
              int v36 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
              *(_DWORD *)buf = 136447490;
              __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
              __int16 v121 = 2082;
              __int16 v122 = v34;
              __int16 v123 = 2080;
              __int16 v124 = v35;
              __int16 v125 = 2048;
              uint64_t v126 = v33;
              __int16 v127 = 1024;
              unsigned int v128 = v5;
              __int16 v129 = 1024;
              *(_DWORD *)int v130 = v36;
              unint64_t v21 = "%{public}s %{public}s%s%p Cannot add %u to new frame offset %u, no backtrace";
              goto LABEL_37;
            }
            if (v24)
            {
              uint64_t v25 = *(void *)(a1 + 40);
              int v26 = (const char *)(v25 + 137);
              if (v25)
              {
                int v27 = " ";
              }
              else
              {
                int v26 = "";
                int v27 = "";
              }
              int v28 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
              *(_DWORD *)buf = 136447746;
              __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
              __int16 v121 = 2082;
              __int16 v122 = v26;
              __int16 v123 = 2080;
              __int16 v124 = v27;
              __int16 v125 = 2048;
              uint64_t v126 = v25;
              __int16 v127 = 1024;
              unsigned int v128 = v5;
              __int16 v129 = 1024;
              *(_DWORD *)int v130 = v28;
              v130[2] = 2082;
              *(void *)&v130[3] = v23;
              _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s %{public}s%s%p Cannot add %u to new frame offset %u, dumping backtrace:%{public}s", buf, 0x40u);
            }
            free(v23);
          }
LABEL_38:
          if (!v14) {
            return 0;
          }
          goto LABEL_39;
        }
        uint64_t v63 = *(void *)(a1 + 40);
        if (v63 && (*(unsigned char *)(v63 + 136) & 1) != 0) {
          return 0;
        }
        __nwlog_obj();
        uint64_t v64 = *(void *)(a1 + 40);
        int v65 = (const char *)(v64 + 137);
        int v66 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        if (v64)
        {
          int v67 = " ";
        }
        else
        {
          int v65 = "";
          int v67 = "";
        }
        int v68 = *(_DWORD *)(a1 + 56);
        *(_DWORD *)buf = 136447490;
        __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
        __int16 v121 = 2082;
        __int16 v122 = v65;
        __int16 v123 = 2080;
        __int16 v124 = v67;
        __int16 v125 = 2048;
        uint64_t v126 = v64;
        __int16 v127 = 1024;
        unsigned int v128 = v66 + v5;
        __int16 v129 = 1024;
        *(_DWORD *)int v130 = v68;
        BOOL v14 = (const char *)_os_log_send_and_compose_impl();
        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v116 = 0;
        if (!__nwlog_fault(v14, &type, &v116)) {
          goto LABEL_38;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          __int16 v15 = __nwlog_obj();
          os_log_type_t v16 = type;
          if (!os_log_type_enabled(v15, type)) {
            goto LABEL_38;
          }
          uint64_t v69 = *(void *)(a1 + 40);
          uint64_t v70 = (const char *)(v69 + 137);
          if (v69)
          {
            BOOL v71 = " ";
          }
          else
          {
            uint64_t v70 = "";
            BOOL v71 = "";
          }
          unsigned int v72 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + v5;
          int v73 = *(_DWORD *)(a1 + 56);
          *(_DWORD *)buf = 136447490;
          __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
          __int16 v121 = 2082;
          __int16 v122 = v70;
          __int16 v123 = 2080;
          __int16 v124 = v71;
          __int16 v125 = 2048;
          uint64_t v126 = v69;
          __int16 v127 = 1024;
          unsigned int v128 = v72;
          __int16 v129 = 1024;
          *(_DWORD *)int v130 = v73;
          unint64_t v21 = "%{public}s %{public}s%s%p Invalid IP reassembly frame (total length %u > %u)";
        }
        else if (v116)
        {
          char v84 = (char *)__nw_create_backtrace_string();
          __int16 v15 = __nwlog_obj();
          os_log_type_t v16 = type;
          BOOL v85 = os_log_type_enabled(v15, type);
          if (v84)
          {
            if (v85)
            {
              uint64_t v86 = *(void *)(a1 + 40);
              uint64_t v87 = (const char *)(v86 + 137);
              if (v86)
              {
                uint64_t v88 = " ";
              }
              else
              {
                uint64_t v87 = "";
                uint64_t v88 = "";
              }
              unsigned int v89 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + v5;
              int v90 = *(_DWORD *)(a1 + 56);
              *(_DWORD *)buf = 136447746;
              __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
              __int16 v121 = 2082;
              __int16 v122 = v87;
              __int16 v123 = 2080;
              __int16 v124 = v88;
              __int16 v125 = 2048;
              uint64_t v126 = v86;
              __int16 v127 = 1024;
              unsigned int v128 = v89;
              __int16 v129 = 1024;
              *(_DWORD *)int v130 = v90;
              v130[2] = 2082;
              *(void *)&v130[3] = v84;
              _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s %{public}s%s%p Invalid IP reassembly frame (total length %u > %u), dumping backtrace:%{public}s", buf, 0x40u);
            }
            free(v84);
            if (!v14) {
              return 0;
            }
LABEL_39:
            __int16 v37 = (char *)v14;
LABEL_40:
            free(v37);
            return 0;
          }
          if (!v85) {
            goto LABEL_38;
          }
          uint64_t v111 = *(void *)(a1 + 40);
          char v112 = (const char *)(v111 + 137);
          if (v111)
          {
            os_log_type_t v113 = " ";
          }
          else
          {
            char v112 = "";
            os_log_type_t v113 = "";
          }
          unsigned int v114 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + v5;
          int v115 = *(_DWORD *)(a1 + 56);
          *(_DWORD *)buf = 136447490;
          __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
          __int16 v121 = 2082;
          __int16 v122 = v112;
          __int16 v123 = 2080;
          __int16 v124 = v113;
          __int16 v125 = 2048;
          uint64_t v126 = v111;
          __int16 v127 = 1024;
          unsigned int v128 = v114;
          __int16 v129 = 1024;
          *(_DWORD *)int v130 = v115;
          unint64_t v21 = "%{public}s %{public}s%s%p Invalid IP reassembly frame (total length %u > %u), no backtrace";
        }
        else
        {
          __int16 v15 = __nwlog_obj();
          os_log_type_t v16 = type;
          if (!os_log_type_enabled(v15, type)) {
            goto LABEL_38;
          }
          uint64_t v97 = *(void *)(a1 + 40);
          uint32_t v98 = (const char *)(v97 + 137);
          if (v97)
          {
            uint64_t v99 = " ";
          }
          else
          {
            uint32_t v98 = "";
            uint64_t v99 = "";
          }
          unsigned int v100 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + v5;
          int v101 = *(_DWORD *)(a1 + 56);
          *(_DWORD *)buf = 136447490;
          __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
          __int16 v121 = 2082;
          __int16 v122 = v98;
          __int16 v123 = 2080;
          __int16 v124 = v99;
          __int16 v125 = 2048;
          uint64_t v126 = v97;
          __int16 v127 = 1024;
          unsigned int v128 = v100;
          __int16 v129 = 1024;
          *(_DWORD *)int v130 = v101;
          unint64_t v21 = "%{public}s %{public}s%s%p Invalid IP reassembly frame (total length %u > %u), backtrace limit exceeded";
        }
LABEL_37:
        _os_log_impl(&dword_1830D4000, v15, v16, v21, buf, 0x36u);
        goto LABEL_38;
      }
      uint64_t v54 = *(void *)(a1 + 40);
      if (v54 && (*(unsigned char *)(v54 + 136) & 1) != 0) {
        return 0;
      }
      __nwlog_obj();
      uint64_t v55 = *(void *)(a1 + 40);
      char v56 = (const char *)(v55 + 137);
      if (!v55) {
        char v56 = "";
      }
      *(_DWORD *)buf = 136447490;
      __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
      __int16 v121 = 2082;
      if (v55) {
        int v57 = " ";
      }
      else {
        int v57 = "";
      }
      __int16 v122 = v56;
      __int16 v123 = 2080;
      __int16 v124 = v57;
      __int16 v125 = 2048;
      uint64_t v126 = v55;
      __int16 v127 = 1024;
      unsigned int v128 = v118;
      __int16 v129 = 1024;
      *(_DWORD *)int v130 = v4;
      unint64_t v47 = (const char *)_os_log_send_and_compose_impl();
      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v116 = 0;
      if (!__nwlog_fault(v47, &type, &v116)) {
        goto LABEL_143;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        __int16 v58 = __nwlog_obj();
        os_log_type_t v59 = type;
        if (!os_log_type_enabled(v58, type)) {
          goto LABEL_143;
        }
        uint64_t v60 = *(void *)(a1 + 40);
        int v61 = (const char *)(v60 + 137);
        if (v60)
        {
          __int16 v62 = " ";
        }
        else
        {
          int v61 = "";
          __int16 v62 = "";
        }
        *(_DWORD *)buf = 136447490;
        __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
        __int16 v121 = 2082;
        __int16 v122 = v61;
        __int16 v123 = 2080;
        __int16 v124 = v62;
        __int16 v125 = 2048;
        uint64_t v126 = v60;
        __int16 v127 = 1024;
        unsigned int v128 = v118;
        __int16 v129 = 1024;
        *(_DWORD *)int v130 = v4;
        unsigned int v53 = "%{public}s %{public}s%s%p Invalid IP reassembly frame (length %u < ip_length %u)";
        goto LABEL_141;
      }
      if (!v116)
      {
        __int16 v58 = __nwlog_obj();
        os_log_type_t v59 = type;
        if (!os_log_type_enabled(v58, type)) {
          goto LABEL_143;
        }
        uint64_t v94 = *(void *)(a1 + 40);
        uint64_t v95 = (const char *)(v94 + 137);
        if (v94)
        {
          v96 = " ";
        }
        else
        {
          uint64_t v95 = "";
          v96 = "";
        }
        *(_DWORD *)buf = 136447490;
        __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
        __int16 v121 = 2082;
        __int16 v122 = v95;
        __int16 v123 = 2080;
        __int16 v124 = v96;
        __int16 v125 = 2048;
        uint64_t v126 = v94;
        __int16 v127 = 1024;
        unsigned int v128 = v118;
        __int16 v129 = 1024;
        *(_DWORD *)int v130 = v4;
        unsigned int v53 = "%{public}s %{public}s%s%p Invalid IP reassembly frame (length %u < ip_length %u), backtrace limit exceeded";
        goto LABEL_141;
      }
      BOOL v79 = (char *)__nw_create_backtrace_string();
      __int16 v58 = __nwlog_obj();
      os_log_type_t v59 = type;
      BOOL v80 = os_log_type_enabled(v58, type);
      if (v79)
      {
        if (v80)
        {
          uint64_t v81 = *(void *)(a1 + 40);
          BOOL v82 = (const char *)(v81 + 137);
          if (v81)
          {
            os_log_type_t v83 = " ";
          }
          else
          {
            BOOL v82 = "";
            os_log_type_t v83 = "";
          }
          *(_DWORD *)buf = 136447746;
          __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
          __int16 v121 = 2082;
          __int16 v122 = v82;
          __int16 v123 = 2080;
          __int16 v124 = v83;
          __int16 v125 = 2048;
          uint64_t v126 = v81;
          __int16 v127 = 1024;
          unsigned int v128 = v118;
          __int16 v129 = 1024;
          *(_DWORD *)int v130 = v4;
          v130[2] = 2082;
          *(void *)&v130[3] = v79;
          _os_log_impl(&dword_1830D4000, v58, v59, "%{public}s %{public}s%s%p Invalid IP reassembly frame (length %u < ip_length %u), dumping backtrace:%{public}s", buf, 0x40u);
        }
        free(v79);
        if (!v47) {
          return 0;
        }
LABEL_144:
        __int16 v37 = (char *)v47;
        goto LABEL_40;
      }
      if (v80)
      {
        uint64_t v108 = *(void *)(a1 + 40);
        uint64_t v109 = (const char *)(v108 + 137);
        if (v108)
        {
          int v110 = " ";
        }
        else
        {
          uint64_t v109 = "";
          int v110 = "";
        }
        *(_DWORD *)buf = 136447490;
        __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
        __int16 v121 = 2082;
        __int16 v122 = v109;
        __int16 v123 = 2080;
        __int16 v124 = v110;
        __int16 v125 = 2048;
        uint64_t v126 = v108;
        __int16 v127 = 1024;
        unsigned int v128 = v118;
        __int16 v129 = 1024;
        *(_DWORD *)int v130 = v4;
        unsigned int v53 = "%{public}s %{public}s%s%p Invalid IP reassembly frame (length %u < ip_length %u), no backtrace";
LABEL_141:
        char v105 = v58;
        os_log_type_t v106 = v59;
        uint32_t v107 = 54;
        goto LABEL_142;
      }
    }
LABEL_143:
    if (!v47) {
      return 0;
    }
    goto LABEL_144;
  }
  uint64_t v38 = *(void *)(a1 + 40);
  if (!v38 || (*(unsigned char *)(v38 + 136) & 1) == 0)
  {
    char v39 = __nwlog_obj();
    BOOL v40 = os_log_type_enabled(v39, OS_LOG_TYPE_INFO);
    uint64_t v38 = *(void *)(a1 + 40);
    if (v40)
    {
      int v41 = (const char *)(v38 + 137);
      if (!v38) {
        int v41 = "";
      }
      *(_DWORD *)buf = 136446978;
      __int16 v120 = "nw_protocol_ipv4_append_reassembled_packets_block_invoke";
      __int16 v121 = 2082;
      __int16 v122 = v41;
      __int16 v42 = " ";
      if (!v38) {
        __int16 v42 = "";
      }
      __int16 v123 = 2080;
      __int16 v124 = v42;
      __int16 v125 = 2048;
      uint64_t v126 = v38;
      _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_INFO, "%{public}s %{public}s%s%p Frame is no longer valid", buf, 0x2Au);
      uint64_t v38 = *(void *)(a1 + 40);
    }
  }
  uint64_t result = 0;
  *(void *)(v38 + 48) = 0;
  return result;
}

uint64_t ___ZL43nw_protocol_ipv4_append_reassembled_packetsP16nw_protocol_ipv4P16nw_frame_array_sPb_block_invoke_29(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = *(void **)(a2 + 40);
  if (v2)
  {
    *(void *)(v2 + 40) = v3;
    uint64_t v3 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 72) = v3;
  }
  *uint64_t v3 = v2;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  nw_frame_finalize(a2);
  return 1;
}

void nw_protocol_ipv4_frame_input_finalizer(nw_frame *a1, BOOL a2, void *a3)
{
  buffer = (void *)nw_frame_get_buffer((uint64_t)a1, 0);
  if (buffer) {
    free(buffer);
  }
  uint64_t v6 = *((void *)a1 + 2);
  uint64_t v7 = (void *)*((void *)a1 + 3);
  if (v6)
  {
    *(void *)(v6 + 24) = v7;
    uint64_t v7 = (void *)*((void *)a1 + 3);
  }
  else
  {
    a3[11] = v7;
  }
  *uint64_t v7 = v6;
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;

  os_release(a1);
}

uint64_t nw_protocol_ipv4_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
    int v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v8, &type, &v20)) {
      goto LABEL_77;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
      uint64_t v11 = "%{public}s called with null protocol";
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
          __int16 v24 = 2082;
          uint64_t v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_77:
        if (!v8) {
          return 0;
        }
LABEL_78:
        free(v8);
        return 0;
      }
      if (!v13) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
      uint64_t v11 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
      uint64_t v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_76;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
    int v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v8, &type, &v20)) {
      goto LABEL_77;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v20)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_77;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
        uint64_t v11 = "%{public}s called with null ipv4, backtrace limit exceeded";
        goto LABEL_76;
      }
      BOOL v14 = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v15 = os_log_type_enabled(v9, type);
      if (!v14)
      {
        if (!v15) {
          goto LABEL_77;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
        uint64_t v11 = "%{public}s called with null ipv4, no backtrace";
        goto LABEL_76;
      }
      if (!v15) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
      __int16 v24 = 2082;
      uint64_t v25 = v14;
      os_log_type_t v16 = "%{public}s called with null ipv4, dumping backtrace:%{public}s";
      goto LABEL_53;
    }
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_77;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
    uint64_t v11 = "%{public}s called with null ipv4";
LABEL_76:
    _os_log_impl(&dword_1830D4000, v9, v10, v11, buf, 0xCu);
    goto LABEL_77;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
    int v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v8, &type, &v20)) {
      goto LABEL_77;
    }
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v20)
      {
        uint64_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (!os_log_type_enabled(v9, type)) {
          goto LABEL_77;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
        uint64_t v11 = "%{public}s called with null old_input_protocol, backtrace limit exceeded";
        goto LABEL_76;
      }
      BOOL v14 = (char *)__nw_create_backtrace_string();
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v17 = os_log_type_enabled(v9, type);
      if (!v14)
      {
        if (!v17) {
          goto LABEL_77;
        }
        *(_DWORD *)buf = 136446210;
        uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
        uint64_t v11 = "%{public}s called with null old_input_protocol, no backtrace";
        goto LABEL_76;
      }
      if (!v17) {
        goto LABEL_54;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
      __int16 v24 = 2082;
      uint64_t v25 = v14;
      os_log_type_t v16 = "%{public}s called with null old_input_protocol, dumping backtrace:%{public}s";
      goto LABEL_53;
    }
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (!os_log_type_enabled(v9, type)) {
      goto LABEL_77;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
    uint64_t v11 = "%{public}s called with null old_input_protocol";
    goto LABEL_76;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
    int v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v8, &type, &v20)) {
      goto LABEL_77;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
      uint64_t v11 = "%{public}s called with null new_input_protocol";
      goto LABEL_76;
    }
    if (!v20)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
      uint64_t v11 = "%{public}s called with null new_input_protocol, backtrace limit exceeded";
      goto LABEL_76;
    }
    BOOL v14 = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v18 = os_log_type_enabled(v9, type);
    if (!v14)
    {
      if (!v18) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
      uint64_t v11 = "%{public}s called with null new_input_protocol, no backtrace";
      goto LABEL_76;
    }
    if (!v18) {
      goto LABEL_54;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
    __int16 v24 = 2082;
    uint64_t v25 = v14;
    os_log_type_t v16 = "%{public}s called with null new_input_protocol, dumping backtrace:%{public}s";
LABEL_53:
    _os_log_impl(&dword_1830D4000, v9, v10, v16, buf, 0x16u);
    goto LABEL_54;
  }
  if (a3->identifier) {
    identifier = a3->identifier;
  }
  else {
    identifier = (nw_protocol_identifier *)"invalid";
  }
  if (!strncmp(identifier->name, "quic", 4uLL))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
    int v8 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v8, &type, &v20)) {
      goto LABEL_77;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
      uint64_t v11 = "%{public}s Attempt to add quic to ip";
      goto LABEL_76;
    }
    if (!v20)
    {
      uint64_t v9 = __nwlog_obj();
      os_log_type_t v10 = type;
      if (!os_log_type_enabled(v9, type)) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
      uint64_t v11 = "%{public}s Attempt to add quic to ip, backtrace limit exceeded";
      goto LABEL_76;
    }
    BOOL v14 = (char *)__nw_create_backtrace_string();
    uint64_t v9 = __nwlog_obj();
    os_log_type_t v10 = type;
    BOOL v19 = os_log_type_enabled(v9, type);
    if (!v14)
    {
      if (!v19) {
        goto LABEL_77;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
      uint64_t v11 = "%{public}s Attempt to add quic to ip, no backtrace";
      goto LABEL_76;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      uint64_t v23 = "nw_protocol_ipv4_replace_input_handler";
      __int16 v24 = 2082;
      uint64_t v25 = v14;
      os_log_type_t v16 = "%{public}s Attempt to add quic to ip, dumping backtrace:%{public}s";
      goto LABEL_53;
    }
LABEL_54:
    free(v14);
    if (!v8) {
      return 0;
    }
    goto LABEL_78;
  }

  return nw_protocol_common_replace_input_handler((uint64_t)a1, a2, (uint64_t)a3);
}

void sub_183D192A0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_183D1A1BC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t nw_throughput_to_bucket(unint64_t a1)
{
  unsigned __int8 v1 = 49 - __clz(a1);
  if (a1 >= 0x10000) {
    unsigned __int8 v2 = v1;
  }
  else {
    unsigned __int8 v2 = 1;
  }
  if (!a1) {
    return 0;
  }
  return v2;
}

uint64_t nw_bucket_to_throughput(unsigned int a1)
{
  uint64_t v1 = 0x8000 << a1;
  if (a1 > 0x30) {
    uint64_t v1 = -1;
  }
  if (a1) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t __nw_channel_purge_idle_block_invoke_5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 1;
}

void nw_channel_handle_defunct(uint64_t a1)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    out[0] = 136446210;
    *(void *)&out[1] = "nw_channel_handle_defunct";
    int v27 = (char *)_os_log_send_and_compose_impl();
    buf[0] = 16;
    char v36 = 0;
    if (!__nwlog_fault(v27, buf, &v36)) {
      goto LABEL_72;
    }
    if (buf[0] == 17)
    {
      int v28 = __nwlog_obj();
      os_log_type_t v29 = buf[0];
      if (!os_log_type_enabled(v28, (os_log_type_t)buf[0])) {
        goto LABEL_72;
      }
      out[0] = 136446210;
      *(void *)&out[1] = "nw_channel_handle_defunct";
      uint64_t v30 = "%{public}s called with null channel";
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v28 = __nwlog_obj();
      os_log_type_t v29 = buf[0];
      BOOL v32 = os_log_type_enabled(v28, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v32)
        {
          out[0] = 136446466;
          *(void *)&out[1] = "nw_channel_handle_defunct";
          LOWORD(out[3]) = 2082;
          *(void *)((char *)&out[3] + 2) = backtrace_string;
          _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null channel, dumping backtrace:%{public}s", (uint8_t *)out, 0x16u);
        }
        free(backtrace_string);
LABEL_72:
        if (!v27) {
          return;
        }
LABEL_73:
        free(v27);
        return;
      }
      if (!v32) {
        goto LABEL_72;
      }
      out[0] = 136446210;
      *(void *)&out[1] = "nw_channel_handle_defunct";
      uint64_t v30 = "%{public}s called with null channel, no backtrace";
    }
    else
    {
      int v28 = __nwlog_obj();
      os_log_type_t v29 = buf[0];
      if (!os_log_type_enabled(v28, (os_log_type_t)buf[0])) {
        goto LABEL_72;
      }
      out[0] = 136446210;
      *(void *)&out[1] = "nw_channel_handle_defunct";
      uint64_t v30 = "%{public}s called with null channel, backtrace limit exceeded";
    }
LABEL_71:
    _os_log_impl(&dword_1830D4000, v28, v29, v30, (uint8_t *)out, 0xCu);
    goto LABEL_72;
  }
  if (((*(unsigned __int16 *)(a1 + 444) | (*(unsigned __int8 *)(a1 + 446) << 16)) & 0x80000) == 0)
  {
    if (_nw_signposts_once != -1) {
      dispatch_once(&_nw_signposts_once, &__block_literal_global_73_88215);
    }
    unsigned __int8 v2 = (__int16 *)(a1 + 444);
    if (_nw_signposts_enabled && kdebug_is_enabled()) {
      kdebug_trace();
    }
    *(unsigned char *)(a1 + 446) = ((unsigned __int16)*v2 | (*(unsigned __int8 *)(a1 + 446) << 16) | 0x80000u) >> 16;
    memset(out, 0, 48);
    int v3 = *(_DWORD *)(a1 + 428);
    uuid_unparse((const unsigned __int8 *)(a1 + 88), (char *)out);
    snprintf((char *)&out[9], 0xCuLL, "-%u", v3);
    uint64_t v4 = *(void *)(a1 + 152);
    if (!v4 || *(_DWORD *)(v4 + 124) != 4)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v5 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
      {
        int v6 = *(_DWORD *)(a1 + 432);
        *(_DWORD *)buf = 136446722;
        uint64_t v38 = "nw_channel_handle_defunct";
        __int16 v39 = 2082;
        BOOL v40 = out;
        __int16 v41 = 1024;
        int v42 = v6;
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_INFO, "%{public}s Defunct channel destroyed with key: %{public}s and fd: %d", buf, 0x1Cu);
      }
    }
    uint64_t v7 = *(void *)(a1 + 192);
    if (v7)
    {
      nw_queue_cancel_source(v7);
      *(void *)(a1 + 192) = 0;
    }
    uint64_t v8 = *(void *)(a1 + 200);
    if (v8)
    {
      nw_queue_cancel_source(v8);
      *(void *)(a1 + 200) = 0;
    }
    uint64_t v9 = *(void *)(a1 + 184);
    if (v9)
    {
      nw_queue_cancel_source(v9);
      *(void *)(a1 + 184) = 0;
    }
    uint64_t v10 = *(void *)(a1 + 168);
    if (v10)
    {
      nw_queue_cancel_source(*(void *)(a1 + 168));
      *(void *)(a1 + 168) = 0;
      if ((*v2 & 8) != 0)
      {
        nw_queue_resume_source(v10);
        int v11 = (unsigned __int16)*v2;
        unsigned int v12 = v11 & 0xFFFFFFF7 | (*(unsigned __int8 *)(a1 + 446) << 16);
        *unsigned __int8 v2 = v11 & 0xFFF7;
        *(unsigned char *)(a1 + 446) = BYTE2(v12);
      }
    }
    uint64_t v13 = *(void *)(a1 + 176);
    if (v13)
    {
      nw_queue_cancel_source(*(void *)(a1 + 176));
      *(void *)(a1 + 176) = 0;
      if ((*v2 & 0x10) != 0)
      {
        nw_queue_resume_source(v13);
        int v14 = (unsigned __int16)*v2;
        unsigned int v15 = v14 & 0xFFFFFFEF | (*(unsigned __int8 *)(a1 + 446) << 16);
        *unsigned __int8 v2 = v14 & 0xFFEF;
        *(unsigned char *)(a1 + 446) = BYTE2(v15);
      }
    }
    os_log_type_t v16 = *(char **)(a1 + 280);
    if (v16)
    {
      v35[0] = MEMORY[0x1E4F143A8];
      v35[1] = 0x40000000;
      v35[2] = ___ZL25nw_channel_handle_defunctP10nw_channel_block_invoke;
      v35[3] = &__block_descriptor_tmp_70_88228;
      v35[4] = a1;
      nw_hash_table_apply(v16, (uint64_t)v35);
    }
    BOOL v17 = *(void **)(a1 + 152);
    if (v17)
    {
      BOOL globals_for_channel = nw_context_get_globals_for_channel(v17);
      uint64_t v19 = globals_for_channel;
      __int16 v20 = *v2;
      if ((*v2 & 0x4000) == 0)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(globals_for_channel + 20));
        int v21 = (unsigned __int16)*v2;
        int v22 = v21 | (*(unsigned __int8 *)(a1 + 446) << 16);
        if ((v21 & 0x4000) == 0)
        {
          *(unsigned char *)(a1 + 446) = BYTE2(v22);
          *unsigned __int8 v2 = v22 | 0x4000;
          nw_array_append(*(void *)(v19 + 8), (void *)a1);
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(v19 + 20));
        __int16 v20 = *v2;
      }
      if ((v20 & 0x2000) != 0)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v19 + 16));
        int v23 = (unsigned __int16)*v2;
        if ((v23 & 0x2000) != 0)
        {
          unsigned int v24 = v23 & 0xFFFFDFFF | (*(unsigned __int8 *)(a1 + 446) << 16);
          *unsigned __int8 v2 = v23 & 0xDFFF;
          *(unsigned char *)(a1 + 446) = BYTE2(v24);
          nw_dictionary_set_value(*(void *)v19, (const char *)out, 0);
        }
        os_unfair_lock_unlock((os_unfair_lock_t)(v19 + 16));
      }
    }
    if (*(void *)(a1 + 136))
    {
      if (*(void *)(a1 + 208)) {
        dispatch_group_leave(*(dispatch_group_t *)(a1 + 208));
      }
      else {
        os_channel_destroy();
      }
      *(void *)(a1 + 136) = 0;
    }
    *(void *)(a1 + 216) = 0;
    *(void *)(a1 + 224) = 0;
    if (*(void *)(a1 + 144))
    {
      os_channel_attr_destroy();
      *(void *)(a1 + 144) = 0;
    }
    int v25 = (unsigned __int16)*v2;
    unsigned int v26 = (v25 | (*(unsigned __int8 *)(a1 + 446) << 16)) & 0xFFF7FFFF;
    *unsigned __int8 v2 = v25;
    *(unsigned char *)(a1 + 446) = BYTE2(v26);
    return;
  }
  __nwlog_obj();
  out[0] = 136446210;
  *(void *)&out[1] = "nw_channel_handle_defunct";
  int v27 = (char *)_os_log_send_and_compose_impl();
  buf[0] = 16;
  char v36 = 0;
  if (!__nwlog_fault(v27, buf, &v36)) {
    goto LABEL_72;
  }
  if (buf[0] == 17)
  {
    int v28 = __nwlog_obj();
    os_log_type_t v29 = buf[0];
    if (!os_log_type_enabled(v28, (os_log_type_t)buf[0])) {
      goto LABEL_72;
    }
    out[0] = 136446210;
    *(void *)&out[1] = "nw_channel_handle_defunct";
    uint64_t v30 = "%{public}s called with null !channel->processing_defunct";
    goto LABEL_71;
  }
  if (!v36)
  {
    int v28 = __nwlog_obj();
    os_log_type_t v29 = buf[0];
    if (!os_log_type_enabled(v28, (os_log_type_t)buf[0])) {
      goto LABEL_72;
    }
    out[0] = 136446210;
    *(void *)&out[1] = "nw_channel_handle_defunct";
    uint64_t v30 = "%{public}s called with null !channel->processing_defunct, backtrace limit exceeded";
    goto LABEL_71;
  }
  uint64_t v33 = (char *)__nw_create_backtrace_string();
  int v28 = __nwlog_obj();
  os_log_type_t v29 = buf[0];
  BOOL v34 = os_log_type_enabled(v28, (os_log_type_t)buf[0]);
  if (!v33)
  {
    if (!v34) {
      goto LABEL_72;
    }
    out[0] = 136446210;
    *(void *)&out[1] = "nw_channel_handle_defunct";
    uint64_t v30 = "%{public}s called with null !channel->processing_defunct, no backtrace";
    goto LABEL_71;
  }
  if (v34)
  {
    out[0] = 136446466;
    *(void *)&out[1] = "nw_channel_handle_defunct";
    LOWORD(out[3]) = 2082;
    *(void *)((char *)&out[3] + 2) = v33;
    _os_log_impl(&dword_1830D4000, v28, v29, "%{public}s called with null !channel->processing_defunct, dumping backtrace:%{public}s", (uint8_t *)out, 0x16u);
  }
  free(v33);
  if (v27) {
    goto LABEL_73;
  }
}

uint64_t ___ZL25nw_channel_handle_defunctP10nw_channel_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t extra = nw_hash_node_get_extra(a2);
  nw_channel_disconnect_flow(*(void *)(a1 + 32), extra);
  return 1;
}

void nw_channel_disconnect_flow(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    unsigned int v24 = "nw_channel_disconnect_flow";
    int v11 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v21 = 0;
    if (!__nwlog_fault(v11, &type, &v21)) {
      goto LABEL_50;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned int v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v24 = "nw_channel_disconnect_flow";
      int v14 = "%{public}s called with null channel";
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      unsigned int v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          unsigned int v24 = "nw_channel_disconnect_flow";
          __int16 v25 = 2082;
          unsigned int v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null channel, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_50:
        if (!v11) {
          return;
        }
LABEL_51:
        free(v11);
        return;
      }
      if (!v16) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v24 = "nw_channel_disconnect_flow";
      int v14 = "%{public}s called with null channel, no backtrace";
    }
    else
    {
      unsigned int v12 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (!os_log_type_enabled(v12, type)) {
        goto LABEL_50;
      }
      *(_DWORD *)buf = 136446210;
      unsigned int v24 = "nw_channel_disconnect_flow";
      int v14 = "%{public}s called with null channel, backtrace limit exceeded";
    }
LABEL_49:
    _os_log_impl(&dword_1830D4000, v12, v13, v14, buf, 0xCu);
    goto LABEL_50;
  }
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 24);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        unsigned int v5 = *(void (**)(void))(v4 + 56);
        if (!v5 || (v5(), (v6 = *(void *)(a2 + 24)) != 0) && (uint64_t v4 = *(void *)(v6 + 24)) != 0)
        {
          uint64_t v7 = *(void (**)(void))(v4 + 48);
          if (v7) {
            v7();
          }
        }
      }
    }
    uint64_t v8 = *(void **)(a2 + 16);
    if (v8)
    {
      uint64_t v9 = v8;
      *(_OWORD *)(v9 + 88) = 0u;
      *(_OWORD *)(v9 + 104) = 0u;
      *(_OWORD *)(v9 + 120) = 0u;

      if ((*(unsigned char *)(a2 + 121) & 0x10) != 0)
      {
        if (gLogDatapath)
        {
          __int16 v20 = __nwlog_obj();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446466;
            unsigned int v24 = "nw_channel_disconnect_flow";
            __int16 v25 = 2080;
            unsigned int v26 = (char *)(a2 + 84);
            _os_log_impl(&dword_1830D4000, v20, OS_LOG_TYPE_DEBUG, "%{public}s Not closing flow registration %s", buf, 0x16u);
          }
        }
      }
      else
      {
        if (gLogDatapath)
        {
          uint64_t v19 = __nwlog_obj();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446466;
            unsigned int v24 = "nw_channel_disconnect_flow";
            __int16 v25 = 2080;
            unsigned int v26 = (char *)(a2 + 84);
            _os_log_impl(&dword_1830D4000, v19, OS_LOG_TYPE_DEBUG, "%{public}s Closing flow registration %s", buf, 0x16u);
          }
        }
        nw_path_flow_registration_close(*(void **)(a2 + 16));
      }
      uint64_t v10 = *(void **)(a2 + 16);
      if (v10)
      {
        os_release(v10);
        *(void *)(a2 + 16) = 0;
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  unsigned int v24 = "nw_channel_disconnect_flow";
  int v11 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (!__nwlog_fault(v11, &type, &v21)) {
    goto LABEL_50;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    unsigned int v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (!os_log_type_enabled(v12, type)) {
      goto LABEL_50;
    }
    *(_DWORD *)buf = 136446210;
    unsigned int v24 = "nw_channel_disconnect_flow";
    int v14 = "%{public}s called with null input_flow";
    goto LABEL_49;
  }
  if (!v21)
  {
    unsigned int v12 = __nwlog_obj();
    os_log_type_t v13 = type;
    if (!os_log_type_enabled(v12, type)) {
      goto LABEL_50;
    }
    *(_DWORD *)buf = 136446210;
    unsigned int v24 = "nw_channel_disconnect_flow";
    int v14 = "%{public}s called with null input_flow, backtrace limit exceeded";
    goto LABEL_49;
  }
  BOOL v17 = (char *)__nw_create_backtrace_string();
  unsigned int v12 = __nwlog_obj();
  os_log_type_t v13 = type;
  BOOL v18 = os_log_type_enabled(v12, type);
  if (!v17)
  {
    if (!v18) {
      goto LABEL_50;
    }
    *(_DWORD *)buf = 136446210;
    unsigned int v24 = "nw_channel_disconnect_flow";
    int v14 = "%{public}s called with null input_flow, no backtrace";
    goto LABEL_49;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    unsigned int v24 = "nw_channel_disconnect_flow";
    __int16 v25 = 2082;
    unsigned int v26 = v17;
    _os_log_impl(&dword_1830D4000, v12, v13, "%{public}s called with null input_flow, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v17);
  if (v11) {
    goto LABEL_51;
  }
}

BOOL ___ZL24__nw_signpost_is_enabledv_block_invoke_88246()
{
  BOOL result = networkd_settings_get_BOOL((const char *)nw_setting_enable_signposts);
  _nw_signposts_enabled = result;
  return result;
}

BOOL ___ZL22nw_channel_get_globalsP10nw_context_block_invoke(uint64_t a1, void *a2)
{
  *a2 = nw_dictionary_create();
  BOOL result = nw_array_create();
  a2[1] = result;
  a2[2] = 0;
  return result;
}

void nw_channel_set_no_close_delay(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(_WORD *)(a1 + 444) |= 0x40u;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  uint64_t v10 = "nw_channel_set_no_close_delay";
  uint64_t v1 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v7 = 0;
  if (__nwlog_fault(v1, &type, &v7))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      unsigned __int8 v2 = __nwlog_obj();
      os_log_type_t v3 = type;
      if (!os_log_type_enabled(v2, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v10 = "nw_channel_set_no_close_delay";
      uint64_t v4 = "%{public}s called with null channel";
      goto LABEL_17;
    }
    if (!v7)
    {
      unsigned __int8 v2 = __nwlog_obj();
      os_log_type_t v3 = type;
      if (!os_log_type_enabled(v2, type)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v10 = "nw_channel_set_no_close_delay";
      uint64_t v4 = "%{public}s called with null channel, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    unsigned __int8 v2 = __nwlog_obj();
    os_log_type_t v3 = type;
    BOOL v6 = os_log_type_enabled(v2, type);
    if (backtrace_string)
    {
      if (v6)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v10 = "nw_channel_set_no_close_delay";
        __int16 v11 = 2082;
        unsigned int v12 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v2, v3, "%{public}s called with null channel, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v6)
    {
      *(_DWORD *)buf = 136446210;
      uint64_t v10 = "nw_channel_set_no_close_delay";
      uint64_t v4 = "%{public}s called with null channel, no backtrace";
LABEL_17:
      _os_log_impl(&dword_1830D4000, v2, v3, v4, buf, 0xCu);
    }
  }
LABEL_18:
  if (v1) {
    free(v1);
  }
}

uint64_t __nw_channel_create_event_source_block_invoke(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (*(void *)(*(void *)(a1 + 40) + 136))
  {
    while (1)
    {
      uint64_t result = os_channel_get_next_event_handle();
      if (result) {
        break;
      }
      os_channel_packet_free();
    }
    if (result != 96) {
      return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0);
    }
  }
  else
  {
    os_log_type_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
    return v3();
  }
  return result;
}

void __nw_channel_create_event_source_block_invoke_10(uint64_t a1)
{
}

uint64_t __nw_channel_create_interface_advisory_source_block_invoke(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 40) + 136))
  {
    if (!malloc_type_calloc(1uLL, 0x60uLL, 0xEAFB8F1AuLL))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      uint64_t v4 = (void *)_os_log_send_and_compose_impl();
      uint64_t result = __nwlog_abort((uint64_t)v4);
      if (result)
      {
        __break(1u);
        return result;
      }
      free(v4);
    }
    os_channel_get_interface_advisory();
    unsigned __int8 v2 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
  }
  else
  {
    unsigned __int8 v2 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
  }

  return v2();
}

void __nw_channel_create_interface_advisory_source_block_invoke_2(uint64_t a1)
{
}

void nw_channel_set_keep_path_flow_registration_open(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v16 = "nw_channel_set_keep_path_flow_registration_open";
    BOOL v6 = (char *)_os_log_send_and_compose_impl();
    LOBYTE(v19) = 16;
    char v14 = 0;
    if (!__nwlog_fault(v6, &v19, &v14)) {
      goto LABEL_38;
    }
    if (v19 == 17)
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = v19;
      if (!os_log_type_enabled(v7, (os_log_type_t)v19)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v16 = "nw_channel_set_keep_path_flow_registration_open";
      uint64_t v9 = "%{public}s called with null channel";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      char v7 = __nwlog_obj();
      os_log_type_t v8 = v19;
      BOOL v11 = os_log_type_enabled(v7, (os_log_type_t)v19);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_channel_set_keep_path_flow_registration_open";
          __int16 v17 = 2082;
          v18[0] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null channel, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_38:
        if (!v6) {
          return;
        }
LABEL_39:
        free(v6);
        return;
      }
      if (!v11) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v16 = "nw_channel_set_keep_path_flow_registration_open";
      uint64_t v9 = "%{public}s called with null channel, no backtrace";
    }
    else
    {
      char v7 = __nwlog_obj();
      os_log_type_t v8 = v19;
      if (!os_log_type_enabled(v7, (os_log_type_t)v19)) {
        goto LABEL_38;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v16 = "nw_channel_set_keep_path_flow_registration_open";
      uint64_t v9 = "%{public}s called with null channel, backtrace limit exceeded";
    }
LABEL_37:
    _os_log_impl(&dword_1830D4000, v7, v8, v9, buf, 0xCu);
    goto LABEL_38;
  }
  if (a2)
  {
    long long v19 = 0uLL;
    os_log_type_t v3 = a2;
    if (!uuid_is_null(v3 + 32)) {
      long long v19 = *((_OWORD *)v3 + 2);
    }

    uint64_t node = nw_hash_table_get_node(*(void *)(a1 + 280), (uint64_t)&v19, 16);
    if (node)
    {
      *(unsigned char *)(node + 153) |= 0x10u;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      unsigned int v5 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        BOOL v16 = "nw_channel_set_keep_path_flow_registration_open";
        __int16 v17 = 1042;
        LODWORD(v18[0]) = 16;
        WORD2(v18[0]) = 2098;
        *(void *)((char *)v18 + 6) = &v19;
        _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_ERROR, "%{public}s Node not found for flow id %{public,uuid_t}.16P", buf, 0x1Cu);
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_channel_set_keep_path_flow_registration_open";
  BOOL v6 = (char *)_os_log_send_and_compose_impl();
  LOBYTE(v19) = 16;
  char v14 = 0;
  if (!__nwlog_fault(v6, &v19, &v14)) {
    goto LABEL_38;
  }
  if (v19 == 17)
  {
    char v7 = __nwlog_obj();
    os_log_type_t v8 = v19;
    if (!os_log_type_enabled(v7, (os_log_type_t)v19)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v16 = "nw_channel_set_keep_path_flow_registration_open";
    uint64_t v9 = "%{public}s called with null flow_registration";
    goto LABEL_37;
  }
  if (!v14)
  {
    char v7 = __nwlog_obj();
    os_log_type_t v8 = v19;
    if (!os_log_type_enabled(v7, (os_log_type_t)v19)) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v16 = "nw_channel_set_keep_path_flow_registration_open";
    uint64_t v9 = "%{public}s called with null flow_registration, backtrace limit exceeded";
    goto LABEL_37;
  }
  unsigned int v12 = (char *)__nw_create_backtrace_string();
  char v7 = __nwlog_obj();
  os_log_type_t v8 = v19;
  BOOL v13 = os_log_type_enabled(v7, (os_log_type_t)v19);
  if (!v12)
  {
    if (!v13) {
      goto LABEL_38;
    }
    *(_DWORD *)buf = 136446210;
    BOOL v16 = "nw_channel_set_keep_path_flow_registration_open";
    uint64_t v9 = "%{public}s called with null flow_registration, no backtrace";
    goto LABEL_37;
  }
  if (v13)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v16 = "nw_channel_set_keep_path_flow_registration_open";
    __int16 v17 = 2082;
    v18[0] = v12;
    _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v12);
  if (v6) {
    goto LABEL_39;
  }
}

void sub_183D1BD44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL17nw_channel_createP10nw_contextPhjPvjbbPb_block_invoke(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  memset(out, 0, 48);
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  int v3 = *(_DWORD *)(v2 + 428);
  uuid_unparse((const unsigned __int8 *)(v2 + 88), out);
  snprintf(&out[36], 0xCuLL, "-%u", v3);
  uint64_t v4 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 152);
  if (!v4 || *(_DWORD *)(v4 + 124) != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    unsigned int v5 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
    {
      int v6 = *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 432);
      *(_DWORD *)buf = 136446722;
      uint64_t v9 = "nw_channel_create_block_invoke";
      __int16 v10 = 2082;
      BOOL v11 = out;
      __int16 v12 = 1024;
      int v13 = v6;
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_INFO, "%{public}s Channel destroyed with key: %{public}s and fd: %d", buf, 0x1Cu);
    }
  }
  os_channel_destroy();
  *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 136) = 0;
  *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 432) = -1;
  char v7 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v7)
  {
    os_release(v7);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

void ___ZL17nw_channel_createP10nw_contextPhjPvjbbPb_block_invoke_2(uint64_t a1)
{
}

void ___ZL17nw_channel_createP10nw_contextPhjPvjbbPb_block_invoke_4(uint64_t a1)
{
}

void ___ZL17nw_channel_createP10nw_contextPhjPvjbbPb_block_invoke_6(uint64_t a1)
{
}

uint64_t __nw_channel_create_with_attributes_block_invoke(uint64_t a1, const char *a2)
{
  return 1;
}

uint64_t ___ZL30nw_channel_update_input_sourceP10nw_channelP11nw_protocolb_block_invoke(uint64_t a1, uint64_t a2)
{
  nw_frame_finalize(a2);
  uint64_t v4 = *(void *)(a2 + 32);
  unsigned int v5 = *(void **)(a2 + 40);
  if (v4)
  {
    *(void *)(v4 + 40) = v5;
    unsigned int v5 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 344) = v5;
  }
  void *v5 = v4;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return 1;
}

uint64_t nw_channel_updated_path(nw_protocol *a1, nw_protocol *a2, nw_path *a3)
{
  return 1;
}

void ___ZL31nw_channel_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v2 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136446210;
    unsigned int v5 = "nw_channel_remove_input_handler_block_invoke";
    _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEBUG, "%{public}s Tearing down defunct channel", (uint8_t *)&v4, 0xCu);
  }
  nw_channel_close(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  int v3 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v3)
  {
    os_release(v3);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

void nw_channel_close(uint64_t a1)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 280);
    if (v2 && *(_DWORD *)(v2 + 40))
    {
      uint64_t v3 = *(void *)(a1 + 152);
      if (!v3 || *(_DWORD *)(v3 + 124) != 4)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v4 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_channel_close";
          _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s Cannot close channel, input client table is non-empty", buf, 0xCu);
        }
      }
      return;
    }
    if (_nw_signposts_once != -1) {
      dispatch_once(&_nw_signposts_once, &__block_literal_global_73_88215);
    }
    if (_nw_signposts_enabled && kdebug_is_enabled())
    {
      kdebug_trace();
      uint64_t v5 = *(void *)(a1 + 192);
      if (!v5)
      {
LABEL_14:
        uint64_t v6 = *(void *)(a1 + 200);
        if (v6)
        {
          nw_queue_cancel_source(v6);
          *(void *)(a1 + 200) = 0;
        }
        uint64_t v7 = *(void *)(a1 + 184);
        if (v7)
        {
          nw_queue_cancel_source(v7);
          *(void *)(a1 + 184) = 0;
        }
        uint64_t v8 = *(void *)(a1 + 168);
        if (v8)
        {
          nw_queue_cancel_source(*(void *)(a1 + 168));
          *(void *)(a1 + 168) = 0;
          if ((*(_WORD *)(a1 + 444) & 8) != 0)
          {
            nw_queue_resume_source(v8);
            int v9 = *(unsigned __int16 *)(a1 + 444);
            unsigned int v10 = v9 & 0xFFFFFFF7 | (*(unsigned __int8 *)(a1 + 446) << 16);
            *(_WORD *)(a1 + 444) = v9 & 0xFFF7;
            *(unsigned char *)(a1 + 446) = BYTE2(v10);
          }
        }
        uint64_t v11 = *(void *)(a1 + 176);
        if (v11)
        {
          nw_queue_cancel_source(*(void *)(a1 + 176));
          *(void *)(a1 + 176) = 0;
          if ((*(_WORD *)(a1 + 444) & 0x10) != 0)
          {
            nw_queue_resume_source(v11);
            int v12 = *(unsigned __int16 *)(a1 + 444);
            unsigned int v13 = v12 & 0xFFFFFFEF | (*(unsigned __int8 *)(a1 + 446) << 16);
            *(_WORD *)(a1 + 444) = v12 & 0xFFEF;
            *(unsigned char *)(a1 + 446) = BYTE2(v13);
          }
        }
        long long v48 = 0u;
        memset(buf, 0, sizeof(buf));
        int v14 = *(_DWORD *)(a1 + 428);
        uuid_unparse((const unsigned __int8 *)(a1 + 88), (char *)buf);
        snprintf((char *)&v48 + 4, 0xCuLL, "-%u", v14);
        if (*(void *)(a1 + 136))
        {
          uint64_t v15 = *(NSObject **)(a1 + 208);
          if (v15)
          {
            dispatch_group_leave(v15);
          }
          else
          {
            uint64_t v16 = *(void *)(a1 + 152);
            if (!v16 || *(_DWORD *)(v16 + 124) != 4)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              __int16 v17 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
              {
                int v18 = *(_DWORD *)(a1 + 432);
                *(_DWORD *)__int16 v41 = 136446722;
                int v42 = "nw_channel_close";
                __int16 v43 = 2082;
                uint64_t v44 = buf;
                __int16 v45 = 1024;
                int v46 = v18;
                _os_log_impl(&dword_1830D4000, v17, OS_LOG_TYPE_INFO, "%{public}s Channel destroyed with key: %{public}s and fd: %d", v41, 0x1Cu);
              }
            }
            os_channel_destroy();
          }
          *(void *)(a1 + 136) = 0;
        }
        if (*(void *)(a1 + 144))
        {
          os_channel_attr_destroy();
          *(void *)(a1 + 144) = 0;
        }
        long long v19 = *(void **)(a1 + 152);
        if (!v19) {
          goto LABEL_53;
        }
        BOOL globals_for_channel = nw_context_get_globals_for_channel(v19);
        uint64_t v21 = globals_for_channel;
        int v22 = (__int16 *)(a1 + 444);
        __int16 v23 = *(_WORD *)(a1 + 444);
        if ((v23 & 0x2000) != 0)
        {
          os_unfair_lock_lock((os_unfair_lock_t)(globals_for_channel + 16));
          int v24 = (unsigned __int16)*v22;
          if ((v24 & 0x2000) != 0)
          {
            unsigned int v25 = v24 & 0xFFFFDFFF | (*(unsigned __int8 *)(a1 + 446) << 16);
            *int v22 = v24 & 0xDFFF;
            *(unsigned char *)(a1 + 446) = BYTE2(v25);
            nw_dictionary_set_value(*(void *)v21, (const char *)buf, 0);
          }
          os_unfair_lock_unlock((os_unfair_lock_t)(v21 + 16));
          __int16 v23 = *v22;
        }
        if ((v23 & 0x4000) == 0) {
          goto LABEL_53;
        }
        os_unfair_lock_lock((os_unfair_lock_t)(v21 + 20));
        int v26 = (unsigned __int16)*v22;
        if ((v26 & 0x4000) != 0)
        {
          unsigned int v27 = v26 & 0xFFFFBFFF | (*(unsigned __int8 *)(a1 + 446) << 16);
          *int v22 = v26 & 0xBFFF;
          *(unsigned char *)(a1 + 446) = BYTE2(v27);
          int v28 = *(void **)(v21 + 8);
          if (!v28 || v28[2] == v28[3])
          {
            BOOL v29 = nw_array_create();
          }
          else
          {
            BOOL v29 = nw_array_create();
            std::vector<nw_object_wrapper_t>::reserve(v29 + 16, ((uint64_t)(v28[3] - v28[2]) >> 3) - 1);
            uint64_t v30 = (void **)v28[2];
            __int16 v31 = (void **)v28[3];
            if (v30 == v31)
            {
              *(void *)(v21 + 8) = v29;
LABEL_51:
              os_release(v28);
              goto LABEL_52;
            }
            do
            {
              if (*v30 != (void *)a1) {
                nw_array_append(v29, *v30);
              }
              ++v30;
            }
            while (v30 != v31);
          }
          *(void *)(v21 + 8) = v29;
          if (v28) {
            goto LABEL_51;
          }
        }
LABEL_52:
        os_unfair_lock_unlock((os_unfair_lock_t)(v21 + 20));
LABEL_53:
        BOOL v32 = *(void **)(a1 + 16);
        if (v32)
        {
          free(v32);
          *(void *)(a1 + 16) = 0;
        }
        *(_DWORD *)(a1 + 424) = 0;
        uint64_t v33 = *(void **)(a1 + 160);
        if (v33)
        {
          if ((*(_WORD *)(a1 + 444) & 0x20) == 0 || (nw_nexus_remove_instance(), (uint64_t v33 = *(void **)(a1 + 160)) != 0))
          {
            os_release(v33);
            *(void *)(a1 + 160) = 0;
          }
        }
        return;
      }
    }
    else
    {
      uint64_t v5 = *(void *)(a1 + 192);
      if (!v5) {
        goto LABEL_14;
      }
    }
    nw_queue_cancel_source(v5);
    *(void *)(a1 + 192) = 0;
    goto LABEL_14;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_channel_close";
  BOOL v34 = (char *)_os_log_send_and_compose_impl();
  v41[0] = 16;
  char v40 = 0;
  if (__nwlog_fault(v34, v41, &v40))
  {
    if (v41[0] == 17)
    {
      __int16 v35 = __nwlog_obj();
      os_log_type_t v36 = v41[0];
      if (!os_log_type_enabled(v35, (os_log_type_t)v41[0])) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_close";
      __int16 v37 = "%{public}s called with null channel";
      goto LABEL_75;
    }
    if (!v40)
    {
      __int16 v35 = __nwlog_obj();
      os_log_type_t v36 = v41[0];
      if (!os_log_type_enabled(v35, (os_log_type_t)v41[0])) {
        goto LABEL_76;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_close";
      __int16 v37 = "%{public}s called with null channel, backtrace limit exceeded";
      goto LABEL_75;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __int16 v35 = __nwlog_obj();
    os_log_type_t v36 = v41[0];
    BOOL v39 = os_log_type_enabled(v35, (os_log_type_t)v41[0]);
    if (backtrace_string)
    {
      if (v39)
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_channel_close";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_1830D4000, v35, v36, "%{public}s called with null channel, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_76;
    }
    if (v39)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_close";
      __int16 v37 = "%{public}s called with null channel, no backtrace";
LABEL_75:
      _os_log_impl(&dword_1830D4000, v35, v36, v37, buf, 0xCu);
    }
  }
LABEL_76:
  if (v34) {
    free(v34);
  }
}

void ___ZL31nw_channel_remove_input_handlerP11nw_protocolS0_b_block_invoke_58(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  uint64_t v3 = *(void *)(v2 + 200);
  if (v3)
  {
    if ((*(_WORD *)(v2 + 444) & 0x20) != 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v4 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        int v5 = 136446210;
        uint64_t v6 = "nw_channel_remove_input_handler_block_invoke";
        _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEBUG, "%{public}s Tearing down channel after inactivity", (uint8_t *)&v5, 0xCu);
      }
      nw_channel_close(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    }
    else
    {
      nw_queue_cancel_source(v3);
      *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 200) = 0;
    }
  }
}

void ___ZL31nw_channel_remove_input_handlerP11nw_protocolS0_b_block_invoke_60(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v2)
  {
    os_release(v2);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
}

uint64_t ___ZL20remove_input_handlerP13nw_hash_tableP10nw_channelP11nw_protocol_block_invoke(uint64_t a1, uint64_t a2)
{
  return 1;
}

BOOL nw_channel_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v85 = "nw_channel_replace_input_handler";
    __int16 v23 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v83 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v23, type, &v83)) {
      goto LABEL_100;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v24 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, type[0])) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v85 = "nw_channel_replace_input_handler";
      int v26 = "%{public}s called with null channel_protocol";
      goto LABEL_98;
    }
    if (v83 == OS_LOG_TYPE_DEFAULT)
    {
      int v24 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, type[0])) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v85 = "nw_channel_replace_input_handler";
      int v26 = "%{public}s called with null channel_protocol, backtrace limit exceeded";
      goto LABEL_98;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v24 = __nwlog_obj();
    os_log_type_t v25 = type[0];
    BOOL v72 = os_log_type_enabled(v24, type[0]);
    if (!backtrace_string)
    {
      if (!v72) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v85 = "nw_channel_replace_input_handler";
      int v26 = "%{public}s called with null channel_protocol, no backtrace";
      goto LABEL_98;
    }
    if (!v72) {
      goto LABEL_152;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v85 = "nw_channel_replace_input_handler";
    __int16 v86 = 2082;
    *(void *)uint64_t v87 = backtrace_string;
    int v73 = "%{public}s called with null channel_protocol, dumping backtrace:%{public}s";
    goto LABEL_151;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v85 = "nw_channel_replace_input_handler";
    __int16 v23 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v83 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v23, type, &v83)) {
      goto LABEL_100;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v24 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, type[0])) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v85 = "nw_channel_replace_input_handler";
      int v26 = "%{public}s called with null channel";
      goto LABEL_98;
    }
    if (v83 == OS_LOG_TYPE_DEFAULT)
    {
      int v24 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, type[0])) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v85 = "nw_channel_replace_input_handler";
      int v26 = "%{public}s called with null channel, backtrace limit exceeded";
      goto LABEL_98;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v24 = __nwlog_obj();
    os_log_type_t v25 = type[0];
    BOOL v74 = os_log_type_enabled(v24, type[0]);
    if (!backtrace_string)
    {
      if (!v74) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v85 = "nw_channel_replace_input_handler";
      int v26 = "%{public}s called with null channel, no backtrace";
      goto LABEL_98;
    }
    if (!v74) {
      goto LABEL_152;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v85 = "nw_channel_replace_input_handler";
    __int16 v86 = 2082;
    *(void *)uint64_t v87 = backtrace_string;
    int v73 = "%{public}s called with null channel, dumping backtrace:%{public}s";
    goto LABEL_151;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v85 = "nw_channel_replace_input_handler";
    __int16 v23 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v83 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v23, type, &v83)) {
      goto LABEL_100;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v24 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, type[0])) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v85 = "nw_channel_replace_input_handler";
      int v26 = "%{public}s called with null old_input_handler";
      goto LABEL_98;
    }
    if (v83 == OS_LOG_TYPE_DEFAULT)
    {
      int v24 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, type[0])) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v85 = "nw_channel_replace_input_handler";
      int v26 = "%{public}s called with null old_input_handler, backtrace limit exceeded";
      goto LABEL_98;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v24 = __nwlog_obj();
    os_log_type_t v25 = type[0];
    BOOL v75 = os_log_type_enabled(v24, type[0]);
    if (!backtrace_string)
    {
      if (!v75) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v85 = "nw_channel_replace_input_handler";
      int v26 = "%{public}s called with null old_input_handler, no backtrace";
      goto LABEL_98;
    }
    if (!v75) {
      goto LABEL_152;
    }
    *(_DWORD *)buf = 136446466;
    BOOL v85 = "nw_channel_replace_input_handler";
    __int16 v86 = 2082;
    *(void *)uint64_t v87 = backtrace_string;
    int v73 = "%{public}s called with null old_input_handler, dumping backtrace:%{public}s";
LABEL_151:
    _os_log_impl(&dword_1830D4000, v24, v25, v73, buf, 0x16u);
    goto LABEL_152;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v85 = "nw_channel_replace_input_handler";
    __int16 v23 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v83 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v23, type, &v83)) {
      goto LABEL_100;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      int v24 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, type[0])) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v85 = "nw_channel_replace_input_handler";
      int v26 = "%{public}s called with null new_input_handler";
      goto LABEL_98;
    }
    if (v83 == OS_LOG_TYPE_DEFAULT)
    {
      int v24 = __nwlog_obj();
      os_log_type_t v25 = type[0];
      if (!os_log_type_enabled(v24, type[0])) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v85 = "nw_channel_replace_input_handler";
      int v26 = "%{public}s called with null new_input_handler, backtrace limit exceeded";
      goto LABEL_98;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v24 = __nwlog_obj();
    os_log_type_t v25 = type[0];
    BOOL v76 = os_log_type_enabled(v24, type[0]);
    if (!backtrace_string)
    {
      if (!v76) {
        goto LABEL_100;
      }
      *(_DWORD *)buf = 136446210;
      BOOL v85 = "nw_channel_replace_input_handler";
      int v26 = "%{public}s called with null new_input_handler, no backtrace";
      goto LABEL_98;
    }
    if (v76)
    {
      *(_DWORD *)buf = 136446466;
      BOOL v85 = "nw_channel_replace_input_handler";
      __int16 v86 = 2082;
      *(void *)uint64_t v87 = backtrace_string;
      int v73 = "%{public}s called with null new_input_handler, dumping backtrace:%{public}s";
      goto LABEL_151;
    }
LABEL_152:
    free(backtrace_string);
    goto LABEL_100;
  }
  if (*(void *)a2->flow_id != *(void *)a3->flow_id || *(void *)&a2->flow_id[8] != *(void *)&a3->flow_id[8])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136447234;
    BOOL v85 = "nw_channel_replace_input_handler";
    __int16 v86 = 1042;
    *(_DWORD *)uint64_t v87 = 16;
    *(_WORD *)&v87[4] = 2098;
    *(void *)&v87[6] = a2;
    __int16 v88 = 1042;
    *(_DWORD *)unsigned int v89 = 16;
    *(_WORD *)&v89[4] = 2098;
    *(void *)&v89[6] = a3;
    __int16 v17 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t v83 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v17, type, &v83))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v18 = gLogObj;
        os_log_type_t v19 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)buf = 136447234;
          BOOL v85 = "nw_channel_replace_input_handler";
          __int16 v86 = 1042;
          *(_DWORD *)uint64_t v87 = 16;
          *(_WORD *)&v87[4] = 2098;
          *(void *)&v87[6] = a2;
          __int16 v88 = 1042;
          *(_DWORD *)unsigned int v89 = 16;
          *(_WORD *)&v89[4] = 2098;
          *(void *)&v89[6] = a3;
          uint64_t v20 = "%{public}s New input handler does not have matching flow ID (%{public,uuid_t}.16Ps != %{public,uuid_t}.16P)";
LABEL_35:
          _os_log_impl(&dword_1830D4000, v18, v19, v20, buf, 0x2Cu);
        }
      }
      else if (v83)
      {
        uint64_t v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v18 = gLogObj;
        os_log_type_t v19 = type[0];
        BOOL v22 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
        if (v21)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136447490;
            BOOL v85 = "nw_channel_replace_input_handler";
            __int16 v86 = 1042;
            *(_DWORD *)uint64_t v87 = 16;
            *(_WORD *)&v87[4] = 2098;
            *(void *)&v87[6] = a2;
            __int16 v88 = 1042;
            *(_DWORD *)unsigned int v89 = 16;
            *(_WORD *)&v89[4] = 2098;
            *(void *)&v89[6] = a3;
            __int16 v90 = 2082;
            uint64_t v91 = v21;
            _os_log_impl(&dword_1830D4000, v18, v19, "%{public}s New input handler does not have matching flow ID (%{public,uuid_t}.16Ps != %{public,uuid_t}.16P), dumping backtrace:%{public}s", buf, 0x36u);
          }
          free(v21);
          goto LABEL_36;
        }
        if (v22)
        {
          *(_DWORD *)buf = 136447234;
          BOOL v85 = "nw_channel_replace_input_handler";
          __int16 v86 = 1042;
          *(_DWORD *)uint64_t v87 = 16;
          *(_WORD *)&v87[4] = 2098;
          *(void *)&v87[6] = a2;
          __int16 v88 = 1042;
          *(_DWORD *)unsigned int v89 = 16;
          *(_WORD *)&v89[4] = 2098;
          *(void *)&v89[6] = a3;
          uint64_t v20 = "%{public}s New input handler does not have matching flow ID (%{public,uuid_t}.16Ps != %{public,uuid_t}.1"
                "6P), no backtrace";
          goto LABEL_35;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v18 = gLogObj;
        os_log_type_t v19 = type[0];
        if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
        {
          *(_DWORD *)buf = 136447234;
          BOOL v85 = "nw_channel_replace_input_handler";
          __int16 v86 = 1042;
          *(_DWORD *)uint64_t v87 = 16;
          *(_WORD *)&v87[4] = 2098;
          *(void *)&v87[6] = a2;
          __int16 v88 = 1042;
          *(_DWORD *)unsigned int v89 = 16;
          *(_WORD *)&v89[4] = 2098;
          *(void *)&v89[6] = a3;
          uint64_t v20 = "%{public}s New input handler does not have matching flow ID (%{public,uuid_t}.16Ps != %{public,uuid_t}.1"
                "6P), backtrace limit exceeded";
          goto LABEL_35;
        }
      }
    }
LABEL_36:
    if (!v17) {
      return 0;
    }
    unsigned int v27 = (char *)v17;
LABEL_38:
    free(v27);
    return 0;
  }
  *(void *)os_log_type_t type = 0;
  BOOL v82 = type;
  uint64_t node = nw_hash_table_get_node(handle[35], (uint64_t)a2, 16);
  if (!node)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    BOOL v85 = "nw_channel_replace_input_handler";
    __int16 v23 = (const char *)_os_log_send_and_compose_impl();
    os_log_type_t v83 = OS_LOG_TYPE_ERROR;
    os_log_type_t v80 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v23, &v83, &v80))
    {
      if (v83 == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v24 = gLogObj;
        os_log_type_t v25 = v83;
        if (os_log_type_enabled((os_log_t)gLogObj, v83))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v85 = "nw_channel_replace_input_handler";
          int v26 = "%{public}s nw_hash_table_get_node failed";
LABEL_98:
          int v65 = v24;
          os_log_type_t v66 = v25;
LABEL_99:
          _os_log_impl(&dword_1830D4000, v65, v66, v26, buf, 0xCu);
        }
      }
      else if (v80)
      {
        BOOL v32 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v33 = gLogObj;
        os_log_type_t v34 = v83;
        BOOL v35 = os_log_type_enabled((os_log_t)gLogObj, v83);
        if (v32)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v85 = "nw_channel_replace_input_handler";
            __int16 v86 = 2082;
            *(void *)uint64_t v87 = v32;
            _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s nw_hash_table_get_node failed, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v32);
          goto LABEL_100;
        }
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v85 = "nw_channel_replace_input_handler";
          int v26 = "%{public}s nw_hash_table_get_node failed, no backtrace";
          int v65 = v33;
          os_log_type_t v66 = v34;
          goto LABEL_99;
        }
      }
      else
      {
        int v24 = __nwlog_obj();
        os_log_type_t v25 = v83;
        if (os_log_type_enabled(v24, v83))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v85 = "nw_channel_replace_input_handler";
          int v26 = "%{public}s nw_hash_table_get_node failed, backtrace limit exceeded";
          goto LABEL_98;
        }
      }
    }
LABEL_100:
    if (!v23) {
      return 0;
    }
    unsigned int v27 = (char *)v23;
    goto LABEL_38;
  }
  uint64_t v8 = node;
  if ((nw_protocol *)handle[34] == a2) {
    handle[34] = a3;
  }
  int v9 = (void *)(node + 32);
  if (*(void *)type)
  {
    **(void **)(node + 40) = *(void *)type;
    unsigned int v10 = v82;
    *(void *)(*(void *)type + 40) = *(void *)(node + 40);
    *(void *)(node + 40) = v10;
    *(void *)os_log_type_t type = 0;
    BOOL v82 = type;
  }
  if (*v9)
  {
    *(void *)BOOL v82 = *v9;
    *(void *)(*(void *)(node + 32) + 40) = v82;
    BOOL v82 = *(os_log_type_t **)(node + 40);
    *(void *)(node + 32) = 0;
    *(void *)(node + 40) = v9;
  }
  uint64_t v11 = *(void *)(node + 48);
  *(void *)(node + 48) = 0;
  unsigned int v12 = *(unsigned __int8 *)(node + 153);
  int v13 = (v12 >> 1) & 1;
  int flow_control_status = nw_link_get_flow_control_status(*(void **)(node + 104));
  int v15 = flow_control_status;
  int v16 = *(_DWORD *)(v8 + 112);
  if ((v12 & 1) == 0)
  {
    if (!v13) {
      goto LABEL_16;
    }
LABEL_50:
    uint64_t v36 = *(void *)(v8 + 88);
    __int16 v37 = *(void **)(v8 + 96);
    if (v36)
    {
      *(void *)(v36 + 64) = v37;
      __int16 v37 = *(void **)(v8 + 96);
    }
    else
    {
      handle[49] = v37;
    }
    *__int16 v37 = v36;
    if ((*(unsigned char *)(v8 + 64) & 1) == 0) {
      goto LABEL_56;
    }
    goto LABEL_54;
  }
  uint64_t v30 = *(void *)(v8 + 72);
  __int16 v31 = *(void **)(v8 + 80);
  if (v30)
  {
    *(void *)(v30 + 48) = v31;
    **(void **)(v8 + 80) = v30;
    if (v13) {
      goto LABEL_50;
    }
  }
  else
  {
    handle[47] = v31;
    *__int16 v31 = 0;
    if (v13) {
      goto LABEL_50;
    }
  }
LABEL_16:
  if ((*(unsigned char *)(v8 + 64) & 1) == 0) {
    goto LABEL_56;
  }
LABEL_54:
  uint64_t v38 = *(void *)(v8 + 56);
  if (v38)
  {
    if (*(_UNKNOWN **)(v38 + 40) == &nw_protocol_ref_counted_handle)
    {
      uint64_t v61 = *(void *)(v38 + 88);
      if (v61)
      {
        uint64_t v62 = v61 - 1;
        *(void *)(v38 + 88) = v62;
        if (!v62)
        {
          int v78 = flow_control_status;
          uint64_t v63 = *(void (***)(void))(v38 + 64);
          if (v63)
          {
            *(void *)(v38 + 64) = 0;
            v63[2](v63);
            _Block_release(v63);
          }
          if (*(unsigned char *)(v38 + 72))
          {
            uint64_t v64 = *(const void **)(v38 + 64);
            if (v64) {
              _Block_release(v64);
            }
          }
          free((void *)v38);
          int v15 = v78;
        }
      }
    }
  }
LABEL_56:
  *(unsigned char *)(v8 + 64) |= 1u;
  *(void *)(v8 + 56) = 0;
  nw_hash_table_remove_node(handle[35], v8);
  os_log_type_t v83 = OS_LOG_TYPE_DEFAULT;
  BOOL v39 = nw_hash_table_add_object(handle[35], (uint64_t)a3, (char *)&v83);
  BOOL v28 = v83 != OS_LOG_TYPE_DEFAULT;
  if (v83)
  {
    int v40 = v15;
    int v77 = (void *)v39;
    uint64_t extra = nw_hash_node_get_extra(v39);
    uint64_t v42 = extra;
    *(_OWORD *)uint64_t extra = 0u;
    *(_OWORD *)(extra + 16) = 0u;
    *(_OWORD *)(extra + 32) = 0u;
    *(_OWORD *)(extra + 48) = 0u;
    *(_OWORD *)(extra + 64) = 0u;
    *(_OWORD *)(extra + 80) = 0u;
    *(_OWORD *)(extra + 96) = 0u;
    *(_OWORD *)(extra + 112) = 0u;
    *(void *)(extra + 8) = extra;
    if (*(void *)type)
    {
      *(void *)uint64_t extra = *(void *)type;
      __int16 v43 = v82;
      *(void *)(*(void *)type + 40) = extra;
      *(void *)(extra + 8) = v43;
      *(void *)os_log_type_t type = 0;
      BOOL v82 = type;
    }
    *(void *)(extra + 16) = v11;
    if (a3->handle == &nw_protocol_ref_counted_handle)
    {
      callbacks = a3[1].callbacks;
      if (callbacks) {
        a3[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
      }
      char v44 = 1;
    }
    else
    {
      char v44 = 0;
    }
    int v50 = v12 & 1;
    char v51 = *(unsigned char *)(extra + 32);
    if (v51)
    {
      nw::release_if_needed<nw_protocol *>((uint64_t *)(extra + 24));
      char v51 = *(unsigned char *)(v42 + 32);
    }
    *(void *)(v42 + 24) = a3;
    *(unsigned char *)(v42 + 32) = v51 & 0xFE | v44;
    __int16 v52 = *(void **)(v42 + 72);
    if (v52)
    {
      os_release(v52);
      *(void *)(v42 + 72) = 0;
    }
    *(void *)(v42 + 72) = nw_link_info_create(v40);
    uuid_unparse(a3->flow_id, (char *)(v42 + 84));
    *(_DWORD *)(v42 + 80) = v16;
    char v53 = *(unsigned char *)(v42 + 121) & 0xFE | v50;
    *(unsigned char *)(v42 + 121) = v53;
    if (v50)
    {
      *(void *)(v42 + 40) = 0;
      uint64_t v54 = (uint64_t *)handle[47];
      *(void *)(v42 + 48) = v54;
      *uint64_t v54 = v42;
      handle[47] = v42 + 40;
      char v53 = *(unsigned char *)(v42 + 121);
    }
    *(unsigned char *)(v42 + 121) = v53 & 0xFD | (2 * v13);
    uint64_t v55 = v77;
    if (v13)
    {
      *(void *)(v42 + 56) = 0;
      char v56 = (uint64_t *)handle[49];
      *(void *)(v42 + 64) = v56;
      *char v56 = v42;
      handle[49] = v42 + 56;
    }
    output_handler = a3->output_handler;
    if (output_handler != a1)
    {
      if (output_handler)
      {
        if (output_handler->handle == &nw_protocol_ref_counted_handle)
        {
          int v67 = output_handler[1].callbacks;
          if (v67)
          {
            int v68 = (nw_protocol_callbacks *)((char *)v67 - 1);
            output_handler[1].callbacks = v68;
            if (!v68)
            {
              uint64_t v69 = *(void (***)(void))output_handler[1].flow_id;
              if (v69)
              {
                *(void *)output_handler[1].flow_id = 0;
                v69[2](v69);
                _Block_release(v69);
              }
              if (output_handler[1].flow_id[8])
              {
                uint64_t v70 = *(const void **)output_handler[1].flow_id;
                if (v70) {
                  _Block_release(v70);
                }
              }
              free(output_handler);
              uint64_t v55 = v77;
            }
          }
        }
      }
      a3->output_handler = a1;
      if (a1->handle == &nw_protocol_ref_counted_handle)
      {
        __int16 v58 = a1[1].callbacks;
        if (v58) {
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v58->add_input_handler + 1);
        }
      }
    }
    a3->output_handler_context = v55;
    return v28;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446722;
  BOOL v85 = "nw_channel_replace_input_handler";
  __int16 v86 = 1042;
  *(_DWORD *)uint64_t v87 = 16;
  *(_WORD *)&v87[4] = 2098;
  *(void *)&v87[6] = a3;
  __int16 v45 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v80 = OS_LOG_TYPE_ERROR;
  char v79 = 0;
  if (__nwlog_fault(v45, &v80, &v79))
  {
    if (v80 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      int v46 = gLogObj;
      os_log_type_t v47 = v80;
      if (!os_log_type_enabled((os_log_t)gLogObj, v80)) {
        goto LABEL_117;
      }
      *(_DWORD *)buf = 136446722;
      BOOL v85 = "nw_channel_replace_input_handler";
      __int16 v86 = 1042;
      *(_DWORD *)uint64_t v87 = 16;
      *(_WORD *)&v87[4] = 2098;
      *(void *)&v87[6] = a3;
      long long v48 = "%{public}s Channel failed to add new input handler for %{public,uuid_t}.16P";
      goto LABEL_116;
    }
    if (!v79)
    {
      int v46 = __nwlog_obj();
      os_log_type_t v47 = v80;
      if (!os_log_type_enabled(v46, v80)) {
        goto LABEL_117;
      }
      *(_DWORD *)buf = 136446722;
      BOOL v85 = "nw_channel_replace_input_handler";
      __int16 v86 = 1042;
      *(_DWORD *)uint64_t v87 = 16;
      *(_WORD *)&v87[4] = 2098;
      *(void *)&v87[6] = a3;
      long long v48 = "%{public}s Channel failed to add new input handler for %{public,uuid_t}.16P, backtrace limit exceeded";
      goto LABEL_116;
    }
    os_log_type_t v59 = (char *)__nw_create_backtrace_string();
    int v46 = __nwlog_obj();
    os_log_type_t v47 = v80;
    BOOL v60 = os_log_type_enabled(v46, v80);
    if (v59)
    {
      if (v60)
      {
        *(_DWORD *)buf = 136446978;
        BOOL v85 = "nw_channel_replace_input_handler";
        __int16 v86 = 1042;
        *(_DWORD *)uint64_t v87 = 16;
        *(_WORD *)&v87[4] = 2098;
        *(void *)&v87[6] = a3;
        __int16 v88 = 2082;
        *(void *)unsigned int v89 = v59;
        _os_log_impl(&dword_1830D4000, v46, v47, "%{public}s Channel failed to add new input handler for %{public,uuid_t}.16P, dumping backtrace:%{public}s", buf, 0x26u);
      }
      free(v59);
      goto LABEL_117;
    }
    if (v60)
    {
      *(_DWORD *)buf = 136446722;
      BOOL v85 = "nw_channel_replace_input_handler";
      __int16 v86 = 1042;
      *(_DWORD *)uint64_t v87 = 16;
      *(_WORD *)&v87[4] = 2098;
      *(void *)&v87[6] = a3;
      long long v48 = "%{public}s Channel failed to add new input handler for %{public,uuid_t}.16P, no backtrace";
LABEL_116:
      _os_log_impl(&dword_1830D4000, v46, v47, v48, buf, 0x1Cu);
    }
  }
LABEL_117:
  if (v45) {
    free(v45);
  }
  return v28;
}

double nw_channel_get_flow_handler(nw_frame *a1, unsigned __int8 *a2)
{
  if (nw_frame_get_metadata((uint64_t)a1))
  {
    os_packet_get_flow_uuid();
    double result = 0.0;
    *(_OWORD *)a2 = 0uLL;
  }
  return result;
}

uint64_t nw_channel_set_flow_handler(nw_frame *a1, unsigned __int8 *a2)
{
  uint64_t result = nw_frame_get_metadata((uint64_t)a1);
  if (result)
  {
    return os_packet_set_flow_uuid();
  }
  return result;
}

void nw_channel_reclassify_input(nw_frame *a1, unsigned __int8 *uu, char *a3)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
    int v46 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v74 = 0;
    if (!__nwlog_fault(v46, type, &v74)) {
      goto LABEL_109;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (v74)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v47 = __nwlog_obj();
        os_log_type_t v48 = type[0];
        BOOL v66 = os_log_type_enabled(v47, type[0]);
        if (backtrace_string)
        {
          if (v66)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v47, v48, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
        }
        else if (v66)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
          uint64_t v49 = "%{public}s called with null frame, no backtrace";
          goto LABEL_108;
        }
      }
      else
      {
        os_log_type_t v47 = __nwlog_obj();
        os_log_type_t v48 = type[0];
        if (os_log_type_enabled(v47, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
          uint64_t v49 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_108;
        }
      }
      goto LABEL_109;
    }
    os_log_type_t v47 = __nwlog_obj();
    os_log_type_t v48 = type[0];
    if (!os_log_type_enabled(v47, type[0])) {
      goto LABEL_109;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
    uint64_t v49 = "%{public}s called with null frame";
LABEL_108:
    _os_log_impl(&dword_1830D4000, v47, v48, v49, buf, 0xCu);
    goto LABEL_109;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
    int v46 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v74 = 0;
    if (!__nwlog_fault(v46, type, &v74)) {
      goto LABEL_109;
    }
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (v74)
      {
        __int16 v58 = (char *)__nw_create_backtrace_string();
        os_log_type_t v47 = __nwlog_obj();
        os_log_type_t v48 = type[0];
        BOOL v67 = os_log_type_enabled(v47, type[0]);
        if (v58)
        {
          if (v67)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v58;
            BOOL v60 = "%{public}s called with null context, dumping backtrace:%{public}s";
            goto LABEL_93;
          }
LABEL_94:
          free(v58);
          if (!v46) {
            return;
          }
LABEL_110:
          __int16 v45 = (char *)v46;
LABEL_111:
          free(v45);
          return;
        }
        if (v67)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
          uint64_t v49 = "%{public}s called with null context, no backtrace";
          goto LABEL_108;
        }
      }
      else
      {
        os_log_type_t v47 = __nwlog_obj();
        os_log_type_t v48 = type[0];
        if (os_log_type_enabled(v47, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
          uint64_t v49 = "%{public}s called with null context, backtrace limit exceeded";
          goto LABEL_108;
        }
      }
      goto LABEL_109;
    }
    os_log_type_t v47 = __nwlog_obj();
    os_log_type_t v48 = type[0];
    if (!os_log_type_enabled(v47, type[0])) {
      goto LABEL_109;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
    uint64_t v49 = "%{public}s called with null context";
    goto LABEL_108;
  }
  if (uuid_is_null(uu))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
    int v46 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v74 = 0;
    if (__nwlog_fault(v46, type, &v74))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v47 = __nwlog_obj();
        os_log_type_t v48 = type[0];
        if (os_log_type_enabled(v47, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
          uint64_t v49 = "%{public}s called with null (!uuid_is_null(newflow))";
          goto LABEL_108;
        }
      }
      else if (v74)
      {
        __int16 v58 = (char *)__nw_create_backtrace_string();
        os_log_type_t v47 = __nwlog_obj();
        os_log_type_t v48 = type[0];
        BOOL v68 = os_log_type_enabled(v47, type[0]);
        if (v58)
        {
          if (v68)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v58;
            BOOL v60 = "%{public}s called with null (!uuid_is_null(newflow)), dumping backtrace:%{public}s";
            goto LABEL_93;
          }
          goto LABEL_94;
        }
        if (v68)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
          uint64_t v49 = "%{public}s called with null (!uuid_is_null(newflow)), no backtrace";
          goto LABEL_108;
        }
      }
      else
      {
        os_log_type_t v47 = __nwlog_obj();
        os_log_type_t v48 = type[0];
        if (os_log_type_enabled(v47, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
          uint64_t v49 = "%{public}s called with null (!uuid_is_null(newflow)), backtrace limit exceeded";
          goto LABEL_108;
        }
      }
    }
LABEL_109:
    if (!v46) {
      return;
    }
    goto LABEL_110;
  }
  uint64_t v6 = *((void *)a3 + 35);
  if (v6 && (uint64_t node = nw_hash_table_get_node(v6, (uint64_t)uu, 16)) != 0)
  {
    char v8 = 0;
    uint64_t v9 = *(void *)(node + 16);
    uint64_t v10 = node + 32;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    char v8 = 1;
  }
  if ((*((_WORD *)a1 + 102) & 4) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v11 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
      _os_log_impl(&dword_1830D4000, v11, OS_LOG_TYPE_ERROR, "%{public}s reclassify failed to reset frame", buf, 0xCu);
    }
    nw_frame_finalize((uint64_t)a1);
    return;
  }
  long long v12 = *((_OWORD *)a1 + 14);
  *(_OWORD *)buf = *((_OWORD *)a1 + 13);
  *(_OWORD *)&buf[16] = v12;
  unsigned int data_offset = os_buflet_get_data_offset();
  uint64_t v14 = os_buflet_get_object_address() + data_offset;
  int data_length = os_buflet_get_data_length();
  nw_frame_reset((uint64_t)a1, v14, data_length, (uint64_t)nw_channel_finalize_input_frame, (uint64_t)a3);
  if ((*((_WORD *)a1 + 102) & 4) != 0) {
    int v16 = (_OWORD *)((char *)a1 + 208);
  }
  else {
    int v16 = 0;
  }
  long long v17 = *(_OWORD *)&buf[16];
  *int v16 = *(_OWORD *)buf;
  v16[1] = v17;
  if (v9) {
    char v18 = v8;
  }
  else {
    char v18 = 1;
  }
  if ((v18 & 1) != 0 || !v10)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v25 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
      *(_WORD *)&unsigned char buf[12] = 1042;
      *(_DWORD *)&buf[14] = 16;
      *(_WORD *)&buf[18] = 2098;
      *(void *)&buf[20] = uu;
      _os_log_impl(&dword_1830D4000, v25, OS_LOG_TYPE_ERROR, "%{public}s reclassify can't find client for slot %{public,uuid_t}.16P, pending", buf, 0x1Cu);
    }
    if (!uuid_is_null((const unsigned __int8 *)a3 + 352) && uuid_compare((const unsigned __int8 *)a3 + 352, uu))
    {
      v70[0] = MEMORY[0x1E4F143A8];
      v70[1] = 0x40000000;
      BOOL v71 = ___ZL27nw_channel_reclassify_inputP8nw_framePhPv_block_invoke;
      BOOL v72 = &__block_descriptor_tmp_50_88934;
      int v73 = a3;
      uint64_t v32 = *((void *)a3 + 42);
      do
      {
        if (!v32) {
          break;
        }
        uint64_t v33 = *(void *)(v32 + 32);
        char v34 = ((uint64_t (*)(void *))v71)(v70);
        uint64_t v32 = v33;
      }
      while ((v34 & 1) != 0);
      uint64_t v35 = *((void *)a3 + 24);
      if (v35)
      {
        nw_queue_cancel_source(v35);
        *((void *)a3 + 24) = 0;
      }
    }
    *((_OWORD *)a3 + 22) = *(_OWORD *)uu;
    *((void *)a1 + 4) = 0;
    int v26 = (void *)*((void *)a3 + 43);
    *((void *)a1 + 5) = v26;
    void *v26 = a1;
    *((void *)a3 + 43) = (char *)a1 + 32;
    if (*((void *)a3 + 24)) {
      return;
    }
    unsigned int v27 = (void *)*((void *)a3 + 19);
    v69[0] = MEMORY[0x1E4F143A8];
    v69[1] = 0x40000000;
    v69[2] = ___ZL27nw_channel_reclassify_inputP8nw_framePhPv_block_invoke_2;
    v69[3] = &__block_descriptor_tmp_53_88935;
    v69[4] = a3;
    BOOL source = nw_queue_context_create_source(v27, 2, 3, 0, v69, 0);
    *((void *)a3 + 24) = source;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    BOOL v29 = gLogObj;
    if (source)
    {
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = 2000;
        _os_log_impl(&dword_1830D4000, v29, OS_LOG_TYPE_DEBUG, "%{public}s Setting timer to finalize pending reclassify frames in %llums", buf, 0x16u);
      }
      uint64_t v30 = *((void *)a3 + 24);
      dispatch_time_t v31 = dispatch_time(0x8000000000000000, 2000000000);
      nw_queue_set_timer_values(v30, v31, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
      nw_queue_activate_source(*((void *)a3 + 24));
      return;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
    int v46 = (const char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    char v74 = 0;
    if (!__nwlog_fault(v46, type, &v74)) {
      goto LABEL_109;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v47 = gLogObj;
      os_log_type_t v48 = type[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, type[0])) {
        goto LABEL_109;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
      uint64_t v49 = "%{public}s nw_queue_context_create_source(timer) failed";
      goto LABEL_108;
    }
    if (!v74)
    {
      os_log_type_t v47 = __nwlog_obj();
      os_log_type_t v48 = type[0];
      if (!os_log_type_enabled(v47, type[0])) {
        goto LABEL_109;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
      uint64_t v49 = "%{public}s nw_queue_context_create_source(timer) failed, backtrace limit exceeded";
      goto LABEL_108;
    }
    __int16 v58 = (char *)__nw_create_backtrace_string();
    os_log_type_t v47 = __nwlog_obj();
    os_log_type_t v48 = type[0];
    BOOL v59 = os_log_type_enabled(v47, type[0]);
    if (!v58)
    {
      if (!v59) {
        goto LABEL_109;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
      uint64_t v49 = "%{public}s nw_queue_context_create_source(timer) failed, no backtrace";
      goto LABEL_108;
    }
    if (v59)
    {
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = "nw_channel_reclassify_input";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v58;
      BOOL v60 = "%{public}s nw_queue_context_create_source(timer) failed, dumping backtrace:%{public}s";
LABEL_93:
      _os_log_impl(&dword_1830D4000, v47, v48, v60, buf, 0x16u);
      goto LABEL_94;
    }
    goto LABEL_94;
  }
  *((void *)a1 + 4) = 0;
  os_log_type_t v19 = *(void **)(v10 + 8);
  *((void *)a1 + 5) = v19;
  void *v19 = a1;
  *(void *)(v10 + 8) = (char *)a1 + 32;
  uint64_t v20 = *(void *)(v9 + 56);
  if (v20 && ((*(unsigned char *)(v20 + 153) & 8) != 0 || (*((_WORD *)a3 + 222) & 0x80) == 0))
  {
    uint64_t v21 = *(void *)(v9 + 24);
    if (v21)
    {
      BOOL v22 = *(void (**)(uint64_t, char *))(v21 + 64);
      if (!v22) {
        goto LABEL_152;
      }
      __int16 v23 = *(void **)(v9 + 40);
      if (v23 == &nw_protocol_ref_counted_handle)
      {
        uint64_t v24 = *(void *)(v9 + 88);
        if (v24) {
          *(void *)(v9 + 88) = v24 + 1;
        }
      }
      if (*((_UNKNOWN **)a3 + 8) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v36 = *((void *)a3 + 14);
        if (v36) {
          *((void *)a3 + 14) = v36 + 1;
        }
        v22(v9, a3 + 24);
        if (*((_UNKNOWN **)a3 + 8) == &nw_protocol_ref_counted_handle)
        {
          uint64_t v50 = *((void *)a3 + 14);
          if (v50)
          {
            uint64_t v51 = v50 - 1;
            *((void *)a3 + 14) = v51;
            if (!v51)
            {
              __int16 v52 = (void (**)(void))*((void *)a3 + 11);
              if (v52)
              {
                *((void *)a3 + 11) = 0;
                v52[2](v52);
                _Block_release(v52);
              }
              if (a3[96])
              {
                char v53 = (const void *)*((void *)a3 + 11);
                if (v53) {
                  _Block_release(v53);
                }
              }
              free(a3 + 24);
            }
          }
        }
      }
      else
      {
        v22(v9, a3 + 24);
      }
      if (v23 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v9 + 40) == &nw_protocol_ref_counted_handle)
      {
        uint64_t v54 = *(void *)(v9 + 88);
        if (v54)
        {
          uint64_t v55 = v54 - 1;
          *(void *)(v9 + 88) = v55;
          if (!v55)
          {
            char v56 = *(void (***)(void))(v9 + 64);
            if (v56)
            {
              *(void *)(v9 + 64) = 0;
              v56[2](v56);
              _Block_release(v56);
            }
            if (*(unsigned char *)(v9 + 72))
            {
              int v57 = *(const void **)(v9 + 64);
              if (v57) {
                _Block_release(v57);
              }
            }
            free((void *)v9);
          }
        }
      }
      uint64_t v21 = *(void *)(v9 + 24);
      if (v21)
      {
LABEL_152:
        __int16 v37 = *(void (**)(uint64_t, char *))(v21 + 264);
        if (v37)
        {
          uint64_t v38 = *(void **)(v9 + 40);
          if (v38 == &nw_protocol_ref_counted_handle)
          {
            uint64_t v39 = *(void *)(v9 + 88);
            if (v39) {
              *(void *)(v9 + 88) = v39 + 1;
            }
          }
          if (*((_UNKNOWN **)a3 + 8) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v40 = *((void *)a3 + 14);
            if (v40) {
              *((void *)a3 + 14) = v40 + 1;
            }
            v37(v9, a3 + 24);
            if (*((_UNKNOWN **)a3 + 8) == &nw_protocol_ref_counted_handle)
            {
              uint64_t v61 = *((void *)a3 + 14);
              if (v61)
              {
                uint64_t v62 = v61 - 1;
                *((void *)a3 + 14) = v62;
                if (!v62)
                {
                  uint64_t v63 = (void (**)(void))*((void *)a3 + 11);
                  if (v63)
                  {
                    *((void *)a3 + 11) = 0;
                    v63[2](v63);
                    _Block_release(v63);
                  }
                  if (a3[96])
                  {
                    uint64_t v64 = (const void *)*((void *)a3 + 11);
                    if (v64) {
                      _Block_release(v64);
                    }
                  }
                  free(a3 + 24);
                }
              }
            }
          }
          else
          {
            v37(v9, a3 + 24);
          }
          if (v38 == &nw_protocol_ref_counted_handle && *(_UNKNOWN **)(v9 + 40) == &nw_protocol_ref_counted_handle)
          {
            uint64_t v41 = *(void *)(v9 + 88);
            if (v41)
            {
              uint64_t v42 = v41 - 1;
              *(void *)(v9 + 88) = v42;
              if (!v42)
              {
                __int16 v43 = *(void (***)(void))(v9 + 64);
                if (v43)
                {
                  *(void *)(v9 + 64) = 0;
                  v43[2](v43);
                  _Block_release(v43);
                }
                if (*(unsigned char *)(v9 + 72))
                {
                  char v44 = *(const void **)(v9 + 64);
                  if (v44) {
                    _Block_release(v44);
                  }
                }
                __int16 v45 = (char *)v9;
                goto LABEL_111;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t ___ZL27nw_channel_reclassify_inputP8nw_framePhPv_block_invoke(uint64_t a1, uint64_t a2)
{
  nw_frame_finalize(a2);
  uint64_t v4 = *(void *)(a2 + 32);
  int v5 = *(void **)(a2 + 40);
  if (v4)
  {
    *(void *)(v4 + 40) = v5;
    int v5 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 344) = v5;
  }
  void *v5 = v4;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return 1;
}

void ___ZL27nw_channel_reclassify_inputP8nw_framePhPv_block_invoke_2(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v2 = gLogObj;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446210;
    int v13 = "nw_channel_reclassify_input_block_invoke_2";
    _os_log_impl(&dword_1830D4000, v2, OS_LOG_TYPE_DEBUG, "%{public}s reclassify is finalizing pending frames that have timed out", buf, 0xCu);
  }
  uint64_t v3 = *(void *)(a1 + 32);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  uint64_t v9 = ___ZL27nw_channel_reclassify_inputP8nw_framePhPv_block_invoke_51;
  uint64_t v10 = &__block_descriptor_tmp_52_88943;
  uint64_t v11 = v3;
  uint64_t v4 = *(void *)(v3 + 336);
  do
  {
    if (!v4) {
      break;
    }
    uint64_t v5 = *(void *)(v4 + 32);
    char v6 = ((uint64_t (*)(void *))v9)(v8);
    uint64_t v4 = v5;
  }
  while ((v6 & 1) != 0);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 192);
  if (v7)
  {
    nw_queue_cancel_source(v7);
    *(void *)(*(void *)(a1 + 32) + 192) = 0;
  }
}

uint64_t ___ZL27nw_channel_reclassify_inputP8nw_framePhPv_block_invoke_51(uint64_t a1, uint64_t a2)
{
  nw_frame_finalize(a2);
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void **)(a2 + 40);
  if (v4)
  {
    *(void *)(v4 + 40) = v5;
    uint64_t v5 = *(void **)(a2 + 40);
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + 344) = v5;
  }
  void *v5 = v4;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return 1;
}

BOOL nw_channel_create_with_nexus(unsigned __int8 *a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  v7[0] = a3;
  v7[1] = a4;
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
  }
  return nw_channel_create_with_attributes((id)nw_context_copy_implicit_context::implicit_context, a1, a2, (uint64_t)v7);
}

void nw_channel_simulate_defunct_all(void *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 0x40000000;
    void v8[2] = __nw_channel_simulate_defunct_all_block_invoke;
    v8[3] = &unk_1E524B658;
    v8[4] = a2;
    v8[5] = a1;
    nw_queue_context_async(a1, v8);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  long long v12 = "nw_channel_simulate_defunct_all";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t v10 = OS_LOG_TYPE_ERROR;
  char v9 = 0;
  if (__nwlog_fault(v2, &v10, &v9))
  {
    if (v10 == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = v10;
      if (!os_log_type_enabled(v3, v10)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      long long v12 = "nw_channel_simulate_defunct_all";
      uint64_t v5 = "%{public}s called with null context";
      goto LABEL_17;
    }
    if (!v9)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = v10;
      if (!os_log_type_enabled(v3, v10)) {
        goto LABEL_18;
      }
      *(_DWORD *)buf = 136446210;
      long long v12 = "nw_channel_simulate_defunct_all";
      uint64_t v5 = "%{public}s called with null context, backtrace limit exceeded";
      goto LABEL_17;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    uint64_t v3 = __nwlog_obj();
    os_log_type_t v4 = v10;
    BOOL v7 = os_log_type_enabled(v3, v10);
    if (backtrace_string)
    {
      if (v7)
      {
        *(_DWORD *)buf = 136446466;
        long long v12 = "nw_channel_simulate_defunct_all";
        __int16 v13 = 2082;
        uint64_t v14 = backtrace_string;
        _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
      goto LABEL_18;
    }
    if (v7)
    {
      *(_DWORD *)buf = 136446210;
      long long v12 = "nw_channel_simulate_defunct_all";
      uint64_t v5 = "%{public}s called with null context, no backtrace";
LABEL_17:
      _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
    }
  }
LABEL_18:
  if (v2) {
    free(v2);
  }
}

void __nw_channel_simulate_defunct_all_block_invoke(uint64_t a1)
{
  BOOL globals_for_channel = nw_context_get_globals_for_channel(*(void **)(a1 + 40));
  uint64_t v9 = 0;
  os_log_type_t v10 = &v9;
  uint64_t v11 = 0x2000000000;
  uint64_t v12 = 0;
  uint64_t v3 = (os_unfair_lock_s *)(globals_for_channel + 16);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  void v8[2] = __nw_channel_simulate_defunct_all_block_invoke_2;
  v8[3] = &unk_1E524B610;
  v8[4] = &v9;
  v8[5] = globals_for_channel;
  os_unfair_lock_lock((os_unfair_lock_t)(globals_for_channel + 16));
  __nw_channel_simulate_defunct_all_block_invoke_2((uint64_t)v8);
  os_unfair_lock_unlock(v3);
  uint64_t v5 = (atomic_uchar *)v10[3];
  if (v5)
  {
    nw_array_apply(v5, (uint64_t)&__block_literal_global_22_88976);
    char v6 = (void *)v10[3];
    if (v6)
    {
      os_release(v6);
      v10[3] = 0;
    }
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v7, v4);
  }
  _Block_object_dispose(&v9, 8);
}

uint64_t __nw_channel_simulate_defunct_all_block_invoke_2(uint64_t a1)
{
  uint64_t result = **(void **)(a1 + 40);
  if (result)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 0x40000000;
    v3[2] = __nw_channel_simulate_defunct_all_block_invoke_3;
    v3[3] = &unk_1E524B5E8;
    v3[4] = *(void *)(a1 + 32);
    return nw_dictionary_apply(result, (uint64_t)v3);
  }
  return result;
}

uint64_t __nw_channel_simulate_defunct_all_block_invoke_19(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (((*(unsigned __int16 *)(a3 + 444) | (*(unsigned __int8 *)(a3 + 446) << 16)) & 0x80000) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v4 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136446466;
      uint64_t v7 = "nw_channel_simulate_defunct_all_block_invoke";
      __int16 v8 = 2048;
      uint64_t v9 = a3;
      _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s Simulating channel defunct for %p", (uint8_t *)&v6, 0x16u);
    }
    nw_channel_handle_defunct(a3);
  }
  return 1;
}

uint64_t __nw_channel_simulate_defunct_all_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a3 + 136))
  {
    *(unsigned char *)(a3 + 446) = (*(unsigned __int16 *)(a3 + 444) | (*(unsigned __int8 *)(a3 + 446) << 16) | 0x40000u) >> 16;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v5 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      int v9 = 136446210;
      uint64_t v10 = "nw_channel_simulate_defunct_all_block_invoke_3";
      _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_DEBUG, "%{public}s Purging channel packet pool before defunct", (uint8_t *)&v9, 0xCu);
    }
    os_channel_packet_pool_purge();
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (!v6)
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = nw_array_create();
      uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    }
    nw_array_append(v6, (void *)a3);
  }
  unsigned int v7 = (*(unsigned __int16 *)(a3 + 444) | (*(unsigned __int8 *)(a3 + 446) << 16)) & 0xFFFDFFFF;
  *(_WORD *)(a3 + 444) = *(_WORD *)(a3 + 444);
  *(unsigned char *)(a3 + 446) = BYTE2(v7);
  return 1;
}

void nw_channel_release_frame_array(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (_WORD *)(a1 + 444);
  while (1)
  {
    uint64_t v5 = (void *)*a2;
    if (!*a2) {
      break;
    }
    if ((*v4 & 0x1000) != 0)
    {
      metadata = (void *)nw_frame_get_metadata(*a2);
      if (metadata)
      {
        unsigned int v7 = metadata;
        if (*metadata)
        {
          if (*(void *)(a1 + 136) && os_channel_packet_free()) {
            nw_channel_check_defunct(a1);
          }
          *unsigned int v7 = 0;
          v7[1] = 0;
        }
      }
    }
    uint64_t v8 = v5[2];
    int v9 = (void *)v5[3];
    if (v8)
    {
      *(void *)(v8 + 24) = v9;
      int v9 = (void *)v5[3];
    }
    else
    {
      a2[1] = (uint64_t)v9;
    }
    void *v9 = v8;
    v5[2] = 0;
    v5[3] = 0;
    os_release(v5);
  }
}

uint64_t nw_channel_get_nexus_instance(uint64_t a1, _OWORD *a2, _DWORD *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_channel_get_nexus_instance";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v4, &type, &v17)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "nw_channel_get_nexus_instance";
      unsigned int v7 = "%{public}s called with null channel";
LABEL_41:
      uint64_t v15 = v5;
      os_log_type_t v16 = v6;
LABEL_42:
      _os_log_impl(&dword_1830D4000, v15, v16, v7, buf, 0xCu);
      goto LABEL_43;
    }
    if (!v17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = gLogObj;
      os_log_type_t v6 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_channel_get_nexus_instance";
        unsigned int v7 = "%{public}s called with null channel, backtrace limit exceeded";
        goto LABEL_41;
      }
      goto LABEL_43;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v9 = gLogObj;
    os_log_type_t v10 = type;
    BOOL v11 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v11) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "nw_channel_get_nexus_instance";
      unsigned int v7 = "%{public}s called with null channel, no backtrace";
      goto LABEL_49;
    }
    if (!v11) {
      goto LABEL_30;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v20 = "nw_channel_get_nexus_instance";
    __int16 v21 = 2082;
    BOOL v22 = backtrace_string;
    uint64_t v12 = "%{public}s called with null channel, dumping backtrace:%{public}s";
LABEL_29:
    _os_log_impl(&dword_1830D4000, v9, v10, v12, buf, 0x16u);
    goto LABEL_30;
  }
  if (!a2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_channel_get_nexus_instance";
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v17 = 0;
    if (!__nwlog_fault(v4, &type, &v17)) {
      goto LABEL_43;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = gLogObj;
      os_log_type_t v6 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "nw_channel_get_nexus_instance";
      unsigned int v7 = "%{public}s called with null nexus_instance";
      goto LABEL_41;
    }
    if (!v17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = gLogObj;
      os_log_type_t v6 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_channel_get_nexus_instance";
        unsigned int v7 = "%{public}s called with null nexus_instance, backtrace limit exceeded";
        goto LABEL_41;
      }
      goto LABEL_43;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v9 = gLogObj;
    os_log_type_t v10 = type;
    BOOL v13 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v13) {
        goto LABEL_43;
      }
      *(_DWORD *)buf = 136446210;
      uint64_t v20 = "nw_channel_get_nexus_instance";
      unsigned int v7 = "%{public}s called with null nexus_instance, no backtrace";
      goto LABEL_49;
    }
    if (!v13) {
      goto LABEL_30;
    }
    *(_DWORD *)buf = 136446466;
    uint64_t v20 = "nw_channel_get_nexus_instance";
    __int16 v21 = 2082;
    BOOL v22 = backtrace_string;
    uint64_t v12 = "%{public}s called with null nexus_instance, dumping backtrace:%{public}s";
    goto LABEL_29;
  }
  if (a3)
  {
    *a2 = *(_OWORD *)(a1 + 88);
    *a3 = *(_DWORD *)(a1 + 428);
    return 1;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  uint64_t v20 = "nw_channel_get_nexus_instance";
  uint64_t v4 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (!__nwlog_fault(v4, &type, &v17)) {
    goto LABEL_43;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v5 = gLogObj;
      os_log_type_t v6 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v20 = "nw_channel_get_nexus_instance";
        unsigned int v7 = "%{public}s called with null port, backtrace limit exceeded";
        goto LABEL_41;
      }
      goto LABEL_43;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    int v9 = gLogObj;
    os_log_type_t v10 = type;
    BOOL v14 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v20 = "nw_channel_get_nexus_instance";
        __int16 v21 = 2082;
        BOOL v22 = backtrace_string;
        uint64_t v12 = "%{public}s called with null port, dumping backtrace:%{public}s";
        goto LABEL_29;
      }
LABEL_30:
      free(backtrace_string);
      goto LABEL_43;
    }
    if (!v14) {
      goto LABEL_43;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_channel_get_nexus_instance";
    unsigned int v7 = "%{public}s called with null port, no backtrace";
LABEL_49:
    uint64_t v15 = v9;
    os_log_type_t v16 = v10;
    goto LABEL_42;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v5 = gLogObj;
  os_log_type_t v6 = type;
  if (os_log_type_enabled((os_log_t)gLogObj, type))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v20 = "nw_channel_get_nexus_instance";
    unsigned int v7 = "%{public}s called with null port";
    goto LABEL_41;
  }
LABEL_43:
  if (v4) {
    free(v4);
  }
  return 0;
}

uint64_t nw_channel_get_key(uint64_t a1, _DWORD *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    char v18 = "nw_channel_get_key";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (!__nwlog_fault(v5, &type, &v15)) {
      goto LABEL_19;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = gLogObj;
      os_log_type_t v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446210;
      char v18 = "nw_channel_get_key";
      uint64_t v8 = "%{public}s called with null channel";
    }
    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = gLogObj;
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled((os_log_t)gLogObj, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            char v18 = "nw_channel_get_key";
            __int16 v19 = 2082;
            uint64_t v20 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null channel, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v12)
        {
LABEL_19:
          if (v5) {
            free(v5);
          }
          return 0;
        }
        *(_DWORD *)buf = 136446210;
        char v18 = "nw_channel_get_key";
        uint64_t v8 = "%{public}s called with null channel, no backtrace";
        BOOL v13 = v10;
        os_log_type_t v14 = v11;
LABEL_18:
        _os_log_impl(&dword_1830D4000, v13, v14, v8, buf, 0xCu);
        goto LABEL_19;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v6 = gLogObj;
      os_log_type_t v7 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type)) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 136446210;
      char v18 = "nw_channel_get_key";
      uint64_t v8 = "%{public}s called with null channel, backtrace limit exceeded";
    }
    BOOL v13 = v6;
    os_log_type_t v14 = v7;
    goto LABEL_18;
  }
  uint64_t result = *(void *)(a1 + 16);
  if (!result) {
    return result;
  }
  int v4 = *(_DWORD *)(a1 + 424);
  if (!v4) {
    return 0;
  }
  if (a2) {
    *a2 = v4;
  }
  return result;
}

uint64_t nw_channel_has_partial_checksum_offload(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1) {
    return (*(unsigned __int16 *)(a1 + 444) >> 11) & 1;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v11 = "nw_channel_has_partial_checksum_offload";
  uint64_t v2 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v8 = 0;
  if (__nwlog_fault(v2, &type, &v8))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "nw_channel_has_partial_checksum_offload";
        uint64_t v5 = "%{public}s called with null channel";
LABEL_17:
        _os_log_impl(&dword_1830D4000, v3, v4, v5, buf, 0xCu);
      }
    }
    else if (v8)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      BOOL v7 = os_log_type_enabled(v3, type);
      if (backtrace_string)
      {
        if (v7)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v11 = "nw_channel_has_partial_checksum_offload";
          __int16 v12 = 2082;
          BOOL v13 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v3, v4, "%{public}s called with null channel, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (v7)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "nw_channel_has_partial_checksum_offload";
        uint64_t v5 = "%{public}s called with null channel, no backtrace";
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v3 = __nwlog_obj();
      os_log_type_t v4 = type;
      if (os_log_type_enabled(v3, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v11 = "nw_channel_has_partial_checksum_offload";
        uint64_t v5 = "%{public}s called with null channel, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v2) {
    free(v2);
  }
  return 0;
}

id nw_masque_server_create(void *a1, void *a2, void *a3)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  id v68 = a1;
  id v69 = a2;
  id v5 = a3;
  nw_allow_use_of_dispatch_internal();
  if (v5)
  {
    uint64_t v6 = [NWConcrete_nw_masque_server alloc];
    id v7 = v68;
    id v8 = v69;
    id v9 = v5;
    if (!v6)
    {
LABEL_108:
      id v20 = 0;
LABEL_46:

      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      uint64_t v38 = (id)gLogObj;
      uint64_t v39 = v38;
      if (v20)
      {
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)label = 136446466;
          *(void *)&label[4] = "nw_masque_server_create";
          *(_WORD *)&label[12] = 2114;
          *(void *)&label[14] = v20;
          _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}@ created", (uint8_t *)label, 0x16u);
        }

        id v40 = v20;
        goto LABEL_69;
      }
      *(_DWORD *)label = 136446210;
      *(void *)&label[4] = "nw_masque_server_create";
      uint64_t v41 = (char *)_os_log_send_and_compose_impl();

      buf[0] = 16;
      LOBYTE(v72.receiver) = 0;
      if (__nwlog_fault(v41, buf, &v72))
      {
        if (buf[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v42 = (id)gLogObj;
          os_log_type_t v43 = buf[0];
          if (os_log_type_enabled(v42, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)label = 136446210;
            *(void *)&label[4] = "nw_masque_server_create";
            _os_log_impl(&dword_1830D4000, v42, v43, "%{public}s [nw_masque_server initWithParameters:clientQueue:] failed", (uint8_t *)label, 0xCu);
          }
LABEL_54:

          goto LABEL_67;
        }
        if (!LOBYTE(v72.receiver))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v42 = (id)gLogObj;
          os_log_type_t v48 = buf[0];
          if (os_log_type_enabled(v42, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)label = 136446210;
            *(void *)&label[4] = "nw_masque_server_create";
            _os_log_impl(&dword_1830D4000, v42, v48, "%{public}s [nw_masque_server initWithParameters:clientQueue:] failed, backtrace limit exceeded", (uint8_t *)label, 0xCu);
          }
          goto LABEL_54;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        __int16 v45 = (id)gLogObj;
        os_log_type_t v46 = buf[0];
        BOOL v47 = os_log_type_enabled(v45, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v47)
          {
            *(_DWORD *)label = 136446466;
            *(void *)&label[4] = "nw_masque_server_create";
            *(_WORD *)&label[12] = 2082;
            *(void *)&label[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v45, v46, "%{public}s [nw_masque_server initWithParameters:clientQueue:] failed, dumping backtrace:%{public}s", (uint8_t *)label, 0x16u);
          }

          free(backtrace_string);
          if (!v41) {
            goto LABEL_69;
          }
          goto LABEL_68;
        }
        if (v47)
        {
          *(_DWORD *)label = 136446210;
          *(void *)&label[4] = "nw_masque_server_create";
          _os_log_impl(&dword_1830D4000, v45, v46, "%{public}s [nw_masque_server initWithParameters:clientQueue:] failed, no backtrace", (uint8_t *)label, 0xCu);
        }
      }
LABEL_67:
      if (!v41)
      {
LABEL_69:

        goto LABEL_70;
      }
LABEL_68:
      free(v41);
      goto LABEL_69;
    }
    v72.receiver = v6;
    v72.super_class = (Class)NWConcrete_nw_masque_server;
    os_log_type_t v10 = objc_msgSendSuper2(&v72, sel_init);
    id v11 = v10;
    if (v10)
    {
      v10[1] = atomic_fetch_add(&s_last_server_id, 1uLL);
      BOOL v12 = nw_array_create();
      BOOL v13 = (void *)*((void *)v11 + 9);
      *((void *)v11 + 9) = v12;

      objc_storeStrong((id *)v11 + 5, a3);
      objc_storeStrong((id *)v11 + 16, a2);
      strcpy(label, "com.apple.networking.nw_masque_server");
      uint64_t v14 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      dispatch_queue_t v15 = dispatch_queue_create(label, v14);
      os_log_type_t v16 = (void *)*((void *)v11 + 3);
      *((void *)v11 + 3) = v15;

      if (*((void *)v11 + 3))
      {
        if (!v7
          || (id v17 = v7,
              BOOL v18 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v17, 0, 0), v17, v19 = (void *)*((void *)v11 + 4), *((void *)v11 + 4) = v18, v19, *((void *)v11 + 4)))
        {
          id v20 = v11;
LABEL_45:

          goto LABEL_46;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        id v29 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        char v74 = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
        BOOL v22 = (char *)_os_log_send_and_compose_impl();

        os_log_type_t type = OS_LOG_TYPE_ERROR;
        char v70 = 0;
        if (__nwlog_fault(v22, &type, &v70))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v23 = (id)gLogObj;
            os_log_type_t v30 = type;
            if (os_log_type_enabled(v23, type))
            {
              *(_DWORD *)buf = 136446210;
              char v74 = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
              _os_log_impl(&dword_1830D4000, v23, v30, "%{public}s nw_parameters_copy failed", buf, 0xCu);
            }
          }
          else if (v70)
          {
            dispatch_time_t v31 = __nw_create_backtrace_string();
            if (v31)
            {
              uint64_t v32 = (char *)v31;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              uint64_t v33 = (id)gLogObj;
              os_log_type_t v34 = type;
              if (os_log_type_enabled(v33, type))
              {
                *(_DWORD *)buf = 136446466;
                char v74 = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
                __int16 v75 = 2082;
                BOOL v76 = v32;
                _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s nw_parameters_copy failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v32);
              if (!v22) {
                goto LABEL_44;
              }
              goto LABEL_43;
            }
            uint64_t v23 = __nwlog_obj();
            os_log_type_t v37 = type;
            if (os_log_type_enabled(v23, type))
            {
              *(_DWORD *)buf = 136446210;
              char v74 = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
              _os_log_impl(&dword_1830D4000, v23, v37, "%{public}s nw_parameters_copy failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            uint64_t v23 = (id)gLogObj;
            os_log_type_t v36 = type;
            if (os_log_type_enabled(v23, type))
            {
              *(_DWORD *)buf = 136446210;
              char v74 = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
              _os_log_impl(&dword_1830D4000, v23, v36, "%{public}s nw_parameters_copy failed, backtrace limit exceeded", buf, 0xCu);
            }
          }
          goto LABEL_41;
        }
LABEL_42:
        if (!v22)
        {
LABEL_44:
          id v20 = 0;
          goto LABEL_45;
        }
LABEL_43:
        free(v22);
        goto LABEL_44;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v21 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      char v74 = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
      BOOL v22 = (char *)_os_log_send_and_compose_impl();

      os_log_type_t type = OS_LOG_TYPE_ERROR;
      char v70 = 0;
      if (!__nwlog_fault(v22, &type, &v70)) {
        goto LABEL_42;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v23 = (id)gLogObj;
        os_log_type_t v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          char v74 = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
          _os_log_impl(&dword_1830D4000, v23, v24, "%{public}s dispatch_queue_create failed", buf, 0xCu);
        }
      }
      else
      {
        if (v70)
        {
          os_log_type_t v25 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          int v26 = (id)gLogObj;
          os_log_type_t v27 = type;
          BOOL v28 = os_log_type_enabled(v26, type);
          if (v25)
          {
            if (v28)
            {
              *(_DWORD *)buf = 136446466;
              char v74 = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
              __int16 v75 = 2082;
              BOOL v76 = v25;
              _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s dispatch_queue_create failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v25);
            if (!v22) {
              goto LABEL_44;
            }
            goto LABEL_43;
          }
          if (v28)
          {
            *(_DWORD *)buf = 136446210;
            char v74 = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
            _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s dispatch_queue_create failed, no backtrace", buf, 0xCu);
          }

          goto LABEL_42;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        uint64_t v23 = (id)gLogObj;
        os_log_type_t v35 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          char v74 = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
          _os_log_impl(&dword_1830D4000, v23, v35, "%{public}s dispatch_queue_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
LABEL_41:

      goto LABEL_42;
    }
    uint64_t v54 = __nwlog_obj();
    *(_DWORD *)label = 136446210;
    *(void *)&label[4] = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
    uint64_t v55 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v55, buf, &type))
    {
      if (buf[0] == 17)
      {
        char v56 = __nwlog_obj();
        os_log_type_t v57 = buf[0];
        if (os_log_type_enabled(v56, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)label = 136446210;
          *(void *)&label[4] = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
          _os_log_impl(&dword_1830D4000, v56, v57, "%{public}s [super init] failed", (uint8_t *)label, 0xCu);
        }
      }
      else
      {
        if (type)
        {
          uint64_t v62 = (char *)__nw_create_backtrace_string();
          uint64_t v63 = __nwlog_obj();
          os_log_type_t v64 = buf[0];
          BOOL v65 = os_log_type_enabled(v63, (os_log_type_t)buf[0]);
          if (v62)
          {
            if (v65)
            {
              *(_DWORD *)label = 136446466;
              *(void *)&label[4] = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
              *(_WORD *)&label[12] = 2082;
              *(void *)&label[14] = v62;
              _os_log_impl(&dword_1830D4000, v63, v64, "%{public}s [super init] failed, dumping backtrace:%{public}s", (uint8_t *)label, 0x16u);
            }

            free(v62);
          }
          else
          {
            if (v65)
            {
              *(_DWORD *)label = 136446210;
              *(void *)&label[4] = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
              _os_log_impl(&dword_1830D4000, v63, v64, "%{public}s [super init] failed, no backtrace", (uint8_t *)label, 0xCu);
            }
          }
          goto LABEL_106;
        }
        char v56 = __nwlog_obj();
        os_log_type_t v67 = buf[0];
        if (os_log_type_enabled(v56, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)label = 136446210;
          *(void *)&label[4] = "-[NWConcrete_nw_masque_server initWithParameters:securityOptions:clientQueue:]";
          _os_log_impl(&dword_1830D4000, v56, v67, "%{public}s [super init] failed, backtrace limit exceeded", (uint8_t *)label, 0xCu);
        }
      }
    }
LABEL_106:
    if (v55) {
      free(v55);
    }
    goto LABEL_108;
  }
  uint64_t v50 = __nwlog_obj();
  *(_DWORD *)label = 136446210;
  *(void *)&label[4] = "nw_masque_server_create";
  uint64_t v51 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  LOBYTE(v72.receiver) = 0;
  if (__nwlog_fault(v51, buf, &v72))
  {
    if (buf[0] == 17)
    {
      __int16 v52 = __nwlog_obj();
      os_log_type_t v53 = buf[0];
      if (os_log_type_enabled(v52, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)label = 136446210;
        *(void *)&label[4] = "nw_masque_server_create";
        _os_log_impl(&dword_1830D4000, v52, v53, "%{public}s called with null queue", (uint8_t *)label, 0xCu);
      }
    }
    else
    {
      if (LOBYTE(v72.receiver))
      {
        __int16 v58 = (char *)__nw_create_backtrace_string();
        BOOL v59 = __nwlog_obj();
        os_log_type_t v60 = buf[0];
        BOOL v61 = os_log_type_enabled(v59, (os_log_type_t)buf[0]);
        if (v58)
        {
          if (v61)
          {
            *(_DWORD *)label = 136446466;
            *(void *)&label[4] = "nw_masque_server_create";
            *(_WORD *)&label[12] = 2082;
            *(void *)&label[14] = v58;
            _os_log_impl(&dword_1830D4000, v59, v60, "%{public}s called with null queue, dumping backtrace:%{public}s", (uint8_t *)label, 0x16u);
          }

          free(v58);
        }
        else
        {
          if (v61)
          {
            *(_DWORD *)label = 136446210;
            *(void *)&label[4] = "nw_masque_server_create";
            _os_log_impl(&dword_1830D4000, v59, v60, "%{public}s called with null queue, no backtrace", (uint8_t *)label, 0xCu);
          }
        }
        goto LABEL_100;
      }
      __int16 v52 = __nwlog_obj();
      os_log_type_t v66 = buf[0];
      if (os_log_type_enabled(v52, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)label = 136446210;
        *(void *)&label[4] = "nw_masque_server_create";
        _os_log_impl(&dword_1830D4000, v52, v66, "%{public}s called with null queue, backtrace limit exceeded", (uint8_t *)label, 0xCu);
      }
    }
  }
LABEL_100:
  if (v51) {
    free(v51);
  }
  id v20 = 0;
LABEL_70:

  return v20;
}

void sub_183D20FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void nw_masque_server_set_state_changed_handler(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_masque_server_set_state_changed_handler";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v25 = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v8, &v25, &v24)) {
      goto LABEL_38;
    }
    if (v25 == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_masque_server_set_state_changed_handler";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null server", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v14 = v25;
      BOOL v15 = os_log_type_enabled(v9, v25);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_masque_server_set_state_changed_handler";
          __int16 v28 = 2082;
          id v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_masque_server_set_state_changed_handler";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v9 = __nwlog_obj();
      os_log_type_t v19 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_masque_server_set_state_changed_handler";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null server, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_masque_server_set_state_changed_handler_block_invoke;
    aBlock[3] = &unk_1E524B950;
    BOOL v22 = v3;
    id v23 = v5;
    uint64_t v6 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 4);
    v6[2](v6);
    os_unfair_lock_unlock(v3 + 4);

    goto LABEL_4;
  }
  id v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_masque_server_set_state_changed_handler";
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v25 = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v8, &v25, &v24)) {
    goto LABEL_38;
  }
  if (v25 == OS_LOG_TYPE_FAULT)
  {
    id v9 = __nwlog_obj();
    os_log_type_t v12 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_masque_server_set_state_changed_handler";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null handler", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v24)
  {
    id v9 = __nwlog_obj();
    os_log_type_t v20 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_masque_server_set_state_changed_handler";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v16 = (char *)__nw_create_backtrace_string();
  id v9 = __nwlog_obj();
  os_log_type_t v17 = v25;
  BOOL v18 = os_log_type_enabled(v9, v25);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_masque_server_set_state_changed_handler";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null handler, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_masque_server_set_state_changed_handler";
    __int16 v28 = 2082;
    id v29 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

void sub_183D21590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_masque_server_set_state_changed_handler_block_invoke(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 48);
  *(void *)(v3 + 48) = v2;
}

void nw_masque_server_set_error_handler(void *a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (!v3)
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_masque_server_set_error_handler";
    id v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t v25 = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (!__nwlog_fault(v8, &v25, &v24)) {
      goto LABEL_38;
    }
    if (v25 == OS_LOG_TYPE_FAULT)
    {
      id v9 = __nwlog_obj();
      os_log_type_t v10 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_masque_server_set_error_handler";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null server", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v9 = __nwlog_obj();
      os_log_type_t v14 = v25;
      BOOL v15 = os_log_type_enabled(v9, v25);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_masque_server_set_error_handler";
          __int16 v28 = 2082;
          id v29 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8) {
          goto LABEL_4;
        }
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_masque_server_set_error_handler";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v9 = __nwlog_obj();
      os_log_type_t v19 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_masque_server_set_error_handler";
        _os_log_impl(&dword_1830D4000, v9, v19, "%{public}s called with null server, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_masque_server_set_error_handler_block_invoke;
    aBlock[3] = &unk_1E524B950;
    BOOL v22 = v3;
    id v23 = v5;
    uint64_t v6 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 4);
    v6[2](v6);
    os_unfair_lock_unlock(v3 + 4);

    goto LABEL_4;
  }
  id v11 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v27 = "nw_masque_server_set_error_handler";
  id v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v25 = OS_LOG_TYPE_ERROR;
  char v24 = 0;
  if (!__nwlog_fault(v8, &v25, &v24)) {
    goto LABEL_38;
  }
  if (v25 == OS_LOG_TYPE_FAULT)
  {
    id v9 = __nwlog_obj();
    os_log_type_t v12 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_masque_server_set_error_handler";
      _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null handler", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v24)
  {
    id v9 = __nwlog_obj();
    os_log_type_t v20 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_masque_server_set_error_handler";
      _os_log_impl(&dword_1830D4000, v9, v20, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  os_log_type_t v16 = (char *)__nw_create_backtrace_string();
  id v9 = __nwlog_obj();
  os_log_type_t v17 = v25;
  BOOL v18 = os_log_type_enabled(v9, v25);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      os_log_type_t v27 = "nw_masque_server_set_error_handler";
      _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null handler, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_masque_server_set_error_handler";
    __int16 v28 = 2082;
    id v29 = v16;
    _os_log_impl(&dword_1830D4000, v9, v17, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8) {
    goto LABEL_39;
  }
LABEL_4:
}

void sub_183D21B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_masque_server_set_error_handler_block_invoke(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 56);
  *(void *)(v3 + 56) = v2;
}

void nw_masque_server_set_outer_connection_handler(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_masque_server_set_outer_connection_handler_block_invoke;
    aBlock[3] = &unk_1E524B950;
    BOOL v15 = v3;
    id v16 = v4;
    id v5 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 4);
    v5[2](v5);
    os_unfair_lock_unlock(v3 + 4);

    goto LABEL_3;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v20 = "nw_masque_server_set_outer_connection_handler";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      id v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_masque_server_set_outer_connection_handler";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null server", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v8 = __nwlog_obj();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v20 = "nw_masque_server_set_outer_connection_handler";
          __int16 v21 = 2082;
          BOOL v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_masque_server_set_outer_connection_handler";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v8 = __nwlog_obj();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_masque_server_set_outer_connection_handler";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null server, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_183D21EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_masque_server_set_outer_connection_handler_block_invoke(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 96);
  *(void *)(v3 + 96) = v2;
}

void nw_masque_server_set_proxy_client_connection_event_handler(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_masque_server_set_proxy_client_connection_event_handler_block_invoke;
    aBlock[3] = &unk_1E524B950;
    BOOL v15 = v3;
    id v16 = v4;
    id v5 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 4);
    v5[2](v5);
    os_unfair_lock_unlock(v3 + 4);

    goto LABEL_3;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v20 = "nw_masque_server_set_proxy_client_connection_event_handler";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      id v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_masque_server_set_proxy_client_connection_event_handler";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null server", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v8 = __nwlog_obj();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v20 = "nw_masque_server_set_proxy_client_connection_event_handler";
          __int16 v21 = 2082;
          BOOL v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_masque_server_set_proxy_client_connection_event_handler";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v8 = __nwlog_obj();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v20 = "nw_masque_server_set_proxy_client_connection_event_handler";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null server, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_183D222A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_masque_server_set_proxy_client_connection_event_handler_block_invoke(uint64_t a1)
{
  uint64_t v2 = _Block_copy(*(const void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 88);
  *(void *)(v3 + 88) = v2;
}

id nw_masque_server_copy_parameters(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[4];
    goto LABEL_3;
  }
  id v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  id v16 = "nw_masque_server_copy_parameters";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_masque_server_copy_parameters";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null server", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          id v16 = "nw_masque_server_copy_parameters";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_masque_server_copy_parameters";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        id v16 = "nw_masque_server_copy_parameters";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null server, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_masque_server_get_port(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000;
    __int16 v20 = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_masque_server_get_port_block_invoke;
    aBlock[3] = &unk_1E524B978;
    id v16 = buf;
    BOOL v15 = v1;
    id v3 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 4);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 4);

    uint64_t v4 = *(unsigned __int16 *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_masque_server_get_port";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_server_get_port";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null server", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_server_get_port";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_server_get_port";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_server_get_port";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null server, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
  uint64_t v4 = 0;
LABEL_3:

  return v4;
}

void sub_183D22908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_masque_server_get_port_block_invoke(uint64_t a1)
{
  uint64_t result = nw_listener_get_port(*(nw_listener_t *)(*(void *)(a1 + 32) + 64));
  *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void nw_masque_server_set_outbound_interface(void *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_masque_server_set_outbound_interface_block_invoke;
    aBlock[3] = &unk_1E524B9A0;
    BOOL v15 = v3;
    id v16 = v4;
    id v5 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 4);
    v5[2](v5);
    os_unfair_lock_unlock(v3 + 4);

    goto LABEL_3;
  }
  uint64_t v6 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  __int16 v20 = "nw_masque_server_set_outbound_interface";
  id v7 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t v18 = OS_LOG_TYPE_ERROR;
  char v17 = 0;
  if (__nwlog_fault(v7, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_masque_server_set_outbound_interface";
        _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null server", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v11 = v18;
      BOOL v12 = os_log_type_enabled(v8, v18);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v20 = "nw_masque_server_set_outbound_interface";
          __int16 v21 = 2082;
          BOOL v22 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_masque_server_set_outbound_interface";
        _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v13 = v18;
      if (os_log_type_enabled(v8, v18))
      {
        *(_DWORD *)buf = 136446210;
        __int16 v20 = "nw_masque_server_set_outbound_interface";
        _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null server, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v7) {
    free(v7);
  }
LABEL_3:
}

void sub_183D22CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void __nw_masque_server_set_outbound_interface_block_invoke(uint64_t a1)
{
}

uint64_t __Block_byref_object_copy__89219(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__89220(uint64_t a1)
{
}

void __nw_masque_server_copy_client_queue_block_invoke(uint64_t a1)
{
}

void nw_masque_server_start(void *a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    nw_parameters_t secure_udp = nw_parameters_create_secure_udp(&__block_literal_global_19196, &__block_literal_global_89226);
    nw_parameters_set_data_mode(secure_udp, 2u);
    nw_parameters_set_server_mode(secure_udp, 1);
    nw_parameters_set_attach_protocol_listener(secure_udp, 1);
    id v3 = (void *)*((void *)v1 + 4);
    if (v3)
    {
      id v4 = v3;
      id v5 = *(id *)(v4[13] + 160);

      if (v5) {
        nw_parameters_set_local_endpoint(secure_udp, v5);
      }
      uint64_t v6 = nw_parameters_copy_required_interface(*((nw_parameters_t *)v1 + 4));
      if (v6) {
        nw_parameters_require_interface(secure_udp, v6);
      }
      required_interface_subos_log_type_t type = nw_parameters_get_required_interface_subtype(*((void **)v1 + 4));
      if (required_interface_subtype) {
        nw_parameters_set_required_interface_subtype(secure_udp, required_interface_subtype);
      }
      if (nw_parameters_get_always_open_listener_socket(*((void **)v1 + 4))) {
        nw_parameters_set_always_open_listener_socket(secure_udp, 1);
      }
      if (nw_parameters_get_use_awdl(*((void **)v1 + 4))) {
        nw_parameters_set_use_awdl(secure_udp, 1);
      }
    }
    os_log_type_t v8 = nw_parameters_copy_default_protocol_stack(secure_udp);
    if (nw_protocol_demux_copy_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_demux_copy_definition::onceToken, &__block_literal_global_8_26174);
    }
    if (nw_protocol_demux_copy_definition::definition)
    {
      os_log_type_t v9 = os_retain((void *)nw_protocol_demux_copy_definition::definition);
      options = nw_protocol_create_options(v9);
      if (v9) {
        os_release(v9);
      }
    }
    else
    {
      options = nw_protocol_create_options(0);
    }
    nw_protocol_stack_prepend_application_protocol(v8, &options->super);

    if (nw_protocol_copy_quic_stream_definition::onceToken != -1) {
      dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_15_56153);
    }
    os_log_type_t v11 = nw_protocol_create_options((void *)nw_protocol_copy_quic_stream_definition::quic_definition);
    id v12 = nw_quic_stream_copy_shared_connection_options(v11);
    os_log_type_t v13 = v12;
    os_log_type_t v14 = (void *)*((void *)v1 + 16);
    if (v14) {
      nw_quic_connection_set_sec_protocol_options(v12, v14);
    }
    BOOL v15 = nw_quic_connection_copy_sec_protocol_options(v13);
    sec_protocol_options_append_tls_ciphersuite_group(v15, tls_ciphersuite_group_default);
    sec_protocol_options_add_tls_application_protocol(v15, "h3");
    nw_quic_connection_set_initial_max_streams_bidirectional(v13, 0xFFFFFFFFLL);
    nw_quic_connection_set_max_datagram_frame_size(v13, 1460);
    nw_quic_connection_set_max_udp_payload_size(v13, 1472);
    nw_quic_connection_set_datagram_variant_flow_id_enabled(v13, 1);
    nw_quic_connection_set_pmtud_for_non_transport(v13, 1);
    nw_quic_connection_set_datagram_quarter_stream_id(v13, 1);
    nw_quic_connection_set_datagram_context_id(v13, 1);
    nw_protocol_stack_prepend_application_protocol(v8, &v11->super);
    if (nw_protocol_copy_http3_definition_onceToken != -1) {
      dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_13_73886);
    }
    id v16 = nw_protocol_create_options((void *)nw_protocol_copy_http3_definition_http3_definition);
    nw_protocol_stack_prepend_application_protocol(v8, &v16->super);
    nw_listener_t v17 = nw_listener_create(secure_udp);
    os_log_type_t v18 = (void *)*((void *)v1 + 8);
    *((void *)v1 + 8) = v17;

    uint64_t v19 = (void *)*((void *)v1 + 8);
    if (v19)
    {
      nw_listener_allow_new_connection_inline(v19);
      __int16 v20 = *((void *)v1 + 8);
      handler[0] = MEMORY[0x1E4F143A8];
      handler[1] = 3221225472;
      handler[2] = __nw_masque_server_start_block_invoke_8;
      handler[3] = &unk_1E524BA10;
      id v21 = v1;
      id v43 = v21;
      nw_listener_set_new_connection_group_handler(v20, handler);
      BOOL v22 = *((void *)v1 + 8);
      v40[0] = MEMORY[0x1E4F143A8];
      v40[1] = 3221225472;
      v40[2] = __nw_masque_server_start_block_invoke_10;
      v40[3] = &unk_1E524BA60;
      uint64_t v23 = (dispatch_queue_t *)v21;
      uint64_t v41 = v23;
      nw_listener_set_state_changed_handler(v22, v40);
      nw_listener_set_queue(*((nw_listener_t *)v1 + 8), v23[3]);
      nw_listener_start(*((nw_listener_t *)v1 + 8));

LABEL_47:
      goto LABEL_48;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v24 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    BOOL v47 = "nw_masque_server_start";
    os_log_type_t v25 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v44 = 0;
    if (__nwlog_fault(v25, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v26 = (id)gLogObj;
        os_log_type_t v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v47 = "nw_masque_server_start";
          _os_log_impl(&dword_1830D4000, v26, v27, "%{public}s nw_listener_create failed", buf, 0xCu);
        }
      }
      else if (v44)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v26 = (id)gLogObj;
        os_log_type_t v39 = type;
        BOOL v29 = os_log_type_enabled(v26, type);
        if (backtrace_string)
        {
          if (v29)
          {
            *(_DWORD *)buf = 136446466;
            BOOL v47 = "nw_masque_server_start";
            __int16 v48 = 2082;
            uint64_t v49 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v26, v39, "%{public}s nw_listener_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v25) {
            goto LABEL_47;
          }
          goto LABEL_46;
        }
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          BOOL v47 = "nw_masque_server_start";
          _os_log_impl(&dword_1830D4000, v26, v39, "%{public}s nw_listener_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        int v26 = (id)gLogObj;
        os_log_type_t v30 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          BOOL v47 = "nw_masque_server_start";
          _os_log_impl(&dword_1830D4000, v26, v30, "%{public}s nw_listener_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v25) {
      goto LABEL_47;
    }
LABEL_46:
    free(v25);
    goto LABEL_47;
  }
  dispatch_time_t v31 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v47 = "nw_masque_server_start";
  uint64_t v32 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v44 = 0;
  if (__nwlog_fault(v32, &type, &v44))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v34 = type;
      if (os_log_type_enabled(v33, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v47 = "nw_masque_server_start";
        _os_log_impl(&dword_1830D4000, v33, v34, "%{public}s called with null server", buf, 0xCu);
      }
    }
    else if (v44)
    {
      os_log_type_t v35 = (char *)__nw_create_backtrace_string();
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v36 = type;
      BOOL v37 = os_log_type_enabled(v33, type);
      if (v35)
      {
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v47 = "nw_masque_server_start";
          __int16 v48 = 2082;
          uint64_t v49 = v35;
          _os_log_impl(&dword_1830D4000, v33, v36, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v35);
        goto LABEL_65;
      }
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v47 = "nw_masque_server_start";
        _os_log_impl(&dword_1830D4000, v33, v36, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v33 = __nwlog_obj();
      os_log_type_t v38 = type;
      if (os_log_type_enabled(v33, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v47 = "nw_masque_server_start";
        _os_log_impl(&dword_1830D4000, v33, v38, "%{public}s called with null server, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_65:
  if (v32) {
    free(v32);
  }
LABEL_48:
}

void sub_183D235E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __nw_masque_server_start_block_invoke_8(uint64_t a1, void *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v4 = (id)gLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_masque_server_start_block_invoke";
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v3;
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_INFO, "%{public}s new connection group %@", buf, 0x16u);
  }

  id v5 = (dispatch_queue_t *)*(id *)(a1 + 32);
  uint64_t v6 = v3;
  id v7 = v6;
  if (!v5)
  {
    BOOL v15 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_connection_group_start";
    id v16 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(state_changed_handler[0]) = 16;
    LOBYTE(aBlock[0]) = 0;
    if (!__nwlog_fault(v16, state_changed_handler, aBlock)) {
      goto LABEL_40;
    }
    if (LOBYTE(state_changed_handler[0]) == 17)
    {
      nw_listener_t v17 = __nwlog_obj();
      os_log_type_t v18 = state_changed_handler[0];
      if (os_log_type_enabled(v17, state_changed_handler[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_connection_group_start";
        _os_log_impl(&dword_1830D4000, v17, v18, "%{public}s called with null server", buf, 0xCu);
      }
    }
    else if (LOBYTE(aBlock[0]))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      nw_listener_t v17 = __nwlog_obj();
      os_log_type_t v22 = state_changed_handler[0];
      BOOL v23 = os_log_type_enabled(v17, state_changed_handler[0]);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_connection_group_start";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v16) {
          goto LABEL_6;
        }
LABEL_41:
        free(v16);
        goto LABEL_6;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_connection_group_start";
        _os_log_impl(&dword_1830D4000, v17, v22, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      nw_listener_t v17 = __nwlog_obj();
      os_log_type_t v27 = state_changed_handler[0];
      if (os_log_type_enabled(v17, state_changed_handler[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_connection_group_start";
        _os_log_impl(&dword_1830D4000, v17, v27, "%{public}s called with null server, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (v6)
  {
    nw_connection_group_set_queue(v6, v5[3]);
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&buf[8] = 3221225472;
    *(void *)&buf[16] = ___ZL32nw_masque_connection_group_startP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject_block_invoke;
    os_log_type_t v38 = &unk_1E524BB70;
    os_log_type_t v8 = v5;
    os_log_type_t v39 = v8;
    os_log_type_t v9 = v7;
    id v40 = v9;
    nw_connection_group_set_new_connection_handler(v9, buf);
    state_changed_handler[0] = MEMORY[0x1E4F143A8];
    state_changed_handler[1] = 3221225472;
    state_changed_handler[2] = ___ZL32nw_masque_connection_group_startP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject_block_invoke_105;
    state_changed_handler[3] = &unk_1E524BB98;
    os_log_type_t v10 = v8;
    os_log_type_t v35 = v10;
    os_log_type_t v11 = v9;
    os_log_type_t v36 = v11;
    nw_connection_group_set_state_changed_handler(v11, state_changed_handler);
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL32nw_masque_connection_group_startP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject_block_invoke_2;
    aBlock[3] = &unk_1E524B9A0;
    id v12 = v10;
    uint64_t v32 = v12;
    os_log_type_t v13 = v11;
    uint64_t v33 = v13;
    os_log_type_t v14 = (void (**)(void))_Block_copy(aBlock);
    v10 += 4;
    os_unfair_lock_lock(v10);
    v14[2](v14);
    os_unfair_lock_unlock(v10);

    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    v29[2] = ___ZL32nw_masque_connection_group_startP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject_block_invoke_3;
    v29[3] = &unk_1E524BAA8;
    os_log_type_t v30 = v13;
    nw_masque_server_call_proxy_client_connection_event_handler(v12, v30, 1, v29);

    goto LABEL_6;
  }
  uint64_t v19 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_masque_connection_group_start";
  id v16 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(state_changed_handler[0]) = 16;
  LOBYTE(aBlock[0]) = 0;
  if (!__nwlog_fault(v16, state_changed_handler, aBlock)) {
    goto LABEL_40;
  }
  if (LOBYTE(state_changed_handler[0]) == 17)
  {
    nw_listener_t v17 = __nwlog_obj();
    os_log_type_t v20 = state_changed_handler[0];
    if (os_log_type_enabled(v17, state_changed_handler[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_connection_group_start";
      _os_log_impl(&dword_1830D4000, v17, v20, "%{public}s called with null connection_group", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!LOBYTE(aBlock[0]))
  {
    nw_listener_t v17 = __nwlog_obj();
    os_log_type_t v28 = state_changed_handler[0];
    if (os_log_type_enabled(v17, state_changed_handler[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_connection_group_start";
      _os_log_impl(&dword_1830D4000, v17, v28, "%{public}s called with null connection_group, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  id v24 = (char *)__nw_create_backtrace_string();
  nw_listener_t v17 = __nwlog_obj();
  os_log_type_t v25 = state_changed_handler[0];
  BOOL v26 = os_log_type_enabled(v17, state_changed_handler[0]);
  if (!v24)
  {
    if (v26)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_connection_group_start";
      _os_log_impl(&dword_1830D4000, v17, v25, "%{public}s called with null connection_group, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v26)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_masque_connection_group_start";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v24;
    _os_log_impl(&dword_1830D4000, v17, v25, "%{public}s called with null connection_group, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v24);
  if (v16) {
    goto LABEL_41;
  }
LABEL_6:
}

void sub_183D23DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30)
{
  _Unwind_Resume(a1);
}

void __nw_masque_server_start_block_invoke_10(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(os_unfair_lock_s **)(a1 + 32);
  id v7 = v6 + 4;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __nw_masque_server_start_block_invoke_2;
  aBlock[3] = &unk_1E524BA38;
  os_log_type_t v11 = v6;
  int v13 = a2;
  id v8 = v5;
  id v12 = v8;
  os_log_type_t v9 = (void (**)(void))_Block_copy(aBlock);
  os_unfair_lock_lock(v7);
  v9[2](v9);
  os_unfair_lock_unlock(v7);
}

void sub_183D23F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void __nw_masque_server_start_block_invoke_2(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a1 + 48);
  id v3 = *(void **)(a1 + 40);
  id v4 = *(id *)(a1 + 32);
  id v5 = v3;
  uint64_t v6 = (const void *)v4[6];
  if (v6)
  {
    id v7 = _Block_copy(v6);
    if (v2 == 4)
    {
      id v8 = (void *)v4[6];
      v4[6] = 0;
    }
    os_log_type_t v9 = v4[5];
    *(void *)&long long v15 = MEMORY[0x1E4F143A8];
    *((void *)&v15 + 1) = 3221225472;
    id v16 = ___ZL42nw_masque_server_call_state_handler_lockedP27NWConcrete_nw_masque_server19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke;
    nw_listener_t v17 = &unk_1E524BB48;
    id v19 = v7;
    int v20 = v2;
    id v18 = v5;
    id v10 = v7;
    dispatch_async(v9, &v15);
  }
  if (*(_DWORD *)(a1 + 48) == 3)
  {
    uint64_t v11 = *(void *)(a1 + 40);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v12 = (id)gLogObj;
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (v11)
    {
      if (v13)
      {
        LODWORD(v15) = 136446210;
        *(void *)((char *)&v15 + 4) = "nw_masque_server_start_block_invoke";
        os_log_type_t v14 = "%{public}s listener reported state of failed with error";
LABEL_11:
        _os_log_impl(&dword_1830D4000, v12, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v15, 0xCu);
      }
    }
    else if (v13)
    {
      LODWORD(v15) = 136446210;
      *(void *)((char *)&v15 + 4) = "nw_masque_server_start_block_invoke_2";
      os_log_type_t v14 = "%{public}s listener reported state of failed with NULL error";
      goto LABEL_11;
    }
  }
}

uint64_t ___ZL42nw_masque_server_call_state_handler_lockedP27NWConcrete_nw_masque_server19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(void *)(a1 + 32));
}

void ___ZL32nw_masque_connection_group_startP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v5 = (id)gLogObj;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_masque_connection_group_start_block_invoke";
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v4;
    _os_log_impl(&dword_1830D4000, v5, OS_LOG_TYPE_INFO, "%{public}s new inner connection %@", buf, 0x16u);
  }

  uint64_t v6 = *(void **)(a1 + 32);
  id v7 = *(void **)(a1 + 40);
  id v8 = v6;
  id v9 = v4;
  uint32_t v98 = v8;
  id v99 = v7;
  char v104 = v9;
  if (!v8)
  {
    os_log_type_t v67 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_inner_connection_start";
    id v68 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(aBlock.receiver) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v68, &aBlock, type)) {
      goto LABEL_117;
    }
    if (LOBYTE(aBlock.receiver) == 17)
    {
      id v69 = __nwlog_obj();
      os_log_type_t receiver = (os_log_type_t)aBlock.receiver;
      if (os_log_type_enabled(v69, (os_log_type_t)aBlock.receiver))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_inner_connection_start";
        _os_log_impl(&dword_1830D4000, v69, receiver, "%{public}s called with null server", buf, 0xCu);
      }
    }
    else if (type[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v69 = __nwlog_obj();
      os_log_type_t v82 = (os_log_type_t)aBlock.receiver;
      BOOL v83 = os_log_type_enabled(v69, (os_log_type_t)aBlock.receiver);
      if (backtrace_string)
      {
        if (v83)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_inner_connection_start";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v69, v82, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_117:
        if (!v68) {
          goto LABEL_57;
        }
LABEL_118:
        free(v68);
        goto LABEL_57;
      }
      if (v83)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_inner_connection_start";
        _os_log_impl(&dword_1830D4000, v69, v82, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v69 = __nwlog_obj();
      os_log_type_t v93 = (os_log_type_t)aBlock.receiver;
      if (os_log_type_enabled(v69, (os_log_type_t)aBlock.receiver))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_inner_connection_start";
        _os_log_impl(&dword_1830D4000, v69, v93, "%{public}s called with null server, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_116:

    goto LABEL_117;
  }
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = (void *)v8[3];
    id v12 = (void *)v8[17];
    BOOL v13 = (void *)v8[14];
    os_log_type_t v14 = (void *)v8[12];
    id v105 = v10;
    id v15 = v11;
    os_log_type_t v106 = v8;
    id v101 = v12;
    id v102 = v13;
    id v103 = v14;
    unsigned int v100 = v15;
    if (v15)
    {
      id v16 = [NWConcrete_nw_masque_connection alloc];
      id v97 = v105;
      id v17 = v100;
      id v18 = v106;
      id v19 = v101;
      id v20 = v102;
      id v21 = v103;
      if (!v16) {
        goto LABEL_9;
      }
      aBlock.os_log_type_t receiver = v16;
      aBlock.super_class = (Class)NWConcrete_nw_masque_connection;
      id v22 = objc_msgSendSuper2(&aBlock, sel_init);
      id v16 = (NWConcrete_nw_masque_connection *)v22;
      if (v22)
      {
        *((void *)v22 + 1) = atomic_fetch_add(&s_last_connection_id, 1uLL);
        objc_storeStrong((id *)v22 + 4, v11);
        objc_storeStrong((id *)v16 + 6, a2);
        BOOL v23 = nw_dictionary_create();
        id v24 = (void *)*((void *)v16 + 7);
        *((void *)v16 + 7) = v23;

        os_log_type_t v25 = nw_dictionary_create();
        BOOL v26 = (void *)*((void *)v16 + 8);
        *((void *)v16 + 8) = v25;

        *((unsigned char *)v16 + 112) = 1;
        objc_storeWeak((id *)v16 + 5, v18);
        objc_storeStrong((id *)v16 + 9, v12);
        objc_storeStrong((id *)v16 + 10, v13);
        os_log_type_t v27 = _Block_copy(v21);
        os_log_type_t v28 = (void *)*((void *)v16 + 11);
        *((void *)v16 + 11) = v27;

        goto LABEL_9;
      }
      uint64_t v77 = __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_masque_connection initWithConnection:queue:parent:reverse_proxy_identity:outb"
                           "ound_interface:outer_connection_handler:]";
      uint64_t v78 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      char v118 = 0;
      if (__nwlog_fault(v78, type, &v118))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          char v79 = __nwlog_obj();
          os_log_type_t v80 = type[0];
          if (os_log_type_enabled(v79, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_masque_connection initWithConnection:queue:parent:reverse_proxy_identit"
                                 "y:outbound_interface:outer_connection_handler:]";
            _os_log_impl(&dword_1830D4000, v79, v80, "%{public}s [super init] failed", buf, 0xCu);
          }
        }
        else if (v118)
        {
          __int16 v90 = (char *)__nw_create_backtrace_string();
          char v79 = __nwlog_obj();
          os_log_type_t v91 = type[0];
          BOOL v92 = os_log_type_enabled(v79, type[0]);
          if (v90)
          {
            if (v92)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_masque_connection initWithConnection:queue:parent:reverse_proxy_ident"
                                   "ity:outbound_interface:outer_connection_handler:]";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v90;
              _os_log_impl(&dword_1830D4000, v79, v91, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v90);
            goto LABEL_128;
          }
          if (v92)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_masque_connection initWithConnection:queue:parent:reverse_proxy_identit"
                                 "y:outbound_interface:outer_connection_handler:]";
            _os_log_impl(&dword_1830D4000, v79, v91, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          char v79 = __nwlog_obj();
          os_log_type_t v96 = type[0];
          if (os_log_type_enabled(v79, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "-[NWConcrete_nw_masque_connection initWithConnection:queue:parent:reverse_proxy_identit"
                                 "y:outbound_interface:outer_connection_handler:]";
            _os_log_impl(&dword_1830D4000, v79, v96, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
LABEL_128:
      if (v78) {
        free(v78);
      }
      id v16 = 0;
LABEL_9:

      if (v16)
      {
        BOOL v29 = v16;
LABEL_30:

        goto LABEL_31;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      id v30 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_connection_create";
      dispatch_time_t v31 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(aBlock.receiver) = 16;
      type[0] = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v31, &aBlock, type))
      {
        if (LOBYTE(aBlock.receiver) == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v32 = (id)gLogObj;
          os_log_type_t v33 = (os_log_type_t)aBlock.receiver;
          if (os_log_type_enabled(v32, (os_log_type_t)aBlock.receiver))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_masque_connection_create";
            _os_log_impl(&dword_1830D4000, v32, v33, "%{public}s [nw_masque_connection initWithConnection:queue:masque:] failed", buf, 0xCu);
          }
        }
        else if (type[0])
        {
          os_log_type_t v34 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v32 = (id)gLogObj;
          os_log_type_t v35 = (os_log_type_t)aBlock.receiver;
          BOOL v36 = os_log_type_enabled(v32, (os_log_type_t)aBlock.receiver);
          if (v34)
          {
            if (v36)
            {
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = "nw_masque_connection_create";
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v34;
              _os_log_impl(&dword_1830D4000, v32, v35, "%{public}s [nw_masque_connection initWithConnection:queue:masque:] failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v34);
            if (!v31) {
              goto LABEL_30;
            }
            goto LABEL_29;
          }
          if (v36)
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_masque_connection_create";
            _os_log_impl(&dword_1830D4000, v32, v35, "%{public}s [nw_masque_connection initWithConnection:queue:masque:] failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          uint64_t v32 = (id)gLogObj;
          os_log_type_t v37 = (os_log_type_t)aBlock.receiver;
          if (os_log_type_enabled(v32, (os_log_type_t)aBlock.receiver))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = "nw_masque_connection_create";
            _os_log_impl(&dword_1830D4000, v32, v37, "%{public}s [nw_masque_connection initWithConnection:queue:masque:] failed, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
      if (!v31) {
        goto LABEL_30;
      }
LABEL_29:
      free(v31);
      goto LABEL_30;
    }
    int v73 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_connection_create";
    char v74 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(aBlock.receiver) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v74, &aBlock, type))
    {
      if (LOBYTE(aBlock.receiver) == 17)
      {
        __int16 v75 = __nwlog_obj();
        os_log_type_t v76 = (os_log_type_t)aBlock.receiver;
        if (os_log_type_enabled(v75, (os_log_type_t)aBlock.receiver))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_connection_create";
          _os_log_impl(&dword_1830D4000, v75, v76, "%{public}s called with null queue", buf, 0xCu);
        }
      }
      else if (type[0])
      {
        uint64_t v87 = (char *)__nw_create_backtrace_string();
        __int16 v75 = __nwlog_obj();
        os_log_type_t v88 = (os_log_type_t)aBlock.receiver;
        BOOL v89 = os_log_type_enabled(v75, (os_log_type_t)aBlock.receiver);
        if (v87)
        {
          if (v89)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_masque_connection_create";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v87;
            _os_log_impl(&dword_1830D4000, v75, v88, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v87);
          goto LABEL_122;
        }
        if (v89)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_connection_create";
          _os_log_impl(&dword_1830D4000, v75, v88, "%{public}s called with null queue, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __int16 v75 = __nwlog_obj();
        os_log_type_t v95 = (os_log_type_t)aBlock.receiver;
        if (os_log_type_enabled(v75, (os_log_type_t)aBlock.receiver))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_connection_create";
          _os_log_impl(&dword_1830D4000, v75, v95, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_122:
    if (v74) {
      free(v74);
    }
    id v16 = 0;
LABEL_31:

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v38 = (id)gLogObj;
    os_log_type_t v39 = v38;
    if (v16)
    {
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        id v40 = (id *)v105;
        id v41 = v40[1];

        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = "nw_masque_inner_connection_start";
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&buf[14] = v106;
        *(_WORD *)&buf[22] = 2112;
        __int16 v120 = v16;
        LOWORD(v121) = 2112;
        *(void *)((char *)&v121 + 2) = v41;
        _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_DEFAULT, "%{public}s %@ received new connection %@ from %@", buf, 0x2Au);
      }
      aBlock.os_log_type_t receiver = (id)MEMORY[0x1E4F143A8];
      aBlock.super_class = (Class)3221225472;
      unsigned int v114 = ___ZL32nw_masque_inner_connection_startP27NWConcrete_nw_masque_serverPU27objcproto16OS_nw_connection8NSObjectPU33objcproto22OS_nw_connection_groupS1__block_invoke;
      int v115 = &unk_1E524B9A0;
      uint64_t v42 = v106;
      char v116 = v42;
      id v43 = v16;
      BOOL v117 = v43;
      char v44 = (void (**)(void))_Block_copy(&aBlock);
      os_unfair_lock_lock(v106 + 4);
      v44[2](v44);
      os_unfair_lock_unlock(v106 + 4);

      *(void *)os_log_type_t type = MEMORY[0x1E4F143A8];
      uint64_t v108 = 3221225472;
      uint64_t v109 = ___ZL32nw_masque_inner_connection_startP27NWConcrete_nw_masque_serverPU27objcproto16OS_nw_connection8NSObjectPU33objcproto22OS_nw_connection_groupS1__block_invoke_2;
      int v110 = &unk_1E524B9A0;
      uint64_t v111 = v42;
      char v112 = v43;
      __int16 v45 = v112;
      os_log_type_t v46 = type;
      BOOL v47 = *((void *)v45 + 4);
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = __nw_masque_connection_set_cancel_handler_block_invoke;
      __int16 v120 = (NWConcrete_nw_masque_connection *)&unk_1E524B950;
      __int16 v48 = v45;
      *(void *)&long long v121 = v48;
      uint64_t v49 = v46;
      *((void *)&v121 + 1) = v49;
      dispatch_async(v47, buf);

      uint64_t id = nw_connection_group_get_id(v99);
      uint64_t v51 = v48;
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = __nw_masque_connection_set_group_identifier_block_invoke;
      __int16 v120 = (NWConcrete_nw_masque_connection *)&unk_1E52491B0;
      __int16 v52 = v51;
      *(void *)&long long v121 = v52;
      *((void *)&v121 + 1) = id;
      os_log_type_t v53 = (void (**)(void))_Block_copy(buf);
      v51 += 6;
      os_unfair_lock_lock(v51);
      v53[2](v53);
      os_unfair_lock_unlock(v51);

      uint64_t v54 = v52;
      uint64_t v55 = *((void *)v45 + 4);
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)&buf[8] = 3221225472;
      *(void *)&buf[16] = __nw_masque_connection_start_block_invoke;
      __int16 v120 = (NWConcrete_nw_masque_connection *)&unk_1E524BAA8;
      char v56 = v54;
      *(void *)&long long v121 = v56;
      dispatch_async(v55, buf);

      goto LABEL_56;
    }
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v57 = (id *)v105;
      __int16 v58 = (NWConcrete_nw_masque_connection *)v57[1];

      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = "nw_masque_inner_connection_start";
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v106;
      *(_WORD *)&buf[22] = 2112;
      __int16 v120 = v58;
      _os_log_impl(&dword_1830D4000, v39, OS_LOG_TYPE_ERROR, "%{public}s %@ failed to create new connection from %@", buf, 0x20u);
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v59 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_inner_connection_start";
    os_log_type_t v60 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(aBlock.receiver) = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v60, &aBlock, type))
    {
      if (LOBYTE(aBlock.receiver) == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v61 = (id)gLogObj;
        os_log_type_t v62 = (os_log_type_t)aBlock.receiver;
        if (os_log_type_enabled(v61, (os_log_type_t)aBlock.receiver))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_inner_connection_start";
          _os_log_impl(&dword_1830D4000, v61, v62, "%{public}s nw_masque_connection_create failed", buf, 0xCu);
        }
      }
      else if (type[0])
      {
        uint64_t v63 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v61 = (id)gLogObj;
        os_log_type_t v64 = (os_log_type_t)aBlock.receiver;
        BOOL v65 = os_log_type_enabled(v61, (os_log_type_t)aBlock.receiver);
        if (v63)
        {
          if (v65)
          {
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = "nw_masque_inner_connection_start";
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = v63;
            _os_log_impl(&dword_1830D4000, v61, v64, "%{public}s nw_masque_connection_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v63);
          if (!v60) {
            goto LABEL_56;
          }
          goto LABEL_55;
        }
        if (v65)
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_inner_connection_start";
          _os_log_impl(&dword_1830D4000, v61, v64, "%{public}s nw_masque_connection_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        BOOL v61 = (id)gLogObj;
        os_log_type_t v66 = (os_log_type_t)aBlock.receiver;
        if (os_log_type_enabled(v61, (os_log_type_t)aBlock.receiver))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = "nw_masque_inner_connection_start";
          _os_log_impl(&dword_1830D4000, v61, v66, "%{public}s nw_masque_connection_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    if (!v60)
    {
LABEL_56:

      goto LABEL_57;
    }
LABEL_55:
    free(v60);
    goto LABEL_56;
  }
  BOOL v71 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_masque_inner_connection_start";
  id v68 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(aBlock.receiver) = 16;
  type[0] = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v68, &aBlock, type)) {
    goto LABEL_117;
  }
  if (LOBYTE(aBlock.receiver) == 17)
  {
    id v69 = __nwlog_obj();
    os_log_type_t v72 = (os_log_type_t)aBlock.receiver;
    if (os_log_type_enabled(v69, (os_log_type_t)aBlock.receiver))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_inner_connection_start";
      _os_log_impl(&dword_1830D4000, v69, v72, "%{public}s called with null inner_connection", buf, 0xCu);
    }
    goto LABEL_116;
  }
  if (type[0] == OS_LOG_TYPE_DEFAULT)
  {
    id v69 = __nwlog_obj();
    os_log_type_t v94 = (os_log_type_t)aBlock.receiver;
    if (os_log_type_enabled(v69, (os_log_type_t)aBlock.receiver))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_inner_connection_start";
      _os_log_impl(&dword_1830D4000, v69, v94, "%{public}s called with null inner_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_116;
  }
  char v84 = (char *)__nw_create_backtrace_string();
  id v69 = __nwlog_obj();
  os_log_type_t v85 = (os_log_type_t)aBlock.receiver;
  BOOL v86 = os_log_type_enabled(v69, (os_log_type_t)aBlock.receiver);
  if (!v84)
  {
    if (v86)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_inner_connection_start";
      _os_log_impl(&dword_1830D4000, v69, v85, "%{public}s called with null inner_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_116;
  }
  if (v86)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_masque_inner_connection_start";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v84;
    _os_log_impl(&dword_1830D4000, v69, v85, "%{public}s called with null inner_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v84);
  if (v68) {
    goto LABEL_118;
  }
LABEL_57:
}

void sub_183D255A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37)
{
  _Unwind_Resume(a1);
}

void ___ZL32nw_masque_connection_group_startP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject_block_invoke_105(uint64_t a1, int a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  uint64_t v6 = (id)gLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446722;
    BOOL v13 = "nw_masque_connection_group_start_block_invoke";
    __int16 v14 = 1024;
    int v15 = a2;
    __int16 v16 = 2112;
    id v17 = v5;
    _os_log_impl(&dword_1830D4000, v6, OS_LOG_TYPE_INFO, "%{public}s group state %u, error %@", buf, 0x1Cu);
  }

  if ((a2 - 3) > 1)
  {
    if (a2 == 2) {
      nw_masque_server_call_proxy_client_connection_event_handler(*(void **)(a1 + 32), *(void **)(a1 + 40), 2, 0);
    }
  }
  else
  {
    id v7 = *(os_unfair_lock_s **)(a1 + 32);
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    v9[2] = ___ZL32nw_masque_connection_group_startP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject_block_invoke_106;
    v9[3] = &unk_1E524B9A0;
    id v10 = v7;
    id v11 = *(id *)(a1 + 40);
    id v8 = (void (**)(void))_Block_copy(v9);
    v7 += 4;
    os_unfair_lock_lock(v7);
    v8[2](v8);
    os_unfair_lock_unlock(v7);

    nw_connection_group_cancel(*(nw_connection_group_t *)(a1 + 40));
    if (a2 == 4) {
      nw_masque_server_call_proxy_client_connection_event_handler(*(void **)(a1 + 32), *(void **)(a1 + 40), 3, 0);
    }
  }
}

void sub_183D2585C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL32nw_masque_connection_group_startP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject_block_invoke_2(uint64_t a1)
{
}

void ___ZL32nw_masque_connection_group_startP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject_block_invoke_3(uint64_t a1)
{
}

void nw_masque_server_call_proxy_client_connection_event_handler(void *a1, void *a2, int a3, void *a4)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v7 = a1;
  id v8 = a2;
  id v9 = a4;
  if (!v7)
  {
    id v12 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "nw_masque_server_call_proxy_client_connection_event_handler";
    BOOL v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v39[0]) = 0;
    if (!__nwlog_fault(v13, type, v39)) {
      goto LABEL_43;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __int16 v14 = __nwlog_obj();
      os_log_type_t v15 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_server_call_proxy_client_connection_event_handler";
        _os_log_impl(&dword_1830D4000, v14, v15, "%{public}s called with null server", buf, 0xCu);
      }
    }
    else if (LOBYTE(v39[0]))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __int16 v14 = __nwlog_obj();
      os_log_type_t v19 = type[0];
      BOOL v20 = os_log_type_enabled(v14, type[0]);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_server_call_proxy_client_connection_event_handler";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_43:
        if (!v13) {
          goto LABEL_9;
        }
LABEL_44:
        free(v13);
        goto LABEL_9;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_server_call_proxy_client_connection_event_handler";
        _os_log_impl(&dword_1830D4000, v14, v19, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __int16 v14 = __nwlog_obj();
      os_log_type_t v24 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_server_call_proxy_client_connection_event_handler";
        _os_log_impl(&dword_1830D4000, v14, v24, "%{public}s called with null server, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_42:

    goto LABEL_43;
  }
  if (v8)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    __int16 v52 = __Block_byref_object_copy__107;
    os_log_type_t v53 = __Block_byref_object_dispose__108;
    id v54 = 0;
    uint64_t v47 = 0;
    __int16 v48 = &v47;
    uint64_t v49 = 0x2020000000;
    uint64_t v50 = 0;
    *(void *)os_log_type_t type = 0;
    uint64_t v42 = type;
    uint64_t v43 = 0x3032000000;
    char v44 = __Block_byref_object_copy__89219;
    __int16 v45 = __Block_byref_object_dispose__89220;
    id v46 = 0;
    v39[0] = 0;
    v39[1] = v39;
    v39[2] = 0x3032000000;
    v39[3] = __Block_byref_object_copy__89219;
    v39[4] = __Block_byref_object_dispose__89220;
    id v40 = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL59nw_masque_server_call_proxy_client_connection_event_handlerP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject41nw_masque_proxy_client_connection_event_tU13block_pointerFvvE_block_invoke;
    aBlock[3] = &unk_1E524BBC0;
    os_log_type_t v33 = v7;
    os_log_type_t v35 = buf;
    BOOL v36 = &v47;
    id v34 = v8;
    os_log_type_t v37 = type;
    os_log_type_t v38 = v39;
    id v10 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v7 + 4);
    v10[2](v10);
    os_unfair_lock_unlock(v7 + 4);

    if (v48[3] && *(void *)(*(void *)&buf[8] + 40))
    {
      id v11 = *((void *)v42 + 5);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = ___ZL59nw_masque_server_call_proxy_client_connection_event_handlerP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject41nw_masque_proxy_client_connection_event_tU13block_pointerFvvE_block_invoke_2;
      block[3] = &unk_1E524BBE8;
      os_log_type_t v28 = buf;
      BOOL v29 = &v47;
      int v31 = a3;
      os_log_type_t v27 = v9;
      id v30 = v39;
      dispatch_async(v11, block);
    }
    else if (v9)
    {
      v9[2](v9);
    }

    _Block_object_dispose(v39, 8);
    _Block_object_dispose(type, 8);

    _Block_object_dispose(&v47, 8);
    _Block_object_dispose(buf, 8);

    goto LABEL_9;
  }
  __int16 v16 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_masque_server_call_proxy_client_connection_event_handler";
  BOOL v13 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v39[0]) = 0;
  if (!__nwlog_fault(v13, type, v39)) {
    goto LABEL_43;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    __int16 v14 = __nwlog_obj();
    os_log_type_t v17 = type[0];
    if (os_log_type_enabled(v14, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_server_call_proxy_client_connection_event_handler";
      _os_log_impl(&dword_1830D4000, v14, v17, "%{public}s called with null connection_group", buf, 0xCu);
    }
    goto LABEL_42;
  }
  if (!LOBYTE(v39[0]))
  {
    __int16 v14 = __nwlog_obj();
    os_log_type_t v25 = type[0];
    if (os_log_type_enabled(v14, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_server_call_proxy_client_connection_event_handler";
      _os_log_impl(&dword_1830D4000, v14, v25, "%{public}s called with null connection_group, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_42;
  }
  id v21 = (char *)__nw_create_backtrace_string();
  __int16 v14 = __nwlog_obj();
  os_log_type_t v22 = type[0];
  BOOL v23 = os_log_type_enabled(v14, type[0]);
  if (!v21)
  {
    if (v23)
    {
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = "nw_masque_server_call_proxy_client_connection_event_handler";
      _os_log_impl(&dword_1830D4000, v14, v22, "%{public}s called with null connection_group, no backtrace", buf, 0xCu);
    }
    goto LABEL_42;
  }
  if (v23)
  {
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = "nw_masque_server_call_proxy_client_connection_event_handler";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v21;
    _os_log_impl(&dword_1830D4000, v14, v22, "%{public}s called with null connection_group, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v21);
  if (v13) {
    goto LABEL_44;
  }
LABEL_9:
}

void sub_183D25FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,id a44)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a39, 8);

  _Block_object_dispose((const void *)(v47 - 192), 8);
  _Block_object_dispose((const void *)(v47 - 160), 8);

  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__107(uint64_t a1, uint64_t a2)
{
  uint64_t result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__108(uint64_t a1)
{
}

void ___ZL59nw_masque_server_call_proxy_client_connection_event_handlerP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject41nw_masque_proxy_client_connection_event_tU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  int v2 = *(const void **)(*(void *)(a1 + 32) + 88);
  if (v2)
  {
    id v3 = _Block_copy(v2);
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = nw_connection_group_get_id(*(void **)(a1 + 40));
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), *(id *)(*(void *)(a1 + 32) + 40));
    uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 24);
    id v7 = (id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    objc_storeStrong(v7, v6);
  }
}

void ___ZL59nw_masque_server_call_proxy_client_connection_event_handlerP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject41nw_masque_proxy_client_connection_event_tU13block_pointerFvvE_block_invoke_2(void *a1)
{
  (*(void (**)(void))(*(void *)(*(void *)(a1[5] + 8) + 40) + 16))();
  int v2 = (void *)a1[4];
  if (v2)
  {
    id v3 = *(NSObject **)(*(void *)(a1[7] + 8) + 40);
    dispatch_async(v3, v2);
  }
}

BOOL ___ZL32nw_masque_connection_group_startP27NWConcrete_nw_masque_serverPU33objcproto22OS_nw_connection_group8NSObject_block_invoke_106(BOOL result)
{
  if (*(void *)(*(void *)(result + 32) + 72)) {
    return nw_array_remove_object(*(void *)(*(void *)(result + 32) + 72), *(void *)(result + 40));
  }
  return result;
}

void ___ZL32nw_masque_inner_connection_startP27NWConcrete_nw_masque_serverPU27objcproto16OS_nw_connection8NSObjectPU33objcproto22OS_nw_connection_groupS1__block_invoke(uint64_t a1)
{
}

void ___ZL32nw_masque_inner_connection_startP27NWConcrete_nw_masque_serverPU27objcproto16OS_nw_connection8NSObjectPU33objcproto22OS_nw_connection_groupS1__block_invoke_2(uint64_t a1)
{
  int v2 = *(os_unfair_lock_s **)(a1 + 32);
  id v3 = v2 + 4;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = ___ZL32nw_masque_inner_connection_startP27NWConcrete_nw_masque_serverPU27objcproto16OS_nw_connection8NSObjectPU33objcproto22OS_nw_connection_groupS1__block_invoke_3;
  v5[3] = &unk_1E524B9A0;
  uint64_t v6 = v2;
  id v7 = *(id *)(a1 + 40);
  uint64_t v4 = (void (**)(void))_Block_copy(v5);
  os_unfair_lock_lock(v3);
  v4[2](v4);
  os_unfair_lock_unlock(v3);
}

void sub_183D262A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void ___ZL32nw_masque_inner_connection_startP27NWConcrete_nw_masque_serverPU27objcproto16OS_nw_connection8NSObjectPU33objcproto22OS_nw_connection_groupS1__block_invoke_3(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  BOOL v2 = nw_array_duplicate_array_without_object(*(void *)(*(void *)(a1 + 32) + 104), *(void **)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 104);
  *(void *)(v3 + 104) = v2;

  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 104);
  if (v5) {
    uint64_t v6 = (uint64_t)(*(void *)(v5 + 24) - *(void *)(v5 + 16)) >> 3;
  }
  else {
    uint64_t v6 = 0;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v7 = (id)gLogObj;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    int v10 = 136446978;
    id v11 = "nw_masque_inner_connection_start_block_invoke_3";
    __int16 v12 = 2112;
    uint64_t v13 = v8;
    __int16 v14 = 2112;
    uint64_t v15 = v9;
    __int16 v16 = 2048;
    uint64_t v17 = v6;
    _os_log_impl(&dword_1830D4000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s %@ cancelled connection %@, %zu remaining", (uint8_t *)&v10, 0x2Au);
  }
}

void __nw_masque_server_start_block_invoke(uint64_t a1, void *a2)
{
}

void nw_masque_server_cancel(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  BOOL v2 = v1;
  if (!v1)
  {
    uint64_t v4 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    BOOL v23 = "nw_masque_server_cancel";
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v20 = 0;
    if (!__nwlog_fault(v5, &type, &v20)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_masque_server_cancel";
        _os_log_impl(&dword_1830D4000, v6, v7, "%{public}s called with null server", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v11 = type;
      BOOL v12 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v23 = "nw_masque_server_cancel";
          __int16 v24 = 2082;
          os_log_type_t v25 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v5) {
          goto LABEL_4;
        }
LABEL_39:
        free(v5);
        goto LABEL_4;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_masque_server_cancel";
        _os_log_impl(&dword_1830D4000, v6, v11, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v6 = __nwlog_obj();
      os_log_type_t v16 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v23 = "nw_masque_server_cancel";
        _os_log_impl(&dword_1830D4000, v6, v16, "%{public}s called with null server, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  uint64_t v3 = v1[3];
  if (v3)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = __nw_masque_server_cancel_block_invoke;
    block[3] = &unk_1E524BAA8;
    os_log_type_t v19 = v1;
    dispatch_async(v3, block);

    goto LABEL_4;
  }
  uint64_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v23 = "nw_masque_server_cancel";
  uint64_t v5 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (!__nwlog_fault(v5, &type, &v20)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v9 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_masque_server_cancel";
      _os_log_impl(&dword_1830D4000, v6, v9, "%{public}s called with null server->ms_queue", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v20)
  {
    uint64_t v6 = __nwlog_obj();
    os_log_type_t v17 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_masque_server_cancel";
      _os_log_impl(&dword_1830D4000, v6, v17, "%{public}s called with null server->ms_queue, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  uint64_t v13 = (char *)__nw_create_backtrace_string();
  uint64_t v6 = __nwlog_obj();
  os_log_type_t v14 = type;
  BOOL v15 = os_log_type_enabled(v6, type);
  if (!v13)
  {
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      BOOL v23 = "nw_masque_server_cancel";
      _os_log_impl(&dword_1830D4000, v6, v14, "%{public}s called with null server->ms_queue, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v15)
  {
    *(_DWORD *)buf = 136446466;
    BOOL v23 = "nw_masque_server_cancel";
    __int16 v24 = 2082;
    os_log_type_t v25 = v13;
    _os_log_impl(&dword_1830D4000, v6, v14, "%{public}s called with null server->ms_queue, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v13);
  if (v5) {
    goto LABEL_39;
  }
LABEL_4:
}

void __nw_masque_server_cancel_block_invoke(uint64_t a1)
{
  id v1 = *(os_unfair_lock_s **)(a1 + 32);
  BOOL v2 = v1 + 4;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = __nw_masque_server_cancel_block_invoke_2;
  aBlock[3] = &unk_1E524BAA8;
  uint64_t v5 = v1;
  uint64_t v3 = (void (**)(void))_Block_copy(aBlock);
  os_unfair_lock_lock(v2);
  v3[2](v3);
  os_unfair_lock_unlock(v2);
}

void sub_183D269C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

atomic_uchar *__nw_masque_server_cancel_block_invoke_2(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[8];
  if (v3)
  {
    nw_listener_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 64);
    *(void *)(v4 + 64) = 0;

    BOOL v2 = *(void **)(a1 + 32);
  }
  uint64_t v6 = (atomic_uchar *)v2[13];
  if (v6)
  {
    nw_array_apply(v6, (uint64_t)&__block_literal_global_13_89290);
    BOOL v2 = *(void **)(a1 + 32);
  }
  uint64_t result = (atomic_uchar *)v2[9];
  if (result)
  {
    return (atomic_uchar *)nw_array_apply(result, (uint64_t)&__block_literal_global_15_89291);
  }
  return result;
}

uint64_t __nw_masque_server_cancel_block_invoke_4(int a1, int a2, nw_connection_group_t group)
{
  return 1;
}

uint64_t __nw_masque_server_cancel_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a3;
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = v3[4];
    *(void *)block = MEMORY[0x1E4F143A8];
    *(void *)&block[8] = 3221225472;
    *(void *)&block[16] = __nw_masque_connection_cancel_block_invoke;
    uint64_t v18 = &unk_1E524BAA8;
    os_log_type_t v19 = v3;
    dispatch_async(v5, block);

    goto LABEL_3;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  id v7 = (id)gLogObj;
  *(_DWORD *)block = 136446210;
  *(void *)&void block[4] = "nw_masque_connection_cancel";
  uint64_t v8 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = (id)gLogObj;
      os_log_type_t v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)block = 136446210;
        *(void *)&void block[4] = "nw_masque_connection_cancel";
        _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null connection", block, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = (id)gLogObj;
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)block = 136446466;
          *(void *)&void block[4] = "nw_masque_connection_cancel";
          *(_WORD *)&block[12] = 2082;
          *(void *)&block[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", block, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)block = 136446210;
        *(void *)&void block[4] = "nw_masque_connection_cancel";
        _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null connection, no backtrace", block, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_t v9 = (id)gLogObj;
      os_log_type_t v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)block = 136446210;
        *(void *)&void block[4] = "nw_masque_connection_cancel";
        _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", block, 0xCu);
      }
    }
  }
LABEL_20:
  if (v8) {
    free(v8);
  }
LABEL_3:

  return 1;
}

id nw_masque_server_copy_connection_group_with_identifier(void *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  uint64_t v4 = v3;
  if (v3)
  {
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000;
    BOOL v23 = __Block_byref_object_copy__89219;
    __int16 v24 = __Block_byref_object_dispose__89220;
    id v25 = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_masque_server_copy_connection_group_with_identifier_block_invoke;
    aBlock[3] = &unk_1E524BAF8;
    uint64_t v18 = buf;
    uint64_t v19 = a2;
    os_log_type_t v17 = v3;
    uint64_t v5 = (void (**)(void))_Block_copy(aBlock);
    os_unfair_lock_lock(v4 + 4);
    v5[2](v5);
    os_unfair_lock_unlock(v4 + 4);

    id v6 = *(id *)(*(void *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }
  uint64_t v8 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(void *)&uint8_t buf[4] = "nw_masque_server_copy_connection_group_with_identifier";
  os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v20 = 0;
  if (__nwlog_fault(v9, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_server_copy_connection_group_with_identifier";
        _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s called with null server", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v13 = type;
      BOOL v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = "nw_masque_server_copy_connection_group_with_identifier";
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null server, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_server_copy_connection_group_with_identifier";
        _os_log_impl(&dword_1830D4000, v10, v13, "%{public}s called with null server, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = "nw_masque_server_copy_connection_group_with_identifier";
        _os_log_impl(&dword_1830D4000, v10, v15, "%{public}s called with null server, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v9) {
    free(v9);
  }
  id v6 = 0;
LABEL_3:

  return v6;
}

void sub_183D2717C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

BOOL __nw_masque_server_copy_connection_group_with_identifier_block_invoke(void *a1)
{
  id v1 = *(atomic_uchar **)(a1[4] + 72);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = __nw_masque_server_copy_connection_group_with_identifier_block_invoke_2;
  v4[3] = &unk_1E524BAD0;
  uint64_t v2 = a1[6];
  v4[4] = a1[5];
  v4[5] = v2;
  return nw_array_apply(v1, (uint64_t)v4);
}

BOOL __nw_masque_server_copy_connection_group_with_identifier_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t id = nw_connection_group_get_id(v5);
  if (v6 == id) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a3);
  }

  return v6 != id;
}

void __nw_masque_server_set_listener_association_port_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 120);
  if (!v2)
  {
    xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 120);
    *(void *)(v4 + 120) = v3;

    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 120);
  }
  uint64_t v6 = *(const char **)(a1 + 40);
  uint64_t v7 = *(unsigned __int16 *)(a1 + 48);

  xpc_dictionary_set_uint64(v2, v6, v7);
}

void *__nw_masque_server_get_listener_association_port_block_invoke(uint64_t a1)
{
  uint64_t result = *(void **)(*(void *)(a1 + 32) + 120);
  if (result)
  {
    uint64_t result = (void *)xpc_dictionary_get_uint64(result, *(const char **)(a1 + 48));
    *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_WORD)result;
  }
  return result;
}

void sub_183D27608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183D276C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183D27920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183D27CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

void sub_183D27EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)nw_interpose_flow;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_183D2824C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183D28350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_183D284A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_interface *nw_interface_create_with_index(unsigned int a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    char v20 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v27 = "nw_interface_create_with_index";
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    v30[0] = OS_LOG_TYPE_ERROR;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v10, v30, &type))
    {
      if (v30[0] == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v21 = v30[0];
        if (!os_log_type_enabled(v11, v30[0])) {
          goto LABEL_30;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_interface_create_with_index";
        os_log_type_t v13 = "%{public}s called with null interface_index";
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v21 = v30[0];
        BOOL v23 = os_log_type_enabled(v11, v30[0]);
        if (backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            os_log_type_t v27 = "nw_interface_create_with_index";
            __int16 v28 = 2082;
            v29[0] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v11, v21, "%{public}s called with null interface_index, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_31;
        }
        if (!v23) {
          goto LABEL_30;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_interface_create_with_index";
        os_log_type_t v13 = "%{public}s called with null interface_index, no backtrace";
      }
      else
      {
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v21 = v30[0];
        if (!os_log_type_enabled(v11, v30[0])) {
          goto LABEL_30;
        }
        *(_DWORD *)buf = 136446210;
        os_log_type_t v27 = "nw_interface_create_with_index";
        os_log_type_t v13 = "%{public}s called with null interface_index, backtrace limit exceeded";
      }
      os_log_type_t v17 = v11;
      os_log_type_t v18 = v21;
      uint32_t v19 = 12;
      goto LABEL_29;
    }
    goto LABEL_31;
  }
  if (a1 >= 0x7FFFFFFF)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v2 = (id)gLogObj;
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
LABEL_6:

      return 0;
    }
    *(_DWORD *)buf = 136446722;
    os_log_type_t v27 = "nw_interface_create_with_index";
    __int16 v28 = 1024;
    LODWORD(v29[0]) = a1;
    WORD2(v29[0]) = 1024;
    *(_DWORD *)((char *)v29 + 6) = 0x7FFFFFFF;
    xpc_object_t v3 = "%{public}s refusing to create an interface with index %u too high (>=%u)";
    uint64_t v4 = v2;
    uint32_t v5 = 24;
LABEL_5:
    _os_log_impl(&dword_1830D4000, v4, OS_LOG_TYPE_ERROR, v3, buf, v5);
    goto LABEL_6;
  }
  if (!if_indextoname(a1, (char *)v30))
  {
    int v7 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    uint64_t v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      os_log_type_t v27 = "nw_interface_create_with_index";
      __int16 v28 = 1024;
      LODWORD(v29[0]) = a1;
      WORD2(v29[0]) = 1024;
      *(_DWORD *)((char *)v29 + 6) = v7;
      _os_log_impl(&dword_1830D4000, v8, OS_LOG_TYPE_ERROR, "%{public}s if_indextoname failed for interface index %u: %{darwin.errno}d", buf, 0x18u);
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v9 = (id)gLogObj;
    uint64_t v2 = v9;
    if (v7 == 6)
    {
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_6;
      }
      *(_DWORD *)buf = 136446466;
      os_log_type_t v27 = "nw_interface_create_with_index";
      __int16 v28 = 1024;
      LODWORD(v29[0]) = 6;
      xpc_object_t v3 = "%{public}s if_indextoname %{darwin.errno}d";
      uint64_t v4 = v2;
      uint32_t v5 = 18;
      goto LABEL_5;
    }
    *(_DWORD *)buf = 136446466;
    os_log_type_t v27 = "nw_interface_create_with_index";
    __int16 v28 = 1024;
    LODWORD(v29[0]) = v7;
    os_log_type_t v10 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v24 = 0;
    if (__nwlog_fault(v10, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v11 = (id)gLogObj;
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_interface_create_with_index";
          __int16 v28 = 1024;
          LODWORD(v29[0]) = v7;
          os_log_type_t v13 = "%{public}s if_indextoname %{darwin.errno}d";
LABEL_27:
          os_log_type_t v17 = v11;
          os_log_type_t v18 = v12;
LABEL_28:
          uint32_t v19 = 18;
LABEL_29:
          _os_log_impl(&dword_1830D4000, v17, v18, v13, buf, v19);
        }
      }
      else
      {
        if (v24)
        {
          BOOL v14 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          os_log_type_t v11 = (id)gLogObj;
          os_log_type_t v15 = type;
          BOOL v16 = os_log_type_enabled(v11, type);
          if (v14)
          {
            if (v16)
            {
              *(_DWORD *)buf = 136446722;
              os_log_type_t v27 = "nw_interface_create_with_index";
              __int16 v28 = 1024;
              LODWORD(v29[0]) = v7;
              WORD2(v29[0]) = 2082;
              *(void *)((char *)v29 + 6) = v14;
              _os_log_impl(&dword_1830D4000, v11, v15, "%{public}s if_indextoname %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v14);
            goto LABEL_31;
          }
          if (!v16) {
            goto LABEL_30;
          }
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_interface_create_with_index";
          __int16 v28 = 1024;
          LODWORD(v29[0]) = v7;
          os_log_type_t v13 = "%{public}s if_indextoname %{darwin.errno}d, no backtrace";
          os_log_type_t v17 = v11;
          os_log_type_t v18 = v15;
          goto LABEL_28;
        }
        os_log_type_t v11 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v27 = "nw_interface_create_with_index";
          __int16 v28 = 1024;
          LODWORD(v29[0]) = v7;
          os_log_type_t v13 = "%{public}s if_indextoname %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_27;
        }
      }
LABEL_30:
    }
LABEL_31:
    if (v10) {
      free(v10);
    }
    return 0;
  }
  return nw_interface_create_with_index_and_name(a1, (unsigned __int8 *)v30);
}

NWConcrete_nw_interface *nw_interface_create_static(unsigned __int8 *a1, unsigned int a2, int a3, int a4, unsigned int a5, unsigned int a6, __int16 a7, int a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    uint32_t v19 = objc_alloc_init(NWConcrete_nw_interface);
    char v20 = v19;
    if (v19)
    {
      int v21 = *a1;
      v19->name[0] = v21;
      if (v21)
      {
        int v22 = a1[1];
        v19->name[1] = v22;
        if (v22)
        {
          int v23 = a1[2];
          v19->name[2] = v23;
          if (v23)
          {
            int v24 = a1[3];
            v19->name[3] = v24;
            if (v24)
            {
              int v25 = a1[4];
              v19->name[4] = v25;
              if (v25)
              {
                int v26 = a1[5];
                v19->name[5] = v26;
                if (v26)
                {
                  int v27 = a1[6];
                  v19->name[6] = v27;
                  if (v27)
                  {
                    int v28 = a1[7];
                    v19->name[7] = v28;
                    if (v28)
                    {
                      int v29 = a1[8];
                      v19->name[8] = v29;
                      if (v29)
                      {
                        int v30 = a1[9];
                        v19->name[9] = v30;
                        if (v30)
                        {
                          int v31 = a1[10];
                          v19->name[10] = v31;
                          if (v31)
                          {
                            int v32 = a1[11];
                            v19->name[11] = v32;
                            if (v32)
                            {
                              int v33 = a1[12];
                              v19->name[12] = v33;
                              if (v33)
                              {
                                int v34 = a1[13];
                                v19->name[13] = v34;
                                if (v34)
                                {
                                  int v35 = a1[14];
                                  v19->name[14] = v35;
                                  if (v35)
                                  {
                                    int v36 = a1[15];
                                    v19->name[15] = v36;
                                    if (v36)
                                    {
                                      int v37 = a1[16];
                                      v19->name[16] = v37;
                                      if (v37)
                                      {
                                        int v38 = a1[17];
                                        v19->name[17] = v38;
                                        if (v38)
                                        {
                                          int v39 = a1[18];
                                          v19->name[18] = v39;
                                          if (v39)
                                          {
                                            int v40 = a1[19];
                                            v19->name[19] = v40;
                                            if (v40)
                                            {
                                              int v41 = a1[20];
                                              v19->name[20] = v41;
                                              if (v41)
                                              {
                                                int v42 = a1[21];
                                                v19->name[21] = v42;
                                                if (v42)
                                                {
                                                  int v43 = a1[22];
                                                  v19->name[22] = v43;
                                                  if (v43)
                                                  {
                                                    int v44 = a1[23];
                                                    v19->name[23] = v44;
                                                    if (v44) {
                                                      v19->name[24] = 0;
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v19->index = a2;
      v19->os_log_type_t type = a3;
      v19->subos_log_type_t type = a4;
      v19->delegate_index = a6;
      v19->generation = a5;
      if (a8) {
        __int16 v45 = 2;
      }
      else {
        __int16 v45 = 0;
      }
      __int16 v46 = v45 | a7 | *(_WORD *)((char *)&v19->details + 73) & 0xFFFC;
      *(_WORD *)((char *)&v19->details + 73) = v46;
      v19->details.mtu = a9;
      if (a10)
      {
        v46 |= 0x80u;
        *(_WORD *)((char *)&v19->details + 73) = v46;
        v19->details.ipv4_netmask = a10;
      }
      if (a11)
      {
        *(_WORD *)((char *)&v19->details + 73) = v46 | 0x100;
        v19->details.ipv4_broadcast = a11;
      }
      uint64_t v47 = v19;
    }

    return v20;
  }
  uint64_t v49 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v60 = "nw_interface_create_static";
  uint64_t v50 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v57 = 0;
  if (__nwlog_fault(v50, &type, &v57))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      uint64_t v51 = __nwlog_obj();
      os_log_type_t v52 = type;
      if (os_log_type_enabled(v51, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v60 = "nw_interface_create_static";
        _os_log_impl(&dword_1830D4000, v51, v52, "%{public}s called with null name", buf, 0xCu);
      }
    }
    else if (v57)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v51 = __nwlog_obj();
      os_log_type_t v54 = type;
      BOOL v55 = os_log_type_enabled(v51, type);
      if (backtrace_string)
      {
        if (v55)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v60 = "nw_interface_create_static";
          __int16 v61 = 2082;
          os_log_type_t v62 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v51, v54, "%{public}s called with null name, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_54;
      }
      if (v55)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v60 = "nw_interface_create_static";
        _os_log_impl(&dword_1830D4000, v51, v54, "%{public}s called with null name, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      uint64_t v51 = __nwlog_obj();
      os_log_type_t v56 = type;
      if (os_log_type_enabled(v51, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v60 = "nw_interface_create_static";
        _os_log_impl(&dword_1830D4000, v51, v56, "%{public}s called with null name, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_54:
  if (v50) {
    free(v50);
  }
  return 0;
}

uint64_t nw_interface_get_generation(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[23];
    goto LABEL_3;
  }
  uint32_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_interface_get_generation";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_get_generation";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_interface_get_generation";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_get_generation";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_get_generation";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_interface_get_mtu(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[15];
    goto LABEL_3;
  }
  uint32_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_interface_get_mtu";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_get_mtu";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_interface_get_mtu";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_get_mtu";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_get_mtu";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_interface_get_ipv6_network_signature(void *a1, void *a2, unsigned char *a3)
{
  *(void *)&v45[13] = *MEMORY[0x1E4F143B8];
  uint32_t v5 = a1;
  uint64_t v6 = v5;
  if (!v5)
  {
    int v23 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v43 = "nw_interface_get_ipv6_network_signature";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v9, &type, &v40)) {
      goto LABEL_23;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v24 = __nwlog_obj();
      os_log_type_t v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_interface_get_ipv6_network_signature";
        _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null interface", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (!v40)
    {
      int v24 = __nwlog_obj();
      os_log_type_t v37 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_interface_get_ipv6_network_signature";
        _os_log_impl(&dword_1830D4000, v24, v37, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_74;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v24 = __nwlog_obj();
    os_log_type_t v31 = type;
    BOOL v32 = os_log_type_enabled(v24, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_interface_get_ipv6_network_signature";
        _os_log_impl(&dword_1830D4000, v24, v31, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      int v43 = "nw_interface_get_ipv6_network_signature";
      __int16 v44 = 2082;
      *(void *)__int16 v45 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v24, v31, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_56;
  }
  if (!a2)
  {
    int v26 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v43 = "nw_interface_get_ipv6_network_signature";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v9, &type, &v40)) {
      goto LABEL_23;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v24 = __nwlog_obj();
      os_log_type_t v27 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_interface_get_ipv6_network_signature";
        _os_log_impl(&dword_1830D4000, v24, v27, "%{public}s called with null signature", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (!v40)
    {
      int v24 = __nwlog_obj();
      os_log_type_t v38 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_interface_get_ipv6_network_signature";
        _os_log_impl(&dword_1830D4000, v24, v38, "%{public}s called with null signature, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_74;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v24 = __nwlog_obj();
    os_log_type_t v33 = type;
    BOOL v34 = os_log_type_enabled(v24, type);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_interface_get_ipv6_network_signature";
        _os_log_impl(&dword_1830D4000, v24, v33, "%{public}s called with null signature, no backtrace", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      int v43 = "nw_interface_get_ipv6_network_signature";
      __int16 v44 = 2082;
      *(void *)__int16 v45 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v24, v33, "%{public}s called with null signature, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_56;
  }
  if (!a3)
  {
    int v28 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v43 = "nw_interface_get_ipv6_network_signature";
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (!__nwlog_fault(v9, &type, &v40)) {
      goto LABEL_23;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v24 = __nwlog_obj();
      os_log_type_t v29 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_interface_get_ipv6_network_signature";
        _os_log_impl(&dword_1830D4000, v24, v29, "%{public}s called with null signature_len", buf, 0xCu);
      }
LABEL_74:

      goto LABEL_23;
    }
    if (!v40)
    {
      int v24 = __nwlog_obj();
      os_log_type_t v39 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_interface_get_ipv6_network_signature";
        _os_log_impl(&dword_1830D4000, v24, v39, "%{public}s called with null signature_len, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_74;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v24 = __nwlog_obj();
    os_log_type_t v35 = type;
    BOOL v36 = os_log_type_enabled(v24, type);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        int v43 = "nw_interface_get_ipv6_network_signature";
        _os_log_impl(&dword_1830D4000, v24, v35, "%{public}s called with null signature_len, no backtrace", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      int v43 = "nw_interface_get_ipv6_network_signature";
      __int16 v44 = 2082;
      *(void *)__int16 v45 = backtrace_string;
      _os_log_impl(&dword_1830D4000, v24, v35, "%{public}s called with null signature_len, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_56:

    free(backtrace_string);
    goto LABEL_23;
  }
  if (*a3 <= 0x13u)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    id v7 = (id)gLogObj;
    int v8 = *a3;
    *(_DWORD *)buf = 136446466;
    int v43 = "nw_interface_get_ipv6_network_signature";
    __int16 v44 = 1024;
    *(_DWORD *)__int16 v45 = v8;
    os_log_type_t v9 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (__nwlog_fault(v9, &type, &v40))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = (id)gLogObj;
        os_log_type_t v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          int v12 = *a3;
          *(_DWORD *)buf = 136446466;
          int v43 = "nw_interface_get_ipv6_network_signature";
          __int16 v44 = 1024;
          *(_DWORD *)__int16 v45 = v12;
          _os_log_impl(&dword_1830D4000, v10, v11, "%{public}s signature length %u is less than IFNET_SIGNATURELEN", buf, 0x12u);
        }
      }
      else if (v40)
      {
        os_log_type_t v15 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = (id)gLogObj;
        os_log_type_t v16 = type;
        BOOL v17 = os_log_type_enabled(v10, type);
        if (v15)
        {
          if (v17)
          {
            int v18 = *a3;
            *(_DWORD *)buf = 136446722;
            int v43 = "nw_interface_get_ipv6_network_signature";
            __int16 v44 = 1024;
            *(_DWORD *)__int16 v45 = v18;
            v45[2] = 2082;
            *(void *)&v45[3] = v15;
            _os_log_impl(&dword_1830D4000, v10, v16, "%{public}s signature length %u is less than IFNET_SIGNATURELEN, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v15);
          if (!v9) {
            goto LABEL_25;
          }
          goto LABEL_24;
        }
        if (v17)
        {
          int v21 = *a3;
          *(_DWORD *)buf = 136446466;
          int v43 = "nw_interface_get_ipv6_network_signature";
          __int16 v44 = 1024;
          *(_DWORD *)__int16 v45 = v21;
          _os_log_impl(&dword_1830D4000, v10, v16, "%{public}s signature length %u is less than IFNET_SIGNATURELEN, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v10 = (id)gLogObj;
        os_log_type_t v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          int v20 = *a3;
          *(_DWORD *)buf = 136446466;
          int v43 = "nw_interface_get_ipv6_network_signature";
          __int16 v44 = 1024;
          *(_DWORD *)__int16 v45 = v20;
          _os_log_impl(&dword_1830D4000, v10, v19, "%{public}s signature length %u is less than IFNET_SIGNATURELEN, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
LABEL_23:
    if (!v9)
    {
LABEL_25:
      uint64_t v14 = 0;
      goto LABEL_26;
    }
LABEL_24:
    free(v9);
    goto LABEL_25;
  }
  size_t v13 = v5[56];
  *a3 = v13;
  memcpy(a2, v5 + 36, v13);
  uint64_t v14 = 1;
LABEL_26:

  return v14;
}

uint64_t nw_interface_get_ipv4_netmask(void *a1, BOOL *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3)
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v18 = "nw_interface_get_ipv4_netmask";
    int v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v8, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          int v18 = "nw_interface_get_ipv4_netmask";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null interface", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            int v18 = "nw_interface_get_ipv4_netmask";
            __int16 v19 = 2082;
            int v20 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          int v18 = "nw_interface_get_ipv4_netmask";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null interface, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          int v18 = "nw_interface_get_ipv4_netmask";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_24:
    if (v8) {
      free(v8);
    }
    goto LABEL_5;
  }
  if (a2) {
    *a2 = (*(_WORD *)((unsigned char *)v3 + 85) & 0x80) != 0;
  }
  if ((*(_WORD *)((unsigned char *)v3 + 85) & 0x80) != 0)
  {
    uint64_t v5 = *((unsigned int *)v3 + 18);
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v5 = 0;
LABEL_7:

  return v5;
}

nw_endpoint_t nw_interface_copy_ipv4_netmask_endpoint(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    uint64_t v6 = __nwlog_obj();
    *(_DWORD *)address = 136446210;
    *(void *)&address[4] = "nw_interface_copy_ipv4_netmask_endpoint";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v7, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)address = 136446210;
          *(void *)&address[4] = "nw_interface_copy_ipv4_netmask_endpoint";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null interface", address, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v8 = __nwlog_obj();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)address = 136446466;
            *(void *)&address[4] = "nw_interface_copy_ipv4_netmask_endpoint";
            *(_WORD *)&address[12] = 2082;
            *(void *)&address[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null interface, dumping backtrace:%{public}s", address, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (v12)
        {
          *(_DWORD *)address = 136446210;
          *(void *)&address[4] = "nw_interface_copy_ipv4_netmask_endpoint";
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null interface, no backtrace", address, 0xCu);
        }
      }
      else
      {
        int v8 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)address = 136446210;
          *(void *)&address[4] = "nw_interface_copy_ipv4_netmask_endpoint";
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null interface, backtrace limit exceeded", address, 0xCu);
        }
      }
    }
LABEL_22:
    if (v7) {
      free(v7);
    }
    goto LABEL_3;
  }
  if ((*(_WORD *)((unsigned char *)v1 + 85) & 0x80) != 0)
  {
    int v4 = *((_DWORD *)v1 + 18);
    *(_DWORD *)address = 528;
    *(_DWORD *)&address[4] = v4;
    *(void *)&address[8] = 0;
    nw_endpoint_t v3 = nw_endpoint_create_address((const sockaddr *)address);
    goto LABEL_5;
  }
LABEL_3:
  nw_endpoint_t v3 = 0;
LABEL_5:

  return v3;
}

void sub_183D2A468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_interface_get_ipv4_broadcast(void *a1, unsigned char *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  nw_endpoint_t v3 = a1;
  int v4 = v3;
  if (!v3)
  {
    id v7 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v18 = "nw_interface_get_ipv4_broadcast";
    int v8 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v15 = 0;
    if (__nwlog_fault(v8, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          int v18 = "nw_interface_get_ipv4_broadcast";
          _os_log_impl(&dword_1830D4000, v9, v10, "%{public}s called with null interface", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v12 = type;
        BOOL v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            int v18 = "nw_interface_get_ipv4_broadcast";
            __int16 v19 = 2082;
            int v20 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          int v18 = "nw_interface_get_ipv4_broadcast";
          _os_log_impl(&dword_1830D4000, v9, v12, "%{public}s called with null interface, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        os_log_type_t v9 = __nwlog_obj();
        os_log_type_t v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          int v18 = "nw_interface_get_ipv4_broadcast";
          _os_log_impl(&dword_1830D4000, v9, v14, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_24:
    if (v8) {
      free(v8);
    }
    goto LABEL_5;
  }
  if (a2) {
    *a2 = *((unsigned char *)v3 + 86) & 1;
  }
  if ((*(_WORD *)((unsigned char *)v3 + 85) & 0x100) != 0)
  {
    uint64_t v5 = v3[19];
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v5 = 0;
LABEL_7:

  return v5;
}

nw_endpoint_t nw_interface_copy_ipv4_broadcast_endpoint(void *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    uint64_t v6 = __nwlog_obj();
    *(_DWORD *)address = 136446210;
    *(void *)&address[4] = "nw_interface_copy_ipv4_broadcast_endpoint";
    id v7 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v7, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        int v8 = __nwlog_obj();
        os_log_type_t v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)address = 136446210;
          *(void *)&address[4] = "nw_interface_copy_ipv4_broadcast_endpoint";
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null interface", address, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        int v8 = __nwlog_obj();
        os_log_type_t v11 = type;
        BOOL v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)address = 136446466;
            *(void *)&address[4] = "nw_interface_copy_ipv4_broadcast_endpoint";
            *(_WORD *)&address[12] = 2082;
            *(void *)&address[14] = backtrace_string;
            _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null interface, dumping backtrace:%{public}s", address, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (v12)
        {
          *(_DWORD *)address = 136446210;
          *(void *)&address[4] = "nw_interface_copy_ipv4_broadcast_endpoint";
          _os_log_impl(&dword_1830D4000, v8, v11, "%{public}s called with null interface, no backtrace", address, 0xCu);
        }
      }
      else
      {
        int v8 = __nwlog_obj();
        os_log_type_t v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)address = 136446210;
          *(void *)&address[4] = "nw_interface_copy_ipv4_broadcast_endpoint";
          _os_log_impl(&dword_1830D4000, v8, v13, "%{public}s called with null interface, backtrace limit exceeded", address, 0xCu);
        }
      }
    }
LABEL_22:
    if (v7) {
      free(v7);
    }
    goto LABEL_3;
  }
  if ((*(_WORD *)((unsigned char *)v1 + 85) & 0x100) != 0)
  {
    int v4 = *((_DWORD *)v1 + 19);
    *(_DWORD *)address = 528;
    *(_DWORD *)&address[4] = v4;
    *(void *)&address[8] = 0;
    nw_endpoint_t v3 = nw_endpoint_create_address((const sockaddr *)address);
    goto LABEL_5;
  }
LABEL_3:
  nw_endpoint_t v3 = 0;
LABEL_5:

  return v3;
}

void sub_183D2A9F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NWConcrete_nw_interface *nw_interface_copy_delegate_interface(void *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    uint64_t v17 = "nw_interface_copy_delegate_interface";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        id v7 = __nwlog_obj();
        os_log_type_t v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v17 = "nw_interface_copy_delegate_interface";
          _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        id v7 = __nwlog_obj();
        os_log_type_t v10 = type;
        BOOL v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            uint64_t v17 = "nw_interface_copy_delegate_interface";
            __int16 v18 = 2082;
            __int16 v19 = backtrace_string;
            _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v17 = "nw_interface_copy_delegate_interface";
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        id v7 = __nwlog_obj();
        os_log_type_t v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          uint64_t v17 = "nw_interface_copy_delegate_interface";
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
LABEL_20:
    if (v6) {
      free(v6);
    }
    goto LABEL_22;
  }
  unsigned int v3 = v1[22];
  if (!v3)
  {
LABEL_22:
    int v4 = 0;
    goto LABEL_23;
  }
  int v4 = nw_interface_create_with_index(v3);
LABEL_23:

  return v4;
}

void sub_183D2ACA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_interface_is_expensive(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = *(_WORD *)((unsigned char *)v1 + 85) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_interface_is_expensive";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_expensive";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_interface_is_expensive";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_expensive";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_expensive";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_interface_is_constrained(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(v1 + 85) >> 1) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_interface_is_constrained";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_constrained";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_interface_is_constrained";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_constrained";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_constrained";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_interface_is_ultra_constrained(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(v1 + 85) >> 2) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_interface_is_ultra_constrained";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_ultra_constrained";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_interface_is_ultra_constrained";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_ultra_constrained";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_ultra_constrained";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_interface_is_multilayer_packet_logging_enabled(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(v1 + 85) >> 6) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_interface_is_multilayer_packet_logging_enabled";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_multilayer_packet_logging_enabled";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_interface_is_multilayer_packet_logging_enabled";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_multilayer_packet_logging_enabled";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_multilayer_packet_logging_enabled";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_interface_supports_multicast(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(v1 + 85) >> 9) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_interface_supports_multicast";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_supports_multicast";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_interface_supports_multicast";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_supports_multicast";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_supports_multicast";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_interface_has_dns(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(v1 + 85) >> 10) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_interface_has_dns";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_has_dns";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_interface_has_dns";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_has_dns";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_has_dns";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_interface_has_nat64(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(v1 + 85) >> 11) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_interface_has_nat64";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_has_nat64";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_interface_has_nat64";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_has_nat64";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_has_nat64";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_interface_is_ipv4_routable(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(v1 + 85) >> 12) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_interface_is_ipv4_routable";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_ipv4_routable";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_interface_is_ipv4_routable";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_ipv4_routable";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_ipv4_routable";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_interface_is_ipv6_routable(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = (*(unsigned __int16 *)(v1 + 85) >> 13) & 1;
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_interface_is_ipv6_routable";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_ipv6_routable";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_interface_is_ipv6_routable";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_ipv6_routable";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_is_ipv6_routable";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_interface_get_tso_max_segment_size_v4(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[16];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_interface_get_tso_max_segment_size_v4";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_get_tso_max_segment_size_v4";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_interface_get_tso_max_segment_size_v4";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_get_tso_max_segment_size_v4";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_get_tso_max_segment_size_v4";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_interface_get_tso_max_segment_size_v6(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[17];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_interface_get_tso_max_segment_size_v6";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_get_tso_max_segment_size_v6";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_interface_get_tso_max_segment_size_v6";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_get_tso_max_segment_size_v6";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_get_tso_max_segment_size_v6";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_interface_get_csum_flags(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[20];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_interface_get_csum_flags";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      id v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_get_csum_flags";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      id v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_interface_get_csum_flags";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_get_csum_flags";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      id v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_get_csum_flags";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0;
LABEL_3:

  return v3;
}

const char *nw_interface_type_get_description(unsigned int a1)
{
  if (a1 > 4) {
    return "unknown";
  }
  else {
    return off_1E524BC28[a1];
  }
}

const char *nw_interface_subtype_get_description(int a1)
{
  if (a1 <= 1001)
  {
    if (!a1) {
      return "other";
    }
    if (a1 == 1001) {
      return "wifi_infrastructure";
    }
  }
  else
  {
    switch(a1)
    {
      case 1002:
        return "wifi_awdl";
      case 4001:
        return "coprocessor";
      case 5001:
        return "companion";
    }
  }
  return "unknown";
}

nw_endpoint_t nw_interface_copy_local_address_for_remote_address(void *a1, void *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v3)
  {
    int v23 = __nwlog_obj();
    *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
    *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
    char v15 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(v42) = 0;
    if (!__nwlog_fault(v15, buf, &v42)) {
      goto LABEL_32;
    }
    if (buf[0] == 17)
    {
      int v24 = __nwlog_obj();
      os_log_type_t v25 = buf[0];
      if (os_log_type_enabled(v24, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
        *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
        _os_log_impl(&dword_1830D4000, v24, v25, "%{public}s called with null interface", &__dst[0].sa_len, 0xCu);
      }
      goto LABEL_83;
    }
    if (!(_BYTE)v42)
    {
      int v24 = __nwlog_obj();
      os_log_type_t v37 = buf[0];
      if (os_log_type_enabled(v24, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
        *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
        _os_log_impl(&dword_1830D4000, v24, v37, "%{public}s called with null interface, backtrace limit exceeded", &__dst[0].sa_len, 0xCu);
      }
      goto LABEL_83;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v24 = __nwlog_obj();
    os_log_type_t v31 = buf[0];
    BOOL v32 = os_log_type_enabled(v24, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
        *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
        _os_log_impl(&dword_1830D4000, v24, v31, "%{public}s called with null interface, no backtrace", &__dst[0].sa_len, 0xCu);
      }
      goto LABEL_83;
    }
    if (v32)
    {
      *(_DWORD *)&__dst[0].size_t sa_len = 136446466;
      *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
      *(_WORD *)&__dst[0].sa_data[10] = 2082;
      *(void *)&__dst[0].sa_data[12] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v24, v31, "%{public}s called with null interface, dumping backtrace:%{public}s", &__dst[0].sa_len, 0x16u);
    }
    goto LABEL_65;
  }
  if (!v4)
  {
    int v26 = __nwlog_obj();
    *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
    *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
    char v15 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(v42) = 0;
    if (!__nwlog_fault(v15, buf, &v42)) {
      goto LABEL_32;
    }
    if (buf[0] == 17)
    {
      int v24 = __nwlog_obj();
      os_log_type_t v27 = buf[0];
      if (os_log_type_enabled(v24, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
        *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
        _os_log_impl(&dword_1830D4000, v24, v27, "%{public}s called with null remote_endpoint", &__dst[0].sa_len, 0xCu);
      }
      goto LABEL_83;
    }
    if (!(_BYTE)v42)
    {
      int v24 = __nwlog_obj();
      os_log_type_t v38 = buf[0];
      if (os_log_type_enabled(v24, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
        *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
        _os_log_impl(&dword_1830D4000, v24, v38, "%{public}s called with null remote_endpoint, backtrace limit exceeded", &__dst[0].sa_len, 0xCu);
      }
      goto LABEL_83;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v24 = __nwlog_obj();
    os_log_type_t v33 = buf[0];
    BOOL v34 = os_log_type_enabled(v24, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
        *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
        _os_log_impl(&dword_1830D4000, v24, v33, "%{public}s called with null remote_endpoint, no backtrace", &__dst[0].sa_len, 0xCu);
      }
      goto LABEL_83;
    }
    if (v34)
    {
      *(_DWORD *)&__dst[0].size_t sa_len = 136446466;
      *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
      *(_WORD *)&__dst[0].sa_data[10] = 2082;
      *(void *)&__dst[0].sa_data[12] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v24, v33, "%{public}s called with null remote_endpoint, dumping backtrace:%{public}s", &__dst[0].sa_len, 0x16u);
    }
    goto LABEL_65;
  }
  uint64_t v6 = v4;
  int v7 = [v6 type];

  if (v7 != 1)
  {
    int v28 = __nwlog_obj();
    *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
    *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
    char v15 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    LOBYTE(v42) = 0;
    if (!__nwlog_fault(v15, buf, &v42)) {
      goto LABEL_32;
    }
    if (buf[0] == 17)
    {
      int v24 = __nwlog_obj();
      os_log_type_t v29 = buf[0];
      if (os_log_type_enabled(v24, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
        *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
        _os_log_impl(&dword_1830D4000, v24, v29, "%{public}s called with null (nw_endpoint_get_type(remote_endpoint) == nw_endpoint_type_address)", &__dst[0].sa_len, 0xCu);
      }
LABEL_83:

      goto LABEL_32;
    }
    if (!(_BYTE)v42)
    {
      int v24 = __nwlog_obj();
      os_log_type_t v39 = buf[0];
      if (os_log_type_enabled(v24, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
        *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
        _os_log_impl(&dword_1830D4000, v24, v39, "%{public}s called with null (nw_endpoint_get_type(remote_endpoint) == nw_endpoint_type_address), backtrace limit exceeded", &__dst[0].sa_len, 0xCu);
      }
      goto LABEL_83;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    int v24 = __nwlog_obj();
    os_log_type_t v35 = buf[0];
    BOOL v36 = os_log_type_enabled(v24, (os_log_type_t)buf[0]);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)&__dst[0].size_t sa_len = 136446210;
        *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
        _os_log_impl(&dword_1830D4000, v24, v35, "%{public}s called with null (nw_endpoint_get_type(remote_endpoint) == nw_endpoint_type_address), no backtrace", &__dst[0].sa_len, 0xCu);
      }
      goto LABEL_83;
    }
    if (v36)
    {
      *(_DWORD *)&__dst[0].size_t sa_len = 136446466;
      *(void *)&__dst[0].sa_data[2] = "nw_interface_copy_local_address_for_remote_address";
      *(_WORD *)&__dst[0].sa_data[10] = 2082;
      *(void *)&__dst[0].sa_data[12] = backtrace_string;
      _os_log_impl(&dword_1830D4000, v24, v35, "%{public}s called with null (nw_endpoint_get_type(remote_endpoint) == nw_endpoint_type_address), dumping backtrace:%{public}s", &__dst[0].sa_len, 0x16u);
    }
LABEL_65:

    free(backtrace_string);
    goto LABEL_32;
  }
  int v42 = v3[2];
  memset(__dst, 0, sizeof(__dst));
  address = nw_endpoint_get_address(v6);
  if (address)
  {
    size_t sa_len = address->sa_len;
    if (((sa_len - 1) & 0x80) == 0) {
      memcpy(__dst, address, sa_len);
    }
  }
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
  }
  id v10 = (id)nw_context_copy_implicit_context::implicit_context;
  nw_path_shared_necp_fd(v10);

  if (necp_client_action())
  {
    int v11 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    os_log_type_t v12 = (id)gLogObj;
    char v13 = v12;
    if (v11 == 2)
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        __int16 v44 = "nw_interface_copy_local_address_for_remote_address";
        __int16 v45 = 1024;
        int v46 = 2;
        _os_log_impl(&dword_1830D4000, v13, OS_LOG_TYPE_DEBUG, "%{public}s NECP_CLIENT_ACTION_GET_INTERFACE_ADDRESS %{darwin.errno}d", buf, 0x12u);
      }

      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v44 = "nw_interface_copy_local_address_for_remote_address";
    __int16 v45 = 1024;
    int v46 = v11;
    char v15 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v40 = 0;
    if (__nwlog_fault(v15, &type, &v40))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v16 = (id)gLogObj;
        os_log_type_t v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446466;
          __int16 v44 = "nw_interface_copy_local_address_for_remote_address";
          __int16 v45 = 1024;
          int v46 = v11;
          _os_log_impl(&dword_1830D4000, v16, v17, "%{public}s NECP_CLIENT_ACTION_GET_INTERFACE_ADDRESS %{darwin.errno}d", buf, 0x12u);
        }
      }
      else if (v40)
      {
        __int16 v18 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v16 = (id)gLogObj;
        os_log_type_t v19 = type;
        BOOL v20 = os_log_type_enabled(v16, type);
        if (v18)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446722;
            __int16 v44 = "nw_interface_copy_local_address_for_remote_address";
            __int16 v45 = 1024;
            int v46 = v11;
            __int16 v47 = 2082;
            __int16 v48 = v18;
            _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s NECP_CLIENT_ACTION_GET_INTERFACE_ADDRESS %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v18);
          if (!v15) {
            goto LABEL_34;
          }
          goto LABEL_33;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          __int16 v44 = "nw_interface_copy_local_address_for_remote_address";
          __int16 v45 = 1024;
          int v46 = v11;
          _os_log_impl(&dword_1830D4000, v16, v19, "%{public}s NECP_CLIENT_ACTION_GET_INTERFACE_ADDRESS %{darwin.errno}d, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        os_log_type_t v16 = (id)gLogObj;
        os_log_type_t v21 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446466;
          __int16 v44 = "nw_interface_copy_local_address_for_remote_address";
          __int16 v45 = 1024;
          int v46 = v11;
          _os_log_impl(&dword_1830D4000, v16, v21, "%{public}s NECP_CLIENT_ACTION_GET_INTERFACE_ADDRESS %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
        }
      }
    }
LABEL_32:
    if (!v15)
    {
LABEL_34:
      nw_endpoint_t v14 = 0;
      goto LABEL_35;
    }
LABEL_33:
    free(v15);
    goto LABEL_34;
  }
  nw_endpoint_t v14 = nw_endpoint_create_address(__dst);
LABEL_35:

  return v14;
}

void sub_183D2D72C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t nw_interface_get_loopback_index()
{
  if (nw_interface_get_loopback_index::onceToken != -1) {
    dispatch_once(&nw_interface_get_loopback_index::onceToken, &__block_literal_global_89857);
  }
  return nw_interface_get_loopback_index::index;
}

const char *nw_interface_radio_type_to_string(int a1)
{
  int v1 = a1 - 1;
  uint64_t result = "802.11b";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "802.11a";
      break;
    case 2:
      uint64_t result = "802.11g";
      break;
    case 3:
      uint64_t result = "802.11n";
      break;
    case 4:
      uint64_t result = "802.11ac";
      break;
    case 5:
      uint64_t result = "802.11ax";
      break;
    case 127:
      uint64_t result = "lte";
      break;
    case 128:
      uint64_t result = "endc_sub6";
      break;
    case 129:
      uint64_t result = "endc_mmw";
      break;
    case 130:
      uint64_t result = "nr_sa_sub6";
      break;
    case 131:
      uint64_t result = "nr_sa_mmw";
      break;
    case 132:
      uint64_t result = "wcdma";
      break;
    case 133:
      uint64_t result = "gsm";
      break;
    case 134:
      uint64_t result = "cdma";
      break;
    case 135:
      uint64_t result = "evdo";
      break;
    default:
      uint64_t result = "";
      break;
  }
  return result;
}

uint64_t nw_interface_radio_type_from_string(const char *a1)
{
  if (!strncasecmp(a1, "802.11b", 8uLL)) {
    return 1;
  }
  if (!strncasecmp(a1, "802.11a", 8uLL)) {
    return 2;
  }
  if (!strncasecmp(a1, "802.11g", 8uLL)) {
    return 3;
  }
  if (!strncasecmp(a1, "802.11n", 8uLL)) {
    return 4;
  }
  if (!strncasecmp(a1, "802.11ac", 9uLL)) {
    return 5;
  }
  if (!strncasecmp(a1, "802.11ax", 9uLL)) {
    return 6;
  }
  if (!strncasecmp(a1, "lte", 4uLL)) {
    return 128;
  }
  if (!strncasecmp(a1, "endc_sub6", 0xAuLL)) {
    return 129;
  }
  if (!strncasecmp(a1, "endc_mmw", 9uLL)) {
    return 130;
  }
  if (!strncasecmp(a1, "nr_sa_sub6", 0xBuLL)) {
    return 131;
  }
  if (!strncasecmp(a1, "nr_sa_mmw", 0xAuLL)) {
    return 132;
  }
  if (!strncasecmp(a1, "wcdma", 6uLL)) {
    return 133;
  }
  if (!strncasecmp(a1, "gsm", 4uLL)) {
    return 134;
  }
  if (!strncasecmp(a1, "cdma", 5uLL)) {
    return 135;
  }
  if (!strncasecmp(a1, "evdo", 5uLL)) {
    return 136;
  }
  return 0;
}

void nw_interface_option_details_set_interface(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 1, a2);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "nw_interface_option_details_set_interface";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_option_details_set_interface";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null details", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "nw_interface_option_details_set_interface";
          __int16 v17 = 2082;
          __int16 v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null details, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_option_details_set_interface";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null details, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        os_log_type_t v16 = "nw_interface_option_details_set_interface";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null details, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

void nw_interface_option_details_set_nexus_agent(void *a1, _OWORD *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = v3;
  if (!v3)
  {
    uint64_t v5 = __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    int v22 = "nw_interface_option_details_set_nexus_agent";
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();

    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v19 = 0;
    if (!__nwlog_fault(v6, &type, &v19)) {
      goto LABEL_38;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v22 = "nw_interface_option_details_set_nexus_agent";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null details", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      BOOL v13 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          int v22 = "nw_interface_option_details_set_nexus_agent";
          __int16 v23 = 2082;
          int v24 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null details, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v6) {
          goto LABEL_4;
        }
LABEL_39:
        free(v6);
        goto LABEL_4;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        int v22 = "nw_interface_option_details_set_nexus_agent";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null details, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v17 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        int v22 = "nw_interface_option_details_set_nexus_agent";
        _os_log_impl(&dword_1830D4000, v7, v17, "%{public}s called with null details, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a2)
  {
    *((_OWORD *)v3 + 2) = *a2;
    goto LABEL_4;
  }
  os_log_type_t v9 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  int v22 = "nw_interface_option_details_set_nexus_agent";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v19 = 0;
  if (!__nwlog_fault(v6, &type, &v19)) {
    goto LABEL_38;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    int v7 = __nwlog_obj();
    os_log_type_t v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      int v22 = "nw_interface_option_details_set_nexus_agent";
      _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null nexus_agent", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v19)
  {
    int v7 = __nwlog_obj();
    os_log_type_t v18 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      int v22 = "nw_interface_option_details_set_nexus_agent";
      _os_log_impl(&dword_1830D4000, v7, v18, "%{public}s called with null nexus_agent, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  nw_endpoint_t v14 = (char *)__nw_create_backtrace_string();
  int v7 = __nwlog_obj();
  os_log_type_t v15 = type;
  BOOL v16 = os_log_type_enabled(v7, type);
  if (!v14)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      int v22 = "nw_interface_option_details_set_nexus_agent";
      _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null nexus_agent, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    int v22 = "nw_interface_option_details_set_nexus_agent";
    __int16 v23 = 2082;
    int v24 = v14;
    _os_log_impl(&dword_1830D4000, v7, v15, "%{public}s called with null nexus_agent, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v14);
  if (v6) {
    goto LABEL_39;
  }
LABEL_4:
}

uint64_t nw_interface_option_details_get_priority(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    char v3 = *((unsigned char *)v1 + 48);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_interface_option_details_get_priority";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_get_priority";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface_option_details", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_interface_option_details_get_priority";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface_option_details, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_get_priority";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface_option_details, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_get_priority";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface_option_details, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  char v3 = 0;
LABEL_3:

  return v3;
}

id nw_interface_option_details_copy_local_cid(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[7];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_interface_option_details_copy_local_cid";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_local_cid";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface_option_details", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_interface_option_details_copy_local_cid";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface_option_details, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_local_cid";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface_option_details, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_local_cid";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface_option_details, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void nw_interface_option_details_set_local_cid(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 7, a2);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_interface_option_details_set_local_cid";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_set_local_cid";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null details", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_interface_option_details_set_local_cid";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null details, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_set_local_cid";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null details, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_set_local_cid";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null details, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

id nw_interface_option_details_copy_remote_cid(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[8];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_interface_option_details_copy_remote_cid";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_remote_cid";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface_option_details", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_interface_option_details_copy_remote_cid";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface_option_details, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_remote_cid";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface_option_details, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_remote_cid";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface_option_details, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void nw_interface_option_details_set_remote_cid(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 8, a2);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_interface_option_details_set_remote_cid";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_set_remote_cid";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null details", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_interface_option_details_set_remote_cid";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null details, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_set_remote_cid";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null details, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_set_remote_cid";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null details, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

id nw_interface_option_details_copy_initial_data(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[9];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_interface_option_details_copy_initial_data";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_initial_data";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface_option_details", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_interface_option_details_copy_initial_data";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface_option_details, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_initial_data";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface_option_details, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_initial_data";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface_option_details, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_interface_option_details_get_sockfd(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1[20];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_interface_option_details_get_sockfd";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_get_sockfd";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null interface_option_details", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_interface_option_details_get_sockfd";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface_option_details, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_get_sockfd";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null interface_option_details, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_get_sockfd";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null interface_option_details, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  uint64_t v3 = 0xFFFFFFFFLL;
LABEL_3:

  return v3;
}

id nw_interface_option_details_copy_evaluator(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = v1[2];
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_interface_option_details_copy_evaluator";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_evaluator";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null details", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_interface_option_details_copy_evaluator";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null details, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_evaluator";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null details, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_copy_evaluator";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null details, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
  id v3 = 0;
LABEL_3:

  return v3;
}

void nw_interface_option_details_set_evaluator(void *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a1;
  id v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 2, a2);
    goto LABEL_3;
  }
  uint64_t v5 = __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  BOOL v16 = "nw_interface_option_details_set_evaluator";
  uint64_t v6 = (char *)_os_log_send_and_compose_impl();

  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      int v7 = __nwlog_obj();
      os_log_type_t v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_set_evaluator";
        _os_log_impl(&dword_1830D4000, v7, v8, "%{public}s called with null details", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      int v7 = __nwlog_obj();
      os_log_type_t v10 = type;
      BOOL v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          BOOL v16 = "nw_interface_option_details_set_evaluator";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null details, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_set_evaluator";
        _os_log_impl(&dword_1830D4000, v7, v10, "%{public}s called with null details, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      int v7 = __nwlog_obj();
      os_log_type_t v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        BOOL v16 = "nw_interface_option_details_set_evaluator";
        _os_log_impl(&dword_1830D4000, v7, v12, "%{public}s called with null details, backtrace limit exceeded", buf, 0xCu);
      }
    }
  }
LABEL_20:
  if (v6) {
    free(v6);
  }
LABEL_3:
}

uint64_t nw_settings_setup_atfork()
{
  return pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
}

void nw_settings_child_has_forked(void)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  sNWIsBetweenForkAndExec = 1;
  gHasForked = 1;
  gLogLock = 0;
  uint64_t v0 = MEMORY[0x1E4F14500];
  gLogObj = MEMORY[0x1E4F14500];
  gactivityLogObj = MEMORY[0x1E4F14500];
  gbrowserLogObj = MEMORY[0x1E4F14500];
  gcandidate_managerLogObj = MEMORY[0x1E4F14500];
  gconnectionLogObj = MEMORY[0x1E4F14500];
  gconnection_groupLogObj = MEMORY[0x1E4F14500];
  ghttpLogObj = MEMORY[0x1E4F14500];
  glistenerLogObj = MEMORY[0x1E4F14500];
  gmetricsLogObj = MEMORY[0x1E4F14500];
  gpathLogObj = MEMORY[0x1E4F14500];
  gtcpLogObj = MEMORY[0x1E4F14500];
  gprivacy_proxyLogObj = MEMORY[0x1E4F14500];
  gnetwork_testLogObj = MEMORY[0x1E4F14500];
  gmetricstreamLogObj = MEMORY[0x1E4F14500];
  gurlLogObj = MEMORY[0x1E4F14500];
  if (sNWDispatchAllowedNow == 1)
  {
    sNWDispatchAllowedNow = 0;
    sNWParentAllowedDispatch = 1;
  }
  pthread_mutexattr_init(&v3);
  pthread_mutexattr_settype(&v3, 2);
  pthread_mutex_init(&sSettingsMutex, &v3);
  if (nw_context_copy_implicit_context::onceToken != -1) {
    dispatch_once(&nw_context_copy_implicit_context::onceToken, &__block_literal_global_18);
  }
  id v1 = (id)nw_context_copy_implicit_context::implicit_context;
  BOOL globals_for_path = nw_context_get_globals_for_path(v1);

  nw_path_release_globals(globals_for_path, 1);
  cache_lock = 0;
  gMpklHasForked = 1;
  gMpklLogObj = v0;
  if (sCachedSettings)
  {
    xpc_release((xpc_object_t)sCachedSettings);
    sCachedSettings = 0;
  }
  sCachedHash = 0;
}

void sub_183D2FD98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void nw_settings_parent_has_forked(void)
{
  pthread_mutex_unlock(&sSettingsMutex);

  nw_path_parent_has_forked();
}

uint64_t nw_settings_prepare_fork(void)
{
  nw_path_prepare_fork();

  return pthread_mutex_lock(&sSettingsMutex);
}

uint64_t ___ZL45nw_settings_should_be_able_to_use_notify_apisv_block_invoke()
{
  getpid();
  uint64_t result = sandbox_check();
  if (result) {
    nw_settings_should_be_able_to_use_notify_apis(void)::has_notify_apis = 1;
  }
  return result;
}

xpc_object_t nw_settings_add_settings_from_bitmask(xpc_object_t xdict, uint64_t a2)
{
  v27[30] = *MEMORY[0x1E4F143B8];
  pthread_mutexattr_t v3 = (const char *)nw_setting_libnetcore_datapath_debug;
  v27[0] = 8;
  v27[1] = nw_setting_libnetcore_datapath_debug;
  v27[2] = 16;
  v27[3] = nw_setting_tcpconn_disable_simulate_crash;
  v27[4] = 32;
  v27[5] = nw_setting_boringssl_log_debug;
  v27[6] = 64;
  v27[7] = nw_setting_tcp_enable_auto_tfo;
  v27[8] = 128;
  v27[9] = nw_setting_disable_dns_xpc;
  v27[10] = 256;
  v27[11] = nw_setting_tcpconn_enable_tls_tickets;
  v27[12] = 512;
  v27[13] = nw_setting_channel_enable_qos_override;
  v27[14] = 1024;
  v27[15] = nw_setting_disable_ddr;
  v27[16] = 2048;
  v27[17] = nw_setting_tcpconn_enable_tls_esni;
  v27[18] = 4096;
  v27[19] = nw_setting_context_timer_disable_qos_override;
  v27[20] = 0x2000;
  v27[21] = nw_setting_tcpconn_enable_tls_experiments;
  v27[22] = 0x4000;
  v27[23] = nw_setting_tcpconn_enable_tls_keylog;
  v27[24] = 0x8000;
  v27[25] = nw_setting_disable_swift_tls_privacy_proxy;
  v27[26] = 0x10000;
  v27[28] = 0;
  v27[29] = 0;
  v27[27] = nw_setting_disable_l4s_aqm;
  if (!nw_setting_libnetcore_datapath_debug) {
    return xdict;
  }
  unsigned int v5 = 1;
  uint64_t v6 = v27;
  while (1)
  {
    if ((*v6 & ~a2) != 0)
    {
      if (xdict) {
        xpc_dictionary_set_value(xdict, v3, 0);
      }
      goto LABEL_5;
    }
    if (!xdict)
    {
      xdict = xpc_dictionary_create(0, 0, 0);
      if (!xdict) {
        break;
      }
    }
    xpc_dictionary_set_BOOL(xdict, v3, 1);
LABEL_5:
    uint64_t v6 = &v27[2 * v5];
    pthread_mutexattr_t v3 = (const char *)v6[1];
    ++v5;
    if (!v3) {
      return xdict;
    }
  }
  uint64_t v7 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init(v7);
  *(_DWORD *)buf = 136446210;
  int v24 = "nw_settings_add_settings_from_bitmask";
  os_log_type_t v8 = (char *)_os_log_send_and_compose_impl();
  os_log_type_t type = OS_LOG_TYPE_ERROR;
  char v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21)) {
    goto LABEL_23;
  }
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      uint64_t v14 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init(v14);
      os_log_type_t v15 = gLogObj;
      os_log_type_t v16 = type;
      BOOL v17 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          int v24 = "nw_settings_add_settings_from_bitmask";
          __int16 v25 = 2082;
          int v26 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v15, v16, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_23;
      }
      if (!v17) {
        goto LABEL_23;
      }
      *(_DWORD *)buf = 136446210;
      int v24 = "nw_settings_add_settings_from_bitmask";
      os_log_type_t v12 = "%{public}s xpc_dictionary_create failed, no backtrace";
      os_log_type_t v18 = v15;
      os_log_type_t v19 = v16;
    }
    else
    {
      os_log_type_t v10 = __nwlog_obj();
      os_log_type_t v11 = type;
      if (!os_log_type_enabled(v10, type)) {
        goto LABEL_23;
      }
      *(_DWORD *)buf = 136446210;
      int v24 = "nw_settings_add_settings_from_bitmask";
      os_log_type_t v12 = "%{public}s xpc_dictionary_create failed, backtrace limit exceeded";
LABEL_21:
      os_log_type_t v18 = v10;
      os_log_type_t v19 = v11;
    }
    _os_log_impl(&dword_1830D4000, v18, v19, v12, buf, 0xCu);
    goto LABEL_23;
  }
  uint64_t v9 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init(v9);
  os_log_type_t v10 = gLogObj;
  os_log_type_t v11 = type;
  if (os_log_type_enabled((os_log_t)gLogObj, type))
  {
    *(_DWORD *)buf = 136446210;
    int v24 = "nw_settings_add_settings_from_bitmask";
    os_log_type_t v12 = "%{public}s xpc_dictionary_create failed";
    goto LABEL_21;
  }
LABEL_23:
  if (v8) {
    free(v8);
  }
  return 0;
}

uint64_t ___ZL35networkd_settings_update_from_tokeni_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t ___ZL35networkd_settings_update_from_tokeni_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t ___ZL32networkd_settings_read_from_filev_block_invoke(int a1, char *__s1, void *a3)
{
  if (strcmp(__s1, (const char *)nw_settings_managed_settings)) {
    xpc_dictionary_set_value((xpc_object_t)sCachedSettings, __s1, a3);
  }
  return 1;
}

void ___ZL36networkd_settings_setup_notify_watchv_block_invoke(int a1, int a2)
{
}

int64_t networkd_settings_get_int64(const char *a1)
{
  networkd_settings_init();
  if (!sCachedSettings) {
    return 0;
  }
  pthread_mutex_lock(&sSettingsMutex);
  if (sCachedSettings) {
    int64_t int64 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, a1);
  }
  else {
    int64_t int64 = 0;
  }
  pthread_mutex_unlock(&sSettingsMutex);
  return int64;
}

BOOL networkd_settings_get_BOOL_with_default(const char *a1, BOOL a2)
{
  networkd_settings_init();
  if (sCachedSettings)
  {
    pthread_mutex_lock(&sSettingsMutex);
    uint64_t v4 = (void *)sCachedSettings;
    if (sCachedSettings)
    {
      Class Class = object_getClass((id)sCachedSettings);
      if (a1)
      {
        if (Class == (Class)MEMORY[0x1E4F14590])
        {
          xpc_object_t value = xpc_dictionary_get_value(v4, a1);
          if (value)
          {
            uint64_t v7 = value;
            if (object_getClass(value) == (Class)MEMORY[0x1E4F14570]) {
              a2 = xpc_BOOL_get_value(v7);
            }
          }
        }
      }
    }
    pthread_mutex_unlock(&sSettingsMutex);
  }
  return a2;
}

BOOL networkd_settings_copy_string(const char *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  networkd_settings_init();
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    os_log_type_t v16 = "networkd_settings_copy_string";
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    os_log_type_t type = OS_LOG_TYPE_ERROR;
    char v13 = 0;
    if (!__nwlog_fault(v7, &type, &v13)) {
      goto LABEL_24;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v16 = "networkd_settings_copy_string";
      os_log_type_t v10 = "%{public}s called with null name";
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      BOOL v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          os_log_type_t v16 = "networkd_settings_copy_string";
          __int16 v17 = 2082;
          os_log_type_t v18 = backtrace_string;
          _os_log_impl(&dword_1830D4000, v8, v9, "%{public}s called with null name, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_24;
      }
      if (!v12)
      {
LABEL_24:
        if (v7) {
          free(v7);
        }
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v16 = "networkd_settings_copy_string";
      os_log_type_t v10 = "%{public}s called with null name, no backtrace";
    }
    else
    {
      os_log_type_t v8 = __nwlog_obj();
      os_log_type_t v9 = type;
      if (!os_log_type_enabled(v8, type)) {
        goto LABEL_24;
      }
      *(_DWORD *)buf = 136446210;
      os_log_type_t v16 = "networkd_settings_copy_string";
      os_log_type_t v10 = "%{public}s called with null name, backtrace limit exceeded";
    }
    _os_log_impl(&dword_1830D4000, v8, v9, v10, buf, 0xCu);
    goto LABEL_24;
  }
  if (!sCachedSettings) {
    return 0;
  }
  pthread_mutex_lock(&sSettingsMutex);
  if (!sCachedSettings) {
    goto LABEL_8;
  }
  string = xpc_dictionary_get_string((xpc_object_t)sCachedSettings, a1);
  if (!string) {
    goto LABEL_8;
  }
  pthread_mutexattr_t v3 = strdup(string);
  if (v3)
  {
LABEL_9:
    pthread_mutex_unlock(&sSettingsMutex);
    return (BOOL)v3;
  }
  uint64_t v4 = __nwlog_obj();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  os_log_type_t v16 = "strict_strdup";
  unsigned int v5 = (void *)_os_log_send_and_compose_impl();
  BOOL result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_8:
    pthread_mutexattr_t v3 = 0;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t nw_is_dispatch_allowed()
{
  pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  if (sNWIsBetweenForkAndExec == 1 && (sNWParentAllowedDispatch & 1) != 0) {
    return 0;
  }
  if (sNWDispatchAllowedNow) {
    return 1;
  }
  if ((_dispatch_is_fork_of_multithreaded_parent() & 1) != 0 || (_dispatch_is_multithreaded() & 1) == 0)
  {
    getpid();
    if (sandbox_check() != 1) {
      return sNWDispatchAllowedNow;
    }
  }
  uint64_t result = 1;
  sNWDispatchAllowedNow = 1;
  return result;
}

uint64_t nw_settings_register_networkd_privileged()
{
  if ((gIsHelper & 1) == 0)
  {
    gIsHelper = 1;
    nw_allow_use_of_dispatch_internal();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    return networkd_settings_init();
  }
  return result;
}

uint64_t ___ZL24__nw_signpost_is_enabledv_block_invoke_90127()
{
  uint64_t v0 = (const char *)nw_setting_enable_signposts;
  uint64_t result = networkd_settings_init();
  if (!sCachedSettings)
  {
    BOOL v4 = 0;
    goto LABEL_10;
  }
  pthread_mutex_lock(&sSettingsMutex);
  uint64_t v2 = (void *)sCachedSettings;
  if (!sCachedSettings) {
    goto LABEL_7;
  }
  Class Class = object_getClass((id)sCachedSettings);
  BOOL v4 = 0;
  if (!v0 || Class != (Class)MEMORY[0x1E4F14590]) {
    goto LABEL_8;
  }
  xpc_object_t value = xpc_dictionary_get_value(v2, v0);
  if (value && (uint64_t v6 = value, object_getClass(value) == (Class)MEMORY[0x1E4F14570])) {
    BOOL v4 = xpc_BOOL_get_value(v6);
  }
  else {
LABEL_7:
  }
    BOOL v4 = 0;
LABEL_8:
  uint64_t result = pthread_mutex_unlock(&sSettingsMutex);
LABEL_10:
  _nw_signposts_enabled = v4;
  return result;
}

BOOL nw_settings_get_ddr_enabled()
{
  uint64_t v0 = (const char *)nw_setting_disable_ddr;
  networkd_settings_init();
  if (!sCachedSettings)
  {
    BOOL v3 = 0;
    return !v3;
  }
  pthread_mutex_lock(&sSettingsMutex);
  id v1 = (void *)sCachedSettings;
  if (!sCachedSettings) {
    goto LABEL_7;
  }
  Class Class = object_getClass((id)sCachedSettings);
  BOOL v3 = 0;
  if (!v0 || Class != (Class)MEMORY[0x1E4F14590]) {
    goto LABEL_8;
  }
  xpc_object_t value = xpc_dictionary_get_value(v1, v0);
  if (value && (unsigned int v5 = value, object_getClass(value) == (Class)MEMORY[0x1E4F14570])) {
    BOOL v3 = xpc_BOOL_get_value(v5);
  }
  else {
LABEL_7:
  }
    BOOL v3 = 0;
LABEL_8:
  pthread_mutex_unlock(&sSettingsMutex);
  return !v3;
}

BOOL nw_settings_networkscore_metrics_enabled()
{
  uint64_t v0 = (const char *)nw_setting_enable_networkscore_metrics;
  networkd_settings_init();
  if (!sCachedSettings) {
    return 0;
  }
  pthread_mutex_lock(&sSettingsMutex);
  id v1 = (void *)sCachedSettings;
  if (!sCachedSettings) {
    goto LABEL_7;
  }
  Class Class = object_getClass((id)sCachedSettings);
  BOOL v3 = 0;
  if (!v0 || Class != (Class)MEMORY[0x1E4F14590]) {
    goto LABEL_8;
  }
  xpc_object_t value = xpc_dictionary_get_value(v1, v0);
  if (value && (unsigned int v5 = value, object_getClass(value) == (Class)MEMORY[0x1E4F14570])) {
    BOOL v3 = xpc_BOOL_get_value(v5);
  }
  else {
LABEL_7:
  }
    BOOL v3 = 0;
LABEL_8:
  pthread_mutex_unlock(&sSettingsMutex);
  return v3;
}

void nw_settings_set_networkscore_sampling_rate_denominator(int64_t value)
{
  id v1 = (const char *)nw_setting_networkscore_sampling_rate_denominator;
  id v2 = xpc_int64_create(value);
  networkd_privileged_set_settings(v1, v2, 0);
}

void sub_183D30AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

int64_t nw_settings_get_networkscore_sampling_rate_denominator()
{
  uint64_t v0 = networkd_settings_copy_value_of_type((const char *)nw_setting_networkscore_sampling_rate_denominator, 0);
  id v1 = v0;
  if (v0 && object_getClass(v0) == (Class)MEMORY[0x1E4F145C0]) {
    int64_t value = xpc_int64_get_value(v1);
  }
  else {
    int64_t value = 0;
  }

  return value;
}

void sub_183D30B34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_4270()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_4271()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_4272()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_5568()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_5569()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_5570()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_6518()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_6519()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_6520()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_7188()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_7189()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_7190()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_7639()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_7640()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_7641()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_8173()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_8174()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_8175()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_8407()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_8408()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_8409()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_10758()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_10759()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_10760()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_10907()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_10908()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_10909()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_11153()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_11154()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_11155()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_13883()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_13884()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_13885()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_14484()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_14485()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_14486()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_14633()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_14634()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_14635()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_14913()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_14914()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_14915()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_15212()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_15213()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_15214()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_15812()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_15813()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_15814()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_16084()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_16085()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_16086()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_16432()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_16433()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_16434()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_16579()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_16580()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_16581()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_17468()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_17469()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_17470()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_18300()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_18301()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_18302()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_19217()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_19218()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_19219()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_22461()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_22462()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_22463()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_23124()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_23125()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_23126()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_23206()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_23207()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_23208()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_23413()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_23414()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_23415()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_24390()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_24391()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_24392()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_25896()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_25897()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_25898()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_25976()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_25977()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_25978()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_26861()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_26862()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_26863()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_27089()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_27090()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_27091()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_27234()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_27235()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_27236()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_28405()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_28406()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_28407()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_28682()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_28683()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_28684()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_29578()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_29579()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_29580()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_30548()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_30549()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_30550()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_30892()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_30893()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_30894()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_31730()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_31731()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_31732()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_31929()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_31930()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_31931()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_33102()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_33103()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_33104()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_33391()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_33392()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_33393()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_33648()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_33649()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_33650()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_33794()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_33795()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_33796()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_35269()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_35270()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_35271()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_35693()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_35694()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_35695()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_37100()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_37101()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_37102()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_37303()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_37304()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_37305()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_38898()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_38899()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_38900()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_40022()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_40023()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_40024()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_41543()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_41544()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_41545()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_41981()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_41982()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_41983()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_42063()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_42064()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_42065()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_42339()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_42340()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_42341()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_44233()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_44234()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_44235()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_44777()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_44778()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_44779()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_44955()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_44956()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_44957()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_46858()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_46859()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_46860()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_47785()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_47786()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_47787()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_49294()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_49295()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_49296()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_49660()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_49661()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_49662()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_50907()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_50908()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_50909()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_51216()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_51217()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_51218()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_52494()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_52495()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_52496()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_52638()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_52639()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_52640()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_53022()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_53023()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_53024()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_53783()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_53784()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_53785()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_55063()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_55064()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_55065()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_55948()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_55949()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_55950()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_57423()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_57424()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_57425()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_57947()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_57948()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_57949()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_58290()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_58291()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_58292()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_59381()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_59382()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_59383()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_60701()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_60702()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_60703()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_61038()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_61039()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_61040()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_61078()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_61079()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_61080()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_61268()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_61269()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_61270()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_63351()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_63352()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_63353()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_63482()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_63483()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_63484()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_63855()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_63856()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_63857()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_64014()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_64015()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_64016()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_64889()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_64890()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_64891()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_65020()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_65021()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_65022()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_66521()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_66522()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_66523()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_67309()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_67310()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_67311()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_68183()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_68184()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_68185()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_68855()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_68856()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_68857()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_71780()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_71781()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_71782()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_71936()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_71937()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_71938()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_72515()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_72516()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_72517()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_77343()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_77344()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_77345()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_77531()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_77532()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_77533()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_78560()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_78561()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_78562()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_79151()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_79152()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_79153()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_79606()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_79607()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_79608()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_80601()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_80602()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_80603()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_82220()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_82221()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_82222()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_83075()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_83076()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_83077()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_85288()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_85289()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_85290()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_85357()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_85358()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_85359()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_86056()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_86057()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_86058()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_86447()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_86448()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_86449()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_86837()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_86838()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_86839()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_86950()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_86951()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_86952()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_88183()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_88184()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_88185()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_89079()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_89080()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_89081()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_89373()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_89374()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_89375()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

void __cxx_global_var_init_89460()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267950, (uint64_t)nw::object::_description, 0);
    qword_1EB267950 = v0;
  }
}

void __cxx_global_var_init_2_89461()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__redacted_description_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267938, (uint64_t)nw::object::_redacted_description, 0);
    qword_1EB267938 = v0;
  }
}

void __cxx_global_var_init_4_89462()
{
  {
    {
      nw::object::_class(void)::instance = (uint64_t)"object";
      *(void *)algn_1EB267848 = 6;
      xmmword_1EB267850 = 0u;
      unk_1EB267860 = 0u;
      xmmword_1EB267870 = 0u;
      *(_OWORD *)&qword_1EB267880 = 0u;
      *(long long *)((char *)&xmmword_1EB267888 + 8) = 0u;
      *(_OWORD *)&qword_1EB2678A0 = 0u;
      xmmword_1EB2678B0 = 0u;
      unk_1EB2678C0 = 0u;
      qword_1EB2678D0 = (uint64_t)&qword_1EB2678D0;
      unk_1EB2678D8 = &qword_1EB2678D0;
      qword_1EB2678E0 = 0;
      dword_1EB2678E8 = 0;
    }
    nw::object::__destroy_def_instance = (uint64_t)nw::object::class_def::register_method_def(qword_1EB267920, (uint64_t)nw::object::_destroy, 0);
    qword_1EB267920 = v0;
  }
}

uint64_t sub_183D4423C()
{
  return MEMORY[0x1F40E3038]();
}

uint64_t sub_183D4424C()
{
  return MEMORY[0x1F40E3040]();
}

uint64_t sub_183D4425C()
{
  return MEMORY[0x1F40E3060]();
}

uint64_t sub_183D4426C()
{
  return MEMORY[0x1F40E3070]();
}

uint64_t sub_183D4427C()
{
  return MEMORY[0x1F40E3128]();
}

uint64_t sub_183D4428C()
{
  return MEMORY[0x1F40E3130]();
}

uint64_t sub_183D4429C()
{
  return MEMORY[0x1F40E3150]();
}

uint64_t sub_183D442AC()
{
  return MEMORY[0x1F40E3160]();
}

uint64_t sub_183D442BC()
{
  return MEMORY[0x1F40E31C8]();
}

uint64_t sub_183D442CC()
{
  return MEMORY[0x1F40E31D0]();
}

uint64_t sub_183D442DC()
{
  return MEMORY[0x1F40E3250]();
}

uint64_t sub_183D442EC()
{
  return MEMORY[0x1F40E35E8]();
}

uint64_t sub_183D442FC()
{
  return MEMORY[0x1F40E35F8]();
}

uint64_t sub_183D4430C()
{
  return MEMORY[0x1F40E3600]();
}

uint64_t sub_183D4431C()
{
  return MEMORY[0x1F40E3618]();
}

uint64_t sub_183D4432C()
{
  return MEMORY[0x1F40E37C0]();
}

uint64_t sub_183D4433C()
{
  return MEMORY[0x1F40E37D0]();
}

uint64_t sub_183D4434C()
{
  return MEMORY[0x1F40E37E0]();
}

uint64_t sub_183D4435C()
{
  return MEMORY[0x1F40E37F0]();
}

uint64_t sub_183D4436C()
{
  return MEMORY[0x1F40E3800]();
}

uint64_t sub_183D4437C()
{
  return MEMORY[0x1F40E3818]();
}

uint64_t sub_183D4438C()
{
  return MEMORY[0x1F40E3820]();
}

uint64_t sub_183D4439C()
{
  return MEMORY[0x1F40E3830]();
}

uint64_t sub_183D443AC()
{
  return MEMORY[0x1F40E3B70]();
}

uint64_t sub_183D443BC()
{
  return MEMORY[0x1F40E4540]();
}

uint64_t sub_183D443CC()
{
  return MEMORY[0x1F40E4550]();
}

uint64_t sub_183D443DC()
{
  return MEMORY[0x1F40E4558]();
}

uint64_t sub_183D443EC()
{
  return MEMORY[0x1F40E48A0]();
}

uint64_t sub_183D443FC()
{
  return MEMORY[0x1F40E48D8]();
}

uint64_t sub_183D4440C()
{
  return MEMORY[0x1F40E4970]();
}

uint64_t sub_183D4441C()
{
  return MEMORY[0x1F40E49A0]();
}

uint64_t sub_183D4442C()
{
  return MEMORY[0x1F40E4A50]();
}

uint64_t sub_183D4443C()
{
  return MEMORY[0x1F40E4A70]();
}

uint64_t sub_183D4444C()
{
  return MEMORY[0x1F40E4AC0]();
}

uint64_t sub_183D4445C()
{
  return MEMORY[0x1F40E4B20]();
}

uint64_t sub_183D4446C()
{
  return MEMORY[0x1F40E4B58]();
}

uint64_t sub_183D4447C()
{
  return MEMORY[0x1F40E4B80]();
}

uint64_t sub_183D4448C()
{
  return MEMORY[0x1F40E4BC8]();
}

uint64_t sub_183D4449C()
{
  return MEMORY[0x1F40E4BF0]();
}

uint64_t sub_183D444AC()
{
  return MEMORY[0x1F40E4C00]();
}

uint64_t sub_183D444BC()
{
  return MEMORY[0x1F40E4C30]();
}

uint64_t sub_183D444CC()
{
  return MEMORY[0x1F40E4C58]();
}

uint64_t sub_183D444DC()
{
  return MEMORY[0x1F40E4C80]();
}

uint64_t sub_183D444EC()
{
  return MEMORY[0x1F40E4CA8]();
}

uint64_t sub_183D444FC()
{
  return MEMORY[0x1F40E4CD0]();
}

uint64_t sub_183D4450C()
{
  return MEMORY[0x1F40E4CD8]();
}

uint64_t sub_183D4451C()
{
  return MEMORY[0x1F40E4D40]();
}

uint64_t sub_183D4452C()
{
  return MEMORY[0x1F40E4D48]();
}

uint64_t sub_183D4453C()
{
  return MEMORY[0x1F40E4DA8]();
}

uint64_t sub_183D4454C()
{
  return MEMORY[0x1F40E4DB8]();
}

uint64_t sub_183D4455C()
{
  return MEMORY[0x1F40E4E30]();
}

uint64_t sub_183D4456C()
{
  return MEMORY[0x1F40E4E60]();
}

uint64_t sub_183D4457C()
{
  return MEMORY[0x1F40E4EB8]();
}

uint64_t sub_183D4458C()
{
  return MEMORY[0x1F40E4EC8]();
}

uint64_t sub_183D4459C()
{
  return MEMORY[0x1F40E53A0]();
}

uint64_t sub_183D445AC()
{
  return MEMORY[0x1F40E53B0]();
}

uint64_t sub_183D445BC()
{
  return MEMORY[0x1F40E53E8]();
}

uint64_t sub_183D445CC()
{
  return MEMORY[0x1F40E5418]();
}

uint64_t sub_183D445DC()
{
  return MEMORY[0x1F40E5428]();
}

uint64_t sub_183D445EC()
{
  return MEMORY[0x1F40E5438]();
}

uint64_t sub_183D445FC()
{
  return MEMORY[0x1F40E5448]();
}

uint64_t sub_183D4460C()
{
  return MEMORY[0x1F40E5890]();
}

uint64_t sub_183D4461C()
{
  return MEMORY[0x1F4187308]();
}

uint64_t sub_183D4463C()
{
  return MEMORY[0x1F4187320]();
}

uint64_t sub_183D4464C()
{
  return MEMORY[0x1F4187350]();
}

uint64_t sub_183D4465C()
{
  return MEMORY[0x1F4187358]();
}

uint64_t sub_183D4466C()
{
  return MEMORY[0x1F4187360]();
}

uint64_t sub_183D4467C()
{
  return MEMORY[0x1F4187370]();
}

uint64_t sub_183D4468C()
{
  return MEMORY[0x1F4187378]();
}

uint64_t sub_183D4469C()
{
  return MEMORY[0x1F4127068]();
}

uint64_t sub_183D446AC()
{
  return MEMORY[0x1F4127070]();
}

uint64_t sub_183D446BC()
{
  return MEMORY[0x1F4127080]();
}

uint64_t sub_183D446CC()
{
  return MEMORY[0x1F4127108]();
}

uint64_t sub_183D446DC()
{
  return MEMORY[0x1F4127120]();
}

uint64_t sub_183D446EC()
{
  return MEMORY[0x1F4127130]();
}

uint64_t sub_183D446FC()
{
  return MEMORY[0x1F4127148]();
}

uint64_t sub_183D4470C()
{
  return MEMORY[0x1F4127158]();
}

uint64_t sub_183D4471C()
{
  return MEMORY[0x1F4127188]();
}

uint64_t sub_183D4472C()
{
  return MEMORY[0x1F41271B8]();
}

uint64_t sub_183D4473C()
{
  return MEMORY[0x1F41271C8]();
}

uint64_t sub_183D4474C()
{
  return MEMORY[0x1F41271F8]();
}

uint64_t sub_183D4475C()
{
  return MEMORY[0x1F4127238]();
}

uint64_t sub_183D4476C()
{
  return MEMORY[0x1F4127250]();
}

uint64_t sub_183D4477C()
{
  return MEMORY[0x1F4127288]();
}

uint64_t sub_183D4478C()
{
  return MEMORY[0x1F41272B0]();
}

uint64_t sub_183D4479C()
{
  return MEMORY[0x1F41272E8]();
}

uint64_t sub_183D447AC()
{
  return MEMORY[0x1F4127338]();
}

uint64_t sub_183D447BC()
{
  return MEMORY[0x1F4127350]();
}

uint64_t sub_183D447CC()
{
  return MEMORY[0x1F4127360]();
}

uint64_t sub_183D447DC()
{
  return MEMORY[0x1F4127370]();
}

uint64_t sub_183D447EC()
{
  return MEMORY[0x1F4127390]();
}

uint64_t sub_183D447FC()
{
  return MEMORY[0x1F4127420]();
}

uint64_t sub_183D4480C()
{
  return MEMORY[0x1F4127438]();
}

uint64_t sub_183D4481C()
{
  return MEMORY[0x1F4127450]();
}

uint64_t sub_183D4482C()
{
  return MEMORY[0x1F4127478]();
}

uint64_t sub_183D4483C()
{
  return MEMORY[0x1F4127480]();
}

uint64_t sub_183D4484C()
{
  return MEMORY[0x1F41274B0]();
}

uint64_t sub_183D4485C()
{
  return MEMORY[0x1F41274C0]();
}

uint64_t sub_183D4486C()
{
  return MEMORY[0x1F41274F0]();
}

uint64_t sub_183D4487C()
{
  return MEMORY[0x1F4127668]();
}

uint64_t sub_183D4488C()
{
  return MEMORY[0x1F4127670]();
}

uint64_t sub_183D4489C()
{
  return MEMORY[0x1F4127688]();
}

uint64_t sub_183D448AC()
{
  return MEMORY[0x1F4188568]();
}

uint64_t sub_183D448BC()
{
  return MEMORY[0x1F4188570]();
}

uint64_t sub_183D448CC()
{
  return MEMORY[0x1F4188578]();
}

uint64_t sub_183D448DC()
{
  return MEMORY[0x1F4188580]();
}

uint64_t sub_183D448EC()
{
  return MEMORY[0x1F4188590]();
}

uint64_t sub_183D448FC()
{
  return MEMORY[0x1F41885B0]();
}

uint64_t sub_183D4490C()
{
  return MEMORY[0x1F41885D0]();
}

uint64_t sub_183D4491C()
{
  return MEMORY[0x1F41885E0]();
}

uint64_t sub_183D4492C()
{
  return MEMORY[0x1F4188650]();
}

uint64_t sub_183D4493C()
{
  return MEMORY[0x1F4188658]();
}

uint64_t sub_183D4494C()
{
  return MEMORY[0x1F4188660]();
}

uint64_t sub_183D4495C()
{
  return MEMORY[0x1F4188668]();
}

uint64_t sub_183D4496C()
{
  return MEMORY[0x1F4188670]();
}

uint64_t sub_183D4497C()
{
  return MEMORY[0x1F4188680]();
}

uint64_t sub_183D4498C()
{
  return MEMORY[0x1F41886A0]();
}

uint64_t sub_183D4499C()
{
  return MEMORY[0x1F41886B0]();
}

uint64_t sub_183D449AC()
{
  return MEMORY[0x1F4188490]();
}

uint64_t sub_183D449BC()
{
  return MEMORY[0x1F41884A0]();
}

uint64_t sub_183D449CC()
{
  return MEMORY[0x1F4186CB0]();
}

uint64_t sub_183D449DC()
{
  return MEMORY[0x1F4186CF8]();
}

uint64_t sub_183D449EC()
{
  return MEMORY[0x1F4186D60]();
}

uint64_t sub_183D449FC()
{
  return MEMORY[0x1F4186D98]();
}

uint64_t sub_183D44A0C()
{
  return MEMORY[0x1F4186DA0]();
}

uint64_t sub_183D44A1C()
{
  return MEMORY[0x1F4186DF0]();
}

uint64_t sub_183D44A2C()
{
  return MEMORY[0x1F4183280]();
}

uint64_t sub_183D44A3C()
{
  return MEMORY[0x1F4187BE8]();
}

uint64_t sub_183D44A4C()
{
  return MEMORY[0x1F4183318]();
}

uint64_t sub_183D44A5C()
{
  return MEMORY[0x1F4183340]();
}

uint64_t sub_183D44A6C()
{
  return MEMORY[0x1F41835C0]();
}

uint64_t sub_183D44A7C()
{
  return MEMORY[0x1F41835C8]();
}

uint64_t sub_183D44A8C()
{
  return MEMORY[0x1F4183730]();
}

uint64_t sub_183D44A9C()
{
  return MEMORY[0x1F4183750]();
}

uint64_t sub_183D44AAC()
{
  return MEMORY[0x1F4183788]();
}

uint64_t sub_183D44ABC()
{
  return MEMORY[0x1F4183790]();
}

uint64_t sub_183D44ACC()
{
  return MEMORY[0x1F4183838]();
}

uint64_t sub_183D44ADC()
{
  return MEMORY[0x1F4183850]();
}

uint64_t sub_183D44AEC()
{
  return MEMORY[0x1F40E6190]();
}

uint64_t sub_183D44AFC()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t sub_183D44B0C()
{
  return MEMORY[0x1F40E61E8]();
}

uint64_t sub_183D44B1C()
{
  return MEMORY[0x1F40E61F8]();
}

uint64_t sub_183D44B2C()
{
  return MEMORY[0x1F40E6200]();
}

uint64_t sub_183D44B4C()
{
  return MEMORY[0x1F40E6268]();
}

uint64_t sub_183D44B5C()
{
  return MEMORY[0x1F40E6288]();
}

uint64_t sub_183D44B6C()
{
  return MEMORY[0x1F40E62A0]();
}

uint64_t sub_183D44B7C()
{
  return MEMORY[0x1F4183880]();
}

uint64_t sub_183D44B8C()
{
  return MEMORY[0x1F4183898]();
}

uint64_t sub_183D44B9C()
{
  return MEMORY[0x1F41838A0]();
}

uint64_t sub_183D44BAC()
{
  return MEMORY[0x1F41838B8]();
}

uint64_t sub_183D44BBC()
{
  return MEMORY[0x1F41838D8]();
}

uint64_t sub_183D44BDC()
{
  return MEMORY[0x1F41838F8]();
}

uint64_t sub_183D44BEC()
{
  return MEMORY[0x1F4183920]();
}

uint64_t sub_183D44BFC()
{
  return MEMORY[0x1F4183928]();
}

uint64_t sub_183D44C0C()
{
  return MEMORY[0x1F4183938]();
}

uint64_t sub_183D44C1C()
{
  return MEMORY[0x1F4183950]();
}

uint64_t sub_183D44C2C()
{
  return MEMORY[0x1F4183958]();
}

uint64_t sub_183D44C3C()
{
  return MEMORY[0x1F4183988]();
}

uint64_t sub_183D44C4C()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t sub_183D44C5C()
{
  return MEMORY[0x1F41839F0]();
}

uint64_t sub_183D44C6C()
{
  return MEMORY[0x1F41839F8]();
}

uint64_t sub_183D44C7C()
{
  return MEMORY[0x1F4183A08]();
}

uint64_t sub_183D44C8C()
{
  return MEMORY[0x1F4183A38]();
}

uint64_t sub_183D44C9C()
{
  return MEMORY[0x1F4183A60]();
}

uint64_t sub_183D44CAC()
{
  return MEMORY[0x1F4183A80]();
}

uint64_t sub_183D44CBC()
{
  return MEMORY[0x1F4183A88]();
}

uint64_t sub_183D44CCC()
{
  return MEMORY[0x1F4183A90]();
}

uint64_t sub_183D44CDC()
{
  return MEMORY[0x1F4183AA0]();
}

uint64_t sub_183D44CEC()
{
  return MEMORY[0x1F4183AA8]();
}

uint64_t sub_183D44CFC()
{
  return MEMORY[0x1F4183AB0]();
}

uint64_t sub_183D44D0C()
{
  return MEMORY[0x1F4183B10]();
}

uint64_t sub_183D44D1C()
{
  return MEMORY[0x1F4183B30]();
}

uint64_t sub_183D44D2C()
{
  return MEMORY[0x1F4183B58]();
}

uint64_t sub_183D44D3C()
{
  return MEMORY[0x1F4183B90]();
}

uint64_t sub_183D44D4C()
{
  return MEMORY[0x1F4183BA0]();
}

uint64_t sub_183D44D5C()
{
  return MEMORY[0x1F4183BA8]();
}

uint64_t sub_183D44D6C()
{
  return MEMORY[0x1F4183BC0]();
}

uint64_t sub_183D44D7C()
{
  return MEMORY[0x1F4183BD0]();
}

uint64_t sub_183D44D8C()
{
  return MEMORY[0x1F4183BE0]();
}

uint64_t sub_183D44D9C()
{
  return MEMORY[0x1F4183BF8]();
}

uint64_t sub_183D44DAC()
{
  return MEMORY[0x1F4183C18]();
}

uint64_t sub_183D44DBC()
{
  return MEMORY[0x1F4183C38]();
}

uint64_t sub_183D44DCC()
{
  return MEMORY[0x1F4183C80]();
}

uint64_t sub_183D44DDC()
{
  return MEMORY[0x1F4183CF0]();
}

uint64_t sub_183D44DEC()
{
  return MEMORY[0x1F4183D08]();
}

uint64_t sub_183D44DFC()
{
  return MEMORY[0x1F4183D40]();
}

uint64_t sub_183D44E0C()
{
  return MEMORY[0x1F4183DD8]();
}

uint64_t sub_183D44E1C()
{
  return MEMORY[0x1F4183E50]();
}

uint64_t sub_183D44E2C()
{
  return MEMORY[0x1F4183E80]();
}

uint64_t sub_183D44E3C()
{
  return MEMORY[0x1F40E6338]();
}

uint64_t sub_183D44E4C()
{
  return MEMORY[0x1F40E6370]();
}

uint64_t sub_183D44E5C()
{
  return MEMORY[0x1F4183E90]();
}

uint64_t sub_183D44E6C()
{
  return MEMORY[0x1F4183E98]();
}

uint64_t sub_183D44E7C()
{
  return MEMORY[0x1F4183EA8]();
}

uint64_t sub_183D44E8C()
{
  return MEMORY[0x1F4183EB0]();
}

uint64_t sub_183D44E9C()
{
  return MEMORY[0x1F4183EC8]();
}

uint64_t sub_183D44EAC()
{
  return MEMORY[0x1F4183EF0]();
}

uint64_t sub_183D44EBC()
{
  return MEMORY[0x1F4183F08]();
}

uint64_t sub_183D44ECC()
{
  return MEMORY[0x1F4183F18]();
}

uint64_t sub_183D44EDC()
{
  return MEMORY[0x1F4183F38]();
}

uint64_t sub_183D44EEC()
{
  return MEMORY[0x1F4183F60]();
}

uint64_t sub_183D44EFC()
{
  return MEMORY[0x1F4183F78]();
}

uint64_t sub_183D44F0C()
{
  return MEMORY[0x1F4183FA8]();
}

uint64_t sub_183D44F1C()
{
  return MEMORY[0x1F4183FF0]();
}

uint64_t sub_183D44F2C()
{
  return MEMORY[0x1F4187BF0]();
}

uint64_t sub_183D44F3C()
{
  return MEMORY[0x1F4187C00]();
}

uint64_t sub_183D44F4C()
{
  return MEMORY[0x1F4187C08]();
}

uint64_t sub_183D44F5C()
{
  return MEMORY[0x1F4187C10]();
}

uint64_t sub_183D44F6C()
{
  return MEMORY[0x1F4187C18]();
}

uint64_t sub_183D44F9C()
{
  return MEMORY[0x1F4187CF8]();
}

uint64_t sub_183D44FAC()
{
  return MEMORY[0x1F4187D00]();
}

uint64_t sub_183D44FBC()
{
  return MEMORY[0x1F4187D10]();
}

uint64_t sub_183D44FCC()
{
  return MEMORY[0x1F4187D18]();
}

uint64_t sub_183D44FDC()
{
  return MEMORY[0x1F4187D20]();
}

uint64_t sub_183D44FEC()
{
  return MEMORY[0x1F4187D38]();
}

uint64_t sub_183D44FFC()
{
  return MEMORY[0x1F4187D40]();
}

uint64_t sub_183D4500C()
{
  return MEMORY[0x1F4187D48]();
}

uint64_t sub_183D4501C()
{
  return MEMORY[0x1F4187D50]();
}

uint64_t sub_183D4503C()
{
  return MEMORY[0x1F4187D68]();
}

uint64_t sub_183D4504C()
{
  return MEMORY[0x1F4187D70]();
}

uint64_t sub_183D4505C()
{
  return MEMORY[0x1F4187D78]();
}

uint64_t sub_183D4506C()
{
  return MEMORY[0x1F4187D98]();
}

uint64_t sub_183D4507C()
{
  return MEMORY[0x1F4187DC8]();
}

uint64_t sub_183D4508C()
{
  return MEMORY[0x1F4187DD8]();
}

uint64_t sub_183D4509C()
{
  return MEMORY[0x1F4187E68]();
}

uint64_t sub_183D450AC()
{
  return MEMORY[0x1F4187E70]();
}

uint64_t sub_183D450BC()
{
  return MEMORY[0x1F4187E98]();
}

uint64_t sub_183D450CC()
{
  return MEMORY[0x1F4187EA0]();
}

uint64_t sub_183D450DC()
{
  return MEMORY[0x1F4187EA8]();
}

uint64_t sub_183D450EC()
{
  return MEMORY[0x1F4187EB0]();
}

uint64_t sub_183D450FC()
{
  return MEMORY[0x1F4187EB8]();
}

uint64_t sub_183D4510C()
{
  return MEMORY[0x1F4187EC0]();
}

uint64_t sub_183D4511C()
{
  return MEMORY[0x1F4187EC8]();
}

uint64_t sub_183D4512C()
{
  return MEMORY[0x1F4187ED0]();
}

uint64_t sub_183D4515C()
{
  return MEMORY[0x1F4187EF8]();
}

uint64_t sub_183D4516C()
{
  return MEMORY[0x1F4187F00]();
}

uint64_t sub_183D4517C()
{
  return MEMORY[0x1F4184090]();
}

uint64_t sub_183D4518C()
{
  return MEMORY[0x1F4184240]();
}

uint64_t sub_183D4519C()
{
  return MEMORY[0x1F4184248]();
}

uint64_t sub_183D451AC()
{
  return MEMORY[0x1F41842A0]();
}

uint64_t sub_183D451BC()
{
  return MEMORY[0x1F41842B0]();
}

uint64_t sub_183D451FC()
{
  return MEMORY[0x1F4188440]();
}

uint64_t sub_183D4521C()
{
  return MEMORY[0x1F4184390]();
}

uint64_t sub_183D4522C()
{
  return MEMORY[0x1F41843D0]();
}

uint64_t sub_183D4523C()
{
  return MEMORY[0x1F4184430]();
}

uint64_t sub_183D4527C()
{
  return MEMORY[0x1F41845B0]();
}

uint64_t sub_183D4528C()
{
  return MEMORY[0x1F41886D0]();
}

uint64_t sub_183D4529C()
{
  return MEMORY[0x1F41886E0]();
}

uint64_t sub_183D452AC()
{
  return MEMORY[0x1F41886E8]();
}

uint64_t sub_183D452BC()
{
  return MEMORY[0x1F4188700]();
}

uint64_t sub_183D452CC()
{
  return MEMORY[0x1F40E66C8]();
}

uint64_t sub_183D452DC()
{
  return MEMORY[0x1F4186FD8]();
}

uint64_t sub_183D452EC()
{
  return MEMORY[0x1F41870A0]();
}

uint64_t sub_183D452FC()
{
  return MEMORY[0x1F41870B8]();
}

uint64_t sub_183D4530C()
{
  return MEMORY[0x1F41870E0]();
}

uint64_t sub_183D4531C()
{
  return MEMORY[0x1F4187100]();
}

uint64_t sub_183D4532C()
{
  return MEMORY[0x1F4188708]();
}

uint64_t sub_183D4533C()
{
  return MEMORY[0x1F4188710]();
}

uint64_t sub_183D4534C()
{
  return MEMORY[0x1F4188718]();
}

uint64_t sub_183D4535C()
{
  return MEMORY[0x1F4188720]();
}

uint64_t sub_183D4536C()
{
  return MEMORY[0x1F4184640]();
}

uint64_t sub_183D4537C()
{
  return MEMORY[0x1F4184768]();
}

uint64_t sub_183D4538C()
{
  return MEMORY[0x1F4184788]();
}

uint64_t sub_183D4539C()
{
  return MEMORY[0x1F41847A0]();
}

uint64_t sub_183D453AC()
{
  return MEMORY[0x1F41847C0]();
}

uint64_t sub_183D453BC()
{
  return MEMORY[0x1F4184820]();
}

uint64_t sub_183D453CC()
{
  return MEMORY[0x1F40E6D38]();
}

uint64_t sub_183D453DC()
{
  return MEMORY[0x1F4184978]();
}

uint64_t sub_183D453FC()
{
  return MEMORY[0x1F4184B18]();
}

uint64_t sub_183D4540C()
{
  return MEMORY[0x1F4184B20]();
}

uint64_t sub_183D4541C()
{
  return MEMORY[0x1F4184B28]();
}

uint64_t sub_183D4542C()
{
  return MEMORY[0x1F4184C90]();
}

uint64_t sub_183D4543C()
{
  return MEMORY[0x1F4184C98]();
}

uint64_t sub_183D4544C()
{
  return MEMORY[0x1F4184CC0]();
}

uint64_t sub_183D4546C()
{
  return MEMORY[0x1F4184CE0]();
}

uint64_t sub_183D4547C()
{
  return MEMORY[0x1F4184CE8]();
}

uint64_t sub_183D4548C()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t sub_183D4549C()
{
  return MEMORY[0x1F4184CF8]();
}

uint64_t sub_183D454AC()
{
  return MEMORY[0x1F4184D08]();
}

uint64_t sub_183D454BC()
{
  return MEMORY[0x1F4184D18]();
}

uint64_t sub_183D454CC()
{
  return MEMORY[0x1F4184D78]();
}

uint64_t sub_183D454DC()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t sub_183D454EC()
{
  return MEMORY[0x1F4184D88]();
}

uint64_t sub_183D454FC()
{
  return MEMORY[0x1F4184D98]();
}

uint64_t sub_183D4550C()
{
  return MEMORY[0x1F4184DB0]();
}

uint64_t sub_183D4551C()
{
  return MEMORY[0x1F4184DB8]();
}

uint64_t sub_183D4552C()
{
  return MEMORY[0x1F4184DC0]();
}

uint64_t sub_183D4553C()
{
  return MEMORY[0x1F4184DD0]();
}

uint64_t sub_183D4554C()
{
  return MEMORY[0x1F4184DF0]();
}

uint64_t sub_183D4555C()
{
  return MEMORY[0x1F4184DF8]();
}

uint64_t sub_183D4556C()
{
  return MEMORY[0x1F4184E18]();
}

uint64_t sub_183D4557C()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t sub_183D4558C()
{
  return MEMORY[0x1F4184EC8]();
}

uint64_t sub_183D4559C()
{
  return MEMORY[0x1F4184ED8]();
}

uint64_t sub_183D455AC()
{
  return MEMORY[0x1F4184EF0]();
}

uint64_t sub_183D455BC()
{
  return MEMORY[0x1F4184F28]();
}

uint64_t sub_183D455CC()
{
  return MEMORY[0x1F4184F30]();
}

uint64_t sub_183D455DC()
{
  return MEMORY[0x1F4184F78]();
}

uint64_t sub_183D455EC()
{
  return MEMORY[0x1F4187F38]();
}

uint64_t sub_183D455FC()
{
  return MEMORY[0x1F4187F68]();
}

uint64_t sub_183D4560C()
{
  return MEMORY[0x1F4187F70]();
}

uint64_t sub_183D4561C()
{
  return MEMORY[0x1F4187F78]();
}

uint64_t sub_183D4562C()
{
  return MEMORY[0x1F4187F80]();
}

uint64_t sub_183D4563C()
{
  return MEMORY[0x1F4184F98]();
}

uint64_t sub_183D4564C()
{
  return MEMORY[0x1F4184FC0]();
}

uint64_t sub_183D4565C()
{
  return MEMORY[0x1F4185008]();
}

uint64_t sub_183D4566C()
{
  return MEMORY[0x1F4185050]();
}

uint64_t sub_183D4567C()
{
  return MEMORY[0x1F41850A0]();
}

uint64_t sub_183D4568C()
{
  return MEMORY[0x1F4187380]();
}

uint64_t sub_183D4569C()
{
  return MEMORY[0x1F41850B0]();
}

uint64_t sub_183D456AC()
{
  return MEMORY[0x1F41850C0]();
}

uint64_t sub_183D456BC()
{
  return MEMORY[0x1F4185298]();
}

uint64_t sub_183D456CC()
{
  return MEMORY[0x1F41852A0]();
}

uint64_t sub_183D456DC()
{
  return MEMORY[0x1F4185350]();
}

uint64_t sub_183D456EC()
{
  return MEMORY[0x1F4185368]();
}

uint64_t sub_183D456FC()
{
  return MEMORY[0x1F4185370]();
}

uint64_t sub_183D4570C()
{
  return MEMORY[0x1F4185380]();
}

uint64_t sub_183D4571C()
{
  return MEMORY[0x1F4185398]();
}

uint64_t sub_183D4572C()
{
  return MEMORY[0x1F41853B0]();
}

uint64_t sub_183D4573C()
{
  return MEMORY[0x1F41853B8]();
}

uint64_t sub_183D4574C()
{
  return MEMORY[0x1F4185410]();
}

uint64_t sub_183D4575C()
{
  return MEMORY[0x1F41854C8]();
}

uint64_t sub_183D4576C()
{
  return MEMORY[0x1F41854D8]();
}

uint64_t sub_183D4577C()
{
  return MEMORY[0x1F41854E0]();
}

uint64_t sub_183D4578C()
{
  return MEMORY[0x1F4185518]();
}

uint64_t sub_183D4579C()
{
  return MEMORY[0x1F4185528]();
}

uint64_t sub_183D457AC()
{
  return MEMORY[0x1F4185548]();
}

uint64_t sub_183D457BC()
{
  return MEMORY[0x1F4185568]();
}

uint64_t sub_183D457CC()
{
  return MEMORY[0x1F4185588]();
}

uint64_t sub_183D457DC()
{
  return MEMORY[0x1F4185598]();
}

uint64_t sub_183D457EC()
{
  return MEMORY[0x1F41855B8]();
}

uint64_t sub_183D457FC()
{
  return MEMORY[0x1F41855E0]();
}

uint64_t sub_183D4580C()
{
  return MEMORY[0x1F41855F8]();
}

uint64_t sub_183D4581C()
{
  return MEMORY[0x1F4185608]();
}

uint64_t sub_183D4582C()
{
  return MEMORY[0x1F4185648]();
}

uint64_t sub_183D4583C()
{
  return MEMORY[0x1F4185658]();
}

uint64_t sub_183D4584C()
{
  return MEMORY[0x1F4185690]();
}

uint64_t sub_183D4585C()
{
  return MEMORY[0x1F41856B0]();
}

uint64_t sub_183D4586C()
{
  return MEMORY[0x1F41856C0]();
}

uint64_t sub_183D4587C()
{
  return MEMORY[0x1F41856E0]();
}

uint64_t sub_183D4588C()
{
  return MEMORY[0x1F41856E8]();
}

uint64_t sub_183D4589C()
{
  return MEMORY[0x1F4185758]();
}

uint64_t sub_183D458AC()
{
  return MEMORY[0x1F41857B8]();
}

uint64_t sub_183D458BC()
{
  return MEMORY[0x1F41857F0]();
}

uint64_t sub_183D458CC()
{
  return MEMORY[0x1F4185818]();
}

uint64_t sub_183D458DC()
{
  return MEMORY[0x1F4185898]();
}

uint64_t sub_183D458EC()
{
  return MEMORY[0x1F41858D8]();
}

uint64_t sub_183D458FC()
{
  return MEMORY[0x1F41859A8]();
}

uint64_t sub_183D4590C()
{
  return MEMORY[0x1F41859E8]();
}

uint64_t sub_183D4591C()
{
  return MEMORY[0x1F4185A30]();
}

uint64_t sub_183D4592C()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t sub_183D4594C()
{
  return MEMORY[0x1F4185A58]();
}

uint64_t sub_183D4595C()
{
  return MEMORY[0x1F4185AF0]();
}

uint64_t sub_183D4596C()
{
  return MEMORY[0x1F4185BE8]();
}

uint64_t sub_183D4597C()
{
  return MEMORY[0x1F4185BF0]();
}

uint64_t sub_183D4598C()
{
  return MEMORY[0x1F4185BF8]();
}

uint64_t sub_183D4599C()
{
  return MEMORY[0x1F4185C00]();
}

uint64_t sub_183D459AC()
{
  return MEMORY[0x1F4185C08]();
}

uint64_t sub_183D459BC()
{
  return MEMORY[0x1F4185C10]();
}

uint64_t sub_183D459CC()
{
  return MEMORY[0x1F4185C18]();
}

uint64_t sub_183D459DC()
{
  return MEMORY[0x1F4185C20]();
}

uint64_t sub_183D459EC()
{
  return MEMORY[0x1F4185C28]();
}

uint64_t sub_183D459FC()
{
  return MEMORY[0x1F4185C30]();
}

uint64_t sub_183D45A1C()
{
  return MEMORY[0x1F4185D38]();
}

uint64_t sub_183D45A2C()
{
  return MEMORY[0x1F4185D68]();
}

uint64_t sub_183D45A3C()
{
  return MEMORY[0x1F4185DD8]();
}

uint64_t sub_183D45A4C()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t sub_183D45A5C()
{
  return MEMORY[0x1F4188170]();
}

uint64_t sub_183D45A9C()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t sub_183D45AAC()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t sub_183D45ABC()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t sub_183D45ACC()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t sub_183D45ADC()
{
  return MEMORY[0x1F4185E90]();
}

uint64_t sub_183D45AEC()
{
  return MEMORY[0x1F4185EA8]();
}

uint64_t sub_183D45AFC()
{
  return MEMORY[0x1F4185EB0]();
}

uint64_t sub_183D45B0C()
{
  return MEMORY[0x1F4185EC8]();
}

uint64_t sub_183D45B1C()
{
  return MEMORY[0x1F4185ED0]();
}

uint64_t sub_183D45B2C()
{
  return MEMORY[0x1F4185ED8]();
}

uint64_t sub_183D45B3C()
{
  return MEMORY[0x1F4185EE0]();
}

uint64_t sub_183D45B4C()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t sub_183D45B5C()
{
  return MEMORY[0x1F4185F10]();
}

uint64_t sub_183D45B6C()
{
  return MEMORY[0x1F4185F40]();
}

uint64_t sub_183D45B7C()
{
  return MEMORY[0x1F4185F48]();
}

uint64_t sub_183D45B8C()
{
  return MEMORY[0x1F4185F68]();
}

uint64_t sub_183D45B9C()
{
  return MEMORY[0x1F4185FB0]();
}

uint64_t sub_183D45BAC()
{
  return MEMORY[0x1F4185FB8]();
}

uint64_t sub_183D45BBC()
{
  return MEMORY[0x1F4185FC0]();
}

uint64_t sub_183D45BCC()
{
  return MEMORY[0x1F4185FC8]();
}

uint64_t sub_183D45BDC()
{
  return MEMORY[0x1F4185FD8]();
}

uint64_t sub_183D45BEC()
{
  return MEMORY[0x1F4185FE0]();
}

uint64_t sub_183D45BFC()
{
  return MEMORY[0x1F4185FE8]();
}

uint64_t sub_183D45C0C()
{
  return MEMORY[0x1F4185FF0]();
}

uint64_t sub_183D45C1C()
{
  return MEMORY[0x1F4186130]();
}

uint64_t sub_183D45C2C()
{
  return MEMORY[0x1F4186288]();
}

uint64_t sub_183D45C5C()
{
  return MEMORY[0x1F4188198]();
}

uint64_t sub_183D45C6C()
{
  return MEMORY[0x1F41881A8]();
}

uint64_t sub_183D45C8C()
{
  return MEMORY[0x1F4186318]();
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9730](data, *(void *)&len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9778](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9780](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9788](c, data, *(void *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D7160](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7178](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7198](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D71C8](theArray, range.location, range.length, value);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1F40D7568](bundle);
}

CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7578](bundle);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x1F40D7598]();
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1F40D75D0](bundle, key);
}

void CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString)
{
}

CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1F40D7720](alloc, theSet);
}

void CFCharacterSetRemoveCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x1F40D7A98](allocator, domain, code, userInfo);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1F40D7AA8](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x1F40D7AB8](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

Boolean CFHTTPAuthenticationAppliesToRequest(CFHTTPAuthenticationRef auth, CFHTTPMessageRef request)
{
  return MEMORY[0x1F40D51F0](auth, request);
}

CFHTTPAuthenticationRef CFHTTPAuthenticationCreateFromResponse(CFAllocatorRef alloc, CFHTTPMessageRef response)
{
  return (CFHTTPAuthenticationRef)MEMORY[0x1F40D5208](alloc, response);
}

Boolean CFHTTPAuthenticationIsValid(CFHTTPAuthenticationRef auth, CFStreamError *error)
{
  return MEMORY[0x1F40D5210](auth, error);
}

Boolean CFHTTPMessageAppendBytes(CFHTTPMessageRef message, const UInt8 *newBytes, CFIndex numBytes)
{
  return MEMORY[0x1F40D5278](message, newBytes, numBytes);
}

Boolean CFHTTPMessageApplyCredentials(CFHTTPMessageRef request, CFHTTPAuthenticationRef auth, CFStringRef username, CFStringRef password, CFStreamError *error)
{
  return MEMORY[0x1F40D5280](request, auth, username, password, error);
}

CFDictionaryRef CFHTTPMessageCopyAllHeaderFields(CFHTTPMessageRef message)
{
  return (CFDictionaryRef)MEMORY[0x1F40D5288](message);
}

CFDataRef CFHTTPMessageCopyBody(CFHTTPMessageRef message)
{
  return (CFDataRef)MEMORY[0x1F40D5290](message);
}

CFStringRef CFHTTPMessageCopyHeaderFieldValue(CFHTTPMessageRef message, CFStringRef headerField)
{
  return (CFStringRef)MEMORY[0x1F40D5298](message, headerField);
}

CFURLRef CFHTTPMessageCopyRequestURL(CFHTTPMessageRef request)
{
  return (CFURLRef)MEMORY[0x1F40D52A8](request);
}

CFStringRef CFHTTPMessageCopyResponseStatusLine(CFHTTPMessageRef response)
{
  return (CFStringRef)MEMORY[0x1F40D52B0](response);
}

CFDataRef CFHTTPMessageCopySerializedMessage(CFHTTPMessageRef message)
{
  return (CFDataRef)MEMORY[0x1F40D52B8](message);
}

CFStringRef CFHTTPMessageCopyVersion(CFHTTPMessageRef message)
{
  return (CFStringRef)MEMORY[0x1F40D52C0](message);
}

CFHTTPMessageRef CFHTTPMessageCreateCopy(CFAllocatorRef alloc, CFHTTPMessageRef message)
{
  return (CFHTTPMessageRef)MEMORY[0x1F40D52C8](alloc, message);
}

CFHTTPMessageRef CFHTTPMessageCreateEmpty(CFAllocatorRef alloc, Boolean isRequest)
{
  return (CFHTTPMessageRef)MEMORY[0x1F40D52D0](alloc, isRequest);
}

CFHTTPMessageRef CFHTTPMessageCreateRequest(CFAllocatorRef alloc, CFStringRef requestMethod, CFURLRef url, CFStringRef httpVersion)
{
  return (CFHTTPMessageRef)MEMORY[0x1F40D52D8](alloc, requestMethod, url, httpVersion);
}

CFHTTPMessageRef CFHTTPMessageCreateResponse(CFAllocatorRef alloc, CFIndex statusCode, CFStringRef statusDescription, CFStringRef httpVersion)
{
  return (CFHTTPMessageRef)MEMORY[0x1F40D52E0](alloc, statusCode, statusDescription, httpVersion);
}

CFIndex CFHTTPMessageGetResponseStatusCode(CFHTTPMessageRef response)
{
  return MEMORY[0x1F40D52E8](response);
}

Boolean CFHTTPMessageIsHeaderComplete(CFHTTPMessageRef message)
{
  return MEMORY[0x1F40D52F8](message);
}

void CFHTTPMessageSetHeaderFieldValue(CFHTTPMessageRef message, CFStringRef headerField, CFStringRef value)
{
}

CFRunLoopSourceRef CFNetworkExecuteProxyAutoConfigurationScript(CFStringRef proxyAutoConfigurationScript, CFURLRef targetURL, CFProxyAutoConfigurationResultCallback cb, CFStreamClientContext *clientContext)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40D5370](proxyAutoConfigurationScript, targetURL, cb, clientContext);
}

CFRunLoopSourceRef CFNetworkExecuteProxyAutoConfigurationURL(CFURLRef proxyAutoConfigURL, CFURLRef targetURL, CFProxyAutoConfigurationResultCallback cb, CFStreamClientContext *clientContext)
{
  return (CFRunLoopSourceRef)MEMORY[0x1F40D5378](proxyAutoConfigURL, targetURL, cb, clientContext);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE0](key, applicationID, keyExistsAndHasValidFormat);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40D7F18](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F50](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B0]();
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
}

void CFRunLoopSourceInvalidate(CFRunLoopSourceRef source)
{
}

CFRunLoopTimerRef CFRunLoopTimerCreate(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, CFRunLoopTimerCallBack callout, CFRunLoopTimerContext *context)
{
  return (CFRunLoopTimerRef)MEMORY[0x1F40D8180](allocator, flags, order, callout, context, fireDate, interval);
}

void CFRunLoopTimerInvalidate(CFRunLoopTimerRef timer)
{
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8390](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1F40D83D0](alloc, theString, separatorString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8410](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8438](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8440](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8458](alloc, cStr, *(void *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x1F40D84C8](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1F40D8568](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8590](length, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1F40D8600](theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x1F40D8608](theString, suffix);
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
}

CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL)
{
  return (CFURLRef)MEMORY[0x1F40D8740](relativeURL);
}

CFStringRef CFURLCopyHostName(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1F40D8768](anURL);
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1F40D8790](anURL);
}

CFStringRef CFURLCopyScheme(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1F40D87C0](anURL);
}

CFURLRef CFURLCreateAbsoluteURLWithBytes(CFAllocatorRef alloc, const UInt8 *relativeURLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL, Boolean useCompatibilityMode)
{
  return (CFURLRef)MEMORY[0x1F40D87D8](alloc, relativeURLBytes, length, *(void *)&encoding, baseURL, useCompatibilityMode);
}

Boolean CFURLCreateDataAndPropertiesFromResource(CFAllocatorRef alloc, CFURLRef url, CFDataRef *resourceData, CFDictionaryRef *properties, CFArrayRef desiredProperties, SInt32 *errorCode)
{
  return MEMORY[0x1F40D8828](alloc, url, resourceData, properties, desiredProperties, errorCode);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D88C0](allocator, URLString, baseURL);
}

uint64_t CFURLCredentialCopyPassword()
{
  return MEMORY[0x1F40D5400]();
}

uint64_t CFURLCredentialGetUsername()
{
  return MEMORY[0x1F40D5408]();
}

CFRange CFURLGetByteRangeForComponent(CFURLRef url, CFURLComponentType component, CFRange *rangeIncludingSeparators)
{
  CFIndex v3 = MEMORY[0x1F40D88F8](url, component, rangeIncludingSeparators);
  result.length = v4;
  result.location = v3;
  return result;
}

CFIndex CFURLGetBytes(CFURLRef url, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1F40D8900](url, buffer, bufferLength);
}

SInt32 CFURLGetPortNumber(CFURLRef anURL)
{
  return MEMORY[0x1F40D8910](anURL);
}

uint64_t CFURLProtectionSpaceCreate()
{
  return MEMORY[0x1F40D5410]();
}

uint64_t CFURLRequestCopyHTTPCookieStorage()
{
  return MEMORY[0x1F40D5440]();
}

uint64_t CFURLRequestCopyHTTPRequest()
{
  return MEMORY[0x1F40D5448]();
}

uint64_t CFURLRequestCreateHTTPRequest()
{
  return MEMORY[0x1F40D5450]();
}

uint64_t CFURLRequestGetProxySettings()
{
  return MEMORY[0x1F40D5468]();
}

uint64_t CFURLResponseCreateWithHTTPResponse()
{
  return MEMORY[0x1F40D54E8]();
}

uint64_t CFURLResponseGetExpirationTime()
{
  return MEMORY[0x1F40D54F0]();
}

uint64_t CFURLResponseGetHTTPResponse()
{
  return MEMORY[0x1F40D54F8]();
}

uint64_t DNSServiceAttrSetValidationData()
{
  return MEMORY[0x1F40C97E8]();
}

DNSServiceAttributeRef DNSServiceAttributeCreate(void)
{
  return (DNSServiceAttributeRef)MEMORY[0x1F40C97F0]();
}

void DNSServiceAttributeDeallocate(DNSServiceAttributeRef attr)
{
}

uint64_t DNSServiceBrowseEx()
{
  return MEMORY[0x1F40C9810]();
}

DNSServiceErrorType DNSServiceConstructFullName(char *const fullName, const char *const service, const char *const regtype, const char *const domain)
{
  return MEMORY[0x1F40C9818](fullName, service, regtype, domain);
}

DNSServiceErrorType DNSServiceCreateConnection(DNSServiceRef *sdRef)
{
  return MEMORY[0x1F40C9820](sdRef);
}

uint64_t DNSServiceCreateDelegateConnection()
{
  return MEMORY[0x1F40C9828]();
}

DNSServiceErrorType DNSServiceEnumerateDomains(DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, DNSServiceDomainEnumReply callBack, void *context)
{
  return MEMORY[0x1F40C9830](sdRef, *(void *)&flags, *(void *)&interfaceIndex, callBack, context);
}

uint64_t DNSServiceErrorCodeToString()
{
  return MEMORY[0x1F40C9838]();
}

DNSServiceErrorType DNSServiceGetAddrInfo(DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, DNSServiceProtocol protocol, const char *hostname, DNSServiceGetAddrInfoReply callBack, void *context)
{
  return MEMORY[0x1F40C9840](sdRef, *(void *)&flags, *(void *)&interfaceIndex, *(void *)&protocol, hostname, callBack, context);
}

uint64_t DNSServiceGetAddrInfoEx()
{
  return MEMORY[0x1F40C9848]();
}

uint64_t DNSServiceGetValidationData()
{
  return MEMORY[0x1F40C9850]();
}

DNSServiceErrorType DNSServiceProcessResult(DNSServiceRef sdRef)
{
  return MEMORY[0x1F40C9858](sdRef);
}

DNSServiceErrorType DNSServiceQueryRecordWithAttribute(DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t ifindex, const char *name, uint16_t rrtype, uint16_t rrclass, const DNSServiceAttribute *attr, DNSServiceQueryRecordReply callback, void *context)
{
  return MEMORY[0x1F40C9868](sdRef, *(void *)&flags, *(void *)&ifindex, name, rrtype, rrclass, attr, callback);
}

void DNSServiceRefDeallocate(DNSServiceRef sdRef)
{
}

dnssd_sock_t DNSServiceRefSockFD(DNSServiceRef sdRef)
{
  return MEMORY[0x1F40C9880](sdRef);
}

DNSServiceErrorType DNSServiceRegister(DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, const char *name, const char *regtype, const char *domain, const char *host, uint16_t port, uint16_t txtLen, const void *txtRecord, DNSServiceRegisterReply callBack, void *context)
{
  return MEMORY[0x1F40C9888](sdRef, *(void *)&flags, *(void *)&interfaceIndex, name, regtype, domain, host, port);
}

uint64_t DNSServiceResolveEx()
{
  return MEMORY[0x1F40C98A8]();
}

DNSServiceErrorType DNSServiceSetDispatchQueue(DNSServiceRef service, dispatch_queue_t queue)
{
  return MEMORY[0x1F40C98B0](service, queue);
}

uint64_t DNSServiceSetResolverDefaults()
{
  return MEMORY[0x1F40C98B8]();
}

DNSServiceErrorType DNSServiceSleepKeepalive(DNSServiceRef *sdRef, DNSServiceFlags flags, int fd, unsigned int timeout, DNSServiceSleepKeepaliveReply callBack, void *context)
{
  return MEMORY[0x1F40C98C0](sdRef, *(void *)&flags, *(void *)&fd, *(void *)&timeout, callBack, context);
}

DNSServiceErrorType DNSServiceUpdateRecord(DNSServiceRef sdRef, DNSRecordRef recordRef, DNSServiceFlags flags, uint16_t rdlen, const void *rdata, uint32_t ttl)
{
  return MEMORY[0x1F40C98C8](sdRef, recordRef, *(void *)&flags, rdlen, rdata, *(void *)&ttl);
}

IOReturn IOAllowPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return MEMORY[0x1F40E8678](*(void *)&kernelPort, notificationID);
}

IOReturn IODeregisterForSystemPower(io_object_t *notifier)
{
  return MEMORY[0x1F40E8778](notifier);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

IOReturn IOPMAssertionCreateWithProperties(CFDictionaryRef AssertionProperties, IOPMAssertionID *AssertionID)
{
  return MEMORY[0x1F40E8F80](AssertionProperties, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return MEMORY[0x1F40E8FA0](*(void *)&AssertionID);
}

io_connect_t IORegisterForSystemPower(void *refcon, IONotificationPortRef *thePortRef, IOServiceInterestCallback callback, io_object_t *notifier)
{
  return MEMORY[0x1F40E9148](refcon, thePortRef, callback, notifier);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x1F40E9240](*(void *)&connect);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

uint64_t NEHelperCacheCopyAppUUIDMappingExtended()
{
  return MEMORY[0x1F40C98E0]();
}

uint64_t NEHelperCacheCopySigningIdentifierMapping()
{
  return MEMORY[0x1F40C98F0]();
}

uint64_t NEHelperCopyDataForCertificate()
{
  return MEMORY[0x1F40C9910]();
}

uint64_t NEHelperCopyPerAppDomains()
{
  return MEMORY[0x1F40C9918]();
}

uint64_t NEHelperCopyXPCEndpointForIdentityProxy()
{
  return MEMORY[0x1F40C9920]();
}

uint64_t NEHelperCopyXPCEndpointForIdentityProxyExtended()
{
  return MEMORY[0x1F40C9928]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1F40E7258](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

uint64_t PBDataWriterWriteBOOLField()
{
  return MEMORY[0x1F4147190]();
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x1F41471B0]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x1F41471E0]();
}

uint64_t PBDataWriterWriteStringField()
{
  return MEMORY[0x1F4147220]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x1F4147230]();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return MEMORY[0x1F4147240]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x1F4147268]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x1F4147278]();
}

uint64_t PBReaderReadString()
{
  return MEMORY[0x1F4147280]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x1F41472A0]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1F41472A8]();
}

uint64_t PBRepeatedInt32Add()
{
  return MEMORY[0x1F4147360]();
}

uint64_t PBRepeatedInt32Clear()
{
  return MEMORY[0x1F4147368]();
}

uint64_t PBRepeatedInt32Copy()
{
  return MEMORY[0x1F4147370]();
}

uint64_t PBRepeatedInt32Hash()
{
  return MEMORY[0x1F4147378]();
}

uint64_t PBRepeatedInt32IsEqual()
{
  return MEMORY[0x1F4147380]();
}

SecAccessControlRef SecAccessControlCreateWithFlags(CFAllocatorRef allocator, CFTypeRef protection, SecAccessControlCreateFlags flags, CFErrorRef *error)
{
  return (SecAccessControlRef)MEMORY[0x1F40F6A18](allocator, protection, flags, error);
}

uint64_t SecCertificateCopyDNSNames()
{
  return MEMORY[0x1F40F6AC8]();
}

SecKeyRef SecCertificateCopyKey(SecCertificateRef certificate)
{
  return (SecKeyRef)MEMORY[0x1F40F6B10](certificate);
}

uint64_t SecCertificateCreateWithBytes()
{
  return MEMORY[0x1F40F6B78]();
}

CFStringRef SecCopyErrorMessageString(OSStatus status, void *reserved)
{
  return (CFStringRef)MEMORY[0x1F40F6D68](*(void *)&status, reserved);
}

uint64_t SecGenerateSelfSignedCertificate()
{
  return MEMORY[0x1F40F6DB0]();
}

OSStatus SecIdentityCopyCertificate(SecIdentityRef identityRef, SecCertificateRef *certificateRef)
{
  return MEMORY[0x1F40F6DB8](identityRef, certificateRef);
}

OSStatus SecIdentityCopyPrivateKey(SecIdentityRef identityRef, SecKeyRef *privateKeyRef)
{
  return MEMORY[0x1F40F6DC0](identityRef, privateKeyRef);
}

uint64_t SecIdentityCreate()
{
  return MEMORY[0x1F40F6DC8]();
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x1F40F6DE0](query, result);
}

uint64_t SecKeyCopyPublicBytes()
{
  return MEMORY[0x1F40F6E60]();
}

SecKeyRef SecKeyCopyPublicKey(SecKeyRef key)
{
  return (SecKeyRef)MEMORY[0x1F40F6E70](key);
}

uint64_t SecKeyCopySubjectPublicKeyInfo()
{
  return MEMORY[0x1F40F6E80]();
}

SecKeyRef SecKeyCreateRandomKey(CFDictionaryRef parameters, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x1F40F6EE0](parameters, error);
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40F6EF8](key, algorithm, dataToSign, error);
}

SecKeyRef SecKeyCreateWithData(CFDataRef keyData, CFDictionaryRef attributes, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x1F40F6F08](keyData, attributes, error);
}

Boolean SecKeyVerifySignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef signedData, CFDataRef signature, CFErrorRef *error)
{
  return MEMORY[0x1F40F6F80](key, algorithm, signedData, signature, error);
}

uint64_t SecPolicySetATSPinning()
{
  return MEMORY[0x1F40F70C8]();
}

uint64_t SecPolicySetSSLHostname()
{
  return MEMORY[0x1F40F70D0]();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1F40F7138](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1F40F7160](allocator);
}

CFArrayRef SecTrustCopyCertificateChain(SecTrustRef trust)
{
  return (CFArrayRef)MEMORY[0x1F40F7190](trust);
}

CFDataRef SecTrustCopyExceptions(SecTrustRef trust)
{
  return (CFDataRef)MEMORY[0x1F40F71A0](trust);
}

SecKeyRef SecTrustCopyKey(SecTrustRef trust)
{
  return (SecKeyRef)MEMORY[0x1F40F71B8](trust);
}

OSStatus SecTrustCopyPolicies(SecTrustRef trust, CFArrayRef *policies)
{
  return MEMORY[0x1F40F71C0](trust, policies);
}

OSStatus SecTrustEvaluateAsyncWithError(SecTrustRef trust, dispatch_queue_t queue, SecTrustWithErrorCallback result)
{
  return MEMORY[0x1F40F7200](trust, queue, result);
}

BOOL SecTrustEvaluateWithError(SecTrustRef trust, CFErrorRef *error)
{
  return MEMORY[0x1F40F7210](trust, error);
}

BOOL SecTrustSetExceptions(SecTrustRef trust, CFDataRef exceptions)
{
  return MEMORY[0x1F40F7270](trust, exceptions);
}

uint64_t SecTrustSetPinningPolicyName()
{
  return MEMORY[0x1F40F7288]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFGetProgname()
{
  return MEMORY[0x1F40D8E00]();
}

uint64_t _CFHTTPAuthenticationAppSSOIsPerformDefaultHandlingError()
{
  return MEMORY[0x1F40D5538]();
}

uint64_t _CFHTTPAuthenticationAppSSOShouldManageURL()
{
  return MEMORY[0x1F40D5540]();
}

uint64_t _CFHTTPAuthenticationApplyProxyAuthorizationToRequest()
{
  return MEMORY[0x1F40D5548]();
}

uint64_t _CFHTTPAuthenticationAskAccountsForCreds()
{
  return MEMORY[0x1F40D5550]();
}

uint64_t _CFHTTPAuthenticationCanRecoverFromKerberosFailure()
{
  return MEMORY[0x1F40D5558]();
}

uint64_t _CFHTTPAuthenticationCheckOriginAllowedAsThirdParty()
{
  return MEMORY[0x1F40D5560]();
}

uint64_t _CFHTTPAuthenticationClearAccountRefreshState()
{
  return MEMORY[0x1F40D5568]();
}

uint64_t _CFHTTPAuthenticationCopySortedAuthSchemes()
{
  return MEMORY[0x1F40D5570]();
}

uint64_t _CFHTTPAuthenticationCreateFromResponseWithFlags()
{
  return MEMORY[0x1F40D5578]();
}

uint64_t _CFHTTPAuthenticationCreateNTLMHeaderForRequest()
{
  return MEMORY[0x1F40D5580]();
}

uint64_t _CFHTTPAuthenticationCreateNegotiateHeaderForRequest()
{
  return MEMORY[0x1F40D5588]();
}

uint64_t _CFHTTPAuthenticationFailedToGetKerberosTicket()
{
  return MEMORY[0x1F40D5598]();
}

uint64_t _CFHTTPAuthenticationFetchProxyCredentialFromAuthBroker()
{
  return MEMORY[0x1F40D55A0]();
}

uint64_t _CFHTTPAuthenticationGetAuthHeadersFromAppSSO()
{
  return MEMORY[0x1F40D55A8]();
}

uint64_t _CFHTTPAuthenticationGetPATAuthHeaders()
{
  return MEMORY[0x1F40D55B0]();
}

uint64_t _CFHTTPAuthenticationGetPATSchemes()
{
  return MEMORY[0x1F40D55B8]();
}

uint64_t _CFHTTPAuthenticationGetSchemesDict()
{
  return MEMORY[0x1F40D55C0]();
}

uint64_t _CFHTTPAuthenticationIsSecondNTLMTransaction()
{
  return MEMORY[0x1F40D55C8]();
}

uint64_t _CFHTTPAuthenticationSetPreferredScheme()
{
  return MEMORY[0x1F40D55D0]();
}

uint64_t _CFHTTPAuthenticationUpdateFromResponse()
{
  return MEMORY[0x1F40D55D8]();
}

uint64_t _CFHTTPAuthenticationUsingAppSSO()
{
  return MEMORY[0x1F40D55E0]();
}

uint64_t _CFHTTPMessageAddHeaderFieldValue()
{
  return MEMORY[0x1F40D55F8]();
}

uint64_t _CFHTTPMessageSetResponseProxyURL()
{
  return MEMORY[0x1F40D5600]();
}

uint64_t _CFHTTPMessageSetResponseURL()
{
  return MEMORY[0x1F40D5608]();
}

uint64_t _CFHostGetTopLevelDomain()
{
  return MEMORY[0x1F40D5698]();
}

uint64_t _CFNetworkCopyPreferredLanguageCode()
{
  return MEMORY[0x1F40D56D0]();
}

uint64_t _CFNetworkErrorCopyLocalizedDescriptionWithHostname()
{
  return MEMORY[0x1F40D56D8]();
}

uint64_t _CFNetworkExecuteProxyAutoConfigurationURLDelegated()
{
  return MEMORY[0x1F40D56F0]();
}

uint64_t _CFStringCreateByAddingPercentEncodingWithAllowedCharacters()
{
  return MEMORY[0x1F40D9120]();
}

uint64_t _CFStringCreateByRemovingPercentEncoding()
{
  return MEMORY[0x1F40D9128]();
}

uint64_t _CFURLComponentsGetURLPathAllowedCharacterSet()
{
  return MEMORY[0x1F40D9220]();
}

uint64_t _CFURLRequestCopyProtocolPropertyForKey()
{
  return MEMORY[0x1F40D5750]();
}

uint64_t _CFURLResponseMustRevalidate()
{
  return MEMORY[0x1F40D5778]();
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return MEMORY[0x1F40D9438]();
}

uint64_t _CFXPCCreateXPCObjectFromCFObject()
{
  return MEMORY[0x1F40D9450]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1F417E830]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1F417E838]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x1F417E840]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1F417E860]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E868]();
}

{
  return MEMORY[0x1F417E8A0]();
}

{
  return MEMORY[0x1F417E8B0]();
}

{
  return MEMORY[0x1F417E8C0]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1F417ECE0](this, a2);
}

void std::locale::~locale(std::locale *this)
{
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  return (const std::locale *)MEMORY[0x1F417ECF8](this, a2);
}

unint64_t std::stoull(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1F417ED00](__str, __idx, *(void *)&__base);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::move(std::ios_base *this, std::ios_base *a2)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

double __exp10(double a1)
{
  MEMORY[0x1F40C9B90](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1F40C9C28]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1F40C9CD8]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9CF8](*(void *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9D00](*(void *)&a1);
}

uint64_t _class_setCustomDeallocInitiation()
{
  return MEMORY[0x1F41813B0]();
}

uint64_t _dispatch_is_fork_of_multithreaded_parent()
{
  return MEMORY[0x1F40C9D68]();
}

uint64_t _dispatch_is_multithreaded()
{
  return MEMORY[0x1F40C9D70]();
}

uint64_t _dispatch_source_will_reenable_kevent_4NW()
{
  return MEMORY[0x1F40C9DA0]();
}

uint64_t _os_assert_log()
{
  return MEMORY[0x1F40C9F90]();
}

uint64_t _os_crash()
{
  return MEMORY[0x1F40C9FA0]();
}

uint64_t _os_crash_msg()
{
  return MEMORY[0x1F40C9FA8]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_log_send_and_compose_impl()
{
  return MEMORY[0x1F40C9FF8]();
}

uint64_t _os_object_alloc()
{
  return MEMORY[0x1F40CA028]();
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return MEMORY[0x1F4186340]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1F4186370]();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return MEMORY[0x1F4186398]();
}

uint64_t _swift_stdlib_strtof_clocale()
{
  return MEMORY[0x1F41863A0]();
}

uint64_t _symptoms_daemon_fallback_initial_disposition()
{
  return MEMORY[0x1F40CA1A8]();
}

uint64_t _symptoms_daemon_fallback_subseq_disposition()
{
  return MEMORY[0x1F40CA1B0]();
}

uint64_t _symptoms_is_daemon_fallback_blacklisted()
{
  return MEMORY[0x1F40CA1B8]();
}

void abort(void)
{
}

int accept(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1F40CA200](*(void *)&a1, a2, a3);
}

uint32_t arc4random(void)
{
  return MEMORY[0x1F40CA3A8]();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1F40CA3C0](*(void *)&__upper_bound);
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1F40CA440](a1, a2);
}

int atexit(void (*a1)(void))
{
  return MEMORY[0x1F40CA488](a1);
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x1F40CA4F8](a1, *(void *)&a2);
}

char **__cdecl backtrace_symbols(void *const *a1, int a2)
{
  return (char **)MEMORY[0x1F40CA508](a1, *(void *)&a2);
}

int bind(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x1F40CA530](*(void *)&a1, a2, *(void *)&a3);
}

kern_return_t bootstrap_look_up(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return MEMORY[0x1F40CA548](*(void *)&bp, service_name, sp);
}

void bzero(void *a1, size_t a2)
{
}

uint64_t cc_cmp_safe()
{
  return MEMORY[0x1F40CA6A8]();
}

uint64_t ccaes_gcm_decrypt_mode()
{
  return MEMORY[0x1F40CA6E8]();
}

uint64_t ccaes_gcm_encrypt_mode()
{
  return MEMORY[0x1F40CA6F0]();
}

uint64_t ccgcm_one_shot()
{
  return MEMORY[0x1F40CACA8]();
}

uint64_t cchkdf_expand()
{
  return MEMORY[0x1F40CAE30]();
}

uint64_t cchkdf_extract()
{
  return MEMORY[0x1F40CAE38]();
}

uint64_t cchpke_initiator_encrypt()
{
  return MEMORY[0x1F40CAE60]();
}

uint64_t cchpke_initiator_export()
{
  return MEMORY[0x1F40CAE68]();
}

uint64_t cchpke_initiator_setup()
{
  return MEMORY[0x1F40CAE70]();
}

uint64_t cchpke_params_sizeof_aead_key()
{
  return MEMORY[0x1F40CAE78]();
}

uint64_t cchpke_params_sizeof_aead_nonce()
{
  return MEMORY[0x1F40CAE80]();
}

uint64_t cchpke_params_sizeof_aead_tag()
{
  return MEMORY[0x1F40CAE88]();
}

uint64_t cchpke_params_sizeof_kdf_hash()
{
  return MEMORY[0x1F40CAE90]();
}

uint64_t cchpke_params_sizeof_kem_enc()
{
  return MEMORY[0x1F40CAE98]();
}

uint64_t cchpke_params_x25519_AESGCM128_HKDF_SHA256()
{
  return MEMORY[0x1F40CAEA0]();
}

uint64_t cchpke_responder_decrypt()
{
  return MEMORY[0x1F40CAEA8]();
}

uint64_t cchpke_responder_export()
{
  return MEMORY[0x1F40CAEB0]();
}

uint64_t cchpke_responder_setup()
{
  return MEMORY[0x1F40CAEB8]();
}

uint64_t ccrng()
{
  return MEMORY[0x1F40CB030]();
}

uint64_t ccsha256_di()
{
  return MEMORY[0x1F40CB148]();
}

uint64_t change_fdguard_np()
{
  return MEMORY[0x1F40CB388]();
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x1F41814C8](cls, name, imp, types);
}

Method *__cdecl class_copyMethodList(Class cls, unsigned int *outCount)
{
  return (Method *)MEMORY[0x1F41814F8](cls, outCount);
}

id class_createInstance(Class cls, size_t extraBytes)
{
  return (id)MEMORY[0x1F4181510](cls, extraBytes);
}

Method class_getInstanceMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1F4181528](cls, name);
}

size_t class_getInstanceSize(Class cls)
{
  return MEMORY[0x1F4181530](cls);
}

Ivar class_getInstanceVariable(Class cls, const char *name)
{
  return (Ivar)MEMORY[0x1F4181538](cls, name);
}

IMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return (IMP)MEMORY[0x1F4181578](cls, name, imp, types);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1F40CB3D8](*(void *)&__clock_id);
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

compression_status compression_stream_destroy(compression_stream *stream)
{
  return MEMORY[0x1F417F0C0](stream);
}

compression_status compression_stream_init(compression_stream *stream, compression_stream_operation operation, compression_algorithm algorithm)
{
  return MEMORY[0x1F417F0D0](stream, *(void *)&operation, *(void *)&algorithm);
}

compression_status compression_stream_process(compression_stream *stream, int flags)
{
  return MEMORY[0x1F417F0E0](stream, *(void *)&flags);
}

uint64_t config_agent_copy_dns_information()
{
  return MEMORY[0x1F40CB410]();
}

uint64_t config_agent_copy_proxy_information()
{
  return MEMORY[0x1F40CB418]();
}

uint64_t config_agent_free_dns_information()
{
  return MEMORY[0x1F40CB420]();
}

uint64_t config_agent_free_proxy_information()
{
  return MEMORY[0x1F40CB428]();
}

uint64_t config_agent_update_proxy_information()
{
  return MEMORY[0x1F40CB430]();
}

int connect(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x1F40CB440](*(void *)&a1, a2, *(void *)&a3);
}

int connectx(int a1, const sa_endpoints_t *a2, sae_associd_t a3, unsigned int a4, const iovec *a5, unsigned int a6, size_t *a7, sae_connid_t *a8)
{
  return MEMORY[0x1F40CB448](*(void *)&a1, a2, *(void *)&a3, *(void *)&a4, a5, *(void *)&a6, a7, a8);
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x1F4182BD0](strm, *(void *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x1F4182BE0](strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return MEMORY[0x1F4182BE8](strm, *(void *)&level, *(void *)&method, *(void *)&windowBits, *(void *)&memLevel, *(void *)&strategy, version, *(void *)&stream_size);
}

int deflateReset(z_streamp strm)
{
  return MEMORY[0x1F4182C08](strm);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C0](flags, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C8](flags, *(void *)&qos_class, *(void *)&relative_priority, block);
}

BOOL dispatch_data_apply(dispatch_data_t data, dispatch_data_applier_t applier)
{
  return MEMORY[0x1F40CBA00](data, applier);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA10](buffer, size, queue, destructor);
}

uint64_t dispatch_data_create_alloc()
{
  return MEMORY[0x1F40CBA18]();
}

dispatch_data_t dispatch_data_create_concat(dispatch_data_t data1, dispatch_data_t data2)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA20](data1, data2);
}

dispatch_data_t dispatch_data_create_map(dispatch_data_t data, const void **buffer_ptr, size_t *size_ptr)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA30](data, buffer_ptr, size_ptr);
}

dispatch_data_t dispatch_data_create_subrange(dispatch_data_t data, size_t offset, size_t length)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA38](data, offset, length);
}

uint64_t dispatch_data_create_with_transform()
{
  return MEMORY[0x1F40CBA40]();
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return MEMORY[0x1F40CBA48](data);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_io_close(dispatch_io_t channel, dispatch_io_close_flags_t flags)
{
}

dispatch_io_t dispatch_io_create(dispatch_io_type_t type, dispatch_fd_t fd, dispatch_queue_t queue, void *cleanup_handler)
{
  return (dispatch_io_t)MEMORY[0x1F40CBAD8](type, *(void *)&fd, queue, cleanup_handler);
}

void dispatch_io_read(dispatch_io_t channel, off_t offset, size_t length, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
}

void dispatch_io_set_low_water(dispatch_io_t channel, size_t low_water)
{
}

void dispatch_io_write(dispatch_io_t channel, off_t offset, dispatch_data_t data, dispatch_queue_t queue, dispatch_io_handler_t io_handler)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBD0](label, attr, target);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

uintptr_t dispatch_source_get_data(dispatch_source_t source)
{
  return MEMORY[0x1F40CBCA0](source);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return MEMORY[0x1F40CBD40](when, delta);
}

uint64_t dispatch_workloop_copy_current()
{
  return MEMORY[0x1F40CBD48]();
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1F40CBD58](label);
}

uint64_t dispatch_workloop_is_current()
{
  return MEMORY[0x1F40CBD60]();
}

uint64_t dispatch_workloop_set_cpupercent()
{
  return MEMORY[0x1F40CBD70]();
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return MEMORY[0x1F40CBD88]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

uint64_t dnssd_cname_array_get_cname()
{
  return MEMORY[0x1F417F460]();
}

uint64_t dnssd_cname_array_get_count()
{
  return MEMORY[0x1F417F468]();
}

uint64_t dnssd_getaddrinfo_activate()
{
  return MEMORY[0x1F417F470]();
}

uint64_t dnssd_getaddrinfo_add_resolver_uuid()
{
  return MEMORY[0x1F417F478]();
}

uint64_t dnssd_getaddrinfo_create()
{
  return MEMORY[0x1F417F480]();
}

uint64_t dnssd_getaddrinfo_invalidate()
{
  return MEMORY[0x1F417F488]();
}

uint64_t dnssd_getaddrinfo_prohibit_encrypted_dns()
{
  return MEMORY[0x1F417F490]();
}

uint64_t dnssd_getaddrinfo_result_enumerate_alpn_values()
{
  return MEMORY[0x1F417F498]();
}

uint64_t dnssd_getaddrinfo_result_enumerate_service_address_hints()
{
  return MEMORY[0x1F417F4A0]();
}

uint64_t dnssd_getaddrinfo_result_get_actual_hostname()
{
  return MEMORY[0x1F417F4A8]();
}

uint64_t dnssd_getaddrinfo_result_get_address()
{
  return MEMORY[0x1F417F4B0]();
}

uint64_t dnssd_getaddrinfo_result_get_cnames()
{
  return MEMORY[0x1F417F4B8]();
}

uint64_t dnssd_getaddrinfo_result_get_doh_uri()
{
  return MEMORY[0x1F417F4C0]();
}

uint64_t dnssd_getaddrinfo_result_get_ech_config()
{
  return MEMORY[0x1F417F4C8]();
}

uint64_t dnssd_getaddrinfo_result_get_extended_dns_error_code()
{
  return MEMORY[0x1F417F4D0]();
}

uint64_t dnssd_getaddrinfo_result_get_extended_dns_error_text()
{
  return MEMORY[0x1F417F4D8]();
}

uint64_t dnssd_getaddrinfo_result_get_hostname()
{
  return MEMORY[0x1F417F4E0]();
}

uint64_t dnssd_getaddrinfo_result_get_interface_index()
{
  return MEMORY[0x1F417F4E8]();
}

uint64_t dnssd_getaddrinfo_result_get_negative_reason()
{
  return MEMORY[0x1F417F4F0]();
}

uint64_t dnssd_getaddrinfo_result_get_protocol()
{
  return MEMORY[0x1F417F4F8]();
}

uint64_t dnssd_getaddrinfo_result_get_provider_name()
{
  return MEMORY[0x1F417F500]();
}

uint64_t dnssd_getaddrinfo_result_get_service_name()
{
  return MEMORY[0x1F417F508]();
}

uint64_t dnssd_getaddrinfo_result_get_service_port()
{
  return MEMORY[0x1F417F510]();
}

uint64_t dnssd_getaddrinfo_result_get_service_priority()
{
  return MEMORY[0x1F417F518]();
}

uint64_t dnssd_getaddrinfo_result_get_tracker_can_block_request()
{
  return MEMORY[0x1F417F520]();
}

uint64_t dnssd_getaddrinfo_result_get_tracker_hostname()
{
  return MEMORY[0x1F417F528]();
}

uint64_t dnssd_getaddrinfo_result_get_tracker_is_approved()
{
  return MEMORY[0x1F417F530]();
}

uint64_t dnssd_getaddrinfo_result_get_tracker_owner()
{
  return MEMORY[0x1F417F538]();
}

uint64_t dnssd_getaddrinfo_result_get_type()
{
  return MEMORY[0x1F417F540]();
}

uint64_t dnssd_getaddrinfo_result_get_validation_data()
{
  return MEMORY[0x1F417F548]();
}

uint64_t dnssd_getaddrinfo_result_has_extended_dns_error()
{
  return MEMORY[0x1F417F550]();
}

uint64_t dnssd_getaddrinfo_result_is_from_cache()
{
  return MEMORY[0x1F417F558]();
}

uint64_t dnssd_getaddrinfo_result_service_is_valid()
{
  return MEMORY[0x1F417F560]();
}

uint64_t dnssd_getaddrinfo_set_account_id()
{
  return MEMORY[0x1F417F568]();
}

uint64_t dnssd_getaddrinfo_set_delegate_audit_token()
{
  return MEMORY[0x1F417F570]();
}

uint64_t dnssd_getaddrinfo_set_delegate_pid()
{
  return MEMORY[0x1F417F578]();
}

uint64_t dnssd_getaddrinfo_set_delegate_uuid()
{
  return MEMORY[0x1F417F580]();
}

uint64_t dnssd_getaddrinfo_set_event_handler()
{
  return MEMORY[0x1F417F588]();
}

uint64_t dnssd_getaddrinfo_set_flags()
{
  return MEMORY[0x1F417F590]();
}

uint64_t dnssd_getaddrinfo_set_hostname()
{
  return MEMORY[0x1F417F598]();
}

uint64_t dnssd_getaddrinfo_set_interface_index()
{
  return MEMORY[0x1F417F5A0]();
}

uint64_t dnssd_getaddrinfo_set_log_privacy_level()
{
  return MEMORY[0x1F417F5A8]();
}

uint64_t dnssd_getaddrinfo_set_need_encrypted_query()
{
  return MEMORY[0x1F417F5B0]();
}

uint64_t dnssd_getaddrinfo_set_protocols()
{
  return MEMORY[0x1F417F5B8]();
}

uint64_t dnssd_getaddrinfo_set_queue()
{
  return MEMORY[0x1F417F5C0]();
}

uint64_t dnssd_getaddrinfo_set_result_handler()
{
  return MEMORY[0x1F417F5C8]();
}

uint64_t dnssd_getaddrinfo_set_service_scheme()
{
  return MEMORY[0x1F417F5D0]();
}

uint64_t dnssd_getaddrinfo_set_use_failover()
{
  return MEMORY[0x1F417F5D8]();
}

uint64_t dnssd_getaddrinfo_set_validation_data()
{
  return MEMORY[0x1F417F5E0]();
}

int dprintf(int a1, const char *a2, ...)
{
  return MEMORY[0x1F40CBDE0](*(void *)&a1, a2);
}

int dup(int a1)
{
  return MEMORY[0x1F40CBDF8](*(void *)&a1);
}

uint64_t dyld_image_path_containing_address()
{
  return MEMORY[0x1F40CBE70]();
}

void exit(int a1)
{
}

int fchmod(int a1, mode_t a2)
{
  return MEMORY[0x1F40CC028](*(void *)&a1, a2);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1F40CC058](*(void *)&a1, *(void *)&a2);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1F40CC0D8](*(void *)&a1, a2, a3, *(void *)&a4);
}

int flsll(uint64_t a1)
{
  return MEMORY[0x1F40CC188](a1);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1F40CC1E8](*(void *)&a1, a2);
}

void free(void *a1)
{
}

void freeaddrinfo(addrinfo *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

const char *__cdecl gai_strerror(int a1)
{
  return (const char *)MEMORY[0x1F40CC340](*(void *)&a1);
}

int getaddrinfo(const char *a1, const char *a2, const addrinfo *a3, addrinfo **a4)
{
  return MEMORY[0x1F40CC348](a1, a2, a3, a4);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

int getnameinfo(const sockaddr *a1, socklen_t a2, char *a3, socklen_t a4, char *a5, socklen_t a6, int a7)
{
  return MEMORY[0x1F40CC450](a1, *(void *)&a2, a3, *(void *)&a4, a5, *(void *)&a6, *(void *)&a7);
}

int getpeername(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1F40CC488](*(void *)&a1, a2, a3);
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1F40CC4C0]();
}

int getrlimit(int a1, rlimit *a2)
{
  return MEMORY[0x1F40CC500](*(void *)&a1, a2);
}

servent *__cdecl getservbyport(int a1, const char *a2)
{
  return (servent *)MEMORY[0x1F40CC548](*(void *)&a1, a2);
}

int getsockname(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1F40CC558](*(void *)&a1, a2, a3);
}

int getsockopt(int a1, int a2, int a3, void *a4, socklen_t *a5)
{
  return MEMORY[0x1F40CC560](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4, a5);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1F40CC568](a1, a2);
}

uid_t getuid(void)
{
  return MEMORY[0x1F40CC570]();
}

uint64_t guarded_close_np()
{
  return MEMORY[0x1F40CC5B8]();
}

char *__cdecl if_indextoname(unsigned int a1, char *a2)
{
  return (char *)MEMORY[0x1F40CC648](*(void *)&a1, a2);
}

unsigned int if_nametoindex(const char *a1)
{
  return MEMORY[0x1F40CC650](a1);
}

IMP imp_implementationWithBlock(id block)
{
  return (IMP)MEMORY[0x1F4181598](block);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x1F40CC678](*(void *)&a1, a2, a3, *(void *)&a4);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return MEMORY[0x1F40CC680](*(void *)&a1, a2, a3);
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x1F4182CB0](strm, *(void *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x1F4182CB8](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x1F4182CC8](strm, *(void *)&windowBits, version, *(void *)&stream_size);
}

int inflateReset(z_streamp strm)
{
  return MEMORY[0x1F4182CE0](strm);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return MEMORY[0x1F40CC690](*(void *)&a1, a2);
}

uint64_t is_config_agent_type_dns()
{
  return MEMORY[0x1F40CC698]();
}

uint64_t is_config_agent_type_proxy()
{
  return MEMORY[0x1F40CC6A0]();
}

ptrdiff_t ivar_getOffset(Ivar v)
{
  return MEMORY[0x1F41815C0](v);
}

uint64_t kdebug_is_enabled()
{
  return MEMORY[0x1F40CC6F0]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1F40CC700]();
}

int launch_activate_socket(const char *name, int **fds, size_t *cnt)
{
  return MEMORY[0x1F40CC750](name, fds, cnt);
}

int listen(int a1, int a2)
{
  return MEMORY[0x1F40CC840](*(void *)&a1, *(void *)&a2);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1F40CC870](a1, a2);
}

long double log10(long double __x)
{
  MEMORY[0x1F40CC880](__x);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1F40CC8F8](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

uint64_t mach_boottime_usec()
{
  return MEMORY[0x1F40CC920]();
}

uint64_t mach_continuous_approximate_time(void)
{
  return MEMORY[0x1F40CC928]();
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1F40CC930]();
}

uint64_t mach_get_times()
{
  return MEMORY[0x1F40CC948]();
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1F40CC9B8](*(void *)&task, *(void *)&name);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

kern_return_t mach_vm_allocate(vm_map_t target, mach_vm_address_t *address, mach_vm_size_t size, int flags)
{
  return MEMORY[0x1F40CCA68](*(void *)&target, address, size, *(void *)&flags);
}

kern_return_t mach_vm_deallocate(vm_map_t target, mach_vm_address_t address, mach_vm_size_t size)
{
  return MEMORY[0x1F40CCA78](*(void *)&target, address, size);
}

kern_return_t mach_vm_purgable_control(vm_map_t target_task, mach_vm_address_t address, vm_purgable_t control, int *state)
{
  return MEMORY[0x1F40CCA98](*(void *)&target_task, address, *(void *)&control, state);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

malloc_zone_t *__cdecl malloc_create_zone(vm_size_t start_size, unsigned int flags)
{
  return (malloc_zone_t *)MEMORY[0x1F40CCB20](start_size, *(void *)&flags);
}

void malloc_set_zone_name(malloc_zone_t *zone, const char *name)
{
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x1F40CCBA0](memptr, alignment, size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl malloc_type_zone_calloc(malloc_zone_t *zone, size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBB8](zone, count, size, type_id);
}

void *__cdecl malloc_type_zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBD0](zone, alignment, size, type_id);
}

void malloc_zone_free(malloc_zone_t *zone, void *ptr)
{
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

IMP method_getImplementation(Method m)
{
  return (IMP)MEMORY[0x1F41815F8](m);
}

SEL method_getName(Method m)
{
  return (SEL)MEMORY[0x1F4181600](m);
}

const char *__cdecl method_getTypeEncoding(Method m)
{
  return (const char *)MEMORY[0x1F4181618](m);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CCDD0](a1, a2);
}

int mkstemps(char *a1, int a2)
{
  return MEMORY[0x1F40CCE18](a1, *(void *)&a2);
}

uint64_t ne_session_agent_get_advisory()
{
  return MEMORY[0x1F40CCEB8]();
}

uint64_t ne_session_always_on_vpn_configs_present()
{
  return MEMORY[0x1F40CCEC0]();
}

uint64_t ne_session_app_vpn_configs_present()
{
  return MEMORY[0x1F40CCEC8]();
}

uint64_t ne_session_copy_app_data_from_flow_divert_socket()
{
  return MEMORY[0x1F40CCED8]();
}

uint64_t ne_session_get_config_id_from_network_agent()
{
  return MEMORY[0x1F40CCEF8]();
}

uint64_t ne_session_policy_copy_flow_divert_token()
{
  return MEMORY[0x1F40CCF10]();
}

uint64_t ne_session_service_get_dns_service_id_for_interface()
{
  return MEMORY[0x1F40CCF48]();
}

uint64_t ne_session_service_matches_address_for_interface()
{
  return MEMORY[0x1F40CCF50]();
}

uint64_t ne_tracker_check_is_hostname_blocked()
{
  return MEMORY[0x1F40CCF80]();
}

uint64_t ne_tracker_copy_current_stacktrace()
{
  return MEMORY[0x1F40CCF88]();
}

uint64_t ne_tracker_create_xcode_issue()
{
  return MEMORY[0x1F40CCF90]();
}

uint64_t ne_tracker_get_disposition()
{
  return MEMORY[0x1F40CCF98]();
}

uint64_t ne_tracker_should_save_stacktrace()
{
  return MEMORY[0x1F40CCFA0]();
}

uint64_t necp_client_action()
{
  return MEMORY[0x1F40CCFA8]();
}

uint64_t necp_open()
{
  return MEMORY[0x1F40CCFB0]();
}

uint64_t nghttp2_http2_strerror()
{
  return MEMORY[0x1F417DE18]();
}

uint64_t nghttp2_option_del()
{
  return MEMORY[0x1F417DE20]();
}

uint64_t nghttp2_option_new()
{
  return MEMORY[0x1F417DE28]();
}

uint64_t nghttp2_option_set_no_auto_window_update()
{
  return MEMORY[0x1F417DE30]();
}

uint64_t nghttp2_option_set_no_closed_streams()
{
  return MEMORY[0x1F417DE38]();
}

uint64_t nghttp2_option_set_no_http_messaging()
{
  return MEMORY[0x1F417DE40]();
}

uint64_t nghttp2_option_set_no_http_semantics()
{
  return MEMORY[0x1F417DE48]();
}

uint64_t nghttp2_option_set_no_rfc9113_leading_and_trailing_ws_validation()
{
  return MEMORY[0x1F417DE50]();
}

uint64_t nghttp2_option_set_peer_max_concurrent_streams()
{
  return MEMORY[0x1F417DE58]();
}

uint64_t nghttp2_priority_spec_init()
{
  return MEMORY[0x1F417DE60]();
}

uint64_t nghttp2_session_callbacks_del()
{
  return MEMORY[0x1F417DE68]();
}

uint64_t nghttp2_session_callbacks_new()
{
  return MEMORY[0x1F417DE70]();
}

uint64_t nghttp2_session_callbacks_set_before_frame_send_callback()
{
  return MEMORY[0x1F417DE78]();
}

uint64_t nghttp2_session_callbacks_set_error_callback2()
{
  return MEMORY[0x1F417DE80]();
}

uint64_t nghttp2_session_callbacks_set_on_begin_headers_callback()
{
  return MEMORY[0x1F417DE88]();
}

uint64_t nghttp2_session_callbacks_set_on_data_chunk_recv_callback()
{
  return MEMORY[0x1F417DE90]();
}

uint64_t nghttp2_session_callbacks_set_on_frame_not_send_callback()
{
  return MEMORY[0x1F417DE98]();
}

uint64_t nghttp2_session_callbacks_set_on_frame_recv_callback()
{
  return MEMORY[0x1F417DEA0]();
}

uint64_t nghttp2_session_callbacks_set_on_frame_send_callback()
{
  return MEMORY[0x1F417DEA8]();
}

uint64_t nghttp2_session_callbacks_set_on_header_callback()
{
  return MEMORY[0x1F417DEB0]();
}

uint64_t nghttp2_session_callbacks_set_on_invalid_frame_recv_callback()
{
  return MEMORY[0x1F417DEB8]();
}

uint64_t nghttp2_session_callbacks_set_on_stream_close_callback()
{
  return MEMORY[0x1F417DEC8]();
}

uint64_t nghttp2_session_callbacks_set_send_callback()
{
  return MEMORY[0x1F417DED0]();
}

uint64_t nghttp2_session_callbacks_set_send_data_callback()
{
  return MEMORY[0x1F417DED8]();
}

uint64_t nghttp2_session_client_new2()
{
  return MEMORY[0x1F417DEE0]();
}

uint64_t nghttp2_session_consume_connection()
{
  return MEMORY[0x1F417DEE8]();
}

uint64_t nghttp2_session_consume_stream()
{
  return MEMORY[0x1F417DEF0]();
}

uint64_t nghttp2_session_del()
{
  return MEMORY[0x1F417DEF8]();
}

uint64_t nghttp2_session_get_remote_window_size()
{
  return MEMORY[0x1F417DF10]();
}

uint64_t nghttp2_session_get_stream_remote_window_size()
{
  return MEMORY[0x1F417DF18]();
}

uint64_t nghttp2_session_mem_recv()
{
  return MEMORY[0x1F417DF28]();
}

uint64_t nghttp2_session_send()
{
  return MEMORY[0x1F417DF40]();
}

uint64_t nghttp2_session_server_new2()
{
  return MEMORY[0x1F417DF48]();
}

uint64_t nghttp2_session_set_local_window_size()
{
  return MEMORY[0x1F417DF50]();
}

uint64_t nghttp2_session_want_write()
{
  return MEMORY[0x1F417DF78]();
}

uint64_t nghttp2_set_debug_vprintf_callback()
{
  return MEMORY[0x1F417DF80]();
}

uint64_t nghttp2_strerror()
{
  return MEMORY[0x1F417DF88]();
}

uint64_t nghttp2_submit_data()
{
  return MEMORY[0x1F417DF90]();
}

uint64_t nghttp2_submit_goaway()
{
  return MEMORY[0x1F417DF98]();
}

uint64_t nghttp2_submit_headers()
{
  return MEMORY[0x1F417DFA0]();
}

uint64_t nghttp2_submit_ping()
{
  return MEMORY[0x1F417DFA8]();
}

uint64_t nghttp2_submit_rst_stream()
{
  return MEMORY[0x1F417DFC0]();
}

uint64_t nghttp2_submit_settings()
{
  return MEMORY[0x1F417DFC8]();
}

uint64_t nghttp2_submit_window_update()
{
  return MEMORY[0x1F417DFD0]();
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1F40CD028](*(void *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1F40CD040](*(void *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1F40CD050](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1F40CD058](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1F40CD088](*(void *)&token, state64);
}

uint64_t nw_protocol_boringssl_copy_definition()
{
  return MEMORY[0x1F417E2A8]();
}

uint64_t nw_protocol_boringssl_identifier()
{
  return MEMORY[0x1F417E2B0]();
}

uint64_t nw_protocol_tcp_identifier()
{
  return MEMORY[0x1F4182530]();
}

uint64_t nw_tcp_destroy_globals()
{
  return MEMORY[0x1F4182538]();
}

uint64_t nw_tcp_init_globals()
{
  return MEMORY[0x1F4182540]();
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

id objc_constructInstance(Class cls, void *bytes)
{
  return (id)MEMORY[0x1F4181690](cls, bytes);
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void *__cdecl objc_destructInstance(id obj)
{
  return (void *)MEMORY[0x1F41816D8](obj);
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

void objc_moveWeak(id *to, id *from)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181A40](a1);
}

Class object_getClass(id a1)
{
  return (Class)MEMORY[0x1F4181A58](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

uint64_t os_buflet_get_data_length()
{
  return MEMORY[0x1F40CD158]();
}

uint64_t os_buflet_get_data_limit()
{
  return MEMORY[0x1F40CD160]();
}

uint64_t os_buflet_get_data_offset()
{
  return MEMORY[0x1F40CD168]();
}

uint64_t os_buflet_get_object_address()
{
  return MEMORY[0x1F40CD170]();
}

uint64_t os_buflet_set_data_length()
{
  return MEMORY[0x1F40CD178]();
}

uint64_t os_channel_advance_slot()
{
  return MEMORY[0x1F40CD180]();
}

uint64_t os_channel_attr_create()
{
  return MEMORY[0x1F40CD188]();
}

uint64_t os_channel_attr_destroy()
{
  return MEMORY[0x1F40CD190]();
}

uint64_t os_channel_attr_get()
{
  return MEMORY[0x1F40CD198]();
}

uint64_t os_channel_attr_set()
{
  return MEMORY[0x1F40CD1A0]();
}

uint64_t os_channel_attr_set_key()
{
  return MEMORY[0x1F40CD1A8]();
}

uint64_t os_channel_available_slot_count()
{
  return MEMORY[0x1F40CD1B0]();
}

uint64_t os_channel_configure_interface_advisory()
{
  return MEMORY[0x1F40CD1B8]();
}

uint64_t os_channel_create_extended()
{
  return MEMORY[0x1F40CD1C0]();
}

uint64_t os_channel_destroy()
{
  return MEMORY[0x1F40CD1C8]();
}

uint64_t os_channel_event_free()
{
  return MEMORY[0x1F40CD1D0]();
}

uint64_t os_channel_event_get_event_data()
{
  return MEMORY[0x1F40CD1D8]();
}

uint64_t os_channel_event_get_next_event()
{
  return MEMORY[0x1F40CD1E0]();
}

uint64_t os_channel_flow_admissible()
{
  return MEMORY[0x1F40CD1E8]();
}

uint64_t os_channel_flow_adv_get_ce_count()
{
  return MEMORY[0x1F40CD1F0]();
}

uint64_t os_channel_get_advisory_region()
{
  return MEMORY[0x1F40CD1F8]();
}

uint64_t os_channel_get_fd()
{
  return MEMORY[0x1F40CD200]();
}

uint64_t os_channel_get_interface_advisory()
{
  return MEMORY[0x1F40CD208]();
}

uint64_t os_channel_get_next_event_handle()
{
  return MEMORY[0x1F40CD210]();
}

uint64_t os_channel_get_next_slot()
{
  return MEMORY[0x1F40CD218]();
}

uint64_t os_channel_is_defunct()
{
  return MEMORY[0x1F40CD228]();
}

uint64_t os_channel_large_packet_alloc()
{
  return MEMORY[0x1F40CD230]();
}

uint64_t os_channel_packet_alloc()
{
  return MEMORY[0x1F40CD238]();
}

uint64_t os_channel_packet_free()
{
  return MEMORY[0x1F40CD240]();
}

uint64_t os_channel_packet_pool_purge()
{
  return MEMORY[0x1F40CD248]();
}

uint64_t os_channel_read_attr()
{
  return MEMORY[0x1F40CD250]();
}

uint64_t os_channel_ring_id()
{
  return MEMORY[0x1F40CD258]();
}

uint64_t os_channel_rx_ring()
{
  return MEMORY[0x1F40CD270]();
}

uint64_t os_channel_slot_attach_packet()
{
  return MEMORY[0x1F40CD280]();
}

uint64_t os_channel_slot_detach_packet()
{
  return MEMORY[0x1F40CD288]();
}

uint64_t os_channel_slot_get_packet()
{
  return MEMORY[0x1F40CD290]();
}

uint64_t os_channel_sync()
{
  return MEMORY[0x1F40CD298]();
}

uint64_t os_channel_tx_ring()
{
  return MEMORY[0x1F40CD2A0]();
}

uint64_t os_inet_checksum()
{
  return MEMORY[0x1F40CD330]();
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

uint64_t os_nexus_attr_create()
{
  return MEMORY[0x1F40CD3D0]();
}

uint64_t os_nexus_attr_destroy()
{
  return MEMORY[0x1F40CD3D8]();
}

uint64_t os_nexus_attr_get()
{
  return MEMORY[0x1F40CD3E0]();
}

uint64_t os_nexus_attr_set()
{
  return MEMORY[0x1F40CD3E8]();
}

uint64_t os_nexus_controller_alloc_provider_instance()
{
  return MEMORY[0x1F40CD3F0]();
}

uint64_t os_nexus_controller_bind_provider_instance()
{
  return MEMORY[0x1F40CD3F8]();
}

uint64_t os_nexus_controller_create()
{
  return MEMORY[0x1F40CD400]();
}

uint64_t os_nexus_controller_destroy()
{
  return MEMORY[0x1F40CD410]();
}

uint64_t os_nexus_controller_free_provider_instance()
{
  return MEMORY[0x1F40CD418]();
}

uint64_t os_nexus_controller_read_provider_attr()
{
  return MEMORY[0x1F40CD420]();
}

uint64_t os_nexus_controller_register_provider()
{
  return MEMORY[0x1F40CD428]();
}

uint64_t os_packet_add_inet_csum_flags()
{
  return MEMORY[0x1F40CD438]();
}

uint64_t os_packet_decrement_use_count()
{
  return MEMORY[0x1F40CD440]();
}

uint64_t os_packet_finalize()
{
  return MEMORY[0x1F40CD448]();
}

uint64_t os_packet_get_aggregation_type()
{
  return MEMORY[0x1F40CD450]();
}

uint64_t os_packet_get_buflet_count()
{
  return MEMORY[0x1F40CD458]();
}

uint64_t os_packet_get_data_length()
{
  return MEMORY[0x1F40CD460]();
}

uint64_t os_packet_get_flow_uuid()
{
  return MEMORY[0x1F40CD468]();
}

uint64_t os_packet_get_inet_checksum()
{
  return MEMORY[0x1F40CD470]();
}

uint64_t os_packet_get_next_buflet()
{
  return MEMORY[0x1F40CD478]();
}

uint64_t os_packet_get_segment_count()
{
  return MEMORY[0x1F40CD480]();
}

uint64_t os_packet_get_trace_id()
{
  return MEMORY[0x1F40CD488]();
}

uint64_t os_packet_get_wake_flag()
{
  return MEMORY[0x1F40CD490]();
}

uint64_t os_packet_increment_use_count()
{
  return MEMORY[0x1F40CD498]();
}

uint64_t os_packet_set_app_metadata()
{
  return MEMORY[0x1F40CD4A0]();
}

uint64_t os_packet_set_compression_generation_count()
{
  return MEMORY[0x1F40CD4A8]();
}

uint64_t os_packet_set_expire_time()
{
  return MEMORY[0x1F40CD4B0]();
}

uint64_t os_packet_set_flow_uuid()
{
  return MEMORY[0x1F40CD4B8]();
}

uint64_t os_packet_set_keep_alive()
{
  return MEMORY[0x1F40CD4C8]();
}

uint64_t os_packet_set_l4s_flag()
{
  return MEMORY[0x1F40CD4D0]();
}

uint64_t os_packet_set_packetid()
{
  return MEMORY[0x1F40CD4D8]();
}

uint64_t os_packet_set_protocol_segment_size()
{
  return MEMORY[0x1F40CD4E0]();
}

uint64_t os_packet_set_service_class()
{
  return MEMORY[0x1F40CD4E8]();
}

uint64_t os_packet_set_transport_last_packet()
{
  return MEMORY[0x1F40CD4F0]();
}

uint64_t os_packet_set_transport_retransmit()
{
  return MEMORY[0x1F40CD4F8]();
}

uint64_t os_packet_set_transport_traffic_background()
{
  return MEMORY[0x1F40CD500]();
}

uint64_t os_packet_set_transport_traffic_realtime()
{
  return MEMORY[0x1F40CD508]();
}

uint64_t os_packet_set_tso_flags()
{
  return MEMORY[0x1F40CD510]();
}

uint64_t os_packet_set_tx_timestamp()
{
  return MEMORY[0x1F40CD518]();
}

uint64_t os_packet_trace_event()
{
  return MEMORY[0x1F40CD520]();
}

void os_release(void *object)
{
}

void *__cdecl os_retain(void *object)
{
  return (void *)MEMORY[0x1F40CD548](object);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_allows_internal_security_policies()
{
  return MEMORY[0x1F40CD630]();
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1F40CD648]();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1F40CD650]();
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1F40CD830](*(void *)&__fd, __buf, __nbyte, a4);
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x1F40CD8A8](*(void *)&pid, *(void *)&flavor, arg, buffer, *(void *)&buffersize);
}

int pthread_atfork(void (*a1)(void), void (*a2)(void), void (*a3)(void))
{
  return MEMORY[0x1F40CD910](a1, a2, a3);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1F40CDAA8](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1F40CDAC0](a1, *(void *)&a2);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1F40CDAC8](a1, a2);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDB10](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDB18](a1);
}

int pthread_threadid_np(pthread_t a1, __uint64_t *a2)
{
  return MEMORY[0x1F40CDB90](a1, a2);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1F40CDBD8]();
}

uint64_t qpod_conn_create()
{
  return MEMORY[0x1F4181E60]();
}

uint64_t qpod_conn_decode_datagram()
{
  return MEMORY[0x1F4181E68]();
}

uint64_t qpod_conn_encode_datagram()
{
  return MEMORY[0x1F4181E70]();
}

uint64_t qpod_conn_free()
{
  return MEMORY[0x1F4181E78]();
}

uint64_t quic_fillout_definition_callbacks()
{
  return MEMORY[0x1F4181E80]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1F40CDC88](__ptr, __size);
}

ssize_t recv(int a1, void *a2, size_t a3, int a4)
{
  return MEMORY[0x1F40CDCB8](*(void *)&a1, a2, a3, *(void *)&a4);
}

ssize_t recvmsg(int a1, msghdr *a2, int a3)
{
  return MEMORY[0x1F40CDCC8](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t sandbox_check()
{
  return MEMORY[0x1F40CDDD0]();
}

SecCertificateRef sec_certificate_copy_ref(sec_certificate_t certificate)
{
  return (SecCertificateRef)MEMORY[0x1F40F7368](certificate);
}

uint64_t sec_experiment_run_async_with_sampling_disabled()
{
  return MEMORY[0x1F40F7378]();
}

SecIdentityRef sec_identity_copy_ref(sec_identity_t identity)
{
  return (SecIdentityRef)MEMORY[0x1F40F7388](identity);
}

sec_identity_t sec_identity_create(SecIdentityRef identity)
{
  return (sec_identity_t)MEMORY[0x1F40F7398](identity);
}

sec_identity_t sec_identity_create_with_certificates(SecIdentityRef identity, CFArrayRef certificates)
{
  return (sec_identity_t)MEMORY[0x1F40F73A0](identity, certificates);
}

uint64_t sec_protocol_configuration_copy_singleton()
{
  return MEMORY[0x1F40F73A8]();
}

uint64_t sec_protocol_configuration_copy_transformed_options_for_host()
{
  return MEMORY[0x1F40F73B0]();
}

uint64_t sec_protocol_configuration_tls_required()
{
  return MEMORY[0x1F40F73B8]();
}

uint64_t sec_protocol_configuration_tls_required_for_host()
{
  return MEMORY[0x1F40F73C0]();
}

BOOL sec_protocol_metadata_access_distinguished_names(sec_protocol_metadata_t metadata, void *handler)
{
  return MEMORY[0x1F40F73D0](metadata, handler);
}

BOOL sec_protocol_metadata_access_peer_certificate_chain(sec_protocol_metadata_t metadata, void *handler)
{
  return MEMORY[0x1F40F73D8](metadata, handler);
}

uint64_t sec_protocol_metadata_copy_authenticator()
{
  return MEMORY[0x1F40F73F0]();
}

uint64_t sec_protocol_metadata_copy_authenticator_trust()
{
  return MEMORY[0x1F40F73F8]();
}

uint64_t sec_protocol_metadata_copy_connection_id()
{
  return MEMORY[0x1F40F7400]();
}

uint64_t sec_protocol_metadata_copy_sec_trust()
{
  return MEMORY[0x1F40F7410]();
}

dispatch_data_t sec_protocol_metadata_create_secret(sec_protocol_metadata_t metadata, size_t label_len, const char *label, size_t exporter_length)
{
  return (dispatch_data_t)MEMORY[0x1F40F7418](metadata, label_len, label, exporter_length);
}

const char *__cdecl sec_protocol_metadata_get_negotiated_protocol(sec_protocol_metadata_t metadata)
{
  return (const char *)MEMORY[0x1F40F7428](metadata);
}

SSLProtocol sec_protocol_metadata_get_negotiated_protocol_version(sec_protocol_metadata_t metadata)
{
  return MEMORY[0x1F40F7430](metadata);
}

tls_ciphersuite_t sec_protocol_metadata_get_negotiated_tls_ciphersuite(sec_protocol_metadata_t metadata)
{
  return (unsigned __int16)MEMORY[0x1F40F7438](metadata);
}

tls_protocol_version_t sec_protocol_metadata_get_negotiated_tls_protocol_version(sec_protocol_metadata_t metadata)
{
  return (unsigned __int16)MEMORY[0x1F40F7440](metadata);
}

BOOL sec_protocol_metadata_peers_are_equal(sec_protocol_metadata_t metadataA, sec_protocol_metadata_t metadataB)
{
  return MEMORY[0x1F40F7450](metadataA, metadataB);
}

uint64_t sec_protocol_options_access_handle()
{
  return MEMORY[0x1F40F7458]();
}

void sec_protocol_options_add_tls_application_protocol(sec_protocol_options_t options, const char *application_protocol)
{
}

uint64_t sec_protocol_options_add_tls_key_exchange_group()
{
  return MEMORY[0x1F40F7480]();
}

uint64_t sec_protocol_options_add_transport_specific_application_protocol()
{
  return MEMORY[0x1F40F7488]();
}

void sec_protocol_options_append_tls_ciphersuite(sec_protocol_options_t options, tls_ciphersuite_t ciphersuite)
{
}

void sec_protocol_options_append_tls_ciphersuite_group(sec_protocol_options_t options, tls_ciphersuite_group_t group)
{
}

uint64_t sec_protocol_options_apply_config()
{
  return MEMORY[0x1F40F74A0]();
}

uint64_t sec_protocol_options_clear_tls_application_protocols()
{
  return MEMORY[0x1F40F74A8]();
}

uint64_t sec_protocol_options_copy_transport_specific_application_protocol()
{
  return MEMORY[0x1F40F74B8]();
}

BOOL sec_protocol_options_get_enable_encrypted_client_hello(sec_protocol_options_t options)
{
  return MEMORY[0x1F40F74D0](options);
}

uint64_t sec_protocol_options_matches_config()
{
  return MEMORY[0x1F40F74E0]();
}

void sec_protocol_options_set_challenge_block(sec_protocol_options_t options, sec_protocol_challenge_t challenge_block, dispatch_queue_t challenge_queue)
{
}

uint64_t sec_protocol_options_set_client_raw_public_key_certificates()
{
  return MEMORY[0x1F40F74F0]();
}

uint64_t sec_protocol_options_set_connection_id()
{
  return MEMORY[0x1F40F74F8]();
}

void sec_protocol_options_set_enable_encrypted_client_hello(sec_protocol_options_t options, BOOL enable_encrypted_client_hello)
{
}

uint64_t sec_protocol_options_set_experiment_identifier()
{
  return MEMORY[0x1F40F7508]();
}

void sec_protocol_options_set_local_identity(sec_protocol_options_t options, sec_identity_t identity)
{
}

void sec_protocol_options_set_max_tls_protocol_version(sec_protocol_options_t options, tls_protocol_version_t version)
{
}

void sec_protocol_options_set_min_tls_protocol_version(sec_protocol_options_t options, tls_protocol_version_t version)
{
}

uint64_t sec_protocol_options_set_new_session_ticket_request()
{
  return MEMORY[0x1F40F7528]();
}

uint64_t sec_protocol_options_set_nw_protocol_joining_context()
{
  return MEMORY[0x1F40F7530]();
}

void sec_protocol_options_set_peer_authentication_required(sec_protocol_options_t options, BOOL peer_authentication_required)
{
}

uint64_t sec_protocol_options_set_resumed_session_ticket_request()
{
  return MEMORY[0x1F40F7548]();
}

uint64_t sec_protocol_options_set_server_raw_public_key_certificates()
{
  return MEMORY[0x1F40F7550]();
}

uint64_t sec_protocol_options_set_tls_early_data_enabled()
{
  return MEMORY[0x1F40F7560]();
}

void sec_protocol_options_set_tls_max_version(sec_protocol_options_t options, SSLProtocol version)
{
}

void sec_protocol_options_set_tls_min_version(sec_protocol_options_t options, SSLProtocol version)
{
}

void sec_protocol_options_set_tls_server_name(sec_protocol_options_t options, const char *server_name)
{
}

void sec_protocol_options_set_tls_tickets_enabled(sec_protocol_options_t options, BOOL tickets_enabled)
{
}

void sec_protocol_options_set_verify_block(sec_protocol_options_t options, sec_protocol_verify_t verify_block, dispatch_queue_t verify_block_queue)
{
}

SecTrustRef sec_trust_copy_ref(sec_trust_t trust)
{
  return (SecTrustRef)MEMORY[0x1F40F75C0](trust);
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x1F4181B28](sel);
}

SEL sel_registerName(const char *str)
{
  return (SEL)MEMORY[0x1F4181B48](str);
}

ssize_t send(int a1, const void *a2, size_t a3, int a4)
{
  return MEMORY[0x1F40CDF30](*(void *)&a1, a2, a3, *(void *)&a4);
}

ssize_t sendmsg(int a1, const msghdr *a2, int a3)
{
  return MEMORY[0x1F40CDF38](*(void *)&a1, a2, *(void *)&a3);
}

ssize_t sendto(int a1, const void *a2, size_t a3, int a4, const sockaddr *a5, socklen_t a6)
{
  return MEMORY[0x1F40CDF48](*(void *)&a1, a2, a3, *(void *)&a4, a5, *(void *)&a6);
}

int setrlimit(int a1, const rlimit *a2)
{
  return MEMORY[0x1F40CDFB8](*(void *)&a1, a2);
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return MEMORY[0x1F40CDFC0](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4, *(void *)&a5);
}

int shutdown(int a1, int a2)
{
  return MEMORY[0x1F40CDFF8](*(void *)&a1, *(void *)&a2);
}

uint64_t si_set_nat64_v4_requires_synthesis()
{
  return MEMORY[0x1F40CE000]();
}

uint64_t si_set_nat64_v4_synthesize()
{
  return MEMORY[0x1F40CE008]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x1F40CE090](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181F90](a1, *(void *)&a2, a3, *(void *)&n, a5);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1F4181FE8](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

int sqlite3_busy_timeout(sqlite3 *a1, int ms)
{
  return MEMORY[0x1F4182048](a1, *(void *)&ms);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1F4182060](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1F4182070](a1, *(void *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1F4182078](a1, *(void *)&iCol);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1F41820C8](a1, *(void *)&iCol);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x1F41821A8](a1, sql, callback, a4, errmsg);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41821D8](pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1F4182280](filename, ppDb, *(void *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1F4182290](db, zSql, *(void *)&nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1F41822C0](pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1F41823B0](a1);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1F40CE138](a1, a2);
}

char *__cdecl strcasestr(const char *__big, const char *__little)
{
  return (char *)MEMORY[0x1F40CE140](__big, __little);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen)
{
  return MEMORY[0x1F40CE190](*(void *)&__errnum, __strerrbuf, __buflen);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1F40CE198](a1, a2, a3, a4);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1F40CE1D8](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1F8](__dst, __src, __n);
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  return (char *)MEMORY[0x1F40CE200](__s1, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1F40CE208](__s1, __n);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return (char *)MEMORY[0x1F40CE210](__big, __little, __len);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1F40CE258](__s1, __s2);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2F0](__str, __endptr, *(void *)&__base);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1F41863F0]();
}

uint64_t swift_allocateMetadataPack()
{
  return MEMORY[0x1F4186400]();
}

uint64_t swift_allocateWitnessTablePack()
{
  return MEMORY[0x1F4186408]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1F4186420]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1F4186428]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1F4186460]();
}

uint64_t swift_conformsToProtocol()
{
  return MEMORY[0x1F4186470]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x1F4186478]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1F4186488]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1F4186498]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1F41864A0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x1F4188218]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x1F4188220]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1F41864C0]();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return MEMORY[0x1F41864C8]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x1F41864D0]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x1F41864E8]();
}

uint64_t swift_dynamicCastUnknownClassUnconditional()
{
  return MEMORY[0x1F4186510]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1F4186518]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1F4186538]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1F4186540]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1F4186568]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1F4186570]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1F41865E0]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x1F41865F0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x1F4186638]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x1F4186640]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x1F4186648]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1F4186650]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x1F4186658]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1F4186688]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1F4186690]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1F41866A8]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x1F41866C0]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x1F41866C8]();
}

uint64_t swift_isUniquelyReferenced_native()
{
  return MEMORY[0x1F41866E8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1F41866F8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1F4186710]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1F4186790]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1F41867A8]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x1F41867B0]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1F41867B8]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1F4188250]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1F4188258]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1F4188260]();
}

uint64_t swift_task_localValuePop()
{
  return MEMORY[0x1F4188280]();
}

uint64_t swift_task_localValuePush()
{
  return MEMORY[0x1F4188288]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1F41867D8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1F41867E8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1F41867F8]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1F4186840]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1F4186858]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1F4186860]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1F4186868]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1F4186898]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1F41868B8]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1F41868C0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1F41868C8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1F41868E8]();
}

uint64_t symptom_framework_init()
{
  return MEMORY[0x1F40CE370]();
}

uint64_t symptom_new()
{
  return MEMORY[0x1F40CE378]();
}

uint64_t symptom_send()
{
  return MEMORY[0x1F40CE380]();
}

uint64_t symptom_send_immediate()
{
  return MEMORY[0x1F40CE388]();
}

uint64_t symptom_set_additional_qualifier()
{
  return MEMORY[0x1F40CE390]();
}

uint64_t symptom_set_qualifier()
{
  return MEMORY[0x1F40CE398]();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1F40CE3C0](a1, *(void *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1F40CE470](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1F40CE588](a1);
}

uint64_t tls_helper_SSLProtocol_from_version()
{
  return MEMORY[0x1F417F3E8]();
}

void tzset(void)
{
}

const char *__cdecl u_errorName(UErrorCode code)
{
  return (const char *)MEMORY[0x1F417F728](*(void *)&code);
}

int32_t uidna_nameToASCII(const UIDNA *idna, const UChar *name, int32_t length, UChar *dest, int32_t capacity, UIDNAInfo *pInfo, UErrorCode *pErrorCode)
{
  return MEMORY[0x1F4180048](idna, name, *(void *)&length, dest, *(void *)&capacity, pInfo, pErrorCode);
}

UIDNA *__cdecl uidna_openUTS46(uint32_t options, UErrorCode *pErrorCode)
{
  return (UIDNA *)MEMORY[0x1F4180068](*(void *)&options, pErrorCode);
}

int uname(utsname *a1)
{
  return MEMORY[0x1F40CE5C8](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x1F40CE5E0](a1);
}

void uuid_clear(uuid_t uu)
{
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x1F40CE630](uu1, uu2);
}

void uuid_generate(uuid_t out)
{
}

void uuid_generate_random(uuid_t out)
{
}

int uuid_is_null(const uuid_t uu)
{
  return MEMORY[0x1F40CE658](uu);
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1F40CE660](in, uu);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

void uuid_unparse_upper(const uuid_t uu, uuid_string_t out)
{
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x1F40CE680](a1, a2, a3);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1F40CE928](*(void *)&__fd, __buf, __nbyte);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return MEMORY[0x1F40CEA18](xarray, applier);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEA30](objects, count);
}

xpc_object_t xpc_array_create_empty(void)
{
  return (xpc_object_t)MEMORY[0x1F40CEA38]();
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1F40CEA58](xarray);
}

int64_t xpc_array_get_int64(xpc_object_t xarray, size_t index)
{
  return MEMORY[0x1F40CEA80](xarray, index);
}

const char *__cdecl xpc_array_get_string(xpc_object_t xarray, size_t index)
{
  return (const char *)MEMORY[0x1F40CEA90](xarray, index);
}

uint64_t xpc_array_get_uint64(xpc_object_t xarray, size_t index)
{
  return MEMORY[0x1F40CEA98](xarray, index);
}

const uint8_t *__cdecl xpc_array_get_uuid(xpc_object_t xarray, size_t index)
{
  return (const uint8_t *)MEMORY[0x1F40CEAA0](xarray, index);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1F40CEAA8](xarray, index);
}

void xpc_array_set_data(xpc_object_t xarray, size_t index, const void *bytes, size_t length)
{
}

void xpc_array_set_int64(xpc_object_t xarray, size_t index, int64_t value)
{
}

void xpc_array_set_string(xpc_object_t xarray, size_t index, const char *string)
{
}

void xpc_array_set_uint64(xpc_object_t xarray, size_t index, uint64_t value)
{
}

void xpc_array_set_uuid(xpc_object_t xarray, size_t index, const unsigned __int8 *uuid)
{
}

void xpc_array_set_value(xpc_object_t xarray, size_t index, xpc_object_t value)
{
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return (xpc_object_t)MEMORY[0x1F40CEB10](value);
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return MEMORY[0x1F40CEB18](xBOOL);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

uint64_t xpc_connection_copy_entitlement_value()
{
  return MEMORY[0x1F40CEB90]();
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBD0](name, targetq, flags);
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return MEMORY[0x1F40CEC20](connection);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
}

xpc_object_t xpc_connection_send_message_with_reply_sync(xpc_connection_t connection, xpc_object_t message)
{
  return (xpc_object_t)MEMORY[0x1F40CEC68](connection, message);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
}

xpc_object_t xpc_copy(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1F40CED00](object);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1F40CED28](object);
}

uint64_t xpc_create_from_plist()
{
  return MEMORY[0x1F40CED68]();
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1F40CED90](bytes, length);
}

xpc_object_t xpc_data_create_with_dispatch_data(dispatch_data_t ddata)
{
  return (xpc_object_t)MEMORY[0x1F40CEDA0](ddata);
}

size_t xpc_data_get_bytes(xpc_object_t xdata, void *buffer, size_t off, size_t length)
{
  return MEMORY[0x1F40CEDA8](xdata, buffer, off, length);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1F40CEDB0](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1F40CEDC0](xdata);
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return MEMORY[0x1F40CEE08](xdict, applier);
}

uint64_t xpc_dictionary_copy_basic_description()
{
  return MEMORY[0x1F40CEE10]();
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1F40CEE40](original);
}

int xpc_dictionary_dup_fd(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEE50](xdict, key);
}

xpc_object_t xpc_dictionary_get_array(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEE68](xdict, key);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEE80](xdict, key);
}

size_t xpc_dictionary_get_count(xpc_object_t xdict)
{
  return MEMORY[0x1F40CEE88](xdict);
}

const void *__cdecl xpc_dictionary_get_data(xpc_object_t xdict, const char *key, size_t *length)
{
  return (const void *)MEMORY[0x1F40CEE98](xdict, key, length);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEEA8](xdict, key);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEC8](xdict, key);
}

uint64_t xpc_dictionary_get_pointer()
{
  return MEMORY[0x1F40CEED0]();
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1F40CEEF0](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1F40CEEF8](xdict, key);
}

const uint8_t *__cdecl xpc_dictionary_get_uuid(xpc_object_t xdict, const char *key)
{
  return (const uint8_t *)MEMORY[0x1F40CEF00](xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEF10](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

uint64_t xpc_dictionary_set_pointer()
{
  return MEMORY[0x1F40CEFA0]();
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
}

void xpc_dictionary_set_uuid(xpc_object_t xdict, const char *key, const unsigned __int8 *uuid)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_object_t xpc_double_create(double value)
{
  return (xpc_object_t)MEMORY[0x1F40CEFE8](value);
}

double xpc_double_get_value(xpc_object_t xdouble)
{
  MEMORY[0x1F40CEFF8](xdouble);
  return result;
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return MEMORY[0x1F40CF040](object1, object2);
}

xpc_object_t xpc_fd_create(int fd)
{
  return (xpc_object_t)MEMORY[0x1F40CF0B8](*(void *)&fd);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}

size_t xpc_hash(xpc_object_t object)
{
  return MEMORY[0x1F40CF158](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1F40CF188](value);
}

int64_t xpc_int64_get_value(xpc_object_t xint)
{
  return MEMORY[0x1F40CF190](xint);
}

uint64_t xpc_pointer_get_value()
{
  return MEMORY[0x1F40CF230]();
}

void xpc_release(xpc_object_t object)
{
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1F40CF248](object);
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1F40CF290](string);
}

xpc_object_t xpc_string_create_with_format(const char *fmt, ...)
{
  return (xpc_object_t)MEMORY[0x1F40CF2A8](fmt);
}

size_t xpc_string_get_length(xpc_object_t xstring)
{
  return MEMORY[0x1F40CF2B8](xstring);
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return (const char *)MEMORY[0x1F40CF2C8](xstring);
}

xpc_object_t xpc_uint64_create(uint64_t value)
{
  return (xpc_object_t)MEMORY[0x1F40CF320](value);
}

uint64_t xpc_uint64_get_value(xpc_object_t xuint)
{
  return MEMORY[0x1F40CF330](xuint);
}

xpc_object_t xpc_uuid_create(const unsigned __int8 *uuid)
{
  return (xpc_object_t)MEMORY[0x1F40CF360](uuid);
}

const uint8_t *__cdecl xpc_uuid_get_bytes(xpc_object_t xuuid)
{
  return (const uint8_t *)MEMORY[0x1F40CF368](xuuid);
}

const char *__cdecl zError(int a1)
{
  return (const char *)MEMORY[0x1F4182D00](*(void *)&a1);
}

uint64_t perform_first_network_use_flow_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libcupolicy_dylib)) {
    dlopenHelper_libcupolicy_dylib(a1);
  }
  return MEMORY[0x1F417F450]();
}

uint64_t network_usage_policy_create_client_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libcupolicy_dylib)) {
    dlopenHelper_libcupolicy_dylib(a1);
  }
  return MEMORY[0x1F417F408]();
}

uint64_t nwswifttls_copy_definition_delayInitStub(double a1)
{
  if (!atomic_load((unsigned int *)&dlopenHelperFlag_libnwswifttls_dylib)) {
    dlopenHelper_libnwswifttls_dylib(a1);
  }
  return MEMORY[0x1F4181390]();
}

uint64_t analytics_send_event_delayInitStub(double a1)
{
  if (!atomic_load((unsigned int *)&dlopenHelperFlag_CoreAnalytics)) {
    dlopenHelper_CoreAnalytics(a1);
  }
  return MEMORY[0x1F41138D0]();
}

uint64_t nwrapport_copy_protocol_definition_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_Rapport)) {
    dlopenHelper_Rapport(a1);
  }
  return MEMORY[0x1F41478A0]();
}

uint64_t pcap_ng_block_alloc_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libpcap_A_dylib)) {
    dlopenHelper_libpcap_A_dylib(a1);
  }
  return MEMORY[0x1F4181B68]();
}

uint64_t pcap_ng_block_reset_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libpcap_A_dylib)) {
    dlopenHelper_libpcap_A_dylib(a1);
  }
  return MEMORY[0x1F4181B78]();
}

uint64_t pcap_ng_get_enhanced_packet_fields_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libpcap_A_dylib)) {
    dlopenHelper_libpcap_A_dylib(a1);
  }
  return MEMORY[0x1F4181BA0]();
}

uint64_t pcap_ng_block_packet_set_data_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libpcap_A_dylib)) {
    dlopenHelper_libpcap_A_dylib(a1);
  }
  return MEMORY[0x1F4181B70]();
}

uint64_t pcap_ng_dump_block_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libpcap_A_dylib)) {
    dlopenHelper_libpcap_A_dylib(a1);
  }
  return MEMORY[0x1F4181B80]();
}

uint64_t pcap_ng_free_block_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libpcap_A_dylib)) {
    dlopenHelper_libpcap_A_dylib(a1);
  }
  return MEMORY[0x1F4181B98]();
}

uint64_t pcap_ng_dump_close_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libpcap_A_dylib)) {
    dlopenHelper_libpcap_A_dylib(a1);
  }
  return MEMORY[0x1F4181B88]();
}

uint64_t pcap_close_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libpcap_A_dylib)) {
    dlopenHelper_libpcap_A_dylib(a1);
  }
  return MEMORY[0x1F4181B58]();
}

uint64_t pcap_create_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libpcap_A_dylib)) {
    dlopenHelper_libpcap_A_dylib(a1);
  }
  return MEMORY[0x1F4181B60]();
}

uint64_t pcap_activate_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libpcap_A_dylib)) {
    dlopenHelper_libpcap_A_dylib(a1);
  }
  return MEMORY[0x1F4181B50]();
}

uint64_t pcap_ng_dump_open_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libpcap_A_dylib)) {
    dlopenHelper_libpcap_A_dylib(a1);
  }
  return MEMORY[0x1F4181B90]();
}

uint64_t NEFlowDirectorDestroy_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libnetworkextension_dylib)) {
    dlopenHelper_libnetworkextension_dylib(a1);
  }
  return MEMORY[0x1F4181188]();
}

uint64_t NEFlowDirectorCreateBridge_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libnetworkextension_dylib)) {
    dlopenHelper_libnetworkextension_dylib(a1);
  }
  return MEMORY[0x1F4181180]();
}

uint64_t NEFlowDirectorStart_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libnetworkextension_dylib)) {
    dlopenHelper_libnetworkextension_dylib(a1);
  }
  return MEMORY[0x1F41811D8]();
}

uint64_t ne_filter_protocol_identifier_delayInitStub(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libnetworkextension_dylib)) {
    dlopenHelper_libnetworkextension_dylib(a1);
  }
  return MEMORY[0x1F4181288]();
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_CoreAnalytics(double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_libnwswifttls_dylib(double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_LoggingSupport(double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_RunningBoardServices(double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_UserManagement(double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_Rapport(double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_libnetworkextension_dylib(double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_libcupolicy_dylib(double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_MobileAsset(double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_libpcap_A_dylib(double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_AssertionServices(double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_SymptomAnalytics(double a1)
{
  return a1;
}

double __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> dlopenHelper_CoreWiFi(double a1)
{
  return a1;
}

void gotLoadHelper_x21__OBJC_CLASS___BKSApplicationStateMonitor(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_AssertionServices)) {
    dlopenHelper_AssertionServices(a1);
  }
}

double gotLoadHelper_x8__OBJC_CLASS___BKSApplicationStateMonitor(double result)
{
  if (!atomic_load(&dlopenHelperFlag_AssertionServices)) {
    return dlopenHelper_AssertionServices(result);
  }
  return result;
}

double gotLoadHelper_x8__BKSApplicationStateDisplayIDKey(double result)
{
  if (!atomic_load(&dlopenHelperFlag_AssertionServices)) {
    return dlopenHelper_AssertionServices(result);
  }
  return result;
}

double gotLoadHelper_x8__BKSApplicationStateProcessIDKey(double result)
{
  if (!atomic_load(&dlopenHelperFlag_AssertionServices)) {
    return dlopenHelper_AssertionServices(result);
  }
  return result;
}

double gotLoadHelper_x8__BKSApplicationStateKey(double result)
{
  if (!atomic_load(&dlopenHelperFlag_AssertionServices)) {
    return dlopenHelper_AssertionServices(result);
  }
  return result;
}

double gotLoadHelper_x8__network_usage_policy_create_client(double result)
{
  if (!atomic_load(&dlopenHelperFlag_libcupolicy_dylib)) {
    return dlopenHelper_libcupolicy_dylib(result);
  }
  return result;
}

double gotLoadHelper_x8__nwswifttls_copy_definition(double result)
{
  if (!atomic_load((unsigned int *)&dlopenHelperFlag_libnwswifttls_dylib)) {
    return dlopenHelper_libnwswifttls_dylib(result);
  }
  return result;
}

double gotLoadHelper_x8__OBJC_CLASS___RPFileTransferItem(double result)
{
  if (!atomic_load(&dlopenHelperFlag_Rapport)) {
    return dlopenHelper_Rapport(result);
  }
  return result;
}

double gotLoadHelper_x8__OBJC_CLASS___RPFileTransferSession(double result)
{
  if (!atomic_load(&dlopenHelperFlag_Rapport)) {
    return dlopenHelper_Rapport(result);
  }
  return result;
}

void gotLoadHelper_x19__OBJC_CLASS___OSLogPreferencesSubsystem(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_LoggingSupport)) {
    dlopenHelper_LoggingSupport(a1);
  }
}

double gotLoadHelper_x8__OBJC_CLASS___MAAssetQuery(double result)
{
  if (!atomic_load(dlopenHelperFlag_MobileAsset)) {
    return dlopenHelper_MobileAsset(result);
  }
  return result;
}

void gotLoadHelper_x26__OBJC_CLASS___MAAsset(double a1)
{
  if (!atomic_load(dlopenHelperFlag_MobileAsset)) {
    dlopenHelper_MobileAsset(a1);
  }
}

void gotLoadHelper_x24__OBJC_CLASS___CWFInterface(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_CoreWiFi)) {
    dlopenHelper_CoreWiFi(a1);
  }
}

double gotLoadHelper_x8__OBJC_CLASS___OSLogEventLiveStream(double result)
{
  if (!atomic_load(&dlopenHelperFlag_LoggingSupport)) {
    return dlopenHelper_LoggingSupport(result);
  }
  return result;
}

void gotLoadHelper_x19__OBJC_CLASS___OSLogEventLiveSource(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_LoggingSupport)) {
    dlopenHelper_LoggingSupport(a1);
  }
}

void gotLoadHelper_x19__OBJC_CLASS___RBSProcessHandle(double a1)
{
  if (!atomic_load(dlopenHelperFlag_RunningBoardServices)) {
    dlopenHelper_RunningBoardServices(a1);
  }
}

void gotLoadHelper_x22__OBJC_CLASS___UMUserPersona(double a1)
{
  if (!atomic_load((unsigned int *)&dlopenHelperFlag_UserManagement)) {
    dlopenHelper_UserManagement(a1);
  }
}

void gotLoadHelper_x20__OBJC_CLASS___NWActivityXPC(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_SymptomAnalytics)) {
    dlopenHelper_SymptomAnalytics(a1);
  }
}

double gotLoadHelper_x8__nwrapport_copy_protocol_definition(double result)
{
  if (!atomic_load(&dlopenHelperFlag_Rapport)) {
    return dlopenHelper_Rapport(result);
  }
  return result;
}

double gotLoadHelper_x8__NEFlowDirectorCreateBridge(double result)
{
  if (!atomic_load(&dlopenHelperFlag_libnetworkextension_dylib)) {
    return dlopenHelper_libnetworkextension_dylib(result);
  }
  return result;
}

void gotLoadHelper_x19__OBJC_CLASS___UMUserManager(double a1)
{
  if (!atomic_load((unsigned int *)&dlopenHelperFlag_UserManagement)) {
    dlopenHelper_UserManagement(a1);
  }
}

double gotLoadHelper_x8__ne_filter_protocol_identifier(double result)
{
  if (!atomic_load(&dlopenHelperFlag_libnetworkextension_dylib)) {
    return dlopenHelper_libnetworkextension_dylib(result);
  }
  return result;
}

void gotLoadHelper_x19__ne_filter_protocol_identifier(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libnetworkextension_dylib)) {
    dlopenHelper_libnetworkextension_dylib(a1);
  }
}

void gotLoadHelper_x20__ne_filter_protocol_identifier(double a1)
{
  if (!atomic_load(&dlopenHelperFlag_libnetworkextension_dylib)) {
    dlopenHelper_libnetworkextension_dylib(a1);
  }
}