uint64_t IconView.bundleIdentifier.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

double variable initialization expression of PromptHeaderView.horizontalPadding()
{
  return 16.0;
}

uint64_t PromptHeaderView.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = static HorizontalAlignment.leading.getter();
  __src[0] = a1;
  __src[1] = a2;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v4 = Text.init<A>(_:)();
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  static Font.headline.getter();
  uint64_t v9 = Text.font(_:)();
  uint64_t v11 = v10;
  char v13 = v12;
  uint64_t v15 = v14;
  swift_release();
  char v16 = v13 & 1;
  outlined consume of Text.Storage(v4, v6, v8);
  swift_bridgeObjectRelease();
  char v17 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  LOBYTE(v4) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  char v66 = 0;
  char v64 = v16;
  char v61 = 0;
  char v58 = 0;
  uint64_t v34 = v31;
  uint64_t v35 = 0x4010000000000000;
  char v36 = 0;
  *(_DWORD *)v37 = *(_DWORD *)v65;
  *(_DWORD *)&v37[3] = *(_DWORD *)&v65[3];
  uint64_t v38 = v9;
  uint64_t v39 = v11;
  char v40 = v16;
  *(_DWORD *)&v41[3] = *(_DWORD *)&v63[3];
  *(_DWORD *)v41 = *(_DWORD *)v63;
  uint64_t v42 = v15;
  char v43 = v17;
  *(_DWORD *)&v44[3] = *(_DWORD *)&v62[3];
  *(_DWORD *)v44 = *(_DWORD *)v62;
  uint64_t v45 = v19;
  uint64_t v46 = v21;
  uint64_t v47 = v23;
  uint64_t v48 = v25;
  char v49 = 0;
  *(_DWORD *)&v50[3] = *(_DWORD *)&v60[3];
  *(_DWORD *)v50 = *(_DWORD *)v60;
  char v51 = v4;
  *(_DWORD *)&v52[3] = *(_DWORD *)&v59[3];
  *(_DWORD *)v52 = *(_DWORD *)v59;
  uint64_t v53 = v26;
  uint64_t v54 = v27;
  uint64_t v55 = v28;
  uint64_t v56 = v29;
  char v57 = 0;
  static Alignment.leading.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)__src, 0.0, 1, 0.0, 1);
  outlined consume of Text.Storage(v9, v11, v16);
  swift_bridgeObjectRelease();
  memcpy(__dst, __src, 0x108uLL);
  memcpy(__src, __dst, sizeof(__src));
  __int16 v33 = 256;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<Text>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<Text>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<Text>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<Text>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<Text>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  View.ambientDrawable(renderWithDrawingGroup:)();
  return outlined release of ModifiedContent<ModifiedContent<ModifiedContent<VStack<Text>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>((uint64_t)__dst);
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t outlined consume of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  memcpy((void *)a9, v13, 0x91uLL);
  memcpy((void *)(a9 + 152), __src, 0x70uLL);

  return outlined retain of ModifiedContent<ModifiedContent<VStack<Text>, _PaddingLayout>, _PaddingLayout>((uint64_t)v13);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<Text>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<Text>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<Text>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<Text>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<Text>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<Text>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<Text>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<Text>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<Text>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<Text>, _PaddingLayout>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<VStack<Text>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<Text>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<Text>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<VStack<Text>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<VStack<Text>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type VStack<Text> and conformance VStack<A>);
}

unint64_t lazy protocol witness table accessor for type VStack<Text> and conformance VStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type VStack<Text> and conformance VStack<A>;
  if (!lazy protocol witness table cache variable for type VStack<Text> and conformance VStack<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for VStack<Text>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VStack<Text> and conformance VStack<A>);
  }
  return result;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<VStack<Text>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>(uint64_t a1)
{
  return a1;
}

double PromptHeaderView.init(model:)()
{
  return 16.0;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PromptHeaderView()
{
  return static View._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PromptHeaderView()
{
  return static View._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PromptHeaderView()
{
  return static View._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance PromptHeaderView()
{
  return PromptHeaderView.body.getter(*v0, v0[1]);
}

double variable initialization expression of DisambiguateItemsView._imageMaxWidth()
{
  return 0.0;
}

unint64_t lazy protocol witness table accessor for type Context and conformance Context()
{
  unint64_t result = lazy protocol witness table cache variable for type Context and conformance Context;
  if (!lazy protocol witness table cache variable for type Context and conformance Context)
  {
    type metadata accessor for Context();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Context and conformance Context);
  }
  return result;
}

double variable initialization expression of AutoShortcutFirstRunWatchView.displayPhrasesPadding()
{
  return 6.0;
}

uint64_t default argument 0 of SiriLinkViewModel.asPatternParams(with:)()
{
  return Dictionary.init(dictionaryLiteral:)();
}

void *default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)()
{
  id v0 = [self standardClient];
  *(void *)(swift_allocObject() + 16) = v0;
  return &async function pointer to partial apply for implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:);
}

uint64_t sub_47C8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  char v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *char v7 = v3;
  v7[1] = partial apply for implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:);
  return implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)(a1, a2, v6);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t variable initialization expression of EnableTCCView._context()
{
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context();

  return EnvironmentObject.init()();
}

uint64_t associated type witness table accessor for View.Body : View in PromptHeaderView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t initializeBufferWithCopyOfBuffer for PromptHeaderView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for PromptHeaderView()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PromptHeaderView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PromptHeaderView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for PromptHeaderView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptHeaderView(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptHeaderView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PromptHeaderView()
{
  return &type metadata for PromptHeaderView;
}

uint64_t sub_4BBC()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for VRXVisualResponseLocation(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CGSize(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CGSize(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for VRXVisualResponseLocation(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<VStack<Text>, _PaddingLayout>, _PaddingLayout>(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

double OUTLINED_FUNCTION_0()
{
  return 12.0;
}

uint64_t OUTLINED_FUNCTION_1()
{
  return 0;
}

void one-time initialization function for RunOnCompanionToken()
{
  static VoiceCommandConstants.RunOnCompanionToken = 0x494E41504D4F4340;
  *(void *)algn_6BA78 = 0xEA00000000004E4FLL;
}

uint64_t *VoiceCommandConstants.RunOnCompanionToken.unsafeMutableAddressor()
{
  if (one-time initialization token for RunOnCompanionToken != -1) {
    swift_once();
  }
  return &static VoiceCommandConstants.RunOnCompanionToken;
}

uint64_t static VoiceCommandConstants.RunOnCompanionToken.getter()
{
  if (one-time initialization token for RunOnCompanionToken != -1) {
    swift_once();
  }
  uint64_t v0 = static VoiceCommandConstants.RunOnCompanionToken;
  swift_bridgeObjectRetain();
  return v0;
}

void *VoiceCommandConstants.WaitForDoneButtonDirectInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.WaitForDoneButtonDirectInvocation;
}

unint64_t static VoiceCommandConstants.WaitForDoneButtonDirectInvocation.getter()
{
  return OUTLINED_FUNCTION_0_0(59);
}

void *VoiceCommandConstants.TopLevelShortcutDirectInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.TopLevelShortcutDirectInvocation;
}

unint64_t static VoiceCommandConstants.TopLevelShortcutDirectInvocation.getter()
{
  return OUTLINED_FUNCTION_0_0(65);
}

void *VoiceCommandConstants.ProvisionalLinkDirectInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ProvisionalLinkDirectInvocation;
}

unint64_t static VoiceCommandConstants.ProvisionalLinkDirectInvocation.getter()
{
  return OUTLINED_FUNCTION_0_0(70);
}

void *VoiceCommandConstants.DisambiguationItemDirectInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.DisambiguationItemDirectInvocation;
}

unint64_t static VoiceCommandConstants.DisambiguationItemDirectInvocation.getter()
{
  return OUTLINED_FUNCTION_0_0(67);
}

void *VoiceCommandConstants.ConfirmationDirectInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ConfirmationDirectInvocation;
}

unint64_t static VoiceCommandConstants.ConfirmationDirectInvocation.getter()
{
  return OUTLINED_FUNCTION_0_0(61);
}

void *VoiceCommandConstants.InputDirectInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.InputDirectInvocation;
}

unint64_t static VoiceCommandConstants.InputDirectInvocation.getter()
{
  return OUTLINED_FUNCTION_0_0(60);
}

void *VoiceCommandConstants.ServerAppShortcutInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ServerAppShortcutInvocation;
}

unint64_t static VoiceCommandConstants.ServerAppShortcutInvocation.getter()
{
  return OUTLINED_FUNCTION_0_0(75);
}

void *VoiceCommandConstants.PausedShortcutInvocation.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.PausedShortcutInvocation;
}

unint64_t static VoiceCommandConstants.PausedShortcutInvocation.getter()
{
  return OUTLINED_FUNCTION_0_0(63);
}

void *VoiceCommandConstants.VoiceShortcutsAppId.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.VoiceShortcutsAppId;
}

unint64_t static VoiceCommandConstants.VoiceShortcutsAppId.getter()
{
  return OUTLINED_FUNCTION_0_0(28);
}

void *VoiceCommandConstants.ShortcutsAppIdentifier.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ShortcutsAppIdentifier;
}

unint64_t static VoiceCommandConstants.ShortcutsAppIdentifier.getter()
{
  return OUTLINED_FUNCTION_0_0(19);
}

void *VoiceCommandConstants.ShortcutsAppIdentifierWatch.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ShortcutsAppIdentifierWatch;
}

unint64_t static VoiceCommandConstants.ShortcutsAppIdentifierWatch.getter()
{
  return OUTLINED_FUNCTION_0_0(25);
}

void *VoiceCommandConstants.ContactsAppIdentifierMobile.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ContactsAppIdentifierMobile;
}

unint64_t static VoiceCommandConstants.ContactsAppIdentifierMobile.getter()
{
  return OUTLINED_FUNCTION_0_0(27);
}

void *VoiceCommandConstants.ContactsAppIdentifierMac.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ContactsAppIdentifierMac;
}

unint64_t static VoiceCommandConstants.ContactsAppIdentifierMac.getter()
{
  return OUTLINED_FUNCTION_0_0(21);
}

void *VoiceCommandConstants.ShortcutsIntents.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.ShortcutsIntents;
}

unint64_t static VoiceCommandConstants.ShortcutsIntents.getter()
{
  return OUTLINED_FUNCTION_0_0(38);
}

void *VoiceCommandConstants.CustomIntentTypePrefix.unsafeMutableAddressor()
{
  return &static VoiceCommandConstants.CustomIntentTypePrefix;
}

unint64_t static VoiceCommandConstants.CustomIntentTypePrefix.getter()
{
  return OUTLINED_FUNCTION_0_0(23);
}

const char *VoiceCommandConstants.MaxConfirmationActionNames.unsafeMutableAddressor()
{
  return "\n";
}

uint64_t static VoiceCommandConstants.MaxConfirmationActionNames.getter()
{
  return 10;
}

ValueMetadata *type metadata accessor for VoiceCommandConstants()
{
  return &type metadata for VoiceCommandConstants;
}

unint64_t OUTLINED_FUNCTION_0_0(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t CustomIntentErrorView.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CustomIntentErrorView();
  return outlined init with copy of WorkflowDataModels.CustomIntentErrorModel(v1 + *(int *)(v3 + 20), a1, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentErrorModel);
}

uint64_t type metadata accessor for CustomIntentErrorView()
{
  uint64_t result = type metadata singleton initialization cache for CustomIntentErrorView;
  if (!type metadata singleton initialization cache for CustomIntentErrorView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t CustomIntentErrorView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  v21[1] = a1;
  v21[0] = type metadata accessor for RFButtonStyle();
  OUTLINED_FUNCTION_0_1();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  char v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CustomIntentErrorView();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  char v16 = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of WorkflowDataModels.CustomIntentErrorModel(v1, (uint64_t)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for CustomIntentErrorView);
  unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v18 = swift_allocObject();
  outlined init with take of CustomIntentErrorView((uint64_t)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, (void (*)(void))type metadata accessor for CustomIntentErrorView);
  v21[4] = v2;
  Button.init(action:label:)();
  static PrimitiveButtonStyle<>.rfButton.getter();
  lazy protocol witness table accessor for type Button<Text> and conformance Button<A>();
  lazy protocol witness table accessor for type RFButtonStyle and conformance RFButtonStyle();
  uint64_t v19 = v21[0];
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v11);
}

uint64_t closure #1 in CustomIntentErrorView.body.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InteractionType?);
  __chkstk_darwin(v0 - 8);
  uint64_t v29 = (uint64_t)&v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionProperty?);
  __chkstk_darwin(v2 - 8);
  uint64_t v28 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StandardActionHandler?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Command();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ActionElement();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CustomIntentErrorView();
  type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  *(void *)uint64_t v10 = CodableAceObject.wrappedValue.getter();
  v10[8] = 1;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for Command.aceCommand(_:), v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_ProtoIdiom>);
  uint64_t v15 = type metadata accessor for _ProtoIdiom();
  uint64_t v16 = *(void *)(v15 - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = swift_allocObject();
  long long v27 = xmmword_48DD0;
  *(_OWORD *)(v18 + 16) = xmmword_48DD0;
  (*(void (**)(unint64_t, void, uint64_t))(v16 + 104))(v18 + v17, enum case for _ProtoIdiom.default(_:), v15);
  specialized Set.init(_nonEmptyArrayLiteral:)(v18);
  ActionElement.init(_:text:idioms:)();
  ActionHandler.wrappedValue.getter();
  uint64_t v19 = type metadata accessor for StandardActionHandler();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v19) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return outlined destroy of StandardActionHandler?((uint64_t)v6, &demangling cache variable for type metadata for StandardActionHandler?);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ActionElementConvertible>);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = v27;
    *(void *)(v21 + 56) = v11;
    *(void *)(v21 + 64) = &protocol witness table for ActionElement;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v21 + 32));
    (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 16))(boxed_opaque_existential_1, v14, v11);
    uint64_t v23 = (uint64_t)v28;
    ActionProperty.init(_:)();
    uint64_t v24 = type metadata accessor for ActionProperty();
    __swift_storeEnumTagSinglePayload(v23, 0, 1, v24);
    uint64_t v25 = type metadata accessor for InteractionType();
    uint64_t v26 = v29;
    __swift_storeEnumTagSinglePayload(v29, 1, 1, v25);
    StandardActionHandler.perform(_:interactionType:)();
    outlined destroy of StandardActionHandler?(v26, &demangling cache variable for type metadata for InteractionType?);
    outlined destroy of StandardActionHandler?(v23, &demangling cache variable for type metadata for ActionProperty?);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v19 - 8) + 8))(v6, v19);
  }
}

uint64_t outlined init with copy of WorkflowDataModels.CustomIntentErrorModel(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_58BC()
{
  uint64_t v1 = (int *)(type metadata accessor for CustomIntentErrorView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t))(v7 + 8))(v6);
  uint64_t v8 = v6 + v1[7];
  swift_bridgeObjectRelease();
  uint64_t v9 = v8 + *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0) + 20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t))(v10 + 8))(v9);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t partial apply for closure #1 in CustomIntentErrorView.body.getter()
{
  type metadata accessor for CustomIntentErrorView();

  return closure #1 in CustomIntentErrorView.body.getter();
}

uint64_t closure #2 in CustomIntentErrorView.body.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for CustomIntentErrorView();
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v2 = Text.init<A>(_:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.headline.getter();
  uint64_t v7 = Text.font(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  uint64_t v13 = v12;
  swift_release();
  outlined consume of Text.Storage(v2, v4, v6);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v11 & 1;
  *(void *)(a1 + 24) = v13;
  return result;
}

uint64_t partial apply for closure #2 in CustomIntentErrorView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in CustomIntentErrorView.body.getter(a1);
}

unint64_t lazy protocol witness table accessor for type Button<Text> and conformance Button<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>;
  if (!lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<Text>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RFButtonStyle and conformance RFButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type RFButtonStyle and conformance RFButtonStyle;
  if (!lazy protocol witness table cache variable for type RFButtonStyle and conformance RFButtonStyle)
  {
    type metadata accessor for RFButtonStyle();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RFButtonStyle and conformance RFButtonStyle);
  }
  return result;
}

uint64_t CustomIntentErrorView.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  ActionHandler.init()();
  uint64_t v4 = type metadata accessor for CustomIntentErrorView();
  return outlined init with take of CustomIntentErrorView(a1, a2 + *(int *)(v4 + 20), (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentErrorModel);
}

uint64_t outlined init with take of CustomIntentErrorView(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t associated type witness table accessor for View.Body : View in CustomIntentErrorView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for CustomIntentErrorView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ActionHandler();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    char v10 = (char *)a2 + v8;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v8);
    uint64_t v12 = *((void *)v10 + 1);
    *uint64_t v9 = v11;
    v9[1] = v12;
    uint64_t v13 = *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0) + 20);
    uint64_t v14 = (char *)v9 + v13;
    uint64_t v15 = &v10[v13];
    swift_bridgeObjectRetain();
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return a1;
}

uint64_t destroy for CustomIntentErrorView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0) + 20);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

uint64_t initializeWithCopy for CustomIntentErrorView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *uint64_t v8 = *(void *)(a2 + v7);
  v8[1] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0) + 20);
  uint64_t v12 = (char *)v8 + v11;
  uint64_t v13 = v9 + v11;
  swift_bridgeObjectRetain();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t assignWithCopy for CustomIntentErrorView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0) + 20);
  uint64_t v11 = (char *)v8 + v10;
  uint64_t v12 = (char *)v9 + v10;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t initializeWithTake for CustomIntentErrorView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + v7) = *v9;
  uint64_t v10 = *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0) + 20);
  uint64_t v11 = v8 + v10;
  uint64_t v12 = (char *)v9 + v10;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t assignWithTake for CustomIntentErrorView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0) + 20);
  uint64_t v12 = (char *)v8 + v11;
  uint64_t v13 = (char *)v9 + v11;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomIntentErrorView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_6258);
}

uint64_t sub_6258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v8 = type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
  }

  return __swift_getEnumTagSinglePayload(v9, a2, v8);
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for CustomIntentErrorView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_6310);
}

uint64_t sub_6310(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v10 = type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0);
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }

  return __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t type metadata completion function for CustomIntentErrorView()
{
  uint64_t result = type metadata accessor for ActionHandler();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_6484()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  unint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined destroy of StandardActionHandler?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t property wrapper backing initializer of DisambiguateItemsView.imageMaxWidth()
{
  State.init(wrappedValue:)();
  return v1;
}

uint64_t DisambiguateItemsView.model.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for DisambiguateItemsView() + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for DisambiguateItemsView()
{
  uint64_t result = type metadata singleton initialization cache for DisambiguateItemsView;
  if (!type metadata singleton initialization cache for DisambiguateItemsView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t DisambiguateItemsView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DisambiguateItemsView();
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v4);
  uint64_t v8 = type metadata accessor for DisambiguationTitle();
  uint64_t v9 = OUTLINED_FUNCTION_9(v8);
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_8();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisambiguationView<ForEach<[WorkflowDataModels.DisambiguationItemModel], ObjectIdentifier, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0>>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_4();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = (uint64_t *)(v2 + *(int *)(v5 + 32));
  uint64_t v19 = *v17;
  unint64_t v18 = v17[1];
  uint64_t v29 = &type metadata for String;
  v30 = &protocol witness table for String;
  if (v18) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = 0;
  }
  unint64_t v21 = 0xE000000000000000;
  if (v18) {
    unint64_t v21 = v18;
  }
  uint64_t v27 = v20;
  unint64_t v28 = v21;
  uint64_t v26 = 0;
  memset(v25, 0, sizeof(v25));
  swift_bridgeObjectRetain();
  DisambiguationTitle.init(text1:thumbnail:)();
  outlined init with copy of DisambiguateItemsView(v2, (uint64_t)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v22 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v23 = swift_allocObject();
  outlined init with take of DisambiguateItemsView((uint64_t)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v23 + v22);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForEach<[WorkflowDataModels.DisambiguationItemModel], ObjectIdentifier, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0>);
  lazy protocol witness table accessor for type ForEach<[WorkflowDataModels.DisambiguationItemModel], ObjectIdentifier, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0> and conformance <> ForEach<A, B, C>();
  DisambiguationView.init(title:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(a1, v16, v10);
}

uint64_t closure #1 in DisambiguateItemsView.body.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DisambiguateItemsView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  v10[3] = *(void *)(a1 + *(int *)(__chkstk_darwin(v2 - 8) + 32) + 16);
  outlined init with copy of DisambiguateItemsView(a1, (uint64_t)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  outlined init with take of DisambiguateItemsView((uint64_t)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [WorkflowDataModels.DisambiguationItemModel]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type [WorkflowDataModels.DisambiguationItemModel] and conformance [A], &demangling cache variable for type metadata for [WorkflowDataModels.DisambiguationItemModel]);
  uint64_t v7 = type metadata accessor for SimpleItemRichView();
  uint64_t v8 = lazy protocol witness table accessor for type SimpleItemRichView and conformance SimpleItemRichView((unint64_t *)&lazy protocol witness table cache variable for type SimpleItemRichView and conformance SimpleItemRichView, (void (*)(uint64_t))&type metadata accessor for SimpleItemRichView);
  v10[1] = v7;
  v10[2] = v8;
  swift_getOpaqueTypeConformance2();
  lazy protocol witness table accessor for type SimpleItemRichView and conformance SimpleItemRichView((unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel and conformance WorkflowDataModels.DisambiguationItemModel, (void (*)(uint64_t))type metadata accessor for WorkflowDataModels.DisambiguationItemModel);
  return ForEach<>.init(_:content:)();
}

uint64_t outlined init with copy of DisambiguateItemsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DisambiguateItemsView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of DisambiguateItemsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DisambiguateItemsView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in DisambiguateItemsView.body.getter()
{
  uint64_t v1 = type metadata accessor for DisambiguateItemsView();
  OUTLINED_FUNCTION_1_1(v1);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return closure #1 in DisambiguateItemsView.body.getter(v3);
}

unint64_t lazy protocol witness table accessor for type ForEach<[WorkflowDataModels.DisambiguationItemModel], ObjectIdentifier, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0> and conformance <> ForEach<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type ForEach<[WorkflowDataModels.DisambiguationItemModel], ObjectIdentifier, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<[WorkflowDataModels.DisambiguationItemModel], ObjectIdentifier, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0> and conformance <> ForEach<A, B, C>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ForEach<[WorkflowDataModels.DisambiguationItemModel], ObjectIdentifier, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0>);
    type metadata accessor for SimpleItemRichView();
    lazy protocol witness table accessor for type SimpleItemRichView and conformance SimpleItemRichView((unint64_t *)&lazy protocol witness table cache variable for type SimpleItemRichView and conformance SimpleItemRichView, (void (*)(uint64_t))&type metadata accessor for SimpleItemRichView);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<[WorkflowDataModels.DisambiguationItemModel], ObjectIdentifier, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

uint64_t closure #1 in closure #1 in DisambiguateItemsView.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v5 = type metadata accessor for DisambiguateItemsView();
  uint64_t v24 = *(void *)(v5 - 8);
  uint64_t v6 = *(void *)(v24 + 64);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = type metadata accessor for SimpleItemRichView();
  uint64_t v27 = *(void *)(v7 - 8);
  uint64_t v28 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  uint64_t v25 = *(void *)(v10 - 8);
  uint64_t v26 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *a1;
  uint64_t v15 = *(void *)(*a1 + 16);
  uint64_t v14 = *(void *)(*a1 + 24);
  uint64_t v55 = &type metadata for String;
  uint64_t v56 = &protocol witness table for String;
  uint64_t v53 = v15;
  uint64_t v54 = v14;
  uint64_t v16 = *(void *)(v13 + 40);
  if (v16)
  {
    uint64_t v17 = *(void *)(v13 + 32);
    *((void *)&v51 + 1) = &type metadata for String;
    v52 = &protocol witness table for String;
    *(void *)&long long v50 = v17;
    *((void *)&v50 + 1) = v16;
  }
  else
  {
    v52 = 0;
    long long v50 = 0u;
    long long v51 = 0u;
  }
  uint64_t v49 = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  uint64_t v46 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  uint64_t v43 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  uint64_t v40 = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v34 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v18 = v13 + OBJC_IVAR____TtCO16SiriLinkUIPlugin18WorkflowDataModels23DisambiguationItemModel_thumbnail;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  DisambiguateItemsView.getThumbnail(_:)(v18, v31);
  uint64_t v30 = v31[0];
  uint64_t v19 = View.eraseToAnyView()();
  swift_release();
  v31[3] = (uint64_t)&type metadata for AnyView;
  v31[4] = (uint64_t)&protocol witness table for AnyView;
  v31[0] = v19;
  SimpleItemRichView.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:)();
  outlined init with copy of DisambiguateItemsView(a2, (uint64_t)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v20 = (*(unsigned __int8 *)(v24 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v13;
  outlined init with take of DisambiguateItemsView((uint64_t)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v20);
  lazy protocol witness table accessor for type SimpleItemRichView and conformance SimpleItemRichView((unint64_t *)&lazy protocol witness table cache variable for type SimpleItemRichView and conformance SimpleItemRichView, (void (*)(uint64_t))&type metadata accessor for SimpleItemRichView);
  swift_retain();
  uint64_t v22 = v28;
  View.componentTapped(isNavigation:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v22);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(v29, v12, v26);
}

uint64_t DisambiguateItemsView.getThumbnail(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v34 = a2;
  type metadata accessor for DisambiguateItemsView();
  OUTLINED_FUNCTION_0_1();
  uint64_t v31 = v5;
  uint64_t v32 = v4;
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v4);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  uint64_t v9 = OUTLINED_FUNCTION_9(v8);
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_6();
  uint64_t v10 = type metadata accessor for VisualProperty();
  OUTLINED_FUNCTION_0_1();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_4();
  uint64_t v16 = v15 - v14;
  uint64_t v35 = 0;
  LOBYTE(v36) = 1;
  uint64_t v17 = View.eraseToAnyView()();
  outlined init with copy of VisualProperty?(a1, v2, &demangling cache variable for type metadata for VisualProperty?);
  if (__swift_getEnumTagSinglePayload(v2, 1, v10) == 1)
  {
    outlined destroy of StandardActionHandler?(v2, &demangling cache variable for type metadata for VisualProperty?);
    uint64_t v18 = v33;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v16, v2, v10);
    uint64_t v19 = VisualProperty.asAnyView()();
    uint64_t v18 = v33;
    outlined init with copy of DisambiguateItemsView(v33, (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v20 = (*(unsigned __int8 *)(v31 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
    uint64_t v21 = swift_allocObject();
    outlined init with take of DisambiguateItemsView((uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v20);
    uint64_t v22 = static Alignment.center.getter();
    uint64_t v35 = v19;
    long long v36 = partial apply for closure #1 in DisambiguateItemsView.getThumbnail(_:);
    uint64_t v37 = v21;
    uint64_t v38 = v22;
    uint64_t v39 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<AnyView, _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>>>);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>>> and conformance <> ModifiedContent<A, B>();
    uint64_t v24 = View.eraseToAnyView()();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v10);
    uint64_t v17 = v24;
  }
  uint64_t v25 = (uint64_t *)(v18 + *(int *)(v32 + 20));
  uint64_t v26 = *v25;
  uint64_t v27 = (uint64_t (*)())v25[1];
  uint64_t v35 = v26;
  long long v36 = v27;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<CGFloat>);
  State.wrappedValue.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v35 = v17;
  long long v36 = v41;
  LOBYTE(v37) = v42;
  uint64_t v38 = v43;
  LOBYTE(v39) = v44;
  long long v40 = v45;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<AnyView, _FrameLayout>);
  lazy protocol witness table accessor for type ModifiedContent<AnyView, _FrameLayout> and conformance <> ModifiedContent<A, B>();
  uint64_t v28 = View.eraseToAnyView()();
  uint64_t result = swift_release_n();
  *uint64_t v34 = v28;
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<AnyView, _FrameLayout>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in DisambiguateItemsView.body.getter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StandardActionHandler?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ActionHandler.wrappedValue.getter();
  static DisambiguateItemsView.performAction(item:actionHandler:)(a1, (uint64_t)v4);
  return outlined destroy of StandardActionHandler?((uint64_t)v4, &demangling cache variable for type metadata for StandardActionHandler?);
}

void static DisambiguateItemsView.performAction(item:actionHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InteractionType?);
  uint64_t v7 = OUTLINED_FUNCTION_9(v6);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionProperty?);
  uint64_t v12 = OUTLINED_FUNCTION_9(v11);
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_6();
  type metadata accessor for Command();
  OUTLINED_FUNCTION_0_1();
  uint64_t v45 = v13;
  uint64_t v46 = v14;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_8();
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StandardActionHandler?);
  uint64_t v16 = OUTLINED_FUNCTION_9(v15);
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_4();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = type metadata accessor for StandardActionHandler();
  OUTLINED_FUNCTION_0_1();
  uint64_t v22 = v21;
  __chkstk_darwin(v23);
  OUTLINED_FUNCTION_4();
  uint64_t v26 = v25 - v24;
  outlined init with copy of VisualProperty?(a2, v19, &demangling cache variable for type metadata for StandardActionHandler?);
  if (__swift_getEnumTagSinglePayload(v19, 1, v20) != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v26, v19, v20);
    uint64_t v31 = a1 + OBJC_IVAR____TtCO16SiriLinkUIPlugin18WorkflowDataModels23DisambiguationItemModel_invocationCommand;
    uint64_t v33 = *(void *)(a1
                    + OBJC_IVAR____TtCO16SiriLinkUIPlugin18WorkflowDataModels23DisambiguationItemModel_invocationCommand);
    uint64_t v32 = *(void *)(a1
                    + OBJC_IVAR____TtCO16SiriLinkUIPlugin18WorkflowDataModels23DisambiguationItemModel_invocationCommand
                    + 8);
    int v34 = *(unsigned __int8 *)(v31 + 24);
    if (v34)
    {
      if (v34 != 1)
      {
        *(void *)uint64_t v3 = v33;
        *(void *)(v3 + 8) = v32;
        *(unsigned char *)(v3 + 16) = 1;
        uint64_t v38 = v45;
        uint64_t v37 = v46;
        (*(void (**)(uint64_t, void, uint64_t))(v46 + 104))(v3, enum case for Command.machineUtterance(_:), v45);
        swift_bridgeObjectRetain();
        goto LABEL_13;
      }
      swift_bridgeObjectRetain();
      uint64_t v35 = swift_bridgeObjectRetain();
      specialized _dictionaryUpCast<A, B, C, D>(_:)(v35);
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v36 = swift_bridgeObjectRetain();
      specialized _dictionaryUpCast<A, B, C, D>(_:)(v36);
    }
    swift_bridgeObjectRelease();
    static Command.directInvocation(identifier:payload:isNavigation:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v38 = v45;
    uint64_t v37 = v46;
LABEL_13:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ActionElementConvertible>);
    uint64_t v39 = swift_allocObject();
    *(_OWORD *)(v39 + 16) = xmmword_48DD0;
    *(void *)(v39 + 56) = v38;
    *(void *)(v39 + 64) = &protocol witness table for Command;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v39 + 32));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v37 + 16))(boxed_opaque_existential_1, v3, v38);
    ActionProperty.init(_:)();
    uint64_t v41 = type metadata accessor for ActionProperty();
    __swift_storeEnumTagSinglePayload(v2, 0, 1, v41);
    uint64_t v42 = enum case for InteractionType.componentTapped(_:);
    uint64_t v43 = type metadata accessor for InteractionType();
    OUTLINED_FUNCTION_2();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 104))(v10, v42, v43);
    __swift_storeEnumTagSinglePayload(v10, 0, 1, v43);
    StandardActionHandler.perform(_:interactionType:)();
    outlined destroy of StandardActionHandler?(v10, &demangling cache variable for type metadata for InteractionType?);
    outlined destroy of StandardActionHandler?(v2, &demangling cache variable for type metadata for ActionProperty?);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v3, v38);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v26, v20);
    return;
  }
  outlined destroy of StandardActionHandler?(v19, &demangling cache variable for type metadata for StandardActionHandler?);
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.voiceCommands);
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v30 = 0;
    _os_log_impl(&dword_0, v28, v29, "#DisambiguateItemsView missing ActionHandler", v30, 2u);
    swift_slowDealloc();
  }
}

uint64_t closure #1 in DisambiguateItemsView.getThumbnail(_:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DisambiguateItemsView();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = static Color.clear.getter();
  outlined init with copy of DisambiguateItemsView(a1, (uint64_t)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  uint64_t result = outlined init with take of DisambiguateItemsView((uint64_t)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8);
  *a2 = v7;
  a2[1] = (uint64_t)specialized implicit closure #1 in closure #1 in DisambiguateItemsView.getThumbnail(_:);
  a2[2] = 0;
  a2[3] = (uint64_t)partial apply for closure #1 in closure #1 in DisambiguateItemsView.getThumbnail(_:);
  a2[4] = v9;
  return result;
}

uint64_t partial apply for closure #1 in DisambiguateItemsView.getThumbnail(_:)()
{
  uint64_t v0 = type metadata accessor for DisambiguateItemsView();
  OUTLINED_FUNCTION_1_1(v0);
  OUTLINED_FUNCTION_7();

  return closure #1 in DisambiguateItemsView.getThumbnail(_:)(v1, v2);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<AnyView, _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>>>);
    lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>, &demangling cache variable for type metadata for _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined init with copy of VisualProperty?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t specialized implicit closure #1 in closure #1 in DisambiguateItemsView.getThumbnail(_:)@<X0>(void *a1@<X8>)
{
  uint64_t result = GeometryProxy.size.getter();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t closure #1 in closure #1 in DisambiguateItemsView.getThumbnail(_:)()
{
  return State.wrappedValue.setter();
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v31 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v30 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v10 = v9 | (v8 << 6);
  while (1)
  {
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t v18 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v10);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    *(void *)&v40[0] = v17;
    *((void *)&v40[0] + 1) = v16;
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v19, v20);
    swift_dynamicCast();
    swift_dynamicCast();
    long long v36 = v32;
    long long v37 = v33;
    uint64_t v38 = v34;
    outlined init with take of Any(&v35, v39);
    long long v32 = v36;
    long long v33 = v37;
    uint64_t v34 = v38;
    outlined init with take of Any(v39, v40);
    outlined init with take of Any(v40, &v36);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v21 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)&v6[8 * (v22 >> 6)]) == 0)
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      while (++v23 != v26 || (v25 & 1) == 0)
      {
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)&v6[8 * v23];
        if (v28 != -1)
        {
          unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)&v6[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)&v6[(v24 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v24;
    uint64_t v29 = v2[6] + 40 * v24;
    *(_OWORD *)uint64_t v29 = v32;
    *(_OWORD *)(v29 + 16) = v33;
    *(void *)(v29 + 32) = v34;
    uint64_t result = (uint64_t)outlined init with take of Any(&v36, (_OWORD *)(v2[7] + 32 * v24));
    ++v2[2];
    if (v5) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_38;
    }
    if (v11 >= v30) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v31 + 8 * v11);
    int64_t v13 = v8 + 1;
    if (!v12)
    {
      int64_t v13 = v8 + 2;
      if (v8 + 2 >= v30) {
        goto LABEL_36;
      }
      unint64_t v12 = *(void *)(v31 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v8 + 3;
        if (v8 + 3 >= v30) {
          goto LABEL_36;
        }
        unint64_t v12 = *(void *)(v31 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v8 + 4;
          if (v8 + 4 >= v30) {
            goto LABEL_36;
          }
          unint64_t v12 = *(void *)(v31 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v8 = v13;
  }
  int64_t v14 = v8 + 5;
  if (v8 + 5 >= v30)
  {
LABEL_36:
    swift_release();
    outlined consume of [String : Data].Iterator._Variant();
    return (uint64_t)v2;
  }
  unint64_t v12 = *(void *)(v31 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v8 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v30) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v31 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  long long v28;
  long long v29;
  uint64_t v30;
  long long v31;
  long long v32;
  long long v33;
  uint64_t v34;
  _OWORD v35[2];
  _OWORD v36[2];

  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  BOOL v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  unint64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v10 = v9 | (v8 << 6);
  while (1)
  {
    uint64_t v15 = (void *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v16 = v15[1];
    *(void *)&v36[0] = *v15;
    *((void *)&v36[0] + 1) = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    outlined init with take of Any(&v31, v35);
    uint64_t v28 = v32;
    uint64_t v29 = v33;
    int64_t v30 = v34;
    outlined init with take of Any(v35, v36);
    outlined init with take of Any(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v17 = -1 << *((unsigned char *)v2 + 32);
    uint64_t v18 = result & ~v17;
    uint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*(void *)&v6[8 * (v18 >> 6)]) == 0)
    {
      uint64_t v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v17) >> 6;
      while (++v19 != v22 || (v21 & 1) == 0)
      {
        unint64_t v23 = v19 == v22;
        if (v19 == v22) {
          uint64_t v19 = 0;
        }
        v21 |= v23;
        unint64_t v24 = *(void *)&v6[8 * v19];
        if (v24 != -1)
        {
          unint64_t v20 = __clz(__rbit64(~v24)) + (v19 << 6);
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    unint64_t v20 = __clz(__rbit64((-1 << v18) & ~*(void *)&v6[8 * (v18 >> 6)])) | v18 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)&v6[(v20 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v20;
    char v25 = v2[6] + 40 * v20;
    *(_OWORD *)char v25 = v28;
    *(_OWORD *)(v25 + 16) = v29;
    *(void *)(v25 + 32) = v30;
    uint64_t result = (uint64_t)outlined init with take of Any(&v32, (_OWORD *)(v2[7] + 32 * v20));
    ++v2[2];
    if (v5) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_38;
    }
    if (v11 >= v26) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v11);
    int64_t v13 = v8 + 1;
    if (!v12)
    {
      int64_t v13 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_36;
      }
      unint64_t v12 = *(void *)(v27 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_36;
        }
        unint64_t v12 = *(void *)(v27 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_36;
          }
          unint64_t v12 = *(void *)(v27 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v8 = v13;
  }
  int64_t v14 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_36:
    swift_release();
    outlined consume of [String : Data].Iterator._Variant();
    return (uint64_t)v2;
  }
  unint64_t v12 = *(void *)(v27 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v8 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

double DisambiguateItemsView.init(model:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  ActionHandler.init()();
  uint64_t v8 = type metadata accessor for DisambiguateItemsView();
  unint64_t v9 = (double *)(a4 + *(int *)(v8 + 20));
  State.init(wrappedValue:)();
  double result = v12;
  *unint64_t v9 = v12;
  *((void *)v9 + 1) = v13;
  int64_t v11 = (void *)(a4 + *(int *)(v8 + 24));
  *int64_t v11 = a1;
  v11[1] = a2;
  v11[2] = a3;
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t serialize(_:at:)(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in DisambiguateItemsView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for DisambiguateItemsView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ActionHandler();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    unint64_t v10 = (uint64_t *)((char *)a1 + v8);
    int64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *unint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    int64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    v13[2] = v14[2];
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for DisambiguateItemsView(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DisambiguateItemsView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  unint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  v12[2] = v13[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DisambiguateItemsView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_retain();
  swift_release();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11[2] = v12[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for DisambiguateItemsView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  return a1;
}

uint64_t assignWithTake for DisambiguateItemsView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_release();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  v11[2] = v12[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisambiguateItemsView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_89D0);
}

uint64_t sub_89D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 24) + 16);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for DisambiguateItemsView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_8A74);
}

void sub_8A74(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 16) = (a2 - 1);
  }
}

uint64_t type metadata completion function for DisambiguateItemsView()
{
  uint64_t result = type metadata accessor for ActionHandler();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_8BA0()
{
  return lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type DisambiguationView<ForEach<[WorkflowDataModels.DisambiguationItemModel], ObjectIdentifier, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0>> and conformance DisambiguationView<A>, &demangling cache variable for type metadata for DisambiguationView<ForEach<[WorkflowDataModels.DisambiguationItemModel], ObjectIdentifier, <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0>>);
}

void *sub_8BDC()
{
  return &protocol witness table for AnyView;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in DisambiguateItemsView.getThumbnail(_:)()
{
  uint64_t v0 = type metadata accessor for DisambiguateItemsView();
  OUTLINED_FUNCTION_1_1(v0);

  return closure #1 in closure #1 in DisambiguateItemsView.getThumbnail(_:)();
}

uint64_t objectdestroyTm()
{
  type metadata accessor for DisambiguateItemsView();
  OUTLINED_FUNCTION_2_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = (v5 + 16) & ~v5;
  uint64_t v7 = v6 + *(void *)(v4 + 64);
  uint64_t v8 = v5 | 7;
  uint64_t v9 = v0 + v6;
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t))(v10 + 8))(v9);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v7, v8);
}

uint64_t partial apply for closure #1 in closure #1 in DisambiguateItemsView.body.getter()
{
  uint64_t v0 = type metadata accessor for DisambiguateItemsView();
  OUTLINED_FUNCTION_1_1(v0);
  uint64_t v1 = (uint64_t *)OUTLINED_FUNCTION_7();

  return closure #1 in closure #1 in DisambiguateItemsView.body.getter(v1, v2, v3);
}

uint64_t lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type SimpleItemRichView and conformance SimpleItemRichView(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_8E68()
{
  type metadata accessor for DisambiguateItemsView();
  OUTLINED_FUNCTION_2_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = (v5 + 24) & ~v5;
  uint64_t v7 = v6 + *(void *)(v4 + 64);
  uint64_t v8 = v5 | 7;
  swift_release();
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t))(v9 + 8))(v0 + v6);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v7, v8);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in DisambiguateItemsView.body.getter()
{
  uint64_t v1 = type metadata accessor for DisambiguateItemsView();
  OUTLINED_FUNCTION_1_1(v1);
  uint64_t v2 = *(void *)(v0 + 16);

  return closure #1 in closure #1 in closure #1 in DisambiguateItemsView.body.getter(v2);
}

uint64_t OUTLINED_FUNCTION_1_1(uint64_t a1)
{
  return a1 - 8;
}

uint64_t OUTLINED_FUNCTION_6()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9(uint64_t a1)
{
  return a1 - 8;
}

uint64_t SimpleItemStandard.init(text:action:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of TextPropertyConvertible(a1, (uint64_t)v21);
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v14 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v11 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v8 = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  outlined init with copy of TextPropertyConvertible(a2, (uint64_t)v5);
  SimpleItemStandard.init(text1:text2:text3:text4:text5:text6:action:componentName:linkIdentifier:)();
  __swift_destroy_boxed_opaque_existential_1(a2);
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t outlined init with copy of TextPropertyConvertible(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t SimpleItemStandard.id.getter()
{
  return SimpleItemStandard.id.getter((void (*)(uint64_t))&SimpleItemStandard.text1.getter);
}

uint64_t protocol witness for Identifiable.id.getter in conformance SimpleItemStandard@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SimpleItemStandard.id.getter();
  *a1 = result;
  return result;
}

uint64_t SimpleItemRich.init(text:action:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of TextPropertyConvertible(a1, (uint64_t)v30);
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v14 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v11 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v8 = 0;
  long long v6 = 0u;
  long long v7 = 0u;
  outlined init with copy of TextPropertyConvertible(a2, (uint64_t)v5);
  SimpleItemRich.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:action:componentName:linkIdentifier:)();
  __swift_destroy_boxed_opaque_existential_1(a2);
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t SimpleItemRich.id.getter()
{
  return SimpleItemStandard.id.getter((void (*)(uint64_t))&SimpleItemRich.text1.getter);
}

uint64_t SimpleItemStandard.id.getter(void (*a1)(uint64_t))
{
  uint64_t v2 = type metadata accessor for TextProperty();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  long long v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v4);
  uint64_t v7 = TextProperty.hashValue.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v7;
}

void *associated type witness table accessor for Identifiable.ID : Hashable in SimpleItemStandard()
{
  return &protocol witness table for Int;
}

uint64_t protocol witness for Identifiable.id.getter in conformance SimpleItemRich@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SimpleItemRich.id.getter();
  *a1 = result;
  return result;
}

uint64_t ConfirmationBinaryButtonView.confirmLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ConfirmationBinaryButtonView() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for ConfirmationBinaryButtonView()
{
  uint64_t result = type metadata singleton initialization cache for ConfirmationBinaryButtonView;
  if (!type metadata singleton initialization cache for ConfirmationBinaryButtonView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ConfirmationBinaryButtonView.confirmLabel.setter()
{
  uint64_t v3 = (void *)(v1 + *(int *)(OUTLINED_FUNCTION_4_0() + 20));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v3 = v2;
  v3[1] = v0;
  return result;
}

SiriLinkUIPlugin::IconView (__swiftcall *ConfirmationBinaryButtonView.confirmLabel.modify())(Swift::String bundleIdentifier)
{
  return IconView.init(bundleIdentifier:);
}

uint64_t ConfirmationBinaryButtonView.cancelLabel.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for ConfirmationBinaryButtonView() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ConfirmationBinaryButtonView.cancelLabel.setter()
{
  uint64_t v3 = (void *)(v1 + *(int *)(OUTLINED_FUNCTION_4_0() + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v3 = v2;
  v3[1] = v0;
  return result;
}

SiriLinkUIPlugin::IconView (__swiftcall *ConfirmationBinaryButtonView.cancelLabel.modify())(Swift::String bundleIdentifier)
{
  return IconView.init(bundleIdentifier:);
}

uint64_t ConfirmationBinaryButtonView.buttonStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ConfirmationBinaryButtonView() + 28);
  type metadata accessor for ButtonItemButtonStyle();
  OUTLINED_FUNCTION_2();
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);

  return v6(a1, v3, v4);
}

uint64_t ConfirmationBinaryButtonView.buttonStyle.setter()
{
  uint64_t v2 = v1 + *(int *)(OUTLINED_FUNCTION_8_0() + 28);
  type metadata accessor for ButtonItemButtonStyle();
  OUTLINED_FUNCTION_2();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 40);

  return v5(v2, v0, v3);
}

SiriLinkUIPlugin::IconView (__swiftcall *ConfirmationBinaryButtonView.buttonStyle.modify())(Swift::String bundleIdentifier)
{
  return IconView.init(bundleIdentifier:);
}

uint64_t ConfirmationBinaryButtonView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t v40 = a1;
  uint64_t v4 = type metadata accessor for ConfirmationBinaryButtonView();
  uint64_t v5 = v4 - 8;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v41 = v10;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  OUTLINED_FUNCTION_0_1();
  uint64_t v38 = v12;
  uint64_t v39 = v13;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_4();
  uint64_t v14 = (uint64_t *)(v3 + *(int *)(v5 + 28));
  uint64_t v15 = v14[1];
  uint64_t v43 = *v14;
  uint64_t v44 = v15;
  outlined init with copy of ConfirmationBinaryButtonView(v3, (uint64_t)v8);
  uint64_t v16 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v17 = ((v16 + 32) & ~v16) + v7;
  uint64_t v18 = (v16 + 32) & ~v16;
  uint64_t v35 = v18;
  uint64_t v36 = v16 | 7;
  uint64_t v37 = v17;
  uint64_t v19 = swift_allocObject();
  unint64_t v34 = 0x800000000004E300;
  *(void *)(v19 + 16) = 0xD00000000000003DLL;
  *(void *)(v19 + 24) = 0x800000000004E300;
  outlined init with take of ConfirmationBinaryButtonView((uint64_t)v8, v19 + v18);
  unint64_t v33 = lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  Button<>.init<A>(_:action:)();
  uint64_t v20 = type metadata accessor for ButtonItemButtonStyle();
  uint64_t v21 = lazy protocol witness table accessor for type Button<Text> and conformance Button<A>((unint64_t *)&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>);
  uint64_t v22 = lazy protocol witness table accessor for type ButtonItemButtonStyle and conformance ButtonItemButtonStyle((unint64_t *)&lazy protocol witness table cache variable for type ButtonItemButtonStyle and conformance ButtonItemButtonStyle, (void (*)(uint64_t))&type metadata accessor for ButtonItemButtonStyle);
  View.buttonStyle<A>(_:)();
  long long v32 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
  v32(v2, v9);
  uint64_t v43 = v9;
  uint64_t v44 = v20;
  uint64_t v45 = v21;
  uint64_t v46 = (void *)v22;
  swift_getOpaqueTypeConformance2();
  uint64_t v23 = View.eraseToAnyView()();
  OUTLINED_FUNCTION_7_0();
  v24();
  long long v25 = (uint64_t *)(v3 + *(int *)(v5 + 32));
  uint64_t v26 = v25[1];
  uint64_t v43 = *v25;
  uint64_t v44 = v26;
  uint64_t v27 = (uint64_t)v31;
  outlined init with copy of ConfirmationBinaryButtonView(v3, (uint64_t)v31);
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = 0xD00000000000003DLL;
  *(void *)(v28 + 24) = v34;
  outlined init with take of ConfirmationBinaryButtonView(v27, v28 + v35);
  swift_bridgeObjectRetain();
  Button<>.init<A>(_:action:)();
  uint64_t v46 = &type metadata for AnyView;
  long long v47 = &protocol witness table for AnyView;
  uint64_t v43 = v23;
  v42[3] = v9;
  v42[4] = lazy protocol witness table accessor for type Button<Text> and conformance Button<A>(&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v42);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v41 + 16))(boxed_opaque_existential_1, v2, v9);
  BinaryButtonView.init(primaryButton:secondaryButton:)();
  return ((uint64_t (*)(uint64_t, uint64_t))v32)(v2, v9);
}

uint64_t outlined init with copy of ConfirmationBinaryButtonView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConfirmationBinaryButtonView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of ConfirmationBinaryButtonView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConfirmationBinaryButtonView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in ConfirmationBinaryButtonView.body.getter()
{
  return partial apply for closure #1 in ConfirmationBinaryButtonView.body.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v3 = *(void *)(OUTLINED_FUNCTION_4_0() - 8);
  return closure #1 in ConfirmationBinaryButtonView.body.getter(*(void *)(v1 + 16), *(void *)(v1 + 24), v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), v2, v0);
}

uint64_t closure #1 in ConfirmationBinaryButtonView.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InteractionType?);
  __chkstk_darwin(v6 - 8);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionProperty?);
  __chkstk_darwin(v10 - 8);
  OUTLINED_FUNCTION_5();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StandardActionHandler?);
  __chkstk_darwin(v11 - 8);
  OUTLINED_FUNCTION_4();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = type metadata accessor for ActionProperty();
  OUTLINED_FUNCTION_0_1();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_4();
  uint64_t v21 = v20 - v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ActionElementConvertible>);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_48DD0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_48DD0;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = a4;
  *(void *)(inited + 80) = a5;
  Dictionary.init(dictionaryLiteral:)();
  *(void *)(v22 + 56) = type metadata accessor for Command();
  *(void *)(v22 + 64) = &protocol witness table for Command;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v22 + 32));
  static Command.directInvocation(identifier:payload:isNavigation:)();
  swift_bridgeObjectRelease();
  ActionProperty.init(_:)();
  ActionHandler.wrappedValue.getter();
  uint64_t v24 = type metadata accessor for StandardActionHandler();
  if (__swift_getEnumTagSinglePayload(v14, 1, v24) == 1)
  {
    uint64_t v25 = OUTLINED_FUNCTION_6_0();
    v26(v25);
    return _s9SnippetUI21StandardActionHandlerVSgWOhTm_0(v14, &demangling cache variable for type metadata for StandardActionHandler?);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v5, v21, v15);
    __swift_storeEnumTagSinglePayload(v5, 0, 1, v15);
    uint64_t v28 = enum case for InteractionType.buttonTapped(_:);
    uint64_t v29 = type metadata accessor for InteractionType();
    OUTLINED_FUNCTION_2();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 104))(v9, v28, v29);
    __swift_storeEnumTagSinglePayload(v9, 0, 1, v29);
    StandardActionHandler.perform(_:interactionType:)();
    _s9SnippetUI21StandardActionHandlerVSgWOhTm_0(v9, &demangling cache variable for type metadata for InteractionType?);
    _s9SnippetUI21StandardActionHandlerVSgWOhTm_0(v5, &demangling cache variable for type metadata for ActionProperty?);
    uint64_t v31 = OUTLINED_FUNCTION_6_0();
    v32(v31);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v14, v24);
  }
}

uint64_t objectdestroyTm_0()
{
  uint64_t v1 = *(void *)(type metadata accessor for ConfirmationBinaryButtonView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = ((v2 + 32) & ~v2) + *(void *)(v1 + 64);
  uint64_t v4 = v2 | 7;
  swift_bridgeObjectRelease();
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0();
  v5();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for ButtonItemButtonStyle();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0();
  v6();

  return _swift_deallocObject(v0, v3, v4);
}

uint64_t partial apply for closure #2 in ConfirmationBinaryButtonView.body.getter()
{
  return partial apply for closure #1 in ConfirmationBinaryButtonView.body.getter();
}

uint64_t lazy protocol witness table accessor for type Button<Text> and conformance Button<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<Text>);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ConfirmationBinaryButtonView.init(confirmLabel:cancelLabel:buttonStyle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  ActionHandler.init()();
  uint64_t v12 = (int *)type metadata accessor for ConfirmationBinaryButtonView();
  uint64_t v13 = (void *)(a6 + v12[5]);
  *uint64_t v13 = a1;
  v13[1] = a2;
  uint64_t v14 = (void *)(a6 + v12[6]);
  *uint64_t v14 = a3;
  v14[1] = a4;
  uint64_t v15 = a6 + v12[7];
  type metadata accessor for ButtonItemButtonStyle();
  OUTLINED_FUNCTION_2();
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);

  return v18(v15, a5, v16);
}

uint64_t associated type witness table accessor for View.Body : View in ConfirmationBinaryButtonView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for ConfirmationBinaryButtonView(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ActionHandler();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for ButtonItemButtonStyle();
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20(v17, v18, v19);
  }
  return a1;
}

uint64_t destroy for ConfirmationBinaryButtonView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 28);
  uint64_t v6 = type metadata accessor for ButtonItemButtonStyle();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t initializeWithCopy for ConfirmationBinaryButtonView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for ButtonItemButtonStyle();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19(v16, v17, v18);
  return a1;
}

uint64_t assignWithCopy for ConfirmationBinaryButtonView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for ButtonItemButtonStyle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 24))(v14, v15, v16);
  return a1;
}

uint64_t initializeWithTake for ConfirmationBinaryButtonView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for ButtonItemButtonStyle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t assignWithTake for ConfirmationBinaryButtonView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for ButtonItemButtonStyle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 40))(v18, v19, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationBinaryButtonView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_A848);
}

uint64_t sub_A848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_8:
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
  if (a2 != 0x7FFFFFFF)
  {
    uint64_t v8 = type metadata accessor for ButtonItemButtonStyle();
    uint64_t v9 = a1 + *(int *)(a3 + 28);
    goto LABEL_8;
  }
  unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
  if (v10 >= 0xFFFFFFFF) {
    LODWORD(v10) = -1;
  }
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationBinaryButtonView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_A910);
}

void sub_A910(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return;
    }
    uint64_t v10 = type metadata accessor for ButtonItemButtonStyle();
    uint64_t v11 = a1 + *(int *)(a4 + 28);
  }

  __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

uint64_t type metadata completion function for ConfirmationBinaryButtonView()
{
  uint64_t result = type metadata accessor for ActionHandler();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ButtonItemButtonStyle();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_AA94()
{
  return lazy protocol witness table accessor for type ButtonItemButtonStyle and conformance ButtonItemButtonStyle(&lazy protocol witness table cache variable for type BinaryButtonView and conformance BinaryButtonView, (void (*)(uint64_t))&type metadata accessor for BinaryButtonView);
}

uint64_t lazy protocol witness table accessor for type ButtonItemButtonStyle and conformance ButtonItemButtonStyle(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s9SnippetUI21StandardActionHandlerVSgWOhTm_0(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0();
  v3();
  return a1;
}

uint64_t OUTLINED_FUNCTION_4_0()
{
  return type metadata accessor for ConfirmationBinaryButtonView();
}

uint64_t OUTLINED_FUNCTION_6_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_0()
{
  return type metadata accessor for ConfirmationBinaryButtonView();
}

uint64_t EnableTCCView.model.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1[2];
  uint64_t v2 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t EnableTCCView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v49 = a1;
  uint64_t v48 = type metadata accessor for BinaryButtonView();
  uint64_t v46 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v44 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<BinaryButtonView, _EnvironmentKeyWritingModifier<VRXVisualResponseLocation>>);
  OUTLINED_FUNCTION_2();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v47 = (uint64_t)&v40 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SimpleItemRichView?);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v45 = (uint64_t)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v40 - v12;
  uint64_t v14 = v1[2];
  uint64_t v15 = v1[3];
  uint64_t v16 = v1[4];
  uint64_t v17 = v1[5];
  uint64_t v42 = v16;
  uint64_t v18 = (uint64_t)v2[7];
  if (v18)
  {
    uint64_t v19 = (uint64_t)v2[6];
    v75 = &type metadata for String;
    v76 = &protocol witness table for String;
    v74[0] = v19;
    v74[1] = v18;
    uint64_t v73 = 0;
    long long v71 = 0u;
    long long v72 = 0u;
    uint64_t v70 = 0;
    long long v68 = 0u;
    long long v69 = 0u;
    uint64_t v67 = 0;
    long long v65 = 0u;
    long long v66 = 0u;
    uint64_t v64 = 0;
    long long v62 = 0u;
    long long v63 = 0u;
    uint64_t v61 = 0;
    long long v59 = 0u;
    long long v60 = 0u;
    uint64_t v58 = 0;
    long long v56 = 0u;
    long long v57 = 0u;
    uint64_t v55 = 0;
    long long v53 = 0u;
    long long v54 = 0u;
    uint64_t v52 = 0;
    long long v50 = 0u;
    long long v51 = 0u;
    swift_bridgeObjectRetain();
    SimpleItemRichView.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:)();
    uint64_t v20 = type metadata accessor for SimpleItemRichView();
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v20 = type metadata accessor for SimpleItemRichView();
    uint64_t v21 = 1;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v13, v21, 1, v20);
  *(void *)&long long v71 = v14;
  *((void *)&v71 + 1) = v15;
  uint64_t v22 = swift_allocObject();
  OUTLINED_FUNCTION_1_2(v22);
  *(void *)(v23 + 80) = v14;
  *(void *)(v23 + 88) = v15;
  uint64_t v41 = v13;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  v75 = (void *)v24;
  uint64_t v25 = lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
  v76 = (void *)v25;
  __swift_allocate_boxed_opaque_existential_1(v74);
  swift_bridgeObjectRetain_n();
  outlined retain of EnableTCCView(v2);
  lazy protocol witness table accessor for type String and conformance String();
  Button<>.init<A>(_:action:)();
  uint64_t v26 = v42;
  *(void *)&long long v68 = v42;
  *((void *)&v68 + 1) = v17;
  uint64_t v27 = swift_allocObject();
  OUTLINED_FUNCTION_1_2(v27);
  *(void *)(v28 + 80) = v26;
  *(void *)(v28 + 88) = v17;
  *((void *)&v72 + 1) = v24;
  uint64_t v73 = v25;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v71);
  swift_bridgeObjectRetain();
  outlined retain of EnableTCCView(v2);
  swift_bridgeObjectRetain();
  Button<>.init<A>(_:action:)();
  uint64_t v29 = v44;
  BinaryButtonView.init(primaryButton:secondaryButton:)();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v31 = v46;
  uint64_t v32 = v48;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v7, v29, v48);
  unint64_t v33 = (uint64_t *)&v7[*(int *)(v43 + 36)];
  *unint64_t v33 = KeyPath;
  v33[1] = 5;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v29, v32);
  uint64_t v34 = v47;
  outlined init with take of ModifiedContent<BinaryButtonView, _EnvironmentKeyWritingModifier<VRXVisualResponseLocation>>((uint64_t)v7, v47);
  uint64_t v35 = (uint64_t)v41;
  uint64_t v36 = v45;
  outlined init with copy of VisualProperty?((uint64_t)v41, v45, &demangling cache variable for type metadata for SimpleItemRichView?);
  outlined init with copy of VisualProperty?(v34, (uint64_t)v7, &demangling cache variable for type metadata for ModifiedContent<BinaryButtonView, _EnvironmentKeyWritingModifier<VRXVisualResponseLocation>>);
  uint64_t v37 = v49;
  outlined init with copy of VisualProperty?(v36, v49, &demangling cache variable for type metadata for SimpleItemRichView?);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SimpleItemRichView?, ModifiedContent<BinaryButtonView, _EnvironmentKeyWritingModifier<VRXVisualResponseLocation>>));
  outlined init with copy of VisualProperty?((uint64_t)v7, v37 + *(int *)(v38 + 48), &demangling cache variable for type metadata for ModifiedContent<BinaryButtonView, _EnvironmentKeyWritingModifier<VRXVisualResponseLocation>>);
  outlined destroy of StandardActionHandler?(v34, &demangling cache variable for type metadata for ModifiedContent<BinaryButtonView, _EnvironmentKeyWritingModifier<VRXVisualResponseLocation>>);
  outlined destroy of StandardActionHandler?(v35, &demangling cache variable for type metadata for SimpleItemRichView?);
  outlined destroy of StandardActionHandler?((uint64_t)v7, &demangling cache variable for type metadata for ModifiedContent<BinaryButtonView, _EnvironmentKeyWritingModifier<VRXVisualResponseLocation>>);
  return outlined destroy of StandardActionHandler?(v36, &demangling cache variable for type metadata for SimpleItemRichView?);
}

void closure #1 in EnableTCCView.createButton(label:)(id *a1, uint64_t a2, unint64_t a3)
{
  if (*a1)
  {
    id v5 = *a1;
    char v6 = dispatch thunk of Context.perform(machineUtterance:)();

    if ((v6 & 1) == 0)
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)static Logger.voiceCommands);
      swift_bridgeObjectRetain_n();
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        uint64_t v11 = swift_slowAlloc();
        *(_DWORD *)uint64_t v10 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v11);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_0, v8, v9, "#EnableTCCView failed to issue machineUtterance: '%s'", v10, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
  }
  else
  {
    type metadata accessor for Context();
    lazy protocol witness table accessor for type Context and conformance Context();
    EnvironmentObject.error()();
    __break(1u);
  }
}

void partial apply for closure #1 in EnableTCCView.createButton(label:)()
{
  closure #1 in EnableTCCView.createButton(label:)((id *)(v0 + 16), *(void *)(v0 + 80), *(void *)(v0 + 88));
}

void **outlined retain of EnableTCCView(void **a1)
{
  uint64_t v2 = *a1;
  swift_bridgeObjectRetain();
  id v3 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t objectdestroyTm_1()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_B3D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.visualResponseLocation.getter();
  *a1 = result;
  return result;
}

uint64_t sub_B3FC()
{
  return EnvironmentValues.visualResponseLocation.setter();
}

uint64_t outlined init with take of ModifiedContent<BinaryButtonView, _EnvironmentKeyWritingModifier<VRXVisualResponseLocation>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<BinaryButtonView, _EnvironmentKeyWritingModifier<VRXVisualResponseLocation>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

__n128 EnableTCCView.init(model:)@<Q0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 v7 = (__n128)a1[1];
  long long v8 = *a1;
  uint64_t v3 = *((void *)a1 + 4);
  uint64_t v4 = *((void *)a1 + 5);
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context();
  *(void *)a2 = EnvironmentObject.init()();
  *(void *)(a2 + 8) = v5;
  __n128 result = v7;
  *(_OWORD *)(a2 + 16) = v8;
  *(__n128 *)(a2 + 32) = v7;
  *(void *)(a2 + 48) = v3;
  *(void *)(a2 + 56) = v4;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in EnableTCCView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for View.body.getter in conformance EnableTCCView@<X0>(uint64_t a1@<X8>)
{
  return EnableTCCView.body.getter(a1);
}

uint64_t destroy for EnableTCCView(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EnableTCCView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  id v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for EnableTCCView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for EnableTCCView(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EnableTCCView(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EnableTCCView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EnableTCCView()
{
  return &type metadata for EnableTCCView;
}

uint64_t sub_B7E0()
{
  return lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type TupleView<(SimpleItemRichView?, ModifiedContent<BinaryButtonView, _EnvironmentKeyWritingModifier<VRXVisualResponseLocation>>)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SimpleItemRichView?, ModifiedContent<BinaryButtonView, _EnvironmentKeyWritingModifier<VRXVisualResponseLocation>>)>);
}

__n128 OUTLINED_FUNCTION_1_2(uint64_t a1)
{
  long long v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 32) = v2;
  __n128 result = *(__n128 *)(v1 + 32);
  long long v4 = *(_OWORD *)(v1 + 48);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v4;
  return result;
}

uint64_t LinkConfirmationView.model.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of WorkflowDataModels.LinkConfirmationModel(v1, a1);
}

uint64_t outlined init with copy of WorkflowDataModels.LinkConfirmationModel(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t LinkConfirmationView.body.getter()
{
  uint64_t v1 = swift_allocObject();
  memcpy((void *)(v1 + 16), v0, 0x61uLL);
  outlined retain of LinkConfirmationView((uint64_t)v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(LinkActionView, ConfirmationBinaryButtonView)>);
  lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type TupleView<(LinkActionView, ConfirmationBinaryButtonView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(LinkActionView, ConfirmationBinaryButtonView)>);

  return ComponentStack.init(content:)();
}

uint64_t closure #1 in LinkConfirmationView.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ButtonItemButtonStyle();
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  __chkstk_darwin(v4);
  uint64_t v29 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (int *)type metadata accessor for ConfirmationBinaryButtonView();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v32 = (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v25 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v25 - v12;
  uint64_t v14 = *(void *)a1;
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v27 = *(void *)(a1 + 16);
  uint64_t v28 = v14;
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v26 = *(void *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 48);
  unint64_t v19 = *(void *)(a1 + 56);
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v33 = *(_OWORD *)(a1 + 80);
  long long v34 = v20;
  LOBYTE(a1) = *(unsigned char *)(a1 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v18, v19);
  outlined retain of String((uint64_t)&v34);
  outlined retain of String((uint64_t)&v33);
  if (a1)
  {
    uint64_t v21 = v29;
    static ButtonStyle<>.buttonItemPreferredAndDestructive.getter();
  }
  else
  {
    uint64_t v21 = v29;
    static ButtonStyle<>.buttonItemPreferred.getter();
  }
  ActionHandler.init()();
  *(_OWORD *)&v11[v6[5]] = v34;
  *(_OWORD *)&v11[v6[6]] = v33;
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(&v11[v6[7]], v21, v31);
  outlined init with take of ConfirmationBinaryButtonView((uint64_t)v11, (uint64_t)v13);
  uint64_t v22 = v32;
  outlined init with copy of ConfirmationBinaryButtonView((uint64_t)v13, v32);
  *a2 = v28;
  a2[1] = v15;
  a2[2] = v27;
  a2[3] = v16;
  a2[4] = v26;
  a2[5] = v17;
  a2[6] = v18;
  a2[7] = v19;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (LinkActionView, ConfirmationBinaryButtonView));
  outlined init with copy of ConfirmationBinaryButtonView(v22, (uint64_t)a2 + *(int *)(v23 + 48));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v18, v19);
  outlined destroy of ConfirmationBinaryButtonView((uint64_t)v13);
  outlined destroy of ConfirmationBinaryButtonView(v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return outlined consume of Data?(v18, v19);
}

uint64_t sub_BC1C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 72);
  if (v1 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(v0 + 64), v1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 113, 7);
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t partial apply for closure #1 in LinkConfirmationView.body.getter@<X0>(void *a1@<X8>)
{
  return closure #1 in LinkConfirmationView.body.getter(v1 + 16, a1);
}

uint64_t outlined retain of LinkConfirmationView(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = *(void *)(a1 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

__n128 LinkConfirmationView.init(model:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  char v5 = *(unsigned char *)(a1 + 96) & 1;
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  long long v6 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v6;
  __n128 result = *(__n128 *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 64) = result;
  *(void *)(a2 + 80) = v3;
  *(void *)(a2 + 88) = v4;
  *(unsigned char *)(a2 + 96) = v5;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in LinkConfirmationView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for View.body.getter in conformance LinkConfirmationView()
{
  memcpy(__dst, v0, sizeof(__dst));
  return LinkConfirmationView.body.getter();
}

uint64_t destroy for LinkConfirmationView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(a1 + 48), v2);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LinkConfirmationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = (uint64_t *)(a2 + 48);
  unint64_t v8 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v7;
  }
  else
  {
    uint64_t v9 = *v7;
    outlined copy of Data._Representation(*v7, v8);
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v8;
  }
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v10;
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v11;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LinkConfirmationView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t *)(a2 + 48);
  unint64_t v5 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      outlined copy of Data._Representation(*v4, *(void *)(a2 + 56));
      uint64_t v8 = *(void *)(a1 + 48);
      unint64_t v9 = *(void *)(a1 + 56);
      *(void *)(a1 + 48) = v7;
      *(void *)(a1 + 56) = v5;
      outlined consume of Data._Representation(v8, v9);
      goto LABEL_8;
    }
    outlined destroy of Data(a1 + 48);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  uint64_t v6 = *v4;
  outlined copy of Data._Representation(*v4, *(void *)(a2 + 56));
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v5;
LABEL_8:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy97_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x61uLL);
}

uint64_t assignWithTake for LinkConfirmationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)(a2 + 48);
  unint64_t v8 = *(void *)(a1 + 56);
  if (v8 >> 60 != 15)
  {
    unint64_t v9 = *(void *)(a2 + 56);
    if (v9 >> 60 != 15)
    {
      uint64_t v10 = *(void *)(a1 + 48);
      *(void *)(a1 + 48) = *v7;
      *(void *)(a1 + 56) = v9;
      outlined consume of Data._Representation(v10, v8);
      goto LABEL_6;
    }
    outlined destroy of Data(a1 + 48);
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v7;
LABEL_6:
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v12;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkConfirmationView(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 97))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkConfirmationView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 96) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 97) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 97) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LinkConfirmationView()
{
  return &type metadata for LinkConfirmationView;
}

uint64_t sub_C278()
{
  return lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(LinkActionView, ConfirmationBinaryButtonView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(LinkActionView, ConfirmationBinaryButtonView)>>);
}

uint64_t outlined retain of String(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of ConfirmationBinaryButtonView(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ConfirmationBinaryButtonView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t Logger.voiceCommands.unsafeMutableAddressor()
{
  return Logger.voiceCommands.unsafeMutableAddressor(&one-time initialization token for voiceCommands, (uint64_t)static Logger.voiceCommands);
}

uint64_t one-time initialization function for voiceCommands()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.voiceCommands);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.voiceCommands);
  if (one-time initialization token for subsystem != -1) {
    swift_once();
  }
  uint64_t v1 = one-time initialization token for voiceCommands;
  swift_bridgeObjectRetain();
  if (v1 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)();
}

uint64_t *LogConst.subsystem.unsafeMutableAddressor()
{
  if (one-time initialization token for subsystem != -1) {
    swift_once();
  }
  return &static LogConst.subsystem;
}

uint64_t *LogConst.Category.voiceCommands.unsafeMutableAddressor()
{
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  return &static LogConst.Category.voiceCommands;
}

uint64_t static Logger.voiceCommands.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.voiceCommands.getter(&one-time initialization token for voiceCommands, (uint64_t)static Logger.voiceCommands, a1);
}

uint64_t one-time initialization function for linkUI()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.linkUI);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.linkUI);
  return Logger.init(subsystem:category:)();
}

void *LogConst.subsystemSLF.unsafeMutableAddressor()
{
  return &static LogConst.subsystemSLF;
}

void *LogConst.Category.siriLinkUIPlugin.unsafeMutableAddressor()
{
  return &static LogConst.Category.siriLinkUIPlugin;
}

uint64_t Logger.linkUI.unsafeMutableAddressor()
{
  return Logger.voiceCommands.unsafeMutableAddressor(&one-time initialization token for linkUI, (uint64_t)static Logger.linkUI);
}

uint64_t static Logger.linkUI.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.voiceCommands.getter(&one-time initialization token for linkUI, (uint64_t)static Logger.linkUI, a1);
}

uint64_t one-time initialization function for siriKitUI()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.siriKitUI);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriKitUI);
  if (one-time initialization token for siriKitUIPlugin != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)();
}

void *LogConst.subsystemSKE.unsafeMutableAddressor()
{
  return &static LogConst.subsystemSKE;
}

uint64_t *LogConst.Category.siriKitUIPlugin.unsafeMutableAddressor()
{
  if (one-time initialization token for siriKitUIPlugin != -1) {
    swift_once();
  }
  return &static LogConst.Category.siriKitUIPlugin;
}

uint64_t Logger.siriKitUI.unsafeMutableAddressor()
{
  return Logger.voiceCommands.unsafeMutableAddressor(&one-time initialization token for siriKitUI, (uint64_t)static Logger.siriKitUI);
}

uint64_t Logger.voiceCommands.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();

  return __swift_project_value_buffer(v3, a2);
}

uint64_t static Logger.siriKitUI.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.voiceCommands.getter(&one-time initialization token for siriKitUI, (uint64_t)static Logger.siriKitUI, a1);
}

uint64_t static Logger.voiceCommands.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t Logger.logAndCrash(_:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v35 = a6;
  int v36 = a5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = &v29[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  uint64_t v17 = &v29[-v16];
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v19 + 16))(v17, v7, v18);
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v18);
  outlined init with copy of Logger?((uint64_t)v17, (uint64_t)v15);
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v18) == 1)
  {
    outlined destroy of Logger?((uint64_t)v15);
  }
  else
  {
    swift_bridgeObjectRetain_n();
    long long v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    int v22 = v21;
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v33 = a3;
      uint64_t v24 = v23;
      uint64_t v32 = swift_slowAlloc();
      uint64_t v38 = v32;
      *(_DWORD *)uint64_t v24 = 136315650;
      uint64_t v34 = a4;
      uint64_t v25 = StaticString.description.getter();
      os_log_t v31 = v20;
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v38);
      int v30 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2048;
      uint64_t v37 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      os_log_t v27 = v31;
      _os_log_impl(&dword_0, v31, (os_log_type_t)v30, "FatalError at %s:%lu - %s", (uint8_t *)v24, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(v15, v18);
  }
  static SiriKitLifecycle._logCrashToEventBus(_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void one-time initialization function for subsystem()
{
  unk_6BAD7 = -18;
}

uint64_t static LogConst.subsystem.getter()
{
  return static LogConst.subsystem.getter(&one-time initialization token for subsystem, &static LogConst.subsystem);
}

unint64_t static LogConst.subsystemSLF.getter()
{
  return OUTLINED_FUNCTION_0_0(27);
}

unint64_t static LogConst.subsystemSKE.getter()
{
  return OUTLINED_FUNCTION_0_0(22);
}

void one-time initialization function for voiceCommands()
{
  unk_6BAE6 = -4864;
}

uint64_t static LogConst.Category.voiceCommands.getter()
{
  return static LogConst.subsystem.getter(&one-time initialization token for voiceCommands, &static LogConst.Category.voiceCommands);
}

unint64_t static LogConst.Category.siriLinkUIPlugin.getter()
{
  return OUTLINED_FUNCTION_0_0(16);
}

void one-time initialization function for siriKitUIPlugin()
{
  static LogConst.Category.siriKitUIPlugin = 0x5574694B69726953;
  unk_6BAF0 = 0xEF6E6967756C5049;
}

uint64_t outlined init with copy of Logger?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Logger?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static LogConst.Category.siriKitUIPlugin.getter()
{
  return static LogConst.subsystem.getter(&one-time initialization token for siriKitUIPlugin, &static LogConst.Category.siriKitUIPlugin);
}

uint64_t static LogConst.subsystem.getter(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

void type metadata accessor for Logger()
{
}

void type metadata accessor for LogConst()
{
}

void type metadata accessor for LogConst.Category()
{
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = (uint64_t)_StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

void *_StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2[2] + 1, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((unsigned char *)v2 + v4 + 32) = 0;
  return v2;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t AutoShortcutFirstRunComponentView.model.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AutoShortcutAppPhrasesViewModel(v1, a1);
}

uint64_t outlined init with copy of AutoShortcutAppPhrasesViewModel(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AutoShortcutFirstRunWatchView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(Text, Divider, Group<TupleView<(ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>, TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?)>>, ModifiedContent<Spacer, _FrameLayout>)>>);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)unint64_t v6 = static HorizontalAlignment.leading.getter();
  *((void *)v6 + 1) = 0;
  v6[16] = 1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(Text, Divider, Group<TupleView<(ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>, TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?)>>, ModifiedContent<Spacer, _FrameLayout>)>>);
  closure #1 in AutoShortcutFirstRunWatchView.body.getter(v2, (uint64_t)&v6[*(int *)(v7 + 44)]);
  char v8 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  outlined init with copy of VisualProperty?((uint64_t)v6, a1, &demangling cache variable for type metadata for VStack<TupleView<(Text, Divider, Group<TupleView<(ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>, TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?)>>, ModifiedContent<Spacer, _FrameLayout>)>>);
  uint64_t v17 = a1
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(Text, Divider, Group<TupleView<(ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>, TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?)>>, ModifiedContent<Spacer, _FrameLayout>)>>, _PaddingLayout>)
               + 36);
  *(unsigned char *)uint64_t v17 = v8;
  *(void *)(v17 + 8) = v10;
  *(void *)(v17 + 16) = v12;
  *(void *)(v17 + 24) = v14;
  *(void *)(v17 + 32) = v16;
  *(unsigned char *)(v17 + 40) = 0;
  return outlined destroy of StandardActionHandler?((uint64_t)v6, &demangling cache variable for type metadata for VStack<TupleView<(Text, Divider, Group<TupleView<(ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>, TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?)>>, ModifiedContent<Spacer, _FrameLayout>)>>);
}

uint64_t closure #1 in AutoShortcutFirstRunWatchView.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Group<TupleView<(ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>, TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?)>>);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v51 = (uint64_t)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v53 = (uint64_t)&v42 - v7;
  uint64_t v50 = type metadata accessor for Divider();
  uint64_t v55 = *(void *)(v50 - 8);
  uint64_t v8 = __chkstk_darwin(v50);
  long long v54 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v52 = (char *)&v42 - v10;
  uint64_t v11 = a1[5];
  uint64_t v60 = a1[4];
  uint64_t v61 = v11;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v12 = Text.init<A>(_:)();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  static Font.title3.getter();
  uint64_t v17 = Text.font(_:)();
  uint64_t v43 = v17;
  uint64_t v19 = v18;
  char v21 = v20;
  uint64_t v49 = v22;
  swift_release();
  int v23 = v21 & 1;
  int v48 = v23;
  outlined consume of Text.Storage(v12, v14, v16);
  swift_bridgeObjectRelease();
  uint64_t v24 = v52;
  Divider.init()();
  uint64_t v25 = v53;
  closure #1 in closure #1 in AutoShortcutFirstRunWatchView.body.getter(a1, v53);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  LOBYTE(a1) = v61;
  uint64_t v46 = v62;
  uint64_t v47 = v60;
  char v26 = v63;
  uint64_t v45 = v64;
  uint64_t v44 = v65;
  char v59 = v23;
  os_log_t v27 = v54;
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
  uint64_t v29 = v24;
  uint64_t v30 = v50;
  v28(v54, v29, v50);
  uint64_t v31 = v25;
  uint64_t v32 = v51;
  outlined init with copy of VisualProperty?(v31, v51, &demangling cache variable for type metadata for Group<TupleView<(ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>, TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?)>>);
  char v58 = 1;
  char v57 = (char)a1;
  char v56 = v26;
  LOBYTE(a1) = v59;
  *(void *)a2 = v17;
  *(void *)(a2 + 8) = v19;
  *(unsigned char *)(a2 + 16) = (_BYTE)a1;
  *(void *)(a2 + 24) = v49;
  uint64_t v33 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Text, Divider, Group<TupleView<(ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>, TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?)>>, ModifiedContent<Spacer, _FrameLayout>));
  v28((char *)(a2 + v33[12]), v27, v30);
  outlined init with copy of VisualProperty?(v32, a2 + v33[16], &demangling cache variable for type metadata for Group<TupleView<(ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>, TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?)>>);
  uint64_t v34 = a2 + v33[20];
  char v35 = v58;
  char v36 = v57;
  char v37 = v56;
  *(void *)uint64_t v34 = 0;
  *(unsigned char *)(v34 + 8) = v35;
  *(void *)(v34 + 16) = v47;
  *(unsigned char *)(v34 + 24) = v36;
  *(void *)(v34 + 32) = v46;
  *(unsigned char *)(v34 + 40) = v37;
  uint64_t v38 = v44;
  *(void *)(v34 + 48) = v45;
  *(void *)(v34 + 56) = v38;
  uint64_t v39 = v43;
  outlined copy of Text.Storage(v43, v19, (char)a1);
  swift_bridgeObjectRetain();
  LOBYTE(v27) = v48;
  outlined copy of Text.Storage(v39, v19, v48);
  swift_bridgeObjectRetain();
  outlined destroy of StandardActionHandler?(v53, &demangling cache variable for type metadata for Group<TupleView<(ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>, TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?)>>);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v55 + 8);
  v40(v52, v30);
  outlined consume of Text.Storage(v39, v19, (char)v27);
  swift_bridgeObjectRelease();
  outlined destroy of StandardActionHandler?(v32, &demangling cache variable for type metadata for Group<TupleView<(ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>, TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?)>>);
  v40(v54, v30);
  outlined consume of Text.Storage(v39, v19, v59);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in AutoShortcutFirstRunWatchView.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v77 = a2;
  uint64_t v70 = type metadata accessor for PlainButtonStyle();
  uint64_t v69 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v67 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Link<Text>);
  uint64_t v65 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v64 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  uint64_t v72 = *(void *)(v73 - 8);
  uint64_t v5 = __chkstk_darwin(v73);
  long long v71 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  long long v68 = (char *)&v55 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for URL();
  uint64_t v63 = *(void *)(v75 - 8);
  uint64_t v11 = __chkstk_darwin(v75);
  uint64_t v62 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v74 = (char *)&v55 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v76 = (uint64_t)&v55 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<ForEach<[String], String, Text>>);
  __chkstk_darwin(v19 - 8);
  char v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>);
  uint64_t v23 = v22 - 8;
  uint64_t v24 = __chkstk_darwin(v22);
  char v26 = (char *)&v55 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v55 - v27;
  uint64_t v29 = static HorizontalAlignment.leading.getter();
  uint64_t v30 = (void *)a1[11];
  *(void *)char v21 = v29;
  *((void *)v21 + 1) = v30;
  uint64_t v61 = v30;
  v21[16] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, ForEach<[String], String, Text>>);
  memcpy(__dst, a1, sizeof(__dst));
  v78 = AutoShortcutAppPhrasesViewModel.displayPhrases.getter();
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
  ForEach<>.init(_:id:content:)();
  outlined init with copy of VisualProperty?((uint64_t)v21, (uint64_t)v26, &demangling cache variable for type metadata for VStack<ForEach<[String], String, Text>>);
  *(_WORD *)&v26[*(int *)(v23 + 44)] = 256;
  outlined destroy of StandardActionHandler?((uint64_t)v21, &demangling cache variable for type metadata for VStack<ForEach<[String], String, Text>>);
  outlined init with take of ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>((uint64_t)v26, (uint64_t)v28, &demangling cache variable for type metadata for ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>);
  outlined init with take of ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>((uint64_t)&__dst[48], (uint64_t)v85, &demangling cache variable for type metadata for String?);
  outlined init with take of ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>((uint64_t)v85, (uint64_t)v86, &demangling cache variable for type metadata for String?);
  if (v86[1])
  {
    AutoShortcutAppPhrasesViewModel.punchoutURL.getter();
    URL.init(string:)();
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v75) != 1)
    {
      uint64_t v33 = v63;
      uint64_t v34 = v74;
      char v35 = v10;
      uint64_t v36 = v75;
      (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v74, v35, v75);
      static Alignment.center.getter();
      _FrameLayout.init(width:height:alignment:)();
      uint64_t v61 = v78;
      int v60 = v79;
      uint64_t v59 = v80;
      int v58 = v81;
      uint64_t v57 = v82;
      uint64_t v56 = v83;
      uint64_t v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 16))(v62, v34, v36);
      __chkstk_darwin(v37);
      uint64_t v38 = v64;
      Link.init(destination:label:)();
      uint64_t v39 = v67;
      PlainButtonStyle.init()();
      lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type Link<Text> and conformance Link<A>, &demangling cache variable for type metadata for Link<Text>);
      lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle();
      uint64_t v62 = v28;
      uint64_t v40 = v71;
      uint64_t v41 = v66;
      uint64_t v42 = v70;
      View.buttonStyle<A>(_:)();
      (*(void (**)(char *, uint64_t))(v69 + 8))(v39, v42);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v38, v41);
      uint64_t v43 = v72;
      uint64_t v44 = v68;
      uint64_t v45 = v73;
      (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v68, v40, v73);
      uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
      v46(v40, v44, v45);
      *(void *)uint64_t v17 = 0;
      v17[8] = 1;
      *((void *)v17 + 2) = v61;
      v17[24] = v60;
      *((void *)v17 + 4) = v59;
      v17[40] = v58;
      uint64_t v47 = v56;
      *((void *)v17 + 6) = v57;
      *((void *)v17 + 7) = v47;
      uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0));
      v46(&v17[*(int *)(v48 + 48)], v40, v45);
      uint64_t v49 = *(void (**)(char *, uint64_t))(v43 + 8);
      v49(v44, v45);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v74, v36);
      uint64_t v50 = v40;
      uint64_t v28 = v62;
      v49(v50, v45);
      uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>);
      __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v51);
      uint64_t v32 = v76;
      outlined init with take of ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>((uint64_t)v17, v76, &demangling cache variable for type metadata for TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?);
      goto LABEL_6;
    }
    outlined destroy of StandardActionHandler?((uint64_t)v10, &demangling cache variable for type metadata for URL?);
  }
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>);
  uint64_t v32 = v76;
  __swift_storeEnumTagSinglePayload(v76, 1, 1, v31);
LABEL_6:
  outlined init with copy of VisualProperty?((uint64_t)v28, (uint64_t)v26, &demangling cache variable for type metadata for ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>);
  outlined init with copy of VisualProperty?(v32, (uint64_t)v17, &demangling cache variable for type metadata for TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?);
  uint64_t v52 = v77;
  outlined init with copy of VisualProperty?((uint64_t)v26, v77, &demangling cache variable for type metadata for ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>);
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>, TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?));
  outlined init with copy of VisualProperty?((uint64_t)v17, v52 + *(int *)(v53 + 48), &demangling cache variable for type metadata for TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?);
  outlined destroy of StandardActionHandler?(v32, &demangling cache variable for type metadata for TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?);
  outlined destroy of StandardActionHandler?((uint64_t)v28, &demangling cache variable for type metadata for ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>);
  outlined destroy of StandardActionHandler?((uint64_t)v17, &demangling cache variable for type metadata for TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?);
  return outlined destroy of StandardActionHandler?((uint64_t)v26, &demangling cache variable for type metadata for ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in AutoShortcutFirstRunWatchView.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = *a1;
  uint64_t v5 = (void *)a1[1];
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v7);
  v8._countAndFlagsBits = v6;
  v8._object = v5;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v8);
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v9);
  LocalizedStringKey.init(stringInterpolation:)();
  uint64_t v10 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  static Font.body.getter();
  uint64_t v15 = Text.font(_:)();
  uint64_t v17 = v16;
  char v19 = v18;
  uint64_t v21 = v20;
  swift_release();
  outlined consume of Text.Storage(v10, v12, v14);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v15;
  *(void *)(a2 + 8) = v17;
  *(unsigned char *)(a2 + 16) = v19 & 1;
  *(void *)(a2 + 24) = v21;
  return result;
}

uint64_t closure #2 in closure #1 in closure #1 in AutoShortcutFirstRunWatchView.body.getter@<X0>(uint64_t a1@<X8>)
{
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v2 = Text.init<A>(_:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.body.getter();
  uint64_t v7 = Text.font(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  swift_release();
  char v12 = v11 & 1;
  outlined consume of Text.Storage(v2, v4, v6);
  swift_bridgeObjectRelease();
  static Color.secondary.getter();
  uint64_t v13 = Text.foregroundColor(_:)();
  uint64_t v15 = v14;
  char v17 = v16;
  uint64_t v19 = v18;
  swift_release();
  outlined consume of Text.Storage(v7, v9, v12);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v15;
  *(unsigned char *)(a1 + 16) = v17 & 1;
  *(void *)(a1 + 24) = v19;
  return result;
}

double AutoShortcutFirstRunWatchView.init(model:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)a2 = *(void *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = v2;
  *(void *)(a2 + 40) = v3;
  long long v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v4;
  double result = 12.0;
  *(_OWORD *)(a2 + 80) = xmmword_49230;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in AutoShortcutFirstRunWatchView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for View.body.getter in conformance AutoShortcutFirstRunWatchView@<X0>(uint64_t a1@<X8>)
{
  memcpy(v4, v1, sizeof(v4));
  return AutoShortcutFirstRunWatchView.body.getter(a1);
}

uint64_t destroy for AutoShortcutFirstRunWatchView()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AutoShortcutFirstRunWatchView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AutoShortcutFirstRunWatchView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  return a1;
}

void *__swift_memcpy96_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t assignWithTake for AutoShortcutFirstRunWatchView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutoShortcutFirstRunWatchView(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 96))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutoShortcutFirstRunWatchView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)double result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutoShortcutFirstRunWatchView()
{
  return &type metadata for AutoShortcutFirstRunWatchView;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(Text, Divider, Group<TupleView<(ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>, TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?)>>, ModifiedContent<Spacer, _FrameLayout>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(Text, Divider, Group<TupleView<(ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>, TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?)>>, ModifiedContent<Spacer, _FrameLayout>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(Text, Divider, Group<TupleView<(ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>, TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?)>>, ModifiedContent<Spacer, _FrameLayout>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(Text, Divider, Group<TupleView<(ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>, TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?)>>, ModifiedContent<Spacer, _FrameLayout>)>>, _PaddingLayout>);
    lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(Text, Divider, Group<TupleView<(ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>, TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?)>>, ModifiedContent<Spacer, _FrameLayout>)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(Text, Divider, Group<TupleView<(ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>, TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?)>>, ModifiedContent<Spacer, _FrameLayout>)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(Text, Divider, Group<TupleView<(ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>, TupleView<(ModifiedContent<Spacer, _FrameLayout>, <<opaque return type of View.buttonStyle<A>(_:)>>.0)>?)>>, ModifiedContent<Spacer, _FrameLayout>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in AutoShortcutFirstRunWatchView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in closure #1 in closure #1 in AutoShortcutFirstRunWatchView.body.getter(a1);
}

unint64_t lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle;
  if (!lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle)
  {
    type metadata accessor for PlainButtonStyle();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle);
  }
  return result;
}

uint64_t outlined init with take of ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t static InputCompletionConverter.toUserData(state:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v6 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v15 = v6;
  if (a3)
  {
    if (a3 != 1)
    {
      uint64_t v14 = &type metadata for String;
      uint64_t v12 = 0x6C65636E6163;
      unint64_t v13 = 0xE600000000000000;
      uint64_t v10 = 0x6574617473;
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_2_1(v6);
    uint64_t v14 = &type metadata for String;
    uint64_t v12 = 1954047348;
    unint64_t v13 = 0xE400000000000000;
    uint64_t v7 = a1;
    uint64_t v8 = a2;
    unsigned __int8 v9 = 1;
  }
  else
  {
    OUTLINED_FUNCTION_2_1(v6);
    uint64_t v14 = &type metadata for String;
    uint64_t v12 = 1954047348;
    unint64_t v13 = 0xE400000000000000;
    uint64_t v7 = a1;
    uint64_t v8 = a2;
    unsigned __int8 v9 = 0;
  }
  outlined copy of InputCompletionState(v7, v8, v9);
  specialized Dictionary.subscript.setter((uint64_t)&v12, 1701869940, 0xE400000000000000);
  uint64_t v14 = &type metadata for String;
  uint64_t v12 = a1;
  unint64_t v13 = a2;
  uint64_t v10 = 0x7475706E69;
LABEL_7:
  specialized Dictionary.subscript.setter((uint64_t)&v12, v10, 0xE500000000000000);
  return v15;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v6);
    specialized Dictionary._Variant.setValue(_:forKey:)(v6, a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Any?(a1);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v6);
    swift_bridgeObjectRelease();
    return outlined destroy of Any?((uint64_t)v6);
  }
}

uint64_t outlined copy of InputCompletionState(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t static InputCompletionConverter.toInputCompletionState(userData:)(uint64_t a1)
{
  specialized Dictionary.subscript.getter(0x6574617473, 0xE500000000000000, a1, &v51);
  if (!v52) {
    goto LABEL_45;
  }
  if ((OUTLINED_FUNCTION_0_2() & 1) == 0) {
    return 0;
  }
  uint64_t v1 = v48;
  BOOL v2 = v43 == 1701736292 && v48 == 0xE400000000000000;
  if (!v2 && (OUTLINED_FUNCTION_3() & 1) == 0)
  {
    BOOL v21 = v43 == 0x6C65636E6163 && v48 == 0xE600000000000000;
    if (v21 || (OUTLINED_FUNCTION_3() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    if (v43 == 0x497375636F666E75 && v48 == 0xEF786F427475706ELL)
    {
      uint64_t v25 = swift_bridgeObjectRelease();
    }
    else
    {
      char v24 = OUTLINED_FUNCTION_3();
      uint64_t v25 = swift_bridgeObjectRelease();
      if ((v24 & 1) == 0) {
        return 0;
      }
    }
    OUTLINED_FUNCTION_4_1(v25, v26, v27, v28, v29, v30, v31, v32, v43, v48, v51);
    if (v52)
    {
      if ((OUTLINED_FUNCTION_0_2() & 1) == 0) {
        return 0;
      }
      OUTLINED_FUNCTION_6_1();
      if (v2 && v1 == 0xE400000000000000)
      {
        uint64_t v35 = swift_bridgeObjectRelease();
      }
      else
      {
        char v34 = OUTLINED_FUNCTION_5_0();
        uint64_t v35 = swift_bridgeObjectRelease();
        if ((v34 & 1) == 0) {
          return 0;
        }
      }
      OUTLINED_FUNCTION_1_4(v35, v36, v37, v38, v39, v40, v41, v42, v46, v50, v51);
      if (v52)
      {
        if (OUTLINED_FUNCTION_0_2()) {
          return v47;
        }
        return 0;
      }
    }
LABEL_45:
    outlined destroy of Any?((uint64_t)&v51);
    return 0;
  }
  uint64_t v3 = swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_4_1(v3, v4, v5, v6, v7, v8, v9, v10, v43, v48, v51);
  if (!v52) {
    goto LABEL_45;
  }
  if (OUTLINED_FUNCTION_0_2())
  {
    OUTLINED_FUNCTION_6_1();
    if (v2 && v1 == 0xE400000000000000)
    {
      uint64_t v13 = swift_bridgeObjectRelease();
    }
    else
    {
      char v12 = OUTLINED_FUNCTION_5_0();
      uint64_t v13 = swift_bridgeObjectRelease();
      if ((v12 & 1) == 0) {
        return 0;
      }
    }
    OUTLINED_FUNCTION_1_4(v13, v14, v15, v16, v17, v18, v19, v20, v44, v49, v51);
    if (v52)
    {
      if (OUTLINED_FUNCTION_0_2()) {
        return v45;
      }
      return 0;
    }
    goto LABEL_45;
  }
  return 0;
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a3 + 56) + 32 * v6;
    outlined init with copy of Any(v8, (uint64_t)a4);
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for InputCompletionConverter()
{
  return &type metadata for InputCompletionConverter;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v4;
    uint64_t v11 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    Swift::Int v12 = *(void *)(v11 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12);
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(void *)(v14 + 56) + 32 * v8), a3);
    _NativeDictionary._delete(at:)();
    *uint64_t v4 = v14;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v9;

  return swift_bridgeObjectRelease();
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_13:
    double result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if (v17)
  {
    BOOL v21 = (_OWORD *)(v20[7] + 32 * v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return outlined init with take of Any(a1, v21);
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, a1, v20);
    return (_OWORD *)swift_bridgeObjectRetain();
  }
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  *unint64_t v6 = a2;
  v6[1] = a3;
  double result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_2()
{
  return swift_dynamicCast();
}

double OUTLINED_FUNCTION_1_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long a11)
{
  return specialized Dictionary.subscript.getter(0x7475706E69, 0xE500000000000000, v11, &a11);
}

uint64_t OUTLINED_FUNCTION_2_1(uint64_t a1, ...)
{
  va_start(va, a1);
  return specialized Dictionary.subscript.setter((uint64_t)va, 0x6574617473, 0xE500000000000000);
}

uint64_t OUTLINED_FUNCTION_3()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

double OUTLINED_FUNCTION_4_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long a11)
{
  return specialized Dictionary.subscript.getter(1701869940, 0xE400000000000000, v11, &a11);
}

uint64_t OUTLINED_FUNCTION_5_0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

__n128 LinkActionView.init(model:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  __n128 result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t WorkflowDataModels.LinkConfirmationModel.linkModel.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of WorkflowDataModels.LinkActionModel(v1, a1);
}

uint64_t outlined init with copy of WorkflowDataModels.LinkActionModel(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t LinkActionView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArchivedView?);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  unint64_t v6 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  uint64_t v8 = &v23[-v7];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SimpleItemRichView?);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = &v23[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  BOOL v14 = &v23[-v13];
  long long v15 = v1[1];
  long long v44 = *v1;
  long long v45 = v15;
  long long v16 = v1[3];
  long long v46 = v1[2];
  long long v47 = v16;
  if (*((void *)&v46 + 1))
  {
    *((void *)&v49 + 1) = &type metadata for String;
    *(void *)&long long v50 = &protocol witness table for String;
    long long v48 = v46;
    uint64_t v43 = 0;
    memset(v42, 0, sizeof(v42));
    uint64_t v41 = 0;
    memset(v40, 0, sizeof(v40));
    uint64_t v39 = 0;
    long long v37 = 0u;
    long long v38 = 0u;
    uint64_t v36 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    uint64_t v33 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    uint64_t v30 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    uint64_t v27 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    uint64_t v24 = 0;
    memset(v23, 0, sizeof(v23));
    swift_bridgeObjectRetain();
    SimpleItemRichView.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:)();
    uint64_t v17 = type metadata accessor for SimpleItemRichView();
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v17 = type metadata accessor for SimpleItemRichView();
    uint64_t v18 = 1;
  }
  uint64_t v19 = 1;
  __swift_storeEnumTagSinglePayload((uint64_t)v14, v18, 1, v17);
  outlined init with take of Data?((uint64_t)&v47, (uint64_t)v40);
  outlined init with take of Data?((uint64_t)v40, (uint64_t)v42);
  if (*((void *)&v42[0] + 1) >> 60 != 15)
  {
    long long v48 = v42[0];
    long long v49 = v44;
    long long v50 = v45;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of Data?((uint64_t)v40);
    ArchivedView.init(model:)((uint64_t)&v48, (uint64_t)v8);
    uint64_t v19 = 0;
  }
  uint64_t v20 = type metadata accessor for ArchivedView();
  __swift_storeEnumTagSinglePayload((uint64_t)v8, v19, 1, v20);
  outlined init with copy of SimpleItemRichView?((uint64_t)v14, (uint64_t)v12, &demangling cache variable for type metadata for SimpleItemRichView?);
  outlined init with copy of SimpleItemRichView?((uint64_t)v8, (uint64_t)v6, &demangling cache variable for type metadata for ArchivedView?);
  outlined init with copy of SimpleItemRichView?((uint64_t)v12, a1, &demangling cache variable for type metadata for SimpleItemRichView?);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SimpleItemRichView?, ArchivedView?));
  outlined init with copy of SimpleItemRichView?((uint64_t)v6, a1 + *(int *)(v21 + 48), &demangling cache variable for type metadata for ArchivedView?);
  outlined destroy of ArchivedView?((uint64_t)v8, &demangling cache variable for type metadata for ArchivedView?);
  outlined destroy of ArchivedView?((uint64_t)v14, &demangling cache variable for type metadata for SimpleItemRichView?);
  outlined destroy of ArchivedView?((uint64_t)v6, &demangling cache variable for type metadata for ArchivedView?);
  return outlined destroy of ArchivedView?((uint64_t)v12, &demangling cache variable for type metadata for SimpleItemRichView?);
}

uint64_t outlined init with take of Data?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of SimpleItemRichView?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of ArchivedView?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined retain of Data?(uint64_t a1)
{
  return a1;
}

uint64_t associated type witness table accessor for View.Body : View in LinkActionView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for LinkActionView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = *(void *)(a1 + 48);
    return outlined consume of Data._Representation(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for LinkActionView(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v5;
  unint64_t v6 = a2 + 6;
  unint64_t v7 = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v6;
  }
  else
  {
    uint64_t v8 = *v6;
    outlined copy of Data._Representation(*v6, v7);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v7;
  }
  return a1;
}

void *assignWithCopy for LinkActionView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2 + 6;
  unint64_t v5 = a2[7];
  if (a1[7] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      outlined copy of Data._Representation(*v4, v5);
      uint64_t v8 = a1[6];
      unint64_t v9 = a1[7];
      a1[6] = v7;
      a1[7] = v5;
      outlined consume of Data._Representation(v8, v9);
      return a1;
    }
    outlined destroy of Data((uint64_t)(a1 + 6));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 3) = *(_OWORD *)v4;
    return a1;
  }
  uint64_t v6 = *v4;
  outlined copy of Data._Representation(*v4, v5);
  a1[6] = v6;
  a1[7] = v5;
  return a1;
}

void *assignWithTake for LinkActionView(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2 + 6;
  unint64_t v8 = a1[7];
  if (v8 >> 60 != 15)
  {
    unint64_t v9 = a2[7];
    if (v9 >> 60 != 15)
    {
      uint64_t v10 = a1[6];
      a1[6] = *v7;
      a1[7] = v9;
      outlined consume of Data._Representation(v10, v8);
      return a1;
    }
    outlined destroy of Data((uint64_t)(a1 + 6));
  }
  *((_OWORD *)a1 + 3) = *(_OWORD *)v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkActionView(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LinkActionView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LinkActionView()
{
  return &type metadata for LinkActionView;
}

unint64_t lazy protocol witness table accessor for type TupleView<(SimpleItemRichView?, ArchivedView?)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(SimpleItemRichView?, ArchivedView?)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(SimpleItemRichView?, ArchivedView?)> and conformance TupleView<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for TupleView<(SimpleItemRichView?, ArchivedView?)>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(SimpleItemRichView?, ArchivedView?)> and conformance TupleView<A>);
  }
  return result;
}

uint64_t ArchivedViewModel.viewData.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_4_2();
  outlined copy of Data._Representation(v0, v1);
  return OUTLINED_FUNCTION_4_2();
}

uint64_t AutoShortcutAppPhrasesViewModel.bundleId.getter()
{
  return OUTLINED_FUNCTION_4_2();
}

uint64_t AutoShortcutAppPhrasesViewModel.prompt.getter()
{
  return OUTLINED_FUNCTION_4_2();
}

BOOL static ArchivedViewModel.CodingKeys.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void ArchivedViewModel.CodingKeys.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t ArchivedViewModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6174614477656976 && a2 == 0xE800000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6C646E7542707061 && a2 == 0xEB00000000644965;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x6C70736944707061 && a2 == 0xEE00656D614E7961)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t ArchivedViewModel.CodingKeys.init(intValue:)()
{
  return 3;
}

Swift::Int ArchivedViewModel.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t ArchivedViewModel.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t ArchivedViewModel.CodingKeys.stringValue.getter(char a1)
{
  return *(void *)&aViewdataappbun[8 * a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ArchivedViewModel.CodingKeys(char *a1, char *a2)
{
  return static ArchivedViewModel.CodingKeys.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ArchivedViewModel.CodingKeys()
{
  return ArchivedViewModel.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ArchivedViewModel.CodingKeys(uint64_t a1)
{
  ArchivedViewModel.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ArchivedViewModel.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivedViewModel.CodingKeys()
{
  return ArchivedViewModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivedViewModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = ArchivedViewModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ArchivedViewModel.CodingKeys()
{
  return ArchivedViewModel.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance ArchivedViewModel.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = ArchivedViewModel.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivedViewModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivedViewModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ArchivedViewModel.encode(to:)(void *a1)
{
  BOOL v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ArchivedViewModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  uint64_t v10 = &v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v13 = *v3;
  v12[15] = 0;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    OUTLINED_FUNCTION_2_2(1);
    KeyedEncodingContainer.encode(_:forKey:)();
    OUTLINED_FUNCTION_2_2(2);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v5);
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t ArchivedViewModel.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ArchivedViewModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v5);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivedViewModel.CodingKeys and conformance ArchivedViewModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined copy of Data._Representation(v18, v19);
  uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v8 = v7;
  uint64_t v15 = v6;
  swift_bridgeObjectRetain();
  uint64_t v17 = v8;
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v16 = v9;
  uint64_t v12 = OUTLINED_FUNCTION_1_5();
  v13(v12);
  outlined copy of Data._Representation(v18, v19);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_3_0();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  OUTLINED_FUNCTION_3_0();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v18;
  a2[1] = v19;
  a2[2] = v15;
  a2[3] = v17;
  a2[4] = v16;
  a2[5] = v11;
  return result;
}

void __swiftcall WorkflowDataModels.EnableTCCModel.init(confirmLabel:cancelLabel:prompt:)(SiriLinkUIPlugin::WorkflowDataModels::EnableTCCModel *__return_ptr retstr, Swift::String confirmLabel, Swift::String cancelLabel, Swift::String_optional prompt)
{
  retstr->confirmLabel = confirmLabel;
  retstr->cancelLabel = cancelLabel;
  retstr->prompt = prompt;
}

double protocol witness for Decodable.init(from:) in conformance ArchivedViewModel@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  ArchivedViewModel.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivedViewModel(void *a1)
{
  return ArchivedViewModel.encode(to:)(a1);
}

uint64_t destroy for ArchivedViewModel(uint64_t a1)
{
  outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for ArchivedViewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  a1[4] = v7;
  a1[5] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for ArchivedViewModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *assignWithTake for ArchivedViewModel(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  uint64_t v6 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivedViewModel(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArchivedViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ArchivedViewModel()
{
  return &type metadata for ArchivedViewModel;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ArchivedViewModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ArchivedViewModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10E4CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for ArchivedViewModel.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for ArchivedViewModel.CodingKeys(unsigned char *result, char a2)
{
  *__n128 result = a2;
  return result;
}

void *type metadata accessor for ArchivedViewModel.CodingKeys()
{
  return &unk_59E70;
}

uint64_t OUTLINED_FUNCTION_1_5()
{
  return v0;
}

void OUTLINED_FUNCTION_2_2(char a1@<W8>)
{
  *(unsigned char *)(v1 - 80) = a1;
}

uint64_t OUTLINED_FUNCTION_3_0()
{
  return outlined consume of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_4_2()
{
  return v0;
}

uint64_t INImage.convertToVisualProperty()(uint64_t a1)
{
  v2[21] = a1;
  v2[22] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageElement.AspectRatio?);
  v2[23] = OUTLINED_FUNCTION_4_3();
  uint64_t v3 = type metadata accessor for ImageElement.AspectRatio();
  v2[24] = v3;
  OUTLINED_FUNCTION_1_6(v3);
  v2[25] = v4;
  v2[26] = OUTLINED_FUNCTION_4_3();
  uint64_t v5 = type metadata accessor for ImageElement.ImageStyle();
  v2[27] = v5;
  OUTLINED_FUNCTION_1_6(v5);
  v2[28] = v6;
  v2[29] = OUTLINED_FUNCTION_4_3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageElement.Background?);
  v2[30] = OUTLINED_FUNCTION_4_3();
  uint64_t v7 = type metadata accessor for ImageElement.RenderingMode();
  v2[31] = v7;
  OUTLINED_FUNCTION_1_6(v7);
  v2[32] = v8;
  v2[33] = OUTLINED_FUNCTION_4_3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Color?);
  v2[34] = OUTLINED_FUNCTION_4_3();
  uint64_t v9 = type metadata accessor for ImageElement();
  v2[35] = v9;
  OUTLINED_FUNCTION_1_6(v9);
  v2[36] = v10;
  v2[37] = OUTLINED_FUNCTION_4_3();
  return _swift_task_switch(INImage.convertToVisualProperty(), 0, 0);
}

uint64_t INImage.convertToVisualProperty()()
{
  if ([*(id *)(v0 + 176) _isSystem])
  {
    outlined bridged method (pb) of @objc INImage._name.getter(*(void **)(v0 + 176));
    if (v1)
    {
      uint64_t v2 = *(void *)(v0 + 272);
      uint64_t v3 = *(void *)(v0 + 256);
      uint64_t v4 = *(void *)(v0 + 264);
      uint64_t v54 = v4;
      uint64_t v55 = v2;
      uint64_t v6 = *(void *)(v0 + 240);
      uint64_t v5 = *(void *)(v0 + 248);
      uint64_t v56 = v5;
      uint64_t v7 = *(void *)(v0 + 224);
      uint64_t v8 = *(void *)(v0 + 232);
      uint64_t v9 = *(void *)(v0 + 216);
      uint64_t v52 = v9;
      uint64_t v57 = *(void *)(v0 + 168);
      uint64_t v10 = type metadata accessor for Color();
      __swift_storeEnumTagSinglePayload(v2, 1, 1, v10);
      (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v4, enum case for ImageElement.RenderingMode.template(_:), v5);
      uint64_t v11 = type metadata accessor for ImageElement.Background();
      __swift_storeEnumTagSinglePayload(v6, 1, 1, v11);
      (*(void (**)(uint64_t, void, uint64_t))(v7 + 104))(v8, enum case for ImageElement.ImageStyle.default(_:), v9);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_ProtoIdiom>);
      uint64_t v12 = type metadata accessor for _ProtoIdiom();
      OUTLINED_FUNCTION_0_1();
      uint64_t v14 = v13;
      unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      uint64_t v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_48DD0;
      (*(void (**)(unint64_t, void, uint64_t))(v14 + 104))(v16 + v15, enum case for _ProtoIdiom.default(_:), v12);
      specialized Set.init(_nonEmptyArrayLiteral:)(v16);
      static ImageElement.symbol(_:darkModeName:tintColor:renderingMode:imageStyle:background:idioms:punchesThroughBackground:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v52);
      outlined destroy of ImageElement.AspectRatio?(v6, &demangling cache variable for type metadata for ImageElement.Background?);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v54, v56);
      outlined destroy of ImageElement.AspectRatio?(v55, &demangling cache variable for type metadata for Color?);
      VisualPropertyConvertible<>.asVisualProperty()();
      OUTLINED_FUNCTION_7_0();
      v19(v17, v18);
      uint64_t v21 = type metadata accessor for VisualProperty();
      uint64_t v22 = v57;
      goto LABEL_15;
    }
  }
  if (![*(id *)(v0 + 176) _requiresRetrieval])
  {
    id v25 = *(id *)(v0 + 176);
    uint64_t v26 = outlined bridged method (pb) of @objc INImage._imageData.getter(v25);
    if (v27 >> 60 == 15)
    {
      if (one-time initialization token for voiceCommands != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Logger.voiceCommands);
      long long v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        *(_WORD *)swift_slowAlloc() = 0;
        OUTLINED_FUNCTION_15(&dword_0, v31, v32, "image data is empty");
        OUTLINED_FUNCTION_10();
      }
      uint64_t v33 = *(void *)(v0 + 168);

      uint64_t v21 = type metadata accessor for VisualProperty();
      uint64_t v22 = v33;
      uint64_t v34 = 1;
      goto LABEL_16;
    }
    unint64_t v35 = v27;
    uint64_t v36 = *(void *)(v0 + 184);
    uint64_t v58 = *(void *)(v0 + 168);
    uint64_t v53 = v26;
    outlined copy of Data._Representation(v26, v27);
    OUTLINED_FUNCTION_13();
    OUTLINED_FUNCTION_13();
    ImageElement.AspectRatio.init(width:height:)();
    uint64_t v37 = OUTLINED_FUNCTION_11();
    v38(v37);
    OUTLINED_FUNCTION_14();
    uint64_t v39 = OUTLINED_FUNCTION_7_1();
    v40(v39);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_ProtoIdiom>);
    type metadata accessor for _ProtoIdiom();
    OUTLINED_FUNCTION_0_1();
    uint64_t v41 = OUTLINED_FUNCTION_5_1();
    *(_OWORD *)(v41 + 16) = xmmword_48DD0;
    OUTLINED_FUNCTION_16();
    v42();
    specialized Set.init(_nonEmptyArrayLiteral:)(v41);
    OUTLINED_FUNCTION_3_1();
    swift_bridgeObjectRelease();
    uint64_t v43 = OUTLINED_FUNCTION_9_0();
    v44(v43);
    outlined destroy of ImageElement.AspectRatio?(v36, &demangling cache variable for type metadata for ImageElement.AspectRatio?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<VisualElementConvertible>);
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_48DD0;
    *(void *)(v45 + 56) = type metadata accessor for VisualElement();
    *(void *)(v45 + 64) = &protocol witness table for VisualElement;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v45 + 32));
    ImageElement.asVisualElement()();
    VisualProperty.init(_:safeForLogging:focusAction:selectedAction:)();
    outlined consume of Data?(v53, v35);

    outlined consume of Data?(v53, v35);
    OUTLINED_FUNCTION_7_0();
    v47(v46);
    OUTLINED_FUNCTION_7_0();
    v49(v48);
    uint64_t v21 = type metadata accessor for VisualProperty();
    uint64_t v22 = v58;
LABEL_15:
    uint64_t v34 = 0;
LABEL_16:
    OUTLINED_FUNCTION_2_3(v22, v34, v20, v21);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v50 = *(uint64_t (**)(void))(v0 + 8);
    return v50();
  }
  uint64_t v23 = *(void **)(v0 + 176);
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 144;
  *(void *)(v0 + 24) = INImage.convertToVisualProperty();
  uint64_t v24 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned INImage?, @unowned NSError?) -> () with result type INImage?;
  *(void *)(v0 + 104) = &block_descriptor;
  *(void *)(v0 + 112) = v24;
  [v23 _retrieveImageDataWithReply:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 304) = v1;
  if (v1) {
    uint64_t v2 = INImage.convertToVisualProperty();
  }
  else {
    uint64_t v2 = INImage.convertToVisualProperty();
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  void (*v27)(void);
  uint64_t v28;
  void (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t);
  uint64_t v33;
  void (*v34)(uint64_t);
  uint64_t (*v35)(void);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  uint64_t v1 = (void *)v0[18];
  if (!v1)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.voiceCommands);
    unint64_t v15 = Logger.logObject.getter();
    uint64_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_0, v15, v16, "Can't retrieve image;", v17, 2u);
      OUTLINED_FUNCTION_10();
    }
    uint64_t v18 = v0[21];

    uint64_t v12 = type metadata accessor for VisualProperty();
    uint64_t v13 = v18;
    goto LABEL_13;
  }
  uint64_t v2 = v1;
  uint64_t v3 = outlined bridged method (pb) of @objc INImage._imageData.getter(v2);
  if (v4 >> 60 == 15)
  {
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.voiceCommands);
    uint64_t v6 = Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_15(&dword_0, v8, v9, "image data is empty");
      OUTLINED_FUNCTION_10();
    }
    uint64_t v10 = v0[21];

    uint64_t v12 = type metadata accessor for VisualProperty();
    uint64_t v13 = v10;
LABEL_13:
    unint64_t v19 = 1;
    goto LABEL_15;
  }
  uint64_t v20 = v4;
  uint64_t v21 = v0[23];
  long long v38 = v0[21];
  uint64_t v37 = v3;
  outlined copy of Data._Representation(v3, v4);
  OUTLINED_FUNCTION_13();
  OUTLINED_FUNCTION_13();
  ImageElement.AspectRatio.init(width:height:)();
  uint64_t v22 = OUTLINED_FUNCTION_11();
  v23(v22);
  OUTLINED_FUNCTION_14();
  uint64_t v24 = OUTLINED_FUNCTION_7_1();
  v25(v24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_ProtoIdiom>);
  type metadata accessor for _ProtoIdiom();
  OUTLINED_FUNCTION_0_1();
  uint64_t v26 = OUTLINED_FUNCTION_5_1();
  *(_OWORD *)(v26 + 16) = xmmword_48DD0;
  OUTLINED_FUNCTION_16();
  v27();
  specialized Set.init(_nonEmptyArrayLiteral:)(v26);
  OUTLINED_FUNCTION_3_1();
  swift_bridgeObjectRelease();
  uint64_t v28 = OUTLINED_FUNCTION_9_0();
  v29(v28);
  outlined destroy of ImageElement.AspectRatio?(v21, &demangling cache variable for type metadata for ImageElement.AspectRatio?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<VisualElementConvertible>);
  os_log_type_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_48DD0;
  *(void *)(v30 + 56) = type metadata accessor for VisualElement();
  *(void *)(v30 + 64) = &protocol witness table for VisualElement;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v30 + 32));
  ImageElement.asVisualElement()();
  VisualProperty.init(_:safeForLogging:focusAction:selectedAction:)();
  outlined consume of Data?(v37, v20);

  outlined consume of Data?(v37, v20);
  OUTLINED_FUNCTION_7_0();
  v32(v31);
  OUTLINED_FUNCTION_7_0();
  v34(v33);
  uint64_t v12 = type metadata accessor for VisualProperty();
  uint64_t v13 = v38;
  unint64_t v19 = 0;
LABEL_15:
  OUTLINED_FUNCTION_2_3(v13, v19, v11, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v35 = (uint64_t (*)(void))v0[1];
  return v35();
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  void *v13;
  uint64_t v14;

  uint64_t v13 = v0;
  swift_willThrow();
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.voiceCommands);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&dword_0, v2, v3, "Error retrieving image data %s", v4, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v0[21];
  uint64_t v8 = type metadata accessor for VisualProperty();
  OUTLINED_FUNCTION_2_3(v7, 1, v9, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned INImage?, @unowned NSError?) -> () with result type INImage?(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    id v4 = a3;
    return specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(v3, v4);
  }
  else
  {
    id v7 = a2;
    return specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(v3, (uint64_t)a2);
  }
}

uint64_t ImageElement.convertToVisualProperty()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<VisualElementConvertible>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_48DD0;
  *(void *)(v0 + 56) = type metadata accessor for VisualElement();
  *(void *)(v0 + 64) = &protocol witness table for VisualElement;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 32));
  ImageElement.asVisualElement()();
  return VisualProperty.init(_:safeForLogging:focusAction:selectedAction:)();
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _ProtoIdiom();
  OUTLINED_FUNCTION_0_1();
  uint64_t v31 = v3;
  uint64_t v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v35 = (char *)&v26 - v7;
  if (!*(void *)(a1 + 16))
  {
    uint64_t v9 = &_swiftEmptySetSingleton;
    goto LABEL_16;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<_ProtoIdiom>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v9 = (unsigned char *)result;
  uint64_t v30 = *(void *)(a1 + 16);
  if (!v30)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    return (uint64_t)v9;
  }
  unint64_t v10 = 0;
  uint64_t v29 = a1 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80));
  uint64_t v33 = v31 + 16;
  uint64_t v34 = result + 56;
  uint64_t v11 = (void (**)(char *, uint64_t))(v31 + 8);
  uint64_t v27 = a1;
  uint64_t v28 = (uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 32);
  while (v10 < *(void *)(a1 + 16))
  {
    uint64_t v12 = *(void *)(v31 + 72);
    uint64_t v13 = *(void (**)(void))(v31 + 16);
    OUTLINED_FUNCTION_12();
    v13();
    lazy protocol witness table accessor for type _ProtoIdiom and conformance _ProtoIdiom(&lazy protocol witness table cache variable for type _ProtoIdiom and conformance _ProtoIdiom);
    uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)() & ~(-1 << v9[32]);
    OUTLINED_FUNCTION_8_1();
    if ((v17 & v16) != 0)
    {
      unint64_t v32 = v10;
      uint64_t v19 = ~v18;
      while (1)
      {
        OUTLINED_FUNCTION_12();
        v13();
        lazy protocol witness table accessor for type _ProtoIdiom and conformance _ProtoIdiom(&lazy protocol witness table cache variable for type _ProtoIdiom and conformance _ProtoIdiom);
        char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v21 = *v11;
        (*v11)(v6, v2);
        if (v20) {
          break;
        }
        uint64_t v14 = (v14 + 1) & v19;
        OUTLINED_FUNCTION_8_1();
        if ((v16 & v17) == 0)
        {
          a1 = v27;
          unint64_t v10 = v32;
          goto LABEL_10;
        }
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v21)(v35, v2);
      a1 = v27;
      unint64_t v10 = v32;
    }
    else
    {
LABEL_10:
      uint64_t v22 = v35;
      *(void *)(v34 + 8 * v15) = v17 | v16;
      uint64_t result = (*v28)(*((void *)v9 + 6) + v14 * v12, v22, v2);
      uint64_t v23 = *((void *)v9 + 2);
      BOOL v24 = __OFADD__(v23, 1);
      uint64_t v25 = v23 + 1;
      if (v24) {
        goto LABEL_18;
      }
      *((void *)v9 + 2) = v25;
    }
    if (++v10 == v30) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

unsigned char **closure #1 in OSLogArguments.append(_:)(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t outlined bridged method (pb) of @objc INImage._imageData.getter(void *a1)
{
  id v1 = [a1 _imageData];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (pb) of @objc INImage._name.getter(void *a1)
{
  id v1 = [a1 _name];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined destroy of ImageElement.AspectRatio?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_7_0();
  v3();
  return a1;
}

uint64_t lazy protocol witness table accessor for type _ProtoIdiom and conformance _ProtoIdiom(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _ProtoIdiom();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_6(uint64_t a1)
{
  return a1 - 8;
}

uint64_t OUTLINED_FUNCTION_2_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __swift_storeEnumTagSinglePayload(a1, a2, 1, a4);
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_3_1()
{
  return static ImageElement.pngData(_:darkModeData:imageStyle:aspectRatio:fixedWidth:fixedHeight:idioms:)();
}

uint64_t OUTLINED_FUNCTION_4_3()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_5_1()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_7_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_10()
{
  return swift_slowDealloc();
}

uint64_t OUTLINED_FUNCTION_11()
{
  return v0;
}

id OUTLINED_FUNCTION_13()
{
  uint64_t v3 = *(const char **)(v1 + 520);
  return [v0 v3];
}

uint64_t OUTLINED_FUNCTION_14()
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
}

void OUTLINED_FUNCTION_15(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t CustomIntentHandledView.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CustomIntentHandledView();
  return outlined init with copy of WorkflowDataModels.CustomIntentHandledModel(v1 + *(int *)(v3 + 20), a1, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentHandledModel);
}

uint64_t type metadata accessor for CustomIntentHandledView()
{
  uint64_t result = type metadata singleton initialization cache for CustomIntentHandledView;
  if (!type metadata singleton initialization cache for CustomIntentHandledView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t CustomIntentHandledView.body.getter()
{
  uint64_t v1 = type metadata accessor for CustomIntentHandledView();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  __chkstk_darwin(v1 - 8);
  outlined init with copy of WorkflowDataModels.CustomIntentHandledModel(v0, (uint64_t)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for CustomIntentHandledView);
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = swift_allocObject();
  outlined init with take of CustomIntentHandledView((uint64_t)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5 + v4, (void (*)(void))type metadata accessor for CustomIntentHandledView);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(CustomIntentView, (<<opaque return type of View.buttonStyle<A>(_:)>>.0)?)>);
  lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type TupleView<(CustomIntentView, (<<opaque return type of View.buttonStyle<A>(_:)>>.0)?)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(CustomIntentView, (<<opaque return type of View.buttonStyle<A>(_:)>>.0)?)>);
  return ComponentStack.init(content:)();
}

uint64_t closure #1 in CustomIntentHandledView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v3 = type metadata accessor for RFButtonStyle();
  uint64_t v46 = *(void *)(v3 - 8);
  uint64_t v47 = v3;
  __chkstk_darwin(v3);
  uint64_t v45 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CustomIntentHandledView();
  uint64_t v6 = v5 - 8;
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v40 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v43 = v8;
  uint64_t v44 = v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  uint64_t v42 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v41 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (<<opaque return type of View.buttonStyle<A>(_:)>>.0)?);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v40 - v17;
  uint64_t v19 = type metadata accessor for CustomIntentView();
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v40 - v24;
  uint64_t v26 = a1 + *(int *)(v6 + 28);
  outlined init with copy of WorkflowDataModels.CustomIntentHandledModel(v26, (uint64_t)&v40 + *(int *)(v23 + 28) - v24, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentModel);
  ActionHandler.init()();
  if (*(unsigned char *)(v26 + *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0) + 28)) == 1)
  {
    outlined init with copy of WorkflowDataModels.CustomIntentHandledModel(a1, (uint64_t)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for CustomIntentHandledView);
    unint64_t v27 = (*(unsigned __int8 *)(v40 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
    uint64_t v28 = swift_allocObject();
    uint64_t v29 = outlined init with take of CustomIntentHandledView((uint64_t)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v28 + v27, (void (*)(void))type metadata accessor for CustomIntentHandledView);
    __chkstk_darwin(v29);
    *(&v40 - 2) = a1;
    Button.init(action:label:)();
    uint64_t v30 = v45;
    static PrimitiveButtonStyle<>.rfButton.getter();
    lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
    lazy protocol witness table accessor for type RFButtonStyle and conformance RFButtonStyle();
    uint64_t v31 = v41;
    uint64_t v32 = v43;
    uint64_t v33 = v47;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v30, v33);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v11, v32);
    uint64_t v34 = v48;
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v18, v31, v48);
    uint64_t v35 = 0;
    uint64_t v36 = v34;
  }
  else
  {
    uint64_t v35 = 1;
    uint64_t v36 = v48;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v18, v35, 1, v36);
  outlined init with copy of WorkflowDataModels.CustomIntentHandledModel((uint64_t)v25, (uint64_t)v22, (void (*)(void))type metadata accessor for CustomIntentView);
  outlined init with copy of (<<opaque return type of View.buttonStyle<A>(_:)>>.0)?((uint64_t)v18, (uint64_t)v16, &demangling cache variable for type metadata for (<<opaque return type of View.buttonStyle<A>(_:)>>.0)?);
  uint64_t v37 = v49;
  outlined init with copy of WorkflowDataModels.CustomIntentHandledModel((uint64_t)v22, v49, (void (*)(void))type metadata accessor for CustomIntentView);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CustomIntentView, (<<opaque return type of View.buttonStyle<A>(_:)>>.0)?));
  outlined init with copy of (<<opaque return type of View.buttonStyle<A>(_:)>>.0)?((uint64_t)v16, v37 + *(int *)(v38 + 48), &demangling cache variable for type metadata for (<<opaque return type of View.buttonStyle<A>(_:)>>.0)?);
  _s9SnippetUI21StandardActionHandlerVSgWOhTm_0((uint64_t)v18, &demangling cache variable for type metadata for (<<opaque return type of View.buttonStyle<A>(_:)>>.0)?);
  outlined destroy of CustomIntentView((uint64_t)v25);
  _s9SnippetUI21StandardActionHandlerVSgWOhTm_0((uint64_t)v16, &demangling cache variable for type metadata for (<<opaque return type of View.buttonStyle<A>(_:)>>.0)?);
  return outlined destroy of CustomIntentView((uint64_t)v22);
}

uint64_t partial apply for closure #1 in CustomIntentHandledView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CustomIntentHandledView();
  OUTLINED_FUNCTION_1_1(v3);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return closure #1 in CustomIntentHandledView.body.getter(v5, a1);
}

uint64_t closure #1 in closure #1 in CustomIntentHandledView.body.getter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InteractionType?);
  __chkstk_darwin(v2 - 8);
  uint64_t v42 = (uint64_t)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionProperty?);
  __chkstk_darwin(v4 - 8);
  uint64_t v41 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StandardActionHandler?);
  __chkstk_darwin(v6 - 8);
  uint64_t v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Command();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ActionElement();
  uint64_t v43 = *(void *)(v12 - 8);
  uint64_t v44 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
  uint64_t v46 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = a1 + *(int *)(type metadata accessor for CustomIntentHandledView() + 20);
  uint64_t v22 = type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
  outlined init with copy of (<<opaque return type of View.buttonStyle<A>(_:)>>.0)?(v21 + *(int *)(v22 + 24), (uint64_t)v17, &demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18) == 1)
  {
    uint64_t v23 = &demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?;
    uint64_t v24 = (uint64_t)v17;
    return _s9SnippetUI21StandardActionHandlerVSgWOhTm_0(v24, v23);
  }
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v20, v17, v18);
  *(void *)uint64_t v11 = CodableAceObject.wrappedValue.getter();
  v11[8] = 1;
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for Command.aceCommand(_:), v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_ProtoIdiom>);
  uint64_t v25 = type metadata accessor for _ProtoIdiom();
  uint64_t v26 = *(void *)(v25 - 8);
  unint64_t v27 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  uint64_t v28 = swift_allocObject();
  long long v40 = xmmword_48DD0;
  *(_OWORD *)(v28 + 16) = xmmword_48DD0;
  (*(void (**)(unint64_t, void, uint64_t))(v26 + 104))(v28 + v27, enum case for _ProtoIdiom.default(_:), v25);
  specialized Set.init(_nonEmptyArrayLiteral:)(v28);
  ActionElement.init(_:text:idioms:)();
  uint64_t v29 = (uint64_t)v45;
  ActionHandler.wrappedValue.getter();
  uint64_t v30 = type metadata accessor for StandardActionHandler();
  if (__swift_getEnumTagSinglePayload(v29, 1, v30) == 1)
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v14, v44);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v20, v18);
    uint64_t v23 = &demangling cache variable for type metadata for StandardActionHandler?;
    uint64_t v24 = v29;
    return _s9SnippetUI21StandardActionHandlerVSgWOhTm_0(v24, v23);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ActionElementConvertible>);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = v40;
  uint64_t v33 = v44;
  *(void *)(v32 + 56) = v44;
  *(void *)(v32 + 64) = &protocol witness table for ActionElement;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v32 + 32));
  uint64_t v35 = v43;
  (*(void (**)(uint64_t *, char *, uint64_t))(v43 + 16))(boxed_opaque_existential_1, v14, v33);
  uint64_t v36 = (uint64_t)v41;
  ActionProperty.init(_:)();
  uint64_t v37 = type metadata accessor for ActionProperty();
  __swift_storeEnumTagSinglePayload(v36, 0, 1, v37);
  uint64_t v38 = type metadata accessor for InteractionType();
  uint64_t v39 = v42;
  __swift_storeEnumTagSinglePayload(v42, 1, 1, v38);
  StandardActionHandler.perform(_:interactionType:)();
  _s9SnippetUI21StandardActionHandlerVSgWOhTm_0(v39, &demangling cache variable for type metadata for InteractionType?);
  _s9SnippetUI21StandardActionHandlerVSgWOhTm_0(v36, &demangling cache variable for type metadata for ActionProperty?);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v33);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v20, v18);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v29, v30);
}

uint64_t closure #2 in closure #1 in CustomIntentHandledView.body.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for CustomIntentHandledView();
  type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v2 = Text.init<A>(_:)();
  uint64_t v4 = v3;
  char v6 = v5 & 1;
  static Font.headline.getter();
  uint64_t v7 = Text.font(_:)();
  uint64_t v9 = v8;
  char v11 = v10;
  uint64_t v13 = v12;
  swift_release();
  outlined consume of Text.Storage(v2, v4, v6);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v9;
  *(unsigned char *)(a1 + 16) = v11 & 1;
  *(void *)(a1 + 24) = v13;
  return result;
}

uint64_t CustomIntentHandledView.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  ActionHandler.init()();
  uint64_t v4 = type metadata accessor for CustomIntentHandledView();
  return outlined init with take of CustomIntentHandledView(a1, a2 + *(int *)(v4 + 20), (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentHandledModel);
}

uint64_t outlined init with take of CustomIntentHandledView(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t associated type witness table accessor for View.Body : View in CustomIntentHandledView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for CustomIntentHandledView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ActionHandler();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    char v10 = (char *)a2 + v8;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
    uint64_t v13 = v12[5];
    uint64_t v14 = &v9[v13];
    uint64_t v15 = &v10[v13];
    uint64_t v16 = type metadata accessor for CodableINInteraction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = v12[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    uint64_t v20 = type metadata accessor for VisualProperty();
    if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
      memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
      __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v20);
    }
    uint64_t v23 = v12[7];
    uint64_t v24 = &v9[v23];
    uint64_t v25 = &v10[v23];
    uint64_t v26 = *((void *)v25 + 1);
    *(void *)uint64_t v24 = *(void *)v25;
    *((void *)v24 + 1) = v26;
    unint64_t v27 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
    uint64_t v28 = v27[5];
    uint64_t v29 = &v9[v28];
    uint64_t v30 = &v10[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *(void *)uint64_t v29 = *(void *)v30;
    *((void *)v29 + 1) = v31;
    uint64_t v32 = v27[6];
    uint64_t v33 = &v9[v32];
    uint64_t v34 = &v10[v32];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
    if (__swift_getEnumTagSinglePayload((uint64_t)v34, 1, v35))
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
      memcpy(v33, v34, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(v33, v34, v35);
      __swift_storeEnumTagSinglePayload((uint64_t)v33, 0, 1, v35);
    }
    v9[v27[7]] = v10[v27[7]];
  }
  return a1;
}

uint64_t destroy for CustomIntentHandledView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v8 = v5 + *(int *)(v7 + 20);
  uint64_t v9 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v5 + *(int *)(v7 + 24);
  uint64_t v11 = type metadata accessor for VisualProperty();
  if (!__swift_getEnumTagSinglePayload(v10, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
  swift_bridgeObjectRelease();
  uint64_t v13 = v5 + *(int *)(v12 + 24);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
  uint64_t result = __swift_getEnumTagSinglePayload(v13, 1, v14);
  if (!result)
  {
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);
    return v16(v13, v14);
  }
  return result;
}

uint64_t initializeWithCopy for CustomIntentHandledView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = v11[6];
  uint64_t v17 = (void *)(v8 + v16);
  uint64_t v18 = (const void *)(v9 + v16);
  uint64_t v19 = type metadata accessor for VisualProperty();
  if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v17, v18, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
  }
  uint64_t v21 = v11[7];
  uint64_t v22 = (void *)(v8 + v21);
  uint64_t v23 = (void *)(v9 + v21);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
  uint64_t v26 = v25[5];
  unint64_t v27 = (void *)(v8 + v26);
  uint64_t v28 = (void *)(v9 + v26);
  uint64_t v29 = v28[1];
  *unint64_t v27 = *v28;
  v27[1] = v29;
  uint64_t v30 = v25[6];
  uint64_t v31 = (void *)(v8 + v30);
  uint64_t v32 = (const void *)(v9 + v30);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
  if (__swift_getEnumTagSinglePayload((uint64_t)v32, 1, v33))
  {
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
    memcpy(v31, v32, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v32, v33);
    __swift_storeEnumTagSinglePayload((uint64_t)v31, 0, 1, v33);
  }
  *(unsigned char *)(v8 + v25[7]) = *(unsigned char *)(v9 + v25[7]);
  return a1;
}

uint64_t assignWithCopy for CustomIntentHandledView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = v11[6];
  uint64_t v17 = (void *)(v8 + v16);
  uint64_t v18 = (const void *)(v9 + v16);
  uint64_t v19 = type metadata accessor for VisualProperty();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, v19);
  int v21 = __swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19);
  if (EnumTagSinglePayload)
  {
    if (!v21)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
      __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v22 = *(void *)(v19 - 8);
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v22 + 8))(v17, v19);
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v17, v18, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v22 + 24))(v17, v18, v19);
LABEL_7:
  uint64_t v24 = v11[7];
  uint64_t v25 = (void *)(v8 + v24);
  uint64_t v26 = (void *)(v9 + v24);
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v27 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
  uint64_t v28 = v27[5];
  uint64_t v29 = (void *)(v8 + v28);
  uint64_t v30 = (void *)(v9 + v28);
  *uint64_t v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v31 = v27[6];
  uint64_t v32 = (void *)(v8 + v31);
  uint64_t v33 = (const void *)(v9 + v31);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
  int v35 = __swift_getEnumTagSinglePayload((uint64_t)v32, 1, v34);
  int v36 = __swift_getEnumTagSinglePayload((uint64_t)v33, 1, v34);
  if (!v35)
  {
    uint64_t v37 = *(void *)(v34 - 8);
    if (!v36)
    {
      (*(void (**)(void *, const void *, uint64_t))(v37 + 24))(v32, v33, v34);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v37 + 8))(v32, v34);
    goto LABEL_12;
  }
  if (v36)
  {
LABEL_12:
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
    memcpy(v32, v33, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
  __swift_storeEnumTagSinglePayload((uint64_t)v32, 0, 1, v34);
LABEL_13:
  *(unsigned char *)(v8 + v27[7]) = *(unsigned char *)(v9 + v27[7]);
  return a1;
}

uint64_t initializeWithTake for CustomIntentHandledView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  uint64_t v16 = v11[6];
  uint64_t v17 = (void *)(v8 + v16);
  uint64_t v18 = (const void *)(v9 + v16);
  uint64_t v19 = type metadata accessor for VisualProperty();
  if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v17, v18, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
  }
  *(_OWORD *)(v8 + v11[7]) = *(_OWORD *)(v9 + v11[7]);
  int v21 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
  *(_OWORD *)(v8 + v21[5]) = *(_OWORD *)(v9 + v21[5]);
  uint64_t v22 = v21[6];
  uint64_t v23 = (void *)(v8 + v22);
  uint64_t v24 = (const void *)(v9 + v22);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
  if (__swift_getEnumTagSinglePayload((uint64_t)v24, 1, v25))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
    memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
    __swift_storeEnumTagSinglePayload((uint64_t)v23, 0, 1, v25);
  }
  *(unsigned char *)(v8 + v21[7]) = *(unsigned char *)(v9 + v21[7]);
  return a1;
}

uint64_t assignWithTake for CustomIntentHandledView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = v11[6];
  uint64_t v17 = (void *)(v8 + v16);
  uint64_t v18 = (const void *)(v9 + v16);
  uint64_t v19 = type metadata accessor for VisualProperty();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, v19);
  int v21 = __swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19);
  if (EnumTagSinglePayload)
  {
    if (!v21)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
      __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v22 = *(void *)(v19 - 8);
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v22 + 8))(v17, v19);
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v17, v18, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v22 + 40))(v17, v18, v19);
LABEL_7:
  uint64_t v24 = v11[7];
  uint64_t v25 = (void *)(v8 + v24);
  uint64_t v26 = (uint64_t *)(v9 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  *uint64_t v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
  uint64_t v30 = v29[5];
  uint64_t v31 = (void *)(v8 + v30);
  uint64_t v32 = (uint64_t *)(v9 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  uint64_t v35 = v29[6];
  int v36 = (void *)(v8 + v35);
  uint64_t v37 = (const void *)(v9 + v35);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
  int v39 = __swift_getEnumTagSinglePayload((uint64_t)v36, 1, v38);
  int v40 = __swift_getEnumTagSinglePayload((uint64_t)v37, 1, v38);
  if (!v39)
  {
    uint64_t v41 = *(void *)(v38 - 8);
    if (!v40)
    {
      (*(void (**)(void *, const void *, uint64_t))(v41 + 40))(v36, v37, v38);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v41 + 8))(v36, v38);
    goto LABEL_12;
  }
  if (v40)
  {
LABEL_12:
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
    memcpy(v36, v37, *(void *)(*(void *)(v42 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v38 - 8) + 32))(v36, v37, v38);
  __swift_storeEnumTagSinglePayload((uint64_t)v36, 0, 1, v38);
LABEL_13:
  *(unsigned char *)(v8 + v29[7]) = *(unsigned char *)(v9 + v29[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomIntentHandledView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_14A24);
}

uint64_t sub_14A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v8 = type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
  }

  return __swift_getEnumTagSinglePayload(v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for CustomIntentHandledView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_14AB4);
}

uint64_t sub_14AB4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v10 = type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }

  return __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

uint64_t type metadata completion function for CustomIntentHandledView()
{
  uint64_t result = type metadata accessor for ActionHandler();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_14C00()
{
  return lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(CustomIntentView, (<<opaque return type of View.buttonStyle<A>(_:)>>.0)?)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(CustomIntentView, (<<opaque return type of View.buttonStyle<A>(_:)>>.0)?)>>);
}

uint64_t outlined init with copy of WorkflowDataModels.CustomIntentHandledModel(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_2();
  uint64_t v4 = OUTLINED_FUNCTION_4_4();
  v5(v4);
  return a2;
}

uint64_t outlined destroy of CustomIntentView(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CustomIntentView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t objectdestroyTm_2()
{
  unint64_t v1 = (int *)(type metadata accessor for CustomIntentHandledView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0();
  v5();
  uint64_t v6 = v0 + v3 + v1[7];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0();
  v7();
  uint64_t v8 = type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  type metadata accessor for CodableINInteraction();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0();
  v9();
  uint64_t v10 = v6 + *(int *)(v8 + 24);
  uint64_t v11 = type metadata accessor for VisualProperty();
  if (!__swift_getEnumTagSinglePayload(v10, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
  swift_bridgeObjectRelease();
  uint64_t v13 = v6 + *(int *)(v12 + 24);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
  if (!__swift_getEnumTagSinglePayload(v13, 1, v14)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t partial apply for closure #1 in closure #1 in CustomIntentHandledView.body.getter()
{
  uint64_t v1 = type metadata accessor for CustomIntentHandledView();
  OUTLINED_FUNCTION_1_1(v1);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return closure #1 in closure #1 in CustomIntentHandledView.body.getter(v3);
}

uint64_t partial apply for closure #2 in closure #1 in CustomIntentHandledView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in closure #1 in CustomIntentHandledView.body.getter(a1);
}

uint64_t outlined init with copy of (<<opaque return type of View.buttonStyle<A>(_:)>>.0)?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_2();
  uint64_t v4 = OUTLINED_FUNCTION_4_4();
  v5(v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_4_4()
{
  return v0;
}

uint64_t one-time initialization function for encoder(uint64_t a1)
{
  return one-time initialization function for encoder(a1, (void (*)(void))&type metadata accessor for PropertyListEncoder, (uint64_t (*)(void))&PropertyListEncoder.init(), &static SiriLinkViewModel.encoder);
}

uint64_t *SiriLinkViewModel.encoder.unsafeMutableAddressor()
{
  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  return &static SiriLinkViewModel.encoder;
}

uint64_t static SiriLinkViewModel.encoder.getter()
{
  return static SiriLinkViewModel.encoder.getter(&one-time initialization token for encoder);
}

uint64_t one-time initialization function for decoder(uint64_t a1)
{
  return one-time initialization function for encoder(a1, (void (*)(void))&type metadata accessor for PropertyListDecoder, (uint64_t (*)(void))&PropertyListDecoder.init(), &static SiriLinkViewModel.decoder);
}

uint64_t one-time initialization function for encoder(uint64_t a1, void (*a2)(void), uint64_t (*a3)(void), uint64_t *a4)
{
  a2(0);
  swift_allocObject();
  uint64_t result = a3();
  *a4 = result;
  return result;
}

uint64_t *SiriLinkViewModel.decoder.unsafeMutableAddressor()
{
  if (one-time initialization token for decoder != -1) {
    swift_once();
  }
  return &static SiriLinkViewModel.decoder;
}

uint64_t static SiriLinkViewModel.decoder.getter()
{
  return static SiriLinkViewModel.encoder.getter(&one-time initialization token for decoder);
}

uint64_t static SiriLinkViewModel.encoder.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_retain();
}

double static SiriLinkViewModel.decode(from:)@<D0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for decoder != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
  OUTLINED_FUNCTION_10_0();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (!v1)
  {
    double result = *(double *)&v4;
    *(_OWORD *)a1 = v4;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = v6;
    *(_OWORD *)(a1 + 48) = v7;
    *(_OWORD *)(a1 + 64) = v8;
    *(unsigned char *)(a1 + 80) = v9;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel and conformance SiriLinkViewModel;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel and conformance SiriLinkViewModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel and conformance SiriLinkViewModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel and conformance SiriLinkViewModel;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel and conformance SiriLinkViewModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel and conformance SiriLinkViewModel);
  }
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SiriLinkViewModel.base64EncodedString()()
{
  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  outlined init with take of SiriLinkViewModel(v0, __dst);
  lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
  uint64_t v4 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (!v1)
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    Swift::String v8 = Data.base64EncodedString(options:)(0);
    uint64_t countAndFlagsBits = v8._countAndFlagsBits;
    object = v8._object;
    outlined consume of Data._Representation(v6, v7);
  }
  uint64_t v9 = countAndFlagsBits;
  uint64_t v10 = object;
  result._object = v10;
  result._uint64_t countAndFlagsBits = v9;
  return result;
}

void *outlined init with take of SiriLinkViewModel(void *__src, void *__dst)
{
  return memcpy(__dst, __src, 0x51uLL);
}

uint64_t SiriLinkViewModel.encoded()()
{
  if (one-time initialization token for encoder != -1) {
    swift_once();
  }
  outlined init with take of SiriLinkViewModel(v0, __dst);
  lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
  return dispatch thunk of PropertyListEncoder.encode<A>(_:)();
}

uint64_t SiriLinkViewModel.asPatternParams(with:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v14 = a1;
  uint64_t v4 = one-time initialization token for encoder;
  swift_bridgeObjectRetain();
  if (v4 != -1) {
    swift_once();
  }
  outlined init with take of SiriLinkViewModel(v1, __dst);
  lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
  uint64_t v5 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v3) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v8 = v5;
  unint64_t v9 = v6;
  Swift::String v10 = Data.base64EncodedString(options:)(0);
  outlined consume of Data._Representation(v8, v9);
  uint64_t v13 = &type metadata for String;
  Swift::String v12 = v10;
  specialized Dictionary.subscript.setter((uint64_t)&v12, 0x61645F6C65646F6DLL, 0xEA00000000006174);
  return v14;
}

uint64_t static SiriLinkUIPlugin.Error.__derived_enum_equals(_:_:)()
{
  return 1;
}

void SiriLinkUIPlugin.Error.hash(into:)()
{
}

uint64_t SiriLinkViewModel.ArchivedViewModelCodingKeys.stringValue.getter()
{
  return 12383;
}

uint64_t SiriLinkViewModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x800000000004E890
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000000004E8B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000000004E8D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000000004E8F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x800000000004E910 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x654874706D6F7270 && a2 == 0xEC00000072656461)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t SiriLinkViewModel.CodingKeys.init(intValue:)()
{
  return 6;
}

unint64_t SiriLinkViewModel.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000014;
      break;
    case 2:
      unint64_t result = 0xD000000000000019;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    case 4:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 5:
      unint64_t result = 0x654874706D6F7270;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t SiriLinkViewModel.ArchivedViewModelCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

Swift::Int SiriLinkUIPlugin.Error.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SiriLinkViewModel.ArchivedViewModelCodingKeys()
{
  return SiriLinkUIPlugin.Error.hashValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriLinkViewModel.ArchivedViewModelCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = SiriLinkViewModel.ArchivedViewModelCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance SiriLinkViewModel.ArchivedViewModelCodingKeys()
{
  return ArchivedViewModel.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SiriLinkViewModel.ArchivedViewModelCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static SiriLinkUIPlugin.Error.__derived_enum_equals(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriLinkViewModel.ArchivedViewModelCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriLinkViewModel.ArchivedViewModelCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys(uint64_t a1)
{
  unint64_t RunCoding = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys();

  return CodingKey.description.getter(a1, RunCoding);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys(uint64_t a1)
{
  unint64_t RunCoding = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys();

  return CodingKey.debugDescription.getter(a1, RunCoding);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys(uint64_t a1)
{
  unint64_t RunWatchCoding = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys();

  return CodingKey.description.getter(a1, RunWatchCoding);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys(uint64_t a1)
{
  unint64_t RunWatchCoding = lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys();

  return CodingKey.debugDescription.getter(a1, RunWatchCoding);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriLinkViewModel.CodingKeys()
{
  return SiriLinkViewModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriLinkViewModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = SiriLinkViewModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SiriLinkViewModel.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SiriLinkViewModel.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriLinkViewModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriLinkViewModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SiriLinkViewModel.ArchivedViewModelCodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriLinkViewModel.PromptHeaderCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriLinkViewModel.PromptHeaderCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SiriLinkViewModel.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  outlined init with take of SiriLinkViewModel(v2, v51);
  uint64_t v47 = v51[0];
  unint64_t v46 = v51[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriLinkViewModel.PromptHeaderCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_1_7();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_1_7();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_1_7();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_1_7();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriLinkViewModel.AutoShortcutFirstRunCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_4();
  uint64_t v11 = v10 - v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriLinkViewModel.ArchivedViewModelCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriLinkViewModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v48 = v13;
  uint64_t v49 = v14;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_4();
  uint64_t v17 = (void *)(v16 - v15);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of SiriLinkViewModel(v2, v52);
  switch(v53)
  {
    case 1:
      OUTLINED_FUNCTION_12_0(v57);
      lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      memcpy(v50, v57, sizeof(v50));
      lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      OUTLINED_FUNCTION_7_0();
      v30(v27, v28, v29);
      return (*(uint64_t (**)(void *, uint64_t))(v49 + 8))(v17, v48);
    case 2:
      OUTLINED_FUNCTION_12_0(v58);
      lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys();
      uint64_t v11 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      memcpy(v50, v58, sizeof(v50));
      lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      OUTLINED_FUNCTION_7_0();
      v34(v31, v32, v33);
      uint64_t v35 = *(uint64_t (**)(void *, uint64_t))(v49 + 8);
      int v36 = v17;
      goto LABEL_8;
    case 3:
      OUTLINED_FUNCTION_12_0(__src);
      lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys();
      OUTLINED_FUNCTION_8_2();
      memcpy(v50, __src, sizeof(v50));
      lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      goto LABEL_7;
    case 4:
      OUTLINED_FUNCTION_12_0(v60);
      lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys();
      OUTLINED_FUNCTION_8_2();
      memcpy(v50, v60, sizeof(v50));
      lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
LABEL_7:
      OUTLINED_FUNCTION_7_0();
      v40(v37, v38, v39);
      uint64_t v35 = *(uint64_t (**)(void *, uint64_t))(v49 + 8);
      int v36 = v2;
LABEL_8:
      uint64_t v41 = v11;
      goto LABEL_10;
    case 5:
      LOBYTE(v50[0]) = 5;
      lazy protocol witness table accessor for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys();
      OUTLINED_FUNCTION_10_0();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      KeyedEncodingContainer.encode(_:forKey:)();
      OUTLINED_FUNCTION_7_0();
      v45(v42, v43, v44);
      uint64_t v35 = *(uint64_t (**)(void *, uint64_t))(v49 + 8);
      int v36 = v17;
      uint64_t v41 = v48;
LABEL_10:
      uint64_t result = v35(v36, v41);
      break;
    default:
      long long v54 = v52[0];
      long long v55 = v52[1];
      long long v56 = v52[2];
      outlined copy of Data._Representation(v47, v46);
      lazy protocol witness table accessor for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v50[0] = v54;
      v50[1] = v55;
      v50[2] = v56;
      lazy protocol witness table accessor for type ArchivedViewModel and conformance ArchivedViewModel();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      OUTLINED_FUNCTION_7_0();
      v21(v18, v19, v20);
      OUTLINED_FUNCTION_7_0();
      v25(v22, v23, v24);
      uint64_t result = outlined release of SiriLinkViewModel((uint64_t)v2);
      break;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel;
  if (!lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel;
  if (!lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys;
  if (!lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivedViewModel and conformance ArchivedViewModel()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewModel and conformance ArchivedViewModel;
  if (!lazy protocol witness table cache variable for type ArchivedViewModel and conformance ArchivedViewModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewModel and conformance ArchivedViewModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivedViewModel and conformance ArchivedViewModel;
  if (!lazy protocol witness table cache variable for type ArchivedViewModel and conformance ArchivedViewModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedViewModel and conformance ArchivedViewModel);
  }
  return result;
}

uint64_t outlined release of SiriLinkViewModel(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of SiriLinkViewModel(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  switch(a11)
  {
    case 0:
      outlined consume of Data._Representation(result, a2);
      goto LABEL_4;
    case 1:
    case 2:
    case 3:
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_4:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 5:
LABEL_5:
      unint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

__n128 SiriLinkViewModel.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriLinkViewModel.PromptHeaderCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_1_7();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_1_7();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_1_7();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_1_7();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriLinkViewModel.AutoShortcutFirstRunCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriLinkViewModel.ArchivedViewModelCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_4();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriLinkViewModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_4();
  uint64_t v15 = v14 - v13;
  uint64_t v58 = (uint64_t)a1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriLinkViewModel.CodingKeys and conformance SiriLinkViewModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v48) {
    goto LABEL_11;
  }
  uint64_t v49 = v11;
  uint64_t v16 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v17 = *(void *)(v16 + 16);
  if (!v17
    || (uint64_t v18 = *(unsigned __int8 *)(v16 + 32),
        uint64_t v19 = specialized ArraySlice.subscript.getter(1, v17, v16, v16 + 32, 0, (2 * v17) | 1),
        uint64_t v21 = v20,
        unint64_t v23 = v22,
        swift_bridgeObjectRelease(),
        v21 != v23 >> 1))
  {
    uint64_t v24 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v26 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v26 = &type metadata for SiriLinkViewModel;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v24 - 8) + 104))(v26, enum case for DecodingError.typeMismatch(_:), v24);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v15, v9);
LABEL_11:
    __swift_destroy_boxed_opaque_existential_1(v58);
    return result;
  }
  switch(v18)
  {
    case 1:
      LOBYTE(v51) = 1;
      lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunCodingKeys();
      OUTLINED_FUNCTION_3_2();
      lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
      OUTLINED_FUNCTION_10_0();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_7_0();
      v35();
      swift_unknownObjectRelease();
      OUTLINED_FUNCTION_7_0();
      v36();
      goto LABEL_14;
    case 2:
      LOBYTE(v51) = 2;
      lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys();
      OUTLINED_FUNCTION_3_2();
      lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
      OUTLINED_FUNCTION_6_2();
      OUTLINED_FUNCTION_5_2();
      OUTLINED_FUNCTION_7_2();
      goto LABEL_13;
    case 3:
      LOBYTE(v51) = 3;
      lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys();
      OUTLINED_FUNCTION_3_2();
      lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
      OUTLINED_FUNCTION_6_2();
      OUTLINED_FUNCTION_5_2();
      OUTLINED_FUNCTION_7_2();
      goto LABEL_13;
    case 4:
      LOBYTE(v51) = 4;
      lazy protocol witness table accessor for type SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys and conformance SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys();
      OUTLINED_FUNCTION_3_2();
      lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
      OUTLINED_FUNCTION_6_2();
      OUTLINED_FUNCTION_5_2();
      OUTLINED_FUNCTION_7_2();
LABEL_13:
      OUTLINED_FUNCTION_7_0();
      v37();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v15, v9);
LABEL_14:
      uint64_t v31 = v51;
      uint64_t v32 = v53;
      uint64_t v33 = v54;
      uint64_t v34 = v55;
      long long v47 = v56;
      long long v50 = v52;
      __n128 v43 = v57;
      goto LABEL_15;
    case 5:
      lazy protocol witness table accessor for type SiriLinkViewModel.PromptHeaderCodingKeys and conformance SiriLinkViewModel.PromptHeaderCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v31 = KeyedDecodingContainer.decode(_:forKey:)();
      OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_14_0();
      unint64_t v39 = v38;
      OUTLINED_FUNCTION_7_0();
      v40();
      swift_unknownObjectRelease();
      uint64_t v41 = OUTLINED_FUNCTION_13_0();
      v42(v41);
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      long long v47 = 0u;
      long long v50 = v39;
      __n128 v43 = 0uLL;
LABEL_15:
      __n128 v46 = v43;
      break;
    default:
      LOBYTE(v51) = 0;
      lazy protocol witness table accessor for type SiriLinkViewModel.ArchivedViewModelCodingKeys and conformance SiriLinkViewModel.ArchivedViewModelCodingKeys();
      OUTLINED_FUNCTION_3_2();
      lazy protocol witness table accessor for type ArchivedViewModel and conformance ArchivedViewModel();
      OUTLINED_FUNCTION_10_0();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      OUTLINED_FUNCTION_5_2();
      OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_11_0();
      OUTLINED_FUNCTION_7_0();
      v28();
      swift_unknownObjectRelease();
      uint64_t v29 = OUTLINED_FUNCTION_9_1();
      v30(v29);
      uint64_t v31 = v51;
      uint64_t v32 = v53;
      uint64_t v33 = v54;
      long long v47 = 0u;
      long long v50 = v52;
      __n128 v46 = 0u;
      uint64_t v34 = v55;
      break;
  }
  __swift_destroy_boxed_opaque_existential_1(v58);
  *(void *)a2 = v31;
  *(_OWORD *)(a2 + 8) = v50;
  *(void *)(a2 + 24) = v32;
  *(void *)(a2 + 32) = v33;
  *(void *)(a2 + 40) = v34;
  __n128 result = v46;
  *(_OWORD *)(a2 + 48) = v47;
  *(__n128 *)(a2 + 64) = v46;
  *(unsigned char *)(a2 + 80) = v44;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance SiriLinkViewModel(void *a1@<X0>, void *a2@<X8>)
{
  SiriLinkViewModel.init(from:)(a1, (uint64_t)__src);
  if (!v2) {
    outlined init with take of SiriLinkViewModel(__src, a2);
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SiriLinkViewModel(void *a1)
{
  outlined init with take of SiriLinkViewModel(v1, __dst);
  return SiriLinkViewModel.encode(to:)(a1);
}

uint64_t outlined copy of SiriLinkViewModel(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t result = a10;
  switch(a11)
  {
    case 0:
      outlined copy of Data._Representation(a1, a2);
      goto LABEL_4;
    case 1:
    case 2:
    case 3:
    case 4:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_4:
      swift_bridgeObjectRetain();
      goto LABEL_5;
    case 5:
LABEL_5:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for SiriLinkViewModel(uint64_t a1)
{
  return outlined consume of SiriLinkViewModel(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(unsigned char *)(a1 + 80));
}

uint64_t initializeWithCopy for SiriLinkViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  char v14 = *(unsigned char *)(a2 + 80);
  outlined copy of SiriLinkViewModel(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(unsigned char *)(a1 + 80) = v14;
  return a1;
}

uint64_t assignWithCopy for SiriLinkViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v24 = *(void *)(a2 + 72);
  char v25 = *(unsigned char *)(a2 + 80);
  outlined copy of SiriLinkViewModel(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v24, v25);
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 72);
  char v22 = *(unsigned char *)(a1 + 80);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v24;
  *(unsigned char *)(a1 + 80) = v25;
  outlined consume of SiriLinkViewModel(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  return a1;
}

void *__swift_memcpy81_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x51uLL);
}

uint64_t assignWithTake for SiriLinkViewModel(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 80);
  uint64_t v4 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  char v14 = *(unsigned char *)(a1 + 80);
  long long v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  long long v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = v3;
  outlined consume of SiriLinkViewModel(v4, v6, v5, v7, v8, v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriLinkViewModel(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFB && *(unsigned char *)(a1 + 81))
    {
      int v2 = *(_DWORD *)a1 + 250;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 80);
      if (v3 <= 5) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriLinkViewModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)uint64_t result = a2 - 251;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 81) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 80) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for SiriLinkViewModel(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

uint64_t destructiveInjectEnumTag for SiriLinkViewModel(uint64_t result, char a2)
{
  *(unsigned char *)(result + 80) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SiriLinkViewModel()
{
  return &type metadata for SiriLinkViewModel;
}

uint64_t getEnumTagSinglePayload for SiriLinkViewModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for SiriLinkViewModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1786CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SiriLinkViewModel.CodingKeys()
{
  return &unk_59FF8;
}

uint64_t getEnumTag for SiriLinkViewModel.ArchivedViewModelCodingKeys()
{
  return 0;
}

void *type metadata accessor for SiriLinkViewModel.ArchivedViewModelCodingKeys()
{
  return &unk_5A088;
}

void *type metadata accessor for SiriLinkViewModel.AutoShortcutFirstRunCodingKeys()
{
  return &unk_5A118;
}

void *type metadata accessor for SiriLinkViewModel.AutoShortcutFirstRunWatchCodingKeys()
{
  return &unk_5A1A8;
}

void *type metadata accessor for SiriLinkViewModel.AutoShortcutAppEnabledCodingKeys()
{
  return &unk_5A238;
}

void *type metadata accessor for SiriLinkViewModel.AutoShortcutAppEnabledWatchCodingKeys()
{
  return &unk_5A2C8;
}

uint64_t getEnumTagSinglePayload for SiriLinkViewModel.ArchivedViewModelCodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for SiriLinkViewModel.ArchivedViewModelCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x179F4);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for SiriLinkViewModel.PromptHeaderCodingKeys()
{
  return &unk_5A358;
}

uint64_t specialized ArraySlice.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2) {
    goto LABEL_10;
  }
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    return swift_unknownObjectRetain();
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_3_2()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_5_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_2()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

void OUTLINED_FUNCTION_7_2()
{
  *(void *)(v1 - 368) = v0;
}

uint64_t OUTLINED_FUNCTION_8_2()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_9_1()
{
  return v0;
}

void *OUTLINED_FUNCTION_12_0(void *a1)
{
  return memcpy(a1, (const void *)(v1 + 344), 0x50uLL);
}

uint64_t OUTLINED_FUNCTION_13_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_14_0()
{
  return v0;
}

uint64_t CustomIntentConfirmationView.model.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of WorkflowDataModels.CustomIntentConfirmationModel(v1, a1, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel);
}

uint64_t CustomIntentConfirmationView.body.getter()
{
  uint64_t v1 = type metadata accessor for CustomIntentConfirmationView();
  uint64_t v2 = OUTLINED_FUNCTION_1_6(v1);
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v2);
  outlined init with copy of WorkflowDataModels.CustomIntentConfirmationModel(v0, (uint64_t)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(void))type metadata accessor for CustomIntentConfirmationView);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = swift_allocObject();
  outlined init with take of CustomIntentConfirmationView((uint64_t)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7, (void (*)(void))type metadata accessor for CustomIntentConfirmationView);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(CustomIntentView, ConfirmationBinaryButtonView)>);
  lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type TupleView<(CustomIntentView, ConfirmationBinaryButtonView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(CustomIntentView, ConfirmationBinaryButtonView)>);
  return ComponentStack.init(content:)();
}

uint64_t type metadata accessor for CustomIntentConfirmationView()
{
  uint64_t result = type metadata singleton initialization cache for CustomIntentConfirmationView;
  if (!type metadata singleton initialization cache for CustomIntentConfirmationView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t closure #1 in CustomIntentConfirmationView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v3 = type metadata accessor for ConfirmationBinaryButtonView();
  uint64_t v4 = v3 - 8;
  uint64_t v5 = __chkstk_darwin(v3);
  unint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = type metadata accessor for CustomIntentView();
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  long long v16 = (char *)&v29 - v15;
  outlined init with copy of WorkflowDataModels.CustomIntentConfirmationModel(a1, (uint64_t)&v29 + *(int *)(v14 + 28) - v15, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentModel);
  ActionHandler.init()();
  uint64_t v17 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
  uint64_t v18 = *(int *)(v17 + 24);
  uint64_t v19 = (uint64_t *)(a1 + *(int *)(v17 + 20));
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  uint64_t v22 = *(void *)(a1 + v18);
  uint64_t v23 = *(void *)(a1 + v18 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ButtonStyle<>.buttonItemStandard.getter();
  ActionHandler.init()();
  uint64_t v24 = &v9[*(int *)(v4 + 28)];
  *(void *)uint64_t v24 = v21;
  *((void *)v24 + 1) = v20;
  char v25 = &v9[*(int *)(v4 + 32)];
  *(void *)char v25 = v22;
  *((void *)v25 + 1) = v23;
  outlined init with copy of WorkflowDataModels.CustomIntentConfirmationModel((uint64_t)v16, (uint64_t)v13, (void (*)(void))type metadata accessor for CustomIntentView);
  outlined init with copy of WorkflowDataModels.CustomIntentConfirmationModel((uint64_t)v9, (uint64_t)v7, (void (*)(void))type metadata accessor for ConfirmationBinaryButtonView);
  uint64_t v26 = v30;
  outlined init with copy of WorkflowDataModels.CustomIntentConfirmationModel((uint64_t)v13, v30, (void (*)(void))type metadata accessor for CustomIntentView);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CustomIntentView, ConfirmationBinaryButtonView));
  outlined init with copy of WorkflowDataModels.CustomIntentConfirmationModel((uint64_t)v7, v26 + *(int *)(v27 + 48), (void (*)(void))type metadata accessor for ConfirmationBinaryButtonView);
  outlined destroy of ConfirmationBinaryButtonView((uint64_t)v9, (void (*)(void))type metadata accessor for ConfirmationBinaryButtonView);
  outlined destroy of ConfirmationBinaryButtonView((uint64_t)v16, (void (*)(void))type metadata accessor for CustomIntentView);
  outlined destroy of ConfirmationBinaryButtonView((uint64_t)v7, (void (*)(void))type metadata accessor for ConfirmationBinaryButtonView);
  return outlined destroy of ConfirmationBinaryButtonView((uint64_t)v13, (void (*)(void))type metadata accessor for CustomIntentView);
}

uint64_t sub_18688()
{
  uint64_t v1 = type metadata accessor for CustomIntentConfirmationView();
  OUTLINED_FUNCTION_1_6(v1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v6 = *(void *)(v5 + 64);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t))(v7 + 8))(v0 + v4);
  uint64_t v8 = type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v9 = v0 + v4 + *(int *)(v8 + 20);
  type metadata accessor for CodableINInteraction();
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t))(v10 + 8))(v9);
  uint64_t v11 = v0 + v4 + *(int *)(v8 + 24);
  uint64_t v12 = type metadata accessor for VisualProperty();
  if (!__swift_getEnumTagSinglePayload(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4 + v6, v3 | 7);
}

uint64_t partial apply for closure #1 in CustomIntentConfirmationView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for CustomIntentConfirmationView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #1 in CustomIntentConfirmationView.body.getter(v4, a1);
}

uint64_t CustomIntentConfirmationView.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of CustomIntentConfirmationView(a1, a2, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel);
}

uint64_t outlined init with take of CustomIntentConfirmationView(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t associated type witness table accessor for View.Body : View in CustomIntentConfirmationView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for CustomIntentConfirmationView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
    uint64_t v9 = v8[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for CodableINInteraction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = v8[6];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for VisualProperty();
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
      memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
    }
    uint64_t v19 = v8[7];
    uint64_t v20 = (uint64_t *)((char *)a1 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = *(int *)(v6 + 20);
    uint64_t v24 = (uint64_t *)((char *)a1 + v23);
    char v25 = (uint64_t *)((char *)a2 + v23);
    uint64_t v26 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v26;
    uint64_t v27 = *(int *)(v6 + 24);
    uint64_t v28 = (uint64_t *)((char *)a1 + v27);
    uint64_t v29 = (uint64_t *)((char *)a2 + v27);
    uint64_t v30 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CustomIntentConfirmationView(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t v3 = type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v4 = a1 + *(int *)(v3 + 20);
  uint64_t v5 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(v3 + 24);
  uint64_t v7 = type metadata accessor for VisualProperty();
  if (!__swift_getEnumTagSinglePayload(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CustomIntentConfirmationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  uint64_t v5 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v6 = v5[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = v5[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for VisualProperty();
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
  }
  uint64_t v15 = v5[7];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
  uint64_t v20 = *(int *)(v19 + 20);
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = *(int *)(v19 + 24);
  char v25 = (void *)(a1 + v24);
  uint64_t v26 = (void *)(a2 + v24);
  uint64_t v27 = v26[1];
  *char v25 = *v26;
  v25[1] = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CustomIntentConfirmationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  uint64_t v5 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v6 = v5[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = v5[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for VisualProperty();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v13);
  int v15 = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13);
  if (!EnumTagSinglePayload)
  {
    uint64_t v16 = *(void *)(v13 - 8);
    if (!v15)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
LABEL_7:
  uint64_t v18 = v5[7];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
  uint64_t v22 = *(int *)(v21 + 20);
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = *(int *)(v21 + 24);
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (void *)(a2 + v25);
  *uint64_t v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CustomIntentConfirmationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  uint64_t v5 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v6 = v5[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = v5[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for VisualProperty();
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
    __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
  }
  *(_OWORD *)(a1 + v5[7]) = *(_OWORD *)(a2 + v5[7]);
  uint64_t v15 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
  *(_OWORD *)(a1 + *(int *)(v15 + 20)) = *(_OWORD *)(a2 + *(int *)(v15 + 20));
  *(_OWORD *)(a1 + *(int *)(v15 + 24)) = *(_OWORD *)(a2 + *(int *)(v15 + 24));
  return a1;
}

uint64_t assignWithTake for CustomIntentConfirmationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  uint64_t v5 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v6 = v5[5];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = v5[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for VisualProperty();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v13);
  int v15 = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13);
  if (!EnumTagSinglePayload)
  {
    uint64_t v16 = *(void *)(v13 - 8);
    if (!v15)
    {
      (*(void (**)(void *, const void *, uint64_t))(v16 + 40))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
LABEL_7:
  uint64_t v18 = v5[7];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *uint64_t v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  *uint64_t v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = *(int *)(v23 + 24);
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (uint64_t *)(a2 + v29);
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  void *v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomIntentConfirmationView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_19510);
}

uint64_t sub_19510(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);

  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for CustomIntentConfirmationView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1956C);
}

uint64_t sub_1956C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);

  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v4);
}

uint64_t type metadata completion function for CustomIntentConfirmationView()
{
  uint64_t result = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_19644()
{
  return lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(CustomIntentView, ConfirmationBinaryButtonView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(CustomIntentView, ConfirmationBinaryButtonView)>>);
}

uint64_t outlined init with copy of WorkflowDataModels.CustomIntentConfirmationModel(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of ConfirmationBinaryButtonView(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t AutoShortcutFirstRunComponentView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>)>>);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = static HorizontalAlignment.leading.getter();
  uint64_t v8 = v2[10];
  *(void *)uint64_t v6 = v7;
  *((void *)v6 + 1) = v8;
  v6[16] = 0;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>)>>);
  closure #1 in AutoShortcutFirstRunComponentView.body.getter(v2, &v6[*(int *)(v9 + 44)]);
  LOBYTE(v2) = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  outlined init with copy of VisualProperty?((uint64_t)v6, a1, &demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>)>>);
  uint64_t v18 = a1
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>)>>, _PaddingLayout>)
               + 36);
  *(unsigned char *)uint64_t v18 = (_BYTE)v2;
  *(void *)(v18 + 8) = v11;
  *(void *)(v18 + 16) = v13;
  *(void *)(v18 + 24) = v15;
  *(void *)(v18 + 32) = v17;
  *(unsigned char *)(v18 + 40) = 0;
  return outlined destroy of StandardActionHandler?((uint64_t)v6, &demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>)>>);
}

uint64_t closure #1 in AutoShortcutFirstRunComponentView.body.getter@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  v90 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>);
  __chkstk_darwin(v3 - 8);
  v87 = (uint64_t *)((char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>);
  __chkstk_darwin(v84);
  uint64_t v86 = (uint64_t)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>);
  uint64_t v6 = __chkstk_darwin(v83);
  uint64_t v96 = (uint64_t)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v82 = (uint64_t)&v79 - v9;
  __chkstk_darwin(v8);
  uint64_t v95 = (uint64_t)&v79 - v10;
  uint64_t v89 = type metadata accessor for Divider();
  uint64_t v88 = *(void *)(v89 - 8);
  uint64_t v11 = __chkstk_darwin(v89);
  v94 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v92 = (char *)&v79 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Font.TextStyle();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0);
  uint64_t v80 = *(void *)(v81 - 8);
  uint64_t v21 = __chkstk_darwin(v81);
  v93 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v91 = (char *)&v79 - v23;
  v85 = a1;
  memcpy(__dst, a1, sizeof(__dst));
  uint64_t v97 = __dst[4];
  uint64_t v98 = __dst[5];
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v24 = Text.init<A>(_:)();
  uint64_t v26 = v25;
  char v28 = v27 & 1;
  (*(void (**)(char *, void, uint64_t))(v18 + 104))(v20, enum case for Font.TextStyle.headline(_:), v17);
  uint64_t v29 = type metadata accessor for Font.Design();
  __swift_storeEnumTagSinglePayload((uint64_t)v16, 1, 1, v29);
  static Font.Weight.semibold.getter();
  static Font.system(_:design:weight:)();
  outlined destroy of StandardActionHandler?((uint64_t)v16, &demangling cache variable for type metadata for Font.Design?);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  uint64_t v30 = Text.font(_:)();
  uint64_t v32 = v31;
  LOBYTE(v17) = v33;
  uint64_t v35 = v34;
  swift_release();
  char v36 = v17 & 1;
  outlined consume of Text.Storage(v24, v26, v28);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  LOBYTE(v17) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v97 = v30;
  uint64_t v98 = v32;
  char v99 = v36;
  uint64_t v100 = v35;
  uint64_t v101 = KeyPath;
  uint64_t v102 = 0x4014000000000000;
  char v103 = v17;
  uint64_t v104 = v38;
  uint64_t v105 = v39;
  uint64_t v106 = v40;
  uint64_t v107 = v41;
  char v108 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>);
  lazy protocol witness table accessor for type ModifiedContent<IconView, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>);
  uint64_t v42 = v91;
  View.ambientDrawable(renderWithDrawingGroup:)();
  outlined consume of Text.Storage(v30, v32, v36);
  swift_release();
  swift_bridgeObjectRelease();
  __n128 v43 = v92;
  Divider.init()();
  uint64_t v44 = *((void *)AutoShortcutAppPhrasesViewModel.displayPhrases.getter() + 2);
  swift_bridgeObjectRelease();
  if (v44 == 1) {
    uint64_t v45 = static VerticalAlignment.center.getter();
  }
  else {
    uint64_t v45 = static VerticalAlignment.top.getter();
  }
  __n128 v46 = v85;
  uint64_t v47 = v85[10];
  uint64_t v48 = (uint64_t)v87;
  uint64_t *v87 = v45;
  *(void *)(v48 + 8) = v47;
  *(unsigned char *)(v48 + 16) = 0;
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>);
  closure #1 in closure #1 in AutoShortcutFirstRunComponentView.body.getter(v46, (char *)(v48 + *(int *)(v49 + 44)));
  LOBYTE(v46) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v51 = v50;
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  uint64_t v58 = v86;
  outlined init with copy of VisualProperty?(v48, v86, &demangling cache variable for type metadata for HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>);
  uint64_t v59 = v58 + *(int *)(v84 + 36);
  *(unsigned char *)uint64_t v59 = (_BYTE)v46;
  *(void *)(v59 + 8) = v51;
  *(void *)(v59 + 16) = v53;
  *(void *)(v59 + 24) = v55;
  *(void *)(v59 + 32) = v57;
  *(unsigned char *)(v59 + 40) = 0;
  outlined destroy of StandardActionHandler?(v48, &demangling cache variable for type metadata for HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>);
  uint64_t v60 = v82;
  outlined init with copy of VisualProperty?(v58, v82, &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>);
  *(_WORD *)(v60 + *(int *)(v83 + 36)) = 256;
  outlined destroy of StandardActionHandler?(v58, &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>);
  uint64_t v61 = v95;
  outlined init with take of ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>(v60, v95, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>);
  uint64_t v62 = v80;
  uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v80 + 16);
  uint64_t v64 = v93;
  uint64_t v65 = v42;
  uint64_t v66 = v81;
  v63(v93, v65, v81);
  uint64_t v67 = v88;
  long long v68 = *(void (**)(char *, char *, uint64_t))(v88 + 16);
  uint64_t v69 = v43;
  uint64_t v70 = v89;
  v68(v94, v69, v89);
  outlined init with copy of VisualProperty?(v61, v96, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>);
  long long v71 = v90;
  v63(v90, v64, v66);
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>));
  uint64_t v73 = v94;
  v68(&v71[*(int *)(v72 + 48)], v94, v70);
  uint64_t v74 = (uint64_t)&v71[*(int *)(v72 + 64)];
  uint64_t v75 = v96;
  outlined init with copy of VisualProperty?(v96, v74, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>);
  outlined destroy of StandardActionHandler?(v95, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>);
  uint64_t v76 = *(void (**)(char *, uint64_t))(v67 + 8);
  v76(v92, v70);
  uint64_t v77 = *(void (**)(char *, uint64_t))(v62 + 8);
  v77(v91, v66);
  outlined destroy of StandardActionHandler?(v75, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>);
  v76(v73, v70);
  return ((uint64_t (*)(char *, uint64_t))v77)(v93, v66);
}

uint64_t closure #1 in closure #1 in AutoShortcutFirstRunComponentView.body.getter@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v61 = a2;
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(Text?, ForEach<ArraySlice<String>, String, Text>, ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>?)>>);
  __chkstk_darwin(v58);
  uint64_t v4 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0);
  uint64_t v57 = *(void *)(v60 - 8);
  uint64_t v5 = __chkstk_darwin(v60);
  uint64_t v56 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v62 = (char *)&v52 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v59 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v52 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v52 - v15;
  uint64_t v17 = a1[3];
  uint64_t v55 = a1[2];
  uint64_t v18 = a1;
  swift_bridgeObjectRetain();
  unsigned __int8 v19 = static Edge.Set.leading.getter();
  char v20 = Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v19) {
    char v20 = Edge.Set.init(rawValue:)();
  }
  EdgeInsets.init(_all:)();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  unsigned __int8 v29 = static Edge.Set.top.getter();
  char v30 = Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v29) {
    char v30 = Edge.Set.init(rawValue:)();
  }
  EdgeInsets.init(_all:)();
  uint64_t v63 = v55;
  uint64_t v64 = v17;
  char v65 = v20;
  uint64_t v66 = v22;
  uint64_t v67 = v24;
  uint64_t v68 = v26;
  uint64_t v69 = v28;
  char v70 = 0;
  char v71 = v30;
  uint64_t v72 = v31;
  uint64_t v73 = v32;
  uint64_t v74 = v33;
  uint64_t v75 = v34;
  char v76 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<IconView, _PaddingLayout>, _PaddingLayout>);
  lazy protocol witness table accessor for type ModifiedContent<IconView, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<IconView, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<IconView, _PaddingLayout>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<IconView, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  View.ambientDrawable(renderWithDrawingGroup:)();
  swift_bridgeObjectRelease();
  uint64_t v54 = v9;
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  char v36 = v16;
  uint64_t v53 = v16;
  uint64_t v37 = v8;
  v35(v16, v14, v8);
  *(void *)uint64_t v4 = static HorizontalAlignment.leading.getter();
  *((void *)v4 + 1) = 0x4010000000000000;
  v4[16] = 0;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(Text?, ForEach<ArraySlice<String>, String, Text>, ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>?)>>);
  closure #1 in closure #1 in closure #1 in AutoShortcutFirstRunComponentView.body.getter(v18, (uint64_t *)&v4[*(int *)(v38 + 44)]);
  lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(Text?, ForEach<ArraySlice<String>, String, Text>, ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>?)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(Text?, ForEach<ArraySlice<String>, String, Text>, ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>?)>>);
  uint64_t v39 = v56;
  View.ambientDrawable(renderWithDrawingGroup:)();
  outlined destroy of StandardActionHandler?((uint64_t)v4, &demangling cache variable for type metadata for VStack<TupleView<(Text?, ForEach<ArraySlice<String>, String, Text>, ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>?)>>);
  uint64_t v40 = v57;
  uint64_t v41 = v62;
  uint64_t v42 = v60;
  (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v62, v39, v60);
  __n128 v43 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  uint64_t v44 = v59;
  v43(v59, v36, v37);
  uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
  v45(v39, v41, v42);
  __n128 v46 = v61;
  v43(v61, v44, v37);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer));
  v45(&v46[*(int *)(v47 + 48)], v39, v42);
  uint64_t v48 = &v46[*(int *)(v47 + 64)];
  *(void *)uint64_t v48 = 0;
  v48[8] = 1;
  uint64_t v49 = *(void (**)(char *, uint64_t))(v40 + 8);
  v49(v62, v42);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v54 + 8);
  v50(v53, v37);
  v49(v39, v42);
  return ((uint64_t (*)(char *, uint64_t))v50)(v44, v37);
}

uint64_t closure #1 in closure #1 in closure #1 in AutoShortcutFirstRunComponentView.body.getter@<X0>(const void *a1@<X0>, uint64_t *a2@<X8>)
{
  v109 = a2;
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Link<Text>);
  uint64_t v99 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v98 = (char *)&v90 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>);
  __chkstk_darwin(v108);
  uint64_t v97 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v5 - 8);
  uint64_t v110 = (uint64_t)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for URL();
  uint64_t v96 = *(void *)(v101 - 8);
  uint64_t v7 = __chkstk_darwin(v101);
  v94 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v95 = (char *)&v90 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>?);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v107 = (uint64_t)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v111 = (uint64_t)&v90 - v13;
  uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForEach<ArraySlice<String>, String, Text>);
  uint64_t v105 = *(void *)(v106 - 8);
  uint64_t v14 = __chkstk_darwin(v106);
  uint64_t v104 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v115 = (char *)&v90 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  __chkstk_darwin(v17 - 8);
  unsigned __int8 v19 = (char *)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Font.TextStyle();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v90 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(__dst, a1, sizeof(__dst));
  uint64_t v24 = AutoShortcutAppPhrasesViewModel.displayPhrases.getter();
  uint64_t v25 = v24[2];
  v93 = v19;
  uint64_t v92 = v20;
  uint64_t v91 = v21;
  v90 = v23;
  if (v25)
  {
    uint64_t v26 = v24[4];
    uint64_t v27 = v24[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v116 = v26;
    uint64_t v117 = v27;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v28 = Text.init<A>(_:)();
    uint64_t v30 = v29;
    uint64_t v114 = v31;
    char v33 = v32 & 1;
    (*(void (**)(char *, void, uint64_t))(v21 + 104))(v23, enum case for Font.TextStyle.title3(_:), v20);
    uint64_t v34 = v21;
    uint64_t v35 = enum case for Font.Design.rounded(_:);
    uint64_t v36 = type metadata accessor for Font.Design();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 104))(v19, v35, v36);
    __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v36);
    static Font.Weight.medium.getter();
    static Font.system(_:design:weight:)();
    outlined destroy of StandardActionHandler?((uint64_t)v19, &demangling cache variable for type metadata for Font.Design?);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v23, v20);
    uint64_t v37 = Text.font(_:)();
    uint64_t v39 = v38;
    LOBYTE(v34) = v40;
    swift_release();
    outlined consume of Text.Storage(v28, v30, v33);
    swift_bridgeObjectRelease();
    static Color.primary.getter();
    uint64_t v41 = Text.foregroundColor(_:)();
    uint64_t v43 = v42;
    char v45 = v44;
    swift_release();
    outlined consume of Text.Storage(v37, v39, v34 & 1);
    swift_bridgeObjectRelease();
    LODWORD(v116) = static HierarchicalShapeStyle.primary.getter();
    uint64_t v103 = Text.foregroundStyle<A>(_:)();
    uint64_t v113 = v47;
    uint64_t v114 = v46;
    uint64_t v112 = v48 & 1;
    outlined consume of Text.Storage(v41, v43, v45 & 1);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v103 = 0;
    uint64_t v113 = 0;
    uint64_t v114 = 0;
    uint64_t v112 = 0;
  }
  uint64_t v49 = AutoShortcutAppPhrasesViewModel.displayPhrases.getter();
  uint64_t v50 = 1;
  uint64_t v51 = specialized Collection.dropFirst(_:)(1, (uint64_t)v49);
  uint64_t v116 = v51;
  uint64_t v117 = v52;
  uint64_t v118 = v53;
  uint64_t v119 = v54;
  swift_getKeyPath();
  uint64_t v102 = v51;
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<String>);
  lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type ArraySlice<String> and conformance ArraySlice<A>, &demangling cache variable for type metadata for ArraySlice<String>);
  ForEach<>.init(_:id:content:)();
  uint64_t v55 = __dst[7];
  if (__dst[7])
  {
    uint64_t v56 = __dst[6];
    swift_bridgeObjectRetain();
    AutoShortcutAppPhrasesViewModel.punchoutURL.getter();
    uint64_t v57 = v110;
    URL.init(string:)();
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload(v57, 1, v101) != 1)
    {
      uint64_t v59 = v96;
      uint64_t v60 = v95;
      uint64_t v61 = v101;
      (*(void (**)(char *, uint64_t, uint64_t))(v96 + 32))(v95, v110, v101);
      uint64_t v116 = v56;
      uint64_t v117 = v55;
      (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v94, v60, v61);
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v62 = v98;
      Link<>.init<A>(_:destination:)();
      uint64_t v63 = v91;
      uint64_t v64 = v90;
      uint64_t v65 = v92;
      (*(void (**)(char *, void, uint64_t))(v91 + 104))(v90, enum case for Font.TextStyle.title3(_:), v92);
      uint64_t v66 = enum case for Font.Design.rounded(_:);
      uint64_t v67 = type metadata accessor for Font.Design();
      uint64_t v68 = (uint64_t)v93;
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v67 - 8) + 104))(v93, v66, v67);
      __swift_storeEnumTagSinglePayload(v68, 0, 1, v67);
      static Font.Weight.medium.getter();
      uint64_t v69 = static Font.system(_:design:weight:)();
      outlined destroy of StandardActionHandler?(v68, &demangling cache variable for type metadata for Font.Design?);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v65);
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v71 = v99;
      uint64_t v72 = (uint64_t)v97;
      uint64_t v73 = v100;
      (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v97, v62, v100);
      uint64_t v58 = v108;
      uint64_t v74 = (uint64_t *)(v72 + *(int *)(v108 + 36));
      uint64_t *v74 = KeyPath;
      v74[1] = v69;
      (*(void (**)(char *, uint64_t))(v71 + 8))(v62, v73);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v61);
      outlined init with take of ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>(v72, v111, &demangling cache variable for type metadata for ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>);
      uint64_t v50 = 0;
      goto LABEL_9;
    }
    swift_bridgeObjectRelease();
    outlined destroy of StandardActionHandler?(v110, &demangling cache variable for type metadata for URL?);
    uint64_t v50 = 1;
  }
  uint64_t v58 = v108;
LABEL_9:
  uint64_t v75 = v111;
  __swift_storeEnumTagSinglePayload(v111, v50, 1, v58);
  uint64_t v76 = v105;
  uint64_t v77 = *(void (**)(char *, char *, uint64_t))(v105 + 16);
  v78 = v104;
  uint64_t v79 = v106;
  v77(v104, v115, v106);
  uint64_t v80 = v107;
  outlined init with copy of VisualProperty?(v75, v107, &demangling cache variable for type metadata for ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>?);
  uint64_t v81 = v109;
  uint64_t v82 = v103;
  uint64_t v83 = v114;
  uint64_t *v109 = v103;
  v81[1] = v83;
  uint64_t v84 = v113;
  v81[2] = v112;
  v81[3] = v84;
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Text?, ForEach<ArraySlice<String>, String, Text>, ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>?));
  v77((char *)v81 + *(int *)(v85 + 48), v78, v79);
  outlined init with copy of VisualProperty?(v80, (uint64_t)v81 + *(int *)(v85 + 64), &demangling cache variable for type metadata for ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>?);
  uint64_t v87 = v113;
  uint64_t v86 = v114;
  LOBYTE(v77) = v112;
  outlined copy of Text?(v82, v114, v112, v113);
  swift_unknownObjectRelease();
  outlined destroy of StandardActionHandler?(v75, &demangling cache variable for type metadata for ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>?);
  uint64_t v88 = *(void (**)(char *, uint64_t))(v76 + 8);
  v88(v115, v79);
  outlined destroy of StandardActionHandler?(v80, &demangling cache variable for type metadata for ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>?);
  v88(v78, v79);
  return outlined consume of Text?(v82, v86, (char)v77, v87);
}

uint64_t specialized Collection.dropFirst(_:)(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = specialized Array.index(_:offsetBy:limitedBy:)(0, result, v3);
  if (v4) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result;
  }
  if (v3 < v5) {
    goto LABEL_9;
  }
  if ((v5 & 0x8000000000000000) == 0) {
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in AutoShortcutFirstRunComponentView.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  v35[0] = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Font.TextStyle();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v36 = v10;
  uint64_t v37 = v11;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v12 = Text.init<A>(_:)();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for Font.TextStyle.title3(_:), v6);
  uint64_t v17 = enum case for Font.Design.rounded(_:);
  uint64_t v18 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(v5, v17, v18);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v18);
  static Font.Weight.medium.getter();
  static Font.system(_:design:weight:)();
  outlined destroy of StandardActionHandler?((uint64_t)v5, &demangling cache variable for type metadata for Font.Design?);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v19 = Text.font(_:)();
  uint64_t v21 = v20;
  LOBYTE(v9) = v22;
  swift_release();
  LOBYTE(v18) = v9 & 1;
  outlined consume of Text.Storage(v12, v14, v16);
  swift_bridgeObjectRelease();
  static Color.secondary.getter();
  uint64_t v23 = Text.foregroundColor(_:)();
  uint64_t v25 = v24;
  LOBYTE(v14) = v26;
  swift_release();
  LOBYTE(v11) = v14 & 1;
  outlined consume of Text.Storage(v19, v21, v18);
  swift_bridgeObjectRelease();
  LODWORD(v36) = static HierarchicalShapeStyle.secondary.getter();
  uint64_t v27 = Text.foregroundStyle<A>(_:)();
  uint64_t v29 = v28;
  LOBYTE(v21) = v30;
  uint64_t v32 = v31;
  outlined consume of Text.Storage(v23, v25, v11);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v34 = v35[0];
  *(void *)v35[0] = v27;
  *(void *)(v34 + 8) = v29;
  *(unsigned char *)(v34 + 16) = v21 & 1;
  *(void *)(v34 + 24) = v32;
  return result;
}

__n128 AutoShortcutFirstRunComponentView.init(model:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)a2 = *(void *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = v2;
  *(void *)(a2 + 40) = v3;
  __n128 result = *(__n128 *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 64);
  *(__n128 *)(a2 + 48) = result;
  *(_OWORD *)(a2 + 64) = v5;
  *(void *)(a2 + 80) = 0x4028000000000000;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance AutoShortcutFirstRunComponentView@<X0>(uint64_t a1@<X8>)
{
  memcpy(__dst, v1, sizeof(__dst));
  return AutoShortcutFirstRunComponentView.body.getter(a1);
}

double IconView.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_bridgeObjectRetain();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = v7;
  *(unsigned char *)(a3 + 24) = v8;
  *(void *)(a3 + 32) = v9;
  *(unsigned char *)(a3 + 40) = v10;
  double result = *(double *)&v11;
  *(_OWORD *)(a3 + 48) = v11;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in AutoShortcutFirstRunComponentView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in IconView()
{
  return swift_getOpaqueTypeConformance2();
}

double protocol witness for View.body.getter in conformance IconView@<D0>(uint64_t a1@<X8>)
{
  return IconView.body.getter(*v1, v1[1], a1);
}

uint64_t initializeWithCopy for AutoShortcutFirstRunComponentView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AutoShortcutFirstRunComponentView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  return a1;
}

void *__swift_memcpy88_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

uint64_t assignWithTake for AutoShortcutFirstRunComponentView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutoShortcutFirstRunComponentView(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutoShortcutFirstRunComponentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)double result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutoShortcutFirstRunComponentView()
{
  return &type metadata for AutoShortcutFirstRunComponentView;
}

ValueMetadata *type metadata accessor for IconView()
{
  return &type metadata for IconView;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>)>>, _PaddingLayout>);
    lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1B9D4()
{
  return lazy protocol witness table accessor for type ModifiedContent<IconView, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<StackIconView, _FrameLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<StackIconView, _FrameLayout>, (void (*)(void))lazy protocol witness table accessor for type StackIconView and conformance StackIconView);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<IconView, _PaddingLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StackIconView and conformance StackIconView()
{
  unint64_t result = lazy protocol witness table cache variable for type StackIconView and conformance StackIconView;
  if (!lazy protocol witness table cache variable for type StackIconView and conformance StackIconView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackIconView and conformance StackIconView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StackIconView and conformance StackIconView;
  if (!lazy protocol witness table cache variable for type StackIconView and conformance StackIconView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackIconView and conformance StackIconView);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for StackIconView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for IconView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for StackIconView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IconView(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IconView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for StackIconView()
{
  return &unk_5A4F8;
}

id StackIconView.makeUIView(context:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  type metadata accessor for WFApertureIconView();
  swift_bridgeObjectRetain();
  id result = WFApertureIconView.__allocating_init(applicationBundleIdentifier:)();
  if (!result)
  {
    if (one-time initialization token for linkUI != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.linkUI);
    swift_bridgeObjectRetain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_0, v7, v8, "AutoShortcutFirstRunComponentView could not create WFApertureStackView from %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return [objc_allocWithZone((Class)UIView) init];
  }
  return result;
}

id WFApertureIconView.__allocating_init(applicationBundleIdentifier:)()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithApplicationBundleIdentifier:v1];

  return v2;
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance StackIconView(uint64_t a1)
{
  return StackIconView.makeUIView(context:)(a1, *(void *)v1, *(void *)(v1 + 8));
}

uint64_t protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance StackIconView(Swift::String bundleIdentifier)
{
  return IconView.init(bundleIdentifier:)(bundleIdentifier).bundleIdentifier._countAndFlagsBits;
}

uint64_t protocol witness for UIViewRepresentable._resetUIView(_:coordinator:destroy:) in conformance StackIconView()
{
  return UIViewRepresentable._resetUIView(_:coordinator:destroy:)();
}

uint64_t protocol witness for static UIViewRepresentable.dismantleUIView(_:coordinator:) in conformance StackIconView()
{
  return static UIViewRepresentable.dismantleUIView(_:coordinator:)();
}

uint64_t protocol witness for UIViewRepresentable.makeCoordinator() in conformance StackIconView()
{
  return UIViewRepresentable<>.makeCoordinator()();
}

uint64_t protocol witness for UIViewRepresentable._identifiedViewTree(in:) in conformance StackIconView()
{
  return UIViewRepresentable._identifiedViewTree(in:)();
}

uint64_t protocol witness for UIViewRepresentable.sizeThatFits(_:uiView:context:) in conformance StackIconView()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t protocol witness for UIViewRepresentable._overrideSizeThatFits(_:in:uiView:) in conformance StackIconView()
{
  return UIViewRepresentable._overrideSizeThatFits(_:in:uiView:)();
}

uint64_t protocol witness for UIViewRepresentable._overrideLayoutTraits(_:for:) in conformance StackIconView()
{
  return UIViewRepresentable._overrideLayoutTraits(_:for:)();
}

uint64_t protocol witness for static UIViewRepresentable._modifyBridgedViewInputs(_:) in conformance StackIconView()
{
  return static UIViewRepresentable._modifyBridgedViewInputs(_:)();
}

uint64_t protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance StackIconView()
{
  return static UIViewRepresentable._layoutOptions(_:)();
}

void *associated type witness table accessor for View.Body : View in StackIconView()
{
  return &protocol witness table for Never;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance StackIconView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type StackIconView and conformance StackIconView();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance StackIconView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type StackIconView and conformance StackIconView();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void protocol witness for View.body.getter in conformance StackIconView()
{
}

unint64_t type metadata accessor for WFApertureIconView()
{
  unint64_t result = lazy cache variable for type metadata for WFApertureIconView;
  if (!lazy cache variable for type metadata for WFApertureIconView)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for WFApertureIconView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>);
    lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<IconView, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<IconView, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<IconView, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<IconView, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type IconView and conformance IconView);
}

unint64_t lazy protocol witness table accessor for type IconView and conformance IconView()
{
  unint64_t result = lazy protocol witness table cache variable for type IconView and conformance IconView;
  if (!lazy protocol witness table cache variable for type IconView and conformance IconView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IconView and conformance IconView);
  }
  return result;
}

uint64_t outlined copy of Text?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined copy of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of Text?(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized Array.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  BOOL v5 = __OFADD__(result, a2);
  result += a2;
  if (v5) {
    goto LABEL_14;
  }
  return result;
}

uint64_t ConfirmActionView.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ConfirmActionView() + 20);

  return outlined init with copy of WorkflowDataModels.ConfirmActionModel(v3, a1);
}

uint64_t type metadata accessor for ConfirmActionView()
{
  uint64_t result = type metadata singleton initialization cache for ConfirmActionView;
  if (!type metadata singleton initialization cache for ConfirmActionView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of WorkflowDataModels.ConfirmActionModel(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ConfirmActionView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v72 = a1;
  uint64_t v2 = type metadata accessor for BinaryButtonView();
  OUTLINED_FUNCTION_0_1();
  uint64_t v74 = v3;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v71 = (char *)v65 - v8;
  type metadata accessor for ButtonItemButtonStyle();
  OUTLINED_FUNCTION_0_1();
  uint64_t v68 = v9;
  uint64_t v69 = v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArchivedView?);
  __chkstk_darwin(v13 - 8);
  OUTLINED_FUNCTION_3_3();
  uint64_t v70 = v14;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v65 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SimpleItemRichView?);
  __chkstk_darwin(v18 - 8);
  OUTLINED_FUNCTION_3_3();
  uint64_t v79 = v19;
  __chkstk_darwin(v20);
  char v22 = (char *)v65 - v21;
  uint64_t v23 = *(int *)(type metadata accessor for ConfirmActionView() + 20);
  uint64_t v76 = v1;
  uint64_t v24 = (uint64_t *)(v1 + v23);
  unint64_t v25 = *(void *)(v1 + v23 + 96);
  if (v25)
  {
    uint64_t v26 = v24[11];
    uint64_t v107 = &type metadata for String;
    uint64_t v108 = &protocol witness table for String;
    uint64_t v104 = v26;
    unint64_t v105 = v25;
    uint64_t v103 = 0;
    long long v101 = 0u;
    long long v102 = 0u;
    OpaqueTypeConformance2 = 0;
    long long v98 = 0u;
    long long v99 = 0u;
    uint64_t v97 = 0;
    long long v95 = 0u;
    long long v96 = 0u;
    uint64_t v94 = 0;
    long long v92 = 0u;
    long long v93 = 0u;
    uint64_t v91 = 0;
    long long v89 = 0u;
    long long v90 = 0u;
    uint64_t v88 = 0;
    long long v86 = 0u;
    long long v87 = 0u;
    uint64_t v85 = 0;
    long long v83 = 0u;
    long long v84 = 0u;
    uint64_t v82 = 0;
    long long v80 = 0u;
    long long v81 = 0u;
    swift_bridgeObjectRetain();
    SimpleItemRichView.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:)();
    uint64_t v27 = type metadata accessor for SimpleItemRichView();
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v27 = type metadata accessor for SimpleItemRichView();
    uint64_t v28 = 1;
  }
  uint64_t v29 = 1;
  uint64_t v77 = v22;
  __swift_storeEnumTagSinglePayload((uint64_t)v22, v28, 1, v27);
  unint64_t v30 = v24[9];
  if (v30 >> 60 != 15)
  {
    uint64_t v32 = (void *)v24[2];
    uint64_t v33 = v24[3];
    uint64_t v35 = *v24;
    uint64_t v34 = (void *)v24[1];
    uint64_t v104 = v24[8];
    uint64_t v31 = v104;
    unint64_t v105 = v30;
    uint64_t v106 = v35;
    uint64_t v107 = v34;
    uint64_t v108 = v32;
    uint64_t v109 = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v31, v30);
    ArchivedView.init(model:)((uint64_t)&v104, (uint64_t)v17);
    uint64_t v29 = 0;
  }
  uint64_t v36 = type metadata accessor for ArchivedView();
  v78 = v17;
  __swift_storeEnumTagSinglePayload((uint64_t)v17, v29, 1, v36);
  uint64_t v37 = v24[4];
  uint64_t v38 = v24[5];
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = swift_initStackObject();
  long long v66 = xmmword_48DD0;
  *(_OWORD *)(inited + 16) = xmmword_48DD0;
  strcpy((char *)&v101, "confirmation");
  BYTE13(v101) = 0;
  HIWORD(v101) = -5120;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = 7562617;
  *(void *)(inited + 80) = 0xE300000000000000;
  uint64_t v40 = Dictionary.init(dictionaryLiteral:)();
  ConfirmActionView.createButton(label:directInvocationPayload:)(v37, v38, v40, (uint64_t *)&v101);
  swift_bridgeObjectRelease();
  uint64_t v41 = *((void *)&v102 + 1);
  uint64_t v42 = v103;
  uint64_t v43 = __swift_project_boxed_opaque_existential_1(&v101, *((uint64_t *)&v102 + 1));
  BOOL v44 = *((unsigned char *)v24 + 80) == 1;
  uint64_t v75 = v2;
  uint64_t v73 = v7;
  v65[1] = v43;
  if (v44) {
    static ButtonStyle<>.buttonItemPreferredAndDestructive.getter();
  }
  else {
    static ButtonStyle<>.buttonItemPreferred.getter();
  }
  unint64_t v45 = lazy protocol witness table accessor for type ButtonItemButtonStyle and conformance ButtonItemButtonStyle();
  *(void *)&long long v98 = v41;
  uint64_t v46 = v68;
  *((void *)&v98 + 1) = v68;
  *(void *)&long long v99 = v42;
  *((void *)&v99 + 1) = v45;
  *((void *)&v99 + 1) = swift_getOpaqueTypeMetadata2();
  *(void *)&long long v95 = v41;
  *((void *)&v95 + 1) = v46;
  *(void *)&long long v96 = v42;
  *((void *)&v96 + 1) = v45;
  OpaqueTypeConformance2 = (void *)swift_getOpaqueTypeConformance2();
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v98);
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v69 + 8))(v12, v46);
  uint64_t v47 = View.eraseToAnyView()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v98);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v101);
  uint64_t v48 = v24[6];
  uint64_t v49 = v24[7];
  uint64_t v50 = swift_initStackObject();
  *(_OWORD *)(v50 + 16) = v66;
  strcpy((char *)&v101, "confirmation");
  BYTE13(v101) = 0;
  HIWORD(v101) = -5120;
  AnyHashable.init<A>(_:)();
  *(void *)(v50 + 96) = &type metadata for String;
  *(void *)(v50 + 72) = 28526;
  *(void *)(v50 + 80) = 0xE200000000000000;
  uint64_t v51 = Dictionary.init(dictionaryLiteral:)();
  ConfirmActionView.createButton(label:directInvocationPayload:)(v48, v49, v51, (uint64_t *)&v101);
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(&v101, *((uint64_t *)&v102 + 1));
  uint64_t v52 = View.eraseToAnyView()();
  uint64_t v76 = v52;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v101);
  *((void *)&v102 + 1) = &type metadata for AnyView;
  uint64_t v103 = &protocol witness table for AnyView;
  uint64_t v69 = v47;
  *(void *)&long long v101 = v47;
  OpaqueTypeConformance2 = &protocol witness table for AnyView;
  *((void *)&v99 + 1) = &type metadata for AnyView;
  *(void *)&long long v98 = v52;
  swift_retain();
  swift_retain();
  uint64_t v53 = v71;
  BinaryButtonView.init(primaryButton:secondaryButton:)();
  uint64_t v54 = v79;
  outlined init with copy of VisualProperty?((uint64_t)v77, v79, &demangling cache variable for type metadata for SimpleItemRichView?);
  uint64_t v55 = v70;
  outlined init with copy of VisualProperty?((uint64_t)v78, v70, &demangling cache variable for type metadata for ArchivedView?);
  uint64_t v56 = v73;
  uint64_t v57 = v74;
  uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
  uint64_t v59 = v75;
  v58(v73, v53, v75);
  uint64_t v60 = v54;
  uint64_t v61 = v72;
  outlined init with copy of VisualProperty?(v60, v72, &demangling cache variable for type metadata for SimpleItemRichView?);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SimpleItemRichView?, ArchivedView?, BinaryButtonView));
  outlined init with copy of VisualProperty?(v55, v61 + *(int *)(v62 + 48), &demangling cache variable for type metadata for ArchivedView?);
  v58((char *)(v61 + *(int *)(v62 + 64)), v56, v59);
  swift_release();
  swift_release();
  uint64_t v63 = *(void (**)(char *, uint64_t))(v57 + 8);
  v63(v53, v59);
  outlined destroy of StandardActionHandler?((uint64_t)v78, &demangling cache variable for type metadata for ArchivedView?);
  outlined destroy of StandardActionHandler?((uint64_t)v77, &demangling cache variable for type metadata for SimpleItemRichView?);
  v63(v56, v59);
  outlined destroy of StandardActionHandler?(v55, &demangling cache variable for type metadata for ArchivedView?);
  return outlined destroy of StandardActionHandler?(v79, &demangling cache variable for type metadata for SimpleItemRichView?);
}

uint64_t ConfirmActionView.createButton(label:directInvocationPayload:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for ConfirmActionView();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10 - 8);
  v16[0] = a1;
  v16[1] = a2;
  outlined init with copy of ConfirmActionView(v5, (uint64_t)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = swift_allocObject();
  outlined init with take of ConfirmActionView((uint64_t)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13);
  *(void *)(v14 + ((v12 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = a3;
  a4[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  a4[4] = lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
  __swift_allocate_boxed_opaque_existential_1(a4);
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return Button<>.init<A>(_:action:)();
}

unint64_t lazy protocol witness table accessor for type ButtonItemButtonStyle and conformance ButtonItemButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonItemButtonStyle and conformance ButtonItemButtonStyle;
  if (!lazy protocol witness table cache variable for type ButtonItemButtonStyle and conformance ButtonItemButtonStyle)
  {
    type metadata accessor for ButtonItemButtonStyle();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonItemButtonStyle and conformance ButtonItemButtonStyle);
  }
  return result;
}

void closure #1 in ConfirmActionView.createButton(label:directInvocationPayload:)(uint64_t a1, uint64_t a2)
{
  v29[1] = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InteractionType?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionProperty?);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Command();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StandardActionHandler?);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for StandardActionHandler();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  ActionHandler.wrappedValue.getter();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15) == 1)
  {
    outlined destroy of StandardActionHandler?((uint64_t)v14, &demangling cache variable for type metadata for StandardActionHandler?);
    if (one-time initialization token for voiceCommands != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.voiceCommands);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      char v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v22 = 0;
      _os_log_impl(&dword_0, v20, v21, "#ConfirmActionView missing ActionHandler", v22, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    static Command.directInvocation(identifier:payload:isNavigation:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ActionElementConvertible>);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_48DD0;
    *(void *)(v23 + 56) = v8;
    *(void *)(v23 + 64) = &protocol witness table for Command;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v23 + 32));
    uint64_t v25 = v9;
    (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(boxed_opaque_existential_1, v11, v8);
    ActionProperty.init(_:)();
    uint64_t v26 = type metadata accessor for ActionProperty();
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v26);
    uint64_t v27 = enum case for InteractionType.buttonTapped(_:);
    uint64_t v28 = type metadata accessor for InteractionType();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 104))(v4, v27, v28);
    __swift_storeEnumTagSinglePayload((uint64_t)v4, 0, 1, v28);
    StandardActionHandler.perform(_:interactionType:)();
    outlined destroy of StandardActionHandler?((uint64_t)v4, &demangling cache variable for type metadata for InteractionType?);
    outlined destroy of StandardActionHandler?((uint64_t)v7, &demangling cache variable for type metadata for ActionProperty?);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
}

void *ConfirmActionView.init(model:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  ActionHandler.init()();
  uint64_t v4 = (void *)(a2 + *(int *)(type metadata accessor for ConfirmActionView() + 20));

  return memcpy(v4, a1, 0x68uLL);
}

uint64_t associated type witness table accessor for View.Body : View in ConfirmActionView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for ConfirmActionView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ActionHandler();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v8 + 8);
    *(void *)uint64_t v9 = *(uint64_t *)((char *)a2 + v8);
    *((void *)v9 + 1) = v11;
    uint64_t v12 = *(uint64_t *)((char *)a2 + v8 + 24);
    *((void *)v9 + 2) = *(uint64_t *)((char *)a2 + v8 + 16);
    *((void *)v9 + 3) = v12;
    uint64_t v13 = *(uint64_t *)((char *)a2 + v8 + 40);
    *((void *)v9 + 4) = *(uint64_t *)((char *)a2 + v8 + 32);
    *((void *)v9 + 5) = v13;
    uint64_t v14 = *(uint64_t *)((char *)a2 + v8 + 56);
    *((void *)v9 + 6) = *(uint64_t *)((char *)a2 + v8 + 48);
    *((void *)v9 + 7) = v14;
    uint64_t v15 = (uint64_t *)((char *)a2 + v8 + 64);
    unint64_t v16 = *(uint64_t *)((char *)a2 + v8 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v16 >> 60 == 15)
    {
      *((_OWORD *)v9 + 4) = *(_OWORD *)v15;
    }
    else
    {
      uint64_t v18 = *v15;
      outlined copy of Data._Representation(*v15, v16);
      *((void *)v9 + 8) = v18;
      *((void *)v9 + 9) = v16;
    }
    v9[80] = v10[80];
    uint64_t v19 = *((void *)v10 + 12);
    *((void *)v9 + 11) = *((void *)v10 + 11);
    *((void *)v9 + 12) = v19;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ConfirmActionView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v6 = *(void *)(v5 + 72);
  if (v6 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(v5 + 64), v6);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ConfirmActionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *(void *)uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(v8 + 8) = v10;
  uint64_t v11 = *(void *)(a2 + v7 + 16);
  uint64_t v12 = *(void *)(v9 + 24);
  *(void *)(v8 + 16) = v11;
  *(void *)(v8 + 24) = v12;
  uint64_t v13 = *(void *)(v9 + 40);
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  *(void *)(v8 + 40) = v13;
  uint64_t v14 = *(void *)(v9 + 56);
  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  *(void *)(v8 + 56) = v14;
  uint64_t v15 = (uint64_t *)(v9 + 64);
  unint64_t v16 = *(void *)(v9 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v16 >> 60 == 15)
  {
    *(_OWORD *)(v8 + 64) = *(_OWORD *)v15;
  }
  else
  {
    uint64_t v17 = *v15;
    outlined copy of Data._Representation(*v15, v16);
    *(void *)(v8 + 64) = v17;
    *(void *)(v8 + 72) = v16;
  }
  *(unsigned char *)(v8 + 80) = *(unsigned char *)(v9 + 80);
  uint64_t v18 = *(void *)(v9 + 96);
  *(void *)(v8 + 88) = *(void *)(v9 + 88);
  *(void *)(v8 + 96) = v18;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ConfirmActionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(v8 + 8) = *(void *)(a2 + v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(void *)(v8 + 24) = *(void *)(v9 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  *(void *)(v8 + 40) = *(void *)(v9 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  *(void *)(v8 + 56) = *(void *)(v9 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(v9 + 64);
  unint64_t v11 = *(void *)(v9 + 72);
  if (*(void *)(v8 + 72) >> 60 != 15)
  {
    if (v11 >> 60 != 15)
    {
      uint64_t v13 = *v10;
      outlined copy of Data._Representation(*v10, *(void *)(v9 + 72));
      uint64_t v14 = *(void *)(v8 + 64);
      unint64_t v15 = *(void *)(v8 + 72);
      *(void *)(v8 + 64) = v13;
      *(void *)(v8 + 72) = v11;
      outlined consume of Data._Representation(v14, v15);
      goto LABEL_8;
    }
    outlined destroy of Data(v8 + 64);
    goto LABEL_6;
  }
  if (v11 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(v8 + 64) = *(_OWORD *)v10;
    goto LABEL_8;
  }
  uint64_t v12 = *v10;
  outlined copy of Data._Representation(*v10, *(void *)(v9 + 72));
  *(void *)(v8 + 64) = v12;
  *(void *)(v8 + 72) = v11;
LABEL_8:
  *(unsigned char *)(v8 + 80) = *(unsigned char *)(v9 + 80);
  *(void *)(v8 + 88) = *(void *)(v9 + 88);
  *(void *)(v8 + 96) = *(void *)(v9 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ConfirmActionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  memcpy((void *)(a1 + *(int *)(a3 + 20)), (const void *)(a2 + *(int *)(a3 + 20)), 0x68uLL);
  return a1;
}

uint64_t assignWithTake for ConfirmActionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(v9 + 24);
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(void *)(v8 + 24) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(v9 + 40);
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  *(void *)(v8 + 40) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(v9 + 56);
  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  *(void *)(v8 + 56) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = (void *)(v9 + 64);
  unint64_t v15 = *(void *)(v8 + 72);
  if (v15 >> 60 != 15)
  {
    unint64_t v16 = *(void *)(v9 + 72);
    if (v16 >> 60 != 15)
    {
      uint64_t v17 = *(void *)(v8 + 64);
      *(void *)(v8 + 64) = *v14;
      *(void *)(v8 + 72) = v16;
      outlined consume of Data._Representation(v17, v15);
      goto LABEL_6;
    }
    outlined destroy of Data(v8 + 64);
  }
  *(_OWORD *)(v8 + 64) = *(_OWORD *)v14;
LABEL_6:
  *(unsigned char *)(v8 + 80) = *(unsigned char *)(v9 + 80);
  uint64_t v18 = *(void *)(v9 + 96);
  *(void *)(v8 + 88) = *(void *)(v9 + 88);
  *(void *)(v8 + 96) = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmActionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1D838);
}

uint64_t sub_1D838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for ConfirmActionView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1D8DC);
}

void sub_1D8DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
}

uint64_t type metadata completion function for ConfirmActionView()
{
  uint64_t result = type metadata accessor for ActionHandler();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1D9FC()
{
  return lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type TupleView<(SimpleItemRichView?, ArchivedView?, BinaryButtonView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SimpleItemRichView?, ArchivedView?, BinaryButtonView)>);
}

uint64_t outlined init with copy of ConfirmActionView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConfirmActionView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DA9C()
{
  unint64_t v1 = (int *)(type metadata accessor for ConfirmActionView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t))(v5 + 8))(v0 + v3);
  uint64_t v6 = v0 + v3 + v1[7];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v7 = *(void *)(v6 + 72);
  if (v7 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(v6 + 64), v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t outlined init with take of ConfirmActionView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConfirmActionView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in ConfirmActionView.createButton(label:directInvocationPayload:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for ConfirmActionView() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  closure #1 in ConfirmActionView.createButton(label:directInvocationPayload:)(v0 + v2, v3);
}

uint64_t destroy for InputCompletionState(uint64_t a1)
{
  return outlined consume of InputCompletionState(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of InputCompletionState(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for InputCompletionState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of InputCompletionState(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for InputCompletionState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of InputCompletionState(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of InputCompletionState(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for InputCompletionState(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of InputCompletionState(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for InputCompletionState(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InputCompletionState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for InputCompletionState(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for InputCompletionState(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for InputCompletionState()
{
  return &type metadata for InputCompletionState;
}

ValueMetadata *type metadata accessor for InputCompletionStateType()
{
  return &type metadata for InputCompletionStateType;
}

uint64_t specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v4 = swift_allocError();
  *uint64_t v5 = a2;

  return _swift_continuation_throwingResumeWithError(a1, v4);
}

uint64_t specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  outlined init with take of INImage?((uint64_t)&v3, *(void *)(*(void *)(a1 + 64) + 40));
  return swift_continuation_throwingResume();
}

{
  **(void **)(*(void *)(a1 + 64) + 40) = a2;
  return swift_continuation_throwingResume();
}

uint64_t SiriLinkUIPlugin.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t SiriLinkUIPlugin.deinit()
{
  return v0;
}

uint64_t VoiceShortcutClientWrapper.isVoiceShortcutInstalled(voiceCommandPhrase:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return OUTLINED_FUNCTION_1_8((uint64_t)VoiceShortcutClientWrapper.isVoiceShortcutInstalled(voiceCommandPhrase:));
}

uint64_t VoiceShortcutClientWrapper.isVoiceShortcutInstalled(voiceCommandPhrase:)()
{
  OUTLINED_FUNCTION_5_3();
  id v1 = [self standardClient];
  v0[18] = v1;
  NSString v2 = String._bridgeToObjectiveC()();
  v0[19] = v2;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = VoiceShortcutClientWrapper.isVoiceShortcutInstalled(voiceCommandPhrase:);
  uint64_t v3 = OUTLINED_FUNCTION_18();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VCVoiceShortcut?, @unowned NSError?) -> () with result type VCVoiceShortcut;
  v0[13] = &block_descriptor_0;
  v0[14] = v3;
  [v1 getVoiceShortcutWithPhrase:v2 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_2_4();
  *NSString v2 = v1;
  *NSString v2 = *v0;
  *(void *)(v1 + 160) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_6_3();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  BOOL v3;
  uint64_t (*v4)(BOOL);
  uint64_t v6;

  OUTLINED_FUNCTION_3_4();
  id v1 = *(void **)(v0 + 144);
  NSString v2 = *(void **)(v0 + 152);

  uint64_t v3 = OUTLINED_FUNCTION_10_1();
  return v4(v3);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  BOOL v3;
  uint64_t (*v4)(BOOL);
  uint64_t v6;

  OUTLINED_FUNCTION_5_3();
  id v1 = *(void **)(v0 + 152);
  NSString v2 = *(void **)(v0 + 144);
  swift_willThrow();

  swift_errorRelease();
  uint64_t v3 = OUTLINED_FUNCTION_10_1();
  return v4(v3);
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VCVoiceShortcut?, @unowned NSError?) -> () with result type VCVoiceShortcut(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3) {
    return specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(v3, (uint64_t)a3);
  }
  if (a2)
  {
    id v4 = a2;
    return specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(v3, (uint64_t)v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t VoiceShortcutClientWrapper.installVoiceShortcut(url:voiceCommandPhrase:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[17] = a2;
  v3[18] = a3;
  v3[16] = a1;
  return OUTLINED_FUNCTION_1_8((uint64_t)VoiceShortcutClientWrapper.installVoiceShortcut(url:voiceCommandPhrase:));
}

uint64_t VoiceShortcutClientWrapper.installVoiceShortcut(url:voiceCommandPhrase:)()
{
  id v1 = [self standardClient];
  v0[19] = v1;
  URL._bridgeToObjectiveC()(v2);
  uint64_t v4 = v3;
  v0[20] = v3;
  NSString v5 = String._bridgeToObjectiveC()();
  v0[21] = v5;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = VoiceShortcutClientWrapper.installVoiceShortcut(url:voiceCommandPhrase:);
  uint64_t v6 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VCVoiceShortcut?, @unowned NSError?) -> () with result type VCVoiceShortcut;
  v0[13] = &block_descriptor_1;
  v0[14] = v6;
  [v1 importTopLevelShortcutFromURL:v4 withName:v5 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_2_4();
  *NSString v2 = v1;
  *NSString v2 = *v0;
  *(void *)(v1 + 176) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_6_3();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_4_5();
  id v1 = *(void **)(v0 + 160);
  NSString v2 = *(void **)(v0 + 168);
  uint64_t v3 = *(void **)(v0 + 152);

  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  OUTLINED_FUNCTION_5_3();
  id v1 = (void *)v0[21];
  uint64_t v3 = (void *)v0[19];
  NSString v2 = (void *)v0[20];
  swift_willThrow();

  OUTLINED_FUNCTION_16_0();
  return v4();
}

uint64_t VoiceShortcutClientWrapper.getVoiceShortcut(voiceCommandName:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = a2;
  return OUTLINED_FUNCTION_1_8((uint64_t)VoiceShortcutClientWrapper.getVoiceShortcut(voiceCommandName:));
}

uint64_t VoiceShortcutClientWrapper.getVoiceShortcut(voiceCommandName:)()
{
  OUTLINED_FUNCTION_5_3();
  if (v0[17])
  {
    id v1 = [self standardClient];
    v0[18] = v1;
    NSString v2 = String._bridgeToObjectiveC()();
    v0[19] = v2;
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = VoiceShortcutClientWrapper.getVoiceShortcut(voiceCommandName:);
    uint64_t v3 = OUTLINED_FUNCTION_18();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VCVoiceShortcut?, @unowned NSError?) -> () with result type VCVoiceShortcut;
    v0[13] = &block_descriptor_3;
    v0[14] = v3;
    [v1 getVoiceShortcutWithPhrase:v2 completion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4(0);
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_2_4();
  *NSString v2 = v1;
  *NSString v2 = *v0;
  *(void *)(v1 + 160) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_6_3();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  OUTLINED_FUNCTION_3_4();
  id v1 = *(void **)(v0 + 152);

  NSString v2 = OUTLINED_FUNCTION_9_2();
  return v3(v2);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_5_3();
  id v1 = (void *)v0[19];
  NSString v2 = (void *)v0[18];
  swift_willThrow();
  swift_errorRelease();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3(0);
}

uint64_t VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  v3[3] = a2;
  v3[4] = v4;
  v3[2] = a1;
  return OUTLINED_FUNCTION_1_8((uint64_t)VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:));
}

uint64_t VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:)()
{
  OUTLINED_FUNCTION_4_5();
  uint64_t v1 = v0[4];
  id v2 = [self standardClient];
  v0[5] = v2;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)
                                                                  + async function pointer to specialized static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:));
  id v3 = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  *uint64_t v4 = v0;
  v4[1] = VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:);
  uint64_t v6 = v0[2];
  uint64_t v5 = v0[3];
  return v8(v6, v5, v1, (uint64_t)v3);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v8;

  OUTLINED_FUNCTION_4_5();
  OUTLINED_FUNCTION_0_3();
  id v2 = *(void **)(v1 + 40);
  id v3 = *v0;
  OUTLINED_FUNCTION_2_4();
  *uint64_t v4 = v3;
  swift_task_dealloc();

  uint64_t v5 = OUTLINED_FUNCTION_14_1();
  return v6(v5);
}

uint64_t specialized static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a2;
  v4[6] = a4;
  v4[4] = a1;
  uint64_t v8 = (void *)swift_task_alloc();
  v4[7] = v8;
  *uint64_t v8 = v4;
  v8[1] = specialized static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:);
  return implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)(a1, a2, a4);
}

uint64_t specialized static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)()
{
  OUTLINED_FUNCTION_4_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_3();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_2_4();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_2_4();
  *uint64_t v8 = v7;
  *(void *)(v5 + 64) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 72) = v3;
  }
  OUTLINED_FUNCTION_6_3();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  OUTLINED_FUNCTION_5_3();
  uint64_t v1 = *(void **)(v0 + 72);
  uint64_t v2 = *(void **)(v0 + 48);
  uint64_t v3 = [v1 shortcutName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = OUTLINED_FUNCTION_15_0();
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v20 = v0;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.error.getter();
  uint64_t v5 = os_log_type_enabled(v3, v4);
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v6 = *(void **)(v0 + 48);
  if (v5)
  {
    OUTLINED_FUNCTION_17();
    uint64_t v17 = v8;
    uint64_t v18 = v6;
    uint64_t v9 = (_DWORD *)swift_slowAlloc();
    uint64_t v10 = (void *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *uint64_t v9 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v1 - 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v7, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_11_1();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_7_3(v11);
    *uint64_t v10 = v7;
    swift_errorRelease();
    swift_errorRelease();
    OUTLINED_FUNCTION_12_1(&dword_0, v12, v13, "voiceShortcut NOT found from identifier=%s; error: %@");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v14 = OUTLINED_FUNCTION_13_1();
  return v15(v14);
}

uint64_t static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)()
{
  OUTLINED_FUNCTION_4_5();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  v0[4] = v3;
  v0[5] = v1;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v5 + *v5);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[6] = v6;
  *uint64_t v6 = v0;
  v6[1] = static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:);
  return v8(v4, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  OUTLINED_FUNCTION_4_5();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_0_3();
  uint64_t v5 = v4;
  OUTLINED_FUNCTION_2_4();
  *uint64_t v6 = v5;
  uint64_t v7 = *v1;
  OUTLINED_FUNCTION_2_4();
  *uint64_t v8 = v7;
  *(void *)(v5 + 56) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(void *)(v5 + 64) = v3;
  }
  OUTLINED_FUNCTION_6_3();
  return _swift_task_switch(v9, v10, v11);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;

  OUTLINED_FUNCTION_4_5();
  uint64_t v1 = *(void **)(v0 + 64);
  uint64_t v2 = [v1 shortcutName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = OUTLINED_FUNCTION_15_0();
  return v4(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v18 = v0;
  if (one-time initialization token for voiceCommands != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.voiceCommands);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.error.getter();
  uint64_t v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void *)(v0 + 40);
  if (v5)
  {
    OUTLINED_FUNCTION_17();
    unint64_t v16 = v7;
    uint64_t v8 = (_DWORD *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *uint64_t v8 = 136315394;
    swift_bridgeObjectRetain();
    *(void *)(v1 - 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v6, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_11_1();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    OUTLINED_FUNCTION_7_3(v10);
    *uint64_t v9 = v6;
    swift_errorRelease();
    swift_errorRelease();
    OUTLINED_FUNCTION_12_1(&dword_0, v11, v12, "voiceShortcut NOT found from identifier=%s; error: %@");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    swift_arrayDestroy();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_10();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v13 = OUTLINED_FUNCTION_13_1();
  return v14(v13);
}

uint64_t implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[17] = a2;
  v3[18] = a3;
  v3[16] = a1;
  return OUTLINED_FUNCTION_1_8((uint64_t)implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:));
}

uint64_t implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:)()
{
  OUTLINED_FUNCTION_5_3();
  uint64_t v1 = (void *)v0[18];
  NSString v2 = String._bridgeToObjectiveC()();
  v0[19] = v2;
  v0[2] = v0;
  v0[7] = v0 + 15;
  v0[3] = implicit closure #2 in implicit closure #1 in default argument 1 of static VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:voiceShortcutById:);
  uint64_t v3 = OUTLINED_FUNCTION_18();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned VCVoiceShortcut?, @unowned NSError?) -> () with result type VCVoiceShortcut;
  v0[13] = &block_descriptor_17;
  v0[14] = v3;
  [v1 getVoiceShortcutWithIdentifier:v2 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_2_4();
  *NSString v2 = v1;
  *NSString v2 = *v0;
  *(void *)(v1 + 160) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_6_3();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  OUTLINED_FUNCTION_3_4();

  uint64_t v1 = OUTLINED_FUNCTION_9_2();
  return v2(v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_4_5();
  uint64_t v1 = *(void **)(v0 + 152);
  swift_willThrow();

  OUTLINED_FUNCTION_16_0();
  return v2();
}

void VoiceShortcutClientWrapper.getSiriAutoShortcutsEnablement(forBundleIdentifier:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = [self standardClient];
  NSString v7 = String._bridgeToObjectiveC()();
  v9[4] = a3;
  v9[5] = a4;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
  v9[3] = &block_descriptor_6;
  uint64_t v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  [v6 getSiriAutoShortcutsEnablementForBundleIdentifier:v7 completion:v8];
  _Block_release(v8);
}

void thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t VoiceShortcutClientWrapper.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:)(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 120) = a2;
  *(void *)(v3 + 128) = a3;
  *(unsigned char *)(v3 + 160) = a1;
  return OUTLINED_FUNCTION_1_8((uint64_t)VoiceShortcutClientWrapper.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:));
}

uint64_t VoiceShortcutClientWrapper.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:)()
{
  OUTLINED_FUNCTION_5_3();
  uint64_t v1 = *(unsigned __int8 *)(v0 + 160);
  id v2 = [self standardClient];
  *(void *)(v0 + 136) = v2;
  NSString v3 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 144) = v3;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = VoiceShortcutClientWrapper.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:);
  uint64_t v4 = OUTLINED_FUNCTION_18();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ();
  *(void *)(v0 + 104) = &block_descriptor_7;
  *(void *)(v0 + 112) = v4;
  [v2 setSiriAutoShortcutsEnablement:v1 forBundleIdentifier:v3 completion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_0_3();
  OUTLINED_FUNCTION_2_4();
  *id v2 = v1;
  *id v2 = *v0;
  *(void *)(v1 + 152) = *(void *)(v3 + 48);
  OUTLINED_FUNCTION_6_3();
  return _swift_task_switch(v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_3_4();
  uint64_t v1 = *(void **)(v0 + 144);

  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_4_5();
  uint64_t v1 = *(void **)(v0 + 144);
  id v2 = *(void **)(v0 + 136);
  swift_willThrow();

  OUTLINED_FUNCTION_16_0();
  return v3();
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSError?) -> () with result type ()(uint64_t a1, void *a2)
{
  if (a2) {
    return specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(*(void *)(a1 + 32), (uint64_t)a2);
  }
  uint64_t v3 = *(void *)(a1 + 32);

  return specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(v3);
}

uint64_t SiriLinkUIPlugin.__deallocating_deinit()
{
  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t protocol witness for VoiceShortcutClientWrapping.isVoiceShortcutInstalled(voiceCommandPhrase:) in conformance VoiceShortcutClientWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for VoiceShortcutClientWrapping.isVoiceShortcutInstalled(voiceCommandPhrase:) in conformance VoiceShortcutClientWrapper;
  return VoiceShortcutClientWrapper.isVoiceShortcutInstalled(voiceCommandPhrase:)(a1, a2);
}

uint64_t protocol witness for VoiceShortcutClientWrapping.isVoiceShortcutInstalled(voiceCommandPhrase:) in conformance VoiceShortcutClientWrapper()
{
  OUTLINED_FUNCTION_3_4();
  uint64_t v2 = v1;
  OUTLINED_FUNCTION_0_3();
  uint64_t v3 = *v0;
  OUTLINED_FUNCTION_2_4();
  *uint64_t v4 = v3;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v3 + 8);
  return v5(v2);
}

uint64_t protocol witness for VoiceShortcutClientWrapping.installVoiceShortcut(url:voiceCommandPhrase:) in conformance VoiceShortcutClientWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for VoiceShortcutClientWrapping.installVoiceShortcut(url:voiceCommandPhrase:) in conformance VoiceShortcutClientWrapper;
  return VoiceShortcutClientWrapper.installVoiceShortcut(url:voiceCommandPhrase:)(a1, a2, a3);
}

uint64_t protocol witness for VoiceShortcutClientWrapping.getVoiceShortcut(voiceCommandName:) in conformance VoiceShortcutClientWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for VoiceShortcutClientWrapping.getVoiceShortcut(voiceCommandName:) in conformance VoiceShortcutClientWrapper;
  return VoiceShortcutClientWrapper.getVoiceShortcut(voiceCommandName:)(a1, a2);
}

uint64_t protocol witness for VoiceShortcutClientWrapping.getVoiceShortcut(voiceCommandName:) in conformance VoiceShortcutClientWrapper()
{
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_0_3();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = OUTLINED_FUNCTION_9_2();
  return v4(v3);
}

uint64_t protocol witness for VoiceShortcutClientWrapping.getVoiceShortcutName(voiceCommandId:) in conformance VoiceShortcutClientWrapper(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for VoiceShortcutClientWrapping.getVoiceShortcutName(voiceCommandId:) in conformance VoiceShortcutClientWrapper;
  return VoiceShortcutClientWrapper.getVoiceShortcutName(voiceCommandId:)(a1, a2);
}

uint64_t protocol witness for VoiceShortcutClientWrapping.getVoiceShortcutName(voiceCommandId:) in conformance VoiceShortcutClientWrapper()
{
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_0_3();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = OUTLINED_FUNCTION_14_1();
  return v4(v3);
}

void protocol witness for VoiceShortcutClientWrapping.getSiriAutoShortcutsEnablement(forBundleIdentifier:completion:) in conformance VoiceShortcutClientWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t protocol witness for VoiceShortcutClientWrapping.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:) in conformance VoiceShortcutClientWrapper(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for VoiceShortcutClientWrapping.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:) in conformance VoiceShortcutClientWrapper;
  return VoiceShortcutClientWrapper.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:)(a1, a2, a3);
}

uint64_t protocol witness for VoiceShortcutClientWrapping.setSiriAutoShortcutsEnablement(_:forBundleIdentifier:) in conformance VoiceShortcutClientWrapper()
{
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_0_3();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_2_4();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_16_0();
  return v3();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t type metadata accessor for VoiceShortcutClientWrapper()
{
  return self;
}

uint64_t outlined init with take of INImage?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INImage?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_1_8(uint64_t a1)
{
  return _swift_task_switch(a1, 0, 0);
}

uint64_t OUTLINED_FUNCTION_7_3(uint64_t a1)
{
  *(void *)(v1 - 8) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_9_2()
{
  return v0;
}

BOOL OUTLINED_FUNCTION_10_1()
{
  return *(void *)(v0 + 160) == 0;
}

uint64_t OUTLINED_FUNCTION_11_1()
{
  *(_WORD *)(v0 + 12) = 2112;
  return swift_errorRetain();
}

void OUTLINED_FUNCTION_12_1(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_13_1()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_14_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_15_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_16_0()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_18()
{
  return swift_continuation_init();
}

uint64_t AutoShortcutFirstRunView.model.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of WorkflowDataModels.AutoShortcutFirstRunModel(v1, a1);
}

uint64_t outlined init with copy of WorkflowDataModels.AutoShortcutFirstRunModel(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AutoShortcutFirstRunView.body.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ConfirmationBinaryButtonView();
  uint64_t v4 = v3 - 8;
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v21 - v8;
  long long v10 = *((_OWORD *)v1 + 5);
  long long v27 = *((_OWORD *)v1 + 6);
  long long v28 = v10;
  uint64_t v11 = *v1;
  uint64_t v12 = v1[2];
  uint64_t v13 = v1[3];
  uint64_t v22 = v1[1];
  uint64_t v23 = v12;
  uint64_t v14 = v1[5];
  uint64_t v15 = v1[6];
  uint64_t v16 = v1[7];
  uint64_t v24 = v1[4];
  uint64_t v25 = v15;
  uint64_t v17 = v1[9];
  uint64_t v26 = v1[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of String((uint64_t)&v28);
  outlined retain of String((uint64_t)&v27);
  static ButtonStyle<>.buttonItemPreferred.getter();
  ActionHandler.init()();
  *(_OWORD *)&v9[*(int *)(v4 + 28)] = v28;
  *(_OWORD *)&v9[*(int *)(v4 + 32)] = v27;
  outlined init with copy of ConfirmationBinaryButtonView((uint64_t)v9, (uint64_t)v7);
  uint64_t v18 = v22;
  *a1 = v11;
  a1[1] = v18;
  a1[2] = v23;
  a1[3] = v13;
  a1[4] = v24;
  a1[5] = v14;
  a1[6] = v25;
  a1[7] = v16;
  a1[8] = v26;
  a1[9] = v17;
  a1[10] = 0x4028000000000000;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AutoShortcutFirstRunComponentView, ConfirmationBinaryButtonView));
  outlined init with copy of ConfirmationBinaryButtonView((uint64_t)v7, (uint64_t)a1 + *(int *)(v19 + 48));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined destroy of ConfirmationBinaryButtonView((uint64_t)v9);
  outlined destroy of ConfirmationBinaryButtonView((uint64_t)v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void __swiftcall AutoShortcutFirstRunView.init(model:)(SiriLinkUIPlugin::AutoShortcutFirstRunView *__return_ptr retstr, SiriLinkUIPlugin::WorkflowDataModels::AutoShortcutFirstRunModel *model)
{
  long long v2 = *(_OWORD *)&model->viewModel.bundleId._object;
  object = model->viewModel.prompt._object;
  uint64_t countAndFlagsBits = model->cancelLabel._countAndFlagsBits;
  uint64_t v5 = model->cancelLabel._object;
  retstr->model.viewModel.shortcutPhrases._rawValue = model->viewModel.shortcutPhrases._rawValue;
  *(_OWORD *)&retstr->model.viewModel.maxPhrases = *(_OWORD *)&model->viewModel.maxPhrases;
  *(_OWORD *)&retstr->model.viewModel.bundleId._object = v2;
  retstr->model.viewModel.prompt._object = object;
  Swift::String_optional footnoteLabel = model->viewModel.footnoteLabel;
  Swift::String confirmLabel = model->confirmLabel;
  retstr->model.viewModel.moreShortcutsLabel = model->viewModel.moreShortcutsLabel;
  retstr->model.viewModel.Swift::String_optional footnoteLabel = footnoteLabel;
  retstr->model.Swift::String confirmLabel = confirmLabel;
  retstr->model.cancelLabel._uint64_t countAndFlagsBits = countAndFlagsBits;
  retstr->model.cancelLabel._object = v5;
}

uint64_t associated type witness table accessor for View.Body : View in AutoShortcutFirstRunView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for AutoShortcutFirstRunView()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AutoShortcutFirstRunView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  uint64_t v7 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v7;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AutoShortcutFirstRunView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy112_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

uint64_t assignWithTake for AutoShortcutFirstRunView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AutoShortcutFirstRunView(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 112))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutoShortcutFirstRunView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutoShortcutFirstRunView()
{
  return &type metadata for AutoShortcutFirstRunView;
}

unint64_t lazy protocol witness table accessor for type TupleView<(AutoShortcutFirstRunComponentView, ConfirmationBinaryButtonView)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(AutoShortcutFirstRunComponentView, ConfirmationBinaryButtonView)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(AutoShortcutFirstRunComponentView, ConfirmationBinaryButtonView)> and conformance TupleView<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for TupleView<(AutoShortcutFirstRunComponentView, ConfirmationBinaryButtonView)>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(AutoShortcutFirstRunComponentView, ConfirmationBinaryButtonView)> and conformance TupleView<A>);
  }
  return result;
}

uint64_t WorkflowDataModels.LinkActionModel.archivedViewModel.getter@<X0>(void *a1@<X8>)
{
  uint64_t v7 = &demangling cache variable for type metadata for Data?;
  outlined init with take of Data?((uint64_t)(v1 + 6), (uint64_t)v10, &demangling cache variable for type metadata for Data?);
  outlined init with take of Data?((uint64_t)v10, (uint64_t)&v11, &demangling cache variable for type metadata for Data?);
  unint64_t v8 = v12;
  if (v12 >> 60 == 15)
  {
    OUTLINED_FUNCTION_74();
  }
  else
  {
    uint64_t v3 = v11;
    uint64_t v4 = *v1;
    uint64_t v2 = v1[1];
    uint64_t v5 = v1[2];
    uint64_t v7 = (uint64_t *)v1[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t result = outlined retain of Data?((uint64_t)v10);
  *a1 = v3;
  a1[1] = v8;
  a1[2] = v4;
  a1[3] = v2;
  a1[4] = v5;
  a1[5] = v7;
  return result;
}

uint64_t WorkflowDataModels.ConfirmActionModel.archivedViewModel.getter@<X0>(void *a1@<X8>)
{
  uint64_t v7 = &demangling cache variable for type metadata for Data?;
  outlined init with take of Data?((uint64_t)(v1 + 8), (uint64_t)v10, &demangling cache variable for type metadata for Data?);
  outlined init with take of Data?((uint64_t)v10, (uint64_t)&v11, &demangling cache variable for type metadata for Data?);
  unint64_t v8 = v12;
  if (v12 >> 60 == 15)
  {
    OUTLINED_FUNCTION_74();
  }
  else
  {
    uint64_t v3 = v11;
    uint64_t v4 = *v1;
    uint64_t v2 = v1[1];
    uint64_t v5 = v1[2];
    uint64_t v7 = (uint64_t *)v1[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t result = outlined retain of Data?((uint64_t)v10);
  *a1 = v3;
  a1[1] = v8;
  a1[2] = v4;
  a1[3] = v2;
  a1[4] = v5;
  a1[5] = v7;
  return result;
}

void *WorkflowDataModels.bundleName.unsafeMutableAddressor()
{
  return &static WorkflowDataModels.bundleName;
}

unint64_t static WorkflowDataModels.bundleName.getter()
{
  return 0xD000000000000010;
}

uint64_t WorkflowDataModels.DisambiguationItemModel.title.getter()
{
  return OUTLINED_FUNCTION_4_2();
}

uint64_t AutoShortcutAppPhrasesViewModel.moreShortcutsLabel.getter()
{
  return OUTLINED_FUNCTION_4_2();
}

uint64_t WorkflowDataModels.ShowAlertModel.asSnippetPluginModel()@<X0>(_OWORD *a1@<X8>)
{
  return WorkflowDataModels.ShowAlertModel.asSnippetPluginModel()((uint64_t (*)(_OWORD *))outlined retain of WorkflowDataModels.ShowAlertModel, a1);
}

uint64_t type metadata accessor for WorkflowDataModels(uint64_t a1)
{
  return type metadata accessor for WorkflowDataModels(a1, (uint64_t *)&type metadata singleton initialization cache for WorkflowDataModels);
}

uint64_t outlined retain of WorkflowDataModels.ShowAlertModel(uint64_t a1)
{
  return a1;
}

uint64_t WorkflowDataModels.ShowAlertModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x4C6D7269666E6F63 && a2 == 0xEC0000006C656261;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x614C6C65636E6163 && a2 == 0xEB000000006C6562;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t WorkflowDataModels.ShowAlertModel.CodingKeys.stringValue.getter(char a1)
{
  return *(void *)&aConfirmlcancel[8 * a1];
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.ShowAlertModel.CodingKeys()
{
  return WorkflowDataModels.ShowAlertModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.ShowAlertModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.ShowAlertModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.ShowAlertModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.ShowAlertModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.ShowAlertModel.encode(to:)()
{
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_30();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.ShowAlertModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_7_4();
  lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys();
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_15_1();
  if (!v0)
  {
    OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_45();
    OUTLINED_FUNCTION_15_1();
  }
  uint64_t v2 = OUTLINED_FUNCTION_8_3();
  v3(v2);
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_44();
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys);
  }
  return result;
}

void WorkflowDataModels.ShowAlertModel.init(from:)()
{
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_87();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.ShowAlertModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_60();
  lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel.CodingKeys and conformance WorkflowDataModels.ShowAlertModel.CodingKeys();
  OUTLINED_FUNCTION_121();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1(v0);
  }
  else
  {
    OUTLINED_FUNCTION_127();
    uint64_t v5 = OUTLINED_FUNCTION_82();
    uint64_t v7 = v6;
    uint64_t v17 = v5;
    swift_bridgeObjectRetain();
    uint64_t v8 = OUTLINED_FUNCTION_82();
    uint64_t v18 = v9;
    uint64_t v16 = v8;
    OUTLINED_FUNCTION_58();
    swift_bridgeObjectRetain();
    uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v15 = v10;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_82();
    OUTLINED_FUNCTION_110();
    uint64_t v13 = v11;
    OUTLINED_FUNCTION_19();
    v12();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_59();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *uint64_t v2 = v17;
    v2[1] = v7;
    v2[2] = v16;
    v2[3] = v18;
    v2[4] = v14;
    v2[5] = v15;
    v2[6] = v13;
    v2[7] = v3;
  }
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_9_3();
}

uint64_t protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance WorkflowDataModels.ShowAlertModel@<X0>(_OWORD *a1@<X8>)
{
  return WorkflowDataModels.ShowAlertModel.asSnippetPluginModel()(a1);
}

double protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.ShowAlertModel@<D0>(_OWORD *a1@<X8>)
{
  WorkflowDataModels.ShowAlertModel.init(from:)();
  if (!v1)
  {
    *a1 = v4;
    a1[1] = v5;
    double result = *(double *)&v6;
    a1[2] = v6;
    a1[3] = v7;
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.ShowAlertModel()
{
}

uint64_t WorkflowDataModels.CustomIntentErrorModel.openAppButtonLabel.getter()
{
  return OUTLINED_FUNCTION_4_2();
}

uint64_t WorkflowDataModels.DisambiguationItemModel.subtitle.getter()
{
  return OUTLINED_FUNCTION_4_2();
}

uint64_t WorkflowDataModels.EnableTCCModel.asSnippetPluginModel()@<X0>(_OWORD *a1@<X8>)
{
  long long v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v1[2];
  OUTLINED_FUNCTION_55();
  swift_storeEnumTagMultiPayload();
  long long v3 = *v1;
  long long v6 = v1[1];
  long long v7 = v3;
  outlined init with take of Data?((uint64_t)(v1 + 2), (uint64_t)v5, &demangling cache variable for type metadata for String?);
  outlined retain of String((uint64_t)&v7);
  outlined retain of String((uint64_t)&v6);
  return outlined retain of String((uint64_t)v5);
}

uint64_t WorkflowDataModels.EnableTCCModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x4C6D7269666E6F63 && a2 == 0xEC0000006C656261;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x614C6C65636E6163 && a2 == 0xEB000000006C6562;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x74706D6F7270 && a2 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t WorkflowDataModels.EnableTCCModel.CodingKeys.stringValue.getter(char a1)
{
  return *(void *)&aConfirmlcancel_0[8 * a1];
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.EnableTCCModel.CodingKeys()
{
  return WorkflowDataModels.EnableTCCModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.EnableTCCModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.EnableTCCModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.EnableTCCModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.EnableTCCModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.EnableTCCModel.encode(to:)()
{
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_30();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.EnableTCCModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_7_4();
  lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys();
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_15_1();
  if (!v0)
  {
    OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_45();
  }
  uint64_t v2 = OUTLINED_FUNCTION_8_3();
  v3(v2);
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_44();
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys);
  }
  return result;
}

void WorkflowDataModels.EnableTCCModel.init(from:)()
{
  OUTLINED_FUNCTION_10_2();
  BOOL v3 = v2;
  long long v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.EnableTCCModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_36();
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCModel.CodingKeys and conformance WorkflowDataModels.EnableTCCModel.CodingKeys();
  OUTLINED_FUNCTION_146();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  }
  else
  {
    OUTLINED_FUNCTION_127();
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v9 = v8;
    uint64_t v17 = v7;
    swift_bridgeObjectRetain();
    uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v12 = v11;
    uint64_t v16 = v10;
    OUTLINED_FUNCTION_58();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_110();
    uint64_t v14 = v13;
    OUTLINED_FUNCTION_19();
    v15();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_59();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *long long v5 = v17;
    v5[1] = v9;
    v5[2] = v16;
    v5[3] = v12;
    v5[4] = v14;
    v5[5] = v1;
  }
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_9_3();
}

uint64_t protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance WorkflowDataModels.EnableTCCModel@<X0>(_OWORD *a1@<X8>)
{
  return WorkflowDataModels.EnableTCCModel.asSnippetPluginModel()(a1);
}

double protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.EnableTCCModel@<D0>(_OWORD *a1@<X8>)
{
  WorkflowDataModels.EnableTCCModel.init(from:)();
  if (!v1)
  {
    *a1 = v4;
    a1[1] = v5;
    double result = *(double *)&v6;
    a1[2] = v6;
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.EnableTCCModel()
{
}

uint64_t WorkflowDataModels.WatchModel.viewType.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_134();
  outlined copy of WatchViewType(v0, v1);
  return OUTLINED_FUNCTION_134();
}

uint64_t outlined copy of WatchViewType(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t WorkflowDataModels.WatchModel.confirmLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

SiriLinkUIPlugin::IconView (__swiftcall *WorkflowDataModels.WatchModel.confirmLabel.modify())(Swift::String bundleIdentifier)
{
  return IconView.init(bundleIdentifier:);
}

uint64_t AutoShortcutAppPhrasesViewModel.footnoteLabel.getter()
{
  return OUTLINED_FUNCTION_4_2();
}

uint64_t WorkflowDataModels.WatchModel.cancelLabel.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return result;
}

SiriLinkUIPlugin::IconView (__swiftcall *WorkflowDataModels.WatchModel.cancelLabel.modify())(Swift::String bundleIdentifier)
{
  return IconView.init(bundleIdentifier:);
}

uint64_t WorkflowDataModels.WatchModel.asSnippetPluginModel()@<X0>(void *a1@<X8>)
{
  return WorkflowDataModels.WatchModel.asSnippetPluginModel()((uint64_t (*)(const void *))outlined retain of WorkflowDataModels.WatchModel, a1);
}

uint64_t outlined retain of WorkflowDataModels.WatchModel(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  outlined copy of WatchViewType(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t WorkflowDataModels.WatchModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x74756374726F6873 && a2 == 0xEC000000656D614ELL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6570795477656976 && a2 == 0xE800000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x4C6D7269666E6F63 && a2 == 0xEC0000006C656261;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x614C6C65636E6163 && a2 == 0xEB000000006C6562)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t WorkflowDataModels.WatchModel.CodingKeys.stringValue.getter(char a1)
{
  return *(void *)&aShortcutviewty[8 * a1];
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.WatchModel.CodingKeys()
{
  return WorkflowDataModels.WatchModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.WatchModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.WatchModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.WatchModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.WatchModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.WatchModel.encode(to:)()
{
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_30();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.WatchModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_7_4();
  lazy protocol witness table accessor for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys();
  OUTLINED_FUNCTION_12_2();
  LOBYTE(v5) = 0;
  OUTLINED_FUNCTION_45();
  if (!v0)
  {
    outlined init with take of Any((_OWORD *)(v1 + 16), &v6);
    outlined init with take of Any(&v6, &v5);
    lazy protocol witness table accessor for type WatchViewType and conformance WatchViewType();
    OUTLINED_FUNCTION_52();
    LOBYTE(v5) = 2;
    OUTLINED_FUNCTION_45();
    LOBYTE(v5) = 3;
    OUTLINED_FUNCTION_45();
  }
  uint64_t v3 = OUTLINED_FUNCTION_8_3();
  v4(v3);
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_44();
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WatchViewType and conformance WatchViewType()
{
  unint64_t result = lazy protocol witness table cache variable for type WatchViewType and conformance WatchViewType;
  if (!lazy protocol witness table cache variable for type WatchViewType and conformance WatchViewType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType and conformance WatchViewType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchViewType and conformance WatchViewType;
  if (!lazy protocol witness table cache variable for type WatchViewType and conformance WatchViewType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType and conformance WatchViewType);
  }
  return result;
}

void WorkflowDataModels.WatchModel.init(from:)()
{
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_87();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.WatchModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_48();
  OUTLINED_FUNCTION_60();
  lazy protocol witness table accessor for type WorkflowDataModels.WatchModel.CodingKeys and conformance WorkflowDataModels.WatchModel.CodingKeys();
  OUTLINED_FUNCTION_121();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1(v0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v16) = 0;
    uint64_t v5 = OUTLINED_FUNCTION_132();
    uint64_t v7 = v6;
    lazy protocol witness table accessor for type WatchViewType and conformance WatchViewType();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v14 = v5;
    outlined copy of WatchViewType(v16, v17);
    uint64_t v8 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v10 = v9;
    uint64_t v13 = v8;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_132();
    OUTLINED_FUNCTION_110();
    uint64_t v15 = v11;
    OUTLINED_FUNCTION_19();
    v12();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined copy of WatchViewType(v16, v17);
    OUTLINED_FUNCTION_137();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v0);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_137();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *uint64_t v2 = v14;
    v2[1] = v7;
    v2[2] = v16;
    v2[3] = v17;
    v2[4] = v18;
    v2[5] = v19;
    v2[6] = v13;
    v2[7] = v10;
    v2[8] = v15;
    v2[9] = v3;
  }
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_9_3();
}

uint64_t outlined consume of WatchViewType(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void __swiftcall AutoShortcutAppPhrasesViewModel.init(shortcutPhrases:maxPhrases:bundleId:prompt:moreShortcutsLabel:footnoteLabel:)(SiriLinkUIPlugin::AutoShortcutAppPhrasesViewModel *__return_ptr retstr, Swift::OpaquePointer shortcutPhrases, Swift::Int maxPhrases, Swift::String bundleId, Swift::String prompt, Swift::String_optional moreShortcutsLabel, Swift::String_optional footnoteLabel)
{
  retstr->shortcutPhrases = shortcutPhrases;
  retstr->maxPhrases = maxPhrases;
  retstr->bundleId = bundleId;
  retstr->prompt = prompt;
  retstr->moreShortcutsLabel = moreShortcutsLabel;
  retstr->Swift::String_optional footnoteLabel = footnoteLabel;
}

uint64_t protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance WorkflowDataModels.WatchModel@<X0>(void *a1@<X8>)
{
  memcpy(v4, v1, sizeof(v4));
  return WorkflowDataModels.WatchModel.asSnippetPluginModel()(a1);
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.WatchModel(void *a1@<X8>)
{
  WorkflowDataModels.WatchModel.init(from:)();
  if (!v1) {
    memcpy(a1, v3, 0x50uLL);
  }
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.WatchModel()
{
  memcpy(v1, v0, sizeof(v1));
  WorkflowDataModels.WatchModel.encode(to:)();
}

uint64_t WorkflowDataModels.CustomIntentModel.appPunchOut.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  OUTLINED_FUNCTION_2();
  uint64_t v0 = OUTLINED_FUNCTION_4_2();

  return v1(v0);
}

uint64_t WorkflowDataModels.CustomIntentModel.interaction.getter()
{
  type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  type metadata accessor for CodableINInteraction();
  OUTLINED_FUNCTION_2();
  uint64_t v0 = OUTLINED_FUNCTION_4_2();

  return v1(v0);
}

uint64_t type metadata accessor for WorkflowDataModels.CustomIntentModel(uint64_t a1)
{
  return type metadata accessor for WorkflowDataModels(a1, (uint64_t *)&type metadata singleton initialization cache for WorkflowDataModels.CustomIntentModel);
}

uint64_t WorkflowDataModels.CustomIntentModel.image.getter@<X0>(uint64_t a1@<X8>)
{
  return WorkflowDataModels.CustomIntentModel.image.getter(type metadata accessor for WorkflowDataModels.CustomIntentModel, &demangling cache variable for type metadata for VisualProperty?, a1);
}

uint64_t WorkflowDataModels.CustomIntentModel.title.getter()
{
  return OUTLINED_FUNCTION_4_2();
}

uint64_t WorkflowDataModels.CustomIntentModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x68636E7550707061 && a2 == 0xEB0000000074754FLL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x7463617265746E69 && a2 == 0xEB000000006E6F69;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x6567616D69 && a2 == 0xE500000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t WorkflowDataModels.CustomIntentModel.CodingKeys.stringValue.getter(char a1)
{
  return *(void *)&aApppunchintera[8 * a1];
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.CustomIntentModel.CodingKeys()
{
  return WorkflowDataModels.CustomIntentModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.CustomIntentModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.CustomIntentModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CustomIntentModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CustomIntentModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.CustomIntentModel.encode(to:)()
{
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_30();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.CustomIntentModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_7_4();
  lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys();
  OUTLINED_FUNCTION_12_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>((uint64_t)&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>);
  OUTLINED_FUNCTION_52();
  if (!v0)
  {
    type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
    OUTLINED_FUNCTION_67();
    type metadata accessor for CodableINInteraction();
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type CodableINInteraction and conformance CodableINInteraction);
    OUTLINED_FUNCTION_139();
    OUTLINED_FUNCTION_52();
    OUTLINED_FUNCTION_58();
    type metadata accessor for VisualProperty();
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type VisualProperty and conformance VisualProperty);
    OUTLINED_FUNCTION_138();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_15_1();
  }
  uint64_t v2 = OUTLINED_FUNCTION_8_3();
  v3(v2);
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_44();
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_97(a1);
  if (!result)
  {
    v3(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t WorkflowDataModels.CustomIntentModel.init(appPunchOut:interaction:image:title:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  OUTLINED_FUNCTION_81();
  uint64_t v9 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_119();
  v10();
  uint64_t v11 = type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  type metadata accessor for CodableINInteraction();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_119();
  v12();
  uint64_t result = outlined init with take of Data?(v6, v9 + *(int *)(v11 + 24), &demangling cache variable for type metadata for VisualProperty?);
  uint64_t v14 = (void *)(v9 + *(int *)(v11 + 28));
  *uint64_t v14 = v5;
  v14[1] = a5;
  return result;
}

void WorkflowDataModels.CustomIntentModel.init(from:)()
{
  OUTLINED_FUNCTION_10_2();
  uint64_t v4 = v3;
  uint64_t v25 = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  uint64_t v7 = OUTLINED_FUNCTION_9(v6);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_1_7();
  uint64_t v26 = v8;
  uint64_t v29 = type metadata accessor for CodableINInteraction();
  OUTLINED_FUNCTION_0_1();
  uint64_t v27 = v9;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_36();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v28 = v12;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_70(v14, v24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CustomIntentModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v15);
  uint64_t v16 = OUTLINED_FUNCTION_68();
  uint64_t v17 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(v16);
  OUTLINED_FUNCTION_2();
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_8();
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentModel.CodingKeys and conformance WorkflowDataModels.CustomIntentModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  }
  else
  {
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>((uint64_t)&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v1, v30, v11);
    OUTLINED_FUNCTION_67();
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type CodableINInteraction and conformance CodableINInteraction);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v1 + v17[5], v2, v29);
    type metadata accessor for VisualProperty();
    OUTLINED_FUNCTION_58();
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type VisualProperty and conformance VisualProperty);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined init with take of Data?(v26, v1 + v17[6], &demangling cache variable for type metadata for VisualProperty?);
    uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v21 = v20;
    OUTLINED_FUNCTION_7_0();
    v22();
    uint64_t v23 = (uint64_t *)(v1 + v17[7]);
    *uint64_t v23 = v19;
    v23[1] = v21;
    outlined init with copy of WorkflowDataModels.CustomIntentModel(v1, v25, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentModel);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
    outlined destroy of WorkflowDataModels.CustomIntentModel(v1, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentModel);
  }
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_9_3();
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.CustomIntentModel()
{
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.CustomIntentModel()
{
}

uint64_t WorkflowDataModels.CustomIntentConfirmationModel.intentModel.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of WorkflowDataModels.CustomIntentModel(v1, a1, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentModel);
}

uint64_t WorkflowDataModels.CustomIntentConfirmationModel.confirmLabel.getter()
{
  return WorkflowDataModels.CustomIntentConfirmationModel.confirmLabel.getter((void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel);
}

uint64_t type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(uint64_t a1)
{
  return type metadata accessor for WorkflowDataModels(a1, (uint64_t *)&type metadata singleton initialization cache for WorkflowDataModels.CustomIntentConfirmationModel);
}

uint64_t WorkflowDataModels.CustomIntentConfirmationModel.cancelLabel.getter()
{
  return OUTLINED_FUNCTION_4_2();
}

uint64_t WorkflowDataModels.CustomIntentConfirmationModel.asSnippetPluginModel()()
{
  return WorkflowDataModels.CustomIntentConfirmationModel.asSnippetPluginModel()();
}

{
  uint64_t v0;
  void (*v1)(void);
  uint64_t v2;
  uint64_t vars8;

  uint64_t v0 = OUTLINED_FUNCTION_128();
  outlined init with copy of WorkflowDataModels.CustomIntentModel(v0, v2, v1);
  type metadata accessor for WorkflowDataModels(0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t outlined init with copy of WorkflowDataModels.CustomIntentModel(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_2();
  uint64_t v4 = OUTLINED_FUNCTION_4_4();
  v5(v4);
  return a2;
}

uint64_t WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6F4D746E65746E69 && a2 == 0xEB000000006C6564;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x4C6D7269666E6F63 && a2 == 0xEC0000006C656261;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x614C6C65636E6163 && a2 == 0xEB000000006C6562)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys.stringValue.getter(char a1)
{
  return *(void *)&aIntentmoconfir[8 * a1];
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys()
{
  return WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.CustomIntentConfirmationModel.encode(to:)()
{
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_30();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_7_4();
  lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys();
  OUTLINED_FUNCTION_12_2();
  type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel and conformance WorkflowDataModels.CustomIntentModel);
  OUTLINED_FUNCTION_52();
  if (!v0)
  {
    type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
    OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_15_1();
  }
  uint64_t v2 = OUTLINED_FUNCTION_8_3();
  v3(v2);
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_44();
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys);
  }
  return result;
}

void WorkflowDataModels.CustomIntentConfirmationModel.init(from:)()
{
  OUTLINED_FUNCTION_10_2();
  BOOL v3 = v2;
  uint64_t v22 = v4;
  type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  OUTLINED_FUNCTION_2();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_1_7();
  uint64_t v23 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v7);
  uint64_t v8 = OUTLINED_FUNCTION_32();
  uint64_t v9 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(v8);
  OUTLINED_FUNCTION_2();
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_145(v3);
  lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys();
  OUTLINED_FUNCTION_146();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  }
  else
  {
    uint64_t v11 = v1;
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel and conformance WorkflowDataModels.CustomIntentModel);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    outlined init with take of WorkflowDataModels.CustomIntentModel(v23, v1, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentModel);
    OUTLINED_FUNCTION_126();
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v13 = v9;
    uint64_t v14 = (uint64_t *)(v11 + *(int *)(v9 + 20));
    *uint64_t v14 = v12;
    v14[1] = v15;
    OUTLINED_FUNCTION_58();
    uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v18 = v17;
    uint64_t v19 = OUTLINED_FUNCTION_148();
    v20(v19);
    uint64_t v21 = (uint64_t *)(v11 + *(int *)(v13 + 24));
    *uint64_t v21 = v16;
    v21[1] = v18;
    outlined init with copy of WorkflowDataModels.CustomIntentModel(v11, v22, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
    outlined destroy of WorkflowDataModels.CustomIntentModel(v11, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel);
  }
  OUTLINED_FUNCTION_9_3();
}

uint64_t outlined destroy of WorkflowDataModels.CustomIntentModel(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0();
  v3();
  return a1;
}

uint64_t WorkflowDataModels.CustomIntentConfirmationModel.init(intentModel:confirmLabel:cancelLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  OUTLINED_FUNCTION_120();
  outlined init with take of WorkflowDataModels.CustomIntentModel(v8, v9, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentModel);
  uint64_t v10 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
  uint64_t result = OUTLINED_FUNCTION_124(v10);
  uint64_t v13 = (void *)(v6 + v12);
  *uint64_t v13 = v5;
  v13[1] = a5;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.CustomIntentConfirmationModel()
{
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.CustomIntentConfirmationModel()
{
}

uint64_t WorkflowDataModels.CustomIntentHandledModel.doneButtonLabel.getter()
{
  return WorkflowDataModels.CustomIntentConfirmationModel.confirmLabel.getter((void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentHandledModel);
}

uint64_t WorkflowDataModels.CustomIntentConfirmationModel.confirmLabel.getter(void (*a1)(void))
{
  return OUTLINED_FUNCTION_4_2();
}

uint64_t type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(uint64_t a1)
{
  return type metadata accessor for WorkflowDataModels(a1, (uint64_t *)&type metadata singleton initialization cache for WorkflowDataModels.CustomIntentHandledModel);
}

uint64_t WorkflowDataModels.CustomIntentHandledModel.doneButtonCommand.getter@<X0>(uint64_t a1@<X8>)
{
  return WorkflowDataModels.CustomIntentModel.image.getter(type metadata accessor for WorkflowDataModels.CustomIntentHandledModel, &demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?, a1);
}

uint64_t WorkflowDataModels.CustomIntentModel.image.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1(0);
  return outlined init with copy of (<<opaque return type of View.buttonStyle<A>(_:)>>.0)?(v3 + *(int *)(v6 + 24), a3, a2);
}

uint64_t WorkflowDataModels.CustomIntentHandledModel.shouldShowDoneButton.getter()
{
  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0) + 28));
}

uint64_t WorkflowDataModels.CustomIntentHandledModel.asSnippetPluginModel()()
{
  return WorkflowDataModels.CustomIntentConfirmationModel.asSnippetPluginModel()();
}

uint64_t WorkflowDataModels.CustomIntentHandledModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6F4D746E65746E69 && a2 == 0xEB000000006C6564;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x74747542656E6F64 && a2 == 0xEF6C6562614C6E6FLL;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000011 && a2 == 0x800000000004EA60 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 0xD000000000000014 && a2 == 0x800000000004EA80)
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v7) {
        return 3;
      }
      else {
        return 4;
      }
    }
  }
}

unint64_t WorkflowDataModels.CustomIntentHandledModel.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x74747542656E6F64;
      break;
    case 2:
      return result;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      unint64_t result = 0x6F4D746E65746E69;
      break;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys()
{
  return WorkflowDataModels.CustomIntentHandledModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.CustomIntentHandledModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.CustomIntentHandledModel.encode(to:)()
{
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_30();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.CustomIntentHandledModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_7_4();
  lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys();
  OUTLINED_FUNCTION_12_2();
  type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel and conformance WorkflowDataModels.CustomIntentModel);
  OUTLINED_FUNCTION_52();
  if (!v0)
  {
    type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
    OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_58();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>((uint64_t)&lazy protocol witness table cache variable for type CodableAceObject<SAStartLocalRequest> and conformance CodableAceObject<A>);
    OUTLINED_FUNCTION_138();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  OUTLINED_FUNCTION_19();
  v2();
  OUTLINED_FUNCTION_9_3();
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys);
  }
  return result;
}

void WorkflowDataModels.CustomIntentHandledModel.init(from:)()
{
  OUTLINED_FUNCTION_10_2();
  uint64_t v4 = v3;
  uint64_t v19 = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
  uint64_t v7 = OUTLINED_FUNCTION_9(v6);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_8();
  type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  OUTLINED_FUNCTION_2();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_70(v9, v19);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CustomIntentHandledModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v10);
  uint64_t v11 = OUTLINED_FUNCTION_32();
  uint64_t v12 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(v11);
  OUTLINED_FUNCTION_2();
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_21();
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledModel.CodingKeys and conformance WorkflowDataModels.CustomIntentHandledModel.CodingKeys();
  OUTLINED_FUNCTION_146();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  }
  else
  {
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentModel and conformance WorkflowDataModels.CustomIntentModel);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    outlined init with take of WorkflowDataModels.CustomIntentModel(v21, v2, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentModel);
    OUTLINED_FUNCTION_126();
    uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v15 = (uint64_t *)(v2 + v12[5]);
    *uint64_t v15 = v14;
    v15[1] = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
    OUTLINED_FUNCTION_58();
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>((uint64_t)&lazy protocol witness table cache variable for type CodableAceObject<SAStartLocalRequest> and conformance CodableAceObject<A>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined init with take of Data?(v1, v2 + v12[6], &demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
    char v17 = KeyedDecodingContainer.decode(_:forKey:)();
    OUTLINED_FUNCTION_19();
    v18();
    *(unsigned char *)(v2 + v12[7]) = v17 & 1;
    outlined init with copy of WorkflowDataModels.CustomIntentModel(v2, v20, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentHandledModel);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
    outlined destroy of WorkflowDataModels.CustomIntentModel(v2, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentHandledModel);
  }
  OUTLINED_FUNCTION_9_3();
}

unint64_t lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>(uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_97(a1);
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(v3);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t WorkflowDataModels.CustomIntentHandledModel.init(intentModel:doneButtonLabel:doneButtonCommand:shouldShowDoneButton:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  OUTLINED_FUNCTION_120();
  outlined init with take of WorkflowDataModels.CustomIntentModel(v8, v9, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentModel);
  uint64_t v10 = type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
  OUTLINED_FUNCTION_124(v10);
  uint64_t result = outlined init with take of Data?(v5, v6 + v11, &demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
  *(unsigned char *)(v6 + *(int *)(v10 + 28)) = a5;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.CustomIntentHandledModel()
{
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.CustomIntentHandledModel()
{
}

uint64_t WorkflowDataModels.CustomIntentErrorModel.appPunchOut.getter()
{
  type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  OUTLINED_FUNCTION_2();
  uint64_t v0 = OUTLINED_FUNCTION_4_2();

  return v1(v0);
}

uint64_t type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(uint64_t a1)
{
  return type metadata accessor for WorkflowDataModels(a1, (uint64_t *)&type metadata singleton initialization cache for WorkflowDataModels.CustomIntentErrorModel);
}

uint64_t WorkflowDataModels.CustomIntentErrorModel.asSnippetPluginModel()()
{
  return WorkflowDataModels.CustomIntentConfirmationModel.asSnippetPluginModel()();
}

uint64_t WorkflowDataModels.CustomIntentErrorModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x800000000004EAA0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x68636E7550707061 && a2 == 0xEB0000000074754FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t WorkflowDataModels.CustomIntentErrorModel.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x68636E7550707061;
  }
  else {
    return 0xD000000000000012;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys()
{
  return WorkflowDataModels.CustomIntentErrorModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.CustomIntentErrorModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.CustomIntentErrorModel.encode(to:)()
{
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_30();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.CustomIntentErrorModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_7_4();
  lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys();
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_15_1();
  if (!v0)
  {
    type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0);
    OUTLINED_FUNCTION_67();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>((uint64_t)&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>);
    OUTLINED_FUNCTION_139();
    OUTLINED_FUNCTION_52();
  }
  uint64_t v2 = OUTLINED_FUNCTION_8_3();
  v3(v2);
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_44();
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys);
  }
  return result;
}

void WorkflowDataModels.CustomIntentErrorModel.init(from:)()
{
  OUTLINED_FUNCTION_10_2();
  uint64_t v4 = v3;
  uint64_t v16 = v5;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v15 = v6;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_27();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CustomIntentErrorModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v8);
  uint64_t v9 = OUTLINED_FUNCTION_69();
  uint64_t v10 = type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(v9);
  OUTLINED_FUNCTION_2();
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_60();
  lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorModel.CodingKeys and conformance WorkflowDataModels.CustomIntentErrorModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1(v4);
  }
  else
  {
    OUTLINED_FUNCTION_127();
    uint64_t *v1 = KeyedDecodingContainer.decode(_:forKey:)();
    v1[1] = v12;
    OUTLINED_FUNCTION_67();
    lazy protocol witness table accessor for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>((uint64_t)&lazy protocol witness table cache variable for type CodableAceObject<SAIntentGroupLaunchAppWithIntent> and conformance CodableAceObject<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v13 = OUTLINED_FUNCTION_93();
    v14(v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))((char *)v1 + *(int *)(v10 + 20), v2, v17);
    outlined init with copy of WorkflowDataModels.CustomIntentModel((uint64_t)v1, v16, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentErrorModel);
    __swift_destroy_boxed_opaque_existential_1(v4);
    outlined destroy of WorkflowDataModels.CustomIntentModel((uint64_t)v1, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentErrorModel);
  }
  OUTLINED_FUNCTION_9_3();
}

uint64_t WorkflowDataModels.CustomIntentErrorModel.init(openAppButtonLabel:appPunchOut:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  OUTLINED_FUNCTION_2();
  uint64_t v5 = OUTLINED_FUNCTION_128();

  return v6(v5, a3);
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.CustomIntentErrorModel()
{
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.CustomIntentErrorModel()
{
}

uint64_t WorkflowDataModels.ConfirmActionModel.archivedViewData.getter()
{
  outlined copy of Data?(*(void *)(v0 + 64), *(void *)(v0 + 72));
  return OUTLINED_FUNCTION_4_2();
}

uint64_t WorkflowDataModels.ConfirmActionModel.isDestructive.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t WorkflowDataModels.ConfirmActionModel.prompt.getter()
{
  return OUTLINED_FUNCTION_4_2();
}

uint64_t WorkflowDataModels.ConfirmActionModel.asSnippetPluginModel()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_102(a1);
  memcpy(v2, v3, 0x68uLL);
  OUTLINED_FUNCTION_55();
  swift_storeEnumTagMultiPayload();

  return outlined retain of WorkflowDataModels.ConfirmActionModel(v1);
}

uint64_t outlined retain of WorkflowDataModels.ConfirmActionModel(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  unint64_t v3 = *(void *)(a1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v2, v3);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t WorkflowDataModels.ConfirmActionModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6C646E7542707061 && a2 == 0xEB00000000644965;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6C70736944707061 && a2 == 0xEE00656D614E7961;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x4C6D7269666E6F63 && a2 == 0xEC0000006C656261;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x6C6562614C6F6ELL && a2 == 0xE700000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0xD000000000000010 && a2 == 0x800000000004EAC0 {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          BOOL v9 = a1 == 0x7572747365447369 && a2 == 0xED00006576697463;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else if (a1 == 0x74706D6F7270 && a2 == 0xE600000000000000)
          {
            swift_bridgeObjectRelease();
            return 6;
          }
          else
          {
            char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v11) {
              return 6;
            }
            else {
              return 7;
            }
          }
        }
      }
    }
  }
}

uint64_t WorkflowDataModels.ConfirmActionModel.CodingKeys.init(intValue:)()
{
  return 7;
}

unint64_t WorkflowDataModels.ConfirmActionModel.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6C70736944707061;
      break;
    case 2:
      unint64_t result = 0x4C6D7269666E6F63;
      break;
    case 3:
      unint64_t result = 0x6C6562614C6F6ELL;
      break;
    case 4:
      return result;
    case 5:
      unint64_t result = 0x7572747365447369;
      break;
    case 6:
      unint64_t result = 0x74706D6F7270;
      break;
    default:
      unint64_t result = 0x6C646E7542707061;
      break;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.ConfirmActionModel.CodingKeys()
{
  return WorkflowDataModels.ConfirmActionModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.ConfirmActionModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.ConfirmActionModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance WorkflowDataModels.ConfirmActionModel.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = WorkflowDataModels.ConfirmActionModel.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.ConfirmActionModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.ConfirmActionModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.ConfirmActionModel.encode(to:)()
{
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_75();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.ConfirmActionModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_7_4();
  lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys();
  OUTLINED_FUNCTION_12_2();
  char v5 = 0;
  OUTLINED_FUNCTION_31();
  if (!v0)
  {
    char v5 = 1;
    OUTLINED_FUNCTION_31();
    char v5 = 2;
    OUTLINED_FUNCTION_31();
    char v5 = 3;
    OUTLINED_FUNCTION_31();
    outlined init with take of Data?(v1 + 64, (uint64_t)v6, &demangling cache variable for type metadata for Data?);
    outlined init with take of Data?((uint64_t)v6, (uint64_t)&v5, &demangling cache variable for type metadata for Data?);
    lazy protocol witness table accessor for type Data and conformance Data();
    OUTLINED_FUNCTION_101();
    char v5 = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    OUTLINED_FUNCTION_35(6);
  }
  uint64_t v3 = OUTLINED_FUNCTION_8_3();
  v4(v3);
  OUTLINED_FUNCTION_44();
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys);
  }
  return result;
}

uint64_t WorkflowDataModels.ConfirmActionModel.init(appBundleId:appDisplayName:confirmLabel:noLabel:archivedViewData:isDestructive:prompt:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  *(void *)a9 = result;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(void *)(a9 + 64) = a10;
  *(void *)(a9 + 72) = a11;
  *(unsigned char *)(a9 + 80) = a12;
  *(void *)(a9 + 88) = a13;
  *(void *)(a9 + 96) = a14;
  return result;
}

void WorkflowDataModels.ConfirmActionModel.init(from:)()
{
  OUTLINED_FUNCTION_10_2();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.ConfirmActionModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_27();
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionModel.CodingKeys and conformance WorkflowDataModels.ConfirmActionModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_41();
    uint64_t v12 = v11;
    swift_bridgeObjectRetain();
    uint64_t v13 = OUTLINED_FUNCTION_41();
    OUTLINED_FUNCTION_80(v13);
    uint64_t v28 = v10;
    uint64_t v25 = OUTLINED_FUNCTION_41();
    LOBYTE(v29) = 3;
    uint64_t v15 = v14;
    swift_bridgeObjectRetain();
    uint64_t v16 = OUTLINED_FUNCTION_41();
    uint64_t v18 = v17;
    uint64_t v23 = v16;
    lazy protocol witness table accessor for type Data and conformance Data();
    uint64_t v24 = v18;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined copy of Data?(v29, v30);
    OUTLINED_FUNCTION_141();
    char v31 = KeyedDecodingContainer.decode(_:forKey:)();
    OUTLINED_FUNCTION_141();
    uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v21 = v20;
    uint64_t v22 = v19;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v29, v30);
    swift_bridgeObjectRetain();
    outlined consume of Data?(v29, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data?(v29, v30);
    swift_bridgeObjectRelease();
    *(void *)uint64_t v5 = v27;
    *(void *)(v5 + 8) = v12;
    *(void *)(v5 + 16) = v26;
    *(void *)(v5 + 24) = v28;
    *(void *)(v5 + 32) = v25;
    *(void *)(v5 + 40) = v15;
    *(void *)(v5 + 48) = v23;
    *(void *)(v5 + 56) = v24;
    *(void *)(v5 + 64) = v29;
    *(void *)(v5 + 72) = v30;
    *(unsigned char *)(v5 + 80) = v31 & 1;
    *(void *)(v5 + 88) = v22;
    *(void *)(v5 + 96) = v21;
  }
  OUTLINED_FUNCTION_9_3();
}

uint64_t protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance WorkflowDataModels.ConfirmActionModel@<X0>(uint64_t a1@<X8>)
{
  memcpy(__dst, v1, sizeof(__dst));
  return WorkflowDataModels.ConfirmActionModel.asSnippetPluginModel()(a1);
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.ConfirmActionModel(void *a1@<X8>)
{
  WorkflowDataModels.ConfirmActionModel.init(from:)();
  if (!v1) {
    memcpy(a1, __src, 0x68uLL);
  }
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.ConfirmActionModel()
{
  memcpy(__dst, v0, sizeof(__dst));
  WorkflowDataModels.ConfirmActionModel.encode(to:)();
}

uint64_t WorkflowDataModels.DisambiguateItemsModel.asSnippetPluginModel()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return WorkflowDataModels.DisambiguateItemsModel.asSnippetPluginModel()(a1, a2, a3, a4);
}

{
  uint64_t vars8;

  *a4 = a1;
  a4[1] = a2;
  a4[2] = a3;
  type metadata accessor for WorkflowDataModels(0);
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t WorkflowDataModels.DisambiguateItemsModel.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x736D657469;
  }
  else {
    return 0x74706D6F7270;
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys()
{
  return WorkflowDataModels.DisambiguateItemsModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.DisambiguateItemsModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.DisambiguateItemsModel.encode(to:)()
{
}

{
  uint64_t v0;
  void (*v1)(void);
  void (*v2)(void);
  void *v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  void (*v7)(void);

  OUTLINED_FUNCTION_10_2();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(v5);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_5();
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  v2();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v0)
  {
    OUTLINED_FUNCTION_67();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [WorkflowDataModels.DisambiguationItemModel]);
    lazy protocol witness table accessor for type [WorkflowDataModels.DisambiguationItemModel] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [WorkflowDataModels.DisambiguationItemModel] and conformance <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  OUTLINED_FUNCTION_73();
  v7();
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_9_3();
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateItemsModel.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for WorkflowDataModels.DisambiguationItemModel(uint64_t a1)
{
  return type metadata accessor for WorkflowDataModels(a1, (uint64_t *)&type metadata singleton initialization cache for WorkflowDataModels.DisambiguationItemModel);
}

uint64_t type metadata accessor for WorkflowDataModels(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void WorkflowDataModels.DisambiguateItemsModel.init(from:)()
{
}

{
  uint64_t v0;
  void (*v1)(void);
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void (*v7)(void);

  OUTLINED_FUNCTION_10_2();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(v5);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_54();
  v2();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1(v4);
  }
  else
  {
    OUTLINED_FUNCTION_127();
    OUTLINED_FUNCTION_86();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [WorkflowDataModels.DisambiguationItemModel]);
    OUTLINED_FUNCTION_67();
    lazy protocol witness table accessor for type [WorkflowDataModels.DisambiguationItemModel] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [WorkflowDataModels.DisambiguationItemModel] and conformance <A> [A]);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    OUTLINED_FUNCTION_20();
    v7();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_59();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_9_3();
}

unint64_t lazy protocol witness table accessor for type [WorkflowDataModels.DisambiguationItemModel] and conformance <A> [A](uint64_t a1)
{
  unint64_t result = OUTLINED_FUNCTION_97(a1);
  if (!result)
  {
    OUTLINED_FUNCTION_81();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [WorkflowDataModels.DisambiguationItemModel]);
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction(v2);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, v1);
  }
  return result;
}

uint64_t protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance WorkflowDataModels.DisambiguateItemsModel@<X0>(void *a1@<X8>)
{
  return WorkflowDataModels.DisambiguateItemsModel.asSnippetPluginModel()(*v1, v1[1], v1[2], a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.DisambiguateItemsModel@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.DisambiguateItemsModel((uint64_t (*)(void))WorkflowDataModels.DisambiguateItemsModel.init(from:), a1);
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.DisambiguateItemsModel()
{
}

uint64_t WorkflowDataModels.DisambiguateSmartPromptItemsModel.asSnippetPluginModel()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return WorkflowDataModels.DisambiguateItemsModel.asSnippetPluginModel()(a1, a2, a3, a4);
}

uint64_t WorkflowDataModels.DisambiguateItemsModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x74706D6F7270 && a2 == 0xE600000000000000;
  if (v3 || (OUTLINED_FUNCTION_57() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736D657469 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = OUTLINED_FUNCTION_57();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.DisambiguateSmartPromptItemsModel.encode(to:)()
{
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys);
  }
  return result;
}

void WorkflowDataModels.DisambiguateSmartPromptItemsModel.init(from:)()
{
}

uint64_t WorkflowDataModels.InvocationCommand.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000018 && a2 == 0x800000000004EAE0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x800000000004EB00 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7165527472617473 && a2 == 0xEC00000074736575)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t WorkflowDataModels.InvocationCommand.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0xD000000000000018;
  if (a1)
  {
    if (a1 == 1) {
      return 0xD00000000000001ALL;
    }
    else {
      return 0x7165527472617473;
    }
  }
  return result;
}

uint64_t WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v3 || (OUTLINED_FUNCTION_57() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64616F6C796170 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = OUTLINED_FUNCTION_57();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x64616F6C796170;
  }
  else {
    return 25705;
  }
}

uint64_t WorkflowDataModels.InvocationCommand.StartRequestCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x636E617265747475 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t WorkflowDataModels.InvocationCommand.StartRequestCodingKeys.stringValue.getter()
{
  return 0x636E617265747475;
}

uint64_t protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel@<X0>(void *a1@<X8>)
{
  return WorkflowDataModels.DisambiguateSmartPromptItemsModel.asSnippetPluginModel()(*v1, v1[1], v1[2], a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel@<X0>(uint64_t *a1@<X8>)
{
  return protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.DisambiguateItemsModel((uint64_t (*)(void))WorkflowDataModels.DisambiguateSmartPromptItemsModel.init(from:), a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.DisambiguateItemsModel@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel()
{
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.InvocationCommand.CodingKeys()
{
  return WorkflowDataModels.InvocationCommand.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.InvocationCommand.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.InvocationCommand.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.InvocationCommand.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.InvocationCommand.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys()
{
  return WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.InvocationCommand.StartRequestCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys(uint64_t a1)
{
  unint64_t started = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys();

  return CodingKey.description.getter(a1, started);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys(uint64_t a1)
{
  unint64_t started = lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys();

  return CodingKey.debugDescription.getter(a1, started);
}

void WorkflowDataModels.InvocationCommand.encode(to:)()
{
  OUTLINED_FUNCTION_10_2();
  char v18 = v2;
  char v4 = v3;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.InvocationCommand.StartRequestCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v15 = v5;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_36();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v17 = v7;
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_27();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_95();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.InvocationCommand.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_5();
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v18)
  {
    if (v18 == 1)
    {
      lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys();
      OUTLINED_FUNCTION_98();
      uint64_t v10 = v17;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
        lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
        OUTLINED_FUNCTION_140();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
      }
      uint64_t v11 = OUTLINED_FUNCTION_108();
    }
    else
    {
      lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys();
      OUTLINED_FUNCTION_98();
      uint64_t v10 = v16;
      KeyedEncodingContainer.encode(_:forKey:)();
      uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      uint64_t v11 = v1;
    }
    v12(v11, v10);
  }
  else
  {
    lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys();
    OUTLINED_FUNCTION_98();
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
      lazy protocol witness table accessor for type [String : Data] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : Data] and conformance <> [A : B]);
      OUTLINED_FUNCTION_140();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }
    OUTLINED_FUNCTION_73();
    v13();
  }
  OUTLINED_FUNCTION_7_0();
  v14();
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_9_3();
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys);
  }
  return result;
}

void WorkflowDataModels.InvocationCommand.init(from:)()
{
  OUTLINED_FUNCTION_10_2();
  char v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.InvocationCommand.StartRequestCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_1_7();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_8();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.InvocationCommand.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_36();
  uint64_t v28 = (uint64_t)v3;
  OUTLINED_FUNCTION_145(v3);
  lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.CodingKeys and conformance WorkflowDataModels.InvocationCommand.CodingKeys();
  OUTLINED_FUNCTION_146();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v0)
  {
    uint64_t v29 = v1;
    uint64_t v11 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12
      && (int v13 = *(unsigned __int8 *)(v11 + 32),
          specialized ArraySlice.subscript.getter(1, v12, v11, v11 + 32, 0, (2 * v12) | 1),
          uint64_t v15 = v14,
          unint64_t v17 = v16,
          swift_bridgeObjectRelease(),
          v15 == v17 >> 1))
    {
      if (v13)
      {
        if (v13 == 1)
        {
          lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys();
          OUTLINED_FUNCTION_96();
          KeyedDecodingContainer.decode(_:forKey:)();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
          lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
          OUTLINED_FUNCTION_71();
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v23 = OUTLINED_FUNCTION_85();
          v24(v23);
        }
        else
        {
          lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.StartRequestCodingKeys and conformance WorkflowDataModels.InvocationCommand.StartRequestCodingKeys();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          KeyedDecodingContainer.decode(_:forKey:)();
          OUTLINED_FUNCTION_123();
          v22();
        }
        swift_unknownObjectRelease();
        OUTLINED_FUNCTION_18_0();
        v25();
      }
      else
      {
        lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys and conformance WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys();
        OUTLINED_FUNCTION_96();
        KeyedDecodingContainer.decode(_:forKey:)();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
        lazy protocol witness table accessor for type [String : Data] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : Data] and conformance <> [A : B]);
        OUTLINED_FUNCTION_71();
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        OUTLINED_FUNCTION_18_0();
        v26();
        swift_unknownObjectRelease();
        OUTLINED_FUNCTION_7_0();
        v27();
      }
    }
    else
    {
      type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v19 = v18;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v19 = &type metadata for WorkflowDataModels.InvocationCommand;
      KeyedDecodingContainer.codingPath.getter();
      OUTLINED_FUNCTION_91();
      OUTLINED_FUNCTION_14_2();
      uint64_t v20 = OUTLINED_FUNCTION_143();
      v21(v20);
      swift_willThrow();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v29, v7);
    }
  }
  __swift_destroy_boxed_opaque_existential_1(v28);
  OUTLINED_FUNCTION_9_3();
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.InvocationCommand(uint64_t a1@<X8>)
{
  WorkflowDataModels.InvocationCommand.init(from:)();
  if (!v1)
  {
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v6;
  }
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.InvocationCommand()
{
}

uint64_t WorkflowDataModels.DisambiguationItemModel.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of (<<opaque return type of View.buttonStyle<A>(_:)>>.0)?(v1 + OBJC_IVAR____TtCO16SiriLinkUIPlugin18WorkflowDataModels23DisambiguationItemModel_thumbnail, a1, &demangling cache variable for type metadata for VisualProperty?);
}

uint64_t WorkflowDataModels.DisambiguationItemModel.invocationCommand.getter()
{
  uint64_t v0 = OUTLINED_FUNCTION_135();
  outlined copy of WorkflowDataModels.InvocationCommand(v0, v1, v2, v3);
  return OUTLINED_FUNCTION_135();
}

uint64_t WorkflowDataModels.DisambiguationItemModel.__allocating_init(title:subtitle:thumbnail:invocationCommand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v17 = swift_allocObject();
  WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return v17;
}

void *WorkflowDataModels.DisambiguationItemModel.init(title:subtitle:thumbnail:invocationCommand:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  outlined init with take of Data?(a5, (uint64_t)v9 + OBJC_IVAR____TtCO16SiriLinkUIPlugin18WorkflowDataModels23DisambiguationItemModel_thumbnail, &demangling cache variable for type metadata for VisualProperty?);
  int v13 = (char *)v9 + OBJC_IVAR____TtCO16SiriLinkUIPlugin18WorkflowDataModels23DisambiguationItemModel_invocationCommand;
  *(void *)int v13 = a6;
  *((void *)v13 + 1) = a7;
  *((void *)v13 + 2) = a8;
  v13[24] = a9;
  return v9;
}

uint64_t WorkflowDataModels.DisambiguationItemModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x656C746974 && a2 == 0xE500000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x656C746974627573 && a2 == 0xE800000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x69616E626D756874 && a2 == 0xE90000000000006CLL;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000011 && a2 == 0x800000000004EA40)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v8) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

unint64_t WorkflowDataModels.DisambiguationItemModel.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C746974627573;
      break;
    case 2:
      unint64_t result = 0x69616E626D756874;
      break;
    case 3:
      return result;
    default:
      unint64_t result = 0x656C746974;
      break;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys()
{
  return WorkflowDataModels.DisambiguationItemModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.DisambiguationItemModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t WorkflowDataModels.DisambiguationItemModel.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s9SnippetUI21StandardActionHandlerVSgWOhTm_0(v0 + OBJC_IVAR____TtCO16SiriLinkUIPlugin18WorkflowDataModels23DisambiguationItemModel_thumbnail, &demangling cache variable for type metadata for VisualProperty?);
  outlined consume of WorkflowDataModels.InvocationCommand(*(void *)(v0 + OBJC_IVAR____TtCO16SiriLinkUIPlugin18WorkflowDataModels23DisambiguationItemModel_invocationCommand), *(void *)(v0+ OBJC_IVAR____TtCO16SiriLinkUIPlugin18WorkflowDataModels23DisambiguationItemModel_invocationCommand+ 8), *(void *)(v0+ OBJC_IVAR____TtCO16SiriLinkUIPlugin18WorkflowDataModels23DisambiguationItemModel_invocationCommand+ 16), *(unsigned char *)(v0+ OBJC_IVAR____TtCO16SiriLinkUIPlugin18WorkflowDataModels23DisambiguationItemModel_invocationCommand+ 24));
  return v0;
}

uint64_t WorkflowDataModels.DisambiguationItemModel.__deallocating_deinit()
{
  WorkflowDataModels.DisambiguationItemModel.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

void WorkflowDataModels.DisambiguationItemModel.encode(to:)()
{
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_75();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.DisambiguationItemModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_7_4();
  lazy protocol witness table accessor for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys();
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_31();
  if (!v0)
  {
    OUTLINED_FUNCTION_35(1);
    type metadata accessor for VisualProperty();
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type VisualProperty and conformance VisualProperty);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  uint64_t v2 = OUTLINED_FUNCTION_8_3();
  v3(v2);
  OUTLINED_FUNCTION_44();
}

uint64_t WorkflowDataModels.DisambiguationItemModel.__allocating_init(from:)()
{
  uint64_t v0 = swift_allocObject();
  WorkflowDataModels.DisambiguationItemModel.init(from:)();
  return v0;
}

void WorkflowDataModels.DisambiguationItemModel.init(from:)()
{
  OUTLINED_FUNCTION_10_2();
  BOOL v3 = v0;
  uint64_t v5 = v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  uint64_t v7 = OUTLINED_FUNCTION_9(v6);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.DisambiguationItemModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_21();
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  lazy protocol witness table accessor for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    type metadata accessor for WorkflowDataModels.DisambiguationItemModel(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    v3[2] = KeyedDecodingContainer.decode(_:forKey:)();
    v3[3] = v9;
    v3[4] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v3[5] = v10;
    type metadata accessor for VisualProperty();
    LOBYTE(v14) = 2;
    lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type VisualProperty and conformance VisualProperty);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined init with take of Data?(v2, (uint64_t)v3 + OBJC_IVAR____TtCO16SiriLinkUIPlugin18WorkflowDataModels23DisambiguationItemModel_thumbnail, &demangling cache variable for type metadata for VisualProperty?);
    lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand();
    OUTLINED_FUNCTION_131();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v11 = OUTLINED_FUNCTION_16_1();
    v12(v11);
    int v13 = (char *)v3
        + OBJC_IVAR____TtCO16SiriLinkUIPlugin18WorkflowDataModels23DisambiguationItemModel_invocationCommand;
    *(_OWORD *)int v13 = v14;
    *((void *)v13 + 2) = v15;
    v13[24] = v16;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_9_3();
}

uint64_t protocol witness for Identifiable.id.getter in conformance WorkflowDataModels.DisambiguationItemModel@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for WorkflowDataModels.DisambiguationItemModel(0);
  uint64_t result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.DisambiguationItemModel@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 128))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.DisambiguationItemModel()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t WorkflowDataModels.LinkActionModel.archivedViewData.getter()
{
  outlined copy of Data?(*(void *)(v0 + 48), *(void *)(v0 + 56));
  return OUTLINED_FUNCTION_4_2();
}

uint64_t WorkflowDataModels.LinkActionModel.asSnippetPluginModel()@<X0>(_OWORD *a1@<X8>)
{
  return WorkflowDataModels.ShowAlertModel.asSnippetPluginModel()((uint64_t (*)(_OWORD *))outlined retain of WorkflowDataModels.LinkActionModel, a1);
}

uint64_t WorkflowDataModels.ShowAlertModel.asSnippetPluginModel()@<X0>(uint64_t (*a1)(_OWORD *)@<X1>, _OWORD *a2@<X8>)
{
  long long v3 = v2[1];
  *a2 = *v2;
  a2[1] = v3;
  long long v4 = v2[3];
  a2[2] = v2[2];
  a2[3] = v4;
  type metadata accessor for WorkflowDataModels(0);
  swift_storeEnumTagMultiPayload();

  return a1(v2);
}

uint64_t WorkflowDataModels.LinkActionModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6C646E7542707061 && a2 == 0xEB00000000644965;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6C70736944707061 && a2 == 0xEE00656D614E7961;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x74706D6F7270 && a2 == 0xE600000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000010 && a2 == 0x800000000004EAC0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v8) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t WorkflowDataModels.LinkActionModel.CodingKeys.init(intValue:)()
{
  return 4;
}

unint64_t WorkflowDataModels.LinkActionModel.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6C70736944707061;
      break;
    case 2:
      unint64_t result = 0x74706D6F7270;
      break;
    case 3:
      return result;
    default:
      unint64_t result = 0x6C646E7542707061;
      break;
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance WorkflowDataModels.LinkActionModel.CodingKeys()
{
  return ArchivedViewModel.CodingKeys.hashValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.LinkActionModel.CodingKeys()
{
  return WorkflowDataModels.LinkActionModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.LinkActionModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.LinkActionModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance WorkflowDataModels.LinkActionModel.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = WorkflowDataModels.LinkActionModel.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.LinkActionModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.LinkActionModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.LinkActionModel.encode(to:)()
{
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_75();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.LinkActionModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_7_4();
  lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys();
  OUTLINED_FUNCTION_12_2();
  char v5 = 0;
  OUTLINED_FUNCTION_31();
  if (!v0)
  {
    OUTLINED_FUNCTION_35(1);
    OUTLINED_FUNCTION_35(2);
    outlined init with take of Data?(v1 + 48, (uint64_t)v6, &demangling cache variable for type metadata for Data?);
    outlined init with take of Data?((uint64_t)v6, (uint64_t)&v5, &demangling cache variable for type metadata for Data?);
    lazy protocol witness table accessor for type Data and conformance Data();
    OUTLINED_FUNCTION_101();
  }
  uint64_t v3 = OUTLINED_FUNCTION_8_3();
  v4(v3);
  OUTLINED_FUNCTION_44();
}

void WorkflowDataModels.LinkActionModel.init(from:)()
{
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_87();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.LinkActionModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_60();
  lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1(v0);
  }
  else
  {
    OUTLINED_FUNCTION_142();
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v14) = 1;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_142();
    uint64_t v4 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v13 = v5;
    OUTLINED_FUNCTION_80(v4);
    uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v7 = v6;
    lazy protocol witness table accessor for type Data and conformance Data();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_20();
    v8();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v14, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data?(v14, v15);
    *uint64_t v2 = v12;
    v2[1] = v11;
    v2[2] = v10;
    v2[3] = v13;
    v2[4] = v9;
    v2[5] = v7;
    v2[6] = v14;
    v2[7] = v15;
  }
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_9_3();
}

double protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.LinkActionModel@<D0>(_OWORD *a1@<X8>)
{
  WorkflowDataModels.LinkActionModel.init(from:)();
  if (!v1)
  {
    *a1 = v4;
    a1[1] = v5;
    double result = *(double *)&v6;
    a1[2] = v6;
    a1[3] = v7;
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.LinkActionModel()
{
}

uint64_t WorkflowDataModels.AutoShortcutFirstRunModel.confirmLabel.getter()
{
  return OUTLINED_FUNCTION_4_2();
}

uint64_t WorkflowDataModels.LinkConfirmationModel.isDestructive.getter()
{
  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t WorkflowDataModels.LinkConfirmationModel.asSnippetPluginModel()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_102(a1);
  memcpy(v2, v3, 0x61uLL);
  OUTLINED_FUNCTION_55();
  swift_storeEnumTagMultiPayload();

  return outlined retain of LinkConfirmationView(v1);
}

uint64_t WorkflowDataModels.LinkConfirmationModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x65646F4D6B6E696CLL && a2 == 0xE90000000000006CLL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x4C6D7269666E6F63 && a2 == 0xEC0000006C656261;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x614C6C65636E6163 && a2 == 0xEB000000006C6562;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x7572747365447369 && a2 == 0xED00006576697463)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t WorkflowDataModels.LinkConfirmationModel.CodingKeys.stringValue.getter(char a1)
{
  return *(void *)&aLinkmodeconfir[8 * a1];
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys()
{
  return WorkflowDataModels.LinkConfirmationModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.LinkConfirmationModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.LinkConfirmationModel.encode(to:)()
{
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_30();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.LinkConfirmationModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v1);
  OUTLINED_FUNCTION_7_4();
  lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys();
  OUTLINED_FUNCTION_12_2();
  lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel();
  OUTLINED_FUNCTION_52();
  if (!v0)
  {
    OUTLINED_FUNCTION_15_1();
    OUTLINED_FUNCTION_15_1();
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  uint64_t v2 = OUTLINED_FUNCTION_8_3();
  v3(v2);
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_44();
}

void WorkflowDataModels.LinkConfirmationModel.init(from:)()
{
  OUTLINED_FUNCTION_10_2();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.LinkConfirmationModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_145(v2);
  lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  }
  else
  {
    lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v22, v23);
    OUTLINED_FUNCTION_86();
    uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v15 = v7;
    if (v17)
    {
      OUTLINED_FUNCTION_20();
      v8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data?(v22, v23);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data?(v22, v23);
    }
    else
    {
      uint64_t v14 = v6;
      swift_bridgeObjectRetain();
      uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v10 = v9;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_86();
      char v11 = KeyedDecodingContainer.decode(_:forKey:)();
      OUTLINED_FUNCTION_20();
      v12();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data?(v22, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data?(v22, v23);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data?(v22, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)uint64_t v4 = v16;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = v18;
      *(void *)(v4 + 24) = v19;
      *(void *)(v4 + 32) = v20;
      *(void *)(v4 + 40) = v21;
      *(void *)(v4 + 48) = v22;
      *(void *)(v4 + 56) = v23;
      *(void *)(v4 + 64) = v14;
      *(void *)(v4 + 72) = v15;
      *(void *)(v4 + 80) = v13;
      *(void *)(v4 + 88) = v10;
      *(unsigned char *)(v4 + 96) = v11 & 1;
    }
  }
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_9_3();
}

__n128 WorkflowDataModels.LinkConfirmationModel.init(linkModel:confirmLabel:cancelLabel:isDestructive:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a7 = *(void *)a1;
  *(void *)(a7 + 8) = v7;
  long long v8 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a7 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a7 + 32) = v8;
  __n128 result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a7 + 48) = result;
  *(void *)(a7 + 64) = a2;
  *(void *)(a7 + 72) = a3;
  *(void *)(a7 + 80) = a4;
  *(void *)(a7 + 88) = a5;
  *(unsigned char *)(a7 + 96) = a6;
  return result;
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.LinkConfirmationModel(void *a1@<X8>)
{
  WorkflowDataModels.LinkConfirmationModel.init(from:)();
  if (!v1) {
    memcpy(a1, __src, 0x61uLL);
  }
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.LinkConfirmationModel()
{
}

uint64_t WorkflowDataModels.AutoShortcutFirstRunModel.cancelLabel.getter()
{
  return OUTLINED_FUNCTION_4_2();
}

uint64_t WorkflowDataModels.AutoShortcutFirstRunModel.asSnippetPluginModel()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_102(a1);
  memcpy(v2, v3, 0x70uLL);
  OUTLINED_FUNCTION_55();
  swift_storeEnumTagMultiPayload();

  return outlined retain of WorkflowDataModels.AutoShortcutFirstRunModel(v1);
}

uint64_t WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x65646F4D77656976 && a2 == 0xE90000000000006CLL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x4C6D7269666E6F63 && a2 == 0xEC0000006C656261;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x614C6C65636E6163 && a2 == 0xEB000000006C6562)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys.stringValue.getter(char a1)
{
  return *(void *)&aViewmodeconfir[8 * a1];
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys()
{
  return WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys(uint64_t a1)
{
  unint64_t Run = lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys();

  return CodingKey.description.getter(a1, Run);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys(uint64_t a1)
{
  unint64_t Run = lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, Run);
}

void WorkflowDataModels.AutoShortcutFirstRunModel.encode(to:)()
{
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_30();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v2);
  OUTLINED_FUNCTION_7_4();
  lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys();
  OUTLINED_FUNCTION_12_2();
  memcpy(v5, v1, sizeof(v5));
  lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
  OUTLINED_FUNCTION_52();
  if (!v0)
  {
    LOBYTE(v5[0]) = 1;
    OUTLINED_FUNCTION_15_1();
    LOBYTE(v5[0]) = 2;
    OUTLINED_FUNCTION_15_1();
  }
  uint64_t v3 = OUTLINED_FUNCTION_8_3();
  v4(v3);
  OUTLINED_FUNCTION_51();
  OUTLINED_FUNCTION_44();
}

void WorkflowDataModels.AutoShortcutFirstRunModel.init(from:)()
{
  OUTLINED_FUNCTION_10_2();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_54();
  lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    __swift_destroy_boxed_opaque_existential_1(v3);
  }
  else
  {
    lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
    OUTLINED_FUNCTION_131();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v13 = v8;
    uint64_t v12 = v7;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    OUTLINED_FUNCTION_110();
    uint64_t v11 = v9;
    OUTLINED_FUNCTION_19();
    v10();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_59();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *uint64_t v5 = v14;
    v5[1] = v15;
    v5[2] = v16;
    v5[3] = v17;
    v5[4] = v18;
    v5[5] = v19;
    v5[6] = v20;
    v5[7] = v21;
    v5[8] = v22;
    v5[9] = v23;
    void v5[10] = v12;
    v5[11] = v13;
    v5[12] = v11;
    v5[13] = v1;
  }
  OUTLINED_FUNCTION_56();
  OUTLINED_FUNCTION_9_3();
}

void __swiftcall WorkflowDataModels.AutoShortcutFirstRunModel.init(viewModel:confirmLabel:cancelLabel:)(SiriLinkUIPlugin::WorkflowDataModels::AutoShortcutFirstRunModel *__return_ptr retstr, SiriLinkUIPlugin::AutoShortcutAppPhrasesViewModel *viewModel, Swift::String confirmLabel, Swift::String cancelLabel)
{
  long long v4 = *(_OWORD *)&viewModel->bundleId._object;
  object = viewModel->prompt._object;
  retstr->viewModel.shortcutPhrases._rawValue = viewModel->shortcutPhrases._rawValue;
  *(_OWORD *)&retstr->viewModel.maxPhrases = *(_OWORD *)&viewModel->maxPhrases;
  *(_OWORD *)&retstr->viewModel.bundleId._object = v4;
  retstr->viewModel.prompt._object = object;
  Swift::String_optional footnoteLabel = viewModel->footnoteLabel;
  retstr->viewModel.moreShortcutsLabel = viewModel->moreShortcutsLabel;
  retstr->viewModel.Swift::String_optional footnoteLabel = footnoteLabel;
  retstr->Swift::String confirmLabel = confirmLabel;
  retstr->cancelLabel = cancelLabel;
}

uint64_t protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance WorkflowDataModels.AutoShortcutFirstRunModel@<X0>(uint64_t a1@<X8>)
{
  memcpy(v4, v1, sizeof(v4));
  return WorkflowDataModels.AutoShortcutFirstRunModel.asSnippetPluginModel()(a1);
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels.AutoShortcutFirstRunModel(void *a1@<X8>)
{
  WorkflowDataModels.AutoShortcutFirstRunModel.init(from:)();
  if (!v1) {
    memcpy(a1, v3, 0x70uLL);
  }
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels.AutoShortcutFirstRunModel()
{
}

uint64_t static WorkflowDataModels.getThumbnail(shortcutName:defaultAppIdentifier:)()
{
  OUTLINED_FUNCTION_3_4();
  v0[7] = v1;
  v0[8] = v2;
  v0[5] = v3;
  v0[6] = v4;
  v0[4] = v5;
  uint64_t v6 = type metadata accessor for ImageElement.ImageStyle();
  v0[9] = v6;
  OUTLINED_FUNCTION_1_6(v6);
  v0[10] = v7;
  v0[11] = OUTLINED_FUNCTION_4_3();
  uint64_t v8 = type metadata accessor for ImageElement();
  v0[12] = v8;
  OUTLINED_FUNCTION_1_6(v8);
  v0[13] = v9;
  v0[14] = OUTLINED_FUNCTION_4_3();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for INShortcut?);
  OUTLINED_FUNCTION_9(v10);
  v0[15] = swift_task_alloc();
  v0[16] = swift_task_alloc();
  OUTLINED_FUNCTION_6_3();
  return _swift_task_switch(v11, v12, v13);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  void (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  void (*v20)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (!v0[6])
  {
    OUTLINED_FUNCTION_50();
    uint64_t v6 = OUTLINED_FUNCTION_63();
    v7(v6);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_ProtoIdiom>);
    type metadata accessor for _ProtoIdiom();
    OUTLINED_FUNCTION_0_1();
    uint64_t v8 = OUTLINED_FUNCTION_62();
    *(_OWORD *)(v8 + 16) = xmmword_48DD0;
    OUTLINED_FUNCTION_106();
    v9();
    uint64_t v10 = specialized Set.init(_nonEmptyArrayLiteral:)(v8);
    OUTLINED_FUNCTION_103(v10, v11, v12, v13, v14, v15, v16, v17, v23, v24, v25);
    swift_bridgeObjectRelease();
    uint64_t v18 = OUTLINED_FUNCTION_105();
    v19(v18);
    ImageElement.convertToVisualProperty()();
    OUTLINED_FUNCTION_18_0();
    v20();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_78();
    __asm { BRAA            X1, X16 }
  }
  type metadata accessor for VoiceShortcutClientWrapper();
  v0[17] = swift_initStackObject();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[18] = v1;
  const void *v1 = v0;
  v1[1] = static WorkflowDataModels.getThumbnail(shortcutName:defaultAppIdentifier:);
  OUTLINED_FUNCTION_78();
  return VoiceShortcutClientWrapper.getVoiceShortcut(voiceCommandName:)(v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_0_3();
  *(void *)(v1 + 152) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_3();
  return _swift_task_switch(v2, v3, v4);
}

void static WorkflowDataModels.getThumbnail(shortcutName:defaultAppIdentifier:)()
{
  uint64_t v2 = *(void (***)(void))(v1 + 152);
  if (v2)
  {
    id v3 = [*(id *)(v1 + 152) shortcut];
    if (v3)
    {
      uint64_t v4 = v3;
      static INShortcut._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v0 = 0;
    }
    else
    {
      uint64_t v0 = &dword_0 + 1;
    }
    uint64_t v6 = *(void *)(v1 + 120);
    uint64_t v5 = *(void *)(v1 + 128);
    uint64_t v7 = type metadata accessor for INShortcut();
    __swift_storeEnumTagSinglePayload(v6, (uint64_t)v0, 1, v7);
    outlined init with take of Data?(v6, v5, &demangling cache variable for type metadata for INShortcut?);
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v5, 1, v7);
    uint64_t v9 = *(void *)(v1 + 128);
    if (EnumTagSinglePayload == 1)
    {

      _s9SnippetUI21StandardActionHandlerVSgWOhTm_0(v9, &demangling cache variable for type metadata for INShortcut?);
    }
    else
    {
      uint64_t v0 = (void *)INShortcut.intent.getter();
      OUTLINED_FUNCTION_14_2();
      OUTLINED_FUNCTION_7_0();
      v10();
      if (v0)
      {
        id v11 = [v0 _keyImage];

        uint64_t v12 = outlined bridged method (ob) of @objc INImage._imageData.getter(v11);
        if (v13 >> 60 != 15)
        {
          uint64_t v30 = v12;
          unint64_t v31 = v13;
          static WorkflowDataModels.getThumbnail(imageData:)();
          outlined consume of Data?(v30, v31);

LABEL_11:
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          OUTLINED_FUNCTION_78();
          __asm { BRAA            X1, X16 }
        }
      }
    }
  }
  OUTLINED_FUNCTION_50();
  uint64_t v14 = OUTLINED_FUNCTION_63();
  v15(v14);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_ProtoIdiom>);
  type metadata accessor for _ProtoIdiom();
  OUTLINED_FUNCTION_0_1();
  uint64_t v16 = OUTLINED_FUNCTION_62();
  *(_OWORD *)(v16 + 16) = xmmword_48DD0;
  OUTLINED_FUNCTION_106();
  v17();
  uint64_t v18 = specialized Set.init(_nonEmptyArrayLiteral:)(v16);
  OUTLINED_FUNCTION_103(v18, v19, v20, v21, v22, v23, v24, v25, v32, v33, v34);
  swift_bridgeObjectRelease();
  uint64_t v26 = OUTLINED_FUNCTION_105();
  v27(v26);
  ImageElement.convertToVisualProperty()();
  ((void (**)(void *))v2)[1](v0);
  goto LABEL_11;
}

uint64_t static WorkflowDataModels.getThumbnail(imageData:)()
{
  uint64_t v3 = type metadata accessor for ImageElement.ImageStyle();
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_47();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageElement.AspectRatio?);
  uint64_t v8 = OUTLINED_FUNCTION_9(v7);
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_32();
  uint64_t v20 = type metadata accessor for ImageElement();
  OUTLINED_FUNCTION_0_1();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  OUTLINED_FUNCTION_69();
  uint64_t v12 = type metadata accessor for ImageElement.AspectRatio();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v12);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v0, enum case for ImageElement.ImageStyle.default(_:), v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_ProtoIdiom>);
  uint64_t v13 = type metadata accessor for _ProtoIdiom();
  OUTLINED_FUNCTION_0_1();
  uint64_t v15 = v14;
  unint64_t v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_48DD0;
  (*(void (**)(unint64_t, void, uint64_t))(v15 + 104))(v17 + v16, enum case for _ProtoIdiom.default(_:), v13);
  specialized Set.init(_nonEmptyArrayLiteral:)(v17);
  static ImageElement.pngData(_:darkModeData:imageStyle:aspectRatio:fixedWidth:fixedHeight:idioms:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_18_0();
  v18();
  _s9SnippetUI21StandardActionHandlerVSgWOhTm_0(v1, &demangling cache variable for type metadata for ImageElement.AspectRatio?);
  ImageElement.convertToVisualProperty()();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v2, v20);
}

uint64_t static WorkflowDataModels.modelForShowAlert(deviceState:shortcutName:confirmLabel:cancelLabel:title:message:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, __n128 a9, unint64_t a10)
{
  OUTLINED_FUNCTION_133(a1, a2, a3, a4, a5, a6, a7, a8, a10, a9);
  OUTLINED_FUNCTION_6_3();
  return OUTLINED_FUNCTION_111(v10, v11, v12);
}

uint64_t static WorkflowDataModels.modelForShowAlert(deviceState:shortcutName:confirmLabel:cancelLabel:title:message:)()
{
  if (OUTLINED_FUNCTION_129(*(void **)(v0 + 24)))
  {
    uint64_t v2 = *(void *)(v0 + 64);
    uint64_t v1 = *(void *)(v0 + 72);
    long long v12 = *(_OWORD *)(v0 + 32);
    long long v14 = *(_OWORD *)(v0 + 48);
    uint64_t v3 = *(uint64_t **)(v0 + 16);
    v3[3] = (uint64_t)&type metadata for WorkflowDataModels.WatchModel;
    v3[4] = (uint64_t)&protocol witness table for WorkflowDataModels.WatchModel;
    uint64_t v4 = swift_allocObject();
    *uint64_t v3 = v4;
    *(_OWORD *)(v4 + 16) = v12;
    *(_OWORD *)(v4 + 32) = v14;
    *(void *)(v4 + 48) = v2;
    *(void *)(v4 + 56) = v1;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v8 = *(void *)(v0 + 80);
    long long v13 = *(_OWORD *)(v0 + 48);
    long long v15 = *(_OWORD *)(v0 + 64);
    uint64_t v9 = *(uint64_t **)(v0 + 16);
    v9[3] = (uint64_t)&type metadata for WorkflowDataModels.ShowAlertModel;
    v9[4] = (uint64_t)&protocol witness table for WorkflowDataModels.ShowAlertModel;
    uint64_t v10 = swift_allocObject();
    *uint64_t v9 = v10;
    *(_OWORD *)(v10 + 16) = v13;
    *(_OWORD *)(v10 + 32) = v15;
    *(void *)(v10 + 48) = v8;
    *(void *)(v10 + 56) = v6;
    *(void *)(v10 + 64) = v7;
    *(void *)(v10 + 72) = v5;
    swift_bridgeObjectRetain();
  }
  unint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v16();
}

uint64_t static WorkflowDataModels.modelForCustomIntentHandled(app:intent:intentResponse:doneButtonCommand:deviceState:shortcutName:title:image:doneButtonLabel:shouldShowDoneButton:)()
{
  OUTLINED_FUNCTION_3_4();
  *(unsigned char *)(v0 + 216) = v22;
  *(void *)(v0 + 96) = v21;
  *(_OWORD *)(v0 + 64) = v19;
  *(_OWORD *)(v0 + 80) = v20;
  *(void *)(v0 + 48) = v1;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 32) = v3;
  *(void *)(v0 + 40) = v4;
  *(void *)(v0 + 16) = v5;
  *(void *)(v0 + 24) = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
  OUTLINED_FUNCTION_9(v7);
  *(void *)(v0 + 104) = swift_task_alloc();
  *(void *)(v0 + 112) = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  OUTLINED_FUNCTION_9(v8);
  *(void *)(v0 + 120) = OUTLINED_FUNCTION_4_3();
  uint64_t v9 = type metadata accessor for CodableINInteraction();
  *(void *)(v0 + 128) = v9;
  OUTLINED_FUNCTION_1_6(v9);
  *(void *)(v0 + 136) = v10;
  *(void *)(v0 + 144) = OUTLINED_FUNCTION_4_3();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  *(void *)(v0 + 152) = v11;
  OUTLINED_FUNCTION_1_6(v11);
  *(void *)(v0 + 160) = v12;
  *(void *)(v0 + 168) = OUTLINED_FUNCTION_4_3();
  uint64_t v13 = type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  *(void *)(v0 + 176) = v13;
  OUTLINED_FUNCTION_9(v13);
  *(void *)(v0 + 184) = OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_6_3();
  return _swift_task_switch(v14, v15, v16);
}

{
  uint64_t v0;
  uint64_t *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  Class isa;
  id v15;
  objc_class *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  INIntentResponse_optional v20;

  if (OUTLINED_FUNCTION_129(*(void **)(v0 + 56)))
  {
    uint64_t v1 = *(uint64_t **)(v0 + 16);
    uint64_t v2 = [*(id *)(v0 + 32) _title];
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    v1[3] = (uint64_t)&type metadata for WorkflowDataModels.WatchModel;
    v1[4] = (uint64_t)&protocol witness table for WorkflowDataModels.WatchModel;
    uint64_t v6 = swift_allocObject();
    const void *v1 = v6;
    *(void *)(v6 + 16) = v3;
    *(void *)(v6 + 24) = v5;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 80) = 0u;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_61();
    return v7();
  }
  else
  {
    uint64_t v10 = *(void **)(v0 + 32);
    uint64_t v9 = *(void **)(v0 + 40);
    type metadata accessor for SAIntentGroupLaunchAppWithIntent(0, &lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent);
    uint64_t v11 = (void *)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)();
    *(void *)(v0 + 192) = v11;
    type metadata accessor for SAIntentGroupLaunchAppWithIntent(0, &lazy cache variable for type metadata for INInteraction);
    uint64_t v12 = v10;
    uint64_t v13 = v9;
    v20.value.super.isa = (Class)v9;
    isa = INInteraction.__allocating_init(intent:response:)((INIntent)v12, v20).super.isa;
    *(void *)(v0 + 200) = isa;
    uint64_t v15 = v11;
    CodableAceObject.init(wrappedValue:)();
    uint64_t v16 = isa;
    CodableINInteraction.init(wrappedValue:)();
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v17;
    *uint64_t v17 = v0;
    v17[1] = static WorkflowDataModels.modelForCustomIntentHandled(app:intent:intentResponse:doneButtonCommand:deviceState:shortcutName:title:image:doneButtonLabel:shouldShowDoneButton:);
    uint64_t v18 = *(void *)(v0 + 120);
    return INImage.convertToVisualProperty()(v18);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_0_3();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_3();
  return _swift_task_switch(v0, v1, v2);
}

void static WorkflowDataModels.modelForCustomIntentHandled(app:intent:intentResponse:doneButtonCommand:deviceState:shortcutName:title:image:doneButtonLabel:shouldShowDoneButton:)()
{
  uint64_t v2 = *(int **)(v0 + 176);
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v7 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v9 = *(void *)(v0 + 64);
  uint64_t v8 = *(void *)(v0 + 72);
  uint64_t v29 = *(void *)(v0 + 48);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 160) + 32))(v1, *(void *)(v0 + 168), *(void *)(v0 + 152));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v1 + v2[5], v3, v4);
  outlined init with take of Data?(v6, v1 + v2[6], &demangling cache variable for type metadata for VisualProperty?);
  uint64_t v10 = (void *)(v1 + v2[7]);
  *uint64_t v10 = v9;
  v10[1] = v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
  __swift_storeEnumTagSinglePayload(v7, 1, 1, v11);
  uint64_t v13 = *(void **)(v0 + 192);
  uint64_t v12 = *(void **)(v0 + 200);
  if (v29)
  {
    uint64_t v15 = *(void *)(v0 + 104);
    uint64_t v14 = *(void *)(v0 + 112);
    uint64_t v16 = *(void **)(v0 + 48);
    type metadata accessor for SAIntentGroupLaunchAppWithIntent(0, &lazy cache variable for type metadata for SAStartLocalRequest);
    swift_bridgeObjectRetain();
    id v17 = v16;
    CodableAceObject.init(wrappedValue:)();

    _s9SnippetUI21StandardActionHandlerVSgWOhTm_0(v14, &demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
    __swift_storeEnumTagSinglePayload(v15, 0, 1, v11);
    outlined init with take of Data?(v15, v14, &demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v18 = *(void *)(v0 + 184);
  uint64_t v19 = *(void *)(v0 + 112);
  char v20 = *(unsigned char *)(v0 + 216);
  uint64_t v22 = *(void *)(v0 + 88);
  uint64_t v21 = *(void *)(v0 + 96);
  uint64_t v23 = *(uint64_t **)(v0 + 16);
  uint64_t v24 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
  v23[3] = (uint64_t)v24;
  v23[4] = (uint64_t)&protocol witness table for WorkflowDataModels.CustomIntentHandledModel;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
  outlined init with take of WorkflowDataModels.CustomIntentModel(v18, (uint64_t)boxed_opaque_existential_1, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentModel);
  uint64_t v26 = (uint64_t *)((char *)boxed_opaque_existential_1 + v24[5]);
  *uint64_t v26 = v22;
  v26[1] = v21;
  outlined init with take of Data?(v19, (uint64_t)boxed_opaque_existential_1 + v24[6], &demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
  *((unsigned char *)boxed_opaque_existential_1 + v24[7]) = v20;
  swift_bridgeObjectRetain();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_92();
  __asm { BRAA            X1, X16 }
}

INInteraction __swiftcall INInteraction.__allocating_init(intent:response:)(INIntent intent, INIntentResponse_optional response)
{
  Class isa = response.value.super.isa;
  id v4 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithIntent:intent.super.isa response:response.value.super.isa];

  return (INInteraction)v4;
}

uint64_t static WorkflowDataModels.modelForCustomIntentConfirmation(app:intent:intentResponse:deviceState:confirmLabel:cancelLabel:title:image:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, unint64_t a10)
{
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_133(v11, v12, v13, v14, v15, v16, v17, v18, a10, a9);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  OUTLINED_FUNCTION_9(v19);
  v10[14] = OUTLINED_FUNCTION_4_3();
  uint64_t v20 = type metadata accessor for CodableINInteraction();
  v10[15] = v20;
  OUTLINED_FUNCTION_1_6(v20);
  unsigned char v10[16] = v21;
  v10[17] = OUTLINED_FUNCTION_4_3();
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  v10[18] = v22;
  OUTLINED_FUNCTION_1_6(v22);
  v10[19] = v23;
  v10[20] = OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_6_3();
  return OUTLINED_FUNCTION_111(v24, v25, v26);
}

uint64_t static WorkflowDataModels.modelForCustomIntentConfirmation(app:intent:intentResponse:deviceState:confirmLabel:cancelLabel:title:image:)()
{
  uint64_t v1 = *(void **)(v0 + 48);
  type metadata accessor for SAIntentGroupLaunchAppWithIntent(0, &lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent);
  uint64_t v2 = (void *)static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)();
  *(void *)(v0 + 168) = v2;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  if (dispatch thunk of DeviceState.isWatch.getter())
  {
    uint64_t v4 = *(void *)(v0 + 72);
    uint64_t v3 = *(void *)(v0 + 80);
    uint64_t v6 = *(void *)(v0 + 56);
    uint64_t v5 = *(void *)(v0 + 64);
    uint64_t v7 = *(uint64_t **)(v0 + 16);
    id v8 = [*(id *)(v0 + 32) _title];
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    v7[3] = (uint64_t)&type metadata for WorkflowDataModels.WatchModel;
    v7[4] = (uint64_t)&protocol witness table for WorkflowDataModels.WatchModel;
    uint64_t v12 = swift_allocObject();
    *uint64_t v7 = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();

    *(void *)(v12 + 16) = v9;
    *(void *)(v12 + 24) = v11;
    *(void *)(v12 + 32) = v6;
    *(void *)(v12 + 40) = v5;
    *(void *)(v12 + 48) = v4;
    *(void *)(v12 + 56) = v3;
    *(_OWORD *)(v12 + 64) = 0u;
    *(_OWORD *)(v12 + 80) = 0u;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_61();
    OUTLINED_FUNCTION_92();
    __asm { BRAA            X1, X16 }
  }
  unint64_t v16 = *(void **)(v0 + 32);
  unint64_t v15 = *(void **)(v0 + 40);
  type metadata accessor for SAIntentGroupLaunchAppWithIntent(0, &lazy cache variable for type metadata for INInteraction);
  id v17 = v15;
  id v18 = v16;
  v26.value.super.Class isa = (Class)v15;
  Class isa = INInteraction.__allocating_init(intent:response:)((INIntent)v18, v26).super.isa;
  *(void *)(v0 + 176) = isa;
  id v20 = v2;
  CodableAceObject.init(wrappedValue:)();
  uint64_t v21 = isa;
  CodableINInteraction.init(wrappedValue:)();
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v22;
  *uint64_t v22 = v0;
  v22[1] = static WorkflowDataModels.modelForCustomIntentConfirmation(app:intent:intentResponse:deviceState:confirmLabel:cancelLabel:title:image:);
  OUTLINED_FUNCTION_92();
  return INImage.convertToVisualProperty()(v23);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_0_3();
  swift_task_dealloc();
  OUTLINED_FUNCTION_6_3();
  return _swift_task_switch(v0, v1, v2);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  int *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t (*v16)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  uint64_t v1 = *(void **)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 128);
  id v18 = *(void *)(v0 + 120);
  uint64_t v19 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v22 = *(void *)(v0 + 88);
  uint64_t v23 = *(void *)(v0 + 72);
  id v8 = *(void *)(v0 + 64);
  id v20 = *(void *)(v0 + 112);
  uint64_t v21 = *(void *)(v0 + 56);
  uint64_t v9 = *(uint64_t **)(v0 + 16);

  uint64_t v10 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
  v9[3] = v10;
  v9[4] = (uint64_t)&protocol witness table for WorkflowDataModels.CustomIntentConfirmationModel;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 32))(boxed_opaque_existential_1, v2, v4);
  uint64_t v12 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))((char *)boxed_opaque_existential_1 + v12[5], v19, v18);
  outlined init with take of Data?(v20, (uint64_t)boxed_opaque_existential_1 + v12[6], &demangling cache variable for type metadata for VisualProperty?);
  unint64_t v13 = (uint64_t *)((char *)boxed_opaque_existential_1 + v12[7]);
  *unint64_t v13 = v22;
  v13[1] = v6;
  uint64_t v14 = (uint64_t *)((char *)boxed_opaque_existential_1 + *(int *)(v10 + 20));
  *uint64_t v14 = v21;
  v14[1] = v8;
  unint64_t v15 = (uint64_t *)((char *)boxed_opaque_existential_1 + *(int *)(v10 + 24));
  *unint64_t v15 = v23;
  v15[1] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_61();
  return v16();
}

uint64_t WorkflowDataModels.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x72656C41776F6873 && a2 == 0xED00007765695674;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x4354656C62616E65 && a2 == 0xED00007765695643;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD00000000000001CLL && a2 == 0x800000000004EB20 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (a1 == 0xD000000000000015 && a2 == 0x800000000004EB40 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else if (a1 == 0xD000000000000017 && a2 == 0x800000000004EB60 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 4;
    }
    else if (a1 == 0xD000000000000011 && a2 == 0x800000000004EB80 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 5;
    }
    else
    {
      BOOL v7 = a1 == 0x6569566863746177 && a2 == 0xE900000000000077;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 6;
      }
      else if (a1 == 0xD000000000000015 && a2 == 0x800000000004EBA0 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return 7;
      }
      else if (a1 == 0xD000000000000020 && a2 == 0x800000000004EBC0 {
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      }
      {
        swift_bridgeObjectRelease();
        return 8;
      }
      else
      {
        BOOL v8 = a1 == 0x697463416B6E696CLL && a2 == 0xEE00776569566E6FLL;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 9;
        }
        else if (a1 == 0xD000000000000014 && a2 == 0x800000000004EBF0 {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return 10;
        }
        else if (a1 == 0xD00000000000001ELL && a2 == 0x800000000004EC10 {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return 11;
        }
        else if (a1 == 0xD000000000000018 && a2 == 0x800000000004EC30)
        {
          swift_bridgeObjectRelease();
          return 12;
        }
        else
        {
          char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v9) {
            return 12;
          }
          else {
            return 13;
          }
        }
      }
    }
  }
}

uint64_t WorkflowDataModels.CodingKeys.init(intValue:)()
{
  return 13;
}

unint64_t WorkflowDataModels.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD00000000000001CLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4354656C62616E65;
      break;
    case 2:
      return result;
    case 3:
    case 7:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0xD000000000000017;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0x6569566863746177;
      break;
    case 8:
      unint64_t result = 0xD000000000000020;
      break;
    case 9:
      unint64_t result = 0x697463416B6E696CLL;
      break;
    case 10:
      unint64_t result = 0xD000000000000014;
      break;
    case 11:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 12:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      unint64_t result = 0x72656C41776F6873;
      break;
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys(uint64_t a1)
{
  unint64_t RunViewCoding = lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys();

  return CodingKey.description.getter(a1, RunViewCoding);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys(uint64_t a1)
{
  unint64_t RunViewCoding = lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, RunViewCoding);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance WorkflowDataModels.CodingKeys()
{
  return WorkflowDataModels.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WorkflowDataModels.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WorkflowDataModels.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance WorkflowDataModels.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = WorkflowDataModels.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.ConfirmActionViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.ConfirmActionViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.EnableTCCViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.EnableTCCViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.LinkActionViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.LinkActionViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.LinkConfirmationViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.LinkConfirmationViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.ShowAlertViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.ShowAlertViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WorkflowDataModels.WatchViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WorkflowDataModels.WatchViewCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WorkflowDataModels.encode(to:)()
{
  OUTLINED_FUNCTION_10_2();
  uint64_t v168 = v1;
  uint64_t v170 = v0;
  uint64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  unint64_t v165 = v7;
  unint64_t v166 = v6;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_1_7();
  unint64_t v164 = v8;
  uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  unint64_t v162 = v9;
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_22((uint64_t)v135 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v161 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.LinkConfirmationViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v159 = v12;
  __chkstk_darwin(v13);
  OUTLINED_FUNCTION_22((uint64_t)v135 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.LinkActionViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v156 = v15;
  __chkstk_darwin(v16);
  OUTLINED_FUNCTION_22((uint64_t)v135 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v153 = v18;
  __chkstk_darwin(v19);
  OUTLINED_FUNCTION_22((uint64_t)v135 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.DisambiguateItemsViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v151 = v21;
  __chkstk_darwin(v22);
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_22(v23);
  uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.WatchViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v149 = v24;
  __chkstk_darwin(v25);
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_22(v26);
  uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.ConfirmActionViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v147 = v27;
  __chkstk_darwin(v28);
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_22(v29);
  uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.CustomIntentHandledViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v145 = v30;
  __chkstk_darwin(v31);
  OUTLINED_FUNCTION_1_7();
  uint64_t v33 = OUTLINED_FUNCTION_99(v32);
  uint64_t v142 = type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(v33);
  OUTLINED_FUNCTION_2();
  __chkstk_darwin(v34);
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_22(v35);
  uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.CustomIntentErrorViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v141 = v36;
  __chkstk_darwin(v37);
  OUTLINED_FUNCTION_1_7();
  uint64_t v39 = OUTLINED_FUNCTION_99(v38);
  uint64_t v138 = type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(v39);
  OUTLINED_FUNCTION_2();
  __chkstk_darwin(v40);
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_22(v41);
  uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.CustomIntentConfirmationViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v137 = v42;
  __chkstk_darwin(v43);
  OUTLINED_FUNCTION_1_7();
  uint64_t v45 = OUTLINED_FUNCTION_99(v44);
  v135[3] = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(v45);
  OUTLINED_FUNCTION_2();
  __chkstk_darwin(v46);
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_22(v47);
  v135[4] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.EnableTCCViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  v135[2] = v48;
  __chkstk_darwin(v49);
  OUTLINED_FUNCTION_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.ShowAlertViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  v135[1] = v50;
  __chkstk_darwin(v51);
  uint64_t v52 = OUTLINED_FUNCTION_32();
  type metadata accessor for WorkflowDataModels(v52);
  OUTLINED_FUNCTION_2();
  __chkstk_darwin(v53);
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WorkflowDataModels.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v169 = v54;
  __chkstk_darwin(v55);
  OUTLINED_FUNCTION_48();
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  lazy protocol witness table accessor for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys();
  uint64_t v167 = v3;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of WorkflowDataModels.CustomIntentModel(v170, v2, (void (*)(void))type metadata accessor for WorkflowDataModels);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      unint64_t v63 = *(void *)(v2 + 8);
      uint64_t v170 = *(void *)v2;
      unint64_t v65 = *(void *)(v2 + 16);
      unint64_t v64 = *(void *)(v2 + 24);
      uint64_t v66 = *(void *)(v2 + 32);
      unint64_t v67 = *(void *)(v2 + 40);
      LOBYTE(v171) = 1;
      lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys();
      OUTLINED_FUNCTION_88();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v171 = v170;
      unint64_t v172 = v63;
      unint64_t v173 = v65;
      unint64_t v174 = v64;
      uint64_t v175 = v66;
      unint64_t v176 = v67;
      lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_7_0();
      v68();
      OUTLINED_FUNCTION_79();
      OUTLINED_FUNCTION_7_0();
      v69();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    case 2u:
      uint64_t v70 = v136;
      outlined init with take of WorkflowDataModels.CustomIntentModel(v2, v136, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel);
      LOBYTE(v171) = 2;
      lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys();
      OUTLINED_FUNCTION_33();
      lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel and conformance WorkflowDataModels.CustomIntentConfirmationModel);
      OUTLINED_FUNCTION_83();
      OUTLINED_FUNCTION_7_0();
      v71();
      uint64_t v72 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel;
      goto LABEL_7;
    case 3u:
      uint64_t v70 = v140;
      outlined init with take of WorkflowDataModels.CustomIntentModel(v2, v140, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentErrorModel);
      LOBYTE(v171) = 3;
      lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys();
      OUTLINED_FUNCTION_33();
      lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel and conformance WorkflowDataModels.CustomIntentErrorModel);
      OUTLINED_FUNCTION_83();
      OUTLINED_FUNCTION_7_0();
      v73();
      uint64_t v72 = type metadata accessor for WorkflowDataModels.CustomIntentErrorModel;
      goto LABEL_7;
    case 4u:
      uint64_t v70 = v144;
      outlined init with take of WorkflowDataModels.CustomIntentModel(v2, v144, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentHandledModel);
      LOBYTE(v171) = 4;
      lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys();
      OUTLINED_FUNCTION_33();
      lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel and conformance WorkflowDataModels.CustomIntentHandledModel);
      OUTLINED_FUNCTION_83();
      OUTLINED_FUNCTION_7_0();
      v74();
      uint64_t v72 = type metadata accessor for WorkflowDataModels.CustomIntentHandledModel;
LABEL_7:
      outlined destroy of WorkflowDataModels.CustomIntentModel(v70, (void (*)(void))v72);
      OUTLINED_FUNCTION_7_0();
      v75();
      goto LABEL_20;
    case 5u:
      uint64_t v76 = *(void *)(v2 + 8);
      uint64_t v170 = *(void *)v2;
      unint64_t v77 = *(void *)(v2 + 24);
      unint64_t v166 = *(void *)(v2 + 16);
      unint64_t v164 = *(void *)(v2 + 32);
      unint64_t v162 = *(void *)(v2 + 40);
      unint64_t v78 = *(void *)(v2 + 56);
      uint64_t v163 = *(void *)(v2 + 48);
      uint64_t v79 = *(void *)(v2 + 64);
      unint64_t v80 = *(void *)(v2 + 72);
      LODWORD(v161) = *(unsigned __int8 *)(v2 + 80);
      uint64_t v81 = *(void *)(v2 + 88);
      uint64_t v82 = *(void *)(v2 + 96);
      uint64_t v160 = v81;
      LOBYTE(v171) = 5;
      lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v83 = v170;
      uint64_t v170 = v76;
      uint64_t v171 = v83;
      unint64_t v172 = v76;
      unint64_t v173 = v166;
      unint64_t v165 = v77;
      unint64_t v174 = v77;
      uint64_t v175 = v164;
      unint64_t v176 = v162;
      uint64_t v177 = v163;
      unint64_t v178 = v78;
      unint64_t v164 = v78;
      uint64_t v179 = v79;
      uint64_t v180 = v80;
      unint64_t v166 = v80;
      LOBYTE(v181) = v161;
      uint64_t v182 = v160;
      uint64_t v183 = v82;
      lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_7_0();
      v84();
      OUTLINED_FUNCTION_108();
      OUTLINED_FUNCTION_7_0();
      v85();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data?(v79, v166);
      goto LABEL_19;
    case 6u:
      unint64_t v86 = *(void *)(v2 + 8);
      uint64_t v170 = *(void *)v2;
      uint64_t v87 = *(void *)(v2 + 16);
      unint64_t v88 = *(void *)(v2 + 24);
      unint64_t v89 = *(void *)(v2 + 40);
      uint64_t v163 = *(void *)(v2 + 32);
      unint64_t v90 = *(void *)(v2 + 56);
      unint64_t v162 = *(void *)(v2 + 48);
      uint64_t v91 = *(void *)(v2 + 72);
      OUTLINED_FUNCTION_114(*(void *)(v2 + 64));
      LOBYTE(v171) = 6;
      lazy protocol witness table accessor for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys();
      OUTLINED_FUNCTION_64();
      uint64_t v171 = v170;
      unint64_t v172 = v86;
      unint64_t v164 = v86;
      uint64_t v170 = v87;
      unint64_t v173 = v87;
      unint64_t v174 = v88;
      unint64_t v166 = v88;
      uint64_t v175 = v163;
      unint64_t v176 = v89;
      unint64_t v165 = v89;
      uint64_t v177 = v162;
      unint64_t v178 = v90;
      uint64_t v179 = v161;
      uint64_t v180 = v91;
      lazy protocol witness table accessor for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_7_0();
      v92();
      OUTLINED_FUNCTION_7_0();
      v93();
      swift_bridgeObjectRelease();
      outlined consume of WatchViewType(v170, v166);
      goto LABEL_13;
    case 7u:
      uint64_t v95 = *(void *)v2;
      unint64_t v94 = *(void *)(v2 + 8);
      unint64_t v96 = *(void *)(v2 + 16);
      LOBYTE(v171) = 7;
      lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys();
      OUTLINED_FUNCTION_43();
      uint64_t v171 = v95;
      unint64_t v172 = v94;
      unint64_t v173 = v96;
      lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel();
      OUTLINED_FUNCTION_122();
      goto LABEL_12;
    case 8u:
      uint64_t v98 = *(void *)v2;
      unint64_t v97 = *(void *)(v2 + 8);
      unint64_t v99 = *(void *)(v2 + 16);
      LOBYTE(v171) = 8;
      lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys();
      OUTLINED_FUNCTION_43();
      uint64_t v171 = v98;
      unint64_t v172 = v97;
      unint64_t v173 = v99;
      lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel();
      OUTLINED_FUNCTION_122();
LABEL_12:
      OUTLINED_FUNCTION_7_0();
      v100();
      OUTLINED_FUNCTION_7_0();
      v101();
      goto LABEL_13;
    case 9u:
      uint64_t v102 = *(void *)(v2 + 8);
      uint64_t v170 = *(void *)v2;
      unint64_t v103 = *(void *)(v2 + 16);
      uint64_t v104 = *(void *)(v2 + 32);
      unint64_t v165 = *(void *)(v2 + 24);
      unint64_t v166 = v103;
      unint64_t v106 = *(void *)(v2 + 40);
      uint64_t v105 = *(void *)(v2 + 48);
      unint64_t v107 = *(void *)(v2 + 56);
      LOBYTE(v171) = 9;
      lazy protocol witness table accessor for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys();
      OUTLINED_FUNCTION_88();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v108 = v170;
      uint64_t v170 = v102;
      uint64_t v171 = v108;
      unint64_t v172 = v102;
      unint64_t v173 = v166;
      unint64_t v174 = v165;
      uint64_t v175 = v104;
      unint64_t v176 = v106;
      uint64_t v177 = v105;
      unint64_t v178 = v107;
      lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      OUTLINED_FUNCTION_7_0();
      v109();
      OUTLINED_FUNCTION_7_0();
      v110();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data?(v105, v107);
      goto LABEL_20;
    case 0xAu:
      unint64_t v111 = *(void *)(v2 + 8);
      uint64_t v170 = *(void *)v2;
      unint64_t v112 = *(void *)(v2 + 24);
      unint64_t v166 = *(void *)(v2 + 16);
      unint64_t v113 = *(void *)(v2 + 40);
      uint64_t v163 = *(void *)(v2 + 32);
      uint64_t v114 = *(void *)(v2 + 48);
      unint64_t v162 = *(void *)(v2 + 56);
      uint64_t v115 = *(void *)(v2 + 72);
      uint64_t v160 = *(void *)(v2 + 64);
      uint64_t v116 = *(void *)(v2 + 88);
      uint64_t v157 = *(void *)(v2 + 80);
      LODWORD(v156) = *(unsigned __int8 *)(v2 + 96);
      LOBYTE(v171) = 10;
      lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys();
      OUTLINED_FUNCTION_64();
      uint64_t v171 = v170;
      unint64_t v172 = v111;
      unint64_t v164 = v111;
      unint64_t v165 = v112;
      unint64_t v173 = v166;
      unint64_t v174 = v112;
      uint64_t v175 = v163;
      unint64_t v176 = v113;
      unint64_t v166 = v113;
      uint64_t v170 = v114;
      uint64_t v177 = v114;
      unint64_t v117 = v162;
      unint64_t v178 = v162;
      uint64_t v179 = v160;
      uint64_t v180 = v115;
      uint64_t v181 = v157;
      uint64_t v182 = v116;
      LOBYTE(v183) = v156;
      lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_7_0();
      v118();
      OUTLINED_FUNCTION_7_0();
      v119();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data?(v170, v117);
      goto LABEL_13;
    case 0xBu:
      uint64_t v121 = *(void *)v2;
      unint64_t v120 = *(void *)(v2 + 8);
      unint64_t v122 = *(void *)(v2 + 24);
      unint64_t v165 = *(void *)(v2 + 16);
      unint64_t v166 = v120;
      unint64_t v123 = *(void *)(v2 + 40);
      unint64_t v164 = *(void *)(v2 + 32);
      unint64_t v124 = *(void *)(v2 + 56);
      OUTLINED_FUNCTION_114(*(void *)(v2 + 48));
      uint64_t v125 = *(void *)(v2 + 72);
      uint64_t v159 = *(void *)(v2 + 64);
      LOBYTE(v171) = 11;
      lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys();
      OUTLINED_FUNCTION_43();
      uint64_t v170 = v121;
      uint64_t v171 = v121;
      unint64_t v172 = v166;
      unint64_t v173 = v165;
      unint64_t v174 = v122;
      uint64_t v175 = v164;
      unint64_t v166 = v123;
      unint64_t v176 = v123;
      uint64_t v177 = v161;
      unint64_t v178 = v124;
      uint64_t v179 = v159;
      uint64_t v180 = v125;
      lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
      OUTLINED_FUNCTION_34();
      OUTLINED_FUNCTION_7_0();
      v126();
      OUTLINED_FUNCTION_7_0();
      v127();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    case 0xCu:
      uint64_t v128 = *(void *)v2;
      unint64_t v162 = *(void *)(v2 + 8);
      unint64_t v129 = *(void *)(v2 + 24);
      OUTLINED_FUNCTION_114(*(void *)(v2 + 16));
      uint64_t v160 = *(void *)(v2 + 32);
      unint64_t v158 = *(void *)(v2 + 40);
      unint64_t v130 = *(void *)(v2 + 56);
      uint64_t v159 = *(void *)(v2 + 48);
      uint64_t v157 = *(void *)(v2 + 64);
      uint64_t v170 = *(void *)(v2 + 72);
      uint64_t v131 = *(void *)(v2 + 88);
      uint64_t v156 = *(void *)(v2 + 80);
      uint64_t v132 = *(void *)(v2 + 104);
      uint64_t v155 = *(void *)(v2 + 96);
      LOBYTE(v171) = 12;
      lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys();
      OUTLINED_FUNCTION_88();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v163 = v128;
      uint64_t v171 = v128;
      unint64_t v172 = v162;
      unint64_t v173 = v161;
      unint64_t v162 = v129;
      unint64_t v174 = v129;
      uint64_t v175 = v160;
      unint64_t v176 = v158;
      uint64_t v177 = v159;
      unint64_t v178 = v130;
      uint64_t v179 = v157;
      uint64_t v180 = v170;
      uint64_t v181 = v156;
      uint64_t v182 = v131;
      uint64_t v161 = v131;
      uint64_t v183 = v155;
      uint64_t v184 = v132;
      lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      OUTLINED_FUNCTION_79();
      OUTLINED_FUNCTION_7_0();
      v133();
      OUTLINED_FUNCTION_7_0();
      v134();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    default:
      unint64_t v56 = *(void *)(v2 + 8);
      uint64_t v170 = *(void *)v2;
      unint64_t v57 = *(void *)(v2 + 16);
      unint64_t v58 = *(void *)(v2 + 24);
      unint64_t v59 = *(void *)(v2 + 40);
      unint64_t v165 = *(void *)(v2 + 32);
      unint64_t v166 = v57;
      unint64_t v60 = *(void *)(v2 + 56);
      unint64_t v164 = *(void *)(v2 + 48);
      LOBYTE(v171) = 0;
      lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v171 = v170;
      unint64_t v172 = v56;
      unint64_t v173 = v166;
      unint64_t v174 = v58;
      uint64_t v175 = v165;
      unint64_t v176 = v59;
      uint64_t v177 = v164;
      unint64_t v178 = v60;
      lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      OUTLINED_FUNCTION_7_0();
      v61();
      OUTLINED_FUNCTION_7_0();
      v62();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_13:
      swift_bridgeObjectRelease();
LABEL_19:
      swift_bridgeObjectRelease();
LABEL_20:
      OUTLINED_FUNCTION_9_3();
      return;
  }
}

void WorkflowDataModels.init(from:)()
{
  OUTLINED_FUNCTION_10_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_114(v4);
  uint64_t v215 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v217 = v5;
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_22((uint64_t)&v176 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v214 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v201 = v8;
  __chkstk_darwin(v9);
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_22(v10);
  uint64_t v213 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.LinkConfirmationViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v200 = v11;
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_22((uint64_t)&v176 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v212 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.LinkActionViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v199 = v14;
  __chkstk_darwin(v15);
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_22(v16);
  uint64_t v211 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v198 = v17;
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_22(v19);
  uint64_t v210 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.DisambiguateItemsViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v197 = v20;
  __chkstk_darwin(v21);
  OUTLINED_FUNCTION_22((uint64_t)&v176 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v209 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.WatchViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v196 = v23;
  __chkstk_darwin(v24);
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_22(v25);
  uint64_t v208 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.ConfirmActionViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v195 = v26;
  __chkstk_darwin(v27);
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_22(v28);
  uint64_t v206 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CustomIntentHandledViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v194 = v29;
  __chkstk_darwin(v30);
  OUTLINED_FUNCTION_1_7();
  uint64_t v223 = v31;
  uint64_t v207 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CustomIntentErrorViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v193 = v32;
  __chkstk_darwin(v33);
  OUTLINED_FUNCTION_1_7();
  uint64_t v222 = v34;
  uint64_t v205 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CustomIntentConfirmationViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v192 = v35;
  __chkstk_darwin(v36);
  OUTLINED_FUNCTION_22((uint64_t)&v176 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v204 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.EnableTCCViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v191 = v38;
  __chkstk_darwin(v39);
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_22(v40);
  uint64_t v203 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.ShowAlertViewCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v190 = v41;
  __chkstk_darwin(v42);
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_22(v43);
  uint64_t v221 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WorkflowDataModels.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v219 = v44;
  __chkstk_darwin(v45);
  uint64_t v46 = OUTLINED_FUNCTION_68();
  uint64_t v218 = type metadata accessor for WorkflowDataModels(v46);
  OUTLINED_FUNCTION_2();
  __chkstk_darwin(v47);
  OUTLINED_FUNCTION_26();
  __chkstk_darwin(v48);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_26();
  __chkstk_darwin(v49);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_26();
  __chkstk_darwin(v50);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_26();
  __chkstk_darwin(v51);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_26();
  __chkstk_darwin(v52);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_26();
  __chkstk_darwin(v53);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_26();
  __chkstk_darwin(v54);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_26();
  __chkstk_darwin(v55);
  OUTLINED_FUNCTION_53();
  OUTLINED_FUNCTION_26();
  uint64_t v57 = __chkstk_darwin(v56);
  unint64_t v59 = (char *)&v176 - v58;
  uint64_t v60 = __chkstk_darwin(v57);
  uint64_t v62 = (char *)&v176 - v61;
  uint64_t v63 = __chkstk_darwin(v60);
  unint64_t v65 = (char *)&v176 - v64;
  uint64_t v66 = __chkstk_darwin(v63);
  uint64_t v68 = (__n128 *)((char *)&v176 - v67);
  __chkstk_darwin(v66);
  uint64_t v70 = (char *)&v176 - v69;
  uint64_t v71 = v3[3];
  v224 = v3;
  __swift_project_boxed_opaque_existential_1(v3, v71);
  lazy protocol witness table accessor for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys();
  uint64_t v220 = v1;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0) {
    goto LABEL_8;
  }
  unint64_t v178 = v68;
  uint64_t v179 = v65;
  uint64_t v180 = v62;
  uint64_t v181 = v59;
  uint64_t v230 = (uint64_t)v70;
  uint64_t v72 = v220;
  uint64_t v73 = v221;
  uint64_t v74 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v75 = *(void *)(v74 + 16);
  uint64_t v76 = v72;
  if (!v75
    || (uint64_t v177 = 0,
        uint64_t v77 = *(unsigned __int8 *)(v74 + 32),
        uint64_t v78 = specialized ArraySlice.subscript.getter(1, v75, v74, v74 + 32, 0, (2 * v75) | 1),
        uint64_t v80 = v79,
        unint64_t v82 = v81,
        swift_bridgeObjectRelease(),
        uint64_t v83 = v78,
        v80 != v82 >> 1))
  {
    uint64_t v86 = v219;
    uint64_t v87 = v218;
    type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v89 = v88;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *unint64_t v89 = v87;
    KeyedDecodingContainer.codingPath.getter();
    OUTLINED_FUNCTION_91();
    OUTLINED_FUNCTION_14_2();
    uint64_t v90 = OUTLINED_FUNCTION_143();
    v91(v90);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v76, v73);
LABEL_8:
    uint64_t v77 = (uint64_t)v224;
    goto LABEL_9;
  }
  uint64_t v84 = v177;
  switch(v77)
  {
    case 1:
      v225[0].n128_u8[0] = 1;
      lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys();
      OUTLINED_FUNCTION_11_2();
      OUTLINED_FUNCTION_37();
      lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      if (!v84)
      {
        OUTLINED_FUNCTION_7_0();
        v145();
        swift_unknownObjectRelease();
        uint64_t v146 = OUTLINED_FUNCTION_4_6();
        v147(v146);
        uint64_t v148 = (uint64_t)v179;
        OUTLINED_FUNCTION_112(v225[1].n128_u64[0], v225[0]);
        OUTLINED_FUNCTION_23();
        swift_storeEnumTagMultiPayload();
        uint64_t v149 = v148;
        uint64_t v166 = v230;
        outlined init with take of WorkflowDataModels.CustomIntentModel(v149, v230, (void (*)(void))type metadata accessor for WorkflowDataModels);
        goto LABEL_34;
      }
      OUTLINED_FUNCTION_7_0();
      v92();
      swift_unknownObjectRelease();
      uint64_t v93 = OUTLINED_FUNCTION_4_6();
      v94(v93);
      break;
    case 2:
      v225[0].n128_u8[0] = 2;
      lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys();
      OUTLINED_FUNCTION_11_2();
      OUTLINED_FUNCTION_37();
      type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
      lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel and conformance WorkflowDataModels.CustomIntentConfirmationModel);
      uint64_t v95 = (uint64_t)v180;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      if (!v84)
      {
        OUTLINED_FUNCTION_7_0();
        v150();
        swift_unknownObjectRelease();
        uint64_t v151 = OUTLINED_FUNCTION_84();
        v152(v151);
        swift_storeEnumTagMultiPayload();
        uint64_t v153 = v95;
        goto LABEL_33;
      }
      OUTLINED_FUNCTION_7_0();
      v96();
      swift_unknownObjectRelease();
      uint64_t v97 = OUTLINED_FUNCTION_84();
      v98(v97);
      break;
    case 3:
      v225[0].n128_u8[0] = 3;
      lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys();
      OUTLINED_FUNCTION_11_2();
      type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0);
      lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel and conformance WorkflowDataModels.CustomIntentErrorModel);
      uint64_t v139 = (uint64_t)v181;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_7_0();
      v163();
      swift_unknownObjectRelease();
      uint64_t v164 = OUTLINED_FUNCTION_4_6();
      v165(v164);
      swift_storeEnumTagMultiPayload();
      uint64_t v166 = v230;
      outlined init with take of WorkflowDataModels.CustomIntentModel(v139, v230, (void (*)(void))type metadata accessor for WorkflowDataModels);
      uint64_t v77 = (uint64_t)v224;
      goto LABEL_34;
    case 4:
      v225[0].n128_u8[0] = 4;
      lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys();
      OUTLINED_FUNCTION_11_2();
      OUTLINED_FUNCTION_37();
      uint64_t v222 = v83;
      type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
      lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel and conformance WorkflowDataModels.CustomIntentHandledModel);
      uint64_t v99 = v202;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      OUTLINED_FUNCTION_39();
      if (v84)
      {
        OUTLINED_FUNCTION_7_0();
        v100();
        goto LABEL_24;
      }
      OUTLINED_FUNCTION_7_0();
      v154();
      swift_unknownObjectRelease();
      uint64_t v155 = OUTLINED_FUNCTION_4_6();
      v156(v155);
      swift_storeEnumTagMultiPayload();
      uint64_t v153 = v99;
      goto LABEL_33;
    case 5:
      v225[0].n128_u8[0] = 5;
      lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys();
      OUTLINED_FUNCTION_11_2();
      OUTLINED_FUNCTION_37();
      lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel();
      OUTLINED_FUNCTION_17_0();
      OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_7_0();
      v101();
      swift_unknownObjectRelease();
      uint64_t v102 = OUTLINED_FUNCTION_4_6();
      v103(v102);
      __n128 v104 = v225[1];
      __n128 v105 = v225[2];
      __n128 v106 = v226;
      unsigned __int8 v107 = v228[0];
      uint64_t v108 = v182;
      *uint64_t v182 = v225[0];
      v108[1] = v104;
      v108[2] = v105;
      v108[3] = v106;
      v108[4] = v227;
      v108[5].n128_u8[0] = v107;
      *(__n128 *)((char *)v108 + 88) = *(__n128 *)&v228[8];
      OUTLINED_FUNCTION_23();
      goto LABEL_32;
    case 6:
      v225[0].n128_u8[0] = 6;
      lazy protocol witness table accessor for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys();
      OUTLINED_FUNCTION_11_2();
      OUTLINED_FUNCTION_37();
      lazy protocol witness table accessor for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel();
      OUTLINED_FUNCTION_17_0();
      OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_7_0();
      v109();
      swift_unknownObjectRelease();
      uint64_t v110 = OUTLINED_FUNCTION_4_6();
      v111(v110);
      __n128 v112 = v225[1];
      uint64_t v108 = v183;
      *uint64_t v183 = v225[0];
      v108[1] = v112;
      __n128 v113 = v226;
      v108[2] = v225[2];
      v108[3] = v113;
      v108[4] = v227;
      OUTLINED_FUNCTION_23();
      goto LABEL_32;
    case 7:
      v225[0].n128_u8[0] = 7;
      lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys();
      OUTLINED_FUNCTION_11_2();
      OUTLINED_FUNCTION_37();
      lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel();
      OUTLINED_FUNCTION_17_0();
      OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_7_0();
      v114();
      swift_unknownObjectRelease();
      uint64_t v115 = OUTLINED_FUNCTION_4_6();
      v116(v115);
      unint64_t v117 = v225[1].n128_u64[0];
      uint64_t v108 = v184;
      *uint64_t v184 = v225[0];
      v108[1].n128_u64[0] = v117;
      OUTLINED_FUNCTION_23();
      goto LABEL_32;
    case 8:
      v225[0].n128_u8[0] = 8;
      lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys();
      OUTLINED_FUNCTION_11_2();
      OUTLINED_FUNCTION_37();
      lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel();
      OUTLINED_FUNCTION_17_0();
      OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_7_0();
      v118();
      swift_unknownObjectRelease();
      uint64_t v119 = OUTLINED_FUNCTION_4_6();
      v120(v119);
      unint64_t v121 = v225[1].n128_u64[0];
      uint64_t v108 = v185;
      __n128 *v185 = v225[0];
      v108[1].n128_u64[0] = v121;
      OUTLINED_FUNCTION_23();
      goto LABEL_32;
    case 9:
      v225[0].n128_u8[0] = 9;
      lazy protocol witness table accessor for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys();
      OUTLINED_FUNCTION_11_2();
      OUTLINED_FUNCTION_37();
      lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel();
      OUTLINED_FUNCTION_17_0();
      OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_7_0();
      v122();
      swift_unknownObjectRelease();
      uint64_t v123 = OUTLINED_FUNCTION_4_6();
      v124(v123);
      unint64_t v125 = v225[0].n128_u64[1];
      uint64_t v108 = v186;
      v186->n128_u64[0] = v225[0].n128_u64[0];
      v108->n128_u64[1] = v125;
      __n128 v126 = v225[2];
      v108[1] = v225[1];
      v108[2] = v126;
      v108[3] = v226;
      OUTLINED_FUNCTION_23();
      goto LABEL_32;
    case 10:
      v225[0].n128_u8[0] = 10;
      lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys();
      OUTLINED_FUNCTION_11_2();
      OUTLINED_FUNCTION_37();
      lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel();
      OUTLINED_FUNCTION_17_0();
      OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_7_0();
      v127();
      swift_unknownObjectRelease();
      uint64_t v128 = OUTLINED_FUNCTION_4_6();
      v129(v128);
      unint64_t v130 = v225[0].n128_u64[1];
      unint64_t v131 = *(void *)v228;
      unint64_t v132 = *(void *)&v228[8];
      unsigned __int8 v133 = v228[16];
      uint64_t v108 = v187;
      v187->n128_u64[0] = v225[0].n128_u64[0];
      v108->n128_u64[1] = v130;
      __n128 v134 = v225[2];
      v108[1] = v225[1];
      v108[2] = v134;
      __n128 v135 = v227;
      v108[3] = v226;
      v108[4] = v135;
      v108[5].n128_u64[0] = v131;
      v108[5].n128_u64[1] = v132;
      v108[6].n128_u8[0] = v133;
      OUTLINED_FUNCTION_23();
      goto LABEL_32;
    case 11:
      v225[0].n128_u8[0] = 11;
      lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys();
      OUTLINED_FUNCTION_11_2();
      OUTLINED_FUNCTION_37();
      lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel and conformance AutoShortcutAppPhrasesViewModel();
      OUTLINED_FUNCTION_17_0();
      OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_7_0();
      v157();
      swift_unknownObjectRelease();
      uint64_t v158 = OUTLINED_FUNCTION_4_6();
      v159(v158);
      __n128 v160 = *(__n128 *)((char *)&v225[1] + 8);
      unint64_t v161 = v225[2].n128_u64[1];
      uint64_t v108 = v188;
      v188->n128_u64[0] = v225[0].n128_u64[0];
      *(__n128 *)((char *)v108 + 8) = *(__n128 *)((char *)v225 + 8);
      *(__n128 *)((char *)v108 + 24) = v160;
      v108[2].n128_u64[1] = v161;
      __n128 v162 = v227;
      v108[3] = v226;
      v108[4] = v162;
      OUTLINED_FUNCTION_23();
      goto LABEL_32;
    case 12:
      v225[0].n128_u8[0] = 12;
      lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys();
      OUTLINED_FUNCTION_11_2();
      OUTLINED_FUNCTION_37();
      lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      OUTLINED_FUNCTION_39();
      if (!v84)
      {
        OUTLINED_FUNCTION_73();
        v167();
        swift_unknownObjectRelease();
        uint64_t v168 = OUTLINED_FUNCTION_4_6();
        v169(v168);
        __n128 v170 = *(__n128 *)((char *)&v225[1] + 8);
        unint64_t v171 = v225[2].n128_u64[1];
        unint64_t v172 = *(void *)&v228[16];
        unint64_t v173 = v229;
        uint64_t v108 = v189;
        v189->n128_u64[0] = v225[0].n128_u64[0];
        *(__n128 *)((char *)v108 + 8) = *(__n128 *)((char *)v225 + 8);
        *(__n128 *)((char *)v108 + 24) = v170;
        v108[2].n128_u64[1] = v171;
        __n128 v175 = v227;
        __n128 v174 = *(__n128 *)v228;
        v108[3] = v226;
        v108[4] = v175;
        v108[5] = v174;
        v108[6].n128_u64[0] = v172;
        v108[6].n128_u64[1] = v173;
        OUTLINED_FUNCTION_23();
        goto LABEL_32;
      }
      OUTLINED_FUNCTION_73();
      v140();
LABEL_24:
      swift_unknownObjectRelease();
      uint64_t v136 = OUTLINED_FUNCTION_4_6();
      v137(v136);
      break;
    default:
      v225[0].n128_u8[0] = 0;
      lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys();
      OUTLINED_FUNCTION_11_2();
      OUTLINED_FUNCTION_37();
      lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      if (v84)
      {
        OUTLINED_FUNCTION_7_0();
        v85();
        swift_unknownObjectRelease();
        OUTLINED_FUNCTION_7_0();
        v138();
      }
      else
      {
        OUTLINED_FUNCTION_7_0();
        v141();
        swift_unknownObjectRelease();
        OUTLINED_FUNCTION_7_0();
        v142();
        uint64_t v108 = v178;
        OUTLINED_FUNCTION_112(v225[1].n128_u64[0], v225[0]);
        v108[3].n128_u64[0] = v143;
        v108[3].n128_u64[1] = v144;
        OUTLINED_FUNCTION_23();
LABEL_32:
        swift_storeEnumTagMultiPayload();
        uint64_t v153 = (uint64_t)v108;
LABEL_33:
        uint64_t v166 = v230;
        outlined init with take of WorkflowDataModels.CustomIntentModel(v153, v230, (void (*)(void))type metadata accessor for WorkflowDataModels);
LABEL_34:
        outlined init with take of WorkflowDataModels.CustomIntentModel(v166, v216, (void (*)(void))type metadata accessor for WorkflowDataModels);
      }
      break;
  }
LABEL_9:
  __swift_destroy_boxed_opaque_existential_1(v77);
  OUTLINED_FUNCTION_104();
  OUTLINED_FUNCTION_9_3();
}

uint64_t protocol witness for SnippetPluginModel.snippetHidden(for:idiom:) in conformance WorkflowDataModels()
{
  return SnippetPluginModel.snippetHidden(for:idiom:)();
}

void protocol witness for Decodable.init(from:) in conformance WorkflowDataModels()
{
}

void protocol witness for Encodable.encode(to:) in conformance WorkflowDataModels()
{
}

uint64_t AutoShortcutAppPhrasesViewModel.asSnippetPluginModel()@<X0>(void *a1@<X8>)
{
  return WorkflowDataModels.WatchModel.asSnippetPluginModel()((uint64_t (*)(const void *))outlined retain of AutoShortcutAppPhrasesViewModel, a1);
}

uint64_t WorkflowDataModels.WatchModel.asSnippetPluginModel()@<X0>(uint64_t (*a1)(const void *)@<X1>, void *a2@<X8>)
{
  memcpy(a2, v2, 0x50uLL);
  type metadata accessor for WorkflowDataModels(0);
  swift_storeEnumTagMultiPayload();

  return a1(v2);
}

BOOL static WatchViewType.CodingKeys.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void WatchViewType.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
}

uint64_t WatchViewType.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x616D7269666E6F63 && a2 == 0xEC0000006E6F6974;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64656C646E6168 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t WatchViewType.CodingKeys.init(intValue:)()
{
  return 2;
}

uint64_t WatchViewType.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x64656C646E6168;
  }
  else {
    return 0x616D7269666E6F63;
  }
}

uint64_t WatchViewType.ConfirmationCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

Swift::Int WorkflowDataModels.CustomIntentErrorModel.CodingKeys.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t WatchViewType.ConfirmationCodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 12639;
  }
  else {
    return 12383;
  }
}

uint64_t WatchViewType.HandledCodingKeys.init(stringValue:)()
{
  return 1;
}

uint64_t WatchViewType.HandledCodingKeys.stringValue.getter()
{
  return 0;
}

uint64_t protocol witness for SnippetPluginModelProviding.asSnippetPluginModel() in conformance AutoShortcutAppPhrasesViewModel@<X0>(void *a1@<X8>)
{
  memcpy(v4, v1, sizeof(v4));
  return AutoShortcutAppPhrasesViewModel.asSnippetPluginModel()(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance WatchViewType.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static WatchViewType.CodingKeys.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance WatchViewType.CodingKeys()
{
  return WorkflowDataModels.CustomIntentErrorModel.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance WatchViewType.CodingKeys(uint64_t a1)
{
  WatchViewType.CodingKeys.hash(into:)(a1, *v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WatchViewType.CodingKeys()
{
  return WatchViewType.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WatchViewType.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WatchViewType.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance WatchViewType.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = WatchViewType.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WatchViewType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WatchViewType.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance WatchViewType.ConfirmationCodingKeys()
{
  return WatchViewType.ConfirmationCodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WatchViewType.ConfirmationCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = WatchViewType.ConfirmationCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WatchViewType.ConfirmationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WatchViewType.ConfirmationCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance WatchViewType.HandledCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = WatchViewType.HandledCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance WatchViewType.HandledCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance WatchViewType.HandledCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

void WatchViewType.encode(to:)()
{
  OUTLINED_FUNCTION_10_2();
  uint64_t v11 = v1;
  BOOL v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WatchViewType.HandledCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_27();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WatchViewType.ConfirmationCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_8();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<WatchViewType.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v6);
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_145(v3);
  lazy protocol witness table accessor for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v11)
  {
    lazy protocol witness table accessor for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v0) {
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    OUTLINED_FUNCTION_79();
    OUTLINED_FUNCTION_7_0();
    v7();
    OUTLINED_FUNCTION_18_0();
    v8();
  }
  else
  {
    lazy protocol witness table accessor for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    OUTLINED_FUNCTION_108();
    OUTLINED_FUNCTION_7_0();
    v9();
    OUTLINED_FUNCTION_18_0();
    v10();
  }
  OUTLINED_FUNCTION_9_3();
}

void WatchViewType.init(from:)()
{
  OUTLINED_FUNCTION_10_2();
  BOOL v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WatchViewType.HandledCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v4);
  OUTLINED_FUNCTION_95();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WatchViewType.ConfirmationCodingKeys>);
  OUTLINED_FUNCTION_0_1();
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_5();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<WatchViewType.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v22 = v7;
  __chkstk_darwin(v8);
  OUTLINED_FUNCTION_8();
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  lazy protocol witness table accessor for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0) {
    goto LABEL_7;
  }
  uint64_t v21 = (uint64_t)v3;
  uint64_t v9 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v10 = *(void *)(v9 + 16);
  if (!v10
    || (char v11 = *(unsigned char *)(v9 + 32),
        specialized ArraySlice.subscript.getter(1, v10, v9, v9 + 32, 0, (2 * v10) | 1),
        uint64_t v13 = v12,
        unint64_t v15 = v14,
        swift_bridgeObjectRelease(),
        v13 != v15 >> 1))
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v17 = &type metadata for WatchViewType;
    KeyedDecodingContainer.codingPath.getter();
    OUTLINED_FUNCTION_91();
    OUTLINED_FUNCTION_14_2();
    (*(void (**)(void *))(v18 + 104))(v17);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v1, v6);
    BOOL v3 = (void *)v21;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
    goto LABEL_8;
  }
  if (v11)
  {
    lazy protocol witness table accessor for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys();
    OUTLINED_FUNCTION_109();
    OUTLINED_FUNCTION_79();
    OUTLINED_FUNCTION_7_0();
  }
  else
  {
    lazy protocol witness table accessor for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys();
    OUTLINED_FUNCTION_109();
    KeyedDecodingContainer.decode(_:forKey:)();
    KeyedDecodingContainer.decode(_:forKey:)();
    OUTLINED_FUNCTION_73();
  }
  v19();
  swift_unknownObjectRelease();
  OUTLINED_FUNCTION_20();
  v20();
  __swift_destroy_boxed_opaque_existential_1(v21);
LABEL_8:
  OUTLINED_FUNCTION_9_3();
}

void protocol witness for Decodable.init(from:) in conformance WatchViewType(void *a1@<X8>)
{
  WatchViewType.init(from:)();
  if (!v1)
  {
    *a1 = v3;
    a1[1] = v4;
    a1[2] = v5;
    a1[3] = v6;
  }
}

void protocol witness for Encodable.encode(to:) in conformance WatchViewType()
{
}

uint64_t outlined bridged method (ob) of @objc INImage._imageData.getter(void *a1)
{
  id v2 = [a1 _imageData];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined copy of WorkflowDataModels.InvocationCommand(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result = a2;
  if (a4 < 2u)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  if (a4 == 2)
  {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of WorkflowDataModels.InvocationCommand(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result = a2;
  if (a4 < 2u)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (a4 == 2)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel.CodingKeys and conformance WorkflowDataModels.DisambiguationItemModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.InvocationCommand and conformance WorkflowDataModels.InvocationCommand);
  }
  return result;
}

uint64_t outlined retain of WorkflowDataModels.LinkActionModel(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v3 = *(void *)(a1 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v2, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel.CodingKeys and conformance WorkflowDataModels.LinkActionModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel.CodingKeys and conformance WorkflowDataModels.LinkConfirmationModel.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionModel and conformance WorkflowDataModels.LinkActionModel);
  }
  return result;
}

uint64_t outlined retain of WorkflowDataModels.AutoShortcutFirstRunModel(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys);
  }
  return result;
}

uint64_t outlined init with take of Data?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_119();
  v4();
  return a2;
}

uint64_t sub_2FBB0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_2FC00()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t type metadata accessor for SAIntentGroupLaunchAppWithIntent(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CodingKeys and conformance WorkflowDataModels.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys and conformance WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutFirstRunModel and conformance WorkflowDataModels.AutoShortcutFirstRunModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys and conformance WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationViewCodingKeys and conformance WorkflowDataModels.LinkConfirmationViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkConfirmationModel and conformance WorkflowDataModels.LinkConfirmationModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.LinkActionViewCodingKeys and conformance WorkflowDataModels.LinkActionViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateSmartPromptItemsModel and conformance WorkflowDataModels.DisambiguateSmartPromptItemsModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsViewCodingKeys and conformance WorkflowDataModels.DisambiguateItemsViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguateItemsModel and conformance WorkflowDataModels.DisambiguateItemsModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchViewCodingKeys and conformance WorkflowDataModels.WatchViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.WatchModel and conformance WorkflowDataModels.WatchModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionViewCodingKeys and conformance WorkflowDataModels.ConfirmActionViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ConfirmActionModel and conformance WorkflowDataModels.ConfirmActionModel);
  }
  return result;
}

uint64_t outlined init with take of WorkflowDataModels.CustomIntentModel(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_119();
  v4();
  return a2;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledViewCodingKeys and conformance WorkflowDataModels.CustomIntentHandledViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorViewCodingKeys and conformance WorkflowDataModels.CustomIntentErrorViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationViewCodingKeys and conformance WorkflowDataModels.CustomIntentConfirmationViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCViewCodingKeys and conformance WorkflowDataModels.EnableTCCViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.EnableTCCModel and conformance WorkflowDataModels.EnableTCCModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertViewCodingKeys and conformance WorkflowDataModels.ShowAlertViewCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.ShowAlertModel and conformance WorkflowDataModels.ShowAlertModel);
  }
  return result;
}

uint64_t outlined retain of AutoShortcutAppPhrasesViewModel(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys;
  if (!lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys;
  if (!lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys;
  if (!lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys;
  if (!lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType.CodingKeys and conformance WatchViewType.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys;
  if (!lazy protocol witness table cache variable for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys;
  if (!lazy protocol witness table cache variable for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys;
  if (!lazy protocol witness table cache variable for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType.HandledCodingKeys and conformance WatchViewType.HandledCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys;
  if (!lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WatchViewType.ConfirmationCodingKeys and conformance WatchViewType.ConfirmationCodingKeys);
  }
  return result;
}

unint64_t base witness table accessor for Decodable in WorkflowDataModels.CustomIntentConfirmationModel()
{
  return lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel and conformance WorkflowDataModels.CustomIntentConfirmationModel);
}

unint64_t base witness table accessor for Encodable in WorkflowDataModels.CustomIntentConfirmationModel()
{
  return lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentConfirmationModel and conformance WorkflowDataModels.CustomIntentConfirmationModel);
}

unint64_t base witness table accessor for Decodable in WorkflowDataModels.CustomIntentHandledModel()
{
  return lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel and conformance WorkflowDataModels.CustomIntentHandledModel);
}

unint64_t base witness table accessor for Encodable in WorkflowDataModels.CustomIntentHandledModel()
{
  return lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentHandledModel and conformance WorkflowDataModels.CustomIntentHandledModel);
}

unint64_t base witness table accessor for Decodable in WorkflowDataModels.CustomIntentErrorModel()
{
  return lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel and conformance WorkflowDataModels.CustomIntentErrorModel);
}

unint64_t base witness table accessor for Encodable in WorkflowDataModels.CustomIntentErrorModel()
{
  return lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels.CustomIntentErrorModel and conformance WorkflowDataModels.CustomIntentErrorModel);
}

void *associated type witness table accessor for Identifiable.ID : Hashable in WorkflowDataModels.DisambiguationItemModel()
{
  return &protocol witness table for ObjectIdentifier;
}

unint64_t base witness table accessor for Decodable in WorkflowDataModels()
{
  return lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels);
}

unint64_t base witness table accessor for Encodable in WorkflowDataModels()
{
  return lazy protocol witness table accessor for type CodableINInteraction and conformance CodableINInteraction((uint64_t)&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels);
}

uint64_t initializeBufferWithCopyOfBuffer for WorkflowDataModels(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v12 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v12;
        uint64_t v13 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v13;
        uint64_t v14 = a2[4];
        uint64_t v15 = a2[5];
        *(void *)(a1 + 32) = v14;
        *(void *)(a1 + 40) = v15;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 2u:
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v16 - 8) + 16))(a1, a2, v16);
        uint64_t v17 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
        uint64_t v18 = v17[5];
        uint64_t v19 = a1 + v18;
        uint64_t v20 = (uint64_t)a2 + v18;
        uint64_t v21 = type metadata accessor for CodableINInteraction();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
        uint64_t v22 = v17[6];
        uint64_t v23 = (void *)(a1 + v22);
        uint64_t v24 = (char *)a2 + v22;
        uint64_t v25 = type metadata accessor for VisualProperty();
        if (__swift_getEnumTagSinglePayload((uint64_t)v24, 1, v25))
        {
          uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
          memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
          __swift_storeEnumTagSinglePayload((uint64_t)v23, 0, 1, v25);
        }
        uint64_t v77 = v17[7];
        uint64_t v78 = (void *)(a1 + v77);
        uint64_t v79 = (uint64_t *)((char *)a2 + v77);
        uint64_t v80 = v79[1];
        void *v78 = *v79;
        v78[1] = v80;
        uint64_t v81 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
        uint64_t v82 = *(int *)(v81 + 20);
        uint64_t v83 = (void *)(a1 + v82);
        uint64_t v84 = (uint64_t *)((char *)a2 + v82);
        uint64_t v85 = v84[1];
        *uint64_t v83 = *v84;
        v83[1] = v85;
        uint64_t v86 = *(int *)(v81 + 24);
        uint64_t v87 = (void *)(a1 + v86);
        unint64_t v88 = (uint64_t *)((char *)a2 + v86);
        uint64_t v89 = v88[1];
        void *v87 = *v88;
        v87[1] = v89;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v27 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v27;
        uint64_t v28 = *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0) + 20);
        uint64_t v29 = a1 + v28;
        uint64_t v30 = (uint64_t)a2 + v28;
        swift_bridgeObjectRetain();
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
        break;
      case 4u:
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v32 - 8) + 16))(a1, a2, v32);
        uint64_t v33 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
        uint64_t v34 = v33[5];
        uint64_t v35 = a1 + v34;
        uint64_t v36 = (uint64_t)a2 + v34;
        uint64_t v37 = type metadata accessor for CodableINInteraction();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(v35, v36, v37);
        uint64_t v38 = v33[6];
        uint64_t v39 = (void *)(a1 + v38);
        uint64_t v40 = (char *)a2 + v38;
        uint64_t v41 = type metadata accessor for VisualProperty();
        if (__swift_getEnumTagSinglePayload((uint64_t)v40, 1, v41))
        {
          uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
          memcpy(v39, v40, *(void *)(*(void *)(v42 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v41 - 8) + 16))(v39, v40, v41);
          __swift_storeEnumTagSinglePayload((uint64_t)v39, 0, 1, v41);
        }
        uint64_t v90 = v33[7];
        uint64_t v91 = (void *)(a1 + v90);
        long long v92 = (uint64_t *)((char *)a2 + v90);
        uint64_t v93 = v92[1];
        void *v91 = *v92;
        v91[1] = v93;
        unint64_t v94 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
        uint64_t v95 = v94[5];
        unint64_t v96 = (void *)(a1 + v95);
        uint64_t v97 = (uint64_t *)((char *)a2 + v95);
        uint64_t v98 = v97[1];
        *unint64_t v96 = *v97;
        v96[1] = v98;
        uint64_t v99 = v94[6];
        uint64_t v100 = (void *)(a1 + v99);
        long long v101 = (char *)a2 + v99;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
        if (__swift_getEnumTagSinglePayload((uint64_t)v101, 1, v102))
        {
          uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
          memcpy(v100, v101, *(void *)(*(void *)(v103 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v102 - 8) + 16))(v100, v101, v102);
          __swift_storeEnumTagSinglePayload((uint64_t)v100, 0, 1, v102);
        }
        *(unsigned char *)(a1 + v94[7]) = *((unsigned char *)a2 + v94[7]);
        break;
      case 5u:
        uint64_t v43 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v43;
        uint64_t v44 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v44;
        uint64_t v45 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v45;
        uint64_t v46 = a2[7];
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = v46;
        uint64_t v47 = a2 + 8;
        unint64_t v48 = a2[9];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v48 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 64) = *(_OWORD *)v47;
        }
        else
        {
          uint64_t v71 = *v47;
          outlined copy of Data._Representation(*v47, v48);
          *(void *)(a1 + 64) = v71;
          *(void *)(a1 + 72) = v48;
        }
        *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
        uint64_t v72 = a2[12];
        *(void *)(a1 + 88) = a2[11];
        *(void *)(a1 + 96) = v72;
        swift_bridgeObjectRetain();
        break;
      case 6u:
        uint64_t v49 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v49;
        uint64_t v50 = a2[3];
        swift_bridgeObjectRetain();
        if (v50)
        {
          *(void *)(a1 + 16) = a2[2];
          *(void *)(a1 + 24) = v50;
          uint64_t v51 = a2[5];
          *(void *)(a1 + 32) = a2[4];
          *(void *)(a1 + 40) = v51;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v104 = *((_OWORD *)a2 + 2);
          *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
          *(_OWORD *)(a1 + 32) = v104;
        }
        uint64_t v105 = a2[7];
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = v105;
        uint64_t v106 = a2[8];
        uint64_t v107 = a2[9];
        *(void *)(a1 + 64) = v106;
        *(void *)(a1 + 72) = v107;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 7u:
      case 8u:
        uint64_t v52 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v52;
        *(void *)(a1 + 16) = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 9u:
        uint64_t v53 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v53;
        uint64_t v54 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v54;
        uint64_t v55 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v55;
        uint64_t v56 = a2 + 6;
        unint64_t v57 = a2[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v57 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 48) = *(_OWORD *)v56;
        }
        else
        {
          uint64_t v73 = *v56;
          outlined copy of Data._Representation(*v56, v57);
          *(void *)(a1 + 48) = v73;
          *(void *)(a1 + 56) = v57;
        }
        break;
      case 0xAu:
        uint64_t v58 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v58;
        uint64_t v59 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v59;
        uint64_t v60 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v60;
        uint64_t v61 = a2 + 6;
        unint64_t v62 = a2[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v62 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 48) = *(_OWORD *)v61;
        }
        else
        {
          uint64_t v74 = *v61;
          outlined copy of Data._Representation(*v61, v62);
          *(void *)(a1 + 48) = v74;
          *(void *)(a1 + 56) = v62;
        }
        uint64_t v75 = a2[9];
        *(void *)(a1 + 64) = a2[8];
        *(void *)(a1 + 72) = v75;
        uint64_t v76 = a2[11];
        *(void *)(a1 + 80) = a2[10];
        *(void *)(a1 + 88) = v76;
        *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 0xBu:
        *(void *)a1 = *a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
        uint64_t v63 = a2[4];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = v63;
        uint64_t v64 = a2[6];
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = v64;
        uint64_t v65 = a2[8];
        *(void *)(a1 + 56) = a2[7];
        *(void *)(a1 + 64) = v65;
        *(void *)(a1 + 72) = a2[9];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 0xCu:
        *(void *)a1 = *a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
        uint64_t v66 = a2[4];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = v66;
        uint64_t v67 = a2[6];
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = v67;
        uint64_t v68 = a2[8];
        *(void *)(a1 + 56) = a2[7];
        *(void *)(a1 + 64) = v68;
        uint64_t v69 = a2[10];
        *(void *)(a1 + 72) = a2[9];
        *(void *)(a1 + 80) = v69;
        uint64_t v70 = a2[12];
        *(void *)(a1 + 88) = a2[11];
        *(void *)(a1 + 96) = v70;
        *(void *)(a1 + 104) = a2[13];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v6;
        uint64_t v7 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v7;
        uint64_t v8 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v8;
        uint64_t v9 = a2[6];
        uint64_t v10 = a2[7];
        *(void *)(a1 + 48) = v9;
        *(void *)(a1 + 56) = v10;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for WorkflowDataModels(void *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_29;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_29;
    case 2:
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
      (*(void (**)(void *, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      uint64_t v4 = type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
      int v5 = (char *)a1 + *(int *)(v4 + 20);
      uint64_t v6 = type metadata accessor for CodableINInteraction();
      (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
      uint64_t v7 = (uint64_t)a1 + *(int *)(v4 + 24);
      uint64_t v8 = type metadata accessor for VisualProperty();
      if (!__swift_getEnumTagSinglePayload(v7, 1, v8)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
      }
      swift_bridgeObjectRelease();
      type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
      swift_bridgeObjectRelease();
      goto LABEL_29;
    case 3:
      swift_bridgeObjectRelease();
      uint64_t v9 = (char *)a1 + *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0) + 20);
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
      uint64_t v12 = v10;
      uint64_t v13 = (uint64_t)v9;
      goto LABEL_13;
    case 4:
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
      (*(void (**)(void *, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
      uint64_t v15 = type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
      uint64_t v16 = (char *)a1 + *(int *)(v15 + 20);
      uint64_t v17 = type metadata accessor for CodableINInteraction();
      (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
      uint64_t v18 = (uint64_t)a1 + *(int *)(v15 + 24);
      uint64_t v19 = type metadata accessor for VisualProperty();
      if (!__swift_getEnumTagSinglePayload(v18, 1, v19)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
      }
      swift_bridgeObjectRelease();
      uint64_t v20 = type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
      swift_bridgeObjectRelease();
      uint64_t v21 = (uint64_t)a1 + *(int *)(v20 + 24);
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
      uint64_t result = __swift_getEnumTagSinglePayload(v21, 1, v22);
      if (result) {
        return result;
      }
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8);
      uint64_t v13 = v21;
      uint64_t v12 = v22;
LABEL_13:
      return v11(v13, v12);
    case 5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v23 = a1[9];
      if (v23 >> 60 != 15) {
        outlined consume of Data._Representation(a1[8], v23);
      }
      goto LABEL_29;
    case 6:
      swift_bridgeObjectRelease();
      if (!a1[3]) {
        goto LABEL_2;
      }
      goto LABEL_27;
    case 7:
    case 8:
      goto LABEL_2;
    case 9:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v24 = a1[7];
      if (v24 >> 60 != 15)
      {
        uint64_t v26 = a1[6];
        return outlined consume of Data._Representation(v26, v24);
      }
      return result;
    case 10:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v25 = a1[7];
      if (v25 >> 60 != 15) {
        outlined consume of Data._Representation(a1[6], v25);
      }
      goto LABEL_2;
    case 11:
      swift_bridgeObjectRelease();
LABEL_27:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_2:
      swift_bridgeObjectRelease();
      goto LABEL_29;
    case 12:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_29:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for WorkflowDataModels(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v9 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v9;
      uint64_t v10 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v10;
      uint64_t v11 = *(void *)(a2 + 32);
      uint64_t v12 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v11;
      *(void *)(a1 + 40) = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 2u:
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
      uint64_t v14 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
      uint64_t v15 = v14[5];
      uint64_t v16 = a1 + v15;
      uint64_t v17 = a2 + v15;
      uint64_t v18 = type metadata accessor for CodableINInteraction();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
      uint64_t v19 = v14[6];
      uint64_t v20 = (void *)(a1 + v19);
      uint64_t v21 = (const void *)(a2 + v19);
      uint64_t v22 = type metadata accessor for VisualProperty();
      if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v22))
      {
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
        memcpy(v20, v21, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
        __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v22);
      }
      uint64_t v74 = v14[7];
      uint64_t v75 = (void *)(a1 + v74);
      uint64_t v76 = (void *)(a2 + v74);
      uint64_t v77 = v76[1];
      void *v75 = *v76;
      v75[1] = v77;
      uint64_t v78 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
      uint64_t v79 = *(int *)(v78 + 20);
      uint64_t v80 = (void *)(a1 + v79);
      uint64_t v81 = (void *)(a2 + v79);
      uint64_t v82 = v81[1];
      *uint64_t v80 = *v81;
      v80[1] = v82;
      uint64_t v83 = *(int *)(v78 + 24);
      uint64_t v84 = (void *)(a1 + v83);
      uint64_t v85 = (void *)(a2 + v83);
      uint64_t v86 = v85[1];
      *uint64_t v84 = *v85;
      v84[1] = v86;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 3u:
      uint64_t v24 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v24;
      uint64_t v25 = *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0) + 20);
      uint64_t v26 = a1 + v25;
      uint64_t v27 = a2 + v25;
      swift_bridgeObjectRetain();
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      break;
    case 4u:
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(a1, a2, v29);
      uint64_t v30 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
      uint64_t v31 = v30[5];
      uint64_t v32 = a1 + v31;
      uint64_t v33 = a2 + v31;
      uint64_t v34 = type metadata accessor for CodableINInteraction();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
      uint64_t v35 = v30[6];
      uint64_t v36 = (void *)(a1 + v35);
      uint64_t v37 = (const void *)(a2 + v35);
      uint64_t v38 = type metadata accessor for VisualProperty();
      if (__swift_getEnumTagSinglePayload((uint64_t)v37, 1, v38))
      {
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
        memcpy(v36, v37, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v38 - 8) + 16))(v36, v37, v38);
        __swift_storeEnumTagSinglePayload((uint64_t)v36, 0, 1, v38);
      }
      uint64_t v87 = v30[7];
      unint64_t v88 = (void *)(a1 + v87);
      uint64_t v89 = (void *)(a2 + v87);
      uint64_t v90 = v89[1];
      *unint64_t v88 = *v89;
      v88[1] = v90;
      uint64_t v91 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
      uint64_t v92 = v91[5];
      uint64_t v93 = (void *)(a1 + v92);
      unint64_t v94 = (void *)(a2 + v92);
      uint64_t v95 = v94[1];
      void *v93 = *v94;
      v93[1] = v95;
      uint64_t v96 = v91[6];
      uint64_t v97 = (void *)(a1 + v96);
      uint64_t v98 = (const void *)(a2 + v96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
      if (__swift_getEnumTagSinglePayload((uint64_t)v98, 1, v99))
      {
        uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
        memcpy(v97, v98, *(void *)(*(void *)(v100 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v99 - 8) + 16))(v97, v98, v99);
        __swift_storeEnumTagSinglePayload((uint64_t)v97, 0, 1, v99);
      }
      *(unsigned char *)(a1 + v91[7]) = *(unsigned char *)(a2 + v91[7]);
      break;
    case 5u:
      uint64_t v40 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v40;
      uint64_t v41 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v41;
      uint64_t v42 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v42;
      uint64_t v43 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v43;
      uint64_t v44 = (uint64_t *)(a2 + 64);
      unint64_t v45 = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v45 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 64) = *(_OWORD *)v44;
      }
      else
      {
        uint64_t v68 = *v44;
        outlined copy of Data._Representation(*v44, v45);
        *(void *)(a1 + 64) = v68;
        *(void *)(a1 + 72) = v45;
      }
      *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
      uint64_t v69 = *(void *)(a2 + 96);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = v69;
      swift_bridgeObjectRetain();
      break;
    case 6u:
      uint64_t v46 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v46;
      uint64_t v47 = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      if (v47)
      {
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v47;
        uint64_t v48 = *(void *)(a2 + 40);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = v48;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v101 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 32) = v101;
      }
      uint64_t v102 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v102;
      uint64_t v103 = *(void *)(a2 + 64);
      uint64_t v104 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = v103;
      *(void *)(a1 + 72) = v104;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 7u:
    case 8u:
      uint64_t v49 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v49;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 9u:
      uint64_t v50 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v50;
      uint64_t v51 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v51;
      uint64_t v52 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v52;
      uint64_t v53 = (uint64_t *)(a2 + 48);
      unint64_t v54 = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v54 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 48) = *(_OWORD *)v53;
      }
      else
      {
        uint64_t v70 = *v53;
        outlined copy of Data._Representation(*v53, v54);
        *(void *)(a1 + 48) = v70;
        *(void *)(a1 + 56) = v54;
      }
      break;
    case 0xAu:
      uint64_t v55 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v55;
      uint64_t v56 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v56;
      uint64_t v57 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v57;
      uint64_t v58 = (uint64_t *)(a2 + 48);
      unint64_t v59 = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v59 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 48) = *(_OWORD *)v58;
      }
      else
      {
        uint64_t v71 = *v58;
        outlined copy of Data._Representation(*v58, v59);
        *(void *)(a1 + 48) = v71;
        *(void *)(a1 + 56) = v59;
      }
      uint64_t v72 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v72;
      uint64_t v73 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v73;
      *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 0xBu:
      *(void *)a1 = *(void *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      uint64_t v60 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v60;
      uint64_t v61 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v61;
      uint64_t v62 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v62;
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 0xCu:
      *(void *)a1 = *(void *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      uint64_t v63 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v63;
      uint64_t v64 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v64;
      uint64_t v65 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v65;
      uint64_t v66 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = v66;
      uint64_t v67 = *(void *)(a2 + 96);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = v67;
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      uint64_t v5 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v5;
      uint64_t v6 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v6;
      uint64_t v7 = *(void *)(a2 + 48);
      uint64_t v8 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v7;
      *(void *)(a1 + 56) = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for WorkflowDataModels(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of WorkflowDataModels.CustomIntentModel(a1, (void (*)(void))type metadata accessor for WorkflowDataModels);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 2u:
        uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
        uint64_t v5 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
        uint64_t v6 = v5[5];
        uint64_t v7 = a1 + v6;
        uint64_t v8 = a2 + v6;
        uint64_t v9 = type metadata accessor for CodableINInteraction();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
        uint64_t v10 = v5[6];
        uint64_t v11 = (void *)(a1 + v10);
        uint64_t v12 = (const void *)(a2 + v10);
        uint64_t v13 = type metadata accessor for VisualProperty();
        if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
        {
          uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
          memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
          __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
        }
        uint64_t v40 = v5[7];
        uint64_t v41 = (void *)(a1 + v40);
        uint64_t v42 = (void *)(a2 + v40);
        *uint64_t v41 = *v42;
        v41[1] = v42[1];
        uint64_t v43 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
        uint64_t v44 = *(int *)(v43 + 20);
        unint64_t v45 = (void *)(a1 + v44);
        uint64_t v46 = (void *)(a2 + v44);
        *unint64_t v45 = *v46;
        v45[1] = v46[1];
        uint64_t v47 = *(int *)(v43 + 24);
        uint64_t v48 = (void *)(a1 + v47);
        uint64_t v49 = (void *)(a2 + v47);
        *uint64_t v48 = *v49;
        v48[1] = v49[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 3u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        uint64_t v15 = *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0) + 20);
        uint64_t v16 = a1 + v15;
        uint64_t v17 = a2 + v15;
        swift_bridgeObjectRetain();
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
        break;
      case 4u:
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
        uint64_t v20 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
        uint64_t v21 = v20[5];
        uint64_t v22 = a1 + v21;
        uint64_t v23 = a2 + v21;
        uint64_t v24 = type metadata accessor for CodableINInteraction();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
        uint64_t v25 = v20[6];
        uint64_t v26 = (void *)(a1 + v25);
        uint64_t v27 = (const void *)(a2 + v25);
        uint64_t v28 = type metadata accessor for VisualProperty();
        if (__swift_getEnumTagSinglePayload((uint64_t)v27, 1, v28))
        {
          uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
          memcpy(v26, v27, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
          __swift_storeEnumTagSinglePayload((uint64_t)v26, 0, 1, v28);
        }
        uint64_t v50 = v20[7];
        uint64_t v51 = (void *)(a1 + v50);
        uint64_t v52 = (void *)(a2 + v50);
        *uint64_t v51 = *v52;
        v51[1] = v52[1];
        uint64_t v53 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
        uint64_t v54 = v53[5];
        uint64_t v55 = (void *)(a1 + v54);
        uint64_t v56 = (void *)(a2 + v54);
        *uint64_t v55 = *v56;
        v55[1] = v56[1];
        uint64_t v57 = v53[6];
        uint64_t v58 = (void *)(a1 + v57);
        unint64_t v59 = (const void *)(a2 + v57);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
        if (__swift_getEnumTagSinglePayload((uint64_t)v59, 1, v60))
        {
          uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
          memcpy(v58, v59, *(void *)(*(void *)(v61 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(*(void *)(v60 - 8) + 16))(v58, v59, v60);
          __swift_storeEnumTagSinglePayload((uint64_t)v58, 0, 1, v60);
        }
        *(unsigned char *)(a1 + v53[7]) = *(unsigned char *)(a2 + v53[7]);
        break;
      case 5u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        uint64_t v30 = (uint64_t *)(a2 + 64);
        unint64_t v31 = *(void *)(a2 + 72);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v31 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 64) = *(_OWORD *)v30;
        }
        else
        {
          uint64_t v37 = *v30;
          outlined copy of Data._Representation(*v30, v31);
          *(void *)(a1 + 64) = v37;
          *(void *)(a1 + 72) = v31;
        }
        *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        swift_bridgeObjectRetain();
        break;
      case 6u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        uint64_t v32 = *(void *)(a2 + 24);
        swift_bridgeObjectRetain();
        if (v32)
        {
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v62 = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
          *(_OWORD *)(a1 + 32) = v62;
        }
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 7u:
      case 8u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 9u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        uint64_t v33 = (uint64_t *)(a2 + 48);
        unint64_t v34 = *(void *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v34 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 48) = *(_OWORD *)v33;
        }
        else
        {
          uint64_t v38 = *v33;
          outlined copy of Data._Representation(*v33, v34);
          *(void *)(a1 + 48) = v38;
          *(void *)(a1 + 56) = v34;
        }
        break;
      case 0xAu:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        uint64_t v35 = (uint64_t *)(a2 + 48);
        unint64_t v36 = *(void *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v36 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 48) = *(_OWORD *)v35;
        }
        else
        {
          uint64_t v39 = *v35;
          outlined copy of Data._Representation(*v35, v36);
          *(void *)(a1 + 48) = v39;
          *(void *)(a1 + 56) = v36;
        }
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 0xBu:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      case 0xCu:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        *(void *)(a1 + 104) = *(void *)(a2 + 104);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for WorkflowDataModels(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 4:
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v18 - 8) + 32))(a1, a2, v18);
      uint64_t v19 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
      uint64_t v20 = v19[5];
      uint64_t v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      uint64_t v23 = type metadata accessor for CodableINInteraction();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
      uint64_t v24 = v19[6];
      uint64_t v25 = (char *)a1 + v24;
      uint64_t v26 = (char *)a2 + v24;
      uint64_t v27 = type metadata accessor for VisualProperty();
      if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v27))
      {
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
        memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
        __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, v27);
      }
      *(_OWORD *)((char *)a1 + v19[7]) = *(_OWORD *)((char *)a2 + v19[7]);
      unint64_t v34 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
      *(_OWORD *)((char *)a1 + v34[5]) = *(_OWORD *)((char *)a2 + v34[5]);
      uint64_t v35 = v34[6];
      unint64_t v36 = (char *)a1 + v35;
      uint64_t v37 = (char *)a2 + v35;
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
      if (__swift_getEnumTagSinglePayload((uint64_t)v37, 1, v38))
      {
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
        memcpy(v36, v37, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v36, v37, v38);
        __swift_storeEnumTagSinglePayload((uint64_t)v36, 0, 1, v38);
      }
      *((unsigned char *)a1 + v34[7]) = *((unsigned char *)a2 + v34[7]);
      goto LABEL_17;
    case 3:
      *a1 = *a2;
      uint64_t v29 = *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0) + 20);
      uint64_t v30 = (char *)a1 + v29;
      unint64_t v31 = (char *)a2 + v29;
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32))(v30, v31, v32);
LABEL_17:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 2:
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      uint64_t v8 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
      uint64_t v9 = v8[5];
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for CodableINInteraction();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
      uint64_t v13 = v8[6];
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = type metadata accessor for VisualProperty();
      if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
        memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
        __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
      }
      *(_OWORD *)((char *)a1 + v8[7]) = *(_OWORD *)((char *)a2 + v8[7]);
      uint64_t v33 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
      *(_OWORD *)((char *)a1 + *(int *)(v33 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v33 + 20));
      *(_OWORD *)((char *)a1 + *(int *)(v33 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v33 + 24));
      goto LABEL_17;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

_OWORD *assignWithTake for WorkflowDataModels(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of WorkflowDataModels.CustomIntentModel((uint64_t)a1, (void (*)(void))type metadata accessor for WorkflowDataModels);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 4:
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v18 - 8) + 32))(a1, a2, v18);
        uint64_t v19 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
        uint64_t v20 = v19[5];
        uint64_t v21 = (char *)a1 + v20;
        uint64_t v22 = (char *)a2 + v20;
        uint64_t v23 = type metadata accessor for CodableINInteraction();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
        uint64_t v24 = v19[6];
        uint64_t v25 = (char *)a1 + v24;
        uint64_t v26 = (char *)a2 + v24;
        uint64_t v27 = type metadata accessor for VisualProperty();
        if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v27))
        {
          uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
          memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
          __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, v27);
        }
        *(_OWORD *)((char *)a1 + v19[7]) = *(_OWORD *)((char *)a2 + v19[7]);
        uint64_t v33 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
        *(_OWORD *)((char *)a1 + v33[5]) = *(_OWORD *)((char *)a2 + v33[5]);
        uint64_t v34 = v33[6];
        uint64_t v35 = (char *)a1 + v34;
        unint64_t v36 = (char *)a2 + v34;
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
        if (__swift_getEnumTagSinglePayload((uint64_t)v36, 1, v37))
        {
          uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
          memcpy(v35, v36, *(void *)(*(void *)(v38 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v35, v36, v37);
          __swift_storeEnumTagSinglePayload((uint64_t)v35, 0, 1, v37);
        }
        *((unsigned char *)a1 + v33[7]) = *((unsigned char *)a2 + v33[7]);
        goto LABEL_18;
      case 3:
        *a1 = *a2;
        uint64_t v29 = *(int *)(type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0) + 20);
        uint64_t v30 = (char *)a1 + v29;
        unint64_t v31 = (char *)a2 + v29;
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32))(v30, v31, v32);
LABEL_18:
        swift_storeEnumTagMultiPayload();
        return a1;
      case 2:
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        uint64_t v8 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
        uint64_t v9 = v8[5];
        uint64_t v10 = (char *)a1 + v9;
        uint64_t v11 = (char *)a2 + v9;
        uint64_t v12 = type metadata accessor for CodableINInteraction();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
        uint64_t v13 = v8[6];
        uint64_t v14 = (char *)a1 + v13;
        uint64_t v15 = (char *)a2 + v13;
        uint64_t v16 = type metadata accessor for VisualProperty();
        if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
          memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
          __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
        }
        *(_OWORD *)((char *)a1 + v8[7]) = *(_OWORD *)((char *)a2 + v8[7]);
        uint64_t v39 = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(0);
        *(_OWORD *)((char *)a1 + *(int *)(v39 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v39 + 20));
        *(_OWORD *)((char *)a1 + *(int *)(v39 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v39 + 24));
        goto LABEL_18;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t destructiveInjectEnumTag for WorkflowDataModels()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for WorkflowDataModels()
{
  uint64_t result = type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t destroy for WorkflowDataModels.ShowAlertModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for WorkflowDataModels.ShowAlertModel(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for WorkflowDataModels.ShowAlertModel(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for WorkflowDataModels.ShowAlertModel(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for WorkflowDataModels.ShowAlertModel()
{
}

uint64_t destroy for WorkflowDataModels.EnableTCCModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for WorkflowDataModels.EnableTCCModel(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for WorkflowDataModels.EnableTCCModel(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for WorkflowDataModels.EnableTCCModel(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.EnableTCCModel(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkflowDataModels.EnableTCCModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for WorkflowDataModels.EnableTCCModel()
{
}

uint64_t destroy for WorkflowDataModels.WatchModel(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for WorkflowDataModels.WatchModel(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  swift_bridgeObjectRetain();
  if (v5)
  {
    a1[2] = a2[2];
    a1[3] = v5;
    uint64_t v6 = a2[5];
    a1[4] = a2[4];
    a1[5] = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    *((_OWORD *)a1 + 2) = v7;
  }
  uint64_t v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  uint64_t v9 = a2[8];
  uint64_t v10 = a2[9];
  a1[8] = v9;
  a1[9] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for WorkflowDataModels.WatchModel(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + 2;
  uint64_t v5 = a2 + 2;
  uint64_t v6 = a2[3];
  if (a1[3])
  {
    if (v6)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      _s9SnippetUI21StandardActionHandlerVSgWOhTm_0((uint64_t)(a1 + 2), &demangling cache variable for type metadata for (String, String));
      long long v7 = *((_OWORD *)a2 + 2);
      *uint64_t v4 = *v5;
      *((_OWORD *)a1 + 2) = v7;
    }
  }
  else if (v6)
  {
    a1[2] = a2[2];
    a1[3] = a2[3];
    a1[4] = a2[4];
    a1[5] = a2[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 2);
    *uint64_t v4 = *v5;
    *((_OWORD *)a1 + 2) = v8;
  }
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy80_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for WorkflowDataModels.WatchModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 24)) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (!v5)
  {
    _s9SnippetUI21StandardActionHandlerVSgWOhTm_0(a1 + 16, &demangling cache variable for type metadata for (String, String));
LABEL_5:
    long long v7 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v7;
    goto LABEL_6;
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.WatchModel(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 80))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkflowDataModels.WatchModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

void type metadata accessor for WorkflowDataModels.WatchModel()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for WorkflowDataModels.CustomIntentModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for CodableINInteraction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for VisualProperty();
    if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
      memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
    }
    uint64_t v18 = a3[7];
    uint64_t v19 = (uint64_t *)((char *)a1 + v18);
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for WorkflowDataModels.CustomIntentModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = type metadata accessor for VisualProperty();
  if (!__swift_getEnumTagSinglePayload(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WorkflowDataModels.CustomIntentModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for VisualProperty();
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
  }
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WorkflowDataModels.CustomIntentModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for VisualProperty();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v14);
  int v16 = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14);
  if (!EnumTagSinglePayload)
  {
    uint64_t v17 = *(void *)(v14 - 8);
    if (!v16)
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 24))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
LABEL_7:
  uint64_t v19 = a3[7];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for WorkflowDataModels.CustomIntentModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for VisualProperty();
  if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
  }
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for WorkflowDataModels.CustomIntentModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for VisualProperty();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v14);
  int v16 = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14);
  if (!EnumTagSinglePayload)
  {
    uint64_t v17 = *(void *)(v14 - 8);
    if (!v16)
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 40))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
LABEL_7:
  uint64_t v19 = a3[7];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.CustomIntentModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_347BC);
}

uint64_t sub_347BC(uint64_t a1, uint64_t a2, int *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v6 + 84) == a2)
  {
    uint64_t v7 = OUTLINED_FUNCTION_128();
  }
  else
  {
    type metadata accessor for CodableINInteraction();
    OUTLINED_FUNCTION_1_0();
    if (*(_DWORD *)(v10 + 84) == a2)
    {
      uint64_t v8 = v9;
      uint64_t v11 = a3[5];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
      OUTLINED_FUNCTION_1_0();
      if (*(_DWORD *)(v13 + 84) != a2) {
        return OUTLINED_FUNCTION_40(*(void *)(a1 + a3[7] + 8));
      }
      uint64_t v8 = v12;
      uint64_t v11 = a3[6];
    }
    uint64_t v7 = a1 + v11;
  }

  return __swift_getEnumTagSinglePayload(v7, a2, v8);
}

uint64_t storeEnumTagSinglePayload for WorkflowDataModels.CustomIntentModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_348A4);
}

void sub_348A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v6 + 84) == a3
    || (type metadata accessor for CodableINInteraction(), OUTLINED_FUNCTION_1_0(), *(_DWORD *)(v7 + 84) == a3)
    || (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?),
        OUTLINED_FUNCTION_1_0(),
        *(_DWORD *)(v8 + 84) == a3))
  {
    OUTLINED_FUNCTION_130();
    __swift_storeEnumTagSinglePayload(v9, v10, v11, v12);
  }
  else
  {
    OUTLINED_FUNCTION_89(*(int *)(a4 + 28));
  }
}

void type metadata completion function for WorkflowDataModels.CustomIntentModel()
{
  type metadata accessor for CodableAceObject<SAIntentGroupLaunchAppWithIntent>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CodableINInteraction();
    if (v1 <= 0x3F)
    {
      type metadata accessor for VisualProperty?();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for CodableAceObject<SAIntentGroupLaunchAppWithIntent>()
{
  if (!lazy cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>)
  {
    type metadata accessor for SAIntentGroupLaunchAppWithIntent(255, &lazy cache variable for type metadata for SAIntentGroupLaunchAppWithIntent);
    unint64_t v0 = type metadata accessor for CodableAceObject();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
    }
  }
}

void type metadata accessor for VisualProperty?()
{
  if (!lazy cache variable for type metadata for VisualProperty?)
  {
    type metadata accessor for VisualProperty();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VisualProperty?);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for WorkflowDataModels.CustomIntentConfirmationModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
    uint64_t v9 = v8[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for CodableINInteraction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = v8[6];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for VisualProperty();
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
      memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
    }
    uint64_t v19 = v8[7];
    uint64_t v20 = (uint64_t *)((char *)a1 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = *(int *)(a3 + 20);
    uint64_t v24 = *(int *)(a3 + 24);
    uint64_t v25 = (uint64_t *)((char *)a1 + v23);
    uint64_t v26 = (uint64_t *)((char *)a2 + v23);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = (uint64_t *)((char *)a1 + v24);
    uint64_t v29 = (uint64_t *)((char *)a2 + v24);
    uint64_t v30 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for WorkflowDataModels.CustomIntentConfirmationModel(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t v3 = type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v4 = a1 + *(int *)(v3 + 20);
  uint64_t v5 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(v3 + 24);
  uint64_t v7 = type metadata accessor for VisualProperty();
  if (!__swift_getEnumTagSinglePayload(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WorkflowDataModels.CustomIntentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for VisualProperty();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
  }
  uint64_t v17 = v7[7];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = *(int *)(a3 + 20);
  uint64_t v22 = *(int *)(a3 + 24);
  uint64_t v23 = (void *)(a1 + v21);
  uint64_t v24 = (void *)(a2 + v21);
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  uint64_t v26 = (void *)(a1 + v22);
  uint64_t v27 = (void *)(a2 + v22);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WorkflowDataModels.CustomIntentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for VisualProperty();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v15);
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15);
  if (!EnumTagSinglePayload)
  {
    uint64_t v18 = *(void *)(v15 - 8);
    if (!v17)
    {
      (*(void (**)(void *, const void *, uint64_t))(v18 + 24))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v18 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
LABEL_7:
  uint64_t v20 = v7[7];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = *(int *)(a3 + 20);
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = *(int *)(a3 + 24);
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  *uint64_t v27 = *v28;
  v27[1] = v28[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for WorkflowDataModels.CustomIntentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for VisualProperty();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
  }
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  uint64_t v17 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  return a1;
}

uint64_t assignWithTake for WorkflowDataModels.CustomIntentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for VisualProperty();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v15);
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15);
  if (!EnumTagSinglePayload)
  {
    uint64_t v18 = *(void *)(v15 - 8);
    if (!v17)
    {
      (*(void (**)(void *, const void *, uint64_t))(v18 + 40))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v18 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
LABEL_7:
  uint64_t v20 = v7[7];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = *(int *)(a3 + 20);
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (uint64_t *)(a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *uint64_t v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = *(int *)(a3 + 24);
  unint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (uint64_t *)(a2 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *unint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.CustomIntentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_356F4);
}

uint64_t sub_356F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v7 + 84) != a2) {
    return OUTLINED_FUNCTION_40(*(void *)(a1 + *(int *)(a3 + 20) + 8));
  }

  return __swift_getEnumTagSinglePayload(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for WorkflowDataModels.CustomIntentConfirmationModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_3578C);
}

void sub_3578C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v6 + 84) == a3)
  {
    OUTLINED_FUNCTION_130();
    __swift_storeEnumTagSinglePayload(v7, v8, v9, v10);
  }
  else
  {
    OUTLINED_FUNCTION_89(*(int *)(a4 + 20));
  }
}

uint64_t type metadata completion function for WorkflowDataModels.CustomIntentConfirmationModel()
{
  uint64_t result = type metadata accessor for WorkflowDataModels.CustomIntentModel(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for WorkflowDataModels.CustomIntentHandledModel(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
    uint64_t v9 = v8[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for CodableINInteraction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = v8[6];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for VisualProperty();
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
      memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
    }
    uint64_t v19 = v8[7];
    uint64_t v20 = (void *)((char *)a1 + v19);
    uint64_t v21 = (void *)((char *)a2 + v19);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = a3[5];
    uint64_t v24 = a3[6];
    uint64_t v25 = (void *)((char *)a1 + v23);
    uint64_t v26 = (void *)((char *)a2 + v23);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = (char *)a1 + v24;
    uint64_t v29 = (char *)a2 + v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
    if (__swift_getEnumTagSinglePayload((uint64_t)v29, 1, v30))
    {
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
      memcpy(v28, v29, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
      __swift_storeEnumTagSinglePayload((uint64_t)v28, 0, 1, v30);
    }
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  }
  return a1;
}

uint64_t destroy for WorkflowDataModels.CustomIntentHandledModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v6 = a1 + *(int *)(v5 + 20);
  uint64_t v7 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = a1 + *(int *)(v5 + 24);
  uint64_t v9 = type metadata accessor for VisualProperty();
  if (!__swift_getEnumTagSinglePayload(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = a1 + *(int *)(a2 + 24);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
  uint64_t result = __swift_getEnumTagSinglePayload(v10, 1, v11);
  if (!result)
  {
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
    return v13(v10, v11);
  }
  return result;
}

uint64_t initializeWithCopy for WorkflowDataModels.CustomIntentHandledModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for VisualProperty();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
  }
  uint64_t v17 = v7[7];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = a3[5];
  uint64_t v22 = a3[6];
  uint64_t v23 = (void *)(a1 + v21);
  uint64_t v24 = (void *)(a2 + v21);
  uint64_t v25 = v24[1];
  *uint64_t v23 = *v24;
  v23[1] = v25;
  uint64_t v26 = (void *)(a1 + v22);
  uint64_t v27 = (const void *)(a2 + v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
  if (__swift_getEnumTagSinglePayload((uint64_t)v27, 1, v28))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
    memcpy(v26, v27, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
    __swift_storeEnumTagSinglePayload((uint64_t)v26, 0, 1, v28);
  }
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithCopy for WorkflowDataModels.CustomIntentHandledModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for VisualProperty();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v15);
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15);
  if (EnumTagSinglePayload)
  {
    if (!v17)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v18 = *(void *)(v15 - 8);
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v13, v15);
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v18 + 24))(v13, v14, v15);
LABEL_7:
  uint64_t v20 = v7[7];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[5];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[6];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (const void *)(a2 + v26);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
  int v30 = __swift_getEnumTagSinglePayload((uint64_t)v27, 1, v29);
  int v31 = __swift_getEnumTagSinglePayload((uint64_t)v28, 1, v29);
  if (!v30)
  {
    uint64_t v32 = *(void *)(v29 - 8);
    if (!v31)
    {
      (*(void (**)(void *, const void *, uint64_t))(v32 + 24))(v27, v28, v29);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v32 + 8))(v27, v29);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
    memcpy(v27, v28, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
  __swift_storeEnumTagSinglePayload((uint64_t)v27, 0, 1, v29);
LABEL_13:
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for WorkflowDataModels.CustomIntentHandledModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for VisualProperty();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
  }
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  uint64_t v17 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (const void *)(a2 + v17);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
  if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20))
  {
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
    memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
    __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v20);
  }
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for WorkflowDataModels.CustomIntentHandledModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for VisualProperty();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v15);
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15);
  if (EnumTagSinglePayload)
  {
    if (!v17)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v18 = *(void *)(v15 - 8);
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v13, v15);
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v18 + 40))(v13, v14, v15);
LABEL_7:
  uint64_t v20 = v7[7];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[5];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (uint64_t *)(a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *uint64_t v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[6];
  int v31 = (void *)(a1 + v30);
  uint64_t v32 = (const void *)(a2 + v30);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
  int v34 = __swift_getEnumTagSinglePayload((uint64_t)v31, 1, v33);
  int v35 = __swift_getEnumTagSinglePayload((uint64_t)v32, 1, v33);
  if (!v34)
  {
    uint64_t v36 = *(void *)(v33 - 8);
    if (!v35)
    {
      (*(void (**)(void *, const void *, uint64_t))(v36 + 40))(v31, v32, v33);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v36 + 8))(v31, v33);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
    memcpy(v31, v32, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v33 - 8) + 32))(v31, v32, v33);
  __swift_storeEnumTagSinglePayload((uint64_t)v31, 0, 1, v33);
LABEL_13:
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.CustomIntentHandledModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_368AC);
}

uint64_t sub_368AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v6 + 84) == a2)
  {
    uint64_t v7 = OUTLINED_FUNCTION_128();
  }
  else
  {
    if (a2 == 0x7FFFFFFF) {
      return OUTLINED_FUNCTION_40(*(void *)(a1 + *(int *)(a3 + 20) + 8));
    }
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
    uint64_t v7 = a1 + *(int *)(a3 + 24);
  }

  return __swift_getEnumTagSinglePayload(v7, a2, v8);
}

uint64_t storeEnumTagSinglePayload for WorkflowDataModels.CustomIntentHandledModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_36968);
}

void sub_36968(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v6 + 84) != a3)
  {
    if (a3 == 0x7FFFFFFF)
    {
      OUTLINED_FUNCTION_89(*(int *)(a4 + 20));
      return;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
  }
  OUTLINED_FUNCTION_130();

  __swift_storeEnumTagSinglePayload(v7, v8, v9, v10);
}

void type metadata completion function for WorkflowDataModels.CustomIntentHandledModel()
{
  type metadata accessor for WorkflowDataModels.CustomIntentModel(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CodableAceObject<SAStartLocalRequest>?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for CodableAceObject<SAStartLocalRequest>?()
{
  if (!lazy cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableAceObject<SAStartLocalRequest>);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CodableAceObject<SAStartLocalRequest>?);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for WorkflowDataModels.CustomIntentErrorModel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    swift_bridgeObjectRetain();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return a1;
}

uint64_t destroy for WorkflowDataModels.CustomIntentErrorModel(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for WorkflowDataModels.CustomIntentErrorModel(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  swift_bridgeObjectRetain();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

void *assignWithCopy for WorkflowDataModels.CustomIntentErrorModel(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for WorkflowDataModels.CustomIntentErrorModel(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for WorkflowDataModels.CustomIntentErrorModel(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.CustomIntentErrorModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_36EDC);
}

uint64_t sub_36EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF) {
    return OUTLINED_FUNCTION_40(*(void *)(a1 + 8));
  }
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  uint64_t v8 = a1 + *(int *)(a3 + 20);

  return __swift_getEnumTagSinglePayload(v8, a2, v7);
}

uint64_t storeEnumTagSinglePayload for WorkflowDataModels.CustomIntentErrorModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_36F70);
}

uint64_t sub_36F70(uint64_t result, int a2, int a3)
{
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
    OUTLINED_FUNCTION_130();
    return __swift_storeEnumTagSinglePayload(v3, v4, v5, v6);
  }
  return result;
}

void type metadata completion function for WorkflowDataModels.CustomIntentErrorModel()
{
  type metadata accessor for CodableAceObject<SAIntentGroupLaunchAppWithIntent>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t destroy for WorkflowDataModels.ConfirmActionModel(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(a1 + 64), v2);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WorkflowDataModels.ConfirmActionModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = (uint64_t *)(a2 + 64);
  unint64_t v9 = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v10 = *v8;
    outlined copy of Data._Representation(*v8, v9);
    *(void *)(a1 + 64) = v10;
    *(void *)(a1 + 72) = v9;
  }
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v11;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WorkflowDataModels.ConfirmActionModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t *)(a2 + 64);
  unint64_t v5 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      outlined copy of Data._Representation(*v4, *(void *)(a2 + 72));
      uint64_t v8 = *(void *)(a1 + 64);
      unint64_t v9 = *(void *)(a1 + 72);
      *(void *)(a1 + 64) = v7;
      *(void *)(a1 + 72) = v5;
      outlined consume of Data._Representation(v8, v9);
      goto LABEL_8;
    }
    outlined destroy of Data(a1 + 64);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  uint64_t v6 = *v4;
  outlined copy of Data._Representation(*v4, *(void *)(a2 + 72));
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v5;
LABEL_8:
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy104_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x68uLL);
}

uint64_t assignWithTake for WorkflowDataModels.ConfirmActionModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = (void *)(a2 + 64);
  unint64_t v9 = *(void *)(a1 + 72);
  if (v9 >> 60 != 15)
  {
    unint64_t v10 = *(void *)(a2 + 72);
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *(void *)(a1 + 64);
      *(void *)(a1 + 64) = *v8;
      *(void *)(a1 + 72) = v10;
      outlined consume of Data._Representation(v11, v9);
      goto LABEL_6;
    }
    outlined destroy of Data(a1 + 64);
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v8;
LABEL_6:
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v12 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v12;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.ConfirmActionModel(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 104))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkflowDataModels.ConfirmActionModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for WorkflowDataModels.ConfirmActionModel()
{
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void type metadata accessor for WorkflowDataModels.DisambiguateItemsModel()
{
}

uint64_t destroy for WorkflowDataModels.DisambiguateItemsModel()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for WorkflowDataModels.DisambiguateItemsModel(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WorkflowDataModels.DisambiguateItemsModel(void *a1, void *a2)
{
  OUTLINED_FUNCTION_144(a1, a2);
  *(void *)(v3 + 8) = *(void *)(v4 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v3 + 16) = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t assignWithTake for WorkflowDataModels.DisambiguateItemsModel(void *a1, void *a2)
{
  OUTLINED_FUNCTION_144(a1, a2);
  swift_bridgeObjectRelease();
  *(_OWORD *)(v3 + 8) = *(_OWORD *)(v2 + 8);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.DisambiguateItemsModel(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkflowDataModels.DisambiguateItemsModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for WorkflowDataModels.DisambiguateSmartPromptItemsModel()
{
}

uint64_t destroy for WorkflowDataModels.InvocationCommand(uint64_t a1)
{
  return outlined consume of WorkflowDataModels.InvocationCommand(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t initializeWithCopy for WorkflowDataModels.InvocationCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  outlined copy of WorkflowDataModels.InvocationCommand(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for WorkflowDataModels.InvocationCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  outlined copy of WorkflowDataModels.InvocationCommand(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of WorkflowDataModels.InvocationCommand(v7, v8, v9, v10);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for WorkflowDataModels.InvocationCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of WorkflowDataModels.InvocationCommand(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.InvocationCommand(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 25))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WorkflowDataModels.InvocationCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for WorkflowDataModels.InvocationCommand(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t destructiveInjectEnumTag for WorkflowDataModels.InvocationCommand(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

void type metadata accessor for WorkflowDataModels.InvocationCommand()
{
}

uint64_t ObjC metadata update function for WorkflowDataModels.DisambiguationItemModel()
{
  return type metadata accessor for WorkflowDataModels.DisambiguationItemModel(0);
}

void type metadata completion function for WorkflowDataModels.DisambiguationItemModel()
{
  type metadata accessor for VisualProperty?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for WorkflowDataModels.LinkActionModel()
{
}

void type metadata accessor for WorkflowDataModels.LinkConfirmationModel()
{
}

void type metadata accessor for WorkflowDataModels.AutoShortcutFirstRunModel()
{
}

unint64_t destroy for WatchViewType(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for WatchViewType(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    uint64_t v4 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for WatchViewType(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for WatchViewType(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WatchViewType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for WatchViewType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for WatchViewType(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for WatchViewType(void *result, int a2)
{
  if (a2 < 0)
  {
    result[2] = 0;
    result[3] = 0;
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

void type metadata accessor for WatchViewType()
{
}

unsigned char *destructiveInjectEnumTag for WatchViewType.CodingKeys(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

void *type metadata accessor for WatchViewType.CodingKeys()
{
  return &unk_5AF28;
}

void *type metadata accessor for WatchViewType.ConfirmationCodingKeys()
{
  return &unk_5AFB8;
}

void *type metadata accessor for WatchViewType.HandledCodingKeys()
{
  return &unk_5AFD8;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF4)
  {
    if (a2 + 12 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 12) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 13;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v5 = v6 - 13;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for WorkflowDataModels.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x37DCCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

void *type metadata accessor for WorkflowDataModels.CodingKeys()
{
  return &unk_5B068;
}

void *type metadata accessor for WorkflowDataModels.ShowAlertViewCodingKeys()
{
  return &unk_5B0F8;
}

void *type metadata accessor for WorkflowDataModels.EnableTCCViewCodingKeys()
{
  return &unk_5B188;
}

void *type metadata accessor for WorkflowDataModels.CustomIntentConfirmationViewCodingKeys()
{
  return &unk_5B218;
}

void *type metadata accessor for WorkflowDataModels.CustomIntentErrorViewCodingKeys()
{
  return &unk_5B2A8;
}

void *type metadata accessor for WorkflowDataModels.CustomIntentHandledViewCodingKeys()
{
  return &unk_5B338;
}

void *type metadata accessor for WorkflowDataModels.ConfirmActionViewCodingKeys()
{
  return &unk_5B3C8;
}

void *type metadata accessor for WorkflowDataModels.WatchViewCodingKeys()
{
  return &unk_5B458;
}

void *type metadata accessor for WorkflowDataModels.DisambiguateItemsViewCodingKeys()
{
  return &unk_5B4E8;
}

void *type metadata accessor for WorkflowDataModels.DisambiguateSmartPromptItemsViewCodingKeys()
{
  return &unk_5B578;
}

void *type metadata accessor for WorkflowDataModels.LinkActionViewCodingKeys()
{
  return &unk_5B608;
}

void *type metadata accessor for WorkflowDataModels.LinkConfirmationViewCodingKeys()
{
  return &unk_5B698;
}

void *type metadata accessor for WorkflowDataModels.AutoShortcutsAppEnablementViewCodingKeys()
{
  return &unk_5B728;
}

void *type metadata accessor for WorkflowDataModels.AutoShortcutFirstRunViewCodingKeys()
{
  return &unk_5B7B8;
}

void *type metadata accessor for WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys()
{
  return &unk_5B848;
}

void *type metadata accessor for WorkflowDataModels.LinkConfirmationModel.CodingKeys()
{
  return &unk_5B8D8;
}

void *type metadata accessor for WorkflowDataModels.LinkActionModel.CodingKeys()
{
  return &unk_5B968;
}

void *type metadata accessor for WorkflowDataModels.DisambiguationItemModel.CodingKeys()
{
  return &unk_5B9F8;
}

void *type metadata accessor for WorkflowDataModels.InvocationCommand.CodingKeys()
{
  return &unk_5BA88;
}

void *type metadata accessor for WorkflowDataModels.InvocationCommand.DirectInvocationWithDataCodingKeys()
{
  return &unk_5BB18;
}

void *type metadata accessor for WorkflowDataModels.InvocationCommand.DirectInvocationWithStringCodingKeys()
{
  return &unk_5BBA8;
}

unsigned char *storeEnumTagSinglePayload for WorkflowDataModels.ShowAlertViewCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x37FF4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for WorkflowDataModels.InvocationCommand.StartRequestCodingKeys()
{
  return &unk_5BC38;
}

void *type metadata accessor for WorkflowDataModels.DisambiguateSmartPromptItemsModel.CodingKeys()
{
  return &unk_5BCC8;
}

void *type metadata accessor for WorkflowDataModels.DisambiguateItemsModel.CodingKeys()
{
  return &unk_5BD58;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.ConfirmActionModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v5 = v6 - 7;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for WorkflowDataModels.ConfirmActionModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x381A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void *type metadata accessor for WorkflowDataModels.ConfirmActionModel.CodingKeys()
{
  return &unk_5BDE8;
}

uint64_t getEnumTagSinglePayload for WatchViewType.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return OUTLINED_FUNCTION_118(-1);
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return OUTLINED_FUNCTION_118((*a1 | (v4 << 8)) - 2);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return OUTLINED_FUNCTION_118((*a1 | (v4 << 8)) - 2);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return OUTLINED_FUNCTION_118((*a1 | (v4 << 8)) - 2);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return OUTLINED_FUNCTION_118(v8);
}

unsigned char *storeEnumTagSinglePayload for WatchViewType.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_117((uint64_t)result, v6);
        break;
      case 2:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_113((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x38318);
      case 4:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_115((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          unint64_t result = OUTLINED_FUNCTION_116(result, a2 + 1);
        break;
    }
  }
  return result;
}

void *type metadata accessor for WorkflowDataModels.CustomIntentErrorModel.CodingKeys()
{
  return &unk_5BE78;
}

void *type metadata accessor for WorkflowDataModels.CustomIntentHandledModel.CodingKeys()
{
  return &unk_5BF08;
}

void *type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel.CodingKeys()
{
  return &unk_5BF98;
}

void *type metadata accessor for WorkflowDataModels.CustomIntentModel.CodingKeys()
{
  return &unk_5C028;
}

void *type metadata accessor for WorkflowDataModels.WatchModel.CodingKeys()
{
  return &unk_5C0B8;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return OUTLINED_FUNCTION_118(-1);
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return OUTLINED_FUNCTION_118((*a1 | (v4 << 8)) - 3);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return OUTLINED_FUNCTION_118((*a1 | (v4 << 8)) - 3);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return OUTLINED_FUNCTION_118((*a1 | (v4 << 8)) - 3);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return OUTLINED_FUNCTION_118(v8);
}

unsigned char *storeEnumTagSinglePayload for WorkflowDataModels.AutoShortcutFirstRunModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_117((uint64_t)result, v6);
        break;
      case 2:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_113((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x384D0);
      case 4:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_115((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          unint64_t result = OUTLINED_FUNCTION_116(result, a2 + 2);
        break;
    }
  }
  return result;
}

void *type metadata accessor for WorkflowDataModels.EnableTCCModel.CodingKeys()
{
  return &unk_5C148;
}

uint64_t getEnumTagSinglePayload for WorkflowDataModels.LinkConfirmationModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return OUTLINED_FUNCTION_118(-1);
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return OUTLINED_FUNCTION_118((*a1 | (v4 << 8)) - 4);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return OUTLINED_FUNCTION_118((*a1 | (v4 << 8)) - 4);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return OUTLINED_FUNCTION_118((*a1 | (v4 << 8)) - 4);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return OUTLINED_FUNCTION_118(v8);
}

unsigned char *storeEnumTagSinglePayload for WorkflowDataModels.LinkConfirmationModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_117((uint64_t)result, v6);
        break;
      case 2:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_113((uint64_t)result, v6);
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x38648);
      case 4:
        unint64_t result = (unsigned char *)OUTLINED_FUNCTION_115((uint64_t)result, v6);
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          unint64_t result = OUTLINED_FUNCTION_116(result, a2 + 3);
        break;
    }
  }
  return result;
}

void *type metadata accessor for WorkflowDataModels.ShowAlertModel.CodingKeys()
{
  return &unk_5C1D8;
}

uint64_t OUTLINED_FUNCTION_4_6()
{
  return v0;
}

void *OUTLINED_FUNCTION_7_4()
{
  return __swift_project_boxed_opaque_existential_1(v0, v0[3]);
}

uint64_t OUTLINED_FUNCTION_8_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_2()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_12_2()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t OUTLINED_FUNCTION_15_1()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_16_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_17_0()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

void OUTLINED_FUNCTION_22(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

uint64_t OUTLINED_FUNCTION_23()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25()
{
  return v0;
}

void OUTLINED_FUNCTION_26()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t OUTLINED_FUNCTION_31()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_32()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_33()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_34()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_35@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 96) = a1;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_40@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF) {
    LODWORD(a1) = -1;
  }
  return (a1 + 1);
}

uint64_t OUTLINED_FUNCTION_41()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_43()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_45()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_52()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

void *OUTLINED_FUNCTION_54()
{
  uint64_t v2 = v0[3];
  return __swift_project_boxed_opaque_existential_1(v0, v2);
}

uint64_t OUTLINED_FUNCTION_55()
{
  type metadata accessor for WorkflowDataModels(0);
  return v0;
}

uint64_t OUTLINED_FUNCTION_57()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void OUTLINED_FUNCTION_58()
{
  *(unsigned char *)(v0 - 67) = 2;
}

uint64_t OUTLINED_FUNCTION_59()
{
  __swift_destroy_boxed_opaque_existential_1(v0);
  return swift_bridgeObjectRelease();
}

void *OUTLINED_FUNCTION_60()
{
  return __swift_project_boxed_opaque_existential_1(v0, v1);
}

uint64_t OUTLINED_FUNCTION_61()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_62()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_63()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_64()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_66@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  return result;
}

void OUTLINED_FUNCTION_67()
{
  *(unsigned char *)(v0 - 66) = 1;
}

uint64_t OUTLINED_FUNCTION_68()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_69()
{
  return 0;
}

void OUTLINED_FUNCTION_70(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 112) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_71()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_72()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_77()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_79()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_80(uint64_t a1)
{
  *(void *)(v2 - 128) = a1;
  *(void *)(v2 - 120) = v1;
  *(unsigned char *)(v2 - 96) = 2;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_82()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_83()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_84()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_85()
{
  return v0;
}

void OUTLINED_FUNCTION_89(uint64_t a1@<X8>)
{
  *(void *)(v2 + a1 + 8) = (v1 - 1);
}

uint64_t OUTLINED_FUNCTION_90()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_91()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t OUTLINED_FUNCTION_93()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_94()
{
  return *(void *)(v0 - 152);
}

uint64_t OUTLINED_FUNCTION_96()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_97(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t OUTLINED_FUNCTION_98()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_99@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return 0;
}

uint64_t OUTLINED_FUNCTION_100()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_101()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_102@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_103(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return static ImageElement.appIcon(_:imageStyle:idioms:)(a10, a11, v11, a1);
}

uint64_t OUTLINED_FUNCTION_105()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_107()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_108()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_109()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_111(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_task_switch(a1, a2, a3);
}

__n128 OUTLINED_FUNCTION_112@<Q0>(unint64_t a1@<X8>, __n128 a2@<Q0>)
{
  *uint64_t v3 = a2;
  v3[1].n128_u64[0] = a1;
  v3[1].n128_u64[1] = v2;
  __n128 result = *(__n128 *)(v4 - 176);
  v3[2] = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_113@<X0>(uint64_t result@<X0>, __int16 a2@<W8>)
{
  *(_WORD *)(result + 1) = a2;
  return result;
}

void OUTLINED_FUNCTION_114(uint64_t a1@<X8>)
{
  *(void *)(v1 - 280) = a1;
}

uint64_t OUTLINED_FUNCTION_115@<X0>(uint64_t result@<X0>, int a2@<W8>)
{
  *(_DWORD *)(result + 1) = a2;
  return result;
}

unsigned char *OUTLINED_FUNCTION_116@<X0>(unsigned char *result@<X0>, char a2@<W8>)
{
  *__n128 result = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_117@<X0>(uint64_t result@<X0>, char a2@<W8>)
{
  *(unsigned char *)(result + 1) = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_118@<X0>(int a1@<W8>)
{
  return (a1 + 1);
}

uint64_t OUTLINED_FUNCTION_122()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_124(uint64_t result)
{
  uint64_t v4 = (void *)(v3 + *(int *)(result + 20));
  *uint64_t v4 = v2;
  v4[1] = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_125()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_126()
{
  *(unsigned char *)(v0 - 66) = 1;
  return v0 - 66;
}

uint64_t OUTLINED_FUNCTION_127()
{
  *(unsigned char *)(v0 - 65) = 0;
  return v0 - 65;
}

uint64_t OUTLINED_FUNCTION_128()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_129(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  return dispatch thunk of DeviceState.isWatch.getter();
}

uint64_t OUTLINED_FUNCTION_132()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

unint64_t OUTLINED_FUNCTION_133@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, unint64_t a8@<X7>, unint64_t a9@<X8>, __n128 a10@<Q0>)
{
  v11[6].n128_u64[0] = a9;
  v11[6].n128_u64[1] = v10;
  v11[5] = a10;
  v11[4].n128_u64[0] = a7;
  v11[4].n128_u64[1] = a8;
  v11[3].n128_u64[0] = a5;
  v11[3].n128_u64[1] = a6;
  v11[2].n128_u64[0] = a3;
  v11[2].n128_u64[1] = a4;
  v11[1].n128_u64[0] = result;
  v11[1].n128_u64[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_134()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_135()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_137()
{
  return outlined consume of WatchViewType(v0, v1);
}

uint64_t OUTLINED_FUNCTION_138()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_139()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_140()
{
  return v0 - 72;
}

uint64_t OUTLINED_FUNCTION_141()
{
  return v0 - 96;
}

uint64_t OUTLINED_FUNCTION_142()
{
  return v0 - 96;
}

uint64_t OUTLINED_FUNCTION_143()
{
  return v0;
}

void *OUTLINED_FUNCTION_144(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void *OUTLINED_FUNCTION_145(void *a1)
{
  return __swift_project_boxed_opaque_existential_1(a1, v1);
}

uint64_t OUTLINED_FUNCTION_147()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_148()
{
  return v0;
}

uint64_t DisambiguateSmartPromptItemsView.model.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for DisambiguateSmartPromptItemsView() + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for DisambiguateSmartPromptItemsView()
{
  uint64_t result = type metadata singleton initialization cache for DisambiguateSmartPromptItemsView;
  if (!type metadata singleton initialization cache for DisambiguateSmartPromptItemsView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t DisambiguateSmartPromptItemsView.center(anyView:)()
{
  static VerticalAlignment.center.getter();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(Spacer, AnyView, Spacer)>>);
  lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(Spacer, AnyView, Spacer)>> and conformance HStack<A>, &demangling cache variable for type metadata for HStack<TupleView<(Spacer, AnyView, Spacer)>>);
  uint64_t v0 = View.eraseToAnyView()();
  swift_release();
  return v0;
}

uint64_t DisambiguateSmartPromptItemsView.createButton(item:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DisambiguateSmartPromptItemsView();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = *(void *)(a1 + 24);
  v13[0] = *(void *)(a1 + 16);
  v13[1] = v9;
  outlined init with copy of DisambiguateSmartPromptItemsView(v3, (uint64_t)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  outlined init with take of DisambiguateSmartPromptItemsView((uint64_t)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10);
  a2[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Text>);
  a2[4] = lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>, &demangling cache variable for type metadata for Button<Text>);
  __swift_allocate_boxed_opaque_existential_1(a2);
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  swift_retain();
  return Button<>.init<A>(_:action:)();
}

uint64_t closure #1 in DisambiguateSmartPromptItemsView.createButton(item:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StandardActionHandler?);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ActionHandler.wrappedValue.getter();
  static DisambiguateItemsView.performAction(item:actionHandler:)(a1, (uint64_t)v4);
  return outlined destroy of StandardActionHandler?((uint64_t)v4, &demangling cache variable for type metadata for StandardActionHandler?);
}

uint64_t DisambiguateSmartPromptItemsView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DisambiguateSmartPromptItemsView();
  uint64_t v4 = v3 - 8;
  uint64_t v51 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v52 = v5;
  uint64_t v53 = (uint64_t)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ComponentStack<ForEach<[WorkflowDataModels.DisambiguationItemModel], ObjectIdentifier, AnyView>>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v56 = v6;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v55 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v54 = (char *)&v45 - v10;
  uint64_t v11 = type metadata accessor for SimpleItemRichView();
  OUTLINED_FUNCTION_0_1();
  uint64_t v49 = v12;
  __chkstk_darwin(v13);
  uint64_t v48 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<SimpleItemRichView, _EnvironmentKeyWritingModifier<TextAlignment>>);
  OUTLINED_FUNCTION_2();
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<SimpleItemRichView, _EnvironmentKeyWritingModifier<TextAlignment>>?);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v45 - v23;
  uint64_t v25 = 1;
  if (*(void *)(v1 + *(int *)(v4 + 28) + 8))
  {
    String.asAnyView()();
    uint64_t v26 = v11;
    uint64_t v46 = v18;
    uint64_t v27 = DisambiguateSmartPromptItemsView.center(anyView:)();
    uint64_t v47 = a1;
    uint64_t v28 = v27;
    swift_release();
    uint64_t v83 = &protocol witness table for AnyView;
    uint64_t v82 = &type metadata for AnyView;
    uint64_t v81 = v28;
    uint64_t v80 = 0;
    long long v78 = 0u;
    long long v79 = 0u;
    uint64_t v77 = 0;
    long long v75 = 0u;
    long long v76 = 0u;
    uint64_t v74 = 0;
    long long v72 = 0u;
    long long v73 = 0u;
    uint64_t v71 = 0;
    long long v69 = 0u;
    long long v70 = 0u;
    uint64_t v68 = 0;
    long long v66 = 0u;
    long long v67 = 0u;
    uint64_t v65 = 0;
    long long v63 = 0u;
    long long v64 = 0u;
    uint64_t v62 = 0;
    long long v60 = 0u;
    long long v61 = 0u;
    uint64_t v59 = 0;
    long long v57 = 0u;
    long long v58 = 0u;
    uint64_t v29 = v48;
    SimpleItemRichView.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:)();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v31 = v49;
    uint64_t v32 = (uint64_t)v46;
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v46, v29, v26);
    uint64_t v33 = v32 + *(int *)(v15 + 36);
    *(void *)uint64_t v33 = KeyPath;
    a1 = v47;
    *(unsigned char *)(v33 + 8) = 1;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v29, v26);
    outlined init with take of ModifiedContent<SimpleItemRichView, _EnvironmentKeyWritingModifier<TextAlignment>>(v32, (uint64_t)v24);
    uint64_t v25 = 0;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v24, v25, 1, v15);
  uint64_t v34 = v53;
  outlined init with copy of DisambiguateSmartPromptItemsView(v1, v53);
  unint64_t v35 = (*(unsigned __int8 *)(v51 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
  uint64_t v36 = swift_allocObject();
  outlined init with take of DisambiguateSmartPromptItemsView(v34, v36 + v35);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForEach<[WorkflowDataModels.DisambiguationItemModel], ObjectIdentifier, AnyView>);
  lazy protocol witness table accessor for type ForEach<[WorkflowDataModels.DisambiguationItemModel], ObjectIdentifier, AnyView> and conformance <> ForEach<A, B, C>();
  uint64_t v37 = v54;
  ComponentStack.init(content:)();
  outlined init with copy of ModifiedContent<SimpleItemRichView, _EnvironmentKeyWritingModifier<TextAlignment>>?((uint64_t)v24, (uint64_t)v22);
  uint64_t v39 = v55;
  uint64_t v38 = v56;
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
  uint64_t v41 = v50;
  v40(v55, v37, v50);
  outlined init with copy of ModifiedContent<SimpleItemRichView, _EnvironmentKeyWritingModifier<TextAlignment>>?((uint64_t)v22, a1);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ModifiedContent<SimpleItemRichView, _EnvironmentKeyWritingModifier<TextAlignment>>?, ComponentStack<ForEach<[WorkflowDataModels.DisambiguationItemModel], ObjectIdentifier, AnyView>>));
  v40((char *)(a1 + *(int *)(v42 + 48)), v39, v41);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v38 + 8);
  v43(v37, v41);
  outlined destroy of StandardActionHandler?((uint64_t)v24, &demangling cache variable for type metadata for ModifiedContent<SimpleItemRichView, _EnvironmentKeyWritingModifier<TextAlignment>>?);
  v43(v39, v41);
  return outlined destroy of StandardActionHandler?((uint64_t)v22, &demangling cache variable for type metadata for ModifiedContent<SimpleItemRichView, _EnvironmentKeyWritingModifier<TextAlignment>>?);
}

uint64_t closure #1 in DisambiguateSmartPromptItemsView.body.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DisambiguateSmartPromptItemsView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  v8[1] = *(void *)(a1 + *(int *)(__chkstk_darwin(v2 - 8) + 28) + 16);
  outlined init with copy of DisambiguateSmartPromptItemsView(a1, (uint64_t)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  outlined init with take of DisambiguateSmartPromptItemsView((uint64_t)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [WorkflowDataModels.DisambiguationItemModel]);
  lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type [WorkflowDataModels.DisambiguationItemModel] and conformance [A], &demangling cache variable for type metadata for [WorkflowDataModels.DisambiguationItemModel]);
  lazy protocol witness table accessor for type WorkflowDataModels.DisambiguationItemModel and conformance WorkflowDataModels.DisambiguationItemModel();
  return ForEach<>.init(_:content:)();
}

uint64_t outlined init with copy of DisambiguateSmartPromptItemsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DisambiguateSmartPromptItemsView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of DisambiguateSmartPromptItemsView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DisambiguateSmartPromptItemsView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in DisambiguateSmartPromptItemsView.body.getter()
{
  uint64_t v1 = type metadata accessor for DisambiguateSmartPromptItemsView();
  OUTLINED_FUNCTION_1_1(v1);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return closure #1 in DisambiguateSmartPromptItemsView.body.getter(v3);
}

unint64_t lazy protocol witness table accessor for type ForEach<[WorkflowDataModels.DisambiguationItemModel], ObjectIdentifier, AnyView> and conformance <> ForEach<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type ForEach<[WorkflowDataModels.DisambiguationItemModel], ObjectIdentifier, AnyView> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<[WorkflowDataModels.DisambiguationItemModel], ObjectIdentifier, AnyView> and conformance <> ForEach<A, B, C>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ForEach<[WorkflowDataModels.DisambiguationItemModel], ObjectIdentifier, AnyView>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<[WorkflowDataModels.DisambiguationItemModel], ObjectIdentifier, AnyView> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

uint64_t outlined init with copy of ModifiedContent<SimpleItemRichView, _EnvironmentKeyWritingModifier<TextAlignment>>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<SimpleItemRichView, _EnvironmentKeyWritingModifier<TextAlignment>>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t closure #1 in closure #1 in DisambiguateSmartPromptItemsView.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  DisambiguateSmartPromptItemsView.createButton(item:)(*a1, v5);
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  uint64_t v3 = dispatch thunk of AnyViewConvertible.asAnyView()();
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  *a2 = v3;
  return result;
}

uint64_t DisambiguateSmartPromptItemsView.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  ActionHandler.init()();
  uint64_t result = type metadata accessor for DisambiguateSmartPromptItemsView();
  uint64_t v9 = (void *)(a4 + *(int *)(result + 20));
  *uint64_t v9 = a1;
  v9[1] = a2;
  v9[2] = a3;
  return result;
}

uint64_t sub_3BFBC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_3BFE8()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t outlined init with take of ModifiedContent<SimpleItemRichView, _EnvironmentKeyWritingModifier<TextAlignment>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<SimpleItemRichView, _EnvironmentKeyWritingModifier<TextAlignment>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t associated type witness table accessor for View.Body : View in DisambiguateSmartPromptItemsView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for DisambiguateSmartPromptItemsView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ActionHandler();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    v9[2] = v10[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for DisambiguateSmartPromptItemsView(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DisambiguateSmartPromptItemsView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  void v8[2] = v9[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DisambiguateSmartPromptItemsView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v8[2] = v9[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for DisambiguateSmartPromptItemsView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  return a1;
}

uint64_t assignWithTake for DisambiguateSmartPromptItemsView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  void v8[2] = v9[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisambiguateSmartPromptItemsView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_3C484);
}

uint64_t sub_3C484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 16);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for DisambiguateSmartPromptItemsView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_3C528);
}

void sub_3C528(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 16) = (a2 - 1);
  }
}

uint64_t type metadata completion function for DisambiguateSmartPromptItemsView()
{
  uint64_t result = type metadata accessor for ActionHandler();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_3C648()
{
  return lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<SimpleItemRichView, _EnvironmentKeyWritingModifier<TextAlignment>>?, ComponentStack<ForEach<[WorkflowDataModels.DisambiguationItemModel], ObjectIdentifier, AnyView>>)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(ModifiedContent<SimpleItemRichView, _EnvironmentKeyWritingModifier<TextAlignment>>?, ComponentStack<ForEach<[WorkflowDataModels.DisambiguationItemModel], ObjectIdentifier, AnyView>>)>);
}

uint64_t objectdestroyTm_3()
{
  type metadata accessor for DisambiguateSmartPromptItemsView();
  OUTLINED_FUNCTION_2_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = (v5 + 16) & ~v5;
  uint64_t v7 = v6 + *(void *)(v4 + 64);
  uint64_t v8 = v5 | 7;
  uint64_t v9 = v0 + v6;
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t))(v10 + 8))(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v7, v8);
}

uint64_t partial apply for closure #1 in closure #1 in DisambiguateSmartPromptItemsView.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DisambiguateSmartPromptItemsView();
  OUTLINED_FUNCTION_1_1(v4);

  return closure #1 in closure #1 in DisambiguateSmartPromptItemsView.body.getter(a1, a2);
}

unint64_t lazy protocol witness table accessor for type WorkflowDataModels.DisambiguationItemModel and conformance WorkflowDataModels.DisambiguationItemModel()
{
  unint64_t result = lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel and conformance WorkflowDataModels.DisambiguationItemModel;
  if (!lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel and conformance WorkflowDataModels.DisambiguationItemModel)
  {
    type metadata accessor for WorkflowDataModels.DisambiguationItemModel(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WorkflowDataModels.DisambiguationItemModel and conformance WorkflowDataModels.DisambiguationItemModel);
  }
  return result;
}

uint64_t sub_3C804()
{
  type metadata accessor for DisambiguateSmartPromptItemsView();
  OUTLINED_FUNCTION_2_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = (v5 + 24) & ~v5;
  uint64_t v7 = v6 + *(void *)(v4 + 64);
  uint64_t v8 = v5 | 7;
  swift_release();
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t))(v9 + 8))(v0 + v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v7, v8);
}

uint64_t partial apply for closure #1 in DisambiguateSmartPromptItemsView.createButton(item:)()
{
  uint64_t v1 = type metadata accessor for DisambiguateSmartPromptItemsView();
  OUTLINED_FUNCTION_1_1(v1);
  uint64_t v2 = *(void *)(v0 + 16);

  return closure #1 in DisambiguateSmartPromptItemsView.createButton(item:)(v2);
}

uint64_t ShowAlertView.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ShowAlertView() + 20);

  return outlined init with copy of WorkflowDataModels.ShowAlertModel(v3, a1);
}

uint64_t type metadata accessor for ShowAlertView()
{
  uint64_t result = type metadata singleton initialization cache for ShowAlertView;
  if (!type metadata singleton initialization cache for ShowAlertView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of WorkflowDataModels.ShowAlertModel(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ShowAlertView.body.getter()
{
  uint64_t v1 = type metadata accessor for ShowAlertView();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  __chkstk_darwin(v1 - 8);
  outlined init with copy of ShowAlertView(v0, (uint64_t)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ShowAlertView);
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = swift_allocObject();
  outlined init with take of ShowAlertView((uint64_t)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5 + v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(_ConditionalContent<SimpleItemRichView, SimpleItemRichView>, ConfirmationBinaryButtonView)>);
  lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type TupleView<(_ConditionalContent<SimpleItemRichView, SimpleItemRichView>, ConfirmationBinaryButtonView)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(_ConditionalContent<SimpleItemRichView, SimpleItemRichView>, ConfirmationBinaryButtonView)>);
  return ComponentStack.init(content:)();
}

uint64_t closure #1 in ShowAlertView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v38 = type metadata accessor for ConfirmationBinaryButtonView();
  uint64_t v3 = __chkstk_darwin(v38);
  uint64_t v39 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v37 - v5;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<SimpleItemRichView, SimpleItemRichView>.Storage);
  __chkstk_darwin(v37);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SimpleItemRichView();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<SimpleItemRichView, SimpleItemRichView>);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ShowAlertView() + 20));
  uint64_t v20 = v19[5];
  if (v20)
  {
    uint64_t v21 = v19[4];
    long long v67 = &type metadata for String;
    uint64_t v68 = &protocol witness table for String;
    uint64_t v65 = v21;
    uint64_t v66 = v20;
    uint64_t v22 = v19[6];
    uint64_t v23 = v19[7];
    *((void *)&v63 + 1) = &type metadata for String;
    long long v64 = &protocol witness table for String;
    *(void *)&long long v62 = v22;
    *((void *)&v62 + 1) = v23;
    uint64_t v61 = 0;
    long long v59 = 0u;
    long long v60 = 0u;
    uint64_t v58 = 0;
    long long v56 = 0u;
    long long v57 = 0u;
    uint64_t v55 = 0;
    long long v53 = 0u;
    long long v54 = 0u;
    uint64_t v52 = 0;
    long long v50 = 0u;
    long long v51 = 0u;
    uint64_t v49 = 0;
    long long v47 = 0u;
    long long v48 = 0u;
    uint64_t v46 = 0;
    long long v44 = 0u;
    long long v45 = 0u;
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v25 = v19[6];
    uint64_t v24 = v19[7];
    long long v67 = &type metadata for String;
    uint64_t v68 = &protocol witness table for String;
    uint64_t v65 = v25;
    uint64_t v66 = v24;
    long long v64 = 0;
    long long v62 = 0u;
    long long v63 = 0u;
    uint64_t v61 = 0;
    long long v59 = 0u;
    long long v60 = 0u;
    uint64_t v58 = 0;
    long long v56 = 0u;
    long long v57 = 0u;
    uint64_t v55 = 0;
    long long v53 = 0u;
    long long v54 = 0u;
    uint64_t v52 = 0;
    long long v50 = 0u;
    long long v51 = 0u;
    uint64_t v49 = 0;
    long long v47 = 0u;
    long long v48 = 0u;
    uint64_t v46 = 0;
    long long v44 = 0u;
    long long v45 = 0u;
    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
  }
  swift_bridgeObjectRetain();
  SimpleItemRichView.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:)();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v8, v12, v9);
  swift_storeEnumTagMultiPayload();
  lazy protocol witness table accessor for type SimpleItemRichView and conformance SimpleItemRichView();
  _ConditionalContent<>.init(storage:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v27 = *v19;
  uint64_t v26 = v19[1];
  uint64_t v29 = v19[2];
  uint64_t v28 = v19[3];
  uint64_t v30 = v38;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ButtonStyle<>.buttonItemPreferred.getter();
  ActionHandler.init()();
  uint64_t v31 = &v6[*(int *)(v30 + 20)];
  *(void *)uint64_t v31 = v27;
  *((void *)v31 + 1) = v26;
  uint64_t v32 = &v6[*(int *)(v30 + 24)];
  *(void *)uint64_t v32 = v29;
  *((void *)v32 + 1) = v28;
  outlined init with copy of _ConditionalContent<SimpleItemRichView, SimpleItemRichView>((uint64_t)v18, (uint64_t)v16);
  uint64_t v33 = v39;
  outlined init with copy of ShowAlertView((uint64_t)v6, v39, (uint64_t (*)(void))type metadata accessor for ConfirmationBinaryButtonView);
  uint64_t v34 = v40;
  outlined init with copy of _ConditionalContent<SimpleItemRichView, SimpleItemRichView>((uint64_t)v16, v40);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_ConditionalContent<SimpleItemRichView, SimpleItemRichView>, ConfirmationBinaryButtonView));
  outlined init with copy of ShowAlertView(v33, v34 + *(int *)(v35 + 48), (uint64_t (*)(void))type metadata accessor for ConfirmationBinaryButtonView);
  outlined destroy of ConfirmationBinaryButtonView((uint64_t)v6);
  outlined destroy of _ConditionalContent<SimpleItemRichView, SimpleItemRichView>((uint64_t)v18);
  outlined destroy of ConfirmationBinaryButtonView(v33);
  return outlined destroy of _ConditionalContent<SimpleItemRichView, SimpleItemRichView>((uint64_t)v16);
}

uint64_t sub_3D004()
{
  uint64_t v1 = *(void *)(type metadata accessor for ShowAlertView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t outlined init with take of ShowAlertView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ShowAlertView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in ShowAlertView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for ShowAlertView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #1 in ShowAlertView.body.getter(v4, a1);
}

__n128 ShowAlertView.init(model:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  ActionHandler.init()();
  uint64_t v4 = a2 + *(int *)(type metadata accessor for ShowAlertView() + 20);
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 16) = v5;
  __n128 result = *(__n128 *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v4 + 32) = result;
  *(_OWORD *)(v4 + 48) = v7;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ShowAlertView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for ShowAlertView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ActionHandler();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    uint64_t v12 = v10[3];
    v9[2] = v10[2];
    v9[3] = v12;
    uint64_t v13 = v10[5];
    v9[4] = v10[4];
    v9[5] = v13;
    uint64_t v14 = v10[7];
    void v9[6] = v10[6];
    v9[7] = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ShowAlertView(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ShowAlertView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  uint64_t v11 = v9[3];
  void v8[2] = v9[2];
  v8[3] = v11;
  uint64_t v12 = v9[5];
  v8[4] = v9[4];
  v8[5] = v12;
  uint64_t v13 = v9[7];
  v8[6] = v9[6];
  v8[7] = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ShowAlertView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v8[2] = v9[2];
  v8[3] = v9[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[4] = v9[4];
  v8[5] = v9[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[6] = v9[6];
  v8[7] = v9[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ShowAlertView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  long long v11 = v9[3];
  void v8[2] = v9[2];
  v8[3] = v11;
  return a1;
}

uint64_t assignWithTake for ShowAlertView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = v9[3];
  void v8[2] = v9[2];
  v8[3] = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = v9[5];
  v8[4] = v9[4];
  v8[5] = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = v9[7];
  v8[6] = v9[6];
  v8[7] = v13;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShowAlertView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_3D6F4);
}

uint64_t sub_3D6F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for ShowAlertView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_3D798);
}

void sub_3D798(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
}

uint64_t type metadata completion function for ShowAlertView()
{
  uint64_t result = type metadata accessor for ActionHandler();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_3D8B8()
{
  return lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(_ConditionalContent<SimpleItemRichView, SimpleItemRichView>, ConfirmationBinaryButtonView)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(_ConditionalContent<SimpleItemRichView, SimpleItemRichView>, ConfirmationBinaryButtonView)>>);
}

unint64_t lazy protocol witness table accessor for type SimpleItemRichView and conformance SimpleItemRichView()
{
  unint64_t result = lazy protocol witness table cache variable for type SimpleItemRichView and conformance SimpleItemRichView;
  if (!lazy protocol witness table cache variable for type SimpleItemRichView and conformance SimpleItemRichView)
  {
    type metadata accessor for SimpleItemRichView();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SimpleItemRichView and conformance SimpleItemRichView);
  }
  return result;
}

uint64_t outlined init with copy of _ConditionalContent<SimpleItemRichView, SimpleItemRichView>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<SimpleItemRichView, SimpleItemRichView>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ShowAlertView(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of _ConditionalContent<SimpleItemRichView, SimpleItemRichView>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<SimpleItemRichView, SimpleItemRichView>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *AutoShortcutAppPhrasesViewModel.displayPhrases.getter()
{
  unint64_t result = (void *)*v0;
  uint64_t v2 = v0[1];
  if (v2 >= *(void *)(*v0 + 16))
  {
    return (void *)swift_bridgeObjectRetain();
  }
  else if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = (uint64_t)result + 32;
    unint64_t v4 = (2 * v2) | 1;
    uint64_t v5 = swift_bridgeObjectRetain();
    return specialized Array.init<A>(_:)(v5, v3, 0, v4);
  }
  return result;
}

unint64_t AutoShortcutAppPhrasesViewModel.punchoutURL.getter()
{
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v1 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v2;
  v3._object = v1;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return 0xD000000000000019;
}

uint64_t AutoShortcutAppPhrasesViewModel.shortcutPhrases.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AutoShortcutAppPhrasesViewModel.maxPhrases.getter()
{
  return *(void *)(v0 + 8);
}

BOOL AutoShortcutAppPhrasesViewModel.needToShowMore.getter()
{
  return v0[1] < *(void *)(*v0 + 16);
}

void *specialized Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v10 = (void *)swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    uint64_t v10 = &_swiftEmptyArrayStorage;
  }
  uint64_t v11 = v10[2];
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v11 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4);
    uint64_t v9 = v8;
    goto LABEL_9;
  }
  uint64_t v9 = (void *)swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    uint64_t v9 = &_swiftEmptyArrayStorage;
  }
LABEL_9:
  swift_unknownObjectRelease();
  return v9;
}

uint64_t AutoShortcutAppPhrasesViewModel.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x74756374726F6873 && a2 == 0xEF73657361726850;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x736172685078616DLL && a2 == 0xEA00000000007365;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x6449656C646E7562 && a2 == 0xE800000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x74706D6F7270 && a2 == 0xE600000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0xD000000000000012 && a2 == 0x800000000004EC80 {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else if (a1 == 0x65746F6E746F6F66 && a2 == 0xED00006C6562614CLL)
        {
          swift_bridgeObjectRelease();
          return 5;
        }
        else
        {
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v10) {
            return 5;
          }
          else {
            return 6;
          }
        }
      }
    }
  }
}

unint64_t AutoShortcutAppPhrasesViewModel.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x736172685078616DLL;
      break;
    case 2:
      unint64_t result = 0x6449656C646E7562;
      break;
    case 3:
      unint64_t result = 0x74706D6F7270;
      break;
    case 4:
      return result;
    case 5:
      unint64_t result = 0x65746F6E746F6F66;
      break;
    default:
      unint64_t result = 0x74756374726F6873;
      break;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance AutoShortcutAppPhrasesViewModel.CodingKeys()
{
  return AutoShortcutAppPhrasesViewModel.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AutoShortcutAppPhrasesViewModel.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = AutoShortcutAppPhrasesViewModel.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AutoShortcutAppPhrasesViewModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys();

  return CodingKey.description.getter(a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AutoShortcutAppPhrasesViewModel.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AutoShortcutAppPhrasesViewModel.encode(to:)(void *a1)
{
  BOOL v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AutoShortcutAppPhrasesViewModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  char v10 = &v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = *v3;
  v12[7] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v12[6] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12[5] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12[4] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    void v12[3] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v12[2] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v5);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys;
  if (!lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys);
  }
  return result;
}

uint64_t AutoShortcutAppPhrasesViewModel.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AutoShortcutAppPhrasesViewModel.CodingKeys>);
  OUTLINED_FUNCTION_0_1();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  char v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AutoShortcutAppPhrasesViewModel.CodingKeys and conformance AutoShortcutAppPhrasesViewModel.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  char v39 = 0;
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v11 = v40;
  char v38 = 1;
  swift_bridgeObjectRetain();
  uint64_t v31 = KeyedDecodingContainer.decode(_:forKey:)();
  char v37 = 2;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v33 = v13;
  uint64_t v30 = v12;
  char v36 = 3;
  swift_bridgeObjectRetain();
  uint64_t v29 = KeyedDecodingContainer.decode(_:forKey:)();
  char v35 = 4;
  uint64_t v32 = v14;
  swift_bridgeObjectRetain();
  uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v28 = v15;
  char v34 = 5;
  swift_bridgeObjectRetain();
  uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v18 = v17;
  uint64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v26 = v16;
  v19(v10, v5);
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v20 = v28;
  swift_bridgeObjectRelease();
  uint64_t v21 = v32;
  swift_bridgeObjectRelease();
  uint64_t v22 = v33;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v24 = v31;
  *a2 = v11;
  a2[1] = v24;
  a2[2] = v30;
  a2[3] = v22;
  a2[4] = v29;
  a2[5] = v21;
  a2[6] = v27;
  a2[7] = v20;
  a2[8] = v26;
  a2[9] = v18;
  return result;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *protocol witness for Decodable.init(from:) in conformance AutoShortcutAppPhrasesViewModel@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)AutoShortcutAppPhrasesViewModel.init(from:)(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0x50uLL);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AutoShortcutAppPhrasesViewModel(void *a1)
{
  return AutoShortcutAppPhrasesViewModel.encode(to:)(a1);
}

uint64_t initializeWithCopy for AutoShortcutAppPhrasesViewModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AutoShortcutAppPhrasesViewModel(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AutoShortcutAppPhrasesViewModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AutoShortcutAppPhrasesViewModel(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutoShortcutAppPhrasesViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutoShortcutAppPhrasesViewModel()
{
  return &type metadata for AutoShortcutAppPhrasesViewModel;
}

unsigned char *storeEnumTagSinglePayload for AutoShortcutAppPhrasesViewModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x3EB14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AutoShortcutAppPhrasesViewModel.CodingKeys()
{
  return &unk_5C398;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || ((unint64_t v5 = a1, a3 + 16 * a2 > a1) ? (v6 = a1 + 16 * a2 > a3) : (v6 = 0), v6))
  {
    uint64_t v7 = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v7 = a3;
  }
  return _swift_arrayInitWithCopy(v7, v5);
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      uint64_t v8 = &_swiftEmptyArrayStorage;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v8 = (void *)swift_allocObject();
      size_t v9 = _swift_stdlib_malloc_size(v8);
      void v8[2] = v5;
      v8[3] = 2 * ((uint64_t)(v9 - 32) / 16);
    }
    if (v4 != a3)
    {
      specialized UnsafeMutablePointer.initialize(from:count:)(a2 + 16 * a3, v5, (unint64_t)(v8 + 4));
      return;
    }
    goto LABEL_10;
  }
}

uint64_t OUTLINED_FUNCTION_0_4()
{
  return v0;
}

uint64_t ArchivedView.init(model:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ArchivedView?);
  uint64_t v5 = OUTLINED_FUNCTION_9(v4);
  __chkstk_darwin(v5);
  OUTLINED_FUNCTION_4();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ArchivedViewStates?);
  uint64_t v10 = OUTLINED_FUNCTION_9(v9);
  __chkstk_darwin(v10);
  OUTLINED_FUNCTION_4();
  uint64_t v13 = v12 - v11;
  uint64_t v14 = type metadata accessor for _ArchivedViewStates();
  OUTLINED_FUNCTION_0_5();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  OUTLINED_FUNCTION_4();
  uint64_t v20 = v19 - v18;
  type metadata accessor for Context();
  lazy protocol witness table accessor for type Context and conformance Context((unint64_t *)&lazy protocol witness table cache variable for type Context and conformance Context, (void (*)(uint64_t))&type metadata accessor for Context);
  *(void *)a2 = EnvironmentObject.init()();
  *(void *)(a2 + 8) = v21;
  long long v22 = *(_OWORD *)(a1 + 16);
  long long v23 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 32) = v22;
  *(_OWORD *)(a2 + 48) = v23;
  uint64_t v24 = *(void *)a1;
  unint64_t v25 = *(void *)(a1 + 8);
  outlined retain of ArchivedViewModel(a1);
  outlined copy of Data._Representation(v24, v25);
  _ArchivedViewStates.init(data:)();
  __swift_storeEnumTagSinglePayload(v13, 0, 1, v14);
  if (__swift_getEnumTagSinglePayload(v13, 1, v14) == 1)
  {
    outlined destroy of StandardActionHandler?(v13, &demangling cache variable for type metadata for _ArchivedViewStates?);
    if (one-time initialization token for linkUI != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.linkUI);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl(&dword_0, v27, v28, "Failed to create archivedView", v29, 2u);
      swift_slowDealloc();
    }
    outlined release of ArchivedViewModel(a1);

    uint64_t v30 = a2 + *(int *)(type metadata accessor for ArchivedView() + 24);
    uint64_t v31 = type metadata accessor for _ArchivedView();
    return __swift_storeEnumTagSinglePayload(v30, 1, 1, v31);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v20, v13, v14);
    if (one-time initialization token for linkUI != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.linkUI);
    char v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      char v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v36 = 0;
      _os_log_impl(&dword_0, v34, v35, "Created archivedView", v36, 2u);
      swift_slowDealloc();
    }

    _ArchivedViewStates.state(at:)();
    outlined release of ArchivedViewModel(a1);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, v14);
    uint64_t v37 = type metadata accessor for _ArchivedView();
    __swift_storeEnumTagSinglePayload(v8, 0, 1, v37);
    uint64_t v38 = type metadata accessor for ArchivedView();
    return outlined init with take of ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>(v8, a2 + *(int *)(v38 + 24), &demangling cache variable for type metadata for _ArchivedView?);
  }
}

uint64_t outlined retain of ArchivedViewModel(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ArchivedViewModel(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for ArchivedView()
{
  uint64_t result = type metadata singleton initialization cache for ArchivedView;
  if (!type metadata singleton initialization cache for ArchivedView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ArchivedView.viewModel.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ArchivedViewModel(v1 + 16, a1);
}

uint64_t ArchivedView.archivedView.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ArchivedView() + 24);

  return outlined init with copy of _ArchivedView?(v3, a1);
}

uint64_t ArchivedView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ArchivedView();
  uint64_t v4 = v3 - 8;
  uint64_t v41 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v41 + 64);
  __chkstk_darwin(v3);
  uint64_t v42 = (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ArchivedView?);
  uint64_t v7 = OUTLINED_FUNCTION_9(v6);
  __chkstk_darwin(v7);
  OUTLINED_FUNCTION_4();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<_ArchivedView, _ContentShapeModifier<Rectangle>>);
  OUTLINED_FUNCTION_2();
  __chkstk_darwin(v12);
  OUTLINED_FUNCTION_4();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.onTapGesture(count:perform:)>>.0);
  OUTLINED_FUNCTION_0_5();
  uint64_t v43 = v17;
  __chkstk_darwin(v18);
  OUTLINED_FUNCTION_4();
  uint64_t v21 = v20 - v19;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0)?);
  uint64_t v23 = OUTLINED_FUNCTION_9(v22);
  __chkstk_darwin(v23);
  OUTLINED_FUNCTION_4();
  uint64_t v26 = v25 - v24;
  outlined init with copy of _ArchivedView?(v1 + *(int *)(v4 + 32), v10);
  uint64_t v27 = type metadata accessor for _ArchivedView();
  if (__swift_getEnumTagSinglePayload(v10, 1, v27) == 1)
  {
    outlined destroy of StandardActionHandler?(v10, &demangling cache variable for type metadata for _ArchivedView?);
    uint64_t v28 = 1;
  }
  else
  {
    OUTLINED_FUNCTION_0_5();
    uint64_t v40 = v16;
    uint64_t v29 = a1;
    uint64_t v31 = v30;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v15, v10, v27);
    *(unsigned char *)(v15 + *(int *)(v11 + 36)) = 0;
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v10, v27);
    a1 = v29;
    uint64_t v33 = v42;
    outlined init with copy of ArchivedView(v1, v42);
    unint64_t v34 = (*(unsigned __int8 *)(v41 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
    uint64_t v35 = swift_allocObject();
    outlined init with take of ArchivedView(v33, v35 + v34);
    unint64_t v36 = lazy protocol witness table accessor for type ModifiedContent<_ArchivedView, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>();
    View.onTapGesture(count:perform:)();
    swift_release();
    outlined destroy of StandardActionHandler?(v15, &demangling cache variable for type metadata for ModifiedContent<_ArchivedView, _ContentShapeModifier<Rectangle>>);
    uint64_t v44 = v11;
    unint64_t v45 = v36;
    swift_getOpaqueTypeConformance2();
    uint64_t v37 = v40;
    View.ambientDrawable(renderWithDrawingGroup:)();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v21, v37);
    uint64_t v28 = 0;
  }
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0);
  __swift_storeEnumTagSinglePayload(v26, v28, 1, v38);
  return outlined init with take of ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>(v26, a1, &demangling cache variable for type metadata for (<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0)?);
}

uint64_t closure #1 in ArchivedView.body.getter(id *a1)
{
  uint64_t v2 = type metadata accessor for AppPunchout();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for linkUI != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.linkUI);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_0, v7, v8, "Tapped snippet ArchivedView", v9, 2u);
    swift_slowDealloc();
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
  if (*a1)
  {
    id v10 = *a1;
    dispatch thunk of Context.perform(appPunchout:)();

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    type metadata accessor for Context();
    lazy protocol witness table accessor for type Context and conformance Context((unint64_t *)&lazy protocol witness table cache variable for type Context and conformance Context, (void (*)(uint64_t))&type metadata accessor for Context);
    uint64_t result = EnvironmentObject.error()();
    __break(1u);
  }
  return result;
}

uint64_t outlined init with copy of ArchivedViewModel(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of _ArchivedView?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ArchivedView?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ArchivedView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ArchivedView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_3FA90()
{
  uint64_t v1 = (int *)(type metadata accessor for ArchivedView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);

  outlined consume of Data._Representation(*(void *)(v0 + v3 + 16), *(void *)(v0 + v3 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + v1[8];
  uint64_t v6 = type metadata accessor for _ArchivedView();
  if (!__swift_getEnumTagSinglePayload(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t outlined init with take of ArchivedView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ArchivedView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in ArchivedView.body.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for ArchivedView() - 8);
  uint64_t v2 = (id *)(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));

  return closure #1 in ArchivedView.body.getter(v2);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ArchivedView, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ArchivedView, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ArchivedView, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<_ArchivedView, _ContentShapeModifier<Rectangle>>);
    lazy protocol witness table accessor for type Context and conformance Context(&lazy protocol witness table cache variable for type _ArchivedView and conformance _ArchivedView, (void (*)(uint64_t))&type metadata accessor for _ArchivedView);
    lazy protocol witness table accessor for type _ContentShapeModifier<Rectangle> and conformance _ContentShapeModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ArchivedView, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Context and conformance Context(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ContentShapeModifier<Rectangle> and conformance _ContentShapeModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ContentShapeModifier<Rectangle> and conformance _ContentShapeModifier<A>;
  if (!lazy protocol witness table cache variable for type _ContentShapeModifier<Rectangle> and conformance _ContentShapeModifier<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ContentShapeModifier<Rectangle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ContentShapeModifier<Rectangle> and conformance _ContentShapeModifier<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ArchivedView()
{
  return swift_getOpaqueTypeConformance2();
}

char *initializeBufferWithCopyOfBuffer for ArchivedView(char *a1, char **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    uint64_t v8 = (uint64_t)a2[2];
    *((void *)a1 + 1) = a2[1];
    unint64_t v9 = (unint64_t)a2[3];
    id v10 = v5;
    outlined copy of Data._Representation(v8, v9);
    *((void *)a1 + 2) = v8;
    *((void *)a1 + 3) = v9;
    uint64_t v11 = a2[5];
    *((void *)a1 + 4) = a2[4];
    *((void *)a1 + 5) = v11;
    uint64_t v12 = a2[6];
    uint64_t v13 = a2[7];
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = &a1[v14];
    uint64_t v16 = (char *)a2 + v14;
    *((void *)a1 + 6) = v12;
    *((void *)a1 + 7) = v13;
    uint64_t v17 = type metadata accessor for _ArchivedView();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ArchivedView?);
      memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t destroy for ArchivedView(uint64_t a1, uint64_t a2)
{
  outlined consume of Data._Representation(*(void *)(a1 + 16), *(void *)(a1 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for _ArchivedView();
  uint64_t result = __swift_getEnumTagSinglePayload(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v7(v4, v5);
  }
  return result;
}

void *initializeWithCopy for ArchivedView(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v7;
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  id v10 = v6;
  outlined copy of Data._Representation(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v11 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v11;
  uint64_t v12 = *(void *)(a2 + 48);
  uint64_t v13 = *(void *)(a2 + 56);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (const void *)(a2 + v14);
  a1[6] = v12;
  a1[7] = v13;
  uint64_t v17 = type metadata accessor for _ArchivedView();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ArchivedView?);
    memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
  }
  return a1;
}

uint64_t assignWithCopy for ArchivedView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v8 = v7;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  unint64_t v10 = *(void *)(a2 + 24);
  outlined copy of Data._Representation(v9, v10);
  uint64_t v11 = *(void *)(a1 + 16);
  unint64_t v12 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v10;
  outlined consume of Data._Representation(v11, v12);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for _ArchivedView();
  LODWORD(v10) = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v16);
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16);
  if (!v10)
  {
    uint64_t v18 = *(void *)(v16 - 8);
    if (!EnumTagSinglePayload)
    {
      (*(void (**)(void *, const void *, uint64_t))(v18 + 24))(v14, v15, v16);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v18 + 8))(v14, v16);
    goto LABEL_6;
  }
  if (EnumTagSinglePayload)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ArchivedView?);
    memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
  return a1;
}

_OWORD *initializeWithTake for ArchivedView(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  long long v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for _ArchivedView();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ArchivedView?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  return a1;
}

uint64_t assignWithTake for ArchivedView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v7;
  outlined consume of Data._Representation(v8, v9);
  uint64_t v10 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for _ArchivedView();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v15);
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15);
  if (!EnumTagSinglePayload)
  {
    uint64_t v18 = *(void *)(v15 - 8);
    if (!v17)
    {
      (*(void (**)(void *, const void *, uint64_t))(v18 + 40))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v18 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ArchivedView?);
    memcpy(v13, v14, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivedView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_4058C);
}

uint64_t sub_4058C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ArchivedView?);
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for ArchivedView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4062C);
}

uint64_t sub_4062C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 40) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ArchivedView?);
    uint64_t v8 = v5 + *(int *)(a4 + 24);
    return __swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

void type metadata completion function for ArchivedView()
{
  type metadata accessor for _ArchivedView?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for _ArchivedView?()
{
  if (!lazy cache variable for type metadata for _ArchivedView?)
  {
    type metadata accessor for _ArchivedView();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ArchivedView?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type (<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0)? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type (<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0)? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type (<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0)? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for (<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0)?);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for <<opaque return type of View.onTapGesture(count:perform:)>>.0);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<_ArchivedView, _ContentShapeModifier<Rectangle>>);
    lazy protocol witness table accessor for type ModifiedContent<_ArchivedView, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type (<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0)? and conformance <A> A?);
  }
  return result;
}

uint64_t protocol witness for Error._domain.getter in conformance SiriLinkUIPlugin.Error()
{
  return Error._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance SiriLinkUIPlugin.Error()
{
  return Error._code.getter();
}

uint64_t protocol witness for Error._userInfo.getter in conformance SiriLinkUIPlugin.Error()
{
  return Error._userInfo.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance SiriLinkUIPlugin.Error()
{
  return Error._getEmbeddedNSError()();
}

uint64_t SiriLinkUIPlugin.snippet(for:mode:idiom:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for WorkflowDataModels.CustomIntentHandledModel(0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for WorkflowDataModels.CustomIntentErrorModel(0);
  __chkstk_darwin(v6 - 8);
  OUTLINED_FUNCTION_8();
  type metadata accessor for WorkflowDataModels(0);
  OUTLINED_FUNCTION_2();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of WorkflowDataModels(a1, (uint64_t)v9, (void (*)(void))type metadata accessor for WorkflowDataModels);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      long long v16 = *(_OWORD *)v9;
      long long v73 = *((_OWORD *)v9 + 1);
      long long v74 = v16;
      uint64_t v17 = *((void *)v9 + 4);
      uint64_t v18 = *((void *)v9 + 5);
      type metadata accessor for Context();
      lazy protocol witness table accessor for type DisambiguateSmartPromptItemsView and conformance DisambiguateSmartPromptItemsView((unint64_t *)&lazy protocol witness table cache variable for type Context and conformance Context, (void (*)(uint64_t))&type metadata accessor for Context);
      uint64_t v19 = EnvironmentObject.init()();
      uint64_t v21 = v20;
      long long v79 = &type metadata for EnableTCCView;
      unint64_t Run = lazy protocol witness table accessor for type EnableTCCView and conformance EnableTCCView();
      uint64_t v22 = swift_allocObject();
      v78[0] = v22;
      *(void *)(v22 + 16) = v19;
      *(void *)(v22 + 24) = v21;
      long long v23 = v73;
      *(_OWORD *)(v22 + 32) = v74;
      *(_OWORD *)(v22 + 48) = v23;
      *(void *)(v22 + 64) = v17;
      *(void *)(v22 + 72) = v18;
      break;
    case 2u:
      long long v79 = (ValueMetadata *)type metadata accessor for CustomIntentConfirmationView();
      uint64_t v24 = lazy protocol witness table accessor for type DisambiguateSmartPromptItemsView and conformance DisambiguateSmartPromptItemsView(&lazy protocol witness table cache variable for type CustomIntentConfirmationView and conformance CustomIntentConfirmationView, (void (*)(uint64_t))type metadata accessor for CustomIntentConfirmationView);
      uint64_t v25 = OUTLINED_FUNCTION_6_4(v24);
      outlined init with take of WorkflowDataModels.CustomIntentHandledModel((uint64_t)v9, (uint64_t)v25, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentConfirmationModel);
      break;
    case 3u:
      outlined init with take of WorkflowDataModels.CustomIntentHandledModel((uint64_t)v9, v1, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentErrorModel);
      uint64_t v26 = type metadata accessor for CustomIntentErrorView();
      uint64_t v76 = v26;
      uint64_t v77 = lazy protocol witness table accessor for type DisambiguateSmartPromptItemsView and conformance DisambiguateSmartPromptItemsView(&lazy protocol witness table cache variable for type CustomIntentErrorView and conformance CustomIntentErrorView, (void (*)(uint64_t))type metadata accessor for CustomIntentErrorView);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v75);
      outlined init with copy of WorkflowDataModels(v1, (uint64_t)boxed_opaque_existential_1 + *(int *)(v26 + 20), (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentErrorModel);
      ActionHandler.init()();
      uint64_t v28 = type metadata accessor for WorkflowDataModels.CustomIntentErrorModel;
      uint64_t v29 = v1;
      goto LABEL_7;
    case 4u:
      outlined init with take of WorkflowDataModels.CustomIntentHandledModel((uint64_t)v9, (uint64_t)v5, (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentHandledModel);
      uint64_t v30 = type metadata accessor for CustomIntentHandledView();
      uint64_t v76 = v30;
      uint64_t v77 = lazy protocol witness table accessor for type DisambiguateSmartPromptItemsView and conformance DisambiguateSmartPromptItemsView(&lazy protocol witness table cache variable for type CustomIntentHandledView and conformance CustomIntentHandledView, (void (*)(uint64_t))type metadata accessor for CustomIntentHandledView);
      uint64_t v31 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v75);
      outlined init with copy of WorkflowDataModels((uint64_t)v5, (uint64_t)v31 + *(int *)(v30 + 20), (void (*)(void))type metadata accessor for WorkflowDataModels.CustomIntentHandledModel);
      ActionHandler.init()();
      uint64_t v28 = type metadata accessor for WorkflowDataModels.CustomIntentHandledModel;
      uint64_t v29 = (uint64_t)v5;
LABEL_7:
      outlined destroy of WorkflowDataModels.CustomIntentHandledModel(v29, (void (*)(void))v28);
      outlined init with take of View(&v75, (uint64_t)v78);
      break;
    case 5u:
      OUTLINED_FUNCTION_5_4();
      char v32 = v9[80];
      uint64_t v33 = *((void *)v9 + 11);
      uint64_t v34 = *((void *)v9 + 12);
      uint64_t v35 = type metadata accessor for ConfirmActionView();
      OUTLINED_FUNCTION_10_3(v35);
      uint64_t v36 = lazy protocol witness table accessor for type DisambiguateSmartPromptItemsView and conformance DisambiguateSmartPromptItemsView(&lazy protocol witness table cache variable for type ConfirmActionView and conformance ConfirmActionView, (void (*)(uint64_t))type metadata accessor for ConfirmActionView);
      OUTLINED_FUNCTION_6_4(v36);
      OUTLINED_FUNCTION_9_4();
      OUTLINED_FUNCTION_3_5();
      *(unsigned char *)(v37 + 80) = v32;
      *(void *)(v37 + 88) = v33;
      *(void *)(v37 + 96) = v34;
      break;
    case 6u:
      OUTLINED_FUNCTION_5_4();
      uint64_t v38 = type metadata accessor for WatchView();
      OUTLINED_FUNCTION_10_3(v38);
      uint64_t v39 = lazy protocol witness table accessor for type DisambiguateSmartPromptItemsView and conformance DisambiguateSmartPromptItemsView(&lazy protocol witness table cache variable for type WatchView and conformance WatchView, (void (*)(uint64_t))type metadata accessor for WatchView);
      OUTLINED_FUNCTION_6_4(v39);
      OUTLINED_FUNCTION_9_4();
      OUTLINED_FUNCTION_3_5();
      break;
    case 7u:
      uint64_t v40 = *(void *)v9;
      uint64_t v41 = *((void *)v9 + 1);
      uint64_t v42 = *((void *)v9 + 2);
      long long v79 = (ValueMetadata *)type metadata accessor for DisambiguateItemsView();
      uint64_t v43 = lazy protocol witness table accessor for type DisambiguateSmartPromptItemsView and conformance DisambiguateSmartPromptItemsView(&lazy protocol witness table cache variable for type DisambiguateItemsView and conformance DisambiguateItemsView, (void (*)(uint64_t))type metadata accessor for DisambiguateItemsView);
      uint64_t v44 = OUTLINED_FUNCTION_6_4(v43);
      DisambiguateItemsView.init(model:)(v40, v41, v42, (uint64_t)v44);
      break;
    case 8u:
      long long v74 = *(_OWORD *)v9;
      uint64_t v45 = *((void *)v9 + 2);
      uint64_t v46 = type metadata accessor for DisambiguateSmartPromptItemsView();
      OUTLINED_FUNCTION_10_3(v46);
      uint64_t v47 = lazy protocol witness table accessor for type DisambiguateSmartPromptItemsView and conformance DisambiguateSmartPromptItemsView(&lazy protocol witness table cache variable for type DisambiguateSmartPromptItemsView and conformance DisambiguateSmartPromptItemsView, (void (*)(uint64_t))type metadata accessor for DisambiguateSmartPromptItemsView);
      OUTLINED_FUNCTION_6_4(v47);
      OUTLINED_FUNCTION_9_4();
      long long v48 = &v5[*((int *)v9 + 5)];
      *(_OWORD *)long long v48 = v74;
      *((void *)v48 + 2) = v45;
      break;
    case 9u:
      OUTLINED_FUNCTION_8_4();
      uint64_t v50 = *((void *)v9 + 6);
      uint64_t v49 = *((void *)v9 + 7);
      long long v79 = &type metadata for LinkActionView;
      unint64_t Run = lazy protocol witness table accessor for type LinkActionView and conformance LinkActionView();
      uint64_t v51 = swift_allocObject();
      v78[0] = v51;
      long long v52 = v73;
      *(_OWORD *)(v51 + 16) = v74;
      *(_OWORD *)(v51 + 32) = v52;
      *(_OWORD *)(v51 + 48) = v72;
      *(void *)(v51 + 64) = v50;
      *(void *)(v51 + 72) = v49;
      break;
    case 0xAu:
      OUTLINED_FUNCTION_1_9();
      long long v71 = *((_OWORD *)v9 + 4);
      uint64_t v53 = *((void *)v9 + 10);
      uint64_t v54 = *((void *)v9 + 11);
      char v55 = v9[96];
      long long v79 = &type metadata for LinkConfirmationView;
      unint64_t Run = lazy protocol witness table accessor for type LinkConfirmationView and conformance LinkConfirmationView();
      uint64_t v56 = swift_allocObject();
      OUTLINED_FUNCTION_0_6(v56);
      *(_OWORD *)(v57 + 80) = v71;
      *(void *)(v57 + 96) = v53;
      *(void *)(v57 + 104) = v54;
      *(unsigned char *)(v57 + 112) = v55;
      break;
    case 0xBu:
      OUTLINED_FUNCTION_1_9();
      uint64_t v59 = *((void *)v9 + 8);
      uint64_t v58 = *((void *)v9 + 9);
      long long v79 = &type metadata for AutoShortcutAppEnabledView;
      unint64_t Run = lazy protocol witness table accessor for type AutoShortcutAppEnabledView and conformance AutoShortcutAppEnabledView();
      uint64_t v60 = swift_allocObject();
      OUTLINED_FUNCTION_0_6(v60);
      v61[10] = v59;
      v61[11] = v58;
      v61[12] = 0x4028000000000000;
      break;
    case 0xCu:
      OUTLINED_FUNCTION_1_9();
      long long v62 = *((_OWORD *)v9 + 4);
      long long v70 = *((_OWORD *)v9 + 5);
      long long v71 = v62;
      uint64_t v64 = *((void *)v9 + 12);
      uint64_t v63 = *((void *)v9 + 13);
      long long v79 = &type metadata for AutoShortcutFirstRunView;
      unint64_t Run = lazy protocol witness table accessor for type AutoShortcutFirstRunView and conformance AutoShortcutFirstRunView();
      uint64_t v65 = swift_allocObject();
      OUTLINED_FUNCTION_0_6(v65);
      long long v66 = v70;
      *(_OWORD *)(v67 + 80) = v71;
      *(_OWORD *)(v67 + 96) = v66;
      *(void *)(v67 + 112) = v64;
      *(void *)(v67 + 120) = v63;
      break;
    default:
      OUTLINED_FUNCTION_8_4();
      uint64_t v10 = *((void *)v9 + 6);
      uint64_t v11 = *((void *)v9 + 7);
      uint64_t v12 = type metadata accessor for ShowAlertView();
      OUTLINED_FUNCTION_10_3(v12);
      uint64_t v13 = lazy protocol witness table accessor for type DisambiguateSmartPromptItemsView and conformance DisambiguateSmartPromptItemsView(&lazy protocol witness table cache variable for type ShowAlertView and conformance ShowAlertView, (void (*)(uint64_t))type metadata accessor for ShowAlertView);
      OUTLINED_FUNCTION_6_4(v13);
      OUTLINED_FUNCTION_9_4();
      uint64_t v14 = &v5[*((int *)v9 + 5)];
      long long v15 = v73;
      *(_OWORD *)uint64_t v14 = v74;
      *((_OWORD *)v14 + 1) = v15;
      *((_OWORD *)v14 + 2) = v72;
      *((void *)v14 + 6) = v10;
      *((void *)v14 + 7) = v11;
      break;
  }
  __swift_project_boxed_opaque_existential_1(v78, (uint64_t)v79);
  uint64_t v68 = View.eraseToAnyView()();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v78);
  return v68;
}

unint64_t lazy protocol witness table accessor for type AutoShortcutFirstRunView and conformance AutoShortcutFirstRunView()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutFirstRunView and conformance AutoShortcutFirstRunView;
  if (!lazy protocol witness table cache variable for type AutoShortcutFirstRunView and conformance AutoShortcutFirstRunView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutFirstRunView and conformance AutoShortcutFirstRunView);
  }
  return result;
}

uint64_t sub_41090()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 128, 7);
}

unint64_t lazy protocol witness table accessor for type AutoShortcutAppEnabledView and conformance AutoShortcutAppEnabledView()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutAppEnabledView and conformance AutoShortcutAppEnabledView;
  if (!lazy protocol witness table cache variable for type AutoShortcutAppEnabledView and conformance AutoShortcutAppEnabledView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutAppEnabledView and conformance AutoShortcutAppEnabledView);
  }
  return result;
}

uint64_t sub_41144()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 104, 7);
}

unint64_t lazy protocol witness table accessor for type LinkConfirmationView and conformance LinkConfirmationView()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkConfirmationView and conformance LinkConfirmationView;
  if (!lazy protocol witness table cache variable for type LinkConfirmationView and conformance LinkConfirmationView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkConfirmationView and conformance LinkConfirmationView);
  }
  return result;
}

uint64_t sub_411E8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 72);
  if (v1 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(v0 + 64), v1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 113, 7);
}

unint64_t lazy protocol witness table accessor for type LinkActionView and conformance LinkActionView()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkActionView and conformance LinkActionView;
  if (!lazy protocol witness table cache variable for type LinkActionView and conformance LinkActionView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkActionView and conformance LinkActionView);
  }
  return result;
}

uint64_t sub_412A4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 72);
  if (v1 >> 60 != 15) {
    outlined consume of Data._Representation(*(void *)(v0 + 64), v1);
  }

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t outlined init with take of View(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t outlined init with copy of WorkflowDataModels(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of WorkflowDataModels.CustomIntentHandledModel(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t outlined init with take of WorkflowDataModels.CustomIntentHandledModel(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type EnableTCCView and conformance EnableTCCView()
{
  unint64_t result = lazy protocol witness table cache variable for type EnableTCCView and conformance EnableTCCView;
  if (!lazy protocol witness table cache variable for type EnableTCCView and conformance EnableTCCView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableTCCView and conformance EnableTCCView);
  }
  return result;
}

uint64_t sub_41480()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t SiriLinkUIPlugin.view(for:data:mode:)()
{
  uint64_t v2 = type metadata accessor for ArchivedView();
  OUTLINED_FUNCTION_2();
  __chkstk_darwin(v3);
  OUTLINED_FUNCTION_8();
  if (one-time initialization token for decoder != -1) {
    swift_once();
  }
  lazy protocol witness table accessor for type SiriLinkViewModel and conformance SiriLinkViewModel();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (!v0)
  {
    switch(v14)
    {
      case 1:
        OUTLINED_FUNCTION_4_7(v11);
        lazy protocol witness table accessor for type AutoShortcutFirstRunComponentView and conformance AutoShortcutFirstRunComponentView();
        goto LABEL_10;
      case 2:
      case 4:
        lazy protocol witness table accessor for type AutoShortcutFirstRunWatchView and conformance AutoShortcutFirstRunWatchView();
        goto LABEL_10;
      case 3:
        OUTLINED_FUNCTION_4_7(v11);
        lazy protocol witness table accessor for type AutoShortcutAppEnabledView and conformance AutoShortcutAppEnabledView();
        goto LABEL_10;
      case 5:
        lazy protocol witness table accessor for type PromptHeaderView and conformance PromptHeaderView();
LABEL_10:
        uint64_t v2 = AnyView.init<A>(_:)();
        break;
      default:
        v15[0] = v5;
        v15[1] = v6;
        long long v16 = v7;
        uint64_t v17 = v8;
        uint64_t v18 = v9;
        uint64_t v19 = v11;
        outlined copy of Data._Representation(v5, v6);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        ArchivedView.init(model:)((uint64_t)v15, v1);
        lazy protocol witness table accessor for type DisambiguateSmartPromptItemsView and conformance DisambiguateSmartPromptItemsView(&lazy protocol witness table cache variable for type ArchivedView and conformance ArchivedView, (void (*)(uint64_t))type metadata accessor for ArchivedView);
        uint64_t v2 = AnyView.init<A>(_:)();
        outlined consume of SiriLinkViewModel(v5, v6, v7, *((uint64_t *)&v7 + 1), v8, v9, v10, v19, v12, v13, 0);
        break;
    }
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type PromptHeaderView and conformance PromptHeaderView()
{
  unint64_t result = lazy protocol witness table cache variable for type PromptHeaderView and conformance PromptHeaderView;
  if (!lazy protocol witness table cache variable for type PromptHeaderView and conformance PromptHeaderView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptHeaderView and conformance PromptHeaderView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutoShortcutFirstRunWatchView and conformance AutoShortcutFirstRunWatchView()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutFirstRunWatchView and conformance AutoShortcutFirstRunWatchView;
  if (!lazy protocol witness table cache variable for type AutoShortcutFirstRunWatchView and conformance AutoShortcutFirstRunWatchView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutFirstRunWatchView and conformance AutoShortcutFirstRunWatchView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutoShortcutFirstRunComponentView and conformance AutoShortcutFirstRunComponentView()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoShortcutFirstRunComponentView and conformance AutoShortcutFirstRunComponentView;
  if (!lazy protocol witness table cache variable for type AutoShortcutFirstRunComponentView and conformance AutoShortcutFirstRunComponentView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoShortcutFirstRunComponentView and conformance AutoShortcutFirstRunComponentView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriLinkUIPlugin.Error and conformance SiriLinkUIPlugin.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriLinkUIPlugin.Error and conformance SiriLinkUIPlugin.Error;
  if (!lazy protocol witness table cache variable for type SiriLinkUIPlugin.Error and conformance SiriLinkUIPlugin.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriLinkUIPlugin.Error and conformance SiriLinkUIPlugin.Error);
  }
  return result;
}

uint64_t protocol witness for SnippetUIPlugin.view(for:data:mode:) in conformance SiriLinkUIPlugin()
{
  return SiriLinkUIPlugin.view(for:data:mode:)();
}

uint64_t associated type witness table accessor for SnippetProviding.SnippetPluginModelType : SnippetPluginModel in SiriLinkUIPlugin()
{
  return lazy protocol witness table accessor for type DisambiguateSmartPromptItemsView and conformance DisambiguateSmartPromptItemsView(&lazy protocol witness table cache variable for type WorkflowDataModels and conformance WorkflowDataModels, (void (*)(uint64_t))type metadata accessor for WorkflowDataModels);
}

uint64_t lazy protocol witness table accessor for type DisambiguateSmartPromptItemsView and conformance DisambiguateSmartPromptItemsView(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for SnippetProviding.init() in conformance SiriLinkUIPlugin@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SiriLinkUIPlugin.__allocating_init()();
  *a1 = result;
  return result;
}

uint64_t protocol witness for SnippetProviding.snippet(for:mode:idiom:) in conformance SiriLinkUIPlugin(uint64_t a1)
{
  return SiriLinkUIPlugin.snippet(for:mode:idiom:)(a1);
}

uint64_t type metadata accessor for SiriLinkUIPlugin()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for SiriLinkUIPlugin.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x41A6CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriLinkUIPlugin.Error()
{
  return &type metadata for SiriLinkUIPlugin.Error;
}

__n128 OUTLINED_FUNCTION_0_6(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  long long v2 = *(_OWORD *)(v1 - 176);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 - 160);
  *(_OWORD *)(a1 + 32) = v2;
  __n128 result = *(__n128 *)(v1 - 208);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(v1 - 192);
  *(__n128 *)(a1 + 64) = result;
  return result;
}

__n128 OUTLINED_FUNCTION_1_9()
{
  long long v2 = *v0;
  *(_OWORD *)(v1 - 176) = v0[1];
  *(_OWORD *)(v1 - 160) = v2;
  long long v3 = v0[2];
  __n128 result = (__n128)v0[3];
  *(__n128 *)(v1 - 208) = result;
  *(_OWORD *)(v1 - 192) = v3;
  return result;
}

__n128 OUTLINED_FUNCTION_3_5()
{
  uint64_t v5 = v1 + *(int *)(v0 + 20);
  long long v6 = *(_OWORD *)(v4 - 176);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)(v4 - 160);
  *(_OWORD *)(v5 + 16) = v6;
  __n128 result = *(__n128 *)(v4 - 208);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)(v4 - 192);
  *(__n128 *)(v5 + 48) = result;
  *(void *)(v5 + 64) = v2;
  *(void *)(v5 + 72) = v3;
  return result;
}

void OUTLINED_FUNCTION_4_7(uint64_t a1@<X8>)
{
  *(void *)(v10 - 232) = v5;
  *(void *)(v10 - 224) = v4;
  *(void *)(v10 - 216) = v9;
  *(void *)(v10 - 208) = v8;
  *(void *)(v10 - 200) = v7;
  *(void *)(v10 - 192) = v6;
  *(void *)(v10 - 184) = v1;
  *(void *)(v10 - 176) = a1;
  *(void *)(v10 - 168) = v3;
  *(void *)(v10 - 160) = v2;
  *(void *)(v10 - 152) = 0x4028000000000000;
}

__n128 OUTLINED_FUNCTION_5_4()
{
  long long v2 = *v0;
  *(_OWORD *)(v1 - 176) = v0[1];
  *(_OWORD *)(v1 - 160) = v2;
  long long v3 = v0[2];
  __n128 result = (__n128)v0[3];
  *(__n128 *)(v1 - 208) = result;
  *(_OWORD *)(v1 - 192) = v3;
  return result;
}

uint64_t *OUTLINED_FUNCTION_6_4(uint64_t a1)
{
  *(void *)(v1 - 72) = a1;
  return __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v1 - 104));
}

__n128 OUTLINED_FUNCTION_8_4()
{
  long long v2 = *v0;
  *(_OWORD *)(v1 - 176) = v0[1];
  *(_OWORD *)(v1 - 160) = v2;
  __n128 result = (__n128)v0[2];
  *(__n128 *)(v1 - 192) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_9_4()
{
  return ActionHandler.init()();
}

uint64_t OUTLINED_FUNCTION_10_3(uint64_t result)
{
  *(void *)(v1 - 80) = result;
  return result;
}

void *CanvasConstants.siriLinkUIPluginBundleName.unsafeMutableAddressor()
{
  return &static CanvasConstants.siriLinkUIPluginBundleName;
}

unint64_t static CanvasConstants.siriLinkUIPluginBundleName.getter()
{
  return 0xD000000000000010;
}

void *CanvasConstants.siriLinkUIPluginViewId.unsafeMutableAddressor()
{
  return &static CanvasConstants.siriLinkUIPluginViewId;
}

unint64_t static CanvasConstants.siriLinkUIPluginViewId.getter()
{
  return 0xD000000000000014;
}

ValueMetadata *type metadata accessor for CanvasConstants()
{
  return &type metadata for CanvasConstants;
}

void *WatchView.init(model:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  ActionHandler.init()();
  uint64_t v4 = (void *)(a2 + *(int *)(type metadata accessor for WatchView() + 20));

  return memcpy(v4, a1, 0x50uLL);
}

uint64_t type metadata accessor for WatchView()
{
  uint64_t result = type metadata singleton initialization cache for WatchView;
  if (!type metadata singleton initialization cache for WatchView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t WatchView.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for WatchView() + 20);

  return outlined init with copy of WorkflowDataModels.WatchModel(v3, a1);
}

uint64_t outlined init with copy of WorkflowDataModels.WatchModel(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t WatchView.body.getter()
{
  uint64_t v1 = type metadata accessor for WatchView();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  __chkstk_darwin(v1 - 8);
  outlined init with copy of WatchView(v0, (uint64_t)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = swift_allocObject();
  outlined init with take of WatchView((uint64_t)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5 + v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(SimpleItemStandardView, ConfirmationBinaryButtonView?)>);
  lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type TupleView<(SimpleItemStandardView, ConfirmationBinaryButtonView?)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(SimpleItemStandardView, ConfirmationBinaryButtonView?)>);
  return ComponentStack.init(content:)();
}

uint64_t closure #1 in WatchView.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationBinaryButtonView?);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v38 - v7;
  uint64_t v9 = type metadata accessor for SimpleItemStandardView();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v40 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  long long v15 = (char *)&v38 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v38 - v16;
  uint64_t v18 = (uint64_t *)(a1 + *(int *)(type metadata accessor for WatchView() + 20));
  uint64_t v20 = *v18;
  unint64_t v19 = v18[1];
  uint64_t v59 = &type metadata for String;
  uint64_t v60 = &protocol witness table for String;
  if (!v19) {
    uint64_t v20 = 0x74756374726F6853;
  }
  unint64_t v21 = 0xE900000000000073;
  if (v19) {
    unint64_t v21 = v19;
  }
  uint64_t v57 = v20;
  unint64_t v58 = v21;
  uint64_t v56 = 0;
  long long v54 = 0u;
  long long v55 = 0u;
  uint64_t v53 = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v50 = 0;
  long long v48 = 0u;
  long long v49 = 0u;
  uint64_t v47 = 0;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v44 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  swift_bridgeObjectRetain();
  SimpleItemStandardView.init(text1:text2:text3:text4:text5:text6:)();
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v15, v9);
  uint64_t v22 = v18[3];
  if (v22)
  {
    uint64_t v23 = v18[5];
    uint64_t v38 = v18[4];
    uint64_t v24 = v18[2];
    uint64_t v25 = type metadata accessor for ConfirmationBinaryButtonView();
    uint64_t v39 = v6;
    uint64_t v26 = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static ButtonStyle<>.buttonItemStandard.getter();
    ActionHandler.init()();
    uint64_t v27 = &v8[*(int *)(v26 + 20)];
    *(void *)uint64_t v27 = v24;
    *((void *)v27 + 1) = v22;
    uint64_t v28 = &v8[*(int *)(v26 + 24)];
    *(void *)uint64_t v28 = v38;
    *((void *)v28 + 1) = v23;
    uint64_t v29 = (uint64_t)v8;
    uint64_t v30 = 0;
    uint64_t v31 = v26;
    uint64_t v6 = v39;
  }
  else
  {
    uint64_t v31 = type metadata accessor for ConfirmationBinaryButtonView();
    uint64_t v29 = (uint64_t)v8;
    uint64_t v30 = 1;
  }
  __swift_storeEnumTagSinglePayload(v29, v30, 1, v31);
  char v32 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  uint64_t v33 = v40;
  v32(v40, v17, v9);
  outlined init with copy of ConfirmationBinaryButtonView?((uint64_t)v8, (uint64_t)v6);
  uint64_t v34 = v41;
  v32(v41, v33, v9);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SimpleItemStandardView, ConfirmationBinaryButtonView?));
  outlined init with copy of ConfirmationBinaryButtonView?((uint64_t)v6, (uint64_t)&v34[*(int *)(v35 + 48)]);
  outlined destroy of (String, String)((uint64_t)v8, &demangling cache variable for type metadata for ConfirmationBinaryButtonView?);
  uint64_t v36 = *(void (**)(char *, uint64_t))(v10 + 8);
  v36(v17, v9);
  outlined destroy of (String, String)((uint64_t)v6, &demangling cache variable for type metadata for ConfirmationBinaryButtonView?);
  return ((uint64_t (*)(char *, uint64_t))v36)(v33, v9);
}

uint64_t outlined init with copy of WatchView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WatchView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_42260()
{
  uint64_t v1 = (int *)(type metadata accessor for WatchView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_1_10();
  (*(void (**)(uint64_t))(v5 + 8))(v0 + v3);
  uint64_t v6 = v0 + v3 + v1[7];
  swift_bridgeObjectRelease();
  if (*(void *)(v6 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t outlined init with take of WatchView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WatchView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in WatchView.body.getter@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for WatchView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #1 in WatchView.body.getter(v4, a1);
}

uint64_t associated type witness table accessor for View.Body : View in WatchView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for WatchView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ActionHandler();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = *(uint64_t *)((char *)a2 + v8 + 8);
    *uint64_t v9 = *(uint64_t *)((char *)a2 + v8);
    v9[1] = v11;
    uint64_t v12 = *(uint64_t *)((char *)a2 + v8 + 24);
    swift_bridgeObjectRetain();
    if (v12)
    {
      v9[2] = v10[2];
      v9[3] = v12;
      uint64_t v13 = v10[5];
      v9[4] = v10[4];
      v9[5] = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v15 = *((_OWORD *)v10 + 2);
      *((_OWORD *)v9 + 1) = *((_OWORD *)v10 + 1);
      *((_OWORD *)v9 + 2) = v15;
    }
    uint64_t v16 = v10[7];
    void v9[6] = v10[6];
    v9[7] = v16;
    uint64_t v17 = v10[9];
    v9[8] = v10[8];
    v9[9] = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for WatchView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  if (*(void *)(v5 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WatchView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *uint64_t v8 = *(void *)(a2 + v7);
  v8[1] = v10;
  uint64_t v11 = *(void *)(a2 + v7 + 24);
  swift_bridgeObjectRetain();
  if (v11)
  {
    void v8[2] = v9[2];
    v8[3] = v11;
    uint64_t v12 = v9[5];
    v8[4] = v9[4];
    v8[5] = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v13 = *((_OWORD *)v9 + 2);
    *((_OWORD *)v8 + 1) = *((_OWORD *)v9 + 1);
    *((_OWORD *)v8 + 2) = v13;
  }
  uint64_t v14 = v9[7];
  v8[6] = v9[6];
  v8[7] = v14;
  uint64_t v15 = v9[9];
  v8[8] = v9[8];
  v8[9] = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WatchView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *(void *)(a2 + v7);
  v8[1] = *(void *)(a2 + v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = v8 + 2;
  uint64_t v11 = v9 + 2;
  uint64_t v12 = v9[3];
  if (v8[3])
  {
    if (v12)
    {
      void v8[2] = v9[2];
      v8[3] = v9[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v8[4] = v9[4];
      v8[5] = v9[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of (String, String)((uint64_t)(v8 + 2), &demangling cache variable for type metadata for (String, String));
      long long v13 = *((_OWORD *)v9 + 2);
      *uint64_t v10 = *v11;
      *((_OWORD *)v8 + 2) = v13;
    }
  }
  else if (v12)
  {
    void v8[2] = v9[2];
    v8[3] = v9[3];
    v8[4] = v9[4];
    v8[5] = v9[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v14 = *((_OWORD *)v9 + 2);
    *uint64_t v10 = *v11;
    *((_OWORD *)v8 + 2) = v14;
  }
  v8[6] = v9[6];
  v8[7] = v9[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[8] = v9[8];
  v8[9] = v9[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for WatchView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  memcpy((void *)(a1 + *(int *)(a3 + 20)), (const void *)(a2 + *(int *)(a3 + 20)), 0x50uLL);
  return a1;
}

uint64_t assignWithTake for WatchView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = v10;
  swift_bridgeObjectRelease();
  if (!*(void *)(v8 + 24)) {
    goto LABEL_5;
  }
  uint64_t v11 = *(void *)(v9 + 24);
  if (!v11)
  {
    outlined destroy of (String, String)(v8 + 16, &demangling cache variable for type metadata for (String, String));
LABEL_5:
    long long v13 = *(_OWORD *)(v9 + 32);
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(v9 + 16);
    *(_OWORD *)(v8 + 32) = v13;
    goto LABEL_6;
  }
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(void *)(v8 + 24) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(v9 + 40);
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  *(void *)(v8 + 40) = v12;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v14 = *(void *)(v9 + 56);
  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  *(void *)(v8 + 56) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v9 + 72);
  *(void *)(v8 + 64) = *(void *)(v9 + 64);
  *(void *)(v8 + 72) = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WatchView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_42A54);
}

uint64_t sub_42A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    int v10 = v9 - 1;
    if (v10 < 0) {
      int v10 = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for WatchView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_42B04);
}

void sub_42B04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
}

uint64_t type metadata completion function for WatchView()
{
  uint64_t result = type metadata accessor for ActionHandler();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_42C24()
{
  return lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type ComponentStack<TupleView<(SimpleItemStandardView, ConfirmationBinaryButtonView?)>> and conformance ComponentStack<A>, &demangling cache variable for type metadata for ComponentStack<TupleView<(SimpleItemStandardView, ConfirmationBinaryButtonView?)>>);
}

uint64_t outlined init with copy of ConfirmationBinaryButtonView?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationBinaryButtonView?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of (String, String)(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_1_10();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t AutoShortcutAppEnabledView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>, TupleView<(Divider, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>)>?)>>);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = static HorizontalAlignment.leading.getter();
  uint64_t v8 = v2[10];
  *(void *)uint64_t v6 = v7;
  *((void *)v6 + 1) = v8;
  unsigned char v6[16] = 0;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>, TupleView<(Divider, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>)>?)>>);
  closure #1 in AutoShortcutAppEnabledView.body.getter(v2, &v6[*(int *)(v9 + 44)]);
  LOBYTE(v2) = static Edge.Set.top.getter();
  EdgeInsets.init(_all:)();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  outlined init with copy of VisualProperty?((uint64_t)v6, a1, &demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>, TupleView<(Divider, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>)>?)>>);
  uint64_t v18 = a1
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>, TupleView<(Divider, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>)>?)>>, _PaddingLayout>)
               + 36);
  *(unsigned char *)uint64_t v18 = (_BYTE)v2;
  *(void *)(v18 + 8) = v11;
  *(void *)(v18 + 16) = v13;
  *(void *)(v18 + 24) = v15;
  *(void *)(v18 + 32) = v17;
  *(unsigned char *)(v18 + 40) = 0;
  return outlined destroy of StandardActionHandler?((uint64_t)v6, &demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>, TupleView<(Divider, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>)>?)>>);
}

uint64_t closure #1 in AutoShortcutAppEnabledView.body.getter@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  unint64_t v173 = a2;
  uint64_t v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Link<Text>);
  uint64_t v154 = *(void *)(v155 - 8);
  __chkstk_darwin(v155);
  uint64_t v151 = (char *)&v146 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>);
  __chkstk_darwin(v149);
  uint64_t v153 = (char *)&v146 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>);
  __chkstk_darwin(v150);
  uint64_t v157 = (uint64_t)&v146 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>);
  __chkstk_darwin(v152);
  uint64_t v158 = (uint64_t)&v146 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>);
  uint64_t v7 = __chkstk_darwin(v156);
  uint64_t v160 = (uint64_t)&v146 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v159 = (uint64_t)&v146 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v10 - 8);
  uint64_t v169 = (char *)&v146 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v170 = type metadata accessor for URL();
  uint64_t v162 = *(void *)(v170 - 8);
  uint64_t v12 = __chkstk_darwin(v170);
  uint64_t v147 = (char *)&v146 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  unint64_t v161 = (char *)&v146 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Divider, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>)>?);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v181 = (char *)&v146 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v179 = (uint64_t)&v146 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>);
  __chkstk_darwin(v19 - 8);
  uint64_t v167 = (uint64_t *)((char *)&v146 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>);
  __chkstk_darwin(v165);
  uint64_t v166 = (char *)&v146 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>);
  uint64_t v22 = __chkstk_darwin(v164);
  uint64_t v178 = (uint64_t)&v146 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v163 = (char *)&v146 - v25;
  __chkstk_darwin(v24);
  uint64_t v183 = (uint64_t)&v146 - v26;
  uint64_t v180 = type metadata accessor for Divider();
  uint64_t v175 = *(void *)(v180 - 8);
  uint64_t v27 = __chkstk_darwin(v180);
  uint64_t v148 = (char *)&v146 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v27);
  __n128 v174 = (char *)&v146 - v30;
  __chkstk_darwin(v29);
  uint64_t v182 = (char *)&v146 - v31;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  __chkstk_darwin(v32 - 8);
  uint64_t v34 = (char *)&v146 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for Font.TextStyle();
  uint64_t v36 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v38 = (char *)&v146 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0);
  uint64_t v171 = *(void *)(v172 - 8);
  uint64_t v39 = __chkstk_darwin(v172);
  uint64_t v177 = (char *)&v146 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  long long v42 = (char *)&v146 - v41;
  uint64_t v168 = a1;
  memcpy(__dst, a1, sizeof(__dst));
  uint64_t v184 = __dst[4];
  uint64_t v185 = __dst[5];
  unint64_t v43 = lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  unint64_t v146 = v43;
  uint64_t v44 = Text.init<A>(_:)();
  uint64_t v46 = v45;
  LOBYTE(a1) = v47 & 1;
  (*(void (**)(char *, void, uint64_t))(v36 + 104))(v38, enum case for Font.TextStyle.headline(_:), v35);
  uint64_t v48 = type metadata accessor for Font.Design();
  __swift_storeEnumTagSinglePayload((uint64_t)v34, 1, 1, v48);
  static Font.Weight.semibold.getter();
  static Font.system(_:design:weight:)();
  outlined destroy of StandardActionHandler?((uint64_t)v34, &demangling cache variable for type metadata for Font.Design?);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v35);
  uint64_t v49 = Text.font(_:)();
  uint64_t v51 = v50;
  LOBYTE(v36) = v52;
  uint64_t v54 = v53;
  swift_release();
  outlined consume of Text.Storage(v44, v46, (char)a1);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  LOBYTE(a1) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v184 = v49;
  uint64_t v185 = v51;
  char v186 = v36 & 1;
  uint64_t v187 = v54;
  uint64_t v188 = KeyPath;
  uint64_t v189 = 0x4014000000000000;
  char v190 = (char)a1;
  uint64_t v191 = v56;
  uint64_t v192 = v57;
  uint64_t v193 = v58;
  uint64_t v194 = v59;
  char v195 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>);
  _s7SwiftUI15ModifiedContentVy16SiriLinkUIPlugin8IconViewVAA14_PaddingLayoutVGACyxq_GAA0I0A2aKRzAA0I8ModifierR_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Text, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>);
  uint64_t v176 = v42;
  View.ambientDrawable(renderWithDrawingGroup:)();
  outlined consume of Text.Storage(v49, v51, v36 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  Divider.init()();
  uint64_t v60 = *((void *)AutoShortcutAppPhrasesViewModel.displayPhrases.getter() + 2);
  swift_bridgeObjectRelease();
  if (v60 == 1) {
    uint64_t v61 = static VerticalAlignment.center.getter();
  }
  else {
    uint64_t v61 = static VerticalAlignment.top.getter();
  }
  uint64_t v62 = v179;
  uint64_t v63 = (uint64_t)v169;
  uint64_t v64 = v168;
  uint64_t v65 = (uint64_t)v167;
  uint64_t v66 = (uint64_t)v166;
  uint64_t v67 = v165;
  uint64_t v68 = v164;
  uint64_t v69 = (uint64_t)v163;
  uint64_t v70 = v168[10];
  *uint64_t v167 = v61;
  *(void *)(v65 + 8) = v70;
  *(unsigned char *)(v65 + 16) = 0;
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>);
  closure #1 in closure #1 in AutoShortcutAppEnabledView.body.getter(v64, (char *)(v65 + *(int *)(v71 + 44)));
  LOBYTE(v64) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v73 = v72;
  uint64_t v75 = v74;
  uint64_t v77 = v76;
  uint64_t v79 = v78;
  outlined init with copy of VisualProperty?(v65, v66, &demangling cache variable for type metadata for HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>);
  uint64_t v80 = v66 + *(int *)(v67 + 36);
  *(unsigned char *)uint64_t v80 = (_BYTE)v64;
  *(void *)(v80 + 8) = v73;
  *(void *)(v80 + 16) = v75;
  *(void *)(v80 + 24) = v77;
  *(void *)(v80 + 32) = v79;
  *(unsigned char *)(v80 + 40) = 0;
  outlined destroy of StandardActionHandler?(v65, &demangling cache variable for type metadata for HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>);
  outlined init with copy of VisualProperty?(v66, v69, &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>);
  *(_WORD *)(v69 + *(int *)(v68 + 36)) = 256;
  outlined destroy of StandardActionHandler?(v66, &demangling cache variable for type metadata for ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>);
  outlined init with take of ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>(v69, v183, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>);
  uint64_t v81 = __dst[9];
  if (__dst[9])
  {
    uint64_t v82 = __dst[8];
    swift_bridgeObjectRetain();
    AutoShortcutAppPhrasesViewModel.punchoutURL.getter();
    URL.init(string:)();
    swift_bridgeObjectRelease();
    uint64_t v83 = v170;
    if (__swift_getEnumTagSinglePayload(v63, 1, v170) != 1)
    {
      uint64_t v85 = v162;
      uint64_t v86 = v161;
      (*(void (**)(char *, uint64_t, uint64_t))(v162 + 32))(v161, v63, v83);
      uint64_t v87 = v174;
      Divider.init()();
      uint64_t v184 = v82;
      uint64_t v185 = v81;
      (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v147, v86, v83);
      unint64_t v88 = v151;
      Link<>.init<A>(_:destination:)();
      uint64_t v89 = static Font.footnote.getter();
      uint64_t v90 = swift_getKeyPath();
      uint64_t v91 = v154;
      uint64_t v92 = (uint64_t)v153;
      uint64_t v93 = v155;
      (*(void (**)(char *, char *, uint64_t))(v154 + 16))(v153, v88, v155);
      unint64_t v94 = (uint64_t *)(v92 + *(int *)(v149 + 36));
      uint64_t *v94 = v90;
      v94[1] = v89;
      (*(void (**)(char *, uint64_t))(v91 + 8))(v88, v93);
      uint64_t v95 = static Color.secondary.getter();
      uint64_t v96 = swift_getKeyPath();
      uint64_t v97 = v157;
      outlined init with copy of VisualProperty?(v92, v157, &demangling cache variable for type metadata for ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>);
      uint64_t v98 = (uint64_t *)(v97 + *(int *)(v150 + 36));
      *uint64_t v98 = v96;
      v98[1] = v95;
      outlined destroy of StandardActionHandler?(v92, &demangling cache variable for type metadata for ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>);
      LOBYTE(v95) = static Edge.Set.horizontal.getter();
      EdgeInsets.init(_all:)();
      uint64_t v100 = v99;
      uint64_t v102 = v101;
      uint64_t v104 = v103;
      uint64_t v106 = v105;
      uint64_t v107 = v158;
      outlined init with copy of VisualProperty?(v97, v158, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>);
      uint64_t v108 = v107 + *(int *)(v152 + 36);
      *(unsigned char *)uint64_t v108 = v95;
      *(void *)(v108 + 8) = v100;
      *(void *)(v108 + 16) = v102;
      *(void *)(v108 + 24) = v104;
      *(void *)(v108 + 32) = v106;
      *(unsigned char *)(v108 + 40) = 0;
      outlined destroy of StandardActionHandler?(v97, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>);
      LOBYTE(v95) = static Edge.Set.bottom.getter();
      EdgeInsets.init(_all:)();
      uint64_t v110 = v109;
      uint64_t v112 = v111;
      uint64_t v114 = v113;
      uint64_t v116 = v115;
      uint64_t v117 = v160;
      outlined init with copy of VisualProperty?(v107, v160, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>);
      uint64_t v118 = v117 + *(int *)(v156 + 36);
      *(unsigned char *)uint64_t v118 = v95;
      *(void *)(v118 + 8) = v110;
      *(void *)(v118 + 16) = v112;
      *(void *)(v118 + 24) = v114;
      *(void *)(v118 + 32) = v116;
      *(unsigned char *)(v118 + 40) = 0;
      outlined destroy of StandardActionHandler?(v107, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>);
      uint64_t v119 = v159;
      outlined init with take of ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>(v117, v159, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>);
      uint64_t v120 = v175;
      unint64_t v121 = *(void (**)(char *, char *, uint64_t))(v175 + 16);
      unint64_t v122 = v148;
      uint64_t v123 = v180;
      v121(v148, v87, v180);
      outlined init with copy of VisualProperty?(v119, v117, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>);
      uint64_t v124 = (uint64_t)v181;
      v121(v181, v122, v123);
      uint64_t v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Divider, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>));
      outlined init with copy of VisualProperty?(v117, v124 + *(int *)(v125 + 48), &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>);
      outlined destroy of StandardActionHandler?(v119, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>);
      __n128 v126 = *(void (**)(char *, uint64_t))(v120 + 8);
      v126(v87, v123);
      (*(void (**)(char *, uint64_t))(v162 + 8))(v161, v170);
      outlined destroy of StandardActionHandler?(v117, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>);
      uint64_t v127 = v179;
      v126(v122, v123);
      uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Divider, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>)>);
      __swift_storeEnumTagSinglePayload(v124, 0, 1, v128);
      uint64_t v129 = v124;
      uint64_t v62 = v127;
      outlined init with take of ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>(v129, v127, &demangling cache variable for type metadata for TupleView<(Divider, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>)>?);
      goto LABEL_9;
    }
    swift_bridgeObjectRelease();
    outlined destroy of StandardActionHandler?(v63, &demangling cache variable for type metadata for URL?);
  }
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Divider, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>)>);
  __swift_storeEnumTagSinglePayload(v62, 1, 1, v84);
LABEL_9:
  uint64_t v130 = v171;
  unint64_t v131 = *(void (**)(char *, char *, uint64_t))(v171 + 16);
  unint64_t v132 = v177;
  uint64_t v133 = v172;
  v131(v177, v176, v172);
  uint64_t v134 = v175;
  __n128 v135 = *(void (**)(char *, char *, uint64_t))(v175 + 16);
  uint64_t v136 = v174;
  v135(v174, v182, v180);
  outlined init with copy of VisualProperty?(v183, v178, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>);
  outlined init with copy of VisualProperty?(v62, (uint64_t)v181, &demangling cache variable for type metadata for TupleView<(Divider, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>)>?);
  uint64_t v137 = v173;
  v131(v173, v132, v133);
  uint64_t v138 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>, TupleView<(Divider, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>)>?));
  uint64_t v139 = v180;
  v135(&v137[v138[12]], v136, v180);
  uint64_t v140 = v178;
  outlined init with copy of VisualProperty?(v178, (uint64_t)&v137[v138[16]], &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>);
  uint64_t v141 = (uint64_t)&v137[v138[20]];
  uint64_t v142 = (uint64_t)v181;
  outlined init with copy of VisualProperty?((uint64_t)v181, v141, &demangling cache variable for type metadata for TupleView<(Divider, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>)>?);
  outlined destroy of StandardActionHandler?(v179, &demangling cache variable for type metadata for TupleView<(Divider, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>)>?);
  outlined destroy of StandardActionHandler?(v183, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>);
  unint64_t v143 = *(void (**)(char *, uint64_t))(v134 + 8);
  v143(v182, v139);
  unint64_t v144 = *(void (**)(char *, uint64_t))(v130 + 8);
  v144(v176, v133);
  outlined destroy of StandardActionHandler?(v142, &demangling cache variable for type metadata for TupleView<(Divider, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>)>?);
  outlined destroy of StandardActionHandler?(v140, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>);
  v143(v136, v139);
  return ((uint64_t (*)(char *, uint64_t))v144)(v177, v133);
}

uint64_t associated type witness table accessor for View.Body : View in AutoShortcutAppEnabledView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in closure #1 in AutoShortcutAppEnabledView.body.getter@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v61 = a2;
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VStack<TupleView<(ForEach<[String], String, Text>, ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>?)>>);
  __chkstk_darwin(v58);
  uint64_t v4 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0);
  uint64_t v57 = *(void *)(v60 - 8);
  uint64_t v5 = __chkstk_darwin(v60);
  uint64_t v56 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v62 = (char *)&v52 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v59 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v52 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v52 - v15;
  uint64_t v17 = a1[3];
  uint64_t v55 = a1[2];
  uint64_t v18 = a1;
  swift_bridgeObjectRetain();
  unsigned __int8 v19 = static Edge.Set.leading.getter();
  char v20 = Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v19) {
    char v20 = Edge.Set.init(rawValue:)();
  }
  EdgeInsets.init(_all:)();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  unsigned __int8 v29 = static Edge.Set.top.getter();
  char v30 = Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v29) {
    char v30 = Edge.Set.init(rawValue:)();
  }
  EdgeInsets.init(_all:)();
  uint64_t v63 = v55;
  uint64_t v64 = v17;
  char v65 = v20;
  uint64_t v66 = v22;
  uint64_t v67 = v24;
  uint64_t v68 = v26;
  uint64_t v69 = v28;
  char v70 = 0;
  char v71 = v30;
  uint64_t v72 = v31;
  uint64_t v73 = v32;
  uint64_t v74 = v33;
  uint64_t v75 = v34;
  char v76 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<IconView, _PaddingLayout>, _PaddingLayout>);
  _s7SwiftUI15ModifiedContentVy16SiriLinkUIPlugin8IconViewVAA14_PaddingLayoutVGACyxq_GAA0I0A2aKRzAA0I8ModifierR_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<IconView, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &demangling cache variable for type metadata for ModifiedContent<ModifiedContent<IconView, _PaddingLayout>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<IconView, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  View.ambientDrawable(renderWithDrawingGroup:)();
  swift_bridgeObjectRelease();
  uint64_t v54 = v9;
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  uint64_t v36 = v16;
  uint64_t v53 = v16;
  uint64_t v37 = v8;
  v35(v16, v14, v8);
  *(void *)uint64_t v4 = static HorizontalAlignment.leading.getter();
  *((void *)v4 + 1) = 0x4010000000000000;
  v4[16] = 0;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(ForEach<[String], String, Text>, ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>?)>>);
  closure #1 in closure #1 in closure #1 in AutoShortcutAppEnabledView.body.getter(v18, &v4[*(int *)(v38 + 44)]);
  lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(ForEach<[String], String, Text>, ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>?)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(ForEach<[String], String, Text>, ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>?)>>);
  uint64_t v39 = v56;
  View.ambientDrawable(renderWithDrawingGroup:)();
  outlined destroy of StandardActionHandler?((uint64_t)v4, &demangling cache variable for type metadata for VStack<TupleView<(ForEach<[String], String, Text>, ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>?)>>);
  uint64_t v40 = v57;
  uint64_t v41 = v62;
  uint64_t v42 = v60;
  (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v62, v39, v60);
  unint64_t v43 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  uint64_t v44 = v59;
  v43(v59, v36, v37);
  uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
  v45(v39, v41, v42);
  uint64_t v46 = v61;
  v43(v61, v44, v37);
  uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer));
  v45(&v46[*(int *)(v47 + 48)], v39, v42);
  uint64_t v48 = &v46[*(int *)(v47 + 64)];
  *(void *)uint64_t v48 = 0;
  v48[8] = 1;
  uint64_t v49 = *(void (**)(char *, uint64_t))(v40 + 8);
  v49(v62, v42);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v54 + 8);
  v50(v53, v37);
  v49(v39, v42);
  return ((uint64_t (*)(char *, uint64_t))v50)(v44, v37);
}

uint64_t closure #1 in closure #1 in closure #1 in AutoShortcutAppEnabledView.body.getter@<X0>(const void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v68 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  __chkstk_darwin(v3 - 8);
  uint64_t v60 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for Font.TextStyle();
  uint64_t v57 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v55 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Link<Text>);
  uint64_t v58 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v64 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>);
  __chkstk_darwin(v67);
  uint64_t v56 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for URL();
  uint64_t v63 = *(void *)(v69 - 8);
  uint64_t v11 = __chkstk_darwin(v69);
  uint64_t v54 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v62 = (char *)&v53 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>?);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v66 = (uint64_t)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v53 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForEach<[String], String, Text>);
  char v20 = *(char **)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  char v65 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v53 - v23;
  memcpy(__dst, a1, sizeof(__dst));
  char v70 = AutoShortcutAppPhrasesViewModel.displayPhrases.getter();
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String]);
  ForEach<>.init(_:id:content:)();
  uint64_t v25 = __dst[7];
  if (__dst[7])
  {
    uint64_t v26 = (void *)__dst[6];
    swift_bridgeObjectRetain();
    AutoShortcutAppPhrasesViewModel.punchoutURL.getter();
    URL.init(string:)();
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v69) != 1)
    {
      uint64_t v29 = v63;
      char v30 = v62;
      uint64_t v31 = v69;
      (*(void (**)(void))(v63 + 32))();
      char v70 = v26;
      uint64_t v71 = v25;
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v54, v30, v31);
      lazy protocol witness table accessor for type String and conformance String();
      Link<>.init<A>(_:destination:)();
      uint64_t v32 = v57;
      uint64_t v33 = v55;
      uint64_t v34 = v59;
      (*(void (**)(char *, void, uint64_t))(v57 + 104))(v55, enum case for Font.TextStyle.title3(_:), v59);
      uint64_t v35 = enum case for Font.Design.rounded(_:);
      uint64_t v36 = type metadata accessor for Font.Design();
      uint64_t v37 = (uint64_t)v60;
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 104))(v60, v35, v36);
      __swift_storeEnumTagSinglePayload(v37, 0, 1, v36);
      static Font.Weight.medium.getter();
      uint64_t v54 = (char *)static Font.system(_:design:weight:)();
      outlined destroy of StandardActionHandler?(v37, &demangling cache variable for type metadata for Font.Design?);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v34);
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v39 = v58;
      uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
      uint64_t v41 = (uint64_t)v56;
      uint64_t v60 = v20;
      uint64_t v42 = v64;
      uint64_t v43 = v61;
      v40(v56, v64, v61);
      uint64_t v28 = v67;
      uint64_t v44 = (uint64_t *)(v41 + *(int *)(v67 + 36));
      uint64_t v45 = v54;
      *uint64_t v44 = KeyPath;
      v44[1] = (uint64_t)v45;
      char v20 = v60;
      (*(void (**)(char *, uint64_t))(v39 + 8))(v42, v43);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v69);
      outlined init with take of ModifiedContent<VStack<ForEach<[String], String, Text>>, _FixedSizeLayout>(v41, (uint64_t)v18, &demangling cache variable for type metadata for ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>);
      uint64_t v27 = 0;
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    outlined destroy of StandardActionHandler?((uint64_t)v10, &demangling cache variable for type metadata for URL?);
  }
  uint64_t v27 = 1;
  uint64_t v28 = v67;
LABEL_6:
  __swift_storeEnumTagSinglePayload((uint64_t)v18, v27, 1, v28);
  uint64_t v46 = (void (*)(char *, char *, uint64_t))*((void *)v20 + 2);
  uint64_t v47 = v65;
  v46(v65, v24, v19);
  uint64_t v48 = v66;
  outlined init with copy of VisualProperty?((uint64_t)v18, v66, &demangling cache variable for type metadata for ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>?);
  uint64_t v49 = v68;
  v46(v68, v47, v19);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ForEach<[String], String, Text>, ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>?));
  outlined init with copy of VisualProperty?(v48, (uint64_t)&v49[*(int *)(v50 + 48)], &demangling cache variable for type metadata for ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>?);
  outlined destroy of StandardActionHandler?((uint64_t)v18, &demangling cache variable for type metadata for ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>?);
  uint64_t v51 = (void (*)(char *, uint64_t))*((void *)v20 + 1);
  v51(v24, v19);
  outlined destroy of StandardActionHandler?(v48, &demangling cache variable for type metadata for ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>?);
  return ((uint64_t (*)(char *, uint64_t))v51)(v47, v19);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in AutoShortcutAppEnabledView.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  v35[0] = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Font.TextStyle();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v36 = v10;
  uint64_t v37 = v11;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v12 = Text.init<A>(_:)();
  uint64_t v14 = v13;
  char v16 = v15 & 1;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for Font.TextStyle.title3(_:), v6);
  uint64_t v17 = enum case for Font.Design.rounded(_:);
  uint64_t v18 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(v5, v17, v18);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v18);
  static Font.Weight.medium.getter();
  static Font.system(_:design:weight:)();
  outlined destroy of StandardActionHandler?((uint64_t)v5, &demangling cache variable for type metadata for Font.Design?);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v19 = Text.font(_:)();
  uint64_t v21 = v20;
  LOBYTE(v9) = v22;
  swift_release();
  LOBYTE(v18) = v9 & 1;
  outlined consume of Text.Storage(v12, v14, v16);
  swift_bridgeObjectRelease();
  static Color.secondary.getter();
  uint64_t v23 = Text.foregroundColor(_:)();
  uint64_t v25 = v24;
  LOBYTE(v14) = v26;
  swift_release();
  LOBYTE(v11) = v14 & 1;
  outlined consume of Text.Storage(v19, v21, v18);
  swift_bridgeObjectRelease();
  LODWORD(v36) = static HierarchicalShapeStyle.secondary.getter();
  uint64_t v27 = Text.foregroundStyle<A>(_:)();
  uint64_t v29 = v28;
  LOBYTE(v21) = v30;
  uint64_t v32 = v31;
  outlined consume of Text.Storage(v23, v25, v11);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v34 = v35[0];
  *(void *)v35[0] = v27;
  *(void *)(v34 + 8) = v29;
  *(unsigned char *)(v34 + 16) = v21 & 1;
  *(void *)(v34 + 24) = v32;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance AutoShortcutAppEnabledView@<X0>(uint64_t a1@<X8>)
{
  memcpy(__dst, v1, sizeof(__dst));
  return AutoShortcutAppEnabledView.body.getter(a1);
}

ValueMetadata *type metadata accessor for AutoShortcutAppEnabledView()
{
  return &type metadata for AutoShortcutAppEnabledView;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>, TupleView<(Divider, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>)>?)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>, TupleView<(Divider, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>)>?)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>, TupleView<(Divider, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>)>?)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<VStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>, TupleView<(Divider, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>)>?)>>, _PaddingLayout>);
    lazy protocol witness table accessor for type _BackgroundModifier<GeometryReader<ModifiedContent<Color, _GeometryActionModifier<CGSize>>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>, TupleView<(Divider, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>)>?)>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>, TupleView<(Divider, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>)>?)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Divider, ModifiedContent<ModifiedContent<HStack<TupleView<(<<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, <<opaque return type of View.ambientDrawable(renderWithDrawingGroup:)>>.0, Spacer)>>, _PaddingLayout>, _FixedSizeLayout>, TupleView<(Divider, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Link<Text>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _PaddingLayout>, _PaddingLayout>)>?)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.lineSpacing : EnvironmentValues, serialized@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineSpacing.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_450FC@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineSpacing.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.lineSpacing : EnvironmentValues, serialized()
{
  return EnvironmentValues.lineSpacing.setter();
}

uint64_t sub_45150()
{
  return EnvironmentValues.lineSpacing.setter();
}

uint64_t _s7SwiftUI15ModifiedContentVy16SiriLinkUIPlugin8IconViewVAA14_PaddingLayoutVGACyxq_GAA0I0A2aKRzAA0I8ModifierR_rlWlTm_0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.font : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_45224@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.font : EnvironmentValues, serialized()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_45280@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.foregroundColor : EnvironmentValues, serialized()
{
  return EnvironmentValues.foregroundColor.setter();
}

SiriLinkUIPlugin::AskForInputType_optional __swiftcall AskForInputType.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of AskForInputType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return (SiriLinkUIPlugin::AskForInputType_optional)3;
  }
  else {
    return (SiriLinkUIPlugin::AskForInputType_optional)v3;
  }
}

uint64_t AskForInputType.rawValue.getter(char a1)
{
  return *(void *)&aText_2[8 * a1];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AskForInputType(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type AskForInputType and conformance AskForInputType()
{
  unint64_t result = lazy protocol witness table cache variable for type AskForInputType and conformance AskForInputType;
  if (!lazy protocol witness table cache variable for type AskForInputType and conformance AskForInputType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AskForInputType and conformance AskForInputType);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AskForInputType and conformance AskForInputType;
  if (!lazy protocol witness table cache variable for type AskForInputType and conformance AskForInputType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AskForInputType and conformance AskForInputType);
  }
  return result;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  uint64_t v3 = AskForInputType.rawValue.getter(a1);
  uint64_t v5 = v4;
  if (v3 == AskForInputType.rawValue.getter(a2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AskForInputType()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AskForInputType(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  AskForInputType.rawValue.getter(a2);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AskForInputType(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  return Hasher._finalize()();
}

SiriLinkUIPlugin::AskForInputType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AskForInputType@<W0>(Swift::String *a1@<X0>, SiriLinkUIPlugin::AskForInputType_optional *a2@<X8>)
{
  result.value = AskForInputType.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AskForInputType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AskForInputType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AskForInputType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AskForInputType()
{
  return RawRepresentable<>.encode(to:)();
}

unsigned char *storeEnumTagSinglePayload for AskForInputType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x45734);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AskForInputType()
{
  return &type metadata for AskForInputType;
}

uint64_t CustomIntentView.init(intentModel:)()
{
  return _s16SiriLinkUIPlugin18WorkflowDataModelsO17CustomIntentModelVWObTm_0();
}

uint64_t type metadata accessor for CustomIntentView()
{
  uint64_t result = type metadata singleton initialization cache for CustomIntentView;
  if (!type metadata singleton initialization cache for CustomIntentView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t CustomIntentView.intentModel.getter()
{
  return _s16SiriLinkUIPlugin18WorkflowDataModelsO17CustomIntentModelVWOcTm_0();
}

uint64_t CustomIntentView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v2 = type metadata accessor for CustomIntentView();
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for IntentsUIComponentView();
  OUTLINED_FUNCTION_0_1();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  char v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.componentTapped(isNavigation:perform:)>>.0);
  OUTLINED_FUNCTION_0_1();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  CodableINInteraction.wrappedValue.getter();
  uint64_t v21 = v1;
  IntentsUIComponentView.init(_:slots:)();
  _s16SiriLinkUIPlugin18WorkflowDataModelsO17CustomIntentModelVWOcTm_0();
  swift_allocObject();
  _s16SiriLinkUIPlugin18WorkflowDataModelsO17CustomIntentModelVWObTm_0();
  lazy protocol witness table accessor for type IntentsUIComponentView and conformance IntentsUIComponentView(&lazy protocol witness table cache variable for type IntentsUIComponentView and conformance IntentsUIComponentView, (void (*)(uint64_t))&type metadata accessor for IntentsUIComponentView);
  View.componentTapped(isNavigation:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
  char v14 = static Edge.Set.all.getter();
  uint64_t v16 = v19;
  uint64_t v15 = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v20, v13, v19);
  uint64_t v17 = v15
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, _PaddingLayout>)
               + 36);
  *(unsigned char *)uint64_t v17 = v14;
  *(void *)(v17 + 8) = 0x402E000000000000;
  *(void *)(v17 + 16) = 0;
  *(void *)(v17 + 24) = 0;
  *(void *)(v17 + 32) = 0;
  *(unsigned char *)(v17 + 40) = 0;
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v16);
}

uint64_t closure #1 in CustomIntentView.body.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IntentsUISlot();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = a1;
  IntentsUISlot.init(_:fallback:)();
  uint64_t v6 = static IntentsUISlotBuilder.buildExpression(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[IntentsUISlot]>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_48DD0;
  *(void *)(v7 + 32) = v6;
  uint64_t v8 = static IntentsUISlotBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t partial apply for closure #1 in CustomIntentView.body.getter()
{
  return closure #1 in CustomIntentView.body.getter(*(void *)(v0 + 16));
}

uint64_t closure #1 in closure #1 in CustomIntentView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SummaryItemStandardView();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v31 = (char *)&v31 - v11;
  uint64_t v12 = a1 + *(int *)(type metadata accessor for CustomIntentView() + 20);
  uint64_t v13 = type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  char v14 = (uint64_t *)(v12 + *(int *)(v13 + 28));
  uint64_t v15 = v14[1];
  uint64_t v45 = *v14;
  uint64_t v46 = v15;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v16 = Text.init<A>(_:)();
  uint64_t v18 = v17;
  char v20 = v19;
  uint64_t v22 = v21;
  uint64_t v47 = &type metadata for Text;
  uint64_t v48 = &protocol witness table for Text;
  uint64_t v23 = swift_allocObject();
  uint64_t v45 = v23;
  *(void *)(v23 + 16) = v16;
  *(void *)(v23 + 24) = v18;
  *(unsigned char *)(v23 + 32) = v20 & 1;
  *(void *)(v23 + 40) = v22;
  uint64_t v44 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  uint64_t v41 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  uint64_t v38 = 0;
  long long v37 = 0u;
  long long v36 = 0u;
  outlined init with copy of VisualProperty?(v12 + *(int *)(v13 + 24), (uint64_t)v5);
  uint64_t v24 = type metadata accessor for VisualProperty();
  if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v24) == 1)
  {
    _s9SnippetUI21StandardActionHandlerVSgWOhTm_0((uint64_t)v5, &demangling cache variable for type metadata for VisualProperty?);
    long long v33 = 0u;
    long long v34 = 0u;
    uint64_t v35 = 0;
  }
  else
  {
    *((void *)&v34 + 1) = v24;
    uint64_t v35 = &protocol witness table for VisualProperty;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v33);
    (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(boxed_opaque_existential_1, v5, v24);
  }
  SummaryItemStandardView.init(text1:text2:text3:text4:thumbnail:)();
  char v26 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v27 = v31;
  v26(v31, v10, v6);
  uint64_t v28 = v32;
  v32[3] = v6;
  v28[4] = lazy protocol witness table accessor for type IntentsUIComponentView and conformance IntentsUIComponentView(&lazy protocol witness table cache variable for type SummaryItemStandardView and conformance SummaryItemStandardView, (void (*)(uint64_t))&type metadata accessor for SummaryItemStandardView);
  uint64_t v29 = __swift_allocate_boxed_opaque_existential_1(v28);
  return ((uint64_t (*)(uint64_t *, char *, uint64_t))v26)(v29, v27, v6);
}

uint64_t closure #2 in CustomIntentView.body.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InteractionType?);
  __chkstk_darwin(v0 - 8);
  uint64_t v29 = (uint64_t)&v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionProperty?);
  __chkstk_darwin(v2 - 8);
  uint64_t v28 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StandardActionHandler?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Command();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ActionElement();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  char v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CustomIntentView();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  *(void *)uint64_t v10 = CodableAceObject.wrappedValue.getter();
  v10[8] = 1;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for Command.aceCommand(_:), v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_ProtoIdiom>);
  uint64_t v15 = type metadata accessor for _ProtoIdiom();
  uint64_t v16 = *(void *)(v15 - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = swift_allocObject();
  long long v27 = xmmword_48DD0;
  *(_OWORD *)(v18 + 16) = xmmword_48DD0;
  (*(void (**)(unint64_t, void, uint64_t))(v16 + 104))(v18 + v17, enum case for _ProtoIdiom.default(_:), v15);
  specialized Set.init(_nonEmptyArrayLiteral:)(v18);
  ActionElement.init(_:text:idioms:)();
  ActionHandler.wrappedValue.getter();
  uint64_t v19 = type metadata accessor for StandardActionHandler();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v19) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return _s9SnippetUI21StandardActionHandlerVSgWOhTm_0((uint64_t)v6, &demangling cache variable for type metadata for StandardActionHandler?);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ActionElementConvertible>);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = v27;
    *(void *)(v21 + 56) = v11;
    *(void *)(v21 + 64) = &protocol witness table for ActionElement;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v21 + 32));
    (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 16))(boxed_opaque_existential_1, v14, v11);
    uint64_t v23 = (uint64_t)v28;
    ActionProperty.init(_:)();
    uint64_t v24 = type metadata accessor for ActionProperty();
    __swift_storeEnumTagSinglePayload(v23, 0, 1, v24);
    uint64_t v25 = type metadata accessor for InteractionType();
    uint64_t v26 = v29;
    __swift_storeEnumTagSinglePayload(v29, 1, 1, v25);
    StandardActionHandler.perform(_:interactionType:)();
    _s9SnippetUI21StandardActionHandlerVSgWOhTm_0(v26, &demangling cache variable for type metadata for InteractionType?);
    _s9SnippetUI21StandardActionHandlerVSgWOhTm_0(v23, &demangling cache variable for type metadata for ActionProperty?);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v19 - 8) + 8))(v6, v19);
  }
}

uint64_t _s16SiriLinkUIPlugin18WorkflowDataModelsO17CustomIntentModelVWOcTm_0()
{
  uint64_t v2 = OUTLINED_FUNCTION_4_8();
  v3(v2);
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v0, v1);
  return v0;
}

uint64_t sub_4651C()
{
  uint64_t v1 = (int *)(type metadata accessor for CustomIntentView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0();
  v5();
  uint64_t v6 = v0 + v3 + v1[7];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0();
  v7();
  uint64_t v8 = type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  type metadata accessor for CodableINInteraction();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_7_0();
  v9();
  uint64_t v10 = v6 + *(int *)(v8 + 24);
  uint64_t v11 = type metadata accessor for VisualProperty();
  if (!__swift_getEnumTagSinglePayload(v10, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t _s16SiriLinkUIPlugin18WorkflowDataModelsO17CustomIntentModelVWObTm_0()
{
  uint64_t v2 = OUTLINED_FUNCTION_4_8();
  v3(v2);
  OUTLINED_FUNCTION_2();
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v0, v1);
  return v0;
}

uint64_t partial apply for closure #2 in CustomIntentView.body.getter()
{
  type metadata accessor for CustomIntentView();

  return closure #2 in CustomIntentView.body.getter();
}

uint64_t associated type witness table accessor for View.Body : View in CustomIntentView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for CustomIntentView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ActionHandler();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
    uint64_t v13 = v12[5];
    char v14 = &v9[v13];
    uint64_t v15 = &v10[v13];
    uint64_t v16 = type metadata accessor for CodableINInteraction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = v12[6];
    uint64_t v18 = &v9[v17];
    uint64_t v19 = &v10[v17];
    uint64_t v20 = type metadata accessor for VisualProperty();
    if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
      memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
      __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v20);
    }
    uint64_t v23 = v12[7];
    uint64_t v24 = &v9[v23];
    uint64_t v25 = &v10[v23];
    uint64_t v26 = *((void *)v25 + 1);
    *(void *)uint64_t v24 = *(void *)v25;
    *((void *)v24 + 1) = v26;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CustomIntentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v8 = v5 + *(int *)(v7 + 20);
  uint64_t v9 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v5 + *(int *)(v7 + 24);
  uint64_t v11 = type metadata accessor for VisualProperty();
  if (!__swift_getEnumTagSinglePayload(v10, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CustomIntentView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = v11[6];
  uint64_t v17 = (void *)(v8 + v16);
  uint64_t v18 = (const void *)(v9 + v16);
  uint64_t v19 = type metadata accessor for VisualProperty();
  if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v17, v18, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
  }
  uint64_t v21 = v11[7];
  uint64_t v22 = (void *)(v8 + v21);
  uint64_t v23 = (void *)(v9 + v21);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CustomIntentView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = v11[6];
  uint64_t v17 = (void *)(v8 + v16);
  uint64_t v18 = (const void *)(v9 + v16);
  uint64_t v19 = type metadata accessor for VisualProperty();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, v19);
  int v21 = __swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19);
  if (!EnumTagSinglePayload)
  {
    uint64_t v22 = *(void *)(v19 - 8);
    if (!v21)
    {
      (*(void (**)(void *, const void *, uint64_t))(v22 + 24))(v17, v18, v19);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v17, v18, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
LABEL_7:
  uint64_t v24 = v11[7];
  uint64_t v25 = (void *)(v8 + v24);
  uint64_t v26 = (void *)(v9 + v24);
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CustomIntentView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  uint64_t v16 = v11[6];
  uint64_t v17 = (void *)(v8 + v16);
  uint64_t v18 = (const void *)(v9 + v16);
  uint64_t v19 = type metadata accessor for VisualProperty();
  if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v17, v18, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
    __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
  }
  *(_OWORD *)(v8 + v11[7]) = *(_OWORD *)(v9 + v11[7]);
  return a1;
}

uint64_t assignWithTake for CustomIntentView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActionHandler();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableAceObject<SAIntentGroupLaunchAppWithIntent>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = type metadata accessor for CodableINInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = v11[6];
  uint64_t v17 = (void *)(v8 + v16);
  uint64_t v18 = (const void *)(v9 + v16);
  uint64_t v19 = type metadata accessor for VisualProperty();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v17, 1, v19);
  int v21 = __swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19);
  if (!EnumTagSinglePayload)
  {
    uint64_t v22 = *(void *)(v19 - 8);
    if (!v21)
    {
      (*(void (**)(void *, const void *, uint64_t))(v22 + 40))(v17, v18, v19);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
    memcpy(v17, v18, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 0, 1, v19);
LABEL_7:
  uint64_t v24 = v11[7];
  uint64_t v25 = (void *)(v8 + v24);
  uint64_t v26 = (uint64_t *)(v9 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  *uint64_t v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomIntentView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_473D4);
}

uint64_t sub_473D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v8 = type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
    uint64_t v9 = a1 + *(int *)(a3 + 20);
  }

  return __swift_getEnumTagSinglePayload(v9, a2, v8);
}

uint64_t storeEnumTagSinglePayload for CustomIntentView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_47464);
}

uint64_t sub_47464(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for ActionHandler();
  OUTLINED_FUNCTION_1_0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v10 = type metadata accessor for WorkflowDataModels.CustomIntentModel(0);
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }

  return __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

uint64_t type metadata completion function for CustomIntentView()
{
  uint64_t result = type metadata accessor for ActionHandler();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for WorkflowDataModels.CustomIntentModel(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, _PaddingLayout>);
    type metadata accessor for IntentsUIComponentView();
    lazy protocol witness table accessor for type IntentsUIComponentView and conformance IntentsUIComponentView(&lazy protocol witness table cache variable for type IntentsUIComponentView and conformance IntentsUIComponentView, (void (*)(uint64_t))&type metadata accessor for IntentsUIComponentView);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.componentTapped(isNavigation:perform:)>>.0, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in CustomIntentView.body.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in closure #1 in CustomIntentView.body.getter(*(void *)(v1 + 16), a1);
}

uint64_t sub_47698()
{
  outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t outlined init with copy of VisualProperty?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VisualProperty?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type IntentsUIComponentView and conformance IntentsUIComponentView(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_4_8()
{
  return 0;
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return dispatch thunk of PropertyListEncoder.encode<A>(_:)();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1 = Data.base64EncodedString(options:)(options);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t AppPunchout.init(punchOutUri:bundleId:appDisplayName:)()
{
  return AppPunchout.init(punchOutUri:bundleId:appDisplayName:)();
}

uint64_t type metadata accessor for AppPunchout()
{
  return type metadata accessor for AppPunchout();
}

uint64_t type metadata accessor for _ProtoIdiom()
{
  return type metadata accessor for _ProtoIdiom();
}

uint64_t ImageElement.asVisualElement()()
{
  return ImageElement.asVisualElement()();
}

uint64_t type metadata accessor for ImageElement.ImageStyle()
{
  return type metadata accessor for ImageElement.ImageStyle();
}

uint64_t type metadata accessor for ImageElement.Background()
{
  return type metadata accessor for ImageElement.Background();
}

uint64_t ImageElement.AspectRatio.init(width:height:)()
{
  return ImageElement.AspectRatio.init(width:height:)();
}

uint64_t type metadata accessor for ImageElement.AspectRatio()
{
  return type metadata accessor for ImageElement.AspectRatio();
}

uint64_t type metadata accessor for ImageElement.RenderingMode()
{
  return type metadata accessor for ImageElement.RenderingMode();
}

uint64_t static ImageElement.symbol(_:darkModeName:tintColor:renderingMode:imageStyle:background:idioms:punchesThroughBackground:)()
{
  return static ImageElement.symbol(_:darkModeName:tintColor:renderingMode:imageStyle:background:idioms:punchesThroughBackground:)();
}

uint64_t static ImageElement.pngData(_:darkModeData:imageStyle:aspectRatio:fixedWidth:fixedHeight:idioms:)()
{
  return static ImageElement.pngData(_:darkModeData:imageStyle:aspectRatio:fixedWidth:fixedHeight:idioms:)();
}

uint64_t type metadata accessor for ImageElement()
{
  return type metadata accessor for ImageElement();
}

uint64_t TextProperty.hashValue.getter()
{
  return TextProperty.hashValue.getter();
}

uint64_t type metadata accessor for TextProperty()
{
  return type metadata accessor for TextProperty();
}

uint64_t type metadata accessor for ActionElement()
{
  return type metadata accessor for ActionElement();
}

uint64_t ActionElement.init(_:text:idioms:)()
{
  return ActionElement.init(_:text:idioms:)();
}

uint64_t type metadata accessor for VisualElement()
{
  return type metadata accessor for VisualElement();
}

uint64_t type metadata accessor for ActionProperty()
{
  return type metadata accessor for ActionProperty();
}

uint64_t ActionProperty.init(_:)()
{
  return ActionProperty.init(_:)();
}

uint64_t SimpleItemRich.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:action:componentName:linkIdentifier:)()
{
  return SimpleItemRich.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:action:componentName:linkIdentifier:)();
}

uint64_t VisualProperty.asAnyView()()
{
  return VisualProperty.asAnyView()();
}

uint64_t type metadata accessor for VisualProperty()
{
  return type metadata accessor for VisualProperty();
}

uint64_t VisualProperty.init(_:safeForLogging:focusAction:selectedAction:)()
{
  return VisualProperty.init(_:safeForLogging:focusAction:selectedAction:)();
}

uint64_t CodableAceObject.init(wrappedValue:)()
{
  return CodableAceObject.init(wrappedValue:)();
}

uint64_t CodableAceObject.wrappedValue.getter()
{
  return CodableAceObject.wrappedValue.getter();
}

uint64_t type metadata accessor for CodableAceObject()
{
  return type metadata accessor for CodableAceObject();
}

uint64_t SimpleItemStandard.init(text1:text2:text3:text4:text5:text6:action:componentName:linkIdentifier:)()
{
  return SimpleItemStandard.init(text1:text2:text3:text4:text5:text6:action:componentName:linkIdentifier:)();
}

uint64_t CodableINInteraction.init(wrappedValue:)()
{
  return CodableINInteraction.init(wrappedValue:)();
}

uint64_t CodableINInteraction.wrappedValue.getter()
{
  return CodableINInteraction.wrappedValue.getter();
}

uint64_t type metadata accessor for CodableINInteraction()
{
  return type metadata accessor for CodableINInteraction();
}

uint64_t VisualPropertyConvertible<>.asVisualProperty()()
{
  return VisualPropertyConvertible<>.asVisualProperty()();
}

uint64_t type metadata accessor for Color()
{
  return type metadata accessor for Color();
}

uint64_t static Command.directInvocation(identifier:payload:isNavigation:)()
{
  return static Command.directInvocation(identifier:payload:isNavigation:)();
}

uint64_t type metadata accessor for Command()
{
  return type metadata accessor for Command();
}

uint64_t static SiriKitLifecycle._logCrashToEventBus(_:)()
{
  return static SiriKitLifecycle._logCrashToEventBus(_:)();
}

uint64_t dispatch thunk of DeviceState.isWatch.getter()
{
  return dispatch thunk of DeviceState.isWatch.getter();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return os_log(_:dso:log:_:_:)();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t static INShortcut._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static INShortcut._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t INShortcut.intent.getter()
{
  return INShortcut.intent.getter();
}

uint64_t type metadata accessor for INShortcut()
{
  return type metadata accessor for INShortcut();
}

uint64_t EdgeInsets.init(_all:)()
{
  return EdgeInsets.init(_all:)();
}

uint64_t static ButtonStyle<>.buttonItemPreferredAndDestructive.getter()
{
  return static ButtonStyle<>.buttonItemPreferredAndDestructive.getter();
}

uint64_t static ButtonStyle<>.buttonItemStandard.getter()
{
  return static ButtonStyle<>.buttonItemStandard.getter();
}

uint64_t static ButtonStyle<>.buttonItemPreferred.getter()
{
  return static ButtonStyle<>.buttonItemPreferred.getter();
}

uint64_t _FrameLayout.init(width:height:alignment:)()
{
  return _FrameLayout.init(width:height:alignment:)();
}

uint64_t GeometryProxy.size.getter()
{
  return GeometryProxy.size.getter();
}

uint64_t type metadata accessor for _ArchivedView()
{
  return type metadata accessor for _ArchivedView();
}

uint64_t PlainButtonStyle.init()()
{
  return PlainButtonStyle.init()();
}

uint64_t type metadata accessor for PlainButtonStyle()
{
  return type metadata accessor for PlainButtonStyle();
}

uint64_t _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)()
{
  return _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
}

uint64_t EnvironmentObject.error()()
{
  return EnvironmentObject.error()();
}

uint64_t EnvironmentObject.init()()
{
  return EnvironmentObject.init()();
}

uint64_t EnvironmentValues.visualResponseLocation.getter()
{
  return EnvironmentValues.visualResponseLocation.getter();
}

uint64_t EnvironmentValues.visualResponseLocation.setter()
{
  return EnvironmentValues.visualResponseLocation.setter();
}

uint64_t EnvironmentValues.lineSpacing.getter()
{
  return EnvironmentValues.lineSpacing.getter();
}

uint64_t EnvironmentValues.lineSpacing.setter()
{
  return EnvironmentValues.lineSpacing.setter();
}

uint64_t EnvironmentValues.foregroundColor.getter()
{
  return EnvironmentValues.foregroundColor.getter();
}

uint64_t EnvironmentValues.foregroundColor.setter()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t EnvironmentValues.multilineTextAlignment.getter()
{
  return EnvironmentValues.multilineTextAlignment.getter();
}

uint64_t EnvironmentValues.multilineTextAlignment.setter()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t EnvironmentValues.font.getter()
{
  return EnvironmentValues.font.getter();
}

uint64_t EnvironmentValues.font.setter()
{
  return EnvironmentValues.font.setter();
}

uint64_t static VerticalAlignment.top.getter()
{
  return static VerticalAlignment.top.getter();
}

uint64_t static VerticalAlignment.center.getter()
{
  return static VerticalAlignment.center.getter();
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(Swift::String a1)
{
}

Swift::Void __swiftcall LocalizedStringKey.StringInterpolation.appendLiteral(_:)(Swift::String a1)
{
}

uint64_t LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t type metadata accessor for LocalizedStringKey.StringInterpolation()
{
  return type metadata accessor for LocalizedStringKey.StringInterpolation();
}

uint64_t LocalizedStringKey.init(stringInterpolation:)()
{
  return LocalizedStringKey.init(stringInterpolation:)();
}

uint64_t static HorizontalAlignment.leading.getter()
{
  return static HorizontalAlignment.leading.getter();
}

uint64_t UIViewRepresentable.sizeThatFits(_:uiView:context:)()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t UIViewRepresentable.body.getter()
{
  return UIViewRepresentable.body.getter();
}

uint64_t _ArchivedViewStates.init(data:)()
{
  return _ArchivedViewStates.init(data:)();
}

uint64_t _ArchivedViewStates.state(at:)()
{
  return _ArchivedViewStates.state(at:)();
}

uint64_t type metadata accessor for _ArchivedViewStates()
{
  return type metadata accessor for _ArchivedViewStates();
}

uint64_t _ConditionalContent<>.init(storage:)()
{
  return _ConditionalContent<>.init(storage:)();
}

uint64_t static PrimitiveButtonStyle<>.rfButton.getter()
{
  return static PrimitiveButtonStyle<>.rfButton.getter();
}

uint64_t static HierarchicalShapeStyle.primary.getter()
{
  return static HierarchicalShapeStyle.primary.getter();
}

uint64_t static HierarchicalShapeStyle.secondary.getter()
{
  return static HierarchicalShapeStyle.secondary.getter();
}

uint64_t static Log.runtimeIssuesLog.getter()
{
  return static Log.runtimeIssuesLog.getter();
}

uint64_t static Edge.Set.horizontal.getter()
{
  return static Edge.Set.horizontal.getter();
}

uint64_t static Edge.Set.all.getter()
{
  return static Edge.Set.all.getter();
}

uint64_t static Edge.Set.top.getter()
{
  return static Edge.Set.top.getter();
}

uint64_t static Edge.Set.bottom.getter()
{
  return static Edge.Set.bottom.getter();
}

uint64_t static Edge.Set.leading.getter()
{
  return static Edge.Set.leading.getter();
}

uint64_t Edge.Set.init(rawValue:)()
{
  return Edge.Set.init(rawValue:)();
}

uint64_t static Edge.Set.vertical.getter()
{
  return static Edge.Set.vertical.getter();
}

uint64_t static Font.body.getter()
{
  return static Font.body.getter();
}

uint64_t type metadata accessor for Font.Design()
{
  return type metadata accessor for Font.Design();
}

uint64_t static Font.Weight.medium.getter()
{
  return static Font.Weight.medium.getter();
}

uint64_t static Font.Weight.semibold.getter()
{
  return static Font.Weight.semibold.getter();
}

uint64_t static Font.system(_:design:weight:)()
{
  return static Font.system(_:design:weight:)();
}

uint64_t static Font.title3.getter()
{
  return static Font.title3.getter();
}

uint64_t static Font.footnote.getter()
{
  return static Font.footnote.getter();
}

uint64_t static Font.headline.getter()
{
  return static Font.headline.getter();
}

uint64_t type metadata accessor for Font.TextStyle()
{
  return type metadata accessor for Font.TextStyle();
}

uint64_t Link.init(destination:label:)()
{
  return Link.init(destination:label:)();
}

uint64_t Link<>.init<A>(_:destination:)()
{
  return Link<>.init<A>(_:destination:)();
}

uint64_t Text.foregroundColor(_:)()
{
  return Text.foregroundColor(_:)();
}

uint64_t Text.foregroundStyle<A>(_:)()
{
  return Text.foregroundStyle<A>(_:)();
}

uint64_t Text.font(_:)()
{
  return Text.font(_:)();
}

uint64_t Text.init(_:tableName:bundle:comment:)()
{
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t Text.init<A>(_:)()
{
  return Text.init<A>(_:)();
}

uint64_t View.eraseToAnyView()()
{
  return View.eraseToAnyView()();
}

uint64_t View.ambientDrawable(renderWithDrawingGroup:)()
{
  return View.ambientDrawable(renderWithDrawingGroup:)();
}

uint64_t View.componentTapped(isNavigation:perform:)()
{
  return View.componentTapped(isNavigation:perform:)();
}

uint64_t View.buttonStyle<A>(_:)()
{
  return View.buttonStyle<A>(_:)();
}

{
  return View.buttonStyle<A>(_:)();
}

uint64_t View.onTapGesture(count:perform:)()
{
  return View.onTapGesture(count:perform:)();
}

uint64_t static View._viewListCount(inputs:)()
{
  return static View._viewListCount(inputs:)();
}

uint64_t static Color.clear.getter()
{
  return static Color.clear.getter();
}

uint64_t static Color.primary.getter()
{
  return static Color.primary.getter();
}

uint64_t static Color.secondary.getter()
{
  return static Color.secondary.getter();
}

uint64_t State.init(wrappedValue:)()
{
  return State.init(wrappedValue:)();
}

uint64_t State.wrappedValue.getter()
{
  return State.wrappedValue.getter();
}

uint64_t State.wrappedValue.setter()
{
  return State.wrappedValue.setter();
}

uint64_t Button.init(action:label:)()
{
  return Button.init(action:label:)();
}

uint64_t Button<>.init<A>(_:action:)()
{
  return Button<>.init<A>(_:action:)();
}

uint64_t AnyView.init<A>(_:)()
{
  return AnyView.init<A>(_:)();
}

uint64_t Divider.init()()
{
  return Divider.init()();
}

uint64_t type metadata accessor for Divider()
{
  return type metadata accessor for Divider();
}

uint64_t ForEach<>.init(_:id:content:)()
{
  return ForEach<>.init(_:id:content:)();
}

uint64_t ForEach<>.init(_:content:)()
{
  return ForEach<>.init(_:content:)();
}

uint64_t static Alignment.center.getter()
{
  return static Alignment.center.getter();
}

uint64_t static Alignment.leading.getter()
{
  return static Alignment.leading.getter();
}

uint64_t type metadata accessor for ButtonItemButtonStyle()
{
  return type metadata accessor for ButtonItemButtonStyle();
}

uint64_t ActionHandler.wrappedValue.getter()
{
  return ActionHandler.wrappedValue.getter();
}

uint64_t ActionHandler.init()()
{
  return ActionHandler.init()();
}

uint64_t type metadata accessor for ActionHandler()
{
  return type metadata accessor for ActionHandler();
}

uint64_t type metadata accessor for IntentsUISlot()
{
  return type metadata accessor for IntentsUISlot();
}

uint64_t IntentsUISlot.init(_:fallback:)()
{
  return IntentsUISlot.init(_:fallback:)();
}

uint64_t type metadata accessor for RFButtonStyle()
{
  return type metadata accessor for RFButtonStyle();
}

uint64_t ComponentStack.init(content:)()
{
  return ComponentStack.init(content:)();
}

uint64_t type metadata accessor for InteractionType()
{
  return type metadata accessor for InteractionType();
}

uint64_t BinaryButtonView.init(primaryButton:secondaryButton:)()
{
  return BinaryButtonView.init(primaryButton:secondaryButton:)();
}

uint64_t type metadata accessor for BinaryButtonView()
{
  return type metadata accessor for BinaryButtonView();
}

uint64_t dispatch thunk of AnyViewConvertible.asAnyView()()
{
  return dispatch thunk of AnyViewConvertible.asAnyView()();
}

uint64_t DisambiguationView.init(title:content:)()
{
  return DisambiguationView.init(title:content:)();
}

uint64_t SimpleItemRichView.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:)()
{
  return SimpleItemRichView.init(text1:text2:text3:text4:text5:text6:text7:text8:thumbnail:)();
}

uint64_t type metadata accessor for SimpleItemRichView()
{
  return type metadata accessor for SimpleItemRichView();
}

uint64_t DisambiguationTitle.init(text1:thumbnail:)()
{
  return DisambiguationTitle.init(text1:thumbnail:)();
}

uint64_t type metadata accessor for DisambiguationTitle()
{
  return type metadata accessor for DisambiguationTitle();
}

uint64_t static IntentsUISlotBuilder.buildBlock(_:)()
{
  return static IntentsUISlotBuilder.buildBlock(_:)();
}

uint64_t static IntentsUISlotBuilder.buildExpression(_:)()
{
  return static IntentsUISlotBuilder.buildExpression(_:)();
}

uint64_t StandardActionHandler.perform(_:interactionType:)()
{
  return StandardActionHandler.perform(_:interactionType:)();
}

uint64_t type metadata accessor for StandardActionHandler()
{
  return type metadata accessor for StandardActionHandler();
}

uint64_t type metadata accessor for IntentsUIComponentView()
{
  return type metadata accessor for IntentsUIComponentView();
}

uint64_t IntentsUIComponentView.init(_:slots:)()
{
  return IntentsUIComponentView.init(_:slots:)();
}

uint64_t SimpleItemStandardView.init(text1:text2:text3:text4:text5:text6:)()
{
  return SimpleItemStandardView.init(text1:text2:text3:text4:text5:text6:)();
}

uint64_t type metadata accessor for SimpleItemStandardView()
{
  return type metadata accessor for SimpleItemStandardView();
}

uint64_t SummaryItemStandardView.init(text1:text2:text3:text4:thumbnail:)()
{
  return SummaryItemStandardView.init(text1:text2:text3:text4:thumbnail:)();
}

uint64_t type metadata accessor for SummaryItemStandardView()
{
  return type metadata accessor for SummaryItemStandardView();
}

uint64_t dispatch thunk of Context.perform(appPunchout:)()
{
  return dispatch thunk of Context.perform(appPunchout:)();
}

uint64_t dispatch thunk of Context.perform(machineUtterance:)()
{
  return dispatch thunk of Context.perform(machineUtterance:)();
}

uint64_t type metadata accessor for Context()
{
  return type metadata accessor for Context();
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t String.asAnyView()()
{
  return String.asAnyView()();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)()
{
  return static SAIntentGroupLaunchAppWithIntent.launchAppWithIntent(app:intent:intentResponse:)();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t Identifiable<>.id.getter()
{
  return Identifiable<>.id.getter();
}

uint64_t StaticString.description.getter()
{
  return StaticString.description.getter();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t type metadata accessor for DecodingError()
{
  return type metadata accessor for DecodingError();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, capacity);
}

uint64_t _NativeDictionary._delete(at:)()
{
  return _NativeDictionary._delete(at:)();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return KeyedDecodingContainer.codingPath.getter();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return KeyedDecodingContainer.allKeys.getter();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return type metadata accessor for __ContiguousArrayStorageBase();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_continuation_throwingResume()
{
  return _swift_continuation_throwingResume();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return _swift_getOpaqueTypeConformance2();
}

uint64_t swift_getOpaqueTypeMetadata2()
{
  return _swift_getOpaqueTypeMetadata2();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}