id LCLog()
{
  void *v0;
  uint64_t vars8;

  if (qword_DB538 != -1) {
    dispatch_once(&qword_DB538, &stru_CEE60);
  }
  v0 = (void *)qword_DB530;

  return v0;
}

void sub_62B4(id a1)
{
  qword_DB530 = (uint64_t)os_log_create("com.apple.Accessibility", "AXLiveTranscriptionUI");

  _objc_release_x1();
}

void sub_63E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_64D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_668C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_66C4(uint64_t a1)
{
  v2 = (void *)sub_6714();
  result = dlsym(v2, "AXHasCapability");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_DB540 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_6714()
{
  v3[0] = 0;
  if (!qword_DB548)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = 3221225472;
    v3[3] = sub_6814;
    v3[4] = &unk_CEEC0;
    v3[5] = v3;
    long long v4 = off_CEEA8;
    uint64_t v5 = 0;
    qword_DB548 = _sl_dlopen();
  }
  uint64_t v0 = qword_DB548;
  v1 = (void *)v3[0];
  if (!qword_DB548)
  {
    v1 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v3[0]) {
LABEL_7:
  }
    free(v1);
  return v0;
}

uint64_t sub_6814()
{
  uint64_t result = _sl_dlopen();
  qword_DB548 = result;
  return result;
}

Class sub_6888(uint64_t a1)
{
  sub_6714();
  Class result = objc_getClass("AXBackBoardServer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_A5840();
  }
  qword_DB550 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_68E0(uint64_t a1)
{
  sub_6714();
  Class result = objc_getClass("AXUserEventTimer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_A5868();
  }
  qword_DB558 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *windowOpacity.unsafeMutableAddressor()
{
  return &windowOpacity;
}

void *fullscreenOpacity.unsafeMutableAddressor()
{
  return &fullscreenOpacity;
}

double variable initialization expression of LiveSpeechCaptionsViewsCoordinator.liveCaptionsFrame()
{
  return 0.0;
}

uint64_t variable initialization expression of AXLTCaptionsProvider._isActive()
{
  return 0;
}

unint64_t sub_696C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_7AF4(&qword_D7FB8);
  v2 = (void *)sub_A7780();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  long long v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    unint64_t result = sub_85FF8();
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_6A78(uint64_t a1)
{
  return sub_6E48(a1, &qword_D7FA8, &qword_D7FB0, (uint64_t (*)(uint64_t))sub_85FF8);
}

unint64_t sub_6AA0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_7AF4((uint64_t *)&unk_D8DA0);
  v2 = (void *)sub_A7780();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  long long v4 = (_OWORD *)(a1 + 40);
  while (1)
  {
    long long v12 = *v4;
    id v5 = *((id *)v4 - 1);
    id v6 = (id)v12;
    unint64_t result = sub_8608C((uint64_t)v5);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v5;
    *(_OWORD *)(v2[7] + 16 * result) = v12;
    uint64_t v9 = v2[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    v2[2] = v11;
    long long v4 = (_OWORD *)((char *)v4 + 24);
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_6BC0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_7AF4(&qword_D7F78);
  uint64_t v2 = sub_A7780();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_8860(v6, (uint64_t)v15, &qword_D7F80);
    unint64_t result = sub_85F3C((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_8850(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_6D04(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_7AF4(&qword_D7FA0);
  uint64_t v2 = (void *)sub_A7780();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = sub_85F80(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v11 = (uint64_t *)(v2[6] + 16 * result);
    *long long v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_6E20(uint64_t a1)
{
  return sub_6E48(a1, &qword_D7F68, &qword_D7F70, (uint64_t (*)(uint64_t))sub_85FF8);
}

unint64_t sub_6E48(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    id v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_7AF4(a2);
  uint64_t v7 = sub_A7780();
  id v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = v7 + 64;
  uint64_t v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_8860(v11, (uint64_t)&v18, a3);
    uint64_t v12 = v18;
    unint64_t result = a4(v18);
    if (v14) {
      break;
    }
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v8[6] + 8 * result) = v12;
    unint64_t result = (unint64_t)sub_8850(&v19, (_OWORD *)(v8[7] + 32 * result));
    uint64_t v15 = v8[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v8[2] = v17;
    v11 += 40;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_6F78(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_7AF4(&qword_D7F88);
  uint64_t v2 = sub_A7780();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_8860(v6, (uint64_t)&v15, (uint64_t *)&unk_D7F90);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_85F80(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_8850(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t variable initialization expression of AXLTCaptionsProvider.cleanHistoryTimer()
{
  return 0;
}

unint64_t variable initialization expression of LiveSpeechCoordinator.externalViewControllers()
{
  return sub_6AA0((uint64_t)&_swiftEmptyArrayStorage);
}

void *variable initialization expression of AXLTCaptionsProvider._captions()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of LiveSpeechCategoryPhrasesListView_iOS._selectedPhrase()
{
  return 0;
}

uint64_t variable initialization expression of LiveSpeechScreenLockManager.screenLockStateObserverToken()
{
  return 0xFFFFFFFFLL;
}

uint64_t variable initialization expression of AXLTCaptionsProvider.activeRequestType()
{
  if (qword_D7E58 != -1) {
    swift_once();
  }
  uint64_t v0 = (unsigned __int8 *)(static AXLTSettingsManager.shared + OBJC_IVAR___AXLTSettingsManager_isMicOn);
  swift_beginAccess();
  return ~*v0 & 1;
}

uint64_t variable initialization expression of AXLTCaptionsProvider.activePid()
{
  return -1;
}

id variable initialization expression of AXLTCaptionsProvider.transcription()
{
  id v0 = objc_allocWithZone((Class)AXLTLiveTranscription);

  return [v0 init];
}

uint64_t variable initialization expression of AXLTCaptionsProvider.newCaption()
{
  return 1;
}

uint64_t variable initialization expression of AXLTCaptionsProvider.lastFinalCaption@<X0>(uint64_t a1@<X8>)
{
  return sub_7528((uint64_t (*)(void))&type metadata accessor for AXLTCaption, a1);
}

id variable initialization expression of AXLTCaptionsProvider.dateFormatter()
{
  id v0 = objc_allocWithZone((Class)NSDateFormatter);

  return [v0 init];
}

id variable initialization expression of AXLTCaptionsProvider.lockScreenObserver()
{
  id v0 = objc_allocWithZone((Class)AXLTLockScreenObserver);

  return [v0 init];
}

uint64_t variable initialization expression of LiveSpeechCategoryPhrasesListView_iOS._dynamicTypeSize@<X0>(uint64_t *a1@<X8>)
{
  return sub_7498(&qword_D7E68, a1);
}

uint64_t variable initialization expression of LiveSpeechCategoryPhrasesListView_iOS._locale@<X0>(uint64_t *a1@<X8>)
{
  return sub_7498(&qword_D7E70, a1);
}

uint64_t sub_7270()
{
  return sub_A65F0();
}

uint64_t sub_7294(uint64_t a1)
{
  sub_A5A20();
  __chkstk_darwin();
  (*(void (**)(char *, uint64_t))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_A6600();
}

double variable initialization expression of AXLTCaptionsView._contentHeight()
{
  return 0.0;
}

uint64_t variable initialization expression of LiveSpeechCategoryPhrasesListView_iOS.maxDynamicTypeSize@<X0>(uint64_t a1@<X8>)
{
  if (qword_D7DE8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_A6380();
  uint64_t v3 = sub_7B38(v2, (uint64_t)qword_DF648);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t _s19LiveSpeechUIService0aB27CategoryPhrasesListView_iOSV6_store33_1896FABE22486BDCE6AD924B8C6C22A2LL7SwiftUI17EnvironmentObjectVyAA0aB5StoreCGvpfi_0()
{
  type metadata accessor for LiveSpeechStore(0);
  sub_7BB8((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);

  return sub_A64C0();
}

uint64_t variable initialization expression of LiveSpeechHUDView_iOS._horizontalSizeClass@<X0>(uint64_t *a1@<X8>)
{
  return sub_7498(&qword_D7E78, a1);
}

uint64_t sub_7498@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  *a2 = swift_getKeyPath();
  sub_7AF4(a1);

  return swift_storeEnumTagMultiPayload();
}

double variable initialization expression of AudioHistogramConfig._maxBarScale()
{
  return 1.0;
}

double variable initialization expression of LiveSpeechHUDView_iOS._pipOffset()
{
  return 0.0;
}

uint64_t variable initialization expression of LiveSpeechStore._currentSpeechContext()
{
  return 0;
}

uint64_t variable initialization expression of LiveSpeechStore._lastSpokenContext@<X0>(uint64_t a1@<X8>)
{
  return sub_7528(type metadata accessor for LiveSpeechStore.LastSpokenContext, a1);
}

uint64_t sub_7528@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

uint64_t variable initialization expression of LiveSpeechStore._queuedText()
{
  return 0;
}

void variable initialization expression of LiveSpeechStore._inputMode(uint64_t a1@<X8>)
{
  sub_A5F40();
  uint64_t v2 = (void *)sub_A5F10();
  uint64_t v3 = sub_A5F00();

  uint64_t v4 = *(void *)(v3 + 16);
  swift_bridgeObjectRelease();
  if (v4)
  {
    id v8 = (id)sub_A5F10();
    sub_A5F20();
  }
  else
  {
    uint64_t v5 = enum case for LiveSpeechInputMode.keyboard(_:);
    uint64_t v6 = sub_A5F80();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104);
    v7(a1, v5, v6);
  }
}

uint64_t variable initialization expression of LiveSpeechCaptionsCallManager.callQueue()
{
  uint64_t v0 = sub_A74B0();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A7490();
  __chkstk_darwin();
  sub_A70F0();
  __chkstk_darwin();
  sub_7B78();
  sub_A70E0();
  v5[1] = &_swiftEmptyArrayStorage;
  sub_7BB8(&qword_D7E88, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_7AF4(&qword_D7E90);
  sub_7C00();
  sub_A7640();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v0);
  return sub_A74F0();
}

id variable initialization expression of LiveSpeechCaptionsCallManager.observers()
{
  id v0 = [self weakObjectsHashTable];

  return v0;
}

double variable initialization expression of AudioHistogramConfig._levelBarMaxHeight()
{
  return 28.0;
}

double variable initialization expression of AudioHistogramConfig._levelBarMinHeight()
{
  return 2.0;
}

uint64_t variable initialization expression of AudioHistogramConfig._levelBarCount()
{
  return 16;
}

uint64_t variable initialization expression of AudioHistogramConfig._levelBarKeys()
{
  return 10;
}

double variable initialization expression of AudioHistogramConfig._animationTimerDuration()
{
  return 7.0;
}

double variable initialization expression of AudioHistogramConfig._minBarScale()
{
  return 0.1;
}

uint64_t variable initialization expression of AudioHistogramConfig._randomPower()
{
  return 80;
}

uint64_t variable initialization expression of AudioHistogramConfig._jitter()
{
  return 29;
}

uint64_t variable initialization expression of AudioHistogramConfig._levelBarColor()
{
  return sub_7A50(&qword_D7DC0);
}

int64x2_t variable initialization expression of AudioHistogramConfig._histogram()
{
  id v0 = (int64x2_t *)sub_A72E0();
  v0[1].i64[0] = 16;
  int64x2_t result = vdupq_n_s64(0x3FB999999999999AuLL);
  v0[2] = result;
  v0[3] = result;
  v0[4] = result;
  v0[5] = result;
  v0[6] = result;
  v0[7] = result;
  v0[8] = result;
  v0[9] = result;
  return result;
}

uint64_t variable initialization expression of AXLTAudioHistogramViewGenerator.config()
{
  return sub_8F6E8();
}

double variable initialization expression of AXLTCaptionsView.paragraphsSpace()
{
  return 12.0;
}

uint64_t variable initialization expression of AXLTSettingsManager.textColor()
{
  return sub_7A50(&qword_D7E30);
}

uint64_t variable initialization expression of AXLTSettingsManager.backgroundColor()
{
  return sub_7A50(&qword_D7E38);
}

uint64_t sub_7A50(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t variable initialization expression of AXLTSettingsManager._boldText()
{
  return 2;
}

BOOL variable initialization expression of AXLTSettingsManager.isMicOn()
{
  return _AXSLiveTranscriptionMicOn() != 0;
}

BOOL variable initialization expression of AXLTSettingsManager.isPaused()
{
  return _AXSLiveTranscriptionPaused() != 0;
}

double variable initialization expression of AXLTSettingsManager.nubbitIdleOpacity()
{
  return 0.5;
}

uint64_t sub_7AF4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_7B38(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t sub_7B78()
{
  unint64_t result = qword_D7E80;
  if (!qword_D7E80)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_D7E80);
  }
  return result;
}

uint64_t sub_7BB8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_7C00()
{
  unint64_t result = qword_D7E98;
  if (!qword_D7E98)
  {
    sub_7C5C(&qword_D7E90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D7E98);
  }
  return result;
}

uint64_t sub_7C5C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

void (*variable initialization expression of AXLTSettingsManager.micStateChanged())(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  return sub_A3F80;
}

void (*variable initialization expression of AXLTSettingsManager.pausedStateChanged())(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  return sub_A3FAC;
}

void (*variable initialization expression of AXLTSettingsManager.fontChanged())(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  return sub_A40A0;
}

void (*variable initialization expression of AXLTSettingsManager.transcriptionEnabledChanged())(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  return sub_A40B8;
}

void (*variable initialization expression of AXLTSettingsManager.nubbitIdleOpacityChanged())(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  return sub_A4198;
}

void (*variable initialization expression of AXLTSettingsManager.textColorChanged())(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  return sub_A49F4;
}

void (*variable initialization expression of AXLTSettingsManager.backgroundColorChanged())(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  return sub_A4A0C;
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
}

void type metadata accessor for AXLiveTranscriptionTapType(uint64_t a1)
{
}

void type metadata accessor for AXLiveTranscriptionRequest(uint64_t a1)
{
}

void type metadata accessor for CFDictionary(uint64_t a1)
{
}

void type metadata accessor for CFNotificationName(uint64_t a1)
{
}

void type metadata accessor for CFNotificationCenter(uint64_t a1)
{
}

__n128 initializeWithTake for LiveSpeechRootView_iOS(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_7DB8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_7DD8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for LiveCaptionsBottomView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 initializeWithTake for LiveSpeechFavorite(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_7E54(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_7E74(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

uint64_t sub_7EB4(uint64_t a1, uint64_t a2)
{
  return sub_836C(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

void sub_7ED8(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_7EE4(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_7EF8(uint64_t a1, uint64_t a2)
{
  return sub_836C(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

NSNumber sub_7F18()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t sub_7F20(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_A5A50();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return result;
}

uint64_t sub_7F74(uint64_t a1, uint64_t a2)
{
  char v3 = sub_A5A60();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return v3 & 1;
}

uint64_t sub_7FCC@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_A5A70();
  *a1 = v3;
  return result;
}

uint64_t sub_7FF4(uint64_t a1, id *a2)
{
  uint64_t result = sub_A71B0();
  *a2 = 0;
  return result;
}

uint64_t sub_806C(uint64_t a1, id *a2)
{
  char v3 = sub_A71C0();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_80EC@<X0>(void *a1@<X8>)
{
  sub_A71D0();
  NSString v2 = sub_A71A0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_8138()
{
  sub_7BB8(&qword_D7F58, type metadata accessor for UIContentSizeCategory);
  sub_7BB8(&qword_D7F60, type metadata accessor for UIContentSizeCategory);

  return sub_A77A0();
}

uint64_t sub_81F4()
{
  return sub_7BB8(&qword_D7F40, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_823C()
{
  return sub_7BB8(&qword_D7F48, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_8284@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_A71D0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_82B0()
{
  sub_7BB8(&qword_D8090, type metadata accessor for Key);
  sub_7BB8(&qword_D8098, type metadata accessor for Key);

  return sub_A77A0();
}

uint64_t sub_836C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_A71D0();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_83B0()
{
  sub_A71D0();
  sub_A7210();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_8404()
{
  sub_A71D0();
  sub_A7850();
  sub_A7210();
  Swift::Int v0 = sub_A7890();
  swift_bridgeObjectRelease();
  return v0;
}

void *sub_8478@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

double sub_8488@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

uint64_t sub_8494()
{
  return sub_A77A0();
}

uint64_t sub_855C()
{
  sub_7BB8(&qword_D8080, type metadata accessor for AttributeName);
  sub_7BB8(&qword_D8088, type metadata accessor for AttributeName);

  return sub_A77A0();
}

uint64_t sub_8618@<X0>(void *a1@<X8>)
{
  NSString v2 = sub_A71A0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_8660()
{
  sub_7BB8(&qword_D8070, type metadata accessor for TraitKey);
  sub_7BB8(&qword_D8078, type metadata accessor for TraitKey);

  return sub_A77A0();
}

uint64_t sub_871C()
{
  uint64_t v0 = sub_A71D0();
  uint64_t v2 = v1;
  if (v0 == sub_A71D0() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_A7800();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_87A8()
{
  return sub_7BB8(&qword_D7F50, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_87F0()
{
  return Double.hashValue.getter(*v0);
}

void sub_87F8()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  sub_A7880(v1);
}

uint64_t sub_882C(uint64_t a1)
{
  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    uint64_t v2 = *v1;
  }
  else {
    uint64_t v2 = 0;
  }
  return static Hasher._hash(seed:_:)(a1, v2);
}

BOOL sub_883C(double *a1, double *a2)
{
  return *a1 == *a2;
}

_OWORD *sub_8850(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_8860(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_7AF4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for Weight(uint64_t a1)
{
}

void type metadata accessor for TraitKey(uint64_t a1)
{
}

void type metadata accessor for AttributeName(uint64_t a1)
{
}

void type metadata accessor for TUCallStatus(uint64_t a1)
{
}

void type metadata accessor for Key(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void sub_8950(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_8998()
{
  return sub_7BB8(&qword_D7FF8, type metadata accessor for Key);
}

uint64_t sub_89E0()
{
  return sub_7BB8(&qword_D8000, type metadata accessor for Key);
}

uint64_t sub_8A28()
{
  return sub_7BB8(&qword_D8008, type metadata accessor for AttributeName);
}

uint64_t sub_8A70()
{
  return sub_7BB8(&qword_D8010, type metadata accessor for AttributeName);
}

uint64_t sub_8AB8()
{
  return sub_7BB8(&qword_D8018, type metadata accessor for TraitKey);
}

uint64_t sub_8B00()
{
  return sub_7BB8(&qword_D8020, type metadata accessor for TraitKey);
}

uint64_t sub_8B48()
{
  return sub_7BB8(&qword_D8028, type metadata accessor for TraitKey);
}

uint64_t sub_8B90()
{
  return sub_7BB8(&qword_D8030, type metadata accessor for Weight);
}

uint64_t sub_8BD8()
{
  return sub_7BB8(&qword_D8038, type metadata accessor for Weight);
}

uint64_t sub_8C20()
{
  return sub_7BB8(&qword_D8040, type metadata accessor for Weight);
}

uint64_t sub_8C68()
{
  return sub_7BB8(&qword_D8048, type metadata accessor for AttributeName);
}

uint64_t sub_8CB0()
{
  return sub_7BB8(&qword_D8050, type metadata accessor for Key);
}

unint64_t sub_8CF8()
{
  unint64_t result = qword_D8068;
  if (!qword_D8068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8068);
  }
  return result;
}

void *bottomViewHeight.unsafeMutableAddressor()
{
  return &bottomViewHeight;
}

uint64_t destroy for LiveCaptionsBottomView()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for LiveCaptionsBottomView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v4 = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LiveCaptionsBottomView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v4;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for LiveCaptionsBottomView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for LiveCaptionsBottomView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LiveCaptionsBottomView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 144)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LiveCaptionsBottomView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 144) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveCaptionsBottomView()
{
  return &type metadata for LiveCaptionsBottomView;
}

uint64_t sub_90E0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_90FC@<X0>(_OWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v41 = sub_A68C0();
  __chkstk_darwin(v41);
  uint64_t v43 = sub_A61F0();
  uint64_t v45 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_7AF4(&qword_D8100);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v46 = v5;
  uint64_t v47 = v6;
  __chkstk_darwin(v5);
  v42 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_7AF4(&qword_D8108);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v48 = v8;
  uint64_t v49 = v9;
  __chkstk_darwin(v8);
  v44 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_7AF4(&qword_D8110);
  __chkstk_darwin(v11 - 8);
  BOOL v13 = (uint64_t *)((char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = sub_7AF4(&qword_D8118);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  long long v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_7AF4(&qword_D8120);
  __chkstk_darwin(v18);
  v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *BOOL v13 = sub_A7030();
  v13[1] = v21;
  uint64_t v22 = sub_7AF4(&qword_D8128);
  sub_9718((uint64_t)a1, (uint64_t)v13 + *(int *)(v22 + 44));
  sub_A7030();
  sub_A6270();
  sub_8860((uint64_t)v13, (uint64_t)v17, &qword_D8110);
  v23 = &v17[*(int *)(v15 + 44)];
  long long v24 = v52;
  *(_OWORD *)v23 = v51;
  *((_OWORD *)v23 + 1) = v24;
  *((_OWORD *)v23 + 2) = v53;
  sub_A35C((uint64_t)v13, &qword_D8110);
  sub_8860((uint64_t)v17, (uint64_t)v20, &qword_D8118);
  v20[*(int *)(v18 + 36)] = 0;
  sub_A35C((uint64_t)v17, &qword_D8118);
  sub_A6950();
  sub_A61B0();
  v25 = (_OWORD *)swift_allocObject();
  long long v26 = a1[7];
  v25[7] = a1[6];
  v25[8] = v26;
  v25[9] = a1[8];
  long long v27 = a1[3];
  v25[3] = a1[2];
  v25[4] = v27;
  long long v28 = a1[5];
  v25[5] = a1[4];
  v25[6] = v28;
  long long v29 = a1[1];
  v25[1] = *a1;
  v25[2] = v29;
  sub_9FAC((uint64_t)a1);
  sub_A00C(&qword_D8130, (void (*)(uint64_t))&type metadata accessor for DragGesture);
  sub_A00C(&qword_D8138, (void (*)(uint64_t))&type metadata accessor for DragGesture.Value);
  v31 = v42;
  uint64_t v30 = v43;
  sub_A6F70();
  swift_release();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v4, v30);
  v32 = (_OWORD *)swift_allocObject();
  long long v33 = a1[7];
  v32[7] = a1[6];
  v32[8] = v33;
  v32[9] = a1[8];
  long long v34 = a1[3];
  v32[3] = a1[2];
  v32[4] = v34;
  long long v35 = a1[5];
  v32[5] = a1[4];
  v32[6] = v35;
  long long v36 = a1[1];
  v32[1] = *a1;
  v32[2] = v36;
  sub_9FAC((uint64_t)a1);
  sub_A45C(&qword_D8140, &qword_D8100);
  v37 = v44;
  uint64_t v38 = v46;
  sub_A6F60();
  swift_release();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v31, v38);
  sub_A6210();
  sub_A0B0();
  sub_A45C(&qword_D8170, &qword_D8108);
  uint64_t v39 = v48;
  sub_A6CD0();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v37, v39);
  return sub_A35C((uint64_t)v20, &qword_D8120);
}

uint64_t sub_9718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v25 = sub_7AF4(&qword_D8188) - 8;
  __chkstk_darwin(v25);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_A6490();
  uint64_t v6 = v5 - 8;
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_7AF4(&qword_D8190);
  uint64_t v10 = v9 - 8;
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = sub_7AF4(&qword_D8198);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A6DA0();
  uint64_t v17 = sub_A6DC0();
  swift_release();
  uint64_t v18 = *(void *)(a1 + 8);
  uint64_t v19 = (char *)v8 + *(int *)(v6 + 28);
  uint64_t v20 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v21 = sub_A66E0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(v19, v20, v21);
  *uint64_t v8 = v18;
  v8[1] = v18;
  sub_A29C((uint64_t)v8, (uint64_t)v4);
  *(_WORD *)&v4[*(int *)(v25 + 44)] = 256;
  sub_8860((uint64_t)v4, (uint64_t)v12 + *(int *)(v10 + 44), &qword_D8188);
  *uint64_t v12 = v17;
  swift_retain();
  sub_A35C((uint64_t)v4, &qword_D8188);
  sub_A300((uint64_t)v8);
  swift_release();
  sub_A7030();
  sub_A6270();
  sub_8860((uint64_t)v12, (uint64_t)v16, &qword_D8190);
  uint64_t v22 = &v16[*(int *)(v14 + 44)];
  long long v23 = v28;
  *(_OWORD *)uint64_t v22 = v27;
  *((_OWORD *)v22 + 1) = v23;
  *((_OWORD *)v22 + 2) = v29;
  sub_A35C((uint64_t)v12, &qword_D8190);
  return sub_A3B8((uint64_t)v16, v26);
}

uint64_t sub_99F4(uint64_t a1, uint64_t a2)
{
  sub_7AF4(&qword_D8178);
  sub_A6E80();
  v8.width = 0.0;
  v8.height = 0.0;
  BOOL v3 = CGSizeEqualToSize(v7, v8);
  if (v3)
  {
    (*(void (**)(BOOL, uint64_t, uint64_t))(a2 + 128))(v3, v4, v5);
    sub_7AF4(&qword_D8180);
    sub_A6F00();
    v9.width = 0.0;
    v9.height = 0.0;
    if (!CGSizeEqualToSize(v7, v9)) {
      sub_A6F00();
    }
    return sub_A6E90();
  }
  else
  {
    sub_A61C0();
    return sub_9B20();
  }
}

uint64_t sub_9B20()
{
  uint64_t v1 = v0;
  sub_7AF4(&qword_D8178);
  sub_A6E80();
  uint64_t v6 = *(void *)(v0 + 24);
  sub_A1F0((uint64_t)&v6);
  swift_retain();
  sub_7AF4(&qword_D8180);
  sub_A6F00();
  sub_A6F10();
  sub_A21C((uint64_t)&v6);
  swift_release();
  sub_A6F00();
  sub_A6F10();
  os_log_type_t v2 = sub_A7420();
  if (qword_D7D90 != -1) {
    swift_once();
  }
  BOOL v3 = qword_DF5C8;
  uint64_t result = os_log_type_enabled((os_log_t)qword_DF5C8, v2);
  if (result)
  {
    sub_9FAC(v1);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    sub_A6F00();
    sub_A7600();
    sub_A248(v1);
    _os_log_impl(&def_5ED54, v3, v2, "windowSize height: %f", v5, 0xCu);
    return swift_slowDealloc();
  }
  return result;
}

void sub_9D74()
{
}

void sub_9DD4()
{
  id v1 = [self standardUserDefaults];
  long long v4 = *(_OWORD *)(v0 + 24);
  long long v5 = *(_OWORD *)(v0 + 40);
  sub_7AF4(&qword_D8180);
  sub_A6F00();
  os_log_type_t v2 = NSStringFromCGSize(v6);
  if (!v2)
  {
    sub_A71D0();
    os_log_type_t v2 = (NSString *)sub_A71A0();
    swift_bridgeObjectRelease();
  }
  NSString v3 = sub_A71A0();
  objc_msgSend(v1, "setObject:forKey:", v2, v3, v4, v5);

  [v1 synchronize];
}

uint64_t sub_9EDC()
{
  return sub_A6BF0();
}

uint64_t sub_9EF8@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  long long v3 = v1[7];
  v13[6] = v1[6];
  v13[7] = v3;
  v13[8] = v1[8];
  long long v4 = v1[3];
  v13[2] = v1[2];
  v13[3] = v4;
  long long v5 = v1[5];
  v13[4] = v1[4];
  v13[5] = v5;
  long long v6 = v1[1];
  v13[0] = *v1;
  v13[1] = v6;
  CGSize v7 = (uint64_t (*)@<X0>(uint64_t@<X8>))swift_allocObject();
  long long v8 = v1[7];
  *((_OWORD *)v7 + 7) = v1[6];
  *((_OWORD *)v7 + 8) = v8;
  *((_OWORD *)v7 + 9) = v1[8];
  long long v9 = v1[3];
  *((_OWORD *)v7 + 3) = v1[2];
  *((_OWORD *)v7 + 4) = v9;
  long long v10 = v1[5];
  *((_OWORD *)v7 + 5) = v1[4];
  *((_OWORD *)v7 + 6) = v10;
  long long v11 = v1[1];
  *((_OWORD *)v7 + 1) = *v1;
  *((_OWORD *)v7 + 2) = v11;
  *a1 = sub_9FA4;
  a1[1] = v7;
  return sub_9FAC((uint64_t)v13);
}

uint64_t sub_9FA4@<X0>(uint64_t a1@<X8>)
{
  return sub_90FC((_OWORD *)(v1 + 16), a1);
}

uint64_t sub_9FAC(uint64_t a1)
{
  return a1;
}

uint64_t sub_A004(uint64_t a1)
{
  return sub_99F4(a1, v1 + 16);
}

uint64_t sub_A00C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_A058()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 160, 7);
}

void sub_A0A8()
{
}

unint64_t sub_A0B0()
{
  unint64_t result = qword_D8148;
  if (!qword_D8148)
  {
    sub_7C5C(&qword_D8120);
    sub_A150();
    sub_A45C(&qword_D8160, &qword_D8168);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8148);
  }
  return result;
}

unint64_t sub_A150()
{
  unint64_t result = qword_D8150;
  if (!qword_D8150)
  {
    sub_7C5C(&qword_D8118);
    sub_A45C(&qword_D8158, &qword_D8110);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8150);
  }
  return result;
}

uint64_t sub_A1F0(uint64_t a1)
{
  return a1;
}

uint64_t sub_A21C(uint64_t a1)
{
  return a1;
}

uint64_t sub_A248(uint64_t a1)
{
  return a1;
}

uint64_t sub_A29C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_A6490();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_A300(uint64_t a1)
{
  uint64_t v2 = sub_A6490();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_A35C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_7AF4(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_A3B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_7AF4(&qword_D8198);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_A420()
{
  return sub_A45C(&qword_D81A0, &qword_D81A8);
}

uint64_t sub_A45C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_7C5C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_A4A0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = v16 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v6 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v6;
    uint64_t v7 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = a2[5];
    long long v8 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 64) = v8;
    *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
    *(void *)(a1 + 96) = a2[12];
    uint64_t v9 = a2[15];
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    *(void *)(a1 + 120) = v9;
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(void *)(a1 + 144) = a2[18];
    *(unsigned char *)(a1 + 152) = *((unsigned char *)a2 + 152);
    uint64_t v10 = a2[21];
    *(void *)(a1 + 160) = a2[20];
    *(void *)(a1 + 168) = v10;
    long long v11 = (void *)a2[22];
    uint64_t v12 = a2[23];
    *(void *)(a1 + 176) = v11;
    *(void *)(a1 + 184) = v12;
    uint64_t v13 = a3[16];
    long long v23 = (void *)(a1 + v13);
    uint64_t v22 = (uint64_t *)((char *)a2 + v13);
    *(_OWORD *)(a1 + 192) = *((_OWORD *)a2 + 12);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v14 = v11;
    swift_retain();
    sub_7AF4(&qword_D81B0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = sub_A63C0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v23, v22, v15);
    }
    else
    {
      void *v23 = *v22;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = a3[17];
    uint64_t v18 = a3[18];
    uint64_t v19 = *(void **)((char *)a2 + v17);
    *(void *)(v4 + v17) = v19;
    *(void *)(v4 + v18) = *(uint64_t *)((char *)a2 + v18);
    id v20 = v19;
  }
  swift_retain();
  return v4;
}

uint64_t sub_A6C8(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 64);
  sub_7AF4(&qword_D81B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_A63C0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }

  return swift_release();
}

uint64_t sub_A7D4(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v8 = *(void *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  uint64_t v9 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v9;
  long long v11 = *(void **)(a2 + 176);
  uint64_t v10 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = v11;
  *(void *)(a1 + 184) = v10;
  uint64_t v12 = a3[16];
  uint64_t v21 = (void *)(a1 + v12);
  id v20 = (void *)(a2 + v12);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v13 = v11;
  swift_retain();
  sub_7AF4(&qword_D81B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = sub_A63C0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v21, v20, v14);
  }
  else
  {
    *uint64_t v21 = *v20;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = a3[17];
  uint64_t v16 = a3[18];
  uint64_t v17 = *(void **)(a2 + v15);
  *(void *)(a1 + v15) = v17;
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  id v18 = v17;
  swift_retain();
  return a1;
}

uint64_t sub_A9B4(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v6 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v7;
  swift_retain();
  swift_release();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_retain();
  swift_release();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  uint64_t v8 = *(void **)(a1 + 176);
  uint64_t v9 = *(void **)(a2 + 176);
  *(void *)(a1 + 176) = v9;
  id v10 = v9;

  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_retain();
  swift_release();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  if (a1 != a2)
  {
    uint64_t v11 = a3[16];
    uint64_t v12 = (void *)(a1 + v11);
    id v13 = (void *)(a2 + v11);
    sub_A35C(a1 + v11, &qword_D81B0);
    sub_7AF4(&qword_D81B0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = sub_A63C0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    }
    else
    {
      *uint64_t v12 = *v13;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v15 = a3[17];
  uint64_t v16 = *(void **)(a2 + v15);
  uint64_t v17 = *(void **)(a1 + v15);
  *(void *)(a1 + v15) = v16;
  id v18 = v16;

  *(void *)(a1 + a3[18]) = *(void *)(a2 + a3[18]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_AC28(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  long long v9 = *(_OWORD *)(a2 + 192);
  uint64_t v10 = a3[16];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v9;
  uint64_t v13 = sub_7AF4(&qword_D81B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = sub_A63C0();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v11, v12, v14);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  uint64_t v15 = a3[18];
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  *(void *)(a1 + v15) = *(void *)(a2 + v15);
  return a1;
}

uint64_t sub_AD70(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  long long v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  swift_release();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_release();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_release();
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_release();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  long long v8 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);

  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_release();
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  if (a1 != a2)
  {
    uint64_t v9 = a3[16];
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (const void *)(a2 + v9);
    sub_A35C(a1 + v9, &qword_D81B0);
    uint64_t v12 = sub_7AF4(&qword_D81B0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = sub_A63C0();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 32))(v10, v11, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
    }
  }
  uint64_t v14 = a3[17];
  uint64_t v15 = *(void **)(a1 + v14);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);

  *(void *)(a1 + a3[18]) = *(void *)(a2 + a3[18]);
  swift_release();
  return a1;
}

uint64_t sub_AF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_AF78);
}

uint64_t sub_AF78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_7AF4(&qword_D81B8);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 64);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_B02C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_B040);
}

uint64_t sub_B040(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_7AF4(&qword_D81B8);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 64);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for LiveSpeechCaptionsPipView()
{
  uint64_t result = qword_D8218;
  if (!qword_D8218) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_B138()
{
  sub_B23C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_B23C()
{
  if (!qword_D8228)
  {
    sub_A63C0();
    unint64_t v0 = sub_A6200();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_D8228);
    }
  }
}

uint64_t sub_B294()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_B2B0()
{
  uint64_t result = AXDeviceIsPad();
  double v1 = 52.0;
  if (result) {
    double v1 = 64.0;
  }
  double v2 = 78.0;
  if (result) {
    double v2 = 96.0;
  }
  qword_DF540 = *(void *)&v1;
  qword_DF548 = *(void *)&v2;
  return result;
}

double sub_B304()
{
  if (qword_D7D50 != -1) {
    swift_once();
  }
  double result = *(double *)&qword_DF540 / 3.0;
  *(double *)&qword_DF550 = *(double *)&qword_DF540 / 3.0;
  return result;
}

uint64_t sub_B364@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v133 = a1;
  uint64_t v136 = sub_A7520();
  uint64_t v143 = *(void *)(v136 - 8);
  __chkstk_darwin(v136);
  v120 = (char *)&v105 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for LiveSpeechCaptionsPipView();
  uint64_t v137 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v137 + 64);
  __chkstk_darwin(v4 - 8);
  uint64_t v142 = (uint64_t)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v135 = sub_A68C0();
  __chkstk_darwin(v135);
  uint64_t v110 = sub_A61F0();
  uint64_t v108 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v7 = (char *)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_7AF4(&qword_D8100);
  uint64_t v138 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  v107 = (char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = sub_7AF4(&qword_D8108);
  uint64_t v141 = *(void *)(v139 - 8);
  __chkstk_darwin(v139);
  v111 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_7AF4(&qword_D82D0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (uint64_t *)((char *)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = sub_7AF4(&qword_D82D8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = (int *)sub_7AF4(&qword_D82E0);
  __chkstk_darwin(v140);
  uint64_t v17 = (char *)&v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = sub_7AF4(&qword_D82E8);
  uint64_t v113 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  v109 = (char *)&v105 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = sub_7AF4(&qword_D82F0);
  uint64_t v116 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  v112 = (char *)&v105 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = sub_7AF4(&qword_D82F8);
  __chkstk_darwin(v134);
  v118 = (char *)&v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = sub_7AF4(&qword_D8300);
  __chkstk_darwin(v119);
  uint64_t v122 = (uint64_t)&v105 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = sub_7AF4(&qword_D8308);
  __chkstk_darwin(v121);
  uint64_t v124 = (uint64_t)&v105 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = sub_7AF4(&qword_D8310);
  __chkstk_darwin(v123);
  uint64_t v126 = (uint64_t)&v105 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = sub_7AF4(&qword_D8318);
  __chkstk_darwin(v125);
  uint64_t v127 = (uint64_t)&v105 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = sub_7AF4(&qword_D8320);
  __chkstk_darwin(v128);
  uint64_t v130 = (uint64_t)&v105 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = sub_7AF4(&qword_D8328);
  uint64_t v26 = __chkstk_darwin(v132);
  v129 = (char *)&v105 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v131 = (char *)&v105 - v28;
  *uint64_t v12 = sub_A7030();
  v12[1] = v29;
  uint64_t v30 = sub_7AF4(&qword_D8330);
  sub_C70C(v2, (uint64_t)v12 + *(int *)(v30 + 44));
  if (qword_D7D50 != -1) {
    swift_once();
  }
  sub_A7030();
  sub_A6270();
  sub_8860((uint64_t)v12, (uint64_t)v15, &qword_D82D0);
  v31 = &v15[*(int *)(v13 + 36)];
  long long v32 = v150;
  *(_OWORD *)v31 = v149;
  *((_OWORD *)v31 + 1) = v32;
  *((_OWORD *)v31 + 2) = v151;
  sub_A35C((uint64_t)v12, &qword_D82D0);
  sub_8860((uint64_t)v15, (uint64_t)v17, &qword_D82D8);
  v17[v140[9]] = 0;
  sub_A35C((uint64_t)v15, &qword_D82D8);
  sub_A6950();
  sub_A61B0();
  uint64_t v33 = v142;
  sub_F9A8(v2, v142);
  uint64_t v34 = *(unsigned __int8 *)(v137 + 80);
  v106 = v17;
  uint64_t v35 = ((v34 + 16) & ~v34) + v5;
  uint64_t v36 = (v34 + 16) & ~v34;
  uint64_t v37 = v2;
  uint64_t v144 = v2;
  uint64_t v38 = v34 | 7;
  uint64_t v39 = swift_allocObject();
  uint64_t v137 = v36;
  sub_FA10(v33, v39 + v36);
  sub_107C0(&qword_D8130, (void (*)(uint64_t))&type metadata accessor for DragGesture);
  sub_107C0(&qword_D8138, (void (*)(uint64_t))&type metadata accessor for DragGesture.Value);
  v40 = v107;
  uint64_t v41 = v110;
  sub_A6F70();
  swift_release();
  (*(void (**)(char *, uint64_t))(v108 + 8))(v7, v41);
  sub_F9A8(v37, v33);
  uint64_t v42 = swift_allocObject();
  sub_FA10(v33, v42 + v36);
  sub_A45C(&qword_D8140, &qword_D8100);
  uint64_t v43 = v111;
  uint64_t v44 = v115;
  sub_A6F60();
  swift_release();
  (*(void (**)(char *, uint64_t))(v138 + 8))(v40, v44);
  sub_A6210();
  unint64_t v45 = sub_FB94();
  uint64_t v46 = sub_A45C(&qword_D8170, &qword_D8108);
  uint64_t v47 = v109;
  uint64_t v49 = v139;
  uint64_t v48 = v140;
  uint64_t v50 = (uint64_t)v106;
  sub_A6CD0();
  (*(void (**)(char *, uint64_t))(v141 + 8))(v43, v49);
  sub_A35C(v50, &qword_D82E0);
  sub_F9A8(v144, v33);
  uint64_t v141 = v35;
  uint64_t v135 = v38;
  uint64_t v51 = v137;
  uint64_t v52 = swift_allocObject();
  sub_FA10(v33, v52 + v51);
  uint64_t v145 = (uint64_t)v48;
  uint64_t v146 = v49;
  unint64_t v147 = v45;
  uint64_t v148 = v46;
  swift_getOpaqueTypeConformance2();
  long long v53 = v112;
  uint64_t v54 = v114;
  sub_A6BA0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v113 + 8))(v47, v54);
  v140 = (int *)self;
  id v55 = [v140 defaultCenter];
  if (qword_D7E08 != -1) {
    swift_once();
  }
  v56 = v120;
  sub_A7530();

  uint64_t v57 = v142;
  sub_F9A8(v144, v142);
  uint64_t v58 = swift_allocObject();
  sub_FA10(v57, v58 + v51);
  uint64_t v59 = v116;
  uint64_t v60 = (uint64_t)v118;
  uint64_t v61 = v117;
  (*(void (**)(char *, char *, uint64_t))(v116 + 16))(v118, v53, v117);
  uint64_t v62 = v134;
  uint64_t v63 = v60 + *(int *)(v134 + 52);
  uint64_t v64 = v143;
  uint64_t v65 = v136;
  uint64_t v138 = *(void *)(v143 + 16);
  uint64_t v139 = v143 + 16;
  ((void (*)(uint64_t, char *, uint64_t))v138)(v63, v56, v136);
  v66 = (void *)(v60 + *(int *)(v62 + 56));
  void *v66 = sub_FD44;
  v66[1] = v58;
  v67 = *(void (**)(char *, uint64_t))(v64 + 8);
  uint64_t v143 = v64 + 8;
  uint64_t v134 = (uint64_t)v67;
  v67(v56, v65);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v53, v61);
  id v68 = [v140 defaultCenter];
  uint64_t v69 = v142;
  if (qword_D7D70 != -1) {
    swift_once();
  }
  sub_A7530();

  sub_F9A8(v144, v69);
  uint64_t v70 = swift_allocObject();
  sub_FA10(v69, v70 + v137);
  uint64_t v71 = v122;
  sub_8860(v60, v122, &qword_D82F8);
  uint64_t v72 = v119;
  ((void (*)(uint64_t, char *, uint64_t))v138)(v71 + *(int *)(v119 + 52), v56, v65);
  v73 = (void *)(v71 + *(int *)(v72 + 56));
  void *v73 = sub_FD44;
  v73[1] = v70;
  v74 = (void (*)(char *, uint64_t))v134;
  ((void (*)(char *, uint64_t))v134)(v56, v65);
  sub_A35C(v60, &qword_D82F8);
  id v75 = [v140 defaultCenter];
  sub_A7530();

  sub_F9A8(v144, v142);
  uint64_t v76 = v142;
  uint64_t v77 = swift_allocObject();
  uint64_t v78 = v137;
  sub_FA10(v76, v77 + v137);
  uint64_t v79 = v124;
  sub_8860(v71, v124, &qword_D8300);
  uint64_t v80 = v121;
  ((void (*)(uint64_t, char *, uint64_t))v138)(v79 + *(int *)(v121 + 52), v56, v65);
  v81 = (uint64_t (**)(uint64_t))(v79 + *(int *)(v80 + 56));
  *v81 = sub_FDB4;
  v81[1] = (uint64_t (*)(uint64_t))v77;
  v74(v56, v65);
  sub_A35C(v71, &qword_D8300);
  id v82 = [v140 defaultCenter];
  if (qword_D7E28 != -1) {
    swift_once();
  }
  sub_A7530();

  sub_F9A8(v144, v76);
  uint64_t v83 = swift_allocObject();
  sub_FA10(v76, v83 + v78);
  uint64_t v84 = v76;
  uint64_t v85 = v126;
  sub_8860(v79, v126, &qword_D8308);
  uint64_t v86 = v123;
  uint64_t v87 = v136;
  ((void (*)(uint64_t, char *, uint64_t))v138)(v85 + *(int *)(v123 + 52), v56, v136);
  v88 = (uint64_t (**)(uint64_t))(v85 + *(int *)(v86 + 56));
  *v88 = sub_FE54;
  v88[1] = (uint64_t (*)(uint64_t))v83;
  ((void (*)(char *, uint64_t))v134)(v56, v87);
  sub_A35C(v79, &qword_D8308);
  uint64_t v89 = v144;
  sub_F9A8(v144, v84);
  uint64_t v90 = swift_allocObject();
  sub_FA10(v84, v90 + v78);
  uint64_t v91 = v127;
  sub_8860(v85, v127, &qword_D8310);
  v92 = (uint64_t (**)())(v91 + *(int *)(v125 + 36));
  *v92 = sub_FE70;
  v92[1] = (uint64_t (*)())v90;
  v92[2] = 0;
  v92[3] = 0;
  sub_A35C(v85, &qword_D8310);
  sub_F9A8(v89, v84);
  uint64_t v93 = swift_allocObject();
  sub_FA10(v84, v93 + v78);
  uint64_t v94 = v130;
  sub_8860(v91, v130, &qword_D8318);
  v95 = (void *)(v94 + *(int *)(v128 + 36));
  void *v95 = 0;
  v95[1] = 0;
  v95[2] = sub_FED0;
  v95[3] = v93;
  sub_A35C(v91, &qword_D8318);
  uint64_t v145 = sub_A5D60();
  uint64_t v146 = v96;
  sub_FF30();
  uint64_t v97 = sub_A6B60();
  uint64_t v99 = v98;
  char v101 = v100 & 1;
  sub_1055C(&qword_D8358, &qword_D8320, (void (*)(void))sub_FF84);
  uint64_t v102 = (uint64_t)v129;
  sub_A6BE0();
  sub_10024(v97, v99, v101);
  swift_bridgeObjectRelease();
  sub_A35C(v94, &qword_D8320);
  uint64_t v103 = (uint64_t)v131;
  sub_A63D0();
  sub_A35C(v102, &qword_D8328);
  sub_A6420();
  return sub_A35C(v103, &qword_D8328);
}

uint64_t sub_C70C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v33 = sub_A6740();
  uint64_t v32 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_7AF4(&qword_D8388);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_A6E20();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_7AF4(&qword_D8390);
  __chkstk_darwin(v12 - 8);
  v31 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)a1 == 1)
  {
    uint64_t v14 = *(void *)(a1 + 160);
    LOBYTE(v35) = *(unsigned char *)(a1 + 152);
    uint64_t v36 = v14;
    sub_7AF4(&qword_D8380);
    sub_A6E80();
  }
  sub_A6E30();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for Image.ResizingMode.stretch(_:), v8);
  sub_A6E50();
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v15 = *(void *)(a1 + 160);
  LOBYTE(v35) = *(unsigned char *)(a1 + 152);
  uint64_t v36 = v15;
  sub_7AF4(&qword_D8380);
  sub_A6E80();
  if (v48 == 1)
  {
    uint64_t v16 = sub_A6780();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v7, 1, 1, v16);
  }
  else
  {
    sub_A6770();
    uint64_t v17 = sub_A6780();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v7, 0, 1, v17);
  }
  uint64_t v18 = sub_A6E40();
  swift_release();
  sub_A35C((uint64_t)v7, &qword_D8388);
  sub_CC04();
  sub_CC04();
  sub_A7030();
  sub_A6270();
  uint64_t v19 = v48;
  char v20 = v49;
  uint64_t v21 = v50;
  char v22 = v51;
  uint64_t v23 = v52;
  uint64_t v24 = v53;
  double v25 = sub_CD18();
  double v26 = sub_CC04() / 10.0;
  uint64_t v27 = sub_A6DA0();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v35 = v18;
  uint64_t v36 = 0;
  __int16 v37 = 1;
  uint64_t v38 = v19;
  char v39 = v20;
  uint64_t v40 = v21;
  char v41 = v22;
  uint64_t v42 = v23;
  uint64_t v43 = v24;
  double v44 = v25;
  double v45 = v26;
  uint64_t v46 = KeyPath;
  uint64_t v47 = v27;
  sub_A6720();
  sub_7AF4(&qword_D8398);
  sub_10490();
  uint64_t v29 = (uint64_t)v31;
  sub_A6BD0();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v4, v33);
  swift_release();
  swift_release();
  swift_release();
  return sub_1067C(v29, v34);
}

double sub_CC04()
{
  uint64_t v1 = type metadata accessor for LiveSpeechCaptionsPipView();
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = &v9[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((*v0 & 1) == 0)
  {
    uint64_t v6 = qword_D7D50;
LABEL_6:
    double v7 = 1.5;
    if (v6 == -1) {
      return *(double *)&qword_DF540 / v7;
    }
    goto LABEL_4;
  }
  sub_F9A8((uint64_t)v0, (uint64_t)v3);
  uint64_t v4 = *((void *)v3 + 20);
  v9[8] = v3[152];
  uint64_t v10 = v4;
  sub_7AF4(&qword_D8380);
  sub_A6E80();
  char v5 = v11;
  sub_1038C((uint64_t)v3);
  uint64_t v6 = qword_D7D50;
  if ((v5 & 1) == 0) {
    goto LABEL_6;
  }
  double v7 = 1.8;
  if (qword_D7D50 != -1) {
LABEL_4:
  }
    swift_once();
  return *(double *)&qword_DF540 / v7;
}

double sub_CD18()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = type metadata accessor for LiveSpeechCaptionsPipView();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v5 = *v0;
  sub_F9A8(v1, (uint64_t)v4);
  if (v5 == 1)
  {
    uint64_t v6 = *((void *)v4 + 20);
    v9[8] = v4[152];
    uint64_t v10 = v6;
    sub_7AF4(&qword_D8380);
    sub_A6E80();
    char v7 = v11;
    sub_1038C((uint64_t)v4);
    double result = 0.0;
    if (v7) {
      return sub_CC04() / -15.0;
    }
  }
  else
  {
    sub_1038C((uint64_t)v4);
    return 0.0;
  }
  return result;
}

uint64_t sub_CE00(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v69 = type metadata accessor for LiveSpeechCaptionsPipView();
  __chkstk_darwin(v69);
  uint64_t v62 = (uint64_t)v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_A63C0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  v67 = (char *)v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v66 = (uint64_t)v59 - v9;
  uint64_t v10 = sub_A61E0();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_A5FF0();
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v15 = (char *)v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A5FC0();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v65 = a1;
  v16(v13, a1, v10);
  uint64_t v17 = sub_A5FE0();
  os_log_type_t v18 = sub_A7420();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v68 = v6;
  if (v19)
  {
    char v20 = (uint8_t *)swift_slowAlloc();
    *(double *)&uint64_t v60 = COERCE_DOUBLE(swift_slowAlloc());
    double v73 = *(double *)&v60;
    uint64_t v61 = v5;
    *(_DWORD *)char v20 = 136315138;
    v59[1] = v20 + 4;
    sub_A61C0();
    *(void *)&long long v70 = v21;
    *((void *)&v70 + 1) = v22;
    type metadata accessor for CGSize(0);
    uint64_t v23 = sub_A71F0();
    *(void *)&long long v70 = sub_15F94(v23, v24, (uint64_t *)&v73);
    uint64_t v5 = v61;
    sub_A7600();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    _os_log_impl(&def_5ED54, v17, v18, "Pip drag.translation: %s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  (*(void (**)(char *, uint64_t))(v63 + 8))(v15, v64);
  uint64_t v25 = *(void *)(v2 + 16);
  uint64_t v26 = *(void *)(v2 + 24);
  *(void *)&long long v70 = *(void *)(v2 + 8);
  *((void *)&v70 + 1) = v25;
  *(void *)&long long v71 = v26;
  sub_7AF4(&qword_D8378);
  uint64_t v27 = sub_A6F00();
  if (v73 < 1.0)
  {
    __chkstk_darwin(v27);
    sub_A7080();
    sub_A6300();
    swift_release();
  }
  sub_A61C0();
  double v73 = v28;
  double v74 = v29;
  uint64_t v30 = v66;
  sub_53760(v66);
  uint64_t v32 = v67;
  uint64_t v31 = v68;
  (*(void (**)(char *, void, uint64_t))(v68 + 104))(v67, enum case for LayoutDirection.rightToLeft(_:), v5);
  char v33 = sub_A63B0();
  uint64_t v34 = *(void (**)(char *, uint64_t))(v31 + 8);
  v34(v32, v5);
  v34((char *)v30, v5);
  if (v33) {
    double v73 = -v73;
  }
  uint64_t v35 = *(void *)(v2 + 128);
  uint64_t v36 = *(void *)(v2 + 136);
  uint64_t v37 = *(void *)(v2 + 144);
  *(void *)&long long v70 = v35;
  *((void *)&v70 + 1) = v36;
  *(void *)&long long v71 = v37;
  sub_7AF4(&qword_D8178);
  sub_A6E80();
  v75.width = 0.0;
  v75.height = 0.0;
  if (!CGSizeEqualToSize(v72, v75))
  {
    *(void *)&long long v70 = v35;
    *((void *)&v70 + 1) = v36;
    *(void *)&long long v71 = v37;
    sub_A6E80();
    double v38 = vabdd_f64(v72.width, v73);
    uint64_t v39 = v62;
    sub_F9A8(v2, v62);
    if (v38 >= 2.0)
    {
      sub_1038C(v39);
    }
    else
    {
      uint64_t v40 = *(void *)(v39 + 144);
      long long v70 = *(_OWORD *)(v39 + 128);
      *(void *)&long long v71 = v40;
      sub_A6E80();
      double v41 = vabdd_f64(v72.height, v74);
      uint64_t result = sub_1038C(v39);
      if (v41 < 2.0) {
        return result;
      }
    }
  }
  uint64_t v43 = *(void *)(v2 + 144);
  long long v70 = *(_OWORD *)(v2 + 128);
  *(void *)&long long v71 = v43;
  sub_A6E80();
  v76.width = 0.0;
  v76.height = 0.0;
  if (CGSizeEqualToSize(v72, v76))
  {
    uint64_t v44 = *(void *)(v2 + 40);
    *(void *)&long long v70 = *(void *)(v2 + 32);
    *((void *)&v70 + 1) = v44;
    long long v71 = *(_OWORD *)(v2 + 48);
    sub_7AF4(&qword_D8180);
    sub_A6F00();
    CGSize v45 = v72;
    double v46 = *(double *)(v2 + 64);
    double v47 = *(double *)(v2 + 72);
    double v48 = *(double *)(v2 + 80);
    double v49 = *(double *)(v2 + 88);
    if (qword_D7D68 != -1) {
      swift_once();
    }
    char v50 = *(unsigned char *)v2;
    swift_getKeyPath();
    swift_getKeyPath();
    sub_A60D0();
    swift_release();
    swift_release();
    LiveSpeechCaptionsViewsCoordinator.safeOffset(feature:offset:size:containerRect:foreheadWindowRect:)(v50, v45.width, v45.height, 0.0, 0.0, v46, v47, v48, v49, *(CGFloat *)&v70, *((double *)&v70 + 1), *(CGFloat *)&v71, *((CGFloat *)&v71 + 1));
    uint64_t v52 = *(void *)(v2 + 40);
    uint64_t v53 = *(void *)(v2 + 48);
    uint64_t v54 = *(void *)(v2 + 56);
    *(void *)&long long v70 = *(void *)(v2 + 32);
    uint64_t v51 = v70;
    *((void *)&v70 + 1) = v52;
    *(void *)&long long v71 = v53;
    *((void *)&v71 + 1) = v54;
    v72.width = v55;
    v72.height = v56;
    sub_A6F10();
    *(void *)&long long v70 = v51;
    *((void *)&v70 + 1) = v52;
    *(void *)&long long v71 = v53;
    *((void *)&v71 + 1) = v54;
    sub_A6F00();
    uint64_t v57 = *(void *)(v2 + 144);
    long long v70 = *(_OWORD *)(v2 + 128);
    *(void *)&long long v71 = v57;
    sub_A6E90();
  }
  sub_A7070();
  sub_A7060();
  swift_release();
  sub_A7050();
  uint64_t v58 = swift_release();
  __chkstk_darwin(v58);
  sub_A6300();
  return swift_release();
}

uint64_t sub_D644(uint64_t a1, uint64_t a2)
{
  sub_A7070();
  sub_A7060();
  swift_release();
  sub_A7050();
  swift_release();
  sub_A6300();
  swift_release();
  sub_7AF4(&qword_D8178);
  sub_A6E90();
  uint64_t v3 = sub_DBCC();
  return (*(uint64_t (**)(uint64_t))(a2 + 112))(v3);
}

uint64_t sub_D734()
{
  if (qword_D7D50 != -1) {
    swift_once();
  }
  sub_A6F10();
  return sub_D84C();
}

uint64_t sub_D84C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for LiveSpeechCaptionsPipView();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (double *)((char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_A5FF0();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [self standardUserDefaults];
  CGFloat v10 = *(double *)(v0 + 40);
  v27.width = *(CGFloat *)(v0 + 32);
  v27.height = v10;
  long long v28 = *(_OWORD *)(v0 + 48);
  sub_7AF4(&qword_D8180);
  sub_A6F00();
  uint64_t v11 = NSStringFromCGSize(v29);
  if (!v11)
  {
    sub_A71D0();
    uint64_t v11 = (NSString *)sub_A71A0();
    swift_bridgeObjectRelease();
  }
  NSString v12 = sub_A71A0();
  [v9 setObject:v11 forKey:v12];

  [v9 synchronize];
  sub_A5FC0();
  sub_F9A8(v1, (uint64_t)v4);
  uint64_t v13 = sub_A5FE0();
  os_log_type_t v14 = sub_A7420();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v25 = v5;
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    id v24 = v9;
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v23 = v16 + 4;
    CGFloat v18 = v4[4];
    CGFloat v19 = v4[5];
    uint64_t v26 = v17;
    v27.width = v18;
    v27.height = v19;
    long long v28 = *((_OWORD *)v4 + 3);
    sub_A6F00();
    CGSize v27 = v29;
    type metadata accessor for CGSize(0);
    uint64_t v20 = sub_A71F0();
    *(void *)&v27.width = sub_15F94(v20, v21, &v26);
    sub_A7600();
    swift_bridgeObjectRelease();
    sub_1038C((uint64_t)v4);
    _os_log_impl(&def_5ED54, v13, v14, "Pip save offset: %s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v25);
  }
  else
  {
    sub_1038C((uint64_t)v4);

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_DBCC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for LiveSpeechCaptionsPipView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v7 = *(void (**)(uint64_t, void *))(v0 + 24);
  *(void *)&long long aBlock = *(void *)(v0 + 8);
  *((void *)&aBlock + 1) = v6;
  CGFloat v19 = v7;
  sub_7AF4(&qword_D8378);
  uint64_t v8 = sub_A6F00();
  if (v23 < 1.0)
  {
    __chkstk_darwin(v8);
    *(void *)&v17[-16] = v0;
    sub_A7080();
    sub_A6300();
    swift_release();
  }
  long long aBlock = *(_OWORD *)(v0 + 176);
  sub_7AF4(&qword_D8370);
  sub_A6E80();
  double v9 = v23;
  [*(id *)&v23 invalidate];

  CGFloat v10 = self;
  double v11 = *(double *)(v1 + 168);
  sub_F9A8(v1, (uint64_t)&v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)]);
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v13 = swift_allocObject();
  sub_FA10((uint64_t)v5, v13 + v12);
  unint64_t v21 = sub_101C4;
  uint64_t v22 = v13;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  CGFloat v19 = sub_1684C;
  uint64_t v20 = &unk_CF7B0;
  os_log_type_t v14 = _Block_copy(&aBlock);
  swift_release();
  double v15 = COERCE_DOUBLE([v10 scheduledTimerWithTimeInterval:0 repeats:v14 block:v11]);
  _Block_release(v14);
  long long aBlock = *(_OWORD *)(v1 + 176);
  double v23 = v15;
  return sub_A6E90();
}

uint64_t sub_DE68(uint64_t a1, unsigned char *a2)
{
  if (*a2 == 1)
  {
    if (qword_D7D98 != -1) {
      swift_once();
    }
    swift_beginAccess();
    sub_7AF4(&qword_D8380);
    return sub_A6E90();
  }
  return result;
}

uint64_t sub_DF30()
{
  if (qword_D7D50 != -1) {
    swift_once();
  }
  sub_A6F10();
  sub_D84C();
  sub_7AF4(&qword_D8178);
  return sub_A6E90();
}

uint64_t sub_E070(uint64_t a1, void *a2)
{
  uint64_t result = sub_A58C0();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v9 = sub_A5DF0();
    sub_A7670();
    if (*(void *)(v4 + 16) && (unint64_t v5 = sub_85F3C((uint64_t)v10), (v6 & 1) != 0))
    {
      sub_10330(*(void *)(v4 + 56) + 32 * v5, (uint64_t)&v11);
    }
    else
    {
      long long v11 = 0u;
      long long v12 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_102DC((uint64_t)v10);
    if (*((void *)&v12 + 1))
    {
      uint64_t result = swift_dynamicCast();
      if (result)
      {
        uint64_t v7 = a2[2];
        uint64_t v8 = a2[3];
        v10[0] = a2[1];
        v10[1] = v7;
        v10[2] = v8;
        *(void *)&long long v11 = v9;
        sub_7AF4(&qword_D8378);
        return sub_A6F10();
      }
    }
    else
    {
      return sub_A35C((uint64_t)&v11, &qword_D92A0);
    }
  }
  return result;
}

uint64_t sub_E184()
{
  sub_7AF4(&qword_D8370);
  sub_A6E80();
  [v1 invalidate];

  return sub_A6E90();
}

uint64_t sub_E204@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, double a14@<D4>, double a15@<D5>, double a16@<D6>, uint64_t a17)
{
  uint64_t v99 = a7;
  uint64_t v103 = a5;
  uint64_t v104 = a4;
  uint64_t v101 = a3;
  uint64_t v102 = a2;
  int v27 = a1 & 1;
  long long v28 = (int *)type metadata accessor for LiveSpeechCaptionsPipView();
  uint64_t v92 = *((void *)v28 - 1);
  __chkstk_darwin(v28);
  uint64_t v93 = v29;
  uint64_t v95 = (uint64_t)&v83 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_7AF4(&qword_D8290);
  __chkstk_darwin(v30 - 8);
  uint64_t v89 = (char *)&v83 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_7AF4(&qword_D8298);
  uint64_t v90 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  v88 = (char *)&v83 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_7AF4(&qword_D82A0);
  uint64_t v96 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v94 = (char *)&v83 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_A5FF0();
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v37 = (char *)&v83 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(a9 + 64) = 0u;
  *(_OWORD *)(a9 + 80) = 0u;
  *(void *)(a9 + 96) = LiveSpeechStore.SpeechContext.init(text:highlightRange:);
  *(void *)(a9 + 104) = 0;
  *(void *)(a9 + 112) = LiveSpeechStore.SpeechContext.init(text:highlightRange:);
  *(void *)(a9 + 120) = 0;
  type metadata accessor for CGSize(0);
  v109[0] = 0;
  v109[1] = 0;
  sub_A6E70();
  double v38 = v106;
  *(_OWORD *)(a9 + 128) = v105;
  *(double *)(a9 + 144) = v38;
  *(void *)(a9 + 168) = 0x4024000000000000;
  v109[0] = 0;
  sub_7AF4(&qword_D82A8);
  sub_A6E70();
  *(_OWORD *)(a9 + 176) = v105;
  if (qword_D7D50 != -1) {
    swift_once();
  }
  *(double *)(a9 + 192) = *(double *)&qword_DF540 / 1.2;
  *(void *)(a9 + 200) = 0x3FF0000000000000;
  uint64_t v39 = (uint64_t *)(a9 + v28[16]);
  *uint64_t v39 = swift_getKeyPath();
  sub_7AF4(&qword_D81B0);
  swift_storeEnumTagMultiPayload();
  uint64_t v40 = v28[17];
  *(void *)(a9 + v40) = [objc_allocWithZone((Class)type metadata accessor for ForeheadWindow()) init];
  uint64_t v87 = v28[18];
  *(void *)(a9 + v87) = 0;
  sub_A5FC0();
  swift_retain_n();
  swift_retain_n();
  double v41 = sub_A5FE0();
  os_log_type_t v42 = sub_A7420();
  BOOL v43 = os_log_type_enabled(v41, v42);
  uint64_t v100 = a6;
  uint64_t v98 = a8;
  if (v43)
  {
    uint64_t v44 = swift_slowAlloc();
    uint64_t v85 = v34;
    uint64_t v45 = v44;
    uint64_t v83 = swift_slowAlloc();
    v109[0] = v83;
    *(_DWORD *)uint64_t v45 = 136315650;
    uint64_t v46 = v103;
    uint64_t v84 = v35;
    int v47 = v27;
    uint64_t v48 = v104;
    uint64_t v86 = v40;
    LOBYTE(v105) = v47;
    uint64_t v49 = sub_A71F0();
    *(void *)&long long v105 = sub_15F94(v49, v50, v109);
    sub_A7600();
    swift_bridgeObjectRelease();
    *(_WORD *)(v45 + 12) = 2080;
    *(void *)&long long v105 = v48;
    *((void *)&v105 + 1) = v46;
    double v106 = a11;
    double v107 = a12;
    swift_retain();
    swift_retain();
    sub_7AF4(&qword_D8180);
    uint64_t v51 = sub_A71F0();
    *(void *)&long long v105 = sub_15F94(v51, v52, v109);
    sub_A7600();
    swift_release_n();
    int v27 = v47;
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v45 + 22) = 2080;
    *(double *)&long long v105 = a13;
    *((double *)&v105 + 1) = a14;
    double v106 = a15;
    double v107 = a16;
    type metadata accessor for CGRect(0);
    uint64_t v53 = sub_A71F0();
    *(void *)&long long v105 = sub_15F94(v53, v54, v109);
    a6 = v100;
    sub_A7600();
    uint64_t v40 = v86;
    swift_bridgeObjectRelease();
    _os_log_impl(&def_5ED54, v41, v42, "Pip init %s iconOffset %s containerRect: %s", (uint8_t *)v45, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v84 + 8))(v37, v85);
  }
  else
  {

    swift_release_n();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
  }
  *(unsigned char *)a9 = v27;
  *(double *)(a9 + 64) = a13;
  *(double *)(a9 + 72) = a14;
  *(double *)(a9 + 80) = a15;
  *(double *)(a9 + 88) = a16;
  uint64_t v55 = v99;
  if (a6)
  {
    uint64_t v56 = swift_allocObject();
    *(void *)(v56 + 16) = a6;
    *(void *)(v56 + 24) = v55;
    uint64_t v57 = sub_10830;
  }
  else
  {
    uint64_t v57 = LiveSpeechStore.SpeechContext.init(text:highlightRange:);
    uint64_t v56 = 0;
  }
  uint64_t v58 = a6;
  uint64_t v59 = swift_allocObject();
  *(void *)(v59 + 16) = v57;
  *(void *)(v59 + 24) = v56;
  sub_F958(v58);
  swift_release();
  *(void *)(a9 + 96) = sub_F930;
  *(void *)(a9 + 104) = v59;
  uint64_t v60 = v98;
  if (v98)
  {
    uint64_t v61 = swift_allocObject();
    *(void *)(v61 + 16) = v60;
    *(void *)(v61 + 24) = a17;
    uint64_t v62 = sub_FAE0;
  }
  else
  {
    uint64_t v62 = LiveSpeechStore.SpeechContext.init(text:highlightRange:);
    uint64_t v61 = 0;
  }
  uint64_t v63 = swift_allocObject();
  *(void *)(v63 + 16) = v62;
  *(void *)(v63 + 24) = v61;
  sub_F958(v60);
  swift_release();
  *(void *)(a9 + 112) = sub_10820;
  *(void *)(a9 + 120) = v63;
  uint64_t v64 = v101;
  *(void *)(a9 + 8) = v102;
  *(void *)(a9 + 16) = v64;
  *(double *)(a9 + 24) = a10;
  uint64_t v65 = v103;
  *(void *)(a9 + 32) = v104;
  *(void *)(a9 + 40) = v65;
  *(double *)(a9 + 48) = a11;
  *(double *)(a9 + 56) = a12;
  if (v27)
  {
    uint64_t v66 = qword_D7D98;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v66 != -1) {
      swift_once();
    }
    v67 = (char *)(static AXLTCaptionsProvider.shared + OBJC_IVAR___AXLTCaptionsProvider_isTranscribing);
    swift_beginAccess();
    char v108 = *v67;
  }
  else
  {
    LOBYTE(v109[0]) = 1;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  sub_A6E70();
  uint64_t v68 = *((void *)&v105 + 1);
  *(unsigned char *)(a9 + 152) = v105;
  *(void *)(a9 + 160) = v68;
  uint64_t v69 = *(void **)(a9 + v40);
  swift_beginAccess();
  id v70 = v69;
  sub_7AF4(&qword_D85E0);
  long long v71 = v88;
  sub_A60A0();
  swift_endAccess();

  *(void *)&long long v105 = [self mainRunLoop];
  uint64_t v72 = sub_A75D0();
  uint64_t v73 = (uint64_t)v89;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56))(v89, 1, 1, v72);
  sub_F968();
  sub_A45C(&qword_D82B8, &qword_D8298);
  sub_107C0(&qword_D82C0, (void (*)(uint64_t))sub_F968);
  double v74 = v94;
  uint64_t v75 = v91;
  sub_A6100();
  sub_A35C(v73, &qword_D8290);

  (*(void (**)(char *, uint64_t))(v90 + 8))(v71, v75);
  uint64_t v76 = v95;
  sub_F9A8(a9, v95);
  unint64_t v77 = (*(unsigned __int8 *)(v92 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80);
  uint64_t v78 = swift_allocObject();
  sub_FA10(v76, v78 + v77);
  sub_A45C(&qword_D82C8, &qword_D82A0);
  uint64_t v79 = v97;
  uint64_t v80 = sub_A6110();
  swift_release();
  sub_FAD0(v60);
  sub_FAD0(v100);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v96 + 8))(v74, v79);
  uint64_t v81 = v87;
  uint64_t result = swift_release();
  *(void *)(a9 + v81) = v80;
  return result;
}

uint64_t sub_EE18()
{
  CGFloat v7 = *(double *)(v0 + 32);
  double v8 = *(double *)(v0 + 40);
  CGFloat v9 = *(double *)(v0 + 48);
  CGFloat v10 = *(double *)(v0 + 56);
  sub_7AF4(&qword_D8180);
  sub_A6F00();
  double v1 = *(double *)(v0 + 64);
  double v2 = *(double *)(v0 + 72);
  double v3 = *(double *)(v0 + 80);
  double v4 = *(double *)(v0 + 88);
  if (qword_D7D68 != -1) {
    swift_once();
  }
  char v5 = *(unsigned char *)v0;
  type metadata accessor for LiveSpeechCaptionsPipView();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  LiveSpeechCaptionsViewsCoordinator.safeOffset(feature:offset:size:containerRect:foreheadWindowRect:)(v5, v11, v12, 0.0, 0.0, v1, v2, v3, v4, v7, v8, v9, v10);
  return sub_A6F10();
}

uint64_t sub_EF98(double a1, double a2)
{
  uint64_t v5 = type metadata accessor for LiveSpeechCaptionsPipView();
  __chkstk_darwin(v5);
  CGFloat v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_A5FF0();
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v38 = v8;
  __chkstk_darwin(v8);
  CGFloat v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v2 + 136);
  uint64_t v13 = *(void *)(v2 + 144);
  *(void *)&long long v41 = *(void *)(v2 + 128);
  uint64_t v11 = v41;
  *((void *)&v41 + 1) = v12;
  *(void *)&long long v42 = v13;
  sub_7AF4(&qword_D8178);
  sub_A6E80();
  double v14 = *(double *)&v43 + a1;
  uint64_t v16 = *(void *)(v2 + 40);
  uint64_t v17 = *(void *)(v2 + 48);
  uint64_t v18 = *(void *)(v2 + 56);
  *(void *)&long long v41 = *(void *)(v2 + 32);
  uint64_t v15 = v41;
  *((void *)&v41 + 1) = v16;
  *(void *)&long long v42 = v17;
  *((void *)&v42 + 1) = v18;
  swift_retain();
  swift_retain();
  sub_7AF4(&qword_D8180);
  sub_A6F00();
  *(void *)&long long v41 = v15;
  *((void *)&v41 + 1) = v16;
  *(void *)&long long v42 = v17;
  *((void *)&v42 + 1) = v18;
  double v39 = v14;
  double v40 = *((double *)&v43 + 1);
  sub_A6F10();
  swift_release();
  swift_release();
  *(void *)&long long v41 = v11;
  *((void *)&v41 + 1) = v12;
  *(void *)&long long v42 = v13;
  sub_A6E80();
  double v19 = *((double *)&v43 + 1) + a2;
  *(void *)&long long v41 = v15;
  *((void *)&v41 + 1) = v16;
  *(void *)&long long v42 = v17;
  *((void *)&v42 + 1) = v18;
  swift_retain();
  swift_retain();
  sub_A6F00();
  *(void *)&long long v41 = v15;
  *((void *)&v41 + 1) = v16;
  *(void *)&long long v42 = v17;
  *((void *)&v42 + 1) = v18;
  double v39 = *(double *)&v43;
  double v40 = v19;
  sub_A6F10();
  swift_release();
  swift_release();
  *(void *)&long long v41 = v11;
  *((void *)&v41 + 1) = v12;
  *(void *)&long long v42 = v13;
  sub_A6E80();
  double v20 = *(double *)&v43 + a1;
  *(void *)&long long v41 = v15;
  *((void *)&v41 + 1) = v16;
  *(void *)&long long v42 = v17;
  *((void *)&v42 + 1) = v18;
  swift_retain();
  swift_retain();
  sub_A6F00();
  *(void *)&long long v41 = v15;
  *((void *)&v41 + 1) = v16;
  *(void *)&long long v42 = v17;
  *((void *)&v42 + 1) = v18;
  double v39 = v20;
  double v40 = *((double *)&v43 + 1);
  sub_A6F10();
  swift_release();
  swift_release();
  *(void *)&long long v41 = v11;
  *((void *)&v41 + 1) = v12;
  *(void *)&long long v42 = v13;
  sub_A6E80();
  double v21 = *((double *)&v43 + 1) + a2;
  *(void *)&long long v41 = v15;
  *((void *)&v41 + 1) = v16;
  *(void *)&long long v42 = v17;
  *((void *)&v42 + 1) = v18;
  swift_retain();
  swift_retain();
  sub_A6F00();
  *(void *)&long long v41 = v15;
  *((void *)&v41 + 1) = v16;
  *(void *)&long long v42 = v17;
  *((void *)&v42 + 1) = v18;
  double v39 = *(double *)&v43;
  double v40 = v21;
  sub_A6F10();
  swift_release();
  swift_release();
  double v22 = *(double *)(v2 + 64);
  double v23 = *(double *)(v2 + 72);
  double v24 = *(double *)(v2 + 80);
  double v25 = *(double *)(v2 + 88);
  if (qword_D7D68 != -1) {
    swift_once();
  }
  char v26 = *(unsigned char *)v2;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  LiveSpeechCaptionsViewsCoordinator.safeOffset(feature:offset:size:containerRect:foreheadWindowRect:)(v26, v20, v21, 0.0, 0.0, v22, v23, v24, v25, *(CGFloat *)&v41, *((double *)&v41 + 1), *(CGFloat *)&v42, *((CGFloat *)&v42 + 1));
  uint64_t v27 = *(void *)(v2 + 40);
  *(void *)&long long v41 = *(void *)(v2 + 32);
  *((void *)&v41 + 1) = v27;
  long long v42 = *(_OWORD *)(v2 + 48);
  *(void *)&long long v43 = v28;
  *((void *)&v43 + 1) = v29;
  sub_A6F10();
  sub_A5FC0();
  sub_F9A8(v2, (uint64_t)v7);
  uint64_t v30 = sub_A5FE0();
  os_log_type_t v31 = sub_A7420();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    double v39 = COERCE_DOUBLE(swift_slowAlloc());
    *(_DWORD *)uint64_t v32 = 136315138;
    uint64_t v33 = *((void *)v7 + 5);
    *(void *)&long long v41 = *((void *)v7 + 4);
    *((void *)&v41 + 1) = v33;
    long long v42 = *((_OWORD *)v7 + 3);
    sub_A6F00();
    long long v41 = v43;
    type metadata accessor for CGSize(0);
    uint64_t v34 = sub_A71F0();
    *(void *)&long long v41 = sub_15F94(v34, v35, (uint64_t *)&v39);
    sub_A7600();
    swift_bridgeObjectRelease();
    sub_1038C((uint64_t)v7);
    _os_log_impl(&def_5ED54, v30, v31, "Pip change offset: %s", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1038C((uint64_t)v7);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v10, v38);
}

uint64_t sub_F508()
{
  return sub_A6F10();
}

uint64_t sub_F568(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_A5FF0();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_A5FC0();
  CGFloat v7 = sub_A5FE0();
  os_log_type_t v8 = sub_A7420();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&def_5ED54, v7, v8, "Opacity Timer fired, pip is semi-transparent now", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  __chkstk_darwin(v10);
  *(void *)&v12[-16] = a2;
  sub_A7080();
  sub_A6300();
  return swift_release();
}

uint64_t sub_F714()
{
  if (qword_D7E58 != -1) {
    swift_once();
  }
  swift_beginAccess();
  sub_7AF4(&qword_D8378);
  return sub_A6F10();
}

uint64_t sub_F7E4()
{
  return sub_A6510();
}

uint64_t sub_F808()
{
  return sub_A6510();
}

uint64_t sub_F82C(uint64_t a1)
{
  uint64_t v2 = sub_A63C0();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_A6520();
}

uint64_t sub_F8F8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_F930()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_F958(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

unint64_t sub_F968()
{
  unint64_t result = qword_D82B0;
  if (!qword_D82B0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_D82B0);
  }
  return result;
}

uint64_t sub_F9A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LiveSpeechCaptionsPipView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_FA10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LiveSpeechCaptionsPipView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_FA74()
{
  return sub_EE18();
}

uint64_t sub_FAD0(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_FAE0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_FB14(uint64_t a1)
{
  return sub_CE00(a1);
}

uint64_t sub_FB7C(uint64_t a1)
{
  return sub_FDCC(a1, sub_D644);
}

unint64_t sub_FB94()
{
  unint64_t result = qword_D8338;
  if (!qword_D8338)
  {
    sub_7C5C(&qword_D82E0);
    sub_FC34();
    sub_A45C(&qword_D8160, &qword_D8168);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8338);
  }
  return result;
}

unint64_t sub_FC34()
{
  unint64_t result = qword_D8340;
  if (!qword_D8340)
  {
    sub_7C5C(&qword_D82D8);
    sub_A45C(&qword_D8348, &qword_D82D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8340);
  }
  return result;
}

uint64_t sub_FCD8()
{
  uint64_t v1 = *(void *)(type metadata accessor for LiveSpeechCaptionsPipView() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  uint64_t v3 = sub_DBCC();
  return (*(uint64_t (**)(uint64_t))(v2 + 96))(v3);
}

uint64_t sub_FD48(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for LiveSpeechCaptionsPipView() - 8);
  return sub_DE68(a1, (unsigned char *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))));
}

uint64_t sub_FDB4(uint64_t a1)
{
  return sub_FDCC(a1, (uint64_t (*)(uint64_t, uint64_t))sub_DF30);
}

uint64_t sub_FDCC(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for LiveSpeechCaptionsPipView() - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5);
}

uint64_t sub_FE54(uint64_t a1)
{
  return sub_FDCC(a1, (uint64_t (*)(uint64_t, uint64_t))sub_E070);
}

uint64_t sub_FE70()
{
  return sub_DBCC();
}

uint64_t sub_FED0()
{
  type metadata accessor for LiveSpeechCaptionsPipView();

  return sub_E184();
}

unint64_t sub_FF30()
{
  unint64_t result = qword_D8350;
  if (!qword_D8350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8350);
  }
  return result;
}

unint64_t sub_FF84()
{
  unint64_t result = qword_D8360;
  if (!qword_D8360)
  {
    sub_7C5C(&qword_D8318);
    sub_A45C(&qword_D8368, &qword_D8310);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8360);
  }
  return result;
}

uint64_t sub_10024(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10038()
{
  uint64_t v1 = type metadata accessor for LiveSpeechCaptionsPipView();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  uint64_t v5 = v0 + v3 + *(int *)(v1 + 64);
  sub_7AF4(&qword_D81B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_A63C0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }

  swift_release();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_101C4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for LiveSpeechCaptionsPipView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_F568(a1, v4);
}

uint64_t sub_10234(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10244()
{
  return swift_release();
}

uint64_t sub_1024C()
{
  return sub_F508();
}

uint64_t sub_10268()
{
  return sub_F714();
}

uint64_t sub_10284@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_A64F0();
  *a1 = result;
  return result;
}

uint64_t sub_102B0()
{
  return sub_A6500();
}

uint64_t sub_102DC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10330(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1038C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LiveSpeechCaptionsPipView();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_103E8()
{
  return sub_D734();
}

uint64_t sub_10404()
{
  return sub_EF98(**(double **)(v0 + 24), *(double *)(*(void *)(v0 + 24) + 8));
}

uint64_t sub_10438@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_A64F0();
  *a1 = result;
  return result;
}

uint64_t sub_10464()
{
  return sub_A6500();
}

unint64_t sub_10490()
{
  unint64_t result = qword_D83A0;
  if (!qword_D83A0)
  {
    sub_7C5C(&qword_D8398);
    sub_1055C(&qword_D83A8, &qword_D83B0, (void (*)(void))sub_105D8);
    sub_A45C(&qword_D83D8, &qword_D83E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D83A0);
  }
  return result;
}

uint64_t sub_1055C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_7C5C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_105D8()
{
  return sub_1055C(&qword_D83B8, &qword_D83C0, (void (*)(void))sub_10608);
}

unint64_t sub_10608()
{
  unint64_t result = qword_D83C8;
  if (!qword_D83C8)
  {
    sub_7C5C(&qword_D83D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D83C8);
  }
  return result;
}

uint64_t sub_1067C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_7AF4(&qword_D8390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_106E8()
{
  unint64_t result = qword_D83E8;
  if (!qword_D83E8)
  {
    sub_7C5C(&qword_D8328);
    sub_1055C(&qword_D8358, &qword_D8320, (void (*)(void))sub_FF84);
    sub_107C0(&qword_D83F0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D83E8);
  }
  return result;
}

uint64_t sub_107C0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10808()
{
  return sub_1024C();
}

uint64_t type metadata accessor for LiveSpeechRootViewController_iOS(uint64_t a1)
{
  return sub_1182C(a1, (uint64_t *)&unk_D8410);
}

uint64_t sub_10854()
{
  return swift_initClassMetadata2();
}

uint64_t sub_108B8()
{
  uint64_t v1 = qword_D8408;
  if (*(void *)(v0 + qword_D8408))
  {
    uint64_t v2 = *(void *)(v0 + qword_D8408);
  }
  else
  {
    type metadata accessor for LiveSpeechScreenLockManager();
    uint64_t v2 = swift_allocObject();
    *(_DWORD *)(v2 + 16) = -1;
    *(void *)(v0 + v1) = v2;
    swift_retain();
  }
  swift_retain();
  return v2;
}

uint64_t sub_10924()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

id sub_10978()
{
  if (qword_D7D68 != -1) {
    swift_once();
  }
  LiveSpeechCaptionsViewsCoordinator.updateLiveSpeechWindowState(_:)(LiveSpeechUIService_LiveSpeechCaptionsWindowState_compact);
  LiveSpeechCaptionsViewsCoordinator.updateLiveSpeechFrame(_:)(0.0, 0.0, 0.0, 0.0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LiveSpeechRootViewController_iOS(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_10A14(void *a1)
{
  uint64_t v1 = qword_D7D68;
  id v2 = a1;
  if (v1 != -1) {
    swift_once();
  }
  LiveSpeechCaptionsViewsCoordinator.updateLiveSpeechWindowState(_:)(LiveSpeechUIService_LiveSpeechCaptionsWindowState_compact);
  LiveSpeechCaptionsViewsCoordinator.updateLiveSpeechFrame(_:)(0.0, 0.0, 0.0, 0.0);
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for LiveSpeechRootViewController_iOS(0);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_10AB4(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_release();
}

void sub_10B14(char *a1, uint64_t a2, void *a3)
{
  *(void *)&a1[qword_D8408] = 0;
  id v4 = a3;

  sub_A7730();
  __break(1u);
}

void sub_10B8C(int a1, id a2)
{
  [a2 isViewLoaded];
  id v3 = [a2 view];
  if (v3)
  {
    id v4 = v3;
    [v3 setNeedsLayout];
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10C08(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

void sub_10C68(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  aBlock[4] = sub_11BD0;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10C08;
  aBlock[3] = &unk_CF848;
  uint64_t v10 = _Block_copy(aBlock);
  id v11 = a1;
  swift_unknownObjectRetain();
  swift_release();
  [a5 animateAlongsideTransition:v10 completion:0];
  _Block_release(v10);
  v12.receiver = v11;
  v12.super_class = (Class)type metadata accessor for LiveSpeechRootViewController_iOS(0);
  objc_msgSendSuper2(&v12, "viewWillTransitionToSize:withTransitionCoordinator:", a5, a2, a3);
  swift_unknownObjectRelease();
}

id sub_10D9C()
{
  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for LiveSpeechRootViewController_iOS(0);
  objc_msgSendSuper2(&v10, "viewDidLoad");
  id result = [v0 view];
  if (result)
  {
    uint64_t v2 = result;
    id v3 = [self clearColor];
    [v2 setBackgroundColor:v3];

    id v4 = *(void **)&v0[qword_D83F8];
    type metadata accessor for LiveSpeechStore(0);
    sub_11D48((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    id v5 = v4;
    sub_A6340();
    sub_A67B0();
    if (qword_D7D68 != -1) {
      swift_once();
    }
    uint64_t v6 = static LiveSpeechCaptionsViewsCoordinator.shared;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v0;
    os_log_type_t v8 = (void (**)())(v6
                     + OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveSpeechViewToFront);
    *os_log_type_t v8 = sub_11BC8;
    v8[1] = (void (*)())v7;
    uint64_t v9 = v0;
    return (id)swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10F3C(void *a1)
{
  id v2 = [a1 view];
  if (!v2)
  {
    __break(1u);
    goto LABEL_9;
  }
  id v3 = v2;
  id v4 = [v2 superview];

  if (!v4) {
    return;
  }
  id v5 = [a1 view];
  if (!v5)
  {
LABEL_9:
    __break(1u);
    return;
  }
  id v6 = v5;
  objc_msgSend(v4, "bringSubviewToFront:");
}

void sub_1100C(void *a1)
{
  id v1 = a1;
  sub_10D9C();
}

void sub_11054(char a1)
{
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for LiveSpeechRootViewController_iOS(0);
  objc_msgSendSuper2(&v6, "viewDidAppear:", a1 & 1);
  [v1 isViewLoaded];
  uint64_t v3 = *(void *)&v1[qword_D83F8];
  id v4 = (char *)sub_7BB74();
  uint64_t v5 = OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_observers;
  if (([*(id *)&v4[OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_observers] containsObject:v3] & 1) == 0)objc_msgSend(*(id *)&v4[v5], "addObject:", v3); {
  if (!*(void *)&v4[OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_callCenter])
  }
    sub_8AA58();
}

void sub_11118(void *a1, uint64_t a2, char a3)
{
  id v4 = a1;
  sub_11054(a3);
}

void sub_1116C(char *a1)
{
  uint64_t v1 = *(void *)&a1[qword_D83F8];
  uint64_t v3 = a1;
  id v2 = sub_7BB74();
  sub_87AFC(v1, v2);

  if (qword_D7D68 != -1) {
    swift_once();
  }
  LiveSpeechCaptionsViewsCoordinator.updateLiveSpeechWindowState(_:)(LiveSpeechUIService_LiveSpeechCaptionsWindowState_compact);
  LiveSpeechCaptionsViewsCoordinator.updateLiveSpeechFrame(_:)(0.0, 0.0, 0.0, 0.0);
}

uint64_t sub_11228()
{
  return 30;
}

uint64_t sub_11230()
{
  return 1;
}

uint64_t sub_11238(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a1;
  uint64_t v3 = sub_A70C0();
  uint64_t v32 = *(void *)(v3 - 8);
  uint64_t v33 = v3;
  __chkstk_darwin(v3);
  os_log_type_t v31 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_A70F0();
  uint64_t v29 = *(void *)(v5 - 8);
  uint64_t v30 = v5;
  __chkstk_darwin(v5);
  uint64_t v28 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_7AF4(&qword_D84B8);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = sub_A7110();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v26 - v15;
  sub_108B8();
  LiveSpeechScreenLockManager.unregisterForScreenEvents()();
  swift_release();
  uint64_t v17 = *(void *)(a2 + qword_D83F8);
  sub_A7070();
  uint64_t v34 = v17;
  char v35 = 0;
  sub_A6300();
  swift_release();
  if (qword_D7D68 != -1) {
    swift_once();
  }
  LiveSpeechCaptionsViewsCoordinator.updateLiveSpeechWindowState(_:)(LiveSpeechUIService_LiveSpeechCaptionsWindowState_compact);
  LiveSpeechCaptionsViewsCoordinator.updateLiveSpeechFrame(_:)(0.0, 0.0, 0.0, 0.0);
  sub_11C10(0, (unint64_t *)&qword_D7E80);
  uint64_t v18 = (void *)sub_A74C0();
  sub_A7100();
  sub_A7120();
  char v26 = *(void (**)(char *, uint64_t))(v11 + 8);
  v26(v13, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v27, v7);
  unint64_t v19 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v20 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v20 + v19, (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  aBlock[4] = sub_11CE0;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_8A1B4;
  aBlock[3] = &unk_CF898;
  double v21 = _Block_copy(aBlock);
  double v22 = v28;
  sub_A70D0();
  uint64_t v36 = _swiftEmptyArrayStorage;
  sub_11D48((unint64_t *)&unk_D9260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_7AF4((uint64_t *)&unk_D84C0);
  sub_11D90();
  double v23 = v31;
  uint64_t v24 = v33;
  sub_A7640();
  sub_A74A0();
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v23, v24);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v22, v30);
  v26(v16, v10);
  return swift_release();
}

void sub_11774()
{
}

void sub_117A4()
{
}

void sub_117D4()
{
}

uint64_t sub_11804()
{
  return type metadata accessor for LiveSpeechRootViewController_iOS(0);
}

uint64_t type metadata accessor for PassThroughView(uint64_t a1)
{
  return sub_1182C(a1, (uint64_t *)&unk_D8460);
}

uint64_t sub_1182C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_11864()
{
  return swift_initClassMetadata2();
}

id sub_118A4(uint64_t a1, CGFloat a2, CGFloat a3)
{
  id v7 = [v3 subviews];
  sub_11C10(0, &qword_D84B0);
  unint64_t v8 = sub_A72B0();

  if (v8 >> 62) {
    goto LABEL_13;
  }
  uint64_t v9 = *(void *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFFF8));
  while (v9)
  {
    uint64_t v10 = 4;
    while (1)
    {
      id v11 = (v8 & 0xC000000000000001) != 0 ? (id)sub_A76A0() : *(id *)(v8 + 8 * v10);
      uint64_t v12 = v11;
      uint64_t v13 = v10 - 3;
      if (__OFADD__(v10 - 4, 1)) {
        break;
      }
      [v11 frame];
      v17.x = a2;
      v17.y = a3;
      BOOL v14 = CGRectContainsPoint(v18, v17);

      if (v14)
      {
        swift_bridgeObjectRelease();
        v16.receiver = v3;
        v16.super_class = (Class)type metadata accessor for PassThroughView(0);
        return objc_msgSendSuper2(&v16, "hitTest:withEvent:", a1, a2, a3);
      }
      ++v10;
      if (v13 == v9) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_A7740();
    swift_bridgeObjectRelease();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  return 0;
}

id sub_11A3C(void *a1, CGFloat a2, CGFloat a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id v10 = a1;
  id v11 = sub_118A4((uint64_t)a5, a2, a3);

  return v11;
}

id sub_11AB8(void *a1, uint64_t a2, uint64_t a3)
{
  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for PassThroughView(0);
  return objc_msgSendSuper2(&v5, "initWithCoder:", a3);
}

id sub_11B04()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PassThroughView(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_11B3C()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for PassThroughView(0));
  return sub_A6360();
}

uint64_t sub_11B88()
{
  return type metadata accessor for PassThroughView(0);
}

uint64_t sub_11B90()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_11BC8()
{
  sub_10F3C(*(void **)(v0 + 16));
}

void sub_11BD0(int a1)
{
  sub_10B8C(a1, *(id *)(v1 + 16));
}

uint64_t sub_11BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_11BE8()
{
  return swift_release();
}

uint64_t sub_11BF0()
{
  return sub_7DB94(*(void **)(v0 + 16));
}

uint64_t sub_11C10(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_11C4C()
{
  uint64_t v1 = sub_7AF4(&qword_D84B8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_11CE0()
{
  return sub_A7310();
}

uint64_t sub_11D48(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_11D90()
{
  unint64_t result = qword_D9270;
  if (!qword_D9270)
  {
    sub_7C5C((uint64_t *)&unk_D84C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9270);
  }
  return result;
}

double sub_11DF8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_11E70()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_11EE4()
{
  uint64_t v1 = sub_A6920();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v96 = &v85[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = sub_7AF4(&qword_D85B8);
  __chkstk_darwin(v4);
  uint64_t v89 = &v85[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v100 = &v85[-v7];
  __chkstk_darwin(v8);
  uint64_t v91 = &v85[-v9];
  __chkstk_darwin(v10);
  uint64_t v12 = &v85[-v11];
  uint64_t v13 = sub_7AF4(&qword_D85C0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = &v85[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = sub_7AF4(&qword_D8598);
  __chkstk_darwin(v16 - 8);
  uint64_t v87 = &v85[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v18);
  uint64_t v97 = &v85[-v19];
  __chkstk_darwin(v20);
  uint64_t v92 = &v85[-v21];
  __chkstk_darwin(v22);
  uint64_t v90 = &v85[-v23];
  __chkstk_darwin(v24);
  uint64_t v104 = &v85[-v25];
  __chkstk_darwin(v26);
  uint64_t v101 = &v85[-v27];
  __chkstk_darwin(v28);
  v88 = &v85[-v29];
  __chkstk_darwin(v30);
  uint64_t v93 = &v85[-v31];
  __chkstk_darwin(v32);
  uint64_t v94 = &v85[-v33];
  __chkstk_darwin(v34);
  uint64_t v36 = &v85[-v35];
  __chkstk_darwin(v37);
  double v39 = &v85[-v38];
  __chkstk_darwin(v40);
  long long v42 = &v85[-v41];
  uint64_t v98 = v0;
  uint64_t v99 = v0 + OBJC_IVAR____TtC19LiveSpeechUIService14ForeheadWindow__horizontalSizeClass;
  sub_8860(v0 + OBJC_IVAR____TtC19LiveSpeechUIService14ForeheadWindow__horizontalSizeClass, (uint64_t)v15, &qword_D85C0);
  sub_537C8((uint64_t)v42);
  uint64_t v110 = v15;
  sub_A35C((uint64_t)v15, &qword_D85C0);
  long long v43 = *(void (**)(void))(v2 + 104);
  unsigned int v103 = enum case for UserInterfaceSizeClass.regular(_:);
  char v108 = (void (*)(unsigned char *, void, uint64_t))v43;
  uint64_t v109 = v2 + 104;
  v43(v39);
  double v106 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v2 + 56);
  uint64_t v107 = v2 + 56;
  v106(v39, 0, 1, v1);
  uint64_t v105 = v4;
  uint64_t v44 = (uint64_t)&v12[*(int *)(v4 + 48)];
  sub_8860((uint64_t)v42, (uint64_t)v12, &qword_D8598);
  sub_8860((uint64_t)v39, v44, &qword_D8598);
  uint64_t v45 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v2 + 48);
  unsigned int v46 = v45(v12, 1, v1);
  uint64_t v102 = v2;
  if (v46 == 1)
  {
    sub_A35C((uint64_t)v39, &qword_D8598);
    sub_A35C((uint64_t)v42, &qword_D8598);
    if (v45((unsigned char *)v44, 1, v1) != 1)
    {
      uint64_t v47 = v105;
LABEL_13:
      uint64_t v51 = (uint64_t)v101;
      uint64_t v48 = v104;
LABEL_14:
      sub_A35C((uint64_t)v12, &qword_D85B8);
      goto LABEL_15;
    }
    sub_A35C((uint64_t)v12, &qword_D8598);
    uint64_t v48 = v104;
    uint64_t v47 = v105;
  }
  else
  {
    sub_8860((uint64_t)v12, (uint64_t)v36, &qword_D8598);
    uint64_t v95 = v45;
    if (v45((unsigned char *)v44, 1, v1) == 1)
    {
LABEL_12:
      sub_A35C((uint64_t)v39, &qword_D8598);
      sub_A35C((uint64_t)v42, &qword_D8598);
      (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v36, v1);
      uint64_t v47 = v105;
      uint64_t v45 = v95;
      goto LABEL_13;
    }
    uint64_t v49 = v96;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 32))(v96, v44, v1);
    sub_138D0();
    int v86 = sub_A7190();
    unint64_t v50 = *(void (**)(unsigned char *, uint64_t))(v2 + 8);
    v50(v49, v1);
    sub_A35C((uint64_t)v39, &qword_D8598);
    sub_A35C((uint64_t)v42, &qword_D8598);
    v50(v36, v1);
    sub_A35C((uint64_t)v12, &qword_D8598);
    uint64_t v48 = v104;
    uint64_t v47 = v105;
    uint64_t v45 = v95;
    uint64_t v51 = (uint64_t)v101;
    if ((v86 & 1) == 0) {
      goto LABEL_15;
    }
  }
  uint64_t v52 = (uint64_t)v110;
  sub_8860(v98 + OBJC_IVAR____TtC19LiveSpeechUIService14ForeheadWindow__verticalSizeClass, (uint64_t)v110, &qword_D85C0);
  uint64_t v53 = v94;
  sub_537C8((uint64_t)v94);
  sub_A35C(v52, &qword_D85C0);
  unint64_t v54 = v45;
  uint64_t v55 = v93;
  v108(v93, enum case for UserInterfaceSizeClass.compact(_:), v1);
  v106(v55, 0, 1, v1);
  uint64_t v12 = v91;
  uint64_t v56 = (uint64_t)&v91[*(int *)(v47 + 48)];
  sub_8860((uint64_t)v53, (uint64_t)v91, &qword_D8598);
  sub_8860((uint64_t)v55, v56, &qword_D8598);
  if (v54(v12, 1, v1) != 1)
  {
    uint64_t v58 = v88;
    sub_8860((uint64_t)v12, (uint64_t)v88, &qword_D8598);
    uint64_t v45 = v54;
    if (v54((unsigned char *)v56, 1, v1) != 1)
    {
      uint64_t v79 = v102;
      uint64_t v80 = v58;
      uint64_t v81 = v96;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v102 + 32))(v96, v56, v1);
      sub_138D0();
      LODWORD(v95) = sub_A7190();
      id v82 = *(void (**)(unsigned char *, uint64_t))(v79 + 8);
      v82(v81, v1);
      sub_A35C((uint64_t)v93, &qword_D8598);
      sub_A35C((uint64_t)v94, &qword_D8598);
      v82(v80, v1);
      sub_A35C((uint64_t)v91, &qword_D8598);
      uint64_t v51 = (uint64_t)v101;
      if (v95)
      {
        char v76 = 1;
        return v76 & 1;
      }
LABEL_15:
      uint64_t v59 = (uint64_t)v110;
      sub_8860(v99, (uint64_t)v110, &qword_D85C0);
      sub_537C8(v51);
      sub_A35C(v59, &qword_D85C0);
      v108(v48, v103, v1);
      v106(v48, 0, 1, v1);
      uint64_t v60 = v100;
      uint64_t v61 = (uint64_t)&v100[*(int *)(v47 + 48)];
      sub_8860(v51, (uint64_t)v100, &qword_D8598);
      sub_8860((uint64_t)v48, v61, &qword_D8598);
      if (v45(v60, 1, v1) == 1)
      {
        sub_A35C((uint64_t)v48, &qword_D8598);
        sub_A35C(v51, &qword_D8598);
        unsigned int v62 = v45((unsigned char *)v61, 1, v1);
        uint64_t v63 = v102;
        if (v62 == 1)
        {
          sub_A35C((uint64_t)v60, &qword_D8598);
LABEL_22:
          uint64_t v71 = (uint64_t)v110;
          sub_8860(v98 + OBJC_IVAR____TtC19LiveSpeechUIService14ForeheadWindow__verticalSizeClass, (uint64_t)v110, &qword_D85C0);
          uint64_t v72 = v92;
          sub_537C8((uint64_t)v92);
          sub_A35C(v71, &qword_D85C0);
          uint64_t v73 = v97;
          v108(v97, v103, v1);
          v106(v73, 0, 1, v1);
          double v74 = v89;
          uint64_t v75 = (uint64_t)&v89[*(int *)(v105 + 48)];
          sub_8860((uint64_t)v72, (uint64_t)v89, &qword_D8598);
          sub_8860((uint64_t)v73, v75, &qword_D8598);
          if (v45(v74, 1, v1) == 1)
          {
            sub_A35C((uint64_t)v97, &qword_D8598);
            sub_A35C((uint64_t)v72, &qword_D8598);
            if (v45((unsigned char *)v75, 1, v1) == 1)
            {
              uint64_t v57 = (uint64_t)v74;
              goto LABEL_25;
            }
          }
          else
          {
            unint64_t v77 = v87;
            sub_8860((uint64_t)v74, (uint64_t)v87, &qword_D8598);
            if (v45((unsigned char *)v75, 1, v1) != 1)
            {
              uint64_t v83 = v96;
              (*(void (**)(unsigned char *, uint64_t, uint64_t))(v63 + 32))(v96, v75, v1);
              sub_138D0();
              char v76 = sub_A7190();
              uint64_t v84 = *(void (**)(unsigned char *, uint64_t))(v63 + 8);
              v84(v83, v1);
              sub_A35C((uint64_t)v97, &qword_D8598);
              sub_A35C((uint64_t)v92, &qword_D8598);
              v84(v77, v1);
              sub_A35C((uint64_t)v74, &qword_D8598);
              return v76 & 1;
            }
            sub_A35C((uint64_t)v97, &qword_D8598);
            sub_A35C((uint64_t)v92, &qword_D8598);
            (*(void (**)(unsigned char *, uint64_t))(v63 + 8))(v77, v1);
          }
          uint64_t v66 = (uint64_t)v74;
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v64 = v90;
        sub_8860((uint64_t)v60, (uint64_t)v90, &qword_D8598);
        unsigned int v65 = v45((unsigned char *)v61, 1, v1);
        uint64_t v63 = v102;
        if (v65 != 1)
        {
          v67 = v64;
          uint64_t v68 = v96;
          (*(void (**)(unsigned char *, uint64_t, uint64_t))(v102 + 32))(v96, v61, v1);
          sub_138D0();
          char v69 = sub_A7190();
          uint64_t v95 = v45;
          id v70 = *(void (**)(unsigned char *, uint64_t))(v63 + 8);
          v70(v68, v1);
          sub_A35C((uint64_t)v104, &qword_D8598);
          sub_A35C(v51, &qword_D8598);
          v70(v67, v1);
          uint64_t v45 = v95;
          sub_A35C((uint64_t)v60, &qword_D8598);
          if ((v69 & 1) == 0)
          {
LABEL_30:
            char v76 = 0;
            return v76 & 1;
          }
          goto LABEL_22;
        }
        sub_A35C((uint64_t)v48, &qword_D8598);
        sub_A35C(v51, &qword_D8598);
        (*(void (**)(unsigned char *, uint64_t))(v63 + 8))(v64, v1);
      }
      uint64_t v66 = (uint64_t)v60;
LABEL_29:
      sub_A35C(v66, &qword_D85B8);
      goto LABEL_30;
    }
    uint64_t v95 = v54;
    double v39 = v93;
    long long v42 = v94;
    uint64_t v36 = v58;
    uint64_t v2 = v102;
    goto LABEL_12;
  }
  sub_A35C((uint64_t)v55, &qword_D8598);
  sub_A35C((uint64_t)v53, &qword_D8598);
  if (v54((unsigned char *)v56, 1, v1) != 1)
  {
    uint64_t v45 = v54;
    uint64_t v51 = (uint64_t)v101;
    goto LABEL_14;
  }
  uint64_t v57 = (uint64_t)v12;
LABEL_25:
  sub_A35C(v57, &qword_D8598);
  char v76 = 1;
  return v76 & 1;
}

char *sub_12C00()
{
  uint64_t v1 = sub_7AF4(&qword_D85D8);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_7AF4(&qword_D85E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (uint64_t *)&v0[OBJC_IVAR____TtC19LiveSpeechUIService14ForeheadWindow__verticalSizeClass];
  *uint64_t v9 = swift_getKeyPath();
  sub_7AF4(&qword_D7E78);
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = (uint64_t *)&v0[OBJC_IVAR____TtC19LiveSpeechUIService14ForeheadWindow__horizontalSizeClass];
  *uint64_t v10 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = OBJC_IVAR____TtC19LiveSpeechUIService14ForeheadWindow_layoutMonitor;
  id v12 = objc_allocWithZone((Class)SBSSystemApertureLayoutMonitor);
  uint64_t v13 = v0;
  *(void *)&v0[v11] = [v12 init];
  uint64_t v14 = &v13[OBJC_IVAR____TtC19LiveSpeechUIService14ForeheadWindow__foreheadRect];
  type metadata accessor for CGRect(0);
  long long v20 = 0u;
  long long v21 = 0u;
  sub_A6090();
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v14, v8, v5);
  uint64_t v15 = &v13[OBJC_IVAR____TtC19LiveSpeechUIService14ForeheadWindow__frames];
  *(void *)&long long v20 = &_swiftEmptyArrayStorage;
  sub_7AF4(&qword_D85B0);
  sub_A6090();
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v15, v4, v1);
  *(void *)&v13[OBJC_IVAR____TtC19LiveSpeechUIService14ForeheadWindow_minimumForeheadHeight] = 0x4042AAAAAAAAAAABLL;

  uint64_t v16 = (objc_class *)type metadata accessor for ForeheadWindow();
  v19.receiver = v13;
  v19.super_class = v16;
  uint64_t v17 = (char *)objc_msgSendSuper2(&v19, "init");
  [*(id *)&v17[OBJC_IVAR____TtC19LiveSpeechUIService14ForeheadWindow_layoutMonitor] addObserver:v17];
  return v17;
}

void sub_12EF0(unint64_t a1)
{
  if (!AXDeviceHasJindo() || (sub_11EE4() & 1) != 0)
  {
    CGPoint origin = CGRectZero.origin;
    CGFloat width = CGRectZero.size.width;
    CGFloat height = CGRectZero.size.height;
    swift_getKeyPath();
    swift_getKeyPath();
    CGPoint v63 = origin;
    CGFloat v64 = width;
    CGFloat v65 = height;
    id v5 = v1;
LABEL_4:
    sub_A60E0();
    return;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  *(void *)&v63.CGFloat x = &_swiftEmptyArrayStorage;
  id v62 = v1;
  sub_A60E0();
  unint64_t v58 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_A7740();
    if (!v6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (!v6) {
      goto LABEL_20;
    }
  }
  if (v6 < 1)
  {
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v7 = 0;
  unint64_t v59 = a1;
  unint64_t v60 = a1 & 0xC000000000000001;
  do
  {
    if (v60) {
      id v8 = (id)sub_A76A0();
    }
    else {
      id v8 = *(id *)(a1 + 8 * v7 + 32);
    }
    uint64_t v9 = v8;
    [v8 CGRectValue];
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v18 = (void (*)(CGPoint *, void))sub_A60C0();
    long long v20 = v19;
    long long v21 = *v19;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    void *v20 = v21;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      long long v21 = sub_41CD8(0, *((void *)v21 + 2) + 1, 1, v21);
      void *v20 = v21;
    }
    unint64_t v24 = *((void *)v21 + 2);
    unint64_t v23 = *((void *)v21 + 3);
    if (v24 >= v23 >> 1)
    {
      long long v21 = sub_41CD8((char *)(v23 > 1), v24 + 1, 1, v21);
      void *v20 = v21;
    }
    a1 = v59;
    ++v7;
    *((void *)v21 + 2) = v24 + 1;
    uint64_t v25 = &v21[32 * v24];
    *((void *)v25 + 4) = v11;
    *((void *)v25 + 5) = v13;
    *((void *)v25 + 6) = v15;
    *((void *)v25 + 7) = v17;
    v18(&v63, 0);

    swift_release();
    swift_release();
  }
  while (v6 != v7);
LABEL_20:
  swift_bridgeObjectRelease();
  if (!v58)
  {
    uint64_t v26 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
    if (v26 != 2) {
      goto LABEL_22;
    }
LABEL_28:
    uint64_t v6 = a1 & 0xC000000000000001;
    if ((a1 & 0xC000000000000001) == 0)
    {
      if (!*(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8)))
      {
        __break(1u);
        goto LABEL_42;
      }
      id v37 = *(id *)(a1 + 32);
LABEL_31:
      uint64_t v38 = v37;
      [v37 CGRectValue];
      CGFloat v40 = v39;
      CGFloat v42 = v41;
      CGFloat v44 = v43;
      CGFloat v46 = v45;

      if (v6)
      {
        id v47 = (id)sub_A76A0();
LABEL_35:
        uint64_t v48 = v47;
        [v47 CGRectValue];
        CGFloat v50 = v49;
        CGFloat v52 = v51;
        CGFloat v54 = v53;
        CGFloat v56 = v55;

        v66.origin.CGFloat x = v40;
        v66.origin.CGFloat y = v42;
        v66.size.CGFloat width = v44;
        v66.size.CGFloat height = v46;
        v68.origin.CGFloat x = v50;
        v68.origin.CGFloat y = v52;
        v68.size.CGFloat width = v54;
        v68.size.CGFloat height = v56;
        CGRect v67 = CGRectUnion(v66, v68);
        CGFloat x = v67.origin.x;
        CGFloat y = v67.origin.y;
        CGFloat v34 = v67.size.width;
        CGFloat v36 = v67.size.height;
        goto LABEL_36;
      }
      if (*(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8)) >= 2uLL)
      {
        id v47 = *(id *)(a1 + 40);
        goto LABEL_35;
      }
LABEL_42:
      __break(1u);
      return;
    }
LABEL_40:
    id v37 = (id)sub_A76A0();
    goto LABEL_31;
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_A7740();
  swift_bridgeObjectRelease();
  if (v26 == 2) {
    goto LABEL_28;
  }
LABEL_22:
  if (v26 == 1)
  {
    if ((a1 & 0xC000000000000001) == 0)
    {
      if (*(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8)))
      {
        id v27 = *(id *)(a1 + 32);
LABEL_26:
        uint64_t v28 = v27;
        [v27 CGRectValue];
        CGFloat x = v29;
        CGFloat y = v31;
        CGFloat v34 = v33;
        CGFloat v36 = v35;

LABEL_36:
        swift_getKeyPath();
        swift_getKeyPath();
        v63.CGFloat x = x;
        v63.CGFloat y = y;
        CGFloat v64 = v34;
        CGFloat v65 = v36;
        id v57 = v62;
        goto LABEL_4;
      }
      __break(1u);
      goto LABEL_40;
    }
LABEL_38:
    id v27 = (id)sub_A76A0();
    goto LABEL_26;
  }
}

id sub_133D4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ForeheadWindow();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_13508()
{
  return type metadata accessor for ForeheadWindow();
}

uint64_t type metadata accessor for ForeheadWindow()
{
  uint64_t result = qword_D8580;
  if (!qword_D8580) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1355C()
{
  sub_1371C(319, (unint64_t *)&qword_D8590, &qword_D8598, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Environment.Content);
  if (v0 <= 0x3F)
  {
    sub_136C4();
    if (v1 <= 0x3F)
    {
      sub_1371C(319, &qword_D85A8, &qword_D85B0, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void sub_136C4()
{
  if (!qword_D85A0)
  {
    type metadata accessor for CGRect(255);
    unint64_t v0 = sub_A60F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_D85A0);
    }
  }
}

void sub_1371C(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = sub_7C5C(a3);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void *sub_1377C()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_13788@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ForeheadWindow();
  uint64_t result = sub_A6070();
  *a1 = result;
  return result;
}

uint64_t sub_137D0@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_13854(uint64_t a1, void **a2)
{
  unint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return sub_A60E0();
}

unint64_t sub_138D0()
{
  unint64_t result = qword_D85C8;
  if (!qword_D85C8)
  {
    sub_A6920();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D85C8);
  }
  return result;
}

unint64_t sub_13928()
{
  unint64_t result = qword_D85D0;
  if (!qword_D85D0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_D85D0);
  }
  return result;
}

uint64_t sub_13978()
{
  uint64_t v0 = sub_A6380();
  sub_1442C(v0, accessibilityLayoutTextSize);
  uint64_t v1 = sub_7B38(v0, (uint64_t)accessibilityLayoutTextSize);
  uint64_t v2 = enum case for DynamicTypeSize.accessibility1(_:);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 104);

  return v3(v1, v2, v0);
}

uint64_t accessibilityLayoutTextSize.unsafeMutableAddressor()
{
  if (qword_D7D60 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_A6380();

  return sub_7B38(v0, (uint64_t)accessibilityLayoutTextSize);
}

uint64_t isAccessibilityLayout(_:)(uint64_t a1)
{
  uint64_t v2 = sub_7AF4(&qword_D85E8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_A6380();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_8860(a1, (uint64_t)v4, &qword_D85E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_A35C((uint64_t)v4, &qword_D85E8);
    char v9 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    if (qword_D7D60 != -1) {
      swift_once();
    }
    sub_7B38(v5, (uint64_t)accessibilityLayoutTextSize);
    sub_13C48();
    char v9 = sub_A7180() ^ 1;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v9 & 1;
}

unint64_t sub_13C48()
{
  unint64_t result = qword_D85F0;
  if (!qword_D85F0)
  {
    sub_A6380();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D85F0);
  }
  return result;
}

Swift::String_optional __swiftcall appIconSystemName(_:_:)(Swift::String a1, Swift::String a2)
{
  object = a2._object;
  uint64_t countAndFlagsBits = a2._countAndFlagsBits;
  uint64_t v4 = a1._object;
  uint64_t v5 = a1._countAndFlagsBits;
  unint64_t v6 = 0x6C6C69662E63696DLL;
  if (sub_A71D0() == a1._countAndFlagsBits && v7 == v4) {
    goto LABEL_8;
  }
  char v9 = sub_A7800();
  swift_bridgeObjectRelease();
  if (v9)
  {
LABEL_9:
    uint64_t v11 = (void *)0xE800000000000000;
    goto LABEL_10;
  }
  if (sub_A5DB0() == countAndFlagsBits && v10 == object)
  {
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  char v13 = sub_A7800();
  swift_bridgeObjectRelease();
  if (v13) {
    goto LABEL_9;
  }
  if (sub_A5D80() == v5 && v14 == v4)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    int IsPad = AXDeviceIsPad();
    if (IsPad) {
      unint64_t v6 = 1684107369;
    }
    else {
      unint64_t v6 = 0x656E6F687069;
    }
    if (IsPad) {
      uint64_t v11 = (void *)0xE400000000000000;
    }
    else {
      uint64_t v11 = (void *)0xE600000000000000;
    }
    goto LABEL_10;
  }
  char v15 = sub_A7800();
  swift_bridgeObjectRelease();
  if (v15) {
    goto LABEL_16;
  }
  unint64_t v6 = 0xD00000000000001ALL;
  if (sub_A71D0() == v5 && v17 == v4)
  {
    swift_bridgeObjectRelease();
LABEL_26:
    uint64_t v11 = (void *)0x80000000000AD7E0;
    goto LABEL_10;
  }
  char v18 = sub_A7800();
  swift_bridgeObjectRelease();
  if (v18) {
    goto LABEL_26;
  }
  if (sub_A71D0() == v5 && v19 == v4)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v20 = sub_A7800();
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {
      unint64_t v6 = 0;
      uint64_t v11 = 0;
      goto LABEL_10;
    }
  }
  uint64_t v11 = (void *)0xEE0072657475706DLL;
  unint64_t v6 = 0x6F63706F7470616CLL;
LABEL_10:
  uint64_t v12 = v6;
  result.value._object = v11;
  result.value._uint64_t countAndFlagsBits = v12;
  return result;
}

uint64_t isCaptionFromApplication(_:)(uint64_t a1)
{
  uint64_t v2 = sub_7AF4(&qword_D85F8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_A5D50();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_8860(a1, (uint64_t)v4, &qword_D85F8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_A35C((uint64_t)v4, &qword_D85F8);
    goto LABEL_27;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  uint64_t v9 = sub_A5D10();
  uint64_t v11 = v10;
  uint64_t v12 = sub_A5D20();
  uint64_t v14 = v13;
  if (v9 == sub_A71D0() && v11 == v15) {
    goto LABEL_24;
  }
  char v17 = sub_A7800();
  swift_bridgeObjectRelease();
  if (v17) {
    goto LABEL_25;
  }
  if (v12 == sub_A5DB0() && v14 == v18)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  char v20 = sub_A7800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v20) {
    goto LABEL_26;
  }
  if (v9 == sub_A5D80() && v11 == v21) {
    goto LABEL_25;
  }
  char v23 = sub_A7800();
  swift_bridgeObjectRelease();
  if (v23)
  {
LABEL_26:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  if (v9 == sub_A71D0() && v11 == v24)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  char v25 = sub_A7800();
  swift_bridgeObjectRelease();
  if (v25) {
    goto LABEL_26;
  }
  if (v9 != sub_A71D0() || v11 != v26)
  {
    char v29 = sub_A7800();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    char v27 = v29 ^ 1;
    return v27 & 1;
  }
  swift_bridgeObjectRelease_n();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_27:
  char v27 = 0;
  return v27 & 1;
}

id iconForBundleId(_:iconSize:)(double a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    id v4 = objc_allocWithZone((Class)ISIcon);
    swift_bridgeObjectRetain();
    NSString v5 = sub_A71A0();
    swift_bridgeObjectRelease();
    id v6 = [v4 initWithBundleIdentifier:v5];

    id v7 = objc_msgSend(objc_allocWithZone((Class)ISImageDescriptor), "initWithSize:scale:", a1 + a1, a1 + a1, 1.0);
    id v8 = [v6 prepareImageForDescriptor:v7];
    if (v8)
    {
      id v9 = v8;
      id result = [v9 CGImage];
      if (result)
      {
        uint64_t v11 = result;
        [v9 scale];
        id v13 = [objc_allocWithZone((Class)UIImage) initWithCGImage:v11 scale:0 orientation:v12];

        return v13;
      }
      else
      {
        __break(1u);
      }
      return result;
    }
  }
  id v14 = objc_allocWithZone((Class)UIImage);

  return [v14 init];
}

uint64_t *sub_1442C(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t *LiveSpeechCaptionsViewsCoordinator.shared.unsafeMutableAddressor()
{
  if (qword_D7D68 != -1) {
    swift_once();
  }
  return &static LiveSpeechCaptionsViewsCoordinator.shared;
}

LiveSpeechUIService::LiveSpeechCaptionsFeatureKey_optional __swiftcall LiveSpeechCaptionsFeatureKey.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    v1.value = LiveSpeechUIService_LiveSpeechCaptionsFeatureKey_liveCaptions;
  }
  else {
    v1.value = LiveSpeechUIService_LiveSpeechCaptionsFeatureKey_unknownDefault;
  }
  if (rawValue) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t LiveSpeechCaptionsFeatureKey.rawValue.getter(char a1)
{
  return a1 & 1;
}

BOOL sub_144FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_14514()
{
  Swift::UInt v1 = *v0;
  sub_A7850();
  sub_A7860(v1);
  return sub_A7890();
}

void sub_1455C()
{
  sub_A7860(*v0);
}

Swift::Int sub_14588()
{
  Swift::UInt v1 = *v0;
  sub_A7850();
  sub_A7860(v1);
  return sub_A7890();
}

void *sub_145CC@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void sub_145EC(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t (*variable initialization expression of LiveSpeechCaptionsViewsCoordinator.liveCaptionsAdjustFrame())()
{
  return LiveSpeechStore.SpeechContext.init(text:highlightRange:);
}

id sub_14614()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for LiveSpeechCaptionsViewsCoordinator()) init];
  static LiveSpeechCaptionsViewsCoordinator.shared = (uint64_t)result;
  return result;
}

id AXLTAudioHistogramViewGenerator.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

id static LiveSpeechCaptionsViewsCoordinator.shared.getter()
{
  if (qword_D7D68 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static LiveSpeechCaptionsViewsCoordinator.shared;

  return v0;
}

id LiveSpeechCaptionsViewsCoordinator.init()()
{
  id v1 = &v0[OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveSpeechFrame];
  _OWORD *v1 = 0u;
  v1[1] = 0u;
  char v2 = &v0[OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveCaptionsFrame];
  _OWORD *v2 = 0u;
  v2[1] = 0u;
  char v3 = &v0[OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveSpeechViewToFront];
  *char v3 = LiveSpeechStore.SpeechContext.init(text:highlightRange:);
  v3[1] = 0;
  id v4 = &v0[OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveCaptionsAdjustFrame];
  *id v4 = LiveSpeechStore.SpeechContext.init(text:highlightRange:);
  v4[1] = 0;
  v0[OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveSpeechWindowState] = 0;
  v0[OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveCaptionsWindowState] = 0;
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for LiveSpeechCaptionsViewsCoordinator();
  return objc_msgSendSuper2(&v6, "init");
}

uint64_t type metadata accessor for LiveSpeechCaptionsViewsCoordinator()
{
  return self;
}

Swift::Void __swiftcall LiveSpeechCaptionsViewsCoordinator.cleanupLiveSpeech()()
{
  LiveSpeechCaptionsViewsCoordinator.updateLiveSpeechWindowState(_:)(LiveSpeechUIService_LiveSpeechCaptionsWindowState_compact);

  LiveSpeechCaptionsViewsCoordinator.updateLiveSpeechFrame(_:)(0.0, 0.0, 0.0, 0.0);
}

uint64_t LiveSpeechCaptionsViewsCoordinator.updateLiveSpeechFrame(_:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v9 = sub_A5FF0();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  double v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = (double *)&v4[OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveSpeechFrame];
  v29.origin.CGFloat x = a1;
  v29.origin.CGFloat y = a2;
  v29.size.CGFloat width = a3;
  v29.size.CGFloat height = a4;
  uint64_t result = CGRectEqualToRect(*(CGRect *)&v4[OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveSpeechFrame], v29);
  if ((result & 1) == 0)
  {
    *id v13 = a1;
    v13[1] = a2;
    v13[2] = a3;
    v13[3] = a4;
    sub_A5FC0();
    uint64_t v15 = v4;
    uint64_t v16 = sub_A5FE0();
    os_log_type_t v17 = sub_A7420();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      uint64_t v28 = v19;
      v25[1] = v18 + 4;
      long long v20 = *((_OWORD *)v13 + 1);
      long long v26 = *(_OWORD *)v13;
      long long v27 = v20;
      type metadata accessor for CGRect(0);
      uint64_t v21 = sub_A71F0();
      *(void *)&long long v26 = sub_15F94(v21, v22, &v28);
      sub_A7600();

      swift_bridgeObjectRelease();
      _os_log_impl(&def_5ED54, v16, v17, "updateLiveSpeechFrame: %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    char v23 = *(void (**)(uint64_t))&v15[OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveCaptionsAdjustFrame];
    uint64_t v24 = swift_retain();
    v23(v24);
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall LiveSpeechCaptionsViewsCoordinator.updateLiveSpeechWindowState(_:)(LiveSpeechUIService::LiveSpeechCaptionsWindowState a1)
{
  char v2 = v1;
  uint64_t v4 = sub_A5FF0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveSpeechWindowState;
  if (v2[OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveSpeechWindowState] != a1)
  {
    v2[OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveSpeechWindowState] = a1;
    sub_A5FC0();
    uint64_t v9 = v2;
    uint64_t v10 = sub_A5FE0();
    os_log_type_t v11 = sub_A7420();
    if (os_log_type_enabled(v10, v11))
    {
      double v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      v16[1] = v13;
      *(_DWORD *)double v12 = 136315138;
      uint64_t v18 = v13;
      v16[0] = v12 + 4;
      LOBYTE(v17) = v2[v8];
      uint64_t v14 = sub_A71F0();
      uint64_t v17 = sub_15F94(v14, v15, &v18);
      sub_A7600();

      swift_bridgeObjectRelease();
      _os_log_impl(&def_5ED54, v10, v11, "updateLiveSpeechWindowState: %s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t LiveSpeechCaptionsViewsCoordinator.liveSpeechViewToFront(_:)(uint64_t a1, uint64_t a2)
{
  return sub_152BC(a1, a2, &OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveSpeechViewToFront);
}

Swift::Void __swiftcall LiveSpeechCaptionsViewsCoordinator.cleanupLiveCaptions()()
{
  id v1 = (_OWORD *)(v0 + OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveCaptionsFrame);
  _OWORD *v1 = 0u;
  v1[1] = 0u;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveCaptionsWindowState) = 0;
}

uint64_t LiveSpeechCaptionsViewsCoordinator.updateLiveCaptionsFrame(_:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v9 = sub_A5FF0();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  double v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (CGRect *)&v4[OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveCaptionsFrame];
  v30.origin.CGFloat x = a1;
  v30.origin.CGFloat y = a2;
  v30.size.CGFloat width = a3;
  v30.size.CGFloat height = a4;
  uint64_t result = CGRectEqualToRect(*(CGRect *)&v4[OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveCaptionsFrame], v30);
  if ((result & 1) == 0)
  {
    if (CGRectIsEmpty(*v13))
    {
      v29.origin.CGFloat x = a1;
      v29.origin.CGFloat y = a2;
      v29.size.CGFloat width = a3;
      v29.size.CGFloat height = a4;
      if (!CGRectIsEmpty(v29))
      {
        unint64_t v15 = *(void (**)(uint64_t))&v4[OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveSpeechViewToFront];
        uint64_t v16 = swift_retain();
        v15(v16);
        swift_release();
      }
    }
    v13->origin.CGFloat x = a1;
    v13->origin.CGFloat y = a2;
    v13->size.CGFloat width = a3;
    v13->size.CGFloat height = a4;
    sub_A5FC0();
    uint64_t v17 = v4;
    uint64_t v18 = sub_A5FE0();
    os_log_type_t v19 = sub_A7420();
    if (os_log_type_enabled(v18, v19))
    {
      long long v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)long long v20 = 136315138;
      uint64_t v28 = v21;
      v25[1] = v20 + 4;
      CGSize size = v13->size;
      CGPoint origin = v13->origin;
      CGSize v27 = size;
      type metadata accessor for CGRect(0);
      uint64_t v23 = sub_A71F0();
      *(void *)&origin.CGFloat x = sub_15F94(v23, v24, &v28);
      sub_A7600();

      swift_bridgeObjectRelease();
      _os_log_impl(&def_5ED54, v18, v19, "updateLiveCaptionsFrame: %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return result;
}

Swift::Void __swiftcall LiveSpeechCaptionsViewsCoordinator.updateLiveCaptionsWindowState(_:)(LiveSpeechUIService::LiveSpeechCaptionsWindowState a1)
{
  char v2 = v1;
  uint64_t v4 = sub_A5FF0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveCaptionsWindowState;
  if (v2[OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveCaptionsWindowState] != a1)
  {
    v2[OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveCaptionsWindowState] = a1;
    sub_A5FC0();
    uint64_t v9 = v2;
    uint64_t v10 = sub_A5FE0();
    os_log_type_t v11 = sub_A7420();
    if (os_log_type_enabled(v10, v11))
    {
      double v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      v18[1] = v13;
      *(_DWORD *)double v12 = 136315138;
      uint64_t v20 = v13;
      v18[0] = v12 + 4;
      LOBYTE(v19) = v2[v8];
      uint64_t v14 = sub_A71F0();
      uint64_t v19 = sub_15F94(v14, v15, &v20);
      sub_A7600();

      swift_bridgeObjectRelease();
      _os_log_impl(&def_5ED54, v10, v11, "updateLiveCaptionsWindowState: %s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if (!CGRectIsEmpty(*(CGRect *)&v9[OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveSpeechFrame]))
    {
      uint64_t v16 = *(void (**)(uint64_t))&v9[OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveCaptionsAdjustFrame];
      uint64_t v17 = swift_retain();
      v16(v17);
      swift_release();
    }
  }
}

uint64_t LiveSpeechCaptionsViewsCoordinator.liveCaptionsAdjustFrame(_:)(uint64_t a1, uint64_t a2)
{
  return sub_152BC(a1, a2, &OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveCaptionsAdjustFrame);
}

uint64_t sub_152BC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)(v3 + *a3);
  *uint64_t v4 = a1;
  v4[1] = a2;
  swift_retain();

  return swift_release();
}

CGFloat LiveSpeechCaptionsViewsCoordinator.safeHeightInset()()
{
  uint64_t v1 = sub_A5FF0();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A5FC0();
  uint64_t v5 = v0;
  uint64_t v6 = sub_A5FE0();
  os_log_type_t v7 = sub_A7420();
  uint64_t v8 = &qword_D8000;
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    long long v19 = *(_OWORD *)&v5[OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveSpeechFrame];
    long long v20 = *(_OWORD *)&v5[OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveSpeechFrame + 16];
    type metadata accessor for CGRect(0);
    uint64_t v18 = v1;
    uint64_t v10 = sub_A71F0();
    *(void *)&long long v19 = sub_15F94(v10, v11, &v21);
    sub_A7600();

    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    LOBYTE(v19) = v5[OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveSpeechWindowState];
    uint64_t v12 = sub_A71F0();
    *(void *)&long long v19 = sub_15F94(v12, v13, &v21);
    sub_A7600();

    uint64_t v8 = &qword_D8000;
    swift_bridgeObjectRelease();
    _os_log_impl(&def_5ED54, v6, v7, "safeHeightInset %s %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v18);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  uint64_t v14 = (CGRect *)&v5[v8[192]];
  IsEmptCGFloat y = CGRectIsEmpty(*v14);
  CGFloat result = 0.0;
  if (!IsEmpty
    && v5[OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveSpeechWindowState] != 1)
  {
    return CGRectGetMinY(*v14) + -10.0;
  }
  return result;
}

void LiveSpeechCaptionsViewsCoordinator.safeOffset(feature:offset:size:containerRect:foreheadWindowRect:)(char a1, double a2, CGFloat a3, double a4, double a5, double a6, double a7, double a8, double a9, CGFloat a10, double a11, CGFloat a12, CGFloat a13)
{
  double v20 = a5;
  double v21 = a4;
  double v45 = a4;
  double v46 = a5;
  if (a4 == 0.0 && a5 == 0.0)
  {
    char v25 = &OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveSpeechFrame;
    if (a1) {
      char v25 = &OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveCaptionsFrame;
    }
    uint64_t v26 = v19 + *v25;
    double v21 = *(double *)(v26 + 16);
    double v20 = *(double *)(v26 + 24);
    double v45 = v21;
    double v46 = v20;
  }
  os_log_type_t v27 = sub_A7420();
  if (qword_D7D90 != -1) {
    swift_once();
  }
  uint64_t v28 = qword_DF5C8;
  os_log_type_t v29 = v27;
  if (os_log_type_enabled((os_log_t)qword_DF5C8, v27))
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136315394;
    uint64_t v43 = *(void *)&a2;
    CGFloat v44 = a3;
    type metadata accessor for CGSize(0);
    uint64_t v31 = sub_A71F0();
    uint64_t v43 = sub_15F94(v31, v32, &v42);
    sub_A7600();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2080;
    uint64_t v43 = *(void *)&v21;
    CGFloat v44 = v20;
    uint64_t v33 = sub_A71F0();
    uint64_t v43 = sub_15F94(v33, v34, &v42);
    sub_A7600();
    swift_bridgeObjectRelease();
    _os_log_impl(&def_5ED54, v28, v29, "Calculate safeOffset offset: %s size: %s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  int HasJindo = AXDeviceHasJindo();
  v47.origin.CGFloat x = a10;
  v47.origin.CGFloat y = a11;
  v47.size.CGFloat width = a12;
  v47.size.CGFloat height = a13;
  if (CGRectGetHeight(v47) + a11 + -37.3333333 > a3 && HasJindo != 0)
  {
    v48.origin.CGFloat x = a10;
    v48.origin.CGFloat y = a11;
    v48.size.CGFloat width = a12;
    v48.size.CGFloat height = a13;
    a3 = CGRectGetHeight(v48) + a11 + -37.3333333;
  }
  swift_beginAccess();
  double v39 = a8 - v45;
  if (a8 - v45 >= a2) {
    double v39 = a2;
  }
  if (a1) {
    sub_15BD8(v39, a3, v45, v46, v38, a7, a8);
  }
  else {
    sub_158EC(v39, a3, v45, v37, v38, a7, a8);
  }
}

double sub_158EC(double a1, CGFloat a2, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t v13 = sub_A5FF0();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v33 = a1;
  CGFloat v34 = a2;
  uint64_t v17 = v7 + OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveCaptionsFrame;
  double v18 = *(double *)(v7 + OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveCaptionsFrame + 16);
  if (v18 <= 0.0 || (double v19 = *(double *)(v17 + 24), v19 <= 0.0))
  {
LABEL_13:
    swift_beginAccess();
    return a1;
  }
  if (*(unsigned char *)(v7 + OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveSpeechWindowState) != 1)
  {
    double v20 = *(double *)v17;
    goto LABEL_9;
  }
  double v20 = *(double *)v17;
  if (*(unsigned char *)(v7 + OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveCaptionsWindowState) != 1) {
    goto LABEL_9;
  }
  double v21 = *(double *)(v7 + OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveSpeechFrame);
  if (v20 != 0.0)
  {
    if (v21 != a7 - a3) {
      return a1;
    }
    goto LABEL_9;
  }
  if (v21 == 0.0)
  {
LABEL_9:
    uint64_t v22 = *(void *)(v17 + 8);
    if (CGRectGetMaxY(*(CGRect *)(&v18 - 2)) + 10.0 - a6 > a2)
    {
      double v23 = CGRectGetMaxY(*(CGRect *)v17) + 10.0 - a6;
      CGFloat v34 = v23;
      sub_A5FC0();
      unint64_t v24 = sub_A5FE0();
      os_log_type_t v25 = sub_A7420();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        uint64_t v30 = swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 136315138;
        uint64_t v31 = *(void *)&a1;
        double v32 = v23;
        type metadata accessor for CGSize(0);
        uint64_t v27 = sub_A71F0();
        uint64_t v31 = sub_15F94(v27, v28, &v30);
        sub_A7600();
        swift_bridgeObjectRelease();
        _os_log_impl(&def_5ED54, v24, v25, "LiveSpeech adjusted offset: %s", v26, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    }
    goto LABEL_13;
  }
  return a1;
}

double sub_15BD8(double a1, CGFloat a2, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t v14 = sub_A5FF0();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v34 = a1;
  CGFloat v35 = a2;
  uint64_t v18 = v7 + OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveSpeechFrame;
  double v19 = *(double *)(v7 + OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveSpeechFrame + 16);
  if (v19 <= 0.0 || (double v20 = *(double *)(v18 + 24), v20 <= 0.0))
  {
LABEL_13:
    swift_beginAccess();
    return a1;
  }
  if (*(unsigned char *)(v7 + OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveSpeechWindowState) != 1)
  {
    double v21 = *(double *)v18;
    goto LABEL_9;
  }
  double v21 = *(double *)v18;
  if (*(unsigned char *)(v7 + OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveCaptionsWindowState) != 1) {
    goto LABEL_9;
  }
  double v22 = *(double *)(v7 + OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveCaptionsFrame);
  if (v21 != 0.0)
  {
    if (v22 != a7 - a3) {
      return a1;
    }
    goto LABEL_9;
  }
  if (v22 == 0.0)
  {
LABEL_9:
    uint64_t v23 = *(void *)(v18 + 8);
    if (CGRectGetMinY(*(CGRect *)(&v19 - 2)) - a4 + -10.0 - a6 < a2)
    {
      double v24 = CGRectGetMinY(*(CGRect *)v18) - a4 + -10.0 - a6;
      CGFloat v35 = v24;
      sub_A5FC0();
      os_log_type_t v25 = sub_A5FE0();
      os_log_type_t v26 = sub_A7420();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 136315138;
        uint64_t v32 = *(void *)&a1;
        double v33 = v24;
        type metadata accessor for CGSize(0);
        uint64_t v28 = sub_A71F0();
        uint64_t v32 = sub_15F94(v28, v29, &v31);
        sub_A7600();
        swift_bridgeObjectRelease();
        _os_log_impl(&def_5ED54, v25, v26, "LiveCaptions adjusted offset: %s", v27, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    }
    goto LABEL_13;
  }
  return a1;
}

id LiveSpeechCaptionsViewsCoordinator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LiveSpeechCaptionsViewsCoordinator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_15F58@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for LiveSpeechCaptionsViewsCoordinator();
  uint64_t result = sub_A6070();
  *a1 = result;
  return result;
}

uint64_t sub_15F94(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_16274(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10330((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10330((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_16430((uint64_t)v12);
  return v7;
}

unint64_t sub_1606C()
{
  unint64_t result = qword_D8630;
  if (!qword_D8630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8630);
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for LiveSpeechCaptionsFeatureKey(unsigned char *result, unsigned char *a2)
{
  void *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for LiveSpeechCaptionsFeatureKey(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for LiveSpeechCaptionsFeatureKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x16228);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_16250(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_16258(unsigned char *result, char a2)
{
  void *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for LiveSpeechCaptionsFeatureKey()
{
  return &type metadata for LiveSpeechCaptionsFeatureKey;
}

uint64_t sub_16274(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_A7610();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_16480(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_A76C0();
  if (!v8)
  {
    sub_A7720();
    __break(1u);
LABEL_17:
    uint64_t result = sub_A7790();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_16430(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_16480(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_16518(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_166F8(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_166F8(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_16518(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_16690(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_A7680();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      sub_A7720();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_A7250();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    sub_A7790();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)sub_A7720();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_16690(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_7AF4(&qword_D8660);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_166F8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_7AF4(&qword_D8660);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_A7790();
  __break(1u);
  return result;
}

void sub_1684C(uint64_t a1, void *a2)
{
  unint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t WindowState.rawValue.getter(uint64_t result)
{
  return result;
}

BOOL sub_168C0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

unint64_t sub_168DC@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s19LiveSpeechUIService11WindowStateO8rawValueACSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

NSString sub_16908()
{
  NSString result = sub_A71A0();
  qword_DF5A0 = (uint64_t)result;
  return result;
}

uint64_t sub_16940()
{
  uint64_t result = AXDeviceIsPad();
  double v1 = 500.0;
  if (result) {
    double v1 = 1000.0;
  }
  qword_DF5A8 = *(void *)&v1;
  return result;
}

uint64_t sub_16980()
{
  uint64_t result = AXDeviceHasJindo();
  double v1 = 0.0;
  if (result) {
    double v1 = 10.0;
  }
  qword_DF5B0 = *(void *)&v1;
  return result;
}

BOOL static IconDirection.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void IconDirection.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int IconDirection.hashValue.getter(unsigned __int8 a1)
{
  return sub_A7890();
}

uint64_t sub_16A30()
{
  uint64_t v1 = type metadata accessor for LiveCaptionsRootView();
  __chkstk_darwin(v1);
  uint64_t v109 = &v83[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  uint64_t v110 = &v83[-v4];
  __chkstk_darwin(v5);
  uint64_t v98 = &v83[-v6];
  uint64_t v7 = sub_A6920();
  int64_t v8 = *(void **)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v94 = &v83[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = sub_7AF4(&qword_D85B8);
  __chkstk_darwin(v10);
  v88 = &v83[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  uint64_t v100 = &v83[-v13];
  __chkstk_darwin(v14);
  uint64_t v93 = &v83[-v15];
  __chkstk_darwin(v16);
  uint64_t v18 = &v83[-v17];
  uint64_t v19 = sub_7AF4(&qword_D8598);
  __chkstk_darwin(v19 - 8);
  uint64_t v87 = &v83[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v21);
  uint64_t v89 = &v83[-v22];
  __chkstk_darwin(v23);
  uint64_t v90 = &v83[-v24];
  __chkstk_darwin(v25);
  uint64_t v95 = &v83[-v26];
  __chkstk_darwin(v27);
  uint64_t v102 = &v83[-v28];
  __chkstk_darwin(v29);
  uint64_t v96 = &v83[-v30];
  __chkstk_darwin(v31);
  int v86 = &v83[-v32];
  __chkstk_darwin(v33);
  uint64_t v91 = &v83[-v34];
  __chkstk_darwin(v35);
  uint64_t v92 = &v83[-v36];
  __chkstk_darwin(v37);
  double v39 = &v83[-v38];
  __chkstk_darwin(v40);
  uint64_t v42 = &v83[-v41];
  __chkstk_darwin(v43);
  double v45 = &v83[-v44];
  uint64_t v97 = v1;
  uint64_t v108 = v0;
  sub_537C8((uint64_t)&v83[-v44]);
  double v46 = (void (*)(void))v8[13];
  unsigned int v99 = enum case for UserInterfaceSizeClass.regular(_:);
  unsigned int v103 = v8 + 13;
  double v106 = (void (*)(unsigned char *, void, uint64_t))v46;
  v46(v42);
  uint64_t v104 = (void (*)(unsigned char *, void, uint64_t, uint64_t))v8[7];
  uint64_t v105 = v8 + 7;
  v104(v42, 0, 1, v7);
  uint64_t v107 = v10;
  uint64_t v47 = (uint64_t)&v18[*(int *)(v10 + 48)];
  sub_8860((uint64_t)v45, (uint64_t)v18, &qword_D8598);
  sub_8860((uint64_t)v42, v47, &qword_D8598);
  uint64_t v101 = v8;
  CGRect v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v8[6];
  if (v48((uint64_t)v18, 1, v7) == 1)
  {
    sub_A35C((uint64_t)v42, &qword_D8598);
    sub_A35C((uint64_t)v45, &qword_D8598);
    int v49 = v48(v47, 1, v7);
    uint64_t v50 = (uint64_t)v100;
    if (v49 == 1)
    {
      sub_A35C((uint64_t)v18, &qword_D8598);
      double v51 = v98;
      sub_28F28(v108, (uint64_t)v98, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  sub_8860((uint64_t)v18, (uint64_t)v39, &qword_D8598);
  uint64_t v85 = v48;
  if (v48(v47, 1, v7) == 1)
  {
    sub_A35C((uint64_t)v42, &qword_D8598);
    sub_A35C((uint64_t)v45, &qword_D8598);
    ((void (*)(unsigned char *, uint64_t))v101[1])(v39, v7);
    uint64_t v50 = (uint64_t)v100;
    CGRect v48 = v85;
LABEL_6:
    sub_A35C((uint64_t)v18, &qword_D85B8);
    double v51 = v98;
    sub_28F28(v108, (uint64_t)v98, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
LABEL_11:
    sub_28F90((uint64_t)v51, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
LABEL_15:
    sub_28F28(v108, (uint64_t)v110, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    goto LABEL_16;
  }
  CGFloat v52 = v101;
  double v53 = v94;
  ((void (*)(unsigned char *, uint64_t, uint64_t))v101[4])(v94, v47, v7);
  sub_2A2BC((unint64_t *)&qword_D85C8, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
  int v84 = sub_A7190();
  CGFloat v54 = (void (*)(unsigned char *, uint64_t))v52[1];
  v54(v53, v7);
  sub_A35C((uint64_t)v42, &qword_D8598);
  sub_A35C((uint64_t)v45, &qword_D8598);
  v54(v39, v7);
  sub_A35C((uint64_t)v18, &qword_D8598);
  double v51 = v98;
  sub_28F28(v108, (uint64_t)v98, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  uint64_t v50 = (uint64_t)v100;
  CGRect v48 = v85;
  if ((v84 & 1) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  double v55 = v92;
  sub_537C8((uint64_t)v92);
  CGFloat v56 = v91;
  v106(v91, enum case for UserInterfaceSizeClass.compact(_:), v7);
  v104(v56, 0, 1, v7);
  id v57 = v93;
  uint64_t v58 = (uint64_t)&v93[*(int *)(v107 + 48)];
  sub_8860((uint64_t)v55, (uint64_t)v93, &qword_D8598);
  sub_8860((uint64_t)v56, v58, &qword_D8598);
  if (v48((uint64_t)v57, 1, v7) == 1)
  {
    sub_A35C((uint64_t)v56, &qword_D8598);
    id v57 = v93;
    sub_A35C((uint64_t)v55, &qword_D8598);
    sub_28F90((uint64_t)v51, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    if (v48(v58, 1, v7) == 1)
    {
      sub_A35C((uint64_t)v57, &qword_D8598);
      sub_28F28(v108, (uint64_t)v110, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
LABEL_33:
      sub_28F90((uint64_t)v110, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
      char v73 = 1;
      return v73 & 1;
    }
    goto LABEL_14;
  }
  unint64_t v59 = v86;
  sub_8860((uint64_t)v57, (uint64_t)v86, &qword_D8598);
  if (v48(v58, 1, v7) == 1)
  {
    sub_A35C((uint64_t)v91, &qword_D8598);
    sub_A35C((uint64_t)v92, &qword_D8598);
    sub_28F90((uint64_t)v98, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    ((void (*)(unsigned char *, uint64_t))v101[1])(v59, v7);
LABEL_14:
    sub_A35C((uint64_t)v57, &qword_D85B8);
    uint64_t v50 = (uint64_t)v100;
    goto LABEL_15;
  }
  uint64_t v85 = v48;
  uint64_t v75 = v101;
  char v76 = v94;
  ((void (*)(unsigned char *, uint64_t, uint64_t))v101[4])(v94, v58, v7);
  sub_2A2BC((unint64_t *)&qword_D85C8, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
  int v84 = sub_A7190();
  unint64_t v77 = (void (*)(unsigned char *, uint64_t))v75[1];
  v77(v76, v7);
  sub_A35C((uint64_t)v91, &qword_D8598);
  sub_A35C((uint64_t)v92, &qword_D8598);
  sub_28F90((uint64_t)v98, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  v77(v59, v7);
  CGRect v48 = v85;
  sub_A35C((uint64_t)v57, &qword_D8598);
  sub_28F28(v108, (uint64_t)v110, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  uint64_t v50 = (uint64_t)v100;
  if (v84) {
    goto LABEL_33;
  }
LABEL_16:
  unint64_t v60 = v96;
  sub_537C8((uint64_t)v96);
  uint64_t v61 = v102;
  v106(v102, v99, v7);
  v104(v61, 0, 1, v7);
  uint64_t v62 = v50 + *(int *)(v107 + 48);
  sub_8860((uint64_t)v60, v50, &qword_D8598);
  sub_8860((uint64_t)v61, v62, &qword_D8598);
  if (v48(v50, 1, v7) == 1)
  {
    sub_A35C((uint64_t)v61, &qword_D8598);
    sub_A35C((uint64_t)v60, &qword_D8598);
    if (v48(v62, 1, v7) == 1)
    {
      sub_A35C(v50, &qword_D8598);
      sub_28F28((uint64_t)v110, (uint64_t)v109, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
      uint64_t v63 = (uint64_t)v90;
      uint64_t v64 = (uint64_t)v89;
      goto LABEL_24;
    }
    goto LABEL_21;
  }
  CGFloat v65 = v95;
  sub_8860(v50, (uint64_t)v95, &qword_D8598);
  if (v48(v62, 1, v7) == 1)
  {
    sub_A35C((uint64_t)v102, &qword_D8598);
    sub_A35C((uint64_t)v60, &qword_D8598);
    ((void (*)(unsigned char *, uint64_t))v101[1])(v65, v7);
LABEL_21:
    sub_A35C(v50, &qword_D85B8);
    sub_28F28((uint64_t)v110, (uint64_t)v109, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
LABEL_22:
    sub_28F90((uint64_t)v109, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    sub_28F90((uint64_t)v110, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
LABEL_30:
    char v73 = 0;
    return v73 & 1;
  }
  CGRect v66 = v101;
  CGRect v67 = v94;
  ((void (*)(unsigned char *, uint64_t, uint64_t))v101[4])(v94, v62, v7);
  sub_2A2BC((unint64_t *)&qword_D85C8, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
  uint64_t v68 = (uint64_t)v60;
  LODWORD(v108) = sub_A7190();
  char v69 = v48;
  id v70 = (void (*)(unsigned char *, uint64_t))v66[1];
  uint64_t v63 = (uint64_t)v90;
  v70(v67, v7);
  sub_A35C((uint64_t)v102, &qword_D8598);
  sub_A35C(v68, &qword_D8598);
  v70(v95, v7);
  CGRect v48 = v69;
  uint64_t v64 = (uint64_t)v89;
  sub_A35C(v50, &qword_D8598);
  sub_28F28((uint64_t)v110, (uint64_t)v109, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  if ((v108 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_24:
  sub_537C8(v63);
  v106((unsigned char *)v64, v99, v7);
  v104((unsigned char *)v64, 0, 1, v7);
  uint64_t v71 = v88;
  uint64_t v72 = (uint64_t)&v88[*(int *)(v107 + 48)];
  sub_8860(v63, (uint64_t)v88, &qword_D8598);
  sub_8860(v64, v72, &qword_D8598);
  if (v48((uint64_t)v71, 1, v7) != 1)
  {
    sub_8860((uint64_t)v71, (uint64_t)v87, &qword_D8598);
    if (v48(v72, 1, v7) != 1)
    {
      uint64_t v78 = v101;
      uint64_t v79 = v64;
      uint64_t v80 = v94;
      ((void (*)(unsigned char *, uint64_t, uint64_t))v101[4])(v94, v72, v7);
      sub_2A2BC((unint64_t *)&qword_D85C8, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
      uint64_t v81 = v87;
      char v73 = sub_A7190();
      id v82 = (void (*)(unsigned char *, uint64_t))v78[1];
      v82(v80, v7);
      sub_A35C(v79, &qword_D8598);
      sub_A35C(v63, &qword_D8598);
      sub_28F90((uint64_t)v109, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
      sub_28F90((uint64_t)v110, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
      v82(v81, v7);
      sub_A35C((uint64_t)v71, &qword_D8598);
      return v73 & 1;
    }
    sub_A35C(v64, &qword_D8598);
    sub_A35C(v63, &qword_D8598);
    sub_28F90((uint64_t)v109, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    sub_28F90((uint64_t)v110, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    ((void (*)(unsigned char *, uint64_t))v101[1])(v87, v7);
    goto LABEL_29;
  }
  sub_A35C(v64, &qword_D8598);
  sub_A35C(v63, &qword_D8598);
  sub_28F90((uint64_t)v109, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  sub_28F90((uint64_t)v110, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  if (v48(v72, 1, v7) != 1)
  {
LABEL_29:
    sub_A35C((uint64_t)v71, &qword_D85B8);
    goto LABEL_30;
  }
  sub_A35C((uint64_t)v71, &qword_D8598);
  char v73 = 1;
  return v73 & 1;
}

uint64_t sub_17AB0()
{
  uint64_t v1 = sub_A6920();
  uint64_t v30 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_7AF4(&qword_D85B8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_7AF4(&qword_D8598);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v29 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v16 = type metadata accessor for LiveCaptionsRootView();
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  int IsPhone = AXDeviceIsPhone();
  sub_28F28(v0, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  if (!IsPhone)
  {
    sub_28F90((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
LABEL_9:
    char v24 = 0;
    return v24 & 1;
  }
  uint64_t v20 = (uint64_t)v9;
  sub_537C8((uint64_t)v15);
  uint64_t v21 = v30;
  (*(void (**)(char *, void, uint64_t))(v30 + 104))(v12, enum case for UserInterfaceSizeClass.compact(_:), v1);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v12, 0, 1, v1);
  uint64_t v22 = (uint64_t)&v6[*(int *)(v4 + 48)];
  sub_8860((uint64_t)v15, (uint64_t)v6, &qword_D8598);
  sub_8860((uint64_t)v12, v22, &qword_D8598);
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  if (v23((uint64_t)v6, 1, v1) != 1)
  {
    sub_8860((uint64_t)v6, v20, &qword_D8598);
    int v25 = v23(v22, 1, v1);
    uint64_t v26 = v30;
    if (v25 != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v3, v22, v1);
      sub_2A2BC((unint64_t *)&qword_D85C8, (void (*)(uint64_t))&type metadata accessor for UserInterfaceSizeClass);
      char v24 = sub_A7190();
      uint64_t v28 = *(void (**)(char *, uint64_t))(v26 + 8);
      v28(v3, v1);
      sub_A35C((uint64_t)v12, &qword_D8598);
      sub_A35C((uint64_t)v15, &qword_D8598);
      sub_28F90((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
      v28((char *)v20, v1);
      sub_A35C((uint64_t)v6, &qword_D8598);
      return v24 & 1;
    }
    sub_A35C((uint64_t)v12, &qword_D8598);
    sub_A35C((uint64_t)v15, &qword_D8598);
    sub_28F90((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v20, v1);
    goto LABEL_8;
  }
  sub_A35C((uint64_t)v12, &qword_D8598);
  sub_A35C((uint64_t)v15, &qword_D8598);
  sub_28F90((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  if (v23(v22, 1, v1) != 1)
  {
LABEL_8:
    sub_A35C((uint64_t)v6, &qword_D85B8);
    goto LABEL_9;
  }
  sub_A35C((uint64_t)v6, &qword_D8598);
  char v24 = 1;
  return v24 & 1;
}

uint64_t sub_17F94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v62 = sub_7AF4(&qword_D8768);
  __chkstk_darwin(v62);
  uint64_t v63 = (uint64_t)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_A6870();
  __chkstk_darwin(v50);
  int v49 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_A61F0();
  uint64_t v52 = *(void *)(v6 - 8);
  uint64_t v53 = v6;
  __chkstk_darwin(v6);
  double v51 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_7AF4(&qword_D8100);
  uint64_t v57 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  CGFloat v56 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_7AF4(&qword_D8770);
  uint64_t v54 = *(void *)(v10 - 8);
  uint64_t v55 = v10;
  __chkstk_darwin(v10);
  unint64_t v60 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_7AF4(&qword_D8778);
  __chkstk_darwin(v12 - 8);
  unint64_t v59 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for LiveCaptionsRootView();
  uint64_t v15 = v14 - 8;
  uint64_t v16 = *(void *)(v14 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_7AF4(&qword_D8780);
  __chkstk_darwin(v61);
  uint64_t v20 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_28F28(v2, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  unint64_t v21 = (*(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v58 = swift_allocObject();
  sub_276B4((uint64_t)v18, v58 + v21);
  uint64_t v22 = v2;
  uint64_t v23 = v2 + *(int *)(v15 + 108);
  char v24 = *(unsigned char *)v23;
  int v25 = *(void **)(v23 + 8);
  LOBYTE(v64) = v24;
  CGFloat v65 = v25;
  sub_7AF4(&qword_D8380);
  sub_A6E80();
  if (v66 == 1)
  {
    sub_A6D70();
    uint64_t v26 = sub_A6DC0();
    uint64_t v48 = a1;
    uint64_t v27 = (void *)v26;
    swift_release();
    uint64_t v64 = v27;
    sub_28F28(v2, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    uint64_t v28 = swift_allocObject();
    uint64_t v47 = v8;
    sub_276B4((uint64_t)v18, v28 + v21);
    sub_A6BA0();
    swift_release();
    swift_release();
    sub_A6930();
    uint64_t v29 = v51;
    sub_A61B0();
    a1 = v48;
    sub_28F28(v22, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    uint64_t v30 = swift_allocObject();
    sub_276B4((uint64_t)v18, v30 + v21);
    sub_2A2BC(&qword_D8130, (void (*)(uint64_t))&type metadata accessor for DragGesture);
    sub_2A2BC(&qword_D8138, (void (*)(uint64_t))&type metadata accessor for DragGesture.Value);
    uint64_t v31 = v56;
    uint64_t v32 = v53;
    sub_A6F70();
    swift_release();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v29, v32);
    sub_A6210();
    uint64_t v64 = &type metadata for Color;
    CGFloat v65 = &protocol witness table for Color;
    swift_getOpaqueTypeConformance2();
    sub_A45C(&qword_D8140, &qword_D8100);
    uint64_t v33 = (uint64_t)v59;
    uint64_t v34 = v55;
    uint64_t v35 = v47;
    uint64_t v36 = v60;
    sub_A6CD0();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v31, v35);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v34);
    uint64_t v37 = sub_7AF4(&qword_D8788);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v33, 0, 1, v37);
  }
  else
  {
    uint64_t v38 = sub_7AF4(&qword_D8788);
    uint64_t v33 = (uint64_t)v59;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v59, 1, 1, v38);
  }
  uint64_t v39 = sub_A7030();
  uint64_t v41 = v40;
  uint64_t v42 = v63;
  sub_8860(v33, v63, &qword_D8778);
  uint64_t v43 = (uint64_t *)(v42 + *(int *)(v62 + 36));
  *uint64_t v43 = v39;
  v43[1] = v41;
  sub_8860(v42, (uint64_t)v20 + *(int *)(v61 + 36), &qword_D8768);
  uint64_t v44 = v58;
  uint8_t *v20 = sub_27718;
  v20[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v44;
  swift_retain();
  sub_A35C(v42, &qword_D8768);
  sub_A35C(v33, &qword_D8778);
  swift_release();
  return sub_29C10((uint64_t)v20, a1, &qword_D8780);
}

uint64_t sub_18784@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v120 = a2;
  uint64_t v124 = a1;
  uint64_t v118 = a3;
  uint64_t v4 = sub_A62C0();
  uint64_t v116 = *(void *)(v4 - 8);
  uint64_t v117 = v4;
  __chkstk_darwin(v4);
  uint64_t v114 = v5;
  uint64_t v115 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = (void *)sub_A7520();
  uint64_t v108 = *(v109 - 1);
  __chkstk_darwin(v109);
  uint64_t v107 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_7AF4(&qword_D8790) - 8;
  __chkstk_darwin(v98);
  uint64_t v96 = (uint64_t)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_7AF4(&qword_D8798);
  __chkstk_darwin(v8 - 8);
  uint64_t v94 = (uint64_t *)((char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v97 = sub_7AF4(&qword_D87A0) - 8;
  __chkstk_darwin(v97);
  uint64_t v95 = (uint64_t)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v99 = (uint64_t (*)())(sub_7AF4(&qword_D87A8) - 8);
  __chkstk_darwin(v99);
  uint64_t v92 = (uint64_t)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = sub_7AF4(&qword_D87B0);
  __chkstk_darwin(v100);
  uint64_t v106 = (uint64_t)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = sub_7AF4(&qword_D87B8);
  __chkstk_darwin(v104);
  uint64_t v105 = (uint64_t)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = sub_7AF4(&qword_D87C0);
  __chkstk_darwin(v125);
  uint64_t v113 = (uint64_t)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = sub_7AF4(&qword_D87C8);
  uint64_t v111 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v110 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for LiveCaptionsRootView();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v93 = v16 - 8;
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16 - 8);
  uint64_t v19 = sub_A68C0();
  __chkstk_darwin(v19);
  uint64_t v91 = sub_A61F0();
  uint64_t v101 = *(uint64_t (**)())(v91 - 8);
  __chkstk_darwin(v91);
  unint64_t v21 = (char *)&v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_7AF4(&qword_D8100);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v122 = v22;
  uint64_t v123 = v23;
  __chkstk_darwin(v22);
  uint64_t v89 = (char *)&v88 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = sub_7AF4(&qword_D8108);
  uint64_t v102 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v26 = (uint64_t (*)())((char *)&v88 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_A6950();
  sub_A61B0();
  uint64_t v90 = type metadata accessor for LiveCaptionsRootView;
  sub_28F28(a2, (uint64_t)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  uint64_t v27 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v28 = (v27 + 16) & ~v27;
  uint64_t v29 = v28 + v18;
  uint64_t v30 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = v27 | 7;
  uint64_t v32 = swift_allocObject();
  sub_276B4((uint64_t)v30, v32 + v28);
  sub_2A2BC(&qword_D8130, (void (*)(uint64_t))&type metadata accessor for DragGesture);
  sub_2A2BC(&qword_D8138, (void (*)(uint64_t))&type metadata accessor for DragGesture.Value);
  uint64_t v33 = v91;
  sub_A6F70();
  swift_release();
  (*((void (**)(char *, uint64_t))v101 + 1))(v21, v33);
  uint64_t v34 = v120;
  sub_28F28(v120, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  uint64_t v35 = swift_allocObject();
  sub_276B4((uint64_t)v30, v35 + v28);
  sub_A45C(&qword_D8140, &qword_D8100);
  uint64_t v36 = v122;
  uint64_t v37 = v89;
  sub_A6F60();
  swift_release();
  (*(void (**)(char *, uint64_t))(v123 + 8))(v37, v36);
  uint64_t v38 = sub_A6FF0();
  uint64_t v39 = (uint64_t)v94;
  *uint64_t v94 = v38;
  *(void *)(v39 + 8) = v40;
  uint64_t v41 = v39 + *(int *)(sub_7AF4(&qword_D87D0) + 44);
  uint64_t v101 = v26;
  sub_1A97C(v34, v26, v41);
  sub_28F28(v34, (uint64_t)v30, (uint64_t (*)(void))v90);
  uint64_t v122 = v29;
  uint64_t v123 = v31;
  uint64_t v42 = swift_allocObject();
  uint64_t v121 = v28;
  sub_276B4((uint64_t)v30, v42 + v28);
  uint64_t v43 = sub_A7030();
  double v45 = v44;
  uint64_t v46 = v96;
  sub_8860(v39, v96, &qword_D8798);
  uint64_t v47 = (uint64_t (**)@<X0>(uint64_t *@<X8>))(v46 + *(int *)(v98 + 44));
  *uint64_t v47 = sub_53648;
  v47[1] = 0;
  v47[2] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v43;
  v47[3] = v45;
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = sub_2783C;
  *(void *)(v48 + 24) = v42;
  uint64_t v49 = v95;
  sub_8860(v46, v95, &qword_D8790);
  uint64_t v50 = (uint64_t (**)(double *))(v49 + *(int *)(v97 + 44));
  *uint64_t v50 = sub_27904;
  v50[1] = (uint64_t (*)(double *))v48;
  sub_A35C(v46, &qword_D8790);
  sub_A35C(v39, &qword_D8798);
  uint64_t v51 = v34 + *(int *)(v93 + 76);
  uint64_t v52 = *(void *)(v51 + 32);
  long long v53 = *(_OWORD *)(v51 + 16);
  long long v126 = *(_OWORD *)v51;
  long long v127 = v53;
  uint64_t v128 = v52;
  sub_7AF4(&qword_D87D8);
  sub_A6E80();
  double v54 = sub_1C77C(v129, v130, v131, v132);
  uint64_t v56 = v55;
  uint64_t v57 = v92;
  sub_8860(v49, v92, &qword_D87A0);
  uint64_t v58 = v57;
  unint64_t v59 = (double *)(v57 + *((int *)v99 + 11));
  *unint64_t v59 = v54;
  *((void *)v59 + 1) = v56;
  sub_A35C(v49, &qword_D87A0);
  id v60 = [self defaultCenter];
  if (qword_D7E20 != -1) {
    swift_once();
  }
  uint64_t v61 = v107;
  sub_A7530();

  uint64_t v62 = v34;
  unsigned int v99 = type metadata accessor for LiveCaptionsRootView;
  sub_28F28(v34, (uint64_t)v30, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  uint64_t v63 = swift_allocObject();
  uint64_t v64 = v121;
  sub_276B4((uint64_t)v30, v63 + v121);
  uint64_t v119 = v30;
  uint64_t v65 = v106;
  sub_8860(v57, v106, &qword_D87A8);
  uint64_t v66 = v100;
  uint64_t v67 = v108;
  uint64_t v68 = v109;
  (*(void (**)(uint64_t, char *, void *))(v108 + 16))(v65 + *(int *)(v100 + 52), v61, v109);
  char v69 = (uint64_t (**)(uint64_t))(v65 + *(int *)(v66 + 56));
  *char v69 = sub_27938;
  v69[1] = (uint64_t (*)(uint64_t))v63;
  (*(void (**)(char *, void *))(v67 + 8))(v61, v68);
  sub_A35C(v58, &qword_D87A8);
  uint64_t v70 = (uint64_t)v119;
  sub_28F28(v62, (uint64_t)v119, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  uint64_t v71 = v116;
  uint64_t v109 = *(void **)(v116 + 16);
  uint64_t v72 = v115;
  uint64_t v73 = v124;
  uint64_t v74 = v117;
  ((void (*)(char *, uint64_t, uint64_t))v109)(v115, v124, v117);
  uint64_t v75 = *(unsigned __int8 *)(v71 + 80);
  uint64_t v76 = (v122 + v75) & ~v75;
  uint64_t v122 = v76 + v114;
  v123 |= v75;
  uint64_t v77 = swift_allocObject();
  sub_276B4(v70, v77 + v64);
  uint64_t v116 = *(void *)(v71 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v116)(v77 + v76, v72, v74);
  uint64_t v78 = v105;
  sub_8860(v65, v105, &qword_D87B0);
  uint64_t v79 = (void (**)())(v78 + *(int *)(v104 + 36));
  *uint64_t v79 = sub_279D8;
  v79[1] = (void (*)())v77;
  v79[2] = 0;
  v79[3] = 0;
  sub_A35C(v65, &qword_D87B0);
  uint64_t v80 = v113;
  sub_8860(v78, v113, &qword_D87B8);
  uint64_t v81 = (void *)(v80 + *(int *)(v125 + 36));
  *uint64_t v81 = 0;
  v81[1] = 0;
  v81[2] = sub_1D86C;
  v81[3] = 0;
  sub_A35C(v78, &qword_D87B8);
  sub_A62A0();
  *(void *)&long long v126 = v82;
  *((void *)&v126 + 1) = v83;
  uint64_t v84 = (uint64_t)v119;
  sub_28F28(v120, (uint64_t)v119, (uint64_t (*)(void))v99);
  ((void (*)(char *, uint64_t, uint64_t))v109)(v72, v73, v74);
  uint64_t v85 = swift_allocObject();
  sub_276B4(v84, v85 + v121);
  ((void (*)(uint64_t, char *, uint64_t))v116)(v85 + v76, v72, v74);
  type metadata accessor for CGSize(0);
  sub_28690(&qword_D87E0, &qword_D87C0, (void (*)(void))sub_28030);
  sub_2A2BC(&qword_D87F8, type metadata accessor for CGSize);
  int v86 = v110;
  sub_A6CE0();
  swift_release();
  sub_A35C(v80, &qword_D87C0);
  (*(void (**)(uint64_t, char *, uint64_t))(v111 + 32))(v118, v86, v112);
  return (*(uint64_t (**)(uint64_t (*)(), uint64_t))(v102 + 8))(v101, v103);
}

uint64_t sub_1968C(uint8_t *a1)
{
  type metadata accessor for LiveCaptionsRootView();
  sub_7AF4(&qword_D87D8);
  sub_A6E80();
  return sub_1970C(a1, v3, v4, v5, v6);
}

uint64_t sub_1970C(uint8_t *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = sub_A61E0();
  uint64_t v95 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v93 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v88 - v15;
  uint64_t v17 = (int *)type metadata accessor for LiveCaptionsRootView();
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = v5 + *(int *)(v20 + 56);
  CGFloat v23 = *(double *)v21;
  CGFloat v22 = *(double *)(v21 + 8);
  uint64_t v24 = *(void *)(v21 + 16);
  *(void *)&long long v102 = *(void *)v21;
  *((CGFloat *)&v102 + 1) = v22;
  *(void *)&long long v103 = v24;
  uint64_t v25 = sub_7AF4(&qword_D8178);
  sub_A6E80();
  v105.CGFloat width = 0.0;
  v105.double height = 0.0;
  if (CGSizeEqualToSize(v100, v105))
  {
    uint64_t v26 = (double *)(v5 + v17[11]);
    CGFloat v28 = v26[1];
    uint64_t v29 = *((void *)v26 + 2);
    *(double *)&long long v102 = *v26;
    CGFloat v27 = *(double *)&v102;
    *((CGFloat *)&v102 + 1) = v28;
    *(void *)&long long v103 = v29;
    sub_A6E80();
    long long v102 = 0u;
    long long v103 = 0u;
    char v104 = 1;
    sub_21634((uint64_t)&v102, v100.width, v100.height, 0.0, 0.0, a2, a3, a4, a5);
    v100.CGFloat width = v27;
    v100.double height = v28;
    uint64_t v101 = v29;
    uint64_t v98 = v30;
    uint64_t v99 = v31;
    sub_A6E90();
    uint64_t v32 = v5 + v17[7];
    char v33 = *(unsigned char *)v32;
    CGFloat v34 = *(double *)(v32 + 8);
    LOBYTE(v100.width) = v33;
    v100.double height = v34;
    sub_7AF4(&qword_D8800);
    sub_A6E80();
    if (v98 == 2)
    {
      sub_21C04(a2, a3, a4, a5);
      uint64_t v36 = v35;
      uint64_t v37 = v5 + v17[15];
      CGFloat v39 = *(double *)(v37 + 8);
      uint64_t v40 = *(void *)(v37 + 16);
      v100.CGFloat width = *(CGFloat *)v37;
      CGFloat width = v100.width;
      v100.double height = v39;
      uint64_t v101 = v40;
      swift_retain();
      sub_A6E80();
      v100.CGFloat width = width;
      v100.double height = v39;
      uint64_t v101 = v40;
      uint64_t v96 = v98;
      uint64_t v97 = v36;
      sub_A6E90();
      swift_release();
    }
    sub_A61C0();
    v100.CGFloat width = v23;
    v100.double height = v22;
    uint64_t v101 = v24;
    uint64_t v98 = v41;
    uint64_t v99 = v42;
    return sub_A6E90();
  }
  else
  {
    uint64_t v91 = v17;
    *(CGFloat *)&long long v102 = v23;
    *((CGFloat *)&v102 + 1) = v22;
    *(void *)&long long v103 = v24;
    sub_A6E80();
    double v44 = v100.width;
    sub_A61C0();
    double v46 = vabdd_f64(v44, v45);
    sub_28F28(v5, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    uint64_t v47 = v95;
    uint64_t v48 = *(void (**)(char *, uint8_t *, uint64_t))(v95 + 16);
    uint64_t v94 = a1;
    v48(v16, a1, v12);
    uint64_t v92 = v25;
    if (v46 >= 2.0)
    {
      double v54 = *(void (**)(char *, uint64_t))(v47 + 8);
      v54(v16, v12);
      sub_28F90((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    }
    else
    {
      uint64_t v49 = &v19[v91[14]];
      uint64_t v50 = *((void *)v49 + 2);
      long long v102 = *(_OWORD *)v49;
      *(void *)&long long v103 = v50;
      sub_A6E80();
      double height = v100.height;
      sub_A61C0();
      double v53 = vabdd_f64(height, v52);
      double v54 = *(void (**)(char *, uint64_t))(v47 + 8);
      v54(v16, v12);
      uint64_t result = sub_28F90((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
      if (v53 < 2.0) {
        return result;
      }
    }
    uint64_t v90 = v6;
    os_log_type_t v55 = sub_A7450();
    if (qword_D7D90 != -1) {
      swift_once();
    }
    uint64_t v56 = qword_DF5C8;
    uint64_t v57 = v93;
    v48(v93, v94, v12);
    if (os_log_type_enabled(v56, v55))
    {
      uint64_t v89 = v54;
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      *(void *)&v100.CGFloat width = swift_slowAlloc();
      *(_DWORD *)uint64_t v58 = 136315138;
      uint64_t v88 = v58 + 4;
      sub_A61C0();
      *(void *)&long long v102 = v59;
      *((void *)&v102 + 1) = v60;
      type metadata accessor for CGSize(0);
      uint64_t v61 = sub_A71F0();
      *(void *)&long long v102 = sub_15F94(v61, v62, (uint64_t *)&v100);
      sub_A7600();
      swift_bridgeObjectRelease();
      v89(v57, v12);
      _os_log_impl(&def_5ED54, v56, v55, "drag translation: %s", v58, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v54(v57, v12);
    }
    sub_A61C0();
    uint64_t v63 = *(void *)(v21 + 16);
    long long v102 = *(_OWORD *)v21;
    *(void *)&long long v103 = v63;
    v100.CGFloat width = v64;
    v100.double height = v65;
    sub_A6E90();
    sub_A61D0();
    double v67 = v66;
    sub_A61C0();
    double v69 = v68;
    sub_A61D0();
    double v71 = v70;
    uint64_t result = sub_A61C0();
    double v73 = v72;
    double v74 = vabdd_f64(v67, v69);
    if (qword_D7D78 != -1) {
      uint64_t result = swift_once();
    }
    uint64_t v75 = (uint8_t *)v90;
    if (v74 <= *(double *)&qword_DF5A8 && fabs(v71 - v73) <= *(double *)&qword_DF5A8)
    {
      uint64_t v76 = v91;
      uint64_t v77 = v90 + v91[13];
      CGFloat v78 = *(double *)v77;
      CGFloat v79 = *(double *)(v77 + 8);
      uint64_t v80 = *(void *)(v77 + 16);
      *(void *)&long long v102 = *(void *)v77;
      *((CGFloat *)&v102 + 1) = v79;
      *(void *)&long long v103 = v80;
      sub_A6E80();
      v106.CGFloat width = 0.0;
      v106.double height = 0.0;
      if (CGSizeEqualToSize(v100, v106))
      {
        uint64_t v81 = (double *)&v75[v76[11]];
        CGFloat v83 = v81[1];
        uint64_t v84 = *((void *)v81 + 2);
        *(double *)&long long v102 = *v81;
        CGFloat v82 = *(double *)&v102;
        *((CGFloat *)&v102 + 1) = v83;
        *(void *)&long long v103 = v84;
        sub_A6E80();
        long long v102 = 0u;
        long long v103 = 0u;
        char v104 = 1;
        sub_21634((uint64_t)&v102, v100.width, v100.height, 0.0, 0.0, a2, a3, a4, a5);
        v100.CGFloat width = v82;
        v100.double height = v83;
        uint64_t v101 = v84;
        uint64_t v98 = v85;
        uint64_t v99 = v86;
        sub_A6E90();
        v100.CGFloat width = v82;
        v100.double height = v83;
        uint64_t v101 = v84;
        sub_A6E80();
        v100.CGFloat width = v78;
        v100.double height = v79;
        uint64_t v101 = v80;
        sub_A6E90();
      }
      sub_A7070();
      sub_A7060();
      swift_release();
      sub_A7050();
      uint64_t v87 = swift_release();
      __chkstk_darwin(v87);
      *(&v88 - 6) = v94;
      *(&v88 - 5) = v75;
      *((double *)&v88 - 4) = a2;
      *((double *)&v88 - 3) = a3;
      *((double *)&v88 - 2) = a4;
      *((double *)&v88 - 1) = a5;
      sub_A6300();
      return swift_release();
    }
  }
  return result;
}

void sub_19F78()
{
  type metadata accessor for LiveCaptionsRootView();
  sub_7AF4(&qword_D8178);
  sub_A6E90();
  sub_A6E90();
  sub_7AF4(&qword_D87D8);
  sub_A6E80();
  sub_1A070(0.0, 0.0, v0, v1);
  sub_1A748();
}

void sub_1A070(double a1, double a2, double a3, double a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = (int *)type metadata accessor for LiveCaptionsRootView();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_A63C0();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v56 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v55 = (uint64_t)&v53 - v17;
  sub_A61D0();
  double v19 = v18;
  sub_A61C0();
  double v21 = v20;
  sub_A61D0();
  double v23 = v22;
  sub_A61C0();
  double v25 = v24;
  os_log_type_t v26 = sub_A7420();
  if (qword_D7D90 != -1) {
    swift_once();
  }
  double v27 = v19 - v21;
  double v28 = v23 - v25;
  uint64_t v29 = qword_DF5C8;
  if (os_log_type_enabled((os_log_t)qword_DF5C8, v26))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v54 = v14;
    uint64_t v57 = v31;
    *(_DWORD *)uint64_t v30 = 136315138;
    double v53 = v30 + 4;
    uint64_t v58 = *(void *)&v27;
    double v59 = v23 - v25;
    type metadata accessor for CGSize(0);
    uint64_t v32 = sub_A71F0();
    uint64_t v58 = sub_15F94(v32, v33, &v57);
    sub_A7600();
    swift_bridgeObjectRelease();
    _os_log_impl(&def_5ED54, v29, v26, "handleFastSwipe velocity: %s", v30, 0xCu);
    swift_arrayDestroy();
    uint64_t v14 = v54;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  double v34 = fabs(v27);
  if (qword_D7D78 != -1) {
    swift_once();
  }
  if (*(double *)&qword_DF5A8 >= v34)
  {
    uint64_t v39 = v5 + v10[7];
    double v40 = *(double *)(v39 + 8);
    LOBYTE(v58) = *(unsigned char *)v39;
    double v59 = v40;
    sub_7AF4(&qword_D8800);
    sub_A6E80();
    int v41 = v57;
    sub_28F28(v5, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    if (v41 == 3)
    {
      sub_28F90((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    }
    else
    {
      double v46 = &v12[v10[7]];
      char v47 = *v46;
      double v48 = *((double *)v46 + 1);
      LOBYTE(v58) = v47;
      double v59 = v48;
      sub_A6E80();
      sub_28F90((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
      if (v57 != 2 && *(double *)&qword_DF5A8 < fabs(v28))
      {
        double v49 = *(double *)(v39 + 8);
        LOBYTE(v58) = *(unsigned char *)v39;
        double v59 = v49;
        sub_A6E80();
        sub_235B0(v57, a1, a2, a3, a4);
        unint64_t v51 = __chkstk_darwin(v50).n128_u64[0];
        *(&v53 - 8) = (uint8_t *)v5;
        *((unsigned char *)&v53 - 56) = v28 < 0.0;
        *((double *)&v53 - 6) = a1;
        *((double *)&v53 - 5) = a2;
        *((double *)&v53 - 4) = a3;
        *((double *)&v53 - 3) = a4;
        *(&v53 - 2) = (uint8_t *)v51;
        *(&v53 - 1) = v52;
        sub_A7080();
        sub_A6300();
        swift_release();
      }
    }
  }
  else
  {
    uint64_t v35 = v5 + v10[25];
    char v36 = *(unsigned char *)v35;
    double v37 = *(double *)(v35 + 8);
    LOBYTE(v58) = v36;
    double v59 = v37;
    sub_7AF4(&qword_D8380);
    uint64_t v38 = sub_A6E80();
    if (v57 == 1)
    {
      __chkstk_darwin(v38);
      *(&v53 - 2) = (uint8_t *)v5;
      sub_A7080();
      sub_A6300();
      swift_release();
      return;
    }
    uint64_t v42 = v55;
    sub_53760(v55);
    uint64_t v43 = v56;
    (*(void (**)(char *, void, uint64_t))(v14 + 104))(v56, enum case for LayoutDirection.rightToLeft(_:), v13);
    sub_A63B0();
    double v44 = *(void (**)(char *, uint64_t))(v14 + 8);
    v44(v43, v13);
    uint64_t v45 = ((uint64_t (*)(uint64_t, uint64_t))v44)(v42, v13);
    if (__chkstk_darwin(v45).n128_f64[0] <= 0.0) {
      *((unsigned char *)&v53 - 32) = 1;
    }
    else {
      *((unsigned char *)&v53 - 32) = 2;
    }
    *(&v53 - 3) = (uint8_t *)v5;
    *((double *)&v53 - 2) = a3;
    *((double *)&v53 - 1) = a4;
    sub_A7080();
    sub_A6300();
    swift_release();
    sub_1A748();
    LiveSpeechCaptionsViewsCoordinator.updateLiveCaptionsWindowState(_:)(LiveSpeechUIService_LiveSpeechCaptionsWindowState_pip);
    sub_22F88();
    [*(id *)(v5 + v10[23]) idleSleepTimerDisabled:0];
  }
  sub_1A748();
}

void sub_1A748()
{
  uint64_t v1 = v0;
  id v2 = [self standardUserDefaults];
  double v3 = (int *)type metadata accessor for LiveCaptionsRootView();
  uint64_t v4 = v0 + v3[7];
  LOBYTE(v12) = *(unsigned char *)v4;
  uint64_t v15 = *(void *)(v4 + 8);
  sub_7AF4(&qword_D8800);
  sub_A6E80();
  NSString v5 = sub_A71A0();
  objc_msgSend(v2, "setInteger:forKey:", LOBYTE(v18.width), v5, v12, v15);

  uint64_t v6 = (long long *)(v0 + v3[11]);
  long long v13 = *v6;
  uint64_t v16 = *((void *)v6 + 2);
  sub_7AF4(&qword_D8178);
  sub_A6E80();
  uint64_t v7 = NSStringFromCGSize(v18);
  if (!v7)
  {
    sub_A71D0();
    uint64_t v7 = (NSString *)sub_A71A0();
    swift_bridgeObjectRelease();
  }
  NSString v8 = sub_A71A0();
  objc_msgSend(v2, "setObject:forKey:", v7, v8, v13, v16);

  uint64_t v9 = (long long *)(v1 + v3[12]);
  long long v14 = *v9;
  uint64_t v17 = *((void *)v9 + 2);
  sub_A6E80();
  uint64_t v10 = NSStringFromCGSize(v18);
  if (!v10)
  {
    sub_A71D0();
    uint64_t v10 = (NSString *)sub_A71A0();
    swift_bridgeObjectRelease();
  }
  NSString v11 = sub_A71A0();
  objc_msgSend(v2, "setObject:forKey:", v10, v11, v14, v17);
}

uint64_t sub_1A97C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)()@<X2>, uint64_t a3@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v4 = sub_7AF4(&qword_D8820);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v38 - v8;
  uint64_t v10 = sub_7AF4(&qword_D8828);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v38 - v14;
  uint64_t v16 = type metadata accessor for LiveCaptionsRootView();
  uint64_t v17 = (uint64_t *)(a1 + *(int *)(v16 + 68));
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  uint64_t v20 = v17[2];
  uint64_t v21 = v17[3];
  uint64_t v22 = v17[4];
  uint64_t v40 = *v17;
  uint64_t v41 = v19;
  uint64_t v42 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v22;
  sub_7AF4(&qword_D87D8);
  sub_A6E80();
  double v23 = v45;
  double v24 = v46;
  double v25 = v47;
  double v26 = v48;
  double v27 = v38;
  sub_A6290();
  sub_1ACC4((uint64_t)v27, (uint64_t)v15, v23, v24, v25, v26, v28, v29);
  uint64_t v30 = (char *)(a1 + *(int *)(v16 + 100));
  char v31 = *v30;
  uint64_t v32 = *((void *)v30 + 1);
  LOBYTE(v40) = v31;
  uint64_t v41 = v32;
  sub_7AF4(&qword_D8380);
  sub_A6E80();
  if (LOBYTE(v45) == 1)
  {
    uint64_t v40 = v18;
    uint64_t v41 = v19;
    uint64_t v42 = v20;
    uint64_t v43 = v21;
    uint64_t v44 = v22;
    sub_A6E80();
    sub_1BDFC(v27, (uint64_t)v9, v45, v46, v47, v48);
    uint64_t v33 = sub_7AF4(&qword_D8830);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v9, 0, 1, v33);
  }
  else
  {
    uint64_t v34 = sub_7AF4(&qword_D8830);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v9, 1, 1, v34);
  }
  sub_8860((uint64_t)v15, (uint64_t)v12, &qword_D8828);
  sub_8860((uint64_t)v9, (uint64_t)v6, &qword_D8820);
  uint64_t v35 = v39;
  sub_8860((uint64_t)v12, v39, &qword_D8828);
  uint64_t v36 = sub_7AF4(&qword_D8838);
  sub_8860((uint64_t)v6, v35 + *(int *)(v36 + 48), &qword_D8820);
  sub_A35C((uint64_t)v9, &qword_D8820);
  sub_A35C((uint64_t)v15, &qword_D8828);
  sub_A35C((uint64_t)v6, &qword_D8820);
  return sub_A35C((uint64_t)v12, &qword_D8828);
}

uint64_t sub_1ACC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D6>)
{
  uint64_t v9 = v8;
  uint64_t v154 = a2;
  uint64_t v17 = sub_7AF4(&qword_D8298);
  uint64_t v153 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  v152 = (char *)&v123 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = (uint64_t (*)(void))sub_A6D30();
  uint64_t v145 = *((void *)v146 - 1);
  __chkstk_darwin(v146);
  uint64_t v144 = (char *)&v123 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for LiveCaptionsRootView();
  uint64_t v147 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v151 = (uint64_t)&v123 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = v21;
  __chkstk_darwin(v22);
  uint64_t v142 = (uint64_t)&v123 - v23;
  uint64_t v129 = sub_A6FE0();
  uint64_t v126 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  double v25 = (char *)&v123 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_7AF4(&qword_D8888);
  __chkstk_darwin(v26 - 8);
  double v28 = (uint64_t *)((char *)&v123 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v29 = sub_7AF4(&qword_D8890);
  __chkstk_darwin(v29);
  char v31 = (char *)&v123 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = sub_7AF4(&qword_D8898);
  __chkstk_darwin(v127);
  uint64_t v33 = (char *)&v123 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_7AF4(&qword_D88A0);
  __chkstk_darwin(v34);
  uint64_t v130 = (uint64_t)&v123 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = sub_7AF4(&qword_D88A8);
  __chkstk_darwin(v125);
  uint64_t v124 = (char *)&v123 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = sub_7AF4(&qword_D88B0);
  __chkstk_darwin(v131);
  uint64_t v133 = (uint64_t)&v123 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = sub_7AF4(&qword_D88B8);
  __chkstk_darwin(v132);
  uint64_t v134 = (uint64_t)&v123 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = sub_7AF4(&qword_D88C0);
  __chkstk_darwin(v136);
  uint64_t v135 = (uint64_t)&v123 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = sub_7AF4(&qword_D88C8);
  uint64_t v139 = *(void *)(v140 - 8);
  __chkstk_darwin(v140);
  uint64_t v138 = (char *)&v123 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = sub_7AF4(&qword_D88D0);
  __chkstk_darwin(v137);
  uint64_t v141 = (char *)&v123 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = sub_7AF4(&qword_D88D8);
  __chkstk_darwin(v159);
  uint64_t v143 = (uint64_t)&v123 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = sub_7AF4(&qword_D88E0);
  uint64_t v149 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v148 = (char *)&v123 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  *double v28 = sub_A7030();
  v28[1] = v44;
  uint64_t v45 = sub_7AF4(&qword_D88E8);
  sub_1DDF0(v9, a1, (uint64_t)v28 + *(int *)(v45 + 44), a3, a4, a5, a6, a7, a8);
  uint64_t v156 = v20;
  uint64_t v46 = *(int *)(v20 + 28);
  uint64_t v158 = v9;
  uint64_t v47 = v9 + v46;
  uint64_t v48 = *(void *)(v9 + v46 + 8);
  LOBYTE(v163[0]) = *(unsigned char *)(v9 + v46);
  *((void *)&v163[0] + 1) = v48;
  sub_7AF4(&qword_D8800);
  sub_A6E80();
  uint64_t v155 = v17;
  uint64_t v128 = v34;
  uint64_t v49 = (uint64_t)v33;
  if (v160 == 3) {
    sub_A6FD0();
  }
  else {
    sub_A6FB0();
  }
  char v50 = sub_A6A10();
  unint64_t v51 = &v31[*(int *)(v29 + 36)];
  uint64_t v52 = v126;
  double v53 = v25;
  uint64_t v54 = v25;
  uint64_t v55 = v129;
  (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v51, v54, v129);
  v51[*(int *)(sub_7AF4(&qword_D88F0) + 36)] = v50;
  sub_8860((uint64_t)v28, (uint64_t)v31, &qword_D8888);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v55);
  sub_A35C((uint64_t)v28, &qword_D8888);
  uint64_t v56 = v158;
  double v57 = sub_20C1C();
  sub_8860((uint64_t)v31, v49, &qword_D8890);
  *(double *)(v49 + *(int *)(v127 + 36)) = v57;
  sub_A35C((uint64_t)v31, &qword_D8890);
  sub_20CCC((uint64_t *)v163, a5);
  uint64_t v58 = *(void *)&v163[0];
  uint64_t v59 = v130;
  sub_8860(v49, v130, &qword_D8898);
  uint64_t v60 = v59 + *(int *)(v128 + 36);
  *(void *)uint64_t v60 = v58;
  *(_WORD *)(v60 + 8) = 256;
  sub_A35C(v49, &qword_D8898);
  uint64_t v61 = *(void *)(v47 + 8);
  LOBYTE(v163[0]) = *(unsigned char *)v47;
  *((void *)&v163[0] + 1) = v61;
  sub_A6E80();
  if (v160 == 3) {
    uint64_t v62 = sub_A6430();
  }
  else {
    uint64_t v62 = 0;
  }
  uint64_t v63 = v156;
  uint64_t v64 = v125;
  uint64_t v65 = (uint64_t)v124;
  char v66 = sub_A6A10();
  sub_8860(v59, v65, &qword_D88A0);
  uint64_t v67 = v65 + *(int *)(v64 + 36);
  *(void *)uint64_t v67 = v62;
  *(unsigned char *)(v67 + 8) = v66;
  sub_A35C(v59, &qword_D88A0);
  char v68 = sub_A6A10();
  uint64_t v69 = v133;
  sub_8860(v65, v133, &qword_D88A8);
  uint64_t v70 = v69 + *(int *)(v131 + 36);
  *(unsigned char *)uint64_t v70 = v68;
  *(_OWORD *)(v70 + 8) = 0u;
  *(_OWORD *)(v70 + 24) = 0u;
  *(unsigned char *)(v70 + 40) = 0;
  sub_A35C(v65, &qword_D88A8);
  uint64_t v72 = *(void *)(v47 + 8);
  LOBYTE(v163[0]) = *(unsigned char *)v47;
  char v71 = v163[0];
  *((void *)&v163[0] + 1) = v72;
  sub_A6E80();
  sub_235B0(v160, a3, a4, a5, a6);
  LOBYTE(v163[0]) = v71;
  *((void *)&v163[0] + 1) = v72;
  sub_A6E80();
  sub_235B0(v160, a3, a4, a5, a6);
  sub_A7030();
  sub_A6270();
  uint64_t v73 = v134;
  sub_8860(v69, v134, &qword_D88B0);
  double v74 = (_OWORD *)(v73 + *(int *)(v132 + 36));
  long long v75 = v163[1];
  *double v74 = v163[0];
  v74[1] = v75;
  v74[2] = v163[2];
  sub_A35C(v69, &qword_D88B0);
  uint64_t v76 = *(void *)(v47 + 8);
  LOBYTE(v160) = *(unsigned char *)v47;
  uint64_t v161 = v76;
  sub_A6E80();
  int v77 = v162;
  uint64_t v78 = v142;
  sub_28F28(v56, v142, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  if (v77)
  {
    uint64_t v79 = v78 + *(int *)(v63 + 28);
    char v80 = *(unsigned char *)v79;
    uint64_t v81 = *(void *)(v79 + 8);
    LOBYTE(v160) = v80;
    uint64_t v161 = v81;
    sub_A6E80();
    int v82 = v162;
    sub_28F90(v78, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    if (v82 == 1) {
      double v83 = 5.0;
    }
    else {
      double v83 = 0.0;
    }
  }
  else
  {
    sub_28F90(v78, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    double v83 = 5.0;
  }
  (*(void (**)(char *, void, uint64_t (*)(void)))(v145 + 104))(v144, enum case for Color.RGBColorSpace.sRGBLinear(_:), v146);
  uint64_t v84 = sub_A6DE0();
  uint64_t v85 = v135;
  sub_8860(v73, v135, &qword_D88B8);
  uint64_t v86 = v85 + *(int *)(v136 + 36);
  *(void *)uint64_t v86 = v84;
  *(double *)(v86 + 8) = v83;
  *(void *)(v86 + 16) = 0;
  *(void *)(v86 + 24) = 0;
  sub_A35C(v73, &qword_D88B8);
  sub_28690(&qword_D88F8, &qword_D88C0, (void (*)(void))sub_28848);
  uint64_t v87 = v138;
  sub_A6C50();
  sub_A35C(v85, &qword_D88C0);
  uint64_t v88 = v151;
  sub_28F28(v56, v151, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  uint64_t v89 = *(unsigned __int8 *)(v147 + 80);
  uint64_t v90 = (v89 + 16) & ~v89;
  uint64_t v91 = v90 + v157;
  uint64_t v157 = v89 | 7;
  uint64_t v145 = v91;
  uint64_t v92 = swift_allocObject();
  sub_276B4(v88, v92 + v90);
  uint64_t v93 = v139;
  uint64_t v94 = (uint64_t)v141;
  uint64_t v95 = v140;
  (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v141, v87, v140);
  uint64_t v96 = (uint64_t (**)())(v94 + *(int *)(v137 + 36));
  *uint64_t v96 = sub_28A6C;
  v96[1] = (uint64_t (*)())v92;
  v96[2] = 0;
  v96[3] = 0;
  (*(void (**)(char *, uint64_t))(v93 + 8))(v87, v95);
  uint64_t v146 = (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView;
  sub_28F28(v56, v88, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  uint64_t v97 = swift_allocObject();
  uint64_t v147 = v90;
  sub_276B4(v88, v97 + v90);
  uint64_t v98 = v143;
  sub_8860(v94, v143, &qword_D88D0);
  uint64_t v99 = (void *)(v98 + *(int *)(v159 + 36));
  *uint64_t v99 = 0;
  v99[1] = 0;
  v99[2] = sub_28AFC;
  v99[3] = v97;
  sub_A35C(v94, &qword_D88D0);
  uint64_t v100 = v156;
  uint64_t v101 = v56;
  long long v102 = *(void **)(v56 + *(int *)(v156 + 108) + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v103 = v102;
  sub_A60D0();

  swift_release();
  swift_release();
  sub_28F28(v101, v88, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  unint64_t v104 = (v145 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v105 = swift_allocObject();
  sub_276B4(v88, v105 + v90);
  CGSize v106 = (double *)(v105 + v104);
  double *v106 = a3;
  v106[1] = a4;
  v106[2] = a5;
  v106[3] = a6;
  sub_7AF4(&qword_D9110);
  sub_28690(&qword_D8950, &qword_D88D8, (void (*)(void))sub_28B94);
  sub_28C78();
  uint64_t v107 = v148;
  sub_A6CF0();
  swift_release();
  swift_bridgeObjectRelease();
  sub_A35C(v98, &qword_D88D8);
  uint64_t v108 = *(int *)(v100 + 104);
  uint64_t v109 = v158;
  uint64_t v110 = *(void **)(v158 + v108 + 8);
  swift_beginAccess();
  id v111 = v110;
  sub_7AF4(&qword_D85E0);
  uint64_t v112 = v152;
  sub_A60A0();
  swift_endAccess();

  sub_28F28(v109, v88, v146);
  uint64_t v113 = swift_allocObject();
  sub_276B4(v88, v113 + v147);
  uint64_t v114 = (double *)(v113 + v104);
  *uint64_t v114 = a3;
  v114[1] = a4;
  v114[2] = a5;
  v114[3] = a6;
  uint64_t v115 = v149;
  uint64_t v116 = v154;
  uint64_t v117 = v150;
  (*(void (**)(uint64_t, char *, uint64_t))(v149 + 16))(v154, v107, v150);
  uint64_t v118 = sub_7AF4(&qword_D8828);
  uint64_t v119 = v153;
  uint64_t v120 = v155;
  (*(void (**)(uint64_t, char *, uint64_t))(v153 + 16))(v116 + *(int *)(v118 + 52), v112, v155);
  uint64_t v121 = (uint64_t (**)(long long *))(v116 + *(int *)(v118 + 56));
  *uint64_t v121 = sub_28D20;
  v121[1] = (uint64_t (*)(long long *))v113;
  (*(void (**)(char *, uint64_t))(v119 + 8))(v112, v120);
  return (*(uint64_t (**)(char *, uint64_t))(v115 + 8))(v107, v117);
}

uint64_t sub_1BDFC@<X0>(uint64_t (*a1)()@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  double v53 = a1;
  uint64_t v63 = a2;
  uint64_t v11 = type metadata accessor for LiveCaptionsRootView();
  uint64_t v52 = *(void *)(v11 - 8);
  uint64_t v12 = *(void *)(v52 + 64);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = sub_A61A0();
  uint64_t v55 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v49 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_7AF4(&qword_D8840);
  uint64_t v58 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  unint64_t v51 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_7AF4(&qword_D8848);
  uint64_t v56 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_7AF4(&qword_D8850);
  uint64_t v61 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v59 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_D7E58 != -1) {
    swift_once();
  }
  AXLTSettingsManager.buttonScaledHeight.getter();
  uint64_t v19 = v6 + *(int *)(v11 + 28);
  char v20 = *(unsigned char *)v19;
  uint64_t v21 = *(void *)(v19 + 8);
  LOBYTE(v64) = v20;
  uint64_t v65 = v21;
  sub_7AF4(&qword_D8800);
  uint64_t v22 = sub_A6E80();
  double v23 = LiveSpeechStore.SpeechContext.init(text:highlightRange:)(v22);
  sub_21EA8();
  uint64_t v50 = v6;
  sub_A7030();
  sub_A6270();
  double v64 = v23;
  uint64_t v65 = 0x4020000000000000;
  uint64_t v66 = v71;
  LOBYTE(v67) = v72;
  uint64_t v68 = v73;
  char v69 = v74;
  long long v70 = v75;
  sub_A6210();
  uint64_t v45 = sub_7AF4(&qword_D8858);
  uint64_t v46 = sub_7AF4(&qword_D8108);
  uint64_t v24 = sub_28690(&qword_D8860, &qword_D8858, (void (*)(void))sub_2870C);
  uint64_t v48 = &protocol conformance descriptor for _EndedGesture<A>;
  uint64_t v25 = sub_A45C(&qword_D8170, &qword_D8108);
  sub_A6CD0();
  uint64_t v26 = v49;
  sub_A6190();
  double v53 = type metadata accessor for LiveCaptionsRootView;
  sub_28F28(v6, (uint64_t)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  uint64_t v27 = *(unsigned __int8 *)(v52 + 80);
  uint64_t v28 = (v27 + 16) & ~v27;
  uint64_t v47 = v28 + v12;
  uint64_t v52 = v27 | 7;
  uint64_t v29 = swift_allocObject();
  sub_276B4((uint64_t)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v29 + v28);
  uint64_t v30 = swift_allocObject();
  char v31 = v17;
  *(void *)(v30 + 16) = sub_2779C;
  *(void *)(v30 + 24) = v29;
  uint64_t v32 = v51;
  uint64_t v33 = v54;
  sub_A6F60();
  swift_release();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v26, v33);
  sub_A6210();
  double v64 = *(double *)&v45;
  uint64_t v65 = v46;
  uint64_t v66 = v24;
  uint64_t v67 = v25;
  swift_getOpaqueTypeConformance2();
  sub_A45C(&qword_D8880, &qword_D8840);
  uint64_t v34 = v59;
  uint64_t v35 = v57;
  uint64_t v36 = v60;
  sub_A6C60();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v32, v36);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v31, v35);
  sub_28F28(v50, (uint64_t)v13, (uint64_t (*)(void))v53);
  unint64_t v37 = (v47 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v38 = swift_allocObject();
  sub_276B4((uint64_t)v13, v38 + v28);
  uint64_t v39 = (double *)(v38 + v37);
  *uint64_t v39 = a3;
  v39[1] = a4;
  v39[2] = a5;
  v39[3] = a6;
  uint64_t v40 = v61;
  uint64_t v41 = v63;
  uint64_t v42 = v62;
  (*(void (**)(uint64_t, char *, uint64_t))(v61 + 16))(v63, v34, v62);
  uint64_t v43 = (uint64_t (**)())(v41 + *(int *)(sub_7AF4(&qword_D8830) + 36));
  *uint64_t v43 = sub_2880C;
  v43[1] = (uint64_t (*)())v38;
  v43[2] = 0;
  v43[3] = 0;
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v34, v42);
}

uint64_t sub_1C5B8(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  os_log_type_t v8 = sub_A7420();
  if (qword_D7D90 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_DF5C8;
  os_log_type_t v10 = v8;
  if (os_log_type_enabled((os_log_t)qword_DF5C8, v8))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v16 = v12;
    type metadata accessor for CGRect(0);
    uint64_t v13 = sub_A71F0();
    sub_15F94(v13, v14, &v16);
    sub_A7600();
    swift_bridgeObjectRelease();
    _os_log_impl(&def_5ED54, v9, v10, "New window frame: %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  type metadata accessor for LiveCaptionsRootView();
  return LiveSpeechCaptionsViewsCoordinator.updateLiveCaptionsFrame(_:)(a1, a2, a3, a4);
}

double sub_1C77C(double a1, double a2, double a3, double a4)
{
  uint64_t v5 = v4;
  os_log_type_t v10 = (int *)type metadata accessor for LiveCaptionsRootView();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v4 + *(int *)(v13 + 28);
  char v15 = *(unsigned char *)v14;
  double v16 = *(double *)(v14 + 8);
  LOBYTE(v43) = *(unsigned char *)v14;
  *((double *)&v43 + 1) = v16;
  sub_7AF4(&qword_D8800);
  sub_A6E80();
  double v17 = 0.0;
  if (v41 != 3)
  {
    LOBYTE(v43) = v15;
    *((double *)&v43 + 1) = v16;
    sub_A6E80();
    if (v41 == 4) {
      uint64_t v18 = v10[12];
    }
    else {
      uint64_t v18 = v10[11];
    }
    uint64_t v19 = (long long *)(v4 + v18);
    uint64_t v20 = *((void *)v19 + 2);
    long long v43 = *v19;
    *(void *)&long long v44 = v20;
    sub_7AF4(&qword_D8178);
    sub_A6E80();
    long long v43 = 0u;
    long long v44 = 0u;
    char v45 = 1;
    sub_21634((uint64_t)&v43, *(double *)&v41, v42, 0.0, 0.0, a1, a2, a3, a4);
    double v17 = v21;
    double v23 = v22;
    uint64_t v24 = (uint64_t *)(v4 + v10[16]);
    uint64_t v25 = *v24;
    double v26 = *((double *)v24 + 1);
    uint64_t v41 = *v24;
    CGFloat v42 = v26;
    sub_7AF4(&qword_D8810);
    sub_A6E80();
    if (v40 != 0.0)
    {
      LOBYTE(v41) = v15;
      CGFloat v42 = v16;
      sub_A6E80();
      sub_235B0(SLOBYTE(v40), a1, a2, a3, a4);
      double v28 = v27;
      uint64_t v41 = v25;
      CGFloat v42 = v26;
      sub_A6E80();
      if (v40 - v28 < v23)
      {
        uint64_t v41 = v25;
        CGFloat v42 = v26;
        sub_A6E80();
        double v23 = v40 - v28;
      }
      if (v23 < 0.0) {
        double v23 = 0.0;
      }
    }
    LOBYTE(v41) = v15;
    CGFloat v42 = v16;
    sub_A6E80();
    int v29 = LOBYTE(v40);
    sub_28F28(v5, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    if (v29 == 4)
    {
      sub_28F90((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    }
    else
    {
      char v30 = sub_16A30();
      sub_28F90((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
      if ((v30 & 1) == 0)
      {
        double v31 = *(double *)(v14 + 8);
        LOBYTE(v41) = *(unsigned char *)v14;
        CGFloat v42 = v31;
        sub_A6E80();
        if (LOBYTE(v40)) {
          double v17 = 12.0;
        }
        else {
          double v17 = 16.0;
        }
        os_log_type_t v32 = sub_A7420();
        if (qword_D7D90 != -1) {
          swift_once();
        }
        uint64_t v33 = qword_DF5C8;
        os_log_type_t v34 = v32;
        if (os_log_type_enabled((os_log_t)qword_DF5C8, v32))
        {
          uint64_t v35 = (uint8_t *)swift_slowAlloc();
          double v40 = COERCE_DOUBLE(swift_slowAlloc());
          *(_DWORD *)uint64_t v35 = 136315138;
          uint64_t v41 = *(void *)&v17;
          CGFloat v42 = v23;
          type metadata accessor for CGSize(0);
          uint64_t v36 = sub_A71F0();
          uint64_t v41 = sub_15F94(v36, v37, (uint64_t *)&v40);
          sub_A7600();
          swift_bridgeObjectRelease();
          _os_log_impl(&def_5ED54, v33, v34, "currentStateOffset %s", v35, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
      }
    }
  }
  return v17;
}

uint64_t sub_1CBDC()
{
  return swift_release();
}

uint64_t sub_1CC48()
{
  if (qword_D7E58 != -1) {
    swift_once();
  }
  AXLTSettingsManager.contentCategory.getter();
  uint64_t v1 = v0;
  sub_A7540();

  type metadata accessor for LiveCaptionsRootView();
  sub_7AF4(&qword_D8380);
  return sub_A6E90();
}

void sub_1CD14()
{
  sub_A6290();
  sub_A6290();
  sub_A62A0();
  uint64_t v0 = sub_A62A0();
  double v1 = LiveSpeechStore.SpeechContext.init(text:highlightRange:)(v0);
  double v3 = v2;
  double v5 = v4;
  double v7 = v6;
  type metadata accessor for LiveCaptionsRootView();
  sub_7AF4(&qword_D87D8);
  sub_A6E90();
  sub_A6E80();
  sub_1CE68(v1, v3, v5, v7);
  if (qword_D7D98 != -1) {
    swift_once();
  }
  AXLTCaptionsProvider.activate(_:)(1);
}

void sub_1CE68(double a1, double a2, double a3, double a4)
{
  uint64_t v5 = v4;
  double v82 = a1;
  uint64_t v9 = (int *)type metadata accessor for LiveCaptionsRootView();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A7420();
  if (qword_D7D90 != -1) {
    swift_once();
  }
  char v80 = v11;
  sub_A5FD0();
  id v12 = [self standardUserDefaults];
  NSString v13 = sub_A71A0();
  id v14 = [v12 integerForKey:v13];

  if ((unint64_t)v14 >= 5) {
    char v15 = 1;
  }
  else {
    char v15 = (char)v14;
  }
  uint64_t v16 = v5 + v9[7];
  uint64_t v18 = *(void *)(v16 + 8);
  LOBYTE(v87) = *(unsigned char *)v16;
  char v17 = v87;
  *((void *)&v87 + 1) = v18;
  LOBYTE(v83.width) = v15;
  sub_7AF4(&qword_D8800);
  sub_A6E90();
  LOBYTE(v87) = v17;
  *((void *)&v87 + 1) = v18;
  sub_A6E80();
  if (!LOBYTE(v83.width))
  {
    LOBYTE(v87) = v17;
    *((void *)&v87 + 1) = v18;
    LOBYTE(v83.width) = 1;
    sub_A6E90();
  }
  NSString v19 = sub_A71A0();
  uint64_t v20 = (NSString *)[v12 stringForKey:v19];

  if (v20)
  {
    CGSize v21 = CGSizeFromString(v20);

    uint64_t v22 = v5 + v9[12];
    uint64_t v23 = *(void *)(v22 + 16);
    long long v87 = *(_OWORD *)v22;
    *(void *)&long long v88 = v23;
    CGSize v83 = v21;
    sub_7AF4(&qword_D8178);
    sub_A6E90();
    if (!AXDeviceIsPad()) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v24 = (void *)(v5 + v9[12]);
    uint64_t v26 = v24[1];
    uint64_t v27 = v24[2];
    *(void *)&long long v87 = *v24;
    uint64_t v25 = v87;
    *((void *)&v87 + 1) = v26;
    *(void *)&long long v88 = v27;
    swift_retain();
    sub_7AF4(&qword_D8178);
    sub_A6E80();
    *(void *)&long long v87 = v25;
    *((void *)&v87 + 1) = v26;
    *(void *)&long long v88 = v27;
    CGFloat width = 0.0;
    CGFloat height = v83.height;
    sub_A6E90();
    swift_release();
    if (!AXDeviceIsPad()) {
      goto LABEL_16;
    }
  }
  NSString v28 = sub_A71A0();
  int v29 = (NSString *)[v12 stringForKey:v28];

  if (v29)
  {
    CGSize v30 = CGSizeFromString(v29);

    uint64_t v31 = v5 + v9[15];
    uint64_t v32 = *(void *)(v31 + 16);
    long long v87 = *(_OWORD *)v31;
    *(void *)&long long v88 = v32;
    CGSize v83 = v30;
    sub_7AF4(&qword_D8178);
    sub_A6E90();
  }
  uint64_t v33 = (uint64_t *)(v5 + v9[15]);
  uint64_t v34 = *v33;
  uint64_t v35 = v33[1];
  uint64_t v36 = v33[2];
  *(void *)&long long v87 = *v33;
  *((void *)&v87 + 1) = v35;
  *(void *)&long long v88 = v36;
  sub_7AF4(&qword_D8178);
  sub_A6E80();
  if (v83.height == 0.0)
  {
    double v37 = sub_239FC();
    *(void *)&long long v87 = v34;
    *((void *)&v87 + 1) = v35;
    *(void *)&long long v88 = v36;
    swift_retain();
    sub_A6E80();
    *(void *)&long long v87 = v34;
    *((void *)&v87 + 1) = v35;
    *(void *)&long long v88 = v36;
    CGFloat width = v83.width;
    CGFloat height = v37;
    sub_A6E90();
    swift_release();
  }
LABEL_16:
  NSString v38 = sub_A71A0();
  uint64_t v39 = (NSString *)[v12 stringForKey:v38];

  double v81 = a2;
  if (!v39)
  {
    LOBYTE(v87) = v17;
    *((void *)&v87 + 1) = v18;
    sub_A6E80();
    if (LOBYTE(v83.width) == 2)
    {
      char v45 = (void *)(v5 + v9[15]);
      uint64_t v47 = v45[1];
      uint64_t v48 = v45[2];
      *(void *)&long long v87 = *v45;
      uint64_t v46 = v87;
      *((void *)&v87 + 1) = v47;
      *(void *)&long long v88 = v48;
      sub_7AF4(&qword_D8178);
      sub_A6E80();
      CGFloat v49 = (a3 - v83.width) * 0.5;
      *(void *)&long long v87 = v46;
      *((void *)&v87 + 1) = v47;
      *(void *)&long long v88 = v48;
      sub_A6E80();
      uint64_t v50 = v5 + v9[11];
      CGFloat v42 = *(double *)v50;
      CGFloat v43 = *(double *)(v50 + 8);
      uint64_t v44 = *(void *)(v50 + 16);
      *(void *)&long long v87 = *(void *)v50;
      *((CGFloat *)&v87 + 1) = v43;
      *(void *)&long long v88 = v44;
      v83.CGFloat width = v49;
      v83.CGFloat height = a4 - v83.height + -24.0;
      goto LABEL_30;
    }
    LOBYTE(v87) = v17;
    *((void *)&v87 + 1) = v18;
    sub_A6E80();
    int width_low = LOBYTE(v83.width);
    uint64_t v52 = (uint64_t)v80;
    sub_28F28(v5, (uint64_t)v80, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    if (width_low)
    {
      uint64_t v53 = v52 + v9[7];
      char v54 = *(unsigned char *)v53;
      uint64_t v55 = *(void *)(v53 + 8);
      LOBYTE(v87) = v54;
      *((void *)&v87 + 1) = v55;
      sub_A6E80();
      int v56 = LOBYTE(v83.width);
      sub_28F90(v52, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
      if (v56 != 1)
      {
        char v17 = *(unsigned char *)v16;
        uint64_t v18 = *(void *)(v16 + 8);
        LOBYTE(v87) = *(unsigned char *)v16;
        *((void *)&v87 + 1) = v18;
        sub_A6E80();
        if (LOBYTE(v83.width)) {
          double v57 = 24.0;
        }
        else {
          double v57 = 32.0;
        }
        double v58 = sub_237D8(a3, a4) - v57;
        double v59 = sub_238F4();
        goto LABEL_28;
      }
    }
    else
    {
      sub_28F90(v52, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    }
    char v17 = *(unsigned char *)v16;
    uint64_t v18 = *(void *)(v16 + 8);
    LOBYTE(v87) = *(unsigned char *)v16;
    *((void *)&v87 + 1) = v18;
    sub_A6E80();
    double v58 = sub_235B0(SLOBYTE(v83.width), v82, a2, a3, a4);
LABEL_28:
    uint64_t v60 = v5 + v9[11];
    CGFloat v42 = *(double *)v60;
    CGFloat v43 = *(double *)(v60 + 8);
    uint64_t v44 = *(void *)(v60 + 16);
    *(void *)&long long v87 = *(void *)v60;
    *((CGFloat *)&v87 + 1) = v43;
    *(void *)&long long v88 = v44;
    v83.CGFloat width = (a3 - v58) * 0.5;
    v83.CGFloat height = a4 - v59 + -24.0;
    goto LABEL_29;
  }
  CGSize v40 = CGSizeFromString(v39);

  uint64_t v41 = v5 + v9[11];
  CGFloat v42 = *(double *)v41;
  CGFloat v43 = *(double *)(v41 + 8);
  uint64_t v44 = *(void *)(v41 + 16);
  *(void *)&long long v87 = *(void *)v41;
  *((CGFloat *)&v87 + 1) = v43;
  *(void *)&long long v88 = v44;
  CGSize v83 = v40;
LABEL_29:
  sub_7AF4(&qword_D8178);
LABEL_30:
  sub_A6E90();
  LOBYTE(v87) = v17;
  *((void *)&v87 + 1) = v18;
  sub_A6E80();
  if (LOBYTE(v83.width) == 4)
  {
    char v61 = 1;
  }
  else
  {
    LOBYTE(v87) = v17;
    *((void *)&v87 + 1) = v18;
    sub_A6E80();
    char v61 = LOBYTE(v83.width);
  }
  uint64_t v62 = v5 + v9[8];
  char v63 = *(unsigned char *)v62;
  uint64_t v64 = *(void *)(v62 + 8);
  LOBYTE(v87) = v63;
  *((void *)&v87 + 1) = v64;
  LOBYTE(v83.width) = v61;
  sub_A6E90();
  LOBYTE(v87) = v17;
  *((void *)&v87 + 1) = v18;
  sub_A6E80();
  if (LOBYTE(v83.width) == 4)
  {
    uint64_t v65 = (uint64_t *)(v5 + v9[12]);
    uint64_t v66 = *v65;
    uint64_t v67 = v65[1];
    uint64_t v68 = v65[2];
    *(void *)&long long v87 = *v65;
    *((void *)&v87 + 1) = v67;
    *(void *)&long long v88 = v68;
    sub_7AF4(&qword_D8178);
    sub_A6E80();
    CGFloat v69 = v83.height;
    *(CGFloat *)&long long v87 = v42;
    *((CGFloat *)&v87 + 1) = v43;
    *(void *)&long long v88 = v44;
    swift_retain();
    sub_A6E80();
    *(CGFloat *)&long long v87 = v42;
    *((CGFloat *)&v87 + 1) = v43;
    *(void *)&long long v88 = v44;
    CGFloat width = v83.width;
    CGFloat height = v69;
    sub_A6E90();
    swift_release();
    sub_22F88();
    LiveSpeechUIService::LiveSpeechCaptionsWindowState v70 = LiveSpeechUIService_LiveSpeechCaptionsWindowState_pip;
  }
  else
  {
    *(CGFloat *)&long long v87 = v42;
    *((CGFloat *)&v87 + 1) = v43;
    *(void *)&long long v88 = v44;
    sub_7AF4(&qword_D8178);
    sub_A6E80();
    CGFloat v71 = v83.height;
    char v72 = (void *)(v5 + v9[12]);
    uint64_t v67 = v72[1];
    uint64_t v68 = v72[2];
    *(void *)&long long v87 = *v72;
    uint64_t v66 = v87;
    *((void *)&v87 + 1) = v67;
    *(void *)&long long v88 = v68;
    swift_retain();
    sub_A6E80();
    *(void *)&long long v87 = v66;
    *((void *)&v87 + 1) = v67;
    *(void *)&long long v88 = v68;
    CGFloat width = v83.width;
    CGFloat height = v71;
    sub_A6E90();
    swift_release();
    sub_21228(a3, a4);
    [*(id *)(v5 + v9[23]) idleSleepTimerDisabled:1];
    LiveSpeechUIService::LiveSpeechCaptionsWindowState v70 = LiveSpeechUIService_LiveSpeechCaptionsWindowState_compact;
  }
  LiveSpeechCaptionsViewsCoordinator.updateLiveCaptionsWindowState(_:)(v70);
  *(void *)&long long v87 = v66;
  *((void *)&v87 + 1) = v67;
  *(void *)&long long v88 = v68;
  sub_7AF4(&qword_D8178);
  sub_A6E80();
  double v73 = v83.width;
  double v74 = v83.height;
  if (qword_D7D50 != -1) {
    swift_once();
  }
  double v75 = a4 - *(double *)&qword_DF548;
  if (v74 >= 0.0) {
    double v76 = v74;
  }
  else {
    double v76 = 0.0;
  }
  if (v75 >= v74) {
    double v75 = v76;
  }
  double v77 = a3 - *(double *)&qword_DF540;
  *(void *)&long long v87 = v66;
  *((void *)&v87 + 1) = v67;
  *(void *)&long long v88 = v68;
  if (a3 * 0.5 >= v73) {
    double v77 = 0.0;
  }
  v83.CGFloat width = v77;
  v83.CGFloat height = v75;
  sub_A6E90();
  *(CGFloat *)&long long v87 = v42;
  *((CGFloat *)&v87 + 1) = v43;
  *(void *)&long long v88 = v44;
  sub_A6E80();
  long long v87 = 0u;
  long long v88 = 0u;
  char v89 = 1;
  sub_21634((uint64_t)&v87, v83.width, v83.height, 0.0, 0.0, v82, v81, a3, a4);
  v83.CGFloat width = v42;
  v83.CGFloat height = v43;
  uint64_t v84 = v44;
  CGFloat width = v78;
  CGFloat height = v79;
  swift_retain();
  sub_A6E90();
  swift_release();
}

void sub_1D86C()
{
  if (qword_D7D98 != -1) {
    swift_once();
  }
  AXLTCaptionsProvider.activate(_:)(0);
}

uint64_t sub_1D8CC()
{
  os_log_type_t v0 = sub_A7420();
  if (qword_D7D90 != -1) {
    swift_once();
  }
  double v1 = qword_DF5C8;
  os_log_type_t v2 = v0;
  uint64_t v3 = os_log_type_enabled((os_log_t)qword_DF5C8, v0);
  if (v3)
  {
    uint64_t v4 = swift_slowAlloc();
    v10[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    type metadata accessor for CGSize(0);
    uint64_t v5 = sub_A71F0();
    sub_15F94(v5, v6, v10);
    sub_A7600();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    uint64_t v7 = sub_A71F0();
    sub_15F94(v7, v8, v10);
    sub_A7600();
    swift_bridgeObjectRelease();
    _os_log_impl(&def_5ED54, v1, v2, "ContainerSize old: %s new: %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v3 = swift_slowDealloc();
  }
  __chkstk_darwin(v3);
  sub_A7080();
  sub_A6300();
  return swift_release();
}

uint64_t sub_1DB14()
{
  sub_A6290();
  uint64_t v0 = sub_A6290();
  char v1 = COERCE_UNSIGNED_INT64(LiveSpeechStore.SpeechContext.init(text:highlightRange:)(v0));
  type metadata accessor for LiveCaptionsRootView();
  sub_7AF4(&qword_D87D8);
  sub_A6E90();
  sub_7AF4(&qword_D8800);
  uint64_t result = sub_A6E80();
  if (v1 == 4)
  {
    sub_7AF4(&qword_D8178);
    sub_A6E80();
    sub_A6E80();
    if (qword_D7D50 != -1) {
      swift_once();
    }
    return sub_A6E90();
  }
  return result;
}

uint64_t sub_1DD14()
{
  type metadata accessor for LiveCaptionsRootView();
  sub_7AF4(&qword_D8380);
  uint64_t result = sub_A6E80();
  if (v1 == 1)
  {
    __chkstk_darwin(result);
    sub_A7080();
    sub_A6300();
    return swift_release();
  }
  return result;
}

uint64_t sub_1DDF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>, double a9@<D6>)
{
  uint64_t v105 = a2;
  uint64_t v118 = a3;
  uint64_t v117 = sub_7AF4(&qword_D8978);
  __chkstk_darwin(v117);
  uint64_t v114 = (char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_7AF4(&qword_D8980);
  __chkstk_darwin(v17 - 8);
  uint64_t v119 = (uint64_t *)((char *)&v101 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v106 = sub_7AF4(&qword_D8988);
  __chkstk_darwin(v106);
  uint64_t v108 = (uint64_t)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = sub_7AF4(&qword_D8990);
  __chkstk_darwin(v107);
  uint64_t v111 = (uint64_t)&v101 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_7AF4(&qword_D8998);
  __chkstk_darwin(v110);
  uint64_t v112 = (uint64_t)&v101 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v109 = (uint64_t)&v101 - v23;
  __chkstk_darwin(v24);
  uint64_t v113 = (uint64_t)&v101 - v25;
  uint64_t v120 = sub_7AF4(&qword_D89A0);
  __chkstk_darwin(v120);
  uint64_t v115 = (uint64_t)&v101 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = (int *)type metadata accessor for LiveCaptionsRootView();
  uint64_t v104 = *((void *)v27 - 1);
  uint64_t v28 = *(void *)(v104 + 64);
  __chkstk_darwin(v27);
  int v29 = (char *)&v101 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for LiveSpeechCaptionsPipView();
  __chkstk_darwin(v116);
  uint64_t v31 = (char *)&v101 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = a1 + v27[7];
  char v33 = *(unsigned char *)v32;
  uint64_t v34 = *(void *)(v32 + 8);
  LOBYTE(v123) = *(unsigned char *)v32;
  uint64_t v124 = v34;
  sub_7AF4(&qword_D8800);
  sub_A6E80();
  if (v121 == 4)
  {
    uint64_t v35 = (uint64_t *)(a1 + v27[19]);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    *(void *)&long long v121 = v36;
    *((void *)&v121 + 1) = v37;
    sub_7AF4(&qword_D8808);
    sub_A6EA0();
    uint64_t v39 = v123;
    uint64_t v38 = v124;
    double v40 = v125;
    uint64_t v41 = a1 + v27[12];
    uint64_t v42 = *(void *)(v41 + 16);
    long long v121 = *(_OWORD *)v41;
    uint64_t v122 = v42;
    sub_7AF4(&qword_D8178);
    sub_A6EA0();
    uint64_t v43 = v123;
    uint64_t v44 = v124;
    double v45 = v125;
    double v46 = v126;
    sub_28F28(a1, (uint64_t)&v101 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    unint64_t v47 = (*(unsigned __int8 *)(v104 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
    unint64_t v48 = (v28 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v49 = swift_allocObject();
    sub_276B4((uint64_t)v29, v49 + v47);
    uint64_t v50 = (double *)(v49 + v48);
    *uint64_t v50 = a4;
    v50[1] = a5;
    v50[2] = a6;
    v50[3] = a7;
    sub_E204(1, v39, v38, v43, v44, (uint64_t)sub_28E68, v49, (uint64_t)LiveSpeechStore.SpeechContext.init(text:highlightRange:), (uint64_t)v31, v40, v45, v46, a4, a5, a6, a7, 0);
    sub_28F28((uint64_t)v31, v115, (uint64_t (*)(void))type metadata accessor for LiveSpeechCaptionsPipView);
    swift_storeEnumTagMultiPayload();
    sub_2A2BC(&qword_D89B8, (void (*)(uint64_t))type metadata accessor for LiveSpeechCaptionsPipView);
    sub_A45C(&qword_D89C0, &qword_D8978);
    sub_A6860();
    return sub_28F90((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for LiveSpeechCaptionsPipView);
  }
  else
  {
    uint64_t v52 = v115;
    LOBYTE(v123) = v33;
    uint64_t v124 = v34;
    sub_A6E80();
    int v102 = v121;
    if (qword_D7E58 != -1) {
      swift_once();
    }
    uint64_t v53 = static AXLTSettingsManager.shared;
    double v101 = AXLTSettingsManager.buttonScaledHeight.getter() + 12.0 + 6.0;
    char v54 = (uint64_t *)(v53 + OBJC_IVAR___AXLTSettingsManager_backgroundColor);
    swift_beginAccess();
    uint64_t v127 = *v54;
    swift_retain();
    sub_A6E70();
    uint64_t v103 = *((void *)&v121 + 1);
    uint64_t v104 = v121;
    uint64_t v55 = sub_A6750();
    int v56 = v119;
    *uint64_t v119 = v55;
    v56[1] = 0;
    *((unsigned char *)v56 + 16) = 0;
    uint64_t v57 = sub_7AF4(&qword_D89A8);
    sub_1ECC0(a1, v105, (uint64_t)v56 + *(int *)(v57 + 44), a4, a5, a6, a7, a8, a9);
    char v58 = sub_A6A20();
    LOBYTE(v121) = v33;
    *((void *)&v121 + 1) = v34;
    sub_A6E80();
    uint64_t v59 = v52;
    if (v127 == 3 && (sub_17AB0() & 1) == 0 && qword_D7D80 != -1) {
      swift_once();
    }
    sub_A6140();
    uint64_t v61 = v60;
    uint64_t v63 = v62;
    uint64_t v65 = v64;
    uint64_t v67 = v66;
    uint64_t v68 = v119;
    uint64_t v69 = v108;
    sub_8860((uint64_t)v119, v108, &qword_D8980);
    uint64_t v70 = v69 + *(int *)(v106 + 36);
    *(unsigned char *)uint64_t v70 = v58;
    *(void *)(v70 + 8) = v61;
    *(void *)(v70 + 16) = v63;
    *(void *)(v70 + 24) = v65;
    *(void *)(v70 + 32) = v67;
    *(unsigned char *)(v70 + 40) = 0;
    sub_A35C((uint64_t)v68, &qword_D8980);
    char v71 = sub_A6A40();
    uint64_t v72 = *(void *)(v32 + 8);
    LOBYTE(v121) = *(unsigned char *)v32;
    *((void *)&v121 + 1) = v72;
    sub_A6E80();
    sub_A6140();
    uint64_t v74 = v73;
    uint64_t v76 = v75;
    uint64_t v78 = v77;
    uint64_t v80 = v79;
    uint64_t v81 = v111;
    sub_8860(v69, v111, &qword_D8988);
    uint64_t v82 = v81 + *(int *)(v107 + 36);
    *(unsigned char *)uint64_t v82 = v71;
    *(void *)(v82 + 8) = v74;
    *(void *)(v82 + 16) = v76;
    *(void *)(v82 + 24) = v78;
    *(void *)(v82 + 32) = v80;
    *(unsigned char *)(v82 + 40) = 0;
    sub_A35C(v69, &qword_D8988);
    char v83 = sub_A6A60();
    uint64_t v84 = *(void *)(v32 + 8);
    LOBYTE(v121) = *(unsigned char *)v32;
    *((void *)&v121 + 1) = v84;
    sub_A6E80();
    sub_A6140();
    uint64_t v86 = v85;
    uint64_t v88 = v87;
    uint64_t v90 = v89;
    uint64_t v92 = v91;
    uint64_t v93 = v109;
    sub_8860(v81, v109, &qword_D8990);
    uint64_t v94 = v93 + *(int *)(v110 + 36);
    *(unsigned char *)uint64_t v94 = v83;
    *(void *)(v94 + 8) = v86;
    *(void *)(v94 + 16) = v88;
    *(void *)(v94 + 24) = v90;
    *(void *)(v94 + 32) = v92;
    *(unsigned char *)(v94 + 40) = 0;
    sub_A35C(v81, &qword_D8990);
    uint64_t v95 = v93;
    uint64_t v96 = v113;
    sub_29C10(v95, v113, &qword_D8998);
    uint64_t v97 = v112;
    sub_8860(v96, v112, &qword_D8998);
    uint64_t v98 = (uint64_t)v114;
    *uint64_t v114 = v102;
    *(double *)(v98 + 8) = v101;
    uint64_t v99 = v103;
    *(void *)(v98 + 16) = v104;
    *(void *)(v98 + 24) = v99;
    uint64_t v100 = sub_7AF4(&qword_D89B0);
    sub_8860(v97, v98 + *(int *)(v100 + 48), &qword_D8998);
    swift_retain_n();
    swift_retain_n();
    sub_A35C(v97, &qword_D8998);
    swift_release();
    swift_release();
    sub_8860(v98, v59, &qword_D8978);
    swift_storeEnumTagMultiPayload();
    sub_2A2BC(&qword_D89B8, (void (*)(uint64_t))type metadata accessor for LiveSpeechCaptionsPipView);
    sub_A45C(&qword_D89C0, &qword_D8978);
    sub_A6860();
    sub_A35C(v98, &qword_D8978);
    sub_A35C(v96, &qword_D8998);
    swift_release();
    return swift_release();
  }
}

id sub_1E8E4(double a1, double a2, double a3, double a4)
{
  type metadata accessor for LiveCaptionsRootView();
  sub_7AF4(&qword_D8800);
  sub_A6E80();
  return sub_1E980(v9, a1, a2, a3, a4);
}

id sub_1E980(uint64_t a1, double a2, double a3, double a4, double a5)
{
  if (a1 == 4)
  {
    __chkstk_darwin(a1);
    sub_A7080();
    sub_A6300();
    swift_release();
    sub_1A748();
    uint64_t v8 = type metadata accessor for LiveCaptionsRootView();
    LiveSpeechCaptionsViewsCoordinator.updateLiveCaptionsWindowState(_:)(LiveSpeechUIService_LiveSpeechCaptionsWindowState_pip);
    sub_22F88();
    return [*(id *)(v5 + *(int *)(v8 + 92)) idleSleepTimerDisabled:0];
  }
  else
  {
    uint64_t v10 = type metadata accessor for LiveCaptionsRootView();
    LiveSpeechCaptionsViewsCoordinator.updateLiveCaptionsWindowState(_:)(LiveSpeechUIService_LiveSpeechCaptionsWindowState_compact);
    [*(id *)(v5 + *(int *)(v10 + 92)) idleSleepTimerDisabled:1];
    sub_7AF4(&qword_D8370);
    sub_A6E80();
    [v12 invalidate];

    sub_A6E90();
    sub_7AF4(&qword_D8380);
    sub_A6E80();
    uint64_t v11 = sub_21228(a4, a5);
    __chkstk_darwin(v11);
    sub_A7080();
    sub_A6300();
    return (id)swift_release();
  }
}

uint64_t sub_1ECC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>, double a9@<D6>)
{
  double v188 = a8;
  double v189 = a9;
  uint64_t v211 = a3;
  uint64_t v212 = a2;
  uint64_t v208 = sub_7AF4(&qword_D89C8);
  __chkstk_darwin(v208);
  v206 = (char *)&v188 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_7AF4(&qword_D89D0);
  uint64_t v191 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  v190 = (char *)&v188 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_7AF4(&qword_D89D8);
  uint64_t v217 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v188 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v207 = (char *)&v188 - v21;
  __chkstk_darwin(v22);
  v216 = (char *)&v188 - v23;
  uint64_t v24 = sub_7AF4(&qword_D89E0);
  __chkstk_darwin(v24 - 8);
  uint64_t v199 = (uint64_t)&v188 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v213 = (uint64_t)&v188 - v27;
  uint64_t v28 = type metadata accessor for LiveCaptionsRootView();
  uint64_t v200 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v205 = (uint64_t)&v188 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v204 = (uint64_t)&v188 - v31;
  __chkstk_darwin(v32);
  uint64_t v203 = (uint64_t)&v188 - v33;
  __chkstk_darwin(v34);
  uint64_t v202 = (uint64_t)&v188 - v35;
  __chkstk_darwin(v36);
  uint64_t v215 = (uint64_t)&v188 - v37;
  __chkstk_darwin(v38);
  double v40 = (char *)&v188 - v39;
  uint64_t v201 = v41;
  __chkstk_darwin(v42);
  uint64_t v44 = (char *)&v188 - v43;
  uint64_t v45 = sub_7AF4(&qword_D89E8);
  __chkstk_darwin(v45 - 8);
  uint64_t v214 = (uint64_t)&v188 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  uint64_t v220 = (uint64_t)&v188 - v48;
  uint64_t v49 = a1 + *(int *)(v28 + 28);
  char v50 = *(unsigned char *)v49;
  uint64_t v223 = v49;
  uint64_t v51 = *(void *)(v49 + 8);
  LOBYTE(v258[0]) = v50;
  *((void *)&v258[0] + 1) = v51;
  uint64_t v52 = sub_7AF4(&qword_D8800);
  sub_A6E80();
  int v53 = LOBYTE(v257[0]);
  sub_28F28(a1, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  uint64_t v221 = v52;
  uint64_t v222 = a1;
  uint64_t v218 = v17;
  v219 = (int *)v28;
  uint64_t v209 = v15;
  v210 = v19;
  if (v53 == 1)
  {
    sub_28F90((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    sub_28F28(a1, (uint64_t)v40, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
LABEL_4:
    sub_28F90((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    goto LABEL_5;
  }
  char v54 = &v44[*(int *)(v28 + 28)];
  char v55 = *v54;
  uint64_t v56 = *((void *)v54 + 1);
  LOBYTE(v258[0]) = v55;
  *((void *)&v258[0] + 1) = v56;
  sub_A6E80();
  int v57 = LOBYTE(v257[0]);
  sub_28F90((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  sub_28F28(a1, (uint64_t)v40, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  if (v57 == 3) {
    goto LABEL_4;
  }
  uint64_t v153 = &v40[v219[7]];
  char v154 = *v153;
  uint64_t v155 = *((void *)v153 + 1);
  LOBYTE(v258[0]) = v154;
  *((void *)&v258[0] + 1) = v155;
  sub_A6E80();
  int v156 = LOBYTE(v257[0]);
  sub_28F90((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  if (v156 != 2)
  {
    uint64_t v157 = sub_7AF4(&qword_D89F0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v157 - 8) + 56))(v220, 1, 1, v157);
    goto LABEL_9;
  }
LABEL_5:
  sub_2028C(v212, v213);
  uint64_t v58 = *(void *)(v223 + 8);
  LOBYTE(v258[0]) = *(unsigned char *)v223;
  *((void *)&v258[0] + 1) = v58;
  sub_A6E80();
  int v59 = LOBYTE(v257[0]);
  if (LOBYTE(v257[0]) == 3)
  {
    sub_A7030();
    uint64_t v198 = 1;
    sub_A6270();
    uint64_t v196 = v282;
    uint64_t v197 = v281;
    uint64_t v60 = v283;
    uint64_t v61 = v284;
    uint64_t v62 = v285;
    uint64_t v63 = v286;
  }
  else
  {
    uint64_t v197 = 0;
    uint64_t v198 = 0;
    uint64_t v196 = 0;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
  }
  uint64_t v64 = v213;
  uint64_t v65 = v199;
  sub_8860(v213, v199, &qword_D89E0);
  uint64_t v66 = v214;
  sub_8860(v65, v214, &qword_D89E0);
  uint64_t v67 = v66 + *(int *)(sub_7AF4(&qword_D8AB8) + 48);
  uint64_t v68 = v198;
  *(void *)uint64_t v67 = 0;
  *(void *)(v67 + 8) = v68;
  uint64_t v69 = v196;
  *(void *)(v67 + 16) = v197;
  *(void *)(v67 + 24) = v69;
  *(void *)(v67 + 32) = v60;
  *(void *)(v67 + 40) = v61;
  *(void *)(v67 + 48) = v62;
  *(void *)(v67 + 56) = v63;
  *(unsigned char *)(v67 + 64) = v59 != 3;
  sub_A35C(v64, &qword_D89E0);
  sub_A35C(v65, &qword_D89E0);
  uint64_t v70 = sub_7AF4(&qword_D89F0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v66, 0, 1, v70);
  sub_29C10(v66, v220, &qword_D89E8);
LABEL_9:
  char v71 = v219;
  uint64_t v72 = v222;
  uint64_t v73 = *(void **)(v222 + v219[27] + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v74 = v73;
  sub_A60D0();

  swift_release();
  swift_release();
  uint64_t v199 = *(void *)&v258[0];
  uint64_t v75 = (char *)v223;
  uint64_t v76 = *(void *)(v223 + 8);
  LOBYTE(v258[0]) = *(unsigned char *)v223;
  *((void *)&v258[0] + 1) = v76;
  sub_A6E80();
  LODWORD(v198) = LOBYTE(v257[0]);
  uint64_t v77 = (uint64_t *)(v72 + v71[18]);
  uint64_t v78 = *v77;
  uint64_t v79 = v77[1];
  *(void *)&v257[0] = v78;
  *((void *)&v257[0] + 1) = v79;
  sub_7AF4(&qword_D8808);
  sub_A6EA0();
  uint64_t v196 = *((void *)&v258[0] + 1);
  uint64_t v197 = *(void *)&v258[0];
  double v80 = *(double *)&v258[1];
  v257[0] = *(_OWORD *)(v72 + v71[9]);
  sub_7AF4(&qword_D89F8);
  sub_A6EA0();
  uint64_t v194 = *((void *)&v258[0] + 1);
  uint64_t v195 = *(void *)&v258[0];
  uint64_t v193 = *(void *)&v258[1];
  uint64_t v81 = v72 + v71[10];
  long long v82 = *(_OWORD *)v81;
  uint64_t v83 = *(void *)(v81 + 16);
  v257[0] = v82;
  *(void *)&v257[1] = v83;
  sub_7AF4(&qword_D8A00);
  sub_A6EA0();
  long long v192 = *(_OWORD *)((char *)v258 + 8);
  uint64_t v84 = *(void *)&v258[0];
  uint64_t v85 = *((void *)&v258[1] + 1);
  uint64_t v86 = v215;
  sub_28F28(v72, v215, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  uint64_t v87 = *(unsigned __int8 *)(v200 + 80);
  uint64_t v88 = (v87 + 16) & ~v87;
  uint64_t v200 = v87 | 7;
  v201 += v88;
  unint64_t v89 = (v201 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v90 = swift_allocObject();
  uint64_t v213 = v88;
  sub_276B4(v86, v90 + v88);
  uint64_t v91 = (double *)(v90 + v89);
  *uint64_t v91 = a4;
  v91[1] = a5;
  v91[2] = a6;
  v91[3] = a7;
  *((void *)&v186 + 1) = sub_2943C;
  uint64_t v187 = v90;
  *(void *)&long long v186 = v85;
  uint64_t v92 = v72;
  sub_97958(v199, v198, v197, v196, v195, v194, v193, v84, (uint64_t)v279, v80, v192, v186, v187);
  LODWORD(v199) = sub_A6A40();
  char v93 = *v75;
  uint64_t v94 = *((void *)v75 + 1);
  LOBYTE(v258[0]) = *v75;
  *((void *)&v258[0] + 1) = v94;
  sub_A6E80();
  if (LOBYTE(v257[0]) == 3) {
    sub_16A30();
  }
  sub_A6140();
  uint64_t v197 = v96;
  uint64_t v198 = v95;
  uint64_t v195 = v98;
  uint64_t v196 = v97;
  LODWORD(v194) = sub_A6A60();
  LOBYTE(v258[0]) = v93;
  *((void *)&v258[0] + 1) = v94;
  sub_A6E80();
  uint64_t v99 = v206;
  if (LOBYTE(v257[0]) == 3) {
    sub_16A30();
  }
  long long v275 = v279[10];
  long long v276 = v279[11];
  long long v277 = v279[12];
  uint64_t v278 = v280;
  long long v271 = v279[6];
  long long v272 = v279[7];
  long long v273 = v279[8];
  long long v274 = v279[9];
  long long v267 = v279[2];
  long long v268 = v279[3];
  long long v269 = v279[4];
  long long v270 = v279[5];
  long long v265 = v279[0];
  long long v266 = v279[1];
  char v262 = 0;
  sub_A6140();
  uint64_t v101 = v100;
  uint64_t v103 = v102;
  uint64_t v105 = v104;
  uint64_t v107 = v106;
  char v108 = sub_A6A20();
  LOBYTE(v258[0]) = v93;
  *((void *)&v258[0] + 1) = v94;
  sub_A6E80();
  int v109 = LOBYTE(v257[0]);
  uint64_t v110 = v202;
  sub_28F28(v92, v202, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  uint64_t v111 = v219;
  if (!v109)
  {
    sub_28F90(v110, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    uint64_t v116 = v203;
    sub_28F28(v92, v203, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    goto LABEL_19;
  }
  uint64_t v112 = v110 + v219[7];
  char v113 = *(unsigned char *)v112;
  uint64_t v114 = *(void *)(v112 + 8);
  LOBYTE(v258[0]) = v113;
  *((void *)&v258[0] + 1) = v114;
  sub_A6E80();
  int v115 = LOBYTE(v257[0]);
  sub_28F90(v110, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  uint64_t v116 = v203;
  sub_28F28(v92, v203, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  if (v115 == 1)
  {
LABEL_19:
    sub_28F90(v116, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    goto LABEL_20;
  }
  uint64_t v117 = v116 + v111[7];
  char v118 = *(unsigned char *)v117;
  uint64_t v119 = *(void *)(v117 + 8);
  LOBYTE(v258[0]) = v118;
  *((void *)&v258[0] + 1) = v119;
  sub_A6E80();
  int v120 = LOBYTE(v257[0]);
  sub_28F90(v116, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  if (v120 != 2 && qword_D7D80 != -1) {
    swift_once();
  }
LABEL_20:
  char v121 = v262;
  char v261 = 0;
  sub_A6140();
  uint64_t v123 = v122;
  uint64_t v125 = v124;
  uint64_t v127 = v126;
  uint64_t v129 = v128;
  char v130 = sub_A6A30();
  uint64_t v131 = *(void *)(v223 + 8);
  LOBYTE(v258[0]) = *(unsigned char *)v223;
  *((void *)&v258[0] + 1) = v131;
  sub_A6E80();
  int v132 = LOBYTE(v257[0]);
  uint64_t v133 = v92;
  uint64_t v134 = v204;
  sub_28F28(v133, v204, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  if (v132)
  {
    uint64_t v135 = v134 + v111[7];
    char v136 = *(unsigned char *)v135;
    uint64_t v137 = *(void *)(v135 + 8);
    LOBYTE(v258[0]) = v136;
    *((void *)&v258[0] + 1) = v137;
    sub_A6E80();
  }
  sub_28F90(v134, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  char v138 = v261;
  char v259 = 0;
  sub_A6140();
  char v260 = 0;
  v258[10] = v275;
  v258[11] = v276;
  v258[12] = v277;
  *(void *)&v258[13] = v278;
  v258[6] = v271;
  v258[7] = v272;
  v258[8] = v273;
  v258[9] = v274;
  v258[2] = v267;
  v258[3] = v268;
  v258[4] = v269;
  v258[5] = v270;
  v258[0] = v265;
  v258[1] = v266;
  BYTE8(v258[13]) = 0;
  *(_DWORD *)((char *)&v258[13] + 9) = *(_DWORD *)v264;
  HIDWORD(v258[13]) = *(_DWORD *)&v264[3];
  LOBYTE(v258[14]) = v199;
  *(_DWORD *)((char *)&v258[14] + 1) = *(_DWORD *)v263;
  DWORD1(v258[14]) = *(_DWORD *)&v263[3];
  *((void *)&v258[14] + 1) = v198;
  *(void *)&v258[15] = v197;
  *((void *)&v258[15] + 1) = v196;
  *(void *)&v258[16] = v195;
  BYTE8(v258[16]) = v121;
  LOBYTE(v258[17]) = v194;
  *((void *)&v258[17] + 1) = v101;
  *(void *)&v258[18] = v103;
  *((void *)&v258[18] + 1) = v105;
  *(void *)&v258[19] = v107;
  BYTE8(v258[19]) = v138;
  LOBYTE(v258[20]) = v108;
  *((void *)&v258[20] + 1) = v123;
  *(void *)&v258[21] = v125;
  *((void *)&v258[21] + 1) = v127;
  *(void *)&v258[22] = v129;
  BYTE8(v258[22]) = v259;
  LOBYTE(v258[23]) = v130;
  *((void *)&v258[23] + 1) = v139;
  *(void *)&v258[24] = v140;
  *((void *)&v258[24] + 1) = v141;
  *(void *)&v258[25] = v142;
  BYTE8(v258[25]) = 0;
  uint64_t v143 = *(void *)(v223 + 8);
  LOBYTE(v257[0]) = *(unsigned char *)v223;
  *((void *)&v257[0] + 1) = v143;
  sub_A6E80();
  int v144 = v244;
  uint64_t v145 = v205;
  sub_28F28(v222, v205, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  if (v144 == 3)
  {
    sub_28F90(v145, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    uint64_t v147 = v190;
    uint64_t v146 = v191;
LABEL_25:
    uint64_t v152 = sub_7AF4(&qword_D8108);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v152 - 8) + 56))(v99, 1, 1, v152);
    goto LABEL_29;
  }
  uint64_t v148 = v145 + v111[7];
  char v149 = *(unsigned char *)v148;
  uint64_t v150 = *(void *)(v148 + 8);
  LOBYTE(v257[0]) = v149;
  *((void *)&v257[0] + 1) = v150;
  sub_A6E80();
  int v151 = v244;
  sub_28F90(v145, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  uint64_t v147 = v190;
  uint64_t v146 = v191;
  if (v151 == 2) {
    goto LABEL_25;
  }
  uint64_t v158 = sub_7AF4(&qword_D8108);
  uint64_t v159 = *(void *)(v158 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v159 + 16))(v99, v212, v158);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v159 + 56))(v99, 0, 1, v158);
LABEL_29:
  sub_A6210();
  uint64_t v160 = sub_7AF4(&qword_D8A08);
  uint64_t v161 = sub_28690(&qword_D8A10, &qword_D8A08, (void (*)(void))sub_294D8);
  unint64_t v162 = sub_296D0();
  uint64_t v163 = (uint64_t)v99;
  uint64_t v164 = v208;
  sub_A6CD0();
  sub_A35C(v163, &qword_D89C8);
  memcpy(v257, v258, 0x199uLL);
  sub_29768((uint64_t)v257);
  uint64_t v165 = v215;
  sub_28F28(v222, v215, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  uint64_t v166 = swift_allocObject();
  sub_276B4(v165, v166 + v213);
  *(void *)&long long v244 = v160;
  *((void *)&v244 + 1) = v164;
  *(void *)&long long v245 = v161;
  *((void *)&v245 + 1) = v162;
  swift_getOpaqueTypeConformance2();
  v167 = v207;
  uint64_t v168 = v209;
  sub_A6BA0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v146 + 8))(v147, v168);
  (*(void (**)(char *, char *, uint64_t))(v217 + 32))(v216, v167, v218);
  char v169 = *(unsigned char *)v223;
  uint64_t v170 = *(void *)(v223 + 8);
  LOBYTE(v244) = *(unsigned char *)v223;
  *((void *)&v244 + 1) = v170;
  sub_A6E80();
  if (LOBYTE(v232[0]) == 2)
  {
    sub_2079C((uint64_t)&v225);
    sub_29C08((uint64_t)&v225);
    sub_29C10((uint64_t)&v225, (uint64_t)v232, &qword_D8A78);
    sub_7AF4(&qword_D8A80);
    sub_7AF4(&qword_D8A88);
    sub_28690(&qword_D8A90, &qword_D8A80, (void (*)(void))sub_29B14);
    sub_29B68();
    sub_A6860();
    long long v241 = v254;
    long long v242 = v255;
    char v243 = v256;
    long long v237 = v250;
    long long v238 = v251;
    long long v239 = v252;
    long long v240 = v253;
    long long v233 = v246;
    long long v234 = v247;
    long long v235 = v248;
    long long v236 = v249;
    long long v172 = v244;
    long long v171 = v245;
  }
  else
  {
    LOBYTE(v244) = v169;
    *((void *)&v244 + 1) = v170;
    sub_A6E80();
    if (LOBYTE(v232[0]) != 3)
    {
      sub_29868((uint64_t)v232);
      goto LABEL_35;
    }
    uint64_t v173 = sub_A6D90();
    sub_20B34(v188, v174, v189);
    sub_A7030();
    sub_A6270();
    uint64_t v225 = v173;
    __int16 v226 = 256;
    uint64_t v227 = v287;
    char v228 = v288;
    uint64_t v229 = v289;
    char v230 = v290;
    long long v231 = v291;
    sub_29B08((uint64_t)&v225);
    sub_29C10((uint64_t)&v225, (uint64_t)v232, &qword_D8A78);
    sub_7AF4(&qword_D8A80);
    sub_7AF4(&qword_D8A88);
    sub_28690(&qword_D8A90, &qword_D8A80, (void (*)(void))sub_29B14);
    sub_29B68();
    sub_A6860();
    long long v241 = v254;
    long long v242 = v255;
    char v243 = v256;
    long long v237 = v250;
    long long v238 = v251;
    long long v239 = v252;
    long long v240 = v253;
    long long v233 = v246;
    long long v234 = v247;
    long long v235 = v248;
    long long v236 = v249;
    long long v172 = v244;
    long long v171 = v245;
  }
  v232[0] = v172;
  v232[1] = v171;
  LiveSpeechStore.SpeechContext.init(text:highlightRange:)(v232);
LABEL_35:
  sub_29C10((uint64_t)v232, (uint64_t)&v244, &qword_D8A68);
  uint64_t v175 = v214;
  sub_8860(v220, v214, &qword_D89E8);
  v177 = v216;
  uint64_t v176 = v217;
  v178 = *(void (**)(char *, char *, uint64_t))(v217 + 16);
  v179 = v210;
  uint64_t v180 = v218;
  v178(v210, v216, v218);
  sub_29C10((uint64_t)&v244, (uint64_t)v224, &qword_D8A68);
  uint64_t v181 = v211;
  sub_8860(v175, v211, &qword_D89E8);
  uint64_t v182 = sub_7AF4(&qword_D8A70);
  v178((char *)(v181 + *(int *)(v182 + 48)), v179, v180);
  uint64_t v183 = v181 + *(int *)(v182 + 64);
  sub_29C10((uint64_t)v224, (uint64_t)&v225, &qword_D8A68);
  sub_29C10((uint64_t)&v225, v183, &qword_D8A68);
  sub_2998C((uint64_t)&v225, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_29890);
  v184 = *(void (**)(char *, uint64_t))(v176 + 8);
  v184(v177, v180);
  sub_A35C(v220, &qword_D89E8);
  sub_29C10((uint64_t)v224, (uint64_t)v232, &qword_D8A68);
  sub_2998C((uint64_t)v232, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_29A08);
  v184(v179, v180);
  return sub_A35C(v175, &qword_D89E8);
}

uint64_t sub_2028C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v51 = a1;
  uint64_t v54 = a2;
  uint64_t v3 = type metadata accessor for LiveCaptionsRootView();
  uint64_t v4 = v3 - 8;
  *(void *)&long long v49 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v49 + 64);
  __chkstk_darwin(v3);
  unint64_t v6 = &v45[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  unsigned __int8 v9 = &v45[-v8];
  uint64_t v10 = sub_7AF4(&qword_D8AC0);
  uint64_t v52 = *(void *)(v10 - 8);
  uint64_t v53 = v10;
  __chkstk_darwin(v10);
  char v50 = &v45[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = v2 + *(int *)(v4 + 104);
  char v13 = *(unsigned char *)v12;
  uint64_t v14 = *(void *)(v12 + 8);
  LOBYTE(v72) = v13;
  uint64_t v73 = v14;
  sub_7AF4(&qword_D8AC8);
  sub_A6EA0();
  uint64_t v47 = v56;
  *(void *)&long long v48 = v55;
  int v46 = v57;
  uint64_t v15 = v2 + *(int *)(v4 + 36);
  uint64_t v17 = *(void *)(v15 + 8);
  LOBYTE(v55) = *(unsigned char *)v15;
  char v16 = v55;
  uint64_t v56 = v17;
  sub_7AF4(&qword_D8800);
  sub_A6E80();
  char v18 = v72 != 1;
  LOBYTE(v55) = v16;
  uint64_t v56 = v17;
  sub_A6E80();
  if (v72 == 3) {
    double v19 = 24.0;
  }
  else {
    double v19 = 12.0;
  }
  sub_28F28(v2, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  unint64_t v20 = (*(unsigned __int8 *)(v49 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
  uint64_t v21 = swift_allocObject();
  sub_276B4((uint64_t)v9, v21 + v20);
  sub_28F28(v2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  uint64_t v22 = swift_allocObject();
  sub_276B4((uint64_t)v6, v22 + v20);
  sub_4B250(v48, v47, v46, v18, (uint64_t)sub_29C78, v21, (uint64_t)sub_29CA8, v22, (uint64_t)&v72, v19);
  uint64_t v23 = v72;
  uint64_t v24 = v73;
  unsigned __int8 v25 = v74;
  char v26 = v75;
  uint64_t v27 = v76;
  long long v48 = v78;
  long long v49 = v77;
  uint64_t v28 = v79;
  uint64_t v29 = v80;
  if (qword_D7E58 != -1) {
    swift_once();
  }
  AXLTSettingsManager.buttonScaledHeight.getter();
  sub_A7030();
  sub_A6270();
  char v71 = v82;
  char v70 = v84;
  uint64_t v55 = v23;
  uint64_t v56 = v24;
  unsigned __int8 v57 = v25;
  char v58 = v26;
  uint64_t v59 = v27;
  long long v60 = v49;
  long long v61 = v48;
  uint64_t v62 = v28;
  uint64_t v63 = v29;
  uint64_t v64 = v81;
  char v65 = v82;
  uint64_t v66 = v83;
  char v67 = v84;
  long long v68 = v85;
  char v69 = 0;
  sub_A6210();
  sub_7AF4(&qword_D8AD0);
  sub_7AF4(&qword_D8108);
  sub_295D8(&qword_D8AD8, &qword_D8AD0, (void (*)(void))sub_29CC0);
  sub_A45C(&qword_D8170, &qword_D8108);
  uint64_t v30 = v50;
  sub_A6CD0();
  sub_29D44((uint64_t)&v72);
  char v31 = sub_A6A30();
  sub_A6140();
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  uint64_t v41 = v52;
  uint64_t v40 = v53;
  uint64_t v42 = v54;
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v52 + 16))(v54, v30, v53);
  uint64_t v43 = v42 + *(int *)(sub_7AF4(&qword_D89E0) + 36);
  *(unsigned char *)uint64_t v43 = v31;
  *(void *)(v43 + 8) = v33;
  *(void *)(v43 + 16) = v35;
  *(void *)(v43 + 24) = v37;
  *(void *)(v43 + 32) = v39;
  *(unsigned char *)(v43 + 40) = 0;
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v41 + 8))(v30, v40);
}

double sub_2079C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (int *)type metadata accessor for LiveCaptionsRootView();
  uint64_t v39 = *((void *)v3 - 1);
  uint64_t v4 = *(void *)(v39 + 64);
  __chkstk_darwin(v3);
  unint64_t v6 = (uint64_t *)(v1 + *(int *)(v5 + 68));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = v6[2];
  uint64_t v10 = v6[3];
  uint64_t v11 = v6[4];
  *(void *)&long long v44 = *v6;
  *((void *)&v44 + 1) = v8;
  *(void *)&long long v45 = v9;
  *((void *)&v45 + 1) = v10;
  *(void *)&long long v46 = v11;
  sub_7AF4(&qword_D87D8);
  sub_A6E80();
  double v40 = v42;
  uint64_t v12 = (uint64_t *)(v1 + v3[16]);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  *(void *)&long long v44 = *v12;
  *((void *)&v44 + 1) = v14;
  sub_7AF4(&qword_D8810);
  sub_A6E80();
  if (*(double *)&v41 == 0.0)
  {
    *(void *)&long long v44 = v7;
    *((void *)&v44 + 1) = v8;
    *(void *)&long long v45 = v9;
    *((void *)&v45 + 1) = v10;
    *(void *)&long long v46 = v11;
    sub_A6E80();
    double v15 = v43;
  }
  else
  {
    *(void *)&long long v44 = v13;
    *((void *)&v44 + 1) = v14;
    sub_A6E80();
    double v15 = *(double *)&v41;
  }
  double v38 = v15;
  uint64_t v16 = v1 + v3[15];
  double v17 = *(double *)(v16 + 16);
  long long v41 = *(_OWORD *)v16;
  double v42 = v17;
  sub_7AF4(&qword_D8178);
  sub_A6EA0();
  uint64_t v37 = *((void *)&v44 + 1);
  uint64_t v18 = v44;
  long long v19 = v45;
  *(void *)&long long v44 = v7;
  *((void *)&v44 + 1) = v8;
  *(void *)&long long v45 = v9;
  *((void *)&v45 + 1) = v10;
  *(void *)&long long v46 = v11;
  sub_A6E80();
  uint64_t v20 = v1 + v3[7];
  char v21 = *(unsigned char *)v20;
  uint64_t v22 = *(void *)(v20 + 8);
  LOBYTE(v44) = v21;
  *((void *)&v44 + 1) = v22;
  sub_7AF4(&qword_D8800);
  sub_A6E80();
  double v23 = sub_235B0(v41, *(double *)&v41, *((double *)&v41 + 1), v42, v43);
  uint64_t v25 = v24;
  uint64_t v26 = v1 + v3[11];
  uint64_t v27 = *(void *)(v26 + 16);
  long long v44 = *(_OWORD *)v26;
  *(void *)&long long v45 = v27;
  sub_A6E80();
  long long v28 = v41;
  sub_28F28(v1, (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  unint64_t v29 = (*(unsigned __int8 *)(v39 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  uint64_t v30 = swift_allocObject();
  sub_276B4((uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v30 + v29);
  type metadata accessor for CGSize(0);
  long long v41 = 0uLL;
  sub_A6E70();
  long long v31 = v44;
  uint64_t v32 = v45;
  sub_A7030();
  sub_A6270();
  *(_OWORD *)a1 = xmmword_A98E0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 17) = v41;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)((char *)&v41 + 3);
  uint64_t v33 = v37;
  *(void *)(a1 + 24) = v18;
  *(void *)(a1 + 32) = v33;
  *(_OWORD *)(a1 + 40) = v19;
  *(double *)(a1 + 56) = v23;
  *(void *)(a1 + 64) = v25;
  *(_OWORD *)(a1 + 72) = v28;
  double v34 = v38;
  *(double *)(a1 + 88) = v40;
  *(double *)(a1 + 96) = v34;
  *(_OWORD *)(a1 + 104) = v31;
  *(void *)(a1 + 120) = v32;
  *(void *)(a1 + 128) = sub_2A1E8;
  *(void *)(a1 + 136) = v30;
  long long v35 = v45;
  *(_OWORD *)(a1 + 144) = v44;
  *(_OWORD *)(a1 + 160) = v35;
  double result = *(double *)&v46;
  *(_OWORD *)(a1 + 176) = v46;
  return result;
}

double sub_20B34(double a1, double a2, double a3)
{
  type metadata accessor for LiveCaptionsRootView();
  sub_7AF4(&qword_D8810);
  sub_A6E80();
  if (v9 != 0.0)
  {
    id v5 = [self mainScreen];
    [v5 bounds];
    double v7 = v6;

    sub_A6E80();
    a3 = v7 - v9;
  }
  return a3 + a1;
}

double sub_20C1C()
{
  type metadata accessor for LiveCaptionsRootView();
  sub_7AF4(&qword_D8800);
  sub_A6E80();
  double result = 1.0;
  if (LOBYTE(v1) == 4)
  {
    sub_7AF4(&qword_D8808);
    sub_A6E80();
    return v1;
  }
  return result;
}

uint64_t sub_20CCC@<X0>(uint64_t *a1@<X8>, double a2@<D0>)
{
  uint64_t v22 = a1;
  uint64_t v4 = sub_A66E0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  double v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_A6910();
  __chkstk_darwin(v21);
  double v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LiveCaptionsRootView();
  uint64_t v11 = (char *)(v2 + *(int *)(v10 + 28));
  char v12 = *v11;
  uint64_t v13 = *((void *)v11 + 1);
  LOBYTE(v23) = *v11;
  *((void *)&v23 + 1) = v13;
  sub_7AF4(&qword_D8800);
  sub_A6E80();
  if (LOBYTE(v25) != 3)
  {
    LOBYTE(v23) = v12;
    *((void *)&v23 + 1) = v13;
    sub_A6E80();
    if (LOBYTE(v25) == 4)
    {
      uint64_t v14 = (long long *)(v2 + *(int *)(v10 + 48));
      uint64_t v15 = *((void *)v14 + 2);
      long long v23 = *v14;
      uint64_t v24 = v15;
      sub_7AF4(&qword_D8178);
      sub_A6E80();
      if (v25 > a2 * 0.5)
      {
        if (qword_D7D58 == -1) {
          goto LABEL_9;
        }
        goto LABEL_11;
      }
      if (qword_D7D58 != -1) {
LABEL_11:
      }
        swift_once();
    }
    else
    {
      LOBYTE(v23) = v12;
      *((void *)&v23 + 1) = v13;
      sub_A6E80();
    }
LABEL_9:
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for RoundedCornerStyle.continuous(_:), v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(&v9[*(int *)(v21 + 20)], v7, v4);
    sub_A6890();
    *(void *)double v9 = v16;
    *((void *)v9 + 1) = v17;
    *((void *)v9 + 2) = v18;
    *((void *)v9 + 3) = v19;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_2A2BC(&qword_D8968, (void (*)(uint64_t))&type metadata accessor for UnevenRoundedRectangle);
    goto LABEL_10;
  }
  sub_28E10();
LABEL_10:
  uint64_t result = sub_A6F90();
  *uint64_t v22 = result;
  return result;
}

uint64_t sub_2100C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LiveCaptionsRootView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v6 = *(void *)(a1 + *(int *)(v5 + 120));
  sub_28F28(a1, (uint64_t)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  sub_276B4((uint64_t)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v8 + v7);
  double v9 = (uint64_t (**)())(v6
                      + OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveCaptionsAdjustFrame);
  *double v9 = sub_28DC8;
  v9[1] = (uint64_t (*)())v8;
  return swift_release();
}

uint64_t sub_21134(double a1, double a2, double a3, double a4)
{
  sub_A7420();
  if (qword_D7D90 != -1) {
    swift_once();
  }
  sub_A5FD0();
  type metadata accessor for LiveCaptionsRootView();
  sub_7AF4(&qword_D8800);
  uint64_t result = sub_A6E80();
  if (v7 != 4) {
    return sub_21228(a3, a4);
  }
  return result;
}

uint64_t sub_21228(double a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for LiveCaptionsRootView();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6 - 8);
  uint64_t v10 = (uint64_t *)(v2 + *(int *)(v9 + 96));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  *(void *)&long long aBlock = *v10;
  *((void *)&aBlock + 1) = v12;
  sub_7AF4(&qword_D8370);
  sub_A6E80();

  if (!v26)
  {
    sub_A7420();
    if (qword_D7D90 != -1) {
      swift_once();
    }
    sub_A5FD0();
  }
  *(void *)&long long aBlock = v11;
  *((void *)&aBlock + 1) = v12;
  sub_A6E80();
  id v13 = v26;
  [v26 invalidate];

  uint64_t v14 = self;
  sub_28F28(v3, (uint64_t)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v16 = swift_allocObject();
  sub_276B4((uint64_t)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15);
  uint64_t v17 = (double *)(v16 + ((v8 + v15 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v17 = a1;
  v17[1] = a2;
  uint64_t v24 = sub_285B0;
  uint64_t v25 = v16;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  uint64_t v22 = sub_1684C;
  long long v23 = &unk_CFC78;
  uint64_t v18 = _Block_copy(&aBlock);
  swift_release();
  id v19 = [v14 scheduledTimerWithTimeInterval:0 repeats:v18 block:30.0];
  _Block_release(v18);
  long long aBlock = *(_OWORD *)v10;
  id v26 = v19;
  return sub_A6E90();
}

uint64_t sub_214E8(long long *a1, double a2, double a3, double a4, double a5)
{
  long long v12 = *a1;
  uint64_t v9 = *((void *)a1 + 2);
  uint64_t v10 = *((void *)a1 + 3);
  type metadata accessor for LiveCaptionsRootView();
  sub_7AF4(&qword_D8178);
  sub_A6E80();
  long long v15 = v12;
  uint64_t v16 = v9;
  uint64_t v17 = v10;
  char v18 = 0;
  sub_21634((uint64_t)&v15, v13, v14, 0.0, 0.0, a2, a3, a4, a5);
  sub_A6E90();
  sub_A6E80();
  return sub_A6E90();
}

void sub_21634(uint64_t a1, double a2, CGFloat a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v17 = (int *)type metadata accessor for LiveCaptionsRootView();
  char v18 = (double *)(v9 + v17[25]);
  char v19 = *(unsigned char *)v18;
  double v20 = v18[1];
  LOBYTE(v41) = v19;
  double v42 = v20;
  sub_7AF4(&qword_D8380);
  sub_A6E80();
  double v21 = 0.0;
  double v22 = 0.0;
  if ((LOBYTE(v37) & 1) == 0)
  {
    if (a4 == 0.0)
    {
      double v21 = a5;
      double v22 = a4;
      if (a5 == 0.0)
      {
        long long v23 = (double *)(v9 + v17[7]);
        char v24 = *(unsigned char *)v23;
        double v25 = v23[1];
        LOBYTE(v41) = v24;
        double v42 = v25;
        sub_7AF4(&qword_D8800);
        sub_A6E80();
        double v22 = sub_235B0(SLOBYTE(v37), a6, a7, a8, a9);
        double v21 = v26;
      }
    }
    else
    {
      double v21 = a5;
      double v22 = a4;
    }
  }
  sub_29C10(a1, (uint64_t)&v41, &qword_D8818);
  if (v45)
  {
    if (qword_D7D68 != -1) {
      swift_once();
    }
    uint64_t v27 = *(void **)(v9 + v17[26] + 8);
    swift_getKeyPath();
    swift_getKeyPath();
    id v28 = v27;
    sub_A60D0();

    swift_release();
    swift_release();
    LiveSpeechCaptionsViewsCoordinator.safeOffset(feature:offset:size:containerRect:foreheadWindowRect:)(1, a2, a3, v22, v21, a6, a7, a8, a9, v37, v38, v39, v40);
  }
  else
  {
    double v33 = a8;
    double v34 = a9;
    CGFloat v29 = v41;
    double v30 = v42;
    CGFloat v31 = v43;
    CGFloat v32 = v44;
    if (qword_D7D68 != -1) {
      swift_once();
    }
    LiveSpeechCaptionsViewsCoordinator.safeOffset(feature:offset:size:containerRect:foreheadWindowRect:)(1, a2, a3, v22, v21, a6, a7, v33, v34, v29, v30, v31, v32);
  }
}

uint64_t sub_218C4()
{
  return swift_release();
}

id sub_21978()
{
  type metadata accessor for LiveCaptionsRootView();
  sub_7AF4(&qword_D8800);
  sub_A6E80();
  if (LOBYTE(v2) == 1)
  {
    if (AXDeviceIsPad()) {
      uint64_t v0 = 2;
    }
    else {
      uint64_t v0 = 3;
    }
  }
  else
  {
    uint64_t v0 = 1;
  }
  sub_7AF4(&qword_D87D8);
  sub_A6E80();
  return sub_1E980(v0, v2, v3, v4, v5);
}

uint64_t sub_21A4C()
{
  type metadata accessor for LiveCaptionsRootView();
  sub_7AF4(&qword_D8178);
  sub_A6E80();
  long long v0 = v10;
  sub_7AF4(&qword_D87D8);
  sub_A6E80();
  long long v1 = v10;
  long long v2 = v11;
  long long v10 = 0u;
  long long v11 = 0u;
  char v12 = 1;
  sub_21634((uint64_t)&v10, *(double *)&v0, *((CGFloat *)&v0 + 1), 0.0, 0.0, *(double *)&v1, *((double *)&v1 + 1), *(double *)&v2, *((double *)&v2 + 1));
  double v6 = v3;
  double v7 = v4;
  sub_A6E90();
  sub_A6E80();
  sub_21C04(v6, v7, v8, v9);
  swift_retain();
  sub_A6E80();
  sub_A6E90();
  return swift_release();
}

void sub_21C04(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = type metadata accessor for LiveCaptionsRootView();
  __chkstk_darwin(v9);
  long long v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = v4 + *(int *)(v12 + 44);
  uint64_t v14 = *(void *)(v13 + 16);
  long long v39 = *(_OWORD *)v13;
  *(void *)&long long v40 = v14;
  sub_7AF4(&qword_D8178);
  sub_A6E80();
  double v15 = v34;
  double v16 = v35;
  uint64_t v17 = (double *)(v4 + *(int *)(v9 + 60));
  double v19 = v17[1];
  uint64_t v20 = *((void *)v17 + 2);
  *(double *)&long long v39 = *v17;
  double v18 = *(double *)&v39;
  *((double *)&v39 + 1) = v19;
  *(void *)&long long v40 = v20;
  sub_A6E80();
  long long v39 = 0u;
  long long v40 = 0u;
  char v41 = 1;
  sub_21634(&v39, v15, v16, v34, v35, a1, a2, a3, a4);
  double v22 = v21;
  double v34 = v18;
  double v35 = v19;
  uint64_t v36 = v20;
  sub_A6E80();
  if (v22 + v38 <= a4) {
    double v23 = v38;
  }
  else {
    double v23 = a4 - v22;
  }
  char v24 = (double *)(v4 + *(int *)(v9 + 64));
  double v25 = *v24;
  double v26 = v24[1];
  double v34 = *v24;
  double v35 = v26;
  sub_7AF4(&qword_D8810);
  sub_A6E80();
  if (v37 != 0.0)
  {
    double v34 = v25;
    double v35 = v26;
    sub_A6E80();
    double v27 = v37 - v23;
    sub_28F28(v4, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    if (v27 >= v22)
    {
      sub_28F90((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    }
    else
    {
      id v28 = (double *)&v11[*(int *)(v9 + 64)];
      double v29 = *v28;
      double v30 = v28[1];
      double v34 = v29;
      double v35 = v30;
      sub_A6E80();
      double v31 = v37;
      sub_28F90((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
      if (v31 - v23 < 0.0)
      {
        double v32 = v24[1];
        double v34 = *v24;
        double v35 = v32;
        sub_A6E80();
      }
    }
  }
  sub_239FC();
}

double sub_21EA8()
{
  if (qword_D7E58 != -1) {
    swift_once();
  }
  double v0 = AXLTSettingsManager.buttonScaledHeight.getter();
  type metadata accessor for LiveCaptionsRootView();
  sub_7AF4(&qword_D8800);
  sub_A6E80();
  double v1 = 12.0;
  if (LOBYTE(v5) == 3) {
    double v1 = 24.0;
  }
  double v2 = v0 + v1 + 8.0 + -1.0;
  sub_7AF4(&qword_D8380);
  sub_A6E80();
  if (LOBYTE(v5)) {
    double v3 = v2;
  }
  else {
    double v3 = v2 + v2;
  }
  sub_7AF4(&qword_D87D8);
  sub_A6E80();
  sub_A6E80();
  return sub_235B0(SLOBYTE(v5), v5, v6, v7, v8) - v3;
}

uint64_t sub_22054()
{
  type metadata accessor for LiveCaptionsRootView();
  sub_7AF4(&qword_D8380);
  uint64_t result = sub_A6E80();
  if (v1 == 1)
  {
    __chkstk_darwin(result);
    sub_A7080();
    sub_A6300();
    return swift_release();
  }
  return result;
}

uint64_t sub_2212C()
{
  return swift_release();
}

uint64_t sub_221A0(double a1, double a2, double a3, double a4)
{
  type metadata accessor for LiveCaptionsRootView();
  sub_7AF4(&qword_D8178);
  sub_A6E80();
  memset(v11, 0, sizeof(v11));
  char v12 = 1;
  sub_21634((uint64_t)v11, v9, v10, 0.0, 0.0, a1, a2, a3, a4);
  return sub_A6E90();
}

uint64_t sub_22298()
{
  return sub_A6E90();
}

uint64_t sub_22308(uint64_t a1, char a2, double a3, double a4, double a5, double a6)
{
  char v12 = (int *)type metadata accessor for LiveCaptionsRootView();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a1 + *(int *)(v15 + 28);
  char v17 = *(unsigned char *)v16;
  uint64_t v18 = *(void *)(v16 + 8);
  LOBYTE(v65) = *(unsigned char *)v16;
  *((void *)&v65 + 1) = v18;
  sub_7AF4(&qword_D8800);
  sub_A6E80();
  if (v62 == 4)
  {
    uint64_t v19 = a1 + v12[8];
    char v20 = *(unsigned char *)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    LOBYTE(v65) = v20;
    *((void *)&v65 + 1) = v21;
    sub_A6E80();
    LOBYTE(v65) = v17;
    *((void *)&v65 + 1) = v18;
    sub_A6E90();
    uint64_t v22 = a1 + v12[12];
    uint64_t v23 = *(void *)(v22 + 16);
    long long v65 = *(_OWORD *)v22;
    *(void *)&long long v66 = v23;
    sub_7AF4(&qword_D8178);
    sub_A6E80();
    uint64_t v24 = *((void *)&v62 + 1);
    double v25 = (void *)(a1 + v12[11]);
    uint64_t v27 = v25[1];
    uint64_t v28 = v25[2];
    *(void *)&long long v65 = *v25;
    uint64_t v26 = v65;
    *((void *)&v65 + 1) = v27;
    *(void *)&long long v66 = v28;
    swift_retain();
    sub_A6E80();
    *(void *)&long long v65 = v26;
    *((void *)&v65 + 1) = v27;
    *(void *)&long long v66 = v28;
    *(void *)&long long v60 = v62;
    *((void *)&v60 + 1) = v24;
    sub_A6E90();
    swift_release();
    *(void *)&long long v65 = v26;
    *((void *)&v65 + 1) = v27;
    *(void *)&long long v66 = v28;
    sub_A6E80();
    long long v65 = 0u;
    long long v66 = 0u;
    char v67 = 1;
    sub_21634((uint64_t)&v65, *(double *)&v62, *((CGFloat *)&v62 + 1), 0.0, 0.0, a3, a4, a5, a6);
    *(void *)&long long v62 = v26;
    *((void *)&v62 + 1) = v27;
    *(void *)&long long v63 = v28;
    *(void *)&long long v60 = v29;
    *((void *)&v60 + 1) = v30;
    sub_A6E90();
    os_log_type_t v31 = sub_A7420();
    if (qword_D7D90 != -1) {
      swift_once();
    }
    double v32 = qword_DF5C8;
    sub_28F28(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    if (os_log_type_enabled(v32, v31))
    {
      os_log_t v58 = v32;
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v57 = swift_slowAlloc();
      v59[0] = v57;
      uint64_t v56 = v33;
      *(_DWORD *)uint64_t v33 = 136315138;
      v55[1] = v33 + 4;
      double v34 = &v14[v12[11]];
      uint64_t v35 = *((void *)v34 + 2);
      long long v62 = *(_OWORD *)v34;
      *(void *)&long long v63 = v35;
      sub_A6E80();
      long long v62 = v60;
      type metadata accessor for CGSize(0);
      uint64_t v36 = sub_A71F0();
      *(void *)&long long v62 = sub_15F94(v36, v37, v59);
      sub_A7600();
      swift_bridgeObjectRelease();
      sub_28F90((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
      _os_log_impl(&def_5ED54, v58, v31, "switchToState windowOffset: %s", v56, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_28F90((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    }
  }
  else
  {
    LOBYTE(v65) = v17;
    *((void *)&v65 + 1) = v18;
    LOBYTE(v62) = a2;
    sub_A6E90();
    if (a2 == 4)
    {
      uint64_t v38 = a1 + v12[8];
      char v39 = *(unsigned char *)v38;
      uint64_t v40 = *(void *)(v38 + 8);
      LOBYTE(v65) = v39;
      *((void *)&v65 + 1) = v40;
      sub_A6E80();
      a2 = v62;
    }
    uint64_t v41 = a1 + v12[8];
    char v42 = *(unsigned char *)v41;
    uint64_t v43 = *(void *)(v41 + 8);
    LOBYTE(v65) = v42;
    *((void *)&v65 + 1) = v43;
    LOBYTE(v62) = a2;
    sub_A6E90();
  }
  uint64_t v44 = *(void *)(v16 + 8);
  LOBYTE(v62) = *(unsigned char *)v16;
  *((void *)&v62 + 1) = v44;
  sub_A6E80();
  if (v60 != 3)
  {
    char v45 = (void *)(a1 + v12[11]);
    uint64_t v47 = v45[1];
    uint64_t v48 = v45[2];
    *(void *)&long long v62 = *v45;
    uint64_t v46 = v62;
    *((void *)&v62 + 1) = v47;
    *(void *)&long long v63 = v48;
    sub_7AF4(&qword_D8178);
    sub_A6E80();
    long long v62 = 0u;
    long long v63 = 0u;
    char v64 = 1;
    sub_21634((uint64_t)&v62, *(double *)&v60, *((CGFloat *)&v60 + 1), 0.0, 0.0, a3, a4, a5, a6);
    *(void *)&long long v60 = v46;
    *((void *)&v60 + 1) = v47;
    uint64_t v61 = v48;
    v59[0] = v49;
    v59[1] = v50;
    sub_A6E90();
  }
  sub_1A748();
  uint64_t v51 = (uint64_t *)(a1 + v12[19]);
  uint64_t v52 = *v51;
  uint64_t v53 = v51[1];
  *(void *)&long long v60 = v52;
  *((void *)&v60 + 1) = v53;
  v59[0] = 0x3FF0000000000000;
  sub_7AF4(&qword_D8808);
  return sub_A6E90();
}

uint64_t sub_228B4(int a1, uint64_t a2, double a3, double a4)
{
  double v8 = (int *)type metadata accessor for LiveCaptionsRootView();
  __chkstk_darwin(v8);
  CGFloat v10 = &v58[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  uint64_t v13 = &v58[-v12];
  os_log_type_t v14 = sub_A7420();
  if (qword_D7D90 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_DF5C8;
  sub_28F28(a2, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  BOOL v16 = os_log_type_enabled(v15, v14);
  long long v62 = v8;
  long long v60 = v10;
  int v59 = a1;
  if (v16)
  {
    uint64_t v17 = a2;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v67 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315394;
    LOBYTE(v64) = a1;
    uint64_t v19 = sub_A71F0();
    *(void *)&long long v64 = sub_15F94(v19, v20, &v67);
    sub_A7600();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    uint64_t v21 = &v13[v62[12]];
    uint64_t v22 = *((void *)v21 + 2);
    long long v64 = *(_OWORD *)v21;
    uint64_t v65 = v22;
    sub_7AF4(&qword_D8178);
    sub_A6E80();
    long long v64 = v66;
    type metadata accessor for CGSize(0);
    uint64_t v23 = sub_A71F0();
    *(void *)&long long v64 = sub_15F94(v23, v24, &v67);
    sub_A7600();
    swift_bridgeObjectRelease();
    sub_28F90((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    _os_log_impl(&def_5ED54, v15, v14, "switchToIcon direction: %s iconOffset: %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    double v8 = v62;
    swift_slowDealloc();
    a2 = v17;
    swift_slowDealloc();
  }
  else
  {
    sub_28F90((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  }
  uint64_t v25 = a2 + v8[25];
  char v26 = *(unsigned char *)v25;
  uint64_t v27 = *(void *)(v25 + 8);
  LOBYTE(v64) = v26;
  *((void *)&v64 + 1) = v27;
  sub_7AF4(&qword_D8380);
  uint64_t v28 = sub_A6E80();
  if (v66 == 1)
  {
    __chkstk_darwin(v28);
    *(void *)&v58[-16] = a2;
    sub_A7080();
    uint64_t v29 = v63;
    sub_A6300();
    uint64_t v63 = v29;
    swift_release();
  }
  char v30 = v59;
  os_log_type_t v31 = (uint64_t *)(a2 + v8[12]);
  uint64_t v32 = *v31;
  uint64_t v33 = v31[1];
  uint64_t v34 = v31[2];
  *(void *)&long long v64 = *v31;
  *((void *)&v64 + 1) = v33;
  uint64_t v65 = v34;
  sub_7AF4(&qword_D8178);
  sub_A6E80();
  long long v35 = v66;
  if (qword_D7D50 != -1) {
    swift_once();
  }
  double v36 = a4 - *(double *)&qword_DF548;
  double v37 = 0.0;
  if (*((double *)&v35 + 1) >= 0.0) {
    double v38 = *((double *)&v35 + 1);
  }
  else {
    double v38 = 0.0;
  }
  if (v36 >= *((double *)&v35 + 1)) {
    double v36 = v38;
  }
  if (v30 == 2 || !v30 && a3 * 0.5 < *(double *)&v35) {
    double v37 = a3 - *(double *)&qword_DF540;
  }
  *(void *)&long long v64 = v32;
  *((void *)&v64 + 1) = v33;
  uint64_t v65 = v34;
  *(double *)&long long v66 = v37;
  *((double *)&v66 + 1) = v36;
  sub_A6E90();
  os_log_type_t v39 = sub_A7420();
  uint64_t v40 = qword_DF5C8;
  uint64_t v61 = a2;
  uint64_t v41 = (uint64_t)v60;
  sub_28F28(a2, (uint64_t)v60, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  os_log_type_t v42 = v39;
  if (os_log_type_enabled(v40, v39))
  {
    uint64_t v43 = swift_slowAlloc();
    uint64_t v67 = swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 136315394;
    LOBYTE(v64) = v30;
    uint64_t v44 = sub_A71F0();
    *(void *)&long long v64 = sub_15F94(v44, v45, &v67);
    sub_A7600();
    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 12) = 2080;
    uint64_t v46 = v41 + v62[12];
    uint64_t v47 = *(void *)(v46 + 16);
    long long v64 = *(_OWORD *)v46;
    uint64_t v65 = v47;
    sub_A6E80();
    long long v64 = v66;
    type metadata accessor for CGSize(0);
    uint64_t v48 = sub_A71F0();
    *(void *)&long long v64 = sub_15F94(v48, v49, &v67);
    sub_A7600();
    swift_bridgeObjectRelease();
    sub_28F90(v41, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
    _os_log_impl(&def_5ED54, v40, v42, "adjusted iconOffset: %s iconOffset: %s", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy();
    double v8 = v62;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_28F90(v41, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  }
  uint64_t v50 = v61;
  uint64_t v51 = v61 + v8[7];
  char v52 = *(unsigned char *)v51;
  uint64_t v53 = *(void *)(v51 + 8);
  LOBYTE(v64) = v52;
  *((void *)&v64 + 1) = v53;
  LOBYTE(v66) = 4;
  sub_7AF4(&qword_D8800);
  sub_A6E90();
  uint64_t v54 = (uint64_t *)(v50 + v8[19]);
  uint64_t v55 = *v54;
  uint64_t v56 = v54[1];
  *(void *)&long long v64 = v55;
  *((void *)&v64 + 1) = v56;
  *(void *)&long long v66 = 0x3FF0000000000000;
  sub_7AF4(&qword_D8808);
  return sub_A6E90();
}

uint64_t sub_22F88()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for LiveCaptionsRootView();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  double v5 = (char *)&aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A7420();
  if (qword_D7D90 != -1) {
    swift_once();
  }
  sub_A5FD0();
  uint64_t v6 = *(int *)(v2 + 80);
  long long aBlock = *(_OWORD *)(v1 + v6);
  sub_7AF4(&qword_D8370);
  sub_A6E80();
  id v7 = v19;
  [v19 invalidate];

  double v8 = self;
  sub_28F28(v1, (uint64_t)&aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  unint64_t v9 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = swift_allocObject();
  sub_276B4((uint64_t)v5, v10 + v9);
  uint64_t v17 = sub_28100;
  uint64_t v18 = v10;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  uint64_t v15 = sub_1684C;
  BOOL v16 = &unk_CFC28;
  uint64_t v11 = _Block_copy(&aBlock);
  swift_release();
  id v12 = [v8 scheduledTimerWithTimeInterval:0 repeats:v11 block:30.0];
  _Block_release(v11);
  long long aBlock = *(_OWORD *)(v1 + v6);
  id v19 = v12;
  return sub_A6E90();
}

uint64_t sub_23200(double a1, double a2, double a3, double a4)
{
  type metadata accessor for LiveCaptionsRootView();
  swift_retain();
  sub_7AF4(&qword_D8178);
  sub_A6E80();
  sub_A6E90();
  swift_release();
  sub_A6E80();
  memset(v11, 0, sizeof(v11));
  char v12 = 1;
  sub_21634((uint64_t)v11, v9, v10, 0.0, 0.0, a1, a2, a3, a4);
  return sub_A6E90();
}

uint64_t sub_23358(double a1, double a2, double a3, double a4, double a5, double a6)
{
  type metadata accessor for LiveCaptionsRootView();
  sub_7AF4(&qword_D8178);
  sub_A6E80();
  swift_retain();
  sub_A6E80();
  sub_A6E90();
  swift_release();
  sub_A6E80();
  swift_retain();
  sub_A6E80();
  sub_A6E90();
  swift_release();
  sub_A6E80();
  memset(v13, 0, sizeof(v13));
  char v14 = 1;
  sub_21634((uint64_t)v13, v11, v12, 0.0, 0.0, a3, a4, a5, a6);
  sub_A6E90();
  sub_A6E80();
  swift_retain();
  sub_A6E80();
  sub_A6E90();
  return swift_release();
}

double sub_235B0(char a1, double a2, double a3, double a4, double a5)
{
  type metadata accessor for LiveCaptionsRootView();
  sub_7AF4(&qword_D8800);
  sub_A6E80();
  if (LOBYTE(v15)) {
    double v10 = 24.0;
  }
  else {
    double v10 = 32.0;
  }
  double v11 = sub_237D8(a4, a5) - v10;
  switch(a1)
  {
    case 1:
      sub_238F4();
      break;
    case 2:
      sub_21C04(a2, a3, a4, a5);
      break;
    case 3:
      id v12 = [self mainScreen];
      [v12 bounds];
      double v11 = v13;

      break;
    case 4:
      if (qword_D7D50 != -1) {
        swift_once();
      }
      double v11 = *(double *)&qword_DF540;
      break;
    default:
      sub_7AF4(&qword_D8808);
      sub_A6E80();
      sub_7AF4(&qword_D8380);
      sub_A6E80();
      safeTextHeight(textHeight:isAccessibilityLayout:)(SLOBYTE(v15), v15);
      break;
  }
  return v11;
}

double sub_237D8(double a1, double a2)
{
  if (AXDeviceIsPad())
  {
    type metadata accessor for LiveCaptionsRootView();
    sub_7AF4(&qword_D8380);
    sub_A6E80();
    if (v15 == 1 || AXDeviceIsPadMiniIdiom() && a1 < a2) {
      double v4 = 0.84;
    }
    else {
      double v4 = 0.5;
    }
    return a1 * v4;
  }
  else if (a2 < a1)
  {
    id v5 = [self mainScreen];
    [v5 bounds];
    CGFloat v7 = v6;
    CGFloat v9 = v8;
    CGFloat v11 = v10;
    CGFloat v13 = v12;

    v16.origin.CGFloat x = v7;
    v16.origin.CGFloat y = v9;
    v16.size.CGFloat width = v11;
    v16.size.CGFloat height = v13;
    return CGRectGetWidth(v16) * 0.5;
  }
  return a1;
}

double sub_238F4()
{
  if (qword_D7E58 != -1) {
    swift_once();
  }
  double v0 = AXLTSettingsManager.buttonScaledHeight.getter() + 12.0 + 6.0;
  type metadata accessor for LiveCaptionsRootView();
  sub_7AF4(&qword_D8808);
  sub_A6E80();
  sub_7AF4(&qword_D8380);
  sub_A6E80();
  safeTextHeight(textHeight:isAccessibilityLayout:)(SLOBYTE(v3), v3);
  return v0 + v1;
}

double sub_239FC()
{
  if (qword_D7E58 != -1) {
    swift_once();
  }
  double v0 = AXLTSettingsManager.buttonScaledHeight.getter();
  double v1 = v0 + 12.0 + v0 + 12.0 + 6.0 + 42.0;
  type metadata accessor for LiveCaptionsRootView();
  sub_7AF4(&qword_D8808);
  sub_A6E80();
  sub_7AF4(&qword_D8380);
  sub_A6E80();
  safeTextHeight(textHeight:isAccessibilityLayout:)(SLOBYTE(v4), v4);
  return v1 + v2;
}

uint64_t sub_23B14(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = sub_A63C0();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  CGFloat v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  char v14 = (char *)&v23 - v13;
  sub_A61C0();
  double v16 = v15;
  double v18 = v17;
  type metadata accessor for LiveCaptionsRootView();
  sub_53760((uint64_t)v14);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for LayoutDirection.rightToLeft(_:), v8);
  char v19 = sub_A63B0();
  unint64_t v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v11, v8);
  v20(v14, v8);
  double v21 = -v16;
  if ((v19 & 1) == 0) {
    double v21 = v16;
  }
  return sub_23358(v21, v18, a1, a2, a3, a4);
}

uint64_t sub_23CCC()
{
  return swift_release();
}

uint64_t sub_23D2C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for LiveCaptionsRootView();
  __chkstk_darwin(v3);
  id v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGFloat v6 = LiveSpeechCaptionsViewsCoordinator.safeHeightInset()();
  CGFloat v7 = (uint64_t *)(a1 + *(int *)(v3 + 64));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v21 = v8;
  uint64_t v22 = v9;
  CGFloat v23 = v6;
  sub_7AF4(&qword_D8810);
  sub_A6E90();
  os_log_type_t v10 = sub_A7420();
  if (qword_D7D90 != -1) {
    swift_once();
  }
  CGFloat v11 = qword_DF5C8;
  sub_28F28(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  if (!os_log_type_enabled(v11, v10)) {
    return sub_28F90((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  }
  uint64_t v12 = swift_slowAlloc();
  v20[2] = v1;
  uint64_t v13 = (uint8_t *)v12;
  CGFloat v23 = COERCE_DOUBLE(swift_slowAlloc());
  *(_DWORD *)uint64_t v13 = 136315138;
  v20[1] = v13 + 4;
  char v14 = (uint64_t *)&v5[*(int *)(v3 + 64)];
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  uint64_t v21 = v15;
  uint64_t v22 = v16;
  sub_A6E80();
  uint64_t v17 = sub_A73A0();
  uint64_t v21 = sub_15F94(v17, v18, (uint64_t *)&v23);
  sub_A7600();
  swift_bridgeObjectRelease();
  sub_28F90((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for LiveCaptionsRootView);
  _os_log_impl(&def_5ED54, v11, v10, "liveCaptionsAdjustFrame bottomSafeInset %s", v13, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  return swift_slowDealloc();
}

void sub_23FC4()
{
  sub_A7420();
  if (qword_D7D90 != -1) {
    swift_once();
  }
  sub_A5FD0();
  if (qword_D7D98 != -1) {
    swift_once();
  }
  double v0 = (unsigned char *)(static AXLTCaptionsProvider.shared + OBJC_IVAR___AXLTCaptionsProvider_isTranscribing);
  swift_beginAccess();
  if (*v0 == 1)
  {
    AXLTCaptionsProvider.stopTranscribing()();
    type metadata accessor for LiveCaptionsRootView();
    sub_7AF4(&qword_D8380);
    sub_A6E90();
    id v1 = [self defaultCenter];
    if (qword_D7D70 != -1) {
      swift_once();
    }
    [v1 postNotificationName:qword_DF5A0 object:0 userInfo:0];
  }
}

id sub_24188(uint64_t a1, uint64_t a2)
{
  sub_A7420();
  if (qword_D7D90 != -1) {
    swift_once();
  }
  sub_A5FD0();
  uint64_t v3 = type metadata accessor for LiveCaptionsRootView();
  sub_7AF4(&qword_D8800);
  id result = (id)sub_A6E80();
  if (v5 != 4)
  {
    __chkstk_darwin(result);
    sub_A7080();
    sub_A6300();
    swift_release();
    sub_1A748();
    LiveSpeechCaptionsViewsCoordinator.updateLiveCaptionsWindowState(_:)(LiveSpeechUIService_LiveSpeechCaptionsWindowState_pip);
    sub_22F88();
    return [*(id *)(a2 + *(int *)(v3 + 92)) idleSleepTimerDisabled:0];
  }
  return result;
}

uint64_t sub_24328@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  sub_7AF4(&qword_D7E78);
  swift_storeEnumTagMultiPayload();
  double v2 = (int *)type metadata accessor for LiveCaptionsRootView();
  uint64_t v3 = (uint64_t *)((char *)a1 + v2[5]);
  *uint64_t v3 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  uint64_t v4 = (uint64_t *)((char *)a1 + v2[6]);
  *uint64_t v4 = swift_getKeyPath();
  sub_7AF4(&qword_D81B0);
  swift_storeEnumTagMultiPayload();
  char v5 = (char *)a1 + v2[7];
  sub_A6E70();
  *char v5 = v40;
  *((void *)v5 + 1) = *((void *)&v40 + 1);
  CGFloat v6 = (char *)a1 + v2[8];
  sub_A6E70();
  *CGFloat v6 = v40;
  *((void *)v6 + 1) = *((void *)&v40 + 1);
  uint64_t v7 = v2[9];
  sub_A6E70();
  *(_OWORD *)((char *)a1 + v7) = v40;
  uint64_t v8 = (char *)a1 + v2[10];
  sub_A6E70();
  *(_OWORD *)uint64_t v8 = v40;
  *((void *)v8 + 2) = v41;
  uint64_t v9 = (char *)a1 + v2[11];
  type metadata accessor for CGSize(0);
  sub_A6E70();
  *(_OWORD *)uint64_t v9 = v40;
  *((void *)v9 + 2) = v41;
  os_log_type_t v10 = (char *)a1 + v2[12];
  sub_A6E70();
  *(_OWORD *)os_log_type_t v10 = v40;
  *((void *)v10 + 2) = v41;
  CGFloat v11 = (char *)a1 + v2[13];
  sub_A6E70();
  *(_OWORD *)CGFloat v11 = v40;
  *((void *)v11 + 2) = v41;
  uint64_t v12 = (char *)a1 + v2[14];
  sub_A6E70();
  *(_OWORD *)uint64_t v12 = v40;
  *((void *)v12 + 2) = v41;
  uint64_t v13 = (char *)a1 + v2[15];
  sub_A6E70();
  *(_OWORD *)uint64_t v13 = v40;
  *((void *)v13 + 2) = v41;
  char v14 = (_OWORD *)((char *)a1 + v2[16]);
  sub_A6E70();
  *char v14 = v40;
  uint64_t v15 = (char *)a1 + v2[17];
  type metadata accessor for CGRect(0);
  sub_A6E70();
  *(_OWORD *)uint64_t v15 = v40;
  *((_OWORD *)v15 + 1) = v41;
  *((void *)v15 + 4) = v42;
  uint64_t v16 = (_OWORD *)((char *)a1 + v2[18]);
  sub_A6E70();
  *uint64_t v16 = v40;
  uint64_t v17 = (_OWORD *)((char *)a1 + v2[19]);
  sub_A6E70();
  *uint64_t v17 = v40;
  uint64_t v18 = v2[20];
  sub_7AF4(&qword_D82A8);
  sub_A6E70();
  *(_OWORD *)((char *)a1 + v18) = v40;
  char v19 = (char *)a1 + v2[21];
  sub_A6E70();
  *char v19 = v40;
  *((void *)v19 + 1) = *((void *)&v40 + 1);
  uint64_t v20 = v2[22];
  sub_A6E70();
  *(_OWORD *)((char *)a1 + v20) = v40;
  uint64_t v21 = v2[23];
  *(uint64_t *)((char *)a1 + v21) = (uint64_t)objc_msgSend(objc_allocWithZone((Class)LCSystemUtilities), "init", 0, 0, 0, 0);
  uint64_t v22 = (char *)a1 + v2[24];
  sub_7AF4(&qword_D8AF8);
  sub_A6E70();
  *uint64_t v22 = v40;
  *((void *)v22 + 1) = *((void *)&v40 + 1);
  CGFloat v23 = (char *)a1 + v2[25];
  LOBYTE(v39) = 0;
  sub_A6E70();
  char *v23 = v40;
  *((void *)v23 + 1) = *((void *)&v40 + 1);
  unint64_t v24 = (uint64_t *)((char *)a1 + v2[26]);
  objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ForeheadWindow()), "init", v39);
  sub_2A2BC(&qword_D8B00, (void (*)(uint64_t))type metadata accessor for ForeheadWindow);
  *unint64_t v24 = sub_A6340();
  v24[1] = v25;
  char v26 = (uint64_t *)((char *)a1 + v2[27]);
  if (qword_D7D98 != -1) {
    swift_once();
  }
  uint64_t v27 = (void *)static AXLTCaptionsProvider.shared;
  type metadata accessor for AXLTCaptionsProvider();
  sub_2A2BC(&qword_D8B08, (void (*)(uint64_t))type metadata accessor for AXLTCaptionsProvider);
  id v28 = v27;
  *char v26 = sub_A6340();
  v26[1] = v29;
  uint64_t v30 = v2[28];
  if (qword_D7D68 != -1) {
    swift_once();
  }
  os_log_type_t v31 = (void *)static LiveSpeechCaptionsViewsCoordinator.shared;
  *(uint64_t *)((char *)a1 + v30) = static LiveSpeechCaptionsViewsCoordinator.shared;
  uint64_t v32 = v2[29];
  uint64_t v33 = qword_D7E58;
  id v34 = v31;
  if (v33 != -1) {
    swift_once();
  }
  long long v35 = (char *)a1 + v32;
  AXLTSettingsManager.contentCategory.getter();
  double v37 = v36;
  sub_A7540();

  uint64_t result = sub_A6E70();
  *long long v35 = v40;
  *((void *)v35 + 1) = *((void *)&v40 + 1);
  return result;
}

uint64_t sub_2494C()
{
  return sub_A6550();
}

uint64_t sub_24970(uint64_t a1)
{
  uint64_t v2 = sub_7AF4(&qword_D8598);
  __chkstk_darwin(v2 - 8);
  sub_8860(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_D8598);
  return sub_A6560();
}

double sub_24A04@<D0>(_OWORD *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  double result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t sub_24A84(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v2;
  return sub_A60E0();
}

unint64_t _s19LiveSpeechUIService11WindowStateO8rawValueACSgSi_tcfC_0(unint64_t result)
{
  if (result >= 5) {
    return 5;
  }
  return result;
}

unint64_t sub_24B20()
{
  unint64_t result = qword_D8668;
  if (!qword_D8668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8668);
  }
  return result;
}

unint64_t sub_24B78()
{
  unint64_t result = qword_D8670;
  if (!qword_D8670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8670);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for WindowState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for WindowState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    void *result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24D28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 4;
        break;
    }
  }
  return result;
}

unsigned char *sub_24D50(unsigned char *result, char a2)
{
  void *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for WindowState()
{
  return &type metadata for WindowState;
}

uint64_t getEnumTagSinglePayload for LiveSpeechCaptionsWindowState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IconDirection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24EC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IconDirection()
{
  return &type metadata for IconDirection;
}

uint64_t *sub_24EFC(uint64_t *a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    unsigned int v4 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_7AF4(&qword_D7E78);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_A6920();
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        uint64_t v9 = sub_7AF4(&qword_D8598);
        memcpy(v4, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v4, a2, v7);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
      }
    }
    else
    {
      *unsigned int v4 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v11 = a3[5];
    uint64_t v12 = (uint64_t *)((char *)v4 + v11);
    uint64_t v13 = (uint64_t *)((char *)a2 + v11);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = sub_A6920();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = sub_7AF4(&qword_D8598);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v12, v13, v14);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
    }
    else
    {
      *uint64_t v12 = *v13;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = a3[6];
    uint64_t v18 = (uint64_t *)((char *)v4 + v17);
    char v19 = (uint64_t *)((char *)a2 + v17);
    sub_7AF4(&qword_D81B0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = sub_A63C0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    }
    else
    {
      *uint64_t v18 = *v19;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v21 = a3[7];
    uint64_t v22 = a3[8];
    CGFloat v23 = (char *)v4 + v21;
    unint64_t v24 = (char *)a2 + v21;
    char *v23 = *v24;
    *((void *)v23 + 1) = *((void *)v24 + 1);
    uint64_t v25 = (char *)v4 + v22;
    char v26 = (char *)a2 + v22;
    char *v25 = *v26;
    *((void *)v25 + 1) = *((void *)v26 + 1);
    uint64_t v27 = a3[9];
    uint64_t v28 = a3[10];
    uint64_t v29 = (uint64_t *)((char *)v4 + v27);
    uint64_t v30 = (uint64_t *)((char *)a2 + v27);
    uint64_t v105 = v30[1];
    *uint64_t v29 = *v30;
    v29[1] = v105;
    os_log_type_t v31 = (uint64_t *)((char *)v4 + v28);
    uint64_t v32 = (uint64_t *)((char *)a2 + v28);
    uint64_t v33 = v32[1];
    void *v31 = *v32;
    v31[1] = v33;
    v31[2] = v32[2];
    uint64_t v34 = a3[11];
    uint64_t v35 = a3[12];
    double v36 = (char *)v4 + v34;
    double v37 = (char *)a2 + v34;
    *(_OWORD *)double v36 = *(_OWORD *)v37;
    *((void *)v36 + 2) = *((void *)v37 + 2);
    double v38 = (char *)v4 + v35;
    uint64_t v39 = (char *)a2 + v35;
    *(_OWORD *)double v38 = *(_OWORD *)v39;
    *((void *)v38 + 2) = *((void *)v39 + 2);
    uint64_t v40 = a3[13];
    uint64_t v41 = a3[14];
    uint64_t v42 = (char *)v4 + v40;
    uint64_t v43 = (char *)a2 + v40;
    *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
    *((void *)v42 + 2) = *((void *)v43 + 2);
    uint64_t v44 = (char *)v4 + v41;
    unint64_t v45 = (char *)a2 + v41;
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
    *((void *)v44 + 2) = *((void *)v45 + 2);
    uint64_t v46 = a3[15];
    uint64_t v47 = a3[16];
    uint64_t v48 = (char *)v4 + v46;
    unint64_t v49 = (char *)a2 + v46;
    *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
    *((void *)v48 + 2) = *((void *)v49 + 2);
    uint64_t v50 = (uint64_t *)((char *)v4 + v47);
    uint64_t v51 = (uint64_t *)((char *)a2 + v47);
    uint64_t v104 = v51[1];
    *uint64_t v50 = *v51;
    v50[1] = v104;
    uint64_t v52 = a3[17];
    uint64_t v53 = a3[18];
    uint64_t v54 = (char *)v4 + v52;
    uint64_t v55 = (char *)a2 + v52;
    long long v56 = *((_OWORD *)v55 + 1);
    *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
    *((_OWORD *)v54 + 1) = v56;
    *((void *)v54 + 4) = *((void *)v55 + 4);
    uint64_t v57 = (uint64_t *)((char *)v4 + v53);
    os_log_t v58 = (uint64_t *)((char *)a2 + v53);
    uint64_t v103 = v58[1];
    *uint64_t v57 = *v58;
    v57[1] = v103;
    uint64_t v59 = a3[19];
    uint64_t v60 = a3[20];
    uint64_t v61 = (uint64_t *)((char *)v4 + v59);
    long long v62 = (uint64_t *)((char *)a2 + v59);
    uint64_t v63 = v62[1];
    *uint64_t v61 = *v62;
    v61[1] = v63;
    long long v64 = (uint64_t *)((char *)v4 + v60);
    uint64_t v65 = (char *)a2 + v60;
    uint64_t v101 = *(void **)v65;
    uint64_t v102 = *((void *)v65 + 1);
    *long long v64 = *(void *)v65;
    v64[1] = v102;
    uint64_t v66 = a3[21];
    uint64_t v67 = a3[22];
    long long v68 = (char *)v4 + v66;
    char v69 = (char *)a2 + v66;
    *long long v68 = *v69;
    *((void *)v68 + 1) = *((void *)v69 + 1);
    char v70 = (uint64_t *)((char *)v4 + v67);
    char v71 = (char *)a2 + v67;
    uint64_t v98 = *(void **)v71;
    uint64_t v99 = *((void *)v71 + 1);
    uint64_t v72 = a3[23];
    uint64_t v73 = a3[24];
    uint64_t v100 = *(void **)((char *)a2 + v72);
    *char v70 = v98;
    v70[1] = v99;
    *(uint64_t *)((char *)v4 + v72) = (uint64_t)v100;
    unsigned __int8 v74 = (char *)v4 + v73;
    *unsigned __int8 v74 = *((unsigned char *)a2 + v73);
    *((void *)v74 + 1) = *(uint64_t *)((char *)a2 + v73 + 8);
    uint64_t v75 = a3[25];
    uint64_t v76 = a3[26];
    long long v77 = (char *)v4 + v75;
    long long v78 = (char *)a2 + v75;
    *long long v77 = *v78;
    *((void *)v77 + 1) = *((void *)v78 + 1);
    uint64_t v79 = (uint64_t *)((char *)v4 + v76);
    uint64_t v80 = (uint64_t *)((char *)a2 + v76);
    uint64_t v81 = (void *)v80[1];
    *uint64_t v79 = *v80;
    v79[1] = v81;
    uint64_t v82 = a3[27];
    uint64_t v83 = a3[28];
    char v84 = (uint64_t *)((char *)v4 + v82);
    long long v85 = (uint64_t *)((char *)a2 + v82);
    uint64_t v86 = (void *)v85[1];
    *char v84 = *v85;
    v84[1] = v86;
    uint64_t v87 = *(void **)((char *)a2 + v83);
    *(uint64_t *)((char *)v4 + v83) = (uint64_t)v87;
    uint64_t v88 = a3[29];
    unint64_t v89 = (char *)v4 + v88;
    uint64_t v90 = (char *)a2 + v88;
    *unint64_t v89 = *v90;
    *((void *)v89 + 1) = *((void *)v90 + 1);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v91 = v101;
    swift_retain();
    swift_retain();
    id v92 = v98;
    swift_retain();
    id v93 = v100;
    swift_retain();
    swift_retain();
    id v94 = v81;
    id v95 = v86;
    id v96 = v87;
  }
  swift_retain();
  return v4;
}

uint64_t sub_25580(uint64_t a1, int *a2)
{
  sub_7AF4(&qword_D7E78);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_A6920();
    uint64_t v5 = *(void *)(v4 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v6 = a1 + a2[5];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_A6920();
    uint64_t v8 = *(void *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v9 = a1 + a2[6];
  sub_7AF4(&qword_D81B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_A63C0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void *sub_25914(void *a1, void *a2, int *a3)
{
  sub_7AF4(&qword_D7E78);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_A6920();
    uint64_t v7 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      uint64_t v8 = sub_7AF4(&qword_D8598);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = a3[5];
  uint64_t v10 = (void *)((char *)a1 + v9);
  uint64_t v11 = (void *)((char *)a2 + v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_A6920();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_7AF4(&qword_D8598);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  else
  {
    *uint64_t v10 = *v11;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  sub_7AF4(&qword_D81B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = sub_A63C0();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  }
  else
  {
    *uint64_t v16 = *v17;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = a3[7];
  uint64_t v20 = a3[8];
  uint64_t v21 = (char *)a1 + v19;
  uint64_t v22 = (char *)a2 + v19;
  *uint64_t v21 = *v22;
  *((void *)v21 + 1) = *((void *)v22 + 1);
  CGFloat v23 = (char *)a1 + v20;
  unint64_t v24 = (char *)a2 + v20;
  char *v23 = *v24;
  *((void *)v23 + 1) = *((void *)v24 + 1);
  uint64_t v25 = a3[9];
  uint64_t v26 = a3[10];
  uint64_t v27 = (void *)((char *)a1 + v25);
  uint64_t v28 = (void *)((char *)a2 + v25);
  uint64_t v103 = v28[1];
  *uint64_t v27 = *v28;
  v27[1] = v103;
  uint64_t v29 = (void *)((char *)a1 + v26);
  uint64_t v30 = (void *)((char *)a2 + v26);
  uint64_t v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  v29[2] = v30[2];
  uint64_t v32 = a3[11];
  uint64_t v33 = a3[12];
  uint64_t v34 = (char *)a1 + v32;
  uint64_t v35 = (char *)a2 + v32;
  *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
  *((void *)v34 + 2) = *((void *)v35 + 2);
  double v36 = (char *)a1 + v33;
  double v37 = (char *)a2 + v33;
  *(_OWORD *)double v36 = *(_OWORD *)v37;
  *((void *)v36 + 2) = *((void *)v37 + 2);
  uint64_t v38 = a3[13];
  uint64_t v39 = a3[14];
  uint64_t v40 = (char *)a1 + v38;
  uint64_t v41 = (char *)a2 + v38;
  *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
  *((void *)v40 + 2) = *((void *)v41 + 2);
  uint64_t v42 = (char *)a1 + v39;
  uint64_t v43 = (char *)a2 + v39;
  *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
  *((void *)v42 + 2) = *((void *)v43 + 2);
  uint64_t v44 = a3[15];
  uint64_t v45 = a3[16];
  uint64_t v46 = (char *)a1 + v44;
  uint64_t v47 = (char *)a2 + v44;
  *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
  *((void *)v46 + 2) = *((void *)v47 + 2);
  uint64_t v48 = (void *)((char *)a1 + v45);
  unint64_t v49 = (void *)((char *)a2 + v45);
  uint64_t v102 = v49[1];
  *uint64_t v48 = *v49;
  v48[1] = v102;
  uint64_t v50 = a3[17];
  uint64_t v51 = a3[18];
  uint64_t v52 = (char *)a1 + v50;
  uint64_t v53 = (char *)a2 + v50;
  long long v54 = *((_OWORD *)v53 + 1);
  *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
  *((_OWORD *)v52 + 1) = v54;
  *((void *)v52 + 4) = *((void *)v53 + 4);
  uint64_t v55 = (void *)((char *)a1 + v51);
  long long v56 = (void *)((char *)a2 + v51);
  uint64_t v101 = v56[1];
  *uint64_t v55 = *v56;
  v55[1] = v101;
  uint64_t v57 = a3[19];
  uint64_t v58 = a3[20];
  uint64_t v59 = (void *)((char *)a1 + v57);
  uint64_t v60 = (void *)((char *)a2 + v57);
  uint64_t v61 = v60[1];
  *uint64_t v59 = *v60;
  v59[1] = v61;
  long long v62 = (void *)((char *)a1 + v58);
  uint64_t v63 = (char *)a2 + v58;
  uint64_t v99 = *(void **)v63;
  uint64_t v100 = *((void *)v63 + 1);
  *long long v62 = *(void *)v63;
  v62[1] = v100;
  uint64_t v64 = a3[21];
  uint64_t v65 = a3[22];
  uint64_t v66 = (char *)a1 + v64;
  uint64_t v67 = (char *)a2 + v64;
  char *v66 = *v67;
  *((void *)v66 + 1) = *((void *)v67 + 1);
  long long v68 = (void *)((char *)a1 + v65);
  char v69 = (char *)a2 + v65;
  id v96 = *(void **)v69;
  uint64_t v97 = *((void *)v69 + 1);
  uint64_t v70 = a3[23];
  uint64_t v71 = a3[24];
  uint64_t v98 = *(void **)((char *)a2 + v70);
  *long long v68 = v96;
  v68[1] = v97;
  *(void *)((char *)a1 + v70) = v98;
  uint64_t v72 = (char *)a1 + v71;
  *uint64_t v72 = *((unsigned char *)a2 + v71);
  *((void *)v72 + 1) = *(void *)((char *)a2 + v71 + 8);
  uint64_t v73 = a3[25];
  uint64_t v74 = a3[26];
  uint64_t v75 = (char *)a1 + v73;
  uint64_t v76 = (char *)a2 + v73;
  *uint64_t v75 = *v76;
  *((void *)v75 + 1) = *((void *)v76 + 1);
  long long v77 = (void *)((char *)a1 + v74);
  long long v78 = (void *)((char *)a2 + v74);
  uint64_t v79 = (void *)v78[1];
  *long long v77 = *v78;
  v77[1] = v79;
  uint64_t v80 = a3[27];
  uint64_t v81 = a3[28];
  uint64_t v82 = (void *)((char *)a1 + v80);
  uint64_t v83 = (void *)((char *)a2 + v80);
  char v84 = (void *)v83[1];
  *uint64_t v82 = *v83;
  v82[1] = v84;
  long long v85 = *(void **)((char *)a2 + v81);
  *(void *)((char *)a1 + v81) = v85;
  uint64_t v86 = a3[29];
  uint64_t v87 = (char *)a1 + v86;
  uint64_t v88 = (char *)a2 + v86;
  *uint64_t v87 = *v88;
  *((void *)v87 + 1) = *((void *)v88 + 1);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v89 = v99;
  swift_retain();
  swift_retain();
  id v90 = v96;
  swift_retain();
  id v91 = v98;
  swift_retain();
  swift_retain();
  id v92 = v79;
  id v93 = v84;
  id v94 = v85;
  swift_retain();
  return a1;
}

void *sub_25F4C(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_A35C((uint64_t)a1, &qword_D7E78);
    sub_7AF4(&qword_D7E78);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_A6920();
      uint64_t v7 = *(void *)(v6 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        uint64_t v8 = sub_7AF4(&qword_D8598);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    uint64_t v10 = (void *)((char *)a1 + v9);
    uint64_t v11 = (void *)((char *)a2 + v9);
    sub_A35C((uint64_t)a1 + v9, &qword_D7E78);
    sub_7AF4(&qword_D7E78);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_A6920();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        uint64_t v14 = sub_7AF4(&qword_D8598);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = a3[6];
    uint64_t v16 = (void *)((char *)a1 + v15);
    uint64_t v17 = (void *)((char *)a2 + v15);
    sub_A35C((uint64_t)a1 + v15, &qword_D81B0);
    sub_7AF4(&qword_D81B0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = sub_A63C0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    }
    else
    {
      *uint64_t v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v19 = a3[7];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  char *v20 = *v21;
  *((void *)v20 + 1) = *((void *)v21 + 1);
  swift_retain();
  swift_release();
  uint64_t v22 = a3[8];
  CGFloat v23 = (char *)a1 + v22;
  unint64_t v24 = (char *)a2 + v22;
  char *v23 = *v24;
  *((void *)v23 + 1) = *((void *)v24 + 1);
  swift_retain();
  swift_release();
  uint64_t v25 = a3[9];
  uint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = (void *)((char *)a2 + v25);
  *uint64_t v26 = *v27;
  v26[1] = v27[1];
  swift_retain();
  swift_release();
  uint64_t v28 = a3[10];
  uint64_t v29 = (void *)((char *)a1 + v28);
  uint64_t v30 = (char *)a2 + v28;
  *uint64_t v29 = *(void *)((char *)a2 + v28);
  v29[1] = *(void *)((char *)a2 + v28 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v29[2] = *((void *)v30 + 2);
  swift_retain();
  swift_release();
  uint64_t v31 = a3[11];
  uint64_t v32 = (void *)((char *)a1 + v31);
  uint64_t v33 = (void *)((char *)a2 + v31);
  void *v32 = *v33;
  v32[1] = v33[1];
  v32[2] = v33[2];
  swift_retain();
  swift_release();
  uint64_t v34 = a3[12];
  uint64_t v35 = (void *)((char *)a1 + v34);
  double v36 = (void *)((char *)a2 + v34);
  *uint64_t v35 = *v36;
  v35[1] = v36[1];
  v35[2] = v36[2];
  swift_retain();
  swift_release();
  uint64_t v37 = a3[13];
  uint64_t v38 = (void *)((char *)a1 + v37);
  uint64_t v39 = (void *)((char *)a2 + v37);
  *uint64_t v38 = *v39;
  v38[1] = v39[1];
  v38[2] = v39[2];
  swift_retain();
  swift_release();
  uint64_t v40 = a3[14];
  uint64_t v41 = (void *)((char *)a1 + v40);
  uint64_t v42 = (void *)((char *)a2 + v40);
  *uint64_t v41 = *v42;
  v41[1] = v42[1];
  v41[2] = v42[2];
  swift_retain();
  swift_release();
  uint64_t v43 = a3[15];
  uint64_t v44 = (void *)((char *)a1 + v43);
  uint64_t v45 = (void *)((char *)a2 + v43);
  void *v44 = *v45;
  v44[1] = v45[1];
  v44[2] = v45[2];
  swift_retain();
  swift_release();
  uint64_t v46 = a3[16];
  uint64_t v47 = (void *)((char *)a1 + v46);
  uint64_t v48 = (void *)((char *)a2 + v46);
  *uint64_t v47 = *v48;
  v47[1] = v48[1];
  swift_retain();
  swift_release();
  uint64_t v49 = a3[17];
  uint64_t v50 = (void *)((char *)a1 + v49);
  uint64_t v51 = (void *)((char *)a2 + v49);
  *uint64_t v50 = *v51;
  v50[1] = v51[1];
  v50[2] = v51[2];
  v50[3] = v51[3];
  v50[4] = v51[4];
  swift_retain();
  swift_release();
  uint64_t v52 = a3[18];
  uint64_t v53 = (void *)((char *)a1 + v52);
  long long v54 = (void *)((char *)a2 + v52);
  *uint64_t v53 = *v54;
  v53[1] = v54[1];
  swift_retain();
  swift_release();
  uint64_t v55 = a3[19];
  long long v56 = (void *)((char *)a1 + v55);
  uint64_t v57 = (void *)((char *)a2 + v55);
  void *v56 = *v57;
  v56[1] = v57[1];
  swift_retain();
  swift_release();
  uint64_t v58 = a3[20];
  uint64_t v59 = (void *)((char *)a1 + v58);
  uint64_t v60 = (char *)a2 + v58;
  uint64_t v61 = *(void **)((char *)a1 + v58);
  long long v62 = *(void **)((char *)a2 + v58);
  *uint64_t v59 = v62;
  id v63 = v62;

  v59[1] = *((void *)v60 + 1);
  swift_retain();
  swift_release();
  uint64_t v64 = a3[21];
  uint64_t v65 = (char *)a1 + v64;
  uint64_t v66 = (char *)a2 + v64;
  *uint64_t v65 = *v66;
  *((void *)v65 + 1) = *((void *)v66 + 1);
  swift_retain();
  swift_release();
  uint64_t v67 = a3[22];
  long long v68 = (void *)((char *)a1 + v67);
  char v69 = (char *)a2 + v67;
  uint64_t v70 = *(void **)((char *)a1 + v67);
  uint64_t v71 = *(void **)((char *)a2 + v67);
  *long long v68 = v71;
  id v72 = v71;

  v68[1] = *((void *)v69 + 1);
  swift_retain();
  swift_release();
  uint64_t v73 = a3[23];
  uint64_t v74 = *(void **)((char *)a2 + v73);
  uint64_t v75 = *(void **)((char *)a1 + v73);
  *(void *)((char *)a1 + v73) = v74;
  id v76 = v74;

  uint64_t v77 = a3[24];
  long long v78 = (char *)a1 + v77;
  uint64_t v79 = (char *)a2 + v77;
  *long long v78 = *v79;
  *((void *)v78 + 1) = *((void *)v79 + 1);
  swift_retain();
  swift_release();
  uint64_t v80 = a3[25];
  uint64_t v81 = (char *)a1 + v80;
  uint64_t v82 = (char *)a2 + v80;
  *uint64_t v81 = *v82;
  *((void *)v81 + 1) = *((void *)v82 + 1);
  swift_retain();
  swift_release();
  uint64_t v83 = a3[26];
  char v84 = (void *)((char *)a1 + v83);
  long long v85 = (void *)((char *)a2 + v83);
  *char v84 = *v85;
  uint64_t v86 = (void *)v85[1];
  uint64_t v87 = (void *)v84[1];
  v84[1] = v86;
  id v88 = v86;

  uint64_t v89 = a3[27];
  id v90 = (void *)((char *)a1 + v89);
  id v91 = (void *)((char *)a2 + v89);
  *id v90 = *v91;
  id v92 = (void *)v91[1];
  id v93 = (void *)v90[1];
  v90[1] = v92;
  id v94 = v92;

  uint64_t v95 = a3[28];
  id v96 = *(void **)((char *)a2 + v95);
  uint64_t v97 = *(void **)((char *)a1 + v95);
  *(void *)((char *)a1 + v95) = v96;
  id v98 = v96;

  uint64_t v99 = a3[29];
  uint64_t v100 = (char *)a1 + v99;
  uint64_t v101 = (char *)a2 + v99;
  *uint64_t v100 = *v101;
  *((void *)v100 + 1) = *((void *)v101 + 1);
  swift_retain();
  swift_release();
  return a1;
}

char *sub_26700(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_7AF4(&qword_D7E78);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_A6920();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_7AF4(&qword_D8598);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v10 = a3[5];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = sub_A6920();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      uint64_t v15 = sub_7AF4(&qword_D8598);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v11, v12, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v16 = a3[6];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = sub_7AF4(&qword_D81B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = sub_A63C0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v17, v18, v20);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  uint64_t v21 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v21] = *(_OWORD *)&a2[v21];
  uint64_t v22 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  CGFloat v23 = &a1[v22];
  unint64_t v24 = &a2[v22];
  *(_OWORD *)CGFloat v23 = *(_OWORD *)v24;
  *((void *)v23 + 2) = *((void *)v24 + 2);
  uint64_t v25 = a3[11];
  uint64_t v26 = a3[12];
  uint64_t v27 = &a1[v25];
  uint64_t v28 = &a2[v25];
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
  *((void *)v27 + 2) = *((void *)v28 + 2);
  uint64_t v29 = &a1[v26];
  uint64_t v30 = &a2[v26];
  *((void *)v29 + 2) = *((void *)v30 + 2);
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  uint64_t v31 = a3[13];
  uint64_t v32 = a3[14];
  uint64_t v33 = &a1[v31];
  uint64_t v34 = &a2[v31];
  *((void *)v33 + 2) = *((void *)v34 + 2);
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  uint64_t v35 = &a1[v32];
  double v36 = &a2[v32];
  *((void *)v35 + 2) = *((void *)v36 + 2);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
  uint64_t v37 = a3[15];
  uint64_t v38 = a3[16];
  uint64_t v39 = &a1[v37];
  uint64_t v40 = &a2[v37];
  *((void *)v39 + 2) = *((void *)v40 + 2);
  *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
  *(_OWORD *)&a1[v38] = *(_OWORD *)&a2[v38];
  uint64_t v41 = a3[17];
  uint64_t v42 = a3[18];
  uint64_t v43 = &a1[v41];
  uint64_t v44 = &a2[v41];
  *((void *)v43 + 4) = *((void *)v44 + 4);
  long long v45 = *((_OWORD *)v44 + 1);
  *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
  *((_OWORD *)v43 + 1) = v45;
  *(_OWORD *)&a1[v42] = *(_OWORD *)&a2[v42];
  uint64_t v46 = a3[20];
  *(_OWORD *)&a1[a3[19]] = *(_OWORD *)&a2[a3[19]];
  *(_OWORD *)&a1[v46] = *(_OWORD *)&a2[v46];
  uint64_t v47 = a3[22];
  *(_OWORD *)&a1[a3[21]] = *(_OWORD *)&a2[a3[21]];
  *(_OWORD *)&a1[v47] = *(_OWORD *)&a2[v47];
  uint64_t v48 = a3[24];
  *(void *)&a1[a3[23]] = *(void *)&a2[a3[23]];
  *(_OWORD *)&a1[v48] = *(_OWORD *)&a2[v48];
  uint64_t v49 = a3[26];
  *(_OWORD *)&a1[a3[25]] = *(_OWORD *)&a2[a3[25]];
  *(_OWORD *)&a1[v49] = *(_OWORD *)&a2[v49];
  uint64_t v50 = a3[28];
  *(_OWORD *)&a1[a3[27]] = *(_OWORD *)&a2[a3[27]];
  *(void *)&a1[v50] = *(void *)&a2[v50];
  *(_OWORD *)&a1[a3[29]] = *(_OWORD *)&a2[a3[29]];
  return a1;
}

char *sub_26BAC(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_A35C((uint64_t)a1, &qword_D7E78);
    uint64_t v6 = sub_7AF4(&qword_D7E78);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_A6920();
      uint64_t v8 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        uint64_t v9 = sub_7AF4(&qword_D8598);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    sub_A35C((uint64_t)&a1[v10], &qword_D7E78);
    uint64_t v13 = sub_7AF4(&qword_D7E78);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = sub_A6920();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14))
      {
        uint64_t v16 = sub_7AF4(&qword_D8598);
        memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v11, v12, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    uint64_t v17 = a3[6];
    uint64_t v18 = &a1[v17];
    uint64_t v19 = &a2[v17];
    sub_A35C((uint64_t)&a1[v17], &qword_D81B0);
    uint64_t v20 = sub_7AF4(&qword_D81B0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v21 = sub_A63C0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v18, v19, v21);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
    }
  }
  uint64_t v22 = a3[7];
  CGFloat v23 = &a1[v22];
  unint64_t v24 = &a2[v22];
  char *v23 = *v24;
  *((void *)v23 + 1) = *((void *)v24 + 1);
  swift_release();
  uint64_t v25 = a3[8];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  *uint64_t v26 = *v27;
  *((void *)v26 + 1) = *((void *)v27 + 1);
  swift_release();
  uint64_t v28 = a3[9];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v32 = *(void *)v30;
  uint64_t v31 = *((void *)v30 + 1);
  *(void *)uint64_t v29 = v32;
  *((void *)v29 + 1) = v31;
  swift_release();
  uint64_t v33 = a3[10];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v36 = *(void *)&a2[v33 + 8];
  *(void *)uint64_t v34 = *(void *)&a2[v33];
  *((void *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  *((void *)v34 + 2) = *((void *)v35 + 2);
  swift_release();
  uint64_t v37 = a3[11];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
  *((void *)v38 + 2) = *((void *)v39 + 2);
  swift_release();
  uint64_t v40 = a3[12];
  uint64_t v41 = &a1[v40];
  uint64_t v42 = &a2[v40];
  *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
  *((void *)v41 + 2) = *((void *)v42 + 2);
  swift_release();
  uint64_t v43 = a3[13];
  uint64_t v44 = &a1[v43];
  long long v45 = &a2[v43];
  *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
  *((void *)v44 + 2) = *((void *)v45 + 2);
  swift_release();
  uint64_t v46 = a3[14];
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
  *((void *)v47 + 2) = *((void *)v48 + 2);
  swift_release();
  uint64_t v49 = a3[15];
  uint64_t v50 = &a1[v49];
  uint64_t v51 = &a2[v49];
  *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
  *((void *)v50 + 2) = *((void *)v51 + 2);
  swift_release();
  uint64_t v52 = a3[16];
  uint64_t v53 = &a1[v52];
  long long v54 = &a2[v52];
  *(void *)uint64_t v53 = *(void *)v54;
  *((void *)v53 + 1) = *((void *)v54 + 1);
  swift_release();
  uint64_t v55 = a3[17];
  long long v56 = &a1[v55];
  uint64_t v57 = &a2[v55];
  long long v58 = *((_OWORD *)v57 + 1);
  *(_OWORD *)long long v56 = *(_OWORD *)v57;
  *((_OWORD *)v56 + 1) = v58;
  *((void *)v56 + 4) = *((void *)v57 + 4);
  swift_release();
  uint64_t v59 = a3[18];
  uint64_t v60 = &a1[v59];
  uint64_t v61 = &a2[v59];
  *(void *)uint64_t v60 = *(void *)v61;
  *((void *)v60 + 1) = *((void *)v61 + 1);
  swift_release();
  uint64_t v62 = a3[19];
  id v63 = &a1[v62];
  uint64_t v64 = &a2[v62];
  *(void *)id v63 = *(void *)v64;
  *((void *)v63 + 1) = *((void *)v64 + 1);
  swift_release();
  uint64_t v65 = a3[20];
  uint64_t v66 = &a1[v65];
  uint64_t v67 = &a2[v65];
  long long v68 = *(void **)&a1[v65];
  *(void *)uint64_t v66 = *(void *)v67;

  *((void *)v66 + 1) = *((void *)v67 + 1);
  swift_release();
  uint64_t v69 = a3[21];
  uint64_t v70 = &a1[v69];
  uint64_t v71 = &a2[v69];
  *uint64_t v70 = *v71;
  *((void *)v70 + 1) = *((void *)v71 + 1);
  swift_release();
  uint64_t v72 = a3[22];
  uint64_t v73 = &a1[v72];
  uint64_t v74 = &a2[v72];
  uint64_t v75 = *(void **)&a1[v72];
  *(void *)uint64_t v73 = *(void *)v74;

  *((void *)v73 + 1) = *((void *)v74 + 1);
  swift_release();
  uint64_t v76 = a3[23];
  uint64_t v77 = *(void **)&a1[v76];
  *(void *)&a1[v76] = *(void *)&a2[v76];

  uint64_t v78 = a3[24];
  uint64_t v79 = &a1[v78];
  uint64_t v80 = &a2[v78];
  *uint64_t v79 = *v80;
  *((void *)v79 + 1) = *((void *)v80 + 1);
  swift_release();
  uint64_t v81 = a3[25];
  uint64_t v82 = &a1[v81];
  uint64_t v83 = &a2[v81];
  *uint64_t v82 = *v83;
  *((void *)v82 + 1) = *((void *)v83 + 1);
  swift_release();
  uint64_t v84 = a3[26];
  long long v85 = &a1[v84];
  uint64_t v86 = &a2[v84];
  uint64_t v88 = *(void *)v86;
  uint64_t v87 = *((void *)v86 + 1);
  uint64_t v89 = (void *)*((void *)v85 + 1);
  *(void *)long long v85 = v88;
  *((void *)v85 + 1) = v87;

  uint64_t v90 = a3[27];
  id v91 = &a1[v90];
  id v92 = &a2[v90];
  uint64_t v94 = *(void *)v92;
  uint64_t v93 = *((void *)v92 + 1);
  uint64_t v95 = (void *)*((void *)v91 + 1);
  *(void *)id v91 = v94;
  *((void *)v91 + 1) = v93;

  uint64_t v96 = a3[28];
  uint64_t v97 = *(void **)&a1[v96];
  *(void *)&a1[v96] = *(void *)&a2[v96];

  uint64_t v98 = a3[29];
  uint64_t v99 = &a1[v98];
  uint64_t v100 = &a2[v98];
  *uint64_t v99 = *v100;
  *((void *)v99 + 1) = *((void *)v100 + 1);
  swift_release();
  return a1;
}

uint64_t sub_27260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_27274);
}

uint64_t sub_27274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_7AF4(&qword_D85C0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_7AF4(&qword_D81B8);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 24);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 40) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_27394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_273A8);
}

uint64_t sub_273A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_7AF4(&qword_D85C0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = sub_7AF4(&qword_D81B8);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 40) + 8) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 24);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for LiveCaptionsRootView()
{
  uint64_t result = qword_D86D0;
  if (!qword_D86D0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_27510()
{
  sub_27638();
  if (v0 <= 0x3F)
  {
    sub_B23C();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_27638()
{
  if (!qword_D8590)
  {
    sub_7C5C(&qword_D8598);
    unint64_t v0 = sub_A6200();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_D8590);
    }
  }
}

uint64_t sub_27694()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_276B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LiveCaptionsRootView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_27718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for LiveCaptionsRootView() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_18784(a1, v6, a2);
}

uint64_t sub_2779C()
{
  return sub_28794((uint64_t)sub_2A3D0, (uint64_t (*)(unint64_t, uint64_t))sub_22054);
}

uint64_t sub_277CC(uint64_t a1)
{
  return sub_27950(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1DD14);
}

uint64_t sub_277E4()
{
  return sub_22298();
}

uint64_t sub_27804(uint64_t a1)
{
  return sub_27950(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1968C);
}

uint64_t sub_27820(uint64_t a1)
{
  return sub_27950(a1, (uint64_t (*)(uint64_t, uint64_t))sub_19F78);
}

uint64_t sub_2783C(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  type metadata accessor for LiveCaptionsRootView();

  return sub_1C5B8(a1, a2, a3, a4);
}

uint64_t sub_278CC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_27904(double *a1)
{
  return (*(uint64_t (**)(double, double, double, double))(v1 + 16))(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_27938(uint64_t a1)
{
  return sub_27950(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1CBDC);
}

uint64_t sub_27950(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for LiveCaptionsRootView() - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5);
}

void sub_279D8()
{
  type metadata accessor for LiveCaptionsRootView();
  sub_A62C0();

  sub_1CD14();
}

uint64_t sub_27AA8()
{
  uint64_t v1 = (int *)type metadata accessor for LiveCaptionsRootView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v18 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v19 = sub_A62C0();
  uint64_t v4 = *(void *)(v19 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v20 = v0;
  uint64_t v7 = v0 + v3;
  sub_7AF4(&qword_D7E78);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_A6920();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v10 = v7 + v1[5];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_A6920();
    uint64_t v12 = *(void *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v13 = v7 + v1[6];
  sub_7AF4(&qword_D81B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = sub_A63C0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    swift_release();
  }
  uint64_t v15 = v2 | v5 | 7;
  uint64_t v16 = (v3 + v18 + v5) & ~v5;
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v20 + v16, v19);

  return _swift_deallocObject(v20, v16 + v6, v15);
}

uint64_t sub_27F4C()
{
  type metadata accessor for LiveCaptionsRootView();
  sub_A62C0();

  return sub_1D8CC();
}

unint64_t sub_28030()
{
  unint64_t result = qword_D87E8;
  if (!qword_D87E8)
  {
    sub_7C5C(&qword_D87B8);
    sub_A45C(&qword_D87F0, &qword_D87B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D87E8);
  }
  return result;
}

uint64_t sub_280D0()
{
  return sub_2A258((uint64_t (*)(void, void, double, double, double, double))sub_1DB14);
}

void sub_28100()
{
  type metadata accessor for LiveCaptionsRootView();

  sub_23FC4();
}

uint64_t sub_28170(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_28180()
{
  return swift_release();
}

uint64_t sub_28190()
{
  uint64_t v1 = (int *)type metadata accessor for LiveCaptionsRootView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  sub_7AF4(&qword_D7E78);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_A6920();
    uint64_t v7 = *(void *)(v6 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v0 + v3, 1, v6)) {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v3, v6);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v5 + v1[5];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = sub_A6920();
    uint64_t v10 = *(void *)(v9 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v11 = v5 + v1[6];
  sub_7AF4(&qword_D81B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_A63C0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

id sub_285B0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for LiveCaptionsRootView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_24188(a1, v4);
}

uint64_t sub_28650()
{
  return sub_228B4(*(unsigned __int8 *)(v0 + 16), *(void *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40));
}

uint64_t sub_28674()
{
  return sub_1CC48();
}

uint64_t sub_28690(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_7C5C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2870C()
{
  return sub_28690(&qword_D8868, &qword_D8870, (void (*)(void))sub_2873C);
}

unint64_t sub_2873C()
{
  unint64_t result = qword_D8878;
  if (!qword_D8878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8878);
  }
  return result;
}

uint64_t sub_28794(uint64_t a1, uint64_t (*a2)(unint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(type metadata accessor for LiveCaptionsRootView() - 8);
  return a2(v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a1);
}

uint64_t sub_2880C()
{
  return sub_28E80((uint64_t (*)(uint64_t, __n128, __n128, __n128, __n128))sub_2212C);
}

uint64_t sub_28824()
{
  return sub_221A0(v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_28848()
{
  return sub_28690(&qword_D8900, &qword_D88B8, (void (*)(void))sub_28878);
}

uint64_t sub_28878()
{
  return sub_28690(&qword_D8908, &qword_D88B0, (void (*)(void))sub_288A8);
}

uint64_t sub_288A8()
{
  return sub_28690(&qword_D8910, &qword_D88A8, (void (*)(void))sub_288D8);
}

unint64_t sub_288D8()
{
  unint64_t result = qword_D8918;
  if (!qword_D8918)
  {
    sub_7C5C(&qword_D88A0);
    sub_28690(&qword_D8920, &qword_D8898, (void (*)(void))sub_289A4);
    sub_A45C(&qword_D8940, &qword_D8948);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8918);
  }
  return result;
}

unint64_t sub_289A4()
{
  unint64_t result = qword_D8928;
  if (!qword_D8928)
  {
    sub_7C5C(&qword_D8890);
    sub_A45C(&qword_D8930, &qword_D8888);
    sub_A45C(&qword_D8938, &qword_D88F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8928);
  }
  return result;
}

uint64_t sub_28A6C()
{
  return sub_28A84(sub_2100C);
}

uint64_t sub_28A84(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for LiveCaptionsRootView() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

id sub_28AFC()
{
  uint64_t v1 = type metadata accessor for LiveCaptionsRootView();
  uint64_t v2 = *(void **)(v0
                + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80))
                + *(int *)(v1 + 92));

  return [v2 idleSleepTimerDisabled:0];
}

uint64_t sub_28B7C()
{
  return sub_28E80((uint64_t (*)(uint64_t, __n128, __n128, __n128, __n128))sub_21134);
}

unint64_t sub_28B94()
{
  unint64_t result = qword_D8958;
  if (!qword_D8958)
  {
    sub_7C5C(&qword_D88D0);
    sub_7C5C(&qword_D88C0);
    sub_28690(&qword_D88F8, &qword_D88C0, (void (*)(void))sub_28848);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8958);
  }
  return result;
}

unint64_t sub_28C78()
{
  unint64_t result = qword_D8960;
  if (!qword_D8960)
  {
    sub_7C5C(&qword_D9110);
    sub_2A2BC(&qword_D9280, (void (*)(uint64_t))&type metadata accessor for AXLTCaption);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8960);
  }
  return result;
}

uint64_t sub_28D20(long long *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for LiveCaptionsRootView() - 8);
  uint64_t v4 = (double *)(v1
                + ((*(void *)(v3 + 64)
                  + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
                  + 7) & 0xFFFFFFFFFFFFFFF8));
  double v5 = *v4;
  double v6 = v4[1];
  double v7 = v4[2];
  double v8 = v4[3];

  return sub_214E8(a1, v5, v6, v7, v8);
}

uint64_t sub_28DC8()
{
  return sub_28794((uint64_t)sub_28DF4, (uint64_t (*)(unint64_t, uint64_t))sub_23CCC);
}

uint64_t sub_28DF4()
{
  return sub_23D2C(*(void *)(v0 + 16));
}

unint64_t sub_28E10()
{
  unint64_t result = qword_D8970;
  if (!qword_D8970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8970);
  }
  return result;
}

uint64_t sub_28E68()
{
  return sub_28E80((uint64_t (*)(uint64_t, __n128, __n128, __n128, __n128))sub_1E8E4);
}

uint64_t sub_28E80(uint64_t (*a1)(uint64_t, __n128, __n128, __n128, __n128))
{
  uint64_t v2 = *(void *)(type metadata accessor for LiveCaptionsRootView() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v1 + v3;
  double v5 = (unint64_t *)(v1 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  v6.n128_u64[0] = *v5;
  v7.n128_u64[0] = v5[1];
  v8.n128_u64[0] = v5[2];
  v9.n128_u64[0] = v5[3];

  return a1(v4, v6, v7, v8, v9);
}

uint64_t sub_28F28(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_28F90(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_28FF0()
{
  return sub_22308(*(void *)(v0 + 16), *(unsigned char *)(v0 + 56), *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

uint64_t sub_2901C()
{
  uint64_t v1 = (int *)type metadata accessor for LiveCaptionsRootView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  sub_7AF4(&qword_D7E78);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_A6920();
    uint64_t v7 = *(void *)(v6 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v0 + v3, 1, v6)) {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v3, v6);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v5 + v1[5];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = sub_A6920();
    uint64_t v10 = *(void *)(v9 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v11 = v5 + v1[6];
  sub_7AF4(&qword_D81B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_A63C0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 32, v2 | 7);
}

void sub_2943C()
{
  uint64_t v1 = *(void *)(type metadata accessor for LiveCaptionsRootView() - 8);
  uint64_t v2 = (double *)(v0
                + ((*(void *)(v1 + 64)
                  + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
                  + 7) & 0xFFFFFFFFFFFFFFF8));
  sub_1A070(*v2, v2[1], v2[2], v2[3]);
}

uint64_t sub_294D8()
{
  return sub_28690(&qword_D8A18, &qword_D8A20, (void (*)(void))sub_29508);
}

uint64_t sub_29508()
{
  return sub_28690(&qword_D8A28, &qword_D8A30, (void (*)(void))sub_29538);
}

unint64_t sub_29538()
{
  unint64_t result = qword_D8A38;
  if (!qword_D8A38)
  {
    sub_7C5C(&qword_D8A40);
    sub_295D8(&qword_D8A48, &qword_D8A50, (void (*)(void))sub_2967C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8A38);
  }
  return result;
}

uint64_t sub_295D8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_7C5C(a2);
    a3();
    sub_A45C(&qword_D8160, &qword_D8168);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_2967C()
{
  unint64_t result = qword_D8A58;
  if (!qword_D8A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8A58);
  }
  return result;
}

unint64_t sub_296D0()
{
  unint64_t result = qword_D8A60;
  if (!qword_D8A60)
  {
    sub_7C5C(&qword_D89C8);
    sub_A45C(&qword_D8170, &qword_D8108);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8A60);
  }
  return result;
}

uint64_t sub_29768(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 160);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  return a1;
}

double sub_29868(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 192) = -1;
  return result;
}

uint64_t sub_29890(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unsigned __int8 a25)
{
  if (a25 != 255)
  {
    return sub_29928(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25 & 1);
  }
  return result;
}

uint64_t sub_29928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if ((a25 & 1) == 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_2998C(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 192);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    v4);
  return a1;
}

uint64_t sub_29A08(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unsigned __int8 a25)
{
  if (a25 != 255)
  {
    return sub_29AA0(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25 & 1);
  }
  return result;
}

uint64_t sub_29AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if ((a25 & 1) == 0)
  {
    swift_release();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t sub_29B08(uint64_t result)
{
  *(unsigned char *)(result + 192) = 1;
  return result;
}

unint64_t sub_29B14()
{
  unint64_t result = qword_D8A98;
  if (!qword_D8A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8A98);
  }
  return result;
}

unint64_t sub_29B68()
{
  unint64_t result = qword_D8AA0;
  if (!qword_D8AA0)
  {
    sub_7C5C(&qword_D8A88);
    sub_A45C(&qword_D8AA8, &qword_D8AB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8AA0);
  }
  return result;
}

uint64_t sub_29C08(uint64_t result)
{
  *(unsigned char *)(result + 192) = 0;
  return result;
}

uint64_t sub_29C10(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_7AF4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_29C78()
{
  return sub_28794((uint64_t)sub_29DB4, (uint64_t (*)(unint64_t, uint64_t))sub_23CCC);
}

uint64_t sub_29CA8()
{
  return sub_28A84((uint64_t (*)(uint64_t))sub_21978);
}

uint64_t sub_29CC0()
{
  return sub_28690(&qword_D8AE0, &qword_D8AE8, (void (*)(void))sub_29CF0);
}

unint64_t sub_29CF0()
{
  unint64_t result = qword_D8AF0;
  if (!qword_D8AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8AF0);
  }
  return result;
}

uint64_t sub_29D44(uint64_t a1)
{
  return a1;
}

uint64_t sub_29DB4()
{
  return sub_218C4();
}

uint64_t sub_29DD4()
{
  uint64_t v1 = (int *)type metadata accessor for LiveCaptionsRootView();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  sub_7AF4(&qword_D7E78);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_A6920();
    uint64_t v7 = *(void *)(v6 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v0 + v3, 1, v6)) {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v3, v6);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v5 + v1[5];
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = sub_A6920();
    uint64_t v10 = *(void *)(v9 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v11 = v5 + v1[6];
  sub_7AF4(&qword_D81B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_A63C0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_2A1E8()
{
  return sub_28A84((uint64_t (*)(uint64_t))sub_21A4C);
}

uint64_t sub_2A200()
{
  return sub_23200(v0[4], v0[5], v0[6], v0[7]);
}

uint64_t sub_2A22C()
{
  return sub_2A258((uint64_t (*)(void, void, double, double, double, double))sub_23B14);
}

uint64_t sub_2A258(uint64_t (*a1)(void, void, double, double, double, double))
{
  return a1(*(void *)(v1 + 16), *(void *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40), *(double *)(v1 + 48), *(double *)(v1 + 56));
}

uint64_t sub_2A284()
{
  return sub_A6550();
}

uint64_t sub_2A2BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_2A308()
{
  unint64_t result = qword_D8B10;
  if (!qword_D8B10)
  {
    sub_7C5C(&qword_D8780);
    sub_A45C(&qword_D8B18, &qword_D8B20);
    sub_A45C(&qword_D8B28, &qword_D8768);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8B10);
  }
  return result;
}

uint64_t sub_2A3D0()
{
  return sub_277E4();
}

uint64_t sub_2A3F4()
{
  return sub_28650();
}

uint64_t sub_2A418()
{
  uint64_t v1 = OBJC_IVAR___LiveSpeechAXUIServiceInstance____lazy_storage___coordinator;
  if (*(void *)&v0[OBJC_IVAR___LiveSpeechAXUIServiceInstance____lazy_storage___coordinator])
  {
    uint64_t v2 = *(void *)&v0[OBJC_IVAR___LiveSpeechAXUIServiceInstance____lazy_storage___coordinator];
  }
  else
  {
    type metadata accessor for LiveSpeechCoordinator();
    uint64_t v2 = swift_allocObject();
    swift_unknownObjectWeakInit();
    *(_WORD *)(v2 + 24) = 0;
    *(void *)(v2 + 32) = 0;
    uint64_t v3 = v0;
    *(void *)(v2 + 40) = sub_6AA0((uint64_t)&_swiftEmptyArrayStorage);
    *(void *)(v2 + 48) = &_swiftEmptyArrayStorage;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    swift_unknownObjectWeakAssign();

    *(void *)&v0[v1] = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

id sub_2A4E4()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for LiveSpeechAXUIServiceInstance()) init];
  qword_D8B30 = (uint64_t)result;
  return result;
}

id sub_2A514()
{
  if (qword_D7D88 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)swift_dynamicCastClassUnconditional();

  return v0;
}

unint64_t sub_2A5BC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = sub_7AF4(&qword_D8C50);
  __chkstk_darwin(v9 - 8);
  uint64_t v39 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_A5FF0();
  uint64_t v36 = *(void *)(v11 - 8);
  uint64_t v37 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    sub_6BC0((uint64_t)&_swiftEmptyArrayStorage);
  }
  swift_bridgeObjectRetain();
  uint64_t v34 = (char *)&type metadata for Any + 8;
  uint64_t v14 = sub_A7150();
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();
  sub_A5EC0();
  swift_bridgeObjectRetain_n();
  unint64_t v35 = v16;
  swift_bridgeObjectRetain_n();
  uint64_t v17 = sub_A5FE0();
  os_log_type_t v18 = sub_A7450();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v32 = v4;
    uint64_t v20 = v19;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v41 = v30;
    *(_DWORD *)uint64_t v20 = 134218498;
    uint64_t v40 = a2;
    uint64_t v33 = a3;
    sub_A7600();
    *(_WORD *)(v20 + 12) = 2080;
    uint64_t v31 = a2;
    swift_bridgeObjectRetain();
    uint64_t v40 = sub_15F94(v33, a4, &v41);
    sub_A7600();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 22) = 2080;
    unint64_t v21 = v35;
    swift_bridgeObjectRetain();
    uint64_t v40 = sub_15F94(v14, v21, &v41);
    a3 = v33;
    a2 = v31;
    sub_A7600();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&def_5ED54, v17, v18, "Service got a message: %ld from client: %s. Payload: %s", (uint8_t *)v20, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    unint64_t v21 = v35;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v37);
  uint64_t v22 = v38;
  uint64_t v23 = (uint64_t)v39;
  uint64_t v24 = sub_A7360();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  sub_A7330();
  swift_bridgeObjectRetain();
  id v25 = v22;
  uint64_t v26 = sub_A7320();
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v26;
  v27[3] = &protocol witness table for MainActor;
  v27[4] = a2;
  v27[5] = v25;
  v27[6] = a3;
  v27[7] = a4;
  v27[8] = v14;
  v27[9] = v21;
  sub_2F8E4(v23, (uint64_t)&unk_D8BF8, (uint64_t)v27);
  swift_release();
  return sub_6BC0((uint64_t)&_swiftEmptyArrayStorage);
}

uint64_t sub_2A9D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[9] = a8;
  v8[10] = v14;
  v8[7] = a6;
  v8[8] = a7;
  v8[5] = a4;
  v8[6] = a5;
  uint64_t v9 = sub_A5FF0();
  v8[11] = v9;
  v8[12] = *(void *)(v9 - 8);
  v8[13] = swift_task_alloc();
  sub_7AF4((uint64_t *)&unk_D8C00);
  v8[14] = swift_task_alloc();
  v8[15] = swift_task_alloc();
  sub_A7330();
  v8[16] = sub_A7320();
  uint64_t v11 = sub_A7300();
  v8[17] = v11;
  v8[18] = v10;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_2AB14, v11, v10);
}

uint64_t sub_2AB14()
{
  uint64_t v28 = v0;
  uint64_t v1 = v0[15];
  sub_A5FA0();
  uint64_t v2 = sub_A5FB0();
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    swift_release();
LABEL_3:
    sub_A5EC0();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v4 = sub_A5FE0();
    os_log_type_t v5 = sub_A7430();
    BOOL v6 = os_log_type_enabled(v4, v5);
    uint64_t v8 = v0[12];
    uint64_t v7 = v0[13];
    unint64_t v10 = v0[10];
    uint64_t v9 = v0[11];
    if (v6)
    {
      uint64_t v25 = v0[13];
      uint64_t v26 = v0[11];
      unint64_t v11 = v0[8];
      uint64_t v24 = v0[9];
      uint64_t v23 = v0[7];
      uint64_t v12 = v0[5];
      uint64_t v13 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 134218498;
      v0[2] = v12;
      sub_A7600();
      *(_WORD *)(v13 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[3] = sub_15F94(v23, v11, &v27);
      sub_A7600();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 22) = 2080;
      swift_bridgeObjectRetain();
      v0[4] = sub_15F94(v24, v10, &v27);
      sub_A7600();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&def_5ED54, v4, v5, "Unhandled service message: %ld from client: %s. Payload: %s", (uint8_t *)v13, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v25, v26);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    }
    sub_2C25C(v0[15]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
  uint64_t v14 = v0[14];
  sub_2C2BC(v0[15], v14);
  int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v14, v2);
  if (v15 == enum case for LiveSpeechLiveCaptionsUIServiceMessageID.startLiveSpeech(_:))
  {
    v0[19] = sub_2A418();
    unint64_t v16 = (void *)swift_task_alloc();
    v0[20] = v16;
    *unint64_t v16 = v0;
    v16[1] = sub_2B0E8;
    return LiveSpeechCoordinator.startLiveSpeech()();
  }
  else if (v15 == enum case for LiveSpeechLiveCaptionsUIServiceMessageID.stopLiveSpeech(_:))
  {
    v0[21] = sub_2A418();
    uint64_t v19 = (void *)swift_task_alloc();
    v0[22] = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_2B2BC;
    return LiveSpeechCoordinator.stopLiveSpeech()();
  }
  else if (v15 == enum case for LiveSpeechLiveCaptionsUIServiceMessageID.startLiveCaptions(_:))
  {
    v0[23] = sub_2A418();
    uint64_t v20 = (void *)swift_task_alloc();
    v0[24] = v20;
    void *v20 = v0;
    v20[1] = sub_2B400;
    return LiveSpeechCoordinator.startLiveCaptions()();
  }
  else
  {
    if (v15 != enum case for LiveSpeechLiveCaptionsUIServiceMessageID.stopLiveCaptions(_:))
    {
      uint64_t v22 = v0[14];
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v22, v2);
      goto LABEL_3;
    }
    v0[25] = sub_2A418();
    unint64_t v21 = (void *)swift_task_alloc();
    v0[26] = v21;
    *unint64_t v21 = v0;
    v21[1] = sub_2B544;
    return LiveSpeechCoordinator.stopLiveCaptions()();
  }
}

uint64_t sub_2B0E8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 144);
  uint64_t v3 = *(void *)(v1 + 136);
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_2B22C, v3, v2);
}

uint64_t sub_2B22C()
{
  swift_release();
  sub_2C25C(*(void *)(v0 + 120));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_2B2BC()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 144);
  uint64_t v3 = *(void *)(v1 + 136);
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_2C324, v3, v2);
}

uint64_t sub_2B400()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 144);
  uint64_t v3 = *(void *)(v1 + 136);
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_2C324, v3, v2);
}

uint64_t sub_2B544()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 144);
  uint64_t v3 = *(void *)(v1 + 136);
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_2C324, v3, v2);
}

uint64_t sub_2B81C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[2] = a4;
  v5[3] = a5;
  sub_A7330();
  v5[4] = sub_A7320();
  uint64_t v7 = sub_A7300();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_2B8B4, v7, v6);
}

uint64_t sub_2B8B4()
{
  Class isa = v0[3].super.super.super.isa;
  swift_release();
  uint64_t result = sub_2A418();
  if (isa)
  {
    LiveSpeechCoordinator.addSceneForExternalDisplay(_:)(v0[3]);
    swift_release();
    uint64_t v3 = (uint64_t (*)(void))v0[1].super.super.super.isa;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_2B9C8(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v6 = v4;
  uint64_t v8 = sub_7AF4(&qword_D8C50);
  __chkstk_darwin(v8 - 8);
  unint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_A5FF0();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A5EC0();
  int v15 = sub_A5FE0();
  os_log_type_t v16 = sub_A7450();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&def_5ED54, v15, v16, a2, v17, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v18 = sub_A7360();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v10, 1, 1, v18);
  sub_A7330();
  id v19 = a1;
  id v20 = v6;
  uint64_t v21 = sub_A7320();
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = v21;
  v22[3] = &protocol witness table for MainActor;
  v22[4] = v20;
  v22[5] = a1;
  sub_2F8E4((uint64_t)v10, v25, (uint64_t)v22);
  return swift_release();
}

uint64_t sub_2BBF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[2] = a4;
  v5[3] = a5;
  sub_A7330();
  v5[4] = sub_A7320();
  uint64_t v7 = sub_A7300();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_2BC90, v7, v6);
}

uint64_t sub_2BC90()
{
  Class isa = v0[3].super.super.super.isa;
  swift_release();
  uint64_t result = sub_2A418();
  if (isa)
  {
    LiveSpeechCoordinator.removeSceneForExternalDisplay(_:)(v0[3]);
    swift_release();
    uint64_t v3 = (uint64_t (*)(void))v0[1].super.super.super.isa;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id LiveSpeechStore.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for LiveSpeechAXUIServiceInstance()
{
  return self;
}

uint64_t sub_2BE60(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_2C328;
  return sub_2BBF8(a1, v4, v5, v7, v6);
}

uint64_t sub_2BF24()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_2BF6C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_2C328;
  return sub_2B81C(a1, v4, v5, v7, v6);
}

uint64_t sub_2C02C()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_2C07C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_2C168;
  return sub_2A9D0(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_2C168()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_2C25C(uint64_t a1)
{
  uint64_t v2 = sub_7AF4((uint64_t *)&unk_D8C00);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_2C2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_7AF4((uint64_t *)&unk_D8C00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t LiveSpeechCoordinator.__allocating_init(withService:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  swift_getObjectType();
  uint64_t v3 = sub_32CB8(a1, v2);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t LiveSpeechCoordinator.startLiveSpeech()()
{
  v1[16] = v0;
  uint64_t v2 = sub_A5FF0();
  v1[17] = v2;
  v1[18] = *(void *)(v2 - 8);
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  sub_A7330();
  v1[23] = sub_A7320();
  uint64_t v4 = sub_A7300();
  v1[24] = v4;
  v1[25] = v3;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_2C4A4, v4, v3);
}

uint64_t sub_2C4A4()
{
  sub_A5EC0();
  swift_retain();
  uint64_t v1 = sub_A5FE0();
  os_log_type_t v2 = sub_A7410();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 128);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    *(_DWORD *)(v0 + 312) = *(unsigned __int8 *)(v3 + 24);
    sub_A7600();
    swift_release();
    _os_log_impl(&def_5ED54, v1, v2, "Coordinator asked to start LiveSpeech. isRunning=%{BOOL}d", v4, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v6 = *(void *)(v0 + 136);
  uint64_t v7 = *(void *)(v0 + 144);
  uint64_t v8 = *(void *)(v0 + 128);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  *(void *)(v0 + 208) = v9;
  *(void *)(v0 + 216) = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v9(v5, v6);
  if (*(unsigned char *)(v8 + 24))
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  else
  {
    *(unsigned char *)(v8 + 24) = 1;
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_2C6B0;
    return sub_2FED4(0, 1);
  }
}

uint64_t sub_2C6B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v5[29] = a1;
  v5[30] = a2;
  v5[31] = v2;
  swift_task_dealloc();
  uint64_t v6 = v4[25];
  uint64_t v7 = v4[24];
  if (v2) {
    uint64_t v8 = sub_2D0C8;
  }
  else {
    uint64_t v8 = sub_2C7F8;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v8, v7, v6);
}

uint64_t sub_2C7F8()
{
  sub_A5EC0();
  uint64_t v1 = sub_A5FE0();
  os_log_type_t v2 = sub_A7410();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&def_5ED54, v1, v2, "Coordinator did show LiveSpeech UI on main screen", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[26];
  uint64_t v5 = v0[21];
  uint64_t v7 = v0[16];
  uint64_t v6 = v0[17];
  long long v25 = *(_OWORD *)(v0 + 29);

  v4(v5, v6);
  sub_108B8();
  LiveSpeechScreenLockManager.registerForScreenEvents()();
  swift_release();
  uint64_t v8 = *(void *)(v25 + qword_D83F8);
  sub_A7070();
  uint64_t v9 = swift_task_alloc();
  *(void *)(v9 + 16) = v8;
  *(unsigned char *)(v9 + 24) = 1;
  sub_A6300();
  swift_release();
  swift_task_dealloc();
  uint64_t v10 = *(void **)(v7 + 56);
  *(_OWORD *)(v7 + 56) = v25;
  id v11 = (id)v25;

  swift_beginAccess();
  unint64_t v12 = *(void *)(v7 + 48);
  v0[32] = v12;
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_A7740();
  }
  else
  {
    uint64_t v13 = *(void *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
  }
  v0[33] = v13;
  uint64_t v14 = v0[32];
  if (v13)
  {
    if ((v14 & 0xC000000000000001) != 0) {
      id v15 = (id)sub_A76A0();
    }
    else {
      id v15 = *(id *)(v14 + 32);
    }
    uint64_t v20 = (uint64_t)v15;
    v0[34] = v15;
    v0[35] = 1;
    id v21 = v15;
    uint64_t v22 = (void *)swift_task_alloc();
    v0[36] = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_2CBC8;
    return sub_2FED4(v20, 0);
  }
  else
  {
    uint64_t v16 = v0[16];
    swift_bridgeObjectRelease();
    swift_release();
    if (*(unsigned char *)(v16 + 24) == 1)
    {
      uint64_t v17 = (void *)v0[29];
      if (*(unsigned char *)(v0[16] + 25))
      {
        NSString v18 = sub_A71A0();
        v0[6] = sub_31FF8;
        v0[7] = 0;
        v0[2] = _NSConcreteStackBlock;
        v0[3] = 1107296256;
        v0[4] = sub_32088;
        v0[5] = &unk_CFF48;
        id v19 = _Block_copy(v0 + 2);
        AnalyticsSendEventLazy();
        _Block_release(v19);
      }
    }
    else
    {
      uint64_t v17 = (void *)v0[29];
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(void))v0[1];
    return v24();
  }
}

uint64_t sub_2CBC8(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[37] = a1;
  v4[38] = v1;
  swift_task_dealloc();
  uint64_t v5 = (void *)v3[34];
  if (v1)
  {
    swift_bridgeObjectRelease();

    uint64_t v6 = v4[24];
    uint64_t v7 = v4[25];
    uint64_t v8 = sub_2D310;
  }
  else
  {

    uint64_t v6 = v4[24];
    uint64_t v7 = v4[25];
    uint64_t v8 = sub_2CD10;
  }
  return ((uint64_t (*)(void *, uint64_t, uint64_t))_swift_task_switch)(v8, v6, v7);
}

id sub_2CD10()
{
  uint64_t v1 = v0[37];
  sub_108B8();
  LiveSpeechScreenLockManager.registerForScreenEvents()();
  swift_release();
  uint64_t v2 = *(void *)(v1 + qword_D83F8);
  sub_A7070();
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v2;
  *(unsigned char *)(v3 + 24) = 1;
  sub_A6300();
  swift_release();
  swift_task_dealloc();
  sub_A5EC0();
  swift_retain();
  uint64_t v4 = sub_A5FE0();
  os_log_type_t v5 = sub_A7410();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)v0[37];
  if (v6)
  {
    uint64_t v8 = (void *)v0[34];
    uint64_t v9 = v0[16];
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 67109120;
    *(_DWORD *)(v10 + 4) = *(unsigned __int8 *)(v9 + 24);
    swift_release();
    _os_log_impl(&def_5ED54, v4, v5, "Coordinator did show LiveSpeech UI on external screen (isRunning=%{BOOL}d)", (uint8_t *)v10, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();

    uint64_t v4 = v0[34];
  }
  uint64_t v11 = v0[35];
  uint64_t v12 = v0[33];
  uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[26];
  uint64_t v14 = v0[20];
  uint64_t v15 = v0[17];

  v13(v14, v15);
  if (v11 == v12)
  {
    uint64_t v16 = v0[16];
    swift_bridgeObjectRelease();
    swift_release();
    if (*(unsigned char *)(v16 + 24) == 1)
    {
      uint64_t v17 = (void *)v0[29];
      if (*(unsigned char *)(v0[16] + 25))
      {
        NSString v18 = sub_A71A0();
        v0[6] = sub_31FF8;
        v0[7] = 0;
        v0[2] = _NSConcreteStackBlock;
        v0[3] = 1107296256;
        v0[4] = sub_32088;
        v0[5] = &unk_CFF48;
        id v19 = _Block_copy(v0 + 2);
        AnalyticsSendEventLazy();
        _Block_release(v19);
      }
    }
    else
    {
      uint64_t v17 = (void *)v0[29];
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = (uint64_t (*)(void))v0[1];
    return (id)v23();
  }
  else
  {
    uint64_t v20 = v0[35];
    uint64_t v21 = v0[32];
    if ((v21 & 0xC000000000000001) != 0) {
      id result = (id)sub_A76A0();
    }
    else {
      id result = *(id *)(v21 + 8 * v20 + 32);
    }
    uint64_t v24 = (uint64_t)result;
    v0[34] = result;
    v0[35] = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
    }
    else
    {
      id v25 = result;
      uint64_t v26 = (void *)swift_task_alloc();
      v0[36] = v26;
      *uint64_t v26 = v0;
      v26[1] = sub_2CBC8;
      return (id)sub_2FED4(v24, 0);
    }
  }
  return result;
}

uint64_t sub_2D0C8()
{
  uint64_t v15 = v0;
  swift_release();
  sub_A5EC0();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = sub_A5FE0();
  os_log_type_t v2 = sub_A7430();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[26];
    uint64_t v11 = v0[17];
    uint64_t v12 = v0[19];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = sub_A7830();
    v0[15] = sub_15F94(v4, v5, &v14);
    sub_A7600();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&def_5ED54, v1, v2, "Coordinator could not start LiveSpeech: %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v13(v12, v11);
  }
  else
  {
    BOOL v6 = (void (*)(uint64_t, uint64_t))v0[26];
    uint64_t v7 = v0[19];
    uint64_t v8 = v0[17];
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    v6(v7, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_2D310()
{
  uint64_t v16 = v0;
  uint64_t v1 = *(void **)(v0 + 272);

  swift_release();
  sub_A5EC0();
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v2 = sub_A5FE0();
  os_log_type_t v3 = sub_A7430();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
    uint64_t v12 = *(void *)(v0 + 136);
    uint64_t v13 = *(void *)(v0 + 152);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = sub_A7830();
    *(void *)(v0 + 120) = sub_15F94(v5, v6, &v15);
    sub_A7600();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&def_5ED54, v2, v3, "Coordinator could not start LiveSpeech: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v14(v13, v12);
  }
  else
  {
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 208);
    uint64_t v8 = *(void *)(v0 + 152);
    uint64_t v9 = *(void *)(v0 + 136);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    v7(v8, v9);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t LiveSpeechCoordinator.stopLiveSpeech()()
{
  v1[10] = v0;
  uint64_t v2 = sub_A5FF0();
  v1[11] = v2;
  v1[12] = *(void *)(v2 - 8);
  v1[13] = swift_task_alloc();
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  v1[17] = sub_A7330();
  v1[18] = sub_A7320();
  uint64_t v4 = sub_A7300();
  v1[19] = v4;
  v1[20] = v3;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_2D688, v4, v3);
}

uint64_t sub_2D688()
{
  sub_A5EC0();
  swift_retain();
  uint64_t v1 = sub_A5FE0();
  os_log_type_t v2 = sub_A7450();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 80);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    *(_DWORD *)(v0 + 308) = *(unsigned __int8 *)(v3 + 24);
    sub_A7600();
    swift_release();
    _os_log_impl(&def_5ED54, v1, v2, "Coordinator asked to stop LiveSpeech. isRunning=%{BOOL}d", v4, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 96);
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  *(void *)(v0 + 168) = v9;
  *(void *)(v0 + 176) = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v9(v5, v6);
  if (*(unsigned char *)(v8 + 24) != 1)
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(void *)(v0 + 8);
    __asm { BRAA            X1, X16 }
  }
  uint64_t v10 = *(void *)(v0 + 80);
  *(unsigned char *)(v8 + 24) = 0;
  uint64_t v11 = *(void **)(v10 + 56);
  *(void *)(v0 + 184) = v11;
  if (v11)
  {
    id v12 = v11;
    *(void *)(v0 + 192) = sub_A7320();
    uint64_t v14 = sub_A7300();
    *(void *)(v0 + 200) = v14;
    *(void *)(v0 + 208) = v13;
    return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_2D914, v14, v13);
  }
  else
  {
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 240) = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_2DC20;
    return sub_30628(0, 1);
  }
}

uint64_t sub_2D914()
{
  uint64_t v1 = v0[23];
  v0[27] = sub_A7320();
  uint64_t v2 = swift_task_alloc();
  v0[28] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[29] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_2DA1C;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_2DA1C()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 208);
  uint64_t v3 = *(void *)(v1 + 200);
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_2DB7C, v3, v2);
}

uint64_t sub_2DB7C()
{
  uint64_t v1 = *(void **)(v0 + 184);
  swift_release();

  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 240) = v2;
  void *v2 = v0;
  v2[1] = sub_2DC20;
  return sub_30628(0, 1);
}

uint64_t sub_2DC20(void *a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 248) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 152);
    uint64_t v6 = *(void *)(v4 + 160);
    uint64_t v7 = sub_2E354;
  }
  else
  {

    uint64_t v5 = *(void *)(v4 + 152);
    uint64_t v6 = *(void *)(v4 + 160);
    uint64_t v7 = sub_2DD44;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v7, v5, v6);
}

uint64_t sub_2DD44()
{
  sub_A5EC0();
  swift_retain();
  uint64_t v1 = sub_A5FE0();
  os_log_type_t v2 = sub_A7450();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 80);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    *(_DWORD *)(v0 + 304) = *(unsigned __int8 *)(v3 + 24);
    sub_A7600();
    swift_release();
    _os_log_impl(&def_5ED54, v1, v2, "Coordinator did hide LiveSpeech UI on main screen (isRunning=%{BOOL}d)", v4, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  uint64_t v5 = *(void **)(v0 + 80);
  (*(void (**)(void, void))(v0 + 168))(*(void *)(v0 + 120), *(void *)(v0 + 88));
  uint64_t v6 = (void *)v5[7];
  v5[7] = 0;
  v5[8] = 0;

  swift_beginAccess();
  unint64_t v7 = v5[6];
  *(void *)(v0 + 256) = v7;
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_A7740();
    *(void *)(v0 + 264) = v15;
    if (v15) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    *(void *)(v0 + 264) = v8;
    if (v8)
    {
LABEL_6:
      uint64_t v9 = *(void *)(v0 + 256);
      if ((v9 & 0xC000000000000001) != 0) {
        id v10 = (id)sub_A76A0();
      }
      else {
        id v10 = *(id *)(v9 + 32);
      }
      uint64_t v11 = (uint64_t)v10;
      *(void *)(v0 + 272) = v10;
      *(void *)(v0 + 280) = 1;
      id v12 = v10;
      uint64_t v13 = (void *)swift_task_alloc();
      *(void *)(v0 + 288) = v13;
      *uint64_t v13 = v0;
      v13[1] = sub_2DFE8;
      return sub_30628(v11, 0);
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_2DFE8(void *a1)
{
  uint64_t v4 = (void *)*v2;
  v4[37] = v1;
  swift_task_dealloc();
  uint64_t v5 = (void *)v4[34];
  if (v1)
  {
    swift_bridgeObjectRelease();

    uint64_t v6 = v4[19];
    uint64_t v7 = v4[20];
    uint64_t v8 = sub_2E59C;
  }
  else
  {

    uint64_t v6 = v4[19];
    uint64_t v7 = v4[20];
    uint64_t v8 = sub_2E138;
  }
  return ((uint64_t (*)(void *, uint64_t, uint64_t))_swift_task_switch)(v8, v6, v7);
}

id sub_2E138()
{
  sub_A5EC0();
  uint64_t v1 = sub_A5FE0();
  os_log_type_t v2 = sub_A7450();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&def_5ED54, v1, v2, "Coordinator did hide LiveSpeech UI on external screen", v3, 2u);
    swift_slowDealloc();
    uint64_t v4 = v0[34];
  }
  else
  {
    uint64_t v4 = v1;
    uint64_t v1 = v0[34];
  }
  uint64_t v5 = v0[35];
  uint64_t v6 = v0[33];
  uint64_t v7 = (void (*)(uint64_t, uint64_t))v0[21];
  uint64_t v8 = v0[14];
  uint64_t v9 = v0[11];

  v7(v8, v9);
  if (v5 == v6)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return (id)v10();
  }
  else
  {
    uint64_t v12 = v0[35];
    uint64_t v13 = v0[32];
    if ((v13 & 0xC000000000000001) != 0) {
      id result = (id)sub_A76A0();
    }
    else {
      id result = *(id *)(v13 + 8 * v12 + 32);
    }
    uint64_t v14 = (uint64_t)result;
    v0[34] = result;
    v0[35] = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
    }
    else
    {
      id v15 = result;
      uint64_t v16 = (void *)swift_task_alloc();
      v0[36] = v16;
      *uint64_t v16 = v0;
      v16[1] = sub_2DFE8;
      return (id)sub_30628(v14, 0);
    }
  }
  return result;
}

uint64_t sub_2E354()
{
  id v15 = v0;
  swift_release();
  sub_A5EC0();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = sub_A5FE0();
  os_log_type_t v2 = sub_A7430();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[21];
    uint64_t v11 = v0[11];
    uint64_t v12 = v0[13];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = sub_A7830();
    v0[9] = sub_15F94(v4, v5, &v14);
    sub_A7600();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&def_5ED54, v1, v2, "Coordinator could not stop LiveSpeech: %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v13(v12, v11);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[21];
    uint64_t v7 = v0[13];
    uint64_t v8 = v0[11];
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    v6(v7, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_2E59C()
{
  uint64_t v15 = v0;

  swift_release();
  sub_A5EC0();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = sub_A5FE0();
  os_log_type_t v2 = sub_A7430();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    uint64_t v11 = *(void *)(v0 + 88);
    uint64_t v12 = *(void *)(v0 + 104);
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = sub_A7830();
    *(void *)(v0 + 72) = sub_15F94(v4, v5, &v14);
    sub_A7600();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&def_5ED54, v1, v2, "Coordinator could not stop LiveSpeech: %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v13(v12, v11);
  }
  else
  {
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
    uint64_t v7 = *(void *)(v0 + 104);
    uint64_t v8 = *(void *)(v0 + 88);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    v6(v7, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t LiveSpeechCoordinator.startLiveCaptions()()
{
  v1[13] = v0;
  uint64_t v2 = sub_A5FF0();
  v1[14] = v2;
  v1[15] = *(void *)(v2 - 8);
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  sub_A7330();
  v1[19] = sub_A7320();
  uint64_t v4 = sub_A7300();
  v1[20] = v4;
  v1[21] = v3;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_2E8FC, v4, v3);
}

uint64_t sub_2E8FC()
{
  sub_A5E90();
  swift_retain();
  uint64_t v1 = sub_A5FE0();
  os_log_type_t v2 = sub_A7410();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 104);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    *(_DWORD *)(v0 + 224) = *(unsigned __int8 *)(v3 + 25);
    sub_A7600();
    swift_release();
    _os_log_impl(&def_5ED54, v1, v2, "Coordinator asked to start LiveSpeech. isRunning=%{BOOL}d", v4, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v7 = *(void *)(v0 + 120);
  uint64_t v8 = *(void *)(v0 + 104);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  *(void *)(v0 + 176) = v9;
  *(void *)(v0 + 184) = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v9(v5, v6);
  if (*(unsigned char *)(v8 + 25))
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  else
  {
    *(unsigned char *)(v8 + 25) = 1;
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_2EAFC;
    return sub_30EAC(0, 1);
  }
}

uint64_t sub_2EAFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v5[25] = a1;
  v5[26] = a2;
  v5[27] = v2;
  swift_task_dealloc();
  uint64_t v6 = v4[21];
  uint64_t v7 = v4[20];
  if (v2) {
    uint64_t v8 = sub_2EE4C;
  }
  else {
    uint64_t v8 = sub_2EC44;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v8, v7, v6);
}

uint64_t sub_2EC44()
{
  swift_release();
  sub_A5E90();
  uint64_t v1 = sub_A5FE0();
  os_log_type_t v2 = sub_A7410();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&def_5ED54, v1, v2, "Coordinator did show LiveSpeech UI on main screen", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[22];
  uint64_t v5 = v0[17];
  uint64_t v7 = v0[13];
  uint64_t v6 = v0[14];
  long long v15 = *(_OWORD *)(v0 + 25);

  v4(v5, v6);
  uint64_t v8 = *(void **)(v7 + 72);
  *(_OWORD *)(v7 + 72) = v15;
  id v9 = (id)v15;

  if (*(unsigned char *)(v7 + 24) == 1)
  {
    uint64_t v10 = (void *)v0[25];
    if (*(unsigned char *)(v0[13] + 25))
    {
      NSString v11 = sub_A71A0();
      v0[6] = sub_31FF8;
      v0[7] = 0;
      v0[2] = _NSConcreteStackBlock;
      v0[3] = 1107296256;
      v0[4] = sub_32088;
      v0[5] = &unk_CFF70;
      uint64_t v12 = _Block_copy(v0 + 2);
      AnalyticsSendEventLazy();
      _Block_release(v12);
    }
  }
  else
  {
    uint64_t v10 = (void *)v0[25];
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_2EE4C()
{
  long long v15 = v0;
  swift_release();
  sub_A5E90();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = sub_A5FE0();
  os_log_type_t v2 = sub_A7430();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[22];
    uint64_t v11 = v0[14];
    uint64_t v12 = v0[16];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = sub_A7830();
    v0[12] = sub_15F94(v4, v5, &v14);
    sub_A7600();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&def_5ED54, v1, v2, "Coordinator could not start LiveSpeech: %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v13(v12, v11);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[22];
    uint64_t v7 = v0[16];
    uint64_t v8 = v0[14];
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    v6(v7, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t LiveSpeechCoordinator.stopLiveCaptions()()
{
  v1[7] = v0;
  uint64_t v2 = sub_A5FF0();
  v1[8] = v2;
  v1[9] = *(void *)(v2 - 8);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  sub_A7330();
  v1[13] = sub_A7320();
  uint64_t v4 = sub_A7300();
  v1[14] = v4;
  v1[15] = v3;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_2F1A8, v4, v3);
}

uint64_t sub_2F1A8()
{
  sub_A5E90();
  swift_retain();
  uint64_t v1 = sub_A5FE0();
  os_log_type_t v2 = sub_A7450();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 56);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    *(_DWORD *)(v0 + 164) = *(unsigned __int8 *)(v3 + 25);
    sub_A7600();
    swift_release();
    _os_log_impl(&def_5ED54, v1, v2, "Coordinator asked to stop LiveSpeech. isRunning=%{BOOL}d", v4, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 56);
  id v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  *(void *)(v0 + 128) = v9;
  *(void *)(v0 + 136) = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v9(v5, v6);
  if (*(unsigned char *)(v8 + 25) == 1)
  {
    *(unsigned char *)(v8 + 25) = 0;
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_2F3A4;
    return sub_32D4C(1);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
}

uint64_t sub_2F3A4(void *a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 152) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 112);
    uint64_t v6 = *(void *)(v4 + 120);
    uint64_t v7 = sub_2F698;
  }
  else
  {

    uint64_t v5 = *(void *)(v4 + 112);
    uint64_t v6 = *(void *)(v4 + 120);
    uint64_t v7 = sub_2F4C8;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v7, v5, v6);
}

uint64_t sub_2F4C8()
{
  sub_A5E90();
  swift_retain();
  uint64_t v1 = sub_A5FE0();
  os_log_type_t v2 = sub_A7450();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 56);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    *(_DWORD *)(v0 + 160) = *(unsigned __int8 *)(v3 + 25);
    sub_A7600();
    swift_release();
    _os_log_impl(&def_5ED54, v1, v2, "Coordinator did hide LiveSpeech UI on main screen (isRunning=%{BOOL}d)", v4, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  uint64_t v5 = *(void *)(v0 + 56);
  (*(void (**)(void, void))(v0 + 128))(*(void *)(v0 + 88), *(void *)(v0 + 64));
  uint64_t v8 = *(void **)(v5 + 72);
  uint64_t v7 = v5 + 72;
  uint64_t v6 = v8;
  if (v8)
  {
    uint64_t v9 = qword_D7D98;
    id v10 = v6;
    if (v9 != -1) {
      swift_once();
    }
    AXLTCaptionsProvider.activate(_:)(0);
  }
  swift_release();
  uint64_t v11 = *(void **)v7;
  *(void *)uint64_t v7 = 0;
  *(void *)(v7 + 8) = 0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_2F698()
{
  long long v15 = v0;
  swift_release();
  sub_A5E90();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = sub_A5FE0();
  os_log_type_t v2 = sub_A7430();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[16];
    uint64_t v11 = v0[8];
    uint64_t v12 = v0[10];
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = sub_A7830();
    v0[6] = sub_15F94(v4, v5, &v14);
    sub_A7600();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&def_5ED54, v1, v2, "Coordinator could not stop LiveSpeech: %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v13(v12, v11);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[16];
    uint64_t v7 = v0[10];
    uint64_t v8 = v0[8];
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    v6(v7, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_2F8E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_A7360();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_A7350();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_A35C(a1, &qword_D8C50);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_A7300();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

Swift::Void __swiftcall LiveSpeechCoordinator.addSceneForExternalDisplay(_:)(UIWindowScene a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_7AF4(&qword_D8C50);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v7 = a1.super.super.super.isa;
  sub_A7290();
  if (*(void *)((char *)&dword_10 + (*(void *)(v1 + 48) & 0xFFFFFFFFFFFFFF8)) >= *(void *)((char *)&dword_18
                                                                                                  + (*(void *)(v1 + 48) & 0xFFFFFFFFFFFFFF8)) >> 1)
    sub_A72D0();
  sub_A72F0();
  sub_A72C0();
  swift_endAccess();
  if (*(unsigned char *)(v1 + 24) == 1)
  {
    uint64_t v8 = sub_A7360();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v6, 1, 1, v8);
    sub_A7330();
    uint64_t v9 = v7;
    swift_retain();
    uint64_t v10 = sub_A7320();
    uint64_t v11 = (void *)swift_allocObject();
    _OWORD v11[2] = v10;
    v11[3] = &protocol witness table for MainActor;
    v11[4] = v2;
    v11[5] = v9;
    sub_2F8E4((uint64_t)v6, (uint64_t)&unk_D8C60, (uint64_t)v11);
    swift_release();
  }
}

Swift::Void __swiftcall LiveSpeechCoordinator.removeSceneForExternalDisplay(_:)(UIWindowScene a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_7AF4(&qword_D8C50);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v7 = a1.super.super.super.isa;
  uint64_t v8 = sub_333B4((uint64_t *)(v1 + 48), (uint64_t)v7);

  unint64_t v9 = *(void *)(v1 + 48);
  if (!(v9 >> 62))
  {
    uint64_t v10 = *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFFF8));
    if (v10 >= v8) {
      goto LABEL_3;
    }
LABEL_7:
    __break(1u);
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_A7740();
  swift_bridgeObjectRelease();
  if (v10 < v8) {
    goto LABEL_7;
  }
LABEL_3:
  sub_336D0(v8, v10);
  swift_endAccess();
  if (*(unsigned char *)(v1 + 24) == 1)
  {
    uint64_t v11 = sub_A7360();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v6, 1, 1, v11);
    sub_A7330();
    uint64_t v12 = v7;
    swift_retain();
    uint64_t v13 = sub_A7320();
    uint64_t v14 = (void *)swift_allocObject();
    v14[2] = v13;
    v14[3] = &protocol witness table for MainActor;
    v14[4] = v2;
    v14[5] = v12;
    sub_2F8E4((uint64_t)v6, (uint64_t)&unk_D8C70, (uint64_t)v14);
    swift_release();
  }
}

id sub_2FE14()
{
  uint64_t v1 = *(void **)(v0 + 32);
  if (v1)
  {
    id v2 = *(id *)(v0 + 32);
LABEL_5:
    id v5 = v1;
    return v2;
  }
  id result = [self sharedDisplayManager];
  if (result)
  {
    uint64_t v4 = *(void **)(v0 + 32);
    *(void *)(v0 + 32) = result;
    id v2 = result;

    uint64_t v1 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t LiveSpeechCoordinator.init(withService:)(uint64_t a1)
{
  swift_getObjectType();
  uint64_t v3 = sub_32CB8(a1, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t sub_2FED4(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 305) = a2;
  *(void *)(v3 + 224) = a1;
  *(void *)(v3 + 232) = v2;
  sub_A7330();
  *(void *)(v3 + 240) = sub_A7320();
  uint64_t v5 = sub_A7300();
  *(void *)(v3 + 248) = v5;
  *(void *)(v3 + 256) = v4;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_2FF70, v5, v4);
}

uint64_t sub_2FF70()
{
  uint64_t v1 = (char *)objc_allocWithZone((Class)type metadata accessor for LiveSpeechRootViewController_iOS(0));
  *(void *)&v1[qword_D8408] = 0;
  uint64_t v2 = &v1[qword_D8400];
  *(void *)uint64_t v2 = 1852399949;
  *((void *)v2 + 1) = 0xE400000000000000;
  id v3 = objc_allocWithZone((Class)type metadata accessor for LiveSpeechStore(0));
  uint64_t v4 = v1;
  *(void *)&v4[qword_D83F8] = LiveSpeechStore.init(identifier:)(1852399949, (char *)0xE400000000000000);

  id v5 = objc_allocWithZone((Class)type metadata accessor for PassThroughView(0));
  *(void *)(v0 + 216) = 0;
  *(void *)(v0 + 208) = 0;
  sub_A6360();
  uint64_t v6 = (void *)sub_A6790();
  *(_OWORD *)(v0 + 152) = 0u;
  uint64_t v7 = v0 + 304;
  *(void *)(v0 + 264) = v6;
  *(_OWORD *)(v0 + 168) = 0u;
  id v8 = sub_2FE14();
  *(void *)(v0 + 272) = v8;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 280) = Strong;
  id v10 = v6;
  NSString v11 = sub_A71A0();
  *(void *)(v0 + 288) = v11;
  sub_33C08(v0 + 152, v0 + 120);
  uint64_t v12 = *(void *)(v0 + 144);
  if (v12)
  {
    uint64_t v13 = sub_33CB8((void *)(v0 + 120), *(void *)(v0 + 144));
    uint64_t v14 = *(void *)(v12 - 8);
    id v15 = v10;
    uint64_t v16 = swift_task_alloc();
    (*(void (**)(uint64_t, void *, uint64_t))(v14 + 16))(v16, v13, v12);
    uint64_t v17 = sub_A77F0();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v12);
    id v10 = v15;
    uint64_t v7 = v0 + 304;
    swift_task_dealloc();
    sub_16430(v0 + 120);
  }
  else
  {
    uint64_t v17 = 0;
  }
  *(void *)(v0 + 296) = v17;
  uint64_t v18 = *(void *)(v0 + 224);
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v7;
  *(void *)(v0 + 24) = sub_302AC;
  uint64_t v19 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_78728;
  *(void *)(v0 + 104) = &unk_D0070;
  *(void *)(v0 + 112) = v19;
  [v8 addContentViewController:v10 withUserInteractionEnabled:1 forService:Strong forSceneClientIdentifier:v11 context:0 userInterfaceStyle:2 forWindowScene:v18 spatialConfiguration:v17 completion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_302AC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 256);
  uint64_t v2 = *(void *)(*(void *)v0 + 248);
  return ((uint64_t (*)(void (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_303B4, v2, v1);
}

void sub_303B4()
{
  uint64_t v20 = v0;
  uint64_t v1 = *(void **)(v0 + 288);
  uint64_t v2 = *(void **)(v0 + 272);
  id v3 = *(void **)(v0 + 264);
  swift_release();
  int v4 = *(unsigned __int8 *)(v0 + 304);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  if (v4 == 1)
  {
    if (*(unsigned char *)(v0 + 305) == 1)
    {
      id v5 = *(void **)(v0 + 264);
      uint64_t v6 = *(void *)(v0 + 232);
      sub_A35C(v0 + 152, &qword_D92A0);
      uint64_t v7 = *(void **)(v6 + 56);
      *(void *)(v6 + 56) = v5;
      *(void *)(v6 + 64) = &off_CF7D8;
      id v8 = v5;
    }
    else
    {
      NSString v11 = *(void **)(v0 + 224);
      if (!v11)
      {
        __break(1u);
        return;
      }
      uint64_t v12 = *(void **)(v0 + 264);
      uint64_t v13 = *(void *)(v0 + 232);
      swift_beginAccess();
      id v14 = v12;
      id v15 = v11;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v19 = *(void *)(v13 + 40);
      *(void *)(v13 + 40) = 0x8000000000000000;
      sub_32B20((uint64_t)v14, v15, isUniquelyReferenced_nonNull_native, &v19);
      *(void *)(v13 + 40) = v19;
      swift_bridgeObjectRelease();

      swift_endAccess();
      sub_A35C(v0 + 152, &qword_D92A0);
    }
    uint64_t v17 = *(void (**)(uint64_t, _UNKNOWN **))(v0 + 8);
    uint64_t v18 = *(void *)(v0 + 264);
    v17(v18, &off_CF7D8);
  }
  else
  {
    unint64_t v9 = *(void **)(v0 + 264);
    sub_A5ED0();
    sub_33C70(&qword_D8D80, (void (*)(uint64_t))&type metadata accessor for LiveSpeechError);
    swift_allocError();
    sub_A5EE0();
    swift_willThrow();

    sub_A35C(v0 + 152, &qword_D92A0);
    id v10 = *(void (**)(void))(v0 + 8);
    v10();
  }
}

uint64_t sub_30628(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 289) = a2;
  *(void *)(v3 + 184) = a1;
  *(void *)(v3 + 192) = v2;
  sub_A7330();
  *(void *)(v3 + 200) = sub_A7320();
  uint64_t v5 = sub_A7300();
  *(void *)(v3 + 208) = v5;
  *(void *)(v3 + 216) = v4;
  return ((uint64_t (*)(uint64_t (*)(uint64_t), uint64_t, uint64_t))_swift_task_switch)(sub_306C4, v5, v4);
}

uint64_t sub_306C4(uint64_t Strong)
{
  uint64_t v2 = v1 + 288;
  if (*(unsigned char *)(v1 + 289) == 1)
  {
    uint64_t v3 = *(void *)(v1 + 192);
    uint64_t v4 = *(void **)(v3 + 56);
    *(void *)(v1 + 224) = v4;
    *(void *)(v1 + 232) = *(void *)(v3 + 64);
    if (v4)
    {
      id v5 = v4;
      id v6 = sub_2FE14();
      *(void *)(v1 + 240) = v6;
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      *(void *)(v1 + 248) = Strong;
      if (Strong)
      {
        uint64_t v7 = Strong;
        *(void *)(v1 + 16) = v1;
        *(void *)(v1 + 56) = v2;
        *(void *)(v1 + 24) = sub_309DC;
        uint64_t v8 = swift_continuation_init();
        *(void *)(v1 + 144) = _NSConcreteStackBlock;
        *(void *)(v1 + 152) = 0x40000000;
        *(void *)(v1 + 160) = sub_78728;
        *(void *)(v1 + 168) = &unk_D0058;
        *(void *)(v1 + 176) = v8;
        [v6 removeContentViewController:v5 withUserInteractionEnabled:1 forService:v7 context:0 completion:v1 + 144];
        uint64_t Strong = v1 + 16;
        goto LABEL_10;
      }
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v9 = *(void **)(v1 + 184);
    if (!v9)
    {
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    uint64_t v10 = *(void *)(v1 + 192);
    swift_beginAccess();
    uint64_t v11 = *(void *)(v10 + 40);
    if (*(void *)(v11 + 16))
    {
      id v12 = v9;
      unint64_t v13 = sub_8608C((uint64_t)v12);
      if (v14)
      {
        uint64_t v15 = *(void *)(v11 + 56) + 16 * v13;
        uint64_t v16 = *(void **)v15;
        *(void *)(v1 + 256) = *(void *)v15;
        *(void *)(v1 + 264) = *(void *)(v15 + 8);
        swift_endAccess();
        id v17 = v16;

        id v18 = sub_2FE14();
        *(void *)(v1 + 272) = v18;
        uint64_t Strong = swift_unknownObjectWeakLoadStrong();
        *(void *)(v1 + 280) = Strong;
        if (Strong)
        {
          uint64_t v19 = Strong;
          *(void *)(v1 + 80) = v1;
          *(void *)(v1 + 120) = v2;
          *(void *)(v1 + 88) = sub_30C44;
          uint64_t v20 = swift_continuation_init();
          *(void *)(v1 + 144) = _NSConcreteStackBlock;
          *(void *)(v1 + 152) = 0x40000000;
          *(void *)(v1 + 160) = sub_78728;
          *(void *)(v1 + 168) = &unk_D0040;
          *(void *)(v1 + 176) = v20;
          [v18 removeContentViewController:v17 withUserInteractionEnabled:1 forService:v19 context:0 completion:v1 + 144];
          uint64_t Strong = v1 + 80;
LABEL_10:
          return _swift_continuation_await(Strong);
        }
LABEL_21:
        __break(1u);
        return _swift_continuation_await(Strong);
      }
    }
    swift_endAccess();
  }
  swift_release();
  uint64_t v21 = *(uint64_t (**)(void, void))(v1 + 8);
  return v21(0, 0);
}

uint64_t sub_309DC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 216);
  uint64_t v2 = *(void *)(*(void *)v0 + 208);
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_30AE4, v2, v1);
}

uint64_t sub_30AE4()
{
  uint64_t v1 = *(void **)(v0 + 240);
  uint64_t v2 = *(void **)(v0 + 224);
  swift_release();
  int v3 = *(unsigned __int8 *)(v0 + 288);

  swift_unknownObjectRelease();
  if (v3 == 1)
  {
    uint64_t v4 = *(void *)(v0 + 224);
    uint64_t v5 = *(void *)(v0 + 232);
    id v6 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v6(v4, v5);
  }
  else
  {
    uint64_t v8 = *(void **)(v0 + 224);
    sub_A5ED0();
    sub_33C70(&qword_D8D80, (void (*)(uint64_t))&type metadata accessor for LiveSpeechError);
    swift_allocError();
    sub_A5EE0();
    swift_willThrow();

    unint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

uint64_t sub_30C44()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 216);
  uint64_t v2 = *(void *)(*(void *)v0 + 208);
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_30D4C, v2, v1);
}

uint64_t sub_30D4C()
{
  uint64_t v1 = *(void **)(v0 + 272);
  uint64_t v2 = *(void **)(v0 + 256);
  swift_release();
  int v3 = *(unsigned __int8 *)(v0 + 288);

  swift_unknownObjectRelease();
  if (v3 == 1)
  {
    uint64_t v4 = *(void *)(v0 + 256);
    uint64_t v5 = *(void *)(v0 + 264);
    id v6 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v6(v4, v5);
  }
  else
  {
    uint64_t v8 = *(void **)(v0 + 256);
    sub_A5ED0();
    sub_33C70(&qword_D8D80, (void (*)(uint64_t))&type metadata accessor for LiveSpeechError);
    swift_allocError();
    sub_A5EE0();
    swift_willThrow();

    unint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

uint64_t sub_30EAC(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 273) = a2;
  *(void *)(v3 + 184) = a1;
  *(void *)(v3 + 192) = v2;
  sub_7AF4((uint64_t *)&unk_D8D70);
  *(void *)(v3 + 200) = swift_task_alloc();
  sub_A7330();
  *(void *)(v3 + 208) = sub_A7320();
  uint64_t v5 = sub_A7300();
  *(void *)(v3 + 216) = v5;
  *(void *)(v3 + 224) = v4;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_30F78, v5, v4);
}

uint64_t sub_30F78()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = (char *)objc_allocWithZone((Class)type metadata accessor for LiveCaptionsRootViewController());
  *(void *)&v2[qword_D8E50] = sub_34A18;
  *(void *)&v2[qword_D8E58] = sub_34A20;
  uint64_t v3 = type metadata accessor for LiveCaptionsRootView();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v1, 1, 1, v3);
  uint64_t v4 = (void *)sub_A67A0();
  *(_OWORD *)(v0 + 120) = 0u;
  uint64_t v5 = v0 + 272;
  *(void *)(v0 + 232) = v4;
  *(_OWORD *)(v0 + 136) = 0u;
  id v6 = sub_2FE14();
  *(void *)(v0 + 240) = v6;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 248) = Strong;
  id v8 = v4;
  NSString v9 = sub_A71A0();
  *(void *)(v0 + 256) = v9;
  sub_33C08(v0 + 120, v0 + 152);
  uint64_t v10 = *(void *)(v0 + 176);
  if (v10)
  {
    uint64_t v11 = sub_33CB8((void *)(v0 + 152), *(void *)(v0 + 176));
    uint64_t v12 = *(void *)(v10 - 8);
    id v13 = v8;
    uint64_t v14 = swift_task_alloc();
    (*(void (**)(uint64_t, void *, uint64_t))(v12 + 16))(v14, v11, v10);
    uint64_t v15 = sub_A77F0();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v14, v10);
    id v8 = v13;
    uint64_t v5 = v0 + 272;
    swift_task_dealloc();
    sub_16430(v0 + 152);
  }
  else
  {
    uint64_t v15 = 0;
  }
  *(void *)(v0 + 264) = v15;
  uint64_t v16 = *(void *)(v0 + 184);
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v5;
  *(void *)(v0 + 24) = sub_312A8;
  uint64_t v17 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_78728;
  *(void *)(v0 + 104) = &unk_D0028;
  *(void *)(v0 + 112) = v17;
  [v6 addContentViewController:v8 withUserInteractionEnabled:1 forService:Strong forSceneClientIdentifier:v9 context:0 userInterfaceStyle:2 forWindowScene:v16 spatialConfiguration:v15 completion:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_312A8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 224);
  uint64_t v2 = *(void *)(*(void *)v0 + 216);
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_313B0, v2, v1);
}

uint64_t sub_313B0()
{
  uint64_t v1 = *(void **)(v0 + 256);
  uint64_t v2 = *(void **)(v0 + 240);
  uint64_t v3 = *(void **)(v0 + 232);
  swift_release();
  int v4 = *(unsigned __int8 *)(v0 + 272);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  if (v4 == 1)
  {
    int v5 = *(unsigned __int8 *)(v0 + 273);
    sub_A35C(v0 + 120, &qword_D92A0);
    if (v5 == 1)
    {
      id v6 = *(void **)(v0 + 232);
      uint64_t v7 = *(void *)(v0 + 192);
      id v8 = *(void **)(v7 + 72);
      *(void *)(v7 + 72) = v6;
      *(void *)(v7 + 80) = &off_D00B0;
      id v9 = v6;
    }
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(uint64_t, _UNKNOWN **))(v0 + 8);
    uint64_t v11 = *(void *)(v0 + 232);
    return v10(v11, &off_D00B0);
  }
  else
  {
    id v13 = *(void **)(v0 + 232);
    sub_A5ED0();
    sub_33C70(&qword_D8D80, (void (*)(uint64_t))&type metadata accessor for LiveSpeechError);
    swift_allocError();
    sub_A5EE0();
    swift_willThrow();

    sub_A35C(v0 + 120, &qword_D92A0);
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
}

uint64_t sub_315A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[2] = a4;
  uint64_t v7 = sub_A5FF0();
  v5[3] = v7;
  v5[4] = *(void *)(v7 - 8);
  v5[5] = swift_task_alloc();
  v5[6] = swift_task_alloc();
  v5[7] = sub_A7330();
  v5[8] = sub_A7320();
  id v8 = (void *)swift_task_alloc();
  v5[9] = v8;
  *id v8 = v5;
  v8[1] = sub_316D0;
  return sub_2FED4(a5, 0);
}

uint64_t sub_316D0(void *a1)
{
  *(void *)(*(void *)v2 + 80) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_A7300();
    uint64_t v6 = v5;
    uint64_t v7 = sub_319B4;
  }
  else
  {

    uint64_t v4 = sub_A7300();
    uint64_t v6 = v8;
    uint64_t v7 = sub_31858;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v7, v4, v6);
}

uint64_t sub_31858()
{
  swift_release();
  sub_A5EC0();
  swift_retain();
  uint64_t v1 = sub_A5FE0();
  os_log_type_t v2 = sub_A7410();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 16);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    *(_DWORD *)(v0 + 88) = *(unsigned __int8 *)(v3 + 24);
    sub_A7600();
    swift_release();
    _os_log_impl(&def_5ED54, v1, v2, "Did show LiveSpeech UI on external screen (isRunning=%{BOOL}d)", v4, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  (*(void (**)(void, void))(*(void *)(v0 + 32) + 8))(*(void *)(v0 + 48), *(void *)(v0 + 24));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_319B4()
{
  swift_release();
  sub_A5EC0();
  uint64_t v1 = sub_A5FE0();
  os_log_type_t v2 = sub_A7430();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&def_5ED54, v1, v2, "Cannot attach LiveSpeech view controller for external display", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = v0[3];
  swift_errorRelease();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_31ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[2] = a4;
  uint64_t v7 = sub_A5FF0();
  v5[3] = v7;
  v5[4] = *(void *)(v7 - 8);
  v5[5] = swift_task_alloc();
  v5[6] = swift_task_alloc();
  v5[7] = sub_A7330();
  v5[8] = sub_A7320();
  uint64_t v8 = (void *)swift_task_alloc();
  v5[9] = v8;
  *uint64_t v8 = v5;
  v8[1] = sub_31BFC;
  return sub_30628(a5, 0);
}

uint64_t sub_31BFC(void *a1)
{
  *(void *)(*(void *)v2 + 80) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_A7300();
    uint64_t v6 = v5;
    uint64_t v7 = sub_31EE0;
  }
  else
  {

    uint64_t v4 = sub_A7300();
    uint64_t v6 = v8;
    uint64_t v7 = sub_31D84;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v7, v4, v6);
}

uint64_t sub_31D84()
{
  swift_release();
  sub_A5EC0();
  swift_retain();
  uint64_t v1 = sub_A5FE0();
  os_log_type_t v2 = sub_A7410();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 16);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    *(_DWORD *)(v0 + 88) = *(unsigned __int8 *)(v3 + 24);
    sub_A7600();
    swift_release();
    _os_log_impl(&def_5ED54, v1, v2, "Did hide LiveSpeech UI on external screen (isRunning=%{BOOL}d)", v4, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  (*(void (**)(void, void))(*(void *)(v0 + 32) + 8))(*(void *)(v0 + 48), *(void *)(v0 + 24));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_31EE0()
{
  swift_release();
  sub_A5EC0();
  uint64_t v1 = sub_A5FE0();
  os_log_type_t v2 = sub_A7430();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&def_5ED54, v1, v2, "Cannot detach LiveSpeech view controller for external display", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = v0[3];
  swift_errorRelease();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

unint64_t sub_31FF8()
{
  sub_7AF4(&qword_D8D90);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_A9C60;
  *(void *)(inited + 32) = 0x646568636E75616CLL;
  *(void *)(inited + 40) = 0xE800000000000000;
  sub_11C10(0, &qword_D8D98);
  *(NSNumber *)(inited + 48) = sub_A7590(1);
  return sub_6D04(inited);
}

Class sub_32088(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_11C10(0, &qword_D8D88);
    v4.super.Class isa = sub_A7130().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }

  return v4.super.isa;
}

id *LiveSpeechCoordinator.deinit()
{
  sub_33ACC((uint64_t)(v0 + 2));

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t LiveSpeechCoordinator.__deallocating_deinit()
{
  sub_33ACC((uint64_t)(v0 + 2));

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 88, 7);
}

uint64_t sub_321CC(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  NSDictionary v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *NSDictionary v4 = v2;
  v4[1] = sub_322A8;
  return v6(a1);
}

uint64_t sub_322A8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_323A0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_7AF4((uint64_t *)&unk_D8DA0);
  uint64_t v6 = sub_A7770();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v33 = v2;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v13 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v21 = v20 | (v15 << 6);
      }
      else
      {
        int64_t v22 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v22 >= v12) {
          goto LABEL_33;
        }
        unint64_t v23 = v9[v22];
        ++v15;
        if (!v23)
        {
          int64_t v15 = v22 + 1;
          if (v22 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v23 = v9[v15];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v12)
            {
LABEL_33:
              swift_release();
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v33;
                goto LABEL_40;
              }
              uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
              if (v32 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v32;
              }
              uint64_t v3 = v33;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v23 = v9[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v15 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_42;
                }
                if (v15 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v23 = v9[v15];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v15 = v24;
          }
        }
LABEL_30:
        unint64_t v11 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v15 << 6);
      }
      uint64_t v29 = *(void **)(*(void *)(v5 + 48) + 8 * v21);
      long long v34 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v21);
      if ((a2 & 1) == 0)
      {
        id v30 = v29;
        id v31 = (id)v34;
      }
      uint64_t result = sub_A75A0(*(void *)(v7 + 40));
      uint64_t v16 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v17 = result & ~v16;
      unint64_t v18 = v17 >> 6;
      if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v27 = v18 == v26;
          if (v18 == v26) {
            unint64_t v18 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v18);
        }
        while (v28 == -1);
        unint64_t v19 = __clz(__rbit64(~v28)) + (v18 << 6);
      }
      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(void *)(*(void *)(v7 + 48) + 8 * v19) = v29;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v19) = v34;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

id sub_32674()
{
  uint64_t v1 = v0;
  sub_7AF4((uint64_t *)&unk_D8DA0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_A7760();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v23 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v23;
    id v19 = v17;
    id result = (id)v23;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_32834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    if (!(*v4 >> 62))
    {
      if (*(void *)((char *)&dword_10 + (*v4 & 0xFFFFFFFFFFFFFF8)) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_A7740();
  swift_bridgeObjectRelease();
  if (v22 < v5) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v8 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v7 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v23 = sub_A7740();
    swift_bridgeObjectRelease();
    uint64_t v10 = v23 + v7;
    if (!__OFADD__(v23, v7)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v4 >> 62) {
    goto LABEL_32;
  }
  uint64_t v9 = *(void *)((char *)&dword_10 + (*v4 & 0xFFFFFFFFFFFFFF8));
  uint64_t v10 = v9 + v7;
  if (__OFADD__(v9, v7)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v11 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v4 = v11;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v11 & 0x8000000000000000) != 0
    || (v11 & 0x4000000000000000) != 0
    || (uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8, v10 > *(void *)((char *)&dword_18 + (v11 & 0xFFFFFFFFFFFFFF8)) >> 1))
  {
    if (!(v11 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v11 = sub_A76B0();
      swift_bridgeObjectRelease();
      *uint64_t v4 = v11;
      uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    sub_A7740();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  unint64_t v14 = (void *)(v13 + 32 + 8 * v6);
  sub_A7510();
  swift_arrayDestroy();
  if (v7)
  {
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = sub_A7740();
      swift_bridgeObjectRelease();
      uint64_t v16 = v24 - v5;
      if (!__OFSUB__(v24, v5))
      {
LABEL_17:
        if (v16 < 0)
        {
LABEL_42:
          uint64_t result = sub_A7790();
          __break(1u);
          return result;
        }
        unint64_t v17 = (char *)(v14 + 1);
        uint64_t v18 = (char *)(v13 + 32 + 8 * v5);
        if (v14 + 1 != (void *)v18 || v17 >= &v18[8 * v16]) {
          memmove(v17, v18, 8 * v16);
        }
        if (!(v11 >> 62))
        {
          uint64_t v19 = *(void *)(v13 + 16);
          uint64_t v20 = v19 + v7;
          if (!__OFADD__(v19, v7))
          {
LABEL_23:
            *(void *)(v13 + 16) = v20;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v25 = sub_A7740();
        swift_bridgeObjectRelease();
        uint64_t v20 = v25 + v7;
        if (!__OFADD__(v25, v7)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(v13 + 16);
      uint64_t v16 = v15 - v5;
      if (!__OFSUB__(v15, v5)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:
  *unint64_t v14 = v3;

  return sub_A72C0();
}

void sub_32B20(uint64_t a1, void *a2, char a3, void *a4)
{
  uint64_t v7 = (void *)*a4;
  unint64_t v9 = sub_8608C((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 >= v12 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v15 = (void *)*a4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7] + 16 * v9;

      *(void *)uint64_t v16 = a1;
      *(void *)(v16 + 8) = &off_CF7D8;
      return;
    }
    goto LABEL_11;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_32674();
    goto LABEL_7;
  }
  sub_323A0(v12, a3 & 1);
  unint64_t v17 = sub_8608C((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_15:
    sub_11C10(0, (unint64_t *)&qword_D8D50);
    sub_A7820();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  uint64_t v15 = (void *)*a4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  sub_32C68(v9, (uint64_t)a2, a1, v15);

  id v19 = a2;
}

unint64_t sub_32C68(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  uint64_t v4 = (void *)(a4[7] + 16 * result);
  *uint64_t v4 = a3;
  v4[1] = &off_CF7D8;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

uint64_t sub_32CB8(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = sub_6AA0((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(a2 + 48) = _swiftEmptyArrayStorage;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  swift_unknownObjectWeakAssign();
  return a2;
}

uint64_t sub_32D2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_32D3C()
{
  return swift_release();
}

uint64_t sub_32D44(uint64_t a1)
{
  return sub_11238(a1, *(void *)(v1 + 16));
}

uint64_t sub_32D4C(char a1)
{
  *(void *)(v2 + 120) = v1;
  *(unsigned char *)(v2 + 185) = a1;
  sub_A7330();
  *(void *)(v2 + 128) = sub_A7320();
  uint64_t v4 = sub_A7300();
  *(void *)(v2 + 136) = v4;
  *(void *)(v2 + 144) = v3;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_32DE8, v4, v3);
}

uint64_t sub_32DE8()
{
  if (*(unsigned char *)(v0 + 185) == 1
    && (uint64_t v1 = *(void *)(v0 + 120),
        uint64_t v2 = *(void **)(v1 + 72),
        *(void *)(v0 + 152) = v2,
        *(void *)(v0 + 160) = *(void *)(v1 + 80),
        v2))
  {
    id v3 = v2;
    id v4 = sub_2FE14();
    *(void *)(v0 + 168) = v4;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    *(void *)(v0 + 176) = Strong;
    if (Strong)
    {
      uint64_t v6 = Strong;
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 56) = v0 + 184;
      *(void *)(v0 + 24) = sub_32F98;
      uint64_t v7 = swift_continuation_init();
      *(void *)(v0 + 80) = _NSConcreteStackBlock;
      *(void *)(v0 + 88) = 0x40000000;
      *(void *)(v0 + 96) = sub_78728;
      *(void *)(v0 + 104) = &unk_D0010;
      *(void *)(v0 + 112) = v7;
      [v4 removeContentViewController:v3 withUserInteractionEnabled:1 forService:v6 context:0 completion:v0 + 80];
      uint64_t Strong = v0 + 16;
    }
    else
    {
      __break(1u);
    }
    return _swift_continuation_await(Strong);
  }
  else
  {
    swift_release();
    char v8 = *(uint64_t (**)(void, void))(v0 + 8);
    return v8(0, 0);
  }
}

uint64_t sub_32F98()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 144);
  uint64_t v2 = *(void *)(*(void *)v0 + 136);
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_330A0, v2, v1);
}

uint64_t sub_330A0()
{
  uint64_t v1 = *(void **)(v0 + 168);
  uint64_t v2 = *(void **)(v0 + 152);
  swift_release();
  int v3 = *(unsigned __int8 *)(v0 + 184);

  swift_unknownObjectRelease();
  if (v3 == 1)
  {
    uint64_t v4 = *(void *)(v0 + 152);
    uint64_t v5 = *(void *)(v0 + 160);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v6(v4, v5);
  }
  else
  {
    char v8 = *(void **)(v0 + 152);
    sub_A5EA0();
    sub_33C70(&qword_D8D68, (void (*)(uint64_t))&type metadata accessor for LiveCaptionsError);
    swift_allocError();
    sub_A5EB0();
    swift_willThrow();

    unint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

uint64_t sub_33204(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  char v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *char v8 = v2;
  v8[1] = sub_2C168;
  return sub_315A0(a1, v4, v5, v7, v6);
}

uint64_t sub_332C4(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  while (v4)
  {
    uint64_t v5 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = sub_A76A0();
        swift_unknownObjectRelease();
        if (v6 == a2) {
          return v5;
        }
      }
      else if (*(void *)(a1 + 8 * v5 + 32) == a2)
      {
        return v5;
      }
      if (__OFADD__(v5, 1)) {
        break;
      }
      if (++v5 == v4) {
        return 0;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_A7740();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_333B4(uint64_t *a1, uint64_t a2)
{
  unint64_t v5 = swift_bridgeObjectRetain();
  unint64_t v6 = sub_332C4(v5, a2);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (v2) {
    return v6;
  }
  if ((v8 & 1) == 0)
  {
    uint64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_54;
    }
    if ((unint64_t)*a1 >> 62)
    {
LABEL_55:
      swift_bridgeObjectRetain();
      uint64_t v25 = sub_A7740();
      swift_bridgeObjectRelease();
      if (v9 != v25) {
        goto LABEL_6;
      }
    }
    else if (v9 != *(void *)((char *)&dword_10 + (*a1 & 0xFFFFFFFFFFFFFF8)))
    {
LABEL_6:
      for (unint64_t i = v6 + 5; ; ++i)
      {
        unint64_t v11 = i - 4;
        uint64_t v12 = *a1;
        if ((*a1 & 0xC000000000000001) != 0) {
          break;
        }
        if ((v11 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        if (v11 >= *(void *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFFF8))) {
          goto LABEL_45;
        }
        if (*(void *)(v12 + 8 * i) != a2) {
          goto LABEL_11;
        }
LABEL_31:
        uint64_t v9 = i - 3;
        if (__OFADD__(v11, 1)) {
          goto LABEL_46;
        }
        if ((unint64_t)*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v21 = sub_A7740();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v21 = *(void *)((char *)&dword_10 + (*a1 & 0xFFFFFFFFFFFFFF8));
        }
        if (v9 == v21) {
          return v6;
        }
      }
      uint64_t v22 = sub_A76A0();
      swift_unknownObjectRelease();
      if (v22 == a2) {
        goto LABEL_31;
      }
LABEL_11:
      if (v11 == v6)
      {
LABEL_30:
        if (__OFADD__(v6++, 1)) {
          goto LABEL_47;
        }
        goto LABEL_31;
      }
      uint64_t v9 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        id v13 = (id)sub_A76A0();
        uint64_t v9 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_16:
          if ((v11 & 0x8000000000000000) != 0) {
            goto LABEL_50;
          }
          if (v11 >= *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFFF8))) {
            goto LABEL_51;
          }
          id v14 = *(id *)(v9 + 8 * i);
          goto LABEL_19;
        }
      }
      else
      {
        if ((v6 & 0x8000000000000000) != 0) {
          goto LABEL_48;
        }
        if (v6 >= *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFFF8))) {
          goto LABEL_49;
        }
        id v13 = *(id *)(v9 + 8 * v6 + 32);
        if ((v9 & 0xC000000000000001) == 0) {
          goto LABEL_16;
        }
      }
      id v14 = (id)sub_A76A0();
      uint64_t v9 = *a1;
LABEL_19:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v9;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v9 < 0 || (v9 & 0x4000000000000000) != 0)
      {
        uint64_t v9 = sub_42160(v9);
        *a1 = v9;
      }
      uint64_t v16 = *(void **)((char *)&stru_20.cmd + 8 * v6 + (v9 & 0xFFFFFFFFFFFFFF8));
      *(void *)((char *)&stru_20.cmd + 8 * v6 + (v9 & 0xFFFFFFFFFFFFFF8)) = v14;

      sub_A72C0();
      uint64_t v9 = *a1;
      int v17 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v9;
      if (!v17 || v9 < 0 || (v9 & 0x4000000000000000) != 0)
      {
        uint64_t v9 = sub_42160(v9);
        *a1 = v9;
      }
      if ((v11 & 0x8000000000000000) != 0) {
        goto LABEL_52;
      }
      uint64_t v18 = v9 & 0xFFFFFFFFFFFFFF8;
      if (v11 >= *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFFF8))) {
        goto LABEL_53;
      }
      id v19 = *(void **)(v18 + 8 * i);
      *(void *)(v18 + 8 * i) = v13;

      sub_A72C0();
      goto LABEL_30;
    }
    return v6;
  }
  unint64_t v23 = *a1;
  if (!(v23 >> 62)) {
    return *(void *)((char *)&dword_10 + (v23 & 0xFFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_A7740();
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t sub_336D0(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(void *)((char *)&dword_10 + (*v3 & 0xFFFFFFFFFFFFFF8)) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_A7740();
  swift_bridgeObjectRelease();
  if (v18 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_A7740();
    swift_bridgeObjectRelease();
    uint64_t v8 = v19 + v5;
    if (!__OFADD__(v19, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((char *)&dword_10 + (*v3 & 0xFFFFFFFFFFFFFF8));
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *int v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((char *)&dword_18 + (v9 & 0xFFFFFFFFFFFFFF8)) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v9 = sub_A76B0();
      swift_bridgeObjectRelease();
      *int v3 = v9;
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    sub_A7740();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  sub_11C10(0, (unint64_t *)&qword_D8D50);
  swift_arrayDestroy();
  if (v5)
  {
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = sub_A7740();
      swift_bridgeObjectRelease();
      uint64_t v13 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_17:
        if (v13 < 0)
        {
LABEL_42:
          uint64_t result = sub_A7790();
          __break(1u);
          return result;
        }
        id v14 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v14 + 8 * v13) {
          memmove((void *)(v11 + 32 + 8 * v4), v14, 8 * v13);
        }
        if (!(v9 >> 62))
        {
          uint64_t v15 = *(void *)(v11 + 16);
          uint64_t v16 = v15 + v5;
          if (!__OFADD__(v15, v5))
          {
LABEL_23:
            *(void *)(v11 + 16) = v16;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v21 = sub_A7740();
        swift_bridgeObjectRelease();
        uint64_t v16 = v21 + v5;
        if (!__OFADD__(v21, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = v12 - v2;
      if (!__OFSUB__(v12, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return sub_A72C0();
}

uint64_t sub_339C4()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_33A0C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_2C328;
  return sub_31ACC(a1, v4, v5, v7, v6);
}

uint64_t sub_33ACC(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for LiveSpeechCoordinator()
{
  return self;
}

uint64_t sub_33B18()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_33B50(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_2C168;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_D8D58 + dword_D8D58);
  return v6(a1, v4);
}

uint64_t sub_33C08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_7AF4(&qword_D92A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_33C70(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_33CB8(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_33D04()
{
  return sub_11BF0();
}

Swift::Void __swiftcall LiveSpeechScreenLockManager.registerForScreenEvents()()
{
  uint64_t v1 = sub_A5FF0();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&aBlock[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (int *)(v0 + 16);
  swift_beginAccess();
  if (*(int *)(v0 + 16) <= 0)
  {
    sub_7B78();
    uint64_t v6 = sub_A74C0();
    aBlock[4] = sub_34118;
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_343E4;
    aBlock[3] = &unk_D0088;
    uint64_t v7 = _Block_copy(aBlock);
    swift_beginAccess();
    uint32_t v8 = notify_register_dispatch("com.apple.springboard.lockstate", v5, v6, v7);
    swift_endAccess();
    _Block_release(v7);

    sub_A5EC0();
    unint64_t v9 = sub_A5FE0();
    os_log_type_t v10 = sub_A7410();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 67109120;
      LODWORD(aBlock[0]) = v8;
      sub_A7600();
      _os_log_impl(&def_5ED54, v9, v10, "registerForScreenEvents result=%u", v11, 8u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

Swift::Void __swiftcall LiveSpeechScreenLockManager.unregisterForScreenEvents()()
{
  uint64_t v1 = sub_A5FF0();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (_DWORD *)(v0 + 16);
  swift_beginAccess();
  int v6 = *(_DWORD *)(v0 + 16);
  if (v6 >= 1)
  {
    uint32_t v7 = notify_cancel(v6);
    sub_A5EC0();
    uint32_t v8 = sub_A5FE0();
    os_log_type_t v9 = sub_A7410();
    if (os_log_type_enabled(v8, v9))
    {
      os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v10 = 67109120;
      v11[1] = v7;
      sub_A7600();
      _os_log_impl(&def_5ED54, v8, v9, "unregisterForScreenEvents result=%u", v10, 8u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    *uint64_t v5 = -1;
  }
}

uint64_t sub_34118(int a1)
{
  uint64_t v2 = sub_A5FF0();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&state64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint32_t v8 = (char *)&state64 - v7;
  uint64_t result = _AXSLiveSpeechEnabled();
  if (result)
  {
    uint64_t state64 = 0;
    uint32_t state = notify_get_state(a1, &state64);
    sub_A5EC0();
    uint64_t v11 = sub_A5FE0();
    os_log_type_t v12 = sub_A7410();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 134218240;
      swift_beginAccess();
      uint64_t v19 = state64;
      sub_A7600();
      *(_WORD *)(v13 + 12) = 1024;
      LODWORD(v19) = state;
      sub_A7600();
      _os_log_impl(&def_5ED54, v11, v12, "Screen lock event occurred. lockStatus=%llu notifyGetStateResult=%u", (uint8_t *)v13, 0x12u);
      swift_slowDealloc();
    }

    id v14 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    uint64_t result = v14(v8, v2);
    if (!state)
    {
      uint64_t result = swift_beginAccess();
      if (state64 == 1)
      {
        sub_A5EC0();
        uint64_t v15 = sub_A5FE0();
        os_log_type_t v16 = sub_A7450();
        if (os_log_type_enabled(v15, v16))
        {
          int v17 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)int v17 = 0;
          _os_log_impl(&def_5ED54, v15, v16, "Screen did lock. Turning off live speech", v17, 2u);
          swift_slowDealloc();
        }

        v14(v5, v2);
        return _AXSLiveSpeechSetEnabled();
      }
    }
  }
  return result;
}

uint64_t sub_343E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_34438(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_34448()
{
  return swift_release();
}

uint64_t LiveSpeechScreenLockManager.deinit()
{
  return v0;
}

uint64_t LiveSpeechScreenLockManager.__deallocating_deinit()
{
  return _swift_deallocClassInstance(v0, 20, 7);
}

uint64_t type metadata accessor for LiveSpeechScreenLockManager()
{
  return self;
}

uint64_t type metadata accessor for LiveCaptionsRootViewController()
{
  uint64_t result = qword_D8E60;
  if (!qword_D8E60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_344D8()
{
  return swift_initClassMetadata2();
}

void sub_34528(char *a1, uint64_t a2, void *a3)
{
  *(void *)&a1[qword_D8E50] = sub_34A18;
  *(void *)&a1[qword_D8E58] = sub_34A20;
  id v4 = a3;

  sub_A7730();
  __break(1u);
}

id sub_345C4()
{
  uint64_t v1 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(v1, v0);

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for LiveCaptionsRootViewController();
  return objc_msgSendSuper2(&v3, "dealloc");
}

id sub_34620(void *a1)
{
  id v1 = a1;
  uint64_t v2 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(v2, v1);

  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for LiveCaptionsRootViewController();
  return objc_msgSendSuper2(&v4, "dealloc");
}

void sub_34684()
{
  uint64_t v1 = sub_7AF4((uint64_t *)&unk_D8D70);
  __chkstk_darwin(v1 - 8);
  objc_super v3 = (uint64_t *)((char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  objc_super v4 = (objc_class *)type metadata accessor for LiveCaptionsRootViewController();
  v20.receiver = v0;
  v20.super_class = v4;
  objc_msgSendSuper2(&v20, "viewDidLoad");
  id v5 = [v0 view];
  if (!v5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v6 = v5;
  id v7 = [self clearColor];
  [v6 setBackgroundColor:v7];

  sub_24328(v3);
  uint64_t v8 = type metadata accessor for LiveCaptionsRootView();
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 0, 1, v8);
  sub_A67B0();
  uint64_t v9 = 18;
  if (!_AXSLiveTranscriptionScreenshotHidingEnabled())
  {
    if (os_variant_has_internal_ui()) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = 18;
    }
  }
  id v10 = [v0 view];
  if (!v10) {
    goto LABEL_10;
  }
  uint64_t v11 = v10;
  id v12 = [v10 layer];

  [v12 setDisableUpdateMask:v9];
  uint64_t v13 = CFNotificationCenterGetDarwinNotifyCenter();
  if (kAXSLiveTranscriptionScreenshotHidingDidChangeNotification)
  {
    id v14 = v13;
    uint64_t v15 = *(void (__cdecl **)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))&v0[qword_D8E50];
    os_log_type_t v16 = (__CFString *)kAXSLiveTranscriptionScreenshotHidingDidChangeNotification;
    CFNotificationCenterAddObserver(v14, v0, v15, v16, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

    int v17 = CFNotificationCenterGetDarwinNotifyCenter();
    uint64_t v18 = *(void (__cdecl **)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))&v0[qword_D8E58];
    uint64_t v19 = (__CFString *)sub_A71A0();
    CFNotificationCenterAddObserver(v17, v0, v18, v19, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

    return;
  }
LABEL_11:
  __break(1u);
}

void sub_34900(void *a1)
{
  id v1 = a1;
  sub_34684();
}

void sub_34948(void *a1, uint64_t a2, uint64_t a3)
{
  v7.receiver = a1;
  v7.super_class = (Class)type metadata accessor for LiveCaptionsRootViewController();
  id v4 = v7.receiver;
  objc_msgSendSuper2(&v7, "viewWillDisappear:", a3);
  if (qword_D7D68 != -1) {
    swift_once();
  }
  uint64_t v5 = static LiveSpeechCaptionsViewsCoordinator.shared;
  uint64_t v6 = (_OWORD *)(static LiveSpeechCaptionsViewsCoordinator.shared
                + OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveCaptionsFrame);
  *uint64_t v6 = 0u;
  v6[1] = 0u;
  *(unsigned char *)(v5 + OBJC_IVAR____TtC19LiveSpeechUIService34LiveSpeechCaptionsViewsCoordinator_liveCaptionsWindowState) = 0;
}

uint64_t sub_34A10()
{
  return 1;
}

void sub_34A18(uint64_t a1, void *a2)
{
}

void sub_34A20(void *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    id v11 = a2;
    id v8 = a1;
    id v9 = a3;
    id v10 = a5;
    _AXSLiveTranscriptionSetEnabled();
  }
}

void sub_34AA8()
{
}

void sub_34AD8()
{
}

uint64_t sub_34B08()
{
  return type metadata accessor for LiveCaptionsRootViewController();
}

void sub_34B10(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    uint64_t v2 = 18;
    if (!_AXSLiveTranscriptionScreenshotHidingEnabled())
    {
      if (os_variant_has_internal_ui()) {
        uint64_t v2 = 0;
      }
      else {
        uint64_t v2 = 18;
      }
    }
    id v3 = [v1 view];
    if (v3)
    {
      id v4 = v3;
      id v5 = [v3 layer];

      [v5 setDisableUpdateMask:v2];
    }
    else
    {
      __break(1u);
    }
  }
}

void *sub_34BE8(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v30 = *a2;
    *a1 = *a2;
    a1 = (void *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_A5D50();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    id v9 = (void *)((char *)a1 + v8);
    id v10 = (void *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *id v9 = *v10;
    v9[1] = v11;
    uint64_t v12 = a3[7];
    uint64_t v13 = a3[8];
    id v14 = (void *)((char *)a1 + v12);
    uint64_t v15 = (void *)((char *)a2 + v12);
    uint64_t v16 = v15[1];
    *id v14 = *v15;
    v14[1] = v16;
    int v17 = (void *)((char *)a1 + v13);
    uint64_t v18 = (void *)((char *)a2 + v13);
    uint64_t v19 = v18[1];
    *int v17 = *v18;
    v17[1] = v19;
    uint64_t v20 = a3[9];
    uint64_t v21 = a3[10];
    uint64_t v22 = (void *)((char *)a1 + v20);
    unint64_t v23 = (char *)a2 + v20;
    uint64_t v25 = *(void **)v23;
    uint64_t v24 = *((void *)v23 + 1);
    uint64_t v26 = (void *)((char *)a2 + v21);
    BOOL v27 = (void *)((char *)a1 + v21);
    *uint64_t v22 = *(void *)v23;
    v22[1] = v24;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v28 = v25;
    swift_retain();
    sub_7AF4(&qword_D7E68);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v29 = sub_A6380();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v26, v29);
    }
    else
    {
      *BOOL v27 = *v26;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_34DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_A5D50();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  uint64_t v5 = a1 + *(int *)(a2 + 40);
  sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_A6380();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    return v7(v5, v6);
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_34F24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_A5D50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = (void *)(a1 + v7);
  id v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v11);
  id v14 = (void *)(a2 + v11);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = (void *)(a1 + v12);
  int v17 = (void *)(a2 + v12);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = a3[9];
  uint64_t v20 = a3[10];
  uint64_t v21 = (void *)(a1 + v19);
  uint64_t v22 = a2 + v19;
  uint64_t v24 = *(void **)v22;
  uint64_t v23 = *(void *)(v22 + 8);
  uint64_t v25 = (void *)(a2 + v20);
  uint64_t v26 = (void *)(a1 + v20);
  *uint64_t v21 = *(void *)v22;
  v21[1] = v23;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v27 = v24;
  swift_retain();
  sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v28 = sub_A6380();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v25, v28);
  }
  else
  {
    *uint64_t v26 = *v25;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_350BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_A5D50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_retain();
  swift_release();
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  swift_retain();
  swift_release();
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  swift_retain();
  swift_release();
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  swift_retain();
  swift_release();
  uint64_t v13 = a3[8];
  id v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  *id v14 = *v15;
  v14[1] = v15[1];
  swift_retain();
  swift_release();
  uint64_t v16 = a3[9];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = *(void **)(a2 + v16);
  uint64_t v20 = *(void **)v17;
  *(void *)uint64_t v17 = v19;
  id v21 = v19;

  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v22 = a3[10];
    uint64_t v23 = (void *)(a1 + v22);
    uint64_t v24 = (void *)(a2 + v22);
    sub_A35C(a1 + v22, &qword_D7E68);
    sub_7AF4(&qword_D7E68);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v25 = sub_A6380();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
    }
    else
    {
      void *v23 = *v24;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_352C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_A5D50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = sub_A6380();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 32))(v10, v11, v13);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  return a1;
}

uint64_t sub_35404(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_A5D50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_release();
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  swift_release();
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  swift_release();
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  swift_release();
  uint64_t v13 = a3[8];
  id v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  *id v14 = *v15;
  v14[1] = v15[1];
  swift_release();
  uint64_t v16 = a3[9];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = *(void **)(a1 + v16);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);

  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  swift_release();
  if (a1 != a2)
  {
    uint64_t v20 = a3[10];
    id v21 = (void *)(a1 + v20);
    uint64_t v22 = (const void *)(a2 + v20);
    sub_A35C(a1 + v20, &qword_D7E68);
    uint64_t v23 = sub_7AF4(&qword_D7E68);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v24 = sub_A6380();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v24 - 8) + 32))(v21, v22, v24);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_355E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_355F8);
}

uint64_t sub_355F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_A5D50();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = sub_7AF4(&qword_D8EB0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 40);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_35728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_3573C);
}

uint64_t sub_3573C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_A5D50();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = sub_7AF4(&qword_D8EB0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 40);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t type metadata accessor for LiveCaptionsTextView()
{
  uint64_t result = qword_D8F10;
  if (!qword_D8F10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_358B8()
{
  sub_A5D50();
  if (v0 <= 0x3F)
  {
    sub_359A0();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_359A0()
{
  if (!qword_D8F20)
  {
    sub_A6380();
    unint64_t v0 = sub_A6200();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_D8F20);
    }
  }
}

uint64_t sub_359F8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_35A14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v62 = a1;
  uint64_t v2 = sub_A7520();
  uint64_t v60 = *(void *)(v2 - 8);
  uint64_t v61 = v2;
  __chkstk_darwin(v2);
  uint64_t v70 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_A5D50();
  uint64_t v64 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v55 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for LiveCaptionsTextView();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_7AF4(&qword_D8F68);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v63 = (int *)sub_7AF4(&qword_D8F70);
  __chkstk_darwin(v63);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_7AF4(&qword_D8F78);
  uint64_t v58 = *(void *)(v14 - 8);
  uint64_t v59 = v14;
  __chkstk_darwin(v14);
  uint64_t v67 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_7AF4(&qword_D8F80);
  __chkstk_darwin(v57);
  uint64_t v68 = (uint64_t)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v11 = sub_A6760();
  *((void *)v11 + 1) = 0x4010000000000000;
  v11[16] = 0;
  uint64_t v17 = sub_7AF4(&qword_D8F88);
  sub_36674(v1, (uint64_t)&v11[*(int *)(v17 + 44)]);
  sub_38180(v1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for LiveCaptionsTextView);
  uint64_t v18 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = (v18 + 16) & ~v18;
  uint64_t v20 = (char *)(v19 + v7);
  uint64_t v21 = v18 | 7;
  uint64_t v22 = swift_allocObject();
  sub_37D34((uint64_t)v8, v22 + v19);
  long long v54 = v13;
  sub_8860((uint64_t)v11, (uint64_t)v13, &qword_D8F68);
  uint64_t v23 = (uint64_t (**)())&v13[v63[9]];
  void *v23 = sub_37D98;
  v23[1] = (uint64_t (*)())v22;
  v23[2] = 0;
  v23[3] = 0;
  sub_A35C((uint64_t)v11, &qword_D8F68);
  uint64_t v24 = v55;
  uint64_t v25 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v55, v1, v56);
  uint64_t v69 = v1;
  sub_38180(v1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for LiveCaptionsTextView);
  uint64_t v26 = swift_allocObject();
  uint64_t v65 = v19;
  uint64_t v66 = v8;
  sub_37D34((uint64_t)v8, v26 + v19);
  sub_37E7C();
  sub_38400(&qword_D9280, (void (*)(uint64_t))&type metadata accessor for AXLTCaption);
  uint64_t v27 = (uint64_t)v54;
  sub_A6CE0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v24, v25);
  sub_A35C(v27, &qword_D8F70);
  id v63 = (int *)self;
  id v28 = [v63 defaultCenter];
  if (qword_D7E10 != -1) {
    swift_once();
  }
  uint64_t v29 = v70;
  sub_A7530();

  uint64_t v30 = (uint64_t)v66;
  sub_38180(v69, (uint64_t)v66, (uint64_t (*)(void))type metadata accessor for LiveCaptionsTextView);
  uint64_t v31 = swift_allocObject();
  sub_37D34(v30, v31 + v65);
  uint64_t v32 = v58;
  uint64_t v33 = v59;
  long long v34 = *(void (**)(uint64_t, char *, uint64_t))(v58 + 16);
  uint64_t v56 = v21;
  unint64_t v35 = v67;
  uint64_t v36 = v68;
  v34(v68, v67, v59);
  uint64_t v37 = v57;
  uint64_t v38 = v36 + *(int *)(v57 + 52);
  uint64_t v39 = v60;
  uint64_t v40 = v61;
  uint64_t v55 = v20;
  uint64_t v64 = *(void *)(v60 + 16);
  ((void (*)(uint64_t, char *, uint64_t))v64)(v38, v29, v61);
  uint64_t v41 = (uint64_t (**)(uint64_t))(v36 + *(int *)(v37 + 56));
  *uint64_t v41 = sub_37F20;
  v41[1] = (uint64_t (*)(uint64_t))v31;
  uint64_t v42 = *(void (**)(char *, uint64_t))(v39 + 8);
  v42(v29, v40);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v33);
  id v43 = [v63 defaultCenter];
  uint64_t v44 = v40;
  if (qword_D7E20 != -1) {
    swift_once();
  }
  long long v45 = v70;
  sub_A7530();

  uint64_t v46 = (uint64_t)v66;
  sub_38180(v69, (uint64_t)v66, (uint64_t (*)(void))type metadata accessor for LiveCaptionsTextView);
  uint64_t v47 = swift_allocObject();
  sub_37D34(v46, v47 + v65);
  uint64_t v48 = v68;
  uint64_t v49 = v62;
  sub_8860(v68, v62, &qword_D8F80);
  uint64_t v50 = sub_7AF4(&qword_D8FA0);
  ((void (*)(uint64_t, char *, uint64_t))v64)(v49 + *(int *)(v50 + 52), v45, v44);
  uint64_t v51 = (uint64_t (**)(uint64_t))(v49 + *(int *)(v50 + 56));
  *uint64_t v51 = sub_380E4;
  v51[1] = (uint64_t (*)(uint64_t))v47;
  v42(v45, v44);
  return sub_A35C(v48, &qword_D8F80);
}

uint64_t sub_361C4()
{
  uint64_t v0 = sub_A5D10();
  uint64_t v2 = v1;
  v3._uint64_t countAndFlagsBits = sub_A5D20();
  uint64_t v5 = v4;
  v6._uint64_t countAndFlagsBits = v0;
  v6._object = v2;
  v3._object = v5;
  object = appIconSystemName(_:_:)(v6, v3).value._object;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!object)
  {
    uint64_t v9 = sub_A5D10();
    uint64_t v11 = v10;
    type metadata accessor for LiveCaptionsTextView();
    sub_7AF4(&qword_D8810);
    sub_A6E80();
    iconForBundleId(_:iconSize:)(v12, v9, v11);
    swift_bridgeObjectRelease();
    sub_7AF4(&qword_D8FB8);
    return sub_A6E90();
  }
  return result;
}

uint64_t sub_362E4()
{
  uint64_t v0 = sub_A5D10();
  uint64_t v2 = v1;
  v3._uint64_t countAndFlagsBits = sub_A5D20();
  uint64_t v5 = v4;
  v6._uint64_t countAndFlagsBits = v0;
  v6._object = v2;
  v3._object = v5;
  object = appIconSystemName(_:_:)(v6, v3).value._object;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!object)
  {
    uint64_t v9 = sub_A5D10();
    uint64_t v11 = v10;
    type metadata accessor for LiveCaptionsTextView();
    sub_7AF4(&qword_D8810);
    sub_A6E80();
    iconForBundleId(_:iconSize:)(v12, v9, v11);
    swift_bridgeObjectRelease();
    sub_7AF4(&qword_D8FB8);
    return sub_A6E90();
  }
  return result;
}

uint64_t sub_363FC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_A58C0();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v10 = sub_A5DF0();
    sub_A7670();
    if (*(void *)(v4 + 16) && (unint64_t v5 = sub_85F3C((uint64_t)v11), (v6 & 1) != 0))
    {
      sub_10330(*(void *)(v4 + 56) + 32 * v5, (uint64_t)&v12);
    }
    else
    {
      long long v12 = 0u;
      long long v13 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_102DC((uint64_t)v11);
    if (*((void *)&v13 + 1))
    {
      uint64_t result = swift_dynamicCast();
      if (result)
      {
        uint64_t v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for LiveCaptionsTextView() + 24));
        uint64_t v9 = *v7;
        uint64_t v8 = v7[1];
        v11[0] = v9;
        v11[1] = v8;
        *(void *)&long long v12 = v10;
        sub_7AF4(&qword_D8FB0);
        return sub_A6E90();
      }
    }
    else
    {
      return sub_A35C((uint64_t)&v12, &qword_D92A0);
    }
  }
  return result;
}

uint64_t sub_36518()
{
  if (qword_D7E58 != -1) {
    swift_once();
  }
  if (qword_D7E48 != -1) {
    swift_once();
  }
  UIFontTextStyle v0 = textFontStyle;
  AXLTSettingsManager.contentCategory.getter();
  uint64_t v2 = v1;
  sub_A2F50((uint64_t)v0, UIFontWeightBold);

  sub_A6AC0();
  type metadata accessor for LiveCaptionsTextView();
  sub_7AF4(&qword_D8FA8);
  sub_A6E90();
  AXLTSettingsManager.buttonScaledHeight.getter();
  sub_7AF4(&qword_D8810);
  return sub_A6E90();
}

uint64_t sub_36674@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v64 = a2;
  uint64_t v3 = sub_7AF4(&qword_D8FC0);
  __chkstk_darwin(v3 - 8);
  uint64_t v65 = (uint64_t)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v63 = (uint64_t)&v50 - v6;
  uint64_t v53 = sub_A6E20();
  uint64_t v52 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v51 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_7AF4(&qword_D8FC8);
  __chkstk_darwin(v62);
  uint64_t v55 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  long long v54 = (char *)&v50 - v10;
  __chkstk_darwin(v11);
  uint64_t v56 = (uint64_t)&v50 - v12;
  uint64_t v57 = sub_7AF4(&qword_D8FD0);
  __chkstk_darwin(v57);
  uint64_t v59 = (uint64_t)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for LiveCaptionsAudioSourceCircleView(0);
  __chkstk_darwin(v58);
  uint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_7AF4(&qword_D85F8);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_7AF4(&qword_D8FD8);
  __chkstk_darwin(v19 - 8);
  uint64_t v61 = (uint64_t)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v60 = (char *)&v50 - v22;
  uint64_t v23 = sub_A5D50();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  uint64_t v26 = a1;
  v25(v18, a1, v23);
  uint64_t v27 = *(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56);
  v27(v18, 0, 1, v23);
  LOBYTE(a1) = isCaptionFromApplication(_:)((uint64_t)v18);
  sub_A35C((uint64_t)v18, &qword_D85F8);
  if (a1)
  {
    uint64_t v28 = type metadata accessor for LiveCaptionsTextView();
    uint64_t v29 = (uint64_t *)(v26 + *(int *)(v28 + 36));
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v66 = v31;
    uint64_t v67 = v30;
    sub_7AF4(&qword_D8FB8);
    sub_A6E80();
    sub_A6E00();
    uint64_t v32 = v52;
    uint64_t v33 = v51;
    uint64_t v34 = v53;
    (*(void (**)(char *, void, uint64_t))(v52 + 104))(v51, enum case for Image.ResizingMode.stretch(_:), v53);
    uint64_t v35 = sub_A6E50();
    swift_release();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v34);
    uint64_t v36 = (uint64_t *)(v26 + *(int *)(v28 + 32));
    uint64_t v38 = v36[1];
    uint64_t v66 = *v36;
    uint64_t v37 = v66;
    uint64_t v67 = v38;
    sub_7AF4(&qword_D8810);
    sub_A6E80();
    uint64_t v66 = v37;
    uint64_t v67 = v38;
    sub_A6E80();
    sub_A7030();
    sub_A6270();
    uint64_t v66 = v35;
    uint64_t v67 = 0;
    __int16 v68 = 1;
    uint64_t v69 = v74;
    char v70 = v75;
    uint64_t v71 = v76;
    char v72 = v77;
    long long v73 = v78;
    sub_7AF4(&qword_D83C0);
    sub_105D8();
    uint64_t v39 = (uint64_t)v55;
    sub_A6BC0();
    swift_release();
    uint64_t v40 = v54;
    sub_A63F0();
    sub_A35C(v39, &qword_D8FC8);
    uint64_t v41 = (uint64_t)v40;
    uint64_t v42 = v56;
    sub_382F0(v41, v56);
    sub_8860(v42, v59, &qword_D8FC8);
    swift_storeEnumTagMultiPayload();
    sub_38400(&qword_D8FE0, (void (*)(uint64_t))type metadata accessor for LiveCaptionsAudioSourceCircleView);
    sub_381E8();
    uint64_t v43 = (uint64_t)v60;
    sub_A6860();
    sub_A35C(v42, &qword_D8FC8);
  }
  else
  {
    v25(v15, v26, v23);
    v27(v15, 0, 1, v23);
    sub_38180((uint64_t)v15, v59, type metadata accessor for LiveCaptionsAudioSourceCircleView);
    swift_storeEnumTagMultiPayload();
    sub_38400(&qword_D8FE0, (void (*)(uint64_t))type metadata accessor for LiveCaptionsAudioSourceCircleView);
    sub_381E8();
    uint64_t v43 = (uint64_t)v60;
    sub_A6860();
    sub_38294((uint64_t)v15);
  }
  uint64_t v44 = v63;
  sub_36EA0(v63);
  uint64_t v45 = v61;
  sub_8860(v43, v61, &qword_D8FD8);
  uint64_t v46 = v65;
  sub_8860(v44, v65, &qword_D8FC0);
  uint64_t v47 = v64;
  sub_8860(v45, v64, &qword_D8FD8);
  uint64_t v48 = sub_7AF4(&qword_D8FF0);
  sub_8860(v46, v47 + *(int *)(v48 + 48), &qword_D8FC0);
  sub_A35C(v44, &qword_D8FC0);
  sub_A35C(v43, &qword_D8FD8);
  sub_A35C(v46, &qword_D8FC0);
  return sub_A35C(v45, &qword_D8FD8);
}

uint64_t sub_36EA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v51 = a1;
  uint64_t v3 = sub_A6740();
  uint64_t v50 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v49 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_A5920();
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_7AF4(&qword_D8FC0);
  __chkstk_darwin(v47);
  uint64_t v48 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_37428(v1, (uint64_t)v7);
  uint64_t v9 = sub_A6B50();
  uint64_t v11 = v10;
  char v13 = v12;
  uint64_t v46 = type metadata accessor for LiveCaptionsTextView();
  uint64_t v14 = (uint64_t *)(v1 + *(int *)(v46 + 24));
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v54 = v16;
  uint64_t v55 = v15;
  sub_7AF4(&qword_D8FB0);
  sub_A6E80();
  uint64_t v17 = sub_A5D10();
  uint64_t v19 = v18;
  uint64_t v20 = sub_A5D80();
  uint64_t v52 = v3;
  uint64_t v53 = v2;
  if (v17 == v20 && v19 == v21)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v22 = sub_A7800();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0) {
      goto LABEL_8;
    }
  }
  uint64_t v54 = 0x3FF0000000000000;
  if (qword_D7DF0 != -1) {
    swift_once();
  }
  [(id)qword_DF660 getRed:0 green:0 blue:0 alpha:&v54];
LABEL_8:
  sub_A6DC0();
  swift_release();
  uint64_t v23 = sub_A6AE0();
  uint64_t v25 = v24;
  char v27 = v26;
  swift_release();
  sub_10024(v9, v11, v13 & 1);
  swift_bridgeObjectRelease();
  uint64_t v28 = v46;
  uint64_t v29 = (uint64_t *)(v53 + *(int *)(v46 + 28));
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  uint64_t v54 = v31;
  uint64_t v55 = v30;
  sub_7AF4(&qword_D8FA8);
  sub_A6E80();
  uint64_t v32 = sub_A6B00();
  uint64_t v34 = v33;
  char v36 = v35;
  uint64_t v38 = v37;
  swift_release();
  v36 &= 1u;
  sub_10024(v23, v25, v27 & 1);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v54 = v32;
  uint64_t v55 = v34;
  char v56 = v36;
  uint64_t v57 = v38;
  uint64_t v58 = KeyPath;
  uint64_t v59 = 0;
  char v60 = 1;
  sub_7AF4(&qword_D8FF8);
  sub_38360();
  uint64_t v40 = (uint64_t)v48;
  sub_A6BC0();
  sub_10024(v32, v34, v36);
  swift_release();
  swift_bridgeObjectRelease();
  LODWORD(v38) = *(unsigned __int8 *)(v53 + *(int *)(v28 + 20));
  sub_7AF4(&qword_D9018);
  uint64_t v41 = v50;
  if (v38 == 1)
  {
    uint64_t v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_A9DC0;
    sub_A6710();
  }
  else
  {
    uint64_t v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_A9C60;
  }
  sub_A6700();
  uint64_t v54 = v42;
  sub_38400(&qword_D9020, (void (*)(uint64_t))&type metadata accessor for AccessibilityTraits);
  sub_7AF4(&qword_D9028);
  sub_A45C(&qword_D9030, &qword_D9028);
  uint64_t v43 = v49;
  uint64_t v44 = v52;
  sub_A7640();
  sub_A6400();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v44);
  return sub_A35C(v40, &qword_D8FC0);
}

unint64_t sub_37428@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_A6B20();
  __chkstk_darwin(v4 - 8);
  uint64_t v49 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_7AF4(&qword_D9038);
  __chkstk_darwin(v6 - 8);
  uint64_t v48 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_A5920();
  uint64_t v47 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v50 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  char v12 = (char *)&v46 - v11;
  __chkstk_darwin(v13);
  uint64_t v54 = (char *)&v46 - v14;
  uint64_t v15 = sub_A5950();
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = a1;
  unint64_t v18 = sub_A5D30();
  if (v18 >> 62) {
    goto LABEL_41;
  }
  uint64_t v19 = *(void *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFFF8));
LABEL_3:
  swift_bridgeObjectRelease();
  if (!v19)
  {
    sub_A5CE0();
    sub_A5940();
    return sub_A5930();
  }
  sub_A5900();
  unint64_t result = sub_A5D30();
  unint64_t v21 = result;
  uint64_t v46 = a2;
  if (result >> 62)
  {
    unint64_t result = sub_A7740();
    a2 = result;
    if (result) {
      goto LABEL_6;
    }
LABEL_43:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v47 + 32))(v46, v54, v8);
  }
  a2 = *(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFFF8));
  if (!a2) {
    goto LABEL_43;
  }
LABEL_6:
  if (a2 >= 1)
  {
    uint64_t v22 = 0;
    uint64_t v52 = (void (**)(char *, uint64_t))(v47 + 8);
    unint64_t v53 = v21 & 0xC000000000000001;
    uint64_t v51 = a2;
    while (1)
    {
      if (v53) {
        id v23 = (id)sub_A76A0();
      }
      else {
        id v23 = *(id *)(v21 + 8 * v22 + 32);
      }
      uint64_t v24 = v23;
      id v25 = objc_msgSend(v23, "substring", v46);
      sub_A71D0();

      sub_A5940();
      sub_A5930();
      [v24 confidence];
      if (v26 != 0.0)
      {
        [v24 confidence];
        if (v27 < 0.5)
        {
          uint64_t KeyPath = swift_getKeyPath();
          __chkstk_darwin(KeyPath);
          *(&v46 - 2) = v29;
          swift_getKeyPath();
          sub_A6B10();
          sub_A6D60();
          uint64_t v30 = v48;
          sub_A6B30();
          uint64_t v31 = sub_A6B40();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 0, 1, v31);
          sub_38450();
          sub_A58F0();
        }
      }
      sub_38400(&qword_D9040, (void (*)(uint64_t))&type metadata accessor for AttributedString);
      sub_A5910();
      unint64_t v32 = sub_A5D30();
      if (v32 >> 62) {
        uint64_t v33 = sub_A7740();
      }
      else {
        uint64_t v33 = *(void *)((char *)&dword_10 + (v32 & 0xFFFFFFFFFFFFFF8));
      }
      swift_bridgeObjectRelease();
      uint64_t v34 = v33 - 1;
      if (__OFSUB__(v33, 1))
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        uint64_t v19 = sub_A7740();
        goto LABEL_3;
      }
      unint64_t v35 = v22 + 1;
      if (v22 < v34) {
        break;
      }
      (*v52)(v12, v8);

LABEL_9:
      uint64_t v22 = v35;
      if (a2 == v35) {
        goto LABEL_43;
      }
    }
    char v36 = (char *)[v24 substringRange];
    [v24 substringRange];
    uint64_t v38 = &v36[v37];
    if (__OFADD__(v36, v37)) {
      goto LABEL_37;
    }
    a2 = (uint64_t)v17;
    uint64_t v17 = (char *)v21;
    uint64_t v39 = (uint64_t)(v38 - 1);
    if (__OFSUB__(v38, 1)) {
      goto LABEL_38;
    }
    uint64_t v40 = sub_A5D30();
    if ((v40 & 0xC000000000000001) != 0)
    {
      id v41 = (id)sub_A76A0();
    }
    else
    {
      if (v35 >= *(void *)((char *)&dword_10 + (v40 & 0xFFFFFFFFFFFFFF8))) {
        goto LABEL_39;
      }
      id v41 = *(id *)(v40 + 8 * v22 + 40);
    }
    uint64_t v42 = v41;
    swift_bridgeObjectRelease();
    if ((uint64_t)[v42 substringRange] >= v39)
    {
      id v44 = [v42 substringRange];
      if (__OFSUB__(v44, v39)) {
        goto LABEL_40;
      }
      if ((uint64_t)v44 - v39 < 2)
      {
        (*v52)(v12, v8);

        goto LABEL_32;
      }
      uint64_t v43 = v50;
    }
    else
    {
      uint64_t v43 = v50;
    }
    sub_A5900();
    sub_A5910();

    uint64_t v45 = *v52;
    (*v52)(v43, v8);
    v45(v12, v8);
LABEL_32:
    unint64_t v21 = (unint64_t)v17;
    uint64_t v17 = (char *)a2;
    a2 = v51;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_37AC0@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_A5D50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t v7 = (int *)type metadata accessor for LiveCaptionsTextView();
  *(unsigned char *)(a3 + v7[5]) = a2;
  uint64_t v8 = (void *)(a3 + v7[6]);
  if (qword_D7E58 != -1) {
    swift_once();
  }
  swift_beginAccess();
  swift_retain();
  sub_A6E70();
  *uint64_t v8 = v19;
  v8[1] = v20;
  uint64_t v9 = v7[7];
  if (qword_D7E48 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)(a3 + v9);
  UIFontTextStyle v11 = textFontStyle;
  AXLTSettingsManager.contentCategory.getter();
  uint64_t v13 = v12;
  sub_A2F50((uint64_t)v11, UIFontWeightBold);

  sub_A6AC0();
  sub_A6E70();
  *uint64_t v10 = v19;
  v10[1] = v20;
  uint64_t v14 = (void *)(a3 + v7[8]);
  double v18 = AXLTSettingsManager.buttonScaledHeight.getter();
  sub_A6E70();
  *uint64_t v14 = v19;
  v14[1] = v20;
  uint64_t v15 = (void *)(a3 + v7[9]);
  objc_msgSend(objc_allocWithZone((Class)UIImage), "init", *(void *)&v18);
  sub_384DC();
  sub_A6E70();
  *uint64_t v15 = v19;
  v15[1] = v20;
  uint64_t v16 = (uint64_t *)(a3 + v7[10]);
  *uint64_t v16 = swift_getKeyPath();
  sub_7AF4(&qword_D7E68);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_37D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LiveCaptionsTextView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_37D98()
{
  type metadata accessor for LiveCaptionsTextView();

  return sub_361C4();
}

uint64_t sub_37DFC()
{
  type metadata accessor for LiveCaptionsTextView();

  return sub_362E4();
}

unint64_t sub_37E7C()
{
  unint64_t result = qword_D8F90;
  if (!qword_D8F90)
  {
    sub_7C5C(&qword_D8F70);
    sub_A45C(&qword_D8F98, &qword_D8F68);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8F90);
  }
  return result;
}

uint64_t sub_37F20(uint64_t a1)
{
  return sub_380FC(a1, sub_363FC);
}

uint64_t sub_37F3C()
{
  uint64_t v1 = (int *)(type metadata accessor for LiveCaptionsTextView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v5 = sub_A5D50();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  uint64_t v6 = v0 + v3 + v1[12];
  sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_A6380();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_380E4(uint64_t a1)
{
  return sub_380FC(a1, (uint64_t (*)(uint64_t, uint64_t))sub_36518);
}

uint64_t sub_380FC(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for LiveCaptionsTextView() - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5);
}

uint64_t sub_38180(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_381E8()
{
  unint64_t result = qword_D8FE8;
  if (!qword_D8FE8)
  {
    sub_7C5C(&qword_D8FC8);
    sub_105D8();
    sub_38400(&qword_D83F0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D8FE8);
  }
  return result;
}

uint64_t sub_38294(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LiveCaptionsAudioSourceCircleView(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_382F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_7AF4(&qword_D8FC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_38360()
{
  unint64_t result = qword_D9000;
  if (!qword_D9000)
  {
    sub_7C5C(&qword_D8FF8);
    sub_A45C(&qword_D9008, &qword_D9010);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9000);
  }
  return result;
}

uint64_t sub_38400(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_38450()
{
  unint64_t result = qword_D9048;
  if (!qword_D9048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9048);
  }
  return result;
}

uint64_t sub_384A8()
{
  return 8;
}

uint64_t sub_384B4()
{
  return swift_release();
}

uint64_t sub_384BC(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

void *sub_384D0(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

unint64_t sub_384DC()
{
  unint64_t result = qword_D9050;
  if (!qword_D9050)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_D9050);
  }
  return result;
}

uint64_t sub_38524()
{
  return sub_A45C(&qword_D9058, &qword_D8FA0);
}

uint64_t sub_38560()
{
  sub_38600();
  uint64_t result = sub_A75E0();
  qword_DF5C8 = result;
  return result;
}

uint64_t sub_385CC()
{
  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for LTUtilities()
{
  return self;
}

unint64_t sub_38600()
{
  unint64_t result = qword_D9100;
  if (!qword_D9100)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_D9100);
  }
  return result;
}

uint64_t *AXLTCaptionsProvider.shared.unsafeMutableAddressor()
{
  if (qword_D7D98 != -1) {
    swift_once();
  }
  return &static AXLTCaptionsProvider.shared;
}

uint64_t property wrapper backing initializer of AXLTCaptionsProvider.captions()
{
  return sub_A6090();
}

uint64_t AXLTCaptionsProvider.captions.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_38748@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_387C8(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return sub_A60E0();
}

uint64_t AXLTCaptionsProvider.captions.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  return sub_A60E0();
}

void (*AXLTCaptionsProvider.captions.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_A60C0();
  return sub_38938;
}

void sub_38938(void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();

  free(v1);
}

uint64_t AXLTCaptionsProvider.$captions.getter()
{
  return swift_endAccess();
}

uint64_t AXLTCaptionsProvider.$captions.setter(uint64_t a1)
{
  uint64_t v2 = sub_7AF4(&qword_D9128);
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  swift_beginAccess();
  sub_7AF4(&qword_D9120);
  sub_A60B0();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*AXLTCaptionsProvider.$captions.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = sub_7AF4(&qword_D9128);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR___AXLTCaptionsProvider__captions;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = sub_7AF4(&qword_D9120);
  sub_A60A0();
  swift_endAccess();
  return sub_38C40;
}

void sub_38C40(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void (**)(void, void, void))(*(void *)(*(void *)a1 + 88) + 16);
  v4(*(void *)(*(void *)a1 + 104), v3[14], v3[10]);
  uint64_t v5 = (void *)v3[14];
  size_t v6 = (void *)v3[12];
  uint64_t v7 = (void *)v3[13];
  uint64_t v8 = v3[10];
  uint64_t v9 = v3[11];
  if (a2)
  {
    v4(v3[12], v3[13], v3[10]);
    swift_beginAccess();
    sub_A60B0();
    swift_endAccess();
    uint64_t v10 = *(void (**)(void *, uint64_t))(v9 + 8);
    v10(v7, v8);
    v10(v5, v8);
  }
  else
  {
    swift_beginAccess();
    sub_A60B0();
    swift_endAccess();
    (*(void (**)(void *, uint64_t))(v9 + 8))(v5, v8);
  }
  free(v5);
  free(v7);
  free(v6);

  free(v3);
}

uint64_t AXLTCaptionsProvider.isTranscribing.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___AXLTCaptionsProvider_isTranscribing);
  swift_beginAccess();
  return *v1;
}

uint64_t AXLTCaptionsProvider.isTranscribing.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR___AXLTCaptionsProvider_isTranscribing);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*AXLTCaptionsProvider.isTranscribing.modify())()
{
  return j__swift_endAccess;
}

uint64_t AXLTCaptionsProvider.activeRequestType.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___AXLTCaptionsProvider_activeRequestType;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t AXLTCaptionsProvider.activeRequestType.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___AXLTCaptionsProvider_activeRequestType);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*AXLTCaptionsProvider.activeRequestType.modify())()
{
  return j_j__swift_endAccess;
}

id sub_38F94()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for AXLTCaptionsProvider()) init];
  static AXLTCaptionsProvider.shared = (uint64_t)result;
  return result;
}

id static AXLTCaptionsProvider.shared.getter()
{
  if (qword_D7D98 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static AXLTCaptionsProvider.shared;

  return v0;
}

Swift::Void __swiftcall AXLTCaptionsProvider.activate(_:)(Swift::Bool a1)
{
  uint64_t v2 = v1;
  os_log_type_t v4 = sub_A7450();
  uint64_t v5 = (id)AXLogLiveTranscription();
  if (!v5)
  {
    __break(1u);
    goto LABEL_19;
  }
  size_t v6 = v5;
  if (os_log_type_enabled(v5, v4))
  {
    id v7 = v2;
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 67109376;
    sub_A7600();

    *(_WORD *)(v8 + 8) = 1024;
    LODWORD(v15[0]) = a1;
    sub_A7600();
    _os_log_impl(&def_5ED54, v6, v4, "CaptionsProvider activate _isActive: %{BOOL}d, isActive = %{BOOL}d", (uint8_t *)v8, 0xEu);
    swift_slowDealloc();
  }

  if (*((unsigned char *)v2 + OBJC_IVAR___AXLTCaptionsProvider__isActive) != a1)
  {
    *((unsigned char *)v2 + OBJC_IVAR___AXLTCaptionsProvider__isActive) = a1;
    if (a1)
    {
      if (qword_D7DB0 != -1) {
        swift_once();
      }
      uint64_t v9 = static LiveSpeechCaptionsCallManager.shared;
      uint64_t v10 = OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_observers;
      if ((objc_msgSend(*(id *)(static LiveSpeechCaptionsCallManager.shared+ OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_observers), "containsObject:", v2, v15[0]) & 1) == 0)objc_msgSend(*(id *)(v9 + v10), "addObject:", v2); {
      if (!*(void *)(v9 + OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_callCenter))
      }
        sub_8AA58();
      AXLTCaptionsProvider.startTranscribing()();
      return;
    }
    if (qword_D7DB0 != -1) {
      swift_once();
    }
    sub_87AFC(v2, static LiveSpeechCaptionsCallManager.shared);
    AXLTCaptionsProvider.stopTranscribing()();
    sub_A7420();
    id v11 = (id)AXLogLiveTranscription();
    if (v11)
    {
      char v12 = v11;
      sub_A5FD0();

      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t v13 = (void (*)(void *, void))sub_A60C0();
      *uint64_t v14 = &_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      v13(v15, 0);
      swift_release();
      swift_release();
      sub_3C738(0, 0);
      return;
    }
LABEL_19:
    __break(1u);
  }
}

Swift::Void __swiftcall AXLTCaptionsProvider.startTranscribing()()
{
  os_log_type_t v1 = sub_A7450();
  uint64_t v2 = (id)AXLogLiveTranscription();
  if (v2)
  {
    uint64_t v3 = v2;
    if (os_log_type_enabled(v2, v1))
    {
      os_log_type_t v4 = v0;
      uint64_t v5 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 67109376;
      sub_A7600();

      *(_WORD *)(v5 + 8) = 1024;
      if (qword_D7E58 != -1) {
        swift_once();
      }
      swift_beginAccess();
      sub_A7600();
      _os_log_impl(&def_5ED54, v3, v1, "CaptionsProvider startTranscribing _isActive: %{BOOL}d isPaused: %{BOOL}d", (uint8_t *)v5, 0xEu);
      swift_slowDealloc();
    }

    if (v0[OBJC_IVAR___AXLTCaptionsProvider__isActive] == 1)
    {
      if (qword_D7E58 != -1) {
        swift_once();
      }
      size_t v6 = (unsigned char *)(static AXLTSettingsManager.shared + OBJC_IVAR___AXLTSettingsManager_isPaused);
      swift_beginAccess();
      if ((*v6 & 1) == 0)
      {
        if (qword_D7DB0 != -1) {
          swift_once();
        }
        swift_getKeyPath();
        swift_getKeyPath();
        sub_A60D0();
        swift_release();
        swift_release();
        if (v12 > 0)
        {
          id v7 = &v0[OBJC_IVAR___AXLTCaptionsProvider_activeRequestType];
          BOOL v9 = 1;
          swift_beginAccess();
          *(void *)id v7 = 1;
          uint64_t v11 = -2;
        }
        else
        {
          swift_getKeyPath();
          swift_getKeyPath();
          sub_A60D0();
          swift_release();
          swift_release();
          uint64_t v8 = (unsigned char *)(static AXLTSettingsManager.shared + OBJC_IVAR___AXLTSettingsManager_isMicOn);
          swift_beginAccess();
          BOOL v9 = (*v8 & 1) == 0;
          uint64_t v10 = (BOOL *)&v0[OBJC_IVAR___AXLTCaptionsProvider_activeRequestType];
          swift_beginAccess();
          *uint64_t v10 = v9;
          uint64_t v11 = -1;
        }
        *(void *)&v0[OBJC_IVAR___AXLTCaptionsProvider_activePid] = v11;
        AXLTCaptionsProvider.startTranscribing(_:_:)(v9, v11);
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void AXLTCaptionsProvider.startTranscribing(_:_:)(uint64_t a1, uint64_t a2)
{
  os_log_type_t v5 = sub_A7450();
  size_t v6 = (id)AXLogLiveTranscription();
  if (!v6) {
LABEL_17:
  }
    __break(1u);
  id v7 = v6;
  if (os_log_type_enabled(v6, v5))
  {
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 134218240;
    sub_A7600();
    *(_WORD *)(v8 + 12) = 2048;
    long long aBlock = (void **)a2;
    sub_A7600();
    _os_log_impl(&def_5ED54, v7, v5, "startTranscribing for type: %ld, pid: %ld", (uint8_t *)v8, 0x16u);
    swift_slowDealloc();
  }

  BOOL v9 = &v2[OBJC_IVAR___AXLTCaptionsProvider_activeRequestType];
  swift_beginAccess();
  *(void *)BOOL v9 = a1;
  *(void *)&v2[OBJC_IVAR___AXLTCaptionsProvider_activePid] = a2;
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v10 = *(void **)&v2[OBJC_IVAR___AXLTCaptionsProvider_transcription];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v2;
  uint64_t v34 = sub_422E0;
  uint64_t v35 = v11;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v31 = 1107296256;
  unint64_t v32 = sub_3B090;
  uint64_t v33 = &unk_D01B0;
  uint64_t v12 = _Block_copy(&aBlock);
  uint64_t v13 = v2;
  swift_release();
  uint64_t v34 = (uint64_t (*)(void *))LiveSpeechStore.SpeechContext.init(text:highlightRange:);
  uint64_t v35 = 0;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v31 = 1107296256;
  unint64_t v32 = sub_3B090;
  uint64_t v33 = &unk_D01D8;
  uint64_t v14 = _Block_copy(&aBlock);
  long long aBlock = 0;
  unsigned int v15 = [v10 startTranscribing:a1 targetPID:a2 callbackBlock:v12 audioInfoBlock:v14 error:&aBlock];
  _Block_release(v14);
  _Block_release(v12);
  uint64_t v16 = aBlock;
  if (v15)
  {
    uint64_t v17 = &v13[OBJC_IVAR___AXLTCaptionsProvider_isTranscribing];
    swift_beginAccess();
    *uint64_t v17 = 1;
    if (!*(void *)v9)
    {
      uint64_t v18 = OBJC_IVAR___AXLTCaptionsProvider_audioSessionSubscribed;
      if ((v13[OBJC_IVAR___AXLTCaptionsProvider_audioSessionSubscribed] & 1) == 0)
      {
        id v19 = [self defaultCenter];
        id v20 = [self sharedInstance];
        [v19 addObserver:v13 selector:"handleAudioSessionInterruptionWithNotification:" name:AVAudioSessionInterruptionNotification object:v20];

        v13[v18] = 1;
      }
      uint64_t v21 = OBJC_IVAR___AXLTCaptionsProvider_audioSessionResetSubscribed;
      if ((v13[OBJC_IVAR___AXLTCaptionsProvider_audioSessionResetSubscribed] & 1) == 0)
      {
        id v22 = [self defaultCenter];
        id v23 = [self sharedInstance];
        [v22 addObserver:v13 selector:"handleAudioSessionResetWithNotification:" name:AVAudioSessionMediaServicesWereResetNotification object:v23];

        v13[v21] = 1;
      }
    }
    id v24 = [objc_allocWithZone((Class)NSNumber) initWithInt:1057];
    UIAccessibilityNotifications v25 = [v24 unsignedIntValue];

    id v26 = [self sharedApplication];
    UIAccessibilityPostNotification(v25, v26);
  }
  else
  {
    float v27 = v16;
    sub_A5980();

    swift_willThrow();
    sub_A7430();
    id v28 = (id)AXLogLiveTranscription();
    if (v28)
    {
      uint64_t v29 = v28;
      sub_A5FD0();

      swift_errorRelease();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_39C30(void *a1, Class a2)
{
  int v132 = a1;
  uint64_t v3 = sub_7AF4(&qword_D85F8);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  size_t v6 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v113 - v7;
  uint64_t v9 = sub_A5E10();
  uint64_t v125 = *(void *)(v9 - 8);
  uint64_t v126 = v9;
  __chkstk_darwin(v9);
  uint64_t v124 = (char *)&v113 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_A5A10();
  uint64_t v122 = *(void *)(v11 - 8);
  uint64_t v123 = v11;
  __chkstk_darwin(v11);
  char v121 = (char *)&v113 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_A5D50();
  uint64_t v128 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (objc_class *)((char *)&v113 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = __chkstk_darwin(v14);
  id v19 = (__objc2_ivar *)((char *)&v113 - v18);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v127 = (char *)&v113 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v131 = (char *)&v113 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v118 = (uint64_t)&v113 - v25;
  __chkstk_darwin(v24);
  uint64_t v119 = (char *)&v113 - v26;
  os_log_type_t v27 = sub_A7420();
  uint64_t result = (uint64_t)(id)AXLogLiveTranscription();
  if (!result) {
    goto LABEL_55;
  }
  uint64_t v29 = result;
  unint64_t v30 = v27;
  BOOL v31 = os_log_type_enabled((os_log_t)result, v27);
  Class v129 = a2;
  uint64_t v130 = v13;
  int v120 = v8;
  int v115 = v19;
  uint64_t v114 = v16;
  uint64_t v116 = v6;
  if (v31)
  {
    a2 = v132;
    unint64_t v32 = (uint8_t *)swift_slowAlloc();
    v133[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v32 = 136315138;
    id v33 = [(objc_class *)a2 transcribedText];
    uint64_t v34 = sub_A71D0();
    unint64_t v36 = v35;

    Class v37 = v129;
    v133[4] = sub_15F94(v34, v36, v133);
    sub_A7600();
    swift_bridgeObjectRelease();

    _os_log_impl(&def_5ED54, v29, v27, "Transcribed data: %s", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    Class v37 = a2;
  }
  uint64_t v38 = OBJC_IVAR___AXLTCaptionsProvider_placeholderTimer;
  uint64_t v39 = *(void **)((char *)v37 + OBJC_IVAR___AXLTCaptionsProvider_placeholderTimer);
  uint64_t v40 = &stru_D6000;
  if (!v39)
  {
    uint64_t v29 = sub_A7420();
    uint64_t result = (uint64_t)(id)AXLogLiveTranscription();
    if (!result)
    {
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    id v41 = (void *)result;
    sub_A5FD0();

    uint64_t v39 = *(void **)((char *)v37 + v38);
  }
  [v39 invalidate];
  uint64_t v42 = self;
  sub_A5E40();
  id v43 = objc_msgSend(v42, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", v37, "addPlaceholder", 0, 0);
  id v44 = *(void **)((char *)v37 + v38);
  *(void *)((char *)v37 + v38) = v43;

  id v45 = [v132 transcribedText];
  sub_A71D0();

  uint64_t v46 = sub_A7220();
  swift_bridgeObjectRelease();
  if (!v46)
  {
    *((unsigned char *)v37 + OBJC_IVAR___AXLTCaptionsProvider_newCaption) = 1;
    sub_A7420();
    uint64_t result = (uint64_t)(id)AXLogLiveTranscription();
    if (result)
    {
      uint64_t v59 = (void *)result;
      sub_A5FD0();

      return (uint64_t)sub_3BD60(v132);
    }
    goto LABEL_58;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  uint64_t v47 = *(void *)(v133[0] + 16);
  swift_bridgeObjectRelease();
  if (!v47) {
    goto LABEL_19;
  }
  swift_getKeyPath();
  uint64_t KeyPath = (void (*)(uint64_t *, void))swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  unint64_t v49 = *(void *)(v133[0] + 16);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  if (!v49)
  {
    __break(1u);
    goto LABEL_45;
  }
  uint64_t KeyPath = (void (*)(uint64_t *, void))v133[0];
  if (v49 > *(void *)(v133[0] + 16))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  unint64_t v50 = v49 - 1;
  uint64_t v51 = v128;
  uint64_t v52 = v119;
  uint64_t v53 = v130;
  (*(void (**)(char *, unint64_t, uint64_t))(v128 + 16))(v119, v133[0]+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(void *)(v128 + 72) * v50, v130);
  swift_bridgeObjectRelease();
  uint64_t v54 = sub_A5D10();
  uint64_t v56 = v55;
  uint64_t v57 = *(void (**)(char *, uint64_t))(v51 + 8);
  v57(v52, v53);
  if (v54 == sub_A5D80() && v56 == v58)
  {
    swift_bridgeObjectRelease_n();
LABEL_18:
    swift_getKeyPath();
    swift_getKeyPath();
    sub_A60D0();
    swift_release();
    swift_release();
    uint64_t v61 = *(void *)(v133[0] + 16);
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v62 = (void (*)(uint64_t *, void))sub_A60C0();
    uint64_t v63 = v118;
    sub_3AF34(v61 - 1, v118);
    v57((char *)v63, v130);
    v62(v133, 0);
    swift_release();
    swift_release();
    goto LABEL_19;
  }
  char v60 = sub_A7800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v60) {
    goto LABEL_18;
  }
LABEL_19:
  uint64_t v64 = OBJC_IVAR___AXLTCaptionsProvider_captionsID;
  uint64_t v119 = *(char **)((char *)v37 + OBJC_IVAR___AXLTCaptionsProvider_captionsID);
  uint64_t v65 = v132;
  id v66 = [v132 appID];
  uint64_t v118 = sub_A71D0();
  uint64_t v117 = v67;

  id v68 = [v65 appName];
  sub_A71D0();
  char v70 = v69;

  uint64_t v71 = self;
  id v72 = [v65 timestamp];
  long long v73 = v121;
  sub_A59F0();

  Class isa = sub_A59E0().super.isa;
  (*(void (**)(char *, uint64_t))(v122 + 8))(v73, v123);
  id v75 = [v71 dateToString:isa];

  sub_A71D0();
  id v76 = [v65 transcribedText];
  char v77 = (void (*)(uint64_t *, void))sub_A71D0();
  unint64_t v79 = v78;

  id v80 = [v65 transcription];
  id v81 = [v80 segments];

  sub_11C10(0, &qword_D92C0);
  sub_A72B0();

  Class v37 = v129;
  uint64_t v82 = v124;
  (*(void (**)(char *, void, uint64_t))(v125 + 104))(v124, enum case for AXLTCaptionActionsType.AXLTCaptionActionsNone(_:), v126);
  sub_A5CC0();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  uint64_t v83 = *(void *)(v133[0] + 16);
  swift_bridgeObjectRelease();
  if (!v83 || *((unsigned char *)v37 + OBJC_IVAR___AXLTCaptionsProvider_newCaption) == 1)
  {
    uint64_t v84 = *(void *)((char *)v37 + v64);
    BOOL v85 = __OFADD__(v84, 1);
    uint64_t v86 = v84 + 1;
    uint64_t v87 = v130;
    if (v85)
    {
      __break(1u);
    }
    else
    {
      *(void *)((char *)v37 + v64) = v86;
      uint64_t v82 = *(char **)(v128 + 16);
      ((void (*)(char *, char *, uint64_t))v82)(v127, v131, v87);
      swift_getKeyPath();
      swift_getKeyPath();
      char v77 = (void (*)(uint64_t *, void))sub_A60C0();
      char v70 = v88;
      unint64_t v79 = *v88;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *char v70 = v79;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_23;
      }
    }
    unint64_t v79 = sub_41DE8(0, *(void *)(v79 + 16) + 1, 1, v79);
    *char v70 = v79;
LABEL_23:
    unint64_t v91 = *(void *)(v79 + 16);
    unint64_t v90 = *(void *)(v79 + 24);
    if (v91 >= v90 >> 1)
    {
      unint64_t v79 = sub_41DE8(v90 > 1, v91 + 1, 1, v79);
      *char v70 = v79;
    }
    *(void *)(v79 + 16) = v91 + 1;
    uint64_t v92 = v128;
    unint64_t v93 = v79
        + ((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80))
        + *(void *)(v92 + 72) * v91;
    uint64_t v94 = v130;
    (*(void (**)(unint64_t, char *, uint64_t))(v128 + 32))(v93, v127, v130);
    v77(v133, 0);
    swift_release();
    swift_release();
    Class v37 = v129;
    *((unsigned char *)v129 + OBJC_IVAR___AXLTCaptionsProvider_newCaption) = 0;
    uint64_t v95 = (uint64_t)v120;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v92 + 56))(v120, 1, 1, v94);
    uint64_t v96 = (uint64_t)v37 + OBJC_IVAR___AXLTCaptionsProvider_lastFinalCaption;
    swift_beginAccess();
    sub_42300(v95, v96);
    swift_endAccess();
    sub_A7420();
    uint64_t result = (uint64_t)(id)AXLogLiveTranscription();
    if (result)
    {
      uint64_t v97 = (void *)result;
      sub_A5FD0();

      sub_3D668();
LABEL_41:
      uint64_t v111 = v131;
      ((void (*)(uint64_t, char *, uint64_t))v82)(v95, v131, v94);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v92 + 56))(v95, 0, 1, v94);
      uint64_t v112 = (uint64_t)v37 + OBJC_IVAR___AXLTCaptionsProvider_currentCaption;
      swift_beginAccess();
      sub_42300(v95, v112);
      swift_endAccess();
      return (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v111, v94);
    }
    goto LABEL_56;
  }
  uint64_t v98 = (uint64_t)v37 + OBJC_IVAR___AXLTCaptionsProvider_lastFinalCaption;
  swift_beginAccess();
  uint64_t v99 = (uint64_t)v116;
  sub_423B4(v98, (uint64_t)v116);
  uint64_t v100 = v128;
  uint64_t v101 = v130;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48))(v99, 1, v130) == 1)
  {
    sub_A35C(v99, &qword_D85F8);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_A60D0();
    swift_release();
    swift_release();
    Class v37 = *(Class *)(v133[0] + 16);
    swift_bridgeObjectRelease();
    a2 = (Class)sub_A5CE0();
    unint64_t v49 = v102;
    swift_getKeyPath();
    uint64_t KeyPath = (void (*)(uint64_t *, void))swift_getKeyPath();
    uint64_t v29 = sub_A60C0();
    uint64_t v40 = (__objc2_ivar *)v103;
    unint64_t v30 = *v103;
    char v104 = swift_isUniquelyReferenced_nonNull_native();
    v40->offs = (int32_t *)v30;
    if (v104)
    {
      if (v37) {
        goto LABEL_30;
      }
LABEL_47:
      __break(1u);
LABEL_48:
      unint64_t v49 = sub_42164(v49);
      v29->Class isa = (Class)v49;
      if (!v30) {
        goto LABEL_49;
      }
      goto LABEL_37;
    }
LABEL_46:
    unint64_t v30 = sub_42164(v30);
    v40->offs = (int32_t *)v30;
    if (v37)
    {
LABEL_30:
      if ((unint64_t)v37 <= *(void *)(v30 + 16))
      {
        int v132 = (void *)((*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80));
        sub_A5CF0();
        ((void (*)(uint64_t *, void))v29)(v133, 0);
        swift_release();
        swift_release();
        swift_getKeyPath();
        swift_getKeyPath();
        sub_A60D0();
        swift_release();
        swift_release();
        a2 = *(Class *)(v133[0] + 16);
        swift_bridgeObjectRelease();
        sub_A5D30();
        swift_getKeyPath();
        swift_getKeyPath();
        unint64_t v49 = sub_A60C0();
        unint64_t v30 = (unint64_t)v105;
        uint64_t v29 = *v105;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        *(void *)unint64_t v30 = v29;
        if (result)
        {
          uint64_t v92 = v128;
          if (a2) {
            goto LABEL_33;
          }
          goto LABEL_53;
        }
LABEL_52:
        uint64_t result = sub_42164((unint64_t)v29);
        uint64_t v29 = result;
        *(void *)unint64_t v30 = result;
        uint64_t v92 = v128;
        if (a2)
        {
LABEL_33:
          if (a2 <= v29[2].isa)
          {
            sub_A5D40();
            ((void (*)(uint64_t *, void))v49)(v133, 0);
            swift_release();
            swift_release();
            Class v37 = v129;
            uint64_t v94 = v130;
            goto LABEL_39;
          }
          goto LABEL_54;
        }
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
      goto LABEL_50;
    }
    goto LABEL_47;
  }
  uint64_t v40 = v115;
  (*(void (**)(__objc2_ivar *, uint64_t, uint64_t))(v100 + 32))(v115, v99, v101);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  unint64_t v30 = *(void *)(v133[0] + 16);
  swift_bridgeObjectRelease();
  a2 = v114;
  sub_A5D70();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t KeyPath = (void (*)(uint64_t *, void))sub_A60C0();
  uint64_t v29 = v106;
  unint64_t v49 = *v106;
  char v107 = swift_isUniquelyReferenced_nonNull_native();
  v29->Class isa = (Class)v49;
  if ((v107 & 1) == 0) {
    goto LABEL_48;
  }
  if (!v30)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
LABEL_37:
  if (v30 > *(void *)(v49 + 16))
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  unint64_t v108 = v30 - 1;
  uint64_t v92 = v128;
  unint64_t v109 = v49
       + ((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80))
       + *(void *)(v128 + 72) * v108;
  uint64_t v94 = v130;
  (*(void (**)(unint64_t, Class, uint64_t))(v128 + 40))(v109, a2, v130);
  KeyPath(v133, 0);
  swift_release();
  swift_release();
  (*(void (**)(__objc2_ivar *, uint64_t))(v92 + 8))(v40, v94);
LABEL_39:
  sub_A7420();
  uint64_t result = (uint64_t)(id)AXLogLiveTranscription();
  uint64_t v95 = (uint64_t)v120;
  if (result)
  {
    uint64_t v110 = (void *)result;
    sub_A5FD0();

    uint64_t v82 = *(char **)(v92 + 16);
    goto LABEL_41;
  }
LABEL_59:
  __break(1u);
  return result;
}

uint64_t sub_3AE50(unint64_t a1)
{
  unint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0)
  {
    unint64_t v3 = sub_42178(v3);
    unint64_t *v1 = v3;
  }
  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = v5 + 8 * a1;
      uint64_t v10 = *(void *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(void *)(v5 + 16) = v7;
      sub_A72C0();
      return v10;
    }
  }
  uint64_t result = sub_A7790();
  __break(1u);
  return result;
}

uint64_t sub_3AF34@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v5 = sub_42164(v5);
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v7 = v6 - 1;
  uint64_t v8 = sub_A5D50();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  unint64_t v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v10 * a1;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v9 + 32))(a2, v11, v8);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    uint64_t result = sub_A7790();
    __break(1u);
    return result;
  }
  if (v10 > 0 || v11 >= v11 + v10 + v10 * (v7 - a1))
  {
    uint64_t result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v10)
  {
    uint64_t result = swift_arrayInitWithTakeBackToFront();
  }
  *(void *)(v5 + 16) = v7;
  unint64_t *v2 = v5;
  return result;
}

Swift::Void __swiftcall AXLTCaptionsProvider.stopTranscribing()()
{
  uint64_t v1 = sub_7AF4(&qword_D85F8);
  __chkstk_darwin(v1 - 8);
  unint64_t v3 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v4 = sub_A7420();
  unint64_t v5 = (id)AXLogLiveTranscription();
  if (!v5) {
LABEL_18:
  }
    __break(1u);
  unint64_t v6 = v5;
  if (os_log_type_enabled(v5, v4))
  {
    unint64_t v7 = v0;
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 134217984;
    uint64_t v9 = &v7[OBJC_IVAR___AXLTCaptionsProvider_activeRequestType];
    swift_beginAccess();
    uint64_t v39 = *(void *)v9;
    sub_A7600();

    _os_log_impl(&def_5ED54, v6, v4, "stopTranscribing for type = %ld", v8, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v10 = OBJC_IVAR___AXLTCaptionsProvider_audioSessionResetSubscribed;
  if (v0[OBJC_IVAR___AXLTCaptionsProvider_audioSessionResetSubscribed] == 1)
  {
    id v11 = [self defaultCenter];
    id v12 = [self sharedInstance];
    [v11 removeObserver:v0 name:AVAudioSessionMediaServicesWereResetNotification object:v12];

    v0[v10] = 0;
  }
  uint64_t v13 = *(void **)&v0[OBJC_IVAR___AXLTCaptionsProvider_transcription];
  uint64_t v14 = &v0[OBJC_IVAR___AXLTCaptionsProvider_activeRequestType];
  swift_beginAccess();
  uint64_t v15 = *(void *)&v0[OBJC_IVAR___AXLTCaptionsProvider_activePid];
  if (v15 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v15 > 0x7FFFFFFF)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v16 = *(void *)v14;
  id v38 = 0;
  unsigned int v17 = objc_msgSend(v13, "stopTranscribing:targetPID:error:", v16);
  id v18 = v38;
  if (v17)
  {
    id v19 = &v0[OBJC_IVAR___AXLTCaptionsProvider_isTranscribing];
    swift_beginAccess();
    *id v19 = 0;
    uint64_t v20 = sub_A5D50();
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
    v21(v3, 1, 1, v20);
    uint64_t v22 = (uint64_t)&v0[OBJC_IVAR___AXLTCaptionsProvider_lastFinalCaption];
    swift_beginAccess();
    id v23 = v18;
    sub_42300((uint64_t)v3, v22);
    swift_endAccess();
    v21(v3, 1, 1, v20);
    uint64_t v24 = (uint64_t)&v0[OBJC_IVAR___AXLTCaptionsProvider_currentCaption];
    swift_beginAccess();
    sub_42300((uint64_t)v3, v24);
    swift_endAccess();
    v0[OBJC_IVAR___AXLTCaptionsProvider_newCaption] = 1;
    uint64_t v25 = OBJC_IVAR___AXLTCaptionsProvider_placeholderTimer;
    uint64_t v26 = *(void **)&v0[OBJC_IVAR___AXLTCaptionsProvider_placeholderTimer];
    if (v26)
    {
LABEL_12:
      [v26 invalidate];
      uint64_t v29 = self;
      sub_A5E40();
      id v30 = objc_msgSend(v29, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", v0, "addPlaceholder", 0, 0);
      BOOL v31 = *(void **)&v0[v25];
      *(void *)&v0[v25] = v30;

LABEL_15:
      id v35 = [objc_allocWithZone((Class)NSNumber) initWithInt:1057];
      UIAccessibilityNotifications v36 = [v35 unsignedIntValue];

      UIAccessibilityPostNotification(v36, 0);
      return;
    }
    sub_A7420();
    id v27 = (id)AXLogLiveTranscription();
    if (v27)
    {
      id v28 = v27;
      sub_A5FD0();

      uint64_t v26 = *(void **)&v0[v25];
      goto LABEL_12;
    }
  }
  else
  {
    id v32 = v38;
    sub_A5980();

    swift_willThrow();
    sub_A7430();
    id v33 = (id)AXLogLiveTranscription();
    if (v33)
    {
      uint64_t v34 = v33;
      sub_A5FD0();

      swift_errorRelease();
      goto LABEL_15;
    }
    __break(1u);
  }
  __break(1u);
}

char *sub_3B64C()
{
  uint64_t v1 = sub_7AF4(&qword_D9120);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  os_log_type_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = &v0[OBJC_IVAR___AXLTCaptionsProvider__captions];
  uint64_t v26 = _swiftEmptyArrayStorage;
  unint64_t v6 = v0;
  sub_7AF4(&qword_D9110);
  sub_A6090();
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v5, v4, v1);
  v6[OBJC_IVAR___AXLTCaptionsProvider_isTranscribing] = 0;
  if (qword_D7E58 != -1) {
    swift_once();
  }
  unint64_t v7 = (unsigned char *)(static AXLTSettingsManager.shared + OBJC_IVAR___AXLTSettingsManager_isMicOn);
  swift_beginAccess();
  *(void *)&v6[OBJC_IVAR___AXLTCaptionsProvider_activeRequestType] = (*v7 & 1) == 0;
  *(void *)&v6[OBJC_IVAR___AXLTCaptionsProvider_activePid] = -1;
  uint64_t v8 = OBJC_IVAR___AXLTCaptionsProvider_transcription;
  *(void *)&v6[v8] = [objc_allocWithZone((Class)AXLTLiveTranscription) init];
  v6[OBJC_IVAR___AXLTCaptionsProvider_newCaption] = 1;
  uint64_t v9 = &v6[OBJC_IVAR___AXLTCaptionsProvider_lastFinalCaption];
  uint64_t v10 = sub_A5D50();
  id v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  v11(v9, 1, 1, v10);
  v11(&v6[OBJC_IVAR___AXLTCaptionsProvider_currentCaption], 1, 1, v10);
  uint64_t v12 = OBJC_IVAR___AXLTCaptionsProvider_dateFormatter;
  *(void *)&v6[v12] = [objc_allocWithZone((Class)NSDateFormatter) init];
  *(void *)&v6[OBJC_IVAR___AXLTCaptionsProvider_unlockedCaptions] = _swiftEmptyArrayStorage;
  *(void *)&v6[OBJC_IVAR___AXLTCaptionsProvider_placeholderTimer] = 0;
  *(void *)&v6[OBJC_IVAR___AXLTCaptionsProvider_cleanHistoryTimer] = 0;
  v6[OBJC_IVAR___AXLTCaptionsProvider_audioSessionSubscribed] = 0;
  v6[OBJC_IVAR___AXLTCaptionsProvider_audioSessionResetSubscribed] = 0;
  uint64_t v13 = OBJC_IVAR___AXLTCaptionsProvider_lockScreenObserver;
  *(void *)&v6[v13] = [objc_allocWithZone((Class)AXLTLockScreenObserver) init];
  *(void *)&v6[OBJC_IVAR___AXLTCaptionsProvider_captionsID] = 0;
  v6[OBJC_IVAR___AXLTCaptionsProvider__isActive] = 0;

  uint64_t v14 = (objc_class *)type metadata accessor for AXLTCaptionsProvider();
  v25.receiver = v6;
  v25.super_class = v14;
  uint64_t v15 = (char *)objc_msgSendSuper2(&v25, "init");
  uint64_t v16 = *(void **)&v15[OBJC_IVAR___AXLTCaptionsProvider_dateFormatter];
  unsigned int v17 = v15;
  id v18 = v16;
  NSString v19 = sub_A71A0();
  [v18 setDateFormat:v19];

  [*(id *)&v17[OBJC_IVAR___AXLTCaptionsProvider_lockScreenObserver] setDelegate:v17];
  uint64_t v20 = self;
  sub_A5E50();
  id v21 = objc_msgSend(v20, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", v17, "cleanOldestCaptionsIfNeeded", 0, 1);
  uint64_t v22 = *(void **)&v17[OBJC_IVAR___AXLTCaptionsProvider_cleanHistoryTimer];
  *(void *)&v17[OBJC_IVAR___AXLTCaptionsProvider_cleanHistoryTimer] = v21;

  sub_3C738(0, 0);
  return v17;
}

id AXLTCaptionsProvider.__deallocating_deinit()
{
  if (qword_D7DB0 != -1) {
    swift_once();
  }
  uint64_t v1 = static LiveSpeechCaptionsCallManager.shared;
  uint64_t v2 = v0;
  sub_87AFC(v2, v1);

  AXLTCaptionsProvider.stopTranscribing()();
  uint64_t v3 = OBJC_IVAR___AXLTCaptionsProvider_placeholderTimer;
  [*(id *)&v2[OBJC_IVAR___AXLTCaptionsProvider_placeholderTimer] invalidate];
  os_log_type_t v4 = *(void **)&v2[v3];
  *(void *)&v2[v3] = 0;

  unint64_t v5 = *(void **)&v2[OBJC_IVAR___AXLTCaptionsProvider_cleanHistoryTimer];
  if (v5) {
    [v5 invalidate];
  }
  uint64_t v6 = OBJC_IVAR___AXLTCaptionsProvider_audioSessionSubscribed;
  if (v2[OBJC_IVAR___AXLTCaptionsProvider_audioSessionSubscribed] == 1)
  {
    id v7 = [self defaultCenter];
    id v8 = [self sharedInstance];
    [v7 removeObserver:v2 name:AVAudioSessionInterruptionNotification object:v8];

    v2[v6] = 0;
  }
  uint64_t v9 = OBJC_IVAR___AXLTCaptionsProvider_audioSessionResetSubscribed;
  if (v2[OBJC_IVAR___AXLTCaptionsProvider_audioSessionResetSubscribed] == 1)
  {
    id v10 = [self defaultCenter];
    id v11 = [self sharedInstance];
    [v10 removeObserver:v2 name:AVAudioSessionMediaServicesWereResetNotification object:v11];

    v2[v9] = 0;
  }
  v13.receiver = v2;
  v13.super_class = (Class)type metadata accessor for AXLTCaptionsProvider();
  return objc_msgSendSuper2(&v13, "dealloc");
}

NSObject *sub_3BD60(void *a1)
{
  uint64_t result = [a1 downloadProgress];
  if (result == -2) {
    return result;
  }
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0xE000000000000000;
  if ([a1 downloadProgress] == (id)-1)
  {
    uint64_t v20 = sub_A5D60();
LABEL_10:
    *(void *)(v4 + 16) = v20;
    *(void *)(v4 + 24) = v21;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if ([a1 downloadProgress] != &stru_20.flags)
  {
    sub_7AF4(&qword_D9290);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_A9DC0;
    uint64_t v23 = sub_A5D60();
    uint64_t v25 = v24;
    *(void *)(v22 + 56) = &type metadata for String;
    *(void *)(v22 + 64) = sub_42E18();
    *(void *)(v22 + 32) = v23;
    *(void *)(v22 + 40) = v25;
    id v26 = [a1 downloadProgress];
    *(void *)(v22 + 96) = &type metadata for Int;
    *(void *)(v22 + 104) = &protocol witness table for Int;
    *(void *)(v22 + 72) = v26;
    uint64_t v20 = sub_A71E0();
    goto LABEL_10;
  }
  *(void *)(v4 + 16) = sub_A5D60();
  *(void *)(v4 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = self;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v1;
  *(void *)(v7 + 24) = v4;
  aBlock[4] = (uint64_t)sub_42EAC;
  aBlock[5] = v7;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1684C;
  aBlock[3] = (uint64_t)&unk_D02A0;
  id v8 = _Block_copy(aBlock);
  id v9 = v1;
  swift_retain();
  swift_release();
  id v10 = [v6 scheduledTimerWithTimeInterval:0 repeats:v8 block:2.0];
  _Block_release(v8);

  os_log_type_t v11 = sub_A7420();
  uint64_t result = (id)AXLogLiveTranscription();
  if (!result)
  {
LABEL_17:
    __break(1u);
    return result;
  }
  uint64_t v12 = result;
  os_log_type_t v13 = v11;
  if (os_log_type_enabled(result, v11))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    buf = v14;
    id v15 = [self currentThread];
    id v16 = [v15 description];
    uint64_t v17 = sub_A71D0();
    unint64_t v19 = v18;

    aBlock[7] = sub_15F94(v17, v19, aBlock);
    sub_A7600();
    swift_bridgeObjectRelease();
    _os_log_impl(&def_5ED54, v12, v13, "Timer: %s", buf, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

LABEL_11:
  os_log_type_t v27 = sub_A7420();
  uint64_t result = (id)AXLogLiveTranscription();
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }
  id v28 = result;
  os_log_type_t v29 = v27;
  if (os_log_type_enabled(result, v27))
  {
    swift_retain();
    id v30 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)id v30 = 136315138;
    swift_beginAccess();
    uint64_t v32 = *(void *)(v4 + 16);
    unint64_t v31 = *(void *)(v4 + 24);
    swift_bridgeObjectRetain();
    void aBlock[6] = sub_15F94(v32, v31, aBlock);
    sub_A7600();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&def_5ED54, v28, v29, "progress %s", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  unint64_t v34 = *(void *)(v4 + 16);
  unint64_t v33 = *(void *)(v4 + 24);
  swift_bridgeObjectRetain();
  sub_3C738(v34, v33);
  swift_bridgeObjectRelease();
  return swift_release();
}

id sub_3C2C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a3;
  uint64_t v3 = sub_A5D50();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  unint64_t v34 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v8 = (char *)&v31 - v7;
  sub_A7420();
  id result = (id)AXLogLiveTranscription();
  if (!result) {
    goto LABEL_21;
  }
  id v10 = result;
  sub_A5FD0();

  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  uint64_t v11 = *(void *)(v36 + 16);
  id result = (id)swift_bridgeObjectRelease();
  if (!v11) {
    return result;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  unint64_t v12 = *(void *)(v36 + 16);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  id result = (id)swift_release();
  if (!v12)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v12 > *(void *)(v36 + 16))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v33 = *(void *)(v4 + 72);
  uint64_t v14 = v36 + v13 + v33 * (v12 - 1);
  id v15 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v15(v8, v14, v3);
  swift_bridgeObjectRelease();
  uint64_t v16 = sub_A5D10();
  uint64_t v18 = v17;
  unint64_t v19 = *(void (**)(char *, uint64_t))(v4 + 8);
  v19(v8, v3);
  if (v16 == sub_A5D80() && v18 == v20)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v21 = sub_A7800();
    swift_bridgeObjectRelease();
    id result = (id)swift_bridgeObjectRelease();
    if ((v21 & 1) == 0) {
      return result;
    }
  }
  unint64_t v32 = v13;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  unint64_t v22 = *(void *)(v36 + 16);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  id result = (id)swift_release();
  if (!v22) {
    goto LABEL_19;
  }
  if (v22 > *(void *)(v36 + 16))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v23 = v15;
  uint64_t v24 = v35;
  uint64_t v25 = v36 + v32 + (v22 - 1) * v33;
  id v26 = v34;
  v23(v34, v25, v3);
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_A5CE0();
  uint64_t v29 = v28;
  v19(v26, v3);
  swift_beginAccess();
  if (v27 == *(void *)(v24 + 16) && v29 == *(void *)(v24 + 24))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v30 = sub_A7800();
    id result = (id)swift_bridgeObjectRelease();
    if ((v30 & 1) == 0) {
      return result;
    }
  }
  return (id)sub_3C738(0, 0);
}

uint64_t sub_3C738(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v100 = a2;
  unint64_t v106 = a1;
  uint64_t v99 = sub_A5E10();
  uint64_t v98 = *(void *)(v99 - 8);
  uint64_t v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v6 = (char *)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  id v9 = (char *)&v87 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v87 - v10;
  uint64_t v12 = sub_A5D50();
  uint64_t v102 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v92 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v89 = (char *)&v87 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v93 = (char *)&v87 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v94 = (char *)&v87 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v87 - v22;
  __chkstk_darwin(v21);
  uint64_t v105 = (char *)&v87 - v24;
  if (qword_D7E58 != -1) {
    swift_once();
  }
  uint64_t v25 = static AXLTSettingsManager.shared;
  id v26 = (unsigned char *)(static AXLTSettingsManager.shared + OBJC_IVAR___AXLTSettingsManager_isMicOn);
  swift_beginAccess();
  if (*v26 == 1) {
    uint64_t v27 = sub_A5DB0();
  }
  else {
    uint64_t v27 = sub_A5D90();
  }
  uint64_t v103 = v27;
  uint64_t v29 = v28;
  char v30 = (unsigned char *)(v25 + OBJC_IVAR___AXLTSettingsManager_isPaused);
  swift_beginAccess();
  if (*v30 == 1) {
    uint64_t v31 = sub_A5E00();
  }
  else {
    uint64_t v31 = sub_A5DA0();
  }
  unint64_t KeyPath = v31;
  unint64_t v34 = v32;
  unint64_t v35 = v100;
  char v104 = (void *)v12;
  unint64_t v91 = v6;
  unint64_t v90 = v9;
  if (!v100)
  {
    id v38 = &v3[OBJC_IVAR___AXLTCaptionsProvider_captionsID];
    uint64_t v39 = (char *)sub_A5D80();
    unint64_t v106 = KeyPath;
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v36 = sub_A5D60();
  unint64_t KeyPath = v37;
  if (v36 == v106 && v37 == v35)
  {
    swift_bridgeObjectRelease();
    id v38 = &v3[OBJC_IVAR___AXLTCaptionsProvider_captionsID];
    unint64_t v34 = v35;
    uint64_t v39 = (char *)sub_A5D80();
LABEL_16:
    uint64_t v88 = *(void (**)(char *, void, uint64_t))(v98 + 104);
    v88(v11, enum case for AXLTCaptionActionsType.AXLTCaptionActionsNone(_:), v99);
    goto LABEL_17;
  }
  char v40 = sub_A7800();
  swift_bridgeObjectRelease();
  id v38 = &v3[OBJC_IVAR___AXLTCaptionsProvider_captionsID];
  unint64_t KeyPath = v35;
  uint64_t v39 = (char *)sub_A5D80();
  if (v40)
  {
    unint64_t v34 = v35;
    goto LABEL_16;
  }
  uint64_t v88 = *(void (**)(char *, void, uint64_t))(v98 + 104);
  v88(v11, enum case for AXLTCaptionActionsType.AXLTCaptionActionsPersist(_:), v99);
  unint64_t v34 = v35;
LABEL_17:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_A5CC0();
  if (__OFADD__(*(void *)v38, 1))
  {
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  ++*(void *)v38;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  uint64_t v41 = *(void *)(v107[0] + 16);
  swift_bridgeObjectRelease();
  if (!v41)
  {
    swift_bridgeObjectRelease();
    sub_7AF4(&qword_D92B8);
    uint64_t v49 = v102;
    unint64_t v50 = (*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80);
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = xmmword_A9C60;
    uint64_t v52 = v104;
    uint64_t v53 = v105;
    (*(void (**)(unint64_t, char *, void *))(v49 + 16))(v51 + v50, v105, v104);
    swift_getKeyPath();
    swift_getKeyPath();
    v107[0] = v51;
    uint64_t v54 = v3;
    sub_A60E0();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, void *))(v49 + 8))(v53, v52);
  }
  swift_getKeyPath();
  uint64_t v39 = (char *)&unk_A9F98;
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  id v38 = *(char **)(v107[0] + 16);
  swift_bridgeObjectRelease();
  unint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  if (!v38) {
    goto LABEL_56;
  }
  unint64_t KeyPath = v107[0];
  if ((unint64_t)v38 > *(void *)(v107[0] + 16))
  {
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  uint64_t v42 = v102;
  unint64_t v97 = (*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  uint64_t v96 = *(void *)(v102 + 72);
  uint64_t v43 = v107[0] + v97 + v96 * (void)(v38 - 1);
  id v44 = (char *)v104;
  uint64_t v95 = *(void (**)(char *, uint64_t, char *))(v102 + 16);
  v95(v23, v43, (char *)v104);
  swift_bridgeObjectRelease();
  uint64_t v45 = sub_A5D10();
  uint64_t v47 = v46;
  uint64_t v101 = *(void (**)(char *, char *))(v42 + 8);
  v101(v23, v44);
  if (v45 == sub_A5D80() && v47 == v48)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v56 = sub_A7800();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v56 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      v95(v92, (uint64_t)v105, v44);
      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t v3 = (char *)sub_A60C0();
      id v38 = (char *)v69;
      uint64_t v39 = (char *)*v69;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)id v38 = v39;
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_41:
        unint64_t v72 = *((void *)v39 + 2);
        unint64_t v71 = *((void *)v39 + 3);
        if (v72 >= v71 >> 1)
        {
          uint64_t v39 = (char *)sub_41DE8(v71 > 1, v72 + 1, 1, (unint64_t)v39);
          *(void *)id v38 = v39;
        }
        *((void *)v39 + 2) = v72 + 1;
        long long v73 = (char *)v104;
        (*(void (**)(char *, char *, void *))(v102 + 32))(&v39[v97 + v72 * v96], v92, v104);
        ((void (*)(void *, void))v3)(v107, 0);
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v67 = v105;
        goto LABEL_53;
      }
LABEL_65:
      uint64_t v39 = (char *)sub_41DE8(0, *((void *)v39 + 2) + 1, 1, (unint64_t)v39);
      *(void *)id v38 = v39;
      goto LABEL_41;
    }
  }
  swift_getKeyPath();
  uint64_t v39 = (char *)swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  id v38 = *(char **)(v107[0] + 16);
  swift_bridgeObjectRelease();
  unint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  if (!v38) {
    goto LABEL_58;
  }
  unint64_t KeyPath = v107[0];
  if ((unint64_t)v38 > *(void *)(v107[0] + 16))
  {
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  uint64_t v57 = v94;
  uint64_t v39 = (char *)v104;
  v95(v94, v107[0] + v97 + (void)(v38 - 1) * v96, (char *)v104);
  swift_bridgeObjectRelease();
  uint64_t v58 = sub_A5D20();
  uint64_t v60 = v59;
  v101(v57, v39);
  if (v58 == v103 && v60 == v29)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v61 = sub_A7800();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v61 & 1) == 0) {
      goto LABEL_49;
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  id v38 = *(char **)(v107[0] + 16);
  swift_bridgeObjectRelease();
  unint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  if (!v38) {
    goto LABEL_60;
  }
  unint64_t KeyPath = v107[0];
  if ((unint64_t)v38 > *(void *)(v107[0] + 16))
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  uint64_t v62 = v93;
  v95(v93, v107[0] + v97 + (void)(v38 - 1) * v96, v39);
  swift_bridgeObjectRelease();
  uint64_t v63 = sub_A5CE0();
  uint64_t v65 = v64;
  v101(v62, v39);
  if (v63 == v106 && v65 == v34)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRelease();
    uint64_t v67 = v105;
    id v68 = v39;
    return ((uint64_t (*)(char *, char *))v101)(v67, v68);
  }
  char v66 = sub_A7800();
  swift_bridgeObjectRelease();
  if (v66) {
    goto LABEL_38;
  }
  uint64_t v74 = (unsigned char *)(static AXLTSettingsManager.shared + OBJC_IVAR___AXLTSettingsManager_isPaused);
  swift_beginAccess();
  if (v100 || (*v74 & 1) != 0)
  {
LABEL_49:
    swift_getKeyPath();
    swift_getKeyPath();
    sub_A60D0();
    swift_release();
    swift_release();
    uint64_t v39 = *(char **)(v107[0] + 16);
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v3 = (char *)sub_A60C0();
    id v38 = (char *)v83;
    unint64_t KeyPath = *v83;
    char v84 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)id v38 = KeyPath;
    if (v84)
    {
      if (v39) {
        goto LABEL_51;
      }
      goto LABEL_63;
    }
LABEL_62:
    unint64_t KeyPath = sub_42164(KeyPath);
    *(void *)id v38 = KeyPath;
    if (v39)
    {
LABEL_51:
      if ((unint64_t)v39 <= *(void *)(KeyPath + 16))
      {
        uint64_t v85 = KeyPath + v97 + (void)(v39 - 1) * v96;
        long long v73 = (char *)v104;
        uint64_t v86 = v105;
        (*(void (**)(uint64_t, char *, void *))(v102 + 24))(v85, v105, v104);
        ((void (*)(void *, void))v3)(v107, 0);
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v67 = v86;
LABEL_53:
        id v68 = v73;
        return ((uint64_t (*)(char *, char *))v101)(v67, v68);
      }
      goto LABEL_64;
    }
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  unint64_t v75 = *(void *)(v107[0] + 16);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  uint64_t result = swift_release();
  if (v75)
  {
    if (v75 <= *(void *)(v107[0] + 16))
    {
      id v76 = v89;
      v95(v89, v107[0] + v97 + (v75 - 1) * v96, v39);
      swift_bridgeObjectRelease();
      char v77 = v90;
      sub_A5C80();
      v101(v76, v39);
      uint64_t v78 = v98;
      unint64_t v79 = v91;
      uint64_t v80 = v99;
      v88(v91, enum case for AXLTCaptionActionsType.AXLTCaptionActionsPersist(_:), v99);
      sub_42EB4(&qword_D92C8, (void (*)(uint64_t))&type metadata accessor for AXLTCaptionActionsType);
      char v81 = sub_A7190();
      uint64_t v82 = *(void (**)(char *, uint64_t))(v78 + 8);
      v82(v79, v80);
      v82(v77, v80);
      if (v81) {
        goto LABEL_38;
      }
      goto LABEL_49;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_3D668()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_7AF4(&qword_D85F8);
  __chkstk_darwin(v2 - 8);
  char v70 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_A5E10();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v60 - v9;
  uint64_t v11 = (void *)sub_A5D50();
  uint64_t v79 = *(v11 - 1);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v69 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v74 = (char *)&v60 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v71 = (char *)&v60 - v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v60 - v18;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  unint64_t v20 = *(void *)(v80[0] + 16);
  uint64_t result = swift_bridgeObjectRelease();
  char v77 = (char *)v20;
  unint64_t v22 = v20 - 2;
  if (v20 >= 2)
  {
    swift_getKeyPath();
    unint64_t KeyPath = (char *)swift_getKeyPath();
    sub_A60D0();
    swift_release();
    swift_release();
    if (v22 >= *(void *)(v80[0] + 16))
    {
      __break(1u);
    }
    else
    {
      uint64_t v24 = v79;
      unint64_t v78 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      unint64_t v66 = *(void *)(v79 + 72);
      unint64_t v67 = v66 * v22;
      uint64_t v25 = *(void (**)(void, void, void))(v79 + 16);
      unint64_t v75 = (unint64_t *)(v79 + 16);
      id v68 = v25;
      v25(v19, v80[0] + v78 + v66 * v22, v11);
      swift_bridgeObjectRelease();
      sub_A5C80();
      id v26 = *(void (**)(char *, void *))(v24 + 8);
      unint64_t v72 = (unint64_t *)(v24 + 8);
      long long v73 = v26;
      v26(v19, v11);
      (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for AXLTCaptionActionsType.AXLTCaptionActionsSeparate(_:), v4);
      sub_42EB4(&qword_D9288, (void (*)(uint64_t))&type metadata accessor for AXLTCaptionActionsType);
      sub_A7280();
      sub_A7280();
      uint64_t v27 = (char *)v80[0];
      unint64_t KeyPath = (char *)v80[4];
      id v76 = v1;
      uint64_t v1 = *(unint64_t **)(v5 + 8);
      ((void (*)(char *, uint64_t))v1)(v8, v4);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v1)(v10, v4);
      uint64_t v8 = (char *)v76;
      if (v27 == KeyPath) {
        return result;
      }
      swift_getKeyPath();
      swift_getKeyPath();
      sub_A60D0();
      swift_release();
      swift_release();
      if (v22 < *(void *)(v80[0] + 16))
      {
        uint64_t v65 = (char *)v22;
        unint64_t v29 = v67;
        uint64_t v28 = v68;
        v68(v19, v80[0] + v78 + v67, v11);
        swift_bridgeObjectRelease();
        uint64_t v30 = sub_A5D10();
        unint64_t v22 = v31;
        v73(v19, v11);
        uint64_t v32 = sub_A71D0();
        uint64_t v60 = v30;
        if (v30 == v32 && v22 == v33)
        {
          swift_bridgeObjectRelease();
          sub_A5E30();
        }
        else
        {
          char v35 = sub_A7800();
          swift_bridgeObjectRelease();
          if (v35) {
            sub_A5E30();
          }
          else {
            sub_A5DE0();
          }
        }
        double v36 = v34;
        unint64_t v37 = (char *)self;
        swift_getKeyPath();
        unint64_t KeyPath = (char *)swift_getKeyPath();
        sub_A60D0();
        swift_release();
        swift_release();
        if ((unint64_t)v65 < *(void *)(v80[0] + 16))
        {
          uint64_t v64 = v37;
          uint64_t v62 = (char *)v22;
          unint64_t v22 = (unint64_t)v28;
          unint64_t v38 = v78;
          ((void (*)(char *, unint64_t, void *))v22)(v19, v80[0] + v78 + v29, v11);
          swift_bridgeObjectRelease();
          sub_A5D00();
          uint64_t v1 = v72;
          uint64_t v39 = v73;
          v73(v19, v11);
          uint64_t v63 = sub_A71A0();
          swift_bridgeObjectRelease();
          swift_getKeyPath();
          swift_getKeyPath();
          sub_A60D0();
          swift_release();
          swift_release();
          unint64_t KeyPath = v77;
          if ((unint64_t)v77 <= *(void *)(v80[0] + 16))
          {
            uint64_t v61 = v66 * (void)(v77 - 1);
            ((void (*)(char *, unint64_t, void *))v22)(v19, v80[0] + v38 + v61, v11);
            swift_bridgeObjectRelease();
            sub_A5D00();
            char v40 = KeyPath;
            unint64_t v66 = (unint64_t)v11;
            v39(v19, v11);
            NSString v41 = sub_A71A0();
            swift_bridgeObjectRelease();
            uint64_t v11 = v63;
            [v64 timeDifferenceDateStringOld:v63 dateStringNew:v41];
            double v43 = v42;

            if (v43 >= v36) {
              return swift_bridgeObjectRelease();
            }
            uint64_t v64 = KeyPath - 1;
            swift_getKeyPath();
            swift_getKeyPath();
            uint64_t v8 = (char *)v76;
            sub_A60D0();
            swift_release();
            swift_release();
            unint64_t KeyPath = v62;
            if ((unint64_t)v40 <= *(void *)(v80[0] + 16))
            {
              id v44 = v71;
              unint64_t v22 = v66;
              v68(v71, v80[0] + v78 + v61, v66);
              swift_bridgeObjectRelease();
              uint64_t v45 = sub_A5D10();
              uint64_t v47 = v46;
              v39(v44, (void *)v22);
              if (v60 == v45 && KeyPath == v47)
              {
                swift_bridgeObjectRelease_n();
                unint64_t KeyPath = v65;
                uint64_t v11 = (void *)v66;
              }
              else
              {
                char v48 = sub_A7800();
                swift_bridgeObjectRelease();
                uint64_t result = swift_bridgeObjectRelease();
                unint64_t KeyPath = v65;
                uint64_t v11 = (void *)v66;
                if ((v48 & 1) == 0) {
                  return result;
                }
              }
              swift_getKeyPath();
              swift_getKeyPath();
              sub_A60D0();
              swift_release();
              swift_release();
              if ((unint64_t)KeyPath < *(void *)(v80[0] + 16))
              {
                unint64_t v49 = v67;
                unint64_t v50 = (void (*)(char *, unint64_t, void *))v68;
                uint64_t v51 = (uint64_t)v70;
                uint64_t v1 = v75;
                v68(v70, v80[0] + v78 + v67, v11);
                swift_bridgeObjectRelease();
                (*(void (**)(uint64_t, void, uint64_t, void *))(v79 + 56))(v51, 0, 1, v11);
                uint64_t v52 = (uint64_t)&v8[OBJC_IVAR___AXLTCaptionsProvider_lastFinalCaption];
                swift_beginAccess();
                sub_42300(v51, v52);
                swift_endAccess();
                swift_getKeyPath();
                swift_getKeyPath();
                sub_A60D0();
                swift_release();
                swift_release();
                BOOL v53 = (unint64_t)KeyPath >= *(void *)(v80[0] + 16);
                unint64_t KeyPath = (char *)v72;
                unint64_t v22 = (unint64_t)v73;
                if (!v53)
                {
                  v50(v19, v80[0] + v78 + v49, v11);
                  swift_bridgeObjectRelease();
                  swift_getKeyPath();
                  swift_getKeyPath();
                  sub_A60D0();
                  swift_release();
                  swift_release();
                  if ((unint64_t)v77 <= *(void *)(v80[0] + 16))
                  {
                    uint64_t v54 = (char *)v78;
                    uint64_t v55 = v69;
                    v50(v69, v80[0] + v78 + v61, v11);
                    swift_bridgeObjectRelease();
                    sub_A5D70();
                    ((void (*)(char *, void *))v22)(v55, v11);
                    ((void (*)(char *, void *))v22)(v19, v11);
                    swift_getKeyPath();
                    swift_getKeyPath();
                    unint64_t KeyPath = (char *)sub_A60C0();
                    uint64_t v1 = v56;
                    unint64_t v22 = *v56;
                    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
                    unint64_t *v1 = v22;
                    uint64_t v8 = v54;
                    if (result) {
                      goto LABEL_24;
                    }
                    goto LABEL_35;
                  }
LABEL_34:
                  __break(1u);
LABEL_35:
                  uint64_t result = sub_42164(v22);
                  unint64_t v22 = result;
                  unint64_t *v1 = result;
LABEL_24:
                  unint64_t v57 = (unint64_t)v64;
                  uint64_t v58 = v73;
                  if ((unint64_t)v65 >= *(void *)(v22 + 16))
                  {
                    __break(1u);
                  }
                  else
                  {
                    (*(void (**)(char *, char *, void *))(v79 + 40))(&v8[v22 + v67], v74, v11);
                    ((void (*)(void *, void))KeyPath)(v80, 0);
                    swift_release();
                    swift_release();
                    swift_getKeyPath();
                    swift_getKeyPath();
                    uint64_t v59 = (void (*)(void *, void))sub_A60C0();
                    sub_3AF34(v57, (uint64_t)v19);
                    v58(v19, v11);
                    v59(v80, 0);
                    swift_release();
                    return swift_release();
                  }
                  return result;
                }
LABEL_33:
                __break(1u);
                goto LABEL_34;
              }
LABEL_32:
              __break(1u);
              goto LABEL_33;
            }
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
    }
    __break(1u);
    goto LABEL_29;
  }
  return result;
}

Swift::Void __swiftcall AXLTCaptionsProvider.cleanCaptions()()
{
  sub_A7420();
  id v0 = (id)AXLogLiveTranscription();
  if (v0)
  {
    uint64_t v1 = v0;
    sub_A5FD0();

    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v2 = (void (*)(uint64_t *, void))sub_A60C0();
    *uint64_t v3 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    v2(&v4, 0);
    swift_release();
    swift_release();
    sub_3C738(0, 0);
  }
  else
  {
    __break(1u);
  }
}

NSObject *sub_3E4A4()
{
  uint64_t v1 = v0;
  uint64_t v81 = sub_A5A10();
  uint64_t v72 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v80 = (char *)&v70 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_A5D50();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  long long v73 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v87 = (char *)&v70 - v7;
  __chkstk_darwin(v8);
  *(void *)&long long v74 = (char *)&v70 - v9;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v70 - v11;
  __chkstk_darwin(v13);
  uint64_t v88 = (char *)&v70 - v14;
  sub_A7420();
  uint64_t result = (id)AXLogLiveTranscription();
  if (!result)
  {
LABEL_58:
    __break(1u);
    return result;
  }
  uint64_t v16 = result;
  sub_A5FD0();

  if (_AXSBrailleInputDeviceConnected() && _AXSVoiceOverTouchEnabled()) {
    sub_A5E70();
  }
  else {
    sub_A5E20();
  }
  double v18 = v17;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  uint64_t result = swift_release();
  unint64_t v20 = v89;
  uint64_t v21 = *(void *)(v89 + 16);
  uint64_t v82 = v4;
  uint64_t v84 = v21;
  if (v21)
  {
    unint64_t v22 = 0;
    unint64_t v75 = (uint64_t *)((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v83 = (char *)v75 + v89;
    uint64_t v86 = (void (*)(char *, char *, uint64_t))(v4 + 16);
    char v77 = (void (**)(char *, uint64_t))(v72 + 8);
    uint64_t v23 = (void (**)(char *, uint64_t))(v4 + 8);
    unint64_t v71 = v90;
    *(void *)&long long v19 = 134217984;
    long long v70 = v19;
    uint64_t v79 = v0;
    unint64_t v76 = v89;
    while (v22 < *(void *)(v20 + 16))
    {
      uint64_t v24 = *(void *)(v4 + 72);
      uint64_t v85 = *(uint64_t **)(v4 + 16);
      ((void (*)(char *, char *, uint64_t))v85)(v88, &v83[v24 * v22], v3);
      sub_A5D00();
      uint64_t v25 = sub_A7220();
      swift_bridgeObjectRelease();
      if (v25 >= 1)
      {
        swift_getKeyPath();
        swift_getKeyPath();
        sub_A60D0();
        swift_release();
        swift_release();
        unint64_t v26 = *(void *)(v89 + 16);
        swift_bridgeObjectRelease();
        if (v26 >= 2)
        {
          uint64_t v27 = self;
          sub_A5D00();
          NSString v28 = sub_A71A0();
          swift_bridgeObjectRelease();
          id v29 = [v27 now];
          uint64_t v30 = v80;
          sub_A59F0();

          Class isa = sub_A59E0().super.isa;
          (*v77)(v30, v81);
          NSString v32 = [v27 dateToString:isa];

          if (!v32)
          {
            sub_A71D0();
            NSString v32 = sub_A71A0();
            swift_bridgeObjectRelease();
          }
          objc_msgSend(v27, "timeDifferenceDateStringOld:dateStringNew:", v28, v32, v70);
          double v34 = v33;

          if (v18 >= v34)
          {
            (*v23)(v88, v3);
            swift_bridgeObjectRelease();
            uint64_t v4 = v82;
            uint64_t v1 = v79;
            goto LABEL_30;
          }
          swift_getKeyPath();
          swift_getKeyPath();
          uint64_t v1 = v79;
          sub_A60D0();
          swift_release();
          swift_release();
          uint64_t v35 = *(void *)(v89 + 16);
          if (v35)
          {
            unint64_t v36 = 0;
            uint64_t v78 = v89;
            unint64_t v37 = (char *)v75 + v89;
            while (1)
            {
              ((void (*)(char *, char *, uint64_t))v85)(v12, v37, v3);
              sub_42EB4(&qword_D9280, (void (*)(uint64_t))&type metadata accessor for AXLTCaption);
              char v38 = sub_A7190();
              uint64_t v39 = (uint64_t (*)(char *, uint64_t))*v23;
              (*v23)(v12, v3);
              if (v38) {
                break;
              }
              ++v36;
              v37 += v24;
              if (v35 == v36)
              {
                swift_bridgeObjectRelease();
                goto LABEL_27;
              }
            }
            swift_bridgeObjectRelease();
            swift_getKeyPath();
            swift_getKeyPath();
            char v40 = (void (*)(uint64_t *, void))sub_A60C0();
            sub_3AF34(v36, (uint64_t)v12);
            v39(v12, v3);
            v40(&v89, 0);
            swift_release();
            swift_release();
            os_log_type_t v41 = sub_A7420();
            uint64_t result = (id)AXLogLiveTranscription();
            if (!result) {
              goto LABEL_56;
            }
            double v42 = result;
            double v43 = (char *)v74;
            ((void (*)(void, char *, uint64_t))v85)(v74, v88, v3);
            if (os_log_type_enabled(v42, v41))
            {
              id v44 = (uint8_t *)swift_slowAlloc();
              *(_DWORD *)id v44 = v70;
              uint64_t v78 = (uint64_t)(v44 + 4);
              LODWORD(v85) = v41;
              uint64_t v45 = sub_A5CD0();
              v39(v43, v3);
              uint64_t v89 = v45;
              sub_A7600();
              _os_log_impl(&def_5ED54, v42, (os_log_type_t)v85, "Removed from captions id: %ld", v44, 0xCu);
              swift_slowDealloc();
            }
            else
            {
              v39(v43, v3);
            }

LABEL_27:
            uint64_t v4 = v82;
            uint64_t v1 = v79;
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t v4 = v82;
          }
          unint64_t v20 = v76;
        }
      }
      ++v22;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))*v23)(v88, v3);
      if (v22 == v84) {
        goto LABEL_28;
      }
    }
    __break(1u);
    goto LABEL_55;
  }
LABEL_28:
  swift_bridgeObjectRelease();
LABEL_30:
  uint64_t v46 = (uint64_t *)(v1 + OBJC_IVAR___AXLTCaptionsProvider_unlockedCaptions);
  uint64_t result = swift_beginAccess();
  uint64_t v47 = *v46;
  uint64_t v84 = *(void *)(*v46 + 16);
  uint64_t v85 = v46;
  if (v84)
  {
    unint64_t v76 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v83 = (char *)(v47 + v76);
    uint64_t v88 = (char *)(v4 + 16);
    char v77 = (void (**)(char *, uint64_t))(v72 + 8);
    char v48 = (void (**)(char *, uint64_t))(v4 + 8);
    unint64_t v75 = &v91;
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v49 = 0;
    *(void *)&long long v50 = 134217984;
    long long v74 = v50;
    uint64_t v79 = v47;
    while (v49 < *(void *)(v47 + 16))
    {
      uint64_t v51 = *(void *)(v4 + 72);
      uint64_t v86 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
      v86(v87, &v83[v51 * v49], v3);
      sub_A5D00();
      uint64_t v52 = sub_A7220();
      swift_bridgeObjectRelease();
      if (v52 >= 1 && *(void *)(*v85 + 16) >= 2uLL)
      {
        BOOL v53 = self;
        sub_A5D00();
        NSString v54 = sub_A71A0();
        swift_bridgeObjectRelease();
        id v55 = [v53 now];
        char v56 = v80;
        sub_A59F0();

        Class v57 = sub_A59E0().super.isa;
        (*v77)(v56, v81);
        NSString v58 = [v53 dateToString:v57];

        if (!v58)
        {
          sub_A71D0();
          NSString v58 = sub_A71A0();
          swift_bridgeObjectRelease();
        }
        objc_msgSend(v53, "timeDifferenceDateStringOld:dateStringNew:", v54, v58, (void)v70);
        double v60 = v59;

        if (v18 >= v60)
        {
          (*v48)(v87, v3);
          return swift_bridgeObjectRelease();
        }
        uint64_t v61 = *(void *)(*v85 + 16);
        uint64_t v4 = v82;
        uint64_t v47 = v79;
        if (v61)
        {
          unint64_t v62 = *v85 + v76;
          uint64_t v78 = *v85;
          swift_bridgeObjectRetain();
          unint64_t v63 = 0;
          while (1)
          {
            v86(v12, (char *)v62, v3);
            sub_42EB4(&qword_D9280, (void (*)(uint64_t))&type metadata accessor for AXLTCaption);
            char v64 = sub_A7190();
            uint64_t v65 = (uint64_t (*)(char *, uint64_t))*v48;
            (*v48)(v12, v3);
            if (v64) {
              break;
            }
            ++v63;
            v62 += v51;
            if (v61 == v63)
            {
              swift_bridgeObjectRelease();
LABEL_34:
              uint64_t v4 = v82;
              uint64_t v47 = v79;
              goto LABEL_35;
            }
          }
          swift_bridgeObjectRelease();
          swift_beginAccess();
          sub_3AF34(v63, (uint64_t)v12);
          v65(v12, v3);
          swift_endAccess();
          os_log_type_t v66 = sub_A7420();
          uint64_t result = (id)AXLogLiveTranscription();
          if (result)
          {
            unint64_t v67 = result;
            id v68 = v73;
            v86(v73, v87, v3);
            if (os_log_type_enabled(v67, v66))
            {
              uint64_t v69 = (uint8_t *)swift_slowAlloc();
              *(_DWORD *)uint64_t v69 = v74;
              uint64_t v86 = (void (*)(char *, char *, uint64_t))(v69 + 4);
              uint64_t v78 = sub_A5CD0();
              v65(v68, v3);
              v90[3] = v78;
              sub_A7600();
              _os_log_impl(&def_5ED54, v67, v66, "Removed from unlockedCaptions id: %ld", v69, 0xCu);
              swift_slowDealloc();
            }
            else
            {
              v65(v68, v3);
            }

            goto LABEL_34;
          }
          goto LABEL_57;
        }
      }
LABEL_35:
      ++v49;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))*v48)(v87, v3);
      if (v49 == v84) {
        return swift_bridgeObjectRelease();
      }
    }
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  return result;
}

NSObject *sub_3F234(uint64_t a1)
{
  uint64_t v2 = sub_A70C0();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v35 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_A70F0();
  uint64_t v34 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  double v33 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_A58D0();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v11 = sub_A7430();
  uint64_t result = (id)AXLogLiveTranscription();
  if (result)
  {
    uint64_t v13 = result;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
    BOOL v14 = os_log_type_enabled(v13, v11);
    uint64_t v31 = v5;
    uint64_t v32 = v3;
    if (v14)
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      uint64_t v30 = v15 + 4;
      sub_42EB4(&qword_D9278, (void (*)(uint64_t))&type metadata accessor for Notification);
      uint64_t v16 = sub_A77D0();
      aBlock[9] = sub_15F94(v16, v17, aBlock);
      sub_A7600();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      _os_log_impl(&def_5ED54, v13, v11, "CaptionsProvider AudioSession reset: %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    double v18 = v36;
    long long v19 = &v36[OBJC_IVAR___AXLTCaptionsProvider_isTranscribing];
    uint64_t result = swift_beginAccess();
    if (*v19 == 1)
    {
      unint64_t v20 = &v18[OBJC_IVAR___AXLTCaptionsProvider_activeRequestType];
      uint64_t result = swift_beginAccess();
      if (!*v20)
      {
        uint64_t v21 = OBJC_IVAR___AXLTCaptionsProvider_audioSessionSubscribed;
        if (v18[OBJC_IVAR___AXLTCaptionsProvider_audioSessionSubscribed] == 1)
        {
          id v22 = [self defaultCenter];
          id v23 = [self sharedInstance];
          [v22 removeObserver:v18 name:AVAudioSessionInterruptionNotification object:v23];

          v18[v21] = 0;
        }
        if (qword_D7E58 != -1) {
          swift_once();
        }
        sub_A4264(0);
        [*(id *)&v18[OBJC_IVAR___AXLTCaptionsProvider_transcription] resetTranscribing:0];
        sub_11C10(0, (unint64_t *)&qword_D7E80);
        uint64_t v24 = (void *)sub_A74C0();
        uint64_t v25 = swift_allocObject();
        *(void *)(v25 + 16) = v18;
        aBlock[4] = (uint64_t)sub_42DD8;
        aBlock[5] = v25;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_8A1B4;
        aBlock[3] = (uint64_t)&unk_D0228;
        unint64_t v26 = _Block_copy(aBlock);
        uint64_t v27 = v18;
        swift_release();
        NSString v28 = v33;
        sub_A70D0();
        aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
        sub_42EB4((unint64_t *)&unk_D9260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_7AF4((uint64_t *)&unk_D84C0);
        sub_11D90();
        id v29 = v35;
        sub_A7640();
        sub_A74E0();
        _Block_release(v26);

        (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v2);
        return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v28, v31);
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_3F874(uint64_t a1)
{
  uint64_t v2 = (unsigned char *)(a1 + OBJC_IVAR___AXLTCaptionsProvider_isTranscribing);
  swift_beginAccess();
  if (*v2 == 1)
  {
    uint64_t v3 = (void *)(a1 + OBJC_IVAR___AXLTCaptionsProvider_activeRequestType);
    swift_beginAccess();
    if (!*v3)
    {
      if (qword_D7E58 != -1) {
        swift_once();
      }
      sub_A4264(1);
    }
  }
}

uint64_t sub_3FA1C()
{
  uint64_t v1 = sub_A5E10();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AXLTCaptionsProvider.stopTranscribing()();
  if (qword_D7E58 != -1) {
    swift_once();
  }
  uint64_t v5 = (unsigned char *)(static AXLTSettingsManager.shared + OBJC_IVAR___AXLTSettingsManager_isMicOn);
  swift_beginAccess();
  BOOL v6 = (*v5 & 1) == 0;
  uint64_t v7 = (BOOL *)(v0 + OBJC_IVAR___AXLTCaptionsProvider_activeRequestType);
  swift_beginAccess();
  BOOL *v7 = v6;
  AXLTCaptionsProvider.startTranscribing()();
  sub_3C738(0, 0);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  unint64_t v8 = *(void *)(v15[0] + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v8 >= 2)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    sub_A60D0();
    swift_release();
    swift_release();
    unint64_t v10 = *(void *)(v15[0] + 16);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for AXLTCaptionActionsType.AXLTCaptionActionsSeparate(_:), v1);
    swift_getKeyPath();
    swift_getKeyPath();
    os_log_type_t v11 = (void (*)(void *, void))sub_A60C0();
    uint64_t v13 = v12;
    unint64_t v14 = *v12;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v13 = v14;
    if (result)
    {
      if (v10 >= 2) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t result = sub_42164(v14);
      unint64_t v14 = result;
      *uint64_t v13 = result;
      if (v10 >= 2)
      {
LABEL_6:
        if (v10 - 2 < *(void *)(v14 + 16))
        {
          sub_A5D50();
          sub_A5C90();
          v11(v15, 0);
          swift_release();
          return swift_release();
        }
LABEL_11:
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_3FD54()
{
  uint64_t v0 = sub_A5E10();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A7420();
  uint64_t result = (uint64_t)(id)AXLogLiveTranscription();
  if (!result) {
    goto LABEL_11;
  }
  uint64_t v5 = (void *)result;
  sub_A5FD0();

  sub_3C738(0, 0);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  unint64_t v6 = *(void *)(v12[0] + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v6 < 2) {
    return result;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  unint64_t v7 = *(void *)(v12[0] + 16);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for AXLTCaptionActionsType.AXLTCaptionActionsSeparate(_:), v0);
  swift_getKeyPath();
  swift_getKeyPath();
  unint64_t v8 = (void (*)(void *, void))sub_A60C0();
  unint64_t v10 = v9;
  unint64_t v11 = *v9;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v10 = v11;
  if (result)
  {
    if (v7 >= 2) {
      goto LABEL_5;
    }
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t result = sub_42164(v11);
  unint64_t v11 = result;
  *unint64_t v10 = result;
  if (v7 < 2) {
    goto LABEL_9;
  }
LABEL_5:
  if (v7 - 2 >= *(void *)(v11 + 16))
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  sub_A5D50();
  sub_A5C90();
  v8(v12, 0);
  swift_release();
  return swift_release();
}

uint64_t sub_4008C()
{
  uint64_t v39 = sub_A5E10();
  uint64_t v38 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  char v40 = (char *)&v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = (void *)sub_A5D50();
  uint64_t v50 = *(v3 - 1);
  __chkstk_darwin(v3);
  uint64_t v52 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v38 - v6;
  __chkstk_darwin(v8);
  BOOL v53 = (char *)&v38 - v9;
  sub_A7420();
  uint64_t result = (uint64_t)(id)AXLogLiveTranscription();
  if (!result) {
    goto LABEL_48;
  }
  unint64_t v11 = (void *)result;
  sub_A5FD0();

  swift_getKeyPath();
  swift_getKeyPath();
  unint64_t v48 = v0;
  sub_A60D0();
  swift_release();
  swift_release();
  uint64_t v12 = v54[0];
  unint64_t v47 = *(void *)(v54[0] + 16);
  if (!v47)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    unint64_t v0 = v48 + OBJC_IVAR___AXLTCaptionsProvider_unlockedCaptions;
    swift_beginAccess();
    unint64_t v47 = v0;
    uint64_t v26 = *(void *)v0;
    unint64_t v49 = *(unint64_t **)(*(void *)v0 + 16);
    if (!v49)
    {
LABEL_37:
      sub_3C738(0, 0);
      swift_getKeyPath();
      swift_getKeyPath();
      sub_A60D0();
      swift_release();
      swift_release();
      unint64_t v36 = *(void *)(v54[0] + 16);
      uint64_t result = swift_bridgeObjectRelease();
      if (v36 < 2) {
        return result;
      }
      swift_getKeyPath();
      swift_getKeyPath();
      sub_A60D0();
      swift_release();
      swift_release();
      unint64_t v14 = *(unint64_t **)(v54[0] + 16);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v38 + 104))(v40, enum case for AXLTCaptionActionsType.AXLTCaptionActionsSeparate(_:), v39);
      swift_getKeyPath();
      swift_getKeyPath();
      unint64_t v1 = sub_A60C0();
      uint64_t v3 = v37;
      unint64_t v0 = *v37;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v3 = v0;
      if ((result & 1) == 0) {
        goto LABEL_45;
      }
      if ((unint64_t)v14 >= 2) {
        goto LABEL_40;
      }
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      return result;
    }
    unint64_t v41 = (*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
    unint64_t v46 = v26 + v41;
    BOOL v53 = (char *)(v50 + 16);
    uint64_t v45 = AXLTCallID;
    unint64_t v27 = v50 + 8;
    swift_bridgeObjectRetain();
    unint64_t v14 = 0;
    uint64_t v43 = v26;
    while (1)
    {
      if ((unint64_t)v14 >= *(void *)(v26 + 16)) {
        goto LABEL_44;
      }
      uint64_t v28 = *(void *)(v50 + 72);
      id v29 = *(void (**)(char *, unint64_t, void *))(v50 + 16);
      v29(v52, v46 + v28 * (void)v14, v3);
      unint64_t v1 = sub_A5D10();
      unint64_t v0 = v30;
      if (v1 == sub_A71D0() && v0 == v31) {
        break;
      }
      unint64_t v1 = sub_A7800();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v1) {
        goto LABEL_28;
      }
      (*(void (**)(char *, void *))v27)(v52, v3);
LABEL_22:
      unint64_t v14 = (unint64_t *)((char *)v14 + 1);
      if (v14 == v49)
      {
        swift_bridgeObjectRelease();
        goto LABEL_37;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_28:
    uint64_t v51 = v14;
    uint64_t v32 = *(void *)v47;
    uint64_t v33 = *(void *)(*(void *)v47 + 16);
    if (v33)
    {
      uint64_t v42 = v27 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      unint64_t v34 = v32 + v41;
      uint64_t v44 = v32;
      swift_bridgeObjectRetain();
      unint64_t v1 = 0;
      while (1)
      {
        v29(v7, v34, v3);
        sub_42EB4(&qword_D9280, (void (*)(uint64_t))&type metadata accessor for AXLTCaption);
        unint64_t v0 = sub_A7190();
        uint64_t v35 = *(void (**)(char *, void *))v27;
        (*(void (**)(char *, void *))v27)(v7, v3);
        if (v0) {
          break;
        }
        ++v1;
        v34 += v28;
        if (v33 == v1)
        {
          swift_bridgeObjectRelease();
          uint64_t v26 = v43;
          goto LABEL_34;
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v0 = v47;
      swift_beginAccess();
      sub_3AF34(v1, (uint64_t)v7);
      v35(v7, v3);
      swift_endAccess();
      v35(v52, v3);
      uint64_t v26 = v43;
      unint64_t v14 = v51;
    }
    else
    {
      uint64_t v35 = *(void (**)(char *, void *))v27;
      uint64_t v26 = v43;
LABEL_34:
      v35(v52, v3);
      unint64_t v14 = v51;
    }
    goto LABEL_22;
  }
  uint64_t v13 = 0;
  unint64_t v41 = (*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
  uint64_t v42 = v54[0];
  unint64_t v46 = v54[0] + v41;
  uint64_t v51 = (unint64_t *)(v50 + 16);
  uint64_t v45 = AXLTCallID;
  unint64_t v14 = (unint64_t *)(v50 + 8);
  while ((unint64_t)v13 < *(void *)(v12 + 16))
  {
    uint64_t v15 = *(void *)(v50 + 72);
    uint64_t v16 = *(void (**)(char *, unint64_t, void *))(v50 + 16);
    v16(v53, v46 + v15 * (void)v13, v3);
    uint64_t v17 = sub_A5D10();
    unint64_t v0 = v18;
    if (v17 == sub_A71D0() && v0 == v19)
    {
      swift_bridgeObjectRelease_n();
LABEL_11:
      unint64_t v49 = v13;
      swift_getKeyPath();
      swift_getKeyPath();
      sub_A60D0();
      swift_release();
      swift_release();
      uint64_t v20 = *(void *)(v54[0] + 16);
      unint64_t v0 = (unint64_t)v14 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      if (v20)
      {
        uint64_t v43 = (unint64_t)v14 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        uint64_t v44 = v54[0];
        unint64_t v21 = 0;
        unint64_t v22 = v54[0] + v41;
        while (1)
        {
          v16(v7, v22, v3);
          sub_42EB4(&qword_D9280, (void (*)(uint64_t))&type metadata accessor for AXLTCaption);
          char v23 = sub_A7190();
          unint64_t v1 = *v14;
          ((void (*)(char *, void *))*v14)(v7, v3);
          if (v23) {
            break;
          }
          ++v21;
          v22 += v15;
          if (v20 == v21)
          {
            swift_bridgeObjectRelease();
            uint64_t v12 = v42;
            unint64_t v0 = v43;
            goto LABEL_17;
          }
        }
        swift_bridgeObjectRelease();
        swift_getKeyPath();
        swift_getKeyPath();
        uint64_t v24 = (void (*)(void *, void))sub_A60C0();
        unint64_t v0 = v25;
        sub_3AF34(v21, (uint64_t)v7);
        ((void (*)(char *, void *))v1)(v7, v3);
        v24(v54, 0);
        swift_release();
        swift_release();
        ((void (*)(char *, void *))v1)(v53, v3);
        uint64_t v12 = v42;
        uint64_t v13 = v49;
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v1 = *v14;
LABEL_17:
        uint64_t v13 = v49;
        ((void (*)(char *, void *))v1)(v53, v3);
      }
      goto LABEL_5;
    }
    unint64_t v1 = sub_A7800();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v1) {
      goto LABEL_11;
    }
    ((void (*)(char *, void *))*v14)(v53, v3);
LABEL_5:
    uint64_t v13 = (unint64_t *)((char *)v13 + 1);
    if (v13 == (unint64_t *)v47) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  uint64_t result = sub_42164(v0);
  unint64_t v0 = result;
  *uint64_t v3 = result;
  if ((unint64_t)v14 < 2) {
    goto LABEL_46;
  }
LABEL_40:
  if ((unint64_t)v14 - 2 >= *(void *)(v0 + 16)) {
    goto LABEL_47;
  }
  sub_A5C90();
  ((void (*)(void *, void))v1)(v54, 0);
  swift_release();
  return swift_release();
}

Swift::Void __swiftcall AXLTCaptionsProvider.screenLockStateChanged(_:)(Swift::Bool a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_7AF4(&qword_D85F8);
  __chkstk_darwin(v4 - 8);
  uint64_t v80 = (uint64_t)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v75 - v7;
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v75 - v10;
  uint64_t v82 = sub_A5D50();
  uint64_t v12 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v78 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v79 = (char *)&v75 - v15;
  __chkstk_darwin(v16);
  unint64_t v76 = (char *)&v75 - v17;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v75 - v19;
  __chkstk_darwin(v21);
  char v23 = (char *)&v75 - v22;
  os_log_type_t v24 = sub_A7420();
  unint64_t v25 = (id)AXLogLiveTranscription();
  if (!v25) {
    goto LABEL_35;
  }
  uint64_t v26 = v25;
  BOOL v27 = os_log_type_enabled(v25, v24);
  char v77 = v8;
  if (v27)
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 67109120;
    LODWORD(v83[0]) = a1;
    sub_A7600();
    _os_log_impl(&def_5ED54, v26, v24, "screenLockStateChanged: %{BOOL}d", v28, 8u);
    swift_slowDealloc();
  }

  swift_getKeyPath();
  swift_getKeyPath();
  if (!a1)
  {
    sub_A60D0();
    swift_release();
    swift_release();
    uint64_t v42 = v83[0];
    uint64_t v43 = &v2[OBJC_IVAR___AXLTCaptionsProvider_unlockedCaptions];
    swift_beginAccess();
    sub_415C0(v42);
    swift_endAccess();
    uint64_t v44 = *(void *)v43;
    swift_getKeyPath();
    swift_getKeyPath();
    v83[0] = v44;
    swift_bridgeObjectRetain();
    uint64_t v45 = v2;
    sub_A60E0();
    *(void *)uint64_t v43 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v81 = v12;
  sub_A60D0();
  swift_release();
  swift_release();
  uint64_t v29 = *(void *)(v83[0] + 16);
  swift_bridgeObjectRelease();
  if (!v29) {
    goto LABEL_15;
  }
  swift_getKeyPath();
  unint64_t v30 = (unint64_t *)&unk_A9F98;
  unint64_t KeyPath = (void (*)(char *, uint64_t, char *))swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  unint64_t v32 = *(void *)(v83[0] + 16);
  swift_bridgeObjectRelease();
  unint64_t v33 = swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  if (v32)
  {
    unint64_t v33 = v83[0];
    if (v32 <= *(void *)(v83[0] + 16))
    {
      unint64_t v34 = v32 - 1;
      uint64_t v35 = v81;
      uint64_t v36 = v82;
      (*(void (**)(char *, unint64_t, uint64_t))(v81 + 16))(v23, v83[0]+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v81 + 72) * v34, v82);
      swift_bridgeObjectRelease();
      uint64_t v37 = sub_A5D10();
      uint64_t v39 = v38;
      char v40 = *(void (**)(char *, uint64_t))(v35 + 8);
      v40(v23, v36);
      if (v37 == sub_A5D80() && v39 == v41)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v46 = sub_A7800();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v46 & 1) == 0) {
          goto LABEL_15;
        }
      }
      swift_getKeyPath();
      swift_getKeyPath();
      sub_A60D0();
      swift_release();
      swift_release();
      uint64_t v47 = *(void *)(v83[0] + 16);
      swift_bridgeObjectRelease();
      if (v47 == 1) {
        return;
      }
      swift_getKeyPath();
      swift_getKeyPath();
      sub_A60D0();
      swift_release();
      swift_release();
      uint64_t v48 = *(void *)(v83[0] + 16);
      swift_bridgeObjectRelease();
      swift_getKeyPath();
      swift_getKeyPath();
      unint64_t v49 = (void (*)(void *, void))sub_A60C0();
      sub_3AF34(v48 - 1, (uint64_t)v20);
      v40(v20, v82);
      v49(v83, 0);
      swift_release();
      swift_release();
LABEL_15:
      swift_getKeyPath();
      swift_getKeyPath();
      sub_A60D0();
      swift_release();
      swift_release();
      uint64_t v50 = *(void *)(v83[0] + 16);
      swift_bridgeObjectRelease();
      uint64_t v51 = v81;
      uint64_t v20 = (char *)v82;
      if (!v50) {
        goto LABEL_22;
      }
      uint64_t v52 = (uint64_t)&v2[OBJC_IVAR___AXLTCaptionsProvider_lastFinalCaption];
      swift_beginAccess();
      sub_423B4(v52, (uint64_t)v11);
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v51 + 48))(v11, 1, v20) == 1)
      {
        sub_A35C((uint64_t)v11, &qword_D85F8);
        goto LABEL_22;
      }
      (*(void (**)(char *, char *, char *))(v51 + 32))(v76, v11, v20);
      swift_getKeyPath();
      swift_getKeyPath();
      sub_A60D0();
      swift_release();
      swift_release();
      unint64_t v53 = *(void *)(v83[0] + 16);
      swift_bridgeObjectRelease();
      swift_getKeyPath();
      swift_getKeyPath();
      NSString v54 = (void (*)(void *, void))sub_A60C0();
      char v56 = v55;
      unint64_t v57 = *v55;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t *v56 = v57;
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v53) {
          goto LABEL_20;
        }
      }
      else
      {
        unint64_t v57 = sub_42164(v57);
        unint64_t *v56 = v57;
        if (v53)
        {
LABEL_20:
          if (v53 <= *(void *)(v57 + 16))
          {
            unint64_t v59 = v57
                + ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))
                + *(void *)(v51 + 72) * (v53 - 1);
            double v60 = v76;
            (*(void (**)(unint64_t, char *, char *))(v51 + 24))(v59, v76, v20);
            v54(v83, 0);
            swift_release();
            swift_release();
            (*(void (**)(char *, char *))(v51 + 8))(v60, v20);
LABEL_22:
            uint64_t v61 = (uint64_t)v77;
            (*(void (**)(char *, uint64_t, uint64_t, char *))(v51 + 56))(v77, 1, 1, v20);
            uint64_t v62 = (uint64_t)&v2[OBJC_IVAR___AXLTCaptionsProvider_lastFinalCaption];
            swift_beginAccess();
            sub_42300(v61, v62);
            swift_endAccess();
            swift_getKeyPath();
            swift_getKeyPath();
            sub_A60D0();
            swift_release();
            swift_release();
            uint64_t v63 = v83[0];
            char v64 = &v2[OBJC_IVAR___AXLTCaptionsProvider_unlockedCaptions];
            swift_beginAccess();
            *(void *)char v64 = v63;
            swift_bridgeObjectRelease();
            swift_getKeyPath();
            swift_getKeyPath();
            uint64_t v65 = (void (*)(void *, void))sub_A60C0();
            void *v66 = _swiftEmptyArrayStorage;
            swift_bridgeObjectRelease();
            v65(v83, 0);
            swift_release();
            swift_release();
            uint64_t v67 = (uint64_t)&v2[OBJC_IVAR___AXLTCaptionsProvider_currentCaption];
            swift_beginAccess();
            uint64_t v68 = v80;
            sub_423B4(v67, v80);
            if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v51 + 48))(v68, 1, v20) == 1)
            {
              sub_A35C(v68, &qword_D85F8);
              sub_3C738(0, 0);
              return;
            }
            unint64_t KeyPath = *(void (**)(char *, uint64_t, char *))(v51 + 32);
            uint64_t v69 = v79;
            KeyPath(v79, v68, v20);
            (*(void (**)(char *, char *, char *))(v51 + 16))(v78, v69, v20);
            swift_getKeyPath();
            swift_getKeyPath();
            uint64_t v2 = (char *)sub_A60C0();
            unint64_t v30 = v70;
            unint64_t v33 = *v70;
            char v71 = swift_isUniquelyReferenced_nonNull_native();
            *unint64_t v30 = v33;
            if (v71) {
              goto LABEL_25;
            }
            goto LABEL_31;
          }
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_31:
  unint64_t v33 = sub_41DE8(0, *(void *)(v33 + 16) + 1, 1, v33);
  *unint64_t v30 = v33;
LABEL_25:
  unint64_t v73 = *(void *)(v33 + 16);
  unint64_t v72 = *(void *)(v33 + 24);
  if (v73 >= v72 >> 1)
  {
    unint64_t v33 = sub_41DE8(v72 > 1, v73 + 1, 1, v33);
    *unint64_t v30 = v33;
  }
  *(void *)(v33 + 16) = v73 + 1;
  uint64_t v74 = v81;
  KeyPath((char *)(v33+ ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80))+ *(void *)(v81 + 72) * v73), (uint64_t)v78, v20);
  ((void (*)(void *, void))v2)(v83, 0);
  swift_release();
  swift_release();
  (*(void (**)(char *, char *))(v74 + 8))(v79, v20);
}

uint64_t sub_415C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v22 = v4 + v2;
  }
  else {
    int64_t v22 = v4;
  }
  unint64_t v3 = sub_41DE8(isUniquelyReferenced_nonNull_native, v22, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = *(void *)(sub_A5D50() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = v3 + v12 + v11 * v8;
  unint64_t v14 = a1 + v12;
  uint64_t v15 = v11 * v2;
  unint64_t v16 = v13 + v15;
  unint64_t v17 = v14 + v15;
  if (v14 < v16 && v13 < v17) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t *v1 = v3;
    return result;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFADD__(v19, v2);
  uint64_t v21 = v19 + v2;
  if (!v20)
  {
    *(void *)(v3 + 16) = v21;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_A7790();
  __break(1u);
  return result;
}

uint64_t sub_417B8@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for AXLTCaptionsProvider();
  uint64_t result = sub_A6070();
  *a1 = result;
  return result;
}

Swift::Void __swiftcall AXLTCaptionsProvider.callConnected()()
{
  sub_A7450();
  id v0 = (id)AXLogLiveTranscription();
  if (v0)
  {
    unint64_t v1 = v0;
    sub_A5FD0();

    AXLTCaptionsProvider.stopTranscribing()();
    AXLTCaptionsProvider.startTranscribing()();
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall AXLTCaptionsProvider.allActiveCallsEnded()()
{
  sub_A7450();
  id v1 = (id)AXLogLiveTranscription();
  if (v1)
  {
    uint64_t v2 = v1;
    sub_A5FD0();

    if (*(void *)(v0 + OBJC_IVAR___AXLTCaptionsProvider_activePid) == -2)
    {
      sub_4008C();
      AXLTCaptionsProvider.stopTranscribing()();
      AXLTCaptionsProvider.startTranscribing()();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_41A90@<X0>(void *a1@<X8>)
{
  return sub_41ACC(a1);
}

uint64_t sub_41AA4(uint64_t a1, void **a2)
{
  return sub_41B5C(a1, a2);
}

uint64_t sub_41AB8@<X0>(void *a1@<X8>)
{
  return sub_41ACC(a1);
}

uint64_t sub_41ACC@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_41B48(uint64_t a1, void **a2)
{
  return sub_41B5C(a1, a2);
}

uint64_t sub_41B5C(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v2;
  return sub_A60E0();
}

char *sub_41BC8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_7AF4(&qword_D92B0);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 5);
      unint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      unint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[32 * v8 + 32]) {
          memmove(v13, a4 + 32, 32 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_425F8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_41CD8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_7AF4(&qword_D92A8);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 5);
      unint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      unint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[32 * v8 + 32]) {
          memmove(v13, a4 + 32, 32 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_426EC(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_41DE8(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v13 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_7AF4(&qword_D92B8);
  uint64_t v10 = *(void *)(sub_A5D50() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = sub_A7720();
    __break(1u);
    return result;
  }
  _OWORD v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(sub_A5D50() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_427D8(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

void *sub_42050(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_7AF4((uint64_t *)&unk_D9250);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      uint64_t v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      unint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      unint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_42CEC(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_42164(unint64_t a1)
{
  return sub_41DE8(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_42178(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_A7740();
    swift_bridgeObjectRelease();
  }

  return sub_A76B0();
}

void *sub_421F4(void *a1)
{
  return sub_42050(0, a1[2], 0, a1);
}

uint64_t sub_42208@<X0>(void *a1@<X8>)
{
  return sub_41ACC(a1);
}

uint64_t sub_42230(uint64_t a1, void **a2)
{
  return sub_41B5C(a1, a2);
}

uint64_t sub_42258@<X0>(void *a1@<X8>)
{
  return sub_41ACC(a1);
}

uint64_t sub_42280(uint64_t a1, void **a2)
{
  return sub_41B5C(a1, a2);
}

uint64_t sub_422A8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_422E0(void *a1)
{
  return sub_39C30(a1, *(Class *)(v1 + 16));
}

uint64_t sub_422E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_422F8()
{
  return swift_release();
}

uint64_t sub_42300(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_7AF4(&qword_D85F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AXLTCaptionsProvider()
{
  uint64_t result = qword_D9230;
  if (!qword_D9230) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_423B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_7AF4(&qword_D85F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_4241C()
{
  return type metadata accessor for AXLTCaptionsProvider();
}

void sub_42424()
{
  sub_42544();
  if (v0 <= 0x3F)
  {
    sub_425A0();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_42544()
{
  if (!qword_D9240)
  {
    sub_7C5C(&qword_D9110);
    unint64_t v0 = sub_A60F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_D9240);
    }
  }
}

void sub_425A0()
{
  if (!qword_D9248)
  {
    sub_A5D50();
    unint64_t v0 = sub_A75F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_D9248);
    }
  }
}

uint64_t sub_425F8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_A7790();
  __break(1u);
  return result;
}

char *sub_426EC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 32 * a1 + 32);
    size_t v6 = 32 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_A7790();
  __break(1u);
  return result;
}

uint64_t sub_427D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(sub_A5D50() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = sub_A7790();
  __break(1u);
  return result;
}

void sub_42930(uint64_t a1)
{
  uint64_t v2 = sub_A58D0();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v6 = sub_A7420();
  uint64_t v7 = (id)AXLogLiveTranscription();
  if (!v7)
  {
    __break(1u);
    return;
  }
  uint64_t v8 = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  os_log_type_t v9 = v6;
  if (os_log_type_enabled(v8, v6))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    uint64_t v20 = a1;
    v23[0] = v11;
    *(_DWORD *)uint64_t v10 = 136315138;
    sub_42EB4(&qword_D9278, (void (*)(uint64_t))&type metadata accessor for Notification);
    uint64_t v12 = sub_A77D0();
    *(void *)&long long v24 = sub_15F94(v12, v13, v23);
    sub_A7600();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    _os_log_impl(&def_5ED54, v8, v9, "CaptionsProvider AudioSession interruption: %s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  uint64_t v14 = sub_A58C0();
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v21 = sub_A71D0();
    uint64_t v22 = v16;
    sub_A7670();
    if (*(void *)(v15 + 16) && (unint64_t v17 = sub_85F3C((uint64_t)v23), (v18 & 1) != 0))
    {
      sub_10330(*(void *)(v15 + 56) + 32 * v17, (uint64_t)&v24);
    }
    else
    {
      long long v24 = 0u;
      long long v25 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_102DC((uint64_t)v23);
    if (!*((void *)&v25 + 1))
    {
      sub_A35C((uint64_t)&v24, &qword_D92A0);
      return;
    }
    if (swift_dynamicCast())
    {
      if (v21)
      {
        if (v21 != 1) {
          return;
        }
        if (qword_D7E58 != -1) {
          swift_once();
        }
        char v19 = 0;
      }
      else
      {
        if (qword_D7E58 != -1) {
          swift_once();
        }
        char v19 = 1;
      }
      sub_A4264(v19);
    }
  }
}

char *sub_42CEC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_A7790();
  __break(1u);
  return result;
}

void sub_42DD8()
{
  sub_3F874(*(void *)(v0 + 16));
}

uint64_t sub_42DE0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_42E18()
{
  unint64_t result = qword_D9298;
  if (!qword_D9298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9298);
  }
  return result;
}

uint64_t sub_42E6C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

id sub_42EAC(uint64_t a1)
{
  return sub_3C2C4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_42EB4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_42F1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_7AF4(&qword_D9388);
  __chkstk_darwin(v4 - 8);
  uint64_t v23 = (uint64_t)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v21 = *(void *)(a1 + 32);
  uint64_t v22 = a1;
  uint64_t v10 = qword_D7E58;
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  AXLTSettingsManager.buttonScaledHeight.getter();
  sub_A7030();
  sub_A6270();
  uint64_t v11 = v24;
  char v12 = v25;
  uint64_t v13 = v26;
  char v14 = v27;
  uint64_t v16 = v28;
  uint64_t v15 = v29;
  sub_430FC((uint64_t)v8);
  uint64_t v17 = v23;
  sub_8860((uint64_t)v8, v23, &qword_D9388);
  *(void *)a2 = v21;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = v11;
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(unsigned char *)(a2 + 40) = v14;
  *(void *)(a2 + 48) = v16;
  *(void *)(a2 + 56) = v15;
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 1;
  uint64_t v18 = sub_7AF4(&qword_D9390);
  sub_8860(v17, a2 + *(int *)(v18 + 64), &qword_D9388);
  swift_retain();
  sub_A35C((uint64_t)v8, &qword_D9388);
  sub_A35C(v17, &qword_D9388);
  return swift_release();
}

uint64_t sub_430FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (_OWORD *)v1;
  uint64_t v4 = sub_A7520();
  uint64_t v73 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v72 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_7AF4(&qword_D9398);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for HUDButton(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v64 = sub_7AF4(&qword_D93A0);
  __chkstk_darwin(v64);
  os_log_type_t v66 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_7AF4(&qword_D93A8);
  __chkstk_darwin(v69);
  uint64_t v71 = (uint64_t)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_7AF4(&qword_D9388);
  __chkstk_darwin(v70);
  uint64_t v68 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v67 = (char *)&v60 - v16;
  uint64_t v17 = "arrow.up.backward.and.arrow.down.forward";
  if (*(unsigned __int8 *)(v1 + 17)) {
    uint64_t v17 = "arrow.down.forward.and.arrow.up.backward";
  }
  uint64_t v18 = v17 - 32;
  sub_A6DA0();
  uint64_t v63 = sub_A6DC0();
  swift_release();
  if (qword_D7E58 != -1) {
    swift_once();
  }
  uint64_t v60 = v4;
  unint64_t v61 = (unint64_t)v18 | 0x8000000000000000;
  double v19 = AXLTSettingsManager.buttonScaledHeight.getter();
  long long v74 = *(_OWORD *)(v1 + 64);
  sub_7AF4(&qword_D8FA8);
  sub_A6E80();
  uint64_t v62 = v75;
  uint64_t v20 = (uint64_t (*)())swift_allocObject();
  long long v21 = v2[3];
  *((_OWORD *)v20 + 3) = v2[2];
  *((_OWORD *)v20 + 4) = v21;
  *((_OWORD *)v20 + 5) = v2[4];
  long long v22 = v2[1];
  *((_OWORD *)v20 + 1) = *v2;
  *((_OWORD *)v20 + 2) = v22;
  *uint64_t v11 = swift_getKeyPath();
  sub_7AF4(&qword_D7E68);
  swift_storeEnumTagMultiPayload();
  uint64_t v23 = v9[13];
  sub_4C280((uint64_t)v2);
  *(uint64_t *)((char *)v11 + v23) = sub_A6AB0();
  *(uint64_t *)((char *)v11 + v9[15]) = 0x4020000000000000;
  *(uint64_t *)((char *)v11 + v9[16]) = 0x4000000000000000;
  uint64_t v24 = v9[17];
  if (qword_D7DE0 != -1) {
    swift_once();
  }
  *(uint64_t *)((char *)v11 + v24) = qword_DF640;
  *(uint64_t *)((char *)v11 + v9[18]) = 0x402E000000000000;
  *(uint64_t *)((char *)v11 + v9[19]) = 0x4024000000000000;
  char v25 = (char *)v11 + v9[20];
  if (qword_D7DE8 != -1) {
    swift_once();
  }
  uint64_t v26 = sub_A6380();
  uint64_t v27 = sub_7B38(v26, (uint64_t)qword_DF648);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v25, v27, v26);
  uint64_t v28 = (uint64_t *)((char *)v11 + v9[5]);
  unint64_t v29 = v61;
  *uint64_t v28 = 0xD000000000000028;
  v28[1] = v29;
  unint64_t v30 = (uint64_t *)((char *)v11 + v9[6]);
  *unint64_t v30 = 0;
  v30[1] = 0;
  *((unsigned char *)v11 + v9[7]) = 0;
  *((unsigned char *)v11 + v9[8]) = 0;
  *((unsigned char *)v11 + v9[9]) = 0;
  *(uint64_t *)((char *)v11 + v9[10]) = v63;
  *(uint64_t *)((char *)v11 + v9[11]) = 0;
  uint64_t v31 = (double *)((char *)v11 + v9[12]);
  double *v31 = v19;
  *((unsigned char *)v31 + 8) = 0;
  unint64_t v32 = (uint64_t (**)())((char *)v11 + v9[14]);
  uint8_t *v32 = sub_4C250;
  v32[1] = v20;
  swift_release();
  *(uint64_t *)((char *)v11 + v23) = v62;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v34 = static AXLTSettingsManager.shared;
  uint64_t v35 = OBJC_IVAR___AXLTSettingsManager__boldText;
  int v36 = *(unsigned __int8 *)(static AXLTSettingsManager.shared + OBJC_IVAR___AXLTSettingsManager__boldText);
  if (v36 == 2)
  {
    int v37 = _AXSLiveCaptionsBoldTextEnabled();
    uint64_t v38 = (uint64_t)v66;
    if (v37 == -1)
    {
      int v59 = _AXSEnhanceTextLegibilityEnabled();
      *(unsigned char *)(v34 + v35) = v59 != 0;
      uint64_t v39 = a1;
      if (!v59) {
        goto LABEL_12;
      }
    }
    else
    {
      *(unsigned char *)(v34 + v35) = v37 == 1;
      uint64_t v39 = a1;
      if (v37 != 1)
      {
LABEL_12:
        char v40 = (unsigned int *)&enum case for LegibilityWeight.regular(_:);
        goto LABEL_15;
      }
    }
  }
  else
  {
    uint64_t v39 = a1;
    uint64_t v38 = (uint64_t)v66;
    if ((v36 & 1) == 0) {
      goto LABEL_12;
    }
  }
  char v40 = (unsigned int *)&enum case for LegibilityWeight.bold(_:);
LABEL_15:
  uint64_t v41 = *v40;
  uint64_t v42 = sub_A6460();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 104))(v8, v41, v42);
  uint64_t v43 = v60;
  sub_A6460();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v8, 0, 1, v42);
  uint64_t v44 = (uint64_t *)(v38 + *(int *)(v64 + 36));
  uint64_t v45 = sub_7AF4(&qword_D93B0);
  sub_8860((uint64_t)v8, (uint64_t)v44 + *(int *)(v45 + 28), &qword_D9398);
  uint64_t *v44 = KeyPath;
  sub_4C318((uint64_t)v11, v38, type metadata accessor for HUDButton);
  sub_A35C((uint64_t)v8, &qword_D9398);
  sub_4C380((uint64_t)v11, type metadata accessor for HUDButton);
  id v46 = [self defaultCenter];
  if (qword_D7E20 != -1) {
    swift_once();
  }
  uint64_t v47 = v72;
  sub_A7530();

  uint64_t v48 = (uint64_t (*)())swift_allocObject();
  long long v49 = v2[3];
  *((_OWORD *)v48 + 3) = v2[2];
  *((_OWORD *)v48 + 4) = v49;
  *((_OWORD *)v48 + 5) = v2[4];
  long long v50 = v2[1];
  *((_OWORD *)v48 + 1) = *v2;
  *((_OWORD *)v48 + 2) = v50;
  uint64_t v51 = v71;
  sub_8860(v38, v71, &qword_D93A0);
  uint64_t v52 = v69;
  uint64_t v53 = v73;
  (*(void (**)(uint64_t, char *, uint64_t))(v73 + 16))(v51 + *(int *)(v69 + 52), v47, v43);
  NSString v54 = (uint64_t (**)())(v51 + *(int *)(v52 + 56));
  *NSString v54 = sub_4C444;
  v54[1] = v48;
  sub_4C280((uint64_t)v2);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v47, v43);
  sub_A35C(v38, &qword_D93A0);
  *(void *)&long long v74 = sub_A5D60();
  *((void *)&v74 + 1) = v55;
  sub_A45C(&qword_D93B8, &qword_D93A8);
  sub_FF30();
  uint64_t v56 = (uint64_t)v68;
  sub_A6C40();
  swift_bridgeObjectRelease();
  sub_A35C(v51, &qword_D93A8);
  uint64_t v57 = (uint64_t)v67;
  sub_A6410();
  swift_bridgeObjectRelease();
  sub_A35C(v56, &qword_D9388);
  return sub_29C10(v57, v39, &qword_D9388);
}

uint64_t sub_43A08(uint64_t a1)
{
  uint64_t v2 = sub_7AF4(&qword_D9398);
  __chkstk_darwin(v2 - 8);
  sub_8860(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_D9398);
  return sub_A6540();
}

uint64_t sub_43A9C()
{
  if (qword_D7E58 != -1) {
    swift_once();
  }
  AXLTSettingsManager.contentCategory.getter();
  uint64_t v0 = qword_D7DE8;
  uint64_t v2 = (NSString *)v1;
  if (v0 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_A6380();
  sub_7B38(v3, (uint64_t)qword_DF648);
  uint64_t v4 = sub_75128();
  char v5 = sub_A7550();

  if (v5)
  {
    uint64_t v6 = sub_75128();

    uint64_t v2 = v6;
  }
  if (qword_D7E50 != -1) {
    swift_once();
  }
  sub_A2F50((uint64_t)buttonFontStyle, UIFontWeightBold);

  sub_A6AC0();
  sub_7AF4(&qword_D8FA8);
  return sub_A6E90();
}

uint64_t sub_43C28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_7AF4(&qword_D9370);
  __chkstk_darwin(v3 - 8);
  char v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v6 = v1[3];
  long long v15 = v1[2];
  long long v16 = v6;
  long long v17 = v1[4];
  long long v7 = v1[1];
  long long v13 = *v1;
  long long v14 = v7;
  *(void *)char v5 = sub_A66A0();
  *((void *)v5 + 1) = 0;
  v5[16] = 0;
  uint64_t v8 = sub_7AF4(&qword_D9378);
  sub_42F1C((uint64_t)&v13, (uint64_t)&v5[*(int *)(v8 + 44)]);
  uint64_t v9 = *((void *)&v14 + 1);
  char v10 = sub_A6A10();
  sub_8860((uint64_t)v5, a1, &qword_D9370);
  uint64_t v11 = a1 + *(int *)(sub_7AF4(&qword_D9380) + 36);
  *(unsigned char *)uint64_t v11 = v10;
  *(void *)(v11 + 8) = 0x4028000000000000;
  *(void *)(v11 + 16) = v9;
  *(void *)(v11 + 24) = 0;
  *(void *)(v11 + 32) = v9;
  *(unsigned char *)(v11 + 40) = 0;
  return sub_A35C((uint64_t)v5, &qword_D9370);
}

uint64_t sub_43D3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v32 = sub_A6740();
  uint64_t v27 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  unint64_t v30 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_A69A0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LiveCaptionsCaptionTitle(0);
  __chkstk_darwin(v8);
  char v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_7AF4(&qword_D9578);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v28 = v11;
  uint64_t v29 = v12;
  __chkstk_darwin(v11);
  long long v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_7AF4(&qword_D9580);
  __chkstk_darwin(v31);
  long long v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_44200((uint64_t)v10);
  sub_A6990();
  uint64_t v17 = sub_4D5D0(&qword_D9588, (void (*)(uint64_t))type metadata accessor for LiveCaptionsCaptionTitle);
  sub_A6C70();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_4C380((uint64_t)v10, type metadata accessor for LiveCaptionsCaptionTitle);
  sub_7AF4(&qword_D9018);
  uint64_t v18 = v27;
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_A9C60;
  sub_A6730();
  uint64_t v36 = v19;
  sub_4D5D0(&qword_D9020, (void (*)(uint64_t))&type metadata accessor for AccessibilityTraits);
  sub_7AF4(&qword_D9028);
  sub_A45C(&qword_D9030, &qword_D9028);
  uint64_t v20 = v30;
  uint64_t v21 = v32;
  sub_A7640();
  uint64_t v36 = v8;
  uint64_t v37 = v17;
  swift_getOpaqueTypeConformance2();
  uint64_t v22 = v28;
  sub_A6C90();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v21);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v22);
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = v34;
  *(void *)(v23 + 16) = v33;
  *(void *)(v23 + 24) = v24;
  sub_4D618();
  swift_retain();
  sub_A6BA0();
  swift_release();
  return sub_A35C((uint64_t)v16, &qword_D9580);
}

double sub_44200@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_7AF4(&qword_D85F8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  long long v7 = (char *)&v32 - v6;
  if (qword_D7D98 != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)static AXLTCaptionsProvider.shared;
  type metadata accessor for AXLTCaptionsProvider();
  sub_4D5D0(&qword_D8B08, (void (*)(uint64_t))type metadata accessor for AXLTCaptionsProvider);
  id v9 = v8;
  *(void *)a1 = sub_A6340();
  *(void *)(a1 + 8) = v10;
  if (qword_D7E58 != -1) {
    swift_once();
  }
  AXLTSettingsManager.contentCategory.getter();
  uint64_t v12 = v11;
  char v13 = sub_A7540();

  LOBYTE(v33) = v13 & 1;
  sub_A6E70();
  uint64_t v14 = v36;
  *(unsigned char *)(a1 + 16) = v35;
  *(void *)(a1 + 24) = v14;
  uint64_t v15 = (double *)(static AXLTSettingsManager.shared + OBJC_IVAR___AXLTSettingsManager_textColor);
  swift_beginAccess();
  double v32 = *v15;
  swift_retain();
  sub_A6E70();
  uint64_t v16 = v34;
  *(double *)(a1 + 32) = v33;
  *(void *)(a1 + 40) = v16;
  sub_A2D14();
  double v32 = COERCE_DOUBLE(sub_A6AC0());
  sub_A6E70();
  uint64_t v17 = v34;
  *(double *)(a1 + 48) = v33;
  *(void *)(a1 + 56) = v17;
  AXLTSettingsManager.contentCategory.getter();
  uint64_t v18 = qword_D7DE8;
  uint64_t v20 = (NSString *)v19;
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_A6380();
  sub_7B38(v21, (uint64_t)qword_DF648);
  uint64_t v22 = sub_75128();
  char v23 = sub_A7550();

  if (v23)
  {
    uint64_t v24 = sub_75128();

    uint64_t v20 = v24;
  }
  if (qword_D7E50 != -1) {
    swift_once();
  }
  sub_A2F50((uint64_t)buttonFontStyle, UIFontWeightSemibold);

  double v32 = COERCE_DOUBLE(sub_A6AC0());
  sub_A6E70();
  uint64_t v25 = v34;
  *(double *)(a1 + 64) = v33;
  *(void *)(a1 + 72) = v25;
  double v32 = COERCE_DOUBLE([objc_allocWithZone((Class)UIImage) init]);
  sub_384DC();
  sub_A6E70();
  uint64_t v26 = v34;
  *(double *)(a1 + 80) = v33;
  *(void *)(a1 + 88) = v26;
  uint64_t v27 = (int *)type metadata accessor for LiveCaptionsCaptionTitle(0);
  uint64_t v28 = sub_A5D50();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v7, 1, 1, v28);
  sub_8860((uint64_t)v7, (uint64_t)v4, &qword_D85F8);
  sub_A6E70();
  sub_A35C((uint64_t)v7, &qword_D85F8);
  *(void *)(a1 + v27[11]) = 0x3FAEB851EB851EB8;
  *(void *)(a1 + v27[12]) = 0x3FE851EB851EB852;
  uint64_t v29 = (double *)(a1 + v27[13]);
  double v32 = AXLTSettingsManager.buttonScaledHeight.getter();
  sub_A6E70();
  double result = v33;
  uint64_t v31 = v34;
  *uint64_t v29 = v33;
  *((void *)v29 + 1) = v31;
  return result;
}

uint64_t sub_4467C@<X0>(uint64_t a1@<X8>)
{
  return sub_43D3C(*v1, v1[1], a1);
}

uint64_t sub_44684@<X0>(uint64_t a1@<X8>)
{
  uint64_t v61 = a1;
  uint64_t v2 = sub_A5D50();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v57 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  NSString v58 = (char *)&v56 - v6;
  uint64_t v7 = type metadata accessor for LiveCaptionsAudioSourceCircleView(0);
  __chkstk_darwin(v7 - 8);
  id v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_7AF4(&qword_D85F8);
  __chkstk_darwin(v10 - 8);
  uint64_t v59 = (uint64_t)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v56 - v13;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v56 - v16;
  uint64_t v18 = v1;
  sub_8860(v1, (uint64_t)&v56 - v16, &qword_D85F8);
  uint64_t v56 = v3;
  id v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  int v20 = v19(v17, 1, v2);
  uint64_t v60 = v3;
  if (v20 == 1)
  {
    sub_A35C((uint64_t)v17, &qword_D85F8);
    sub_A5E00();
LABEL_10:
    swift_bridgeObjectRelease();
    sub_4C318(v18, (uint64_t)v9, type metadata accessor for LiveCaptionsAudioSourceCircleView);
    goto LABEL_11;
  }
  uint64_t v21 = sub_A5CE0();
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v17, v2);
  uint64_t v24 = sub_A5E00();
  if (!v23) {
    goto LABEL_10;
  }
  if (v21 == v24 && v23 == v25)
  {
    swift_bridgeObjectRelease_n();
    sub_4C318(v18, (uint64_t)v9, type metadata accessor for LiveCaptionsAudioSourceCircleView);
LABEL_27:
    sub_4C380((uint64_t)v9, type metadata accessor for LiveCaptionsAudioSourceCircleView);
    goto LABEL_37;
  }
  char v27 = sub_A7800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_4C318(v18, (uint64_t)v9, type metadata accessor for LiveCaptionsAudioSourceCircleView);
  if (v27) {
    goto LABEL_27;
  }
LABEL_11:
  sub_8860((uint64_t)v9, (uint64_t)v14, &qword_D85F8);
  if (v19(v14, 1, v2) == 1)
  {
    sub_A35C((uint64_t)v14, &qword_D85F8);
    sub_A5E00();
LABEL_17:
    sub_4C380((uint64_t)v9, type metadata accessor for LiveCaptionsAudioSourceCircleView);
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  uint64_t v28 = sub_A5CA0();
  uint64_t v30 = v29;
  (*(void (**)(char *, uint64_t))(v60 + 8))(v14, v2);
  uint64_t v31 = sub_A5E00();
  if (!v30) {
    goto LABEL_17;
  }
  if (v28 == v31 && v30 == v32)
  {
    swift_bridgeObjectRelease();
    sub_4C380((uint64_t)v9, type metadata accessor for LiveCaptionsAudioSourceCircleView);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v54 = sub_A7800();
    swift_bridgeObjectRelease();
    sub_4C380((uint64_t)v9, type metadata accessor for LiveCaptionsAudioSourceCircleView);
    swift_bridgeObjectRelease();
    if ((v54 & 1) == 0)
    {
LABEL_18:
      uint64_t v33 = v59;
      sub_8860(v18, v59, &qword_D85F8);
      if (v19((char *)v33, 1, v2) == 1)
      {
        sub_A35C(v33, &qword_D85F8);
        uint64_t v34 = v61;
LABEL_20:
        if (qword_D7E58 != -1) {
          swift_once();
        }
        *(void *)uint64_t v62 = AXLTSettingsManager.buttonScaledHeight.getter();
        sub_A6E70();
        *(void *)uint64_t v62 = 1;
        *(_OWORD *)&v62[8] = v64;
        __int16 v63 = 256;
        sub_7AF4(&qword_D93C0);
        sub_4C44C();
        sub_4C4C8();
        uint64_t result = sub_A6860();
        uint64_t v37 = *((void *)&v64 + 1);
        uint64_t v36 = v64;
        uint64_t v38 = v65;
        unsigned __int8 v39 = v66;
        char v40 = v67;
        goto LABEL_40;
      }
      uint64_t v41 = v60;
      uint64_t v42 = v58;
      (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v58, v33, v2);
      uint64_t v43 = sub_A5D10();
      uint64_t v45 = v44;
      if (v43 == sub_A71D0() && v45 == v46)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v47 = v57;
        (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v57, v42, v2);
        uint64_t v34 = v61;
      }
      else
      {
        char v48 = sub_A7800();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v47 = v57;
        (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v57, v42, v2);
        uint64_t v34 = v61;
        if ((v48 & 1) == 0)
        {
          uint64_t v49 = sub_A5D20();
          uint64_t v51 = v50;
          if (v49 != sub_A5DB0() || v51 != v52)
          {
            char v55 = sub_A7800();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v53 = *(void (**)(char *, uint64_t))(v41 + 8);
            v53(v47, v2);
            if ((v55 & 1) == 0)
            {
              v53(v42, v2);
              goto LABEL_20;
            }
            goto LABEL_33;
          }
          swift_bridgeObjectRelease_n();
        }
      }
      uint64_t v53 = *(void (**)(char *, uint64_t))(v41 + 8);
      v53(v47, v2);
LABEL_33:
      if (qword_D7E58 != -1) {
        swift_once();
      }
      *(void *)uint64_t v62 = AXLTSettingsManager.buttonScaledHeight.getter();
      sub_A6E70();
      *(void *)uint64_t v62 = 0;
      *(_OWORD *)&v62[8] = v64;
      LOBYTE(v63) = 1;
      sub_4C474();
      sub_4C4C8();
      swift_retain();
      sub_A6860();
      *(_OWORD *)uint64_t v62 = v64;
      *(void *)&v62[16] = v65;
      __int16 v63 = v66;
      sub_7AF4(&qword_D93C0);
      sub_4C44C();
      sub_A6860();
      swift_release();
      uint64_t v37 = *((void *)&v64 + 1);
      uint64_t v36 = v64;
      uint64_t v38 = v65;
      unsigned __int8 v39 = v66;
      char v40 = v67;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v53)(v42, v2);
      goto LABEL_40;
    }
  }
LABEL_37:
  if (qword_D7E58 != -1) {
    swift_once();
  }
  *(void *)uint64_t v62 = AXLTSettingsManager.buttonScaledHeight.getter();
  sub_A6E70();
  *(void *)uint64_t v62 = 0;
  *(_OWORD *)&v62[8] = v64;
  LOBYTE(v63) = 0;
  sub_4C474();
  sub_4C4C8();
  swift_retain();
  sub_A6860();
  *(_OWORD *)uint64_t v62 = v64;
  *(void *)&v62[16] = v65;
  __int16 v63 = v66;
  sub_7AF4(&qword_D93C0);
  sub_4C44C();
  sub_A6860();
  uint64_t result = swift_release();
  uint64_t v37 = *((void *)&v64 + 1);
  uint64_t v36 = v64;
  uint64_t v38 = v65;
  unsigned __int8 v39 = v66;
  char v40 = v67;
  uint64_t v34 = v61;
LABEL_40:
  *(void *)uint64_t v34 = v36;
  *(void *)(v34 + 8) = v37;
  *(void *)(v34 + 16) = v38;
  *(unsigned char *)(v34 + 24) = v39;
  *(unsigned char *)(v34 + 25) = v40;
  return result;
}

uint64_t sub_44FDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v66 = a1;
  uint64_t v70 = sub_A7520();
  uint64_t v72 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v69 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for LiveCaptionsCaptionTitle(0);
  uint64_t v71 = *(void *)(v4 - 8);
  uint64_t v67 = *(void *)(v71 + 64);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_7AF4(&qword_D9670);
  __chkstk_darwin(v7 - 8);
  id v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_7AF4(&qword_D9678);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_7AF4(&qword_D9680);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_7AF4(&qword_D9688);
  __chkstk_darwin(v63);
  uint64_t v64 = (uint64_t)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_7AF4(&qword_D9690);
  __chkstk_darwin(v68);
  uint64_t v65 = (uint64_t)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)id v9 = sub_A66A0();
  *((void *)v9 + 1) = 0x4020000000000000;
  unsigned char v9[16] = 0;
  uint64_t v20 = sub_7AF4(&qword_D9698);
  sub_45790(v2, (uint64_t)&v9[*(int *)(v20 + 44)]);
  uint64_t v21 = sub_A6DA0();
  uint64_t KeyPath = swift_getKeyPath();
  sub_8860((uint64_t)v9, (uint64_t)v13, &qword_D9670);
  uint64_t v23 = (uint64_t *)&v13[*(int *)(v11 + 44)];
  uint64_t *v23 = KeyPath;
  v23[1] = v21;
  sub_A35C((uint64_t)v9, &qword_D9670);
  sub_4C318((uint64_t)v2, (uint64_t)v6, type metadata accessor for LiveCaptionsCaptionTitle);
  uint64_t v24 = *(unsigned __int8 *)(v71 + 80);
  uint64_t v25 = (v24 + 16) & ~v24;
  uint64_t v26 = v25 + v67;
  uint64_t v27 = v24 | 7;
  uint64_t v28 = swift_allocObject();
  uint64_t v71 = v25;
  sub_4E9EC((uint64_t)v6, v28 + v25);
  sub_8860((uint64_t)v13, (uint64_t)v17, &qword_D9678);
  uint64_t v29 = *(int *)(v15 + 44);
  uint64_t v30 = (uint64_t)v17;
  uint64_t v31 = (uint64_t (**)())&v17[v29];
  double *v31 = sub_4EA50;
  v31[1] = (uint64_t (*)())v28;
  v31[2] = 0;
  v31[3] = 0;
  sub_A35C((uint64_t)v13, &qword_D9678);
  uint64_t v60 = (uint64_t (*)(void))self;
  id v32 = [v60 defaultCenter];
  if (qword_D7E10 != -1) {
    swift_once();
  }
  uint64_t v33 = v69;
  sub_A7530();

  sub_4C318((uint64_t)v2, (uint64_t)v6, type metadata accessor for LiveCaptionsCaptionTitle);
  uint64_t v34 = swift_allocObject();
  sub_4E9EC((uint64_t)v6, v34 + v71);
  uint64_t v35 = v26;
  uint64_t v36 = v64;
  sub_8860(v30, v64, &qword_D9680);
  uint64_t v37 = v63;
  uint64_t v38 = v36 + *(int *)(v63 + 52);
  uint64_t v61 = v2;
  uint64_t v62 = v6;
  uint64_t v67 = v27;
  uint64_t v39 = v72;
  uint64_t v40 = v70;
  uint64_t v59 = *(void (**)(uint64_t, char *, uint64_t))(v72 + 16);
  v59(v38, v33, v70);
  uint64_t v41 = (uint64_t (**)(uint64_t))(v36 + *(int *)(v37 + 56));
  *uint64_t v41 = sub_4EC20;
  v41[1] = (uint64_t (*)(uint64_t))v34;
  uint64_t v42 = v33;
  uint64_t v43 = v35;
  uint64_t v63 = *(void *)(v39 + 8);
  uint64_t v72 = v39 + 8;
  ((void (*)(char *, uint64_t))v63)(v42, v40);
  sub_A35C(v30, &qword_D9680);
  id v44 = [v60 defaultCenter];
  if (qword_D7E20 != -1) {
    swift_once();
  }
  uint64_t v45 = v69;
  sub_A7530();

  uint64_t v60 = type metadata accessor for LiveCaptionsCaptionTitle;
  uint64_t v47 = (uint64_t)v61;
  uint64_t v46 = (uint64_t)v62;
  sub_4C318((uint64_t)v61, (uint64_t)v62, type metadata accessor for LiveCaptionsCaptionTitle);
  uint64_t v48 = swift_allocObject();
  sub_4E9EC(v46, v48 + v71);
  uint64_t v49 = v65;
  sub_8860(v36, v65, &qword_D9688);
  uint64_t v50 = v68;
  uint64_t v51 = v49 + *(int *)(v68 + 52);
  uint64_t v58 = v43;
  uint64_t v52 = v70;
  v59(v51, v45, v70);
  uint64_t v53 = (uint64_t (**)(uint64_t))(v49 + *(int *)(v50 + 56));
  *uint64_t v53 = sub_4EC3C;
  v53[1] = (uint64_t (*)(uint64_t))v48;
  ((void (*)(char *, uint64_t))v63)(v45, v52);
  sub_A35C(v36, &qword_D9688);
  char v54 = *(void **)(v47 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v55 = v54;
  sub_A60D0();

  swift_release();
  swift_release();
  sub_4C318(v47, v46, v60);
  uint64_t v56 = swift_allocObject();
  sub_4E9EC(v46, v56 + v71);
  sub_7AF4(&qword_D9110);
  sub_A45C(&qword_D96A0, &qword_D9690);
  sub_28C78();
  sub_A6CF0();
  swift_release();
  swift_bridgeObjectRelease();
  return sub_A35C(v49, &qword_D9690);
}

uint64_t sub_45790@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v145 = a2;
  uint64_t v136 = sub_7AF4(&qword_D93B0);
  __chkstk_darwin(v136);
  uint64_t v141 = (uint64_t *)((char *)&v122 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = sub_7AF4(&qword_D9398);
  __chkstk_darwin(v4 - 8);
  uint64_t v139 = (char *)&v122 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = sub_7AF4(&qword_D96A8);
  __chkstk_darwin(v142);
  uint64_t v140 = (char *)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_7AF4(&qword_D96B0);
  __chkstk_darwin(v7 - 8);
  uint64_t v144 = (uint64_t)&v122 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v137 = (char *)&v122 - v10;
  __chkstk_darwin(v11);
  uint64_t v143 = (uint64_t)&v122 - v12;
  uint64_t v129 = sub_A5D50();
  uint64_t v128 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  uint64_t v122 = (char *)&v122 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_7AF4(&qword_D85F8);
  __chkstk_darwin(v14 - 8);
  uint64_t v127 = (char *)&v122 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_7AF4(&qword_D96B8);
  __chkstk_darwin(v16 - 8);
  uint64_t v138 = (uint64_t)&v122 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v131 = (char *)&v122 - v19;
  __chkstk_darwin(v20);
  uint64_t v147 = (uint64_t)&v122 - v21;
  uint64_t v22 = sub_A6E20();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v122 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = sub_7AF4(&qword_D8FC8);
  __chkstk_darwin(v130);
  uint64_t v27 = (char *)&v122 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v123 = (char *)&v122 - v29;
  __chkstk_darwin(v30);
  uint64_t v124 = (uint64_t)&v122 - v31;
  uint64_t v125 = sub_7AF4(&qword_D8FD0);
  __chkstk_darwin(v125);
  uint64_t v33 = (char *)&v122 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = type metadata accessor for LiveCaptionsAudioSourceCircleView(0);
  __chkstk_darwin(v126);
  uint64_t v35 = (char *)&v122 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_7AF4(&qword_D8FD8);
  __chkstk_darwin(v36 - 8);
  uint64_t v135 = (uint64_t)&v122 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  uint64_t v40 = (char *)&v122 - v39;
  char v41 = sub_46918();
  uint64_t v146 = v40;
  uint64_t v148 = a1;
  uint64_t v134 = v22;
  uint64_t v133 = v23;
  int v132 = v25;
  if (v41)
  {
    unint64_t v42 = a1[11];
    uint64_t v149 = a1[10];
    unint64_t v150 = v42;
    sub_7AF4(&qword_D8FB8);
    sub_A6E80();
    sub_A6E00();
    (*(void (**)(char *, void, uint64_t))(v23 + 104))(v25, enum case for Image.ResizingMode.stretch(_:), v22);
    uint64_t v43 = sub_A6E50();
    swift_release();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
    uint64_t v44 = type metadata accessor for LiveCaptionsCaptionTitle(0);
    uint64_t v45 = (void *)((char *)a1 + *(int *)(v44 + 52));
    unint64_t v47 = v45[1];
    uint64_t v149 = *v45;
    uint64_t v46 = v149;
    unint64_t v150 = v47;
    sub_7AF4(&qword_D8810);
    sub_A6E80();
    uint64_t v149 = v46;
    unint64_t v150 = v47;
    sub_A6E80();
    sub_A7030();
    a1 = v148;
    sub_A6270();
    uint64_t v149 = v43;
    unint64_t v150 = 0;
    LOWORD(v151) = 1;
    uint64_t v152 = v158;
    LOBYTE(v153) = v159;
    uint64_t v154 = v160;
    LOBYTE(v155) = v161;
    long long v156 = v162;
    sub_7AF4(&qword_D83C0);
    sub_105D8();
    sub_A6BC0();
    swift_release();
    uint64_t v48 = (uint64_t)v123;
    sub_A63F0();
    sub_A35C((uint64_t)v27, &qword_D8FC8);
    uint64_t v49 = v124;
    sub_29C10(v48, v124, &qword_D8FC8);
    sub_8860(v49, (uint64_t)v33, &qword_D8FC8);
    swift_storeEnumTagMultiPayload();
    sub_4D5D0(&qword_D8FE0, (void (*)(uint64_t))type metadata accessor for LiveCaptionsAudioSourceCircleView);
    sub_381E8();
    sub_A6860();
    sub_A35C(v49, &qword_D8FC8);
  }
  else
  {
    uint64_t v44 = type metadata accessor for LiveCaptionsCaptionTitle(0);
    sub_7AF4(&qword_D9598);
    sub_A6E80();
    sub_4C318((uint64_t)v35, (uint64_t)v33, type metadata accessor for LiveCaptionsAudioSourceCircleView);
    swift_storeEnumTagMultiPayload();
    sub_4D5D0(&qword_D8FE0, (void (*)(uint64_t))type metadata accessor for LiveCaptionsAudioSourceCircleView);
    sub_381E8();
    sub_A6860();
    sub_4C380((uint64_t)v35, type metadata accessor for LiveCaptionsAudioSourceCircleView);
  }
  type metadata accessor for LiveCaptionsCaptionTitle(0);
  sub_7AF4(&qword_D9598);
  uint64_t v50 = (uint64_t)v127;
  sub_A6E80();
  uint64_t v51 = v128;
  uint64_t v52 = v129;
  int v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v128 + 48))(v50, 1, v129);
  uint64_t v130 = v44;
  if (v53)
  {
    sub_A35C(v50, &qword_D85F8);
    uint64_t v54 = 0;
    unint64_t v55 = 0xE000000000000000;
  }
  else
  {
    uint64_t v56 = v122;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v122, v50, v52);
    sub_A35C(v50, &qword_D85F8);
    uint64_t v54 = sub_A5D20();
    unint64_t v55 = v57;
    (*(void (**)(char *, uint64_t))(v51 + 8))(v56, v52);
  }
  uint64_t v149 = v54;
  unint64_t v150 = v55;
  sub_FF30();
  uint64_t v58 = sub_A6B60();
  uint64_t v60 = v59;
  unint64_t v61 = a1[5];
  char v63 = v62 & 1;
  uint64_t v149 = a1[4];
  unint64_t v150 = v61;
  sub_7AF4(&qword_D8FB0);
  sub_A6E80();
  uint64_t v64 = sub_A6AE0();
  uint64_t v66 = v65;
  char v68 = v67;
  swift_release();
  sub_10024(v58, v60, v63);
  swift_bridgeObjectRelease();
  unint64_t v69 = v148[7];
  uint64_t v149 = v148[6];
  unint64_t v150 = v69;
  sub_7AF4(&qword_D8FA8);
  sub_A6E80();
  uint64_t v70 = sub_A6B00();
  uint64_t v72 = v71;
  char v74 = v73;
  uint64_t v76 = v75;
  swift_release();
  v74 &= 1u;
  sub_10024(v64, v66, v68 & 1);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v149 = v70;
  unint64_t v150 = v72;
  LOBYTE(v151) = v74;
  uint64_t v152 = v76;
  uint64_t v153 = 0x3FE999999999999ALL;
  uint64_t v154 = KeyPath;
  uint64_t v155 = 1;
  LOBYTE(v156) = 0;
  sub_7AF4(&qword_D96C0);
  sub_4ED78();
  uint64_t v78 = (uint64_t)v131;
  uint64_t v79 = v148;
  sub_A6BC0();
  sub_10024(v70, v72, v74);
  swift_release();
  swift_bridgeObjectRelease();
  sub_29C10(v78, v147, &qword_D96B8);
  sub_A6E10();
  uint64_t v80 = v133;
  uint64_t v81 = v132;
  uint64_t v82 = v134;
  (*(void (**)(char *, void, uint64_t))(v133 + 104))(v132, enum case for Image.ResizingMode.stretch(_:), v134);
  uint64_t v83 = sub_A6E50();
  swift_release();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v81, v82);
  unint64_t v84 = v79[9];
  uint64_t v149 = v79[8];
  unint64_t v150 = v84;
  sub_A6E80();
  uint64_t v85 = v157;
  uint64_t v86 = swift_getKeyPath();
  if (qword_D7E58 != -1) {
    swift_once();
  }
  id v87 = sub_A2D14();
  [v87 lineHeight];
  double v89 = v88;

  double v90 = *(double *)((char *)v79 + *(int *)(v130 + 44));
  id v91 = sub_A2D14();
  [v91 lineHeight];

  sub_A7030();
  sub_A6270();
  uint64_t v92 = v149;
  int v93 = v150;
  uint64_t v94 = v151;
  LODWORD(v132) = v152;
  uint64_t v131 = (char *)v153;
  uint64_t v130 = v154;
  uint64_t v95 = swift_getKeyPath();
  uint64_t v96 = static AXLTSettingsManager.shared;
  uint64_t v97 = OBJC_IVAR___AXLTSettingsManager__boldText;
  int v98 = *(unsigned __int8 *)(static AXLTSettingsManager.shared + OBJC_IVAR___AXLTSettingsManager__boldText);
  uint64_t v99 = v139;
  uint64_t v134 = v85;
  LODWORD(v148) = v93;
  uint64_t v133 = v94;
  if (v98 != 2)
  {
    if ((v98 & 1) == 0) {
      goto LABEL_12;
    }
LABEL_14:
    uint64_t v101 = v86;
    uint64_t v102 = v83;
    uint64_t v103 = (unsigned int *)&enum case for LegibilityWeight.bold(_:);
    goto LABEL_15;
  }
  int v100 = _AXSLiveCaptionsBoldTextEnabled();
  if (v100 == -1)
  {
    int v121 = _AXSEnhanceTextLegibilityEnabled();
    *(unsigned char *)(v96 + v97) = v121 != 0;
    if (!v121) {
      goto LABEL_12;
    }
    goto LABEL_14;
  }
  *(unsigned char *)(v96 + v97) = v100 == 1;
  if (v100 == 1) {
    goto LABEL_14;
  }
LABEL_12:
  uint64_t v101 = v86;
  uint64_t v102 = v83;
  uint64_t v103 = (unsigned int *)&enum case for LegibilityWeight.regular(_:);
LABEL_15:
  uint64_t v104 = *v103;
  uint64_t v105 = sub_A6460();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v105 - 8) + 104))(v99, v104, v105);
  sub_A6460();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v105 - 8) + 56))(v99, 0, 1, v105);
  uint64_t v106 = (uint64_t)v99;
  char v107 = v141;
  sub_8860(v106, (uint64_t)v141 + *(int *)(v136 + 28), &qword_D9398);
  uint64_t *v107 = v95;
  uint64_t v108 = (uint64_t)v140;
  sub_8860((uint64_t)v107, (uint64_t)&v140[*(int *)(v142 + 36)], &qword_D93B0);
  *(void *)uint64_t v108 = v102;
  *(void *)(v108 + 8) = 0;
  *(_WORD *)(v108 + 16) = 1;
  uint64_t v109 = v134;
  *(void *)(v108 + 24) = v101;
  *(void *)(v108 + 32) = v109;
  *(void *)(v108 + 40) = 0;
  *(double *)(v108 + 48) = v89 * v90;
  *(void *)(v108 + 56) = v92;
  *(unsigned char *)(v108 + 64) = (_BYTE)v148;
  *(void *)(v108 + 72) = v133;
  *(unsigned char *)(v108 + 80) = (_BYTE)v132;
  uint64_t v110 = v130;
  *(void *)(v108 + 88) = v131;
  *(void *)(v108 + 96) = v110;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_A35C((uint64_t)v107, &qword_D93B0);
  sub_A35C(v106, &qword_D9398);
  swift_release();
  swift_release();
  swift_release();
  sub_4EEB0();
  uint64_t v111 = (uint64_t)v137;
  sub_A6CA0();
  sub_A35C(v108, &qword_D96A8);
  uint64_t v112 = v143;
  sub_29C10(v111, v143, &qword_D96B0);
  uint64_t v113 = (uint64_t)v146;
  uint64_t v114 = v135;
  sub_8860((uint64_t)v146, v135, &qword_D8FD8);
  uint64_t v115 = v147;
  uint64_t v116 = v138;
  sub_8860(v147, v138, &qword_D96B8);
  uint64_t v117 = v144;
  sub_8860(v112, v144, &qword_D96B0);
  uint64_t v118 = v145;
  sub_8860(v114, v145, &qword_D8FD8);
  uint64_t v119 = sub_7AF4(&qword_D9730);
  sub_8860(v116, v118 + *(int *)(v119 + 48), &qword_D96B8);
  sub_8860(v117, v118 + *(int *)(v119 + 64), &qword_D96B0);
  sub_A35C(v112, &qword_D96B0);
  sub_A35C(v115, &qword_D96B8);
  sub_A35C(v113, &qword_D8FD8);
  sub_A35C(v117, &qword_D96B0);
  sub_A35C(v116, &qword_D96B8);
  return sub_A35C(v114, &qword_D8FD8);
}

uint64_t sub_46918()
{
  uint64_t v0 = sub_7AF4(&qword_D85F8);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_A5D50();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LiveCaptionsCaptionTitle(0);
  sub_7AF4(&qword_D9598);
  sub_A6E80();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_A35C((uint64_t)v2, &qword_D85F8);
    goto LABEL_25;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  uint64_t v7 = sub_A5D10();
  uint64_t v9 = v8;
  uint64_t v10 = sub_A5D20();
  uint64_t v12 = v11;
  if (v7 == sub_A71D0() && v9 == v13) {
    goto LABEL_22;
  }
  char v15 = sub_A7800();
  swift_bridgeObjectRelease();
  if (v15) {
    goto LABEL_23;
  }
  if (v10 == sub_A5DB0() && v12 == v16)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  char v18 = sub_A7800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v18) {
    goto LABEL_24;
  }
  if (v7 == sub_A5D80() && v9 == v19) {
    goto LABEL_23;
  }
  char v20 = sub_A7800();
  swift_bridgeObjectRelease();
  if (v20)
  {
LABEL_24:
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  if (v7 == sub_A71D0() && v9 == v21)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  char v22 = sub_A7800();
  swift_bridgeObjectRelease();
  if (v22) {
    goto LABEL_24;
  }
  if (v7 != sub_A71D0() || v9 != v23)
  {
    char v26 = sub_A7800();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    char v24 = v26 ^ 1;
    return v24 & 1;
  }
  swift_bridgeObjectRelease_n();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
LABEL_25:
  char v24 = 0;
  return v24 & 1;
}

uint64_t sub_46CB0(void *a1)
{
  uint64_t v2 = sub_A5D50();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  v28[0] = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_7AF4(&qword_D85F8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v28 - v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v28 - v12;
  uint64_t v14 = (void *)a1[1];
  swift_getKeyPath();
  swift_getKeyPath();
  id v15 = v14;
  sub_A60D0();

  swift_release();
  swift_release();
  uint64_t v16 = *(void *)(v29 + 16);
  if (v16)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v13, v29+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * (v16 - 1), v2);
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v13, v17, 1, v2);
  swift_bridgeObjectRelease();
  type metadata accessor for LiveCaptionsCaptionTitle(0);
  sub_8860((uint64_t)v13, (uint64_t)v10, &qword_D85F8);
  sub_7AF4(&qword_D9598);
  sub_A6E90();
  sub_A35C((uint64_t)v13, &qword_D85F8);
  sub_A6E80();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v7, 1, v2) == 1) {
    return sub_A35C((uint64_t)v7, &qword_D85F8);
  }
  uint64_t v19 = v28[0];
  (*(void (**)(void, char *, uint64_t))(v3 + 32))(v28[0], v7, v2);
  sub_47050(0, 0, 0, 0);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  if (!v21)
  {
    uint64_t v22 = sub_A5D10();
    uint64_t v24 = v23;
    if (qword_D7E58 != -1) {
      swift_once();
    }
    double v25 = AXLTSettingsManager.buttonScaledHeight.getter();
    id v26 = iconForBundleId(_:iconSize:)(v25, v22, v24);
    swift_bridgeObjectRelease();
    uint64_t v27 = a1[11];
    uint64_t v29 = a1[10];
    uint64_t v30 = v27;
    v28[1] = v26;
    sub_7AF4(&qword_D8FB8);
    sub_A6E90();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v19, v2);
}

uint64_t sub_47050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_7AF4(&qword_D85F8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_A5D50();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LiveCaptionsCaptionTitle(0);
  sub_7AF4(&qword_D9598);
  sub_A6E80();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_A35C((uint64_t)v10, &qword_D85F8);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
  uint64_t v16 = sub_A5D10();
  uint64_t v18 = v17;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v18 = a2;
  }
  else
  {
    a1 = v16;
  }
  uint64_t v19 = sub_A5D20();
  uint64_t v21 = v20;
  if (a4)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v21 = a4;
  }
  else
  {
    a3 = v19;
  }
  if (a1 == sub_A71D0() && v18 == v22) {
    goto LABEL_23;
  }
  char v24 = sub_A7800();
  swift_bridgeObjectRelease();
  if (v24)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return 0x6C6C69662E63696DLL;
  }
  if (a3 == sub_A5DB0() && v21 == v25)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  char v27 = sub_A7800();
  swift_bridgeObjectRelease();
  if (v27) {
    goto LABEL_24;
  }
  if (a1 == sub_A5D80() && v18 == v28)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v30 = sub_A7800();
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0)
    {
      if (a1 == sub_A71D0() && v18 == v32)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v33 = sub_A7800();
        swift_bridgeObjectRelease();
        if ((v33 & 1) == 0)
        {
          if (a1 == sub_A71D0() && v18 == v34)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            char v35 = sub_A7800();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v35 & 1) == 0)
            {
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
              return 0;
            }
          }
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
          return 0x6F63706F7470616CLL;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      return 0xD00000000000001ALL;
    }
  }
  swift_bridgeObjectRelease();
  if (AXDeviceIsPad()) {
    uint64_t v15 = 1684107369;
  }
  else {
    uint64_t v15 = 0x656E6F687069;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return v15;
}

uint64_t sub_47528(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_A58C0();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v8 = sub_A5DF0();
    sub_A7670();
    if (*(void *)(v4 + 16) && (unint64_t v5 = sub_85F3C((uint64_t)v9), (v6 & 1) != 0))
    {
      sub_10330(*(void *)(v4 + 56) + 32 * v5, (uint64_t)&v10);
    }
    else
    {
      long long v10 = 0u;
      long long v11 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_102DC((uint64_t)v9);
    if (*((void *)&v11 + 1))
    {
      uint64_t result = swift_dynamicCast();
      if (result)
      {
        uint64_t v7 = *(void *)(a2 + 40);
        v9[0] = *(void *)(a2 + 32);
        v9[1] = v7;
        *(void *)&long long v10 = v8;
        sub_7AF4(&qword_D8FB0);
        return sub_A6E90();
      }
    }
    else
    {
      return sub_A35C((uint64_t)&v10, &qword_D92A0);
    }
  }
  return result;
}

uint64_t sub_47634()
{
  if (qword_D7E58 != -1) {
    swift_once();
  }
  sub_A2D14();
  sub_A6AC0();
  sub_7AF4(&qword_D8FA8);
  sub_A6E90();
  AXLTSettingsManager.contentCategory.getter();
  uint64_t v0 = qword_D7DE8;
  uint64_t v2 = (NSString *)v1;
  if (v0 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_A6380();
  sub_7B38(v3, (uint64_t)qword_DF648);
  uint64_t v4 = sub_75128();
  char v5 = sub_A7550();

  if (v5)
  {
    char v6 = sub_75128();

    uint64_t v2 = v6;
  }
  if (qword_D7E50 != -1) {
    swift_once();
  }
  sub_A2F50((uint64_t)buttonFontStyle, UIFontWeightSemibold);

  sub_A6AC0();
  sub_A6E90();
  AXLTSettingsManager.contentCategory.getter();
  uint64_t v8 = (NSString *)v7;
  uint64_t v9 = sub_75128();
  char v10 = sub_A7550();

  if (v10)
  {
    long long v11 = sub_75128();

    uint64_t v8 = v11;
  }
  id v12 = sub_A2F50((uint64_t)buttonFontStyle, UIFontWeightBold);

  [v12 lineHeight];
  type metadata accessor for LiveCaptionsCaptionTitle(0);
  sub_7AF4(&qword_D8810);
  sub_A6E90();
  AXLTSettingsManager.contentCategory.getter();
  uint64_t v14 = v13;
  sub_A7540();

  sub_7AF4(&qword_D8380);
  return sub_A6E90();
}

uint64_t sub_4791C(uint64_t a1)
{
  uint64_t v2 = sub_A5D50();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  v35[0] = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_7AF4(&qword_D85F8);
  __chkstk_darwin(v5 - 8);
  id v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  char v10 = (char *)v35 - v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v35 - v12;
  uint64_t v14 = a1;
  uint64_t v15 = *(void **)(a1 + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  id v16 = v15;
  sub_A60D0();

  swift_release();
  swift_release();
  uint64_t v17 = *(void *)(v36 + 16);
  if (v17)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v13, v36+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * (v17 - 1), v2);
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v13, v18, 1, v2);
  swift_bridgeObjectRelease();
  type metadata accessor for LiveCaptionsCaptionTitle(0);
  uint64_t v19 = v14;
  sub_8860((uint64_t)v13, (uint64_t)v10, &qword_D85F8);
  sub_7AF4(&qword_D9598);
  sub_A6E90();
  sub_A35C((uint64_t)v13, &qword_D85F8);
  sub_A6E80();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v7, 1, v2) == 1) {
    return sub_A35C((uint64_t)v7, &qword_D85F8);
  }
  uint64_t v21 = v35[0];
  (*(void (**)(void, char *, uint64_t))(v3 + 32))(v35[0], v7, v2);
  uint64_t v22 = sub_A5D10();
  uint64_t v24 = v23;
  uint64_t v25 = sub_A5D20();
  sub_47050(v22, v24, v25, v26);
  uint64_t v28 = v27;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v28)
  {
    uint64_t v29 = sub_A5D10();
    uint64_t v31 = v30;
    if (qword_D7E58 != -1) {
      swift_once();
    }
    double v32 = AXLTSettingsManager.buttonScaledHeight.getter();
    id v33 = iconForBundleId(_:iconSize:)(v32, v29, v31);
    swift_bridgeObjectRelease();
    uint64_t v34 = *(void *)(v19 + 88);
    uint64_t v36 = *(void *)(v19 + 80);
    uint64_t v37 = v34;
    v35[1] = v33;
    sub_7AF4(&qword_D8FB8);
    sub_A6E90();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v21, v2);
}

uint64_t sub_47CF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v32 = a1;
  uint64_t v1 = sub_A6490();
  uint64_t v2 = v1 - 8;
  __chkstk_darwin(v1);
  uint64_t v31 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_7AF4(&qword_D88F0);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  id v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_A6FE0();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_7AF4(&qword_D9360);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_A6750();
  sub_48060((uint64_t)v33);
  v34[296] = 1;
  memcpy(&v34[7], v33, 0x121uLL);
  v35[0] = v16;
  v35[1] = 0;
  LOBYTE(v35[2]) = 1;
  memcpy((char *)&v35[2] + 1, v34, 0x128uLL);
  sub_A6FC0();
  LOBYTE(v16) = sub_A6A10();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v7, v11, v8);
  v7[*(int *)(v5 + 44)] = v16;
  sub_8860((uint64_t)v7, (uint64_t)&v15[*(int *)(v13 + 44)], &qword_D88F0);
  memcpy(v15, v35, 0x139uLL);
  sub_4C0C4((uint64_t)v35);
  sub_A35C((uint64_t)v7, &qword_D88F0);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_4C138((uint64_t)v33);
  uint64_t v17 = *(int *)(v2 + 28);
  uint64_t v18 = v31;
  uint64_t v19 = &v31[v17];
  uint64_t v20 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v21 = sub_A66E0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(v19, v20, v21);
  __asm { FMOV            V0.2D, #20.0 }
  *uint64_t v18 = _Q0;
  uint64_t v27 = sub_7AF4(&qword_D9368);
  uint64_t v28 = v32;
  uint64_t v29 = v32 + *(int *)(v27 + 36);
  sub_4C318((uint64_t)v18, v29, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v29 + *(int *)(sub_7AF4(&qword_D8188) + 36)) = 256;
  sub_8860((uint64_t)v15, v28, &qword_D9360);
  sub_4C380((uint64_t)v18, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  return sub_A35C((uint64_t)v15, &qword_D9360);
}

uint64_t sub_48060@<X0>(uint64_t a1@<X8>)
{
  LOBYTE(v40) = 0;
  sub_A6E70();
  char v29 = v47;
  uint64_t v2 = v48;
  sub_A7030();
  sub_A6270();
  [objc_allocWithZone((Class)UIColor) initWithWhite:0.2 alpha:1.0];
  uint64_t v3 = sub_A6DF0();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v5 = sub_A6750();
  sub_4834C((uint64_t)v36);
  *(_OWORD *)&v37[87] = v36[5];
  *(_OWORD *)&v37[103] = v36[6];
  *(_OWORD *)&v37[119] = v36[7];
  *(_OWORD *)&v37[135] = v36[8];
  *(_OWORD *)&v37[23] = v36[1];
  *(_OWORD *)&v37[39] = v36[2];
  *(_OWORD *)&v37[55] = v36[3];
  *(_OWORD *)&v37[71] = v36[4];
  char v38 = 1;
  *(_OWORD *)&v37[7] = v36[0];
  char v6 = sub_A6A30();
  sub_A6140();
  long long v40 = (unint64_t)v5;
  v41[0] = 1;
  long long v7 = *(_OWORD *)&v37[112];
  *(_OWORD *)&v41[97] = *(_OWORD *)&v37[96];
  long long v8 = *(_OWORD *)&v37[96];
  *(_OWORD *)&v41[113] = *(_OWORD *)&v37[112];
  long long v9 = *(_OWORD *)&v37[128];
  *(_OWORD *)&v41[129] = *(_OWORD *)&v37[128];
  *(void *)&v41[144] = *(void *)&v37[143];
  long long v10 = *(_OWORD *)&v37[48];
  *(_OWORD *)&v41[33] = *(_OWORD *)&v37[32];
  long long v11 = *(_OWORD *)&v37[32];
  *(_OWORD *)&v41[49] = *(_OWORD *)&v37[48];
  long long v12 = *(_OWORD *)&v37[80];
  *(_OWORD *)&v41[65] = *(_OWORD *)&v37[64];
  long long v13 = *(_OWORD *)&v37[64];
  *(_OWORD *)&v41[81] = *(_OWORD *)&v37[80];
  long long v14 = *(_OWORD *)&v37[16];
  *(_OWORD *)&v41[1] = *(_OWORD *)v37;
  long long v15 = *(_OWORD *)v37;
  *(_OWORD *)&v41[17] = *(_OWORD *)&v37[16];
  v41[152] = v6;
  *(void *)&long long v42 = v16;
  *((void *)&v42 + 1) = v17;
  *(void *)&long long v43 = v18;
  *((void *)&v43 + 1) = v19;
  long long v20 = *(_OWORD *)&v41[96];
  *(_OWORD *)(a1 + 176) = *(_OWORD *)&v41[80];
  *(_OWORD *)(a1 + 192) = v20;
  long long v21 = *(_OWORD *)&v41[128];
  *(_OWORD *)(a1 + 208) = *(_OWORD *)&v41[112];
  *(_OWORD *)(a1 + 224) = v21;
  long long v22 = *(_OWORD *)&v41[32];
  *(_OWORD *)(a1 + 112) = *(_OWORD *)&v41[16];
  *(_OWORD *)(a1 + 128) = v22;
  long long v23 = *(_OWORD *)&v41[64];
  *(_OWORD *)(a1 + 144) = *(_OWORD *)&v41[48];
  *(_OWORD *)(a1 + 160) = v23;
  long long v24 = *(_OWORD *)v41;
  *(_OWORD *)(a1 + 80) = v40;
  *(_OWORD *)(a1 + 96) = v24;
  long long v25 = v42;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)&v41[144];
  *(_OWORD *)(a1 + 256) = v25;
  *(_OWORD *)(a1 + 272) = v43;
  long long v50 = v15;
  long long v51 = v14;
  long long v55 = v12;
  long long v54 = v13;
  long long v53 = v10;
  char v39 = 0;
  char v44 = 0;
  char v46 = v31;
  char v45 = v33;
  *(unsigned char *)(a1 + 288) = 0;
  char v26 = v46;
  char v27 = v45;
  *(unsigned char *)a1 = v29;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v30;
  *(unsigned char *)(a1 + 24) = v26;
  *(void *)(a1 + 32) = v32;
  *(unsigned char *)(a1 + 40) = v27;
  *(void *)(a1 + 48) = v34;
  *(void *)(a1 + 56) = v35;
  *(void *)(a1 + 64) = KeyPath;
  *(void *)(a1 + 72) = v3;
  uint64_t v47 = v5;
  uint64_t v48 = 0;
  char v49 = 1;
  long long v52 = v11;
  *(void *)&v58[15] = *(void *)&v37[143];
  *(_OWORD *)uint64_t v58 = v9;
  long long v57 = v7;
  long long v56 = v8;
  char v59 = v6;
  uint64_t v60 = v16;
  uint64_t v61 = v17;
  uint64_t v62 = v18;
  uint64_t v63 = v19;
  char v64 = 0;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_4C1B4((uint64_t)&v40);
  sub_4C200((uint64_t)&v47);
  swift_release();
  swift_release();
  return swift_release();
}

__n128 sub_4834C@<Q0>(uint64_t a1@<X8>)
{
  sub_A6E70();
  sub_A7030();
  sub_A6270();
  uint64_t v2 = sub_A6D90();
  char v3 = sub_A6A10();
  sub_A6E70();
  *(unsigned char *)a1 = 0;
  __asm { FMOV            V0.2D, #16.0 }
  *(__n128 *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v12;
  *(unsigned char *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = v14;
  *(void *)(a1 + 80) = v15;
  *(void *)(a1 + 88) = v2;
  *(unsigned char *)(a1 + 96) = v3;
  *(unsigned char *)(a1 + 104) = 1;
  *(__n128 *)(a1 + 112) = result;
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v9;
  return result;
}

uint64_t sub_48470@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v94 = a2;
  char v4 = a1;
  int v97 = a1;
  uint64_t v121 = a3;
  uint64_t v5 = sub_A7520();
  uint64_t v119 = *(void *)(v5 - 8);
  uint64_t v120 = v5;
  __chkstk_darwin(v5);
  uint64_t v118 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_A6740();
  uint64_t v100 = *(void *)(v110 - 8);
  uint64_t v101 = v110 - 8;
  uint64_t v102 = v100;
  __chkstk_darwin(v110 - 8);
  char v107 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_A69A0();
  uint64_t v98 = *(void *)(v8 - 8);
  uint64_t v99 = v8;
  __chkstk_darwin(v8);
  uint64_t v96 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = sub_7AF4(&qword_D94E8);
  uint64_t v108 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  uint64_t v95 = (char *)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = sub_7AF4(&qword_D94F0);
  __chkstk_darwin(v106);
  uint64_t v103 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v104 = (char *)&v80 - v13;
  __chkstk_darwin(v14);
  uint64_t v109 = (char *)&v80 - v15;
  uint64_t v112 = sub_7AF4(&qword_D94F8) - 8;
  __chkstk_darwin(v112);
  uint64_t v111 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = sub_7AF4(&qword_D9500);
  __chkstk_darwin(v117);
  uint64_t v116 = (uint64_t)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_7AF4(&qword_D9508);
  uint64_t v114 = *(void *)(v18 - 8);
  uint64_t v115 = v18;
  __chkstk_darwin(v18);
  uint64_t v113 = (char *)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = sub_A66A0();
  sub_48F34(v4, v3, (uint64_t)v129);
  uint64_t v91 = v129[1];
  uint64_t v92 = v129[0];
  char v20 = v129[2];
  uint64_t v89 = v129[4];
  uint64_t v90 = v129[3];
  char v21 = v129[5];
  int v88 = LOBYTE(v129[6]);
  uint64_t v87 = v129[7];
  uint64_t v86 = v129[8];
  int v85 = sub_A6A40();
  sub_A6140();
  uint64_t v83 = v23;
  uint64_t v84 = v22;
  uint64_t v81 = v25;
  uint64_t v82 = v24;
  char v126 = 1;
  char v125 = v20;
  char v124 = v21;
  char v123 = 0;
  char v26 = sub_A6A60();
  sub_A6140();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  char v35 = v126;
  LOBYTE(v3) = v125;
  char v36 = v124;
  char v37 = v123;
  char v127 = 0;
  char v38 = sub_A6A20();
  sub_A6140();
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  char v47 = v127;
  char v128 = 0;
  uint64_t v48 = sub_A6DA0();
  uint64_t KeyPath = swift_getKeyPath();
  v122[0] = v93;
  v122[1] = 0;
  LOBYTE(v122[2]) = v35;
  v122[3] = v92;
  v122[4] = v91;
  LOBYTE(v122[5]) = v3;
  v122[6] = v90;
  v122[7] = v89;
  LOBYTE(v122[8]) = v36;
  LOBYTE(v122[9]) = v88;
  v122[10] = v87;
  v122[11] = v86;
  LOBYTE(v122[12]) = v85;
  v122[13] = v84;
  v122[14] = v83;
  v122[15] = v82;
  v122[16] = v81;
  LOBYTE(v122[17]) = v37;
  LOBYTE(v122[18]) = v26;
  v122[19] = v28;
  v122[20] = v30;
  v122[21] = v32;
  v122[22] = v34;
  LOBYTE(v122[23]) = v47;
  LOBYTE(v122[24]) = v38;
  v122[25] = v40;
  v122[26] = v42;
  v122[27] = v44;
  v122[28] = v46;
  LOBYTE(v122[29]) = v128;
  v122[30] = KeyPath;
  v122[31] = v48;
  LOBYTE(v122[32]) = 0;
  long long v50 = v96;
  sub_A6990();
  uint64_t v51 = sub_7AF4(&qword_D9510);
  unint64_t v52 = sub_4D240();
  long long v53 = v95;
  sub_A6C70();
  (*(void (**)(char *, uint64_t))(v98 + 8))(v50, v99);
  memcpy(v129, v122, 0x101uLL);
  sub_4D4E4((uint64_t)v129);
  sub_7AF4(&qword_D9018);
  uint64_t v54 = v102;
  uint64_t v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = xmmword_A9C60;
  sub_A6730();
  v122[0] = v55;
  sub_4D5D0(&qword_D9020, (void (*)(uint64_t))&type metadata accessor for AccessibilityTraits);
  sub_7AF4(&qword_D9028);
  sub_A45C(&qword_D9030, &qword_D9028);
  long long v56 = v107;
  uint64_t v57 = v94;
  uint64_t v58 = v110;
  sub_A7640();
  v122[0] = v51;
  v122[1] = v52;
  swift_getOpaqueTypeConformance2();
  uint64_t v59 = (uint64_t)v103;
  uint64_t v60 = v105;
  sub_A6C90();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v56, v58);
  (*(void (**)(char *, uint64_t))(v108 + 8))(v53, v60);
  uint64_t v61 = (uint64_t)v104;
  sub_A63E0();
  sub_A35C(v59, &qword_D94F0);
  int v62 = v97 & 1;
  LOBYTE(v122[0]) = v97;
  LOBYTE(v54) = v97;
  v122[1] = v57;
  sub_7AF4(&qword_D8380);
  sub_A6E80();
  uint64_t v63 = (uint64_t)v109;
  sub_A6410();
  swift_bridgeObjectRelease();
  sub_A35C(v61, &qword_D94F0);
  uint64_t v64 = swift_allocObject();
  *(unsigned char *)(v64 + 16) = v54;
  uint64_t v65 = (uint64_t)v111;
  *(void *)(v64 + 24) = v57;
  sub_8860(v63, v65, &qword_D94F0);
  uint64_t v66 = (uint64_t (**)())(v65 + *(int *)(v112 + 44));
  char *v66 = sub_4D58C;
  v66[1] = (uint64_t (*)())v64;
  v66[2] = 0;
  v66[3] = 0;
  swift_retain();
  sub_A35C(v63, &qword_D94F0);
  id v67 = [self defaultCenter];
  if (qword_D7E08 != -1) {
    swift_once();
  }
  char v68 = v118;
  sub_A7530();

  uint64_t v69 = swift_allocObject();
  *(unsigned char *)(v69 + 16) = v62;
  *(void *)(v69 + 24) = v57;
  LODWORD(v112) = v62;
  uint64_t v70 = v116;
  sub_8860(v65, v116, &qword_D94F8);
  uint64_t v71 = v117;
  uint64_t v72 = v119;
  uint64_t v73 = v65;
  uint64_t v74 = v120;
  (*(void (**)(uint64_t, char *, uint64_t))(v119 + 16))(v70 + *(int *)(v117 + 52), v68, v120);
  uint64_t v75 = (uint64_t (**)(uint64_t))(v70 + *(int *)(v71 + 56));
  *uint64_t v75 = sub_4D598;
  v75[1] = (uint64_t (*)(uint64_t))v69;
  uint64_t v76 = *(void (**)(char *, uint64_t))(v72 + 8);
  swift_retain();
  v76(v68, v74);
  sub_A35C(v73, &qword_D94F8);
  uint64_t v77 = swift_allocObject();
  *(unsigned char *)(v77 + 16) = v112;
  *(void *)(v77 + 24) = v57;
  sub_A45C(&qword_D9570, &qword_D9500);
  swift_retain();
  uint64_t v78 = v113;
  sub_A6BA0();
  swift_release();
  sub_A35C(v70, &qword_D9500);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v114 + 32))(v121, v78, v115);
}

uint64_t sub_48F34@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5 = a1 & 1;
  sub_7AF4(&qword_D8380);
  sub_A6E80();
  if (v15 == 1)
  {
    v6._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v6._object = (void *)0x80000000000AE890;
  }
  else
  {
    v6._object = (void *)0x80000000000AE870;
    v6._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  }
  uint64_t v16 = sub_A5F90(v6);
  sub_FF30();
  uint64_t v7 = sub_A6B60();
  uint64_t v9 = v8;
  char v11 = v10;
  uint64_t v13 = v12;
  LOBYTE(v16) = v5;
  sub_A6E80();
  if (qword_D7E58 != -1) {
    swift_once();
  }
  AXLTSettingsManager.buttonScaledHeight.getter();
  sub_A6E70();
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v11 & 1;
  *(void *)(a3 + 24) = v13;
  *(void *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 40) = 1;
  *(unsigned char *)(a3 + 48) = v15;
  *(void *)(a3 + 56) = v16;
  *(void *)(a3 + 64) = a2;
  sub_4D230(v7, v9, v11 & 1);
  swift_bridgeObjectRetain();
  sub_10024(v7, v9, v11 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_490EC()
{
  if (qword_D7D98 != -1) {
    swift_once();
  }
  swift_beginAccess();
  sub_7AF4(&qword_D8380);
  return sub_A6E90();
}

uint64_t sub_491B8(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t result = sub_A58C0();
  if (result)
  {
    uint64_t v6 = result;
    char v9 = sub_A5DF0();
    sub_A7670();
    if (*(void *)(v6 + 16) && (unint64_t v7 = sub_85F3C((uint64_t)v10), (v8 & 1) != 0))
    {
      sub_10330(*(void *)(v6 + 56) + 32 * v7, (uint64_t)&v12);
    }
    else
    {
      long long v12 = 0u;
      long long v13 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_102DC((uint64_t)v10);
    if (*((void *)&v13 + 1))
    {
      uint64_t result = swift_dynamicCast();
      if (result)
      {
        v10[0] = a2 & 1;
        uint64_t v11 = a3;
        LOBYTE(v12) = v9;
        sub_7AF4(&qword_D8380);
        return sub_A6E90();
      }
    }
    else
    {
      return sub_A35C((uint64_t)&v12, &qword_D92A0);
    }
  }
  return result;
}

uint64_t sub_492D4()
{
  return _AXSLiveTranscriptionSetPaused();
}

uint64_t sub_49328@<X0>(uint64_t a1@<X8>)
{
  return sub_48470(*v1, *((void *)v1 + 1), a1);
}

uint64_t sub_49334@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v35 = a3;
  uint64_t v33 = sub_A7520();
  uint64_t v7 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  char v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_A6E20();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  long long v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_7AF4(&qword_D9430);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v32 = a1;
  sub_A6E10();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for Image.ResizingMode.stretch(_:), v10);
  uint64_t v31 = sub_A6E50();
  swift_release();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  double v36 = a4;
  uint64_t v37 = a2;
  sub_7AF4(&qword_D8810);
  sub_A6E80();
  double v36 = a4;
  uint64_t v34 = a2;
  uint64_t v37 = a2;
  sub_A6E80();
  sub_A7030();
  sub_A6270();
  double v17 = v36;
  char v18 = v37;
  uint64_t v19 = v38;
  int v30 = v39;
  uint64_t v28 = v41;
  uint64_t v29 = v40;
  id v20 = [self defaultCenter];
  if (qword_D7E20 != -1) {
    swift_once();
  }
  sub_A7530();

  uint64_t v21 = swift_allocObject();
  *(unsigned char *)(v21 + 16) = v32 & 1;
  *(double *)(v21 + 24) = a4;
  uint64_t v22 = v33;
  *(void *)(v21 + 32) = v34;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&v16[*(int *)(v14 + 52)], v9, v22);
  *(void *)uint64_t v16 = v31;
  *((void *)v16 + 1) = 0;
  *((_WORD *)v16 + 8) = 1;
  *((double *)v16 + 3) = v17;
  v16[32] = v18;
  *((void *)v16 + 5) = v19;
  v16[48] = v30;
  uint64_t v23 = v28;
  *((void *)v16 + 7) = v29;
  *((void *)v16 + 8) = v23;
  uint64_t v24 = (uint64_t (**)())&v16[*(int *)(v14 + 56)];
  *uint64_t v24 = sub_4CEF8;
  v24[1] = (uint64_t (*)())v21;
  uint64_t v25 = *(void (**)(char *, uint64_t))(v7 + 8);
  swift_retain();
  v25(v9, v22);
  return sub_29C10((uint64_t)v16, v35, &qword_D9430);
}

uint64_t sub_49754()
{
  if (qword_D7E58 != -1) {
    swift_once();
  }
  AXLTSettingsManager.buttonScaledHeight.getter();
  sub_7AF4(&qword_D8810);
  return sub_A6E90();
}

uint64_t sub_497EC@<X0>(uint64_t a1@<X8>)
{
  return sub_49334(*v1, *((void *)v1 + 2), a1, *((double *)v1 + 1));
}

uint64_t sub_497FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v74 = a1;
  uint64_t v3 = sub_A7520();
  uint64_t v72 = *(void *)(v3 - 8);
  uint64_t v73 = v3;
  __chkstk_darwin(v3);
  uint64_t v71 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_A6740();
  uint64_t v60 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v63 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_A69A0();
  uint64_t v53 = *(void *)(v6 - 8);
  uint64_t v54 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_7AF4(&qword_D9450);
  uint64_t v59 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_7AF4(&qword_D9458);
  __chkstk_darwin(v56);
  uint64_t v55 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  int v62 = (char *)&v53 - v13;
  uint64_t v58 = sub_7AF4(&qword_D9460);
  __chkstk_darwin(v58);
  uint64_t v65 = (uint64_t)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_7AF4(&qword_D9468);
  __chkstk_darwin(v70);
  uint64_t v68 = (uint64_t)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_7AF4(&qword_D9470);
  uint64_t v67 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v66 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_A66A0();
  sub_4A234((unsigned __int8 *)v2, (uint64_t)v78);
  *(_OWORD *)&v79[135] = v78[8];
  *(_OWORD *)&v79[151] = v78[9];
  *(_OWORD *)&v79[167] = v78[10];
  *(_OWORD *)&v79[183] = v78[11];
  *(_OWORD *)&v79[71] = v78[4];
  *(_OWORD *)&v79[87] = v78[5];
  *(_OWORD *)&v79[103] = v78[6];
  *(_OWORD *)&v79[119] = v78[7];
  *(_OWORD *)&v79[7] = v78[0];
  *(_OWORD *)&v79[23] = v78[1];
  *(_OWORD *)&v79[39] = v78[2];
  char v80 = 1;
  *(_OWORD *)&v79[55] = v78[3];
  uint64_t v18 = sub_A6DA0();
  uint64_t KeyPath = swift_getKeyPath();
  char v20 = sub_A6A60();
  sub_A6140();
  *(_OWORD *)((char *)&v77[10] + 1) = *(_OWORD *)&v79[144];
  *(_OWORD *)((char *)&v77[11] + 1) = *(_OWORD *)&v79[160];
  *(_OWORD *)((char *)&v77[12] + 1) = *(_OWORD *)&v79[176];
  *(_OWORD *)((char *)&v77[6] + 1) = *(_OWORD *)&v79[80];
  *(_OWORD *)((char *)&v77[7] + 1) = *(_OWORD *)&v79[96];
  *(_OWORD *)((char *)&v77[8] + 1) = *(_OWORD *)&v79[112];
  *(_OWORD *)((char *)&v77[9] + 1) = *(_OWORD *)&v79[128];
  *(_OWORD *)((char *)&v77[2] + 1) = *(_OWORD *)&v79[16];
  *(_OWORD *)((char *)&v77[3] + 1) = *(_OWORD *)&v79[32];
  *(_OWORD *)((char *)&v77[4] + 1) = *(_OWORD *)&v79[48];
  *(_OWORD *)((char *)&v77[5] + 1) = *(_OWORD *)&v79[64];
  char v81 = 0;
  v77[0] = (unint64_t)v17;
  LOBYTE(v77[1]) = 1;
  *(_OWORD *)((char *)&v77[1] + 1) = *(_OWORD *)v79;
  *(void *)&v77[13] = *(void *)&v79[191];
  *((void *)&v77[13] + 1) = KeyPath;
  *(void *)&v77[14] = v18;
  BYTE8(v77[14]) = v20;
  *(void *)&v77[15] = v21;
  *((void *)&v77[15] + 1) = v22;
  *(void *)&v77[16] = v23;
  *((void *)&v77[16] + 1) = v24;
  LOWORD(v77[17]) = 0;
  sub_A6990();
  uint64_t v25 = sub_7AF4(&qword_D9478);
  unint64_t v26 = sub_4CF08();
  uint64_t v57 = v10;
  sub_A6C70();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v8, v54);
  memcpy(v82, v77, 0x112uLL);
  sub_4D114((uint64_t)v82);
  v77[0] = *(_OWORD *)(v2 + 24);
  long long v75 = *(_OWORD *)(v2 + 24);
  sub_7AF4(&qword_D8380);
  sub_A6E80();
  if (v76 == 1)
  {
    sub_7AF4(&qword_D9018);
    uint64_t v27 = v60;
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_A9C60;
    sub_A66F0();
    *(void *)&long long v75 = v28;
    sub_4D5D0(&qword_D9020, (void (*)(uint64_t))&type metadata accessor for AccessibilityTraits);
    sub_7AF4(&qword_D9028);
    sub_A45C(&qword_D9030, &qword_D9028);
    uint64_t v29 = v63;
    uint64_t v30 = v64;
    sub_A7640();
    uint64_t v31 = v27;
  }
  else
  {
    *(void *)&long long v75 = _swiftEmptyArrayStorage;
    sub_4D5D0(&qword_D9020, (void (*)(uint64_t))&type metadata accessor for AccessibilityTraits);
    sub_7AF4(&qword_D9028);
    sub_A45C(&qword_D9030, &qword_D9028);
    uint64_t v29 = v63;
    uint64_t v30 = v64;
    sub_A7640();
    uint64_t v31 = v60;
  }
  *(void *)&long long v75 = v25;
  *((void *)&v75 + 1) = v26;
  swift_getOpaqueTypeConformance2();
  uint64_t v32 = (uint64_t)v55;
  uint64_t v33 = v61;
  uint64_t v34 = v57;
  sub_A6C90();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v29, v30);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v34, v33);
  uint64_t v35 = (uint64_t)v62;
  sub_A63E0();
  sub_A35C(v32, &qword_D9458);
  uint64_t v36 = swift_allocObject();
  long long v37 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v36 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v36 + 32) = v37;
  *(void *)(v36 + 48) = *(void *)(v2 + 32);
  uint64_t v38 = v65;
  sub_8860(v35, v65, &qword_D9458);
  unsigned __int8 v39 = (uint64_t (**)())(v38 + *(int *)(v58 + 36));
  *unsigned __int8 v39 = sub_4D214;
  v39[1] = (uint64_t (*)())v36;
  v39[2] = 0;
  v39[3] = 0;
  sub_29C10((uint64_t)v77 + 8, (uint64_t)&v75, &qword_D94B8);
  sub_A1F0((uint64_t)&v75);
  sub_A35C(v35, &qword_D9458);
  id v40 = [self defaultCenter];
  if (qword_D7E00 != -1) {
    swift_once();
  }
  uint64_t v41 = v71;
  sub_A7530();

  uint64_t v42 = swift_allocObject();
  long long v43 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v42 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v42 + 32) = v43;
  *(void *)(v42 + 48) = *(void *)(v2 + 32);
  uint64_t v44 = v68;
  sub_8860(v38, v68, &qword_D9460);
  uint64_t v45 = v70;
  uint64_t v47 = v72;
  uint64_t v46 = v73;
  (*(void (**)(uint64_t, char *, uint64_t))(v72 + 16))(v44 + *(int *)(v70 + 52), v41, v73);
  uint64_t v48 = (uint64_t (**)(uint64_t))(v44 + *(int *)(v45 + 56));
  *uint64_t v48 = sub_4D21C;
  v48[1] = (uint64_t (*)(uint64_t))v42;
  sub_A1F0((uint64_t)&v75);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v41, v46);
  sub_A35C(v38, &qword_D9460);
  uint64_t v49 = swift_allocObject();
  long long v50 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v49 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v49 + 32) = v50;
  *(void *)(v49 + 48) = *(void *)(v2 + 32);
  sub_A1F0((uint64_t)&v75);
  sub_A45C(&qword_D94C0, &qword_D9468);
  uint64_t v51 = v66;
  sub_A6BA0();
  swift_release();
  sub_A35C(v44, &qword_D9468);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v67 + 32))(v74, v51, v69);
}

uint64_t sub_4A234@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_A6E20();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = a1;
  long long v89 = *(_OWORD *)(a1 + 24);
  sub_7AF4(&qword_D8380);
  sub_A6E80();
  if (LOBYTE(v75) == 1)
  {
    sub_A6E10();
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Image.ResizingMode.stretch(_:), v4);
    uint64_t v72 = sub_A6E50();
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_A7030();
    sub_A6270();
    uint64_t v71 = v104;
    uint64_t v8 = v105;
    uint64_t v9 = v106;
    uint64_t v10 = v107;
    uint64_t v12 = v108;
    uint64_t v11 = v109;
    unsigned __int8 v13 = sub_A6A40();
    sub_A6140();
    double v75 = *(double *)&v72;
    long long v76 = xmmword_AA110;
    uint64_t v77 = v71;
    uint64_t v78 = v8;
    uint64_t v79 = v9;
    uint64_t v80 = v10;
    uint64_t v81 = v12;
    uint64_t v82 = v11;
    uint64_t v83 = v13;
    uint64_t v84 = v14;
    uint64_t v85 = v15;
    uint64_t v86 = v16;
    uint64_t v87 = v17;
    __int16 v88 = 0;
  }
  else
  {
    uint64_t v72 = sub_A6D90();
    sub_A7030();
    sub_A6270();
    uint64_t v71 = v104;
    uint64_t v18 = v105;
    uint64_t v19 = v106;
    uint64_t v20 = v107;
    uint64_t v22 = v108;
    uint64_t v21 = v109;
    unsigned __int8 v23 = sub_A6A40();
    sub_A6140();
    double v75 = *(double *)&v72;
    *(void *)&long long v76 = 256;
    *((void *)&v76 + 1) = v71;
    uint64_t v77 = v18;
    uint64_t v78 = v19;
    uint64_t v79 = v20;
    uint64_t v80 = v22;
    uint64_t v81 = v21;
    uint64_t v82 = v23;
    uint64_t v83 = v24;
    uint64_t v84 = v25;
    uint64_t v85 = v26;
    uint64_t v86 = v27;
    uint64_t v87 = 0;
    __int16 v88 = 256;
  }
  sub_7AF4(&qword_D94C8);
  sub_7AF4(&qword_D94D0);
  sub_4CFD4(&qword_D94D8, &qword_D94C8, (void (*)(void))sub_105D8);
  sub_4CFD4(&qword_D94E0, &qword_D94D0, (void (*)(void))sub_29B68);
  sub_A6860();
  uint64_t v71 = *((void *)&v89 + 1);
  uint64_t v72 = v89;
  uint64_t v28 = v91;
  uint64_t v29 = v92;
  uint64_t v30 = v93;
  uint64_t v31 = v94;
  uint64_t v69 = v96;
  uint64_t v70 = v95;
  uint64_t v67 = v90;
  uint64_t v68 = v97;
  uint64_t v64 = v99;
  uint64_t v65 = v98;
  uint64_t v62 = v101;
  uint64_t v63 = v100;
  int v61 = v102;
  char v32 = v103;
  LODWORD(v66) = *v66;
  if (v66)
  {
    if (AXDeviceIsPad())
    {
      v33._object = (void *)0x80000000000AE810;
      v33._uint64_t countAndFlagsBits = 0xD000000000000015;
      goto LABEL_10;
    }
    v33._uint64_t countAndFlagsBits = 0xD000000000000017;
    uint64_t v34 = "LiveCaptionsiPhoneAudio";
  }
  else
  {
    v33._uint64_t countAndFlagsBits = 0xD000000000000016;
    uint64_t v34 = "LiveCaptionsMicrophone";
  }
  v33._object = (void *)((unint64_t)(v34 - 32) | 0x8000000000000000);
LABEL_10:
  *(void *)&long long v89 = sub_A5F90(v33);
  *((void *)&v89 + 1) = v35;
  sub_FF30();
  uint64_t v36 = sub_A6B60();
  uint64_t v58 = v37;
  uint64_t v59 = v36;
  char v39 = v38;
  uint64_t v60 = v40;
  if (qword_D7E58 != -1) {
    swift_once();
  }
  char v41 = v39 & 1;
  double v75 = AXLTSettingsManager.buttonScaledHeight.getter();
  sub_A6E70();
  long long v42 = v89;
  char v73 = v32;
  LOBYTE(v89) = v32;
  LOBYTE(v75) = v39 & 1;
  char v74 = 1;
  uint64_t v43 = v72;
  *(void *)a2 = v72;
  uint64_t v72 = v43;
  uint64_t v44 = v71;
  *(void *)(a2 + 8) = v71;
  uint64_t v71 = v44;
  uint64_t v45 = v67;
  *(void *)(a2 + 16) = v67;
  *(void *)(a2 + 24) = v28;
  uint64_t v67 = v45;
  v57[2] = v29;
  v57[3] = v28;
  *(void *)(a2 + 32) = v29;
  *(void *)(a2 + 40) = v30;
  v57[0] = v31;
  v57[1] = v30;
  uint64_t v46 = v70;
  *(void *)(a2 + 48) = v31;
  *(void *)(a2 + 56) = v46;
  uint64_t v70 = v46;
  uint64_t v47 = v69;
  *(void *)(a2 + 64) = v69;
  uint64_t v69 = v47;
  uint64_t v49 = v64;
  uint64_t v48 = v65;
  *(void *)(a2 + 72) = v68;
  *(void *)(a2 + 80) = v48;
  uint64_t v51 = v62;
  uint64_t v50 = v63;
  *(void *)(a2 + 88) = v49;
  *(void *)(a2 + 96) = v50;
  *(void *)(a2 + 104) = v51;
  *(unsigned char *)(a2 + 112) = v61;
  *(unsigned char *)(a2 + 113) = v32;
  uint64_t v53 = v59;
  uint64_t v52 = v60;
  *(void *)(a2 + 120) = v59;
  uint64_t v54 = a2;
  uint64_t v55 = v58;
  *(void *)(v54 + 128) = v58;
  *(unsigned char *)(v54 + 136) = v41;
  *(void *)(v54 + 144) = v52;
  *(void *)(v54 + 152) = 0;
  *(unsigned char *)(v54 + 160) = 1;
  *(unsigned char *)(v54 + 168) = (_BYTE)v66;
  *(_OWORD *)(v54 + 176) = v42;
  j__swift_retain();
  sub_4D230(v53, v55, v41);
  swift_bridgeObjectRetain();
  sub_10024(v53, v55, v41);
  swift_bridgeObjectRelease();
  return j__swift_release();
}

uint64_t sub_4A820(unsigned char *a1)
{
  if (*a1)
  {
    if (qword_D7D98 != -1) {
      swift_once();
    }
  }
  else if (qword_D7D98 != -1)
  {
    swift_once();
  }
  swift_beginAccess();
  sub_7AF4(&qword_D8380);
  return sub_A6E90();
}

uint64_t sub_4A948(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_A58C0();
  if (result)
  {
    uint64_t v4 = result;
    char v8 = sub_A5DF0();
    sub_A7670();
    if (*(void *)(v4 + 16) && (unint64_t v5 = sub_85F3C((uint64_t)v9), (v6 & 1) != 0))
    {
      sub_10330(*(void *)(v4 + 56) + 32 * v5, (uint64_t)&v10);
    }
    else
    {
      long long v10 = 0u;
      long long v11 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_102DC((uint64_t)v9);
    if (*((void *)&v11 + 1))
    {
      uint64_t result = swift_dynamicCast();
      if (result)
      {
        char v7 = v8;
        if (*(unsigned char *)a2) {
          char v7 = v8 ^ 1;
        }
        v9[0] = *(_OWORD *)(a2 + 24);
        LOBYTE(v10) = v7;
        sub_7AF4(&qword_D8380);
        return sub_A6E90();
      }
    }
    else
    {
      return sub_A35C((uint64_t)&v10, &qword_D92A0);
    }
  }
  return result;
}

uint64_t sub_4AA60()
{
  return _AXSLiveTranscriptionSetMicOn();
}

uint64_t sub_4AAE8@<X0>(uint64_t a1@<X8>)
{
  return sub_497FC(a1);
}

uint64_t sub_4AB24@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v31 = a3;
  char v6 = a1 & 1;
  uint64_t v7 = sub_A7520();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  long long v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_7AF4(&qword_D9438);
  __chkstk_darwin(v11);
  unsigned __int8 v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_7AF4(&qword_D9440);
  __chkstk_darwin(v30);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_A7030();
  uint64_t v17 = v16;
  char v18 = v6;
  sub_4AE6C(v6, a2, (uint64_t)v32, a4);
  id v19 = [self defaultCenter];
  if (qword_D7E20 != -1) {
    swift_once();
  }
  sub_A7530();

  uint64_t v20 = swift_allocObject();
  *(unsigned char *)(v20 + 16) = v18;
  *(double *)(v20 + 24) = a4;
  *(void *)(v20 + 32) = a2;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(&v13[*(int *)(v11 + 52)], v10, v7);
  *(void *)unsigned __int8 v13 = v29;
  *((void *)v13 + 1) = v17;
  long long v21 = v32[3];
  *((_OWORD *)v13 + 3) = v32[2];
  *((_OWORD *)v13 + 4) = v21;
  *((void *)v13 + 18) = v33;
  long long v22 = v32[7];
  *((_OWORD *)v13 + 7) = v32[6];
  *((_OWORD *)v13 + 8) = v22;
  long long v23 = v32[5];
  *((_OWORD *)v13 + 5) = v32[4];
  *((_OWORD *)v13 + 6) = v23;
  long long v24 = v32[1];
  *((_OWORD *)v13 + 1) = v32[0];
  *((_OWORD *)v13 + 2) = v24;
  uint64_t v25 = (uint64_t (**)())&v13[*(int *)(v11 + 56)];
  char *v25 = sub_4CEF8;
  v25[1] = (uint64_t (*)())v20;
  uint64_t v26 = *(void (**)(char *, uint64_t))(v8 + 8);
  swift_retain();
  v26(v10, v7);
  sub_A45C(&qword_D9448, &qword_D9438);
  sub_A6BC0();
  sub_A35C((uint64_t)v13, &qword_D9438);
  sub_A63F0();
  return sub_A35C((uint64_t)v15, &qword_D9440);
}

double sub_4AE6C@<D0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v8 = sub_A6E20();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1) {
    uint64_t v12 = sub_A6D60();
  }
  else {
    uint64_t v12 = sub_A6D50();
  }
  uint64_t v27 = v12;
  double v43 = a4;
  uint64_t v44 = a2;
  sub_7AF4(&qword_D8810);
  sub_A6E80();
  double v43 = a4;
  uint64_t v44 = a2;
  sub_A6E80();
  sub_A7030();
  sub_A6270();
  uint64_t v26 = v37;
  char v13 = v38;
  uint64_t v25 = v39;
  char v14 = v40;
  uint64_t v24 = v41;
  uint64_t v23 = v42;
  if ((a1 & 1) != 0 && !AXDeviceIsRealityDevice()) {
    AXDeviceIsPad();
  }
  sub_A6E10();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for Image.ResizingMode.stretch(_:), v8);
  uint64_t v15 = sub_A6E50();
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  double v43 = a4;
  uint64_t v44 = a2;
  sub_A6E80();
  double v43 = a4;
  uint64_t v44 = a2;
  sub_A6E80();
  sub_A7030();
  sub_A6270();
  double v16 = v43;
  uint64_t v17 = v45;
  char v32 = v44;
  char v30 = v46;
  *(_DWORD *)(a3 + 10) = *(_DWORD *)&v35[17];
  *(_WORD *)(a3 + 14) = v36;
  *(_DWORD *)(a3 + 25) = v28;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v28 + 3);
  *(_DWORD *)(a3 + 41) = *(_DWORD *)v35;
  *(_DWORD *)(a3 + 44) = *(_DWORD *)&v35[3];
  *(_DWORD *)(a3 + 82) = v33;
  *(_WORD *)(a3 + 86) = v34;
  char v18 = v32;
  *(_DWORD *)(a3 + 97) = *(_DWORD *)v31;
  *(_DWORD *)(a3 + 100) = *(_DWORD *)&v31[3];
  char v19 = v30;
  *(_DWORD *)(a3 + 116) = *(_DWORD *)&v29[3];
  *(_DWORD *)(a3 + 113) = *(_DWORD *)v29;
  *(void *)a3 = v27;
  *(_WORD *)(a3 + 8) = 256;
  *(void *)(a3 + 16) = v26;
  *(unsigned char *)(a3 + 24) = v13;
  *(void *)(a3 + 32) = v25;
  *(unsigned char *)(a3 + 40) = v14;
  uint64_t v20 = v23;
  *(void *)(a3 + 48) = v24;
  *(void *)(a3 + 56) = v20;
  *(void *)(a3 + 64) = v15;
  *(void *)(a3 + 72) = 0;
  *(unsigned char *)(a3 + 80) = 1;
  *(unsigned char *)(a3 + 81) = 0;
  *(double *)(a3 + 88) = v16;
  *(unsigned char *)(a3 + 96) = v18;
  *(void *)(a3 + 104) = v17;
  *(unsigned char *)(a3 + 112) = v19;
  double result = v47[0];
  *(_OWORD *)(a3 + 120) = *(_OWORD *)v47;
  return result;
}

uint64_t sub_4B240@<X0>(uint64_t a1@<X8>)
{
  return sub_4AB24(*(unsigned char *)v1, *(void *)(v1 + 16), a1, *(double *)(v1 + 8));
}

uint64_t sub_4B250@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>)
{
  if (qword_D7E58 != -1) {
    swift_once();
  }
  AXLTSettingsManager.contentCategory.getter();
  uint64_t v16 = qword_D7DE8;
  char v18 = (NSString *)v17;
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_A6380();
  sub_7B38(v19, (uint64_t)qword_DF648);
  uint64_t v20 = sub_75128();
  char v21 = sub_A7550();

  if (v21)
  {
    uint64_t v22 = sub_75128();

    char v18 = v22;
  }
  if (qword_D7E50 != -1) {
    swift_once();
  }
  sub_A2F50((uint64_t)buttonFontStyle, UIFontWeightBold);

  sub_A6AC0();
  uint64_t result = sub_A6E70();
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 16) = a3;
  *(unsigned char *)(a9 + 17) = a4 & 1;
  *(double *)(a9 + 24) = a10;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(void *)(a9 + 64) = v28;
  *(void *)(a9 + 72) = v29;
  return result;
}

ValueMetadata *type metadata accessor for LiveCaptionsInputMenu()
{
  return &type metadata for LiveCaptionsInputMenu;
}

uint64_t destroy for LiveCaptionsTopBarView()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for LiveCaptionsTopBarView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LiveCaptionsTopBarView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for LiveCaptionsTopBarView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for LiveCaptionsTopBarView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LiveCaptionsTopBarView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LiveCaptionsTopBarView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveCaptionsTopBarView()
{
  return &type metadata for LiveCaptionsTopBarView;
}

uint64_t *sub_4B778(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(sub_7AF4(&qword_D85F8) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = sub_A5D50();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_4B8D0(uint64_t a1)
{
  uint64_t v2 = sub_A5D50();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *sub_4B9A0(void *a1, const void *a2)
{
  uint64_t v4 = sub_A5D50();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    uint64_t v6 = sub_7AF4(&qword_D85F8);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *sub_4BAB0(void *a1, void *a2)
{
  uint64_t v4 = sub_A5D50();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v9 = sub_7AF4(&qword_D85F8);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *sub_4BC2C(void *a1, const void *a2)
{
  uint64_t v4 = sub_A5D50();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    uint64_t v6 = sub_7AF4(&qword_D85F8);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *sub_4BD3C(void *a1, void *a2)
{
  uint64_t v4 = sub_A5D50();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v9 = sub_7AF4(&qword_D85F8);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t sub_4BEB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_4BECC);
}

uint64_t sub_4BECC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_7AF4(&qword_D85F8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_4BF3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4BF50);
}

uint64_t sub_4BF50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_7AF4(&qword_D85F8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for LiveCaptionsAudioSourceCircleView(uint64_t a1)
{
  return sub_1182C(a1, qword_D9328);
}

void sub_4BFE4()
{
  sub_425A0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_4C070()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_4C08C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_4C0A8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_4C0C4(uint64_t a1)
{
  return a1;
}

uint64_t sub_4C138(uint64_t a1)
{
  return a1;
}

uint64_t sub_4C1B4(uint64_t a1)
{
  return a1;
}

uint64_t sub_4C200(uint64_t a1)
{
  return a1;
}

uint64_t sub_4C250()
{
  return (*(uint64_t (**)(void))(v0 + 64))();
}

uint64_t sub_4C280(uint64_t a1)
{
  return a1;
}

uint64_t sub_4C2F0()
{
  return sub_A6530();
}

uint64_t sub_4C318(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_4C380(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_4C3E4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_4C444()
{
  return sub_43A9C();
}

uint64_t sub_4C44C()
{
  return sub_4CD5C(&qword_D93C8, &qword_D93C0, (void (*)(void))sub_4C474);
}

unint64_t sub_4C474()
{
  unint64_t result = qword_D93D0;
  if (!qword_D93D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D93D0);
  }
  return result;
}

unint64_t sub_4C4C8()
{
  unint64_t result = qword_D93D8;
  if (!qword_D93D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D93D8);
  }
  return result;
}

uint64_t destroy for LiveCaptionsInputTypeMenuRow()
{
  return swift_release();
}

uint64_t initializeWithCopy for LiveCaptionsInputTypeMenuRow(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LiveCaptionsInputTypeMenuRow(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for LiveCaptionsInputTypeMenuRow(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for LiveCaptionsInputTypeMenuRow(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LiveCaptionsInputTypeMenuRow(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LiveCaptionsInputTypeMenuRow(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveCaptionsInputTypeMenuRow()
{
  return &type metadata for LiveCaptionsInputTypeMenuRow;
}

uint64_t initializeBufferWithCopyOfBuffer for LiveCaptionsPauseRow(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t destroy for LiveCaptionsPauseRow()
{
  return swift_release();
}

uint64_t assignWithCopy for LiveCaptionsPauseRow(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for LiveCaptionsPauseRow(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LiveCaptionsPauseRow(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LiveCaptionsPauseRow(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveCaptionsPauseRow()
{
  return &type metadata for LiveCaptionsPauseRow;
}

void *initializeBufferWithCopyOfBuffer for LiveCaptionsTopBarButton(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

void *assignWithCopy for LiveCaptionsTopBarButton(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for LiveCaptionsTopBarButton(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LiveCaptionsTopBarButton(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LiveCaptionsTopBarButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveCaptionsTopBarButton()
{
  return &type metadata for LiveCaptionsTopBarButton;
}

uint64_t sub_4C9A4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  return a1;
}

__n128 initializeWithTake for LiveCaptionsInputTypeCircleView(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for LiveCaptionsInputTypeCircleView()
{
  return &type metadata for LiveCaptionsInputTypeCircleView;
}

uint64_t destroy for LiveCaptionsPauseCircleView()
{
  return swift_release();
}

uint64_t _s19LiveSpeechUIService31LiveCaptionsInputTypeCircleViewVwca_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s19LiveSpeechUIService31LiveCaptionsInputTypeCircleViewVwta_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t _s19LiveSpeechUIService31LiveCaptionsInputTypeCircleViewVwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t _s19LiveSpeechUIService31LiveCaptionsInputTypeCircleViewVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveCaptionsPauseCircleView()
{
  return &type metadata for LiveCaptionsPauseCircleView;
}

ValueMetadata *type metadata accessor for LiveCaptionsTopBarViewType()
{
  return &type metadata for LiveCaptionsTopBarViewType;
}

unint64_t sub_4CB84()
{
  unint64_t result = qword_D93E0;
  if (!qword_D93E0)
  {
    sub_7C5C(&qword_D9368);
    sub_4CC24();
    sub_A45C(&qword_D9400, &qword_D8188);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D93E0);
  }
  return result;
}

unint64_t sub_4CC24()
{
  unint64_t result = qword_D93E8;
  if (!qword_D93E8)
  {
    sub_7C5C(&qword_D9360);
    sub_A45C(&qword_D93F0, &qword_D93F8);
    sub_A45C(&qword_D8938, &qword_D88F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D93E8);
  }
  return result;
}

uint64_t sub_4CCE8()
{
  return sub_4D448(&qword_D9408, &qword_D9380, &qword_D9410, &qword_D9370);
}

uint64_t sub_4CD20()
{
  return sub_4CD5C(&qword_D9418, &qword_D9420, (void (*)(void))sub_4C44C);
}

uint64_t sub_4CD5C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_7C5C(a2);
    a3();
    sub_4C4C8();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_4CDE0()
{
  unint64_t result = qword_D9428;
  if (!qword_D9428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9428);
  }
  return result;
}

uint64_t sub_4CE34()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_4CE50()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_4CE6C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_4CE88()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_4CEA4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_4CEC0()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_4CEF8()
{
  return sub_49754();
}

unint64_t sub_4CF08()
{
  unint64_t result = qword_D9480;
  if (!qword_D9480)
  {
    sub_7C5C(&qword_D9478);
    sub_4CFD4(&qword_D9488, &qword_D9490, (void (*)(void))sub_4D050);
    sub_A45C(&qword_D8160, &qword_D8168);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9480);
  }
  return result;
}

uint64_t sub_4CFD4(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_7C5C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_4D050()
{
  unint64_t result = qword_D9498;
  if (!qword_D9498)
  {
    sub_7C5C(&qword_D94A0);
    sub_A45C(&qword_D94A8, &qword_D94B0);
    sub_A45C(&qword_D83D8, &qword_D83E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9498);
  }
  return result;
}

uint64_t sub_4D114(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 144);
  uint64_t v3 = *(void *)(a1 + 152);
  char v4 = *(unsigned char *)(a1 + 160);
  j__swift_release();
  sub_10024(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_4D1DC()
{
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_4D214()
{
  return sub_4A820((unsigned char *)(v0 + 16));
}

uint64_t sub_4D21C(uint64_t a1)
{
  return sub_4A948(a1, v1 + 16);
}

uint64_t sub_4D224()
{
  return sub_4AA60();
}

uint64_t sub_4D230(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

unint64_t sub_4D240()
{
  unint64_t result = qword_D9518;
  if (!qword_D9518)
  {
    sub_7C5C(&qword_D9510);
    sub_4D2E0();
    sub_A45C(&qword_D8160, &qword_D8168);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9518);
  }
  return result;
}

unint64_t sub_4D2E0()
{
  unint64_t result = qword_D9520;
  if (!qword_D9520)
  {
    sub_7C5C(&qword_D9528);
    sub_4CFD4(&qword_D9530, &qword_D9538, (void (*)(void))sub_4D3AC);
    sub_A45C(&qword_D83D8, &qword_D83E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9520);
  }
  return result;
}

unint64_t sub_4D3AC()
{
  unint64_t result = qword_D9540;
  if (!qword_D9540)
  {
    sub_7C5C(&qword_D9548);
    sub_4D448(&qword_D9550, &qword_D9558, &qword_D9560, &qword_D9568);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9540);
  }
  return result;
}

uint64_t sub_4D448(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_7C5C(a2);
    sub_A45C(a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_4D4E4(uint64_t a1)
{
  return a1;
}

uint64_t sub_4D554()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_4D58C()
{
  return sub_490EC();
}

uint64_t sub_4D598(uint64_t a1)
{
  return sub_491B8(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_4D5A4()
{
  return sub_492D4();
}

uint64_t type metadata accessor for LiveCaptionsCaptionTitle(uint64_t a1)
{
  return sub_1182C(a1, (uint64_t *)&unk_D95F8);
}

uint64_t sub_4D5D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_4D618()
{
  unint64_t result = qword_D9590;
  if (!qword_D9590)
  {
    sub_7C5C(&qword_D9580);
    type metadata accessor for LiveCaptionsCaptionTitle(255);
    sub_4D5D0(&qword_D9588, (void (*)(uint64_t))type metadata accessor for LiveCaptionsCaptionTitle);
    swift_getOpaqueTypeConformance2();
    sub_4D5D0(&qword_D83F0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9590);
  }
  return result;
}

uint64_t sub_4D724(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = v17 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    int v7 = (void *)a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v8 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v8;
    uint64_t v9 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v9;
    uint64_t v27 = a2[8];
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = v27;
    uint64_t v28 = (void *)a2[10];
    *(void *)(a1 + 72) = a2[9];
    *(void *)(a1 + 80) = v28;
    uint64_t v10 = a3[10];
    __dst = (char *)(a1 + v10);
    uint64_t v11 = (char *)a2 + v10;
    *(void *)(a1 + 88) = a2[11];
    uint64_t v12 = sub_A5D50();
    uint64_t v25 = *(void *)(v12 - 8);
    uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
    id v13 = v7;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v14 = v28;
    swift_retain();
    if (v26(v11, 1, v12))
    {
      uint64_t v15 = sub_7AF4(&qword_D85F8);
      uint64_t v16 = __dst;
      memcpy(__dst, v11, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      uint64_t v16 = __dst;
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(__dst, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v12);
    }
    uint64_t v18 = sub_7AF4(&qword_D9598);
    *(void *)&v16[*(int *)(v18 + 28)] = *(void *)&v11[*(int *)(v18 + 28)];
    uint64_t v19 = a3[12];
    *(void *)(v4 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    *(void *)(v4 + v19) = *(uint64_t *)((char *)a2 + v19);
    uint64_t v20 = a3[13];
    char v21 = (void *)(v4 + v20);
    uint64_t v22 = (uint64_t *)((char *)a2 + v20);
    uint64_t v23 = v22[1];
    *char v21 = *v22;
    v21[1] = v23;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_4D994(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = sub_A5D50();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  sub_7AF4(&qword_D9598);
  swift_release();

  return swift_release();
}

uint64_t sub_4DAC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  uint64_t v9 = *(void *)(a2 + 88);
  uint64_t v26 = *(void **)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v26;
  uint64_t v10 = a3[10];
  __dst = (char *)(a1 + v10);
  uint64_t v24 = (char *)(a2 + v10);
  *(void *)(a1 + 88) = v9;
  uint64_t v11 = sub_A5D50();
  uint64_t v23 = *(void *)(v11 - 8);
  uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  id v12 = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v13 = v26;
  swift_retain();
  if (v25(v24, 1, v11))
  {
    uint64_t v14 = sub_7AF4(&qword_D85F8);
    uint64_t v15 = __dst;
    memcpy(__dst, v24, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v15 = __dst;
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(__dst, v24, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v11);
  }
  uint64_t v16 = sub_7AF4(&qword_D9598);
  *(void *)&v15[*(int *)(v16 + 28)] = *(void *)&v24[*(int *)(v16 + 28)];
  uint64_t v17 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  uint64_t v18 = a3[13];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_4DCEC(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void **)(a2 + 8);
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  id v8 = v6;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  uint64_t v9 = *(void **)(a2 + 80);
  uint64_t v10 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = v9;
  id v11 = v9;

  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  uint64_t v12 = a3[10];
  id v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = sub_A5D50();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v20 = sub_7AF4(&qword_D85F8);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  uint64_t v21 = sub_7AF4(&qword_D9598);
  *(void *)&v13[*(int *)(v21 + 28)] = *(void *)&v14[*(int *)(v21 + 28)];
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  uint64_t v22 = a3[13];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  void *v23 = *v24;
  v23[1] = v24[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_4DFD0(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  long long v8 = a2[5];
  uint64_t v9 = a3[10];
  uint64_t v10 = (char *)a1 + v9;
  id v11 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  uint64_t v12 = sub_A5D50();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = sub_7AF4(&qword_D85F8);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v15 = sub_7AF4(&qword_D9598);
  *(void *)&v10[*(int *)(v15 + 28)] = *(void *)&v11[*(int *)(v15 + 28)];
  uint64_t v16 = a3[12];
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  *(void *)((char *)a1 + v16) = *(void *)((char *)a2 + v16);
  *(_OWORD *)((char *)a1 + a3[13]) = *(_OWORD *)((char *)a2 + a3[13]);
  return a1;
}

uint64_t sub_4E13C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  long long v7 = *(void **)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  long long v8 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);

  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  uint64_t v9 = a3[10];
  uint64_t v10 = (char *)(a1 + v9);
  id v11 = (char *)(a2 + v9);
  uint64_t v12 = sub_A5D50();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = sub_7AF4(&qword_D85F8);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  uint64_t v18 = sub_7AF4(&qword_D9598);
  *(void *)&v10[*(int *)(v18 + 28)] = *(void *)&v11[*(int *)(v18 + 28)];
  swift_release();
  uint64_t v19 = a3[12];
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  uint64_t v20 = a3[13];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (void *)(a2 + v20);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_release();
  return a1;
}

uint64_t sub_4E3BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_4E3D0);
}

uint64_t sub_4E3D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_7AF4(&qword_D9598);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_4E484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4E498);
}

uint64_t sub_4E498(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_7AF4(&qword_D9598);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_4E544()
{
  sub_4E5FC();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_4E5FC()
{
  if (!qword_D9608)
  {
    sub_7C5C(&qword_D85F8);
    unint64_t v0 = sub_A6EB0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_D9608);
    }
  }
}

unsigned char *_s19LiveSpeechUIService26LiveCaptionsTopBarViewTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    char *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x4E724);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveCaptionsInputType()
{
  return &type metadata for LiveCaptionsInputType;
}

uint64_t sub_4E75C()
{
  return sub_A45C(&qword_D9658, &qword_D9430);
}

unint64_t sub_4E79C()
{
  unint64_t result = qword_D9660;
  if (!qword_D9660)
  {
    sub_7C5C(&qword_D9440);
    sub_A45C(&qword_D9448, &qword_D9438);
    sub_4D5D0(&qword_D83F0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9660);
  }
  return result;
}

uint64_t sub_4E86C(uint64_t a1)
{
  return sub_4E894(a1, &qword_D9468, &qword_D94C0);
}

uint64_t sub_4E880(uint64_t a1)
{
  return sub_4E894(a1, &qword_D9500, &qword_D9570);
}

uint64_t sub_4E894(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_4E918()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_4E978()
{
  unint64_t result = qword_D9668;
  if (!qword_D9668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9668);
  }
  return result;
}

uint64_t sub_4E9CC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_4E9EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LiveCaptionsCaptionTitle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_4EA50()
{
  return sub_4ECFC((uint64_t (*)(uint64_t))sub_46CB0);
}

uint64_t sub_4EA6C()
{
  uint64_t v1 = type metadata accessor for LiveCaptionsCaptionTitle(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  uint64_t v5 = v0 + v3 + *(int *)(v1 + 40);
  uint64_t v6 = sub_A5D50();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  sub_7AF4(&qword_D9598);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_4EC20(uint64_t a1)
{
  return sub_4EC54(a1, sub_47528);
}

uint64_t sub_4EC3C(uint64_t a1)
{
  return sub_4EC54(a1, (uint64_t (*)(uint64_t, uint64_t))sub_47634);
}

uint64_t sub_4EC54(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for LiveCaptionsCaptionTitle(0) - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5);
}

uint64_t sub_4ECE4()
{
  return sub_4ECFC(sub_4791C);
}

uint64_t sub_4ECFC(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for LiveCaptionsCaptionTitle(0) - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

unint64_t sub_4ED78()
{
  unint64_t result = qword_D96C8;
  if (!qword_D96C8)
  {
    sub_7C5C(&qword_D96C0);
    sub_4EE38(&qword_D96D0, &qword_D96D8);
    sub_A45C(&qword_D9008, &qword_D9010);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D96C8);
  }
  return result;
}

uint64_t sub_4EE38(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_7C5C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_4EEB0()
{
  unint64_t result = qword_D96E0;
  if (!qword_D96E0)
  {
    sub_7C5C(&qword_D96A8);
    sub_4CFD4(&qword_D96E8, &qword_D96F0, (void (*)(void))sub_4EF7C);
    sub_A45C(&qword_D9728, &qword_D93B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D96E0);
  }
  return result;
}

uint64_t sub_4EF7C()
{
  return sub_4CFD4(&qword_D96F8, &qword_D9700, (void (*)(void))sub_4EFAC);
}

unint64_t sub_4EFAC()
{
  unint64_t result = qword_D9708;
  if (!qword_D9708)
  {
    sub_7C5C(&qword_D9710);
    sub_4EE38((unint64_t *)&qword_D83C8, &qword_D83D0);
    sub_A45C(&qword_D9718, &qword_D9720);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9708);
  }
  return result;
}

uint64_t sub_4F06C()
{
  return swift_getOpaqueTypeConformance2();
}

LiveSpeechUIService::LiveSpeechCaptionsWindowState_optional __swiftcall LiveSpeechCaptionsWindowState.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)rawValue >= 3) {
    LOBYTE(rawValue) = 3;
  }
  return (LiveSpeechUIService::LiveSpeechCaptionsWindowState_optional)rawValue;
}

uint64_t sub_4F160()
{
  sub_7AF4(&qword_D97C0);
  sub_A6F00();
  return v1;
}

uint64_t sub_4F1B0()
{
  return sub_A6F10();
}

unint64_t sub_4F208()
{
  unint64_t result = qword_D9738[0];
  if (!qword_D9738[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_D9738);
  }
  return result;
}

uint64_t *sub_4F25C@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

unsigned char *storeEnumTagSinglePayload for LiveSpeechCaptionsWindowState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    char *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x4F340);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveSpeechCaptionsWindowState()
{
  return &type metadata for LiveSpeechCaptionsWindowState;
}

ValueMetadata *type metadata accessor for SizePreferenceKey()
{
  return &type metadata for SizePreferenceKey;
}

ValueMetadata *type metadata accessor for FramePreferenceKey()
{
  return &type metadata for FramePreferenceKey;
}

uint64_t sub_4F398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 56);
}

void sub_4F3A0()
{
  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    sub_B23C();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unint64_t sub_4F4AC(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v6 + 64) + 7;
  uint64_t v10 = sub_A63C0();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v12 & 0xF8 | 7;
  uint64_t v14 = (v12 & 0xF8) + 15;
  uint64_t v15 = 8;
  if (*(void *)(v11 + 64) > 8uLL) {
    uint64_t v15 = *(void *)(v11 + 64);
  }
  int v16 = (v12 | v7) & 0x100000;
  if ((v13 | v7) != 7
    || v16 != 0
    || v15
     + ((v14
       + ((((((v9 + ((v7 + 96) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
         + 31) & 0xFFFFFFFFFFFFFFF8)) & ~v13)
     + 1 > 0x18)
  {
    uint64_t v19 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    unint64_t v20 = v19 + (((v13 | v7) + 16) & ~(v13 | v7));
LABEL_32:
    swift_retain();
    return v20;
  }
  uint64_t v52 = v5;
  uint64_t v53 = v15;
  uint64_t v54 = *(void *)(v10 - 8);
  unint64_t v55 = a1;
  uint64_t v49 = v10;
  unint64_t v50 = ~(unint64_t)v7;
  uint64_t v51 = ~v13;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v21 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v21 + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(void *)(v21 + 16) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(unsigned char *)(v21 + 24) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  unint64_t v23 = (a1 & 0xFFFFFFFFFFFFFFF8) + 32;
  uint64_t v24 = (_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  unint64_t v25 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  swift_retain();
  swift_retain();
  if (v25 < 0xFFFFFFFF)
  {
    long long v26 = *(_OWORD *)(v22 + 48);
    *(_OWORD *)unint64_t v23 = *v24;
    *(_OWORD *)(v23 + 16) = v26;
  }
  else
  {
    *(void *)unint64_t v23 = *(void *)v24;
    *(void *)(v23 + 8) = *(void *)(v22 + 40);
    *(_OWORD *)(v23 + 16) = *(_OWORD *)(v22 + 48);
    swift_retain();
    swift_retain();
  }
  unint64_t v27 = (v21 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = (v22 + 71) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v27 = *(void *)v28;
  *(void *)(v27 + 8) = *(void *)(v28 + 8);
  *(_OWORD *)(v27 + 16) = *(_OWORD *)(v28 + 16);
  uint64_t v29 = v28 + v8;
  uint64_t v30 = (v27 + v8 + 32) & v50;
  uint64_t v31 = (v29 + 32) & v50;
  char v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain();
  swift_retain();
  v32(v30, v31, v52);
  unint64_t v33 = (v9 + v30) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = (v9 + v31) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v33 = *(_OWORD *)v34;
  *(void *)(v33 + 16) = *(void *)(v34 + 16);
  unint64_t v35 = (v33 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = (v34 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v35 = *(_OWORD *)v36;
  *(void *)(v35 + 16) = *(void *)(v36 + 16);
  uint64_t v37 = (void *)((v35 + 31) & 0xFFFFFFFFFFFFFFF8);
  char v38 = (void *)((v36 + 31) & 0xFFFFFFFFFFFFFFF8);
  void *v37 = *v38;
  uint64_t v39 = (void *)(((unint64_t)v37 + v14) & v51);
  char v40 = (unsigned __int8 *)(((unint64_t)v38 + v14) & v51);
  unsigned int v41 = v40[v53];
  swift_retain();
  swift_retain();
  if (v41 < 2)
  {
    uint64_t v43 = v54;
    unint64_t v20 = v55;
LABEL_22:
    if (v41 != 1)
    {
LABEL_31:
      *uint64_t v39 = *(void *)v40;
      *((unsigned char *)v39 + v53) = 0;
      goto LABEL_32;
    }
  }
  else
  {
    if (v53 <= 3) {
      uint64_t v42 = v53;
    }
    else {
      uint64_t v42 = 4;
    }
    uint64_t v43 = v54;
    unint64_t v20 = v55;
    switch(v42)
    {
      case 1:
        int v44 = *v40;
        break;
      case 2:
        int v44 = *(unsigned __int16 *)v40;
        break;
      case 3:
        int v44 = *(unsigned __int16 *)v40 | (v40[2] << 16);
        break;
      case 4:
        int v44 = *(_DWORD *)v40;
        break;
      default:
        goto LABEL_22;
    }
    int v45 = (v44 | ((v41 - 2) << (8 * v53))) + 2;
    int v46 = v44 + 2;
    if (v53 >= 4) {
      int v47 = v46;
    }
    else {
      int v47 = v45;
    }
    if (v47 != 1) {
      goto LABEL_31;
    }
  }
  (*(void (**)(void *, unsigned __int8 *, uint64_t))(v43 + 16))(v39, v40, v49);
  *((unsigned char *)v39 + v53) = 1;
  return v20;
}

uint64_t sub_4F874(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  if (*(void *)(v3 + 40) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (((v3 + 71) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  unint64_t v7 = (*(void *)(v5 + 56) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  uint64_t v8 = *(void *)(sub_A63C0() - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  uint64_t v10 = (unsigned __int8 *)((((((v7 + 31) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + v9 + 8) & ~v9);
  unint64_t v11 = *(void *)(v8 + 64);
  if (v11 <= 8) {
    unint64_t v11 = 8;
  }
  unsigned int v12 = v10[v11];
  unsigned int v13 = v12 - 2;
  if (v12 >= 2)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *v10;
        goto LABEL_14;
      case 2:
        int v15 = *(unsigned __int16 *)v10;
        goto LABEL_14;
      case 3:
        int v15 = *(unsigned __int16 *)v10 | (v10[2] << 16);
        goto LABEL_14;
      case 4:
        int v15 = *(_DWORD *)v10;
LABEL_14:
        int v16 = (v15 | (v13 << (8 * v11))) + 2;
        unsigned int v12 = v15 + 2;
        if (v11 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  if (v12 == 1)
  {
    uint64_t v17 = *(uint64_t (**)(void))(v8 + 8);
    return v17();
  }
  else
  {
    return swift_release();
  }
}

unint64_t sub_4FAA0(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v5 + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(void *)(v5 + 16) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(unsigned char *)(v5 + 24) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  unint64_t v7 = (_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32);
  unint64_t v8 = (a2 & 0xFFFFFFFFFFFFFFF8) + 32;
  unint64_t v9 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  swift_retain();
  swift_retain();
  if (v9 < 0xFFFFFFFF)
  {
    long long v10 = *(_OWORD *)(v8 + 16);
    _OWORD *v7 = *(_OWORD *)v8;
    *(_OWORD *)(v5 + 48) = v10;
  }
  else
  {
    *(void *)unint64_t v7 = *(void *)v8;
    *(void *)(v5 + 40) = *(void *)(v8 + 8);
    *(_OWORD *)(v5 + 48) = *(_OWORD *)(v8 + 16);
    swift_retain();
    swift_retain();
  }
  unint64_t v11 = (v5 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v6 + 71) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v11 = *(void *)v12;
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(v12 + 16);
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(v13 - 8);
  int v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  uint64_t v16 = v14 + 16;
  uint64_t v17 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = (v17 + 32 + v11) & ~v17;
  uint64_t v19 = (v17 + 32 + v12) & ~v17;
  swift_retain();
  swift_retain();
  v15(v18, v19, v13);
  uint64_t v20 = *(void *)(v16 + 48) + 7;
  unint64_t v21 = (v20 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v20 + v19) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v21 = *(_OWORD *)v22;
  *(void *)(v21 + 16) = *(void *)(v22 + 16);
  unint64_t v23 = (v21 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v22 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v23 = *(_OWORD *)v24;
  *(void *)(v23 + 16) = *(void *)(v24 + 16);
  unint64_t v25 = (void *)((v23 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v26 = (void *)((v24 + 31) & 0xFFFFFFFFFFFFFFF8);
  void *v25 = *v26;
  uint64_t v27 = sub_A63C0();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(_DWORD *)(v28 + 80) & 0xF8;
  uint64_t v30 = v29 + 15;
  unint64_t v31 = (unint64_t)v25 + v29 + 15;
  unint64_t v32 = ~v29 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = (void *)(v31 & v32);
  unint64_t v34 = (unsigned __int8 *)(((unint64_t)v26 + v30) & v32);
  if (*(void *)(v28 + 64) <= 8uLL) {
    uint64_t v35 = 8;
  }
  else {
    uint64_t v35 = *(void *)(*(void *)(v27 - 8) + 64);
  }
  unsigned int v36 = v34[v35];
  swift_retain();
  swift_retain();
  if (v36 >= 2)
  {
    if (v35 <= 3) {
      uint64_t v37 = v35;
    }
    else {
      uint64_t v37 = 4;
    }
    switch(v37)
    {
      case 1:
        int v38 = *v34;
        goto LABEL_16;
      case 2:
        int v38 = *(unsigned __int16 *)v34;
        goto LABEL_16;
      case 3:
        int v38 = *(unsigned __int16 *)v34 | (v34[2] << 16);
        goto LABEL_16;
      case 4:
        int v38 = *(_DWORD *)v34;
LABEL_16:
        int v39 = (v38 | ((v36 - 2) << (8 * v35))) + 2;
        unsigned int v40 = v38 + 2;
        if (v35 >= 4) {
          unsigned int v36 = v40;
        }
        else {
          unsigned int v36 = v39;
        }
        break;
      default:
        break;
    }
  }
  if (v36 == 1)
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v28 + 16))(v33, v34, v27);
    char v41 = 1;
  }
  else
  {
    *unint64_t v33 = *(void *)v34;
    swift_retain();
    char v41 = 0;
  }
  *((unsigned char *)v33 + v35) = v41;
  return a1;
}

unint64_t sub_4FDA4(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_retain();
  swift_release();
  *(void *)(v5 + 16) = *(void *)(v6 + 16);
  swift_retain();
  swift_release();
  *(unsigned char *)(v5 + 24) = *(unsigned char *)(v6 + 24);
  unint64_t v7 = (void *)(v5 + 32);
  unint64_t v8 = (void *)(v6 + 32);
  unint64_t v9 = *(void *)(v6 + 40);
  if (*(void *)(v5 + 40) < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      void *v7 = *v8;
      *(void *)(v5 + 40) = *(void *)(v6 + 40);
      *(_OWORD *)(v5 + 48) = *(_OWORD *)(v6 + 48);
      swift_retain();
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      void *v7 = *v8;
      swift_retain();
      swift_release();
      *(void *)(v5 + 40) = *(void *)(v6 + 40);
      swift_retain();
      swift_release();
      *(void *)(v5 + 48) = *(void *)(v6 + 48);
      *(void *)(v5 + 56) = *(void *)(v6 + 56);
      goto LABEL_8;
    }
    swift_release();
    swift_release();
  }
  long long v10 = *(_OWORD *)(v6 + 48);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v5 + 48) = v10;
LABEL_8:
  unint64_t v11 = (void *)((v5 + 71) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v12 = (void *)((v6 + 71) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v11 = *v12;
  swift_retain();
  swift_release();
  v11[1] = v12[1];
  swift_retain();
  swift_release();
  _DWORD v11[2] = v12[2];
  v11[3] = v12[3];
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v14 = v13 + 24;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = ((unint64_t)v11 + v15 + 32) & ~v15;
  uint64_t v17 = ((unint64_t)v12 + v15 + 32) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v16, v17);
  uint64_t v18 = *(void *)(v14 + 40) + 7;
  uint64_t v19 = (void *)((v18 + v16) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (void *)((v18 + v17) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  v19[2] = v20[2];
  swift_retain();
  swift_release();
  unint64_t v21 = (void *)(((unint64_t)v19 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = (void *)(((unint64_t)v20 + 31) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v21 = *v22;
  v21[1] = v22[1];
  v21[2] = v22[2];
  swift_retain();
  swift_release();
  unint64_t v23 = (void *)(((unint64_t)v21 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v24 = (void *)(((unint64_t)v22 + 31) & 0xFFFFFFFFFFFFFFF8);
  void *v23 = *v24;
  uint64_t v25 = sub_A63C0();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(_DWORD *)(v26 + 80) & 0xF8;
  uint64_t v28 = v27 + 15;
  unint64_t v29 = (unint64_t)v23 + v27 + 15;
  unint64_t v30 = ~v27 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = (unsigned __int8 *)(v29 & v30);
  unint64_t v32 = (unint64_t)v24 + v28;
  unint64_t v33 = (unsigned __int8 *)(v32 & v30);
  if ((v29 & v30) != (v32 & v30))
  {
    uint64_t v34 = v25;
    uint64_t v35 = *(void *)(v25 - 8);
    if (*(void *)(v26 + 64) <= 8uLL) {
      uint64_t v36 = 8;
    }
    else {
      uint64_t v36 = *(void *)(v26 + 64);
    }
    unsigned int v37 = v31[v36];
    unsigned int v38 = v37 - 2;
    if (v37 >= 2)
    {
      if (v36 <= 3) {
        uint64_t v39 = v36;
      }
      else {
        uint64_t v39 = 4;
      }
      switch(v39)
      {
        case 1:
          int v40 = *v31;
          goto LABEL_21;
        case 2:
          int v40 = *(unsigned __int16 *)v31;
          goto LABEL_21;
        case 3:
          int v40 = *(unsigned __int16 *)v31 | (v31[2] << 16);
          goto LABEL_21;
        case 4:
          int v40 = *(_DWORD *)v31;
LABEL_21:
          int v41 = (v40 | (v38 << (8 * v36))) + 2;
          unsigned int v37 = v40 + 2;
          if (v36 < 4) {
            unsigned int v37 = v41;
          }
          break;
        default:
          break;
      }
    }
    if (v37 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v35 + 8))(v31, v25);
    }
    else {
      swift_release();
    }
    unsigned int v42 = v33[v36];
    unsigned int v43 = v42 - 2;
    if (v42 >= 2)
    {
      if (v36 <= 3) {
        uint64_t v44 = v36;
      }
      else {
        uint64_t v44 = 4;
      }
      switch(v44)
      {
        case 1:
          int v45 = *v33;
          goto LABEL_35;
        case 2:
          int v45 = *(unsigned __int16 *)v33;
          goto LABEL_35;
        case 3:
          int v45 = *(unsigned __int16 *)v33 | (v33[2] << 16);
          goto LABEL_35;
        case 4:
          int v45 = *(_DWORD *)v33;
LABEL_35:
          int v46 = (v45 | (v43 << (8 * v36))) + 2;
          unsigned int v42 = v45 + 2;
          if (v36 < 4) {
            unsigned int v42 = v46;
          }
          break;
        default:
          break;
      }
    }
    if (v42 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v35 + 16))(v31, v33, v34);
      v31[v36] = 1;
    }
    else
    {
      *(void *)unint64_t v31 = *(void *)v33;
      v31[v36] = 0;
      swift_retain();
    }
  }
  return a1;
}

unint64_t sub_5020C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  long long v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(unsigned char *)(v4 + 24) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v4 + 8) = v5;
  long long v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_OWORD *)(v4 + 48) = v6;
  unint64_t v7 = (_OWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (_OWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 71) & 0xFFFFFFFFFFFFFFF8);
  long long v9 = v8[1];
  _OWORD *v7 = *v8;
  v7[1] = v9;
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = v10 + 32;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = ((unint64_t)v7 + v12 + 32) & ~v12;
  uint64_t v14 = ((unint64_t)v8 + v12 + 32) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 32) + 7;
  unint64_t v16 = (v15 + v13) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v15 + v14) & 0xFFFFFFFFFFFFFFF8;
  long long v18 = *(_OWORD *)v17;
  *(void *)(v16 + 16) = *(void *)(v17 + 16);
  *(_OWORD *)unint64_t v16 = v18;
  unint64_t v19 = (v16 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v17 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = *(void *)(v20 + 16);
  *(_OWORD *)unint64_t v19 = *(_OWORD *)v20;
  *(void *)(v19 + 16) = v21;
  unint64_t v22 = (void *)((v19 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = (void *)((v20 + 31) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v22 = *v23;
  uint64_t v24 = *(void *)(sub_A63C0() - 8);
  uint64_t v25 = *(_DWORD *)(v24 + 80) & 0xF8;
  uint64_t v26 = v25 + 15;
  unint64_t v27 = (unint64_t)v22 + v25 + 15;
  unint64_t v28 = ~v25 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (void *)(v27 & v28);
  unint64_t v30 = (unsigned __int8 *)(((unint64_t)v23 + v26) & v28);
  if (*(void *)(v24 + 64) <= 8uLL) {
    uint64_t v31 = 8;
  }
  else {
    uint64_t v31 = *(void *)(v24 + 64);
  }
  unsigned int v32 = v30[v31];
  unsigned int v33 = v32 - 2;
  if (v32 >= 2)
  {
    if (v31 <= 3) {
      uint64_t v34 = v31;
    }
    else {
      uint64_t v34 = 4;
    }
    switch(v34)
    {
      case 1:
        int v35 = *v30;
        goto LABEL_13;
      case 2:
        int v35 = *(unsigned __int16 *)v30;
        goto LABEL_13;
      case 3:
        int v35 = *(unsigned __int16 *)v30 | (v30[2] << 16);
        goto LABEL_13;
      case 4:
        int v35 = *(_DWORD *)v30;
LABEL_13:
        int v36 = (v35 | (v33 << (8 * v31))) + 2;
        unsigned int v32 = v35 + 2;
        if (v31 < 4) {
          unsigned int v32 = v36;
        }
        break;
      default:
        break;
    }
  }
  if (v32 == 1)
  {
    (*(void (**)(void *))(v24 + 32))(v29);
    char v37 = 1;
  }
  else
  {
    char v37 = 0;
    *unint64_t v29 = *(void *)v30;
  }
  *((unsigned char *)v29 + v31) = v37;
  return a1;
}

unint64_t sub_5045C(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_release();
  *(void *)(v5 + 16) = *(void *)(v6 + 16);
  swift_release();
  *(unsigned char *)(v5 + 24) = *(unsigned char *)(v6 + 24);
  unint64_t v7 = (void *)(v5 + 32);
  unint64_t v8 = (void *)(v6 + 32);
  if (*(void *)(v5 + 40) >= 0xFFFFFFFFuLL)
  {
    if (*(void *)(v6 + 40) >= 0xFFFFFFFFuLL)
    {
      void *v7 = *v8;
      swift_release();
      *(void *)(v5 + 40) = *(void *)(v6 + 40);
      swift_release();
      *(void *)(v5 + 48) = *(void *)(v6 + 48);
      *(void *)(v5 + 56) = *(void *)(v6 + 56);
      goto LABEL_6;
    }
    swift_release();
    swift_release();
  }
  long long v9 = *(_OWORD *)(v6 + 48);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v5 + 48) = v9;
LABEL_6:
  uint64_t v10 = (void *)((v5 + 71) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)((v6 + 71) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v10 = *v11;
  swift_release();
  v10[1] = v11[1];
  swift_release();
  uint64_t v10[2] = v11[2];
  v10[3] = v11[3];
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v13 = v12 + 40;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = ((unint64_t)v10 + v14 + 32) & ~v14;
  uint64_t v16 = ((unint64_t)v11 + v14 + 32) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v12 + 40))(v15, v16);
  uint64_t v17 = *(void *)(v13 + 24) + 7;
  long long v18 = (void *)((v17 + v15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v19 = (void *)((v17 + v16) & 0xFFFFFFFFFFFFFFF8);
  *long long v18 = *v19;
  v18[1] = v19[1];
  void v18[2] = v19[2];
  swift_release();
  unint64_t v20 = (void *)(((unint64_t)v18 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void *)(((unint64_t)v19 + 31) & 0xFFFFFFFFFFFFFFF8);
  void *v20 = *v21;
  v20[1] = v21[1];
  v20[2] = v21[2];
  swift_release();
  unint64_t v22 = (void *)(((unint64_t)v20 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = (void *)(((unint64_t)v21 + 31) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v22 = *v23;
  uint64_t v24 = sub_A63C0();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(_DWORD *)(v25 + 80) & 0xF8;
  uint64_t v27 = v26 + 15;
  unint64_t v28 = (unint64_t)v22 + v26 + 15;
  unint64_t v29 = ~v26 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (unsigned __int8 *)(v28 & v29);
  unint64_t v31 = (unint64_t)v23 + v27;
  unsigned int v32 = (unsigned __int8 *)(v31 & v29);
  if ((v28 & v29) != (v31 & v29))
  {
    uint64_t v33 = v24;
    uint64_t v34 = *(void *)(v24 - 8);
    if (*(void *)(v25 + 64) <= 8uLL) {
      uint64_t v35 = 8;
    }
    else {
      uint64_t v35 = *(void *)(v25 + 64);
    }
    unsigned int v36 = v30[v35];
    unsigned int v37 = v36 - 2;
    if (v36 >= 2)
    {
      if (v35 <= 3) {
        uint64_t v38 = v35;
      }
      else {
        uint64_t v38 = 4;
      }
      switch(v38)
      {
        case 1:
          int v39 = *v30;
          goto LABEL_19;
        case 2:
          int v39 = *(unsigned __int16 *)v30;
          goto LABEL_19;
        case 3:
          int v39 = *(unsigned __int16 *)v30 | (v30[2] << 16);
          goto LABEL_19;
        case 4:
          int v39 = *(_DWORD *)v30;
LABEL_19:
          int v40 = (v39 | (v37 << (8 * v35))) + 2;
          unsigned int v36 = v39 + 2;
          if (v35 < 4) {
            unsigned int v36 = v40;
          }
          break;
        default:
          break;
      }
    }
    if (v36 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v34 + 8))(v30, v24);
    }
    else {
      swift_release();
    }
    unsigned int v41 = v32[v35];
    unsigned int v42 = v41 - 2;
    if (v41 >= 2)
    {
      if (v35 <= 3) {
        uint64_t v43 = v35;
      }
      else {
        uint64_t v43 = 4;
      }
      switch(v43)
      {
        case 1:
          int v44 = *v32;
          goto LABEL_33;
        case 2:
          int v44 = *(unsigned __int16 *)v32;
          goto LABEL_33;
        case 3:
          int v44 = *(unsigned __int16 *)v32 | (v32[2] << 16);
          goto LABEL_33;
        case 4:
          int v44 = *(_DWORD *)v32;
LABEL_33:
          int v45 = (v44 | (v42 << (8 * v35))) + 2;
          unsigned int v41 = v44 + 2;
          if (v35 < 4) {
            unsigned int v41 = v45;
          }
          break;
        default:
          break;
      }
    }
    if (v41 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v34 + 32))(v30, v32, v33);
      char v46 = 1;
    }
    else
    {
      char v46 = 0;
      *(void *)unint64_t v30 = *(void *)v32;
    }
    v30[v35] = v46;
  }
  return a1;
}

uint64_t sub_50840(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(sub_A63C0() - 8);
  uint64_t v10 = 8;
  if (*(void *)(v9 + 64) > 8uLL) {
    uint64_t v10 = *(void *)(v9 + 64);
  }
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  if (!a2) {
    return 0;
  }
  if (a2 <= v8) {
    goto LABEL_25;
  }
  uint64_t v12 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  unint64_t v13 = v10
      + ((v12
        + ((((((*(void *)(v6 + 64) + ((v11 + 96) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 31) & 0xFFFFFFFFFFFFFFF8)
        + 8) & ~v12)
      + 1;
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v17 = ((a2 - v8 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v17))
    {
      int v15 = *(_DWORD *)(a1 + v13);
      if (!v15) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v17 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)(a1 + v13);
      if (!*(_WORD *)(a1 + v13)) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v17 < 2)
    {
LABEL_25:
      unint64_t v19 = a1 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 0x80000000) != 0)
      {
        uint64_t v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
        return v21((((v19 + 71) & 0xFFFFFFFFFFFFFFF8) + v11 + 32) & ~v11, v7, v5);
      }
      else
      {
        unint64_t v20 = *(void *)(v19 + 16);
        if (v20 >= 0xFFFFFFFF) {
          LODWORD(v20) = -1;
        }
        return (v20 + 1);
      }
    }
  }
  int v15 = *(unsigned __int8 *)(a1 + v13);
  if (!*(unsigned char *)(a1 + v13)) {
    goto LABEL_25;
  }
LABEL_17:
  int v18 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v18 = 0;
  }
  if (v13)
  {
    if (v13 > 3) {
      LODWORD(v13) = 4;
    }
    switch((int)v13)
    {
      case 2:
        LODWORD(v13) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v13) = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v13) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v13) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v13 | v18) + 1;
}

void sub_50AE8(unint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v23 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(void *)(sub_A63C0() - 8);
  uint64_t v12 = 8;
  if (*(void *)(v11 + 64) > 8uLL) {
    uint64_t v12 = *(void *)(v11 + 64);
  }
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
  size_t v15 = v12
      + ((v14
        + ((((((*(void *)(v8 + 64) + ((v13 + 96) & ~v13) + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 31) & 0xFFFFFFFFFFFFFFF8)
        + 8) & ~v14)
      + 1;
  if (a3 <= v10)
  {
    int v16 = 0;
  }
  else if (v15 <= 3)
  {
    unsigned int v19 = ((a3 - v10 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
    if (HIWORD(v19))
    {
      int v16 = 4;
    }
    else if (v19 >= 0x100)
    {
      int v16 = 2;
    }
    else
    {
      int v16 = v19 > 1;
    }
  }
  else
  {
    int v16 = 1;
  }
  if (v10 < a2)
  {
    unsigned int v17 = ~v10 + a2;
    if (v15 < 4)
    {
      int v18 = (v17 >> (8 * v15)) + 1;
      if (v15)
      {
        int v20 = v17 & ~(-1 << (8 * v15));
        bzero((void *)a1, v15);
        if (v15 == 3)
        {
          *(_WORD *)a1 = v20;
          *(unsigned char *)(a1 + 2) = BYTE2(v20);
        }
        else if (v15 == 2)
        {
          *(_WORD *)a1 = v20;
        }
        else
        {
          *(unsigned char *)a1 = v20;
        }
      }
    }
    else
    {
      bzero((void *)a1, v15);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v16)
    {
      case 1:
        *(unsigned char *)(a1 + v15) = v18;
        return;
      case 2:
        *(_WORD *)(a1 + v15) = v18;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)(a1 + v15) = v18;
        return;
      default:
        return;
    }
  }
  switch(v16)
  {
    case 1:
      *(unsigned char *)(a1 + v15) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)(a1 + v15) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x50E10);
    case 4:
      *(_DWORD *)(a1 + v15) = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        unint64_t v21 = a1 & 0xFFFFFFFFFFFFFFF8;
        if ((v9 & 0x80000000) != 0)
        {
          unint64_t v22 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
          v22((((v21 + 71) & 0xFFFFFFFFFFFFFFF8) + v13 + 32) & ~v13, a2, v9, v7);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(unsigned char *)(v21 + 24) = 0;
          *(void *)(v21 + 8) = a2 ^ 0x80000000;
          *(void *)(v21 + 16) = 0;
        }
        else
        {
          *(void *)(v21 + 16) = (a2 - 1);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for LiveSpeechCaptionsDraggableView()
{
  return sub_54028();
}

double sub_50E50()
{
  sub_7AF4(&qword_D8180);
  sub_A6F00();
  return v1;
}

uint64_t sub_50EA0()
{
  return sub_A6F10();
}

uint64_t sub_50EF4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __n128 v6 = __chkstk_darwin(a1);
  (*(void (**)(char *, __n128))(v4 + 16))((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  *(void *)(v8 + 16) = v9;
  *(void *)(v8 + 24) = v10;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8 + v7, (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  uint64_t v11 = sub_7C5C(&qword_D89C8);
  unint64_t v12 = sub_296D0();
  uint64_t v19 = v9;
  uint64_t v20 = v11;
  uint64_t v21 = v10;
  unint64_t v22 = v12;
  swift_getOpaqueTypeMetadata2();
  uint64_t v19 = v9;
  uint64_t v20 = v11;
  uint64_t v21 = v10;
  unint64_t v22 = v12;
  swift_getOpaqueTypeConformance2();
  uint64_t v17 = sub_A6310();
  uint64_t v18 = v13;
  uint64_t v14 = sub_A6320();
  swift_getWitnessTable();
  size_t v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16);
  v15(&v19, &v17, v14);
  swift_release();
  uint64_t v17 = v19;
  uint64_t v18 = v20;
  v15(a2, &v17, v14);
  return swift_release();
}

uint64_t sub_51134@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v100 = a2;
  uint64_t v97 = a5;
  uint64_t v98 = a1;
  uint64_t v7 = sub_7AF4(&qword_D89C8);
  __chkstk_darwin(v7);
  uint64_t v92 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = *(void *)(a3 - 8);
  __chkstk_darwin(v9);
  __int16 v88 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_296D0();
  uint64_t v104 = a3;
  uint64_t v105 = v7;
  uint64_t v102 = a3;
  uint64_t v103 = a4;
  uint64_t v96 = v7;
  uint64_t v106 = a4;
  unint64_t v107 = v11;
  unint64_t v91 = v11;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v94 = *(void *)(OpaqueTypeMetadata2 - 8);
  uint64_t v95 = OpaqueTypeMetadata2;
  __chkstk_darwin(OpaqueTypeMetadata2);
  uint64_t v90 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v93 = (char *)&v67 - v15;
  uint64_t v16 = type metadata accessor for LiveSpeechCaptionsDraggableView();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v101 = *(void *)(v17 + 64);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v67 - v18;
  uint64_t v20 = sub_A62C0();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  __chkstk_darwin(v20);
  uint64_t v76 = v22;
  uint64_t v23 = sub_A68C0();
  __chkstk_darwin(v23);
  uint64_t v82 = sub_A61F0();
  uint64_t v83 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  double v75 = (char *)&v67 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = sub_7AF4(&qword_D8100);
  uint64_t v85 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v99 = (char *)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_7AF4(&qword_D8108);
  uint64_t v86 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v81 = (char *)&v67 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A6950();
  sub_A61B0();
  uint64_t v27 = v21;
  unint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  uint64_t v79 = v21 + 16;
  uint64_t v80 = v28;
  uint64_t v68 = (char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28(v68, v98, v20);
  uint64_t v29 = v17;
  unint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v73 = v17 + 16;
  char v74 = v30;
  unint64_t v31 = v19;
  v30(v19, v100, v16);
  uint64_t v71 = *(unsigned __int8 *)(v27 + 80);
  uint64_t v32 = (v71 + 32) & ~v71;
  uint64_t v33 = *(unsigned __int8 *)(v29 + 80);
  uint64_t v72 = v71 | v33 | 7;
  uint64_t v34 = swift_allocObject();
  uint64_t v35 = v103;
  *(void *)(v34 + 16) = v102;
  *(void *)(v34 + 24) = v35;
  unsigned int v36 = *(void (**)(uint64_t, char *, uint64_t))(v27 + 32);
  uint64_t v77 = v27 + 32;
  uint64_t v78 = v36;
  uint64_t v37 = v20;
  v36(v34 + v32, (char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v20);
  uint64_t v38 = *(void (**)(uint64_t, char *, uint64_t))(v29 + 32);
  uint64_t v69 = v29 + 32;
  uint64_t v70 = v38;
  int v39 = v31;
  v38(v34 + ((v22 + v33 + v32) & ~v33), v31, v16);
  sub_A00C(&qword_D8130, (void (*)(uint64_t))&type metadata accessor for DragGesture);
  sub_A00C(&qword_D8138, (void (*)(uint64_t))&type metadata accessor for DragGesture.Value);
  uint64_t v40 = v82;
  unsigned int v41 = v75;
  sub_A6F70();
  swift_release();
  (*(void (**)(char *, uint64_t))(v83 + 8))(v41, v40);
  unsigned int v42 = v39;
  uint64_t v43 = v16;
  v74(v39, v100, v16);
  int v44 = v68;
  v80(v68, v98, v37);
  uint64_t v45 = (v33 + 32) & ~v33;
  uint64_t v46 = (v101 + v71 + v45) & ~v71;
  int v47 = v81;
  uint64_t v48 = swift_allocObject();
  uint64_t v50 = v102;
  uint64_t v49 = v103;
  *(void *)(v48 + 16) = v102;
  *(void *)(v48 + 24) = v49;
  v70(v48 + v45, v42, v43);
  uint64_t v51 = v50;
  v78(v48 + v46, v44, v37);
  sub_A45C(&qword_D8140, &qword_D8100);
  uint64_t v52 = v84;
  uint64_t v53 = v99;
  sub_A6F60();
  uint64_t v54 = v89;
  swift_release();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v53, v52);
  unint64_t v55 = v88;
  (*(void (**)(void))(v54 + 16))();
  if (sub_4F160())
  {
    uint64_t v56 = 1;
    uint64_t v57 = (uint64_t)v92;
    uint64_t v58 = v87;
    uint64_t v59 = v86;
  }
  else
  {
    uint64_t v59 = v86;
    uint64_t v57 = (uint64_t)v92;
    uint64_t v58 = v87;
    (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v92, v47, v87);
    uint64_t v56 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(v57, v56, 1, v58);
  sub_A6210();
  uint64_t v60 = v90;
  sub_A6C60();
  sub_535A8(v57);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v51);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v47, v58);
  uint64_t v62 = v93;
  uint64_t v61 = v94;
  uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v94 + 16);
  uint64_t v64 = v95;
  v63(v93, v60, v95);
  uint64_t v65 = *(void (**)(char *, uint64_t))(v61 + 8);
  v65(v60, v64);
  v63(v97, v62, v64);
  return ((uint64_t (*)(char *, uint64_t))v65)(v62, v64);
}

void sub_51B2C(uint64_t a1)
{
  sub_A6290();
  sub_A6290();
  sub_A62A0();
  uint64_t v2 = sub_A62A0();
  double v3 = LiveSpeechStore.SpeechContext.init(text:highlightRange:)(v2);
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  uint64_t v10 = (int *)type metadata accessor for LiveSpeechCaptionsDraggableView();
  sub_51BEC(a1, v10, v3, v5, v7, v9);
}

void sub_51BEC(uint64_t a1, int *a2, double a3, double a4, double a5, double a6)
{
  uint64_t v68 = a1;
  uint64_t v12 = sub_A61E0();
  uint64_t v66 = *(int **)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *((void *)a2 - 1);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v65 - v20;
  if (*((void *)v6 + 5))
  {
    uint64_t v22 = (uint64_t *)((char *)v6 + a2[14]);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    uint64_t v25 = v22[2];
    *(void *)&long long v74 = *v22;
    *((void *)&v74 + 1) = v24;
    uint64_t v75 = v25;
    sub_7AF4(&qword_D8178);
    uint64_t v67 = v6;
    sub_A6E80();
    v77.double width = 0.0;
    v77.double height = 0.0;
    if (!CGSizeEqualToSize(v69, v77))
    {
      *(void *)&long long v74 = v23;
      *((void *)&v74 + 1) = v24;
      uint64_t v75 = v25;
      sub_A6E80();
      double width = v69.width;
      uint64_t v27 = v68;
      sub_A61C0();
      double v29 = vabdd_f64(width, v28);
      (*(void (**)(char *, double *, int *))(v15 + 16))(v21, v67, a2);
      unint64_t v30 = v66;
      (*((void (**)(char *, uint64_t, uint64_t))v66 + 2))(v14, v27, v12);
      if (v29 >= 2.0)
      {
        (*((void (**)(char *, uint64_t))v30 + 1))(v14, v12);
        (*(void (**)(char *, int *))(v15 + 8))(v21, a2);
      }
      else
      {
        unint64_t v31 = &v21[a2[14]];
        uint64_t v32 = *((void *)v31 + 2);
        long long v74 = *(_OWORD *)v31;
        uint64_t v75 = v32;
        sub_A6E80();
        double height = v69.height;
        sub_A61C0();
        double v35 = vabdd_f64(height, v34);
        (*((void (**)(char *, uint64_t))v30 + 1))(v14, v12);
        (*(void (**)(char *, int *))(v15 + 8))(v21, a2);
        if (v35 < 2.0) {
          return;
        }
      }
    }
    sub_A61C0();
    uint64_t v36 = v22[2];
    long long v74 = *(_OWORD *)v22;
    uint64_t v75 = v36;
    v69.double width = v37;
    v69.double height = v38;
    sub_A6E90();
    sub_A61D0();
    double v40 = v39;
    sub_A61C0();
    double v42 = v41;
    sub_A61D0();
    double v44 = v43;
    sub_A61C0();
    uint64_t v45 = v67;
    double v47 = v46;
    double v48 = vabdd_f64(v40, v42);
    double v49 = *(double *)((char *)v67 + a2[15]);
    (*(void (**)(char *, double *, int *))(v15 + 16))(v18, v67, a2);
    if (v48 <= v49)
    {
      double v50 = vabdd_f64(v44, v47);
      double v51 = *(double *)&v18[a2[15]];
      (*(void (**)(char *, int *))(v15 + 8))(v18, a2);
      if (v50 <= v51)
      {
        uint64_t v66 = a2;
        uint64_t v52 = (uint64_t *)((char *)v45 + a2[13]);
        uint64_t v53 = *v52;
        uint64_t v54 = v52[1];
        uint64_t v55 = v52[2];
        *(void *)&long long v74 = *v52;
        *((void *)&v74 + 1) = v54;
        uint64_t v75 = v55;
        uint64_t v56 = v45;
        sub_A6E80();
        v78.double width = 0.0;
        v78.double height = 0.0;
        if (CGSizeEqualToSize(v69, v78))
        {
          CGFloat v57 = v45[5];
          if (v57 == 0.0)
          {
            CGSize v63 = CGSizeZero;
          }
          else
          {
            uint64_t v58 = *((void *)v45 + 7);
            uint64_t v59 = *((void *)v45 + 6);
            CGFloat v60 = v45[4];
            *(CGFloat *)&long long v74 = v60;
            *((CGFloat *)&v74 + 1) = v57;
            uint64_t v75 = v59;
            uint64_t v76 = v58;
            v69.double width = v60;
            v69.double height = v57;
            uint64_t v70 = v59;
            uint64_t v71 = v58;
            sub_53F74(*(uint64_t *)&v60, *(uint64_t *)&v57);
            sub_7AF4(&qword_D8180);
            sub_A6F00();
            sub_52470(v72, v73, a3, a4, a5, a6);
            v69.double width = v61;
            v69.double height = v62;
            sub_A6F10();
            swift_release();
            swift_release();
            *(CGFloat *)&long long v74 = v60;
            *((CGFloat *)&v74 + 1) = v57;
            uint64_t v75 = v59;
            uint64_t v76 = v58;
            sub_A6F00();
            CGSize v63 = v69;
          }
          *(void *)&long long v74 = v53;
          *((void *)&v74 + 1) = v54;
          uint64_t v75 = v55;
          CGSize v69 = v63;
          sub_A6E90();
          uint64_t v56 = v67;
        }
        sub_A7070();
        sub_A7060();
        swift_release();
        sub_A7050();
        uint64_t v64 = swift_release();
        __chkstk_darwin(v64);
        *((_OWORD *)&v65 - 4) = *((_OWORD *)v66 + 1);
        *(&v65 - 6) = v68;
        *(&v65 - 5) = (uint64_t)v56;
        *((double *)&v65 - 4) = a3;
        *((double *)&v65 - 3) = a4;
        *((double *)&v65 - 2) = a5;
        *((double *)&v65 - 1) = a6;
        sub_A6300();
        swift_release();
      }
    }
    else
    {
      (*(void (**)(char *, int *))(v15 + 8))(v18, a2);
    }
  }
}

void sub_5219C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LiveSpeechCaptionsDraggableView();
  sub_7AF4(&qword_D8178);
  sub_A6E90();
  sub_A6E90();
  sub_A62A0();
  sub_52270(a1, v2);
}

void sub_52270(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_A63C0();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  double v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v16 - v9;
  sub_A61D0();
  double v12 = v11;
  sub_A61C0();
  double v14 = v13;
  sub_A61D0();
  sub_A61C0();
  if (*(double *)(v2 + *(int *)(a2 + 60)) < vabdd_f64(v12, v14))
  {
    sub_53C94(&qword_D81B0, (uint64_t (*)(void))&type metadata accessor for LayoutDirection, 0x694474756F79614CLL, 0xEF6E6F6974636572, (uint64_t)v10);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for LayoutDirection.rightToLeft(_:), v4);
    sub_A63B0();
    uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v7, v4);
    v15(v10, v4);
    sub_529DC();
  }
}

void sub_52470(double a1, CGFloat a2, double a3, double a4, double a5, double a6)
{
  if (qword_D7D68 != -1) {
    swift_once();
  }
  LiveSpeechCaptionsViewsCoordinator.safeOffset(feature:offset:size:containerRect:foreheadWindowRect:)(*v6, a1, a2, 0.0, 0.0, a3, a4, a5, a6, CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height);
}

uint64_t sub_52544(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = sub_A63C0();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  double v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  double v14 = (char *)&v23 - v13;
  sub_A61C0();
  double v16 = v15;
  double v18 = v17;
  type metadata accessor for LiveSpeechCaptionsDraggableView();
  sub_53C94(&qword_D81B0, (uint64_t (*)(void))&type metadata accessor for LayoutDirection, 0x694474756F79614CLL, 0xEF6E6F6974636572, (uint64_t)v14);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for LayoutDirection.rightToLeft(_:), v8);
  char v19 = sub_A63B0();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v11, v8);
  v20(v14, v8);
  double v21 = -v16;
  if ((v19 & 1) == 0) {
    double v21 = v16;
  }
  return sub_52758(v21, v18, a1, a2, a3, a4);
}

uint64_t sub_52758(double a1, double a2, double a3, double a4, double a5, double a6)
{
  if (*(void *)(v6 + 40))
  {
    swift_retain();
    swift_retain();
    sub_7AF4(&qword_D8178);
    sub_A6E80();
    sub_7AF4(&qword_D8180);
    sub_A6F00();
    sub_A6F10();
    swift_release();
    swift_release();
    swift_retain();
    swift_retain();
    sub_A6E80();
    sub_A6F00();
    sub_A6F10();
    swift_release();
    swift_release();
    swift_retain();
    swift_retain();
    sub_A6F00();
    sub_52470(v13, v14 + a2, a3, a4, a5, a6);
    sub_A6F10();
    swift_release();
    swift_release();
    sub_A6F00();
    swift_retain();
    swift_retain();
    sub_A6F00();
    sub_A6F10();
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_529DC()
{
  sub_A7080();
  sub_A6300();
  swift_release();
  if (*v0)
  {
    if (qword_D7D68 != -1) {
      swift_once();
    }
    LiveSpeechCaptionsViewsCoordinator.updateLiveCaptionsWindowState(_:)(LiveSpeechUIService_LiveSpeechCaptionsWindowState_pip);
  }
  else
  {
    if (qword_D7D68 != -1) {
      swift_once();
    }
    LiveSpeechCaptionsViewsCoordinator.updateLiveSpeechWindowState(_:)(LiveSpeechUIService_LiveSpeechCaptionsWindowState_pip);
  }
}

uint64_t sub_52AE0()
{
  if (qword_D7D50 != -1) {
    swift_once();
  }
  sub_50EA0();
  return sub_4F1B0();
}

void sub_52BCC()
{
  xmmword_DF5F0 = 0uLL;
}

double sub_52BDC@<D0>(_OWORD *a1@<X8>)
{
  if (qword_D7DA0 != -1) {
    swift_once();
  }
  double result = *(double *)&xmmword_DF5F0;
  *a1 = xmmword_DF5F0;
  return result;
}

double sub_52C40()
{
  double result = 0.0;
  xmmword_DF600 = 0u;
  *(_OWORD *)algn_DF610 = 0u;
  return result;
}

double sub_52C54@<D0>(_OWORD *a1@<X8>)
{
  if (qword_D7DA8 != -1) {
    swift_once();
  }
  double result = *(double *)&xmmword_DF600;
  long long v3 = *(_OWORD *)algn_DF610;
  *a1 = xmmword_DF600;
  a1[1] = v3;
  return result;
}

uint64_t sub_52CB4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_52CF8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for LiveSpeechCaptionsDraggableView();
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v6 = v0 + v4;
  swift_release();
  swift_release();
  if (*(void *)(v0 + v4 + 40))
  {
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v6 + *(int *)(v2 + 48), v1);
  swift_release();
  swift_release();
  uint64_t v7 = v6 + *(int *)(v2 + 64);
  sub_7AF4(&qword_D81B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_A63C0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }

  return _swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_52EA8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for LiveSpeechCaptionsDraggableView() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_51134(a1, v8, v5, v6, a2);
}

uint64_t sub_52F44()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = sub_A62C0();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = type metadata accessor for LiveSpeechCaptionsDraggableView();
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v9 = (v6 + v8) & ~v8;
  uint64_t v10 = *(void *)(*(void *)(v7 - 8) + 64);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v5, v2);
  uint64_t v11 = v0 + v9;
  swift_release();
  swift_release();
  if (*(void *)(v0 + v9 + 40))
  {
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v11 + *(int *)(v7 + 48), v1);
  swift_release();
  swift_release();
  uint64_t v12 = v11 + *(int *)(v7 + 64);
  sub_7AF4(&qword_D81B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = sub_A63C0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  }
  else
  {
    swift_release();
  }

  return _swift_deallocObject(v0, v9 + v10, v4 | v8 | 7);
}

void sub_5317C(uint64_t a1)
{
  sub_A62C0();
  type metadata accessor for LiveSpeechCaptionsDraggableView();

  sub_51B2C(a1);
}

uint64_t sub_5326C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for LiveSpeechCaptionsDraggableView();
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v15 = *(void *)(*(void *)(v2 - 8) + 64);
  uint64_t v5 = sub_A62C0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = v0 + v4;
  swift_release();
  swift_release();
  if (*(void *)(v0 + v4 + 40))
  {
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v9 + *(int *)(v2 + 48), v1);
  swift_release();
  swift_release();
  uint64_t v10 = v9 + *(int *)(v2 + 64);
  sub_7AF4(&qword_D81B0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_A63C0();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  uint64_t v12 = (v4 + v15 + v7) & ~v7;
  uint64_t v13 = v12 + v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v12, v5);

  return _swift_deallocObject(v0, v13, v3 | v7 | 7);
}

void sub_534B8(uint64_t a1)
{
  type metadata accessor for LiveSpeechCaptionsDraggableView();
  sub_A62C0();

  sub_5219C(a1);
}

uint64_t sub_535A8(uint64_t a1)
{
  uint64_t v2 = sub_7AF4(&qword_D89C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_53608@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_A6D90();
  uint64_t result = sub_A62A0();
  *a1 = v2;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t sub_53648@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_A68C0();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_A6D90();
  sub_A6950();
  sub_A62B0();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *a1 = v6;
  a1[1] = v8;
  a1[2] = v10;
  a1[3] = v12;
  a1[4] = v14;
  return result;
}

uint64_t sub_53760@<X0>(uint64_t a1@<X8>)
{
  return sub_53C94(&qword_D81B0, (uint64_t (*)(void))&type metadata accessor for LayoutDirection, 0x694474756F79614CLL, 0xEF6E6F6974636572, a1);
}

uint64_t sub_537A0()
{
  return sub_52AE0();
}

uint64_t sub_537C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_A6660();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_7AF4(&qword_D7E78);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_8860(v2, (uint64_t)v10, &qword_D7E78);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return sub_53FB4((uint64_t)v10, a1);
  }
  os_log_type_t v12 = sub_A7440();
  uint64_t v13 = sub_A69C0();
  os_log_type_t v14 = v12;
  if (os_log_type_enabled(v13, v12))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v17[1] = a1;
    uint64_t v18 = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    v17[2] = sub_15F94(0xD000000000000020, 0x80000000000AE8B0, &v18);
    sub_A7600();
    _os_log_impl(&def_5ED54, v13, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_A6650();
  swift_getAtKeyPath();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_53A50(uint64_t a1, char a2)
{
  uint64_t v4 = sub_A6660();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return a1 & 1;
  }
  swift_retain();
  os_log_type_t v8 = sub_A7440();
  uint64_t v9 = sub_A69C0();
  os_log_type_t v10 = v8;
  if (os_log_type_enabled(v9, v8))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v13 = sub_15F94(1819242306, 0xE400000000000000, &v14);
    sub_A7600();
    _os_log_impl(&def_5ED54, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_A6650();
  swift_getAtKeyPath();
  sub_5401C(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v14;
}

uint64_t sub_53C54@<X0>(uint64_t a1@<X8>)
{
  return sub_53C94(&qword_D7E68, (uint64_t (*)(void))&type metadata accessor for DynamicTypeSize, 0x5463696D616E7944, 0xEF657A6953657079, a1);
}

uint64_t sub_53C94@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v9 = v5;
  uint64_t v11 = sub_A6660();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_7AF4(a1);
  __chkstk_darwin(v15);
  double v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_8860(v9, (uint64_t)v17, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = a2(0);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(a5, v17, v18);
  }
  else
  {
    os_log_type_t v20 = sub_A7440();
    double v21 = sub_A69C0();
    if (os_log_type_enabled(v21, v20))
    {
      unint64_t v25 = a4;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v26 = a5;
      uint64_t v23 = (uint8_t *)v22;
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      uint64_t v28 = sub_15F94(v27, v25, &v29);
      sub_A7600();
      _os_log_impl(&def_5ED54, v21, v20, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_A6650();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_53F4C()
{
  return sub_52544(v0[6], v0[7], v0[8], v0[9]);
}

uint64_t sub_53F74(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_53FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_7AF4(&qword_D8598);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_5401C(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t sub_54028()
{
  return swift_getGenericMetadata();
}

uint64_t sub_54058()
{
  return swift_getWitnessTable();
}

uint64_t LiveSpeechRootView_iOS.init(store:)()
{
  type metadata accessor for LiveSpeechStore(0);
  sub_5416C();

  return sub_A6340();
}

unint64_t sub_5416C()
{
  unint64_t result = qword_D7E60;
  if (!qword_D7E60)
  {
    type metadata accessor for LiveSpeechStore(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D7E60);
  }
  return result;
}

uint64_t property wrapper backing initializer of LiveSpeechRootView_iOS.store()
{
  swift_getObjectType();
  sub_5416C();

  return sub_A6340();
}

void LiveSpeechRootView_iOS.store.setter(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
}

uint64_t (*LiveSpeechRootView_iOS.store.modify())()
{
  return LiveSpeechStore.SpeechContext.init(text:highlightRange:);
}

uint64_t LiveSpeechRootView_iOS.$store.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LiveSpeechStore(0);
  unint64_t v5 = sub_5416C();

  return ObservedObject.projectedValue.getter(a1, a2, v4, v5);
}

uint64_t LiveSpeechRootView_iOS.body.getter@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_7AF4(&qword_D97C8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ([self isInHardwareKeyboardMode]) {
    uint64_t v7 = sub_A7010();
  }
  else {
    uint64_t v7 = sub_A7020();
  }
  *uint64_t v6 = v7;
  v6[1] = v8;
  uint64_t v9 = sub_7AF4(&qword_D97D0);
  sub_54394(a1, (uint64_t *)((char *)v6 + *(int *)(v9 + 44)));
  return sub_29C10((uint64_t)v6, a2, &qword_D97C8);
}

uint64_t sub_54394@<X0>(void *a1@<X1>, _OWORD *a2@<X8>)
{
  CGFloat v37 = a2;
  uint64_t v3 = type metadata accessor for LiveSpeechHUDView_iOS(0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_7AF4(&qword_D97E0);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_7AF4(&qword_D97E8);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  uint64_t v38 = (uint64_t)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v43 = (uint64_t)&v35 - v14;
  uint64_t v15 = sub_A6D90();
  uint64_t v16 = sub_A7030();
  sub_54BEC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v69, 0.0, 1, INFINITY, 0, v16, v17, v15);
  swift_release();
  uint64_t v47 = v70;
  uint64_t v48 = v69;
  uint64_t v49 = v73;
  uint64_t v42 = v76;
  uint64_t v44 = v79;
  uint64_t v45 = v82;
  uint64_t v46 = v85;
  uint64_t v39 = v88;
  uint64_t v40 = v89;
  unsigned __int8 v61 = v71;
  unsigned __int8 v59 = v74;
  char v57 = v77;
  char v55 = v80;
  char v53 = v83;
  unsigned __int8 v51 = v86;
  LiveSpeechHUDView_iOS.init()((uint64_t)v5);
  type metadata accessor for LiveSpeechStore(0);
  sub_5416C();
  id v18 = a1;
  uint64_t v19 = sub_A6060();
  sub_54B28((uint64_t)v5, (uint64_t)v9);
  os_log_type_t v20 = (uint64_t *)&v9[*(int *)(v7 + 44)];
  uint64_t *v20 = v19;
  v20[1] = (uint64_t)v18;
  sub_54B8C((uint64_t)v5);
  uint64_t v21 = v38;
  sub_8860((uint64_t)v9, v38, &qword_D97E0);
  uint64_t v22 = (void *)(v21 + *(int *)(v11 + 44));
  *uint64_t v22 = 0;
  v22[1] = 0;
  sub_A35C((uint64_t)v9, &qword_D97E0);
  uint64_t v23 = v43;
  sub_29C10(v21, v43, &qword_D97E8);
  LOBYTE(v19) = v61;
  unsigned __int8 v24 = v59;
  int v35 = v61;
  int v36 = v59;
  LOBYTE(v7) = v57;
  LOBYTE(v9) = v55;
  LOBYTE(v11) = v53;
  int v41 = v51;
  sub_8860(v23, v21, &qword_D97E8);
  *(void *)&long long v62 = v48;
  *((void *)&v62 + 1) = v47;
  LOBYTE(v63) = v19;
  *(_DWORD *)((char *)&v63 + 1) = *(_DWORD *)v60;
  DWORD1(v63) = *(_DWORD *)&v60[3];
  *((void *)&v63 + 1) = v49;
  LOBYTE(v64) = v24;
  *(_DWORD *)((char *)&v64 + 1) = *(_DWORD *)v58;
  DWORD1(v64) = *(_DWORD *)&v58[3];
  *((void *)&v64 + 1) = v42;
  LOBYTE(v65) = v7;
  *(_DWORD *)((char *)&v65 + 1) = *(_DWORD *)v56;
  DWORD1(v65) = *(_DWORD *)&v56[3];
  *((void *)&v65 + 1) = v44;
  LOBYTE(v66) = (_BYTE)v9;
  *(_DWORD *)((char *)&v66 + 1) = *(_DWORD *)v54;
  DWORD1(v66) = *(_DWORD *)&v54[3];
  *((void *)&v66 + 1) = v45;
  LOBYTE(v67) = v11;
  *(_DWORD *)((char *)&v67 + 1) = *(_DWORD *)v52;
  DWORD1(v67) = *(_DWORD *)&v52[3];
  *((void *)&v67 + 1) = v46;
  LOBYTE(v68[0]) = v41;
  *(_DWORD *)((char *)v68 + 1) = *(_DWORD *)v50;
  DWORD1(v68[0]) = *(_DWORD *)&v50[3];
  uint64_t v25 = v39;
  uint64_t v26 = v40;
  *((void *)&v68[0] + 1) = v39;
  *(void *)&v68[1] = v40;
  long long v27 = v65;
  uint64_t v28 = v37;
  v37[2] = v64;
  v28[3] = v27;
  long long v29 = v63;
  *uint64_t v28 = v62;
  v28[1] = v29;
  long long v30 = v67;
  long long v31 = v68[0];
  v28[4] = v66;
  v28[5] = v30;
  BYTE8(v68[1]) = 0;
  v28[6] = v31;
  *(_OWORD *)((char *)v28 + 105) = *(_OWORD *)((char *)v68 + 9);
  uint64_t v32 = v28;
  uint64_t v33 = sub_7AF4(&qword_D97F0);
  sub_8860(v21, (uint64_t)v32 + *(int *)(v33 + 48), &qword_D97E8);
  sub_A1F0((uint64_t)&v62);
  sub_A35C(v43, &qword_D97E8);
  sub_A35C(v21, &qword_D97E8);
  uint64_t v69 = v48;
  uint64_t v70 = v47;
  unsigned __int8 v71 = v35;
  *(_DWORD *)double v72 = *(_DWORD *)v60;
  *(_DWORD *)&v72[3] = *(_DWORD *)&v60[3];
  uint64_t v73 = v49;
  unsigned __int8 v74 = v36;
  *(_DWORD *)uint64_t v75 = *(_DWORD *)v58;
  *(_DWORD *)&v75[3] = *(_DWORD *)&v58[3];
  uint64_t v76 = v42;
  char v77 = v7;
  *(_DWORD *)CGSize v78 = *(_DWORD *)v56;
  *(_DWORD *)&v78[3] = *(_DWORD *)&v56[3];
  uint64_t v79 = v44;
  char v80 = (char)v9;
  *(_DWORD *)&v81[3] = *(_DWORD *)&v54[3];
  *(_DWORD *)uint64_t v81 = *(_DWORD *)v54;
  uint64_t v82 = v45;
  char v83 = v11;
  *(_DWORD *)&v84[3] = *(_DWORD *)&v52[3];
  *(_DWORD *)uint64_t v84 = *(_DWORD *)v52;
  uint64_t v85 = v46;
  unsigned __int8 v86 = v41;
  *(_DWORD *)uint64_t v87 = *(_DWORD *)v50;
  *(_DWORD *)&v87[3] = *(_DWORD *)&v50[3];
  uint64_t v88 = v25;
  uint64_t v89 = v26;
  char v90 = 0;
  return sub_A21C((uint64_t)&v69);
}

uint64_t sub_5488C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_548A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_7AF4(&qword_D97C8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (uint64_t *)((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v1 + 8);
  if ([self isInHardwareKeyboardMode]) {
    uint64_t v7 = sub_A7010();
  }
  else {
    uint64_t v7 = sub_A7020();
  }
  *uint64_t v5 = v7;
  v5[1] = v8;
  uint64_t v9 = sub_7AF4(&qword_D97D0);
  sub_54394(v6, (uint64_t *)((char *)v5 + *(int *)(v9 + 44)));
  return sub_29C10((uint64_t)v5, a1, &qword_D97C8);
}

void *initializeBufferWithCopyOfBuffer for LiveSpeechRootView_iOS(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  id v4 = v3;
  return a1;
}

void destroy for LiveSpeechRootView_iOS(uint64_t a1)
{
}

void *assignWithCopy for LiveSpeechRootView_iOS(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)a2[1];
  id v4 = (void *)a1[1];
  a1[1] = v3;
  id v5 = v3;

  return a1;
}

void *assignWithTake for LiveSpeechRootView_iOS(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  id v4 = (void *)a1[1];
  *a1 = *a2;
  a1[1] = v3;

  return a1;
}

uint64_t getEnumTagSinglePayload for LiveSpeechRootView_iOS(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LiveSpeechRootView_iOS(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveSpeechRootView_iOS()
{
  return &type metadata for LiveSpeechRootView_iOS;
}

unint64_t sub_54ACC()
{
  unint64_t result = qword_D97D8;
  if (!qword_D97D8)
  {
    sub_7C5C(&qword_D97C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D97D8);
  }
  return result;
}

uint64_t sub_54B28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LiveSpeechHUDView_iOS(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_54B8C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LiveSpeechHUDView_iOS(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_54BEC@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_A7440();
    uint64_t v25 = (void *)sub_A69C0();
    sub_A5FD0();
  }
  sub_A64A0();
  *(_OWORD *)(a9 + 56) = v30;
  *(_OWORD *)(a9 + 72) = v31;
  *(_OWORD *)(a9 + 88) = v32;
  *(_OWORD *)(a9 + 104) = v33;
  *(_OWORD *)(a9 + 8) = v27;
  *(_OWORD *)(a9 + 24) = v28;
  *(void *)a9 = a16;
  *(_OWORD *)(a9 + 40) = v29;

  return swift_retain();
}

__n128 sub_54DA8@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_A7440();
    uint64_t v23 = (void *)sub_A69C0();
    sub_A5FD0();
  }
  sub_A64A0();
  uint64_t v24 = sub_7AF4(&qword_D9808);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(a9, v13, v24);
  uint64_t v25 = (_OWORD *)(a9 + *(int *)(sub_7AF4(&qword_D9810) + 36));
  v25[4] = v31;
  v25[5] = v32;
  v25[6] = v33;
  _OWORD *v25 = v27;
  v25[1] = v28;
  __n128 result = v30;
  void v25[2] = v29;
  v25[3] = v30;
  return result;
}

uint64_t sub_54F94@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_A7440();
    uint64_t v23 = (void *)sub_A69C0();
    sub_A5FD0();
  }
  sub_A64A0();
  long long v24 = *(_OWORD *)(v13 + 16);
  v36[0] = *(_OWORD *)v13;
  v36[1] = v24;
  char v37 = *(unsigned char *)(v13 + 32);
  long long v34 = *(_OWORD *)(v13 + 40);
  sub_29C10((uint64_t)&v34 + 8, (uint64_t)v35, &qword_D9B00);
  long long v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 104) = v30;
  *(_OWORD *)(a9 + 120) = v31;
  *(_OWORD *)(a9 + 136) = v32;
  *(_OWORD *)(a9 + 152) = v33;
  *(_OWORD *)(a9 + 56) = v27;
  *(_OWORD *)(a9 + 72) = v28;
  *(void *)(a9 + 48) = *(void *)(v13 + 48);
  *(_OWORD *)(a9 + 88) = v29;
  sub_5D498((uint64_t *)v36);
  swift_retain();
  return sub_A1F0((uint64_t)v35);
}

double sub_5518C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_55244(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_D9AD0, &qword_D9AD8).n128_u64[0];
  return result;
}

double sub_551E8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_55244(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_D9AE0, &qword_D9AE8).n128_u64[0];
  return result;
}

__n128 sub_55244@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v19 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_A7440();
    long long v28 = (void *)sub_A69C0();
    sub_A5FD0();

    uint64_t v19 = a17;
  }
  sub_A64A0();
  sub_8860(v17, a9, a16);
  long long v29 = (_OWORD *)(a9 + *(int *)(sub_7AF4(v19) + 36));
  v29[4] = v35;
  v29[5] = v36;
  v29[6] = v37;
  *long long v29 = v31;
  v29[1] = v32;
  __n128 result = v34;
  v29[2] = v33;
  v29[3] = v34;
  return result;
}

double sub_55414@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_55244(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_D9AF0, &qword_D9AF8).n128_u64[0];
  return result;
}

__n128 LiveSpeechPhrasesListView_iOS.init()@<Q0>(__n128 *a1@<X8>)
{
  type metadata accessor for LiveSpeechStore(0);
  sub_5DCAC((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
  uint64_t v2 = sub_A64C0();
  unint64_t v4 = v3;
  sub_7AF4(&qword_D97F8);
  sub_A6E70();
  __n128 result = v6;
  a1->n128_u64[0] = v2;
  a1->n128_u64[1] = v4;
  a1[1] = v6;
  a1[2].n128_u64[0] = v7;
  return result;
}

uint64_t LiveSpeechPhrasesListView_iOS.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v43 = a1;
  uint64_t v3 = sub_7AF4(&qword_D9800);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  __n128 v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_7AF4(&qword_D9808);
  uint64_t v39 = *(void *)(v7 - 8);
  *(void *)&long long v40 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_7AF4(&qword_D9810);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_7AF4(&qword_D9818);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_7AF4(&qword_D9820) - 8;
  __chkstk_darwin(v42);
  uint64_t v41 = (uint64_t)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A69F0();
  uint64_t v44 = v2;
  sub_7AF4(&qword_D9828);
  sub_A45C(&qword_D9830, &qword_D9828);
  sub_A6180();
  sub_A45C(&qword_D9838, &qword_D9800);
  sub_A6CB0();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  id v18 = [self mainScreen];
  [v18 bounds];
  CGFloat v20 = v19;
  CGFloat v22 = v21;
  CGFloat v24 = v23;
  CGFloat v26 = v25;

  v49.origin.CGFloat x = v20;
  v49.origin.CGFloat y = v22;
  v49.size.double width = v24;
  v49.size.double height = v26;
  double Height = CGRectGetHeight(v49);
  if (Height > 500.0) {
    double v28 = 350.0;
  }
  else {
    double v28 = Height * 0.5;
  }
  sub_A7030();
  __n128 v29 = sub_54DA8(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v12, 0.0, 1, v28, 0);
  (*(void (**)(char *, void, __n128))(v39 + 8))(v9, v40, v29);
  sub_8860((uint64_t)v12, (uint64_t)v16, &qword_D9810);
  *(_WORD *)&v16[*(int *)(v14 + 44)] = 256;
  sub_A35C((uint64_t)v12, &qword_D9810);
  sub_7AF4(&qword_D9840);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_A9DC0;
  sub_A6DA0();
  uint64_t v31 = sub_A6DC0();
  swift_release();
  *(void *)(v30 + 32) = v31;
  *(void *)(v30 + 40) = sub_A6DA0();
  uint64_t v45 = v30;
  sub_A72C0();
  sub_A6FA0();
  sub_A70B0();
  sub_A6330();
  uint64_t v32 = v45;
  long long v40 = v46;
  uint64_t v33 = v47;
  uint64_t v34 = v48;
  uint64_t v35 = v41;
  sub_8860((uint64_t)v16, v41, &qword_D9818);
  uint64_t v36 = v35 + *(int *)(v42 + 44);
  *(void *)uint64_t v36 = v32;
  *(_OWORD *)(v36 + 8) = v40;
  *(void *)(v36 + 24) = v33;
  *(void *)(v36 + 32) = v34;
  *(unsigned char *)(v36 + 40) = 0;
  sub_A35C((uint64_t)v16, &qword_D9818);
  return sub_29C10(v35, v43, &qword_D9820);
}

uint64_t sub_55A30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_7AF4(&qword_D9C58);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v20 - v9;
  *(void *)a2 = sub_A6760();
  *(void *)(a2 + 8) = 0x4020000000000000;
  *(unsigned char *)(a2 + 16) = 0;
  uint64_t v11 = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t v12 = a2 + *(int *)(sub_7AF4(&qword_D9C60) + 44);
    swift_getKeyPath();
    swift_getKeyPath();
    id v13 = v11;
    sub_A60D0();

    swift_release();
    swift_release();
    void v20[3] = v21;
    long long v21 = *(_OWORD *)(a1 + 16);
    uint64_t v22 = *(void *)(a1 + 32);
    sub_29C10((uint64_t)&v21, (uint64_t)v24, &qword_D97F8);
    sub_29C10((uint64_t)&v22, (uint64_t)v23, &qword_D9C68);
    uint64_t v14 = swift_allocObject();
    long long v15 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v14 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v14 + 32) = v15;
    *(void *)(v14 + 48) = *(void *)(a1 + 32);
    id v16 = v13;
    sub_5E3FC((uint64_t)v24);
    sub_A1F0((uint64_t)v23);
    sub_7AF4(&qword_D9C70);
    sub_7AF4(&qword_D9C78);
    sub_A45C(&qword_D9C80, &qword_D9C70);
    unint64_t v17 = sub_5D898();
    v20[1] = &type metadata for LiveSpeechPhraseView;
    v20[2] = v17;
    swift_getOpaqueTypeConformance2();
    sub_5E428();
    sub_A6F50();
    id v18 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v18(v10, v7, v4);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v18)(v12, v10, v4);
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_5DCAC((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_55D6C@<X0>(uint64_t a1@<X8>)
{
  return sub_55A30(*(void *)(v1 + 16), a1);
}

uint64_t sub_55D74@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v25 = a3;
  uint64_t v24 = sub_7AF4(&qword_D9C78);
  uint64_t v23 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v22 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v20 = a1[2];
  uint64_t v21 = a1[3];
  long long v33 = *(_OWORD *)(a2 + 16);
  uint64_t v34 = *(void *)(a2 + 32);
  long long v31 = *(_OWORD *)(a2 + 16);
  uint64_t v32 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  sub_7AF4(&qword_D9C20);
  sub_A6EA0();
  uint64_t v8 = *(void **)a2;
  if (*(void *)a2)
  {
    long long v9 = v26;
    long long v10 = v27;
    sub_29C10((uint64_t)&v34, (uint64_t)v35, &qword_D9C68);
    sub_29C10((uint64_t)&v33, (uint64_t)&v31, &qword_D97F8);
    swift_getKeyPath();
    swift_getKeyPath();
    id v11 = v8;
    sub_A60D0();

    swift_release();
    swift_release();
    long long v12 = v26;
    long long v13 = v27;
    *(void *)&long long v26 = v6;
    *((void *)&v26 + 1) = v7;
    long long v27 = v9;
    long long v28 = v10;
    long long v29 = v12;
    long long v30 = v13;
    uint64_t v14 = swift_allocObject();
    long long v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v14 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v14 + 32) = v15;
    *(void *)(v14 + 48) = *(void *)(a2 + 32);
    *(void *)(v14 + 56) = v6;
    uint64_t v16 = v20;
    *(void *)(v14 + 64) = v7;
    *(void *)(v14 + 72) = v16;
    *(void *)(v14 + 80) = v21;
    swift_bridgeObjectRetain();
    id v17 = v11;
    sub_5E3FC((uint64_t)&v31);
    sub_A1F0((uint64_t)v35);
    sub_5D898();
    swift_bridgeObjectRetain();
    id v18 = v22;
    sub_A6BA0();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 32))(v25, v18, v24);
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_5DCAC((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_560A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_A5F80();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  long long v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v19 = *(_OWORD *)(a1 + 16);
  uint64_t v20 = *(void *)(a1 + 32);
  v18[0] = a2;
  v18[1] = a3;
  swift_bridgeObjectRetain();
  sub_7AF4(&qword_D9C20);
  sub_A6E90();
  uint64_t v14 = *(void **)a1;
  if (*(void *)a1)
  {
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for LiveSpeechInputMode.favoritePhrases(_:), v10);
    id v15 = v14;
    BOOL v16 = LiveSpeechStore.shouldSendSpeechToCall.getter();
    sub_7F2D4(a2, a3, (uint64_t)v13, v16, a4, a5, 1);

    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_5DCAC((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_56280@<X0>(uint64_t a1@<X8>)
{
  return LiveSpeechPhrasesListView_iOS.body.getter(a1);
}

uint64_t _s19LiveSpeechUIService0aB27CategoryPhrasesListView_iOSV14selectedPhraseSSSgvpfP_0()
{
  sub_7AF4(&qword_D97F8);
  sub_A6E70();
  return v1;
}

uint64_t property wrapper backing initializer of LiveSpeechCategoryPhrasesListView_iOS.showMask()
{
  sub_A6E70();
  return v1;
}

uint64_t property wrapper backing initializer of AXLTCaptionsView.contentHeight()
{
  sub_A6E70();
  return v1;
}

uint64_t LiveSpeechCategoryPhrasesListView_iOS.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v123 = a1;
  uint64_t v121 = sub_A6970();
  uint64_t v120 = *(void *)(v121 - 8);
  __chkstk_darwin(v121);
  uint64_t v101 = (char *)&v87 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_A6900();
  uint64_t v108 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  unint64_t v107 = (char *)&v87 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = sub_A68E0();
  uint64_t v104 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v102 = (char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_7AF4(&qword_D9848);
  __chkstk_darwin(v5 - 8);
  uint64_t v98 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_7AF4(&qword_D9850);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v95 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_A66D0();
  uint64_t v91 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  char v125 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_A68B0();
  uint64_t v11 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  long long v13 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_7AF4(&qword_D9858);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v17 = (char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_7AF4(&qword_D9860);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v126 = v18;
  *(void *)&long long v127 = v19;
  __chkstk_darwin(v18);
  char v124 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = sub_7AF4(&qword_D9868);
  __chkstk_darwin(v90);
  uint64_t v89 = (char *)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = sub_7AF4(&qword_D9870);
  uint64_t v97 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v93 = (char *)&v87 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_7AF4(&qword_D9878);
  uint64_t v100 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v94 = (char *)&v87 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = sub_7AF4(&qword_D9880);
  uint64_t v105 = *(void *)(v106 - 8);
  __chkstk_darwin(v106);
  uint64_t v87 = (char *)&v87 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = sub_7AF4(&qword_D9888);
  uint64_t v113 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  uint64_t v111 = (char *)&v87 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = sub_7AF4(&qword_D9890);
  __chkstk_darwin(v112);
  uint64_t v110 = (char *)&v87 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = sub_7AF4(&qword_D9898);
  uint64_t v118 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  uint64_t v117 = (char *)&v87 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_7AF4(&qword_D98A0);
  __chkstk_darwin(v115);
  uint64_t v116 = (char *)&v87 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = v1;
  char v128 = v1;
  sub_7AF4(&qword_D98A8);
  sub_5B778(&qword_D98B0, &qword_D98A8, (void (*)(void))sub_57428);
  sub_A6AD0();
  sub_A68A0();
  sub_A69F0();
  sub_A45C(&qword_D9910, &qword_D9858);
  sub_A6C80();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v88);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  long long v29 = v125;
  sub_A66C0();
  long long v30 = v95;
  long long v31 = &v95[*(int *)(v8 + 44)];
  uint64_t v32 = v91;
  long long v33 = *(void (**)(char *, char *, uint64_t))(v91 + 16);
  uint64_t v34 = v92;
  v33(v31, v29, v92);
  uint64_t v35 = *(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56);
  v35(v31, 0, 1, v34);
  uint64_t v36 = (uint64_t)v30;
  (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v30, v124, v126);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v38 = (uint64_t)v98;
  v33(v98, v29, v34);
  v35((char *)v38, 0, 1, v34);
  uint64_t v39 = v90;
  uint64_t v40 = (uint64_t)v89;
  uint64_t v41 = (uint64_t *)&v89[*(int *)(v90 + 36)];
  uint64_t v42 = sub_7AF4(&qword_D9918);
  sub_8860(v38, (uint64_t)v41 + *(int *)(v42 + 28), &qword_D9848);
  *uint64_t v41 = KeyPath;
  uint64_t v43 = v36;
  uint64_t v44 = v36;
  uint64_t v45 = v40;
  sub_8860(v44, v40, &qword_D9850);
  sub_A35C(v38, &qword_D9848);
  sub_A35C(v43, &qword_D9850);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v125, v34);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v124, v126);
  long long v46 = v102;
  sub_A68D0();
  unint64_t v47 = sub_5B198();
  uint64_t v48 = v93;
  uint64_t v49 = v39;
  uint64_t v50 = v103;
  sub_A6D00();
  unsigned __int8 v51 = v46;
  uint64_t v52 = v50;
  (*(void (**)(char *, uint64_t))(v104 + 8))(v51, v50);
  sub_A35C(v45, &qword_D9868);
  sub_A6A70();
  char v53 = v107;
  sub_A68F0();
  *(void *)&long long v129 = v49;
  *((void *)&v129 + 1) = v52;
  *(void *)&long long v130 = v47;
  *((void *)&v130 + 1) = &protocol witness table for InsetGroupedListStyle;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  char v55 = v94;
  uint64_t v56 = v96;
  char v57 = v48;
  sub_A6C00();
  uint64_t v58 = *(void (**)(char *, uint64_t))(v108 + 8);
  unsigned __int8 v59 = v53;
  CGFloat v60 = v53;
  uint64_t v61 = v109;
  v58(v59, v109);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v57, v56);
  sub_A6A00();
  sub_A68F0();
  *(void *)&long long v129 = v56;
  *((void *)&v129 + 1) = OpaqueTypeConformance2;
  uint64_t v62 = swift_getOpaqueTypeConformance2();
  long long v63 = v87;
  uint64_t v64 = v99;
  sub_A6C00();
  v58(v60, v61);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v55, v64);
  long long v65 = v101;
  sub_A6960();
  LOBYTE(v61) = sub_A69F0();
  unsigned __int8 v66 = sub_A69D0();
  sub_A69E0();
  sub_A69E0();
  if (sub_A69E0() != v61) {
    sub_A69E0();
  }
  sub_A69E0();
  if (sub_A69E0() != v66) {
    sub_A69E0();
  }
  long long v67 = v111;
  *(void *)&long long v129 = v64;
  *((void *)&v129 + 1) = v62;
  swift_getOpaqueTypeConformance2();
  uint64_t v68 = v106;
  sub_A6C30();
  (*(void (**)(char *, uint64_t))(v120 + 8))(v65, v121);
  (*(void (**)(char *, uint64_t))(v105 + 8))(v63, v68);
  uint64_t v69 = *v122;
  if (*v122)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v70 = v69;
    sub_A60D0();

    swift_release();
    swift_release();
    sub_A7030();
    sub_A6270();
    uint64_t v71 = v113;
    uint64_t v72 = (uint64_t)v110;
    uint64_t v73 = v114;
    (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v110, v67, v114);
    unsigned __int8 v74 = (_OWORD *)(v72 + *(int *)(v112 + 36));
    long long v75 = v130;
    *unsigned __int8 v74 = v129;
    v74[1] = v75;
    v74[2] = v131;
    (*(void (**)(char *, uint64_t))(v71 + 8))(v67, v73);
    sub_5B340();
    uint64_t v76 = v117;
    sub_A6CB0();
    sub_A35C(v72, &qword_D9890);
    sub_7AF4(&qword_D9840);
    uint64_t v77 = swift_allocObject();
    *(_OWORD *)(v77 + 16) = xmmword_A9DC0;
    sub_A6DA0();
    uint64_t v78 = sub_A6DC0();
    swift_release();
    *(void *)(v77 + 32) = v78;
    *(void *)(v77 + 40) = sub_A6DA0();
    uint64_t v132 = v77;
    sub_A72C0();
    sub_A6FA0();
    sub_A70B0();
    sub_A6330();
    uint64_t v79 = v132;
    long long v127 = v133;
    uint64_t v80 = v134;
    uint64_t v81 = v135;
    uint64_t v82 = v118;
    uint64_t v83 = (uint64_t)v116;
    uint64_t v84 = v119;
    (*(void (**)(char *, char *, uint64_t))(v118 + 16))(v116, v76, v119);
    uint64_t v85 = v83 + *(int *)(v115 + 36);
    *(void *)uint64_t v85 = v79;
    *(_OWORD *)(v85 + 8) = v127;
    *(void *)(v85 + 24) = v80;
    *(void *)(v85 + 32) = v81;
    *(unsigned char *)(v85 + 40) = 0;
    (*(void (**)(char *, uint64_t))(v82 + 8))(v76, v84);
    return sub_29C10(v83, v123, &qword_D98A0);
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_5DCAC((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_57420@<X0>(uint64_t a1@<X8>)
{
  return sub_576C0(*(void ***)(v1 + 16), a1);
}

unint64_t sub_57428()
{
  unint64_t result = qword_D98B8;
  if (!qword_D98B8)
  {
    sub_7C5C(&qword_D98C0);
    sub_A45C(&qword_D98C8, &qword_D98D0);
    sub_574C8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D98B8);
  }
  return result;
}

unint64_t sub_574C8()
{
  unint64_t result = qword_D98D8;
  if (!qword_D98D8)
  {
    sub_7C5C(&qword_D98E0);
    sub_7C5C(&qword_D98E8);
    sub_57578();
    swift_getOpaqueTypeConformance2();
    sub_5766C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D98D8);
  }
  return result;
}

unint64_t sub_57578()
{
  unint64_t result = qword_D98F0;
  if (!qword_D98F0)
  {
    sub_7C5C(&qword_D98E8);
    sub_57618();
    sub_A45C(&qword_D98F8, &qword_D9900);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D98F0);
  }
  return result;
}

unint64_t sub_57618()
{
  unint64_t result = qword_D9D90;
  if (!qword_D9D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9D90);
  }
  return result;
}

unint64_t sub_5766C()
{
  unint64_t result = qword_D9908;
  if (!qword_D9908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9908);
  }
  return result;
}

uint64_t sub_576C0@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v79 = a2;
  uint64_t v65 = sub_7AF4(&qword_D9B18);
  uint64_t v64 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v4 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_7AF4(&qword_D98E0);
  __chkstk_darwin(v78);
  long long v63 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v66 = (uint64_t)&v61 - v7;
  uint64_t v75 = sub_7AF4(&qword_D9B20);
  __chkstk_darwin(v75);
  uint64_t v77 = (uint64_t)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_7AF4(&qword_D98D0);
  __chkstk_darwin(v76);
  unsigned __int8 v74 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_7AF4(&qword_D9B28);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_7AF4(&qword_D9B30);
  __chkstk_darwin(v13 - 8);
  uint64_t v69 = (uint64_t)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_7AF4(&qword_D9B38);
  __chkstk_darwin(v67);
  uint64_t v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v73 = (uint64_t)&v61 - v18;
  uint64_t v19 = type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS();
  uint64_t v62 = *(void *)(v19 - 8);
  uint64_t v20 = *(void *)(v62 + 64);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = sub_7AF4(&qword_D9B40);
  uint64_t v71 = *(void *)(v21 - 8);
  uint64_t v72 = v21;
  __chkstk_darwin(v21);
  uint64_t v68 = (char *)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v61 - v24;
  __chkstk_darwin(v26);
  id v70 = (char *)&v61 - v27;
  uint64_t v28 = (uint64_t)a1;
  long long v29 = *a1;
  if (v29)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v30 = v29;
    sub_A60D0();

    swift_release();
    swift_release();
    if (v81)
    {
      sub_59704((uint64_t)v4);
      uint64_t v31 = v64;
      uint64_t v32 = (uint64_t)v63;
      uint64_t v33 = v65;
      (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v63, v4, v65);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v4, v33);
      uint64_t v34 = v66;
      sub_29C10(v32, v66, &qword_D98E0);
      sub_8860(v34, v77, &qword_D98E0);
      swift_storeEnumTagMultiPayload();
      sub_A45C(&qword_D98C8, &qword_D98D0);
      sub_574C8();
      sub_A6860();
      return sub_A35C(v34, &qword_D98E0);
    }
    else
    {
      id v36 = v30;
      uint64_t v37 = LiveSpeechStore.selectedCategoryPhrases.getter();

      uint64_t v80 = v37;
      swift_getKeyPath();
      uint64_t v38 = v28;
      sub_5D58C(v28, (uint64_t)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
      unint64_t v39 = (*(unsigned __int8 *)(v62 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
      uint64_t v40 = swift_allocObject();
      sub_5DC44((uint64_t)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v40 + v39, (uint64_t (*)(void))type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS);
      sub_7AF4(&qword_D9B48);
      sub_7AF4(&qword_D9B50);
      sub_A45C(&qword_D9B58, &qword_D9B48);
      sub_5DCAC(&qword_D9B60, (void (*)(uint64_t))&type metadata accessor for LiveSpeechPhrase);
      sub_5D674();
      sub_A6F40();
      uint64_t v42 = v70;
      uint64_t v41 = v71;
      uint64_t v43 = v72;
      (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v70, v25, v72);
      *(void *)uint64_t v12 = sub_A66A0();
      *((void *)v12 + 1) = 0;
      unsigned char v12[16] = 1;
      uint64_t v44 = sub_7AF4(&qword_D9BE0);
      sub_5993C(v38, (uint64_t)&v12[*(int *)(v44 + 44)]);
      uint64_t v45 = v69;
      sub_8860((uint64_t)v12, v69, &qword_D9B28);
      sub_A35C((uint64_t)v12, &qword_D9B28);
      LOBYTE(v38) = sub_A6A30();
      sub_A6140();
      uint64_t v47 = v46;
      uint64_t v49 = v48;
      uint64_t v51 = v50;
      uint64_t v53 = v52;
      sub_8860(v45, (uint64_t)v16, &qword_D9B30);
      uint64_t v54 = &v16[*(int *)(v67 + 36)];
      *uint64_t v54 = v38;
      *((void *)v54 + 1) = v47;
      *((void *)v54 + 2) = v49;
      *((void *)v54 + 3) = v51;
      *((void *)v54 + 4) = v53;
      v54[40] = 0;
      sub_A35C(v45, &qword_D9B30);
      uint64_t v55 = v73;
      sub_29C10((uint64_t)v16, v73, &qword_D9B38);
      uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
      char v57 = v68;
      v56(v68, v42, v43);
      sub_8860(v55, (uint64_t)v16, &qword_D9B38);
      uint64_t v58 = (uint64_t)v74;
      v56(v74, v57, v43);
      uint64_t v59 = sub_7AF4(&qword_D9BE8);
      sub_8860((uint64_t)v16, v58 + *(int *)(v59 + 48), &qword_D9B38);
      sub_A35C((uint64_t)v16, &qword_D9B38);
      CGFloat v60 = *(void (**)(char *, uint64_t))(v41 + 8);
      v60(v57, v43);
      sub_8860(v58, v77, &qword_D98D0);
      swift_storeEnumTagMultiPayload();
      sub_A45C(&qword_D98C8, &qword_D98D0);
      sub_574C8();
      sub_A6860();
      sub_A35C(v58, &qword_D98D0);
      sub_A35C(v55, &qword_D9B38);
      return ((uint64_t (*)(char *, uint64_t))v60)(v42, v43);
    }
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_5DCAC((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_5801C()
{
  return sub_A6F80();
}

uint64_t sub_58088@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v74 = a3;
  uint64_t v5 = type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS();
  uint64_t v70 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v72 = v6;
  uint64_t v73 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_7AF4(&qword_D9B98);
  uint64_t v59 = *(uint64_t **)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v58 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_7AF4(&qword_D9B88);
  uint64_t v62 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  CGFloat v60 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_7AF4(&qword_D9B80);
  uint64_t v69 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v65 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_7AF4(&qword_D9C18);
  uint64_t v66 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v64 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_7AF4(&qword_D9B78);
  *(void *)&double v12 = __chkstk_darwin(v11 - 8).n128_u64[0];
  long long v63 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = a1;
  id v14 = objc_msgSend(a1, "text", v12);
  char v57 = (uint64_t *)sub_A71D0();
  uint64_t v16 = v15;

  uint64_t v17 = *(void *)(a2 + 32);
  long long v81 = *(_OWORD *)(a2 + 16);
  uint64_t v82 = v17;
  sub_7AF4(&qword_D9C20);
  sub_A6EA0();
  uint64_t v18 = *(void **)a2;
  if (*(void *)a2)
  {
    long long v19 = v76;
    long long v20 = v77;
    swift_getKeyPath();
    swift_getKeyPath();
    id v21 = v18;
    sub_A60D0();

    swift_release();
    uint64_t v22 = swift_release();
    long long v23 = v76;
    long long v24 = v77;
    *(void *)&long long v76 = v57;
    *((void *)&v76 + 1) = v16;
    long long v77 = v19;
    long long v78 = v20;
    long long v79 = v23;
    long long v80 = v24;
    __chkstk_darwin(v22);
    uint64_t v25 = a2;
    uint64_t v26 = (uint64_t)v75;
    *(&v56 - 2) = a2;
    *(&v56 - 1) = v26;
    uint64_t v27 = v26;
    uint64_t v28 = sub_7AF4(&qword_D9BA0);
    unint64_t v29 = sub_5D898();
    uint64_t v30 = sub_A45C(&qword_D9BB0, &qword_D9BA0);
    uint64_t v31 = v58;
    sub_A6BB0();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v32 = swift_bridgeObjectRelease();
    char v57 = &v56;
    __chkstk_darwin(v32);
    *(&v56 - 2) = v25;
    *(&v56 - 1) = v27;
    uint64_t v33 = v27;
    uint64_t v34 = sub_7AF4(&qword_D9B90);
    *(void *)&long long v76 = &type metadata for LiveSpeechPhraseView;
    *((void *)&v76 + 1) = v28;
    *(void *)&long long v77 = v29;
    *((void *)&v77 + 1) = v30;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    unint64_t v36 = sub_5D8EC();
    uint64_t v37 = v60;
    uint64_t v38 = v61;
    sub_A6BB0();
    uint64_t v39 = ((uint64_t (*)(char *, uint64_t))v59[1])(v31, v38);
    uint64_t v59 = &v56;
    __chkstk_darwin(v39);
    *(&v56 - 2) = v25;
    *(&v56 - 1) = v33;
    uint64_t v40 = v25;
    *(void *)&long long v76 = v38;
    *((void *)&v76 + 1) = v34;
    *(void *)&long long v77 = OpaqueTypeConformance2;
    *((void *)&v77 + 1) = v36;
    uint64_t v41 = swift_getOpaqueTypeConformance2();
    uint64_t v42 = v65;
    uint64_t v43 = v67;
    sub_A6BB0();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v37, v43);
    uint64_t v44 = v73;
    sub_5D58C(v40, v73);
    unint64_t v45 = (*(unsigned __int8 *)(v70 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
    unint64_t v46 = (v72 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v47 = swift_allocObject();
    sub_5DC44(v44, v47 + v45, (uint64_t (*)(void))type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS);
    uint64_t v48 = v75;
    *(void *)(v47 + v46) = v75;
    id v49 = v48;
    *(void *)&long long v76 = v43;
    *((void *)&v76 + 1) = v34;
    *(void *)&long long v77 = v41;
    *((void *)&v77 + 1) = v36;
    swift_getOpaqueTypeConformance2();
    uint64_t v50 = v64;
    uint64_t v51 = v71;
    sub_A6BA0();
    swift_release();
    (*(void (**)(char *, uint64_t))(v69 + 8))(v42, v51);
    uint64_t v52 = v66;
    uint64_t v53 = (uint64_t)v63;
    uint64_t v54 = v68;
    (*(void (**)(char *, char *, uint64_t))(v66 + 16))(v63, v50, v68);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v50, v54);
    return sub_29C10(v53, v74, &qword_D9B78);
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_5DCAC((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_588FC(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = sub_7AF4(&qword_D9C40);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A6120();
  uint64_t v10 = sub_A6130();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
  sub_5D58C(a1, (uint64_t)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = swift_allocObject();
  sub_5DC44((uint64_t)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v12 + v11, (uint64_t (*)(void))type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS);
  *(void *)(v12 + ((v6 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = a2;
  id v13 = a2;
  sub_7AF4(&qword_D9C48);
  sub_A45C(&qword_D9C50, &qword_D9C48);
  return sub_A6EC0();
}

void sub_58B20(id *a1, uint64_t a2)
{
  if (*a1)
  {
    id v3 = *a1;
    sub_78C2C(a2);
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_5DCAC((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    sub_A64B0();
    __break(1u);
  }
}

uint64_t sub_58BD8()
{
  v0._object = (void *)0x80000000000AE970;
  v0._uint64_t countAndFlagsBits = 0xD000000000000012;
  LiveSpeechLocString(_:)(v0);
  sub_FF30();
  return sub_A6E60();
}

uint64_t sub_58C4C(id *a1, void *a2)
{
  if (*a1)
  {
    id v3 = *a1;
    id v4 = [a2 text];
    sub_A71D0();

    swift_getKeyPath();
    swift_getKeyPath();
    sub_A60E0();
    swift_getKeyPath();
    swift_getKeyPath();
    id v5 = a2;
    id v6 = v3;
    sub_A60E0();
    swift_getKeyPath();
    swift_getKeyPath();
    id v7 = v6;
    sub_A60E0();
    swift_getKeyPath();
    swift_getKeyPath();
    id v8 = v7;
    sub_A60E0();
    type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS();
    sub_7AF4(&qword_D9BF0);
    return sub_A6150();
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_5DCAC((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_58E60@<X0>(uint64_t *a1@<X8>)
{
  return sub_5937C(0x6C69636E6570, 0xE600000000000000, (uint64_t (*)(uint64_t, uint64_t, __n128))&Image.init(systemName:), a1);
}

uint64_t sub_58E88@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X4>, uint64_t (*a4)(uint64_t)@<X5>, uint64_t a5@<X8>)
{
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v7 = type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_7AF4(&qword_D9BC8);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5D58C(a1, (uint64_t)v10);
  unint64_t v15 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v16 = (v9 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = swift_allocObject();
  sub_5DC44((uint64_t)v10, v17 + v15, (uint64_t (*)(void))type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS);
  *(void *)(v17 + v16) = a2;
  id v18 = a2;
  sub_7AF4(&qword_D9C28);
  sub_5DF64();
  uint64_t v19 = sub_A6ED0();
  uint64_t v20 = v27(v19);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v29 = v20;
  swift_retain();
  uint64_t v22 = sub_A6280();
  uint64_t v23 = v28;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v28, v14, v11);
  swift_release();
  long long v24 = (uint64_t *)(v23 + *(int *)(sub_7AF4(&qword_D9B90) + 36));
  *long long v24 = KeyPath;
  v24[1] = v22;
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_59108(id *a1, void *a2)
{
  if (*a1)
  {
    id v3 = *a1;
    id v4 = [a2 text];
    sub_A71D0();

    swift_getKeyPath();
    swift_getKeyPath();
    sub_A60E0();
    swift_getKeyPath();
    swift_getKeyPath();
    id v5 = a2;
    id v6 = v3;
    sub_A60E0();
    swift_getKeyPath();
    swift_getKeyPath();
    id v7 = v6;
    sub_A60E0();
    type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS();
    sub_7AF4(&qword_D9BF0);
    uint64_t v8 = sub_A6150();
    __chkstk_darwin(v8);
    id v9 = v7;
    sub_A7080();
    sub_A6300();

    return swift_release();
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_5DCAC((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_5934C@<X0>(uint64_t *a1@<X8>)
{
  return sub_5937C(0xD000000000000016, 0x80000000000AE950, (uint64_t (*)(uint64_t, uint64_t, __n128))&Image.init(_internalSystemName:), a1);
}

uint64_t sub_5937C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, __n128)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = sub_7AF4(&qword_D9C38);
  __n128 v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a3(a1, a2, v9);
  sub_A6A90();
  uint64_t v13 = sub_A6A80();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 1, 1, v13);
  uint64_t v14 = sub_A6AA0();
  sub_A35C((uint64_t)v11, &qword_D9C38);
  uint64_t result = swift_getKeyPath();
  *a4 = v12;
  a4[1] = result;
  a4[2] = v14;
  return result;
}

uint64_t sub_5949C(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_A5F80();
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)&double v6 = __chkstk_darwin(v4).n128_u64[0];
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = objc_msgSend(a2, "text", v6);
  uint64_t v10 = sub_A71D0();
  uint64_t v12 = v11;

  uint64_t v13 = *(void *)(a1 + 32);
  long long v27 = *(_OWORD *)(a1 + 16);
  uint64_t v28 = v13;
  v26[0] = v10;
  v26[1] = v12;
  sub_7AF4(&qword_D9C20);
  sub_A6E90();
  if (*(void *)a1)
  {
    id v14 = *(id *)a1;
    id v15 = [a2 text];
    uint64_t v16 = sub_A71D0();
    uint64_t v18 = v17;

    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for LiveSpeechInputMode.favoritePhrases(_:), v4);
    id v19 = [a2 inputID];
    if (v19)
    {
      uint64_t v20 = v19;
      uint64_t v21 = sub_A71D0();
      uint64_t v23 = v22;
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v23 = 0;
    }
    BOOL v24 = LiveSpeechStore.shouldSendSpeechToCall.getter();
    sub_7F2D4(v16, v18, (uint64_t)v8, v24, v21, v23, 1);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_5DCAC((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_59704@<X0>(uint64_t a1@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v18 = sub_7AF4(&qword_D9B18);
  uint64_t v2 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LiveSpeechStore(0);
  sub_5DCAC((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
  uint64_t v5 = (void *)sub_A64C0();
  uint64_t v7 = v6;
  uint64_t KeyPath = swift_getKeyPath();
  id v9 = *v1;
  if (*v1)
  {
    uint64_t v10 = KeyPath;
    id v17 = v9;
    uint64_t v11 = sub_A6060();
    uint64_t v23 = v5;
    uint64_t v24 = v7;
    uint64_t v25 = v10;
    __int16 v26 = 0;
    uint64_t v27 = v11;
    uint64_t v28 = v9;
    uint64_t v12 = (char *)v1 + *(int *)(type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS() + 32);
    char v13 = *v12;
    uint64_t v14 = *((void *)v12 + 1);
    LOBYTE(v12) = v12[16];
    char v20 = v13;
    uint64_t v21 = v14;
    char v22 = (char)v12;
    sub_7AF4(&qword_D9BF0);
    sub_A6160();
    sub_7AF4(&qword_D98E8);
    sub_57578();
    sub_A6CC0();

    swift_release();
    swift_release();
    swift_release();
    swift_release();

    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v2 + 32))(v19, v4, v18);
  }
  else
  {
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_5993C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v3 = type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t v6 = (int *)type metadata accessor for HUDButton(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v35 - v10;
  uint64_t v12 = sub_7AF4(&qword_D9BF8);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v17 = (char *)&v35 - v16;
  v18._object = (void *)0x80000000000AE910;
  v18._uint64_t countAndFlagsBits = 0xD000000000000012;
  Swift::String v19 = LiveSpeechLocString(_:)(v18);
  object = v19._object;
  uint64_t countAndFlagsBits = v19._countAndFlagsBits;
  sub_A6DA0();
  uint64_t v35 = sub_A6DC0();
  swift_release();
  sub_5D58C(a1, (uint64_t)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v20 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v21 = swift_allocObject();
  sub_5DC44((uint64_t)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v20, (uint64_t (*)(void))type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS);
  *uint64_t v8 = swift_getKeyPath();
  sub_7AF4(&qword_D7E68);
  swift_storeEnumTagMultiPayload();
  uint64_t v22 = v6[13];
  *(uint64_t *)((char *)v8 + v22) = sub_A6AB0();
  *(uint64_t *)((char *)v8 + v6[15]) = 0x4020000000000000;
  *(uint64_t *)((char *)v8 + v6[16]) = 0x4000000000000000;
  uint64_t v23 = v6[17];
  if (qword_D7DE0 != -1) {
    swift_once();
  }
  *(uint64_t *)((char *)v8 + v23) = qword_DF640;
  *(uint64_t *)((char *)v8 + v6[18]) = 0x402E000000000000;
  *(uint64_t *)((char *)v8 + v6[19]) = 0x4024000000000000;
  uint64_t v24 = v6[20];
  if (qword_D7DE8 != -1) {
    swift_once();
  }
  uint64_t v25 = sub_A6380();
  uint64_t v26 = sub_7B38(v25, (uint64_t)qword_DF648);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))((char *)v8 + v24, v26, v25);
  *(_OWORD *)((char *)v8 + v6[5]) = xmmword_AAB20;
  uint64_t v27 = (uint64_t *)((char *)v8 + v6[6]);
  uint64_t v28 = (uint64_t)object;
  *uint64_t v27 = countAndFlagsBits;
  v27[1] = v28;
  *((unsigned char *)v8 + v6[7]) = 1;
  *((unsigned char *)v8 + v6[8]) = 0;
  *((unsigned char *)v8 + v6[9]) = 0;
  *(uint64_t *)((char *)v8 + v6[10]) = v35;
  *(uint64_t *)((char *)v8 + v6[11]) = 0;
  uint64_t v29 = (char *)v8 + v6[12];
  *(void *)uint64_t v29 = 0;
  v29[8] = 1;
  uint64_t v30 = (uint64_t (**)())((char *)v8 + v6[14]);
  *uint64_t v30 = sub_5DBE4;
  v30[1] = (uint64_t (*)())v21;
  sub_5DC44((uint64_t)v8, (uint64_t)v11, type metadata accessor for HUDButton);
  v31._uint64_t countAndFlagsBits = 0xD000000000000015;
  v31._object = (void *)0x80000000000AE930;
  Swift::String v39 = LiveSpeechLocString(_:)(v31);
  sub_5DCAC(&qword_D9C00, (void (*)(uint64_t))type metadata accessor for HUDButton);
  sub_FF30();
  sub_A6C40();
  swift_bridgeObjectRelease();
  sub_5DCF4((uint64_t)v11);
  sub_29C10((uint64_t)v14, (uint64_t)v17, &qword_D9BF8);
  sub_8860((uint64_t)v17, (uint64_t)v14, &qword_D9BF8);
  uint64_t v32 = v38;
  sub_8860((uint64_t)v14, v38, &qword_D9BF8);
  uint64_t v33 = v32 + *(int *)(sub_7AF4(&qword_D9C08) + 48);
  *(void *)uint64_t v33 = 0;
  *(unsigned char *)(v33 + 8) = 1;
  sub_A35C((uint64_t)v17, &qword_D9BF8);
  return sub_A35C((uint64_t)v14, &qword_D9BF8);
}

uint64_t sub_59E30(void **a1)
{
  uint64_t v2 = sub_7AF4(&qword_D8C50);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = *a1;
  if (!*a1)
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_5DCAC((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    sub_A64B0();
    __break(1u);
    JUMPOUT(0x5A180);
  }
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v19 = 0;
  unint64_t v20 = 0xE000000000000000;
  id v6 = v5;
  sub_A60E0();
  swift_getKeyPath();
  swift_getKeyPath();
  LOBYTE(v19) = 1;
  id v7 = v6;
  sub_A60E0();
  uint64_t v8 = (char *)a1 + *(int *)(type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS() + 32);
  char v9 = *v8;
  unint64_t v10 = *((void *)v8 + 1);
  LOBYTE(v8) = v8[16];
  LOBYTE(v19) = v9;
  unint64_t v20 = v10;
  char v21 = (char)v8;
  v18[7] = 1;
  sub_7AF4(&qword_D9BF0);
  sub_A6150();
  swift_getKeyPath();
  swift_getKeyPath();
  id v11 = v7;
  sub_A60D0();

  swift_release();
  swift_release();
  switch((char)v19)
  {
    case 1:
    case 2:
    case 3:
      char v13 = sub_A7800();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
      {
        uint64_t v14 = sub_A7360();
        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v4, 1, 1, v14);
        sub_A7330();
        id v15 = v11;
        uint64_t v16 = sub_A7320();
        id v17 = (void *)swift_allocObject();
        v17[2] = v16;
        void v17[3] = &protocol witness table for MainActor;
        v17[4] = v15;
        sub_2F8E4((uint64_t)v4, (uint64_t)&unk_D9C10, (uint64_t)v17);

        uint64_t result = swift_release();
      }
      break;
    default:
      uint64_t result = swift_bridgeObjectRelease();
      break;
  }
  return result;
}

uint64_t sub_5A190@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for LiveSpeechStore(0);
  sub_5DCAC((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
  *(void *)a1 = sub_A64C0();
  *(void *)(a1 + 8) = v2;
  sub_7AF4(&qword_D97F8);
  sub_A6E70();
  *(_OWORD *)(a1 + 16) = v17;
  *(void *)(a1 + 32) = v18;
  uint64_t v3 = (int *)type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS();
  uint64_t v4 = (uint64_t *)(a1 + v3[6]);
  *uint64_t v4 = swift_getKeyPath();
  sub_7AF4(&qword_D7E68);
  swift_storeEnumTagMultiPayload();
  uint64_t v5 = (uint64_t *)(a1 + v3[7]);
  *uint64_t v5 = swift_getKeyPath();
  sub_7AF4(&qword_D7E70);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = a1 + v3[8];
  *(unsigned char *)uint64_t v6 = _s19LiveSpeechUIService0aB11HUDView_iOSV23_isTextInputViewFocused33_F2BA035E101D43293F5F7FB749375E867SwiftUI10FocusStateVySbGvpfi_0() & 1;
  *(void *)(v6 + 8) = v7;
  *(unsigned char *)(v6 + 16) = v8 & 1;
  uint64_t v9 = a1 + v3[9];
  sub_A6E70();
  *(unsigned char *)uint64_t v9 = v17;
  *(void *)(v9 + 8) = *((void *)&v17 + 1);
  unint64_t v10 = (_OWORD *)(a1 + v3[10]);
  sub_A6E70();
  *unint64_t v10 = v17;
  id v11 = (_OWORD *)(a1 + v3[11]);
  sub_A6E70();
  *id v11 = v17;
  uint64_t v12 = v3[12];
  if (qword_D7DE8 != -1) {
    swift_once();
  }
  uint64_t v13 = a1 + v12;
  uint64_t v14 = sub_A6380();
  uint64_t v15 = sub_7B38(v14, (uint64_t)qword_DF648);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v13, v15, v14);
}

void LiveSpeechPhraseView.body.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v57 = a1;
  uint64_t v3 = sub_A69A0();
  uint64_t v50 = *(void *)(v3 - 8);
  uint64_t v51 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_A6490();
  __chkstk_darwin(v49);
  uint64_t v48 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_7AF4(&qword_D9950);
  uint64_t v54 = *(void *)(v7 - 8);
  uint64_t v55 = v7;
  __chkstk_darwin(v7);
  uint64_t v53 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_7AF4(&qword_D9958);
  __chkstk_darwin(v9 - 8);
  uint64_t v52 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5AA10(v1, (uint64_t)&v75);
  long long v11 = v75;
  long long v12 = v76;
  char v13 = v77;
  uint64_t v14 = self;
  if (qword_D7DD0 != -1) {
    swift_once();
  }
  uint64_t v56 = (long long *)v2;
  id v15 = [v14 preferredFontDescriptorWithTextStyle:qword_DF630];
  id v16 = [v15 fontDescriptorWithSymbolicTraits:2];

  if (v16)
  {
    id v17 = [self fontWithDescriptor:v16 size:0.0];

    uint64_t v18 = sub_A6AC0();
    uint64_t KeyPath = swift_getKeyPath();
    long long v91 = v11;
    long long v92 = v12;
    char v93 = v13;
    uint64_t v94 = KeyPath;
    uint64_t v95 = v18;
    sub_A7040();
    sub_54F94(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v89, 0.0, 1, 0.0, 1);
    sub_5B500(v11, *((uint64_t *)&v11 + 1), v12);
    swift_release();
    swift_release();
    char v20 = sub_A6A10();
    sub_A6140();
    uint64_t v22 = v21;
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    sub_A6DA0();
    uint64_t v29 = sub_A6DC0();
    swift_release();
    if (AXDeviceSupportsLiveSpeechCategory())
    {
      sub_28E10();
    }
    else
    {
      uint64_t v30 = v48;
      Swift::String v31 = &v48[*(int *)(v49 + 20)];
      uint64_t v32 = enum case for RoundedCornerStyle.continuous(_:);
      uint64_t v33 = sub_A66E0();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 104))(v31, v32, v33);
      __asm { FMOV            V0.2D, #18.0 }
      *uint64_t v30 = _Q0;
      sub_5DCAC(&qword_D9960, (void (*)(uint64_t))&type metadata accessor for RoundedRectangle);
    }
    uint64_t v39 = sub_A6F90();
    uint64_t v41 = v56;
    uint64_t v40 = v57;
    uint64_t v43 = v54;
    uint64_t v42 = v55;
    uint64_t v44 = v53;
    long long v68 = v89[8];
    long long v69 = v89[9];
    *(void *)&long long v70 = v90;
    long long v64 = v89[4];
    long long v65 = v89[5];
    long long v66 = v89[6];
    long long v67 = v89[7];
    long long v60 = v89[0];
    long long v61 = v89[1];
    long long v62 = v89[2];
    long long v63 = v89[3];
    char v74 = 0;
    BYTE8(v70) = v20;
    *(void *)&long long v71 = v22;
    *((void *)&v71 + 1) = v24;
    *(void *)&long long v72 = v26;
    *((void *)&v72 + 1) = v28;
    LOBYTE(v73[0]) = 0;
    *((void *)&v73[0] + 1) = v29;
    *(void *)&v73[1] = v39;
    WORD4(v73[1]) = 256;
    sub_A6980();
    uint64_t v45 = sub_7AF4(&qword_D9968);
    unint64_t v46 = sub_5B53C();
    sub_A6C70();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v5, v51);
    long long v87 = v72;
    v88[0] = v73[0];
    *(_OWORD *)((char *)v88 + 10) = *(_OWORD *)((char *)v73 + 10);
    long long v83 = v68;
    long long v84 = v69;
    long long v85 = v70;
    long long v86 = v71;
    long long v79 = v64;
    long long v80 = v65;
    long long v81 = v66;
    long long v82 = v67;
    long long v75 = v60;
    long long v76 = v61;
    long long v77 = v62;
    long long v78 = v63;
    sub_5B85C((uint64_t *)&v75);
    long long v60 = *v41;
    uint64_t v58 = v45;
    unint64_t v59 = v46;
    swift_getOpaqueTypeConformance2();
    sub_FF30();
    uint64_t v47 = (uint64_t)v52;
    sub_A6C40();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v42);
    sub_29C10(v47, v40, &qword_D9958);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_5AA10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v69[0] = *(_OWORD *)a1;
  long long v67 = *(_OWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  sub_7AF4(&qword_D9B08);
  sub_A6F00();
  if (!v65)
  {
    sub_5D50C((uint64_t)v69);
    goto LABEL_15;
  }
  if (*(void *)&v69[0] == v64 && v65 == *((void *)&v69[0] + 1))
  {
    swift_bridgeObjectRelease();
    sub_5D50C((uint64_t)v69);
    unint64_t v6 = *(void *)(a1 + 56);
    if (v6) {
      goto LABEL_11;
    }
LABEL_15:
    long long v66 = v69[0];
    sub_FF30();
    swift_bridgeObjectRetain();
    uint64_t v49 = sub_A6B60();
    uint64_t v51 = v50;
    char v53 = v52 & 1;
    sub_A6DD0();
    sub_A6AE0();
    swift_release();
    sub_10024(v49, v51, v53);
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  char v5 = sub_A7800();
  swift_bridgeObjectRelease();
  sub_5D50C((uint64_t)v69);
  if ((v5 & 1) == 0) {
    goto LABEL_15;
  }
  unint64_t v6 = *(void *)(a1 + 56);
  if (!v6) {
    goto LABEL_15;
  }
LABEL_11:
  uint64_t v7 = *(void *)(a1 + 48);
  unint64_t v8 = *(void *)(a1 + 72);
  swift_bridgeObjectRetain();
  sub_A7270();
  swift_bridgeObjectRelease();
  uint64_t result = sub_A7270();
  uint64_t v10 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0) {
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v10 >= v8 >> 14)
  {
    uint64_t v11 = sub_A7270();
    uint64_t v61 = v12;
    uint64_t v62 = v11;
    uint64_t v59 = v14;
    uint64_t v60 = v13;
    sub_5D538();
    uint64_t v15 = sub_A6B60();
    uint64_t v17 = v16;
    uint64_t v63 = a2;
    char v19 = v18 & 1;
    id v58 = self;
    id v20 = [v58 tertiaryLabelColor];
    sub_A6D20();
    uint64_t v21 = sub_A6AE0();
    uint64_t v54 = v22;
    uint64_t v55 = v21;
    char v24 = v23;
    swift_release();
    sub_10024(v15, v17, v19);
    swift_bridgeObjectRelease();
    uint64_t v25 = sub_A6B60();
    uint64_t v27 = v26;
    char v29 = v28 & 1;
    sub_A6DD0();
    uint64_t v30 = sub_A6AE0();
    uint64_t v32 = v31;
    char v34 = v33;
    swift_release();
    sub_10024(v25, v27, v29);
    swift_bridgeObjectRelease();
    uint64_t v35 = sub_A6AF0();
    uint64_t v57 = v36;
    char v56 = v37 & 1;
    sub_10024(v30, v32, v34 & 1);
    swift_bridgeObjectRelease();
    sub_10024(v55, v54, v24 & 1);
    swift_bridgeObjectRelease();
    *(void *)&long long v66 = v62;
    *((void *)&v66 + 1) = v61;
    *(void *)&long long v67 = v60;
    *((void *)&v67 + 1) = v59;
    uint64_t v38 = sub_A6B60();
    uint64_t v40 = v39;
    char v42 = v41 & 1;
    id v43 = [v58 tertiaryLabelColor];
    sub_A6D20();
    uint64_t v44 = sub_A6AE0();
    uint64_t v46 = v45;
    LOBYTE(v27) = v47;
    swift_release();
    sub_10024(v38, v40, v42);
    swift_bridgeObjectRelease();
    sub_A6AF0();
    sub_10024(v44, v46, v27 & 1);
    swift_bridgeObjectRelease();
    uint64_t v48 = v35;
    a2 = v63;
    sub_10024(v48, v57, v56);
    swift_bridgeObjectRelease();
LABEL_16:
    uint64_t result = sub_A6860();
    *(_OWORD *)a2 = v66;
    *(_OWORD *)(a2 + 16) = v67;
    *(unsigned char *)(a2 + 32) = v68;
    return result;
  }
  __break(1u);
  return result;
}

void sub_5AF50(uint64_t a1@<X8>)
{
}

uint64_t sub_5AF94@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_5B014(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v2;
  return sub_A60E0();
}

uint64_t sub_5B084@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_A65B0();
  *a1 = result;
  return result;
}

uint64_t sub_5B0B0()
{
  return sub_A65C0();
}

uint64_t sub_5B0DC()
{
  return sub_A6570();
}

uint64_t sub_5B100(uint64_t a1)
{
  uint64_t v2 = sub_7AF4(&qword_D9848);
  __chkstk_darwin(v2 - 8);
  sub_8860(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_D9848);
  return sub_A6580();
}

unint64_t sub_5B198()
{
  unint64_t result = qword_D9920;
  if (!qword_D9920)
  {
    sub_7C5C(&qword_D9868);
    sub_5B238();
    sub_A45C(&qword_D9940, &qword_D9918);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9920);
  }
  return result;
}

unint64_t sub_5B238()
{
  unint64_t result = qword_D9928;
  if (!qword_D9928)
  {
    sub_7C5C(&qword_D9850);
    sub_7C5C(&qword_D9858);
    sub_A45C(&qword_D9910, &qword_D9858);
    swift_getOpaqueTypeConformance2();
    sub_A45C(&qword_D9930, &qword_D9938);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9928);
  }
  return result;
}

unint64_t sub_5B340()
{
  unint64_t result = qword_D9948;
  if (!qword_D9948)
  {
    sub_7C5C(&qword_D9890);
    sub_7C5C(&qword_D9880);
    sub_7C5C(&qword_D9878);
    sub_7C5C(&qword_D9870);
    sub_7C5C(&qword_D9868);
    sub_A68E0();
    sub_5B198();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9948);
  }
  return result;
}

uint64_t sub_5B4A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_A65B0();
  *a1 = result;
  return result;
}

uint64_t sub_5B4D4()
{
  return sub_A65C0();
}

uint64_t sub_5B500(uint64_t a1, uint64_t a2, char a3)
{
  sub_10024(a1, a2, a3 & 1);

  return swift_bridgeObjectRelease();
}

unint64_t sub_5B53C()
{
  unint64_t result = qword_D9970;
  if (!qword_D9970)
  {
    sub_7C5C(&qword_D9968);
    sub_5B638(&qword_D9978, &qword_D9980, (void (*)(void))sub_5B608);
    sub_A45C(&qword_D99C8, &qword_D99D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9970);
  }
  return result;
}

uint64_t sub_5B608()
{
  return sub_5B638(&qword_D9988, &qword_D9990, (void (*)(void))sub_5B6B4);
}

uint64_t sub_5B638(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_7C5C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_5B6B4()
{
  unint64_t result = qword_D9998;
  if (!qword_D9998)
  {
    sub_7C5C(&qword_D99A0);
    sub_5B778(&qword_D99A8, &qword_D99B0, (void (*)(void))sub_5B7F0);
    sub_A45C(&qword_D9718, &qword_D9720);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9998);
  }
  return result;
}

uint64_t sub_5B778(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_7C5C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_5B7F0()
{
  unint64_t result = qword_D99B8;
  if (!qword_D99B8)
  {
    sub_7C5C(&qword_D99C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D99B8);
  }
  return result;
}

uint64_t *sub_5B85C(uint64_t *a1)
{
  return a1;
}

uint64_t sub_5B8CC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_5B8E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_5B904()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for LiveSpeechPhrasesListView_iOS(id *a1)
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for LiveSpeechPhrasesListView_iOS(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  id v5 = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LiveSpeechPhrasesListView_iOS(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for LiveSpeechPhrasesListView_iOS(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LiveSpeechPhrasesListView_iOS(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LiveSpeechPhrasesListView_iOS(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveSpeechPhrasesListView_iOS()
{
  return &type metadata for LiveSpeechPhrasesListView_iOS;
}

char *initializeBufferWithCopyOfBuffer for LiveSpeechCategoryPhrasesListView_iOS(char *a1, char **a2, int *a3)
{
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  id v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    unint64_t v8 = a2[4];
    *((void *)a1 + 3) = a2[3];
    *((void *)a1 + 4) = v8;
    uint64_t v9 = a3[6];
    uint64_t v10 = &a1[v9];
    uint64_t v11 = (char **)((char *)a2 + v9);
    uint64_t v12 = v5;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_7AF4(&qword_D7E68);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = sub_A6380();
      (*(void (**)(char *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v10, v11, v13);
    }
    else
    {
      *(void *)uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = a3[7];
    uint64_t v15 = &a1[v14];
    uint64_t v16 = (char **)((char *)a2 + v14);
    sub_7AF4(&qword_D7E70);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v17 = sub_A5A20();
      (*(void (**)(char *, void *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    }
    else
    {
      *(void *)uint64_t v15 = *v16;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v18 = a3[8];
    uint64_t v19 = a3[9];
    id v20 = &a1[v18];
    uint64_t v21 = (uint64_t)a2 + v18;
    char *v20 = *(unsigned char *)v21;
    *((void *)v20 + 1) = *(void *)(v21 + 8);
    v20[16] = *(unsigned char *)(v21 + 16);
    uint64_t v22 = &a1[v19];
    uint64_t v23 = (uint64_t)a2 + v19;
    *uint64_t v22 = *(unsigned char *)v23;
    *((void *)v22 + 1) = *(void *)(v23 + 8);
    uint64_t v24 = a3[10];
    uint64_t v25 = a3[11];
    uint64_t v26 = &a1[v24];
    uint64_t v27 = (char **)((char *)a2 + v24);
    uint64_t v28 = v27[1];
    *(void *)uint64_t v26 = *v27;
    *((void *)v26 + 1) = v28;
    char v29 = &a1[v25];
    uint64_t v30 = (uint64_t *)((char *)a2 + v25);
    uint64_t v31 = *v30;
    uint64_t v32 = v30[1];
    uint64_t v33 = a3[12];
    uint64_t v34 = (uint64_t)a2 + v33;
    uint64_t v35 = &a1[v33];
    *(void *)char v29 = v31;
    *((void *)v29 + 1) = v32;
    uint64_t v36 = sub_A6380();
    char v37 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v37(v35, v34, v36);
  }
  return a1;
}

uint64_t destroy for LiveSpeechCategoryPhrasesListView_iOS(id *a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_release();
  int v4 = (char *)a1 + a2[6];
  sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_A6380();
    (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  id v6 = (char *)a1 + a2[7];
  sub_7AF4(&qword_D7E70);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_A5A20();
    (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  unint64_t v8 = (char *)a1 + a2[12];
  uint64_t v9 = sub_A6380();
  uint64_t v10 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8);

  return v10(v8, v9);
}

uint64_t initializeWithCopy for LiveSpeechCategoryPhrasesListView_iOS(uint64_t a1, uint64_t a2, int *a3)
{
  id v6 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  id v11 = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_A6380();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v9, v10, v12);
  }
  else
  {
    *uint64_t v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  sub_7AF4(&qword_D7E70);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = sub_A5A20();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  else
  {
    *uint64_t v14 = *v15;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = a3[8];
  uint64_t v18 = a3[9];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = a2 + v17;
  *(unsigned char *)uint64_t v19 = *(unsigned char *)v20;
  *(void *)(v19 + 8) = *(void *)(v20 + 8);
  *(unsigned char *)(v19 + 16) = *(unsigned char *)(v20 + 16);
  uint64_t v21 = a1 + v18;
  uint64_t v22 = a2 + v18;
  *(unsigned char *)uint64_t v21 = *(unsigned char *)v22;
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  uint64_t v23 = a3[10];
  uint64_t v24 = a3[11];
  uint64_t v25 = (void *)(a1 + v23);
  uint64_t v26 = (void *)(a2 + v23);
  uint64_t v27 = v26[1];
  void *v25 = *v26;
  v25[1] = v27;
  uint64_t v28 = (void *)(a1 + v24);
  char v29 = (uint64_t *)(a2 + v24);
  uint64_t v30 = *v29;
  uint64_t v31 = v29[1];
  uint64_t v32 = a3[12];
  uint64_t v33 = a2 + v32;
  uint64_t v34 = a1 + v32;
  *uint64_t v28 = v30;
  v28[1] = v31;
  uint64_t v35 = sub_A6380();
  uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v36(v34, v33, v35);
  return a1;
}

uint64_t assignWithCopy for LiveSpeechCategoryPhrasesListView_iOS(uint64_t a1, uint64_t a2, int *a3)
{
  id v6 = *(void **)a1;
  uint64_t v7 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v8 = v7;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v9 = a3[6];
    uint64_t v10 = (void *)(a1 + v9);
    id v11 = (void *)(a2 + v9);
    sub_A35C(a1 + v9, &qword_D7E68);
    sub_7AF4(&qword_D7E68);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_A6380();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = a3[7];
    uint64_t v14 = (void *)(a1 + v13);
    uint64_t v15 = (void *)(a2 + v13);
    sub_A35C(a1 + v13, &qword_D7E70);
    sub_7AF4(&qword_D7E70);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = sub_A5A20();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    }
    else
    {
      *uint64_t v14 = *v15;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(unsigned char *)uint64_t v18 = *(unsigned char *)(a2 + v17);
  *(void *)(v18 + 8) = *(void *)(a2 + v17 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v18 + 16) = *(unsigned char *)(v19 + 16);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  *(unsigned char *)uint64_t v21 = *(unsigned char *)v22;
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  swift_retain();
  swift_release();
  uint64_t v23 = a3[10];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  swift_retain();
  swift_release();
  uint64_t v26 = a3[11];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  *uint64_t v27 = *v28;
  v27[1] = v28[1];
  swift_retain();
  swift_release();
  uint64_t v29 = a3[12];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  uint64_t v32 = sub_A6380();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 24))(v30, v31, v32);
  return a1;
}

uint64_t initializeWithTake for LiveSpeechCategoryPhrasesListView_iOS(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = a3[6];
  id v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_A6380();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = sub_7AF4(&qword_D7E70);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = sub_A5A20();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v16 - 8) + 32))(v13, v14, v16);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  uint64_t v17 = a3[8];
  uint64_t v18 = a3[9];
  uint64_t v19 = a1 + v17;
  uint64_t v20 = (long long *)(a2 + v17);
  long long v21 = *v20;
  *(unsigned char *)(v19 + 16) = *((unsigned char *)v20 + 16);
  *(_OWORD *)uint64_t v19 = v21;
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  uint64_t v22 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v22) = *(_OWORD *)(a2 + v22);
  uint64_t v23 = a3[12];
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  uint64_t v26 = sub_A6380();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
  return a1;
}

uint64_t assignWithTake for LiveSpeechCategoryPhrasesListView_iOS(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  if (a1 != a2)
  {
    uint64_t v7 = a3[6];
    id v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    sub_A35C(a1 + v7, &qword_D7E68);
    uint64_t v10 = sub_7AF4(&qword_D7E68);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = sub_A6380();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
    uint64_t v12 = a3[7];
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = (const void *)(a2 + v12);
    sub_A35C(a1 + v12, &qword_D7E70);
    uint64_t v15 = sub_7AF4(&qword_D7E70);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = sub_A5A20();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v16 - 8) + 32))(v13, v14, v16);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
  }
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(unsigned char *)uint64_t v18 = *(unsigned char *)(a2 + v17);
  *(void *)(v18 + 8) = *(void *)(a2 + v17 + 8);
  swift_release();
  *(unsigned char *)(v18 + 16) = *(unsigned char *)(v19 + 16);
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  *(unsigned char *)uint64_t v21 = *(unsigned char *)v22;
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  swift_release();
  uint64_t v23 = a3[10];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  *uint64_t v24 = *v25;
  v24[1] = v25[1];
  swift_release();
  uint64_t v26 = a3[11];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (void *)(a2 + v26);
  *uint64_t v27 = *v28;
  v27[1] = v28[1];
  swift_release();
  uint64_t v29 = a3[12];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  uint64_t v32 = sub_A6380();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 40))(v30, v31, v32);
  return a1;
}

uint64_t getEnumTagSinglePayload for LiveSpeechCategoryPhrasesListView_iOS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_5C9CC);
}

uint64_t sub_5C9CC(uint64_t *a1, uint64_t a2, int *a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  uint64_t v9 = sub_7AF4(&qword_D8EB0);
  if (*(_DWORD *)(*(void *)(v9 - 8) + 84) == a2)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)(v9 - 8);
    uint64_t v12 = a3[6];
LABEL_11:
    uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
    return v14((char *)a1 + v12, a2, v10);
  }
  uint64_t v13 = sub_7AF4(&qword_D99D8);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v10 = v13;
    uint64_t v11 = *(void *)(v13 - 8);
    uint64_t v12 = a3[7];
    goto LABEL_11;
  }
  uint64_t v15 = sub_A6380();
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  uint64_t v18 = (char *)a1 + a3[12];

  return v16(v18, a2, v17);
}

uint64_t storeEnumTagSinglePayload for LiveSpeechCategoryPhrasesListView_iOS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_5CB6C);
}

char *sub_5CB6C(char *result, uint64_t a2, int a3, int *a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)unint64_t result = a2;
    return result;
  }
  uint64_t v8 = sub_7AF4(&qword_D8EB0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return (char *)v13(&v5[v11], a2, a2, v9);
  }
  uint64_t v12 = sub_7AF4(&qword_D99D8);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_7;
  }
  uint64_t v14 = sub_A6380();
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = &v5[a4[12]];

  return (char *)v15(v17, a2, a2, v16);
}

uint64_t type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS()
{
  uint64_t result = qword_D9A38;
  if (!qword_D9A38) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_5CD38()
{
  sub_5CE98(319, (unint64_t *)&qword_D8F20, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  if (v0 <= 0x3F)
  {
    sub_5CE98(319, (unint64_t *)&unk_D9A48, (void (*)(uint64_t))&type metadata accessor for Locale);
    if (v1 <= 0x3F)
    {
      sub_A6380();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_5CE98(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_A6200();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t destroy for LiveSpeechPhraseView()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LiveSpeechPhraseView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LiveSpeechPhraseView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  return a1;
}

uint64_t assignWithTake for LiveSpeechPhraseView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

ValueMetadata *type metadata accessor for LiveSpeechPhraseView()
{
  return &type metadata for LiveSpeechPhraseView;
}

unint64_t sub_5D124()
{
  unint64_t result = qword_D9A98;
  if (!qword_D9A98)
  {
    sub_7C5C(&qword_D9820);
    sub_5B638(&qword_D9AA0, &qword_D9818, (void (*)(void))sub_5D1F0);
    sub_A45C(&qword_D9AB0, &qword_D9AB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9A98);
  }
  return result;
}

unint64_t sub_5D1F0()
{
  unint64_t result = qword_D9AA8;
  if (!qword_D9AA8)
  {
    sub_7C5C(&qword_D9810);
    sub_7C5C(&qword_D9800);
    sub_A45C(&qword_D9838, &qword_D9800);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9AA8);
  }
  return result;
}

unint64_t sub_5D2D0()
{
  unint64_t result = qword_D9AC0;
  if (!qword_D9AC0)
  {
    sub_7C5C(&qword_D98A0);
    sub_7C5C(&qword_D9890);
    sub_5B340();
    swift_getOpaqueTypeConformance2();
    sub_A45C(&qword_D9AB0, &qword_D9AB8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9AC0);
  }
  return result;
}

unint64_t sub_5D3A8()
{
  unint64_t result = qword_D9AC8;
  if (!qword_D9AC8)
  {
    sub_7C5C(&qword_D9958);
    sub_7C5C(&qword_D9968);
    sub_5B53C();
    swift_getOpaqueTypeConformance2();
    sub_5DCAC(&qword_D83F0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9AC8);
  }
  return result;
}

uint64_t *sub_5D498(uint64_t *a1)
{
  return a1;
}

uint64_t sub_5D4D0(uint64_t a1, uint64_t a2, char a3)
{
  sub_4D230(a1, a2, a3 & 1);

  return swift_bridgeObjectRetain();
}

uint64_t sub_5D50C(uint64_t a1)
{
  return a1;
}

unint64_t sub_5D538()
{
  unint64_t result = qword_D9B10;
  if (!qword_D9B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9B10);
  }
  return result;
}

uint64_t sub_5D58C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_5D5F4()
{
  type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS();

  return sub_5801C();
}

unint64_t sub_5D674()
{
  unint64_t result = qword_D9B68;
  if (!qword_D9B68)
  {
    sub_7C5C(&qword_D9B50);
    sub_5D6F4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9B68);
  }
  return result;
}

unint64_t sub_5D6F4()
{
  unint64_t result = qword_D9B70;
  if (!qword_D9B70)
  {
    sub_7C5C(&qword_D9B78);
    sub_7C5C(&qword_D9B80);
    sub_7C5C(&qword_D9B88);
    sub_7C5C(&qword_D9B90);
    sub_7C5C(&qword_D9B98);
    sub_7C5C(&qword_D9BA0);
    sub_5D898();
    sub_A45C(&qword_D9BB0, &qword_D9BA0);
    swift_getOpaqueTypeConformance2();
    sub_5D8EC();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_5766C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9B70);
  }
  return result;
}

unint64_t sub_5D898()
{
  unint64_t result = qword_D9BA8;
  if (!qword_D9BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9BA8);
  }
  return result;
}

unint64_t sub_5D8EC()
{
  unint64_t result = qword_D9BB8;
  if (!qword_D9BB8)
  {
    sub_7C5C(&qword_D9B90);
    sub_A45C(&qword_D9BC0, &qword_D9BC8);
    sub_A45C(&qword_D9BD0, &qword_D9BD8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9BB8);
  }
  return result;
}

uint64_t sub_5D9BC()
{
  unint64_t v1 = (int *)type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;

  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v6 = v0 + v3 + v1[6];
  sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_A6380();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v5 + v1[7];
  sub_7AF4(&qword_D7E70);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = sub_A5A20();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v10 = v5 + v1[12];
  uint64_t v11 = sub_A6380();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_5DBE4()
{
  uint64_t v1 = *(void *)(type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS() - 8);
  uint64_t v2 = (void **)(v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));

  return sub_59E30(v2);
}

uint64_t sub_5DC44(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_5DCAC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_5DCF4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for HUDButton(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_5DD60()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_5DDA0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_2C168;
  return sub_846E8(a1, v4, v5, v6);
}

uint64_t sub_5DE54@<X0>(uint64_t a1@<X8>)
{
  return sub_58088(*(void **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_5DE64()
{
  return sub_588FC(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_5DE6C@<X0>(uint64_t a1@<X8>)
{
  return sub_58E88(*(void *)(v1 + 16), *(void **)(v1 + 24), (uint64_t)sub_58E60, (uint64_t (*)(uint64_t))&static Color.orange.getter, a1);
}

uint64_t sub_5DECC@<X0>(uint64_t a1@<X8>)
{
  return sub_58E88(*(void *)(v1 + 16), *(void **)(v1 + 24), (uint64_t)sub_5934C, (uint64_t (*)(uint64_t))&static Color.blue.getter, a1);
}

uint64_t sub_5DF30()
{
  return sub_5E304((uint64_t (*)(unint64_t, uint64_t))sub_5949C);
}

uint64_t sub_5DF4C()
{
  return sub_5E304((uint64_t (*)(unint64_t, uint64_t))sub_59108);
}

unint64_t sub_5DF64()
{
  unint64_t result = qword_D9C30;
  if (!qword_D9C30)
  {
    sub_7C5C(&qword_D9C28);
    sub_A45C(&qword_D9718, &qword_D9720);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9C30);
  }
  return result;
}

uint64_t sub_5E004@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_A65D0();
  *a1 = result;
  return result;
}

uint64_t sub_5E030()
{
  return sub_A65E0();
}

uint64_t sub_5E06C()
{
  return sub_85598(*(void **)(v0 + 16));
}

uint64_t sub_5E08C()
{
  return sub_5E304((uint64_t (*)(unint64_t, uint64_t))sub_58C4C);
}

uint64_t sub_5E0B0()
{
  uint64_t v1 = (int *)type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;

  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v6 = v0 + v3 + v1[6];
  sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_A6380();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }
  uint64_t v8 = v5 + v1[7];
  sub_7AF4(&qword_D7E70);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = sub_A5A20();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  else
  {
    swift_release();
  }
  unint64_t v10 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v11 = v5 + v1[12];
  uint64_t v12 = sub_A6380();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);

  return _swift_deallocObject(v0, v10 + 8, v2 | 7);
}

uint64_t sub_5E2EC()
{
  return sub_5E304((uint64_t (*)(unint64_t, uint64_t))sub_58B20);
}

uint64_t sub_5E304(uint64_t (*a1)(unint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v1 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));

  return a1(v1 + v3, v4);
}

uint64_t sub_5E3AC()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_5E3F4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_55D74(a1, v2 + 16, a2);
}

uint64_t sub_5E3FC(uint64_t a1)
{
  return a1;
}

unint64_t sub_5E428()
{
  unint64_t result = qword_D9C88;
  if (!qword_D9C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9C88);
  }
  return result;
}

uint64_t sub_5E47C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_5E4D4()
{
  return sub_560A4((uint64_t)(v0 + 2), v0[7], v0[8], v0[9], v0[10]);
}

uint64_t sub_5E4E4(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 1701602409;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 1701602409;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x616570536C6C6977;
      unint64_t v3 = 0xE90000000000006BLL;
      break;
    case 2:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x676E696B61657073;
      break;
    case 3:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x646573756170;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE90000000000006BLL;
      if (v5 == 0x616570536C6C6977) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0xE800000000000000;
      uint64_t v2 = 0x676E696B61657073;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x646573756170) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = sub_A7800();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_5E664(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x796C6E4F64616572;
  }
  else {
    uint64_t v3 = 0x75706E4972657375;
  }
  if (v2) {
    unint64_t v4 = 0xE900000000000074;
  }
  else {
    unint64_t v4 = 0xE800000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x796C6E4F64616572;
  }
  else {
    uint64_t v5 = 0x75706E4972657375;
  }
  if (a2) {
    unint64_t v6 = 0xE800000000000000;
  }
  else {
    unint64_t v6 = 0xE900000000000074;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_A7800();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_5E710(char *a1, char *a2)
{
  return sub_5E664(*a1, *a2);
}

Swift::Int sub_5E71C()
{
  return sub_A7890();
}

uint64_t sub_5E7A4()
{
  sub_A7210();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_5E818()
{
  return sub_A7890();
}

uint64_t sub_5E89C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v8._uint64_t countAndFlagsBits = *a1;
  uint64_t v3 = (void *)a1[1];
  v4._rawValue = &off_CEFE8;
  v8._object = v3;
  Swift::Int v5 = sub_A77B0(v4, v8);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_5E8FC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x75706E4972657375;
  if (*v1) {
    uint64_t v2 = 0x796C6E4F64616572;
  }
  unint64_t v3 = 0xE900000000000074;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_5E940(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  if (a2)
  {
    id v8 = objc_allocWithZone((Class)type metadata accessor for _LiveSpeechTextView());
    uint64_t v9 = sub_5F380(3, HIBYTE(a5) & 1, a2, 400.0);
    LODWORD(v10) = 1132068864;
    [v9 setContentCompressionResistancePriority:0 forAxis:v10];
    uint64_t v11 = v9;
    sub_7AF4(&qword_D9DE8);
    sub_A69B0();
    [v11 setDelegate:v14];

    LOBYTE(v9) = a5 & 1;
    sub_614F8(a4, a5 & 1);
    LOBYTE(a5) = sub_53A50(a4, a5 & 1);
    sub_5401C(a4, (char)v9);
    if (a5) {
      char v12 = 0;
    }
    else {
      char v12 = 2;
    }
    v11[OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_mode] = v12;
    sub_60124();
    return (uint64_t)v11;
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_619C0((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

void sub_5EABC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, __int16 a6)
{
  if ((a6 & 0x100) != 0)
  {
    if (a3)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      id v12 = a3;
      sub_A60D0();

      swift_release();
      uint64_t v13 = swift_release();
      sub_608F4(v13, v22);
      swift_bridgeObjectRelease();
      return;
    }
LABEL_21:
    type metadata accessor for LiveSpeechStore(0);
    sub_619C0((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    sub_A64B0();
    __break(1u);
    JUMPOUT(0x5EEDCLL);
  }
  if (!a3) {
    goto LABEL_21;
  }
  char v9 = a6 & 1;
  swift_getKeyPath();
  swift_getKeyPath();
  id v10 = a3;
  sub_A60D0();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v11 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0) {
    uint64_t v11 = *(void *)v21 & 0xFFFFFFFFFFFFLL;
  }
  if (v11)
  {
    *(unsigned char *)(a1 + OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_mode) = 1;
    sub_60124();
  }
  else
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v14 = v10;
    sub_A60D0();

    swift_release();
    swift_release();
    switch(v21[0])
    {
      case 1:
      case 2:
      case 3:
        char v15 = sub_A7800();
        swift_bridgeObjectRelease();
        if (v15) {
          goto LABEL_12;
        }
        swift_getKeyPath();
        swift_getKeyPath();
        id v16 = v14;
        sub_A60D0();

        swift_release();
        swift_release();
        switch(v21[0])
        {
          case 0:
          case 2:
          case 3:
            char v17 = sub_A7800();
            swift_bridgeObjectRelease();
            if (v17) {
              goto LABEL_17;
            }
            swift_getKeyPath();
            swift_getKeyPath();
            id v18 = v16;
            sub_A60D0();

            swift_release();
            uint64_t v19 = swift_release();
            sub_608F4(v19, v22);
LABEL_16:
            swift_bridgeObjectRelease();
            break;
          case 1:
            goto LABEL_16;
          default:
            JUMPOUT(0);
        }
        return;
      default:
        swift_bridgeObjectRelease();
LABEL_12:
        *(unsigned char *)(a1 + OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_mode) = 0;
        sub_60124();
        break;
    }
  }
LABEL_17:
  sub_614F8(a5, v9);
  char v20 = sub_53A50(a5, v9);
  sub_5401C(a5, v9);
  if ((v20 & 1) == 0)
  {
    *(unsigned char *)(a1 + OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_mode) = 2;
    sub_60124();
  }
  sub_606A0();
}

uint64_t sub_5EEFC(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 25)) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  return sub_5E940(a1, *(void **)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), v2 | *(unsigned __int8 *)(v1 + 24));
}

void sub_5EF28(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(v2 + 25)) {
    __int16 v3 = 256;
  }
  else {
    __int16 v3 = 0;
  }
  sub_5EABC(a1, a2, *(void **)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), v3 | *(unsigned __int8 *)(v2 + 24));
}

uint64_t sub_5EF5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    Swift::OpaquePointer v4 = (objc_class *)type metadata accessor for LiveSpeechTextView.Coordinator();
    Swift::Int v5 = (char *)objc_allocWithZone(v4);
    *(void *)&v5[OBJC_IVAR____TtCV19LiveSpeechUIService18LiveSpeechTextView11Coordinator_store] = v2;
    v8.receiver = v5;
    v8.super_class = v4;
    id v6 = v2;
    uint64_t result = (uint64_t)objc_msgSendSuper2(&v8, "init");
    *a1 = result;
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_619C0((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_5F02C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5)
{
  sub_60ABC();
  if (a2)
  {
    [a5 bounds];
    return v8;
  }
  return a1;
}

uint64_t sub_5F0A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_61814();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_5F104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_61814();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_5F168()
{
}

id sub_5F190()
{
  return sub_5F1D0(&OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView____lazy_storage___textViewForSizing, (uint64_t (*)(uint64_t))sub_62044);
}

id sub_5F1B0()
{
  return sub_5F1D0(&OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView____lazy_storage___placeholderOverlayLabel, (uint64_t (*)(uint64_t))sub_5F234);
}

id sub_5F1D0(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *a1;
  Swift::OpaquePointer v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    id v5 = *(id *)(v2 + *a1);
  }
  else
  {
    unint64_t v6 = (void *)a2(v2);
    char v7 = *(void **)(v2 + v3);
    *(void *)(v2 + v3) = v6;
    id v5 = v6;

    Swift::OpaquePointer v4 = 0;
  }
  id v8 = v4;
  return v5;
}

void sub_5F234(uint64_t a1)
{
  id v2 = [objc_allocWithZone((Class)UILabel) init];
  uint64_t v3 = self;
  if (qword_D7DD0 != -1) {
    swift_once();
  }
  id v4 = [v3 preferredFontDescriptorWithTextStyle:qword_DF630];
  id v5 = [v4 fontDescriptorWithSymbolicTraits:2];

  if (v5)
  {
    id v6 = [self fontWithDescriptor:v5 size:0.0];

    [v2 setFont:v6];
    [v2 setAttributedText:*(void *)(a1 + OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_placeholderText)];
    [v2 setUserInteractionEnabled:0];
  }
  else
  {
    __break(1u);
  }
}

char *sub_5F380(uint64_t a1, char a2, void *a3, double a4)
{
  int v8 = a2 & 1;
  uint64_t v9 = sub_7AF4(&qword_D9DF0);
  uint64_t v49 = *(void *)(v9 - 8);
  uint64_t v50 = v9;
  __chkstk_darwin(v9);
  uint64_t v48 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_A5F80();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  char v52 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v51 = (char *)&v44 - v15;
  __chkstk_darwin(v16);
  id v18 = (char *)&v44 - v17;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v44 - v20;
  *(void *)&v4[OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_lastReplayCancellable] = 0;
  *(void *)&v4[OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView____lazy_storage___textViewForSizing] = 0;
  *(void *)&v4[OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView____lazy_storage___placeholderOverlayLabel] = 0;
  v4[OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_mode] = 0;
  *(void *)&v4[OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_maxNumberOfLines] = a1;
  *(double *)&v4[OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_maxHeight] = a4;
  int v47 = v8;
  v4[OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_behavior] = v8;
  *(void *)&v4[OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_store] = a3;
  swift_getKeyPath();
  swift_getKeyPath();
  unint64_t v22 = v4;
  id v53 = a3;
  sub_A60D0();
  swift_release();
  swift_release();
  uint64_t v23 = *(void (**)(void))(v12 + 104);
  unsigned int v46 = enum case for LiveSpeechInputMode.keyboard(_:);
  uint64_t v45 = (void (*)(char *, void, uint64_t))v23;
  v23(v18);
  sub_619C0(&qword_D9DC0, (void (*)(uint64_t))&type metadata accessor for LiveSpeechInputMode);
  sub_A7280();
  sub_A7280();
  if (v54 == v57 && v55 == v58) {
    char v24 = 1;
  }
  else {
    char v24 = sub_A7800();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v12 + 8);
  v25(v18, v11);
  v25(v21, v11);
  uint64_t v26 = "AXLiveSpeechAddPhrasePlaceholder";
  if (v24) {
    uint64_t v26 = "AXLiveSpeechTextInputPlaceholder";
  }
  v27._object = (void *)((unint64_t)(v26 - 32) | 0x8000000000000000);
  v27._uint64_t countAndFlagsBits = 0xD000000000000020;
  Swift::String v28 = LiveSpeechLocString(_:)(v27);
  uint64_t countAndFlagsBits = v28._countAndFlagsBits;
  object = v28._object;
  char v31 = v47;
  if (v47)
  {
    char v32 = sub_A7800();
    swift_bridgeObjectRelease();
    if ((v32 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = 0;
      object = (void *)0xE000000000000000;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_11C10(0, &qword_D9DB8);
  if (qword_D7DF0 != -1) {
    swift_once();
  }
  sub_5FA84(countAndFlagsBits, (uint64_t)object, (id)qword_DF660);
  *(void *)&v22[OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_placeholderText] = v33;

  uint64_t v34 = (objc_class *)type metadata accessor for _LiveSpeechTextView();
  v56.receiver = v22;
  v56.super_class = v34;
  id v35 = objc_msgSendSuper2(&v56, "initWithFrame:textContainer:", 0, 0.0, 0.0, 0.0, 0.0);
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v36 = (char *)v35;
  sub_A60D0();
  swift_release();
  swift_release();
  v45(v52, v46, v11);
  sub_A7280();
  sub_A7280();
  if (v54 == v57 && v55 == v58) {
    char v37 = 1;
  }
  else {
    char v37 = sub_A7800();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25(v52, v11);
  v25(v51, v11);
  sub_61A08(v36, v31, v37 & 1);

  id v38 = sub_5F1B0();
  [v36 addSubview:v38];
  uint64_t v39 = v53;
  swift_beginAccess();
  sub_7AF4(&qword_D9DF8);
  uint64_t v40 = v48;
  sub_A60A0();
  swift_endAccess();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_A45C(&qword_D9E00, &qword_D9DF0);
  uint64_t v41 = v50;
  uint64_t v42 = sub_A6110();

  swift_release();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v40, v41);
  *(void *)&v36[OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_lastReplayCancellable] = v42;
  swift_release();
  return v36;
}

void sub_5FA84(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = sub_A71A0();
  swift_bridgeObjectRelease();
  sub_7AF4(&qword_D9DC8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_A9DC0;
  *(void *)(inited + 32) = NSForegroundColorAttributeName;
  uint64_t v6 = sub_11C10(0, &qword_D9DD0);
  *(void *)(inited + 40) = a3;
  *(void *)(inited + 64) = v6;
  *(void *)(inited + 72) = NSFontAttributeName;
  char v7 = self;
  uint64_t v8 = qword_D7DD0;
  uint64_t v9 = NSForegroundColorAttributeName;
  id v10 = a3;
  uint64_t v11 = NSFontAttributeName;
  if (v8 != -1) {
    swift_once();
  }
  id v12 = [v7 preferredFontDescriptorWithTextStyle:qword_DF630];
  id v13 = [v12 fontDescriptorWithSymbolicTraits:2];

  if (v13)
  {
    id v14 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    id v15 = [self fontWithDescriptor:v13 size:0.0];

    *(void *)(inited + 104) = sub_11C10(0, (unint64_t *)&unk_D9DD8);
    *(void *)(inited + 80) = v15;
    sub_6E20(inited);
    type metadata accessor for Key(0);
    sub_619C0(&qword_D8090, type metadata accessor for Key);
    Class isa = sub_A7130().super.isa;
    swift_bridgeObjectRelease();
    [v14 initWithString:v4 attributes:isa];
  }
  else
  {
    __break(1u);
  }
}

void sub_5FCD4()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    *(unsigned char *)(Strong + OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_mode) = 1;
    sub_60124();
  }
}

void sub_5FDD4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_A5F80();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v16 - v7;
  uint64_t v9 = (objc_class *)type metadata accessor for _LiveSpeechTextView();
  v17.receiver = v0;
  v17.super_class = v9;
  objc_msgSendSuper2(&v17, "layoutSubviews");
  sub_60ABC();
  [v0 setScrollEnabled:v10 >= *(void *)&v0[OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_maxNumberOfLines]];
  uint64_t v11 = *(void **)&v0[OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_store];
  swift_getKeyPath();
  swift_getKeyPath();
  id v12 = v11;
  sub_A60D0();

  swift_release();
  swift_release();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for LiveSpeechInputMode.keyboard(_:), v2);
  sub_619C0(&qword_D9DC0, (void (*)(uint64_t))&type metadata accessor for LiveSpeechInputMode);
  sub_A7280();
  sub_A7280();
  if (v16[2] == v16[0] && v16[3] == v16[1])
  {
    swift_bridgeObjectRelease_n();
    id v13 = *(void (**)(char *, uint64_t))(v3 + 8);
    v13(v5, v2);
    v13(v8, v2);
  }
  else
  {
    sub_A7800();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v14 = *(void (**)(char *, uint64_t))(v3 + 8);
    v14(v5, v2);
    v14(v8, v2);
  }
  id v15 = sub_5F1B0();
  [v1 frame];
  [v1 frame];
  sub_62DDC();
  objc_msgSend(v15, "setFrame:");
}

id sub_60124()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_A5F80();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v35 - v7;
  if (v0[OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_behavior])
  {
    char v9 = sub_A7800();
    id result = (id)swift_bridgeObjectRelease();
    if ((v9 & 1) == 0) {
      return result;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (v1[OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_mode])
  {
    if (v1[OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_mode] == 1)
    {
      id v11 = sub_5F1B0();
      [v11 setAlpha:0.0];

      id v12 = [self whiteColor];
      [v1 setTextColor:v12];

      id v13 = v1;
      uint64_t v14 = 1;
    }
    else
    {
      id v21 = sub_5F1B0();
      [v21 setAlpha:1.0];

      id v22 = sub_5F1B0();
      v23._uint64_t countAndFlagsBits = 0xD000000000000023;
      v23._object = (void *)0x80000000000AEB20;
      LiveSpeechLocString(_:)(v23);
      NSString v24 = sub_A71A0();
      swift_bridgeObjectRelease();
      [v22 setText:v24];

      sub_11C10(0, &qword_D9DB8);
      id v25 = [self whiteColor];
      sub_5FA84(0, 0xE000000000000000, v25);
      Swift::String v27 = v26;
      [v1 setAttributedText:v26];

      id v13 = v1;
      uint64_t v14 = 0;
    }
    return [v13 setEditable:v14];
  }
  else
  {
    id v15 = sub_5F1B0();
    [v15 setAlpha:1.0];

    id v16 = sub_5F1B0();
    objc_super v17 = *(void **)&v1[OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_store];
    swift_getKeyPath();
    swift_getKeyPath();
    id v18 = v17;
    sub_A60D0();

    swift_release();
    swift_release();
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for LiveSpeechInputMode.keyboard(_:), v2);
    sub_619C0(&qword_D9DC0, (void (*)(uint64_t))&type metadata accessor for LiveSpeechInputMode);
    sub_A7280();
    sub_A7280();
    if (v35[2] == v35[0] && v35[3] == v35[1])
    {
      swift_bridgeObjectRelease_n();
      uint64_t v19 = *(void (**)(char *, uint64_t))(v3 + 8);
      v19(v5, v2);
      v19(v8, v2);
      uint64_t v20 = "AXLiveSpeechTextInputPlaceholder";
    }
    else
    {
      char v28 = sub_A7800();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void (**)(char *, uint64_t))(v3 + 8);
      v29(v5, v2);
      v29(v8, v2);
      uint64_t v20 = "AXLiveSpeechAddPhrasePlaceholder";
      if (v28) {
        uint64_t v20 = "AXLiveSpeechTextInputPlaceholder";
      }
    }
    v30._object = (void *)((unint64_t)(v20 - 32) | 0x8000000000000000);
    v30._uint64_t countAndFlagsBits = 0xD000000000000020;
    LiveSpeechLocString(_:)(v30);
    NSString v31 = sub_A71A0();
    swift_bridgeObjectRelease();
    [v16 setText:v31];

    sub_11C10(0, &qword_D9DB8);
    id v32 = [self whiteColor];
    sub_5FA84(0, 0xE000000000000000, v32);
    uint64_t v34 = v33;
    [v1 setAttributedText:v33];

    return [v1 setEditable:1];
  }
}

void sub_606A0()
{
  int v1 = v0[OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_mode];
  id v2 = [v0 text];
  if (!v2)
  {
    __break(1u);
    JUMPOUT(0x608E4);
  }
  uint64_t v3 = v2;
  uint64_t v4 = sub_A71D0();
  unint64_t v6 = v5;

  swift_bridgeObjectRelease();
  uint64_t v7 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0) {
    uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    BOOL v8 = 0;
  }
  else
  {
    char v9 = *(void **)&v0[OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_store];
    swift_getKeyPath();
    swift_getKeyPath();
    id v10 = v9;
    sub_A60D0();

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v11 = HIBYTE(v19) & 0xF;
    if ((v19 & 0x2000000000000000) == 0) {
      uint64_t v11 = *(void *)v18 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v8 = v11 == 0;
  }
  id v12 = *(void **)&v0[OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_store];
  swift_getKeyPath();
  swift_getKeyPath();
  id v13 = v12;
  sub_A60D0();

  swift_release();
  swift_release();
  int v14 = 1;
  switch(v18[0])
  {
    case 1:
    case 2:
    case 3:
      int v14 = sub_A7800();
      break;
    default:
      break;
  }
  swift_bridgeObjectRelease();
  int v15 = !v8;
  if (v1 != 1) {
    int v15 = 0;
  }
  uint64_t v16 = v15 & v14;
  id v17 = [self activeKeyboard];
  [v17 setReturnKeyEnabled:v16];
}

void sub_608F4(uint64_t a1, uint64_t a2)
{
  id v4 = sub_5F1B0();
  [v4 setAlpha:0.0];

  unint64_t v5 = *(void **)&v2[OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_store];
  swift_getKeyPath();
  swift_getKeyPath();
  id v6 = v5;
  sub_A60D0();

  swift_release();
  swift_release();
  uint64_t v7 = (void *)sub_61DC4(v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  [v2 setAttributedText:v7];

  if (a2)
  {
    id v8 = [v2 attributedText];
    if (v8)
    {
      char v9 = v8;
      id v10 = [v8 string];

      uint64_t v11 = sub_A71D0();
      uint64_t v13 = v12;

      sub_7AF4(&qword_D9E08);
      sub_A45C((unint64_t *)&unk_D9E10, &qword_D9E08);
      sub_FF30();
      uint64_t v14 = sub_A75C0();
      objc_msgSend(v2, "scrollRangeToVisible:", v14, v15, v11, v13);
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_60ABC()
{
  int v1 = v0;
  id v2 = sub_5F190();
  id v3 = [v0 text];
  if (!v3
    || (id v4 = v3,
        uint64_t v5 = sub_A71D0(),
        unint64_t v7 = v6,
        v4,
        uint64_t v8 = sub_60CDC(v5, v7),
        uint64_t v10 = v9,
        swift_bridgeObjectRelease(),
        !v10))
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = 0xE100000000000000;
    uint64_t v8 = 65;
  }
  sub_11C10(0, &qword_D9DB8);
  id v11 = [self tertiaryLabelColor];
  sub_5FA84(v8, v10, v11);
  uint64_t v13 = v12;
  [v2 setAttributedText:v12];

  [v1 bounds];
  objc_msgSend(v2, "sizeThatFits:", v14, INFINITY);
  double v16 = v15;
  id v17 = [v1 attributedText];
  [v2 setAttributedText:v17];

  [v1 bounds];
  objc_msgSend(v2, "sizeThatFits:", v18, INFINITY);
  double v20 = v19;
  double v21 = *(double *)&v1[OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_maxHeight];

  if (v21 >= v20) {
    double v22 = v20;
  }
  else {
    double v22 = v21;
  }
  double v23 = ceil(v22 / v16);
  if ((~*(void *)&v23 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v23 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v23 >= 9.22337204e18) {
LABEL_13:
  }
    __break(1u);
}

uint64_t sub_60CDC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return sub_A7260();
  }
  else {
    return 0;
  }
}

id sub_60D58()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _LiveSpeechTextView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for _LiveSpeechTextView()
{
  return self;
}

void sub_60E34(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtCV19LiveSpeechUIService18LiveSpeechTextView11Coordinator_store;
  id v4 = *(void **)(v1 + OBJC_IVAR____TtCV19LiveSpeechUIService18LiveSpeechTextView11Coordinator_store);
  swift_getKeyPath();
  swift_getKeyPath();
  id v5 = v4;
  sub_A60D0();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v6 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0) {
    uint64_t v6 = v12 & 0xFFFFFFFFFFFFLL;
  }
  if (v6)
  {
    sub_11C10(0, &qword_D9DB8);
    unint64_t v7 = *(void **)(v1 + v3);
    swift_getKeyPath();
    swift_getKeyPath();
    id v8 = v7;
    sub_A60D0();

    swift_release();
    swift_release();
    id v9 = [self whiteColor];
    sub_5FA84(v12, v13, v9);
    id v11 = v10;
    [a1 setAttributedText:v10];
  }
  type metadata accessor for _LiveSpeechTextView();
  if (swift_dynamicCastClass()) {
    sub_606A0();
  }
}

id sub_610A8(void *a1)
{
  id v3 = [self sharedInstance];
  [v3 userEventOccurred];

  id v4 = *(id *)(v1 + OBJC_IVAR____TtCV19LiveSpeechUIService18LiveSpeechTextView11Coordinator_store);
  id result = [a1 attributedText];
  if (result)
  {
    uint64_t v6 = result;
    id v7 = [result string];

    sub_A71D0();
    if (sub_A7220() >= 2001)
    {
      swift_bridgeObjectRetain();
      sub_8C804(2000);
      swift_bridgeObjectRelease();
      sub_A7200();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_getKeyPath();
    swift_getKeyPath();
    return (id)sub_A60E0();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for LiveSpeechTextView.Coordinator()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for _LiveSpeechTextView.Mode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    char *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x613BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _LiveSpeechTextView.Mode()
{
  return &type metadata for _LiveSpeechTextView.Mode;
}

unsigned char *storeEnumTagSinglePayload for LiveSpeechTextViewBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    char *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x614C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveSpeechTextViewBehavior()
{
  return &type metadata for LiveSpeechTextViewBehavior;
}

uint64_t sub_614F8(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t destroy for LiveSpeechTextView(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);

  return sub_5401C(v2, v3);
}

uint64_t initializeWithCopy for LiveSpeechTextView(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  id v8 = v4;
  sub_614F8(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

uint64_t assignWithCopy for LiveSpeechTextView(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  char v8 = *(unsigned char *)(a2 + 24);
  sub_614F8(v7, v8);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 24) = v8;
  sub_5401C(v9, v10);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

__n128 initializeWithTake for LiveSpeechTextView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LiveSpeechTextView(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  char v5 = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = v5;
  sub_5401C(v6, v7);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for LiveSpeechTextView(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 26)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LiveSpeechTextView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 26) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 26) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveSpeechTextView()
{
  return &type metadata for LiveSpeechTextView;
}

unint64_t sub_6175C()
{
  unint64_t result = qword_D9D98;
  if (!qword_D9D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9D98);
  }
  return result;
}

unint64_t sub_617B4()
{
  unint64_t result = qword_D9DA0;
  if (!qword_D9DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9DA0);
  }
  return result;
}

void *sub_61808()
{
  return &protocol witness table for Never;
}

unint64_t sub_61814()
{
  unint64_t result = qword_D9DA8;
  if (!qword_D9DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_D9DA8);
  }
  return result;
}

uint64_t sub_61868@<X0>(unsigned char *a1@<X8>)
{
  return sub_618A4(a1);
}

uint64_t sub_6187C(uint64_t a1, void **a2)
{
  return sub_61934(a1, a2);
}

uint64_t sub_61890@<X0>(unsigned char *a1@<X8>)
{
  return sub_618A4(a1);
}

uint64_t sub_618A4@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_61920(uint64_t a1, void **a2)
{
  return sub_61934(a1, a2);
}

uint64_t sub_61934(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v2;
  return sub_A60E0();
}

uint64_t sub_619C0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_61A08(void *a1, char a2, char a3)
{
  uint64_t v6 = self;
  id v7 = [v6 whiteColor];
  [a1 setTintColor:v7];

  if (a3)
  {
    id v8 = [v6 clearColor];
  }
  else
  {
    id v9 = [v6 whiteColor];
    id v8 = [v9 colorWithAlphaComponent:0.12];
  }
  [a1 setBackgroundColor:v8];

  [a1 setScrollEnabled:0];
  char v10 = self;
  if (qword_D7DD0 != -1) {
    swift_once();
  }
  id v11 = [v10 preferredFontDescriptorWithTextStyle:qword_DF630];
  id v12 = [v11 fontDescriptorWithSymbolicTraits:2];

  if (!v12)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  BOOL v13 = (a2 & 1) == 0;
  id v14 = [self fontWithDescriptor:v12 size:0.0];

  [a1 setFont:v14];
  [a1 setEditable:v13];
  [a1 setSelectable:v13];
  [a1 setUserInteractionEnabled:v13];
  if (a3)
  {
    objc_msgSend(a1, "setTextContainerInset:", UIEdgeInsetsZero.top, UIEdgeInsetsZero.left, UIEdgeInsetsZero.bottom, UIEdgeInsetsZero.right);
    uint64_t v15 = 124;
  }
  else
  {
    id v16 = [a1 layer];
    [v16 setCornerRadius:12.0];

    objc_msgSend(a1, "setTextContainerInset:", 0.0, 8.0, 0.0, 8.0);
    uint64_t v15 = 9;
  }
  [a1 setReturnKeyType:v15];
  id v17 = [a1 textContainer];
  [v17 setLineFragmentPadding:0.0];

  [a1 setAutocapitalizationType:2];
  id v18 = [a1 textInputTraits];
  if (!v18) {
    goto LABEL_16;
  }
  double v19 = v18;
  [v18 setInlineCompletionType:1];

  id v20 = [a1 textInputTraits];
  if (!v20)
  {
LABEL_17:
    __break(1u);
    return;
  }
  double v21 = v20;
  [v20 setForceDisableDictation:1];

  [a1 setEnablesReturnKeyAutomatically:0];
}

uint64_t sub_61D84()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_61DBC()
{
}

uint64_t sub_61DC4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a2;
  if (!a2) {
    return v4;
  }
  swift_bridgeObjectRetain();
  sub_A7270();
  swift_bridgeObjectRelease();
  uint64_t result = sub_A7270();
  uint64_t v8 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    uint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v8 >= a4 >> 14)
  {
    sub_A7270();
    unint64_t v4 = (unint64_t)[objc_allocWithZone((Class)NSMutableAttributedString) init];
    sub_11C10(0, &qword_D9DB8);
    uint64_t v9 = sub_A7200();
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    id v12 = self;
    sub_5FA84(v9, v11, [v12 tertiaryLabelColor]);
    id v14 = v13;
    [(id)v4 appendAttributedString:v13];

    uint64_t v15 = sub_A7200();
    uint64_t v17 = v16;
    swift_bridgeObjectRelease();
    sub_5FA84(v15, v17, [v12 whiteColor]);
    double v19 = v18;
    [(id)v4 appendAttributedString:v18];

    uint64_t v20 = sub_A7200();
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    sub_5FA84(v20, v22, [v12 tertiaryLabelColor]);
    NSString v24 = v23;
    [(id)v4 appendAttributedString:v23];

    return v4;
  }
  __break(1u);
  return result;
}

id sub_62044(uint64_t a1)
{
  uint64_t v2 = sub_A5F80();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v16 - v7;
  id v9 = objc_msgSend(objc_allocWithZone((Class)UITextView), "initWithFrame:textContainer:", 0, 0.0, 0.0, 0.0, 0.0);
  uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_store);
  swift_getKeyPath();
  swift_getKeyPath();
  id v11 = v10;
  sub_A60D0();

  swift_release();
  swift_release();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for LiveSpeechInputMode.keyboard(_:), v2);
  sub_619C0(&qword_D9DC0, (void (*)(uint64_t))&type metadata accessor for LiveSpeechInputMode);
  sub_A7280();
  sub_A7280();
  if (v16[2] == v16[0] && v16[3] == v16[1])
  {
    swift_bridgeObjectRelease_n();
    id v12 = *(void (**)(char *, uint64_t))(v3 + 8);
    v12(v5, v2);
    v12(v8, v2);
    char v13 = 1;
  }
  else
  {
    char v13 = sub_A7800();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v14 = *(void (**)(char *, uint64_t))(v3 + 8);
    v14(v5, v2);
    v14(v8, v2);
  }
  sub_61A08(v9, *(unsigned char *)(a1 + OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_behavior), v13 & 1);
  return v9;
}

void sub_622F8(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = sub_A5F80();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  char v13 = (char *)&v86 - v12;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v86 - v15;
  type metadata accessor for _LiveSpeechTextView();
  uint64_t v17 = swift_dynamicCastClass();
  if (v17)
  {
    id v18 = (void *)v17;
    char v93 = v10;
    id v19 = a1;
    id v20 = [v18 attributedText];
    if (!v20)
    {
      __break(1u);
      goto LABEL_44;
    }
    uint64_t v21 = v20;

    if (a2 == 10 && a3 == 0xE100000000000000 || (sub_A7800() & 1) != 0)
    {
      if (*((unsigned char *)v18 + OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_mode) != 1) {
        goto LABEL_42;
      }
      uint64_t v89 = v8;
      id v90 = v19;
      long long v91 = (void (*)(char *, uint64_t))v18;
      uint64_t v22 = OBJC_IVAR____TtCV19LiveSpeechUIService18LiveSpeechTextView11Coordinator_store;
      double v23 = *(void **)(v3 + OBJC_IVAR____TtCV19LiveSpeechUIService18LiveSpeechTextView11Coordinator_store);
      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t v24 = v3;
      id v25 = v23;
      sub_A60D0();

      swift_release();
      swift_release();
      uint64_t v27 = v96;
      unint64_t v26 = v97;
      swift_bridgeObjectRelease();
      uint64_t v28 = HIBYTE(v26) & 0xF;
      if ((v26 & 0x2000000000000000) == 0) {
        uint64_t v28 = v27 & 0xFFFFFFFFFFFFLL;
      }
      if (v28)
      {
        uint64_t v92 = v24;
        uint64_t v88 = v22;
        uint64_t v29 = *(void **)(v24 + v22);
        swift_getKeyPath();
        swift_getKeyPath();
        id v30 = v29;
        sub_A60D0();

        swift_release();
        swift_release();
        uint64_t v31 = enum case for LiveSpeechInputMode.keyboard(_:);
        uint64_t v32 = v89;
        long long v87 = *(void (**)(char *, uint64_t, uint64_t))(v89 + 104);
        v87(v13, enum case for LiveSpeechInputMode.keyboard(_:), v7);
        sub_619C0(&qword_D9DC0, (void (*)(uint64_t))&type metadata accessor for LiveSpeechInputMode);
        sub_A7280();
        sub_A7280();
        if (v96 == v94 && v97 == v95) {
          char v33 = 1;
        }
        else {
          char v33 = sub_A7800();
        }
        unsigned int v46 = v91;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int v47 = *(void (**)(char *, uint64_t))(v32 + 8);
        v47(v13, v7);
        v47(v16, v7);
        uint64_t v48 = v92;
        uint64_t v49 = v88;
        uint64_t v50 = *(void **)(v92 + v88);
        if ((v33 & 1) == 0)
        {
          swift_getKeyPath();
          swift_getKeyPath();
          id v59 = v50;
          sub_A60D0();

          swift_release();
          swift_release();
          uint64_t v60 = *(void **)(v48 + v49);
          if (v96 == 1)
          {
            id v61 = v60;
            sub_793F8();

            uint64_t v62 = *(void **)(v48 + v49);
            swift_getKeyPath();
            swift_getKeyPath();
            uint64_t v63 = v48;
            LOBYTE(v96) = 0;
            id v64 = v62;
            sub_A60E0();
          }
          else
          {
            swift_getKeyPath();
            swift_getKeyPath();
            id v65 = v60;
            sub_A60D0();

            swift_release();
            swift_release();
            id v66 = [v46 textInputMode];
            if (!v66)
            {
LABEL_46:
              __break(1u);
              goto LABEL_47;
            }
            long long v67 = v66;
            id v68 = [v66 primaryLanguage];

            if (!v68)
            {
LABEL_47:
              __break(1u);
              return;
            }
            sub_A71D0();

            sub_797D0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v63 = v92;
          }
          long long v69 = *(void **)(v63 + v49);
          swift_getKeyPath();
LABEL_41:
          swift_getKeyPath();
          LOBYTE(v96) = 0;
          id v83 = v69;
          sub_A60E0();
          long long v84 = *(void **)(v63 + v49);
          swift_getKeyPath();
          swift_getKeyPath();
          uint64_t v96 = 0;
          unint64_t v97 = 0xE000000000000000;
          id v85 = v84;
          sub_A60E0();
          id v19 = v90;
          goto LABEL_42;
        }
        long long v91 = v47;
        swift_getKeyPath();
        swift_getKeyPath();
        id v51 = v50;
        sub_A60D0();

        swift_release();
        swift_release();
        uint64_t v53 = v96;
        uint64_t v52 = v97;
        v87(v93, v31, v7);
        id v54 = [v46 textInputMode];
        uint64_t v55 = v54;
        if (v54)
        {
          id v56 = [v54 primaryLanguage];

          if (v56)
          {
            uint64_t v55 = (void *)sub_A71D0();
            uint64_t v58 = v57;
          }
          else
          {
            uint64_t v55 = 0;
            uint64_t v58 = 0;
          }
          uint64_t v49 = v88;
        }
        else
        {
          uint64_t v58 = 0;
        }
        BOOL v70 = LiveSpeechStore.shouldSendSpeechToCall.getter();
        uint64_t v71 = v53;
        uint64_t v72 = (uint64_t)v93;
        sub_7F2D4(v71, v52, (uint64_t)v93, v70, (uint64_t)v55, v58, 0);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v91((char *)v72, v7);
        uint64_t v73 = *(void **)(v92 + v49);
        swift_getKeyPath();
        swift_getKeyPath();
        id v74 = v73;
        sub_A60D0();

        swift_release();
        swift_release();
        uint64_t v76 = v96;
        uint64_t v75 = v97;
        id v77 = [v46 textInputMode];
        if (v77)
        {
          long long v78 = v77;
          id v79 = [v77 primaryLanguage];

          if (v79)
          {
            long long v80 = (__objc2_ivar *)sub_A71D0();
            uint64_t v82 = v81;

            sub_790B8(v76, v75, v80, v82);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v63 = v92;
            long long v69 = *(void **)(v92 + v49);
            swift_getKeyPath();
            goto LABEL_41;
          }
          goto LABEL_45;
        }
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      id v19 = v90;
LABEL_42:
      sub_606A0();

      return;
    }
    uint64_t v34 = v19;
    uint64_t v35 = OBJC_IVAR____TtCV19LiveSpeechUIService18LiveSpeechTextView11Coordinator_store;
    uint64_t v36 = *(void **)(v3 + OBJC_IVAR____TtCV19LiveSpeechUIService18LiveSpeechTextView11Coordinator_store);
    swift_getKeyPath();
    swift_getKeyPath();
    id v37 = v36;
    sub_A60D0();

    swift_release();
    swift_release();
    if (v96 || v97 != 0xE000000000000000)
    {
      char v38 = sub_A7800();
      swift_bridgeObjectRelease();
      if ((v38 & 1) == 0)
      {
        *((unsigned char *)v18 + OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_mode) = 1;
        sub_60124();
        id v19 = v34;
        goto LABEL_42;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    *((unsigned char *)v18 + OBJC_IVAR____TtC19LiveSpeechUIService19_LiveSpeechTextView_mode) = 1;
    sub_60124();
    id v39 = *(id *)(v3 + v35);
    uint64_t v40 = sub_A7220();
    swift_bridgeObjectRetain();
    if (v40 >= 2001)
    {
      sub_8C804(2000);
      swift_bridgeObjectRelease();
      a2 = sub_A7200();
      a3 = v41;
      swift_bridgeObjectRelease();
    }
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v96 = a2;
    unint64_t v97 = a3;
    sub_A60E0();
    sub_11C10(0, &qword_D9DB8);
    uint64_t v42 = self;
    id v43 = v34;
    sub_5FA84(0, 0xE000000000000000, [v42 whiteColor]);
    uint64_t v45 = v44;
    [v18 setAttributedText:v44];

    id v19 = v34;
    goto LABEL_42;
  }
}

uint64_t sub_62D34@<X0>(unsigned char *a1@<X8>)
{
  return sub_618A4(a1);
}

uint64_t sub_62D5C(uint64_t a1, void **a2)
{
  return sub_61934(a1, a2);
}

uint64_t sub_62D8C@<X0>(unsigned char *a1@<X8>)
{
  return sub_618A4(a1);
}

uint64_t sub_62DB4(uint64_t a1, void **a2)
{
  return sub_61934(a1, a2);
}

uint64_t sub_62DEC@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *(unsigned char *)a9 = a1 & 1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(unsigned char *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(void *)(a9 + 64) = a12;
  *(void *)(a9 + 72) = a13;
  *(double *)(a9 + 80) = a10;
  *(double *)(a9 + 88) = a11;
  *(void *)(a9 + 96) = a14;
  *(void *)(a9 + 104) = a15;
  type metadata accessor for CGSize(0);
  sub_A6E70();
  *(_OWORD *)(a9 + 112) = v20;
  *(void *)(a9 + 128) = v21;
  sub_A6E70();
  *(_OWORD *)(a9 + 136) = v20;
  *(void *)(a9 + 152) = v21;
  int IsPad = AXDeviceIsPad();
  double v17 = 500.0;
  if (IsPad) {
    double v17 = 1000.0;
  }
  *(double *)(a9 + 160) = v17;
  id v18 = (uint64_t *)(a9 + *(int *)(sub_7AF4(&qword_D9F38) + 64));
  *id v18 = swift_getKeyPath();
  sub_7AF4(&qword_D81B0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_62EFC(double *a1)
{
  CGFloat v1 = *a1;
  CGFloat v2 = a1[1];
  CGFloat v3 = a1[2];
  CGFloat v4 = a1[3];
  if (qword_D7D68 != -1) {
    swift_once();
  }
  return LiveSpeechCaptionsViewsCoordinator.updateLiveSpeechFrame(_:)(v1, v2, v3, v4);
}

double LiveSpeechHUDView_iOS.init()@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = _s19LiveSpeechUIService0aB11HUDView_iOSV23_isTextInputViewFocused33_F2BA035E101D43293F5F7FB749375E867SwiftUI10FocusStateVySbGvpfi_0() & 1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3 & 1;
  type metadata accessor for LiveSpeechStore(0);
  sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
  *(void *)(a1 + 24) = sub_A64C0();
  *(void *)(a1 + 32) = v4;
  char v5 = (int *)type metadata accessor for LiveSpeechHUDView_iOS(0);
  uint64_t v6 = (uint64_t *)(a1 + v5[6]);
  *uint64_t v6 = swift_getKeyPath();
  sub_7AF4(&qword_D7E78);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = (uint64_t *)(a1 + v5[7]);
  uint64_t *v7 = swift_getKeyPath();
  sub_7AF4(&qword_D7E68);
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = a1 + v5[8];
  *(void *)uint64_t v8 = sub_6337C;
  *(void *)(v8 + 8) = 0;
  *(unsigned char *)(v8 + 16) = 0;
  uint64_t v9 = a1 + v5[9];
  sub_A6E70();
  *(unsigned char *)uint64_t v9 = v13;
  *(void *)(v9 + 8) = *((void *)&v13 + 1);
  uint64_t v10 = (_OWORD *)(a1 + v5[10]);
  sub_A6E70();
  *uint64_t v10 = v13;
  uint64_t v11 = a1 + v5[11];
  type metadata accessor for CGSize(0);
  sub_A6E70();
  double result = *(double *)&v13;
  *(_OWORD *)uint64_t v11 = v13;
  *(void *)(v11 + 16) = v14;
  return result;
}

uint64_t type metadata accessor for LiveSpeechHUDView_iOS(uint64_t a1)
{
  return sub_1182C(a1, qword_D9EE0);
}

uint64_t sub_63164()
{
  return sub_A64D0();
}

uint64_t sub_63188(uint64_t a1)
{
  uint64_t v2 = sub_A6380();
  __n128 v3 = __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, __n128))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  return sub_A64E0();
}

uint64_t sub_63250()
{
  return sub_A6590();
}

uint64_t sub_63274()
{
  return sub_A6590();
}

uint64_t sub_63298(uint64_t a1)
{
  uint64_t v2 = sub_7AF4(&qword_D8598);
  __chkstk_darwin(v2 - 8);
  sub_8860(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_D8598);
  return sub_A65A0();
}

uint64_t sub_63330()
{
  return sub_A64D0();
}

id (*variable initialization expression of LiveSpeechHUDView_iOS._callManager())()
{
  return sub_6337C;
}

id sub_6337C()
{
  if (qword_D7DB0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static LiveSpeechCaptionsCallManager.shared;

  return v0;
}

uint64_t property wrapper backing initializer of LiveSpeechHUDView_iOS.windowState()
{
  sub_A6E70();
  return v1;
}

uint64_t property wrapper backing initializer of LiveSpeechHUDView_iOS.pipOffset()
{
  type metadata accessor for CGSize(0);
  sub_A6E70();
  return v1;
}

uint64_t LiveSpeechHUDView_iOS.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v22 = a1;
  uint64_t v2 = type metadata accessor for LiveSpeechHUDView_iOS(0);
  uint64_t v3 = v2 - 8;
  uint64_t v4 = *(void *)(v2 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v2);
  uint64_t v6 = v1 + *(int *)(v3 + 44);
  char v7 = *(unsigned char *)v6;
  uint64_t v8 = *(void *)(v6 + 8);
  LOBYTE(v23) = v7;
  *((void *)&v23 + 1) = v8;
  sub_7AF4(&qword_D9E80);
  sub_A6EA0();
  uint64_t v9 = v25;
  uint64_t v10 = v26;
  char v11 = LOBYTE(v27);
  uint64_t v12 = v1 + *(int *)(v3 + 52);
  uint64_t v13 = *(void *)(v12 + 16);
  long long v23 = *(_OWORD *)v12;
  uint64_t v24 = v13;
  sub_7AF4(&qword_D8178);
  sub_A6EA0();
  uint64_t v15 = v25;
  uint64_t v14 = v26;
  double v16 = v27;
  double v17 = v28;
  sub_759CC(v1, (uint64_t)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LiveSpeechHUDView_iOS);
  unint64_t v18 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v19 = swift_allocObject();
  sub_75BDC((uint64_t)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, type metadata accessor for LiveSpeechHUDView_iOS);
  return sub_62DEC(0, v9, v10, v11, 0, 0, 0, 0, v22, v16, v17, v15, v14, (uint64_t)sub_63B70, v19);
}

uint64_t sub_63640@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v50 = a3;
  uint64_t v46 = sub_A5F80();
  uint64_t v5 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  char v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_7AF4(&qword_DA0C0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_7AF4(&qword_DA0C8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_7AF4(&qword_D9AD0);
  __chkstk_darwin(v47);
  uint64_t v49 = (uint64_t)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_7AF4(&qword_D9AD8);
  __chkstk_darwin(v15 - 8);
  uint64_t v48 = (uint64_t)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v10 = sub_A6750();
  *((void *)v10 + 1) = 0;
  v10[16] = 1;
  uint64_t v17 = sub_7AF4(&qword_DA0D0);
  sub_63C0C(a2, a1, &v10[*(int *)(v17 + 44)]);
  uint64_t v18 = sub_A7090();
  uint64_t v19 = *(void **)(a2 + 24);
  if (!v19) {
    goto LABEL_10;
  }
  uint64_t v20 = v18;
  swift_getKeyPath();
  swift_getKeyPath();
  id v21 = v19;
  sub_A60D0();

  swift_release();
  swift_release();
  uint64_t v22 = &v13[*(int *)(v11 + 36)];
  uint64_t v23 = sub_7AF4(&qword_DA0D8);
  uint64_t v24 = v46;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(&v22[*(int *)(v23 + 36)], v7, v46);
  *(void *)uint64_t v22 = v20;
  sub_8860((uint64_t)v10, (uint64_t)v13, &qword_DA0C0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v24);
  sub_A35C((uint64_t)v10, &qword_DA0C0);
  uint64_t v25 = sub_A7090();
  uint64_t v26 = *(void **)(a2 + 24);
  uint64_t v27 = a2;
  if (v26)
  {
    uint64_t v28 = v25;
    id v29 = v26;
    unint64_t v30 = LiveSpeechStore.categoryOptions.getter();
    id v31 = v29;
    char v32 = sub_87EC8(v30);
    swift_bridgeObjectRelease();

    if (v32)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      sub_A60D0();

      swift_release();
      swift_release();
      id v33 = v51;
    }
    else
    {
      id v33 = LiveSpeechStore.getRecentOrSavedCategory()();
    }
    uint64_t v34 = v49;
    sub_8860((uint64_t)v13, v49, &qword_DA0C8);
    uint64_t v35 = (uint64_t *)(v34 + *(int *)(v47 + 36));
    *uint64_t v35 = v28;
    v35[1] = (uint64_t)v33;
    sub_A35C((uint64_t)v13, &qword_DA0C8);
    uint64_t v36 = v27 + *(int *)(type metadata accessor for LiveSpeechHUDView_iOS(0) + 36);
    char v37 = *(unsigned char *)v36;
    uint64_t v38 = *(void *)(v36 + 8);
    LOBYTE(v51) = v37;
    uint64_t v52 = v38;
    sub_7AF4(&qword_D9E80);
    sub_A6E80();
    char v39 = v53 == 1;
    if (v53 == 1) {
      double v40 = 0.0;
    }
    else {
      double v40 = INFINITY;
    }
    uint64_t v41 = sub_A7030();
    uint64_t v42 = v48;
    sub_5518C(0.0, 1, 0.0, 1, v40, v39, 0.0, 1, v48, 0.0, 1, 0.0, 1, v41, v43);
    sub_A35C(v34, &qword_D9AD0);
    return sub_29C10(v42, v50, &qword_D9AD8);
  }
  else
  {
LABEL_10:
    type metadata accessor for LiveSpeechStore(0);
    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_63B60(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return _objc_release_x1();
  }
  else {
    return swift_release();
  }
}

uint64_t sub_63B70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for LiveSpeechHUDView_iOS(0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_63640(a1, v6, a2);
}

uint64_t sub_63BF0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_63C0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v151 = a2;
  uint64_t v148 = a3;
  uint64_t v147 = sub_A62C0();
  uint64_t v146 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v144 = v4;
  uint64_t v145 = (char *)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for LiveSpeechHUDView_iOS(0);
  uint64_t v139 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v140 = v6;
  uint64_t v143 = (uint64_t)&v108 - (((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = sub_A7360();
  uint64_t v141 = *(void *)(v142 - 8);
  __chkstk_darwin(v142);
  uint64_t v135 = (char *)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_A6910();
  __chkstk_darwin(v8 - 8);
  uint64_t v116 = (char *)&v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = sub_A6FE0();
  uint64_t v115 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  uint64_t v114 = (char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_7AF4(&qword_DA0E0);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_7AF4(&qword_DA0E8);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (uint64_t *)((char *)&v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = sub_7AF4(&qword_DA0F0);
  uint64_t v19 = v18 - 8;
  __chkstk_darwin(v18);
  id v21 = (char *)&v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_7AF4(&qword_DA0F8);
  __chkstk_darwin(v109);
  uint64_t v111 = (uint64_t)&v108 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_7AF4(&qword_DA100);
  __chkstk_darwin(v110);
  uint64_t v113 = (char *)&v108 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = sub_7AF4(&qword_DA108);
  __chkstk_darwin(v112);
  uint64_t v118 = (uint64_t)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = sub_7AF4(&qword_DA110);
  __chkstk_darwin(v117);
  uint64_t v121 = (uint64_t)&v108 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = sub_7AF4(&qword_DA118);
  __chkstk_darwin(v119);
  char v128 = (char *)&v108 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = sub_7AF4(&qword_DA120);
  __chkstk_darwin(v130);
  uint64_t v129 = (uint64_t)&v108 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = sub_7AF4(&qword_DA128);
  uint64_t v136 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  long long v133 = (char *)&v108 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = sub_7AF4(&qword_DA130);
  __chkstk_darwin(v132);
  uint64_t v138 = (uint64_t)&v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  long long v131 = (char *)&v108 - v31;
  __chkstk_darwin(v32);
  uint64_t v134 = (uint64_t)&v108 - v33;
  uint64_t v108 = v5;
  uint64_t v34 = a1 + *(int *)(v5 + 36);
  uint64_t v35 = *(void *)(v34 + 8);
  LOBYTE(v162) = *(unsigned char *)v34;
  *((void *)&v162 + 1) = v35;
  uint64_t v36 = sub_7AF4(&qword_D9E80);
  sub_A6E80();
  sub_A7030();
  sub_A6270();
  uint64_t v127 = v156;
  int v126 = v157;
  uint64_t v125 = v158;
  int v124 = v159;
  uint64_t v123 = v160;
  uint64_t v122 = v161;
  *uint64_t v17 = sub_A7030();
  v17[1] = v37;
  uint64_t v38 = (uint64_t)v17 + *(int *)(sub_7AF4(&qword_DA138) + 44);
  uint64_t v149 = a1;
  sub_64D14(a1, v151, v38);
  uint64_t v39 = sub_A7030();
  uint64_t v41 = v40;
  sub_8860((uint64_t)v17, (uint64_t)v14, &qword_DA0E8);
  uint64_t v42 = (uint64_t (**)@<X0>(uint64_t *@<X8>))&v14[*(int *)(v12 + 44)];
  void *v42 = sub_53648;
  v42[1] = 0;
  v42[2] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v39;
  v42[3] = v41;
  sub_8860((uint64_t)v14, (uint64_t)v21, &qword_DA0E0);
  uint64_t v43 = (uint64_t (**)(double *))&v21[*(int *)(v19 + 44)];
  *uint64_t v43 = sub_62EFC;
  v43[1] = 0;
  sub_A35C((uint64_t)v14, &qword_DA0E0);
  sub_A35C((uint64_t)v17, &qword_DA0E8);
  char v44 = *(unsigned char *)v34;
  uint64_t v150 = v34;
  uint64_t v45 = *(void *)(v34 + 8);
  uint64_t v46 = v36;
  LOBYTE(v162) = v44;
  *((void *)&v162 + 1) = v45;
  sub_A6E80();
  if (v152 == 1 && qword_D7D50 != -1) {
    swift_once();
  }
  LOBYTE(v162) = v44;
  *((void *)&v162 + 1) = v45;
  sub_A6E80();
  if (v152 == 1 && qword_D7D50 != -1) {
    swift_once();
  }
  uint64_t v47 = v149;
  sub_A7030();
  sub_A6270();
  uint64_t v48 = v111;
  sub_8860((uint64_t)v21, v111, &qword_DA0F0);
  uint64_t v49 = (_OWORD *)(v48 + *(int *)(v109 + 36));
  long long v50 = v163;
  *uint64_t v49 = v162;
  v49[1] = v50;
  v49[2] = v164;
  sub_A35C((uint64_t)v21, &qword_DA0F0);
  id v51 = v114;
  sub_A6FB0();
  sub_A62A0();
  uint64_t v52 = v116;
  sub_65CE4(v116, v53);
  uint64_t v54 = (uint64_t)v113;
  uint64_t v55 = &v113[*(int *)(v110 + 36)];
  uint64_t v56 = v115;
  uint64_t v57 = v120;
  (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v55, v51, v120);
  uint64_t v58 = sub_7AF4(&qword_DA140);
  sub_759CC((uint64_t)v52, (uint64_t)&v55[*(int *)(v58 + 52)], (uint64_t (*)(void))&type metadata accessor for UnevenRoundedRectangle);
  *(_WORD *)&v55[*(int *)(v58 + 56)] = 256;
  sub_8860(v48, v54, &qword_DA0F8);
  sub_76184((uint64_t)v52, (uint64_t (*)(void))&type metadata accessor for UnevenRoundedRectangle);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v51, v57);
  sub_A35C(v48, &qword_DA0F8);
  id v59 = *(void **)(v47 + 24);
  if (v59)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v60 = v59;
    sub_A60D0();

    swift_release();
    swift_release();
    if ((_BYTE)v152) {
      double v61 = 1.0;
    }
    else {
      double v61 = 0.0;
    }
    uint64_t v62 = v118;
    sub_8860(v54, v118, &qword_DA100);
    *(double *)(v62 + *(int *)(v112 + 36)) = v61;
    sub_A35C(v54, &qword_DA100);
    uint64_t v63 = *(void *)(v150 + 8);
    LOBYTE(v152) = *(unsigned char *)v150;
    *((void *)&v152 + 1) = v63;
    uint64_t v120 = v46;
    sub_A6E80();
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    if (v154 == 1)
    {
      uint64_t v66 = v47 + *(int *)(v108 + 44);
      uint64_t v67 = *(void *)(v66 + 16);
      long long v152 = *(_OWORD *)v66;
      uint64_t v153 = v67;
      sub_7AF4(&qword_D8178);
      sub_A6E80();
      uint64_t v64 = v154;
      uint64_t v65 = v155;
    }
    uint64_t v68 = v121;
    sub_8860(v62, v121, &qword_DA108);
    long long v69 = (void *)(v68 + *(int *)(v117 + 36));
    *long long v69 = v64;
    v69[1] = v65;
    sub_A35C(v62, &qword_DA108);
    BOOL v70 = v135;
    sub_A7340();
    uint64_t v71 = v47;
    uint64_t v72 = v143;
    sub_759CC(v71, v143, type metadata accessor for LiveSpeechHUDView_iOS);
    uint64_t v73 = *(unsigned __int8 *)(v139 + 80);
    uint64_t v74 = (v73 + 16) & ~v73;
    uint64_t v118 = (uint64_t)v140 + v74;
    uint64_t v139 = v73 | 7;
    uint64_t v75 = swift_allocObject();
    uint64_t v140 = type metadata accessor for LiveSpeechHUDView_iOS;
    sub_75BDC(v72, v75 + v74, type metadata accessor for LiveSpeechHUDView_iOS);
    uint64_t v76 = (uint64_t)v128;
    id v77 = &v128[*(int *)(v119 + 36)];
    uint64_t v78 = sub_A62F0();
    uint64_t v79 = v141;
    uint64_t v80 = v142;
    (*(void (**)(char *, char *, uint64_t))(v141 + 16))(&v77[*(int *)(v78 + 20)], v70, v142);
    *(void *)id v77 = &unk_DA150;
    *((void *)v77 + 1) = v75;
    sub_8860(v68, v76, &qword_DA110);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v70, v80);
    sub_A35C(v68, &qword_DA110);
    sub_759CC(v149, v72, type metadata accessor for LiveSpeechHUDView_iOS);
    uint64_t v81 = v146;
    uint64_t v82 = v145;
    uint64_t v83 = v147;
    (*(void (**)(char *, uint64_t, uint64_t))(v146 + 16))(v145, v151, v147);
    unint64_t v84 = (v118 + *(unsigned __int8 *)(v81 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80);
    uint64_t v85 = swift_allocObject();
    sub_75BDC(v72, v85 + v74, v140);
    (*(void (**)(unint64_t, char *, uint64_t))(v81 + 32))(v85 + v84, v82, v83);
    uint64_t v86 = v129;
    sub_8860(v76, v129, &qword_DA118);
    long long v87 = (uint64_t (**)())(v86 + *(int *)(v130 + 36));
    *long long v87 = sub_767C8;
    v87[1] = (uint64_t (*)())v85;
    v87[2] = 0;
    v87[3] = 0;
    sub_A35C(v76, &qword_DA118);
    sub_77D5C(&qword_DA158, &qword_DA120, (void (*)(void))sub_76894);
    uint64_t v88 = v133;
    sub_A6C50();
    sub_A35C(v86, &qword_DA120);
    uint64_t v89 = *(void *)(v150 + 8);
    LOBYTE(v152) = *(unsigned char *)v150;
    *((void *)&v152 + 1) = v89;
    sub_A6E80();
    LOBYTE(v85) = sub_A6A10();
    sub_A6140();
    uint64_t v91 = v90;
    uint64_t v93 = v92;
    uint64_t v95 = v94;
    uint64_t v97 = v96;
    uint64_t v98 = v136;
    uint64_t v99 = (uint64_t)v131;
    uint64_t v100 = v137;
    (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v131, v88, v137);
    uint64_t v101 = v99 + *(int *)(v132 + 36);
    *(unsigned char *)uint64_t v101 = v85;
    *(void *)(v101 + 8) = v91;
    *(void *)(v101 + 16) = v93;
    *(void *)(v101 + 24) = v95;
    *(void *)(v101 + 32) = v97;
    *(unsigned char *)(v101 + 40) = 0;
    (*(void (**)(char *, uint64_t))(v98 + 8))(v88, v100);
    uint64_t v102 = v134;
    sub_29C10(v99, v134, &qword_DA130);
    uint64_t v103 = v138;
    sub_8860(v102, v138, &qword_DA130);
    uint64_t v104 = v148;
    *uint64_t v148 = 0;
    *((unsigned char *)v104 + 8) = 1;
    v104[2] = v127;
    *((unsigned char *)v104 + 24) = v126;
    v104[4] = v125;
    *((unsigned char *)v104 + 40) = v124;
    uint64_t v105 = v122;
    v104[6] = v123;
    v104[7] = v105;
    uint64_t v106 = sub_7AF4(&qword_DA1D0);
    sub_8860(v103, (uint64_t)v104 + *(int *)(v106 + 48), &qword_DA130);
    sub_A35C(v102, &qword_DA130);
    return sub_A35C(v103, &qword_DA130);
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_64D14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v103 = (char *)a2;
  uint64_t v112 = a3;
  uint64_t v4 = type metadata accessor for LiveSpeechHUDView_iOS(0);
  uint64_t v104 = *(char **)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v105 = v5;
  uint64_t v106 = (char *)&v85 - ((unint64_t)(v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for LiveSpeechCaptionsPipView();
  __chkstk_darwin(v110);
  uint64_t v107 = (uint64_t)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = sub_7AF4(&qword_DA1D8);
  __chkstk_darwin(v111);
  uint64_t v109 = (uint64_t)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_7AF4(&qword_DA1E0);
  __chkstk_darwin(v95);
  uint64_t v96 = (uint64_t)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_7AF4(&qword_DA1E8);
  __chkstk_darwin(v97);
  uint64_t v102 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_7AF4(&qword_DA1F0);
  __chkstk_darwin(v98);
  uint64_t v99 = (uint64_t)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = sub_7AF4(&qword_D9AF0);
  __chkstk_darwin(v101);
  uint64_t v93 = (uint64_t)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_7AF4(&qword_D9AF8);
  __chkstk_darwin(v92);
  uint64_t v87 = (uint64_t)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v88 = (uint64_t)&v85 - v14;
  uint64_t v90 = sub_7AF4(&qword_DA1F8);
  __chkstk_darwin(v90);
  uint64_t v91 = (uint64_t)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_7AF4(&qword_D9AE0);
  __chkstk_darwin(v94);
  uint64_t v100 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = sub_7AF4(&qword_D9AE8);
  __chkstk_darwin(v89);
  uint64_t v18 = (char *)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  id v21 = (char *)&v85 - v20;
  uint64_t v22 = sub_7AF4(&qword_DA200);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v85 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_7AF4(&qword_D8598);
  __chkstk_darwin(v25 - 8);
  uint64_t v27 = (char *)&v85 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v30 = (char *)&v85 - v29;
  uint64_t v108 = sub_7AF4(&qword_DA208);
  __chkstk_darwin(v108);
  uint64_t v32 = (char *)&v85 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = v4;
  uint64_t v34 = *(int *)(v4 + 36);
  uint64_t v35 = a1;
  uint64_t v36 = (char *)(a1 + v34);
  char v37 = *v36;
  uint64_t v38 = *((void *)v36 + 1);
  LOBYTE(v115) = v37;
  uint64_t v116 = v38;
  sub_7AF4(&qword_D9E80);
  sub_A6E80();
  if ((_BYTE)v113)
  {
    sub_A6290();
    sub_A6290();
    sub_A62A0();
    uint64_t v39 = sub_A62A0();
    double v40 = LiveSpeechStore.SpeechContext.init(text:highlightRange:)(v39);
    double v42 = v41;
    double v44 = v43;
    double v46 = v45;
    uint64_t v47 = (uint64_t *)(a1 + *(int *)(v33 + 40));
    uint64_t v48 = *v47;
    uint64_t v49 = v47[1];
    *(void *)&long long v113 = v48;
    *((void *)&v113 + 1) = v49;
    sub_7AF4(&qword_D8808);
    sub_A6EA0();
    uint64_t v50 = v115;
    uint64_t v51 = v116;
    double v52 = v117;
    uint64_t v53 = a1 + *(int *)(v33 + 44);
    uint64_t v54 = *(void *)(v53 + 16);
    long long v113 = *(_OWORD *)v53;
    uint64_t v114 = v54;
    sub_7AF4(&qword_D8178);
    sub_A6EA0();
    uint64_t v55 = v115;
    uint64_t v56 = v116;
    double v57 = v117;
    double v58 = v118;
    uint64_t v59 = v35;
    uint64_t v60 = (uint64_t)v106;
    sub_759CC(v59, (uint64_t)v106, type metadata accessor for LiveSpeechHUDView_iOS);
    unint64_t v61 = (v104[80] + 16) & ~(unint64_t)v104[80];
    uint64_t v62 = swift_allocObject();
    sub_75BDC(v60, v62 + v61, type metadata accessor for LiveSpeechHUDView_iOS);
    uint64_t v63 = v107;
    sub_E204(0, v50, v51, v55, v56, (uint64_t)sub_76BD8, v62, (uint64_t)LiveSpeechStore.SpeechContext.init(text:highlightRange:), v107, v52, v57, v58, v40, v42, v44, v46, 0);
    sub_759CC(v63, v109, (uint64_t (*)(void))type metadata accessor for LiveSpeechCaptionsPipView);
    swift_storeEnumTagMultiPayload();
    sub_76E94(&qword_DA210, &qword_DA208, (void (*)(void))sub_76BF0, (void (*)(void))sub_76E58);
    sub_75D80(&qword_D89B8, (void (*)(uint64_t))type metadata accessor for LiveSpeechCaptionsPipView);
    sub_A6860();
    return sub_76184(v63, (uint64_t (*)(void))type metadata accessor for LiveSpeechCaptionsPipView);
  }
  uint64_t v103 = v18;
  uint64_t v104 = v21;
  uint64_t v65 = (uint64_t)v100;
  uint64_t v105 = v24;
  uint64_t v107 = v22;
  uint64_t v106 = v32;
  sub_537C8((uint64_t)v30);
  uint64_t v66 = sub_A6920();
  uint64_t v67 = *(void *)(v66 - 8);
  int v68 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 48))(v30, 1, v66);
  uint64_t v69 = (uint64_t)v102;
  uint64_t v86 = v30;
  if (v68 == 1) {
    goto LABEL_8;
  }
  sub_8860((uint64_t)v30, (uint64_t)v27, &qword_D8598);
  if ((*(unsigned int (**)(char *, uint64_t))(v67 + 88))(v27, v66) != enum case for UserInterfaceSizeClass.regular(_:))
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v27, v66);
LABEL_8:
    if (AXDeviceSupportsLiveSpeechCategory())
    {
      *(void *)uint64_t v65 = sub_A6750();
      *(void *)(v65 + 8) = 0x4028000000000000;
      *(unsigned char *)(v65 + 16) = 0;
      uint64_t v76 = sub_7AF4(&qword_DA288);
      sub_6A634(v35, v65 + *(int *)(v76 + 44));
      id v77 = &qword_D9AE0;
      sub_8860(v65, v96, &qword_D9AE0);
    }
    else
    {
      uint64_t v65 = v93;
      sub_66514(v35, v93);
      id v77 = &qword_D9AF0;
      sub_8860(v65, v96, &qword_D9AF0);
    }
    swift_storeEnumTagMultiPayload();
    sub_76C5C();
    sub_76D24();
    sub_A6860();
    sub_A35C(v65, v77);
    uint64_t v78 = v109;
    uint64_t v79 = (uint64_t)v106;
    sub_8860(v69, v99, &qword_DA1E8);
    swift_storeEnumTagMultiPayload();
    sub_76BF0();
    sub_76E58();
    sub_A6860();
    sub_A35C(v69, &qword_DA1E8);
    goto LABEL_14;
  }
  if (AXDeviceSupportsLiveSpeechCategory())
  {
    *(void *)uint64_t v65 = sub_A6750();
    *(void *)(v65 + 8) = 0x4028000000000000;
    *(unsigned char *)(v65 + 16) = 0;
    uint64_t v70 = sub_7AF4(&qword_DA288);
    sub_6A634(v35, v65 + *(int *)(v70 + 44));
    uint64_t v71 = sub_A7030();
    uint64_t v72 = (uint64_t)v103;
    sub_551E8(0.0, 1, 0.0, 1, 700.0, 0, 0.0, 1, (uint64_t)v103, 0.0, 1, 0.0, 1, v71, v73);
    sub_A35C(v65, &qword_D9AE0);
    uint64_t v74 = &qword_D9AE8;
    uint64_t v75 = (uint64_t)v104;
    sub_29C10(v72, (uint64_t)v104, &qword_D9AE8);
    sub_8860(v75, v91, &qword_D9AE8);
  }
  else
  {
    uint64_t v80 = v93;
    sub_66514(v35, v93);
    uint64_t v81 = sub_A7030();
    uint64_t v82 = v87;
    sub_55414(0.0, 1, 0.0, 1, 700.0, 0, 0.0, 1, v87, 0.0, 1, 0.0, 1, v81, v83);
    sub_A35C(v80, &qword_D9AF0);
    uint64_t v74 = &qword_D9AF8;
    uint64_t v75 = v88;
    sub_29C10(v82, v88, &qword_D9AF8);
    sub_8860(v75, v91, &qword_D9AF8);
  }
  swift_storeEnumTagMultiPayload();
  sub_76C2C();
  sub_76CF4();
  uint64_t v84 = (uint64_t)v105;
  sub_A6860();
  sub_A35C(v75, v74);
  uint64_t v78 = v109;
  uint64_t v79 = (uint64_t)v106;
  sub_8860(v84, v99, &qword_DA200);
  swift_storeEnumTagMultiPayload();
  sub_76BF0();
  sub_76E58();
  sub_A6860();
  sub_A35C(v84, &qword_DA200);
LABEL_14:
  sub_A35C((uint64_t)v86, &qword_D8598);
  sub_8860(v79, v78, &qword_DA208);
  swift_storeEnumTagMultiPayload();
  sub_76E94(&qword_DA210, &qword_DA208, (void (*)(void))sub_76BF0, (void (*)(void))sub_76E58);
  sub_75D80(&qword_D89B8, (void (*)(uint64_t))type metadata accessor for LiveSpeechCaptionsPipView);
  sub_A6860();
  return sub_A35C(v79, &qword_DA208);
}

uint64_t sub_65B94()
{
  return swift_release();
}

void sub_65C00()
{
  if (qword_D7D68 != -1) {
    swift_once();
  }
  sub_A6E80();
  LiveSpeechCaptionsViewsCoordinator.updateLiveSpeechWindowState(_:)(LiveSpeechUIService_LiveSpeechCaptionsWindowState_compact);
}

uint64_t sub_65CE4@<X0>(char *a1@<X8>, double a2@<D0>)
{
  uint64_t v5 = sub_A66E0();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for LiveSpeechHUDView_iOS(0);
  uint64_t v10 = (char *)(v2 + *(int *)(v9 + 36));
  char v11 = *v10;
  uint64_t v12 = *((void *)v10 + 1);
  LOBYTE(v21) = v11;
  *((void *)&v21 + 1) = v12;
  sub_7AF4(&qword_D9E80);
  sub_A6E80();
  if (LOBYTE(v23) == 1)
  {
    uint64_t v13 = (long long *)(v2 + *(int *)(v9 + 44));
    uint64_t v14 = *((void *)v13 + 2);
    long long v21 = *v13;
    uint64_t v22 = v14;
    sub_7AF4(&qword_D8178);
    sub_A6E80();
    if (v23 > a2 * 0.5)
    {
      if (qword_D7D58 == -1) {
        goto LABEL_6;
      }
      goto LABEL_7;
    }
    if (qword_D7D58 != -1) {
LABEL_7:
    }
      swift_once();
  }
LABEL_6:
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for RoundedCornerStyle.continuous(_:), v5);
  uint64_t v15 = sub_A6910();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(&a1[*(int *)(v15 + 20)], v8, v5);
  sub_A6890();
  *(void *)a1 = v16;
  *((void *)a1 + 1) = v17;
  *((void *)a1 + 2) = v18;
  *((void *)a1 + 3) = v19;
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_65F40(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  sub_A7330();
  *(void *)(v1 + 32) = sub_A7320();
  uint64_t v3 = sub_A7300();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_65FD8, v3, v2);
}

uint64_t sub_65FD8()
{
  uint64_t v1 = v0[3];
  swift_release();
  uint64_t v2 = *(void **)(v1 + 24);
  if (!v2) {
    goto LABEL_6;
  }
  uint64_t v3 = self;
  id v4 = v2;
  id v5 = [v3 categories];
  sub_A7510();
  uint64_t v6 = sub_A72B0();

  swift_getKeyPath();
  swift_getKeyPath();
  v0[2] = v6;
  sub_A60E0();
  uint64_t v7 = *(void **)(v1 + 24);
  if (v7)
  {
    id v8 = v7;
    LiveSpeechStore.sortCategories()();

    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  else
  {
LABEL_6:
    type metadata accessor for LiveSpeechStore(0);
    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    return sub_A64B0();
  }
}

uint64_t sub_6615C(uint64_t a1)
{
  uint64_t v2 = sub_A5F80();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v8 = (char *)&v28 - v7;
  uint64_t v9 = *(void **)(a1 + 24);
  if (v9)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v10 = v9;
    sub_A60D0();

    swift_release();
    swift_release();
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for LiveSpeechInputMode.keyboard(_:), v2);
    sub_75D80(&qword_D9DC0, (void (*)(uint64_t))&type metadata accessor for LiveSpeechInputMode);
    sub_A7280();
    sub_A7280();
    if (v29 == *(void *)&v32.width && v30 == *(void *)&v32.height) {
      char v11 = 1;
    }
    else {
      char v11 = sub_A7800();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void (**)(char *, uint64_t))(v3 + 8);
    v12(v5, v2);
    v12(v8, v2);
    uint64_t v13 = *(void *)(a1 + 8);
    char v14 = *(unsigned char *)(a1 + 16);
    LOBYTE(v29) = *(unsigned char *)a1;
    uint64_t v30 = v13;
    LOBYTE(v31) = v14;
    LOBYTE(v32.width) = v11 & 1;
    sub_7AF4(&qword_D9BF0);
    sub_A6150();
    CGFloat height = CGSizeZero.height;
    uint64_t v16 = (uint64_t *)(a1 + *(int *)(type metadata accessor for LiveSpeechHUDView_iOS(0) + 44));
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = v16[2];
    uint64_t v29 = *v16;
    uint64_t v30 = v18;
    uint64_t v31 = v19;
    sub_7AF4(&qword_D8178);
    sub_A6E80();
    v33.double width = CGSizeZero.width;
    v33.CGFloat height = height;
    uint64_t result = CGSizeEqualToSize(v33, v32);
    if (result)
    {
      sub_A62A0();
      double v22 = v21;
      if (qword_D7D50 != -1) {
        swift_once();
      }
      double v23 = *(double *)&qword_DF548;
      double v24 = v22 - *(double *)&qword_DF548;
      sub_A62A0();
      double v26 = v25 - v23;
      double v27 = 0.0;
      if (v24 >= 0.0) {
        double v27 = v24;
      }
      uint64_t v29 = v17;
      uint64_t v30 = v18;
      uint64_t v31 = v19;
      v32.double width = 0.0;
      if (v26 >= v24) {
        double v26 = v27;
      }
      v32.CGFloat height = v26;
      return sub_A6E90();
    }
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_66514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v24[1] = a2;
  v24[0] = sub_7AF4(&qword_DA278);
  __chkstk_darwin(v24[0]);
  uint64_t v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_7AF4(&qword_DA458);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_7AF4(&qword_DA268);
  __chkstk_darwin(v8);
  id v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_7AF4(&qword_D8598);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v24 - v15;
  type metadata accessor for LiveSpeechHUDView_iOS(0);
  sub_537C8((uint64_t)v16);
  uint64_t v17 = sub_A6920();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1) {
    goto LABEL_5;
  }
  sub_8860((uint64_t)v16, (uint64_t)v13, &qword_D8598);
  if ((*(unsigned int (**)(char *, uint64_t))(v18 + 88))(v13, v17) != enum case for UserInterfaceSizeClass.regular(_:))
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v13, v17);
LABEL_5:
    *(void *)uint64_t v4 = sub_A6750();
    *((void *)v4 + 1) = 0x4028000000000000;
    v4[16] = 0;
    uint64_t v22 = sub_7AF4(&qword_DA460);
    sub_6787C(a1, (uint64_t)&v4[*(int *)(v22 + 44)]);
    uint64_t v20 = &qword_DA278;
    sub_8860((uint64_t)v4, (uint64_t)v7, &qword_DA278);
    swift_storeEnumTagMultiPayload();
    sub_A45C(&qword_DA260, &qword_DA268);
    sub_A45C(&qword_DA270, &qword_DA278);
    sub_A6860();
    uint64_t v21 = (uint64_t)v4;
    goto LABEL_6;
  }
  *(void *)id v10 = sub_A6750();
  *((void *)v10 + 1) = 0x4028000000000000;
  v10[16] = 0;
  uint64_t v19 = sub_7AF4(&qword_DA468);
  sub_66910(a1, (uint64_t)&v10[*(int *)(v19 + 44)]);
  uint64_t v20 = &qword_DA268;
  sub_8860((uint64_t)v10, (uint64_t)v7, &qword_DA268);
  swift_storeEnumTagMultiPayload();
  sub_A45C(&qword_DA260, &qword_DA268);
  sub_A45C(&qword_DA270, &qword_DA278);
  sub_A6860();
  uint64_t v21 = (uint64_t)v10;
LABEL_6:
  sub_A35C(v21, v20);
  return sub_A35C((uint64_t)v16, &qword_D8598);
}

uint64_t sub_66910@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v48 = a2;
  uint64_t v44 = sub_7AF4(&qword_DA470);
  __chkstk_darwin(v44);
  uint64_t v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_7AF4(&qword_DA478);
  __chkstk_darwin(v46);
  uint64_t v47 = (uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_7AF4(&qword_DA480);
  __chkstk_darwin(v41);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_7AF4(&qword_DA488);
  __chkstk_darwin(v42);
  uint64_t v40 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_7AF4(&qword_DA490);
  __chkstk_darwin(v45);
  double v43 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_7AF4(&qword_DA498);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v39 = (uint64_t *)((char *)&v38 - v14);
  uint64_t v15 = sub_A5F80();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void **)(a1 + 24);
  if (v19)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v20 = v19;
    sub_A60D0();

    swift_release();
    swift_release();
    int v21 = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v18, v15);
    if (v21 == enum case for LiveSpeechInputMode.keyboard(_:))
    {
      *(void *)uint64_t v4 = sub_A6680();
      *((void *)v4 + 1) = 0;
      v4[16] = 1;
      uint64_t v22 = sub_7AF4(&qword_DA4B8);
      sub_67250(a1, (uint64_t)&v4[*(int *)(v22 + 44)]);
      sub_8860((uint64_t)v4, (uint64_t)v7, &qword_DA470);
      swift_storeEnumTagMultiPayload();
      sub_A45C(&qword_DA4A8, &qword_DA488);
      sub_A45C(&qword_DA4B0, &qword_DA470);
      uint64_t v23 = (uint64_t)v43;
      sub_A6860();
      sub_8860(v23, v47, &qword_DA490);
      swift_storeEnumTagMultiPayload();
      sub_77C14();
      sub_A6860();
      sub_A35C(v23, &qword_DA490);
      return sub_A35C((uint64_t)v4, &qword_DA470);
    }
    else if (v21 == enum case for LiveSpeechInputMode.favoritePhrases(_:))
    {
      uint64_t v25 = sub_A6670();
      uint64_t v26 = (uint64_t)v39;
      *uint64_t v39 = v25;
      *(void *)(v26 + 8) = 0;
      *(unsigned char *)(v26 + 16) = 1;
      uint64_t v27 = sub_7AF4(&qword_DA4C0);
      sub_67094(a1, v26 + *(int *)(v27 + 44));
      type metadata accessor for LiveSpeechStore(0);
      sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
      uint64_t v28 = (void *)sub_A64C0();
      uint64_t v30 = v29;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      sub_7AF4(&qword_D97F8);
      sub_A6E70();
      uint64_t v32 = v51;
      uint64_t v31 = v52;
      uint64_t v33 = v53;
      sub_8860(v26, (uint64_t)v12, &qword_DA498);
      uint64_t v34 = v40;
      sub_8860((uint64_t)v12, v40, &qword_DA498);
      uint64_t v35 = (void *)(v34 + *(int *)(sub_7AF4(&qword_DA4C8) + 48));
      *uint64_t v35 = v28;
      v35[1] = v30;
      void v35[2] = v32;
      v35[3] = v31;
      void v35[4] = v33;
      id v36 = v28;
      swift_bridgeObjectRetain();
      swift_retain();
      sub_A35C((uint64_t)v12, &qword_DA498);
      sub_8860(v34, (uint64_t)v7, &qword_DA488);
      swift_storeEnumTagMultiPayload();
      sub_A45C(&qword_DA4A8, &qword_DA488);
      sub_A45C(&qword_DA4B0, &qword_DA470);
      uint64_t v37 = (uint64_t)v43;
      sub_A6860();
      sub_A35C(v34, &qword_DA488);
      sub_8860(v37, v47, &qword_DA490);
      swift_storeEnumTagMultiPayload();
      sub_77C14();
      sub_A6860();
      sub_A35C(v37, &qword_DA490);
      swift_release();
      swift_bridgeObjectRelease();

      return sub_A35C(v26, &qword_DA498);
    }
    else
    {
      swift_storeEnumTagMultiPayload();
      sub_77C14();
      sub_A6860();
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    }
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_67094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_7AF4(&qword_DA4D0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_7AF4(&qword_DA4D8);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v17 - v12;
  *(void *)uint64_t v6 = sub_A66A0();
  *((void *)v6 + 1) = 0x4028000000000000;
  v6[16] = 0;
  uint64_t v14 = sub_7AF4(&qword_DA4E0);
  sub_6D544(a1, 1, (uint64_t)&v6[*(int *)(v14 + 44)]);
  sub_8860((uint64_t)v6, (uint64_t)v10, &qword_DA4D0);
  *(_WORD *)&v10[*(int *)(v8 + 44)] = 1;
  sub_A35C((uint64_t)v6, &qword_DA4D0);
  sub_29C10((uint64_t)v10, (uint64_t)v13, &qword_DA4D8);
  sub_8860((uint64_t)v13, (uint64_t)v10, &qword_DA4D8);
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  uint64_t v15 = sub_7AF4(&qword_DA4E8);
  sub_8860((uint64_t)v10, a2 + *(int *)(v15 + 48), &qword_DA4D8);
  sub_A35C((uint64_t)v13, &qword_DA4D8);
  return sub_A35C((uint64_t)v10, &qword_DA4D8);
}

uint64_t sub_67250@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v3 = sub_7AF4(&qword_DA4D0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_7AF4(&qword_DA4D8);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v23 - v11;
  uint64_t v13 = sub_7AF4(&qword_DA3C8);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v23 - v17;
  sub_674BC((uint64_t)&v23 - v17);
  *(void *)uint64_t v5 = sub_A66A0();
  *((void *)v5 + 1) = 0x4028000000000000;
  v5[16] = 0;
  uint64_t v19 = sub_7AF4(&qword_DA4E0);
  sub_6D544(a1, 1, (uint64_t)&v5[*(int *)(v19 + 44)]);
  sub_8860((uint64_t)v5, (uint64_t)v9, &qword_DA4D0);
  *(_WORD *)&v9[*(int *)(v7 + 44)] = 1;
  sub_A35C((uint64_t)v5, &qword_DA4D0);
  sub_29C10((uint64_t)v9, (uint64_t)v12, &qword_DA4D8);
  sub_8860((uint64_t)v18, (uint64_t)v15, &qword_DA3C8);
  sub_8860((uint64_t)v12, (uint64_t)v9, &qword_DA4D8);
  uint64_t v20 = v24;
  sub_8860((uint64_t)v15, v24, &qword_DA3C8);
  uint64_t v21 = sub_7AF4(&qword_DA500);
  sub_8860((uint64_t)v9, v20 + *(int *)(v21 + 48), &qword_DA4D8);
  sub_A35C((uint64_t)v12, &qword_DA4D8);
  sub_A35C((uint64_t)v18, &qword_DA3C8);
  sub_A35C((uint64_t)v9, &qword_DA4D8);
  return sub_A35C((uint64_t)v15, &qword_DA3C8);
}

uint64_t sub_674BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v2 = type metadata accessor for LiveSpeechHUDView_iOS(0);
  uint64_t v28 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v29 = v3;
  uint64_t v30 = (uint64_t)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_7AF4(&qword_D9B18);
  uint64_t v31 = *(void *)(v4 - 8);
  uint64_t v32 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_7AF4(&qword_DA3C8);
  __chkstk_darwin(v26);
  uint64_t v27 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LiveSpeechStore(0);
  sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
  uint64_t v8 = (void *)sub_A64C0();
  uint64_t v10 = v9;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v12 = *(void **)(v1 + 24);
  if (v12)
  {
    uint64_t v13 = KeyPath;
    id v25 = v12;
    uint64_t v14 = sub_A6060();
    uint64_t v37 = v8;
    uint64_t v38 = v10;
    uint64_t v39 = v13;
    __int16 v40 = 0;
    uint64_t v41 = v14;
    uint64_t v42 = v12;
    uint64_t v15 = *(void *)(v1 + 8);
    char v16 = *(unsigned char *)(v1 + 16);
    char v34 = *(unsigned char *)v1;
    uint64_t v35 = v15;
    char v36 = v16;
    sub_7AF4(&qword_D9BF0);
    sub_A6160();
    sub_7AF4(&qword_D98E8);
    sub_57578();
    sub_A6CC0();

    swift_release();
    swift_release();
    swift_release();
    swift_release();

    uint64_t v17 = v30;
    sub_759CC(v1, v30, type metadata accessor for LiveSpeechHUDView_iOS);
    unint64_t v18 = (*(unsigned __int8 *)(v28 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    uint64_t v19 = swift_allocObject();
    sub_75BDC(v17, v19 + v18, type metadata accessor for LiveSpeechHUDView_iOS);
    uint64_t v21 = v31;
    uint64_t v20 = v32;
    uint64_t v22 = (uint64_t)v27;
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v27, v6, v32);
    uint64_t v23 = (uint64_t (**)())(v22 + *(int *)(v26 + 36));
    void *v23 = sub_77724;
    v23[1] = (uint64_t (*)())v19;
    v23[2] = 0;
    v23[3] = 0;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v20);
    return sub_29C10(v22, v33, &qword_DA3C8);
  }
  else
  {
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_6787C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v75 = a2;
  uint64_t v3 = sub_7AF4(&qword_DA290);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (uint64_t *)((char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v66 = sub_7AF4(&qword_DA298);
  __chkstk_darwin(v66);
  uint64_t v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v64 = (uint64_t)&v64 - v9;
  uint64_t v69 = sub_7AF4(&qword_DA508);
  __chkstk_darwin(v69);
  uint64_t v71 = (uint64_t)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_7AF4(&qword_DA510);
  __chkstk_darwin(v65);
  uint64_t v12 = (uint64_t *)((char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v70 = sub_7AF4(&qword_DA518);
  __chkstk_darwin(v70);
  uint64_t v67 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_A5F80();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_7AF4(&qword_DA520);
  __chkstk_darwin(v18 - 8);
  uint64_t v74 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v73 = (char *)&v64 - v21;
  uint64_t v22 = sub_7AF4(&qword_DA528);
  __chkstk_darwin(v22 - 8);
  uint64_t v72 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v64 - v25;
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v64 - v28;
  *(void *)uint64_t v26 = sub_A66A0();
  *((void *)v26 + 1) = 0x4028000000000000;
  v26[16] = 0;
  uint64_t v30 = sub_7AF4(&qword_DA530);
  sub_681DC(a1, (uint64_t)&v26[*(int *)(v30 + 44)]);
  int v68 = v29;
  sub_29C10((uint64_t)v26, (uint64_t)v29, &qword_DA528);
  uint64_t v31 = *(void **)(a1 + 24);
  if (v31)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v32 = v31;
    sub_A60D0();

    swift_release();
    swift_release();
    int v33 = (*(uint64_t (**)(char *, uint64_t))(v15 + 88))(v17, v14);
    if (v33 == enum case for LiveSpeechInputMode.keyboard(_:))
    {
      sub_6CFF0(a1, v5);
      unsigned __int8 v34 = sub_A6A40();
      unsigned __int8 v35 = sub_A6A60();
      char v36 = sub_A6A50();
      sub_A6A50();
      if (sub_A6A50() != v34) {
        char v36 = sub_A6A50();
      }
      sub_A6A50();
      if (sub_A6A50() != v35) {
        char v36 = sub_A6A50();
      }
      uint64_t v38 = (uint64_t)v74;
      uint64_t v37 = v75;
      uint64_t v40 = v71;
      uint64_t v39 = (uint64_t)v72;
      sub_A6140();
      uint64_t v42 = v41;
      uint64_t v44 = v43;
      uint64_t v46 = v45;
      uint64_t v48 = v47;
      sub_8860((uint64_t)v5, (uint64_t)v7, &qword_DA290);
      uint64_t v49 = &v7[*(int *)(v66 + 36)];
      *uint64_t v49 = v36;
      *((void *)v49 + 1) = v42;
      *((void *)v49 + 2) = v44;
      *((void *)v49 + 3) = v46;
      *((void *)v49 + 4) = v48;
      v49[40] = 0;
      sub_A35C((uint64_t)v5, &qword_DA290);
      uint64_t v50 = v64;
      sub_29C10((uint64_t)v7, v64, &qword_DA298);
      sub_8860(v50, (uint64_t)v12, &qword_DA298);
      swift_storeEnumTagMultiPayload();
      sub_77CD8();
      sub_77D2C();
      uint64_t v51 = (uint64_t)v67;
      sub_A6860();
      sub_8860(v51, v40, &qword_DA518);
      swift_storeEnumTagMultiPayload();
      sub_76E94(&qword_DA538, &qword_DA518, (void (*)(void))sub_77CD8, (void (*)(void))sub_77D2C);
      uint64_t v52 = (uint64_t)v73;
      sub_A6860();
      sub_A35C(v51, &qword_DA518);
      sub_A35C(v50, &qword_DA298);
    }
    else
    {
      if (v33 == enum case for LiveSpeechInputMode.favoritePhrases(_:))
      {
        type metadata accessor for LiveSpeechStore(0);
        sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
        uint64_t v53 = (void *)sub_A64C0();
        uint64_t v55 = v54;
        uint64_t v76 = 0;
        uint64_t v77 = 0;
        sub_7AF4(&qword_D97F8);
        sub_A6E70();
        uint64_t v56 = v78;
        uint64_t v57 = v79;
        uint64_t v58 = v80;
        *uint64_t v12 = v53;
        v12[1] = v55;
        v12[2] = v56;
        uint64_t v12[3] = v57;
        void v12[4] = v58;
        swift_storeEnumTagMultiPayload();
        sub_77CD8();
        sub_77D2C();
        id v59 = v53;
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v60 = (uint64_t)v67;
        sub_A6860();
        sub_8860(v60, v71, &qword_DA518);
        swift_storeEnumTagMultiPayload();
        sub_76E94(&qword_DA538, &qword_DA518, (void (*)(void))sub_77CD8, (void (*)(void))sub_77D2C);
        uint64_t v52 = (uint64_t)v73;
        sub_A6860();
        sub_A35C(v60, &qword_DA518);
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_storeEnumTagMultiPayload();
        sub_76E94(&qword_DA538, &qword_DA518, (void (*)(void))sub_77CD8, (void (*)(void))sub_77D2C);
        uint64_t v52 = (uint64_t)v73;
        sub_A6860();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      }
      uint64_t v38 = (uint64_t)v74;
      uint64_t v37 = v75;
      uint64_t v39 = (uint64_t)v72;
    }
    uint64_t v61 = (uint64_t)v68;
    sub_8860((uint64_t)v68, v39, &qword_DA528);
    sub_8860(v52, v38, &qword_DA520);
    sub_8860(v39, v37, &qword_DA528);
    uint64_t v62 = sub_7AF4(&qword_DA568);
    sub_8860(v38, v37 + *(int *)(v62 + 48), &qword_DA520);
    sub_A35C(v52, &qword_DA520);
    sub_A35C(v61, &qword_DA528);
    sub_A35C(v38, &qword_DA520);
    return sub_A35C(v39, &qword_DA528);
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_681DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v75 = a2;
  uint64_t v72 = sub_7AF4(&qword_D9BF8);
  __chkstk_darwin(v72);
  uint64_t v63 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_7AF4(&qword_DA3D8);
  __chkstk_darwin(v4 - 8);
  uint64_t v64 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for LiveSpeechHUDView_iOS(0);
  __chkstk_darwin(v6 - 8);
  uint64_t v65 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_7AF4(&qword_DA3E0);
  __chkstk_darwin(v68);
  uint64_t v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_7AF4(&qword_DA3E8);
  __chkstk_darwin(v69);
  uint64_t v71 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_7AF4(&qword_DA3F0);
  __chkstk_darwin(v67);
  uint64_t v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_7AF4(&qword_DA3F8);
  __chkstk_darwin(v70);
  uint64_t v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_7AF4(&qword_DA400);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v74 = (char *)&v63 - v19;
  uint64_t v66 = type metadata accessor for HUDButton(0);
  __chkstk_darwin(v66);
  uint64_t v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v76 = (uint64_t)&v63 - v23;
  __chkstk_darwin(v24);
  uint64_t v77 = (uint64_t *)((char *)&v63 - v25);
  __chkstk_darwin(v26);
  uint64_t v28 = (uint64_t *)((char *)&v63 - v27);
  __chkstk_darwin(v29);
  uint64_t v73 = (uint64_t)&v63 - v30;
  sub_69018(1, (uint64_t)&v63 - v30);
  uint64_t v31 = *(void **)(a1 + 24);
  if (!v31)
  {
    while (1)
    {
LABEL_23:
      type metadata accessor for LiveSpeechStore(0);
      sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
      sub_A64B0();
      __break(1u);
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  id v32 = v31;
  sub_A60D0();

  swift_release();
  swift_release();
  switch(v80)
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    default:
      char v33 = sub_A7800();
      swift_bridgeObjectRelease();
      if (v33)
      {
LABEL_5:
        sub_69C78((uint64_t (*)(__n128))&static Color.red.getter, (uint64_t)sub_778FC, v28, (__n128)xmmword_AB4C0);
        sub_759CC((uint64_t)v28, (uint64_t)v12, type metadata accessor for HUDButton);
        swift_storeEnumTagMultiPayload();
        sub_75D80(&qword_D9C00, (void (*)(uint64_t))type metadata accessor for HUDButton);
        sub_A45C(&qword_DA428, &qword_DA3E0);
        sub_A6860();
        sub_8860((uint64_t)v14, v71, &qword_DA3F8);
        swift_storeEnumTagMultiPayload();
        sub_77744();
        sub_77814();
        sub_A6860();
        sub_A35C((uint64_t)v14, &qword_DA3F8);
        uint64_t v34 = (uint64_t)v28;
        goto LABEL_14;
      }
      unsigned __int8 v35 = *(void **)(a1 + 24);
      if (!v35) {
        goto LABEL_23;
      }
      swift_getKeyPath();
      swift_getKeyPath();
      id v36 = v35;
      sub_A60D0();

      swift_release();
      swift_release();
      switch(v79)
      {
        case 3:
          swift_bridgeObjectRelease();
          goto LABEL_13;
        default:
          char v37 = sub_A7800();
          swift_bridgeObjectRelease();
          if (v37)
          {
LABEL_13:
            sub_697F8((uint64_t)v28);
            uint64_t v42 = v77;
            sub_69C78((uint64_t (*)(__n128))&static Color.blue.getter, (uint64_t)sub_77A4C, v77, (__n128)xmmword_AB4B0);
            uint64_t v43 = v76;
            sub_759CC((uint64_t)v28, v76, type metadata accessor for HUDButton);
            sub_759CC((uint64_t)v42, (uint64_t)v21, type metadata accessor for HUDButton);
            sub_759CC(v43, (uint64_t)v9, type metadata accessor for HUDButton);
            uint64_t v44 = sub_7AF4(&qword_DA438);
            sub_759CC((uint64_t)v21, (uint64_t)&v9[*(int *)(v44 + 48)], type metadata accessor for HUDButton);
            sub_76184((uint64_t)v21, type metadata accessor for HUDButton);
            sub_76184(v43, type metadata accessor for HUDButton);
            sub_8860((uint64_t)v9, (uint64_t)v12, &qword_DA3E0);
            swift_storeEnumTagMultiPayload();
            sub_75D80(&qword_D9C00, (void (*)(uint64_t))type metadata accessor for HUDButton);
            sub_A45C(&qword_DA428, &qword_DA3E0);
            sub_A6860();
            sub_A35C((uint64_t)v9, &qword_DA3E0);
            sub_8860((uint64_t)v14, v71, &qword_DA3F8);
            swift_storeEnumTagMultiPayload();
            sub_77744();
            sub_77814();
            sub_A6860();
            sub_A35C((uint64_t)v14, &qword_DA3F8);
            sub_76184((uint64_t)v77, type metadata accessor for HUDButton);
            uint64_t v34 = (uint64_t)v28;
LABEL_14:
            sub_76184(v34, type metadata accessor for HUDButton);
            uint64_t v45 = sub_7AF4(&qword_DA410);
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v17, 0, 1, v45);
            uint64_t v46 = (uint64_t)v17;
            uint64_t v40 = (uint64_t)v74;
LABEL_15:
            sub_29C10(v46, v40, &qword_DA400);
            goto LABEL_16;
          }
          uint64_t v38 = *(void **)(a1 + 24);
          if (!v38) {
            goto LABEL_23;
          }
          swift_getKeyPath();
          swift_getKeyPath();
          id v39 = v38;
          sub_A60D0();

          swift_release();
          swift_release();
          uint64_t v40 = (uint64_t)v74;
          uint64_t v41 = (uint64_t)v65;
          switch(v78)
          {
            case 1:
            case 2:
            case 3:
              char v54 = sub_A7800();
              swift_bridgeObjectRelease();
              sub_759CC(a1, v41, type metadata accessor for LiveSpeechHUDView_iOS);
              if (v54) {
                goto LABEL_18;
              }
              sub_76184(v41, type metadata accessor for LiveSpeechHUDView_iOS);
              goto LABEL_22;
            default:
              swift_bridgeObjectRelease();
              sub_759CC(a1, v41, type metadata accessor for LiveSpeechHUDView_iOS);
LABEL_18:
              uint64_t v55 = *(void **)(v41 + 24);
              if (!v55) {
                goto LABEL_23;
              }
              swift_getKeyPath();
              swift_getKeyPath();
              id v56 = v55;
              uint64_t v57 = (uint64_t)v64;
              sub_A60D0();

              swift_release();
              swift_release();
              uint64_t SpokenContext = type metadata accessor for LiveSpeechStore.LastSpokenContext(0);
              int v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(SpokenContext - 8) + 48))(v57, 1, SpokenContext);
              sub_A35C(v57, &qword_DA3D8);
              sub_76184(v41, type metadata accessor for LiveSpeechHUDView_iOS);
              if (v59 != 1)
              {
                uint64_t v60 = (uint64_t)v63;
                sub_69F40();
                sub_8860(v60, v71, &qword_D9BF8);
                swift_storeEnumTagMultiPayload();
                sub_77744();
                sub_77814();
                sub_A6860();
                sub_A35C(v60, &qword_D9BF8);
                uint64_t v61 = sub_7AF4(&qword_DA410);
                (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v17, 0, 1, v61);
                uint64_t v46 = (uint64_t)v17;
                goto LABEL_15;
              }
LABEL_22:
              uint64_t v62 = sub_7AF4(&qword_DA410);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v40, 1, 1, v62);
              break;
          }
LABEL_16:
          sub_6A354(v28);
          uint64_t v47 = v73;
          uint64_t v48 = v77;
          sub_759CC(v73, (uint64_t)v77, type metadata accessor for HUDButton);
          sub_8860(v40, (uint64_t)v17, &qword_DA400);
          uint64_t v49 = v76;
          sub_759CC((uint64_t)v28, v76, type metadata accessor for HUDButton);
          uint64_t v50 = v75;
          sub_759CC((uint64_t)v48, v75, type metadata accessor for HUDButton);
          uint64_t v51 = (int *)sub_7AF4(&qword_DA570);
          uint64_t v52 = v50 + v51[12];
          *(void *)uint64_t v52 = 0;
          *(unsigned char *)(v52 + 8) = 1;
          sub_8860((uint64_t)v17, v50 + v51[16], &qword_DA400);
          sub_759CC(v49, v50 + v51[20], type metadata accessor for HUDButton);
          sub_76184((uint64_t)v28, type metadata accessor for HUDButton);
          sub_A35C(v40, &qword_DA400);
          sub_76184(v47, type metadata accessor for HUDButton);
          sub_76184(v49, type metadata accessor for HUDButton);
          sub_A35C((uint64_t)v17, &qword_DA400);
          return sub_76184((uint64_t)v48, type metadata accessor for HUDButton);
      }
  }
}

uint64_t sub_69018@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  LODWORD(v61) = a1;
  uint64_t v72 = a2;
  uint64_t v4 = type metadata accessor for LiveSpeechHUDView_iOS(0);
  uint64_t v66 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v68 = v5;
  uint64_t v70 = (uint64_t)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_A5F80();
  uint64_t v6 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v64 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v73 = (char *)&v59 - v9;
  __chkstk_darwin(v10);
  int v59 = (char *)&v59 - v11;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v59 - v13;
  uint64_t v15 = (int *)type metadata accessor for HUDButton(0);
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v18);
  uint64_t v71 = (uint64_t)&v59 - v19;
  uint64_t v20 = sub_A6380();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_53C54((uint64_t)v23);
  if (qword_D7DE8 != -1) {
    swift_once();
  }
  uint64_t v24 = sub_7B38(v20, (uint64_t)qword_DF648);
  sub_75D80((unint64_t *)&qword_D85F0, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  uint64_t v65 = v24;
  int v25 = sub_A7180();
  uint64_t v67 = v21;
  uint64_t v26 = *(void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v69 = v20;
  v26(v23, v20);
  uint64_t v27 = v3;
  uint64_t v28 = *(void **)(v3 + 24);
  if (!v28) {
    goto LABEL_17;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  id v29 = v28;
  sub_A60D0();

  swift_release();
  swift_release();
  uint64_t v30 = sub_A5F60();
  uint64_t v62 = v31;
  uint64_t v63 = v30;
  id v32 = *(void (**)(char *, uint64_t))(v6 + 8);
  v32(v14, v74);
  if (v61 & v25)
  {
    uint64_t v33 = v27;
    uint64_t v34 = *(void **)(v27 + 24);
    if (!v34)
    {
LABEL_17:
      type metadata accessor for LiveSpeechStore(0);
      sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
      uint64_t result = sub_A64B0();
      __break(1u);
      return result;
    }
    swift_getKeyPath();
    swift_getKeyPath();
    id v35 = v34;
    id v36 = v59;
    sub_A60D0();

    swift_release();
    swift_release();
    uint64_t v37 = sub_A5F70();
    uint64_t v60 = v38;
    uint64_t v61 = v37;
    v32(v36, v74);
  }
  else
  {
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v33 = v27;
  }
  int v59 = (char *)sub_A6D90();
  id v39 = *(void **)(v33 + 24);
  if (!v39) {
    goto LABEL_17;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  id v40 = v39;
  uint64_t v41 = v73;
  sub_A60D0();

  swift_release();
  swift_release();
  uint64_t v42 = v64;
  uint64_t v43 = v74;
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v64, v41, v74);
  int v44 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v42, v43);
  if (v44 == enum case for LiveSpeechInputMode.keyboard(_:))
  {
    uint64_t v45 = sub_A6D60();
  }
  else if (v44 == enum case for LiveSpeechInputMode.favoritePhrases(_:))
  {
    uint64_t v45 = sub_A6DB0();
  }
  else
  {
    uint64_t v45 = sub_A6D90();
    v32(v42, v74);
  }
  v32(v73, v74);
  uint64_t v46 = v70;
  sub_759CC(v33, v70, type metadata accessor for LiveSpeechHUDView_iOS);
  unint64_t v47 = (*(unsigned __int8 *)(v66 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
  uint64_t v48 = swift_allocObject();
  sub_75BDC(v46, v48 + v47, type metadata accessor for LiveSpeechHUDView_iOS);
  *uint64_t v17 = swift_getKeyPath();
  sub_7AF4(&qword_D7E68);
  swift_storeEnumTagMultiPayload();
  uint64_t v49 = v15[13];
  *(uint64_t *)((char *)v17 + v49) = sub_A6AB0();
  *(uint64_t *)((char *)v17 + v15[15]) = 0x4020000000000000;
  *(uint64_t *)((char *)v17 + v15[16]) = 0x4000000000000000;
  uint64_t v50 = v15[17];
  if (qword_D7DE0 != -1) {
    swift_once();
  }
  *(uint64_t *)((char *)v17 + v50) = qword_DF640;
  *(uint64_t *)((char *)v17 + v15[18]) = 0x402E000000000000;
  *(uint64_t *)((char *)v17 + v15[19]) = 0x4024000000000000;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))((char *)v17 + v15[20], v65, v69);
  uint64_t v51 = (uint64_t *)((char *)v17 + v15[5]);
  uint64_t v52 = v62;
  *uint64_t v51 = v63;
  v51[1] = v52;
  uint64_t v53 = (uint64_t *)((char *)v17 + v15[6]);
  uint64_t v54 = v60;
  *uint64_t v53 = v61;
  v53[1] = v54;
  *((unsigned char *)v17 + v15[7]) = 0;
  *((unsigned char *)v17 + v15[8]) = 1;
  *((unsigned char *)v17 + v15[9]) = 0;
  *(uint64_t *)((char *)v17 + v15[10]) = (uint64_t)v59;
  *(uint64_t *)((char *)v17 + v15[11]) = v45;
  uint64_t v55 = (char *)v17 + v15[12];
  *(void *)uint64_t v55 = 0;
  v55[8] = 1;
  id v56 = (uint64_t (**)())((char *)v17 + v15[14]);
  long long *v56 = sub_77BFC;
  v56[1] = (uint64_t (*)())v48;
  uint64_t v57 = v71;
  sub_75BDC((uint64_t)v17, v71, type metadata accessor for HUDButton);
  return sub_75BDC(v57, v72, type metadata accessor for HUDButton);
}

uint64_t sub_697F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v34 = a1;
  uint64_t v3 = type metadata accessor for LiveSpeechHUDView_iOS(0);
  uint64_t v32 = *(void *)(v3 - 8);
  uint64_t v4 = *(void *)(v32 + 64);
  __chkstk_darwin(v3);
  uint64_t v5 = (int *)type metadata accessor for HUDButton(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  uint64_t v33 = (uint64_t)&v29 - v9;
  uint64_t v10 = sub_A6380();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_53C54((uint64_t)v13);
  if (qword_D7DE8 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_7B38(v10, (uint64_t)qword_DF648);
  sub_75D80((unint64_t *)&qword_D85F0, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  char v15 = sub_A7180();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (v15)
  {
    v16._object = (void *)0x80000000000AECF0;
    v16._uint64_t countAndFlagsBits = 0xD000000000000011;
    Swift::String v17 = LiveSpeechLocString(_:)(v16);
    object = v17._object;
    uint64_t countAndFlagsBits = v17._countAndFlagsBits;
  }
  else
  {
    object = 0;
    uint64_t countAndFlagsBits = 0;
  }
  uint64_t v18 = sub_A6D50();
  sub_759CC(v2, (uint64_t)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LiveSpeechHUDView_iOS);
  unint64_t v19 = (*(unsigned __int8 *)(v32 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  uint64_t v20 = swift_allocObject();
  sub_75BDC((uint64_t)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v20 + v19, type metadata accessor for LiveSpeechHUDView_iOS);
  uint64_t *v7 = swift_getKeyPath();
  sub_7AF4(&qword_D7E68);
  swift_storeEnumTagMultiPayload();
  uint64_t v21 = v5[13];
  *(uint64_t *)((char *)v7 + v21) = sub_A6AB0();
  *(uint64_t *)((char *)v7 + v5[15]) = 0x4020000000000000;
  *(uint64_t *)((char *)v7 + v5[16]) = 0x4000000000000000;
  uint64_t v22 = v5[17];
  if (qword_D7DE0 != -1) {
    swift_once();
  }
  *(uint64_t *)((char *)v7 + v22) = qword_DF640;
  *(uint64_t *)((char *)v7 + v5[18]) = 0x402E000000000000;
  *(uint64_t *)((char *)v7 + v5[19]) = 0x4024000000000000;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v7 + v5[20], v14, v10);
  *(_OWORD *)((char *)v7 + v5[5]) = xmmword_AB4D0;
  uint64_t v23 = (uint64_t *)((char *)v7 + v5[6]);
  uint64_t v24 = (uint64_t)object;
  uint64_t *v23 = countAndFlagsBits;
  v23[1] = v24;
  *((unsigned char *)v7 + v5[7]) = 0;
  *((unsigned char *)v7 + v5[8]) = 0;
  *((unsigned char *)v7 + v5[9]) = 0;
  *(uint64_t *)((char *)v7 + v5[10]) = v18;
  *(uint64_t *)((char *)v7 + v5[11]) = 0;
  int v25 = (char *)v7 + v5[12];
  *(void *)int v25 = 0;
  v25[8] = 1;
  uint64_t v26 = (uint64_t (**)())((char *)v7 + v5[14]);
  *uint64_t v26 = sub_77A68;
  v26[1] = (uint64_t (*)())v20;
  uint64_t v27 = v33;
  sub_75BDC((uint64_t)v7, v33, type metadata accessor for HUDButton);
  return sub_75BDC(v27, v34, type metadata accessor for HUDButton);
}

double sub_69C78@<D0>(uint64_t (*a1)(__n128)@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>, __n128 a4@<Q0>)
{
  __n128 v26 = a4;
  uint64_t v7 = v4;
  uint64_t v9 = type metadata accessor for LiveSpeechHUDView_iOS(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __n128 v12 = __chkstk_darwin(v9 - 8);
  uint64_t v13 = a1(v12);
  sub_759CC(v7, (uint64_t)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LiveSpeechHUDView_iOS);
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = swift_allocObject();
  sub_75BDC((uint64_t)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, type metadata accessor for LiveSpeechHUDView_iOS);
  *a3 = swift_getKeyPath();
  sub_7AF4(&qword_D7E68);
  swift_storeEnumTagMultiPayload();
  Swift::String v16 = (int *)type metadata accessor for HUDButton(0);
  uint64_t v17 = v16[13];
  *(uint64_t *)((char *)a3 + v17) = sub_A6AB0();
  *(uint64_t *)((char *)a3 + v16[15]) = 0x4020000000000000;
  *(uint64_t *)((char *)a3 + v16[16]) = 0x4000000000000000;
  uint64_t v18 = v16[17];
  if (qword_D7DE0 != -1) {
    swift_once();
  }
  *(uint64_t *)((char *)a3 + v18) = qword_DF640;
  *(uint64_t *)((char *)a3 + v16[18]) = 0x402E000000000000;
  *(uint64_t *)((char *)a3 + v16[19]) = 0x4024000000000000;
  uint64_t v19 = v16[20];
  if (qword_D7DE8 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_A6380();
  uint64_t v21 = sub_7B38(v20, (uint64_t)qword_DF648);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))((char *)a3 + v19, v21, v20);
  double result = v26.n128_f64[0];
  *(__n128 *)((char *)a3 + v16[5]) = v26;
  uint64_t v23 = (uint64_t *)((char *)a3 + v16[6]);
  void *v23 = 0;
  v23[1] = 0;
  *((unsigned char *)a3 + v16[7]) = 0;
  *((unsigned char *)a3 + v16[8]) = 0;
  *((unsigned char *)a3 + v16[9]) = 0;
  *(uint64_t *)((char *)a3 + v16[10]) = v13;
  *(uint64_t *)((char *)a3 + v16[11]) = 0;
  uint64_t v24 = (char *)a3 + v16[12];
  *(void *)uint64_t v24 = 0;
  v24[8] = 1;
  int v25 = (uint64_t *)((char *)a3 + v16[14]);
  void *v25 = a2;
  v25[1] = v15;
  return result;
}

uint64_t sub_69F40()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for LiveSpeechHUDView_iOS(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (int *)type metadata accessor for HUDButton(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v26._countAndFlagsBits - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v26 - v10;
  uint64_t v12 = sub_A6D60();
  sub_759CC(v1, (uint64_t)v5, type metadata accessor for LiveSpeechHUDView_iOS);
  unint64_t v13 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v14 = swift_allocObject();
  sub_75BDC((uint64_t)v5, v14 + v13, type metadata accessor for LiveSpeechHUDView_iOS);
  *uint64_t v8 = swift_getKeyPath();
  sub_7AF4(&qword_D7E68);
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = v6[13];
  *(uint64_t *)((char *)v8 + v15) = sub_A6AB0();
  *(uint64_t *)((char *)v8 + v6[15]) = 0x4020000000000000;
  *(uint64_t *)((char *)v8 + v6[16]) = 0x4000000000000000;
  uint64_t v16 = v6[17];
  if (qword_D7DE0 != -1) {
    swift_once();
  }
  *(uint64_t *)((char *)v8 + v16) = qword_DF640;
  *(uint64_t *)((char *)v8 + v6[18]) = 0x402E000000000000;
  *(uint64_t *)((char *)v8 + v6[19]) = 0x4024000000000000;
  uint64_t v17 = v6[20];
  if (qword_D7DE8 != -1) {
    swift_once();
  }
  uint64_t v18 = sub_A6380();
  uint64_t v19 = sub_7B38(v18, (uint64_t)qword_DF648);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))((char *)v8 + v17, v19, v18);
  uint64_t v20 = (uint64_t *)((char *)v8 + v6[5]);
  void *v20 = 0xD000000000000014;
  v20[1] = 0x80000000000AED10;
  uint64_t v21 = (uint64_t *)((char *)v8 + v6[6]);
  *uint64_t v21 = 0;
  v21[1] = 0;
  *((unsigned char *)v8 + v6[7]) = 0;
  *((unsigned char *)v8 + v6[8]) = 0;
  *((unsigned char *)v8 + v6[9]) = 0;
  *(uint64_t *)((char *)v8 + v6[10]) = v12;
  *(uint64_t *)((char *)v8 + v6[11]) = 0;
  uint64_t v22 = (char *)v8 + v6[12];
  *(void *)uint64_t v22 = 0;
  v22[8] = 1;
  uint64_t v23 = (uint64_t (**)())((char *)v8 + v6[14]);
  void *v23 = sub_77A90;
  v23[1] = (uint64_t (*)())v14;
  sub_75BDC((uint64_t)v8, (uint64_t)v11, type metadata accessor for HUDButton);
  v24._object = (void *)0x80000000000AED30;
  v24._uint64_t countAndFlagsBits = 0xD000000000000012;
  Swift::String v26 = LiveSpeechLocString(_:)(v24);
  sub_75D80(&qword_D9C00, (void (*)(uint64_t))type metadata accessor for HUDButton);
  sub_FF30();
  sub_A6C40();
  swift_bridgeObjectRelease();
  return sub_76184((uint64_t)v11, type metadata accessor for HUDButton);
}

double sub_6A354@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for LiveSpeechHUDView_iOS(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4 - 8);
  sub_A6DA0();
  uint64_t v7 = sub_A6DC0();
  swift_release();
  sub_759CC(v2, (uint64_t)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LiveSpeechHUDView_iOS);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  sub_75BDC((uint64_t)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8, type metadata accessor for LiveSpeechHUDView_iOS);
  *a1 = swift_getKeyPath();
  sub_7AF4(&qword_D7E68);
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = (int *)type metadata accessor for HUDButton(0);
  uint64_t v11 = v10[13];
  *(uint64_t *)((char *)a1 + v11) = sub_A6AB0();
  *(uint64_t *)((char *)a1 + v10[15]) = 0x4020000000000000;
  *(uint64_t *)((char *)a1 + v10[16]) = 0x4000000000000000;
  uint64_t v12 = v10[17];
  if (qword_D7DE0 != -1) {
    swift_once();
  }
  *(uint64_t *)((char *)a1 + v12) = qword_DF640;
  *(uint64_t *)((char *)a1 + v10[18]) = 0x402E000000000000;
  *(uint64_t *)((char *)a1 + v10[19]) = 0x4024000000000000;
  uint64_t v13 = v10[20];
  if (qword_D7DE8 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_A6380();
  uint64_t v15 = sub_7B38(v14, (uint64_t)qword_DF648);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))((char *)a1 + v13, v15, v14);
  *(void *)&double result = 0x6B72616D78;
  *(_OWORD *)((char *)a1 + v10[5]) = xmmword_AB4E0;
  uint64_t v17 = (uint64_t *)((char *)a1 + v10[6]);
  *uint64_t v17 = 0;
  v17[1] = 0;
  *((unsigned char *)a1 + v10[7]) = 0;
  *((unsigned char *)a1 + v10[8]) = 0;
  *((unsigned char *)a1 + v10[9]) = 0;
  *(uint64_t *)((char *)a1 + v10[10]) = v7;
  *(uint64_t *)((char *)a1 + v10[11]) = 0;
  uint64_t v18 = (char *)a1 + v10[12];
  *(void *)uint64_t v18 = 0;
  unsigned char v18[8] = 1;
  uint64_t v19 = (uint64_t (**)())((char *)a1 + v10[14]);
  *uint64_t v19 = sub_77AB4;
  v19[1] = (uint64_t (*)())v9;
  return result;
}

uint64_t sub_6A634@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v131 = a2;
  uint64_t v3 = sub_7AF4(&qword_DA290);
  __chkstk_darwin(v3 - 8);
  uint64_t v112 = (uint64_t *)((char *)&v107 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v109 = sub_7AF4(&qword_DA298);
  __chkstk_darwin(v109);
  uint64_t v111 = (uint64_t)&v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v110 = (uint64_t)&v107 - v7;
  uint64_t v8 = sub_7AF4(&qword_DA2A0);
  __chkstk_darwin(v8 - 8);
  uint64_t v116 = (uint64_t *)((char *)&v107 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v122 = sub_7AF4(&qword_DA2A8);
  __chkstk_darwin(v122);
  uint64_t v115 = (uint64_t)&v107 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v114 = (uint64_t)&v107 - v12;
  __chkstk_darwin(v13);
  uint64_t v113 = (uint64_t)&v107 - v14;
  __chkstk_darwin(v15);
  uint64_t v117 = (uint64_t)&v107 - v16;
  uint64_t v126 = sub_7AF4(&qword_DA2B0);
  __chkstk_darwin(v126);
  uint64_t v130 = (uint64_t)&v107 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = sub_7AF4(&qword_DA2B8);
  __chkstk_darwin(v118);
  uint64_t v120 = (uint64_t)&v107 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = sub_7AF4(&qword_DA2C0);
  __chkstk_darwin(v127);
  uint64_t v121 = (char *)&v107 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = sub_7AF4(&qword_DA2C8);
  __chkstk_darwin(v119);
  uint64_t v108 = (uint64_t *)((char *)&v107 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = sub_A5F80();
  uint64_t v123 = *(void *)(v21 - 8);
  uint64_t v124 = v21;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v107 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_7AF4(&qword_DA2D0);
  __chkstk_darwin(v24 - 8);
  uint64_t v129 = (char *)&v107 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  char v128 = (char *)&v107 - v27;
  uint64_t v28 = sub_7AF4(&qword_DA2D8);
  __chkstk_darwin(v28 - 8);
  uint64_t v30 = (char *)&v107 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_7AF4(&qword_DA2E0);
  __chkstk_darwin(v31);
  uint64_t v125 = (uint64_t)&v107 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  id v35 = (char *)&v107 - v34;
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v107 - v37;
  *(void *)uint64_t v30 = sub_A66A0();
  *((void *)v30 + 1) = 0x4028000000000000;
  v30[16] = 0;
  uint64_t v39 = sub_7AF4(&qword_DA2E8);
  uint64_t v40 = a1;
  sub_6B32C(a1, (uint64_t)&v30[*(int *)(v39 + 44)]);
  LOBYTE(a1) = sub_A6A40();
  unsigned __int8 v41 = sub_A6A60();
  unsigned __int8 v42 = sub_A6A20();
  char v43 = sub_A6A50();
  sub_A6A50();
  if (sub_A6A50() != a1) {
    char v43 = sub_A6A50();
  }
  sub_A6A50();
  if (sub_A6A50() != v41) {
    char v43 = sub_A6A50();
  }
  sub_A6A50();
  if (sub_A6A50() != v42) {
    char v43 = sub_A6A50();
  }
  sub_A6140();
  uint64_t v45 = v44;
  uint64_t v47 = v46;
  uint64_t v49 = v48;
  uint64_t v51 = v50;
  sub_8860((uint64_t)v30, (uint64_t)v35, &qword_DA2D8);
  uint64_t v52 = &v35[*(int *)(v31 + 36)];
  *uint64_t v52 = v43;
  *((void *)v52 + 1) = v45;
  *((void *)v52 + 2) = v47;
  *((void *)v52 + 3) = v49;
  *((void *)v52 + 4) = v51;
  v52[40] = 0;
  sub_A35C((uint64_t)v30, &qword_DA2D8);
  uint64_t v53 = (uint64_t)v38;
  sub_29C10((uint64_t)v35, (uint64_t)v38, &qword_DA2E0);
  uint64_t v54 = *(void **)(v40 + 24);
  if (v54)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v55 = v54;
    sub_A60D0();

    swift_release();
    swift_release();
    uint64_t v57 = v123;
    uint64_t v56 = v124;
    int v58 = (*(uint64_t (**)(char *, uint64_t))(v123 + 88))(v23, v124);
    if (v58 == enum case for LiveSpeechInputMode.keyboard(_:))
    {
      uint64_t v59 = sub_A6750();
      uint64_t v60 = (uint64_t)v116;
      *uint64_t v116 = v59;
      *(void *)(v60 + 8) = 0;
      *(unsigned char *)(v60 + 16) = 1;
      uint64_t v61 = v112;
      sub_6CFF0(v40, v112);
      char v62 = sub_A6A40();
      unsigned __int8 v63 = sub_A6A60();
      char v64 = sub_A6A50();
      sub_A6A50();
      char v65 = sub_A6A50();
      uint64_t v66 = (uint64_t)v128;
      if (v65 != v62) {
        char v64 = sub_A6A50();
      }
      sub_A6A50();
      if (sub_A6A50() != v63) {
        char v64 = sub_A6A50();
      }
      uint64_t v67 = v60 + *(int *)(sub_7AF4(&qword_DA318) + 44);
      sub_A6140();
      uint64_t v69 = v68;
      uint64_t v71 = v70;
      uint64_t v73 = v72;
      uint64_t v75 = v74;
      uint64_t v76 = v111;
      sub_8860((uint64_t)v61, v111, &qword_DA290);
      uint64_t v77 = v76 + *(int *)(v109 + 36);
      *(unsigned char *)uint64_t v77 = v64;
      *(void *)(v77 + 8) = v69;
      *(void *)(v77 + 16) = v71;
      *(void *)(v77 + 24) = v73;
      *(void *)(v77 + 32) = v75;
      *(unsigned char *)(v77 + 40) = 0;
      sub_A35C((uint64_t)v61, &qword_DA290);
      uint64_t v78 = v110;
      sub_29C10(v76, v110, &qword_DA298);
      sub_29C10(v78, v67, &qword_DA298);
      unsigned __int8 v79 = sub_A6A40();
      unsigned __int8 v80 = sub_A6A60();
      unsigned __int8 v81 = sub_A6A30();
      char v82 = sub_A6A50();
      sub_A6A50();
      if (sub_A6A50() != v79) {
        char v82 = sub_A6A50();
      }
      sub_A6A50();
      if (sub_A6A50() != v80) {
        char v82 = sub_A6A50();
      }
      uint64_t v83 = v131;
      sub_A6A50();
      if (sub_A6A50() != v81) {
        char v82 = sub_A6A50();
      }
      sub_A6140();
      uint64_t v85 = v84;
      uint64_t v87 = v86;
      uint64_t v89 = v88;
      uint64_t v91 = v90;
      uint64_t v92 = v115;
      sub_8860(v60, v115, &qword_DA2A0);
      uint64_t v93 = v92 + *(int *)(v122 + 36);
      *(unsigned char *)uint64_t v93 = v82;
      *(void *)(v93 + 8) = v85;
      *(void *)(v93 + 16) = v87;
      *(void *)(v93 + 24) = v89;
      *(void *)(v93 + 32) = v91;
      *(unsigned char *)(v93 + 40) = 0;
      sub_A35C(v60, &qword_DA2A0);
      uint64_t v94 = v114;
      sub_29C10(v92, v114, &qword_DA2A8);
      uint64_t v95 = v94;
      uint64_t v96 = v113;
      sub_29C10(v95, v113, &qword_DA2A8);
      uint64_t v97 = v117;
      sub_29C10(v96, v117, &qword_DA2A8);
      sub_8860(v97, v120, &qword_DA2A8);
      swift_storeEnumTagMultiPayload();
      sub_A45C(&qword_DA2F8, &qword_DA2C8);
      sub_76FBC();
      uint64_t v98 = (uint64_t)v121;
      sub_A6860();
      sub_8860(v98, v130, &qword_DA2C0);
      swift_storeEnumTagMultiPayload();
      sub_76F1C();
      sub_A6860();
      sub_A35C(v98, &qword_DA2C0);
      sub_A35C(v97, &qword_DA2A8);
    }
    else
    {
      uint64_t v66 = (uint64_t)v128;
      if (v58 == enum case for LiveSpeechInputMode.favoritePhrases(_:))
      {
        uint64_t v99 = sub_A6750();
        uint64_t v100 = (uint64_t)v108;
        *uint64_t v108 = v99;
        *(void *)(v100 + 8) = 0;
        *(unsigned char *)(v100 + 16) = 1;
        uint64_t v101 = sub_7AF4(&qword_DA320);
        sub_6C97C(v40, v100 + *(int *)(v101 + 44));
        sub_8860(v100, v120, &qword_DA2C8);
        swift_storeEnumTagMultiPayload();
        sub_A45C(&qword_DA2F8, &qword_DA2C8);
        sub_76FBC();
        uint64_t v102 = (uint64_t)v121;
        sub_A6860();
        sub_8860(v102, v130, &qword_DA2C0);
        swift_storeEnumTagMultiPayload();
        sub_76F1C();
        sub_A6860();
        sub_A35C(v102, &qword_DA2C0);
        sub_A35C(v100, &qword_DA2C8);
      }
      else
      {
        swift_storeEnumTagMultiPayload();
        sub_76F1C();
        sub_A6860();
        (*(void (**)(char *, uint64_t))(v57 + 8))(v23, v56);
      }
      uint64_t v83 = v131;
    }
    uint64_t v103 = (uint64_t)v129;
    uint64_t v104 = v125;
    sub_8860(v53, v125, &qword_DA2E0);
    sub_8860(v66, v103, &qword_DA2D0);
    sub_8860(v104, v83, &qword_DA2E0);
    uint64_t v105 = sub_7AF4(&qword_DA310);
    sub_8860(v103, v83 + *(int *)(v105 + 48), &qword_DA2D0);
    sub_A35C(v66, &qword_DA2D0);
    sub_A35C(v53, &qword_DA2E0);
    sub_A35C(v103, &qword_DA2D0);
    return sub_A35C(v104, &qword_DA2E0);
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_6B32C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v107 = a2;
  uint64_t v103 = sub_7AF4(&qword_D9BF8);
  __chkstk_darwin(v103);
  uint64_t v87 = (char *)&v86 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_A5F80();
  uint64_t v90 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v88 = (char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v89 = (char *)&v86 - v6;
  uint64_t v7 = sub_7AF4(&qword_DA3D8);
  __chkstk_darwin(v7 - 8);
  uint64_t v92 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for LiveSpeechHUDView_iOS(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v95 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v94 = (char *)&v86 - v12;
  __chkstk_darwin(v13);
  uint64_t v93 = (uint64_t)&v86 - v14;
  uint64_t v99 = sub_7AF4(&qword_DA3E0);
  __chkstk_darwin(v99);
  uint64_t v96 = (uint64_t)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = sub_7AF4(&qword_DA3E8);
  __chkstk_darwin(v100);
  uint64_t v102 = (uint64_t)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = sub_7AF4(&qword_DA3F0);
  __chkstk_darwin(v97);
  uint64_t v18 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = sub_7AF4(&qword_DA3F8);
  __chkstk_darwin(v101);
  uint64_t v20 = (char *)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for HUDButton(0);
  __chkstk_darwin(v98);
  uint64_t v22 = (char *)&v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v86 - v24;
  __chkstk_darwin(v26);
  uint64_t v108 = (uint64_t *)((char *)&v86 - v27);
  __chkstk_darwin(v28);
  uint64_t v30 = (uint64_t *)((char *)&v86 - v29);
  uint64_t v31 = sub_7AF4(&qword_DA400);
  __chkstk_darwin(v31 - 8);
  uint64_t v33 = (char *)&v86 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  uint64_t v105 = (uint64_t)&v86 - v35;
  uint64_t v36 = sub_7AF4(&qword_DA408);
  __chkstk_darwin(v36 - 8);
  uint64_t v106 = (uint64_t)&v86 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  uint64_t v104 = (uint64_t)&v86 - v39;
  sub_6C648((uint64_t)&v86 - v39);
  uint64_t v40 = *(void **)(a1 + 24);
  if (!v40) {
    goto LABEL_32;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  id v41 = v40;
  sub_A60D0();

  swift_release();
  swift_release();
  switch((char)v111)
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    default:
      char v42 = sub_A7800();
      swift_bridgeObjectRelease();
      if ((v42 & 1) == 0)
      {
        uint64_t v46 = *(void **)(a1 + 24);
        if (!v46) {
          goto LABEL_32;
        }
        swift_getKeyPath();
        swift_getKeyPath();
        id v47 = v46;
        sub_A60D0();

        swift_release();
        swift_release();
        uint64_t v48 = a1;
        switch((char)v111)
        {
          case 0:
          case 1:
          case 2:
            uint64_t v49 = v111;
            char v50 = sub_A7800();
            swift_bridgeObjectRelease();
            uint64_t v51 = v108;
            if (v50) {
              goto LABEL_15;
            }
            uint64_t v52 = *(void **)(a1 + 24);
            if (!v52) {
              goto LABEL_32;
            }
            break;
          case 3:
            swift_bridgeObjectRelease();
            uint64_t v51 = v108;
LABEL_15:
            sub_697F8((uint64_t)v30);
            sub_69C78((uint64_t (*)(__n128))&static Color.blue.getter, (uint64_t)sub_77A4C, v51, (__n128)xmmword_AB4B0);
            sub_759CC((uint64_t)v30, (uint64_t)v25, type metadata accessor for HUDButton);
            sub_759CC((uint64_t)v51, (uint64_t)v22, type metadata accessor for HUDButton);
            uint64_t v95 = (char *)a1;
            uint64_t v57 = v96;
            sub_759CC((uint64_t)v25, v96, type metadata accessor for HUDButton);
            uint64_t v58 = sub_7AF4(&qword_DA438);
            sub_759CC((uint64_t)v22, v57 + *(int *)(v58 + 48), type metadata accessor for HUDButton);
            sub_76184((uint64_t)v22, type metadata accessor for HUDButton);
            sub_76184((uint64_t)v25, type metadata accessor for HUDButton);
            sub_8860(v57, (uint64_t)v18, &qword_DA3E0);
            swift_storeEnumTagMultiPayload();
            sub_75D80(&qword_D9C00, (void (*)(uint64_t))type metadata accessor for HUDButton);
            sub_A45C(&qword_DA428, &qword_DA3E0);
            sub_A6860();
            sub_A35C(v57, &qword_DA3E0);
            sub_8860((uint64_t)v20, v102, &qword_DA3F8);
            swift_storeEnumTagMultiPayload();
            sub_77744();
            sub_77814();
            sub_A6860();
            sub_A35C((uint64_t)v20, &qword_DA3F8);
            sub_76184((uint64_t)v51, type metadata accessor for HUDButton);
            sub_76184((uint64_t)v30, type metadata accessor for HUDButton);
            uint64_t v59 = sub_7AF4(&qword_DA410);
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v33, 0, 1, v59);
            uint64_t v44 = v105;
            sub_29C10((uint64_t)v33, v105, &qword_DA400);
            uint64_t v45 = (uint64_t)v51;
            goto LABEL_16;
          default:
LABEL_36:
            JUMPOUT(0);
        }
        swift_getKeyPath();
        swift_getKeyPath();
        id v53 = v52;
        sub_A60D0();

        swift_release();
        swift_release();
        uint64_t v54 = (uint64_t)v94;
        uint64_t v55 = (uint64_t)v95;
        switch(v49)
        {
          case 0:
            swift_bridgeObjectRelease();
            uint64_t v56 = v93;
            sub_759CC(a1, v93, type metadata accessor for LiveSpeechHUDView_iOS);
            goto LABEL_18;
          case 1:
          case 2:
          case 3:
            char v68 = sub_A7800();
            swift_bridgeObjectRelease();
            uint64_t v56 = v93;
            sub_759CC(v48, v93, type metadata accessor for LiveSpeechHUDView_iOS);
            if (v68)
            {
LABEL_18:
              uint64_t v69 = *(void **)(v56 + 24);
              if (!v69) {
                goto LABEL_32;
              }
              swift_getKeyPath();
              swift_getKeyPath();
              id v70 = v69;
              uint64_t v71 = (uint64_t)v92;
              sub_A60D0();

              swift_release();
              swift_release();
              uint64_t SpokenContext = type metadata accessor for LiveSpeechStore.LastSpokenContext(0);
              int v73 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(SpokenContext - 8) + 48))(v71, 1, SpokenContext);
              sub_A35C(v71, &qword_DA3D8);
              sub_76184(v56, type metadata accessor for LiveSpeechHUDView_iOS);
              sub_759CC(v48, v54, type metadata accessor for LiveSpeechHUDView_iOS);
              if (v73 != 1)
              {
                uint64_t v74 = *(void **)(v54 + 24);
                if (!v74) {
                  goto LABEL_32;
                }
                swift_getKeyPath();
                swift_getKeyPath();
                id v75 = v74;
                sub_A60D0();

                swift_release();
                swift_release();
                char v76 = v111;
                sub_76184(v54, type metadata accessor for LiveSpeechHUDView_iOS);
                sub_759CC(v48, v55, type metadata accessor for LiveSpeechHUDView_iOS);
                if ((v76 & 1) == 0)
                {
                  uint64_t v77 = *(void **)(v55 + 24);
                  if (v77)
                  {
                    swift_getKeyPath();
                    swift_getKeyPath();
                    id v78 = v77;
                    sub_A60D0();

                    swift_release();
                    swift_release();
                    (*(void (**)(char *, void, uint64_t))(v90 + 104))(v88, enum case for LiveSpeechInputMode.keyboard(_:), v91);
                    sub_75D80(&qword_D9DC0, (void (*)(uint64_t))&type metadata accessor for LiveSpeechInputMode);
                    sub_A7280();
                    sub_A7280();
                    if (v111 == v109 && v112 == v110)
                    {
                      swift_bridgeObjectRelease_n();
                      unsigned __int8 v79 = *(void (**)(char *, uint64_t))(v90 + 8);
                      uint64_t v80 = v91;
                      v79(v88, v91);
                      v79(v89, v80);
                      sub_76184(v55, type metadata accessor for LiveSpeechHUDView_iOS);
LABEL_31:
                      uint64_t v85 = (uint64_t)v87;
                      sub_69F40();
                      sub_8860(v85, v102, &qword_D9BF8);
                      swift_storeEnumTagMultiPayload();
                      sub_77744();
                      sub_77814();
                      sub_A6860();
                      sub_A35C(v85, &qword_D9BF8);
                      goto LABEL_6;
                    }
                    char v82 = sub_A7800();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    uint64_t v83 = *(void (**)(char *, uint64_t))(v90 + 8);
                    uint64_t v84 = v91;
                    v83(v88, v91);
                    v83(v89, v84);
                    sub_76184(v55, type metadata accessor for LiveSpeechHUDView_iOS);
                    if (v82) {
                      goto LABEL_31;
                    }
LABEL_29:
                    uint64_t v81 = sub_7AF4(&qword_DA410);
                    uint64_t v44 = v105;
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v105, 1, 1, v81);
                    goto LABEL_7;
                  }
                  while (1)
                  {
LABEL_32:
                    type metadata accessor for LiveSpeechStore(0);
                    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
                    sub_A64B0();
                    __break(1u);
                  }
                }
LABEL_28:
                sub_76184(v55, type metadata accessor for LiveSpeechHUDView_iOS);
                goto LABEL_29;
              }
            }
            else
            {
              sub_76184(v56, type metadata accessor for LiveSpeechHUDView_iOS);
              sub_759CC(v48, v54, type metadata accessor for LiveSpeechHUDView_iOS);
            }
            sub_76184(v54, type metadata accessor for LiveSpeechHUDView_iOS);
            sub_759CC(v48, v55, type metadata accessor for LiveSpeechHUDView_iOS);
            goto LABEL_28;
          default:
            goto LABEL_36;
        }
      }
LABEL_5:
      sub_69C78((uint64_t (*)(__n128))&static Color.red.getter, (uint64_t)sub_778FC, v30, (__n128)xmmword_AB4C0);
      sub_759CC((uint64_t)v30, (uint64_t)v18, type metadata accessor for HUDButton);
      swift_storeEnumTagMultiPayload();
      sub_75D80(&qword_D9C00, (void (*)(uint64_t))type metadata accessor for HUDButton);
      sub_A45C(&qword_DA428, &qword_DA3E0);
      sub_A6860();
      sub_8860((uint64_t)v20, v102, &qword_DA3F8);
      swift_storeEnumTagMultiPayload();
      sub_77744();
      sub_77814();
      sub_A6860();
      sub_A35C((uint64_t)v20, &qword_DA3F8);
      sub_76184((uint64_t)v30, type metadata accessor for HUDButton);
LABEL_6:
      uint64_t v43 = sub_7AF4(&qword_DA410);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v33, 0, 1, v43);
      uint64_t v44 = v105;
      sub_29C10((uint64_t)v33, v105, &qword_DA400);
LABEL_7:
      uint64_t v45 = (uint64_t)v108;
LABEL_16:
      sub_6A354(v30);
      uint64_t v60 = v104;
      uint64_t v61 = v106;
      sub_8860(v104, v106, &qword_DA408);
      sub_8860(v44, (uint64_t)v33, &qword_DA400);
      sub_759CC((uint64_t)v30, v45, type metadata accessor for HUDButton);
      uint64_t v62 = (uint64_t)v30;
      uint64_t v63 = v45;
      uint64_t v64 = v107;
      sub_8860(v61, v107, &qword_DA408);
      char v65 = (int *)sub_7AF4(&qword_DA418);
      uint64_t v66 = v64 + v65[12];
      *(void *)uint64_t v66 = 0;
      *(unsigned char *)(v66 + 8) = 1;
      sub_8860((uint64_t)v33, v64 + v65[16], &qword_DA400);
      sub_759CC(v63, v64 + v65[20], type metadata accessor for HUDButton);
      sub_76184(v62, type metadata accessor for HUDButton);
      sub_A35C(v44, &qword_DA400);
      sub_A35C(v60, &qword_DA408);
      sub_76184(v63, type metadata accessor for HUDButton);
      sub_A35C((uint64_t)v33, &qword_DA400);
      return sub_A35C(v61, &qword_DA408);
  }
}

uint64_t sub_6C648@<X0>(uint64_t a1@<X8>)
{
  uint64_t v14 = a1;
  uint64_t v2 = type metadata accessor for HUDButton(0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_7AF4(&qword_DA450);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_7AF4(&qword_D9BF8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void **)(v1 + 24);
  if (v11)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v12 = v11;
    sub_A60D0();

    swift_release();
    swift_release();
    if (v15)
    {
      sub_6F958((uint64_t)v10);
      sub_8860((uint64_t)v10, (uint64_t)v7, &qword_D9BF8);
      swift_storeEnumTagMultiPayload();
      sub_77814();
      sub_75D80(&qword_D9C00, (void (*)(uint64_t))type metadata accessor for HUDButton);
      sub_A6860();
      return sub_A35C((uint64_t)v10, &qword_D9BF8);
    }
    else
    {
      sub_69018(1, (uint64_t)v4);
      sub_759CC((uint64_t)v4, (uint64_t)v7, type metadata accessor for HUDButton);
      swift_storeEnumTagMultiPayload();
      sub_77814();
      sub_75D80(&qword_D9C00, (void (*)(uint64_t))type metadata accessor for HUDButton);
      sub_A6860();
      return sub_76184((uint64_t)v4, type metadata accessor for HUDButton);
    }
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_6C97C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a1;
  uint64_t v51 = a2;
  uint64_t v3 = type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS();
  __chkstk_darwin(v3 - 8);
  uint64_t v50 = (uint64_t)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v49 = (uint64_t)&v40 - v6;
  uint64_t v7 = type metadata accessor for LiveSpeechHUDView_iOS(0);
  uint64_t v48 = *(void *)(v7 - 8);
  uint64_t v47 = *(void *)(v48 + 64);
  __chkstk_darwin(v7 - 8);
  uint64_t v46 = (uint64_t)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_A68B0();
  uint64_t v44 = *(void *)(v9 - 8);
  uint64_t v45 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_7AF4(&qword_DA328);
  uint64_t v12 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_7AF4(&qword_DA330);
  uint64_t v15 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v40 - v19;
  uint64_t v21 = sub_7AF4(&qword_DA338);
  uint64_t v22 = v21 - 8;
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v43 = (uint64_t)&v40 - v26;
  sub_A69D0();
  uint64_t v52 = a1;
  sub_7AF4(&qword_DA340);
  sub_77064();
  sub_A6180();
  sub_A68A0();
  sub_A69D0();
  sub_A45C(&qword_DA360, &qword_DA328);
  uint64_t v27 = v41;
  sub_A6C80();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v11, v45);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v27);
  uint64_t v28 = v17;
  uint64_t v29 = v42;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v28, v42);
  uint64_t v30 = v46;
  sub_759CC(v40, v46, type metadata accessor for LiveSpeechHUDView_iOS);
  unint64_t v31 = (*(unsigned __int8 *)(v48 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
  uint64_t v32 = swift_allocObject();
  sub_75BDC(v30, v32 + v31, type metadata accessor for LiveSpeechHUDView_iOS);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v20, v29);
  uint64_t v33 = (uint64_t (**)())&v24[*(int *)(v22 + 44)];
  *uint64_t v33 = sub_77108;
  v33[1] = (uint64_t (*)())v32;
  v33[2] = 0;
  v33[3] = 0;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v29);
  uint64_t v34 = v43;
  sub_29C10((uint64_t)v24, v43, &qword_DA338);
  uint64_t v35 = v49;
  sub_5A190(v49);
  sub_8860(v34, (uint64_t)v24, &qword_DA338);
  uint64_t v36 = v50;
  sub_759CC(v35, v50, (uint64_t (*)(void))type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS);
  uint64_t v37 = v51;
  sub_8860((uint64_t)v24, v51, &qword_DA338);
  uint64_t v38 = sub_7AF4(&qword_DA368);
  sub_759CC(v36, v37 + *(int *)(v38 + 48), (uint64_t (*)(void))type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS);
  sub_76184(v35, (uint64_t (*)(void))type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS);
  sub_A35C(v34, &qword_DA338);
  sub_76184(v36, (uint64_t (*)(void))type metadata accessor for LiveSpeechCategoryPhrasesListView_iOS);
  return sub_A35C((uint64_t)v24, &qword_DA338);
}

void sub_6CF44(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1)
  {
    id v2 = v1;
    LiveSpeechStore.sortCategories()();
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    sub_A64B0();
    __break(1u);
  }
}

void sub_6CFF0(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_7AF4(&qword_DA3C8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v23 - v8;
  uint64_t v10 = *(void **)(a1 + 24);
  if (v10)
  {
    id v11 = v10;
    BOOL v12 = LiveSpeechStore.shouldShowSecondarySpeechPlaybackView.getter();

    v23[1] = a1;
    if (!v12)
    {
      uint64_t v13 = 0;
      uint64_t v15 = 0;
      uint64_t v18 = 0;
      uint64_t v21 = 0;
      uint64_t v20 = 0;
      uint64_t v17 = 0;
      goto LABEL_6;
    }
    type metadata accessor for LiveSpeechStore(0);
    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t v13 = (void *)sub_A64C0();
    uint64_t v15 = v14;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v17 = *(void **)(a1 + 24);
    if (v17)
    {
      uint64_t v18 = KeyPath;
      id v19 = v17;
      uint64_t v20 = sub_A6060();
      uint64_t v21 = 256;
LABEL_6:
      sub_674BC((uint64_t)v9);
      sub_8860((uint64_t)v9, (uint64_t)v6, &qword_DA3C8);
      *a2 = v13;
      a2[1] = v15;
      a2[2] = v18;
      a2[3] = v21;
      a2[4] = v20;
      a2[5] = v17;
      uint64_t v22 = sub_7AF4(&qword_DA3D0);
      sub_8860((uint64_t)v6, (uint64_t)a2 + *(int *)(v22 + 48), &qword_DA3C8);
      sub_7764C(v13, v15, v18, v21, v20, v17);
      sub_A35C((uint64_t)v9, &qword_DA3C8);
      sub_A35C((uint64_t)v6, &qword_DA3C8);
      sub_776B0(v13, v15, v18, v21, v20, v17);
      return;
    }
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    sub_A64B0();
    __break(1u);
  }
  sub_A64B0();
  __break(1u);
}

uint64_t sub_6D284(uint64_t a1)
{
  uint64_t v2 = sub_A5F80();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void **)(a1 + 24);
  if (v9)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v10 = v9;
    sub_A60D0();

    swift_release();
    swift_release();
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for LiveSpeechInputMode.keyboard(_:), v2);
    sub_75D80(&qword_D9DC0, (void (*)(uint64_t))&type metadata accessor for LiveSpeechInputMode);
    sub_A7280();
    sub_A7280();
    if (v17 == v20 && v18 == v21) {
      char v11 = 1;
    }
    else {
      char v11 = sub_A7800();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL v12 = *(void (**)(char *, uint64_t))(v3 + 8);
    v12(v5, v2);
    v12(v8, v2);
    uint64_t v13 = *(void *)(a1 + 8);
    char v14 = *(unsigned char *)(a1 + 16);
    LOBYTE(v17) = *(unsigned char *)a1;
    uint64_t v18 = v13;
    char v19 = v14;
    LOBYTE(v20) = v11 & 1;
    sub_7AF4(&qword_D9BF0);
    return sub_A6150();
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_6D544@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v79 = a2;
  uint64_t v81 = a3;
  uint64_t v4 = sub_7AF4(&qword_DA4F0);
  __chkstk_darwin(v4 - 8);
  uint64_t v82 = (uint64_t)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v80 = (char *)&v67 - v7;
  uint64_t v75 = sub_7AF4(&qword_D9BF8);
  __chkstk_darwin(v75);
  uint64_t v67 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_7AF4(&qword_DA3D8);
  __chkstk_darwin(v9 - 8);
  char v68 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for LiveSpeechHUDView_iOS(0);
  __chkstk_darwin(v11 - 8);
  uint64_t v69 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_7AF4(&qword_DA3E0);
  __chkstk_darwin(v71);
  char v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_7AF4(&qword_DA3E8);
  __chkstk_darwin(v72);
  uint64_t v74 = (uint64_t)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_7AF4(&qword_DA3F0);
  __chkstk_darwin(v70);
  uint64_t v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_7AF4(&qword_DA3F8);
  __chkstk_darwin(v73);
  char v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for HUDButton(0);
  uint64_t v77 = *(void *)(v20 - 8);
  uint64_t v78 = v20;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v67 - v24;
  __chkstk_darwin(v26);
  uint64_t v83 = (uint64_t *)((char *)&v67 - v27);
  __chkstk_darwin(v28);
  uint64_t v30 = (uint64_t *)((char *)&v67 - v29);
  uint64_t v31 = sub_7AF4(&qword_DA400);
  __chkstk_darwin(v31 - 8);
  char v76 = (char *)&v67 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  uint64_t v84 = (uint64_t)&v67 - v34;
  uint64_t v35 = *(void **)(a1 + 24);
  if (!v35)
  {
    while (1)
    {
LABEL_25:
      type metadata accessor for LiveSpeechStore(0);
      sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
      sub_A64B0();
      __break(1u);
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  id v36 = v35;
  sub_A60D0();

  swift_release();
  swift_release();
  switch(v87)
  {
    case 2:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    default:
      char v37 = sub_A7800();
      swift_bridgeObjectRelease();
      if (v37)
      {
LABEL_5:
        sub_69C78((uint64_t (*)(__n128))&static Color.red.getter, (uint64_t)sub_778FC, v30, (__n128)xmmword_AB4C0);
        sub_759CC((uint64_t)v30, (uint64_t)v17, type metadata accessor for HUDButton);
        swift_storeEnumTagMultiPayload();
        sub_75D80(&qword_D9C00, (void (*)(uint64_t))type metadata accessor for HUDButton);
        sub_A45C(&qword_DA428, &qword_DA3E0);
        uint64_t v38 = v78;
        sub_A6860();
        sub_8860((uint64_t)v19, v74, &qword_DA3F8);
        swift_storeEnumTagMultiPayload();
        sub_77744();
        sub_77814();
        uint64_t v39 = (uint64_t)v76;
        sub_A6860();
        sub_A35C((uint64_t)v19, &qword_DA3F8);
        uint64_t v40 = (uint64_t)v30;
LABEL_14:
        sub_76184(v40, type metadata accessor for HUDButton);
        uint64_t v50 = sub_7AF4(&qword_DA410);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v39, 0, 1, v50);
        sub_29C10(v39, v84, &qword_DA400);
        uint64_t v46 = (uint64_t)v80;
        goto LABEL_15;
      }
      uint64_t v41 = *(void **)(a1 + 24);
      if (!v41) {
        goto LABEL_25;
      }
      swift_getKeyPath();
      swift_getKeyPath();
      id v42 = v41;
      sub_A60D0();

      swift_release();
      swift_release();
      switch(v86)
      {
        case 3:
          swift_bridgeObjectRelease();
          goto LABEL_13;
        default:
          char v43 = sub_A7800();
          swift_bridgeObjectRelease();
          if (v43)
          {
LABEL_13:
            sub_697F8((uint64_t)v30);
            uint64_t v48 = v83;
            sub_69C78((uint64_t (*)(__n128))&static Color.blue.getter, (uint64_t)sub_77A4C, v83, (__n128)xmmword_AB4B0);
            sub_759CC((uint64_t)v30, (uint64_t)v25, type metadata accessor for HUDButton);
            sub_759CC((uint64_t)v48, (uint64_t)v22, type metadata accessor for HUDButton);
            sub_759CC((uint64_t)v25, (uint64_t)v14, type metadata accessor for HUDButton);
            uint64_t v49 = sub_7AF4(&qword_DA438);
            sub_759CC((uint64_t)v22, (uint64_t)&v14[*(int *)(v49 + 48)], type metadata accessor for HUDButton);
            sub_76184((uint64_t)v22, type metadata accessor for HUDButton);
            sub_76184((uint64_t)v25, type metadata accessor for HUDButton);
            sub_8860((uint64_t)v14, (uint64_t)v17, &qword_DA3E0);
            swift_storeEnumTagMultiPayload();
            sub_75D80(&qword_D9C00, (void (*)(uint64_t))type metadata accessor for HUDButton);
            sub_A45C(&qword_DA428, &qword_DA3E0);
            uint64_t v38 = v78;
            sub_A6860();
            sub_A35C((uint64_t)v14, &qword_DA3E0);
            sub_8860((uint64_t)v19, v74, &qword_DA3F8);
            swift_storeEnumTagMultiPayload();
            sub_77744();
            sub_77814();
            uint64_t v39 = (uint64_t)v76;
            sub_A6860();
            sub_A35C((uint64_t)v19, &qword_DA3F8);
            sub_76184((uint64_t)v83, type metadata accessor for HUDButton);
            uint64_t v40 = (uint64_t)v30;
            goto LABEL_14;
          }
          uint64_t v44 = *(void **)(a1 + 24);
          if (!v44) {
            goto LABEL_25;
          }
          swift_getKeyPath();
          swift_getKeyPath();
          id v45 = v44;
          sub_A60D0();

          swift_release();
          swift_release();
          uint64_t v46 = (uint64_t)v80;
          uint64_t v38 = v78;
          uint64_t v47 = (uint64_t)v69;
          switch(v85)
          {
            case 1:
            case 2:
            case 3:
              char v58 = sub_A7800();
              swift_bridgeObjectRelease();
              sub_759CC(a1, v47, type metadata accessor for LiveSpeechHUDView_iOS);
              if (v58) {
                goto LABEL_20;
              }
              sub_76184(v47, type metadata accessor for LiveSpeechHUDView_iOS);
              goto LABEL_24;
            default:
              swift_bridgeObjectRelease();
              sub_759CC(a1, v47, type metadata accessor for LiveSpeechHUDView_iOS);
LABEL_20:
              uint64_t v59 = *(void **)(v47 + 24);
              if (!v59) {
                goto LABEL_25;
              }
              swift_getKeyPath();
              swift_getKeyPath();
              id v60 = v59;
              uint64_t v61 = (uint64_t)v68;
              sub_A60D0();

              swift_release();
              swift_release();
              uint64_t SpokenContext = type metadata accessor for LiveSpeechStore.LastSpokenContext(0);
              int v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(SpokenContext - 8) + 48))(v61, 1, SpokenContext);
              sub_A35C(v61, &qword_DA3D8);
              sub_76184(v47, type metadata accessor for LiveSpeechHUDView_iOS);
              if (v63 == 1)
              {
LABEL_24:
                uint64_t v66 = sub_7AF4(&qword_DA410);
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v84, 1, 1, v66);
                uint64_t v39 = (uint64_t)v76;
              }
              else
              {
                uint64_t v64 = (uint64_t)v67;
                sub_69F40();
                sub_8860(v64, v74, &qword_D9BF8);
                swift_storeEnumTagMultiPayload();
                sub_77744();
                sub_77814();
                uint64_t v39 = (uint64_t)v76;
                sub_A6860();
                sub_A35C(v64, &qword_D9BF8);
                uint64_t v65 = sub_7AF4(&qword_DA410);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v39, 0, 1, v65);
                sub_29C10(v39, v84, &qword_DA400);
              }
              break;
          }
LABEL_15:
          if (v79)
          {
            sub_69018(0, v46);
            uint64_t v51 = 0;
          }
          else
          {
            uint64_t v51 = 1;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56))(v46, v51, 1, v38);
          sub_6A354(v30);
          uint64_t v52 = v84;
          sub_8860(v84, v39, &qword_DA400);
          uint64_t v53 = v82;
          sub_8860(v46, v82, &qword_DA4F0);
          uint64_t v54 = v83;
          sub_759CC((uint64_t)v30, (uint64_t)v83, type metadata accessor for HUDButton);
          uint64_t v55 = v81;
          sub_8860(v39, v81, &qword_DA400);
          uint64_t v56 = sub_7AF4(&qword_DA4F8);
          sub_8860(v53, v55 + *(int *)(v56 + 48), &qword_DA4F0);
          sub_759CC((uint64_t)v54, v55 + *(int *)(v56 + 64), type metadata accessor for HUDButton);
          sub_76184((uint64_t)v30, type metadata accessor for HUDButton);
          sub_A35C(v46, &qword_DA4F0);
          sub_A35C(v52, &qword_DA400);
          sub_76184((uint64_t)v54, type metadata accessor for HUDButton);
          sub_A35C(v53, &qword_DA4F0);
          return sub_A35C(v39, &qword_DA400);
      }
  }
}

uint64_t sub_6E43C(uint64_t a1)
{
  uint64_t v2 = sub_7AF4(&qword_DA3C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_A59B0();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for LiveSpeechHUDView_iOS(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_A5F80();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v39 - v17;
  if (AXDeviceSupportsLiveSpeechCategory()) {
    return sub_6EA18();
  }
  uint64_t v41 = v5;
  id v42 = v8;
  uint64_t v40 = v6;
  char v19 = *(void **)(a1 + 24);
  if (!v19) {
    goto LABEL_17;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  id v20 = v19;
  sub_A60D0();

  swift_release();
  swift_release();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for LiveSpeechInputMode.keyboard(_:), v12);
  sub_75D80(&qword_D9DC0, (void (*)(uint64_t))&type metadata accessor for LiveSpeechInputMode);
  sub_A7280();
  sub_A7280();
  if (v45 != v43) {
    goto LABEL_6;
  }
  if (v46 == v44)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v21 = *(void (**)(char *, uint64_t))(v13 + 8);
    v21(v15, v12);
    v21(v18, v12);
    sub_759CC(a1, (uint64_t)v11, type metadata accessor for LiveSpeechHUDView_iOS);
  }
  else
  {
LABEL_6:
    char v22 = sub_A7800();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v23 = *(void (**)(char *, uint64_t))(v13 + 8);
    v23(v15, v12);
    v23(v18, v12);
    sub_759CC(a1, (uint64_t)v11, type metadata accessor for LiveSpeechHUDView_iOS);
    if ((v22 & 1) == 0)
    {
      sub_76184((uint64_t)v11, type metadata accessor for LiveSpeechHUDView_iOS);
      return sub_6EA18();
    }
  }
  uint64_t v24 = (void *)*((void *)v11 + 3);
  if (!v24)
  {
LABEL_17:
    type metadata accessor for LiveSpeechStore(0);
    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
    return result;
  }
  sub_A5F40();
  id v25 = v24;
  uint64_t v26 = (void *)sub_A5F10();
  uint64_t v27 = sub_A5F00();

  uint64_t v28 = *(void *)(v27 + 16);
  swift_bridgeObjectRelease();
  sub_76184((uint64_t)v11, type metadata accessor for LiveSpeechHUDView_iOS);
  uint64_t v29 = v42;
  if (v28) {
    return sub_6EA18();
  }
  sub_A59A0();
  uint64_t v31 = v40;
  uint64_t v30 = v41;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v4, 1, v41) == 1) {
    return sub_A35C((uint64_t)v4, &qword_DA3C0);
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v29, v4, v30);
  id v33 = [self defaultWorkspace];
  if (v33)
  {
    uint64_t v35 = v33;
    sub_A5990(v34);
    char v37 = v36;
    sub_6F78((uint64_t)_swiftEmptyArrayStorage);
    Class isa = sub_A7130().super.isa;
    uint64_t v31 = v40;
    swift_bridgeObjectRelease();
    [v35 openSensitiveURL:v37 withOptions:isa];

    uint64_t v30 = v41;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v29, v30);
}

uint64_t sub_6EA18()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_A5F80();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t v9 = sub_6ED60();
  if (!*(void *)(v0 + 24)) {
    goto LABEL_8;
  }
  __chkstk_darwin(v9);
  *(&v19 - 2) = (uint64_t)v10;
  id v11 = v10;
  sub_A7080();
  sub_A6300();

  swift_release();
  uint64_t v12 = *(void **)(v0 + 24);
  if (v12)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v13 = v12;
    sub_A60D0();

    swift_release();
    swift_release();
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for LiveSpeechInputMode.keyboard(_:), v2);
    sub_75D80(&qword_D9DC0, (void (*)(uint64_t))&type metadata accessor for LiveSpeechInputMode);
    sub_A7280();
    sub_A7280();
    if (v19 == v22 && v20 == v23) {
      char v14 = 1;
    }
    else {
      char v14 = sub_A7800();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(char *, uint64_t))(v3 + 8);
    v15(v5, v2);
    v15(v8, v2);
    uint64_t v16 = *(void *)(v1 + 8);
    char v17 = *(unsigned char *)(v1 + 16);
    LOBYTE(v19) = *(unsigned char *)v1;
    uint64_t v20 = v16;
    char v21 = v17;
    LOBYTE(v22) = v14 & 1;
    sub_7AF4(&qword_D9BF0);
    return sub_A6150();
  }
  else
  {
LABEL_8:
    type metadata accessor for LiveSpeechStore(0);
    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_6ED60()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for LiveSpeechHUDView_iOS(0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_A5F80();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v11 = (char *)v25 - v10;
  uint64_t v12 = *(void **)(v0 + 24);
  if (!v12) {
    goto LABEL_13;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  id v13 = v12;
  sub_A60D0();

  swift_release();
  swift_release();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for LiveSpeechInputMode.favoritePhrases(_:), v5);
  sub_75D80(&qword_D9DC0, (void (*)(uint64_t))&type metadata accessor for LiveSpeechInputMode);
  sub_A7280();
  sub_A7280();
  if (v26 != v25[0]) {
    goto LABEL_5;
  }
  if (v27 == v25[1])
  {
    swift_bridgeObjectRelease_n();
    char v14 = *(void (**)(char *, uint64_t))(v6 + 8);
    v14(v8, v5);
    v14(v11, v5);
    sub_759CC(v0, (uint64_t)v4, type metadata accessor for LiveSpeechHUDView_iOS);
  }
  else
  {
LABEL_5:
    char v15 = sub_A7800();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16(v8, v5);
    v16(v11, v5);
    sub_759CC(v0, (uint64_t)v4, type metadata accessor for LiveSpeechHUDView_iOS);
    if ((v15 & 1) == 0) {
      return sub_76184((uint64_t)v4, type metadata accessor for LiveSpeechHUDView_iOS);
    }
  }
  char v17 = (void *)*((void *)v4 + 3);
  if (!v17)
  {
LABEL_13:
    type metadata accessor for LiveSpeechStore(0);
    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
    return result;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  id v18 = v17;
  sub_A60D0();

  swift_release();
  swift_release();
  char v19 = v26;
  uint64_t result = sub_76184((uint64_t)v4, type metadata accessor for LiveSpeechHUDView_iOS);
  if (v19)
  {
    char v21 = *(void **)(v1 + 24);
    if (v21)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t v26 = 0;
      unint64_t v27 = 0xE000000000000000;
      id v22 = v21;
      sub_A60E0();
      uint64_t v23 = *(void **)(v1 + 24);
      if (v23)
      {
        swift_getKeyPath();
        swift_getKeyPath();
        LOBYTE(v26) = 0;
        id v24 = v23;
        return sub_A60E0();
      }
    }
    goto LABEL_13;
  }
  return result;
}

void sub_6F1D0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1)
  {
    id v2 = v1;
    id v3 = sub_7E4A0();
    [v3 continueSpeaking];
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    sub_A64B0();
    __break(1u);
  }
}

uint64_t sub_6F28C(uint64_t a1)
{
  uint64_t v2 = sub_A5A10();
  uint64_t v22 = *(void *)(v2 - 8);
  uint64_t v23 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v22 - v6;
  uint64_t v8 = sub_7AF4(&qword_DA3D8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t SpokenContext = (int *)type metadata accessor for LiveSpeechStore.LastSpokenContext(0);
  uint64_t v12 = *((void *)SpokenContext - 1);
  __chkstk_darwin(SpokenContext);
  char v14 = (uint64_t *)((char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v15 = *(void **)(a1 + 24);
  if (v15)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v16 = v15;
    sub_A60D0();

    swift_release();
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, SpokenContext) == 1)
    {
      return sub_A35C((uint64_t)v10, &qword_DA3D8);
    }
    else
    {
      sub_75BDC((uint64_t)v10, (uint64_t)v14, type metadata accessor for LiveSpeechStore.LastSpokenContext);
      id v18 = v16;
      sub_A5A00();
      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t v20 = v22;
      uint64_t v19 = v23;
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v4, v7, v23);
      id v21 = v18;
      sub_A60E0();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v19);
      sub_7F2D4(*v14, v14[1], (uint64_t)v14 + SpokenContext[5], *((unsigned __int8 *)v14 + SpokenContext[6]), *(uint64_t *)((char *)v14 + SpokenContext[7]), *(uint64_t *)((char *)v14 + SpokenContext[7] + 8), 1);

      return sub_76184((uint64_t)v14, type metadata accessor for LiveSpeechStore.LastSpokenContext);
    }
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_6F600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_7AF4(&qword_D8C50);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void **)(a1 + 24);
  if (v8)
  {
    uint64_t v9 = sub_A7360();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
    sub_A7330();
    id v10 = v8;
    uint64_t v11 = sub_A7320();
    uint64_t v12 = (void *)swift_allocObject();
    v12[2] = v11;
    uint64_t v12[3] = &protocol witness table for MainActor;
    void v12[4] = v10;
    sub_2F8E4((uint64_t)v7, a3, (uint64_t)v12);

    return swift_release();
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_6F788(uint64_t a1)
{
  uint64_t v2 = sub_7AF4(&qword_D8C50);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  v13[8] = *(unsigned char *)a1;
  uint64_t v14 = v5;
  char v15 = v6;
  v13[7] = 0;
  sub_7AF4(&qword_D9BF0);
  sub_A6150();
  uint64_t v7 = *(void **)(a1 + 24);
  if (v7)
  {
    uint64_t v8 = sub_A7360();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v4, 1, 1, v8);
    sub_A7330();
    id v9 = v7;
    uint64_t v10 = sub_A7320();
    uint64_t v11 = (void *)swift_allocObject();
    _DWORD v11[2] = v10;
    v11[3] = &protocol witness table for MainActor;
    v11[4] = v9;
    sub_2F8E4((uint64_t)v4, (uint64_t)&unk_DA448, (uint64_t)v11);

    swift_release();
    return _AXSLiveSpeechSetEnabled();
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_6F958@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  v26[1] = a1;
  uint64_t v3 = type metadata accessor for LiveSpeechHUDView_iOS(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3 - 8);
  char v6 = (int *)type metadata accessor for HUDButton(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (void *)((char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v26 - v10;
  v12._object = (void *)0x80000000000AED50;
  v12._uint64_t countAndFlagsBits = 0xD000000000000012;
  Swift::String v13 = LiveSpeechLocString(_:)(v12);
  v26[0] = sub_A6D60();
  sub_759CC(v2, (uint64_t)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LiveSpeechHUDView_iOS);
  unint64_t v14 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v15 = swift_allocObject();
  sub_75BDC((uint64_t)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, type metadata accessor for LiveSpeechHUDView_iOS);
  *uint64_t v8 = swift_getKeyPath();
  sub_7AF4(&qword_D7E68);
  swift_storeEnumTagMultiPayload();
  uint64_t v16 = v6[13];
  *(uint64_t *)((char *)v8 + v16) = sub_A6AB0();
  *(uint64_t *)((char *)v8 + v6[15]) = 0x4020000000000000;
  *(uint64_t *)((char *)v8 + v6[16]) = 0x4000000000000000;
  uint64_t v17 = v6[17];
  if (qword_D7DE0 != -1) {
    swift_once();
  }
  *(uint64_t *)((char *)v8 + v17) = qword_DF640;
  *(uint64_t *)((char *)v8 + v6[18]) = 0x402E000000000000;
  *(uint64_t *)((char *)v8 + v6[19]) = 0x4024000000000000;
  uint64_t v18 = v6[20];
  if (qword_D7DE8 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_A6380();
  uint64_t v20 = sub_7B38(v19, (uint64_t)qword_DF648);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))((char *)v8 + v18, v20, v19);
  id v21 = (uint64_t *)((char *)v8 + v6[5]);
  *id v21 = 0;
  v21[1] = 0;
  *(Swift::String *)((char *)v8 + v6[6]) = v13;
  *((unsigned char *)v8 + v6[7]) = 0;
  *((unsigned char *)v8 + v6[8]) = 0;
  *((unsigned char *)v8 + v6[9]) = 0;
  *(uint64_t *)((char *)v8 + v6[10]) = v26[0];
  *(uint64_t *)((char *)v8 + v6[11]) = 0;
  uint64_t v22 = (char *)v8 + v6[12];
  *(void *)uint64_t v22 = 0;
  v22[8] = 1;
  uint64_t v23 = (uint64_t (**)())((char *)v8 + v6[14]);
  void *v23 = sub_77BC8;
  v23[1] = (uint64_t (*)())v15;
  sub_75BDC((uint64_t)v8, (uint64_t)v11, type metadata accessor for HUDButton);
  v24._object = (void *)0x80000000000AED50;
  v24._uint64_t countAndFlagsBits = 0xD000000000000012;
  Swift::String v27 = LiveSpeechLocString(_:)(v24);
  sub_75D80(&qword_D9C00, (void (*)(uint64_t))type metadata accessor for HUDButton);
  sub_FF30();
  sub_A6C40();
  swift_bridgeObjectRelease();
  return sub_76184((uint64_t)v11, type metadata accessor for HUDButton);
}

uint64_t sub_6FD6C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 24);
  if (v1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v2 = v1;
    sub_A60E0();
    swift_getKeyPath();
    swift_getKeyPath();
    id v3 = v2;
    sub_A60E0();
    swift_getKeyPath();
    swift_getKeyPath();
    id v4 = v3;
    sub_A60E0();
    swift_getKeyPath();
    swift_getKeyPath();
    id v5 = v4;
    return sub_A60E0();
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_6FEFC()
{
  uint64_t v0 = (int *)type metadata accessor for HUDButton(0);
  __chkstk_darwin(v0);
  id v2 = (uint64_t *)((char *)&v18._countAndFlagsBits - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  id v5 = (char *)&v18 - v4;
  v6._object = (void *)0x80000000000AEC60;
  v6._uint64_t countAndFlagsBits = 0xD000000000000014;
  Swift::String v7 = LiveSpeechLocString(_:)(v6);
  sub_A6DA0();
  uint64_t v8 = sub_A6DC0();
  swift_release();
  uint64_t *v2 = swift_getKeyPath();
  sub_7AF4(&qword_D7E68);
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = v0[13];
  *(uint64_t *)((char *)v2 + v9) = sub_A6AB0();
  *(uint64_t *)((char *)v2 + v0[15]) = 0x4020000000000000;
  *(uint64_t *)((char *)v2 + v0[16]) = 0x4000000000000000;
  uint64_t v10 = v0[17];
  if (qword_D7DE0 != -1) {
    swift_once();
  }
  *(uint64_t *)((char *)v2 + v10) = qword_DF640;
  *(uint64_t *)((char *)v2 + v0[18]) = 0x402E000000000000;
  *(uint64_t *)((char *)v2 + v0[19]) = 0x4024000000000000;
  uint64_t v11 = v0[20];
  if (qword_D7DE8 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_A6380();
  uint64_t v13 = sub_7B38(v12, (uint64_t)qword_DF648);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))((char *)v2 + v11, v13, v12);
  *(_OWORD *)((char *)v2 + v0[5]) = xmmword_AAB20;
  *(Swift::String *)((char *)v2 + v0[6]) = v7;
  *((unsigned char *)v2 + v0[7]) = 1;
  *((unsigned char *)v2 + v0[8]) = 0;
  *((unsigned char *)v2 + v0[9]) = 0;
  *(uint64_t *)((char *)v2 + v0[10]) = v8;
  *(uint64_t *)((char *)v2 + v0[11]) = 0;
  unint64_t v14 = (char *)v2 + v0[12];
  *(void *)unint64_t v14 = 0;
  v14[8] = 1;
  uint64_t v15 = (uint64_t (**)())((char *)v2 + v0[14]);
  *uint64_t v15 = sub_70260;
  v15[1] = 0;
  sub_75BDC((uint64_t)v2, (uint64_t)v5, type metadata accessor for HUDButton);
  v16._uint64_t countAndFlagsBits = 0xD000000000000017;
  v16._object = (void *)0x80000000000AEC80;
  Swift::String v18 = LiveSpeechLocString(_:)(v16);
  sub_75D80(&qword_D9C00, (void (*)(uint64_t))type metadata accessor for HUDButton);
  sub_FF30();
  sub_A6C40();
  swift_bridgeObjectRelease();
  return sub_76184((uint64_t)v5, type metadata accessor for HUDButton);
}

uint64_t sub_70260()
{
  uint64_t v0 = sub_7AF4(&qword_DA3C0);
  __chkstk_darwin(v0 - 8);
  id v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_A59B0();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A59A0();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1) {
    return sub_A35C((uint64_t)v2, &qword_DA3C0);
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  id v8 = [self defaultWorkspace];
  if (v8)
  {
    uint64_t v10 = v8;
    sub_A5990(v9);
    uint64_t v12 = v11;
    sub_6F78((uint64_t)_swiftEmptyArrayStorage);
    Class isa = sub_A7130().super.isa;
    swift_bridgeObjectRelease();
    [v10 openSensitiveURL:v12 withOptions:isa];
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_7047C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_7AF4(&qword_DA358);
  __chkstk_darwin(v4 - 8);
  Swift::String v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_7AF4(&qword_DA340);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)Swift::String v6 = sub_A66A0();
  *((void *)v6 + 1) = 0;
  v6[16] = 1;
  uint64_t v10 = sub_7AF4(&qword_DA370);
  sub_70660(a1, &v6[*(int *)(v10 + 44)]);
  unsigned __int8 v11 = sub_A6A40();
  unsigned __int8 v12 = sub_A6A60();
  char v13 = sub_A6A50();
  sub_A6A50();
  if (sub_A6A50() != v11) {
    char v13 = sub_A6A50();
  }
  sub_A6A50();
  if (sub_A6A50() != v12) {
    char v13 = sub_A6A50();
  }
  sub_A6140();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  sub_8860((uint64_t)v6, (uint64_t)v9, &qword_DA358);
  uint64_t v22 = &v9[*(int *)(v7 + 36)];
  *uint64_t v22 = v13;
  *((void *)v22 + 1) = v15;
  *((void *)v22 + 2) = v17;
  *((void *)v22 + 3) = v19;
  *((void *)v22 + 4) = v21;
  v22[40] = 0;
  sub_A35C((uint64_t)v6, &qword_DA358);
  return sub_29C10((uint64_t)v9, a2, &qword_DA340);
}

uint64_t sub_70660@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v3 = sub_7AF4(&qword_D9BF8);
  __chkstk_darwin(v3 - 8);
  uint64_t v35 = (uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v33 = (char *)&v31 - v6;
  uint64_t v7 = type metadata accessor for LiveSpeechHUDView_iOS(0);
  uint64_t v32 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v32 + 64);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = sub_7AF4(&qword_DA378);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unsigned __int8 v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v31 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v31 - v17;
  uint64_t v19 = *(void **)(a1 + 24);
  if (v19)
  {
    id v20 = v19;
    uint64_t v21 = LiveSpeechStore.categoryOptions.getter();

    uint64_t v36 = v21;
    sub_759CC(a1, (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for LiveSpeechHUDView_iOS);
    unint64_t v22 = (*(unsigned __int8 *)(v32 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
    uint64_t v23 = swift_allocObject();
    sub_75BDC((uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v23 + v22, type metadata accessor for LiveSpeechHUDView_iOS);
    sub_7AF4(&qword_DA380);
    sub_7AF4(&qword_DA388);
    sub_A45C(&qword_DA390, &qword_DA380);
    sub_77218();
    sub_75D80(&qword_DA3B0, (void (*)(uint64_t))&type metadata accessor for LiveSpeechCategory);
    sub_A6F50();
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v18, v15, v9);
    uint64_t v24 = (uint64_t)v33;
    sub_6FEFC();
    id v25 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v25(v12, v18, v9);
    uint64_t v26 = v35;
    sub_8860(v24, v35, &qword_D9BF8);
    Swift::String v27 = v34;
    v25(v34, v12, v9);
    uint64_t v28 = sub_7AF4(&qword_DA3B8);
    sub_8860(v26, (uint64_t)&v27[*(int *)(v28 + 48)], &qword_D9BF8);
    sub_A35C(v24, &qword_D9BF8);
    uint64_t v29 = *(void (**)(char *, uint64_t))(v10 + 8);
    v29(v18, v9);
    sub_A35C(v26, &qword_D9BF8);
    return ((uint64_t (*)(char *, uint64_t))v29)(v12, v9);
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t sub_70AE0@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for LiveSpeechHUDView_iOS(0);
  uint64_t v86 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v86 + 64);
  __chkstk_darwin(v6 - 8);
  uint64_t v96 = (uint64_t)v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v88 = (uint64_t)v85 - v9;
  uint64_t v10 = (int *)type metadata accessor for HUDButton(0);
  __chkstk_darwin(v10);
  unsigned __int8 v12 = (void *)((char *)v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v85 - v14;
  uint64_t v94 = sub_7AF4(&qword_DA388);
  *(void *)&double v16 = __chkstk_darwin(v94).n128_u64[0];
  uint64_t v95 = (uint64_t)v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v18 = *a1;
  id v19 = objc_msgSend(*a1, "symbol", v16);
  uint64_t v20 = sub_A71D0();
  uint64_t v91 = v21;
  uint64_t v92 = v20;

  id v22 = [v18 localizedName];
  uint64_t v23 = sub_A71D0();
  uint64_t v89 = v24;
  uint64_t v90 = v23;

  uint64_t v93 = a2;
  id v25 = *(void **)(a2 + 24);
  if (v25)
  {
    id v26 = v25;
    unint64_t v27 = LiveSpeechStore.categoryOptions.getter();
    id v28 = v26;
    char v29 = sub_87EC8(v27);
    v85[1] = 0;
    swift_bridgeObjectRelease();

    uint64_t v97 = a3;
    uint64_t v30 = (uint64_t)v15;
    if (v29)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      sub_A60D0();

      swift_release();
      swift_release();
      id v31 = v98;
    }
    else
    {
      id v31 = LiveSpeechStore.getRecentOrSavedCategory()();
    }
    id v32 = [v31 categoryID];

    uint64_t v33 = sub_A71D0();
    uint64_t v35 = v34;

    id v36 = [v18 categoryID];
    uint64_t v37 = sub_A71D0();
    uint64_t v39 = v38;

    uint64_t v87 = v30;
    if (v33 == v37 && v35 == v39) {
      char v40 = 1;
    }
    else {
      char v40 = sub_A7800();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_A6DA0();
    uint64_t v41 = sub_A6DC0();
    swift_release();
    uint64_t v42 = v93;
    uint64_t v43 = v88;
    sub_759CC(v93, v88, type metadata accessor for LiveSpeechHUDView_iOS);
    unint64_t v44 = (*(unsigned __int8 *)(v86 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80);
    unint64_t v45 = (v7 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v46 = swift_allocObject();
    sub_75BDC(v43, v46 + v44, type metadata accessor for LiveSpeechHUDView_iOS);
    *(void *)(v46 + v45) = v18;
    *unsigned __int8 v12 = swift_getKeyPath();
    sub_7AF4(&qword_D7E68);
    swift_storeEnumTagMultiPayload();
    uint64_t v47 = v10[13];
    id v48 = v18;
    *(uint64_t *)((char *)v12 + v47) = sub_A6AB0();
    *(uint64_t *)((char *)v12 + v10[15]) = 0x4020000000000000;
    *(uint64_t *)((char *)v12 + v10[16]) = 0x4000000000000000;
    uint64_t v49 = v10[17];
    if (qword_D7DE0 != -1) {
      swift_once();
    }
    *(uint64_t *)((char *)v12 + v49) = qword_DF640;
    *(uint64_t *)((char *)v12 + v10[18]) = 0x402E000000000000;
    *(uint64_t *)((char *)v12 + v10[19]) = 0x4024000000000000;
    uint64_t v50 = (char *)v12 + v10[20];
    if (qword_D7DE8 != -1) {
      swift_once();
    }
    uint64_t v51 = sub_A6380();
    uint64_t v52 = sub_7B38(v51, (uint64_t)qword_DF648);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v51 - 8) + 16))(v50, v52, v51);
    uint64_t v53 = (uint64_t *)((char *)v12 + v10[5]);
    uint64_t v54 = v91;
    *uint64_t v53 = v92;
    v53[1] = v54;
    uint64_t v55 = (uint64_t *)((char *)v12 + v10[6]);
    uint64_t v56 = v89;
    *uint64_t v55 = v90;
    v55[1] = v56;
    *((unsigned char *)v12 + v10[7]) = 1;
    *((unsigned char *)v12 + v10[8]) = 0;
    *((unsigned char *)v12 + v10[9]) = v40 & 1;
    *(uint64_t *)((char *)v12 + v10[10]) = v41;
    *(uint64_t *)((char *)v12 + v10[11]) = 0;
    uint64_t v57 = (char *)v12 + v10[12];
    *(void *)uint64_t v57 = 0;
    v57[8] = 1;
    char v58 = (uint64_t (**)())((char *)v12 + v10[14]);
    *char v58 = sub_77538;
    v58[1] = (uint64_t (*)())v46;
    uint64_t v59 = v87;
    sub_75BDC((uint64_t)v12, v87, type metadata accessor for HUDButton);
    id v60 = *(void **)(v42 + 24);
    if (v60)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      id v61 = v60;
      sub_A60D0();

      swift_release();
      swift_release();
      char v62 = (char)v98;
      uint64_t v63 = v96;
      sub_759CC(v42, v96, type metadata accessor for LiveSpeechHUDView_iOS);
      if ((v62 & 1) == 0)
      {
        char v70 = 0;
LABEL_24:
        sub_76184(v63, type metadata accessor for LiveSpeechHUDView_iOS);
        uint64_t KeyPath = swift_getKeyPath();
        uint64_t v81 = swift_allocObject();
        *(unsigned char *)(v81 + 16) = v70 & 1;
        uint64_t v82 = v95;
        sub_759CC(v59, v95, type metadata accessor for HUDButton);
        uint64_t v83 = (uint64_t *)(v82 + *(int *)(v94 + 36));
        *uint64_t v83 = KeyPath;
        v83[1] = (uint64_t)sub_77634;
        v83[2] = v81;
        sub_76184(v59, type metadata accessor for HUDButton);
        return sub_29C10(v82, v97, &qword_DA388);
      }
      uint64_t v64 = *(void **)(v63 + 24);
      if (v64)
      {
        id v65 = v64;
        unint64_t v66 = LiveSpeechStore.categoryOptions.getter();
        id v67 = v65;
        char v68 = sub_87EC8(v66);
        swift_bridgeObjectRelease();

        if (v68)
        {
          swift_getKeyPath();
          swift_getKeyPath();
          sub_A60D0();

          swift_release();
          swift_release();
          id v69 = v98;
        }
        else
        {
          id v69 = LiveSpeechStore.getRecentOrSavedCategory()();
        }
        id v71 = [v69 categoryID];

        uint64_t v72 = sub_A71D0();
        uint64_t v74 = v73;

        id v75 = [v48 categoryID];
        uint64_t v76 = sub_A71D0();
        uint64_t v78 = v77;

        if (v72 == v76 && v74 == v78)
        {
          swift_bridgeObjectRelease_n();
          char v70 = 0;
        }
        else
        {
          char v79 = sub_A7800();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          char v70 = v79 ^ 1;
        }
        goto LABEL_24;
      }
    }
  }
  type metadata accessor for LiveSpeechStore(0);
  sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
  uint64_t result = sub_A64B0();
  __break(1u);
  return result;
}

uint64_t sub_713BC(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 24);
  if (v2)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v4 = v2;
    id v5 = a2;
    return sub_A60E0();
  }
  else
  {
    type metadata accessor for LiveSpeechStore(0);
    sub_75D80((unint64_t *)&qword_D7E60, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore);
    uint64_t result = sub_A64B0();
    __break(1u);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for LiveSpeechHUDView_iOS(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = v16 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v8 = (void *)a2[3];
    uint64_t v7 = a2[4];
    uint64_t v9 = a3[6];
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v7;
    swift_retain();
    id v12 = v8;
    sub_7AF4(&qword_D7E78);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = sub_A6920();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
      {
        uint64_t v15 = sub_7AF4(&qword_D8598);
        memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v10, v11, v13);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
      }
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = a3[7];
    id v18 = (void *)(v4 + v17);
    id v19 = (uint64_t *)((char *)a2 + v17);
    sub_7AF4(&qword_D7E68);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = sub_A6380();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    }
    else
    {
      *id v18 = *v19;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v21 = a3[8];
    uint64_t v22 = v4 + v21;
    uint64_t v23 = (uint64_t)a2 + v21;
    uint64_t v24 = *(void *)v23;
    id v25 = *(void **)(v23 + 8);
    char v26 = *(unsigned char *)(v23 + 16);
    sub_717A4(*(void *)v23, v25, v26);
    *(void *)uint64_t v22 = v24;
    *(void *)(v22 + 8) = v25;
    *(unsigned char *)(v22 + 16) = v26;
    uint64_t v27 = a3[9];
    uint64_t v28 = a3[10];
    uint64_t v29 = v4 + v27;
    uint64_t v30 = (uint64_t)a2 + v27;
    *(unsigned char *)uint64_t v29 = *(unsigned char *)v30;
    *(void *)(v29 + 8) = *(void *)(v30 + 8);
    id v31 = (void *)(v4 + v28);
    id v32 = (uint64_t *)((char *)a2 + v28);
    uint64_t v33 = v32[1];
    void *v31 = *v32;
    v31[1] = v33;
    uint64_t v34 = a3[11];
    uint64_t v35 = v4 + v34;
    uint64_t v36 = (uint64_t)a2 + v34;
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
    *(void *)(v35 + 16) = *(void *)(v36 + 16);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

id sub_717A4(uint64_t a1, void *a2, char a3)
{
  if (a3) {
    return a2;
  }
  else {
    return (id)swift_retain();
  }
}

uint64_t destroy for LiveSpeechHUDView_iOS(uint64_t a1, int *a2)
{
  swift_release();

  uint64_t v4 = a1 + a2[6];
  sub_7AF4(&qword_D7E78);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_A6920();
    uint64_t v6 = *(void *)(v5 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = a1 + a2[7];
  sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_A6380();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  sub_63B60(*(void *)(a1 + a2[8]), *(void *)(a1 + a2[8] + 8), *(unsigned char *)(a1 + a2[8] + 16));
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for LiveSpeechHUDView_iOS(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void **)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v6;
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  swift_retain();
  id v11 = v7;
  sub_7AF4(&qword_D7E78);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_A6920();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12))
    {
      uint64_t v14 = sub_7AF4(&qword_D8598);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v9, v10, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    }
  }
  else
  {
    *uint64_t v9 = *v10;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = sub_A6380();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  }
  else
  {
    *uint64_t v16 = *v17;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = *(void *)v21;
  uint64_t v23 = *(void **)(v21 + 8);
  char v24 = *(unsigned char *)(v21 + 16);
  sub_717A4(*(void *)v21, v23, v24);
  *(void *)uint64_t v20 = v22;
  *(void *)(v20 + 8) = v23;
  *(unsigned char *)(v20 + 16) = v24;
  uint64_t v25 = a3[9];
  uint64_t v26 = a3[10];
  uint64_t v27 = a1 + v25;
  uint64_t v28 = a2 + v25;
  *(unsigned char *)uint64_t v27 = *(unsigned char *)v28;
  *(void *)(v27 + 8) = *(void *)(v28 + 8);
  uint64_t v29 = (void *)(a1 + v26);
  uint64_t v30 = (void *)(a2 + v26);
  uint64_t v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  uint64_t v32 = a3[11];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  *(void *)(v33 + 16) = *(void *)(v34 + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for LiveSpeechHUDView_iOS(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void **)(a1 + 24);
  uint64_t v7 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v7;
  id v8 = v7;

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (a1 != a2)
  {
    uint64_t v9 = a3[6];
    uint64_t v10 = (void *)(a1 + v9);
    id v11 = (void *)(a2 + v9);
    sub_A35C(a1 + v9, &qword_D7E78);
    sub_7AF4(&qword_D7E78);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_A6920();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        uint64_t v14 = sub_7AF4(&qword_D8598);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = a3[7];
    uint64_t v16 = (void *)(a1 + v15);
    uint64_t v17 = (void *)(a2 + v15);
    sub_A35C(a1 + v15, &qword_D7E68);
    sub_7AF4(&qword_D7E68);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = sub_A6380();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    }
    else
    {
      *uint64_t v16 = *v17;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = *(void *)v21;
  uint64_t v23 = *(void **)(v21 + 8);
  char v24 = *(unsigned char *)(v21 + 16);
  sub_717A4(*(void *)v21, v23, v24);
  uint64_t v25 = *(void *)v20;
  uint64_t v26 = *(void *)(v20 + 8);
  char v27 = *(unsigned char *)(v20 + 16);
  *(void *)uint64_t v20 = v22;
  *(void *)(v20 + 8) = v23;
  *(unsigned char *)(v20 + 16) = v24;
  sub_63B60(v25, v26, v27);
  uint64_t v28 = a3[9];
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  *(unsigned char *)uint64_t v29 = *(unsigned char *)v30;
  *(void *)(v29 + 8) = *(void *)(v30 + 8);
  swift_retain();
  swift_release();
  uint64_t v31 = a3[10];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  void *v32 = *v33;
  v32[1] = v33[1];
  swift_retain();
  swift_release();
  uint64_t v34 = a3[11];
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (void *)(a2 + v34);
  *uint64_t v35 = *v36;
  v35[1] = v36[1];
  void v35[2] = v36[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for LiveSpeechHUDView_iOS(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  id v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_7AF4(&qword_D7E78);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_A6920();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
    {
      uint64_t v12 = sub_7AF4(&qword_D8598);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v7, v8, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v17 = sub_A6380();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v17 - 8) + 32))(v14, v15, v17);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  uint64_t v18 = a3[8];
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v18;
  uint64_t v21 = (long long *)(a2 + v18);
  long long v22 = *v21;
  *(unsigned char *)(v20 + 16) = *((unsigned char *)v21 + 16);
  *(_OWORD *)uint64_t v20 = v22;
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  uint64_t v23 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  *(void *)(v24 + 16) = *(void *)(v25 + 16);
  return a1;
}

uint64_t assignWithTake for LiveSpeechHUDView_iOS(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (a1 != a2)
  {
    uint64_t v7 = a3[6];
    id v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    sub_A35C(a1 + v7, &qword_D7E78);
    uint64_t v10 = sub_7AF4(&qword_D7E78);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = sub_A6920();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11))
      {
        uint64_t v13 = sub_7AF4(&qword_D8598);
        memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v8, v9, v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
    uint64_t v14 = a3[7];
    uint64_t v15 = (void *)(a1 + v14);
    uint64_t v16 = (const void *)(a2 + v14);
    sub_A35C(a1 + v14, &qword_D7E68);
    uint64_t v17 = sub_7AF4(&qword_D7E68);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = sub_A6380();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v18 - 8) + 32))(v15, v16, v18);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
  }
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  char v22 = *(unsigned char *)(v21 + 16);
  uint64_t v23 = *(void *)v20;
  uint64_t v24 = *(void *)(v20 + 8);
  char v25 = *(unsigned char *)(v20 + 16);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  *(unsigned char *)(v20 + 16) = v22;
  sub_63B60(v23, v24, v25);
  uint64_t v26 = a3[9];
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  *(unsigned char *)uint64_t v27 = *(unsigned char *)v28;
  *(void *)(v27 + 8) = *(void *)(v28 + 8);
  swift_release();
  uint64_t v29 = a3[10];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (void *)(a2 + v29);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  swift_release();
  uint64_t v32 = a3[11];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
  *(void *)(v33 + 16) = *(void *)(v34 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LiveSpeechHUDView_iOS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_72528);
}

uint64_t sub_72528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_7AF4(&qword_D85C0);
    uint64_t v10 = *(void *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == a2)
    {
      uint64_t v11 = v9;
      uint64_t v12 = a1 + *(int *)(a3 + 24);
      uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
      return v13(v12, a2, v11);
    }
    else
    {
      uint64_t v14 = sub_7AF4(&qword_D8EB0);
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
      uint64_t v16 = v14;
      uint64_t v17 = a1 + *(int *)(a3 + 28);
      return v15(v17, a2, v16);
    }
  }
}

uint64_t storeEnumTagSinglePayload for LiveSpeechHUDView_iOS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_7267C);
}

uint64_t sub_7267C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v8 = sub_7AF4(&qword_D85C0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_7AF4(&qword_D8EB0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 28);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_727B0()
{
  sub_27638();
  if (v0 <= 0x3F)
  {
    sub_359A0();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_728A4()
{
  return sub_A45C(&qword_D9F30, &qword_D9F38);
}

void *sub_728E0(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_7AF4(&qword_D7E68);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_A6380();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (void *)((char *)a1 + v9);
    uint64_t v12 = (void *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v13;
    uint64_t v14 = (void *)((char *)a1 + v10);
    uint64_t v15 = (void *)((char *)a2 + v10);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v17) = *((unsigned char *)a2 + v17);
    uint64_t v18 = a3[10];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
    uint64_t v19 = a3[12];
    *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    uint64_t v22 = a3[14];
    *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
    uint64_t v23 = (void *)((char *)a1 + v22);
    uint64_t v24 = (void *)((char *)a2 + v22);
    uint64_t v25 = v24[1];
    void *v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = a3[16];
    *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
    *(void *)((char *)a1 + v26) = *(void *)((char *)a2 + v26);
    uint64_t v27 = a3[18];
    *(void *)((char *)a1 + a3[17]) = *(void *)((char *)a2 + a3[17]);
    *(void *)((char *)a1 + v27) = *(void *)((char *)a2 + v27);
    uint64_t v28 = a3[20];
    uint64_t v32 = (char *)a2 + v28;
    uint64_t v33 = (char *)a1 + v28;
    *(void *)((char *)a1 + a3[19]) = *(void *)((char *)a2 + a3[19]);
    uint64_t v29 = sub_A6380();
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v30(v33, v32, v29);
  }
  return a1;
}

uint64_t sub_72B40(uint64_t a1, uint64_t a2)
{
  sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_A6380();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v5 = a1 + *(int *)(a2 + 80);
  uint64_t v6 = sub_A6380();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

void *sub_72C68(void *a1, void *a2, int *a3)
{
  sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_A6380();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)((char *)a1 + v7);
  uint64_t v10 = (void *)((char *)a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)((char *)a1 + v8);
  uint64_t v13 = (void *)((char *)a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
  uint64_t v16 = a3[10];
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *(void *)((char *)a1 + v16) = *(void *)((char *)a2 + v16);
  uint64_t v17 = a3[12];
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  *(void *)uint64_t v18 = *(void *)v19;
  unsigned char v18[8] = v19[8];
  uint64_t v20 = a3[14];
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = a3[16];
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  *(void *)((char *)a1 + v24) = *(void *)((char *)a2 + v24);
  uint64_t v25 = a3[18];
  *(void *)((char *)a1 + a3[17]) = *(void *)((char *)a2 + a3[17]);
  *(void *)((char *)a1 + v25) = *(void *)((char *)a2 + v25);
  uint64_t v26 = a3[20];
  uint64_t v30 = (char *)a2 + v26;
  uint64_t v31 = (char *)a1 + v26;
  *(void *)((char *)a1 + a3[19]) = *(void *)((char *)a2 + a3[19]);
  uint64_t v27 = sub_A6380();
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v28(v31, v30, v27);
  return a1;
}

void *sub_72E78(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_A35C((uint64_t)a1, &qword_D7E68);
    sub_7AF4(&qword_D7E68);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_A6380();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  swift_retain();
  swift_release();
  uint64_t v13 = a3[12];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = *(void *)v15;
  v14[8] = v15[8];
  *(void *)uint64_t v14 = v16;
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  swift_retain();
  swift_release();
  uint64_t v17 = a3[14];
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  *(void *)((char *)a1 + a3[16]) = *(void *)((char *)a2 + a3[16]);
  *(void *)((char *)a1 + a3[17]) = *(void *)((char *)a2 + a3[17]);
  *(void *)((char *)a1 + a3[18]) = *(void *)((char *)a2 + a3[18]);
  *(void *)((char *)a1 + a3[19]) = *(void *)((char *)a2 + a3[19]);
  uint64_t v21 = a3[20];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = sub_A6380();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 24))(v22, v23, v24);
  return a1;
}

char *sub_730E4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_A6380();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  uint64_t v9 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v9] = a2[v9];
  uint64_t v10 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  *(void *)&a1[v10] = *(void *)&a2[v10];
  uint64_t v11 = a3[12];
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[14];
  *(void *)&a1[a3[13]] = *(void *)&a2[a3[13]];
  *(_OWORD *)&a1[v14] = *(_OWORD *)&a2[v14];
  uint64_t v15 = a3[16];
  *(void *)&a1[a3[15]] = *(void *)&a2[a3[15]];
  *(void *)&a1[v15] = *(void *)&a2[v15];
  uint64_t v16 = a3[18];
  *(void *)&a1[a3[17]] = *(void *)&a2[a3[17]];
  *(void *)&a1[v16] = *(void *)&a2[v16];
  uint64_t v17 = a3[19];
  uint64_t v18 = a3[20];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)&a1[v17] = *(void *)&a2[v17];
  uint64_t v21 = sub_A6380();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
  return a1;
}

char *sub_73298(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_A35C((uint64_t)a1, &qword_D7E68);
    uint64_t v6 = sub_7AF4(&qword_D7E68);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_A6380();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  *(void *)uint64_t v9 = v12;
  *((void *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v17 = *(void *)v15;
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)uint64_t v14 = v17;
  *((void *)v14 + 1) = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v18] = a2[v18];
  uint64_t v19 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  *(void *)&a1[v19] = *(void *)&a2[v19];
  swift_release();
  *(void *)&a1[a3[11]] = *(void *)&a2[a3[11]];
  swift_release();
  uint64_t v20 = a3[12];
  uint64_t v21 = a3[13];
  uint64_t v22 = &a1[v20];
  uint64_t v23 = &a2[v20];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  *(void *)&a1[v21] = *(void *)&a2[v21];
  swift_release();
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  swift_release();
  uint64_t v24 = a3[16];
  *(void *)&a1[a3[15]] = *(void *)&a2[a3[15]];
  *(void *)&a1[v24] = *(void *)&a2[v24];
  uint64_t v25 = a3[18];
  *(void *)&a1[a3[17]] = *(void *)&a2[a3[17]];
  *(void *)&a1[v25] = *(void *)&a2[v25];
  uint64_t v26 = a3[20];
  *(void *)&a1[a3[19]] = *(void *)&a2[a3[19]];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  uint64_t v29 = sub_A6380();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 40))(v27, v28, v29);
  return a1;
}

uint64_t sub_734B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_734C4);
}

uint64_t sub_734C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_7AF4(&qword_D8EB0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 40));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = sub_A6380();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 80);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_735F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_73608);
}

uint64_t sub_73608(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_7AF4(&qword_D8EB0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 40)) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = sub_A6380();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 80);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t type metadata accessor for HUDButton(uint64_t a1)
{
  return sub_1182C(a1, qword_D9F98);
}

void sub_73758()
{
  sub_359A0();
  if (v0 <= 0x3F)
  {
    sub_A6380();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

ValueMetadata *type metadata accessor for AccessibilityHudListStyleModifier()
{
  return &type metadata for AccessibilityHudListStyleModifier;
}

uint64_t sub_73890()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_738AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v71 = a1;
  uint64_t v3 = sub_A6480();
  uint64_t v69 = *(void *)(v3 - 8);
  uint64_t v70 = v3;
  __chkstk_darwin(v3);
  char v68 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_A6740();
  uint64_t v66 = *(void *)(v5 - 8);
  uint64_t v67 = v5;
  __chkstk_darwin(v5);
  id v65 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_7AF4(&qword_DA038);
  __chkstk_darwin(v57);
  uint64_t v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = type metadata accessor for HUDButton(0);
  uint64_t v9 = *(void *)(v73 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v73);
  uint64_t v11 = sub_7AF4(&qword_DA040);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = sub_7AF4(&qword_DA048);
  __chkstk_darwin(v72);
  uint64_t v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_7AF4(&qword_DA050);
  uint64_t v58 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v74 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_7AF4(&qword_DA058);
  __chkstk_darwin(v18 - 8);
  id v60 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_7AF4(&qword_DA060);
  __chkstk_darwin(v62);
  uint64_t v64 = (uint64_t)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_7AF4(&qword_DA068);
  uint64_t v63 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  id v61 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_759CC(v2, (uint64_t)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for HUDButton);
  unint64_t v23 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v24 = swift_allocObject();
  sub_75BDC((uint64_t)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v24 + v23, type metadata accessor for HUDButton);
  uint64_t v76 = v2;
  sub_7AF4(&qword_DA070);
  sub_A45C(&qword_DA078, &qword_DA070);
  uint64_t v25 = v2;
  uint64_t v26 = v72;
  uint64_t v27 = v73;
  sub_A6ED0();
  uint64_t v28 = *(int *)(v27 + 52);
  uint64_t v75 = v25;
  uint64_t v29 = *(void *)(v25 + v28);
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v16, v14, v11);
  uint64_t v31 = (uint64_t *)&v16[*(int *)(v26 + 36)];
  uint64_t *v31 = KeyPath;
  v31[1] = v29;
  uint64_t v32 = *(void (**)(char *, uint64_t))(v12 + 8);
  swift_retain();
  v32(v14, v11);
  uint64_t v33 = enum case for DynamicTypeSize.xxxLarge(_:);
  uint64_t v34 = sub_A6380();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 104))(v8, v33, v34);
  sub_75D80(&qword_DA080, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  uint64_t result = sub_A7190();
  if (result)
  {
    uint64_t v56 = v21;
    unint64_t v36 = sub_75DC8();
    uint64_t v37 = sub_A45C(&qword_DA098, &qword_DA038);
    uint64_t v38 = v57;
    sub_A6C10();
    sub_A35C((uint64_t)v8, &qword_DA038);
    sub_A35C((uint64_t)v16, &qword_DA048);
    uint64_t v39 = *(int *)(v27 + 36);
    if (*(unsigned char *)(v75 + v39) == 1)
    {
      sub_7AF4(&qword_D9018);
      uint64_t v40 = v66;
      uint64_t v41 = swift_allocObject();
      *(_OWORD *)(v41 + 16) = xmmword_A9DC0;
      sub_A6730();
      sub_A66F0();
      uint64_t v77 = v41;
      sub_75D80(&qword_D9020, (void (*)(uint64_t))&type metadata accessor for AccessibilityTraits);
      sub_7AF4(&qword_D9028);
      sub_A45C(&qword_D9030, &qword_D9028);
      uint64_t v42 = v65;
      uint64_t v43 = v67;
      sub_A7640();
    }
    else
    {
      uint64_t v42 = v65;
      sub_A6730();
      uint64_t v40 = v66;
      uint64_t v43 = v67;
    }
    uint64_t v77 = v26;
    uint64_t v78 = v38;
    unint64_t v79 = v36;
    uint64_t v80 = v37;
    swift_getOpaqueTypeConformance2();
    uint64_t v44 = (uint64_t)v60;
    uint64_t v45 = v59;
    uint64_t v46 = v74;
    sub_A6C90();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v43);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v46, v45);
    if (*(unsigned char *)(v75 + v39) == 1) {
      uint64_t v47 = sub_A6D80();
    }
    else {
      uint64_t v47 = sub_A6DD0();
    }
    uint64_t v48 = v47;
    uint64_t v49 = v56;
    uint64_t v50 = swift_getKeyPath();
    uint64_t v51 = v64;
    sub_8860(v44, v64, &qword_DA058);
    uint64_t v52 = (uint64_t *)(v51 + *(int *)(v62 + 36));
    *uint64_t v52 = v50;
    v52[1] = v48;
    sub_A35C(v44, &qword_DA058);
    uint64_t v53 = v68;
    sub_A6470();
    sub_75E94();
    sub_75D80(&qword_DA0B0, (void (*)(uint64_t))&type metadata accessor for PlainButtonStyle);
    uint64_t v54 = v61;
    uint64_t v55 = v70;
    sub_A6B90();
    (*(void (**)(char *, uint64_t))(v69 + 8))(v53, v55);
    sub_A35C(v51, &qword_DA060);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v63 + 32))(v71, v54, v49);
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_7426C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v50 = sub_A6F30();
  __chkstk_darwin(v50);
  uint64_t v49 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_A6490();
  __chkstk_darwin(v48);
  uint64_t v47 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for HUDButton(0);
  uint64_t v7 = (int *)v6;
  uint64_t v8 = *(void *)(a1 + *(int *)(v6 + 44));
  uint64_t v9 = 60;
  if (!v8) {
    uint64_t v9 = 64;
  }
  uint64_t v55 = *(void *)(a1 + *(int *)(v6 + v9));
  uint64_t v54 = sub_A66A0();
  sub_74728(a1, (double *)v57);
  unsigned __int8 v10 = sub_A6A40();
  unsigned __int8 v11 = sub_A6A60();
  char v12 = sub_A6A50();
  sub_A6A50();
  if (sub_A6A50() != v10) {
    char v12 = sub_A6A50();
  }
  sub_A6A50();
  if (sub_A6A50() != v11) {
    char v12 = sub_A6A50();
  }
  if (!v8) {
    sub_74CA0();
  }
  sub_A6140();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  if (!*(void *)(a1 + v7[6] + 8) && (*(unsigned char *)(a1 + v7[12] + 8) & 1) != 0) {
    sub_74ED0();
  }
  if (*(unsigned char *)(a1 + v7[12] + 8)) {
    sub_74ED0();
  }
  sub_A7030();
  sub_A6270();
  uint64_t v21 = v58;
  char v22 = v59;
  uint64_t v23 = v60;
  int v53 = v61;
  long long v52 = v62;
  if (*(unsigned char *)(a1 + v7[9]) == 1)
  {
    uint64_t v51 = sub_A6DA0();
  }
  else
  {
    uint64_t v51 = *(void *)(a1 + v7[10]);
    swift_retain();
  }
  if (*(unsigned char *)(a1 + v7[7]) == 1)
  {
    uint64_t v24 = *(int *)(v48 + 20);
    uint64_t v50 = v23;
    char v25 = v22;
    uint64_t v26 = v21;
    uint64_t v27 = v47;
    uint64_t v28 = &v47[v24];
    uint64_t v29 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v30 = sub_A66E0();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 104))(v28, v29, v30);
    __asm { FMOV            V0.2D, #12.0 }
    *uint64_t v27 = _Q0;
    sub_75D80(&qword_D9960, (void (*)(uint64_t))&type metadata accessor for RoundedRectangle);
    uint64_t v21 = v26;
    char v22 = v25;
    uint64_t v23 = v50;
  }
  else
  {
    uint64_t v36 = enum case for RoundedCornerStyle.continuous(_:);
    uint64_t v37 = sub_A66E0();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 104))(v49, v36, v37);
    sub_75D80(&qword_DA0B8, (void (*)(uint64_t))&type metadata accessor for Capsule);
  }
  uint64_t v38 = sub_A6F90();
  *(_OWORD *)((char *)&v56[4] + 7) = v57[4];
  *(_OWORD *)((char *)&v56[5] + 7) = v57[5];
  *(_OWORD *)((char *)&v56[6] + 7) = v57[6];
  *(_OWORD *)((char *)&v56[7] + 7) = v57[7];
  *(_OWORD *)((char *)v56 + 7) = v57[0];
  *(_OWORD *)((char *)&v56[1] + 7) = v57[1];
  *(_OWORD *)((char *)&v56[2] + 7) = v57[2];
  *(_OWORD *)((char *)&v56[3] + 7) = v57[3];
  long long v39 = v56[4];
  *(_OWORD *)(a2 + 97) = v56[5];
  long long v40 = v56[7];
  *(_OWORD *)(a2 + 113) = v56[6];
  *(_OWORD *)(a2 + 129) = v40;
  long long v41 = v56[0];
  *(_OWORD *)(a2 + 33) = v56[1];
  long long v42 = v56[3];
  *(_OWORD *)(a2 + 49) = v56[2];
  *(_OWORD *)(a2 + 65) = v42;
  *(_OWORD *)(a2 + 81) = v39;
  char v43 = v53;
  uint64_t v44 = v55;
  *(void *)a2 = v54;
  *(void *)(a2 + 8) = v44;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 144) = *(void *)((char *)&v56[7] + 15);
  *(_OWORD *)(a2 + 17) = v41;
  *(unsigned char *)(a2 + 152) = v12;
  *(void *)(a2 + 160) = v14;
  *(void *)(a2 + 168) = v16;
  *(void *)(a2 + 176) = v18;
  *(void *)(a2 + 184) = v20;
  *(unsigned char *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = v21;
  *(unsigned char *)(a2 + 208) = v22;
  *(void *)(a2 + 216) = v23;
  *(unsigned char *)(a2 + 224) = v43;
  double result = *(double *)&v52;
  *(_OWORD *)(a2 + 232) = v52;
  *(void *)(a2 + 248) = v51;
  *(void *)(a2 + 256) = v38;
  *(_WORD *)(a2 + 264) = 256;
  return result;
}

uint64_t sub_74728@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v58 = sub_A6380();
  uint64_t v4 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v56 = (uint64_t)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v57 = (uint64_t)&v55 - v7;
  uint64_t v8 = (int *)type metadata accessor for HUDButton(0);
  __chkstk_darwin(v8);
  unsigned __int8 v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + *(int *)(v11 + 20) + 8))
  {
    swift_bridgeObjectRetain();
    uint64_t v71 = sub_A6E30();
    uint64_t v12 = *(void *)(a1 + v8[11]);
    uint64_t v55 = v4;
    if (v12)
    {
      if (*(unsigned char *)(a1 + v8[12] + 8)) {
        sub_74ED0();
      }
      uint64_t v14 = v10;
    }
    else
    {
      uint64_t v14 = v10;
    }
    uint64_t v15 = a1 + v8[12];
    int v16 = *(unsigned __int8 *)(v15 + 8);
    double v17 = *(double *)v15;
    if (v16 == 1) {
      sub_74ED0();
    }
    sub_A7030();
    sub_A6270();
    uint64_t v65 = v75;
    uint64_t v66 = v74;
    uint64_t v63 = v77;
    uint64_t v64 = v76;
    uint64_t v70 = v79;
    uint64_t v18 = *(unsigned __int8 *)(a1 + v8[8]);
    uint64_t v68 = v78;
    uint64_t v69 = v18;
    double v13 = v17;
    if (v16) {
      double v13 = sub_74ED0();
    }
    uint64_t v19 = v12;
    unsigned __int8 v10 = v14;
    if (!v12) {
      uint64_t v19 = sub_A6D90();
    }
    uint64_t v62 = v19;
    swift_retain();
    uint64_t v4 = v55;
  }
  else
  {
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    double v13 = 0.0;
    uint64_t v62 = 0;
  }
  uint64_t v20 = (uint64_t *)(a1 + v8[6]);
  uint64_t v21 = v20[1];
  if (v21)
  {
    uint64_t v72 = *v20;
    uint64_t v73 = v21;
    sub_FF30();
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_A6B60();
    uint64_t v60 = v23;
    uint64_t v61 = v22;
    uint64_t v59 = v24;
    uint64_t v26 = v25 & 1;
    __int16 v27 = 1;
  }
  else
  {
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v26 = 0;
    uint64_t v59 = 0;
    __int16 v27 = 0;
  }
  int v28 = *(unsigned __int8 *)(a1 + v8[8]);
  sub_759CC(a1, (uint64_t)v10, type metadata accessor for HUDButton);
  double v67 = v13;
  if (v28 == 1)
  {
    uint64_t v29 = v56;
    sub_53C54(v56);
    uint64_t v30 = &v10[v8[20]];
    char v31 = sub_A6370();
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    uint64_t v33 = v29;
    uint64_t v34 = (uint64_t)v10;
    uint64_t v35 = v58;
    v32(v33, v58);
    if (v31)
    {
      uint64_t v36 = v57;
      sub_53C54(v57);
      uint64_t v37 = v36;
    }
    else
    {
      uint64_t v37 = v57;
      (*(void (**)(uint64_t, char *, uint64_t))(v4 + 16))(v57, v30, v35);
    }
    sub_75D80(&qword_DA080, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
    uint64_t v39 = v35;
    uint64_t v40 = v37;
    char v41 = sub_A7190();
    v32(v40, v39);
    sub_76184(v34, type metadata accessor for HUDButton);
    if (v41) {
      uint64_t v38 = 0;
    }
    else {
      uint64_t v38 = sub_A6E30();
    }
    double v13 = v67;
  }
  else
  {
    sub_76184((uint64_t)v10, type metadata accessor for HUDButton);
    uint64_t v38 = 0;
  }
  uint64_t v42 = v71;
  uint64_t v44 = v65;
  uint64_t v43 = v66;
  *(void *)a2 = v71;
  *((void *)a2 + 1) = v43;
  uint64_t v46 = v63;
  uint64_t v45 = v64;
  *((void *)a2 + 2) = v44;
  *((void *)a2 + 3) = v45;
  uint64_t v47 = v68;
  *((void *)a2 + 4) = v46;
  *((void *)a2 + 5) = v47;
  uint64_t v68 = v47;
  uint64_t v48 = v70;
  *((void *)a2 + 6) = v70;
  uint64_t v70 = v48;
  uint64_t v71 = v42;
  uint64_t v49 = v69;
  *((void *)a2 + 7) = v69;
  a2[8] = v13;
  uint64_t v69 = v49;
  uint64_t v50 = a2;
  *((void *)a2 + 9) = v62;
  uint64_t v52 = v60;
  uint64_t v51 = v61;
  *((void *)v50 + 10) = v61;
  *((void *)v50 + 11) = v52;
  uint64_t v53 = v59;
  *((void *)v50 + 12) = v26;
  *((void *)v50 + 13) = v53;
  *((_WORD *)v50 + 56) = v27;
  *((void *)v50 + 15) = v38;
  sub_76064(v42);
  sub_760A4(v51, v52, v26, v53);
  sub_760E8(v51, v52, v26, v53);
  return sub_7612C(v71);
}

double sub_74CA0()
{
  uint64_t v1 = sub_A6380();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v19 - v6;
  if (qword_D7DD8 != -1) {
    swift_once();
  }
  id v20 = [objc_allocWithZone((Class)UIFontMetrics) initForTextStyle:qword_DF638];
  sub_53C54((uint64_t)v4);
  uint64_t v8 = type metadata accessor for HUDButton(0);
  uint64_t v9 = v0 + *(int *)(v8 + 80);
  char v10 = sub_A6370();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v2 + 8);
  v11(v4, v1);
  if (v10) {
    sub_53C54((uint64_t)v7);
  }
  else {
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v7, v9, v1);
  }
  double v12 = *(double *)(v0 + *(int *)(v8 + 72));
  double v13 = sub_75128();
  id v14 = [self traitCollectionWithPreferredContentSizeCategory:v13];

  id v15 = v20;
  [v20 scaledValueForValue:v14 compatibleWithTraitCollection:v12];
  double v17 = v16;

  v11(v7, v1);
  return v17;
}

double sub_74ED0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_A6380();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v20 - v7;
  if (qword_D7DD8 != -1) {
    swift_once();
  }
  id v21 = [objc_allocWithZone((Class)UIFontMetrics) initForTextStyle:qword_DF638];
  sub_53C54((uint64_t)v5);
  uint64_t v9 = (int *)type metadata accessor for HUDButton(0);
  uint64_t v10 = v0 + v9[20];
  char v11 = sub_A6370();
  double v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v5, v2);
  if (v11) {
    sub_53C54((uint64_t)v8);
  }
  else {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v8, v10, v2);
  }
  double v13 = *(double *)(v1 + v9[17]);
  id v14 = sub_75128();
  id v15 = [self traitCollectionWithPreferredContentSizeCategory:v14];

  id v16 = v21;
  [v21 scaledValueForValue:v15 compatibleWithTraitCollection:v13];
  double v18 = v17;

  v12(v8, v2);
  if (*(unsigned char *)(v1 + v9[7]) == 1) {
    return v18 + *(double *)(v1 + v9[19]);
  }
  return v18;
}

NSString *sub_75128()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_A6380();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))(v6, v1, v2, v4);
  int v7 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
  if (v7 == enum case for DynamicTypeSize.xSmall(_:))
  {
    uint64_t v8 = &UIContentSizeCategoryExtraSmall;
  }
  else if (v7 == enum case for DynamicTypeSize.small(_:))
  {
    uint64_t v8 = &UIContentSizeCategorySmall;
  }
  else if (v7 == enum case for DynamicTypeSize.medium(_:))
  {
    uint64_t v8 = &UIContentSizeCategoryMedium;
  }
  else if (v7 == enum case for DynamicTypeSize.large(_:))
  {
    uint64_t v8 = &UIContentSizeCategoryLarge;
  }
  else if (v7 == enum case for DynamicTypeSize.xLarge(_:))
  {
    uint64_t v8 = &UIContentSizeCategoryExtraLarge;
  }
  else if (v7 == enum case for DynamicTypeSize.xxLarge(_:))
  {
    uint64_t v8 = &UIContentSizeCategoryExtraExtraLarge;
  }
  else if (v7 == enum case for DynamicTypeSize.xxxLarge(_:))
  {
    uint64_t v8 = &UIContentSizeCategoryExtraExtraExtraLarge;
  }
  else if (v7 == enum case for DynamicTypeSize.accessibility1(_:))
  {
    uint64_t v8 = &UIContentSizeCategoryAccessibilityMedium;
  }
  else if (v7 == enum case for DynamicTypeSize.accessibility2(_:))
  {
    uint64_t v8 = &UIContentSizeCategoryAccessibilityLarge;
  }
  else if (v7 == enum case for DynamicTypeSize.accessibility3(_:))
  {
    uint64_t v8 = &UIContentSizeCategoryAccessibilityExtraLarge;
  }
  else if (v7 == enum case for DynamicTypeSize.accessibility4(_:))
  {
    uint64_t v8 = &UIContentSizeCategoryAccessibilityExtraExtraLarge;
  }
  else
  {
    if (v7 != enum case for DynamicTypeSize.accessibility5(_:))
    {
      char v11 = *(void (**)(char *, uint64_t))(v3 + 8);
      double v12 = UIContentSizeCategoryMedium;
      v11(v6, v2);
      return v12;
    }
    uint64_t v8 = &UIContentSizeCategoryAccessibilityExtraExtraExtraLarge;
  }
  UIContentSizeCategory v9 = *v8;

  return v9;
}

uint64_t sub_753EC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_75408@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v31 = a1;
  uint64_t v32 = a4;
  uint64_t v6 = sub_7AF4(&qword_DA5A8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  UIContentSizeCategory v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_7AF4(&qword_DA5B0);
  __chkstk_darwin(v10);
  double v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_7AF4(&qword_DA5B8);
  __n128 v14 = __chkstk_darwin(v13);
  id v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_retain();
    sub_A7030();
    sub_A6270();
    char v17 = v34;
    uint64_t v29 = v35;
    uint64_t v30 = v33;
    int v28 = v36;
    uint64_t v26 = v38;
    uint64_t v27 = v37;
    uint64_t v18 = sub_A7030();
    uint64_t v20 = v19;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v31, v6);
    id v21 = &v16[*(int *)(v13 + 36)];
    *(void *)id v21 = a3;
    *((_WORD *)v21 + 4) = 256;
    *((void *)v21 + 2) = v30;
    v21[24] = v17;
    *((void *)v21 + 4) = v29;
    v21[40] = v28;
    uint64_t v22 = v26;
    *((void *)v21 + 6) = v27;
    *((void *)v21 + 7) = v22;
    *((void *)v21 + 8) = v18;
    *((void *)v21 + 9) = v20;
    sub_8860((uint64_t)v16, (uint64_t)v12, &qword_DA5B8);
    swift_storeEnumTagMultiPayload();
    sub_78220();
    sub_A45C(&qword_DA5C8, &qword_DA5A8);
    sub_A6860();
    return sub_A35C((uint64_t)v16, &qword_DA5B8);
  }
  else
  {
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16);
    v24(v9, v31, v6, v14);
    ((void (*)(char *, char *, uint64_t))v24)(v12, v9, v6);
    swift_storeEnumTagMultiPayload();
    sub_78220();
    sub_A45C(&qword_DA5C8, &qword_DA5A8);
    sub_A6860();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t sub_75778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_75408(a1, *(unsigned char *)v2, *(void *)(v2 + 16), a2);
}

uint64_t sub_75788@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_7AF4(&qword_DA010);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_7AF4(&qword_DA018);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  UIContentSizeCategory v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A6230();
  sub_7AF4(&qword_DA020);
  sub_A45C(&qword_DA028, &qword_DA020);
  sub_A6C20();
  v13[1] = sub_A6D90();
  swift_retain();
  uint64_t v10 = sub_A6EF0();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v9, v5, v2);
  swift_release();
  *(void *)&v9[*(int *)(v7 + 44)] = v10;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_8860((uint64_t)v9, a1, &qword_DA018);
  uint64_t v11 = a1 + *(int *)(sub_7AF4(&qword_DA030) + 36);
  *(unsigned char *)(v11 + 32) = 0;
  *(_OWORD *)uint64_t v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  return sub_A35C((uint64_t)v9, &qword_DA018);
}

uint64_t sub_759AC()
{
  return sub_A6260();
}

uint64_t sub_759CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_75A34()
{
  uint64_t v1 = type metadata accessor for HUDButton(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_A6380();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3 + *(int *)(v1 + 80);
  uint64_t v7 = sub_A6380();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_75BDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_75C44()
{
  uint64_t v1 = type metadata accessor for HUDButton(0);
  return (*(uint64_t (**)(void))(v0
                              + *(int *)(v1 + 56)
                              + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80))))();
}

void *sub_75CB0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  char v4 = sub_A69D0();
  sub_7426C(v3, (uint64_t)__src);
  memcpy(&v7[7], __src, 0x10AuLL);
  *a1 = v4;
  return memcpy(a1 + 1, v7, 0x111uLL);
}

uint64_t sub_75D20@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_A6610();
  *a1 = result & 1;
  return result;
}

uint64_t sub_75D50()
{
  return sub_A6620();
}

uint64_t sub_75D80(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_75DC8()
{
  unint64_t result = qword_DA088;
  if (!qword_DA088)
  {
    sub_7C5C(&qword_DA048);
    sub_A45C(&qword_DA090, &qword_DA040);
    sub_A45C(&qword_D9718, &qword_D9720);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA088);
  }
  return result;
}

unint64_t sub_75E94()
{
  unint64_t result = qword_DA0A0;
  if (!qword_DA0A0)
  {
    sub_7C5C(&qword_DA060);
    sub_75F34();
    sub_A45C(&qword_D83D8, &qword_D83E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA0A0);
  }
  return result;
}

unint64_t sub_75F34()
{
  unint64_t result = qword_DA0A8;
  if (!qword_DA0A8)
  {
    sub_7C5C(&qword_DA058);
    sub_7C5C(&qword_DA048);
    sub_7C5C(&qword_DA038);
    sub_75DC8();
    sub_A45C(&qword_DA098, &qword_DA038);
    swift_getOpaqueTypeConformance2();
    sub_75D80(&qword_D83F0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA0A8);
  }
  return result;
}

uint64_t sub_76064(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_760A4(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_4D230(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_760E8(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_10024(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_7612C(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_76184(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_761F0()
{
  uint64_t v1 = (int *)type metadata accessor for LiveSpeechHUDView_iOS(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  swift_release();

  uint64_t v6 = v0 + v3 + v1[6];
  sub_7AF4(&qword_D7E78);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_A6920();
    uint64_t v8 = *(void *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v9 = v5 + v1[7];
  sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_A6380();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }
  sub_63B60(*(void *)(v5 + v1[8]), *(void *)(v5 + v1[8] + 8), *(unsigned char *)(v5 + v1[8] + 16));
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_7642C()
{
  uint64_t v2 = *(void *)(type metadata accessor for LiveSpeechHUDView_iOS(0) - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_2C168;
  return sub_65F40(v3);
}

uint64_t sub_764F8()
{
  uint64_t v1 = (int *)type metadata accessor for LiveSpeechHUDView_iOS(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v15 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v16 = sub_A62C0();
  uint64_t v4 = *(void *)(v16 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v14 = *(void *)(v4 + 64);
  uint64_t v6 = v0 + v3;
  swift_release();

  uint64_t v7 = v0 + v3 + v1[6];
  sub_7AF4(&qword_D7E78);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_A6920();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v10 = v6 + v1[7];
  sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = sub_A6380();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  else
  {
    swift_release();
  }
  uint64_t v12 = (v3 + v15 + v5) & ~v5;
  sub_63B60(*(void *)(v6 + v1[8]), *(void *)(v6 + v1[8] + 8), *(unsigned char *)(v6 + v1[8] + 16));
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v12, v16);

  return _swift_deallocObject(v0, v12 + v14, v2 | v5 | 7);
}

uint64_t sub_767C8()
{
  uint64_t v1 = *(void *)(type metadata accessor for LiveSpeechHUDView_iOS(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_A62C0();

  return sub_6615C(v0 + v2);
}

unint64_t sub_76894()
{
  unint64_t result = qword_DA160;
  if (!qword_DA160)
  {
    sub_7C5C(&qword_DA118);
    sub_77D5C(&qword_DA168, &qword_DA110, (void (*)(void))sub_7696C);
    sub_75D80(&qword_DA1C8, (void (*)(uint64_t))&type metadata accessor for _TaskModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA160);
  }
  return result;
}

uint64_t sub_7696C()
{
  return sub_77D5C(&qword_DA170, &qword_DA108, (void (*)(void))sub_7699C);
}

unint64_t sub_7699C()
{
  unint64_t result = qword_DA178;
  if (!qword_DA178)
  {
    sub_7C5C(&qword_DA100);
    sub_77D5C(&qword_DA180, &qword_DA0F8, (void (*)(void))sub_76A68);
    sub_A45C(&qword_DA1C0, &qword_DA140);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA178);
  }
  return result;
}

unint64_t sub_76A68()
{
  unint64_t result = qword_DA188;
  if (!qword_DA188)
  {
    sub_7C5C(&qword_DA0F0);
    sub_76B08();
    sub_A45C(&qword_DA1B0, &qword_DA1B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA188);
  }
  return result;
}

unint64_t sub_76B08()
{
  unint64_t result = qword_DA190;
  if (!qword_DA190)
  {
    sub_7C5C(&qword_DA0E0);
    sub_A45C(&qword_DA198, &qword_DA0E8);
    sub_A45C(&qword_DA1A0, &qword_DA1A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA190);
  }
  return result;
}

uint64_t sub_76BD8()
{
  return sub_77120((uint64_t (*)(uint64_t))sub_65B94);
}

uint64_t sub_76BF0()
{
  return sub_76E94(&qword_DA218, &qword_DA200, (void (*)(void))sub_76C2C, (void (*)(void))sub_76CF4);
}

uint64_t sub_76C2C()
{
  return sub_77D5C(&qword_DA220, &qword_D9AE8, (void (*)(void))sub_76C5C);
}

unint64_t sub_76C5C()
{
  unint64_t result = qword_DA228;
  if (!qword_DA228)
  {
    sub_7C5C(&qword_D9AE0);
    sub_A45C(&qword_DA230, &qword_DA238);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA228);
  }
  return result;
}

uint64_t sub_76CF4()
{
  return sub_77D5C(&qword_DA240, &qword_D9AF8, (void (*)(void))sub_76D24);
}

unint64_t sub_76D24()
{
  unint64_t result = qword_DA248;
  if (!qword_DA248)
  {
    sub_7C5C(&qword_D9AF0);
    sub_76D98();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA248);
  }
  return result;
}

unint64_t sub_76D98()
{
  unint64_t result = qword_DA250;
  if (!qword_DA250)
  {
    sub_7C5C(&qword_DA258);
    sub_A45C(&qword_DA260, &qword_DA268);
    sub_A45C(&qword_DA270, &qword_DA278);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA250);
  }
  return result;
}

uint64_t sub_76E58()
{
  return sub_76E94(&qword_DA280, &qword_DA1E8, (void (*)(void))sub_76C5C, (void (*)(void))sub_76D24);
}

uint64_t sub_76E94(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_7C5C(a2);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_76F1C()
{
  unint64_t result = qword_DA2F0;
  if (!qword_DA2F0)
  {
    sub_7C5C(&qword_DA2C0);
    sub_A45C(&qword_DA2F8, &qword_DA2C8);
    sub_76FBC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA2F0);
  }
  return result;
}

unint64_t sub_76FBC()
{
  unint64_t result = qword_DA300;
  if (!qword_DA300)
  {
    sub_7C5C(&qword_DA2A8);
    sub_A45C(&qword_DA308, &qword_DA2A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA300);
  }
  return result;
}

uint64_t sub_7705C@<X0>(uint64_t a1@<X8>)
{
  return sub_7047C(*(void *)(v1 + 16), a1);
}

unint64_t sub_77064()
{
  unint64_t result = qword_DA348;
  if (!qword_DA348)
  {
    sub_7C5C(&qword_DA340);
    sub_A45C(&qword_DA350, &qword_DA358);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA348);
  }
  return result;
}

uint64_t sub_77108()
{
  return sub_77120((uint64_t (*)(uint64_t))sub_6CF44);
}

uint64_t sub_77120(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for LiveSpeechHUDView_iOS(0) - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

uint64_t sub_77198@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for LiveSpeechHUDView_iOS(0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_70AE0(a1, v6, a2);
}

unint64_t sub_77218()
{
  unint64_t result = qword_DA398;
  if (!qword_DA398)
  {
    sub_7C5C(&qword_DA388);
    sub_75D80(&qword_D9C00, (void (*)(uint64_t))type metadata accessor for HUDButton);
    sub_A45C(&qword_DA3A0, &qword_DA3A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA398);
  }
  return result;
}

uint64_t sub_772E8()
{
  uint64_t v1 = (int *)type metadata accessor for LiveSpeechHUDView_iOS(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = v0 + v3;
  swift_release();

  uint64_t v6 = v0 + v3 + v1[6];
  sub_7AF4(&qword_D7E78);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_A6920();
    uint64_t v8 = *(void *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v9 = v5 + v1[7];
  sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_A6380();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  }
  else
  {
    swift_release();
  }
  unint64_t v11 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_63B60(*(void *)(v5 + v1[8]), *(void *)(v5 + v1[8] + 8), *(unsigned char *)(v5 + v1[8] + 16));
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v11 + 8, v2 | 7);
}

uint64_t sub_77538()
{
  uint64_t v1 = *(void *)(type metadata accessor for LiveSpeechHUDView_iOS(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void **)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_713BC(v0 + v2, v3);
}

uint64_t sub_775CC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_A6610();
  *a1 = result & 1;
  return result;
}

uint64_t sub_775FC()
{
  return sub_A6620();
}

uint64_t sub_77624()
{
  return _swift_deallocObject(v0, 17, 7);
}

unsigned char *sub_77634(unsigned char *result)
{
  *result &= ~*(unsigned char *)(v1 + 16) & 1;
  return result;
}

void *sub_7764C(void *result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6)
{
  if (a5)
  {
    char v8 = a4 & 1;
    id v9 = result;
    sub_614F8(a3, v8);
    id v10 = a6;
    return (void *)swift_retain();
  }
  return result;
}

void sub_776B0(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6)
{
  if (a5)
  {
    char v7 = a4 & 1;

    sub_5401C(a3, v7);
    swift_release();
  }
}

uint64_t sub_77724()
{
  return sub_77120(sub_6D284);
}

unint64_t sub_77744()
{
  unint64_t result = qword_DA420;
  if (!qword_DA420)
  {
    sub_7C5C(&qword_DA3F8);
    sub_75D80(&qword_D9C00, (void (*)(uint64_t))type metadata accessor for HUDButton);
    sub_A45C(&qword_DA428, &qword_DA3E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA420);
  }
  return result;
}

unint64_t sub_77814()
{
  unint64_t result = qword_DA430;
  if (!qword_DA430)
  {
    sub_7C5C(&qword_D9BF8);
    sub_75D80(&qword_D9C00, (void (*)(uint64_t))type metadata accessor for HUDButton);
    sub_75D80(&qword_D83F0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA430);
  }
  return result;
}

uint64_t sub_778FC()
{
  return sub_7791C((uint64_t)&unk_D11C0, (uint64_t)&unk_DA440);
}

uint64_t sub_7791C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for LiveSpeechHUDView_iOS(0) - 8);
  return sub_6F600(v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a1, a2);
}

uint64_t sub_77994(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  char v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_2C328;
  return sub_843D4(a1, v4, v5, v6);
}

uint64_t sub_77A4C()
{
  return sub_77120((uint64_t (*)(uint64_t))sub_6F1D0);
}

uint64_t sub_77A68()
{
  return sub_7791C((uint64_t)&unk_D1238, (uint64_t)&unk_D9C10);
}

uint64_t sub_77A90()
{
  return sub_77120(sub_6F28C);
}

uint64_t sub_77AB4()
{
  return sub_77120(sub_6F788);
}

uint64_t sub_77AD0()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_77B10(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  char v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_2C328;
  return sub_846E8(a1, v4, v5, v6);
}

uint64_t sub_77BC8()
{
  return sub_77120(sub_6FD6C);
}

uint64_t sub_77BFC()
{
  return sub_77120(sub_6E43C);
}

unint64_t sub_77C14()
{
  unint64_t result = qword_DA4A0;
  if (!qword_DA4A0)
  {
    sub_7C5C(&qword_DA490);
    sub_A45C(&qword_DA4A8, &qword_DA488);
    sub_A45C(&qword_DA4B0, &qword_DA470);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA4A0);
  }
  return result;
}

unint64_t sub_77CD8()
{
  unint64_t result = qword_DA540;
  if (!qword_DA540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA540);
  }
  return result;
}

uint64_t sub_77D2C()
{
  return sub_77D5C(&qword_DA548, &qword_DA298, (void (*)(void))sub_77DD8);
}

uint64_t sub_77D5C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_7C5C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_77DD8()
{
  unint64_t result = qword_DA550;
  if (!qword_DA550)
  {
    sub_7C5C(&qword_DA290);
    sub_A45C(&qword_DA558, &qword_DA560);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA550);
  }
  return result;
}

void sub_77E70()
{
}

uint64_t assignWithCopy for AccessibilityConditionalIconBackground(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AccessibilityConditionalIconBackground(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityConditionalIconBackground(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityConditionalIconBackground(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityConditionalIconBackground()
{
  return &type metadata for AccessibilityConditionalIconBackground;
}

unint64_t sub_77FB8()
{
  unint64_t result = qword_DA578;
  if (!qword_DA578)
  {
    sub_7C5C(&qword_DA030);
    sub_78058();
    sub_A45C(&qword_DA598, &qword_DA5A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA578);
  }
  return result;
}

unint64_t sub_78058()
{
  unint64_t result = qword_DA580;
  if (!qword_DA580)
  {
    sub_7C5C(&qword_DA018);
    sub_7C5C(&qword_DA020);
    sub_A45C(&qword_DA028, &qword_DA020);
    swift_getOpaqueTypeConformance2();
    sub_A45C(&qword_DA588, &qword_DA590);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA580);
  }
  return result;
}

uint64_t sub_78158()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_78204()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_78220()
{
  unint64_t result = qword_DA5C0;
  if (!qword_DA5C0)
  {
    sub_7C5C(&qword_DA5B8);
    sub_A45C(&qword_DA5C8, &qword_DA5A8);
    sub_A45C(&qword_DA5D0, &qword_DA5D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA5C0);
  }
  return result;
}

unint64_t sub_782E8()
{
  unint64_t result = qword_DA5E0;
  if (!qword_DA5E0)
  {
    sub_7C5C(&qword_DA5E8);
    sub_78220();
    sub_A45C(&qword_DA5C8, &qword_DA5A8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA5E0);
  }
  return result;
}

Swift::Double *buttonBackgroundOpacity.unsafeMutableAddressor()
{
  return &buttonBackgroundOpacity;
}

unsigned char *storeEnumTagSinglePayload for ButtonType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    char *result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x7846CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ButtonType()
{
  return &type metadata for ButtonType;
}

unint64_t sub_784A8()
{
  unint64_t result = qword_DA5F0;
  if (!qword_DA5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA5F0);
  }
  return result;
}

void *titleTextSpacing.unsafeMutableAddressor()
{
  return &titleTextSpacing;
}

void *histogramTrailingSpacing.unsafeMutableAddressor()
{
  return &histogramTrailingSpacing;
}

char *LiveSpeechStore.__allocating_init(identifier:)(uint64_t a1, char *a2)
{
  id v5 = objc_allocWithZone(v2);
  return LiveSpeechStore.init(identifier:)(a1, a2);
}

Swift::Void __swiftcall LiveSpeechStore.beginMonitoringCallStatus()()
{
  uint64_t v1 = (char *)sub_7BB74();
  uint64_t v2 = OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_observers;
  unsigned int v4 = v1;
  if (([*(id *)&v1[OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_observers] containsObject:v0] & 1) == 0)objc_msgSend(*(id *)&v4[v2], "addObject:", v0); {
  int v3 = v4;
  }
  if (!*(void *)&v4[OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_callCenter])
  {
    sub_8AA58();
    int v3 = v4;
  }
}

Swift::Void __swiftcall LiveSpeechStore.endMonitoringCallStatus()()
{
  id v1 = sub_7BB74();
  sub_87B18(v0, (uint64_t)v1);
}

Swift::Void __swiftcall LiveSpeechStore.updateHUD(isVisible:animated:)(Swift::Bool isVisible, Swift::Bool animated)
{
  if (animated)
  {
    uint64_t v3 = sub_A7070();
    __chkstk_darwin(v3);
    sub_A6300();
    swift_release();
  }
  else
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v4 = v2;
    sub_A60E0();
  }
}

uint64_t sub_78728(uint64_t a1, char a2)
{
  **(unsigned char **)(*(void *)(*(void *)(a1 + 32) + 64) + 40) = a2;
  return _swift_continuation_resume();
}

uint64_t LiveSpeechStore.favoritePhraseInfo.getter()
{
  return sub_7B6F4();
}

uint64_t LiveSpeechStore.currentSpeechContext.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  return v1;
}

uint64_t LiveSpeechStore.commitTextToSpeechQueue(_:mode:inputPrimaryLanguage:interruptCurrentQueue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  BOOL v12 = LiveSpeechStore.shouldSendSpeechToCall.getter();

  return sub_7F2D4(a1, a2, a3, v12, a4, a5, a6);
}

id LiveSpeechStore.selectedCategory.getter()
{
  unint64_t v1 = LiveSpeechStore.categoryOptions.getter();
  id v2 = v0;
  char v3 = sub_87EC8(v1);
  swift_bridgeObjectRelease();

  if ((v3 & 1) == 0) {
    return LiveSpeechStore.getRecentOrSavedCategory()();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  return (id)v5;
}

uint64_t sub_78904()
{
  return sub_7B9E8();
}

uint64_t LiveSpeechStore.selectedCategoryPhrases.getter()
{
  unint64_t v1 = LiveSpeechStore.categoryOptions.getter();
  id v2 = v0;
  char v3 = sub_87EC8(v1);
  swift_bridgeObjectRelease();

  if (v3)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    sub_A60D0();
    swift_release();
    swift_release();
    id v4 = v23;
  }
  else
  {
    id v4 = LiveSpeechStore.getRecentOrSavedCategory()();
  }
  id v5 = [v4 phrases];

  sub_A7470();
  unsigned int v6 = (void *)sub_A72B0();

  unint64_t v7 = LiveSpeechStore.categoryOptions.getter();
  id v8 = v2;
  char v9 = sub_87EC8(v7);
  swift_bridgeObjectRelease();

  if (v9)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    sub_A60D0();
    swift_release();
    swift_release();
    id v10 = v23;
  }
  else
  {
    id v10 = LiveSpeechStore.getRecentOrSavedCategory()();
  }
  unsigned int v11 = [v10 isRecents];

  if (!v11) {
    return sub_7DDCC((unint64_t)v6);
  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  if (v23 > 2u)
  {
    uint64_t v12 = 0;
  }
  else
  {
    swift_getKeyPath();
    swift_getKeyPath();
    sub_A60D0();
    swift_release();
    swift_release();
    uint64_t v12 = qword_AC6F8[(char)v23];
  }
  uint64_t v13 = sub_8818C(v12, (unint64_t)v6);
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();
  if ((v19 & 1) == 0) {
    goto LABEL_12;
  }
  sub_A7810();
  swift_unknownObjectRetain_n();
  uint64_t v20 = (void *)swift_dynamicCastClass();
  if (!v20)
  {
    swift_unknownObjectRelease();
    uint64_t v20 = _swiftEmptyArrayStorage;
  }
  uint64_t v21 = v20[2];
  swift_release();
  if (__OFSUB__(v19 >> 1, v17))
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v21 != (v19 >> 1) - v17)
  {
LABEL_22:
    swift_unknownObjectRelease();
LABEL_12:
    unsigned int v6 = sub_86EB4(v13, v15, v17, v19);
LABEL_19:
    swift_unknownObjectRelease();
    return sub_7DDCC((unint64_t)v6);
  }
  unsigned int v6 = (void *)swift_dynamicCastClass();
  swift_unknownObjectRelease();
  if (!v6)
  {
    unsigned int v6 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  return sub_7DDCC((unint64_t)v6);
}

id sub_78C2C(uint64_t a1)
{
  uint64_t v3 = sub_A5FF0();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = LiveSpeechStore.categoryOptions.getter();
  id v8 = v1;
  char v9 = sub_87EC8(v7);
  swift_bridgeObjectRelease();

  if (v9)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    sub_A60D0();
    swift_release();
    swift_release();
    id v10 = v23;
  }
  else
  {
    id v10 = LiveSpeechStore.getRecentOrSavedCategory()();
  }
  id v23 = 0;
  unsigned int v11 = [v10 deletePhrase:a1 error:&v23];

  id result = v23;
  if (!v11)
  {
    uint64_t v13 = result;
    sub_A5980();

    swift_willThrow();
    sub_A5EC0();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v14 = sub_A5FE0();
    os_log_type_t v15 = sub_A7430();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = (void *)swift_slowAlloc();
      uint64_t v21 = v3;
      id v23 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      swift_getErrorValue();
      uint64_t v18 = sub_A7830();
      uint64_t v22 = sub_15F94(v18, v19, (uint64_t *)&v23);
      sub_A7600();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl(&def_5ED54, v14, v15, "Error occurred creating a phrase: %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return (id)(*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v21);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      return (id)(*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
  }
  return result;
}

Swift::Void __swiftcall LiveSpeechStore.cycleNextInputMode()()
{
}

uint64_t LiveSpeechStore.speechState.getter()
{
  return sub_7B9E8();
}

Swift::Void __swiftcall LiveSpeechStore.stopAndDiscardAllQueuedSpeech()()
{
}

uint64_t sub_7901C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  return v1;
}

uint64_t LiveSpeechStore.inputMode.getter()
{
  return sub_7EF7C();
}

uint64_t LiveSpeechStore.$lastWillReplaySpeechDate.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__lastWillReplaySpeechDate, &qword_D9DF8);
}

void sub_790B8(uint64_t a1, uint64_t a2, __objc2_ivar *a3, uint64_t a4)
{
  uint64_t v7 = sub_A5FF0();
  unint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (__objc2_ivar *)((char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  unint64_t v11 = v29;
  if (!(v29 >> 62))
  {
    uint64_t v12 = *(void *)((char *)&dword_10 + (v29 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (v12) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease_n();
    return;
  }
LABEL_17:
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_A7740();
  if (!v12) {
    goto LABEL_10;
  }
LABEL_3:
  unint64_t v27 = v8;
  uint64_t v28 = a1;
  uint64_t v25 = v10;
  uint64_t v26 = v7;
  id v10 = a3;
  uint64_t v7 = a4;
  unint64_t v8 = v11 & 0xC000000000000001;
  a4 = 4;
  a3 = &stru_D6000;
  while (1)
  {
    if (v8) {
      id v13 = (id)sub_A76A0();
    }
    else {
      id v13 = *(id *)(v11 + 8 * a4);
    }
    uint64_t v14 = v13;
    a1 = a4 - 3;
    if (__OFADD__(a4 - 4, 1))
    {
      __break(1u);
      goto LABEL_17;
    }
    if ([v13 isRecents]) {
      break;
    }

    ++a4;
    if (a1 == v12) {
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease_n();
  NSString v15 = sub_A71A0();
  NSString v16 = sub_A71A0();
  unint64_t v29 = 0;
  unsigned int v17 = [v14 addPhrase:v15 inputID:v16 error:&v29];

  if (v17)
  {
    id v18 = (id)v29;
  }
  else
  {
    id v19 = (id)v29;
    sub_A5980();

    swift_willThrow();
    uint64_t v20 = v25;
    sub_A5EC0();
    uint64_t v21 = sub_A5FE0();
    os_log_type_t v22 = sub_A7430();
    if (os_log_type_enabled(v21, v22))
    {
      id v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v23 = 0;
      _os_log_impl(&def_5ED54, v21, v22, "Failed to add phrase to recents category", v23, 2u);
      swift_slowDealloc();
    }

    swift_errorRelease();
    (*(void (**)(__objc2_ivar *, uint64_t))(v27 + 8))(v20, v26);
  }
}

uint64_t sub_793E4()
{
  return sub_7B9E8();
}

id sub_793F8()
{
  uint64_t v0 = sub_A5FF0();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unsigned int v6 = (char *)&v21 - v5;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  id v7 = v22;
  NSString v8 = [v22 text];

  if (!v8)
  {
    sub_A71D0();
    NSString v8 = sub_A71A0();
    swift_bridgeObjectRelease();
  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  id v9 = v22;
  id v10 = [v22 categoryID];

  if (v10)
  {
    unint64_t v11 = self;
    swift_getKeyPath();
    swift_getKeyPath();
    sub_A60D0();
    swift_release();
    swift_release();
    NSString v12 = sub_A71A0();
    swift_bridgeObjectRelease();
    id v22 = 0;
    unsigned __int8 v13 = [v11 updatePhrase:v8 categoryID:v10 withUpdatedText:v12 error:&v22];

    id result = v22;
    if (v13) {
      return result;
    }
    NSString v15 = result;
    sub_A5980();

    swift_willThrow();
    sub_A5EC0();
    NSString v16 = sub_A5FE0();
    os_log_type_t v17 = sub_A7430();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v18 = 0;
      _os_log_impl(&def_5ED54, v16, v17, "Failed to update phrase", v18, 2u);
      swift_slowDealloc();
    }
    swift_errorRelease();
  }
  else
  {

    sub_A5EC0();
    NSString v16 = sub_A5FE0();
    os_log_type_t v19 = sub_A7430();
    if (os_log_type_enabled(v16, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&def_5ED54, v16, v19, "Phrase does not have categoryID", v20, 2u);
      swift_slowDealloc();
    }
    uint64_t v3 = v6;
  }

  return (id)(*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

id sub_797D0()
{
  uint64_t v1 = sub_A5FF0();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = LiveSpeechStore.categoryOptions.getter();
  id v6 = v0;
  char v7 = sub_87EC8(v5);
  swift_bridgeObjectRelease();

  if (v7)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    sub_A60D0();
    swift_release();
    swift_release();
    id v8 = v22;
  }
  else
  {
    id v8 = LiveSpeechStore.getRecentOrSavedCategory()();
  }
  NSString v9 = sub_A71A0();
  NSString v10 = sub_A71A0();
  id v22 = 0;
  unsigned int v11 = [v8 addPhrase:v9 inputID:v10 error:&v22];

  id result = v22;
  if (!v11)
  {
    unsigned __int8 v13 = result;
    sub_A5980();

    swift_willThrow();
    sub_A5EC0();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v14 = sub_A5FE0();
    os_log_type_t v15 = sub_A7430();
    if (os_log_type_enabled(v14, v15))
    {
      NSString v16 = (uint8_t *)swift_slowAlloc();
      id v22 = (id)swift_slowAlloc();
      *(_DWORD *)NSString v16 = 136315138;
      uint64_t v20 = v1;
      swift_getErrorValue();
      uint64_t v17 = sub_A7830();
      uint64_t v21 = sub_15F94(v17, v18, (uint64_t *)&v22);
      sub_A7600();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl(&def_5ED54, v14, v15, "Error occurred creating a phrase: %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return (id)(*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v20);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      return (id)(*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    }
  }
  return result;
}

uint64_t LiveSpeechStore.isHUDVisible.getter()
{
  return sub_7B9E8();
}

Swift::Void __swiftcall LiveSpeechStore.refreshCategories()()
{
  id v1 = [self categories];
  sub_A7510();
  sub_A72B0();

  swift_getKeyPath();
  swift_getKeyPath();
  id v2 = v0;
  sub_A60E0();
}

Swift::Void __swiftcall LiveSpeechStore.sortCategories()()
{
  id v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  id v2 = (void (*)(void *, void))sub_A60C0();
  sub_7DA08(v3);
  v2(v27, 0);
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  uint64_t v4 = v27[0];
  if (v27[0] >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_A7740();
    swift_bridgeObjectRelease();
    if (v5)
    {
LABEL_3:
      unint64_t v6 = 0;
      while (1)
      {
        id v7 = (v4 & 0xC000000000000001) != 0 ? (id)sub_A76A0() : *(id *)(v4 + 8 * v6 + 32);
        id v8 = v7;
        unsigned __int8 v9 = [v7 isSaved];

        if (v9) {
          break;
        }
        unint64_t v10 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
          __break(1u);
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
        ++v6;
        if (v10 == v5) {
          goto LABEL_10;
        }
      }
      swift_bridgeObjectRelease();
      swift_getKeyPath();
      swift_getKeyPath();
      unsigned int v11 = (void (*)(void *, void))sub_A60C0();
      NSString v12 = (void *)sub_3AE50(v6);
      v11(v27, 0);
      swift_release();
      swift_release();
      swift_getKeyPath();
      swift_getKeyPath();
      id v13 = v12;
      uint64_t v14 = (void (*)(void *, void))sub_A60C0();
      if (!(*v15 >> 62)
        || (swift_bridgeObjectRetain(), uint64_t v25 = sub_A7740(),
                                        swift_bridgeObjectRelease(),
                                        (v25 & 0x8000000000000000) == 0))
      {
        sub_32834(0, 0, (uint64_t)v13);
        v14(v27, 0);

        swift_release();
        swift_release();
        goto LABEL_13;
      }
      __break(1u);
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((char *)&dword_10 + (v27[0] & 0xFFFFFFFFFFFFFF8));
    if (v5) {
      goto LABEL_3;
    }
  }
LABEL_10:
  swift_bridgeObjectRelease();
LABEL_13:
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  uint64_t v4 = v27[0];
  if (v27[0] >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_A7740();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_15;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v16 = *(void *)((char *)&dword_10 + (v27[0] & 0xFFFFFFFFFFFFFF8));
  if (!v16) {
    goto LABEL_22;
  }
LABEL_15:
  unint64_t v17 = 0;
  while (1)
  {
    id v18 = (v4 & 0xC000000000000001) != 0 ? (id)sub_A76A0() : *(id *)(v4 + 8 * v17 + 32);
    uint64_t v19 = v18;
    unsigned __int8 v20 = [v18 isRecents];

    if (v20) {
      break;
    }
    unint64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      goto LABEL_26;
    }
    ++v17;
    if (v21 == v16) {
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  id v22 = (void (*)(void *, void))sub_A60C0();
  id v23 = (void *)sub_3AE50(v17);
  v22(v27, 0);
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  id v13 = v23;
  id v1 = (void (*)(void *, void))sub_A60C0();
  if (!(*v24 >> 62)) {
    goto LABEL_24;
  }
LABEL_33:
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_A7740();
  swift_bridgeObjectRelease();
  if ((v26 & 0x8000000000000000) == 0)
  {
LABEL_24:
    sub_32834(0, 0, (uint64_t)v13);
    v1(v27, 0);

    swift_release();
    swift_release();
    return;
  }
  __break(1u);
}

uint64_t LiveSpeechStore.lastSpokenContext.getter()
{
  return sub_7EF7C();
}

BOOL LiveSpeechStore.shouldShowSecondarySpeechPlaybackView.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  switch(v3[0])
  {
    case 1:
    case 2:
    case 3:
      char v1 = sub_A7800();
      swift_bridgeObjectRelease();
      BOOL result = 0;
      if ((v1 & 1) == 0)
      {
        swift_getKeyPath();
        swift_getKeyPath();
        sub_A60D0();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v2 = HIBYTE(v4) & 0xF;
        if ((v4 & 0x2000000000000000) == 0) {
          uint64_t v2 = *(void *)v3 & 0xFFFFFFFFFFFFLL;
        }
        BOOL result = v2 != 0;
      }
      break;
    default:
      swift_bridgeObjectRelease();
      BOOL result = 0;
      break;
  }
  return result;
}

BOOL LiveSpeechStore.inputModeButtonShouldRouteUserToFavoritePhrasesInSettings.getter()
{
  sub_A5F40();
  uint64_t v0 = (void *)sub_A5F10();
  uint64_t v1 = sub_A5F00();

  uint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRelease();
  return v2 == 0;
}

Swift::Void __swiftcall LiveSpeechStore.pauseSpeech()()
{
}

Swift::Void __swiftcall LiveSpeechStore.resumeSpeech()()
{
  id v0 = sub_7E4A0();
  [v0 continueSpeaking];
}

uint64_t LiveSpeechStore.replaySpeech(_:)(uint64_t *a1)
{
  uint64_t v3 = sub_A5A10();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unsigned __int8 v9 = (char *)&v15 - v8;
  sub_A5A00();
  swift_getKeyPath();
  swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v3);
  id v10 = v1;
  sub_A60E0();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  uint64_t SpokenContext = (int *)type metadata accessor for LiveSpeechStore.LastSpokenContext(0);
  return sub_7F2D4(v11, v12, (uint64_t)a1 + SpokenContext[5], *((unsigned __int8 *)a1 + SpokenContext[6]), *(uint64_t *)((char *)a1 + SpokenContext[7]), *(uint64_t *)((char *)a1 + SpokenContext[7] + 8), 1);
}

uint64_t LiveSpeechStore.categoryOptions.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  if (v14 >> 62)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t v0 = sub_A7740();
    if (v0) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease_n();
    swift_getKeyPath();
    swift_getKeyPath();
    sub_A60D0();
    swift_release();
LABEL_11:
    swift_release();
    return v14;
  }
  uint64_t v0 = *(void *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  if (!v0) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v1 = 4;
  while (1)
  {
    if ((v14 & 0xC000000000000001) != 0) {
      id v2 = (id)sub_A76A0();
    }
    else {
      id v2 = *(id *)(v14 + 8 * v1);
    }
    uint64_t v3 = v2;
    uint64_t v4 = v1 - 3;
    if (__OFADD__(v1 - 4, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if ([v2 isRecents]) {
      break;
    }

    ++v1;
    if (v4 == v0) {
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease_n();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  if (v14 <= 2u)
  {
    id v7 = [v3 phrases];
    sub_A7470();
    unint64_t v8 = sub_A72B0();

    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_A7740();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v9 = *(void *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFFF8));
    }
    swift_bridgeObjectRelease();
    if (v9)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      sub_A60D0();

      swift_release();
      goto LABEL_11;
    }
  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  uint64_t result = swift_release();
  if (!(v14 >> 62))
  {
    uint64_t v10 = *(void *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFFF8));
    if (v10) {
      goto LABEL_20;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    uint64_t v5 = _swiftEmptyArrayStorage;

    return (uint64_t)v5;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_A7740();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v10) {
    goto LABEL_34;
  }
LABEL_20:
  if (v10 >= 1)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      if ((v14 & 0xC000000000000001) != 0) {
        id v12 = (id)sub_A76A0();
      }
      else {
        id v12 = *(id *)(v14 + 8 * i + 32);
      }
      id v13 = v12;
      if ([v12 isRecents])
      {
      }
      else
      {
        sub_A76D0();
        sub_A76F0();
        sub_A7700();
        sub_A76E0();
      }
    }
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

uint64_t LiveSpeechStore.speechState.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  return sub_A60E0();
}

uint64_t LiveSpeechFavorite.inputID.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void LiveSpeechFavorite.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_bridgeObjectRetain();
  sub_A7210();
  swift_bridgeObjectRelease();
  if (a5)
  {
    sub_A7870(1u);
    swift_bridgeObjectRetain();
    sub_A7210();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_A7870(0);
  }
}

Swift::Int LiveSpeechFavorite.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    sub_A7870(1u);
    swift_bridgeObjectRetain();
    sub_A7210();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_A7870(0);
  }
  return sub_A7890();
}

uint64_t sub_7AAEC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

Swift::Int sub_7AAF8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_A7850();
  swift_bridgeObjectRetain();
  sub_A7210();
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_A7870(1u);
    swift_bridgeObjectRetain();
    sub_A7210();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_A7870(0);
  }
  return sub_A7890();
}

void sub_7ABA4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  sub_A7210();
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_A7870(1u);
    swift_bridgeObjectRetain();
    sub_A7210();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_A7870(0);
  }
}

Swift::Int sub_7AC58()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_A7850();
  swift_bridgeObjectRetain();
  sub_A7210();
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_A7870(1u);
    swift_bridgeObjectRetain();
    sub_A7210();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_A7870(0);
  }
  return sub_A7890();
}

uint64_t sub_7AD00(uint64_t *a1, uint64_t *a2)
{
  return _s19LiveSpeechUIService0aB8FavoriteV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

Swift::Int sub_7AD1C()
{
  return sub_A7890();
}

void sub_7AD60()
{
}

Swift::Int sub_7AD88()
{
  return sub_A7890();
}

const char *sub_7ADC8()
{
  return "CoreAudioServices";
}

const char *sub_7ADDC()
{
  return "MixToUplinkAPI_AUVP_BypassUserCheck";
}

BOOL sub_7ADF0(char *a1, char *a2)
{
  return qword_AC6F8[*a1] == qword_AC6F8[*a2];
}

Swift::Int sub_7AE14()
{
  uint64_t v1 = *v0;
  sub_A7850();
  sub_A7860(qword_AC6F8[v1]);
  return sub_A7890();
}

void sub_7AE64()
{
  sub_A7860(qword_AC6F8[*v0]);
}

Swift::Int sub_7AE9C()
{
  uint64_t v1 = *v0;
  sub_A7850();
  sub_A7860(qword_AC6F8[v1]);
  return sub_A7890();
}

uint64_t sub_7AEE8@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_87E78(*a1);
  *a2 = result;
  return result;
}

void sub_7AF14(void *a1@<X8>)
{
  *a1 = qword_AC6F8[*v1];
}

void sub_7AF2C(void *a1@<X8>)
{
  *a1 = &off_CF038;
}

uint64_t LiveSpeechStore.SpeechState.rawValue.getter(char a1)
{
  uint64_t result = 1701602409;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x616570536C6C6977;
      break;
    case 2:
      uint64_t result = 0x676E696B61657073;
      break;
    case 3:
      uint64_t result = 0x646573756170;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_7AFCC(unsigned __int8 *a1, char *a2)
{
  return sub_5E4E4(*a1, *a2);
}

Swift::Int sub_7AFD8()
{
  return sub_A7890();
}

uint64_t sub_7B0AC()
{
  sub_A7210();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_7B168()
{
  return sub_A7890();
}

uint64_t sub_7B238@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s19LiveSpeechUIService0aB5StoreC0B5StateO8rawValueAESgSS_tcfC_0(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_7B268(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE400000000000000;
  uint64_t v3 = 1701602409;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE90000000000006BLL;
      uint64_t v3 = 0x616570536C6C6977;
      goto LABEL_3;
    case 2:
      *a1 = 0x676E696B61657073;
      a1[1] = 0xE800000000000000;
      break;
    case 3:
      *a1 = 0x646573756170;
      a1[1] = 0xE600000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t property wrapper backing initializer of LiveSpeechStore.favoritePhrases(uint64_t a1)
{
  return sub_7B69C(a1, &qword_DA660);
}

uint64_t LiveSpeechStore.favoritePhrases.getter()
{
  return sub_7B6F4();
}

uint64_t sub_7B31C@<X0>(void *a1@<X8>)
{
  return sub_41ACC(a1);
}

uint64_t sub_7B330(uint64_t a1, void **a2)
{
  return sub_7B760(a1, a2);
}

uint64_t LiveSpeechStore.$favoritePhrases.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__favoritePhrases, &qword_DA670);
}

uint64_t property wrapper backing initializer of LiveSpeechStore.favoritePhraseInfo(uint64_t a1)
{
  return sub_7B69C(a1, &qword_D9C70);
}

uint64_t sub_7B364@<X0>(void *a1@<X8>)
{
  return sub_41ACC(a1);
}

uint64_t sub_7B378(uint64_t a1, void **a2)
{
  return sub_7B760(a1, a2);
}

uint64_t LiveSpeechStore.$favoritePhraseInfo.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__favoritePhraseInfo, &qword_DA678);
}

uint64_t property wrapper backing initializer of LiveSpeechStore.categories(uint64_t a1)
{
  return sub_7B69C(a1, &qword_DA380);
}

uint64_t LiveSpeechStore.categories.getter()
{
  return sub_7B6F4();
}

uint64_t sub_7B3C0@<X0>(void *a1@<X8>)
{
  return sub_41ACC(a1);
}

uint64_t sub_7B3D4(uint64_t a1, void **a2)
{
  return sub_7B760(a1, a2);
}

uint64_t LiveSpeechStore.$categories.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__categories, &qword_DA680);
}

uint64_t property wrapper backing initializer of LiveSpeechStore.category(uint64_t a1)
{
  return sub_7BA80(a1, (void (*)(void))&type metadata accessor for LiveSpeechCategory);
}

uint64_t LiveSpeechStore.category.getter()
{
  return sub_7B6F4();
}

uint64_t sub_7B428@<X0>(void *a1@<X8>)
{
  return sub_41ACC(a1);
}

uint64_t sub_7B43C(void **a1, void **a2)
{
  return sub_7BB04(a1, a2);
}

uint64_t _s19LiveSpeechUIService0aB5StoreC8categorySo0aB8CategoryCvs_0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  return sub_A60E0();
}

void (*LiveSpeechStore.category.modify(void *a1))(void *)
{
  unint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_A60C0();
  return sub_7B548;
}

uint64_t LiveSpeechStore.$category.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__category, &qword_DA688);
}

uint64_t LiveSpeechStore.$category.setter(uint64_t a1)
{
  return sub_7E260(a1, &qword_DA690, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__category, &qword_DA688);
}

void (*LiveSpeechStore.$category.modify(void *a1))(uint64_t, char)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = sub_7AF4(&qword_DA690);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  id v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__category;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = sub_7AF4(&qword_DA688);
  sub_A60A0();
  swift_endAccess();
  return sub_7B68C;
}

uint64_t property wrapper backing initializer of LiveSpeechStore.phrases(uint64_t a1)
{
  return sub_7B69C(a1, &qword_D9B48);
}

uint64_t sub_7B69C(uint64_t a1, uint64_t *a2)
{
  return sub_A6090();
}

uint64_t LiveSpeechStore.phrases.getter()
{
  return sub_7B6F4();
}

uint64_t sub_7B6F4()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_7B760(uint64_t a1, void **a2)
{
  unint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return sub_A60E0();
}

void (*LiveSpeechStore.phrases.modify(void *a1))(void *)
{
  unint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_A60C0();
  return sub_7B548;
}

uint64_t LiveSpeechStore.$phrases.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__phrases, &qword_DA6A0);
}

uint64_t LiveSpeechStore.$phrases.setter(uint64_t a1)
{
  return sub_7E260(a1, &qword_DA6A8, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__phrases, &qword_DA6A0);
}

void (*LiveSpeechStore.$phrases.modify(void *a1))(uint64_t, char)
{
  id v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = sub_7AF4(&qword_DA6A8);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  id v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__phrases;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = sub_7AF4(&qword_DA6A0);
  sub_A60A0();
  swift_endAccess();
  return sub_7B68C;
}

uint64_t property wrapper backing initializer of LiveSpeechStore.recentMaxCount()
{
  return sub_A6090();
}

uint64_t sub_7B9D4()
{
  return sub_7B9E8();
}

uint64_t sub_7B9E8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_7BA54()
{
  return sub_7B9E8();
}

uint64_t property wrapper backing initializer of LiveSpeechStore.editingPhrase(uint64_t a1)
{
  return sub_7BA80(a1, (void (*)(void))&type metadata accessor for LiveSpeechPhrase);
}

uint64_t sub_7BA80(uint64_t a1, void (*a2)(void))
{
  return sub_A6090();
}

uint64_t sub_7BAC8()
{
  return sub_7B6F4();
}

uint64_t sub_7BADC@<X0>(void *a1@<X8>)
{
  return sub_41ACC(a1);
}

uint64_t sub_7BAF0(void **a1, void **a2)
{
  return sub_7BB04(a1, a2);
}

uint64_t sub_7BB04(void **a1, void **a2)
{
  unint64_t v2 = *a1;
  id v3 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v4 = v2;
  id v5 = v3;
  return sub_A60E0();
}

id sub_7BB74()
{
  uint64_t v1 = OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore____lazy_storage___callManager;
  unint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore____lazy_storage___callManager);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore____lazy_storage___callManager);
  }
  else
  {
    if (qword_D7DB0 == -1)
    {
      id v4 = 0;
    }
    else
    {
      swift_once();
      id v4 = *(void **)(v0 + v1);
    }
    id v5 = (void *)static LiveSpeechCaptionsCallManager.shared;
    *(void *)(v0 + v1) = static LiveSpeechCaptionsCallManager.shared;
    id v3 = v5;

    unint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_7BC14()
{
  uint64_t v1 = OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore____lazy_storage___accessManager;
  unint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore____lazy_storage___accessManager);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore____lazy_storage___accessManager);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)sub_A6030()) init];
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    unint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

char *LiveSpeechStore.init(identifier:)(uint64_t a1, char *a2)
{
  id v3 = v2;
  long long v164 = a2;
  uint64_t v158 = a1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = sub_7AF4(&qword_DA6B0);
  uint64_t v155 = *(void *)(v4 - 8);
  id v156 = (id)v4;
  __chkstk_darwin(v4);
  uint64_t v153 = (char *)&v119 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = sub_A5F80();
  uint64_t v148 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  uint64_t v151 = (char *)&v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v150 = (char *)&v119 - v8;
  uint64_t v147 = sub_7AF4(&qword_DA6B8);
  uint64_t v146 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v145 = (char *)&v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = sub_7AF4(&qword_D9DF8);
  uint64_t v143 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  uint64_t v142 = (char *)&v119 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = sub_A5A10();
  uint64_t v140 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  uint64_t v139 = (char *)&v119 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v138 = (char *)&v119 - v13;
  uint64_t v137 = sub_7AF4(&qword_DA6C0);
  uint64_t v136 = *(void *)(v137 - 8);
  __chkstk_darwin(v137);
  uint64_t v135 = (char *)&v119 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = sub_7AF4(&qword_DA3D8);
  __chkstk_darwin(v134);
  uint64_t v133 = (uint64_t)&v119 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v132 = (char *)&v119 - v17;
  uint64_t v131 = sub_7AF4(&qword_DA6C8);
  uint64_t v130 = *(void *)(v131 - 8);
  __chkstk_darwin(v131);
  uint64_t v129 = (char *)&v119 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = sub_7AF4(&qword_DA6D0);
  uint64_t v127 = *(void *)(v128 - 8);
  __chkstk_darwin(v128);
  uint64_t v126 = (char *)&v119 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = sub_7AF4(&qword_DA6D8);
  uint64_t v124 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  unint64_t v21 = (char *)&v119 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = sub_7AF4(&qword_DA6A0);
  uint64_t v122 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  uint64_t v121 = (char *)&v119 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_7AF4(&qword_DA680);
  uint64_t v162 = *(void *)(v23 - 8);
  uint64_t v163 = v23;
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v119 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_7AF4(&qword_DA678);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  unint64_t v29 = (char *)&v119 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_7AF4(&qword_DA670);
  uint64_t v31 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v119 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v34 = &v3[OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__favoritePhrases];
  *(void *)&long long v168 = _swiftEmptyArrayStorage;
  uint64_t v35 = v3;
  sub_7AF4(&qword_DA660);
  sub_A6090();
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v34, v33, v30);
  unsigned __int8 v36 = &v35[OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__favoritePhraseInfo];
  *(void *)&long long v168 = _swiftEmptyArrayStorage;
  uint64_t v152 = sub_7AF4(&qword_D9C70);
  sub_A6090();
  uint64_t v160 = v27;
  uint64_t v161 = v26;
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
  uint64_t v154 = v36;
  v37(v36, v29, v26);
  uint64_t v38 = &v35[OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__categories];
  *(void *)&long long v168 = _swiftEmptyArrayStorage;
  uint64_t v157 = sub_7AF4(&qword_DA380);
  sub_A6090();
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v162 + 32);
  unsigned __int8 v159 = v38;
  v39(v38, v25, v163);
  uint64_t v40 = &v35[OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__phrases];
  *(void *)&long long v168 = _swiftEmptyArrayStorage;
  sub_7AF4(&qword_D9B48);
  char v41 = v121;
  sub_A6090();
  (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v40, v41, v123);
  uint64_t v42 = &v35[OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__presentTextField];
  LOBYTE(v168) = 0;
  sub_A6090();
  uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v124 + 32);
  uint64_t v44 = v125;
  v43(v42, v21, v125);
  uint64_t v45 = &v35[OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__isEditingPhrase];
  LOBYTE(v168) = 0;
  sub_A6090();
  v43(v45, v21, v44);
  uint64_t v46 = &v35[OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__isFillInPhrase];
  LOBYTE(v168) = 0;
  sub_A6090();
  v43(v46, v21, v44);
  *(void *)&v35[OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore____lazy_storage___callManager] = 0;
  *(void *)&v35[OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore_favoritePhraseObserverToken] = 0;
  *(void *)&v35[OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore____lazy_storage___accessManager] = 0;
  uint64_t v47 = &v35[OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__isHUDVisible];
  LOBYTE(v168) = 0;
  sub_A6090();
  v43(v47, v21, v44);
  uint64_t v48 = &v35[OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__speechState];
  LOBYTE(v168) = 0;
  uint64_t v49 = v126;
  sub_A6090();
  (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v48, v49, v128);
  *(void *)&v35[OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore____lazy_storage___synth] = 0;
  uint64_t v50 = &v35[OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__currentSpeechContext];
  long long v168 = 0u;
  long long v169 = 0u;
  sub_7AF4(&qword_DA718);
  uint64_t v51 = v129;
  sub_A6090();
  (*(void (**)(char *, char *, uint64_t))(v130 + 32))(v50, v51, v131);
  uint64_t v52 = &v35[OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__lastSpokenContext];
  uint64_t SpokenContext = type metadata accessor for LiveSpeechStore.LastSpokenContext(0);
  uint64_t v54 = (uint64_t)v132;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(SpokenContext - 8) + 56))(v132, 1, 1, SpokenContext);
  sub_8860(v54, v133, &qword_DA3D8);
  uint64_t v55 = v135;
  sub_A6090();
  sub_A35C(v54, &qword_DA3D8);
  (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v52, v55, v137);
  uint64_t v56 = &v35[OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__lastWillReplaySpeechDate];
  uint64_t v57 = v138;
  _s19LiveSpeechUIService0aB5StoreC015_lastWillReplayB4Date33_4A0AB17BFF9235D7F87EB31E9A8C21857Combine9PublishedVy10Foundation0H0VGvpfi_0();
  uint64_t v58 = v140;
  uint64_t v59 = v141;
  (*(void (**)(char *, char *, uint64_t))(v140 + 16))(v139, v57, v141);
  uint64_t v60 = v142;
  sub_A6090();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v59);
  (*(void (**)(char *, char *, uint64_t))(v143 + 32))(v56, v60, v144);
  uint64_t v61 = &v35[OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__queuedText];
  *(void *)&long long v168 = 0;
  *((void *)&v168 + 1) = 0xE000000000000000;
  uint64_t v62 = v145;
  sub_A6090();
  (*(void (**)(char *, char *, uint64_t))(v146 + 32))(v61, v62, v147);
  uint64_t v63 = sub_A5F40();
  uint64_t v64 = (void *)sub_A5F10();
  uint64_t v65 = sub_A5F00();

  uint64_t v66 = *(void *)(v65 + 16);
  swift_bridgeObjectRelease();
  if (v66)
  {
    double v67 = (void *)sub_A5F10();
    uint64_t v68 = v150;
    sub_A5F20();

    uint64_t v69 = v149;
    uint64_t v70 = v148;
  }
  else
  {
    uint64_t v70 = v148;
    uint64_t v68 = v150;
    uint64_t v69 = v149;
    (*(void (**)(char *, void, uint64_t))(v148 + 104))(v150, enum case for LiveSpeechInputMode.keyboard(_:), v149);
  }
  uint64_t v71 = &v35[OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__inputMode];
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v151, v68, v69);
  uint64_t v72 = v153;
  sub_A6090();
  (*(void (**)(char *, uint64_t))(v70 + 8))(v68, v69);
  (*(void (**)(char *, char *, id))(v155 + 32))(v71, v72, v156);
  id v156 = v35;
  uint64_t v73 = (uint64_t *)&v35[OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore_identifier];
  uint64_t v74 = v164;
  uint64_t *v73 = v158;
  v73[1] = (uint64_t)v74;
  uint64_t v158 = v63;
  unsigned __int8 v75 = (void *)sub_A5F10();
  uint64_t v76 = sub_A5F00();

  uint64_t v77 = *(void *)(v76 + 16);
  if (v77)
  {
    swift_bridgeObjectRetain();
    uint64_t v78 = 0;
    uint64_t v79 = (char *)_swiftEmptyArrayStorage;
    long long v164 = (char *)&type metadata for Any + 8;
    while (1)
    {
      uint64_t v80 = *(void *)(v76 + 8 * v78 + 32);
      swift_bridgeObjectRetain();
      uint64_t v81 = sub_A6000();
      if (*(void *)(v80 + 16) && (unint64_t v83 = sub_85F80(v81, v82), (v84 & 1) != 0))
      {
        sub_10330(*(void *)(v80 + 56) + 32 * v83, (uint64_t)&v168);
      }
      else
      {
        long long v168 = 0u;
        long long v169 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v169 + 1))
      {
        if (swift_dynamicCast())
        {
          uint64_t v86 = v165;
          uint64_t v85 = v166;
          uint64_t v87 = sub_A6010();
          if (*(void *)(v80 + 16) && (unint64_t v89 = sub_85F80(v87, v88), (v90 & 1) != 0))
          {
            sub_10330(*(void *)(v80 + 56) + 32 * v89, (uint64_t)&v168);
          }
          else
          {
            long long v168 = 0u;
            long long v169 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((void *)&v169 + 1))
          {
            if (swift_dynamicCast())
            {
              uint64_t v92 = v165;
              uint64_t v91 = v166;
              swift_bridgeObjectRelease();
LABEL_24:
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v79 = sub_41BC8(0, *((void *)v79 + 2) + 1, 1, v79);
              }
              unint64_t v94 = *((void *)v79 + 2);
              unint64_t v93 = *((void *)v79 + 3);
              if (v94 >= v93 >> 1) {
                uint64_t v79 = sub_41BC8((char *)(v93 > 1), v94 + 1, 1, v79);
              }
              *((void *)v79 + 2) = v94 + 1;
              uint64_t v95 = &v79[32 * v94];
              *((void *)v95 + 4) = v86;
              *((void *)v95 + 5) = v85;
              *((void *)v95 + 6) = v92;
              *((void *)v95 + 7) = v91;
              goto LABEL_8;
            }
          }
          else
          {
            sub_A35C((uint64_t)&v168, &qword_D92A0);
          }
          swift_bridgeObjectRelease();
          uint64_t v92 = 0;
          uint64_t v91 = 0;
          goto LABEL_24;
        }
      }
      else
      {
        sub_A35C((uint64_t)&v168, &qword_D92A0);
      }
      swift_bridgeObjectRelease();
LABEL_8:
      if (v77 == ++v78)
      {
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
    }
  }
  uint64_t v79 = (char *)_swiftEmptyArrayStorage;
LABEL_31:
  swift_bridgeObjectRelease();
  uint64_t v96 = v154;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(v160 + 8))(v96, v161);
  uint64_t v165 = (uint64_t)v79;
  sub_A6090();
  swift_endAccess();
  uint64_t v97 = self;
  id v98 = [v97 categories];
  sub_A7510();
  uint64_t v99 = sub_A72B0();

  uint64_t v100 = v159;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(v162 + 8))(v100, v163);
  uint64_t v165 = v99;
  sub_A6090();
  swift_endAccess();
  id v101 = [v97 categories];
  unint64_t v102 = sub_A72B0();

  if (v102 >> 62) {
    goto LABEL_53;
  }
  uint64_t v103 = *(void *)((char *)&dword_10 + (v102 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v103; uint64_t v103 = sub_A7740())
  {
    uint64_t v104 = 4;
    while (1)
    {
      id v105 = (v102 & 0xC000000000000001) != 0 ? (id)sub_A76A0() : *(id *)(v102 + 8 * v104);
      id v106 = v105;
      uint64_t v107 = v104 - 3;
      if (__OFADD__(v104 - 4, 1)) {
        break;
      }
      if ([v105 isRecents])
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_42;
      }

      ++v104;
      if (v107 == v103) {
        goto LABEL_40;
      }
    }
    __break(1u);
LABEL_53:
    swift_bridgeObjectRetain();
  }
LABEL_40:
  swift_bridgeObjectRelease_n();
  id v106 = [v97 makeEmptyCategory];
LABEL_42:
  uint64_t v108 = v156;
  swift_beginAccess();
  uint64_t v165 = (uint64_t)v106;
  sub_A6090();
  swift_endAccess();
  uint64_t v109 = self;
  uint64_t v110 = (uint32_t *)[v109 maxPreferredPhraseCount];
  char v111 = 0;
  if ((uint64_t)v110 > 49)
  {
    uint64_t v112 = (objc_class *)ObjectType;
    uint64_t v113 = &unk_DA000;
    if (v110 == (uint32_t *)&stru_20.segname[10])
    {
      char v111 = 1;
    }
    else if (v110 == &stru_20.flags)
    {
      char v111 = 2;
    }
  }
  else
  {
    uint64_t v112 = (objc_class *)ObjectType;
    uint64_t v113 = (void *)&unk_DA000;
    if (v110 == (uint32_t *)((char *)&def_5ED54 + 1))
    {
      char v111 = 3;
    }
    else if (v110 == (uint32_t *)((char *)&dword_8 + 2))
    {
      char v111 = 0;
    }
  }
  swift_beginAccess();
  LOBYTE(v165) = v111;
  sub_A6090();
  swift_endAccess();
  id v114 = [v109 makeEmptyPhrase];
  swift_beginAccess();
  uint64_t v165 = (uint64_t)v114;
  sub_A7470();
  sub_A6090();
  swift_endAccess();

  v167.receiver = v108;
  v167.super_class = v112;
  uint64_t v115 = (char *)objc_msgSendSuper2(&v167, "init");
  LiveSpeechStore.sortCategories()();
  uint64_t v116 = (void *)sub_A5F10();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  uint64_t v117 = sub_A5EF0();

  swift_release_n();
  *(void *)&v115[v113[224]] = v117;
  swift_unknownObjectRelease();
  return v115;
}

uint64_t property wrapper backing initializer of LiveSpeechStore.isHUDVisible()
{
  return sub_A6090();
}

uint64_t property wrapper backing initializer of LiveSpeechStore.speechState()
{
  return sub_A6090();
}

uint64_t property wrapper backing initializer of LiveSpeechStore.currentSpeechContext()
{
  return sub_A6090();
}

uint64_t property wrapper backing initializer of LiveSpeechStore.lastSpokenContext(uint64_t a1)
{
  uint64_t v2 = sub_7AF4(&qword_DA3D8);
  __chkstk_darwin(v2);
  sub_8860(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_DA3D8);
  sub_A6090();
  return sub_A35C(a1, &qword_DA3D8);
}

uint64_t property wrapper backing initializer of LiveSpeechStore.lastWillReplaySpeechDate(uint64_t a1)
{
  return sub_7D2A8(a1, (uint64_t (*)(void))&type metadata accessor for Date);
}

uint64_t property wrapper backing initializer of LiveSpeechStore.queuedText()
{
  return sub_A6090();
}

uint64_t property wrapper backing initializer of LiveSpeechStore.inputMode(uint64_t a1)
{
  return sub_7D2A8(a1, (uint64_t (*)(void))&type metadata accessor for LiveSpeechInputMode);
}

uint64_t sub_7D2A8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  uint64_t v4 = *(void *)(v3 - 8);
  __n128 v5 = __chkstk_darwin(v3);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16))((char *)&v8 - v6, a1, v3, v5);
  sub_A6090();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

uint64_t sub_7D3A0()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    sub_A5F40();
    uint64_t v1 = (void *)sub_A5F10();
    uint64_t v2 = sub_A5F00();

    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = 0;
      __n128 v5 = (char *)_swiftEmptyArrayStorage;
      while (1)
      {
        uint64_t v6 = *(void *)(v2 + 8 * v4 + 32);
        swift_bridgeObjectRetain();
        uint64_t v7 = sub_A6000();
        if (*(void *)(v6 + 16) && (unint64_t v9 = sub_85F80(v7, v8), (v10 & 1) != 0))
        {
          sub_10330(*(void *)(v6 + 56) + 32 * v9, (uint64_t)&v22);
        }
        else
        {
          long long v22 = 0u;
          long long v23 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v23 + 1))
        {
          if (swift_dynamicCast())
          {
            uint64_t v11 = sub_A6010();
            if (*(void *)(v6 + 16) && (unint64_t v13 = sub_85F80(v11, v12), (v14 & 1) != 0))
            {
              sub_10330(*(void *)(v6 + 56) + 32 * v13, (uint64_t)&v22);
            }
            else
            {
              long long v22 = 0u;
              long long v23 = 0u;
            }
            swift_bridgeObjectRelease();
            if (*((void *)&v23 + 1))
            {
              if (swift_dynamicCast())
              {
                uint64_t v16 = v20;
                uint64_t v15 = v21;
                swift_bridgeObjectRelease();
LABEL_22:
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  __n128 v5 = sub_41BC8(0, *((void *)v5 + 2) + 1, 1, v5);
                }
                unint64_t v18 = *((void *)v5 + 2);
                unint64_t v17 = *((void *)v5 + 3);
                if (v18 >= v17 >> 1) {
                  __n128 v5 = sub_41BC8((char *)(v17 > 1), v18 + 1, 1, v5);
                }
                *((void *)v5 + 2) = v18 + 1;
                uint64_t v19 = &v5[32 * v18];
                *((void *)v19 + 4) = v20;
                *((void *)v19 + 5) = v21;
                *((void *)v19 + 6) = v16;
                *((void *)v19 + 7) = v15;
                goto LABEL_6;
              }
            }
            else
            {
              sub_A35C((uint64_t)&v22, &qword_D92A0);
            }
            swift_bridgeObjectRelease();
            uint64_t v16 = 0;
            uint64_t v15 = 0;
            goto LABEL_22;
          }
        }
        else
        {
          sub_A35C((uint64_t)&v22, &qword_D92A0);
        }
        swift_bridgeObjectRelease();
LABEL_6:
        if (v3 == ++v4)
        {
          swift_bridgeObjectRelease();
          goto LABEL_29;
        }
      }
    }
    __n128 v5 = (char *)_swiftEmptyArrayStorage;
LABEL_29:
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    swift_getKeyPath();
    *(void *)&long long v22 = v5;
    return sub_A60E0();
  }
  return result;
}

id LiveSpeechStore.getRecentOrSavedCategory()()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  uint64_t v0 = v16;
  if (v16 >> 62) {
    goto LABEL_31;
  }
  uint64_t v1 = *(void *)((char *)&dword_10 + (v16 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v1; uint64_t v1 = sub_A7740())
  {
    uint64_t v2 = 4;
    while (1)
    {
      if ((v0 & 0xC000000000000001) != 0) {
        id v3 = (id)sub_A76A0();
      }
      else {
        id v3 = *(id *)(v0 + 8 * v2);
      }
      uint64_t v4 = v3;
      uint64_t v5 = v2 - 3;
      if (__OFADD__(v2 - 4, 1))
      {
        __break(1u);
        goto LABEL_30;
      }
      if ([v3 isRecents]) {
        break;
      }

      ++v2;
      if (v5 == v1) {
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease_n();
    swift_getKeyPath();
    swift_getKeyPath();
    sub_A60D0();
    swift_release();
    swift_release();
    if (v16 <= 2u)
    {
      id v8 = [v4 phrases];
      sub_A7470();
      unint64_t v9 = sub_A72B0();

      if (v9 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = sub_A7740();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v10 = *(void *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFFF8));
      }
      swift_bridgeObjectRelease();
      if (v10) {
        return v4;
      }
    }
    swift_getKeyPath();
    swift_getKeyPath();
    sub_A60D0();
    swift_release();
    swift_release();
    if (v16 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v0 = sub_A7740();
      if (v0) {
        goto LABEL_20;
      }
LABEL_27:
      swift_bridgeObjectRelease_n();
      id v15 = [self makeEmptyCategory];

      return v15;
    }
    uint64_t v0 = *(void *)((char *)&dword_10 + (v16 & 0xFFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain();
    if (!v0) {
      goto LABEL_27;
    }
LABEL_20:
    uint64_t v11 = 4;
    while (1)
    {
      id v12 = (v16 & 0xC000000000000001) != 0 ? (id)sub_A76A0() : *(id *)(v16 + 8 * v11);
      unint64_t v13 = v12;
      uint64_t v14 = v11 - 3;
      if (__OFADD__(v11 - 4, 1)) {
        break;
      }
      if ([v12 isSaved])
      {

        swift_bridgeObjectRelease_n();
        return v13;
      }

      ++v11;
      if (v14 == v0) {
        goto LABEL_27;
      }
    }
LABEL_30:
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  id v6 = [self makeEmptyCategory];

  return v6;
}

uint64_t sub_7DA08(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *a1 = v2;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v2 < 0 || (v2 & 0x4000000000000000) != 0)
  {
    uint64_t v2 = sub_42160(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8));
  v6[0] = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  v6[1] = v4;
  sub_86500(v6);
  return sub_A72C0();
}

uint64_t sub_7DA90@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_7DB10(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v2;
  return sub_A60E0();
}

uint64_t LiveSpeechStore.$isHUDVisible.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__isHUDVisible, &qword_DA6D8);
}

uint64_t sub_7DB94(void *a1)
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v2 = a1;
  return sub_A60E0();
}

void (*LiveSpeechStore.selectedCategory.modify(void *a1))(uint64_t a1, char a2)
{
  a1[2] = v1;
  unint64_t v3 = LiveSpeechStore.categoryOptions.getter();
  id v4 = v1;
  char v5 = sub_87EC8(v3);

  swift_bridgeObjectRelease();
  if (v5)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    sub_A60D0();
    swift_release();
    swift_release();
    id v6 = (id)a1[1];
  }
  else
  {
    id v6 = LiveSpeechStore.getRecentOrSavedCategory()();
  }
  *a1 = v6;
  return sub_7DCF0;
}

void sub_7DCF0(uint64_t a1, char a2)
{
  id v4 = *(void **)a1;
  swift_getKeyPath();
  swift_getKeyPath();
  *(void *)(a1 + 8) = v4;
  *(id *)(a1 + 16);
  if (a2)
  {
    id v5 = v4;
    sub_A60E0();
    id v6 = *(void **)a1;
  }
  else
  {
    sub_A60E0();
  }
}

uint64_t sub_7DDCC(unint64_t a1)
{
  unint64_t v1 = a1;
  if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0) {
    goto LABEL_39;
  }
  uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  uint64_t v18 = v1 & 0xFFFFFFFFFFFFFF8;
LABEL_4:
  if ((v2 & 0x4000000000000000) == 0)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    swift_bridgeObjectRelease();
    unint64_t v4 = (unint64_t)v3 >> 1;
    goto LABEL_6;
  }
  while (1)
  {
    swift_retain();
    uint64_t v3 = sub_A7740();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v17 = v3 >= 0 ? v3 : v3 + 1;
    if (v3 < -1) {
      __break(1u);
    }
    unint64_t v4 = v17 >> 1;
LABEL_6:
    if ((unint64_t)(v3 + 1) < 3) {
      return v2;
    }
    unint64_t v5 = 0;
    while (1)
    {
      unint64_t v7 = v5 + 1;
      unint64_t v1 = v3 - (v5 + 1);
      if (__OFSUB__(v3, v5 + 1)) {
        break;
      }
      if (v5 != v1)
      {
        uint64_t v8 = v18;
        if ((v18 & 0xC000000000000001) != 0)
        {
          uint64_t v11 = sub_A76A0();
          id v12 = (id)sub_A76A0();
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0) {
            goto LABEL_33;
          }
          unint64_t v9 = *(void *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFFF8));
          if (v5 >= v9) {
            goto LABEL_34;
          }
          id v10 = *(id *)(v18 + 8 * v5 + 32);
          if ((v1 & 0x8000000000000000) != 0) {
            goto LABEL_35;
          }
          if (v1 >= v9) {
            goto LABEL_37;
          }
          uint64_t v11 = (uint64_t)v10;
          id v12 = *(id *)(v18 + 32 + 8 * v1);
        }
        id v13 = v12;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || v18 < 0
          || (v18 & 0x4000000000000000) != 0)
        {
          uint64_t v8 = sub_42160(v18);
          uint64_t v18 = v8;
        }
        uint64_t v14 = (v8 & 0xFFFFFFFFFFFFFF8) + 8 * v5;

        *(void *)(v14 + 32) = v13;
        sub_A72C0();
        uint64_t v15 = v18;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || v18 < 0
          || (v18 & 0x4000000000000000) != 0)
        {
          uint64_t v15 = sub_42160(v18);
          uint64_t v18 = v15;
        }
        if ((v1 & 0x8000000000000000) != 0) {
          goto LABEL_36;
        }
        if (v1 >= *(void *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFFF8))) {
          goto LABEL_38;
        }
        uint64_t v6 = (v15 & 0xFFFFFFFFFFFFFF8) + 8 * v1;

        *(void *)(v6 + 32) = v11;
        sub_A72C0();
      }
      unint64_t v5 = v7;
      if (v4 == v7) {
        return v18;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    uint64_t v2 = (uint64_t)sub_86DBC(v1);
    uint64_t v18 = v2;
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_4;
    }
  }
}

uint64_t _s19LiveSpeechUIService0aB5StoreC7phrasesSaySo0aB6PhraseCGvs_0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  return sub_A60E0();
}

uint64_t (*LiveSpeechStore.selectedCategoryPhrases.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  *a1 = LiveSpeechStore.selectedCategoryPhrases.getter();
  return sub_7E09C;
}

uint64_t sub_7E09C(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  a1[1] = v4;
  (id)a1[2];
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_A60E0();
    return swift_bridgeObjectRelease();
  }
  else
  {
    return sub_A60E0();
  }
}

uint64_t sub_7E17C@<X0>(unsigned char *a1@<X8>)
{
  return sub_618A4(a1);
}

uint64_t sub_7E190(uint64_t a1, void **a2)
{
  return sub_61934(a1, a2);
}

void (*LiveSpeechStore.speechState.modify(void *a1))(void *)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_A60C0();
  return sub_7B548;
}

uint64_t LiveSpeechStore.$speechState.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__speechState, &qword_DA6D0);
}

uint64_t LiveSpeechStore.$speechState.setter(uint64_t a1)
{
  return sub_7E260(a1, &qword_DA730, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__speechState, &qword_DA6D0);
}

uint64_t sub_7E260(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = sub_7AF4(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))((char *)&v11 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6, v8);
  swift_beginAccess();
  sub_7AF4(a4);
  sub_A60B0();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
}

void (*LiveSpeechStore.$speechState.modify(void *a1))(uint64_t, char)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = sub_7AF4(&qword_DA730);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__speechState;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = sub_7AF4(&qword_DA6D0);
  sub_A60A0();
  swift_endAccess();
  return sub_7B68C;
}

id sub_7E4A0()
{
  uint64_t v1 = OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore____lazy_storage___synth;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore____lazy_storage___synth);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore____lazy_storage___synth);
  }
  else
  {
    uint64_t v4 = (void *)sub_7E500();
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t sub_7E500()
{
  uint64_t v0 = sub_A5FF0();
  uint64_t v23 = *(void *)(v0 - 8);
  uint64_t v24 = v0;
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A5C10();
  uint64_t v3 = sub_A5C00();
  id v4 = [self auxiliarySession];
  id v25 = 0;
  unsigned int v5 = [v4 setCategory:AVAudioSessionCategoryVoiceOver error:&v25];
  id v6 = v25;
  if (!v5) {
    goto LABEL_5;
  }
  id v25 = 0;
  id v7 = v6;
  unsigned int v8 = [v4 setCategoryOptions:3 error:&v25];
  id v6 = v25;
  if (!v8) {
    goto LABEL_5;
  }
  id v25 = 0;
  id v9 = v6;
  unsigned int v10 = [v4 setParticipatesInNowPlayingAppPolicy:0 error:&v25];
  id v6 = v25;
  if (v10)
  {
    id v11 = v25;
  }
  else
  {
LABEL_5:
    id v12 = v6;
    sub_A5980();

    swift_willThrow();
    sub_A5EC0();
    swift_errorRetain();
    swift_errorRetain();
    id v13 = sub_A5FE0();
    os_log_type_t v14 = sub_A7430();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      unint64_t v16 = (void *)swift_slowAlloc();
      id v21 = v4;
      long long v22 = v2;
      *(_DWORD *)uint64_t v15 = 138412290;
      swift_errorRetain();
      uint64_t v17 = (void *)_swift_stdlib_bridgeErrorToNSError();
      id v25 = v17;
      id v4 = v21;
      uint64_t v2 = v22;
      sub_A7600();
      *unint64_t v16 = v17;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl(&def_5ED54, v13, v14, "Failed to set audio session properties: %@", v15, 0xCu);
      sub_7AF4(&qword_DA910);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v2, v24);
  }
  id v18 = v4;
  sub_A5AD0();
  sub_A5AE0();

  return v3;
}

uint64_t LiveSpeechStore.SpeechContext.text.getter(uint64_t a1)
{
  return a1;
}

uint64_t LiveSpeechStore.SpeechContext.highlightRange.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t LiveSpeechStore.SpeechContext.description.getter()
{
  sub_A7220();
  v1._uint64_t countAndFlagsBits = sub_A77D0();
  sub_A7240(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x3D65676E617220;
  v2._object = (void *)0xE700000000000000;
  sub_A7240(v2);
  sub_A7710();
  v3._uint64_t countAndFlagsBits = 3943982;
  v3._object = (void *)0xE300000000000000;
  sub_A7240(v3);
  sub_A7710();
  v4._uint64_t countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  sub_A7240(v4);
  swift_bridgeObjectRelease();
  return 1030645100;
}

void LiveSpeechStore.SpeechContext.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
}

BOOL static LiveSpeechStore.SpeechContext.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 == a5 && a2 == a6) {
    return (a7 ^ a3) < 0x4000 && (a8 ^ a4) < 0x4000;
  }
  char v12 = sub_A7800();
  BOOL result = 0;
  if (v12) {
    return (a7 ^ a3) < 0x4000 && (a8 ^ a4) < 0x4000;
  }
  return result;
}

Swift::Int LiveSpeechStore.SpeechContext.hashValue.getter(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  return sub_A7890();
}

Swift::Int sub_7EB14()
{
  unint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  sub_A7850();
  swift_bridgeObjectRetain();
  sub_A7210();
  swift_bridgeObjectRelease();
  sub_A7880(v1 >> 14);
  sub_A7880(v2 >> 14);
  return sub_A7890();
}

void sub_7EB9C()
{
  unint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  sub_A7210();
  swift_bridgeObjectRelease();
  sub_A7880(v1 >> 14);
  sub_A7880(v2 >> 14);
}

Swift::Int sub_7EC08()
{
  unint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  sub_A7850();
  swift_bridgeObjectRetain();
  sub_A7210();
  swift_bridgeObjectRelease();
  sub_A7880(v1 >> 14);
  sub_A7880(v2 >> 14);
  return sub_A7890();
}

uint64_t sub_7EC8C()
{
  return LiveSpeechStore.SpeechContext.description.getter();
}

BOOL sub_7EC98(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v5 = a2[2];
  uint64_t v4 = a2[3];
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return (v5 ^ v2) < 0x4000 && (v4 ^ v3) < 0x4000;
  }
  char v7 = sub_A7800();
  BOOL result = 0;
  if (v7) {
    return (v5 ^ v2) < 0x4000 && (v4 ^ v3) < 0x4000;
  }
  return result;
}

double sub_7ED10@<D0>(_OWORD *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  double result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t sub_7ED90(uint64_t a1, void **a2)
{
  unint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return sub_A60E0();
}

uint64_t LiveSpeechStore.$currentSpeechContext.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__currentSpeechContext, &qword_DA6C8);
}

uint64_t sub_7EE34()
{
  return sub_84EA0();
}

uint64_t sub_7EE48(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_7AF4(&qword_DA3D8);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v9 = (char *)&v13 - v8;
  sub_8860(a1, (uint64_t)&v13 - v8, &qword_DA3D8);
  unsigned int v10 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_8860((uint64_t)v9, (uint64_t)v6, &qword_DA3D8);
  id v11 = v10;
  sub_A60E0();
  return sub_A35C((uint64_t)v9, &qword_DA3D8);
}

uint64_t LiveSpeechStore.$lastSpokenContext.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__lastSpokenContext, &qword_DA6C0);
}

uint64_t LiveSpeechStore.lastWillReplaySpeechDate.getter()
{
  return sub_7EF7C();
}

uint64_t sub_7EF7C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();

  return swift_release();
}

uint64_t sub_7EFEC()
{
  return sub_84EA0();
}

uint64_t sub_7F000(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_84F40(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for Date);
}

void LiveSpeechStore.LastSpokenContext.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_A7210();
  swift_bridgeObjectRelease();
  uint64_t SpokenContext = type metadata accessor for LiveSpeechStore.LastSpokenContext(0);
  sub_A5F80();
  sub_885DC(&qword_DA738, (void (*)(uint64_t))&type metadata accessor for LiveSpeechInputMode);
  sub_A7160();
  sub_A7870(*(unsigned char *)(v0 + *(int *)(SpokenContext + 24)));
  if (*(void *)(v0 + *(int *)(SpokenContext + 28) + 8))
  {
    sub_A7870(1u);
    swift_bridgeObjectRetain();
    sub_A7210();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_A7870(0);
  }
}

Swift::Int LiveSpeechStore.LastSpokenContext.hashValue.getter()
{
  return sub_A7890();
}

Swift::Int sub_7F1AC()
{
  return sub_A7890();
}

BOOL LiveSpeechStore.shouldSendSpeechToCall.getter()
{
  id v0 = sub_7BB74();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();

  swift_release();
  swift_release();
  if (v3 > 0) {
    return 1;
  }
  id v2 = sub_7BB74();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();

  swift_release();
  swift_release();
  return v3 > 0;
}

uint64_t sub_7F2D4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v42 = a6;
  int v40 = a4;
  uint64_t v39 = a2;
  uint64_t v12 = sub_A5F80();
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  uint64_t v13 = *(void *)(v36 + 64);
  __chkstk_darwin(v12);
  os_log_type_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_7AF4(&qword_D8C50);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  int v43 = a7;
  uint64_t v41 = a5;
  uint64_t v38 = a1;
  switch(v45)
  {
    case 1:
    case 2:
    case 3:
      char v18 = sub_A7800();
      swift_bridgeObjectRelease();
      if (v18) {
        goto LABEL_4;
      }
      break;
    default:
      swift_bridgeObjectRelease();
LABEL_4:
      swift_getKeyPath();
      swift_getKeyPath();
      char v44 = 1;
      id v19 = v7;
      sub_A60E0();
      break;
  }
  uint64_t v20 = sub_A7360();
  id v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
  uint64_t v35 = v17;
  v21(v17, 1, 1, v20);
  uint64_t v22 = v36;
  uint64_t v23 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v37);
  sub_A7330();
  uint64_t v24 = v42;
  swift_bridgeObjectRetain();
  id v34 = v7;
  uint64_t v25 = v39;
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_A7320();
  unint64_t v27 = (*(unsigned __int8 *)(v22 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v28 = v27 + v13;
  unint64_t v29 = (v27 + v13) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = (char *)swift_allocObject();
  uint64_t v31 = &v30[v29];
  *((void *)v30 + 2) = v26;
  *((void *)v30 + 3) = &protocol witness table for MainActor;
  uint64_t v32 = v38;
  *((void *)v30 + 4) = v34;
  *((void *)v30 + 5) = v32;
  *((void *)v30 + 6) = v25;
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(&v30[v27], v14, v23);
  v30[v28] = v40 & 1;
  *((void *)v31 + 1) = v41;
  *((void *)v31 + 2) = v24;
  v31[24] = v43 & 1;
  sub_2F8E4((uint64_t)v35, (uint64_t)&unk_DA938, (uint64_t)v30);
  return swift_release();
}

uint64_t sub_7F67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  v8[2] = sub_A7330();
  v8[3] = sub_A7320();
  uint64_t v13 = (void *)swift_task_alloc();
  v8[4] = v13;
  *uint64_t v13 = v8;
  v13[1] = sub_7F780;
  return sub_7F8BC(a5, a6, a7, a8, v16, v17, v18);
}

uint64_t sub_7F780()
{
  swift_task_dealloc();
  uint64_t v1 = sub_A7300();
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_8A1B0, v1, v0);
}

uint64_t sub_7F8BC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7)
{
  *(unsigned char *)(v8 + 1024) = a7;
  *(void *)(v8 + 376) = a6;
  *(void *)(v8 + 384) = v7;
  *(unsigned char *)(v8 + 1023) = a4;
  *(void *)(v8 + 360) = a3;
  *(void *)(v8 + 368) = a5;
  *(void *)(v8 + 344) = a1;
  *(void *)(v8 + 352) = a2;
  uint64_t v9 = sub_A5AF0();
  *(void *)(v8 + 392) = v9;
  *(void *)(v8 + 400) = *(void *)(v9 - 8);
  *(void *)(v8 + 408) = swift_task_alloc();
  sub_7AF4(&qword_DA948);
  *(void *)(v8 + 416) = swift_task_alloc();
  uint64_t v10 = sub_7AF4(&qword_DA950);
  *(void *)(v8 + 424) = v10;
  *(void *)(v8 + 432) = *(void *)(v10 - 8);
  *(void *)(v8 + 440) = swift_task_alloc();
  uint64_t v11 = sub_7AF4(&qword_DA958);
  *(void *)(v8 + 448) = v11;
  *(void *)(v8 + 456) = *(void *)(v11 - 8);
  *(void *)(v8 + 464) = swift_task_alloc();
  uint64_t v12 = sub_A5BD0();
  *(void *)(v8 + 472) = v12;
  *(void *)(v8 + 480) = *(void *)(v12 - 8);
  *(void *)(v8 + 488) = swift_task_alloc();
  uint64_t v13 = sub_A5A90();
  *(void *)(v8 + 496) = v13;
  *(void *)(v8 + 504) = *(void *)(v13 - 8);
  *(void *)(v8 + 512) = swift_task_alloc();
  uint64_t v14 = sub_A5AA0();
  *(void *)(v8 + 520) = v14;
  *(void *)(v8 + 528) = *(void *)(v14 - 8);
  *(void *)(v8 + 536) = swift_task_alloc();
  uint64_t v15 = sub_A5BB0();
  *(void *)(v8 + 544) = v15;
  *(void *)(v8 + 552) = *(void *)(v15 - 8);
  *(void *)(v8 + 560) = swift_task_alloc();
  uint64_t v16 = sub_A5BF0();
  *(void *)(v8 + 568) = v16;
  *(void *)(v8 + 576) = *(void *)(v16 - 8);
  *(void *)(v8 + 584) = swift_task_alloc();
  uint64_t v17 = sub_A5FF0();
  *(void *)(v8 + 592) = v17;
  *(void *)(v8 + 600) = *(void *)(v17 - 8);
  *(void *)(v8 + 608) = swift_task_alloc();
  *(void *)(v8 + 616) = swift_task_alloc();
  *(void *)(v8 + 624) = swift_task_alloc();
  *(void *)(v8 + 632) = swift_task_alloc();
  *(void *)(v8 + 640) = swift_task_alloc();
  *(void *)(v8 + 648) = swift_task_alloc();
  uint64_t v18 = sub_A5B40();
  *(void *)(v8 + 656) = v18;
  *(void *)(v8 + 664) = *(void *)(v18 - 8);
  *(void *)(v8 + 672) = swift_task_alloc();
  *(void *)(v8 + 680) = swift_task_alloc();
  uint64_t v19 = sub_A5B60();
  *(void *)(v8 + 688) = v19;
  *(void *)(v8 + 696) = *(void *)(v19 - 8);
  *(void *)(v8 + 704) = swift_task_alloc();
  *(void *)(v8 + 712) = swift_task_alloc();
  *(void *)(v8 + 720) = swift_task_alloc();
  sub_7AF4(&qword_DA960);
  *(void *)(v8 + 728) = swift_task_alloc();
  *(void *)(v8 + 736) = swift_task_alloc();
  *(void *)(v8 + 744) = swift_task_alloc();
  *(void *)(v8 + 752) = swift_task_alloc();
  *(void *)(v8 + 760) = swift_task_alloc();
  *(void *)(v8 + 768) = swift_task_alloc();
  uint64_t v20 = sub_7AF4(&qword_DA968);
  *(void *)(v8 + 776) = v20;
  *(void *)(v8 + 784) = *(void *)(v20 - 8);
  *(void *)(v8 + 792) = swift_task_alloc();
  sub_7AF4(&qword_DA970);
  *(void *)(v8 + 800) = swift_task_alloc();
  uint64_t v21 = sub_A5C60();
  *(void *)(v8 + 808) = v21;
  *(void *)(v8 + 816) = *(void *)(v21 - 8);
  *(void *)(v8 + 824) = swift_task_alloc();
  sub_7AF4(&qword_DA3D8);
  *(void *)(v8 + 832) = swift_task_alloc();
  *(void *)(v8 + 840) = swift_task_alloc();
  uint64_t v22 = sub_A5F80();
  *(void *)(v8 + 848) = v22;
  *(void *)(v8 + 856) = *(void *)(v22 - 8);
  *(void *)(v8 + 864) = swift_task_alloc();
  *(void *)(v8 + 872) = sub_A7330();
  *(void *)(v8 + 880) = sub_A7320();
  uint64_t v23 = sub_A7300();
  *(void *)(v8 + 888) = v23;
  *(void *)(v8 + 896) = v24;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_80030, v23, v24);
}

uint64_t sub_80030()
{
  unint64_t v1 = *(void *)(v0 + 352);
  if ((v1 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(v1) & 0xF;
  }
  else {
    uint64_t v2 = *(void *)(v0 + 344) & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 856) + 104))(*(void *)(v0 + 864), enum case for LiveSpeechInputMode.keyboard(_:), *(void *)(v0 + 848));
    sub_885DC(&qword_D9DC0, (void (*)(uint64_t))&type metadata accessor for LiveSpeechInputMode);
    sub_A7280();
    sub_A7280();
    uint64_t v3 = *(void *)(v0 + 864);
    uint64_t v4 = *(void *)(v0 + 856);
    uint64_t v5 = *(void *)(v0 + 848);
    if (*(void *)(v0 + 256) == *(void *)(v0 + 208) && *(void *)(v0 + 264) == *(void *)(v0 + 216))
    {
      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    }
    else
    {
      char v8 = sub_A7800();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
      if ((v8 & 1) == 0)
      {
LABEL_13:
        if (*(void *)(v0 + 376))
        {
          uint64_t v20 = *(void *)(v0 + 368);
          uint64_t v21 = *(void *)(v0 + 376);
        }
        else
        {
          id v22 = [self currentLanguageCode];
          uint64_t v20 = sub_A71D0();
          uint64_t v21 = v23;
        }
        *(void *)(v0 + 224) = v20;
        *(void *)(v0 + 232) = v21;
        *(void *)(v0 + 192) = 95;
        *(void *)(v0 + 200) = 0xE100000000000000;
        *(void *)(v0 + 176) = 45;
        *(void *)(v0 + 184) = 0xE100000000000000;
        sub_FF30();
        swift_bridgeObjectRetain();
        uint64_t v24 = sub_A7620();
        uint64_t v26 = v25;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 904) = v24;
        *(void *)(v0 + 912) = v26;
        *(void *)(v0 + 240) = v24;
        *(void *)(v0 + 248) = v26;
        *(void *)(v0 + 920) = sub_A7400();
        swift_bridgeObjectRetain();
        unint64_t v27 = (char *)sub_A73F0();
        uint64_t v28 = (id *)&v27[direct field offset for AXPreferences.liveSpeech];
        swift_beginAccess();
        id v29 = *v28;

        uint64_t v30 = (void *)sub_A73E0();
        sub_A5C70();

        uint64_t v31 = (void *)swift_task_alloc();
        *(void *)(v0 + 928) = v31;
        void *v31 = v0;
        v31[1] = sub_806DC;
        uint64_t v32 = *(void *)(v0 + 800);
        return AsyncStream<A>.selection(for:)(v32, v24, v26);
      }
    }
    uint64_t v9 = *(void *)(v0 + 856);
    uint64_t v10 = *(void *)(v0 + 848);
    uint64_t v11 = *(char **)(v0 + 840);
    uint64_t v34 = *(void *)(v0 + 832);
    uint64_t v35 = *(void **)(v0 + 384);
    uint64_t v12 = *(void *)(v0 + 368);
    uint64_t v33 = *(void *)(v0 + 376);
    char v13 = *(unsigned char *)(v0 + 1023);
    uint64_t v14 = *(void *)(v0 + 352);
    uint64_t v15 = *(void *)(v0 + 360);
    uint64_t v16 = *(void *)(v0 + 344);
    uint64_t SpokenContext = (int *)type metadata accessor for LiveSpeechStore.LastSpokenContext(0);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(&v11[SpokenContext[5]], v15, v10);
    *(void *)uint64_t v11 = v16;
    *((void *)v11 + 1) = v14;
    v11[SpokenContext[6]] = v13;
    uint64_t v18 = &v11[SpokenContext[7]];
    *(void *)uint64_t v18 = v12;
    *((void *)v18 + 1) = v33;
    (*(void (**)(char *, void, uint64_t, int *))(*((void *)SpokenContext - 1) + 56))(v11, 0, 1, SpokenContext);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_8860((uint64_t)v11, v34, &qword_DA3D8);
    swift_bridgeObjectRetain();
    id v19 = v35;
    swift_bridgeObjectRetain();
    sub_A60E0();
    sub_A35C((uint64_t)v11, &qword_DA3D8);
    goto LABEL_13;
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_806DC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 792);
  uint64_t v3 = *(void *)(*v0 + 784);
  uint64_t v4 = *(void *)(*v0 + 776);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = *(void *)(v1 + 896);
  uint64_t v6 = *(void *)(v1 + 888);
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_8088C, v6, v5);
}

uint64_t sub_8088C()
{
  uint64_t v24 = v0;
  uint64_t v1 = v0[102];
  uint64_t v2 = v0[101];
  uint64_t v3 = v0[100];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    sub_A35C(v3, &qword_DA970);
LABEL_8:
    sub_A5EC0();
    uint64_t v12 = sub_A5FE0();
    os_log_type_t v13 = sub_A7430();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = v0[78];
    uint64_t v16 = v0[75];
    uint64_t v17 = v0[74];
    if (v14)
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      v23[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      swift_beginAccess();
      uint64_t v19 = v0[31];
      if (v19) {
        uint64_t v20 = v0[30];
      }
      else {
        uint64_t v20 = 7104878;
      }
      if (v19) {
        unint64_t v21 = v0[31];
      }
      else {
        unint64_t v21 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      v0[41] = sub_15F94(v20, v21, v23);
      sub_A7600();
      swift_bridgeObjectRelease();
      _os_log_impl(&def_5ED54, v12, v13, "Failed to get voice selection or default for %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    }
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
  (*(void (**)(void, uint64_t, uint64_t))(v1 + 32))(v0[103], v3, v2);
  uint64_t v4 = sub_A5C50();
  v0[117] = v5;
  if (!v5)
  {
    (*(void (**)(void, void))(v0[102] + 8))(v0[103], v0[101]);
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  v0[118] = sub_7E4A0();
  uint64_t v8 = async function pointer to dispatch thunk of CoreSynthesizer.voice(identifier:);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[119] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_80DD8;
  uint64_t v10 = v0[96];
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of CoreSynthesizer.voice(identifier:)
                                                            + v8))(v10, v6, v7);
}

uint64_t sub_80DD8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 944);
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  uint64_t v3 = *(void *)(v1 + 896);
  uint64_t v4 = *(void *)(v1 + 888);
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_80F68, v4, v3);
}

uint64_t sub_80F68()
{
  uint64_t v134 = v0;
  uint64_t v1 = *(void *)(v0 + 760);
  uint64_t v2 = *(void *)(v0 + 696);
  uint64_t v3 = *(void *)(v0 + 688);
  sub_8860(*(void *)(v0 + 768), v1, &qword_DA960);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  *(void *)(v0 + 960) = v4;
  *(void *)(v0 + 968) = (v2 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  uint64_t v132 = v4;
  if (v4(v1, 1, v3) == 1)
  {
    sub_A35C(*(void *)(v0 + 760), &qword_DA960);
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 680);
    uint64_t v6 = *(void *)(v0 + 672);
    uint64_t v7 = *(void *)(v0 + 664);
    uint64_t v8 = *(void *)(v0 + 656);
    (*(void (**)(void, void, void))(*(void *)(v0 + 696) + 32))(*(void *)(v0 + 720), *(void *)(v0 + 760), *(void *)(v0 + 688));
    sub_A5B50();
    sub_A5B30();
    sub_885DC(&qword_DA9A0, (void (*)(uint64_t))&type metadata accessor for CoreSynthesizer.Voice.Trait);
    char v9 = sub_A7630();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v10(v6, v8);
    v10(v5, v8);
    if (v9 & 1) != 0 && (id v11 = sub_7BC14(), v12 = sub_A6020(), v11, (v12))
    {
      sub_A5EC0();
      os_log_type_t v13 = sub_A5FE0();
      os_log_type_t v14 = sub_A7450();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl(&def_5ED54, v13, v14, "Cannot speak with personal voice. Device locked. Falling back to system voice", v15, 2u);
        swift_slowDealloc();
      }
      uint64_t v16 = *(void *)(v0 + 768);
      uint64_t v17 = *(void *)(v0 + 720);
      uint64_t v18 = *(void *)(v0 + 696);
      uint64_t v19 = *(void *)(v0 + 688);
      uint64_t v20 = *(void *)(v0 + 648);
      uint64_t v21 = *(void *)(v0 + 600);
      uint64_t v22 = *(void *)(v0 + 592);

      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
      sub_A35C(v16, &qword_DA960);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v19);
    }
    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 696) + 8))(*(void *)(v0 + 720), *(void *)(v0 + 688));
    }
  }
  uint64_t v131 = (unsigned __int8 *)(v0 + 1023);
  uint64_t v130 = (void **)(v0 + 320);
  sub_A5EC0();
  swift_bridgeObjectRetain_n();
  uint64_t v23 = sub_A5FE0();
  os_log_type_t v24 = sub_A7450();
  BOOL v25 = os_log_type_enabled(v23, v24);
  unint64_t v26 = *(void *)(v0 + 912);
  if (v25)
  {
    os_log_type_t v129 = v24;
    uint64_t v27 = *(void *)(v0 + 904);
    uint64_t v28 = *(void *)(v0 + 768);
    uint64_t v29 = *(void *)(v0 + 688);
    uint64_t v30 = swift_slowAlloc();
    v133[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136315906;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 336) = sub_15F94(v27, v26, v133);
    sub_A7600();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v30 + 12) = 2080;
    swift_beginAccess();
    if (v132(v28, 1, v29))
    {
      unint64_t v31 = 0xE400000000000000;
      uint64_t v32 = 1869903201;
    }
    else
    {
      uint64_t v37 = *(void *)(v0 + 712);
      uint64_t v38 = *(void *)(v0 + 696);
      uint64_t v39 = *(void *)(v0 + 688);
      (*(void (**)(uint64_t, void, uint64_t))(v38 + 16))(v37, *(void *)(v0 + 768), v39);
      uint64_t v32 = sub_A5B10();
      unint64_t v31 = v40;
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
    }
    log = v23;
    uint64_t v41 = *(void *)(v0 + 768);
    uint64_t v42 = *(void *)(v0 + 688);
    *(void *)(v0 + 312) = sub_15F94(v32, v31, v133);
    sub_A7600();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 22) = 2080;
    if (v132(v41, 1, v42))
    {
      unint64_t v43 = 0xE400000000000000;
      uint64_t v44 = 1869903201;
    }
    else
    {
      uint64_t v45 = *(void *)(v0 + 712);
      uint64_t v46 = *(void *)(v0 + 696);
      uint64_t v47 = *(void *)(v0 + 688);
      (*(void (**)(uint64_t, void, uint64_t))(v46 + 16))(v45, *(void *)(v0 + 768), v47);
      uint64_t v44 = sub_A5B00();
      unint64_t v43 = v48;
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
    }
    uint64_t v49 = *(void *)(v0 + 640);
    uint64_t v50 = *(void *)(v0 + 600);
    uint64_t v51 = *(void *)(v0 + 592);
    int v52 = *v131;
    *(void *)(v0 + 296) = sub_15F94(v44, v43, v133);
    sub_A7600();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 32) = 1024;
    *(_DWORD *)(v0 + 1016) = v52;
    sub_A7600();
    _os_log_impl(&def_5ED54, log, v129, "Will speak with inputID=%s voice=%s voice=%s mixToTelephonyUplink=%{BOOL}d", (uint8_t *)v30, 0x26u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    v36(v49, v51);
  }
  else
  {
    uint64_t v33 = *(void *)(v0 + 640);
    uint64_t v34 = *(void *)(v0 + 600);
    uint64_t v35 = *(void *)(v0 + 592);
    swift_bridgeObjectRelease_n();

    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v36(v33, v35);
  }
  *(void *)(v0 + 976) = v36;
  uint64_t v53 = *(void *)(v0 + 768);
  uint64_t v54 = *(void *)(v0 + 752);
  uint64_t v55 = *(void *)(v0 + 688);
  swift_beginAccess();
  sub_8860(v53, v54, &qword_DA960);
  LODWORD(v53) = v132(v54, 1, v55);
  sub_A35C(v54, &qword_DA960);
  if (v53 == 1)
  {
    uint64_t v56 = (char *)sub_A73F0();
    uint64_t v57 = (void **)&v56[direct field offset for AXPreferences.liveSpeech];
    swift_beginAccess();
    uint64_t v58 = *v57;
    *(void *)(v0 + 984) = *v57;
    v58;

    uint64_t v59 = (void *)swift_task_alloc();
    *(void *)(v0 + 992) = v59;
    *uint64_t v59 = v0;
    v59[1] = sub_82278;
    uint64_t v60 = *(void *)(v0 + 744);
    return AXPreferences.LiveSpeech.systemDefaultVoice()(v60);
  }
  else
  {
    uint64_t v61 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 960);
    uint64_t v62 = *(void *)(v0 + 736);
    uint64_t v63 = *(void *)(v0 + 688);
    sub_8860(*(void *)(v0 + 768), v62, &qword_DA960);
    if (v61(v62, 1, v63) == 1)
    {
      uint64_t v64 = *(void *)(v0 + 736);
      swift_release();
      swift_bridgeObjectRelease();
      sub_A35C(v64, &qword_DA960);
      sub_A5EC0();
      uint64_t v65 = sub_A5FE0();
      os_log_type_t v66 = sub_A7430();
      if (os_log_type_enabled(v65, v66))
      {
        double v67 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)double v67 = 0;
        _os_log_impl(&def_5ED54, v65, v66, "Failed to get voice.", v67, 2u);
        swift_slowDealloc();
      }
      uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v0 + 976);
      uint64_t v69 = *(void *)(v0 + 824);
      uint64_t v70 = *(void *)(v0 + 816);
      uint64_t v71 = *(void *)(v0 + 808);
      uint64_t v72 = *(void *)(v0 + 768);
      uint64_t v73 = *(void *)(v0 + 632);
      uint64_t v74 = *(void *)(v0 + 592);

      v68(v73, v74);
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v71);
      sub_A35C(v72, &qword_DA960);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unsigned __int8 v75 = *(uint64_t (**)(void))(v0 + 8);
      return v75();
    }
    else
    {
      uint64_t v118 = *(void *)(v0 + 704);
      uint64_t v76 = *(void *)(v0 + 696);
      uint64_t v77 = *(void *)(v0 + 688);
      uint64_t v78 = *(void *)(v0 + 560);
      uint64_t v79 = *(void *)(v0 + 552);
      uint64_t v119 = *(void *)(v0 + 544);
      uint64_t v120 = *(void *)(v0 + 728);
      uint64_t v122 = *(void *)(v0 + 528);
      uint64_t v123 = *(void *)(v0 + 536);
      uint64_t v124 = *(void *)(v0 + 520);
      uint64_t v125 = *(void *)(v0 + 504);
      uint64_t v126 = *(void *)(v0 + 512);
      uint64_t v127 = *(void *)(v0 + 496);
      int v121 = *(unsigned __int8 *)(v0 + 1024);
      uint64_t v80 = *(void *)(v0 + 344);
      uint64_t v81 = *(void *)(v0 + 352);
      (*(void (**)(void))(v76 + 32))();
      swift_bridgeObjectRetain();
      uint64_t v82 = sub_A5C20();
      uint64_t v83 = sub_A5C30();
      uint64_t v84 = sub_A5C40();
      *(void *)uint64_t v78 = v80;
      *(void *)(v78 + 8) = v81;
      *(_DWORD *)(v78 + 16) = v82;
      *(unsigned char *)(v78 + 20) = BYTE4(v82) & 1;
      *(_DWORD *)(v78 + 24) = v83;
      *(unsigned char *)(v78 + 28) = BYTE4(v83) & 1;
      *(_DWORD *)(v78 + 32) = v84;
      *(unsigned char *)(v78 + 36) = BYTE4(v84) & 1;
      (*(void (**)(uint64_t, void, uint64_t))(v79 + 104))(v78, enum case for CoreSynthesizer.Utterance.Speech.basicProsody(_:), v119);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16))(v120, v118, v77);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v76 + 56))(v120, 0, 1, v77);
      uint64_t v85 = (unsigned int *)&enum case for TTSSpeechQueue.IsoPrioritizedBehavior.replace(_:);
      if (!v121) {
        uint64_t v85 = (unsigned int *)&enum case for TTSSpeechQueue.IsoPrioritizedBehavior.queueBehind(_:);
      }
      (*(void (**)(uint64_t, void, uint64_t))(v122 + 104))(v123, *v85, v124);
      (*(void (**)(uint64_t, void, uint64_t))(v125 + 104))(v126, enum case for TTSSpeechQueue.QueuingBehavior.stop(_:), v127);
      sub_7AF4(&qword_DA978);
      uint64_t v86 = swift_allocObject();
      *(_OWORD *)(v86 + 16) = xmmword_A9C60;
      sub_A5BC0();
      *(void *)(v0 + 272) = v86;
      sub_885DC(&qword_DA980, (void (*)(uint64_t))&type metadata accessor for CoreSynthesizer.Utterance.ReplacementOptions);
      sub_7AF4(&qword_DA988);
      sub_A45C(&qword_DA990, &qword_DA988);
      sub_A7640();
      sub_A5BE0();
      *(void *)(v0 + 40) = &type metadata for LiveSpeechFeatureFlags;
      *(void *)(v0 + 48) = sub_89F78();
      char v87 = sub_A5A80();
      sub_16430(v0 + 16);
      id v88 = sub_7E4A0();
      uint64_t v89 = *v131;
      if (v87)
      {
        char v90 = (void *)sub_A5AC0();

        *uint64_t v130 = 0;
        unsigned int v91 = [v90 setPreferredMicrophoneInjectionMode:v89 error:v130];

        uint64_t v92 = *v130;
        if (v91)
        {
          id v93 = v92;
        }
        else
        {
          id v94 = v92;
          sub_A5980();

          swift_willThrow();
          sub_A5EC0();
          swift_errorRetain();
          swift_errorRetain();
          uint64_t v95 = sub_A5FE0();
          os_log_type_t v96 = sub_A7430();
          if (os_log_type_enabled(v95, v96))
          {
            uint64_t v97 = (uint8_t *)swift_slowAlloc();
            id v98 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v97 = 138412290;
            swift_errorRetain();
            uint64_t v99 = _swift_stdlib_bridgeErrorToNSError();
            *(void *)(v0 + 280) = v99;
            sub_A7600();
            *id v98 = v99;
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl(&def_5ED54, v95, v96, "Failed to set microphone injection mode: %@", v97, 0xCu);
            sub_7AF4(&qword_DA910);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            swift_errorRelease();
          }
          else
          {
            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();
          }
          (*(void (**)(void, void))(v0 + 976))(*(void *)(v0 + 616), *(void *)(v0 + 592));
        }
      }
      else
      {
        sub_A5AB0();
      }
      uint64_t v100 = *(void *)(v0 + 680);
      uint64_t v101 = *(void *)(v0 + 672);
      uint64_t v102 = *(void *)(v0 + 664);
      uint64_t v103 = *(void *)(v0 + 656);
      sub_A5B50();
      sub_A5B30();
      sub_885DC(&qword_DA9A0, (void (*)(uint64_t))&type metadata accessor for CoreSynthesizer.Voice.Trait);
      char v104 = sub_A7630();
      id v105 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
      v105(v101, v103);
      v105(v100, v103);
      if ((v104 & 1) == 0) {
        sub_A5B20();
      }
      sub_A5F50();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_getKeyPath();
      swift_getKeyPath();
      sub_A60D0();
      swift_release();
      swift_release();
      switch(*(unsigned char *)(v0 + 1022))
      {
        case 1:
        case 2:
        case 3:
          char v106 = sub_A7800();
          swift_bridgeObjectRelease();
          if (v106) {
            goto LABEL_43;
          }
          break;
        default:
          swift_bridgeObjectRelease();
LABEL_43:
          uint64_t v107 = *(void **)(v0 + 384);
          swift_getKeyPath();
          swift_getKeyPath();
          *(unsigned char *)(v0 + 1020) = 1;
          id v108 = v107;
          sub_A60E0();
          break;
      }
      uint64_t v110 = *(void *)(v0 + 432);
      uint64_t v109 = *(void *)(v0 + 440);
      uint64_t v111 = *(void *)(v0 + 424);
      id v112 = sub_7E4A0();
      sub_A5BA0();

      sub_A7380();
      (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v109, v111);
      uint64_t v113 = sub_A7320();
      *(void *)(v0 + 1000) = v113;
      id v114 = (void *)swift_task_alloc();
      *(void *)(v0 + 1008) = v114;
      *id v114 = v0;
      v114[1] = sub_82FFC;
      uint64_t v115 = *(void *)(v0 + 448);
      uint64_t v116 = *(void *)(v0 + 416);
      return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v116, v113, &protocol witness table for MainActor, v115, v0 + 288);
    }
  }
}

uint64_t sub_82278()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 984);
  swift_task_dealloc();

  uint64_t v3 = *(void *)(v1 + 896);
  uint64_t v4 = *(void *)(v1 + 888);
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_823E4, v4, v3);
}

uint64_t sub_823E4()
{
  uint64_t v1 = *(void *)(v0 + 768);
  uint64_t v2 = *(void *)(v0 + 744);
  (*(void (**)(uint64_t, void, uint64_t, void))(*(void *)(v0 + 696) + 56))(v2, 0, 1, *(void *)(v0 + 688));
  sub_89F10(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 960);
  uint64_t v4 = *(void *)(v0 + 736);
  uint64_t v5 = *(void *)(v0 + 688);
  sub_8860(*(void *)(v0 + 768), v4, &qword_DA960);
  int v6 = v3(v4, 1, v5);
  uint64_t v7 = *(void *)(v0 + 736);
  if (v6 == 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    sub_A35C(v7, &qword_DA960);
    sub_A5EC0();
    uint64_t v8 = sub_A5FE0();
    os_log_type_t v9 = sub_A7430();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&def_5ED54, v8, v9, "Failed to get voice.", v10, 2u);
      swift_slowDealloc();
    }
    id v11 = *(void (**)(uint64_t, uint64_t))(v0 + 976);
    uint64_t v12 = *(void *)(v0 + 824);
    uint64_t v13 = *(void *)(v0 + 816);
    uint64_t v14 = *(void *)(v0 + 808);
    uint64_t v15 = *(void *)(v0 + 768);
    uint64_t v16 = *(void *)(v0 + 632);
    uint64_t v17 = *(void *)(v0 + 592);

    v11(v16, v17);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    sub_A35C(v15, &qword_DA960);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
  else
  {
    uint64_t v63 = *(void *)(v0 + 728);
    uint64_t v61 = *(void *)(v0 + 704);
    uint64_t v20 = *(void *)(v0 + 696);
    uint64_t v21 = *(void *)(v0 + 688);
    uint64_t v22 = *(void *)(v0 + 560);
    uint64_t v23 = *(void *)(v0 + 552);
    uint64_t v62 = *(void *)(v0 + 544);
    uint64_t v65 = *(void *)(v0 + 528);
    uint64_t v66 = *(void *)(v0 + 536);
    uint64_t v67 = *(void *)(v0 + 520);
    uint64_t v68 = *(void *)(v0 + 504);
    uint64_t v69 = *(void *)(v0 + 512);
    uint64_t v70 = *(void *)(v0 + 496);
    int v64 = *(unsigned __int8 *)(v0 + 1024);
    uint64_t v24 = *(void *)(v0 + 344);
    uint64_t v25 = *(void *)(v0 + 352);
    (*(void (**)(void))(v20 + 32))();
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_A5C20();
    uint64_t v27 = sub_A5C30();
    uint64_t v28 = sub_A5C40();
    *(void *)uint64_t v22 = v24;
    *(void *)(v22 + 8) = v25;
    *(_DWORD *)(v22 + 16) = v26;
    *(unsigned char *)(v22 + 20) = BYTE4(v26) & 1;
    *(_DWORD *)(v22 + 24) = v27;
    *(unsigned char *)(v22 + 28) = BYTE4(v27) & 1;
    *(_DWORD *)(v22 + 32) = v28;
    *(unsigned char *)(v22 + 36) = BYTE4(v28) & 1;
    (*(void (**)(uint64_t, void, uint64_t))(v23 + 104))(v22, enum case for CoreSynthesizer.Utterance.Speech.basicProsody(_:), v62);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v63, v61, v21);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v63, 0, 1, v21);
    uint64_t v29 = (unsigned int *)&enum case for TTSSpeechQueue.IsoPrioritizedBehavior.replace(_:);
    if (!v64) {
      uint64_t v29 = (unsigned int *)&enum case for TTSSpeechQueue.IsoPrioritizedBehavior.queueBehind(_:);
    }
    (*(void (**)(uint64_t, void, uint64_t))(v65 + 104))(v66, *v29, v67);
    (*(void (**)(uint64_t, void, uint64_t))(v68 + 104))(v69, enum case for TTSSpeechQueue.QueuingBehavior.stop(_:), v70);
    sub_7AF4(&qword_DA978);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_A9C60;
    sub_A5BC0();
    *(void *)(v0 + 272) = v30;
    sub_885DC(&qword_DA980, (void (*)(uint64_t))&type metadata accessor for CoreSynthesizer.Utterance.ReplacementOptions);
    sub_7AF4(&qword_DA988);
    sub_A45C(&qword_DA990, &qword_DA988);
    sub_A7640();
    sub_A5BE0();
    *(void *)(v0 + 40) = &type metadata for LiveSpeechFeatureFlags;
    *(void *)(v0 + 48) = sub_89F78();
    char v31 = sub_A5A80();
    sub_16430(v0 + 16);
    id v32 = sub_7E4A0();
    uint64_t v33 = *(unsigned __int8 *)(v0 + 1023);
    if (v31)
    {
      uint64_t v34 = (void *)sub_A5AC0();

      *(void *)(v0 + 320) = 0;
      unsigned int v35 = [v34 setPreferredMicrophoneInjectionMode:v33 error:v0 + 320];

      uint64_t v36 = *(void **)(v0 + 320);
      if (v35)
      {
        id v37 = v36;
      }
      else
      {
        id v38 = v36;
        sub_A5980();

        swift_willThrow();
        sub_A5EC0();
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v39 = sub_A5FE0();
        os_log_type_t v40 = sub_A7430();
        if (os_log_type_enabled(v39, v40))
        {
          uint64_t v41 = (uint8_t *)swift_slowAlloc();
          uint64_t v42 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 138412290;
          swift_errorRetain();
          uint64_t v43 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 280) = v43;
          sub_A7600();
          void *v42 = v43;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl(&def_5ED54, v39, v40, "Failed to set microphone injection mode: %@", v41, 0xCu);
          sub_7AF4(&qword_DA910);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }
        (*(void (**)(void, void))(v0 + 976))(*(void *)(v0 + 616), *(void *)(v0 + 592));
      }
    }
    else
    {
      sub_A5AB0();
    }
    uint64_t v44 = *(void *)(v0 + 680);
    uint64_t v45 = *(void *)(v0 + 672);
    uint64_t v46 = *(void *)(v0 + 664);
    uint64_t v47 = *(void *)(v0 + 656);
    sub_A5B50();
    sub_A5B30();
    sub_885DC(&qword_DA9A0, (void (*)(uint64_t))&type metadata accessor for CoreSynthesizer.Voice.Trait);
    char v48 = sub_A7630();
    uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
    v49(v45, v47);
    v49(v44, v47);
    if ((v48 & 1) == 0) {
      sub_A5B20();
    }
    sub_A5F50();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_getKeyPath();
    swift_getKeyPath();
    sub_A60D0();
    swift_release();
    swift_release();
    switch(*(unsigned char *)(v0 + 1022))
    {
      case 1:
      case 2:
      case 3:
        char v50 = sub_A7800();
        swift_bridgeObjectRelease();
        if (v50) {
          goto LABEL_22;
        }
        break;
      default:
        swift_bridgeObjectRelease();
LABEL_22:
        uint64_t v51 = *(void **)(v0 + 384);
        swift_getKeyPath();
        swift_getKeyPath();
        *(unsigned char *)(v0 + 1020) = 1;
        id v52 = v51;
        sub_A60E0();
        break;
    }
    uint64_t v54 = *(void *)(v0 + 432);
    uint64_t v53 = *(void *)(v0 + 440);
    uint64_t v55 = *(void *)(v0 + 424);
    id v56 = sub_7E4A0();
    sub_A5BA0();

    sub_A7380();
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
    uint64_t v57 = sub_A7320();
    *(void *)(v0 + 1000) = v57;
    uint64_t v58 = (void *)swift_task_alloc();
    *(void *)(v0 + 1008) = v58;
    *uint64_t v58 = v0;
    v58[1] = sub_82FFC;
    uint64_t v59 = *(void *)(v0 + 448);
    uint64_t v60 = *(void *)(v0 + 416);
    return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v60, v57, &protocol witness table for MainActor, v59, v0 + 288);
  }
}

uint64_t sub_82FFC()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 896);
  uint64_t v4 = *(void *)(v2 + 888);
  if (v0) {
    uint64_t v5 = sub_83594;
  }
  else {
    uint64_t v5 = sub_83158;
  }
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(v5, v4, v3);
}

uint64_t sub_83158()
{
  uint64_t v1 = v0[52];
  uint64_t v2 = v0[49];
  uint64_t v3 = v0[50];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v5 = v0[57];
    uint64_t v4 = v0[58];
    uint64_t v6 = v0[56];
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v7 = v0[103];
    uint64_t v8 = v0[102];
    uint64_t v9 = v0[101];
    uint64_t v10 = v0[96];
    uint64_t v11 = v0[88];
    uint64_t v12 = v0[87];
    uint64_t v13 = v0[86];
    (*(void (**)(void, void))(v0[72] + 8))(v0[73], v0[71]);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    sub_A35C(v10, &qword_DA960);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
  else
  {
    uint64_t v16 = v0[51];
    uint64_t v18 = v0[43];
    uint64_t v17 = v0[44];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v16, v1, v2);
    sub_83A34(v16, v18, v17);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v16, v2);
    uint64_t v19 = sub_A7320();
    v0[125] = v19;
    uint64_t v20 = (void *)swift_task_alloc();
    v0[126] = v20;
    void *v20 = v0;
    v20[1] = sub_82FFC;
    uint64_t v21 = v0[56];
    uint64_t v22 = v0[52];
    return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v22, v19, &protocol witness table for MainActor, v21, v0 + 36);
  }
}

uint64_t sub_83594()
{
  uint64_t v2 = *(void *)(v0 + 456);
  uint64_t v1 = *(void *)(v0 + 464);
  uint64_t v3 = *(void *)(v0 + 448);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_A5EC0();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = sub_A5FE0();
  os_log_type_t v5 = sub_A7430();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 304) = v8;
    sub_A7600();
    void *v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl(&def_5ED54, v4, v5, "Speech error: %@", v6, 0xCu);
    sub_7AF4(&qword_DA910);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0 + 976);
  uint64_t v10 = *(void *)(v0 + 608);
  uint64_t v11 = *(void *)(v0 + 592);
  uint64_t v12 = *(void **)(v0 + 384);

  v9(v10, v11);
  swift_getKeyPath();
  swift_getKeyPath();
  *(unsigned char *)(v0 + 1021) = 0;
  id v13 = v12;
  sub_A60E0();
  swift_errorRelease();
  uint64_t v14 = *(void *)(v0 + 824);
  uint64_t v15 = *(void *)(v0 + 816);
  uint64_t v16 = *(void *)(v0 + 808);
  uint64_t v17 = *(void *)(v0 + 768);
  uint64_t v18 = *(void *)(v0 + 704);
  uint64_t v19 = *(void *)(v0 + 696);
  uint64_t v20 = *(void *)(v0 + 688);
  (*(void (**)(void, void))(*(void *)(v0 + 576) + 8))(*(void *)(v0 + 584), *(void *)(v0 + 568));
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  sub_A35C(v17, &qword_DA960);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
  return v21();
}

void sub_83A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *((void *)&v60 + 1) = a3;
  *(void *)&long long v60 = a2;
  uint64_t v66 = a1;
  uint64_t v65 = sub_A5B70();
  uint64_t v63 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v62 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_A5B90();
  uint64_t v64 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_A5FF0();
  uint64_t v59 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v59 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v59 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v59 - v17;
  uint64_t v19 = sub_A5AF0();
  uint64_t v20 = *(void *)(v19 - 8);
  __n128 v21 = __chkstk_darwin(v19);
  uint64_t v23 = (id *)((char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(id *, uint64_t, uint64_t, __n128))(v20 + 16))(v23, v66, v19, v21);
  int v24 = (*(uint64_t (**)(id *, uint64_t))(v20 + 88))(v23, v19);
  if (v24 == enum case for CoreSynthesizer.Event.preempted(_:))
  {
    (*(void (**)(id *, uint64_t))(v20 + 96))(v23, v19);
    swift_unknownObjectRelease();
    return;
  }
  uint64_t v25 = v15;
  uint64_t v26 = v9;
  uint64_t v27 = v6;
  uint64_t v28 = v64;
  uint64_t v29 = v65;
  if (v24 == enum case for CoreSynthesizer.Event.marker(_:))
  {
    (*(void (**)(id *, uint64_t))(v20 + 96))(v23, v19);
    uint64_t v30 = v27;
    char v31 = v27;
    uint64_t v32 = v4;
    (*(void (**)(char *, id *, uint64_t))(v28 + 32))(v31, v23, v4);
    uint64_t v33 = (uint64_t *)v62;
    sub_A5B80();
    uint64_t v34 = v63;
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v63 + 88))(v33, v29) == enum case for CoreSynthesizer.Marker.Mark.word(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v34 + 96))(v33, v29);
      uint64_t v35 = *v33;
      uint64_t v36 = v33[1];
      swift_getKeyPath();
      swift_getKeyPath();
      long long v67 = v60;
      v68.i64[0] = v35;
      v68.i64[1] = v36;
      id v37 = v61;
      swift_bridgeObjectRetain();
      sub_A60E0();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v32);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v4);
      (*(void (**)(uint64_t *, uint64_t))(v34 + 8))(v33, v29);
    }
    return;
  }
  if (v24 == enum case for CoreSynthesizer.Event.buffer(_:))
  {
    (*(void (**)(id *, uint64_t))(v20 + 96))(v23, v19);

    return;
  }
  if (v24 == enum case for CoreSynthesizer.Event.finished(_:))
  {
    id v38 = v26;
    sub_A5EC0();
    uint64_t v39 = sub_A5FE0();
    os_log_type_t v40 = sub_A7450();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl(&def_5ED54, v39, v40, "speech did finish.", v41, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v59 + 8))(v38, v7);
    swift_getKeyPath();
    swift_getKeyPath();
    LOBYTE(v67) = 0;
    id v42 = v61;
    sub_A60E0();
    swift_getKeyPath();
    swift_getKeyPath();
    long long v67 = 0u;
    int64x2_t v68 = 0u;
    id v43 = v42;
    goto LABEL_19;
  }
  if (v24 == enum case for CoreSynthesizer.Event.started(_:))
  {
    sub_A5EC0();
    uint64_t v44 = sub_A5FE0();
    os_log_type_t v45 = sub_A7450();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl(&def_5ED54, v44, v45, "speech did start.", v46, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v59 + 8))(v18, v7);
    swift_getKeyPath();
    swift_getKeyPath();
    LOBYTE(v67) = 2;
    id v47 = v61;
    sub_A60E0();
    swift_getKeyPath();
    swift_getKeyPath();
    long long v67 = v60;
    int64x2_t v68 = vdupq_n_s64(0xFuLL);
    v47;
    swift_bridgeObjectRetain();
    goto LABEL_19;
  }
  id v48 = v61;
  if (v24 != enum case for CoreSynthesizer.Event.paused(_:))
  {
    if (v24 != enum case for CoreSynthesizer.Event.resumed(_:))
    {
      (*(void (**)(id *, uint64_t))(v20 + 8))(v23, v19);
      return;
    }
    uint64_t v54 = v12;
    sub_A5EC0();
    uint64_t v55 = sub_A5FE0();
    os_log_type_t v56 = sub_A7450();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v57 = 0;
      _os_log_impl(&def_5ED54, v55, v56, "speech did continue.", v57, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v59 + 8))(v54, v7);
    swift_getKeyPath();
    swift_getKeyPath();
    LOBYTE(v67) = 2;
    id v58 = v48;
LABEL_19:
    sub_A60E0();
    return;
  }
  uint64_t v49 = v25;
  sub_A5EC0();
  char v50 = sub_A5FE0();
  os_log_type_t v51 = sub_A7450();
  if (os_log_type_enabled(v50, v51))
  {
    id v52 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v52 = 0;
    _os_log_impl(&def_5ED54, v50, v51, "speech did pause.", v52, 2u);
    swift_slowDealloc();
  }

  uint64_t v53 = (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v49, v7);
  __chkstk_darwin(v53);
  *(&v59 - 2) = (uint64_t)v48;
  sub_A7080();
  sub_A6300();
  swift_release();
}

uint64_t sub_8435C(void *a1)
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v2 = a1;
  return sub_A60E0();
}

uint64_t sub_843D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[15] = a4;
  sub_A7330();
  v4[16] = sub_A7320();
  uint64_t v6 = sub_A7300();
  v4[17] = v6;
  v4[18] = v5;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_8446C, v6, v5);
}

uint64_t sub_8446C()
{
  id v1 = sub_7E4A0();
  v0[19] = v1;
  v0[2] = v0;
  v0[7] = v0 + 20;
  v0[3] = sub_84578;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_78728;
  v0[13] = &unk_D17F0;
  v0[14] = v2;
  [v1 pauseSpeakingAt:0 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_84578()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 144);
  uint64_t v2 = *(void *)(*(void *)v0 + 136);
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_84680, v2, v1);
}

uint64_t sub_84680()
{
  uint64_t v1 = *(void **)(v0 + 152);
  swift_release();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_846E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  sub_A7330();
  v4[3] = sub_A7320();
  uint64_t v6 = sub_A7300();
  v4[4] = v6;
  v4[5] = v5;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_84780, v6, v5);
}

uint64_t sub_84780()
{
  *(void *)(v0 + 48) = sub_7E4A0();
  uint64_t v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CoreSynthesizer.stop()
                         + async function pointer to dispatch thunk of CoreSynthesizer.stop());
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  void *v1 = v0;
  v1[1] = sub_84830;
  return v3();
}

uint64_t sub_84830()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 48);
  swift_task_dealloc();

  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 32);
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_84970, v4, v3);
}

uint64_t sub_84970()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

Swift::Void __swiftcall LiveSpeechStore.stopImmediately()()
{
}

uint64_t sub_849F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_7AF4(&qword_D8C50);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_A7360();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  sub_A7330();
  id v8 = v2;
  uint64_t v9 = sub_A7320();
  uint64_t v10 = (void *)swift_allocObject();
  uint64_t v10[2] = v9;
  v10[3] = &protocol witness table for MainActor;
  v10[4] = v8;
  sub_2F8E4((uint64_t)v6, a2, (uint64_t)v10);
  return swift_release();
}

uint64_t sub_84B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  sub_A7330();
  v4[3] = sub_A7320();
  uint64_t v6 = sub_A7300();
  v4[4] = v6;
  v4[5] = v5;
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_84B9C, v6, v5);
}

uint64_t sub_84B9C()
{
  *(void *)(v0 + 48) = sub_7E4A0();
  uint64_t v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of CoreSynthesizer.stop()
                         + async function pointer to dispatch thunk of CoreSynthesizer.stop());
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  void *v1 = v0;
  v1[1] = sub_84C4C;
  return v3();
}

uint64_t sub_84C4C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 48);
  swift_task_dealloc();

  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 32);
  return ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))_swift_task_switch)(sub_8A1B0, v4, v3);
}

uint64_t sub_84D8C@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t sub_84E0C(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return sub_A60E0();
}

uint64_t sub_84E8C()
{
  return sub_84EA0();
}

uint64_t sub_84EA0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();

  return swift_release();
}

uint64_t sub_84F18(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_84F40(a1, a2, a3, a4, (uint64_t (*)(void))&type metadata accessor for LiveSpeechInputMode);
}

uint64_t sub_84F40(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = a5(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v19 - v13;
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
  v15((char *)&v19 - v13, a1, v7, v12);
  uint64_t v16 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  ((void (*)(char *, char *, uint64_t))v15)(v10, v14, v7);
  id v17 = v16;
  sub_A60E0();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v14, v7);
}

uint64_t LiveSpeechStore.$inputMode.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__inputMode, &qword_DA6B0);
}

uint64_t sub_850C4(uint64_t a1, uint64_t *a2)
{
  return swift_endAccess();
}

uint64_t sub_8512C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return swift_endAccess();
}

uint64_t sub_8519C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v9 = sub_7AF4(a5);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  __n128 v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v19 - v15;
  id v17 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
  v17((char *)&v19 - v15, a1, v9, v14);
  ((void (*)(char *, char *, uint64_t))v17)(v12, v16, v9);
  swift_beginAccess();
  sub_7AF4(a7);
  sub_A60B0();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v16, v9);
}

uint64_t LiveSpeechStore.nextInputMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v16 = a1;
  uint64_t v1 = sub_A5F80();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v15 - v6;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  uint64_t v8 = enum case for LiveSpeechInputMode.keyboard(_:);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104);
  v9((uint64_t)v4, enum case for LiveSpeechInputMode.keyboard(_:), v1);
  sub_885DC(&qword_D9DC0, (void (*)(uint64_t))&type metadata accessor for LiveSpeechInputMode);
  sub_A7280();
  sub_A7280();
  if (v19 == v17 && v20 == v18)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v10 = *(void (**)(char *, uint64_t))(v2 + 8);
    v10(v4, v1);
    v10(v7, v1);
    uint64_t v11 = v16;
LABEL_5:
    uint64_t v8 = enum case for LiveSpeechInputMode.favoritePhrases(_:);
    return v9(v11, v8, v1);
  }
  char v12 = sub_A7800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v2 + 8);
  v13(v4, v1);
  v13(v7, v1);
  uint64_t v11 = v16;
  if (v12) {
    goto LABEL_5;
  }
  return v9(v11, v8, v1);
}

uint64_t sub_85598(void *a1)
{
  id v17 = a1;
  uint64_t v1 = sub_A5F80();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v16 - v6;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v16 - v9;
  LiveSpeechStore.nextInputMode.getter((uint64_t)&v16 - v9);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v11(v7, v10, v1);
  swift_getKeyPath();
  swift_getKeyPath();
  v11(v4, v7, v1);
  id v12 = v17;
  sub_A60E0();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v2 + 8);
  v13(v7, v1);
  sub_A5F40();
  __n128 v14 = (void *)sub_A5F10();
  v11(v7, v10, v1);
  sub_A5F30();

  return ((uint64_t (*)(char *, uint64_t))v13)(v10, v1);
}

uint64_t LiveSpeechStore.audioDestinationText.getter()
{
  uint64_t v0 = 1819042115;
  id v1 = sub_7BB74();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();

  swift_release();
  swift_release();
  if (v4 <= 0)
  {
    id v2 = sub_7BB74();
    swift_getKeyPath();
    swift_getKeyPath();
    sub_A60D0();

    swift_release();
    swift_release();
    return 0x656369766544;
  }
  return v0;
}

uint64_t LiveSpeechStore.audioDestinationIcon.getter()
{
  id v0 = sub_7BB74();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();

  swift_release();
  swift_release();
  if (v3 > 0) {
    return 0x656E6F6870;
  }
  id v2 = sub_7BB74();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();

  swift_release();
  swift_release();
  return 0x2E72656B61657073;
}

void LiveSpeechStore.init()()
{
}

uint64_t sub_85EFC@<X0>(uint64_t *a1@<X8>)
{
  swift_getObjectType();
  uint64_t result = sub_A6070();
  *a1 = result;
  return result;
}

unint64_t sub_85F3C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = sub_A7650(*(void *)(v2 + 40));

  return sub_860D0(a1, v4);
}

unint64_t sub_85F80(uint64_t a1, uint64_t a2)
{
  sub_A7850();
  sub_A7210();
  Swift::Int v4 = sub_A7890();

  return sub_86198(a1, a2, v4);
}

unint64_t sub_85FFC(uint64_t a1)
{
  sub_A71D0();
  sub_A7850();
  sub_A7210();
  Swift::Int v2 = sub_A7890();
  swift_bridgeObjectRelease();
  return sub_86388(a1, v2);
}

unint64_t sub_8608C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = sub_A75A0(*(void *)(v2 + 40));

  return sub_8627C(a1, v4);
}

unint64_t sub_860D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_89BF4(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = sub_A7660();
      sub_102DC((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_86198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_A7800() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_A7800() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_8627C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_89FE8();
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = sub_A75B0();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = sub_A75B0();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_86388(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = sub_A71D0();
    uint64_t v8 = v7;
    if (v6 == sub_A71D0() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = sub_A7800();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = sub_A71D0();
          uint64_t v15 = v14;
          if (v13 == sub_A71D0() && v15 == v16) {
            break;
          }
          char v18 = sub_A7800();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

Swift::Int sub_86500(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = sub_A77C0(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_150;
    }
    if (v3) {
      return sub_87038(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_158;
  }
  Swift::Int v120 = result;
  uint64_t v117 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v133 = (uint64_t)&_swiftEmptyArrayStorage;
    uint64_t v128 = (void **)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      unint64_t v11 = *((void *)&_swiftEmptyArrayStorage + 2);
LABEL_116:
      if (v11 >= 2)
      {
        uint64_t v111 = *v117;
        do
        {
          unint64_t v112 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_145;
          }
          if (!v111) {
            goto LABEL_157;
          }
          uint64_t v113 = *(void *)&v8[16 * v112 + 32];
          uint64_t v114 = *(void *)&v8[16 * v11 + 24];
          sub_871BC((void **)(v111 + 8 * v113), (id *)(v111 + 8 * *(void *)&v8[16 * v11 + 16]), (id *)(v111 + 8 * v114), v128);
          if (v1) {
            break;
          }
          if (v114 < v113) {
            goto LABEL_146;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v8 = sub_8778C((uint64_t)v8);
          }
          if (v112 >= *((void *)v8 + 2)) {
            goto LABEL_147;
          }
          uint64_t v115 = &v8[16 * v112 + 32];
          *(void *)uint64_t v115 = v113;
          *((void *)v115 + 1) = v114;
          unint64_t v116 = *((void *)v8 + 2);
          if (v11 > v116) {
            goto LABEL_148;
          }
          memmove(&v8[16 * v11 + 16], &v8[16 * v11 + 32], 16 * (v116 - v11));
          *((void *)v8 + 2) = v116 - 1;
          unint64_t v11 = v116 - 1;
        }
        while (v116 > 2);
      }
LABEL_127:
      swift_bridgeObjectRelease();
      *(void *)((char *)&dword_10 + (v133 & 0xFFFFFFFFFFFFFF8)) = 0;
      sub_A72C0();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    sub_A7510();
    uint64_t v7 = sub_A72E0();
    *(void *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFFF8)) = v6;
    uint64_t v128 = (void **)((v7 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v133 = v7;
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v118 = *a1 + 16;
  uint64_t v119 = *a1 - 8;
  uint64_t v8 = (char *)&_swiftEmptyArrayStorage;
  Swift::Int v125 = v3;
  uint64_t v129 = *a1;
  while (2)
  {
    Swift::Int v12 = v9 + 1;
    Swift::Int v124 = v9;
    if (v9 + 1 >= v3) {
      goto LABEL_45;
    }
    int v121 = v8;
    uint64_t v13 = *(void **)(v10 + 8 * v9);
    id v14 = *(id *)(v10 + 8 * v12);
    id v15 = v13;
    id v16 = [v14 name];
    uint64_t v17 = sub_A71D0();
    uint64_t v19 = v18;

    id v20 = [v15 name];
    uint64_t v21 = sub_A71D0();
    uint64_t v23 = v22;

    if (v17 == v21 && v19 == v23) {
      int v126 = 0;
    }
    else {
      int v126 = sub_A7800();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    Swift::Int v12 = v9 + 2;
    Swift::Int v3 = v125;
    if (v9 + 2 >= v125) {
      goto LABEL_36;
    }
    uint64_t v25 = (id *)(v118 + 8 * v9);
    while (1)
    {
      Swift::Int v130 = v12;
      uint64_t v27 = *(v25 - 1);
      id v28 = *v25;
      id v29 = v27;
      id v30 = [v28 name];
      uint64_t v31 = sub_A71D0();
      uint64_t v33 = v32;

      id v34 = [v29 name];
      uint64_t v35 = sub_A71D0();
      uint64_t v37 = v36;

      if (v31 == v35 && v33 == v37)
      {

        swift_bridgeObjectRelease_n();
        if (v126)
        {
          uint64_t v8 = v121;
          Swift::Int v9 = v124;
          Swift::Int v3 = v125;
          uint64_t v10 = v129;
          Swift::Int v12 = v130;
          goto LABEL_37;
        }
        goto LABEL_25;
      }
      int v26 = sub_A7800();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v126 ^ v26)) {
        break;
      }
LABEL_25:
      Swift::Int v12 = v130 + 1;
      ++v25;
      Swift::Int v3 = v125;
      if (v125 == v130 + 1)
      {
        Swift::Int v12 = v125;
        goto LABEL_35;
      }
    }
    Swift::Int v3 = v125;
    Swift::Int v12 = v130;
LABEL_35:
    Swift::Int v9 = v124;
LABEL_36:
    uint64_t v8 = v121;
    uint64_t v10 = v129;
    if (v126)
    {
LABEL_37:
      if (v12 < v9) {
        goto LABEL_151;
      }
      if (v9 < v12)
      {
        uint64_t v39 = (uint64_t *)(v119 + 8 * v12);
        Swift::Int v40 = v12;
        Swift::Int v41 = v9;
        id v42 = (uint64_t *)(v10 + 8 * v9);
        do
        {
          if (v41 != --v40)
          {
            if (!v10) {
              goto LABEL_156;
            }
            uint64_t v43 = *v42;
            uint64_t *v42 = *v39;
            *uint64_t v39 = v43;
          }
          ++v41;
          --v39;
          ++v42;
        }
        while (v41 < v40);
      }
    }
LABEL_45:
    if (v12 >= v3) {
      goto LABEL_68;
    }
    if (__OFSUB__(v12, v9)) {
      goto LABEL_149;
    }
    if (v12 - v9 >= v120)
    {
LABEL_68:
      if (v12 < v9) {
        goto LABEL_144;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_875D4(0, *((void *)v8 + 2) + 1, 1, v8);
      }
      unint64_t v63 = *((void *)v8 + 2);
      unint64_t v62 = *((void *)v8 + 3);
      unint64_t v11 = v63 + 1;
      if (v63 >= v62 >> 1) {
        uint64_t v8 = sub_875D4((char *)(v62 > 1), v63 + 1, 1, v8);
      }
      *((void *)v8 + 2) = v11;
      uint64_t v64 = v8 + 32;
      uint64_t v65 = &v8[16 * v63 + 32];
      *(void *)uint64_t v65 = v9;
      *((void *)v65 + 1) = v12;
      Swift::Int v132 = v12;
      if (!v63)
      {
        unint64_t v11 = 1;
LABEL_14:
        Swift::Int v3 = v125;
        Swift::Int v9 = v132;
        if (v132 >= v125) {
          goto LABEL_116;
        }
        continue;
      }
      while (1)
      {
        unint64_t v66 = v11 - 1;
        if (v11 >= 4)
        {
          uint64_t v71 = &v64[16 * v11];
          uint64_t v72 = *((void *)v71 - 8);
          uint64_t v73 = *((void *)v71 - 7);
          BOOL v77 = __OFSUB__(v73, v72);
          uint64_t v74 = v73 - v72;
          if (v77) {
            goto LABEL_133;
          }
          uint64_t v76 = *((void *)v71 - 6);
          uint64_t v75 = *((void *)v71 - 5);
          BOOL v77 = __OFSUB__(v75, v76);
          uint64_t v69 = v75 - v76;
          char v70 = v77;
          if (v77) {
            goto LABEL_134;
          }
          unint64_t v78 = v11 - 2;
          uint64_t v79 = &v64[16 * v11 - 32];
          uint64_t v81 = *(void *)v79;
          uint64_t v80 = *((void *)v79 + 1);
          BOOL v77 = __OFSUB__(v80, v81);
          uint64_t v82 = v80 - v81;
          if (v77) {
            goto LABEL_136;
          }
          BOOL v77 = __OFADD__(v69, v82);
          uint64_t v83 = v69 + v82;
          if (v77) {
            goto LABEL_139;
          }
          if (v83 >= v74)
          {
            uint64_t v101 = &v64[16 * v66];
            uint64_t v103 = *(void *)v101;
            uint64_t v102 = *((void *)v101 + 1);
            BOOL v77 = __OFSUB__(v102, v103);
            uint64_t v104 = v102 - v103;
            if (v77) {
              goto LABEL_143;
            }
            BOOL v94 = v69 < v104;
            goto LABEL_105;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v95 = *((void *)v8 + 4);
            uint64_t v96 = *((void *)v8 + 5);
            BOOL v77 = __OFSUB__(v96, v95);
            uint64_t v88 = v96 - v95;
            char v89 = v77;
            goto LABEL_99;
          }
          uint64_t v68 = *((void *)v8 + 4);
          uint64_t v67 = *((void *)v8 + 5);
          BOOL v77 = __OFSUB__(v67, v68);
          uint64_t v69 = v67 - v68;
          char v70 = v77;
        }
        if (v70) {
          goto LABEL_135;
        }
        unint64_t v78 = v11 - 2;
        uint64_t v84 = &v64[16 * v11 - 32];
        uint64_t v86 = *(void *)v84;
        uint64_t v85 = *((void *)v84 + 1);
        BOOL v87 = __OFSUB__(v85, v86);
        uint64_t v88 = v85 - v86;
        char v89 = v87;
        if (v87) {
          goto LABEL_138;
        }
        char v90 = &v64[16 * v66];
        uint64_t v92 = *(void *)v90;
        uint64_t v91 = *((void *)v90 + 1);
        BOOL v77 = __OFSUB__(v91, v92);
        uint64_t v93 = v91 - v92;
        if (v77) {
          goto LABEL_141;
        }
        if (__OFADD__(v88, v93)) {
          goto LABEL_142;
        }
        if (v88 + v93 >= v69)
        {
          BOOL v94 = v69 < v93;
LABEL_105:
          if (v94) {
            unint64_t v66 = v78;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v89) {
          goto LABEL_137;
        }
        uint64_t v97 = &v64[16 * v66];
        uint64_t v99 = *(void *)v97;
        uint64_t v98 = *((void *)v97 + 1);
        BOOL v77 = __OFSUB__(v98, v99);
        uint64_t v100 = v98 - v99;
        if (v77) {
          goto LABEL_140;
        }
        if (v100 < v88) {
          goto LABEL_14;
        }
LABEL_107:
        unint64_t v105 = v66 - 1;
        if (v66 - 1 >= v11)
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
          goto LABEL_153;
        }
        if (!v10) {
          goto LABEL_155;
        }
        char v106 = &v64[16 * v105];
        uint64_t v107 = *(void *)v106;
        id v108 = &v64[16 * v66];
        uint64_t v109 = *((void *)v108 + 1);
        sub_871BC((void **)(v10 + 8 * *(void *)v106), (id *)(v10 + 8 * *(void *)v108), (id *)(v10 + 8 * v109), v128);
        if (v1) {
          goto LABEL_127;
        }
        if (v109 < v107) {
          goto LABEL_130;
        }
        if (v66 > *((void *)v8 + 2)) {
          goto LABEL_131;
        }
        *(void *)char v106 = v107;
        *(void *)&v64[16 * v105 + 8] = v109;
        unint64_t v110 = *((void *)v8 + 2);
        if (v66 >= v110) {
          goto LABEL_132;
        }
        unint64_t v11 = v110 - 1;
        memmove(&v64[16 * v66], v108 + 16, 16 * (v110 - 1 - v66));
        *((void *)v8 + 2) = v110 - 1;
        if (v110 <= 2) {
          goto LABEL_14;
        }
      }
    }
    break;
  }
  if (__OFADD__(v9, v120)) {
    goto LABEL_152;
  }
  if (v9 + v120 >= v3) {
    Swift::Int v44 = v3;
  }
  else {
    Swift::Int v44 = v9 + v120;
  }
  if (v44 >= v9)
  {
    if (v12 != v44)
    {
      uint64_t v122 = v8;
      Swift::Int v123 = v44;
      uint64_t v45 = v119 + 8 * v12;
      do
      {
        id v47 = *(void **)(v10 + 8 * v12);
        uint64_t v127 = v45;
        Swift::Int v131 = v12;
        while (1)
        {
          id v48 = *(void **)v45;
          id v49 = v47;
          id v50 = v48;
          id v51 = [v49 name];
          uint64_t v52 = sub_A71D0();
          uint64_t v54 = v53;

          id v55 = [v50 name];
          uint64_t v56 = sub_A71D0();
          uint64_t v58 = v57;

          if (v52 == v56 && v54 == v58)
          {

            swift_bridgeObjectRelease_n();
            uint64_t v10 = v129;
            Swift::Int v46 = v131;
            goto LABEL_56;
          }
          char v60 = sub_A7800();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v10 = v129;
          if ((v60 & 1) == 0) {
            break;
          }
          if (!v129) {
            goto LABEL_154;
          }
          id v61 = *(void **)v45;
          id v47 = *(void **)(v45 + 8);
          *(void *)uint64_t v45 = v47;
          *(void *)(v45 + 8) = v61;
          v45 -= 8;
          ++v9;
          Swift::Int v46 = v131;
          if (v131 == v9) {
            goto LABEL_56;
          }
        }
        Swift::Int v46 = v131;
LABEL_56:
        Swift::Int v12 = v46 + 1;
        uint64_t v45 = v127 + 8;
        Swift::Int v9 = v124;
      }
      while (v12 != v123);
      Swift::Int v12 = v123;
      uint64_t v8 = v122;
    }
    goto LABEL_68;
  }
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  Swift::Int result = sub_A7720();
  __break(1u);
  return result;
}

void *sub_86DBC(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      Swift::Int v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_7AF4(&qword_DA918);
      Swift::Int v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_877A0((unint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_A7740();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

void *sub_86EB4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t v8 = v5;
    if (v5 <= 0)
    {
      Swift::Int v9 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        sub_A7470();
        swift_arrayInitWithCopy();
        return v9;
      }
    }
    else
    {
      sub_7AF4(&qword_DA918);
      Swift::Int v9 = (void *)swift_allocObject();
      int64_t v10 = j__malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      v9[2] = v5;
      _OWORD v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  Swift::Int result = (void *)sub_A7790();
  __break(1u);
  return result;
}

uint64_t sub_87038(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v23 = result;
  if (a3 != a2)
  {
    uint64_t v25 = *a4;
    uint64_t v4 = *a4 + 8 * a3 - 8;
LABEL_6:
    unint64_t v6 = *(void **)(v25 + 8 * a3);
    uint64_t v7 = v23;
    uint64_t v24 = v4;
    uint64_t v26 = a3;
    while (1)
    {
      uint64_t v8 = *(void **)v4;
      id v9 = v6;
      id v10 = v8;
      id v11 = [v9 name];
      uint64_t v12 = sub_A71D0();
      uint64_t v14 = v13;

      id v15 = [v10 name];
      uint64_t v16 = sub_A71D0();
      uint64_t v18 = v17;

      if (v12 == v16 && v14 == v18)
      {

        Swift::Int result = swift_bridgeObjectRelease_n();
        uint64_t v5 = v26;
LABEL_5:
        a3 = v5 + 1;
        uint64_t v4 = v24 + 8;
        if (a3 == a2) {
          return result;
        }
        goto LABEL_6;
      }
      char v20 = sub_A7800();

      swift_bridgeObjectRelease();
      Swift::Int result = swift_bridgeObjectRelease();
      uint64_t v5 = v26;
      if ((v20 & 1) == 0) {
        goto LABEL_5;
      }
      if (!v25) {
        break;
      }
      uint64_t v21 = *(void **)v4;
      unint64_t v6 = *(void **)(v4 + 8);
      *(void *)uint64_t v4 = v6;
      *(void *)(v4 + 8) = v21;
      v4 -= 8;
      if (v26 == ++v7) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_871BC(void **__src, id *a2, id *a3, void **__dst)
{
  uint64_t v4 = __dst;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = (char *)a3 - (char *)a2;
  uint64_t v12 = (char *)a3 - (char *)a2 + 7;
  if ((char *)a3 - (char *)a2 >= 0) {
    uint64_t v12 = (char *)a3 - (char *)a2;
  }
  uint64_t v13 = v12 >> 3;
  id v61 = __src;
  char v60 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 < -7) {
      goto LABEL_53;
    }
    if (__dst != a2 || &a2[v13] <= __dst) {
      memmove(__dst, a2, 8 * v13);
    }
    id v51 = v4;
    uint64_t v31 = &v4[v13];
    uint64_t v59 = v31;
    id v61 = v6;
    if (v7 >= v6 || v11 < 8)
    {
LABEL_52:
      sub_876D0((void **)&v61, (const void **)&v60, &v59);
      return 1;
    }
    uint64_t v32 = v6;
    uint64_t v56 = v7;
    while (1)
    {
      uint64_t v52 = v31;
      uint64_t v54 = v6;
      uint64_t v58 = v5;
      id v34 = *--v31;
      uint64_t v33 = v34;
      uint64_t v35 = *--v32;
      id v36 = v33;
      id v37 = v35;
      id v38 = [v36 name];
      uint64_t v39 = sub_A71D0();
      uint64_t v41 = v40;

      id v42 = [v37 name];
      uint64_t v43 = sub_A71D0();
      uint64_t v45 = v44;

      if (v39 == v43 && v41 == v45) {
        break;
      }
      char v47 = sub_A7800();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v48 = v58;
      uint64_t v5 = v58 - 1;
      if ((v47 & 1) == 0) {
        goto LABEL_46;
      }
      unint64_t v49 = (unint64_t)v56;
      uint64_t v31 = v52;
      if (v58 != v54 || v5 >= v54) {
        *uint64_t v5 = *v32;
      }
      id v61 = v32;
LABEL_50:
      if ((unint64_t)v32 > v49)
      {
        unint64_t v6 = v32;
        if (v31 > v51) {
          continue;
        }
      }
      goto LABEL_52;
    }

    swift_bridgeObjectRelease_n();
    id v48 = v58;
    uint64_t v5 = v58 - 1;
LABEL_46:
    uint64_t v32 = v54;
    unint64_t v49 = (unint64_t)v56;
    uint64_t v59 = v31;
    if (v48 < v52 || v5 >= v52 || v48 != v52) {
      *uint64_t v5 = *v31;
    }
    goto LABEL_50;
  }
  if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v53 = &v4[v10];
    uint64_t v59 = v53;
    if (v6 < v5 && v8 >= 8)
    {
      uint64_t v57 = v5;
      while (1)
      {
        id v55 = v7;
        uint64_t v14 = v6;
        id v15 = *v4;
        id v16 = *v6;
        id v17 = v15;
        id v18 = [v16 name];
        uint64_t v19 = sub_A71D0();
        uint64_t v21 = v20;

        id v22 = [v17 name];
        uint64_t v23 = sub_A71D0();
        uint64_t v25 = v24;

        if (v19 == v23 && v21 == v25) {
          break;
        }
        char v27 = sub_A7800();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0) {
          goto LABEL_23;
        }
        id v28 = v14 + 1;
        id v29 = v55;
        id v30 = v57;
        if (v55 < v14 || v55 >= v28 || v55 != v14) {
          *id v55 = *v14;
        }
LABEL_26:
        uint64_t v7 = v29 + 1;
        if (v4 < v53)
        {
          unint64_t v6 = v28;
          if (v28 < v30) {
            continue;
          }
        }
        id v61 = v7;
        goto LABEL_52;
      }

      swift_bridgeObjectRelease_n();
LABEL_23:
      id v29 = v55;
      id v30 = v57;
      if (v55 != v4) {
        *id v55 = *v4;
      }
      char v60 = ++v4;
      id v28 = v14;
      goto LABEL_26;
    }
    goto LABEL_52;
  }
LABEL_53:
  uint64_t result = sub_A7790();
  __break(1u);
  return result;
}

char *sub_875D4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_7AF4(&qword_DA920);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_876D0(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)sub_A7790();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_8778C(uint64_t a1)
{
  return sub_875D4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_877A0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_A7740();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_A7740();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_A45C(&qword_DA928, &qword_D9B48);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_7AF4(&qword_D9B48);
          uint64_t v12 = sub_879C4(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_A7470();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = sub_A7790();
  __break(1u);
  return result;
}

void (*sub_879C4(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_87A74(v6, a2, a3);
  return sub_87A2C;
}

void sub_87A2C(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_87A74(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  Swift::Int v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)sub_A76A0();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8)) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)Swift::Int v3 = v4;
    return sub_87AF4;
  }
  __break(1u);
  return result;
}

void sub_87AF4(id *a1)
{
}

void sub_87B18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_observers;
  [*(id *)(a2 + OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_observers) removeObject:a1];
  if (![*(id *)(a2 + v3) count])
  {
    sub_A7450();
    id v4 = (id)LiveSpeechLogCommon();
    if (v4)
    {
      uint64_t v5 = v4;
      sub_A5FD0();

      id v6 = [self defaultCenter];
      [v6 removeObserver:a2];

      uint64_t v7 = *(void **)(a2 + OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_callCenter);
      *(void *)(a2 + OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_callCenter) = 0;
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t _s19LiveSpeechUIService0aB5StoreC17LastSpokenContextV23__derived_struct_equalsySbAE_AEtFZ_0(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = sub_A7800(), result = 0, (v5 & 1) != 0))
  {
    uint64_t SpokenContext = type metadata accessor for LiveSpeechStore.LastSpokenContext(0);
    sub_A5F80();
    sub_885DC(&qword_D9DC0, (void (*)(uint64_t))&type metadata accessor for LiveSpeechInputMode);
    sub_A7280();
    sub_A7280();
    if (v16 == v14 && v17 == v15)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v8 = sub_A7800();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = 0;
      if ((v8 & 1) == 0) {
        return result;
      }
    }
    if (*((unsigned __int8 *)a1 + *(int *)(SpokenContext + 24)) != *((unsigned __int8 *)a2
                                                                    + *(int *)(SpokenContext + 24)))
      return 0;
    uint64_t v9 = *(int *)(SpokenContext + 28);
    uint64_t v10 = (void *)((char *)a1 + v9);
    uint64_t v11 = *(void *)((char *)a1 + v9 + 8);
    uint64_t v12 = (void *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    if (v11)
    {
      if (v13 && (*v10 == *v12 && v11 == v13 || (sub_A7800() & 1) != 0)) {
        return 1;
      }
    }
    else if (!v13)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t _s19LiveSpeechUIService0aB8FavoriteV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 == a5 && a2 == a6 || (v12 = sub_A7800(), uint64_t result = 0, (v12 & 1) != 0))
  {
    if (a4)
    {
      if (a8 && (a3 == a7 && a4 == a8 || (sub_A7800() & 1) != 0)) {
        return 1;
      }
    }
    else if (!a8)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_87E78(uint64_t a1)
{
  if (a1 > 49)
  {
    if (a1 != 50)
    {
      if (a1 == 100) {
        return 2;
      }
      return 4;
    }
    return 1;
  }
  else
  {
    if (a1 != 1)
    {
      if (a1 == 10) {
        return 0;
      }
      return 4;
    }
    return 3;
  }
}

uint64_t sub_87EC8(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v2 = *(void *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = sub_A7740())
  {
    unint64_t v19 = v1;
    unint64_t v20 = v1 & 0xC000000000000001;
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = v20 ? (id)sub_A76A0() : *(id *)(v1 + 8 * v3);
      char v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      uint64_t v7 = v2;
      id v8 = [v4 categoryID];
      uint64_t v9 = sub_A71D0();
      uint64_t v11 = v10;

      swift_getKeyPath();
      swift_getKeyPath();
      sub_A60D0();
      swift_release();
      swift_release();
      id v12 = [v21 categoryID];

      uint64_t v13 = sub_A71D0();
      uint64_t v15 = v14;

      if (v9 == v13 && v11 == v15)
      {
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease_n();
        return 1;
      }
      char v16 = sub_A7800();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v16)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
      ++v3;
      uint64_t v2 = v7;
      BOOL v17 = v6 == v7;
      unint64_t v1 = v19;
      if (v17) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
  }
LABEL_19:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_880EC@<X0>(void *a1@<X8>)
{
  return sub_41ACC(a1);
}

uint64_t sub_88114(void **a1, void **a2)
{
  return sub_7BB04(a1, a2);
}

uint64_t sub_8813C@<X0>(unsigned char *a1@<X8>)
{
  return sub_618A4(a1);
}

uint64_t sub_88164(uint64_t a1, void **a2)
{
  return sub_61934(a1, a2);
}

uint64_t sub_8818C(uint64_t result, unint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_30:
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_A7740();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v6 = -v5;
    if (!__OFSUB__(0, v5)) {
      goto LABEL_4;
    }
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  unint64_t v2 = a2;
  uint64_t v3 = result;
  unint64_t v4 = a2 >> 62;
  if (a2 >> 62) {
    goto LABEL_30;
  }
  uint64_t v5 = *(void *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFFF8));
  uint64_t v6 = -v5;
  if (__OFSUB__(0, v5)) {
    goto LABEL_32;
  }
LABEL_4:
  uint64_t v7 = -v3;
  if (v6 > 0 || v6 <= v7)
  {
    Swift::Int v8 = v5 - v3;
    if (__OFADD__(v5, v7))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v5 < v8)
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v4)
    {
LABEL_8:
      uint64_t v9 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8));
      goto LABEL_13;
    }
  }
  else
  {
    if (v5 < 0)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    Swift::Int v8 = 0;
    if (!v4) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_A7740();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_13:
  if (v9 < v8)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v8 < 0)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_A7740();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFFF8));
  }
  if (v10 < v5) {
    goto LABEL_35;
  }
  if (v5 < 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if ((v2 & 0xC000000000000001) != 0 && v8 != v5)
  {
    if (v8 < (unint64_t)v5)
    {
      sub_A7470();
      Swift::Int v11 = v8;
      do
      {
        Swift::Int v12 = v11 + 1;
        sub_A7690(v11);
        Swift::Int v11 = v12;
      }
      while (v5 != v12);
      goto LABEL_25;
    }
LABEL_40:
    __break(1u);
    return result;
  }
LABEL_25:
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_A7750();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  return v13;
}

uint64_t sub_88390@<X0>(unsigned char *a1@<X8>)
{
  return sub_618A4(a1);
}

uint64_t sub_883B8(uint64_t a1, void **a2)
{
  return sub_61934(a1, a2);
}

uint64_t type metadata accessor for LiveSpeechStore.LastSpokenContext(uint64_t a1)
{
  return sub_1182C(a1, qword_DA870);
}

uint64_t _s19LiveSpeechUIService0aB5StoreC0B5StateO8rawValueAESgSS_tcfC_0(uint64_t a1, void *a2)
{
  v6._uint64_t countAndFlagsBits = a1;
  v3._rawValue = &off_CF060;
  v6._object = a2;
  unint64_t v4 = sub_A77B0(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 4) {
    return 4;
  }
  else {
    return v4;
  }
}

uint64_t sub_88484@<X0>(void *a1@<X8>)
{
  return sub_41ACC(a1);
}

uint64_t sub_884AC(uint64_t a1, void **a2)
{
  return sub_7B760(a1, a2);
}

uint64_t sub_884D4()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_8850C()
{
  return sub_7D3A0();
}

uint64_t sub_88528(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_2C328;
  return sub_84B04(a1, v4, v5, v6);
}

uint64_t sub_885DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_88624()
{
  return &protocol witness table for String;
}

unint64_t sub_88634()
{
  unint64_t result = qword_DA750;
  if (!qword_DA750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA750);
  }
  return result;
}

unint64_t sub_8868C()
{
  unint64_t result = qword_DA758;
  if (!qword_DA758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA758);
  }
  return result;
}

unint64_t sub_886E4()
{
  unint64_t result = qword_DA760;
  if (!qword_DA760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA760);
  }
  return result;
}

uint64_t sub_88738()
{
  return sub_885DC(&qword_DA768, (void (*)(uint64_t))type metadata accessor for LiveSpeechStore.LastSpokenContext);
}

uint64_t sub_88780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_8512C(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__favoritePhrases, &qword_DA670);
}

uint64_t sub_887A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8519C(a1, a2, a3, a4, &qword_DA908, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__favoritePhrases, &qword_DA670);
}

uint64_t sub_887D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_8512C(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__favoritePhraseInfo, &qword_DA678);
}

uint64_t sub_88800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8519C(a1, a2, a3, a4, &qword_DA900, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__favoritePhraseInfo, &qword_DA678);
}

uint64_t sub_88830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_8512C(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__categories, &qword_DA680);
}

uint64_t sub_88858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8519C(a1, a2, a3, a4, &qword_DA8F8, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__categories, &qword_DA680);
}

uint64_t sub_88888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_8512C(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__isHUDVisible, &qword_DA6D8);
}

uint64_t sub_888B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8519C(a1, a2, a3, a4, &qword_DA8F0, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__isHUDVisible, &qword_DA6D8);
}

uint64_t sub_888E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_8512C(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__currentSpeechContext, &qword_DA6C8);
}

uint64_t sub_88908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8519C(a1, a2, a3, a4, &qword_DA8E8, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__currentSpeechContext, &qword_DA6C8);
}

uint64_t sub_88938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_8512C(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__lastSpokenContext, &qword_DA6C0);
}

uint64_t sub_88960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8519C(a1, a2, a3, a4, &qword_DA8E0, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__lastSpokenContext, &qword_DA6C0);
}

uint64_t sub_88990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_8512C(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__lastWillReplaySpeechDate, &qword_D9DF8);
}

uint64_t sub_889B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8519C(a1, a2, a3, a4, &qword_D9DF0, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__lastWillReplaySpeechDate, &qword_D9DF8);
}

uint64_t sub_889E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_8512C(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__inputMode, &qword_DA6B0);
}

uint64_t sub_88A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_8519C(a1, a2, a3, a4, &qword_DA8D8, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService15LiveSpeechStore__inputMode, &qword_DA6B0);
}

uint64_t destroy for LiveSpeechFavorite()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for LiveSpeechFavorite(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LiveSpeechFavorite(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for LiveSpeechFavorite(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for LiveSpeechFavorite()
{
  return &type metadata for LiveSpeechFavorite;
}

uint64_t sub_88B8C()
{
  return type metadata accessor for LiveSpeechStore(0);
}

uint64_t type metadata accessor for LiveSpeechStore(uint64_t a1)
{
  return sub_1182C(a1, (uint64_t *)&unk_DA798);
}

void sub_88BB4()
{
  sub_89080(319, &qword_DA7A8, &qword_DA660);
  if (v0 <= 0x3F)
  {
    sub_89080(319, &qword_DA7B0, &qword_D9C70);
    if (v1 <= 0x3F)
    {
      sub_89080(319, &qword_DA7B8, &qword_DA380);
      if (v2 <= 0x3F)
      {
        sub_89118(319, &qword_DA7C0, (void (*)(uint64_t))&type metadata accessor for LiveSpeechCategory);
        if (v3 <= 0x3F)
        {
          sub_89080(319, &qword_DA7C8, &qword_D9B48);
          if (v4 <= 0x3F)
          {
            sub_890D0(319, &qword_DA7D0);
            if (v5 <= 0x3F)
            {
              sub_890D0(319, &qword_DA7D8);
              if (v6 <= 0x3F)
              {
                sub_89118(319, &qword_DA7E0, (void (*)(uint64_t))&type metadata accessor for LiveSpeechPhrase);
                if (v7 <= 0x3F)
                {
                  sub_890D0(319, &qword_DA7E8);
                  if (v8 <= 0x3F)
                  {
                    sub_89080(319, &qword_DA7F0, &qword_DA718);
                    if (v9 <= 0x3F)
                    {
                      sub_89080(319, &qword_DA7F8, &qword_DA3D8);
                      if (v10 <= 0x3F)
                      {
                        sub_89118(319, &qword_DA800, (void (*)(uint64_t))&type metadata accessor for Date);
                        if (v11 <= 0x3F)
                        {
                          sub_890D0(319, &qword_DA808);
                          if (v12 <= 0x3F)
                          {
                            sub_89118(319, &qword_DA810, (void (*)(uint64_t))&type metadata accessor for LiveSpeechInputMode);
                            if (v13 <= 0x3F) {
                              swift_updateClassMetadata2();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_89080(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    sub_7C5C(a3);
    unint64_t v4 = sub_A60F0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_890D0(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_A60F0();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void sub_89118(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_A60F0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

ValueMetadata *type metadata accessor for LiveSpeechStore.SpeechState()
{
  return &type metadata for LiveSpeechStore.SpeechState;
}

uint64_t destroy for LiveSpeechStore.SpeechContext()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LiveSpeechStore.SpeechContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LiveSpeechStore.SpeechContext(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for LiveSpeechStore.SpeechContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t _s19LiveSpeechUIService18LiveSpeechFavoriteVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_892AC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveSpeechStore.SpeechContext()
{
  return &type metadata for LiveSpeechStore.SpeechContext;
}

void *initializeBufferWithCopyOfBuffer for LiveSpeechStore.LastSpokenContext(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    unint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_A5F80();
    unint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    *((unsigned char *)v4 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    uint64_t v14 = (void *)((char *)v4 + v13);
    uint64_t v15 = (void *)((char *)a2 + v13);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for LiveSpeechStore.LastSpokenContext(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_A5F80();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for LiveSpeechStore.LastSpokenContext(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  unint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_A5F80();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for LiveSpeechStore.LastSpokenContext(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_A5F80();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v10 = a3[7];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for LiveSpeechStore.LastSpokenContext(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_A5F80();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  return a1;
}

void *assignWithTake for LiveSpeechStore.LastSpokenContext(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_A5F80();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LiveSpeechStore.LastSpokenContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_897B4);
}

uint64_t sub_897B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_A5F80();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for LiveSpeechStore.LastSpokenContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_89878);
}

uint64_t sub_89878(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_A5F80();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_89920()
{
  uint64_t result = sub_A5F80();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _s19LiveSpeechUIService26LiveSpeechMaxRecentsOptionOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s19LiveSpeechUIService26LiveSpeechMaxRecentsOptionOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    char *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x89B28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          char *result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveSpeechMaxRecentsOption()
{
  return &type metadata for LiveSpeechMaxRecentsOption;
}

uint64_t sub_89B60()
{
  return sub_A45C(&qword_DA8B0, &qword_DA8B8);
}

unint64_t sub_89BA0()
{
  unint64_t result = qword_DA8C0;
  if (!qword_DA8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA8C0);
  }
  return result;
}

uint64_t sub_89BF4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_89C58@<X0>(void *a1@<X8>)
{
  return sub_41ACC(a1);
}

uint64_t sub_89C80(void **a1, void **a2)
{
  return sub_7BB04(a1, a2);
}

uint64_t sub_89CB8()
{
  uint64_t v1 = sub_A5F80();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((v4 + *(void *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8) + 25;
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_89DB0(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_A5F80() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1[3];
  uint64_t v13 = v1[2];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  char v9 = *((unsigned char *)v1 + v4 + *(void *)(v3 + 64));
  uint64_t v10 = (uint64_t)v1 + v4;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_2C328;
  return sub_7F67C(a1, v13, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_89F10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_7AF4(&qword_DA960);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_89F78()
{
  unint64_t result = qword_DA998;
  if (!qword_DA998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA998);
  }
  return result;
}

uint64_t sub_89FCC()
{
  return sub_8435C(*(void **)(v0 + 16));
}

unint64_t sub_89FE8()
{
  unint64_t result = qword_D8D50;
  if (!qword_D8D50)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_D8D50);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LiveSpeechFeatureFlags(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for LiveSpeechFeatureFlags(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        char *result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      char *result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x8A118);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveSpeechFeatureFlags()
{
  return &type metadata for LiveSpeechFeatureFlags;
}

unint64_t sub_8A154()
{
  unint64_t result = qword_DA9A8;
  if (!qword_DA9A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA9A8);
  }
  return result;
}

uint64_t *LiveSpeechCaptionsCallManager.shared.unsafeMutableAddressor()
{
  if (qword_D7DB0 != -1) {
    swift_once();
  }
  return &static LiveSpeechCaptionsCallManager.shared;
}

id LiveSpeechCaptionsCallManager.subscribeForCallsMonitoring(_:)(uint64_t a1)
{
  swift_getObjectType();

  return sub_8BFC0(a1, v1);
}

void LiveSpeechCaptionsCallManager.unsubscribeForCallsMonitoring(_:)(uint64_t a1)
{
  swift_getObjectType();

  sub_87B18(a1, v1);
}

BOOL LiveSpeechCaptionsCallManager.isCallActive.getter()
{
  return sub_8A2AC();
}

BOOL LiveSpeechCaptionsCallManager.isVideoCallActive.getter()
{
  return sub_8A2AC();
}

BOOL sub_8A2AC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  return v1 > 0;
}

uint64_t sub_8A320(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

BOOL static LiveSpeechCaptionsCallManager.Event.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void LiveSpeechCaptionsCallManager.Event.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int LiveSpeechCaptionsCallManager.Event.hashValue.getter(char a1)
{
  return sub_A7890();
}

id sub_8A3E4()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for LiveSpeechCaptionsCallManager()) init];
  static LiveSpeechCaptionsCallManager.shared = (uint64_t)result;
  return result;
}

id static LiveSpeechCaptionsCallManager.shared.getter()
{
  if (qword_D7DB0 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static LiveSpeechCaptionsCallManager.shared;

  return v0;
}

uint64_t property wrapper backing initializer of LiveSpeechCaptionsCallManager.currentCallEvent()
{
  return sub_A6090();
}

uint64_t sub_8A504()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  return v1;
}

id LiveSpeechCaptionsCallManager.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v1 = sub_7AF4(&qword_DA9C0);
  uint64_t v27 = *(void *)(v1 - 8);
  uint64_t v28 = v1;
  __chkstk_darwin(v1);
  uint64_t v26 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_7AF4(&qword_DA9C8);
  uint64_t v24 = *(void *)(v3 - 8);
  uint64_t v25 = v3;
  __chkstk_darwin(v3);
  uint64_t v23 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_A74B0();
  uint64_t v5 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_A7490();
  __chkstk_darwin(v8);
  uint64_t v9 = sub_A70F0();
  __chkstk_darwin(v9 - 8);
  *(void *)&v0[OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_callCenter] = 0;
  uint64_t v21 = OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_callQueue;
  v20[1] = sub_11C10(0, (unint64_t *)&qword_D7E80);
  uint64_t v10 = v0;
  sub_A70E0();
  uint64_t v31 = _swiftEmptyArrayStorage;
  sub_8C458(&qword_D7E88, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_7AF4(&qword_D7E90);
  sub_8C4A0((unint64_t *)&qword_D7E98, &qword_D7E90);
  sub_A7640();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v22);
  *(void *)&v0[v21] = sub_A74F0();
  uint64_t v11 = &v10[OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager__currentCallEvent];
  LOBYTE(v31) = 1;
  uint64_t v12 = v23;
  sub_A6090();
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v11, v12, v25);
  uint64_t v13 = OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_observers;
  *(void *)&v10[v13] = [self weakObjectsHashTable];
  uint64_t v14 = &v10[OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager__currentCallCount];
  uint64_t v31 = 0;
  uint64_t v15 = v26;
  sub_A6090();
  uint64_t v16 = v28;
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
  v17(v14, v15, v28);
  id v18 = &v10[OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager__currentVideoCallCount];
  uint64_t v31 = 0;
  sub_A6090();
  v17(v18, v15, v16);

  v30.receiver = v10;
  v30.super_class = ObjectType;
  return objc_msgSendSuper2(&v30, "init");
}

uint64_t property wrapper backing initializer of AudioHistogramConfig.randomPower()
{
  return sub_A6090();
}

id sub_8AA58()
{
  uint64_t v1 = v0;
  sub_A7450();
  id result = (id)LiveSpeechLogCommon();
  if (result)
  {
    uint64_t v3 = result;
    sub_A5FD0();

    id v4 = [objc_allocWithZone((Class)TUCallCenter) initWithQueue:*(void *)(v1 + OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_callQueue)];
    uint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_callCenter);
    *(void *)(v1 + OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_callCenter) = v4;

    __chkstk_darwin(v6);
    id v8 = v7;
    sub_7AF4(&qword_DAA58);
    sub_A74D0();

    return (id)sub_8B038(0x100000000);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t LiveSpeechCaptionsCallManager.currentCallCount.getter()
{
  return sub_7B6F4();
}

uint64_t LiveSpeechCaptionsCallManager.currentVideoCallCount.getter()
{
  return sub_7B6F4();
}

uint64_t LiveSpeechCaptionsCallManager.$currentCallCount.getter()
{
  return sub_8ABE8();
}

uint64_t LiveSpeechCaptionsCallManager.$currentVideoCallCount.getter()
{
  return sub_8ABE8();
}

uint64_t sub_8ABE8()
{
  return swift_endAccess();
}

uint64_t sub_8AC48()
{
  return swift_endAccess();
}

uint64_t sub_8ACAC(uint64_t a1)
{
  uint64_t v2 = sub_7AF4(&qword_DAA50);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16);
  v10((char *)&v12 - v8, a1, v2, v7);
  ((void (*)(char *, char *, uint64_t))v10)(v5, v9, v2);
  swift_beginAccess();
  sub_7AF4(&qword_DA9C0);
  sub_A60B0();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

void sub_8AE28(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3 = *(void **)(a1 + OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_callCenter);
  if (v3)
  {
    uint64_t v4 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v7[4] = sub_8C5AC;
    v7[5] = v4;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1107296256;
    v7[2] = sub_8A1B4;
    v7[3] = &unk_D1A58;
    uint64_t v5 = _Block_copy(v7);
    id v6 = v3;
    swift_release();
    [v6 registerWithCompletionHandler:v5];
    _Block_release(v5);
  }
  *a2 = v3 == 0;
}

void sub_8AF44()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    uint64_t v2 = self;
    id v3 = [v2 defaultCenter];
    [v3 addObserver:v1 selector:"handleCallStatusChanged:" name:TUCallCenterCallStatusChangedNotification object:0];

    id v4 = [v2 defaultCenter];
    [v4 addObserver:v1 selector:"handleCallStatusChanged:" name:TUCallCenterVideoCallStatusChangedNotification object:0];
  }
}

uint64_t sub_8B038(uint64_t a1)
{
  uint64_t v3 = sub_A70C0();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = sub_A70F0();
  uint64_t v7 = *(void *)(v16[0] - 8);
  __chkstk_darwin(v16[0]);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void **)&v1[OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_callQueue];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v1;
  *(_DWORD *)(v11 + 24) = a1;
  *(unsigned char *)(v11 + 28) = BYTE4(a1) & 1;
  aBlock[4] = sub_8C41C;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_8A1B4;
  aBlock[3] = &unk_D19B8;
  uint64_t v12 = _Block_copy(aBlock);
  id v13 = v10;
  uint64_t v14 = v1;
  sub_A70D0();
  v16[1] = &_swiftEmptyArrayStorage;
  sub_8C458((unint64_t *)&unk_D9260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_7AF4((uint64_t *)&unk_D84C0);
  sub_8C4A0((unint64_t *)&qword_D9270, (uint64_t *)&unk_D84C0);
  sub_A7640();
  sub_A74E0();
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, void))(v7 + 8))(v9, v16[0]);
  return swift_release();
}

NSObject *sub_8B2FC(char *a1, uint64_t a2)
{
  uint64_t v4 = sub_A70C0();
  uint64_t v27 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_A70F0();
  uint64_t v7 = *(void *)(v28 - 8);
  *(void *)&double v8 = __chkstk_darwin(v28).n128_u64[0];
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_callCenter;
  uint64_t v12 = *(void **)&a1[OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_callCenter];
  if (v12)
  {
    id v13 = objc_msgSend(v12, "currentCallCount", v8);
    uint64_t v14 = *(void **)&a1[v11];
    if (v14)
    {
      id v15 = [v14 currentVideoCallCount];
      goto LABEL_6;
    }
  }
  else
  {
    id v13 = 0;
  }
  id v15 = 0;
LABEL_6:
  os_log_type_t v16 = sub_A7450();
  id result = (id)LiveSpeechLogCommon();
  if (result)
  {
    id v18 = result;
    uint64_t v26 = v7;
    if (os_log_type_enabled(result, v16))
    {
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 134218496;
      aBlock[0] = v13;
      uint64_t v25 = a1;
      sub_A7600();
      *(_WORD *)(v19 + 12) = 2048;
      aBlock[0] = v15;
      a1 = v25;
      sub_A7600();
      *(_WORD *)(v19 + 22) = 1024;
      if ((a2 & 0x100000000) != 0) {
        int v20 = -1;
      }
      else {
        int v20 = a2;
      }
      LODWORD(aBlock[0]) = v20;
      sub_A7600();
      _os_log_impl(&def_5ED54, v18, v16, "currentCallCount=%ld currentVideoCallCount=%ld status=%d", (uint8_t *)v19, 0x1Cu);
      swift_slowDealloc();
    }

    sub_11C10(0, (unint64_t *)&qword_D7E80);
    uint64_t v21 = (void *)sub_A74C0();
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = a1;
    *(void *)(v22 + 24) = v13;
    *(void *)(v22 + 32) = v15;
    *(_DWORD *)(v22 + 40) = a2;
    *(unsigned char *)(v22 + 44) = BYTE4(a2) & 1;
    aBlock[4] = sub_8C528;
    aBlock[5] = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_8A1B4;
    aBlock[3] = &unk_D1A08;
    uint64_t v23 = _Block_copy(aBlock);
    uint64_t v24 = a1;
    swift_release();
    sub_A70D0();
    aBlock[0] = &_swiftEmptyArrayStorage;
    sub_8C458((unint64_t *)&unk_D9260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_7AF4((uint64_t *)&unk_D84C0);
    sub_8C4A0((unint64_t *)&qword_D9270, (uint64_t *)&unk_D84C0);
    sub_A7640();
    sub_A74E0();
    _Block_release(v23);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v10, v28);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_8B744(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v7 = a1;
  sub_A60E0();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v20 = a3;
  id v8 = v7;
  sub_A60E0();
  if ((a4 & 0x100000000) == 0)
  {
    if (a4 == 6)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      LOBYTE(v20) = 1;
      id v15 = (char *)v8;
      sub_A60E0();
      swift_getKeyPath();
      swift_getKeyPath();
      sub_A60D0();
      swift_release();
      swift_release();
      if (v20) {
        return;
      }
      swift_getKeyPath();
      swift_getKeyPath();
      sub_A60D0();
      swift_release();
      swift_release();
      id v16 = [*(id *)&v15[OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_observers] allObjects];
      sub_7AF4(&qword_DAA48);
      unint64_t v11 = sub_A72B0();

      if (v11 >> 62) {
        goto LABEL_29;
      }
      uint64_t v17 = *(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFFF8));
      if (v17) {
        goto LABEL_17;
      }
    }
    else
    {
      if (a4 != 1) {
        return;
      }
      swift_getKeyPath();
      swift_getKeyPath();
      uint64_t v9 = (char *)v8;
      sub_A60E0();
      id v10 = [*(id *)&v9[OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_observers] allObjects];
      sub_7AF4(&qword_DAA48);
      unint64_t v11 = sub_A72B0();

      if (v11 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v12 = sub_A7740();
        swift_bridgeObjectRelease();
        if (v12) {
          goto LABEL_6;
        }
      }
      else
      {
        uint64_t v12 = *(void *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFFF8));
        if (v12)
        {
LABEL_6:
          if (v12 >= 1)
          {
            for (uint64_t i = 0; i != v12; ++i)
            {
              if ((v11 & 0xC000000000000001) != 0)
              {
                uint64_t v14 = (void *)sub_A76A0();
              }
              else
              {
                uint64_t v14 = *(void **)(v11 + 8 * i + 32);
                swift_unknownObjectRetain();
              }
              if ([v14 respondsToSelector:"callConnected"]) {
                [v14 callConnected];
              }
              swift_unknownObjectRelease();
            }
            goto LABEL_26;
          }
          __break(1u);
LABEL_29:
          swift_bridgeObjectRetain();
          uint64_t v17 = sub_A7740();
          swift_bridgeObjectRelease();
          if (!v17) {
            goto LABEL_26;
          }
LABEL_17:
          if (v17 < 1)
          {
            __break(1u);
            return;
          }
          for (uint64_t j = 0; j != v17; ++j)
          {
            if ((v11 & 0xC000000000000001) != 0)
            {
              uint64_t v19 = (void *)sub_A76A0();
            }
            else
            {
              uint64_t v19 = *(void **)(v11 + 8 * j + 32);
              swift_unknownObjectRetain();
            }
            if ([v19 respondsToSelector:"allActiveCallsEnded"]) {
              [v19 allActiveCallsEnded];
            }
            swift_unknownObjectRelease();
          }
        }
      }
    }
LABEL_26:
    swift_bridgeObjectRelease();
  }
}

void sub_8BB54()
{
  sub_A7450();
  id v0 = (id)LiveSpeechLogCommon();
  if (v0)
  {
    uint64_t v1 = v0;
    sub_7AF4(&qword_D9290);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_A9C60;
    uint64_t v3 = sub_A5890();
    uint64_t v5 = v4;
    *(void *)(v2 + 56) = &type metadata for String;
    *(void *)(v2 + 64) = sub_42E18();
    *(void *)(v2 + 32) = v3;
    *(void *)(v2 + 40) = v5;
    sub_A5FD0();

    swift_bridgeObjectRelease();
    sub_A58B0();
    if (v8)
    {
      sub_11C10(0, &qword_DAA40);
      if (swift_dynamicCast())
      {
        v7[0] = 0;
        sub_8B038([v6 status]);
      }
    }
    else
    {
      sub_8C384((uint64_t)v7);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_8BED0@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_8BF50(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  id v3 = v2;
  return sub_A60E0();
}

id sub_8BFC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_observers;
  id result = [*(id *)(a2 + OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_observers) containsObject:a1];
  if ((result & 1) == 0) {
    id result = [*(id *)(a2 + v4) addObject:a1];
  }
  if (!*(void *)(a2 + OBJC_IVAR____TtC19LiveSpeechUIService29LiveSpeechCaptionsCallManager_callCenter)) {
    return sub_8AA58();
  }
  return result;
}

unint64_t sub_8C048()
{
  unint64_t result = qword_DA9F0;
  if (!qword_DA9F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DA9F0);
  }
  return result;
}

uint64_t sub_8C0A4()
{
  return sub_8AC48();
}

uint64_t sub_8C0C4(uint64_t a1)
{
  return sub_8ACAC(a1);
}

uint64_t sub_8C0EC()
{
  return sub_8AC48();
}

uint64_t sub_8C10C(uint64_t a1)
{
  return sub_8ACAC(a1);
}

uint64_t sub_8C12C()
{
  return type metadata accessor for LiveSpeechCaptionsCallManager();
}

uint64_t type metadata accessor for LiveSpeechCaptionsCallManager()
{
  uint64_t result = qword_DAA20;
  if (!qword_DAA20) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_8C180()
{
  sub_890D0(319, &qword_DAA30);
  if (v0 <= 0x3F)
  {
    sub_890D0(319, &qword_DAA38);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

unsigned char *storeEnumTagSinglePayload for LiveSpeechCaptionsCallManager.Event(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    NSObject *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x8C34CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          NSObject *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LiveSpeechCaptionsCallManager.Event()
{
  return &type metadata for LiveSpeechCaptionsCallManager.Event;
}

uint64_t sub_8C384(uint64_t a1)
{
  uint64_t v2 = sub_7AF4(&qword_D92A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_8C3E4()
{
  return _swift_deallocObject(v0, 29, 7);
}

NSObject *sub_8C41C()
{
  return sub_8B2FC(*(char **)(v0 + 16), *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32));
}

uint64_t sub_8C440(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_8C450()
{
  return swift_release();
}

uint64_t sub_8C458(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_8C4A0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_7C5C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_8C4F0()
{
  return _swift_deallocObject(v0, 45, 7);
}

void sub_8C528()
{
  sub_8B744(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned int *)(v0 + 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 44) << 32));
}

void sub_8C558(BOOL *a1@<X8>)
{
  sub_8AE28(*(void *)(v1 + 16), a1);
}

uint64_t sub_8C574()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_8C5AC()
{
}

Swift::String __swiftcall LiveSpeechLocString(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if (qword_D7DB8 != -1) {
    swift_once();
  }
  if (qword_DAA60)
  {
    id v3 = (id)qword_DAA60;
    NSString v4 = sub_A71A0();
    NSString v5 = sub_A71A0();
    NSString v6 = sub_A71A0();
    id v7 = [v3 localizedStringForKey:v4 value:v5 table:v6];

    uint64_t countAndFlagsBits = sub_A71D0();
    object = v8;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v9 = countAndFlagsBits;
  id v10 = object;
  result._object = v10;
  result._uint64_t countAndFlagsBits = v9;
  return result;
}

Swift::String __swiftcall LiveSpeechClippedTextToMaxLength(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v3 = sub_A7220();
  swift_bridgeObjectRetain();
  if (v3 >= 2001)
  {
    sub_8C804(2000);
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = sub_A7200();
    object = v4;
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = countAndFlagsBits;
  NSString v6 = object;
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

void sub_8C788()
{
  NSString v0 = sub_A71A0();
  id v1 = [self bundleWithIdentifier:v0];

  qword_DAA60 = (uint64_t)v1;
}

Swift::Int *LiveSpeechMaxPhraseLength.unsafeMutableAddressor()
{
  return &LiveSpeechMaxPhraseLength;
}

uint64_t sub_8C804(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    sub_A7230();
    return sub_A7270();
  }
  return result;
}

uint64_t sub_8C8A0()
{
  uint64_t result = sub_A6DA0();
  microphoneColor = result;
  return result;
}

uint64_t *microphoneColor.unsafeMutableAddressor()
{
  if (qword_D7DC0 != -1) {
    swift_once();
  }
  return &microphoneColor;
}

double AudioHistogramConfig.levelBarMaxHeight.getter()
{
  return sub_8E2AC();
}

double sub_8C920@<D0>(double *a1@<X8>)
{
  return sub_8E318(a1);
}

uint64_t sub_8C948()
{
  return sub_8E3BC();
}

uint64_t AudioHistogramConfig.levelBarMaxHeight.setter()
{
  return sub_8E470();
}

void (*AudioHistogramConfig.levelBarMaxHeight.modify(void *a1))(void *)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_A60C0();
  return sub_7B548;
}

uint64_t AudioHistogramConfig.$levelBarMaxHeight.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarMaxHeight, &qword_DAA78);
}

uint64_t AudioHistogramConfig.$levelBarMaxHeight.setter(uint64_t a1)
{
  return sub_8EEAC(a1, &qword_DAA80, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarMaxHeight, &qword_DAA78);
}

void (*AudioHistogramConfig.$levelBarMaxHeight.modify(void *a1))(uint64_t, char)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = sub_7AF4(&qword_DAA80);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  id v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarMaxHeight;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = sub_7AF4(&qword_DAA78);
  sub_A60A0();
  swift_endAccess();
  return sub_7B68C;
}

double AudioHistogramConfig.levelBarMinHeight.getter()
{
  return sub_8E2AC();
}

double sub_8CB64@<D0>(double *a1@<X8>)
{
  return sub_8E318(a1);
}

uint64_t sub_8CB8C()
{
  return sub_8E3BC();
}

uint64_t AudioHistogramConfig.levelBarMinHeight.setter()
{
  return sub_8E470();
}

void (*AudioHistogramConfig.levelBarMinHeight.modify(void *a1))(void *)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_A60C0();
  return sub_7B548;
}

uint64_t AudioHistogramConfig.$levelBarMinHeight.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarMinHeight, &qword_DAA78);
}

uint64_t AudioHistogramConfig.$levelBarMinHeight.setter(uint64_t a1)
{
  return sub_8EEAC(a1, &qword_DAA80, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarMinHeight, &qword_DAA78);
}

void (*AudioHistogramConfig.$levelBarMinHeight.modify(void *a1))(uint64_t, char)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = sub_7AF4(&qword_DAA80);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  id v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarMinHeight;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = sub_7AF4(&qword_DAA78);
  sub_A60A0();
  swift_endAccess();
  return sub_7B68C;
}

double AudioHistogramConfig.levelBarWidth.getter()
{
  return sub_8E2AC();
}

double sub_8CDA8@<D0>(double *a1@<X8>)
{
  return sub_8E318(a1);
}

uint64_t sub_8CDD0()
{
  return sub_8E3BC();
}

uint64_t AudioHistogramConfig.levelBarWidth.setter()
{
  return sub_8E470();
}

void (*AudioHistogramConfig.levelBarWidth.modify(void *a1))(void *)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_A60C0();
  return sub_7B548;
}

uint64_t AudioHistogramConfig.$levelBarWidth.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarWidth, &qword_DAA78);
}

uint64_t AudioHistogramConfig.$levelBarWidth.setter(uint64_t a1)
{
  return sub_8EEAC(a1, &qword_DAA80, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarWidth, &qword_DAA78);
}

void (*AudioHistogramConfig.$levelBarWidth.modify(void *a1))(uint64_t, char)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = sub_7AF4(&qword_DAA80);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  id v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarWidth;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = sub_7AF4(&qword_DAA78);
  sub_A60A0();
  swift_endAccess();
  return sub_7B68C;
}

uint64_t AudioHistogramConfig.levelBarCount.getter()
{
  return sub_8E6F0();
}

uint64_t sub_8CFEC@<X0>(void *a1@<X8>)
{
  return sub_8E75C(a1);
}

uint64_t sub_8D014()
{
  return sub_8E020();
}

uint64_t AudioHistogramConfig.levelBarCount.setter()
{
  return sub_8E894();
}

void (*AudioHistogramConfig.levelBarCount.modify(void *a1))(void *)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_A60C0();
  return sub_7B548;
}

uint64_t AudioHistogramConfig.$levelBarCount.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarCount, &qword_DA9C0);
}

uint64_t AudioHistogramConfig.$levelBarCount.setter(uint64_t a1)
{
  return sub_8EEAC(a1, &qword_DAA50, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarCount, &qword_DA9C0);
}

void (*AudioHistogramConfig.$levelBarCount.modify(void *a1))(uint64_t, char)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = sub_7AF4(&qword_DAA50);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  id v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarCount;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = sub_7AF4(&qword_DA9C0);
  sub_A60A0();
  swift_endAccess();
  return sub_7B68C;
}

uint64_t AudioHistogramConfig.levelBarKeys.getter()
{
  return sub_8E6F0();
}

uint64_t sub_8D230@<X0>(void *a1@<X8>)
{
  return sub_8E75C(a1);
}

uint64_t sub_8D258()
{
  return sub_8E020();
}

uint64_t AudioHistogramConfig.levelBarKeys.setter()
{
  return sub_8E894();
}

void (*AudioHistogramConfig.levelBarKeys.modify(void *a1))(void *)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_A60C0();
  return sub_7B548;
}

uint64_t AudioHistogramConfig.$levelBarKeys.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarKeys, &qword_DA9C0);
}

uint64_t AudioHistogramConfig.$levelBarKeys.setter(uint64_t a1)
{
  return sub_8EEAC(a1, &qword_DAA50, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarKeys, &qword_DA9C0);
}

void (*AudioHistogramConfig.$levelBarKeys.modify(void *a1))(uint64_t, char)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = sub_7AF4(&qword_DAA50);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  id v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarKeys;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = sub_7AF4(&qword_DA9C0);
  sub_A60A0();
  swift_endAccess();
  return sub_7B68C;
}

double AudioHistogramConfig.levelBarSpacing.getter()
{
  return sub_8E2AC();
}

double sub_8D474@<D0>(double *a1@<X8>)
{
  return sub_8E318(a1);
}

uint64_t sub_8D49C()
{
  return sub_8E3BC();
}

uint64_t AudioHistogramConfig.levelBarSpacing.setter()
{
  return sub_8E470();
}

void (*AudioHistogramConfig.levelBarSpacing.modify(void *a1))(void *)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_A60C0();
  return sub_7B548;
}

uint64_t AudioHistogramConfig.$levelBarSpacing.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarSpacing, &qword_DAA78);
}

uint64_t AudioHistogramConfig.$levelBarSpacing.setter(uint64_t a1)
{
  return sub_8EEAC(a1, &qword_DAA80, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarSpacing, &qword_DAA78);
}

void (*AudioHistogramConfig.$levelBarSpacing.modify(void *a1))(uint64_t, char)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = sub_7AF4(&qword_DAA80);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  id v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarSpacing;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = sub_7AF4(&qword_DAA78);
  sub_A60A0();
  swift_endAccess();
  return sub_7B68C;
}

double AudioHistogramConfig.animationTimerDuration.getter()
{
  return sub_8E2AC();
}

double sub_8D6B8@<D0>(double *a1@<X8>)
{
  return sub_8E318(a1);
}

uint64_t sub_8D6E0()
{
  return sub_8E3BC();
}

uint64_t AudioHistogramConfig.animationTimerDuration.setter()
{
  return sub_8E470();
}

void (*AudioHistogramConfig.animationTimerDuration.modify(void *a1))(void *)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_A60C0();
  return sub_7B548;
}

uint64_t AudioHistogramConfig.$animationTimerDuration.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__animationTimerDuration, &qword_DAA78);
}

uint64_t AudioHistogramConfig.$animationTimerDuration.setter(uint64_t a1)
{
  return sub_8EEAC(a1, &qword_DAA80, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__animationTimerDuration, &qword_DAA78);
}

void (*AudioHistogramConfig.$animationTimerDuration.modify(void *a1))(uint64_t, char)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = sub_7AF4(&qword_DAA80);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  id v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__animationTimerDuration;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = sub_7AF4(&qword_DAA78);
  sub_A60A0();
  swift_endAccess();
  return sub_7B68C;
}

double AudioHistogramConfig.minBarScale.getter()
{
  return sub_8E2AC();
}

double sub_8D8FC@<D0>(double *a1@<X8>)
{
  return sub_8E318(a1);
}

uint64_t sub_8D924()
{
  return sub_8E3BC();
}

uint64_t AudioHistogramConfig.minBarScale.setter()
{
  return sub_8E470();
}

void (*AudioHistogramConfig.minBarScale.modify(void *a1))(void *)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_A60C0();
  return sub_7B548;
}

uint64_t AudioHistogramConfig.$minBarScale.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__minBarScale, &qword_DAA78);
}

uint64_t AudioHistogramConfig.$minBarScale.setter(uint64_t a1)
{
  return sub_8EEAC(a1, &qword_DAA80, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__minBarScale, &qword_DAA78);
}

void (*AudioHistogramConfig.$minBarScale.modify(void *a1))(uint64_t, char)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = sub_7AF4(&qword_DAA80);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  id v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__minBarScale;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = sub_7AF4(&qword_DAA78);
  sub_A60A0();
  swift_endAccess();
  return sub_7B68C;
}

uint64_t property wrapper backing initializer of AudioHistogramConfig.maxBarScale()
{
  return sub_A6090();
}

double AudioHistogramConfig.maxBarScale.getter()
{
  return sub_8E2AC();
}

double sub_8DB70@<D0>(double *a1@<X8>)
{
  return sub_8E318(a1);
}

uint64_t sub_8DB98()
{
  return sub_8E3BC();
}

uint64_t AudioHistogramConfig.maxBarScale.setter()
{
  return sub_8E470();
}

void (*AudioHistogramConfig.maxBarScale.modify(void *a1))(void *)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_A60C0();
  return sub_7B548;
}

uint64_t AudioHistogramConfig.$maxBarScale.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__maxBarScale, &qword_DAA78);
}

uint64_t AudioHistogramConfig.$maxBarScale.setter(uint64_t a1)
{
  return sub_8EEAC(a1, &qword_DAA80, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__maxBarScale, &qword_DAA78);
}

void (*AudioHistogramConfig.$maxBarScale.modify(void *a1))(uint64_t, char)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = sub_7AF4(&qword_DAA80);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  id v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__maxBarScale;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = sub_7AF4(&qword_DAA78);
  sub_A60A0();
  swift_endAccess();
  return sub_7B68C;
}

uint64_t AudioHistogramConfig.randomPower.getter()
{
  return sub_8E6F0();
}

uint64_t sub_8DDB4@<X0>(void *a1@<X8>)
{
  return sub_8E75C(a1);
}

uint64_t sub_8DDDC()
{
  return sub_8E020();
}

uint64_t AudioHistogramConfig.randomPower.setter()
{
  return sub_8E894();
}

void (*AudioHistogramConfig.randomPower.modify(void *a1))(void *)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_A60C0();
  return sub_7B548;
}

uint64_t AudioHistogramConfig.$randomPower.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__randomPower, &qword_DA9C0);
}

uint64_t AudioHistogramConfig.$randomPower.setter(uint64_t a1)
{
  return sub_8EEAC(a1, &qword_DAA50, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__randomPower, &qword_DA9C0);
}

void (*AudioHistogramConfig.$randomPower.modify(void *a1))(uint64_t, char)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = sub_7AF4(&qword_DAA50);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  id v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__randomPower;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = sub_7AF4(&qword_DA9C0);
  sub_A60A0();
  swift_endAccess();
  return sub_7B68C;
}

uint64_t AudioHistogramConfig.jitter.getter()
{
  return sub_8E6F0();
}

uint64_t sub_8DFF8@<X0>(void *a1@<X8>)
{
  return sub_8E75C(a1);
}

uint64_t sub_8E020()
{
  return sub_A60E0();
}

uint64_t sub_8E090()
{
  return sub_8E020();
}

uint64_t AudioHistogramConfig.jitter.setter()
{
  return sub_8E894();
}

void (*AudioHistogramConfig.jitter.modify(void *a1))(void *)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_A60C0();
  return sub_7B548;
}

uint64_t AudioHistogramConfig.$jitter.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__jitter, &qword_DA9C0);
}

uint64_t AudioHistogramConfig.$jitter.setter(uint64_t a1)
{
  return sub_8EEAC(a1, &qword_DAA50, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__jitter, &qword_DA9C0);
}

void (*AudioHistogramConfig.$jitter.modify(void *a1))(uint64_t, char)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = sub_7AF4(&qword_DAA50);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  id v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__jitter;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = sub_7AF4(&qword_DA9C0);
  sub_A60A0();
  swift_endAccess();
  return sub_7B68C;
}

double AudioHistogramConfig.magnitude.getter()
{
  return sub_8E2AC();
}

double sub_8E2AC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  return v1;
}

double sub_8E318@<D0>(double *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  double result = v3;
  *a1 = v3;
  return result;
}

double sub_8E394@<D0>(double *a1@<X8>)
{
  return sub_8E318(a1);
}

uint64_t sub_8E3BC()
{
  return sub_A60E0();
}

uint64_t sub_8E434()
{
  return sub_8E3BC();
}

uint64_t AudioHistogramConfig.magnitude.setter()
{
  return sub_8E470();
}

uint64_t sub_8E470()
{
  return sub_A60E0();
}

void (*AudioHistogramConfig.magnitude.modify(void *a1))(void *)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_A60C0();
  return sub_7B548;
}

uint64_t AudioHistogramConfig.$magnitude.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__magnitude, &qword_DAA78);
}

uint64_t AudioHistogramConfig.$magnitude.setter(uint64_t a1)
{
  return sub_8EEAC(a1, &qword_DAA80, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__magnitude, &qword_DAA78);
}

void (*AudioHistogramConfig.$magnitude.modify(void *a1))(uint64_t, char)
{
  double v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = sub_7AF4(&qword_DAA80);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  id v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__magnitude;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = sub_7AF4(&qword_DAA78);
  sub_A60A0();
  swift_endAccess();
  return sub_7B68C;
}

uint64_t property wrapper backing initializer of AudioHistogramConfig.levelBarColor()
{
  return sub_A6090();
}

uint64_t AudioHistogramConfig.levelBarColor.getter()
{
  return sub_8E6F0();
}

uint64_t sub_8E6F0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_8E75C@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_8E7D8@<X0>(void *a1@<X8>)
{
  return sub_8E75C(a1);
}

uint64_t sub_8E800()
{
  return sub_A60E0();
}

uint64_t AudioHistogramConfig.levelBarColor.setter()
{
  return sub_8E894();
}

uint64_t sub_8E894()
{
  return sub_A60E0();
}

void (*AudioHistogramConfig.levelBarColor.modify(void *a1))(void *)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_A60C0();
  return sub_7B548;
}

uint64_t AudioHistogramConfig.$levelBarColor.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarColor, &qword_DAAE8);
}

uint64_t AudioHistogramConfig.$levelBarColor.setter(uint64_t a1)
{
  return sub_8EEAC(a1, &qword_DAAF0, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarColor, &qword_DAAE8);
}

void (*AudioHistogramConfig.$levelBarColor.modify(void *a1))(uint64_t, char)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = sub_7AF4(&qword_DAAF0);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  id v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarColor;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = sub_7AF4(&qword_DAAE8);
  sub_A60A0();
  swift_endAccess();
  return sub_7B68C;
}

uint64_t property wrapper backing initializer of AudioHistogramConfig.histogram()
{
  return sub_A6090();
}

uint64_t AudioHistogramConfig.histogram.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_8EB88@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_8EC0C()
{
  return sub_A60E0();
}

uint64_t AudioHistogramConfig.histogram.setter()
{
  return sub_A60E0();
}

void (*AudioHistogramConfig.histogram.modify(void *a1))(void *)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_A60C0();
  return sub_7B548;
}

void *sub_8ED88(unint64_t a1, double a2)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    uint64_t result = (void *)sub_A7720();
    __break(1u);
    return result;
  }
  if (!a1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t result = (void *)sub_A72E0();
  result[2] = a1;
  uint64_t v4 = (double *)(result + 4);
  if (a1 < 4)
  {
    unint64_t v5 = 0;
    double v6 = a2;
LABEL_9:
    unint64_t v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v4 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  double v6 = a2;
  int64x2_t v7 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  uint64_t v8 = (int64x2_t *)(result + 6);
  unint64_t v9 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *uint64_t v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v5 != a1) {
    goto LABEL_9;
  }
  return result;
}

uint64_t AudioHistogramConfig.$histogram.getter()
{
  return sub_850C4((uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__histogram, &qword_DAB08);
}

uint64_t AudioHistogramConfig.$histogram.setter(uint64_t a1)
{
  return sub_8EEAC(a1, &qword_DAB10, (uint64_t)&OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__histogram, &qword_DAB08);
}

uint64_t sub_8EEAC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = sub_7AF4(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))((char *)&v11 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6, v8);
  swift_beginAccess();
  sub_7AF4(a4);
  sub_A60B0();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
}

void (*AudioHistogramConfig.$histogram.modify(void *a1))(uint64_t, char)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = sub_7AF4(&qword_DAB10);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__histogram;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  v3[16] = sub_7AF4(&qword_DAB08);
  sub_A60A0();
  swift_endAccess();
  return sub_7B68C;
}

uint64_t sub_8F0EC()
{
  return swift_release();
}

uint64_t sub_8F258()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  swift_release();
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  uint64_t result = swift_release();
  if (__OFSUB__(*(void *)&v2, 1))
  {
    __break(1u);
    goto LABEL_7;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  sub_A60D0();
  swift_release();
  uint64_t result = swift_release();
  double v1 = v2 * (double)*(uint64_t *)&v2 + v2 * (double)(*(void *)&v2 - 1);
  if ((~*(void *)&v1 & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v1 < 9.22337204e18) {
    return (uint64_t)v1;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t AudioHistogramConfig.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarMaxHeight;
  uint64_t v2 = sub_7AF4(&qword_DAA78);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarMinHeight, v2);
  v3(v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarWidth, v2);
  uint64_t v4 = v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarCount;
  uint64_t v5 = sub_7AF4(&qword_DA9C0);
  size_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarKeys, v5);
  v3(v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarSpacing, v2);
  v3(v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__animationTimerDuration, v2);
  v3(v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__minBarScale, v2);
  v3(v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__maxBarScale, v2);
  v6(v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__randomPower, v5);
  v6(v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__jitter, v5);
  v3(v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__magnitude, v2);
  uint64_t v7 = v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarColor;
  uint64_t v8 = sub_7AF4(&qword_DAAE8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__histogram;
  uint64_t v10 = sub_7AF4(&qword_DAB08);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  return v0;
}

uint64_t AudioHistogramConfig.__deallocating_deinit()
{
  AudioHistogramConfig.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_8F6E8()
{
  uint64_t v1 = sub_7AF4(&qword_DAB08);
  uint64_t v40 = *(void *)(v1 - 8);
  uint64_t v41 = v1;
  __chkstk_darwin();
  uint64_t v39 = (char *)v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_7AF4(&qword_DAAE8);
  uint64_t v37 = *(void *)(v3 - 8);
  uint64_t v38 = v3;
  __chkstk_darwin();
  id v36 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_7AF4(&qword_DA9C0);
  uint64_t v5 = *(void *)(v35 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_7AF4(&qword_DAA78);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarMaxHeight;
  uint64_t v42 = 0x403C000000000000;
  sub_A6090();
  id v13 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
  v13(v12, v11, v8);
  uint64_t v14 = v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarMinHeight;
  uint64_t v42 = 0x4000000000000000;
  sub_A6090();
  v13(v14, v11, v8);
  uint64_t v15 = v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarWidth;
  uint64_t v42 = 0x4000000000000000;
  sub_A6090();
  v13(v15, v11, v8);
  uint64_t v16 = v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarCount;
  uint64_t v42 = 16;
  sub_A6090();
  uint64_t v17 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 32);
  uint64_t v18 = v35;
  v17(v16, v7, v35);
  v34[1] = v5 + 32;
  uint64_t v19 = v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarKeys;
  uint64_t v42 = 10;
  sub_A6090();
  v17(v19, v7, v18);
  uint64_t v20 = v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarSpacing;
  uint64_t v42 = 0x4000000000000000;
  sub_A6090();
  v13(v20, v11, v8);
  uint64_t v21 = v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__animationTimerDuration;
  uint64_t v42 = 0x401C000000000000;
  sub_A6090();
  v13(v21, v11, v8);
  uint64_t v22 = v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__minBarScale;
  uint64_t v42 = 0x3FB999999999999ALL;
  sub_A6090();
  v13(v22, v11, v8);
  uint64_t v23 = v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__maxBarScale;
  uint64_t v42 = 0x3FF0000000000000;
  sub_A6090();
  v13(v23, v11, v8);
  uint64_t v24 = v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__randomPower;
  uint64_t v42 = 80;
  sub_A6090();
  v17(v24, v7, v18);
  uint64_t v25 = v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__jitter;
  uint64_t v42 = 29;
  sub_A6090();
  v17(v25, v7, v18);
  uint64_t v26 = v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__magnitude;
  uint64_t v42 = 0x3FF0000000000000;
  sub_A6090();
  v13(v26, v11, v8);
  uint64_t v27 = OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__levelBarColor;
  if (qword_D7DC0 != -1) {
    swift_once();
  }
  uint64_t v42 = microphoneColor;
  swift_retain();
  uint64_t v28 = v36;
  sub_A6090();
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v0 + v27, v28, v38);
  uint64_t v29 = v0 + OBJC_IVAR____TtC19LiveSpeechUIService20AudioHistogramConfig__histogram;
  uint64_t v30 = sub_A72E0();
  *(void *)(v30 + 16) = 16;
  int64x2_t v31 = vdupq_n_s64(0x3FB999999999999AuLL);
  *(int64x2_t *)(v30 + 32) = v31;
  *(int64x2_t *)(v30 + 48) = v31;
  *(int64x2_t *)(v30 + 64) = v31;
  *(int64x2_t *)(v30 + 80) = v31;
  *(int64x2_t *)(v30 + 96) = v31;
  *(int64x2_t *)(v30 + 112) = v31;
  *(int64x2_t *)(v30 + 128) = v31;
  *(int64x2_t *)(v30 + 144) = v31;
  uint64_t v42 = v30;
  sub_7AF4(&qword_DAAF8);
  uint64_t v32 = v39;
  sub_A6090();
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v29, v32, v41);
  return v0;
}

uint64_t sub_8FD38@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for AudioHistogramConfig();
  uint64_t result = sub_A6070();
  *a1 = result;
  return result;
}

uint64_t sub_8FD78()
{
  uint64_t v0 = sub_7AF4(&qword_D8290);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_92AD4();
  id v3 = [self mainRunLoop];
  uint64_t v4 = sub_A75D0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  uint64_t v5 = sub_A7570();

  sub_A35C((uint64_t)v2, &qword_D8290);
  v8[1] = v5;
  sub_A7560();
  sub_92B14(&qword_DAF78, (void (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher);
  uint64_t v6 = sub_A6080();
  uint64_t result = swift_release();
  qword_DAA68 = v6;
  return result;
}

uint64_t sub_8FF14()
{
  long long v16 = *v0;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_A60D0();
  swift_release();
  swift_release();
  sub_92840((uint64_t)&v16);
  double v1 = 1.0;
  if (v15 > 0.0)
  {
    sub_7AF4(&qword_D89F8);
    sub_A6E80();
    double v1 = (double)v14 / v15;
  }
  sub_7AF4(&qword_DAF68);
  sub_A6E80();
  unint64_t v2 = *(void *)(v12 + 16);
  swift_bridgeObjectRelease();
  id v3 = sub_8ED88(v2, 0.0);
  uint64_t v4 = v3[2];
  if (!v4) {
    return (uint64_t)v3;
  }
  uint64_t v5 = -v4;
  uint64_t v6 = 4;
  while (1)
  {
    unint64_t v7 = v6 - 4;
    sub_A6E80();
    uint64_t result = v13;
    if ((unint64_t)(v6 - 4) >= *(void *)(v13 + 16)) {
      break;
    }
    double v9 = *(double *)(v13 + 8 * v6);
    swift_bridgeObjectRelease();
    sub_A6E80();
    uint64_t result = v13;
    if (v7 >= *(void *)(v13 + 16)) {
      goto LABEL_14;
    }
    double v10 = *(double *)(v13 + 8 * v6);
    swift_bridgeObjectRelease();
    sub_A6E80();
    uint64_t result = v13;
    if (v7 >= *(void *)(v13 + 16)) {
      goto LABEL_15;
    }
    double v11 = *(double *)(v13 + 8 * v6);
    swift_bridgeObjectRelease();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_421F4(v3);
      id v3 = (void *)result;
    }
    if (v7 >= v3[2]) {
      goto LABEL_16;
    }
    *(double *)&v3[v6++] = v9 + v1 * (v10 - v11);
    if (v5 + v6 == 4) {
      return (uint64_t)v3;
    }
  }
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_90144()
{
  v7[0] = v0[2];
  v7[1] = v7[0];
  sub_7AF4(&qword_DAF68);
  sub_A6E80();
  uint64_t v1 = *(void *)(v6 + 16);
  swift_bridgeObjectRelease();
  v7[0] = *v0;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_A60D0();
  swift_release();
  swift_release();
  sub_92840((uint64_t)v7);
  if (v1 != v6)
  {
    swift_retain();
    sub_8F0EC();
    double v3 = v2;
    sub_92840((uint64_t)v7);
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    sub_A60D0();
    swift_release();
    swift_release();
    sub_92840((uint64_t)v7);
    sub_8ED88(v6, v3);
    sub_A6E90();
  }
  sub_A6E80();
  sub_A6E90();
  sub_7AF4(&qword_D89F8);
  sub_A6E90();
  uint64_t v4 = sub_A6E80();
  __chkstk_darwin(v4);
  sub_929C0(0, (double (*)(uint64_t, double))sub_929B8);
  swift_bridgeObjectRelease();
  return sub_A6E90();
}

uint64_t sub_90390(uint64_t a1, long long *a2)
{
  double v3 = (double)a1;
  long long v7 = a2[2];
  sub_7AF4(&qword_DAF68);
  sub_A6E80();
  uint64_t v4 = *(void *)(v6 + 16);
  swift_bridgeObjectRelease();
  sin(v3 / (double)v4 * 3.14159265);
  long long v7 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_A60D0();
  swift_release();
  swift_release();
  sub_92840((uint64_t)&v7);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_A60D0();
  swift_release();
  swift_release();
  sub_92840((uint64_t)&v7);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_A60D0();
  swift_release();
  swift_release();
  return sub_92840((uint64_t)&v7);
}

uint64_t sub_90550@<X0>(uint64_t a1@<X8>)
{
  double v2 = v1;
  uint64_t v29 = a1;
  uint64_t v3 = sub_A66B0();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_7AF4(&qword_DAF48);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  double v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_7AF4(&qword_DAF50);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = (_OWORD *)swift_allocObject();
  long long v16 = v2[3];
  v15[3] = v2[2];
  void v15[4] = v16;
  v15[5] = v2[4];
  long long v17 = v2[1];
  v15[1] = *v2;
  _OWORD v15[2] = v17;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for ColorRenderingMode.nonLinear(_:), v3);
  sub_927B4((uint64_t)v2);
  sub_A6EE0();
  long long v33 = *v2;
  swift_retain();
  sub_8F258();
  sub_92840((uint64_t)&v33);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_A60D0();
  swift_release();
  swift_release();
  sub_92840((uint64_t)&v33);
  sub_A7030();
  sub_A6270();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v14, v10, v7);
  uint64_t v18 = &v14[*(int *)(v12 + 44)];
  long long v19 = v31;
  *(_OWORD *)uint64_t v18 = v30;
  *((_OWORD *)v18 + 1) = v19;
  *((_OWORD *)v18 + 2) = v32;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (qword_D7DC8 != -1) {
    swift_once();
  }
  uint64_t v20 = qword_DAA68;
  uint64_t v21 = (uint64_t (*)(uint64_t))swift_allocObject();
  long long v22 = v2[3];
  *((_OWORD *)v21 + 3) = v2[2];
  *((_OWORD *)v21 + 4) = v22;
  *((_OWORD *)v21 + 5) = v2[4];
  long long v23 = v2[1];
  *((_OWORD *)v21 + 1) = *v2;
  *((_OWORD *)v21 + 2) = v23;
  uint64_t v24 = v29;
  sub_928E8((uint64_t)v14, v29);
  uint64_t v25 = sub_7AF4(&qword_DAF58);
  *(void *)(v24 + *(int *)(v25 + 52)) = v20;
  uint64_t v26 = (uint64_t (**)(uint64_t))(v24 + *(int *)(v25 + 56));
  *uint64_t v26 = sub_928E0;
  v26[1] = v21;
  sub_927B4((uint64_t)v2);
  swift_retain();
  return sub_A35C((uint64_t)v14, &qword_DAF50);
}

uint64_t sub_90920(CGContext *a1, long long *a2)
{
  CGContextRef v16 = a1;
  uint64_t v18 = sub_A5A30();
  uint64_t v17 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  double v15 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v21 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_A60D0();
  swift_release();
  swift_release();
  sub_92840((uint64_t)&v21);
  Mutable = CGPathCreateMutable();
  long long v22 = a2[3];
  sub_7AF4(&qword_DAF68);
  sub_A6E80();
  uint64_t v5 = *(void *)(v19 + 16);
  swift_bridgeObjectRelease();
  if (v5)
  {
    unint64_t v6 = 0;
    uint64_t v7 = a2 + 3;
    long long v22 = 0x3FF0000000000000uLL;
    uint64_t v23 = 0;
    uint64_t v24 = 0x3FF0000000000000;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    while (1)
    {
      long long v19 = *v7;
      sub_A6E80();
      uint64_t result = v20;
      if (v6 >= *(void *)(v20 + 16)) {
        break;
      }
      swift_bridgeObjectRelease();
      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      sub_A60D0();
      swift_release();
      swift_release();
      sub_92840((uint64_t)&v21);
      swift_getKeyPath();
      swift_getKeyPath();
      swift_retain();
      sub_A60D0();
      swift_release();
      swift_release();
      sub_92840((uint64_t)&v21);
      sub_A7460();
      if (v5 == ++v6) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_5:
    uint64_t v9 = v16;
    CGContextAddPath(v16, Mutable);
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    sub_A60D0();
    swift_release();
    swift_release();
    sub_92840((uint64_t)&v21);
    GenericGraCGFloat y = (CGColor *)sub_A6D10();
    swift_release();
    if (!GenericGray) {
      GenericGraCGFloat y = CGColorCreateGenericGray(1.0, 1.0);
    }
    CGContextSetFillColorWithColor(v9, GenericGray);

    CGContextSetLineWidth(v9, 0.0);
    uint64_t v11 = v17;
    uint64_t v12 = v15;
    uint64_t v13 = v18;
    (*(void (**)(char *, void, uint64_t))(v17 + 104))(v15, enum case for CGPathFillRule.winding(_:), v18);
    sub_A73C0();

    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v12, v13);
  }
  return result;
}

uint64_t sub_90D1C(uint64_t a1, long long *a2)
{
  long long v5 = a2[4];
  long long v6 = v5;
  sub_92950((uint64_t)&v6 + 8, (uint64_t)v7);
  sub_A1F0((uint64_t)v7);
  sub_7AF4(&qword_D89F8);
  uint64_t result = sub_A6E80();
  if (__OFADD__(*(void *)&v4, 1))
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_A6E90();
  sub_92840((uint64_t)&v6);
  long long v5 = v6;
  sub_A6E80();
  long long v5 = *a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_A60D0();
  swift_release();
  swift_release();
  uint64_t result = sub_92840((uint64_t)&v5);
  if ((~*(void *)&v4 & 0x7FF0000000000000) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  if (*(uint64_t *)&v4 >= (uint64_t)v4) {
    sub_90144();
  }
  sub_8FF14();
  sub_7AF4(&qword_DAF68);
  return sub_A6E90();
}

uint64_t sub_90EC8@<X0>(uint64_t a1@<X8>)
{
  return sub_90550(a1);
}

uint64_t AXLTAudioHistogramView.config.getter(uint64_t a1, uint64_t a2, char a3)
{
  return sub_90FE0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.wrappedValue.getter);
}

uint64_t type metadata accessor for AudioHistogramConfig()
{
  uint64_t result = qword_DAB60;
  if (!qword_DAB60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t (*variable initialization expression of AXLTAudioHistogramView._config())()
{
  return sub_90F8C;
}

uint64_t sub_90F8C()
{
  type metadata accessor for AudioHistogramConfig();
  uint64_t v0 = swift_allocObject();
  sub_8F6E8();
  return v0;
}

uint64_t AXLTAudioHistogramView.$config.getter(uint64_t a1, uint64_t a2, char a3)
{
  return sub_90FE0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&StateObject.projectedValue.getter);
}

uint64_t sub_90FE0(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = a3 & 1;
  uint64_t v7 = type metadata accessor for AudioHistogramConfig();
  uint64_t v8 = sub_92B14(&qword_DAB18, (void (*)(uint64_t))type metadata accessor for AudioHistogramConfig);

  return a4(a1, a2, v6, v7, v8);
}

__n128 AXLTAudioHistogramView.body.getter@<Q0>(uint64_t a1@<X8>)
{
  type metadata accessor for AudioHistogramConfig();
  sub_92B14(&qword_DAB18, (void (*)(uint64_t))type metadata accessor for AudioHistogramConfig);
  sub_A6220();
  sub_91F20((uint64_t *)v4);
  long long v2 = v4[3];
  *(_OWORD *)(a1 + 32) = v4[2];
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = v4[4];
  __n128 result = (__n128)v4[1];
  *(_OWORD *)a1 = v4[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

__n128 sub_91144@<Q0>(uint64_t a1@<X8>)
{
  type metadata accessor for AudioHistogramConfig();
  sub_92B14(&qword_DAB18, (void (*)(uint64_t))type metadata accessor for AudioHistogramConfig);
  sub_A6220();
  sub_91F20((uint64_t *)v4);
  long long v2 = v4[3];
  *(_OWORD *)(a1 + 32) = v4[2];
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = v4[4];
  __n128 result = (__n128)v4[1];
  *(_OWORD *)a1 = v4[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

double AXLTAudioHistogramViewGenerator.height.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_A60D0();
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t AXLTAudioHistogramViewGenerator.height.setter()
{
  return sub_A60E0();
}

uint64_t (*AXLTAudioHistogramViewGenerator.height.modify(void *a1))(uint64_t *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC19LiveSpeechUIService31AXLTAudioHistogramViewGenerator_config;
  a1[2] = v1;
  a1[3] = v3;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_A60D0();
  swift_release();
  swift_release();
  swift_release();
  *a1 = a1[1];
  return sub_914E4;
}

uint64_t sub_914E4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  a1[1] = v2;
  swift_retain();

  return sub_A60E0();
}

uint64_t AXLTAudioHistogramViewGenerator.histogram.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_A60D0();
  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t AXLTAudioHistogramViewGenerator.histogram.setter()
{
  return sub_A60E0();
}

uint64_t (*AXLTAudioHistogramViewGenerator.histogram.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = OBJC_IVAR____TtC19LiveSpeechUIService31AXLTAudioHistogramViewGenerator_config;
  a1[2] = v1;
  a1[3] = v3;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_A60D0();
  swift_release();
  swift_release();
  swift_release();
  *a1 = a1[1];
  return sub_91888;
}

uint64_t sub_91888(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  a1[1] = v4;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    sub_A60E0();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    return sub_A60E0();
  }
}

id AXLTAudioHistogramViewGenerator.init()()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC19LiveSpeechUIService31AXLTAudioHistogramViewGenerator_config;
  type metadata accessor for AudioHistogramConfig();
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = v1;
  sub_8F6E8();
  *(void *)&v1[v2] = v3;
  swift_retain();
  sub_91F20((uint64_t *)v10);
  long long v5 = &v4[OBJC_IVAR____TtC19LiveSpeechUIService31AXLTAudioHistogramViewGenerator_audioHistogramView];
  long long v6 = v10[3];
  *((_OWORD *)v5 + 2) = v10[2];
  *((_OWORD *)v5 + 3) = v6;
  *((_OWORD *)v5 + 4) = v10[4];
  long long v7 = v10[1];
  *(_OWORD *)long long v5 = v10[0];
  *((_OWORD *)v5 + 1) = v7;

  v9.receiver = v4;
  v9.super_class = (Class)type metadata accessor for AXLTAudioHistogramViewGenerator();
  return objc_msgSendSuper2(&v9, "init");
}

UIViewController __swiftcall AXLTAudioHistogramViewGenerator.viewController()()
{
  return (UIViewController)sub_A67A0();
}

id AXLTAudioHistogramViewGenerator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AXLTAudioHistogramViewGenerator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_91DA0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_91DC0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_91DC0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_7AF4((uint64_t *)&unk_D9250);
    double v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    double v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_A7790();
  __break(1u);
  return result;
}

uint64_t sub_91F20@<X0>(uint64_t *a1@<X8>)
{
  sub_7AF4(&qword_DAAF8);
  sub_A6E70();
  sub_A6E70();
  sub_A6E70();
  sub_A6E70();
  type metadata accessor for AudioHistogramConfig();
  sub_92B14(&qword_DAB18, (void (*)(uint64_t))type metadata accessor for AudioHistogramConfig);
  uint64_t result = sub_A6340();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v4;
  a1[5] = v5;
  a1[6] = v4;
  a1[7] = v5;
  a1[8] = v4;
  a1[9] = v5;
  return result;
}

uint64_t type metadata accessor for AXLTAudioHistogramViewGenerator()
{
  return self;
}

uint64_t sub_92070()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_9208C()
{
  return type metadata accessor for AudioHistogramConfig();
}

void sub_92094()
{
  sub_890D0(319, &qword_DAB70);
  if (v0 <= 0x3F)
  {
    sub_890D0(319, &qword_DAA38);
    if (v1 <= 0x3F)
    {
      sub_890D0(319, &qword_DAB78);
      if (v2 <= 0x3F)
      {
        sub_92218();
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

void sub_92218()
{
  if (!qword_DAB80)
  {
    sub_7C5C(&qword_DAAF8);
    unint64_t v0 = sub_A60F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_DAB80);
    }
  }
}

uint64_t sub_92278()
{
  return swift_retain();
}

uint64_t destroy for AXLTAudioHistogramView()
{
  return sub_92290();
}

uint64_t sub_92290()
{
  return swift_release();
}

uint64_t _s19LiveSpeechUIService22AXLTAudioHistogramViewVwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_92278();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AXLTAudioHistogramView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_92278();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_92290();
  return a1;
}

__n128 initializeWithTake for AXLTAudioHistogramView(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AXLTAudioHistogramView(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_92290();
  return a1;
}

uint64_t getEnumTagSinglePayload for AXLTAudioHistogramView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AXLTAudioHistogramView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AXLTAudioHistogramView()
{
  return &type metadata for AXLTAudioHistogramView;
}

unint64_t sub_92438()
{
  unint64_t result = qword_DAF40;
  if (!qword_DAF40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DAF40);
  }
  return result;
}

uint64_t destroy for AudioHistogramCanvasView()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

void *initializeWithCopy for AudioHistogramCanvasView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for AudioHistogramCanvasView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AudioHistogramCanvasView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for AudioHistogramCanvasView()
{
  return &type metadata for AudioHistogramCanvasView;
}

uint64_t sub_92740()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_92760()
{
  return sub_A63A0();
}

uint64_t sub_927B4(uint64_t a1)
{
  return a1;
}

uint64_t sub_92840(uint64_t a1)
{
  return a1;
}

uint64_t sub_92870()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_928E0(uint64_t a1)
{
  return sub_90D1C(a1, (long long *)(v1 + 16));
}

uint64_t sub_928E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_7AF4(&qword_DAF50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_92950(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_7AF4(&qword_DAF60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_929B8(uint64_t a1)
{
  return sub_90390(a1, *(long long **)(v1 + 16));
}

void *sub_929C0(uint64_t a1, double (*a2)(uint64_t, double))
{
  sub_91DA0(0, 0, 0);
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a1 + 32;
    do
    {
      double v7 = a2(v5, *(double *)(v6 + 8 * v5));
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1) {
        sub_91DA0(v8 > 1, v9 + 1, 1);
      }
      ++v5;
      _swiftEmptyArrayStorage[2] = v9 + 1;
      *(double *)&_swiftEmptyArrayStorage[v9 + 4] = v7;
    }
    while (v4 != v5);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

unint64_t sub_92AD4()
{
  unint64_t result = qword_DAF70;
  if (!qword_DAF70)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_DAF70);
  }
  return result;
}

uint64_t sub_92B14(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_92B5C(CGContext *a1)
{
  return sub_90920(a1, *(long long **)(v1 + 32));
}

unint64_t sub_92B80()
{
  unint64_t result = qword_DAF80;
  if (!qword_DAF80)
  {
    sub_7C5C(&qword_DAF58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DAF80);
  }
  return result;
}

uint64_t sub_92BE0(double *a1, uint64_t (*a2)(double, double))
{
  return a2(*a1, a1[1]);
}

uint64_t (*variable initialization expression of AXLTCaptionsView.swipeAction())()
{
  return LiveSpeechStore.SpeechContext.init(text:highlightRange:);
}

uint64_t property wrapper backing initializer of AXLTCaptionsView.timer()
{
  sub_7AF4(&qword_D82A8);
  sub_A6E70();
  return v1;
}

uint64_t AXLTCaptionsView.body.getter@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v3 = swift_allocObject();
  long long v4 = *(_OWORD *)(v1 + 176);
  *(_OWORD *)(v3 + 176) = *(_OWORD *)(v1 + 160);
  *(_OWORD *)(v3 + 192) = v4;
  *(_OWORD *)(v3 + 208) = *(_OWORD *)(v1 + 192);
  *(void *)(v3 + 224) = *(void *)(v1 + 208);
  long long v5 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(v3 + 112) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(v3 + 128) = v5;
  long long v6 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)(v3 + 144) = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(v3 + 160) = v6;
  long long v7 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v3 + 64) = v7;
  long long v8 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v3 + 80) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v3 + 96) = v8;
  long long v9 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v3 + 32) = v9;
  *a1 = sub_93110;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v3;

  return sub_93118(v1);
}

uint64_t sub_92D08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v32 = a3;
  uint64_t v4 = sub_7AF4(&qword_DAF98);
  __chkstk_darwin(v4 - 8);
  long long v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_7AF4(&qword_DAFA0);
  __chkstk_darwin(v31);
  long long v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  int64_t v11 = (char *)&v29 - v10;
  uint64_t v12 = sub_7AF4(&qword_DAFA8);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t (**)(uint64_t))((char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = sub_A62C0();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __n128 v18 = __chkstk_darwin(v15);
  if ((*(unsigned char *)(a2 + 8) & 0xFE) == 2)
  {
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16))((char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v30, v15, v18);
    unint64_t v19 = (*(unsigned __int8 *)(v16 + 80) + 232) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    uint64_t v20 = swift_allocObject();
    long long v21 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(v20 + 176) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(v20 + 192) = v21;
    *(_OWORD *)(v20 + 208) = *(_OWORD *)(a2 + 192);
    *(void *)(v20 + 224) = *(void *)(a2 + 208);
    long long v22 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(v20 + 112) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(v20 + 128) = v22;
    long long v23 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(v20 + 144) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(v20 + 160) = v23;
    long long v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v20 + 48) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v20 + 64) = v24;
    long long v25 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v20 + 80) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v20 + 96) = v25;
    long long v26 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v20 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v20 + 32) = v26;
    (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v20 + v19, (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
    *uint64_t v14 = sub_97BD8;
    v14[1] = (uint64_t (*)(uint64_t))v20;
    swift_storeEnumTagMultiPayload();
    sub_93118(a2);
    sub_7AF4(&qword_DAFB8);
    sub_A45C(&qword_DAFC0, &qword_DAFB8);
    sub_97B10();
    return sub_A6860();
  }
  else
  {
    *(void *)long long v6 = sub_A6760();
    *((void *)v6 + 1) = 0x4020000000000000;
    v6[16] = 0;
    uint64_t v28 = sub_7AF4(&qword_DAFB0);
    sub_96150(a2, (uint64_t)&v6[*(int *)(v28 + 44)]);
    sub_8860((uint64_t)v6, (uint64_t)v8, &qword_DAF98);
    *(_WORD *)&v8[*(int *)(v31 + 36)] = 0;
    sub_A35C((uint64_t)v6, &qword_DAF98);
    sub_29C10((uint64_t)v8, (uint64_t)v11, &qword_DAFA0);
    sub_8860((uint64_t)v11, (uint64_t)v14, &qword_DAFA0);
    swift_storeEnumTagMultiPayload();
    sub_7AF4(&qword_DAFB8);
    sub_A45C(&qword_DAFC0, &qword_DAFB8);
    sub_97B10();
    sub_A6860();
    return sub_A35C((uint64_t)v11, &qword_DAFA0);
  }
}

uint64_t sub_93110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_92D08(a1, v2 + 16, a2);
}

uint64_t sub_93118(uint64_t a1)
{
  uint64_t v4 = *(void **)(a1 + 160);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v2 = v4;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_93214()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_93230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v102 = a4;
  uint64_t v93 = sub_A6870();
  __chkstk_darwin(v93);
  uint64_t v92 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_A61F0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v95 = v8;
  uint64_t v96 = v9;
  __chkstk_darwin(v8);
  uint64_t v91 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_7AF4(&qword_D8100);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v98 = v11;
  uint64_t v99 = v12;
  __chkstk_darwin(v11);
  BOOL v94 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_7AF4(&qword_D8108);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v100 = v14;
  uint64_t v101 = v15;
  __chkstk_darwin(v14);
  uint64_t v97 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v90 = sub_7AF4(&qword_DAFE8) - 8;
  __chkstk_darwin(v90);
  char v89 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_A62C0();
  uint64_t v18 = *(void *)(v79 - 8);
  uint64_t v80 = *(void *)(v18 + 64);
  __chkstk_darwin(v79);
  unint64_t v78 = (char *)&v76 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v103 = sub_A6450();
  uint64_t v20 = *(void *)(v103 - 8);
  uint64_t v21 = *(void *)(v20 + 64);
  __chkstk_darwin(v103);
  long long v22 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_7AF4(&qword_DAFF0);
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  BOOL v77 = (char *)&v76 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = sub_7AF4(&qword_DAFF8) - 8;
  __chkstk_darwin(v85);
  uint64_t v81 = (uint64_t)&v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_7AF4(&qword_DB000) - 8;
  __chkstk_darwin(v87);
  uint64_t v84 = (uint64_t)&v76 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_7AF4(&qword_DB008);
  __chkstk_darwin(v88);
  uint64_t v86 = (uint64_t)&v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A69F0();
  uint64_t v104 = a2;
  uint64_t v105 = a3;
  uint64_t v106 = a1;
  sub_7AF4(&qword_DB010);
  sub_97BFC();
  sub_A6180();
  (*(void (**)(char *, uint64_t, void))(v20 + 16))(v22, a1, v103);
  uint64_t v27 = v78;
  uint64_t v28 = v79;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v78, a3, v79);
  unint64_t v29 = (*(unsigned __int8 *)(v20 + 80) + 232) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  unint64_t v30 = (v21 + *(unsigned __int8 *)(v18 + 80) + v29) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v31 = swift_allocObject();
  long long v32 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(v31 + 176) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(v31 + 192) = v32;
  *(_OWORD *)(v31 + 208) = *(_OWORD *)(a2 + 192);
  *(void *)(v31 + 224) = *(void *)(a2 + 208);
  long long v33 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v31 + 112) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v31 + 128) = v33;
  long long v34 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v31 + 144) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v31 + 160) = v34;
  long long v35 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v31 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v31 + 64) = v35;
  long long v36 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v31 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v31 + 96) = v36;
  long long v37 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v31 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v31 + 32) = v37;
  (*(void (**)(unint64_t, char *, void))(v20 + 32))(v31 + v29, v22, v103);
  (*(void (**)(unint64_t, char *, uint64_t))(v18 + 32))(v31 + v30, v27, v28);
  sub_93118(a2);
  uint64_t v38 = sub_A7030();
  uint64_t v40 = v39;
  uint64_t v41 = v82;
  uint64_t v42 = (uint64_t)v89;
  uint64_t v43 = v77;
  uint64_t v44 = v83;
  (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v89, v77, v83);
  uint64_t v45 = (uint64_t (**)@<X0>(uint64_t *@<X8>))(v42 + *(int *)(v90 + 44));
  *uint64_t v45 = sub_53608;
  v45[1] = 0;
  v45[2] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v38;
  v45[3] = v40;
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = sub_97CEC;
  *(void *)(v46 + 24) = v31;
  uint64_t v47 = v81;
  sub_8860(v42, v81, &qword_DAFE8);
  id v48 = (uint64_t (**)(double *))(v47 + *(int *)(v85 + 44));
  *id v48 = sub_97E0C;
  v48[1] = (uint64_t (*)(double *))v46;
  sub_A35C(v42, &qword_DAFE8);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v44);
  uint64_t v49 = v84;
  sub_8860(v47, v84, &qword_DAFF8);
  id v50 = (void *)(v49 + *(int *)(v87 + 44));
  *id v50 = 0x6C6C6F726373;
  v50[1] = 0xE600000000000000;
  sub_A35C(v47, &qword_DAFF8);
  sub_96CC8(a2, (uint64_t)v107);
  long long v103 = v107[0];
  long long v90 = v107[1];
  uint64_t v51 = v108;
  LOBYTE(v46) = v109;
  LOBYTE(v31) = v110;
  uint64_t v52 = v86;
  sub_8860(v49, v86, &qword_DB000);
  uint64_t v53 = v52 + *(int *)(v88 + 36);
  long long v54 = v90;
  *(_OWORD *)uint64_t v53 = v103;
  *(_OWORD *)(v53 + 16) = v54;
  *(void *)(v53 + 32) = v51;
  *(unsigned char *)(v53 + 40) = v46;
  *(unsigned char *)(v53 + 41) = v31;
  sub_A35C(v49, &qword_DB000);
  sub_A6930();
  id v55 = v91;
  sub_A61B0();
  uint64_t v56 = swift_allocObject();
  long long v57 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(v56 + 176) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(v56 + 192) = v57;
  *(_OWORD *)(v56 + 208) = *(_OWORD *)(a2 + 192);
  *(void *)(v56 + 224) = *(void *)(a2 + 208);
  long long v58 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v56 + 112) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v56 + 128) = v58;
  long long v59 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v56 + 144) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v56 + 160) = v59;
  long long v60 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v56 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v56 + 64) = v60;
  long long v61 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v56 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v56 + 96) = v61;
  long long v62 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v56 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v56 + 32) = v62;
  sub_93118(a2);
  sub_98CD4(&qword_D8130, (void (*)(uint64_t))&type metadata accessor for DragGesture);
  sub_98CD4(&qword_D8138, (void (*)(uint64_t))&type metadata accessor for DragGesture.Value);
  unint64_t v63 = v94;
  uint64_t v64 = v95;
  sub_A6F70();
  swift_release();
  (*(void (**)(char *, uint64_t))(v96 + 8))(v55, v64);
  uint64_t v65 = swift_allocObject();
  long long v66 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(v65 + 176) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(v65 + 192) = v66;
  *(_OWORD *)(v65 + 208) = *(_OWORD *)(a2 + 192);
  *(void *)(v65 + 224) = *(void *)(a2 + 208);
  long long v67 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v65 + 112) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v65 + 128) = v67;
  long long v68 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v65 + 144) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v65 + 160) = v68;
  long long v69 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v65 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v65 + 64) = v69;
  long long v70 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v65 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v65 + 96) = v70;
  long long v71 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v65 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v65 + 32) = v71;
  sub_93118(a2);
  sub_A45C(&qword_D8140, &qword_D8100);
  uint64_t v73 = v97;
  uint64_t v72 = v98;
  sub_A6F60();
  swift_release();
  (*(void (**)(char *, uint64_t))(v99 + 8))(v63, v72);
  sub_A6210();
  sub_97E8C();
  sub_A45C(&qword_D8170, &qword_D8108);
  uint64_t v74 = v100;
  sub_A6C60();
  (*(void (**)(char *, uint64_t))(v101 + 8))(v73, v74);
  return sub_A35C(v52, &qword_DB008);
}

uint64_t sub_93D58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v59 = a3;
  uint64_t v60 = a4;
  uint64_t v50 = a2;
  uint64_t v58 = sub_A6450();
  uint64_t v56 = *(void *)(v58 - 8);
  uint64_t v57 = *(void *)(v56 + 64);
  __chkstk_darwin(v58);
  id v55 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_A62C0();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = sub_7AF4(&qword_DB028);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v12 = sub_A6750();
  *((void *)v12 + 1) = 0;
  unsigned char v12[16] = 0;
  id v48 = &v12[*(int *)(sub_7AF4(&qword_DB0E0) + 44)];
  uint64_t v61 = *(void *)a1;
  uint64_t v62 = v61;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v46 = v7;
  uint64_t v47 = KeyPath;
  uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v49((char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v7);
  uint64_t v14 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = (v14 + 232) & ~v14;
  uint64_t v54 = v15;
  uint64_t v51 = v15 + v9;
  uint64_t v52 = v14 | 7;
  uint64_t v16 = swift_allocObject();
  long long v17 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v16 + 176) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v16 + 192) = v17;
  *(_OWORD *)(v16 + 208) = *(_OWORD *)(a1 + 192);
  *(void *)(v16 + 224) = *(void *)(a1 + 208);
  long long v18 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v16 + 112) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v16 + 128) = v18;
  long long v19 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v16 + 144) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v16 + 160) = v19;
  long long v20 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v16 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v16 + 64) = v20;
  long long v21 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v16 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v16 + 96) = v21;
  long long v22 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v16 + 32) = v22;
  uint64_t v53 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v23 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53(v16 + v15, v23, v7);
  sub_984AC((uint64_t)&v62);
  sub_93118(a1);
  sub_7AF4(&qword_D9110);
  sub_7AF4(&qword_DB0E8);
  sub_A45C(&qword_DB0F0, &qword_D9110);
  sub_98538(&qword_DB0F8, &qword_DB0E8, (void (*)(void))sub_984D8);
  sub_A6F40();
  uint64_t v24 = sub_A7030();
  uint64_t v47 = v25;
  id v48 = (char *)v24;
  uint64_t v26 = v23;
  uint64_t v27 = v46;
  v49(v23, v50, v46);
  unint64_t v29 = v55;
  uint64_t v28 = v56;
  uint64_t v30 = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v55, v59, v58);
  uint64_t v31 = v28;
  unint64_t v32 = (v51 + *(unsigned __int8 *)(v28 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  uint64_t v33 = swift_allocObject();
  long long v34 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v33 + 176) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v33 + 192) = v34;
  *(_OWORD *)(v33 + 208) = *(_OWORD *)(a1 + 192);
  *(void *)(v33 + 224) = *(void *)(a1 + 208);
  long long v35 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v33 + 112) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v33 + 128) = v35;
  long long v36 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v33 + 144) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v33 + 160) = v36;
  long long v37 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v33 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v33 + 64) = v37;
  long long v38 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v33 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v33 + 96) = v38;
  long long v39 = *(_OWORD *)(a1 + 16);
  uint64_t v40 = v33 + v54;
  *(_OWORD *)(v33 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v33 + 32) = v39;
  v53(v40, v26, v27);
  (*(void (**)(unint64_t, char *, uint64_t))(v31 + 32))(v33 + v32, v29, v30);
  uint64_t v41 = v60;
  sub_8860((uint64_t)v12, v60, &qword_DB028);
  uint64_t v42 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))(v41 + *(int *)(sub_7AF4(&qword_DB010) + 36));
  uint64_t *v42 = sub_98680;
  v42[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v33;
  uint64_t v43 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v47;
  v42[2] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v48;
  v42[3] = v43;
  sub_93118(a1);
  return sub_A35C((uint64_t)v12, &qword_DB028);
}

uint64_t sub_9420C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v108 = a3;
  uint64_t v114 = a4;
  uint64_t v6 = sub_A5D50();
  uint64_t v119 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v99 = (char *)v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = sub_7AF4(&qword_DB158);
  __chkstk_darwin(v117);
  uint64_t v113 = (uint64_t)v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v116 = (uint64_t)v96 - v10;
  uint64_t v11 = sub_7AF4(&qword_D85F8);
  __chkstk_darwin(v11 - 8);
  uint64_t v98 = (uint64_t)v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v111 = (char *)v96 - v14;
  __chkstk_darwin(v15);
  unint64_t v112 = (char *)v96 - v16;
  __chkstk_darwin(v17);
  uint64_t v97 = (uint64_t)v96 - v18;
  __chkstk_darwin(v19);
  uint64_t v115 = (uint64_t)v96 - v20;
  __chkstk_darwin(v21);
  uint64_t v101 = (char *)v96 - v22;
  uint64_t v23 = sub_7AF4(&qword_DB138);
  __chkstk_darwin(v23 - 8);
  uint64_t v25 = (char *)v96 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_7AF4(&qword_DB128);
  uint64_t v27 = v26 - 8;
  __chkstk_darwin(v26);
  unint64_t v29 = (char *)v96 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_7AF4(&qword_DB118);
  uint64_t v31 = v30 - 8;
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)v96 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = sub_7AF4(&qword_DB108);
  __chkstk_darwin(v106);
  uint64_t v118 = (uint64_t)v96 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_7AF4(&qword_DB0E8);
  __chkstk_darwin(v110);
  uint64_t v109 = (uint64_t)v96 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v25 = sub_A6760();
  *((void *)v25 + 1) = 0;
  uint64_t v36 = 1;
  v25[16] = 1;
  uint64_t v37 = sub_7AF4(&qword_DB160);
  uint64_t v38 = a2;
  sub_94DDC(a1, a2, (uint64_t)&v25[*(int *)(v37 + 44)]);
  sub_A62A0();
  sub_A7040();
  sub_A6270();
  sub_8860((uint64_t)v25, (uint64_t)v29, &qword_DB138);
  long long v39 = &v29[*(int *)(v27 + 44)];
  long long v40 = v121;
  *(_OWORD *)long long v39 = v120;
  *((_OWORD *)v39 + 1) = v40;
  *((_OWORD *)v39 + 2) = v122;
  sub_A35C((uint64_t)v25, &qword_DB138);
  LOBYTE(a2) = sub_A6A30();
  sub_A6140();
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  sub_8860((uint64_t)v29, (uint64_t)v33, &qword_DB128);
  uint64_t v49 = *(int *)(v31 + 44);
  uint64_t v107 = v33;
  uint64_t v50 = &v33[v49];
  *uint64_t v50 = a2;
  *((void *)v50 + 1) = v42;
  *((void *)v50 + 2) = v44;
  *((void *)v50 + 3) = v46;
  *((void *)v50 + 4) = v48;
  v50[40] = 0;
  uint64_t v51 = (uint64_t)v29;
  uint64_t v52 = v119;
  sub_A35C(v51, &qword_DB128);
  int v102 = sub_A6A20();
  uint64_t v53 = *(void (**)(void))(v52 + 16);
  uint64_t v54 = a1;
  uint64_t v55 = (uint64_t)v101;
  uint64_t v108 = v54;
  v53();
  uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56);
  v56(v55, 0, 1, v6);
  uint64_t v57 = *(void *)v38;
  uint64_t v103 = *(void *)(*(void *)v38 + 16);
  uint64_t v104 = v53;
  uint64_t v100 = v57;
  uint64_t v58 = v115;
  if (v103)
  {
    ((void (*)(uint64_t, unint64_t, uint64_t))v53)(v115, v57 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80)), v6);
    uint64_t v36 = 0;
  }
  uint64_t v105 = v56;
  v56(v58, v36, 1, v6);
  uint64_t v59 = v116;
  uint64_t v60 = v116 + *(int *)(v117 + 48);
  sub_8860(v55, v116, &qword_D85F8);
  sub_8860(v58, v60, &qword_D85F8);
  uint64_t v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
  if (v61(v59, 1, v6) == 1)
  {
    sub_A35C(v58, &qword_D85F8);
    sub_A35C(v55, &qword_D85F8);
    int v62 = v61(v60, 1, v6);
    uint64_t v63 = (uint64_t)v112;
    if (v62 == 1)
    {
      sub_A35C(v59, &qword_D85F8);
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  uint64_t v64 = v97;
  sub_8860(v59, v97, &qword_D85F8);
  if (v61(v60, 1, v6) == 1)
  {
    sub_A35C(v58, &qword_D85F8);
    sub_A35C(v55, &qword_D85F8);
    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v64, v6);
    uint64_t v63 = (uint64_t)v112;
LABEL_8:
    sub_A35C(v59, &qword_DB158);
    goto LABEL_10;
  }
  uint64_t v65 = v64;
  uint64_t v66 = v119;
  long long v67 = v99;
  (*(void (**)(char *, uint64_t, uint64_t))(v119 + 32))(v99, v60, v6);
  sub_98CD4(&qword_D9280, (void (*)(uint64_t))&type metadata accessor for AXLTCaption);
  v96[3] = sub_A7190();
  long long v68 = *(void (**)(char *, uint64_t))(v66 + 8);
  v68(v67, v6);
  sub_A35C(v115, &qword_D85F8);
  sub_A35C(v55, &qword_D85F8);
  v68((char *)v65, v6);
  sub_A35C(v116, &qword_D85F8);
  uint64_t v63 = (uint64_t)v112;
LABEL_10:
  uint64_t v69 = (uint64_t)v111;
  sub_A6140();
  uint64_t v71 = v70;
  uint64_t v73 = v72;
  uint64_t v75 = v74;
  uint64_t v77 = v76;
  uint64_t v78 = (uint64_t)v107;
  uint64_t v79 = v118;
  sub_8860((uint64_t)v107, v118, &qword_DB118);
  uint64_t v80 = v79 + *(int *)(v106 + 36);
  *(unsigned char *)uint64_t v80 = v102;
  *(void *)(v80 + 8) = v71;
  *(void *)(v80 + 16) = v73;
  *(void *)(v80 + 24) = v75;
  *(void *)(v80 + 32) = v77;
  *(unsigned char *)(v80 + 40) = 0;
  sub_A35C(v78, &qword_DB118);
  uint64_t v81 = v104;
  ((void (*)(uint64_t, uint64_t, uint64_t))v104)(v63, v108, v6);
  uint64_t v82 = 1;
  uint64_t v83 = v105;
  v105(v63, 0, 1, v6);
  if (v103)
  {
    ((void (*)(uint64_t, unint64_t, uint64_t))v81)(v69, v100+ ((*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80))+ *(void *)(v119 + 72) * (v103 - 1), v6);
    uint64_t v82 = 0;
  }
  v83(v69, v82, 1, v6);
  uint64_t v84 = v113;
  uint64_t v85 = v113 + *(int *)(v117 + 48);
  sub_8860(v63, v113, &qword_D85F8);
  sub_8860(v69, v85, &qword_D85F8);
  if (v61(v84, 1, v6) != 1)
  {
    uint64_t v87 = v98;
    sub_8860(v84, v98, &qword_D85F8);
    if (v61(v85, 1, v6) != 1)
    {
      uint64_t v88 = v69;
      uint64_t v89 = v119;
      long long v90 = v99;
      (*(void (**)(char *, uint64_t, uint64_t))(v119 + 32))(v99, v85, v6);
      sub_98CD4(&qword_D9280, (void (*)(uint64_t))&type metadata accessor for AXLTCaption);
      char v91 = sub_A7190();
      uint64_t v92 = *(void (**)(char *, uint64_t))(v89 + 8);
      v92(v90, v6);
      sub_A35C(v88, &qword_D85F8);
      sub_A35C(v63, &qword_D85F8);
      v92((char *)v87, v6);
      sub_A35C(v84, &qword_D85F8);
      double v86 = 1.0;
      if (v91) {
        goto LABEL_20;
      }
LABEL_19:
      double v86 = 0.8;
      goto LABEL_20;
    }
    sub_A35C(v69, &qword_D85F8);
    sub_A35C(v63, &qword_D85F8);
    (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v87, v6);
LABEL_17:
    sub_A35C(v84, &qword_DB158);
    goto LABEL_19;
  }
  sub_A35C(v69, &qword_D85F8);
  sub_A35C(v63, &qword_D85F8);
  if (v61(v85, 1, v6) != 1) {
    goto LABEL_17;
  }
  sub_A35C(v84, &qword_D85F8);
  double v86 = 1.0;
LABEL_20:
  uint64_t v93 = v118;
  uint64_t v94 = v109;
  sub_8860(v118, v109, &qword_DB108);
  *(double *)(v94 + *(int *)(v110 + 36)) = v86;
  sub_A35C(v93, &qword_DB108);
  return sub_29C10(v94, v114, &qword_DB0E8);
}

uint64_t sub_94DDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v44 = a3;
  uint64_t v41 = sub_7AF4(&qword_DB158);
  __chkstk_darwin(v41);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_7AF4(&qword_D85F8);
  __chkstk_darwin(v6 - 8);
  uint64_t v39 = (uint64_t)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v37 - v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v37 - v12;
  uint64_t v14 = sub_A5D50();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v38 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = type metadata accessor for LiveCaptionsTextView();
  __n128 v21 = __chkstk_darwin(v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = v19;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16);
  v23(v19, a1, v14, v21);
  ((void (*)(char *, uint64_t, uint64_t))v23)(v13, a1, v14);
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  uint64_t v25 = 1;
  v24(v13, 0, 1, v14);
  uint64_t v26 = *(void *)(*(void *)v40 + 16);
  if (v26)
  {
    ((void (*)(char *, unint64_t, uint64_t))v23)(v10, *(void *)v40+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(void *)(v15 + 72) * (v26 - 1), v14);
    uint64_t v25 = 0;
  }
  v24(v10, v25, 1, v14);
  uint64_t v27 = (uint64_t)&v5[*(int *)(v41 + 48)];
  uint64_t v28 = &qword_D85F8;
  sub_8860((uint64_t)v13, (uint64_t)v5, &qword_D85F8);
  sub_8860((uint64_t)v10, v27, &qword_D85F8);
  unint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v29((uint64_t)v5, 1, v14) == 1)
  {
    sub_A35C((uint64_t)v10, &qword_D85F8);
    sub_A35C((uint64_t)v13, &qword_D85F8);
    if (v29(v27, 1, v14) == 1)
    {
      char v30 = -1;
    }
    else
    {
      uint64_t v28 = &qword_DB158;
      char v30 = 0;
    }
  }
  else
  {
    uint64_t v31 = v39;
    sub_8860((uint64_t)v5, v39, &qword_D85F8);
    if (v29(v27, 1, v14) == 1)
    {
      sub_A35C((uint64_t)v10, &qword_D85F8);
      sub_A35C((uint64_t)v13, &qword_D85F8);
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v31, v14);
      char v30 = 0;
      uint64_t v28 = &qword_DB158;
    }
    else
    {
      uint64_t v32 = v38;
      (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v38, v27, v14);
      sub_98CD4(&qword_D9280, (void (*)(uint64_t))&type metadata accessor for AXLTCaption);
      char v30 = sub_A7190();
      uint64_t v33 = *(void (**)(char *, uint64_t))(v15 + 8);
      v33(v32, v14);
      uint64_t v28 = &qword_D85F8;
      sub_A35C((uint64_t)v10, &qword_D85F8);
      sub_A35C((uint64_t)v13, &qword_D85F8);
      v33((char *)v31, v14);
    }
  }
  sub_A35C((uint64_t)v5, v28);
  char v34 = v30 & 1;
  uint64_t v35 = v42;
  sub_37AC0((uint64_t)v43, v34, v42);
  return sub_98C6C(v35, v44, (uint64_t (*)(void))type metadata accessor for LiveCaptionsTextView);
}

uint64_t sub_952C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v66 = a4;
  uint64_t v59 = a3;
  uint64_t v56 = a1;
  uint64_t v71 = a5;
  uint64_t v64 = sub_A6450();
  uint64_t v62 = *(void *)(v64 - 8);
  uint64_t v65 = *(void *)(v62 + 64);
  __chkstk_darwin(v64);
  uint64_t v61 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = sub_A62C0();
  uint64_t v8 = *(void *)(v55 - 8);
  uint64_t v73 = *(void *)(v8 + 64);
  __chkstk_darwin(v55);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_A6880();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_7AF4(&qword_DB140);
  uint64_t v70 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v74 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_7AF4(&qword_DB148);
  uint64_t v67 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v63 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_A6D90();
  uint64_t v75 = 0x6C6C6F726373;
  uint64_t v76 = (void *)0xE600000000000000;
  sub_A6940();
  sub_A62B0();
  uint64_t v18 = v17;
  uint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v53 = v12 + 8;
  uint64_t v54 = v19;
  v19(v14, v11);
  uint64_t v75 = v18;
  uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v72 = v10;
  uint64_t v20 = v55;
  v58(v10, a3, v55);
  uint64_t v21 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v57 = v21 | 7;
  uint64_t v22 = swift_allocObject();
  long long v23 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(v22 + 176) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(v22 + 192) = v23;
  *(_OWORD *)(v22 + 208) = *(_OWORD *)(a2 + 192);
  *(void *)(v22 + 224) = *(void *)(a2 + 208);
  long long v24 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v22 + 112) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v22 + 128) = v24;
  long long v25 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v22 + 144) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v22 + 160) = v25;
  long long v26 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v22 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v22 + 64) = v26;
  long long v27 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v22 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v22 + 96) = v27;
  long long v28 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v22 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v22 + 32) = v28;
  uint64_t v60 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
  v60(v22 + ((v21 + 232) & ~v21), v10, v20);
  sub_93118(a2);
  unint64_t v52 = sub_9892C();
  sub_A6CE0();
  swift_release();
  swift_release();
  uint64_t v75 = 0x6C6C6F726373;
  uint64_t v76 = (void *)0xE600000000000000;
  sub_A6940();
  sub_A62B0();
  uint64_t v30 = v29;
  v54(v14, v11);
  uint64_t v79 = v30;
  uint64_t v32 = v61;
  uint64_t v31 = v62;
  uint64_t v33 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v61, v66, v64);
  uint64_t v34 = v20;
  v58(v72, v59, v20);
  uint64_t v35 = v31;
  unint64_t v36 = (*(unsigned __int8 *)(v31 + 80) + 232) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  unint64_t v37 = (v65 + v21 + v36) & ~v21;
  uint64_t v38 = swift_allocObject();
  long long v39 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(v38 + 176) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(v38 + 192) = v39;
  *(_OWORD *)(v38 + 208) = *(_OWORD *)(a2 + 192);
  *(void *)(v38 + 224) = *(void *)(a2 + 208);
  long long v40 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v38 + 112) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v38 + 128) = v40;
  long long v41 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v38 + 144) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v38 + 160) = v41;
  long long v42 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v38 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v38 + 64) = v42;
  long long v43 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v38 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v38 + 96) = v43;
  long long v44 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v38 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v38 + 32) = v44;
  (*(void (**)(unint64_t, char *, uint64_t))(v35 + 32))(v38 + v36, v32, v33);
  v60(v38 + v37, v72, v34);
  sub_93118(a2);
  uint64_t v75 = (uint64_t)&type metadata for Color;
  uint64_t v76 = &type metadata for CGFloat;
  uint64_t v77 = &protocol witness table for Color;
  unint64_t v78 = v52;
  swift_getOpaqueTypeConformance2();
  uint64_t v45 = v63;
  uint64_t v46 = v68;
  uint64_t v47 = v74;
  sub_A6CE0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v70 + 8))(v47, v46);
  uint64_t v48 = v67;
  uint64_t v49 = v69;
  (*(void (**)(uint64_t, char *, uint64_t))(v67 + 16))(v71, v45, v69);
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v45, v49);
}

uint64_t sub_959E8(uint64_t a1, double *a2, uint64_t a3)
{
  double v4 = *a2;
  double v5 = -*a2;
  sub_7AF4(&qword_D8808);
  sub_A6E80();
  sub_A62A0();
  if (v8 - v6 - *(double *)(a3 + 152) <= v5) {
    sub_95ADC();
  }
  sub_7AF4(&qword_D8380);
  uint64_t result = sub_A6E80();
  if (v4 < 0.0 != LOBYTE(v8)) {
    return sub_A6E90();
  }
  return result;
}

id sub_95ADC()
{
  long long v3 = *(_OWORD *)(v0 + 160);
  sub_7AF4(&qword_D8370);
  sub_A6E80();
  if (!v4) {
    goto LABEL_4;
  }
  objc_msgSend(v4, "invalidate", v3);
  sub_A7420();
  id result = (id)AXLogLiveTranscription();
  if (result)
  {
    id v2 = result;
    sub_A5FD0();

LABEL_4:
    sub_A6E90();
    sub_7AF4(&qword_D8380);
    return (id)sub_A6E90();
  }
  __break(1u);
  return result;
}

void sub_95BF0()
{
  sub_7AF4(&qword_D8808);
  sub_A6E90();
  sub_A62A0();
  sub_95C6C(v0);
}

void sub_95C6C(double a1)
{
  uint64_t v2 = v1;
  sub_7AF4(&qword_D8380);
  sub_A6E80();
  if (v8 == 1)
  {
    sub_7AF4(&qword_D8808);
    sub_A6E80();
    if (v9 > a1)
    {
      sub_A6E80();
      sub_A6440();
      os_log_type_t v4 = sub_A7420();
      double v5 = (id)AXLogLiveTranscription();
      if (v5)
      {
        double v6 = v5;
        if (os_log_type_enabled(v5, v4))
        {
          sub_93118(v2);
          uint64_t v7 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v7 = 134217984;
          sub_A6E80();
          sub_A7600();
          sub_29768(v2);
          _os_log_impl(&def_5ED54, v6, v4, "Scrolled to bottom: %f", v7, 0xCu);
          swift_slowDealloc();
        }
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void sub_95E24()
{
  os_log_type_t v0 = sub_A7420();
  uint64_t v1 = (id)AXLogLiveTranscription();
  if (v1)
  {
    uint64_t v2 = v1;
    if (os_log_type_enabled(v1, v0))
    {
      long long v3 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)long long v3 = 134217984;
      sub_A7600();
      _os_log_impl(&def_5ED54, v2, v0, "ScrollView new height: %f", v3, 0xCu);
      swift_slowDealloc();
    }

    sub_A62A0();
    sub_95C6C(v4);
  }
  else
  {
    __break(1u);
  }
}

id sub_95F30()
{
  uint64_t v1 = v0;
  long long v14 = *(_OWORD *)(v0 + 176);
  LOBYTE(v20) = 0;
  sub_7AF4(&qword_D8380);
  sub_A6E90();
  sub_A7420();
  id result = (id)AXLogLiveTranscription();
  if (result)
  {
    long long v3 = result;
    sub_A5FD0();

    long long v20 = *(_OWORD *)(v1 + 160);
    long long v14 = *(_OWORD *)(v1 + 160);
    sub_7AF4(&qword_D8370);
    sub_A6E80();
    objc_msgSend(v19, "invalidate", v14);

    double v4 = self;
    uint64_t v5 = swift_allocObject();
    long long v6 = *(_OWORD *)(v1 + 176);
    *(_OWORD *)(v5 + 176) = *(_OWORD *)(v1 + 160);
    *(_OWORD *)(v5 + 192) = v6;
    *(_OWORD *)(v5 + 208) = *(_OWORD *)(v1 + 192);
    *(void *)(v5 + 224) = *(void *)(v1 + 208);
    long long v7 = *(_OWORD *)(v1 + 112);
    *(_OWORD *)(v5 + 112) = *(_OWORD *)(v1 + 96);
    *(_OWORD *)(v5 + 128) = v7;
    long long v8 = *(_OWORD *)(v1 + 144);
    *(_OWORD *)(v5 + 144) = *(_OWORD *)(v1 + 128);
    *(_OWORD *)(v5 + 160) = v8;
    long long v9 = *(_OWORD *)(v1 + 48);
    *(_OWORD *)(v5 + 48) = *(_OWORD *)(v1 + 32);
    *(_OWORD *)(v5 + 64) = v9;
    long long v10 = *(_OWORD *)(v1 + 80);
    *(_OWORD *)(v5 + 80) = *(_OWORD *)(v1 + 64);
    *(_OWORD *)(v5 + 96) = v10;
    long long v11 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v5 + 16) = *(_OWORD *)v1;
    *(_OWORD *)(v5 + 32) = v11;
    uint64_t v17 = sub_98134;
    uint64_t v18 = v5;
    *(void *)&long long v14 = _NSConcreteStackBlock;
    *((void *)&v14 + 1) = 1107296256;
    uint64_t v15 = sub_1684C;
    uint64_t v16 = &unk_D1DD0;
    uint64_t v12 = _Block_copy(&v14);
    sub_93118(v1);
    swift_release();
    id v13 = [v4 scheduledTimerWithTimeInterval:0 repeats:v12 block:60.0];
    _Block_release(v12);
    long long v14 = v20;
    id v19 = v13;
    return (id)sub_A6E90();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_96150@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v67 = sub_7AF4(&qword_DB158);
  __chkstk_darwin(v67);
  uint64_t v69 = (uint64_t)v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AXLTTextView(0);
  uint64_t v73 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v71 = (uint64_t)v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v70 = (uint64_t)v60 - v8;
  uint64_t v9 = sub_7AF4(&qword_D85F8);
  __chkstk_darwin(v9 - 8);
  uint64_t v65 = (char *)v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v68 = (char *)v60 - v12;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v60 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v60 - v17;
  uint64_t v19 = sub_A5D50();
  long long v20 = *(void **)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v64 = (char *)v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  long long v24 = (char *)v60 - v23;
  __chkstk_darwin(v25);
  long long v27 = (char *)v60 - v26;
  uint64_t v72 = a1;
  sub_968D8((uint64_t)v18);
  uint64_t v66 = (uint64_t (*)(char *, uint64_t, uint64_t))v20[6];
  int v28 = v66(v18, 1, v19);
  uint64_t v74 = v5;
  if (v28 == 1)
  {
    sub_A35C((uint64_t)v18, &qword_D85F8);
    uint64_t v29 = 1;
    uint64_t v30 = v73;
  }
  else
  {
    uint64_t v63 = a2;
    uint64_t v31 = (void (*)(char *, char *, uint64_t))v20[4];
    v60[1] = v20 + 4;
    v60[0] = v31;
    v31(v27, v18, v19);
    uint64_t v32 = (void (*)(char *, char *, uint64_t))v20[2];
    uint64_t v61 = v24;
    v32(v24, v27, v19);
    uint64_t v62 = v27;
    v32(v15, v27, v19);
    uint64_t v33 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v20[7];
    uint64_t v34 = 1;
    v33(v15, 0, 1, v19);
    uint64_t v35 = *(void *)(*(void *)v72 + 16);
    unint64_t v36 = v20;
    uint64_t v37 = (uint64_t)v15;
    uint64_t v38 = (uint64_t)v68;
    if (v35)
    {
      v32(v68, (char *)(*(void *)v72+ ((*((unsigned __int8 *)v36 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v36 + 80))+ v36[9] * (v35 - 1)), v19);
      uint64_t v34 = 0;
    }
    v33((char *)v38, v34, 1, v19);
    uint64_t v39 = v69;
    uint64_t v40 = v69 + *(int *)(v67 + 48);
    sub_8860(v37, v69, &qword_D85F8);
    sub_8860(v38, v40, &qword_D85F8);
    long long v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v66;
    int v42 = v66((char *)v39, 1, v19);
    uint64_t v30 = v73;
    if (v42 == 1)
    {
      sub_A35C(v38, &qword_D85F8);
      sub_A35C(v37, &qword_D85F8);
      int v43 = v41(v40, 1, v19);
      if (v43 == 1) {
        long long v44 = &qword_D85F8;
      }
      else {
        long long v44 = &qword_DB158;
      }
      if (v43 == 1) {
        int v45 = -1;
      }
      else {
        int v45 = 0;
      }
      LODWORD(v68) = v45;
    }
    else
    {
      uint64_t v46 = (uint64_t)v65;
      sub_8860(v39, (uint64_t)v65, &qword_D85F8);
      if (v41(v40, 1, v19) == 1)
      {
        sub_A35C(v38, &qword_D85F8);
        sub_A35C(v37, &qword_D85F8);
        ((void (*)(uint64_t, uint64_t))v36[1])(v46, v19);
        LODWORD(v68) = 0;
        long long v44 = &qword_DB158;
      }
      else
      {
        uint64_t v47 = v64;
        ((void (*)(char *, uint64_t, uint64_t))v60[0])(v64, v40, v19);
        sub_98CD4(&qword_D9280, (void (*)(uint64_t))&type metadata accessor for AXLTCaption);
        LODWORD(v68) = sub_A7190();
        uint64_t v48 = v38;
        uint64_t v49 = (void (*)(char *, uint64_t))v36[1];
        v49(v47, v19);
        long long v44 = &qword_D85F8;
        sub_A35C(v48, &qword_D85F8);
        sub_A35C(v37, &qword_D85F8);
        v49(v65, v19);
      }
    }
    uint64_t v50 = v72;
    sub_A35C(v39, v44);
    long long v75 = *(_OWORD *)(v50 + 16);
    *(void *)&long long v76 = *(void *)(v50 + 32);
    sub_7AF4(&qword_D8378);
    sub_A6F20();
    long long v51 = v77;
    double v52 = v78;
    long long v75 = *(_OWORD *)(v50 + 40);
    *(void *)&long long v76 = *(void *)(v50 + 56);
    sub_7AF4(&qword_DB168);
    sub_A6F20();
    long long v53 = v77;
    uint64_t v54 = *(void *)&v78;
    long long v55 = *(_OWORD *)(v50 + 80);
    long long v75 = *(_OWORD *)(v50 + 64);
    long long v76 = v55;
    sub_7AF4(&qword_DB170);
    sub_A6F20();
    uint64_t v56 = v71;
    sub_9A890((uint64_t)v61, 0, v68 & 1, v51, *((uint64_t *)&v51 + 1), v53, *((uint64_t *)&v53 + 1), v54, v71, v52, v77, *(uint64_t *)&v78, v79);
    ((void (*)(char *, uint64_t))v36[1])(v62, v19);
    uint64_t v57 = v56;
    uint64_t v58 = v70;
    sub_98C6C(v57, v70, type metadata accessor for AXLTTextView);
    a2 = v63;
    sub_98C6C(v58, v63, type metadata accessor for AXLTTextView);
    uint64_t v29 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(a2, v29, 1, v74);
}

uint64_t sub_968D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_A5E10();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v37 - v8;
  uint64_t v10 = sub_A5D50();
  __chkstk_darwin(v10);
  __n128 v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v37 - v15;
  uint64_t v17 = *v1;
  unint64_t v18 = *(void *)(*v1 + 16);
  if (v18)
  {
    uint64_t v40 = v9;
    long long v41 = v6;
    uint64_t v42 = v4;
    uint64_t v43 = a1;
    uint64_t v44 = v12;
    uint64_t v19 = v17 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v20 = *(void *)(v12 + 72);
    uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v12 + 16);
    uint64_t v39 = v13;
    v38(v16, v19 + v20 * (v18 - 1), v10, v14);
    uint64_t v21 = sub_A5D10();
    uint64_t v23 = v22;
    if (v21 == sub_A5D80() && v23 == v24)
    {
      swift_bridgeObjectRelease_n();
      if (v18 <= 1) {
        goto LABEL_14;
      }
    }
    else
    {
      char v26 = sub_A7800();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v18 < 2 || (v26 & 1) == 0) {
        goto LABEL_14;
      }
    }
    uint64_t v29 = v19 + v20 * (v18 - 2);
    uint64_t v30 = v40;
    sub_A5C80();
    uint64_t v32 = v41;
    uint64_t v31 = v42;
    (*(void (**)(char *, void, uint64_t))(v42 + 104))(v41, enum case for AXLTCaptionActionsType.AXLTCaptionActionsSeparate(_:), v3);
    sub_98CD4(&qword_D92C8, (void (*)(uint64_t))&type metadata accessor for AXLTCaptionActionsType);
    char v33 = sub_A7190();
    uint64_t v34 = *(void (**)(char *, uint64_t))(v31 + 8);
    v34(v32, v3);
    v34(v30, v3);
    if ((v33 & 1) == 0)
    {
      uint64_t v36 = v39;
      ((void (*)(uint64_t, uint64_t, uint64_t))v38)(v39, v29, v10);
      sub_A5CE0();
      sub_A5CB0();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v16, v10);
      uint64_t v35 = v43;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v43, v36, v10);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v35, 0, 1, v10);
    }
LABEL_14:
    uint64_t v35 = v43;
    (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v43, v16, v10);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v35, 0, 1, v10);
  }
  long long v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v12 + 56);

  return v27(a1, 1, 1, v10, v14);
}

double sub_96CC8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v7 = *(_OWORD *)(a1 + 128);
  sub_7AF4(&qword_D8380);
  sub_A6E80();
  if (v6 == 1)
  {
    sub_7AF4(&qword_D9840);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_A9DC0;
    *(void *)(v3 + 32) = sub_A6D80();
    sub_A6D80();
    uint64_t v4 = sub_A6DC0();
    swift_release();
    *(void *)(v3 + 40) = v4;
    *(void *)&long long v7 = v3;
    sub_A72C0();
    sub_A6FA0();
    sub_A70A0();
    sub_A6330();
  }
  sub_7AF4(&qword_DB0A8);
  sub_7AF4(&qword_DB0B0);
  sub_98250(&qword_DB0B8, &qword_DB0A8, (void (*)(void))sub_982D0);
  sub_98250(&qword_DB0D0, &qword_DB0B0, (void (*)(void))sub_98378);
  sub_A6860();
  double result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(_OWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 32) = v9;
  *(unsigned char *)(a2 + 40) = v10;
  *(unsigned char *)(a2 + 41) = v11;
  return result;
}

id sub_96E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_A70C0();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_A70F0();
  uint64_t v7 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A7420();
  id result = (id)AXLogLiveTranscription();
  if (result)
  {
    char v11 = result;
    sub_A5FD0();

    sub_7B78();
    uint64_t v12 = (void *)sub_A74C0();
    uint64_t v13 = swift_allocObject();
    long long v14 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(v13 + 176) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(v13 + 192) = v14;
    *(_OWORD *)(v13 + 208) = *(_OWORD *)(a2 + 192);
    *(void *)(v13 + 224) = *(void *)(a2 + 208);
    long long v15 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(v13 + 112) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(v13 + 128) = v15;
    long long v16 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(v13 + 144) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(v13 + 160) = v16;
    long long v17 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v13 + 48) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v13 + 64) = v17;
    long long v18 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v13 + 80) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v13 + 96) = v18;
    long long v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v13 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v13 + 32) = v19;
    aBlock[4] = sub_98200;
    aBlock[5] = v13;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_8A1B4;
    aBlock[3] = &unk_D1E20;
    uint64_t v20 = _Block_copy(aBlock);
    sub_93118(a2);
    swift_release();
    sub_A70D0();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_98CD4((unint64_t *)&unk_D9260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_7AF4((uint64_t *)&unk_D84C0);
    sub_A45C((unint64_t *)&qword_D9270, (uint64_t *)&unk_D84C0);
    sub_A7640();
    sub_A74E0();
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return (id)(*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v22);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_971F8@<X0>(uint64_t (**a1)@<X0>(uint64_t@<X0>, uint64_t@<X8>)@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 176);
  v17[10] = *(_OWORD *)(v1 + 160);
  v17[11] = v3;
  v17[12] = *(_OWORD *)(v1 + 192);
  uint64_t v18 = *(void *)(v1 + 208);
  long long v4 = *(_OWORD *)(v1 + 112);
  v17[6] = *(_OWORD *)(v1 + 96);
  v17[7] = v4;
  long long v5 = *(_OWORD *)(v1 + 144);
  v17[8] = *(_OWORD *)(v1 + 128);
  v17[9] = v5;
  long long v6 = *(_OWORD *)(v1 + 48);
  v17[2] = *(_OWORD *)(v1 + 32);
  void v17[3] = v6;
  long long v7 = *(_OWORD *)(v1 + 80);
  v17[4] = *(_OWORD *)(v1 + 64);
  v17[5] = v7;
  long long v8 = *(_OWORD *)(v1 + 16);
  v17[0] = *(_OWORD *)v1;
  v17[1] = v8;
  uint64_t v9 = swift_allocObject();
  long long v10 = *(_OWORD *)(v1 + 176);
  *(_OWORD *)(v9 + 176) = *(_OWORD *)(v1 + 160);
  *(_OWORD *)(v9 + 192) = v10;
  *(_OWORD *)(v9 + 208) = *(_OWORD *)(v1 + 192);
  *(void *)(v9 + 224) = *(void *)(v1 + 208);
  long long v11 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(v9 + 112) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(v9 + 128) = v11;
  long long v12 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)(v9 + 144) = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(v9 + 160) = v12;
  long long v13 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v9 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v9 + 64) = v13;
  long long v14 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v9 + 80) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v9 + 96) = v14;
  long long v15 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v9 + 32) = v15;
  *a1 = sub_98D24;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v9;
  return sub_93118((uint64_t)v17);
}

uint64_t destroy for AXLTCaptionsView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for AXLTCaptionsView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v7 = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = v7;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  uint64_t v9 = *(void **)(a2 + 160);
  uint64_t v8 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = v9;
  *(void *)(a1 + 168) = v8;
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  uint64_t v10 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v10;
  uint64_t v11 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v11;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v12 = v9;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AXLTCaptionsView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v4;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_retain();
  swift_release();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  uint64_t v5 = *(void **)(a1 + 160);
  uint64_t v6 = *(void **)(a2 + 160);
  *(void *)(a1 + 160) = v6;
  id v7 = v6;

  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_retain();
  swift_release();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_retain();
  swift_release();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  return a1;
}

__n128 initializeWithTake for AXLTCaptionsView(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for AXLTCaptionsView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = v4;
  swift_release();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_release();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_release();
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);

  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  swift_release();
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_release();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_release();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  return a1;
}

uint64_t getEnumTagSinglePayload for AXLTCaptionsView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 216)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AXLTCaptionsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 216) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 216) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AXLTCaptionsView()
{
  return &type metadata for AXLTCaptionsView;
}

uint64_t sub_9791C()
{
  return sub_A45C(&qword_DAF88, &qword_DAF90);
}

double sub_97958@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, long long a11, long long a12, uint64_t a13)
{
  sub_A6E70();
  sub_A6E70();
  sub_7AF4(&qword_D82A8);
  sub_A6E70();
  sub_A6E70();
  sub_A6E70();
  double result = v24;
  *(void *)a9 = a1;
  *(unsigned char *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(double *)(a9 + 32) = a10;
  *(void *)(a9 + 40) = a5;
  *(void *)(a9 + 48) = a6;
  *(void *)(a9 + 56) = a7;
  *(void *)(a9 + 64) = a8;
  *(_OWORD *)(a9 + 72) = a11;
  *(_OWORD *)(a9 + 88) = a12;
  *(void *)(a9 + 104) = a13;
  *(unsigned char *)(a9 + 112) = LOBYTE(v24);
  *(void *)(a9 + 120) = v25;
  *(unsigned char *)(a9 + 128) = LOBYTE(v24);
  *(void *)(a9 + 136) = v25;
  *(_OWORD *)(a9 + 144) = xmmword_ACE70;
  *(double *)(a9 + 160) = v24;
  *(void *)(a9 + 168) = v25;
  *(unsigned char *)(a9 + 176) = LOBYTE(v24);
  *(void *)(a9 + 184) = v25;
  *(double *)(a9 + 192) = v24;
  *(void *)(a9 + 200) = v25;
  *(void *)(a9 + 208) = 0x4028000000000000;
  return result;
}

unint64_t sub_97B10()
{
  unint64_t result = qword_DAFC8;
  if (!qword_DAFC8)
  {
    sub_7C5C(&qword_DAFA0);
    sub_A45C(&qword_DAFD0, &qword_DAF98);
    sub_A45C(&qword_DAFD8, &qword_DAFE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DAFC8);
  }
  return result;
}

uint64_t sub_97BD8(uint64_t a1)
{
  return sub_98414(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_93230);
}

uint64_t sub_97BF0@<X0>(uint64_t a1@<X8>)
{
  return sub_93D58(v1[2], v1[3], v1[4], a1);
}

unint64_t sub_97BFC()
{
  unint64_t result = qword_DB018;
  if (!qword_DB018)
  {
    sub_7C5C(&qword_DB010);
    sub_A45C(&qword_DB020, &qword_DB028);
    sub_A45C(&qword_DB030, &qword_DB038);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DB018);
  }
  return result;
}

uint64_t sub_97CC0()
{
  return sub_989AC((uint64_t (*)(void))&type metadata accessor for ScrollViewProxy, (uint64_t (*)(void))&type metadata accessor for GeometryProxy);
}

void sub_97CEC()
{
  sub_A6450();
  sub_A62C0();

  sub_95E24();
}

uint64_t sub_97DD4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_97E0C(double *a1)
{
  return (*(uint64_t (**)(double, double))(v1 + 16))(*a1, a1[1]);
}

id sub_97E3C()
{
  return sub_95F30();
}

uint64_t sub_97E64()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

unint64_t sub_97E8C()
{
  unint64_t result = qword_DB040;
  if (!qword_DB040)
  {
    sub_7C5C(&qword_DB008);
    sub_97F2C();
    sub_A45C(&qword_DB098, &qword_DB0A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DB040);
  }
  return result;
}

unint64_t sub_97F2C()
{
  unint64_t result = qword_DB048;
  if (!qword_DB048)
  {
    sub_7C5C(&qword_DB000);
    sub_97FCC();
    sub_A45C(&qword_DB088, &qword_DB090);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DB048);
  }
  return result;
}

unint64_t sub_97FCC()
{
  unint64_t result = qword_DB050;
  if (!qword_DB050)
  {
    sub_7C5C(&qword_DAFF8);
    sub_9806C();
    sub_A45C(&qword_DB078, &qword_DB080);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DB050);
  }
  return result;
}

unint64_t sub_9806C()
{
  unint64_t result = qword_DB058;
  if (!qword_DB058)
  {
    sub_7C5C(&qword_DAFE8);
    sub_A45C(&qword_DB060, &qword_DAFF0);
    sub_A45C(&qword_DB068, &qword_DB070);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DB058);
  }
  return result;
}

id sub_98134(uint64_t a1)
{
  return sub_96E9C(a1, v1 + 16);
}

uint64_t sub_9813C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_9814C()
{
  return swift_release();
}

uint64_t sub_98158()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 232, 7);
}

uint64_t sub_98200()
{
  return sub_A6E90();
}

uint64_t sub_98250(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_7C5C(a2);
    a3();
    sub_98324();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_982D0()
{
  unint64_t result = qword_DB0C0;
  if (!qword_DB0C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DB0C0);
  }
  return result;
}

unint64_t sub_98324()
{
  unint64_t result = qword_DB0C8;
  if (!qword_DB0C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DB0C8);
  }
  return result;
}

unint64_t sub_98378()
{
  unint64_t result = qword_DB0D8;
  if (!qword_DB0D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DB0D8);
  }
  return result;
}

uint64_t sub_983CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_A5CD0();
  *a1 = result;
  return result;
}

uint64_t sub_983FC(uint64_t a1)
{
  return sub_98414(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_9420C);
}

uint64_t sub_98414(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(sub_A62C0() - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 232) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v2 + 16, v5);
}

uint64_t sub_984AC(uint64_t a1)
{
  return a1;
}

uint64_t sub_984D8()
{
  return sub_98538(&qword_DB100, &qword_DB108, (void (*)(void))sub_98508);
}

uint64_t sub_98508()
{
  return sub_98538(&qword_DB110, &qword_DB118, (void (*)(void))sub_985B4);
}

uint64_t sub_98538(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_7C5C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_985B4()
{
  unint64_t result = qword_DB120;
  if (!qword_DB120)
  {
    sub_7C5C(&qword_DB128);
    sub_A45C(&qword_DB130, &qword_DB138);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DB120);
  }
  return result;
}

uint64_t sub_98654()
{
  return sub_989AC((uint64_t (*)(void))&type metadata accessor for GeometryProxy, (uint64_t (*)(void))&type metadata accessor for ScrollViewProxy);
}

uint64_t sub_98680@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_A62C0() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 232) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(sub_A6450() - 8);
  uint64_t v9 = v2 + ((v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));

  return sub_952C8(a1, v2 + 16, v2 + v6, v9, a2);
}

uint64_t sub_9876C()
{
  uint64_t v1 = sub_A62C0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 232) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_988A8(uint64_t a1, double *a2)
{
  sub_A62C0();

  return sub_959E8(a1, a2, v2 + 16);
}

unint64_t sub_9892C()
{
  unint64_t result = qword_DB150;
  if (!qword_DB150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DB150);
  }
  return result;
}

uint64_t sub_98980()
{
  return sub_989AC((uint64_t (*)(void))&type metadata accessor for ScrollViewProxy, (uint64_t (*)(void))&type metadata accessor for GeometryProxy);
}

uint64_t sub_989AC(uint64_t (*a1)(void), uint64_t (*a2)(void))
{
  uint64_t v4 = a1(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 + 232) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = a2(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v7 + v8 + v11) & ~v11;
  uint64_t v13 = v12 + *(void *)(v10 + 64);
  uint64_t v14 = v6 | v11 | 7;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2 + v7, v4);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2 + v12, v9);

  return _swift_deallocObject(v2, v13, v14);
}

void sub_98B84()
{
  sub_A6450();
  sub_A62C0();

  sub_95BF0();
}

uint64_t sub_98C6C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_98CD4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

UIFontTextStyle sub_98D28()
{
  qword_DF630 = (uint64_t)UIFontTextStyleTitle2;
  return UIFontTextStyleTitle2;
}

UIFontTextStyle sub_98D40()
{
  qword_DF638 = (uint64_t)UIFontTextStyleHeadline;
  return UIFontTextStyleHeadline;
}

void sub_98D58()
{
  qword_DF640 = 0x4040000000000000;
}

uint64_t sub_98D68()
{
  uint64_t v0 = sub_A6380();
  sub_1442C(v0, qword_DF648);
  uint64_t v1 = sub_7B38(v0, (uint64_t)qword_DF648);
  uint64_t v2 = enum case for DynamicTypeSize.xxxLarge(_:);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 104);

  return v3(v1, v2, v0);
}

id sub_98DF0()
{
  id result = [self tertiaryLabelColor];
  qword_DF660 = (uint64_t)result;
  return result;
}

void *backgroundColorViewInset.unsafeMutableAddressor()
{
  return &backgroundColorViewInset;
}

uint64_t destroy for BackgroundColorView()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for BackgroundColorView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for BackgroundColorView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for BackgroundColorView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for BackgroundColorView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BackgroundColorView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)id result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BackgroundColorView()
{
  return &type metadata for BackgroundColorView;
}

uint64_t sub_99014()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_99030@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)@<X0>(uint64_t a1@<X8>)@<X8>, double a5@<D0>)
{
  uint64_t v10 = sub_A7520();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_allocObject();
  *(unsigned char *)(v14 + 16) = a1;
  *(double *)(v14 + 24) = a5;
  *(void *)(v14 + 32) = a2;
  *(void *)(v14 + 40) = a3;
  long long v15 = self;
  swift_retain();
  swift_retain();
  id v16 = [v15 defaultCenter];
  if (qword_D7E18 != -1) {
    swift_once();
  }
  sub_A7530();

  uint64_t v17 = swift_allocObject();
  *(unsigned char *)(v17 + 16) = a1;
  *(double *)(v17 + 24) = a5;
  *(void *)(v17 + 32) = a2;
  *(void *)(v17 + 40) = a3;
  uint64_t v18 = sub_7AF4(&qword_DB178);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))((char *)a4 + *(int *)(v18 + 52), v13, v10);
  *a4 = sub_999A4;
  a4[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v14;
  long long v19 = (uint64_t (**)(uint64_t))((char *)a4 + *(int *)(v18 + 56));
  *long long v19 = sub_999F8;
  v19[1] = (uint64_t (*)(uint64_t))v17;
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  swift_retain();
  swift_retain();
  return v20(v13, v10);
}

uint64_t sub_99264@<X0>(unsigned __int8 a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_7AF4(&qword_D8FB0);
  sub_A6E80();
  sub_A6D90();
  char v8 = sub_A6D40();
  swift_release();
  swift_release();
  if (v8)
  {
    uint64_t v9 = sub_7AF4(&qword_DB180);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a4, 1, 1, v9);
  }
  else
  {
    sub_9939C(a1, a2, a3, a4);
    uint64_t v11 = sub_7AF4(&qword_DB180);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a4, 0, 1, v11);
  }
}

uint64_t sub_9939C@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v77 = a4;
  int v72 = a1;
  uint64_t v73 = sub_7AF4(&qword_D8188) - 8;
  __chkstk_darwin(v73);
  uint64_t v7 = &v71[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = sub_A6490();
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = (double *)&v71[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = sub_7AF4(&qword_D8190);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12);
  long long v15 = (uint64_t *)&v71[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = sub_7AF4(&qword_DB188);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16);
  long long v19 = &v71[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v75 = sub_7AF4(&qword_DB190) - 8;
  __chkstk_darwin(v75);
  uint64_t v21 = &v71[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v76 = sub_7AF4(&qword_DB198) - 8;
  __chkstk_darwin(v76);
  uint64_t v74 = &v71[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v78 = a2;
  uint64_t v79 = a3;
  sub_7AF4(&qword_D8FB0);
  sub_A6E80();
  uint64_t v23 = sub_A6DC0();
  swift_release();
  double v24 = (char *)v11 + *(int *)(v9 + 28);
  uint64_t v25 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v26 = sub_A66E0();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 104))(v24, v25, v26);
  double v27 = 24.0;
  if (v72 == 3) {
    double v27 = 0.0;
  }
  *uint64_t v11 = v27;
  v11[1] = v27;
  sub_A29C((uint64_t)v11, (uint64_t)v7);
  *(_WORD *)&v7[*(int *)(v73 + 44)] = 256;
  sub_8860((uint64_t)v7, (uint64_t)v15 + *(int *)(v13 + 44), &qword_D8188);
  *long long v15 = v23;
  swift_retain();
  sub_A35C((uint64_t)v7, &qword_D8188);
  sub_A300((uint64_t)v11);
  swift_release();
  char v28 = sub_A6A20();
  sub_A6140();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v36 = v35;
  sub_8860((uint64_t)v15, (uint64_t)v19, &qword_D8190);
  uint64_t v37 = &v19[*(int *)(v17 + 44)];
  unsigned char *v37 = v28;
  *((void *)v37 + 1) = v30;
  *((void *)v37 + 2) = v32;
  *((void *)v37 + 3) = v34;
  *((void *)v37 + 4) = v36;
  v37[40] = 0;
  sub_A35C((uint64_t)v15, &qword_D8190);
  char v38 = sub_A6A40();
  sub_A6140();
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  sub_8860((uint64_t)v19, (uint64_t)v21, &qword_DB188);
  uint64_t v47 = &v21[*(int *)(v75 + 44)];
  *uint64_t v47 = v38;
  *((void *)v47 + 1) = v40;
  *((void *)v47 + 2) = v42;
  *((void *)v47 + 3) = v44;
  *((void *)v47 + 4) = v46;
  v47[40] = 0;
  sub_A35C((uint64_t)v19, &qword_DB188);
  char v48 = sub_A6A60();
  sub_A6140();
  uint64_t v50 = v49;
  uint64_t v52 = v51;
  uint64_t v54 = v53;
  uint64_t v56 = v55;
  uint64_t v57 = v74;
  sub_8860((uint64_t)v21, (uint64_t)v74, &qword_DB190);
  uint64_t v58 = &v57[*(int *)(v76 + 44)];
  *uint64_t v58 = v48;
  *((void *)v58 + 1) = v50;
  *((void *)v58 + 2) = v52;
  *((void *)v58 + 3) = v54;
  *((void *)v58 + 4) = v56;
  v58[40] = 0;
  sub_A35C((uint64_t)v21, &qword_DB190);
  char v59 = sub_A6A30();
  sub_A6140();
  uint64_t v61 = v60;
  uint64_t v63 = v62;
  uint64_t v65 = v64;
  uint64_t v67 = v66;
  uint64_t v68 = v77;
  sub_8860((uint64_t)v57, v77, &qword_DB198);
  uint64_t v69 = v68 + *(int *)(sub_7AF4(&qword_DB180) + 36);
  *(unsigned char *)uint64_t v69 = v59;
  *(void *)(v69 + 8) = v61;
  *(void *)(v69 + 16) = v63;
  *(void *)(v69 + 24) = v65;
  *(void *)(v69 + 32) = v67;
  *(unsigned char *)(v69 + 40) = 0;
  return sub_A35C((uint64_t)v57, &qword_DB198);
}

uint64_t sub_9987C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_A58C0();
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v10 = sub_A5DF0();
    sub_A7670();
    if (*(void *)(v7 + 16) && (unint64_t v8 = sub_85F3C((uint64_t)v11), (v9 & 1) != 0))
    {
      sub_10330(*(void *)(v7 + 56) + 32 * v8, (uint64_t)&v12);
    }
    else
    {
      long long v12 = 0u;
      long long v13 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_102DC((uint64_t)v11);
    if (*((void *)&v13 + 1))
    {
      uint64_t result = swift_dynamicCast();
      if (result)
      {
        v11[0] = a3;
        v11[1] = a4;
        *(void *)&long long v12 = v10;
        sub_7AF4(&qword_D8FB0);
        return sub_A6E90();
      }
    }
    else
    {
      return sub_A35C((uint64_t)&v12, &qword_D92A0);
    }
  }
  return result;
}

uint64_t sub_99990@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  return sub_99030(*(unsigned char *)v1, *(void *)(v1 + 16), *(void *)(v1 + 24), a1, *(double *)(v1 + 8));
}

uint64_t sub_999A4@<X0>(uint64_t a1@<X8>)
{
  return sub_99264(*(unsigned char *)(v1 + 16), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_999B8()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_999F8(uint64_t a1)
{
  return sub_9987C(a1, *(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

unint64_t sub_99A0C()
{
  unint64_t result = qword_DB1A0;
  if (!qword_DB1A0)
  {
    sub_7C5C(&qword_DB178);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DB1A0);
  }
  return result;
}

double safeSize(offset:size:containerSize:)(double a1, double a2, double a3)
{
  return a3;
}

uint64_t safeTextHeight(textHeight:isAccessibilityLayout:)(char a1, double a2)
{
  if (qword_D7E58 != -1) {
    swift_once();
  }
  if (qword_D7E48 != -1) {
    swift_once();
  }
  UIFontTextStyle v4 = textFontStyle;
  AXLTSettingsManager.contentCategory.getter();
  uint64_t v6 = v5;
  id v7 = sub_A2F50((uint64_t)v4, UIFontWeightBold);

  [v7 lineHeight];
  if (a1)
  {
    uint64_t result = sub_A5E80();
    if (a2 != 0.0) {
      return result;
    }
    return sub_A5DD0();
  }
  uint64_t result = sub_A5DC0();
  if (a2 == 0.0) {
    return sub_A5DD0();
  }
  return result;
}

double iconSize()()
{
  int IsPad = AXDeviceIsPad();
  double result = 54.0;
  if (IsPad) {
    return 68.0;
  }
  return result;
}

void bottomButtonsBarLeftRightInset()()
{
  if ((AXDeviceIsPad() & 1) == 0)
  {
    id v0 = [self mainScreen];
    [v0 bounds];
    CGFloat v2 = v1;
    CGFloat v4 = v3;
    CGFloat v6 = v5;
    CGFloat v8 = v7;

    v9.origin.CGFloat x = v2;
    v9.origin.CGFloat y = v4;
    v9.size.double width = v6;
    v9.size.CGFloat height = v8;
    CGRectGetWidth(v9);
  }
}

void *sub_99C98(void *a1, void *a2, int *a3)
{
  CGFloat v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v30 = *a2;
    *a1 = *a2;
    CGFloat v4 = (void *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_A5D50();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)v4 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *((unsigned char *)v4 + v8) = *((unsigned char *)a2 + v8);
    uint64_t v9 = a3[7];
    uint64_t v10 = a3[8];
    uint64_t v11 = (void *)((char *)v4 + v9);
    long long v12 = (void *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v13;
    _DWORD v11[2] = v12[2];
    uint64_t v14 = (void *)((char *)v4 + v10);
    long long v15 = (void *)((char *)a2 + v10);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    v14[2] = v15[2];
    uint64_t v17 = a3[9];
    uint64_t v18 = a3[10];
    long long v19 = (void *)((char *)v4 + v17);
    uint64_t v20 = (void *)((char *)a2 + v17);
    uint64_t v21 = v20[1];
    *long long v19 = *v20;
    v19[1] = v21;
    uint64_t v22 = v20[3];
    v19[2] = v20[2];
    v19[3] = v22;
    uint64_t v23 = (void *)((char *)v4 + v18);
    double v24 = (void *)((char *)a2 + v18);
    uint64_t v25 = v24[1];
    void *v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = a3[11];
    double v27 = (void *)((char *)v4 + v26);
    char v28 = (void *)((char *)a2 + v26);
    uint64_t v29 = v28[1];
    *double v27 = *v28;
    v27[1] = v29;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_99E54(uint64_t a1)
{
  uint64_t v2 = sub_A5D50();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_99F44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_A5D50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a3[8];
  uint64_t v10 = (void *)(a1 + v8);
  uint64_t v11 = (void *)(a2 + v8);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  uint64_t v10[2] = v11[2];
  uint64_t v13 = (void *)(a1 + v9);
  uint64_t v14 = (void *)(a2 + v9);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  void v13[2] = v14[2];
  uint64_t v16 = a3[9];
  uint64_t v17 = a3[10];
  uint64_t v18 = (void *)(a1 + v16);
  long long v19 = (void *)(a2 + v16);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = v19[3];
  void v18[2] = v19[2];
  v18[3] = v21;
  uint64_t v22 = (void *)(a1 + v17);
  uint64_t v23 = (void *)(a2 + v17);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = a3[11];
  uint64_t v26 = (void *)(a1 + v25);
  double v27 = (void *)(a2 + v25);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_9A0B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_A5D50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  uint64_t v7 = a3[7];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_retain();
  swift_release();
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  swift_retain();
  swift_release();
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  uint64_t v10 = a3[8];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  swift_retain();
  swift_release();
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  swift_retain();
  swift_release();
  *(void *)(v11 + 16) = *(void *)(v12 + 16);
  uint64_t v13 = a3[9];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  swift_retain();
  swift_release();
  v14[1] = v15[1];
  swift_retain();
  swift_release();
  v14[2] = v15[2];
  v14[3] = v15[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[10];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  swift_retain();
  swift_release();
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  swift_retain();
  swift_release();
  uint64_t v19 = a3[11];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  swift_retain();
  swift_release();
  *(void *)(v20 + 8) = *(void *)(v21 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_9A2A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_A5D50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(void *)(v10 + 16) = *(void *)(v11 + 16);
  uint64_t v12 = a1 + v9;
  uint64_t v13 = a2 + v9;
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(void *)(v12 + 16) = *(void *)(v13 + 16);
  uint64_t v14 = a3[9];
  uint64_t v15 = a3[10];
  long long v16 = *(_OWORD *)(a2 + v14);
  long long v17 = *(_OWORD *)(a2 + v14 + 16);
  uint64_t v18 = (_OWORD *)(a1 + v14);
  *uint64_t v18 = v16;
  v18[1] = v17;
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_9A380(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_A5D50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_release();
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  swift_release();
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  swift_release();
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  swift_release();
  *(void *)(v12 + 16) = *(void *)(v13 + 16);
  uint64_t v14 = a3[9];
  uint64_t v15 = (void *)(a1 + v14);
  long long v16 = (void *)(a2 + v14);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  swift_release();
  v15[1] = v16[1];
  swift_release();
  uint64_t v17 = v16[3];
  _OWORD v15[2] = v16[2];
  v15[3] = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[10];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(void *)(a1 + v18) = *(void *)(a2 + v18);
  swift_release();
  *(void *)(v19 + 8) = *(void *)(v20 + 8);
  swift_release();
  uint64_t v21 = a3[11];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = (void *)(a2 + v21);
  *(void *)(a1 + v21) = *v23;
  swift_release();
  *(void *)(v22 + 8) = v23[1];
  swift_release();
  return a1;
}

uint64_t sub_9A508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_9A51C);
}

uint64_t sub_9A51C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_A5D50();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_9A5E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_9A5F4);
}

uint64_t sub_9A5F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_A5D50();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for AXLTTextView(uint64_t a1)
{
  return sub_1182C(a1, qword_DB200);
}

uint64_t sub_9A6D4()
{
  uint64_t result = sub_A5D50();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_9A78C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_9A7A8()
{
  return sub_A7190() & 1;
}

uint64_t sub_9A804()
{
  return sub_A7170();
}

void sub_9A84C()
{
}

void sub_9A874()
{
}

uint64_t sub_9A890@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, long long a11, uint64_t a12, uint64_t a13)
{
  uint64_t v22 = sub_A5D50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32))(a9, a1, v22);
  uint64_t v23 = (int *)type metadata accessor for AXLTTextView(0);
  *(unsigned char *)(a9 + v23[5]) = a2;
  *(unsigned char *)(a9 + v23[6]) = a3;
  uint64_t v24 = a9 + v23[7];
  *(void *)uint64_t v24 = a4;
  *(void *)(v24 + 8) = a5;
  *(double *)(v24 + 16) = a10;
  uint64_t v25 = (void *)(a9 + v23[8]);
  void *v25 = a6;
  v25[1] = a7;
  void v25[2] = a8;
  uint64_t v26 = a9 + v23[9];
  *(_OWORD *)uint64_t v26 = a11;
  *(void *)(v26 + 16) = a12;
  *(void *)(v26 + 24) = a13;
  double v27 = (void *)(a9 + v23[10]);
  if (qword_D7E58 != -1) {
    swift_once();
  }
  swift_beginAccess();
  swift_retain();
  sub_A6E70();
  *double v27 = v35;
  v27[1] = v36;
  uint64_t v28 = v23[11];
  if (qword_D7E48 != -1) {
    swift_once();
  }
  uint64_t v29 = (void *)(a9 + v28);
  UIFontTextStyle v30 = textFontStyle;
  AXLTSettingsManager.contentCategory.getter();
  uint64_t v32 = v31;
  sub_A2F50((uint64_t)v30, UIFontWeightBold);

  sub_A6AC0();
  uint64_t result = sub_A6E70();
  *uint64_t v29 = v35;
  v29[1] = v36;
  return result;
}

uint64_t sub_9AAC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v133 = a2;
  uint64_t v3 = sub_A5D50();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AXLTTextScrollView(0);
  __chkstk_darwin(v7);
  uint64_t v116 = (int *)((char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v131 = sub_7AF4(&qword_DB250);
  __chkstk_darwin(v131);
  unint64_t v10 = (char *)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (int *)type metadata accessor for AXLTTextView(0);
  uint64_t v124 = *((void *)v11 - 1);
  __chkstk_darwin(v11);
  uint64_t v125 = v12;
  int v126 = (char *)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_A7520();
  uint64_t v128 = *(void **)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v127 = (char *)&v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v121 = (void *)sub_A6740();
  uint64_t v120 = *(v121 - 1);
  __chkstk_darwin(v121);
  uint64_t v119 = (char *)&v109 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_A5920();
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = sub_7AF4(&qword_D8FC0);
  __chkstk_darwin(v117);
  uint64_t v118 = (char *)&v109 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  Swift::Int v123 = (char *)&v109 - v21;
  uint64_t v122 = sub_7AF4(&qword_DB258);
  __chkstk_darwin(v122);
  uint64_t v130 = (uint64_t)&v109 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_7AF4(&qword_DB260);
  __chkstk_darwin(v23);
  __n128 v27 = __chkstk_darwin(v24);
  int v28 = *(unsigned __int8 *)(a1 + v11[5]);
  uint64_t v132 = v7;
  if (v28 != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16))(v6, a1, v3, v27);
    uint64_t v39 = (void *)(a1 + v11[7]);
    uint64_t v40 = v39[1];
    uint64_t v41 = v39[2];
    *(void *)&long long v141 = *v39;
    *((void *)&v141 + 1) = v40;
    uint64_t v142 = v41;
    sub_7AF4(&qword_D8378);
    sub_A6F20();
    uint64_t v42 = v134;
    uint64_t v43 = v135;
    double v44 = v136;
    uint64_t v45 = a1 + v11[8];
    long long v46 = *(_OWORD *)v45;
    uint64_t v47 = *(void *)(v45 + 16);
    long long v141 = v46;
    uint64_t v142 = v47;
    sub_7AF4(&qword_DB168);
    sub_A6F20();
    uint64_t v48 = a1;
    uint64_t v49 = v134;
    uint64_t v50 = v135;
    uint64_t v51 = *(void *)&v136;
    uint64_t v52 = v48 + v11[9];
    long long v53 = *(_OWORD *)v52;
    uint64_t v55 = *(void *)(v52 + 16);
    uint64_t v54 = *(void *)(v52 + 24);
    long long v141 = v53;
    uint64_t v142 = v55;
    uint64_t v143 = v54;
    sub_7AF4(&qword_DB170);
    sub_A6F20();
    uint64_t v56 = (uint64_t)v116;
    sub_9C26C((uint64_t)v6, v42, v43, v49, v50, v51, v134, v135, (uint64_t)v116, v44, *(uint64_t *)&v136, v137);
    sub_9F720(v56, (uint64_t)v10, type metadata accessor for AXLTTextScrollView);
    swift_storeEnumTagMultiPayload();
    sub_A45C(&qword_DB268, &qword_DB260);
    sub_9F6D8(&qword_DB270, (void (*)(uint64_t))type metadata accessor for AXLTTextScrollView);
    sub_A6860();
    return sub_9C50C(v56);
  }
  uint64_t v111 = v26;
  uint64_t v112 = (uint64_t)&v109 - v25;
  uint64_t v113 = v13;
  sub_9B9A4(a1, (uint64_t)v18);
  uint64_t v110 = sub_A6B50();
  uint64_t v109 = v29;
  char v31 = v30;
  uint64_t v116 = v11;
  uint64_t v32 = (uint64_t *)(a1 + v11[10]);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  uint64_t v134 = v34;
  uint64_t v135 = v33;
  sub_7AF4(&qword_D8FB0);
  sub_A6E80();
  uint64_t v129 = a1;
  uint64_t v35 = sub_A5D10();
  uint64_t v37 = v36;
  if (v35 == sub_A5D80() && v37 == v38)
  {
    swift_bridgeObjectRelease_n();
LABEL_7:
    uint64_t v134 = 0x3FF0000000000000;
    if (qword_D7DF0 != -1) {
      swift_once();
    }
    [(id)qword_DF660 getRed:0 green:0 blue:0 alpha:&v134];
    goto LABEL_10;
  }
  char v58 = sub_A7800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v58) {
    goto LABEL_7;
  }
LABEL_10:
  uint64_t v114 = v23;
  uint64_t v115 = v10;
  sub_A6DC0();
  swift_release();
  char v59 = v31 & 1;
  uint64_t v60 = v110;
  uint64_t v61 = v109;
  uint64_t v62 = sub_A6AE0();
  uint64_t v64 = v63;
  char v66 = v65;
  swift_release();
  sub_10024(v60, v61, v59);
  swift_bridgeObjectRelease();
  uint64_t v67 = v129;
  uint64_t v68 = (uint64_t *)(v129 + v116[11]);
  uint64_t v70 = *v68;
  uint64_t v69 = v68[1];
  uint64_t v134 = v70;
  uint64_t v135 = v69;
  sub_7AF4(&qword_D8FA8);
  sub_A6E80();
  uint64_t v71 = sub_A6B00();
  uint64_t v73 = v72;
  char v75 = v74;
  uint64_t v77 = v76;
  swift_release();
  v75 &= 1u;
  sub_10024(v62, v64, v66 & 1);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v134 = v71;
  uint64_t v135 = v73;
  LOBYTE(v136) = v75;
  uint64_t v137 = v77;
  uint64_t v138 = KeyPath;
  uint64_t v139 = 0;
  char v140 = 1;
  sub_7AF4(&qword_D8FF8);
  sub_A14E0((unint64_t *)&qword_D9000, &qword_D8FF8, &qword_D9008, &qword_D9010);
  uint64_t v79 = (uint64_t)v118;
  uint64_t v80 = v67;
  sub_A6BC0();
  sub_10024(v71, v73, v75);
  swift_release();
  swift_bridgeObjectRelease();
  LODWORD(v77) = *(unsigned __int8 *)(v67 + v116[6]);
  sub_7AF4(&qword_D9018);
  uint64_t v81 = v120;
  if (v77 == 1)
  {
    uint64_t v82 = swift_allocObject();
    *(_OWORD *)(v82 + 16) = xmmword_A9DC0;
    sub_A6710();
  }
  else
  {
    uint64_t v82 = swift_allocObject();
    *(_OWORD *)(v82 + 16) = xmmword_A9C60;
  }
  sub_A6700();
  uint64_t v134 = v82;
  sub_9F6D8(&qword_D9020, (void (*)(uint64_t))&type metadata accessor for AccessibilityTraits);
  sub_7AF4(&qword_D9028);
  sub_A45C(&qword_D9030, &qword_D9028);
  uint64_t v83 = v119;
  uint64_t v84 = v121;
  sub_A7640();
  uint64_t v85 = v128;
  uint64_t v86 = v130;
  uint64_t v87 = (uint64_t)v123;
  sub_A6400();
  (*(void (**)(char *, void *))(v81 + 8))(v83, v84);
  sub_A35C(v79, &qword_D8FC0);
  uint64_t v128 = self;
  id v88 = [v128 defaultCenter];
  uint64_t v89 = v127;
  uint64_t v90 = (uint64_t)v126;
  if (qword_D7E10 != -1) {
    swift_once();
  }
  sub_A7530();

  sub_9F720(v80, v90, type metadata accessor for AXLTTextView);
  uint64_t v91 = *(unsigned __int8 *)(v124 + 80);
  uint64_t v92 = (v91 + 16) & ~v91;
  v125 += v92;
  uint64_t v124 = v91 | 7;
  uint64_t v93 = swift_allocObject();
  sub_A0C14(v90, v93 + v92, type metadata accessor for AXLTTextView);
  sub_8860(v87, v86, &qword_D8FC0);
  uint64_t v94 = v122;
  uint64_t v95 = v86 + *(int *)(v122 + 52);
  uint64_t v96 = (void *)v85[2];
  uint64_t v97 = v85;
  uint64_t v98 = v113;
  long long v121 = v96;
  ((void (*)(uint64_t, char *, uint64_t))v96)(v95, v89, v113);
  uint64_t v99 = (uint64_t (**)(uint64_t))(v86 + *(int *)(v94 + 56));
  *uint64_t v99 = sub_9F78C;
  v99[1] = (uint64_t (*)(uint64_t))v93;
  uint64_t v100 = (void (*)(char *, uint64_t))v97[1];
  v100(v89, v98);
  sub_A35C(v87, &qword_D8FC0);
  id v101 = [v128 defaultCenter];
  if (qword_D7E20 != -1) {
    swift_once();
  }
  sub_A7530();

  sub_9F720(v129, v90, type metadata accessor for AXLTTextView);
  uint64_t v102 = swift_allocObject();
  sub_A0C14(v90, v102 + v92, type metadata accessor for AXLTTextView);
  uint64_t v103 = v130;
  uint64_t v104 = v111;
  sub_8860(v130, v111, &qword_DB258);
  uint64_t v105 = v114;
  ((void (*)(uint64_t, char *, uint64_t))v121)(v104 + *(int *)(v114 + 52), v89, v98);
  uint64_t v106 = (uint64_t (**)(uint64_t))(v104 + *(int *)(v105 + 56));
  char *v106 = sub_9F920;
  v106[1] = (uint64_t (*)(uint64_t))v102;
  v100(v89, v98);
  sub_A35C(v103, &qword_DB258);
  uint64_t v107 = v104;
  uint64_t v108 = v112;
  sub_29C10(v107, v112, &qword_DB260);
  sub_8860(v108, (uint64_t)v115, &qword_DB260);
  swift_storeEnumTagMultiPayload();
  sub_A45C(&qword_DB268, &qword_DB260);
  sub_9F6D8(&qword_DB270, (void (*)(uint64_t))type metadata accessor for AXLTTextScrollView);
  sub_A6860();
  return sub_A35C(v108, &qword_DB260);
}

unint64_t sub_9B9A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_A6B20();
  __chkstk_darwin(v4 - 8);
  uint64_t v49 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_7AF4(&qword_D9038);
  __chkstk_darwin(v6 - 8);
  uint64_t v48 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_A5920();
  uint64_t v47 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v50 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v46 - v11;
  __chkstk_darwin(v13);
  uint64_t v54 = (char *)&v46 - v14;
  uint64_t v15 = sub_A5950();
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = a1;
  unint64_t v18 = sub_A5D30();
  if (v18 >> 62) {
    goto LABEL_41;
  }
  uint64_t v19 = *(void *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFFF8));
LABEL_3:
  swift_bridgeObjectRelease();
  if (!v19)
  {
    sub_A5CE0();
    sub_A5940();
    return sub_A5930();
  }
  sub_A5900();
  unint64_t result = sub_A5D30();
  unint64_t v21 = result;
  uint64_t v46 = a2;
  if (result >> 62)
  {
    unint64_t result = sub_A7740();
    a2 = result;
    if (result) {
      goto LABEL_6;
    }
LABEL_43:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v47 + 32))(v46, v54, v8);
  }
  a2 = *(void *)((char *)&dword_10 + (result & 0xFFFFFFFFFFFFFF8));
  if (!a2) {
    goto LABEL_43;
  }
LABEL_6:
  if (a2 >= 1)
  {
    uint64_t v22 = 0;
    uint64_t v52 = (void (**)(char *, uint64_t))(v47 + 8);
    unint64_t v53 = v21 & 0xC000000000000001;
    uint64_t v51 = a2;
    while (1)
    {
      if (v53) {
        id v23 = (id)sub_A76A0();
      }
      else {
        id v23 = *(id *)(v21 + 8 * v22 + 32);
      }
      uint64_t v24 = v23;
      id v25 = objc_msgSend(v23, "substring", v46);
      sub_A71D0();

      sub_A5940();
      sub_A5930();
      [v24 confidence];
      if (v26 != 0.0)
      {
        [v24 confidence];
        if (v27 < 0.5)
        {
          uint64_t KeyPath = swift_getKeyPath();
          __chkstk_darwin(KeyPath);
          *(&v46 - 2) = v29;
          swift_getKeyPath();
          sub_A6B10();
          sub_A6D60();
          char v30 = v48;
          sub_A6B30();
          uint64_t v31 = sub_A6B40();
          (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 0, 1, v31);
          sub_38450();
          sub_A58F0();
        }
      }
      sub_9F6D8(&qword_D9040, (void (*)(uint64_t))&type metadata accessor for AttributedString);
      sub_A5910();
      unint64_t v32 = sub_A5D30();
      if (v32 >> 62) {
        uint64_t v33 = sub_A7740();
      }
      else {
        uint64_t v33 = *(void *)((char *)&dword_10 + (v32 & 0xFFFFFFFFFFFFFF8));
      }
      swift_bridgeObjectRelease();
      uint64_t v34 = v33 - 1;
      if (__OFSUB__(v33, 1))
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        uint64_t v19 = sub_A7740();
        goto LABEL_3;
      }
      unint64_t v35 = v22 + 1;
      if (v22 < v34) {
        break;
      }
      (*v52)(v12, v8);

LABEL_9:
      uint64_t v22 = v35;
      if (a2 == v35) {
        goto LABEL_43;
      }
    }
    uint64_t v36 = (char *)[v24 substringRange];
    [v24 substringRange];
    uint64_t v38 = &v36[v37];
    if (__OFADD__(v36, v37)) {
      goto LABEL_37;
    }
    a2 = (uint64_t)v17;
    uint64_t v17 = (char *)v21;
    uint64_t v39 = (uint64_t)(v38 - 1);
    if (__OFSUB__(v38, 1)) {
      goto LABEL_38;
    }
    uint64_t v40 = sub_A5D30();
    if ((v40 & 0xC000000000000001) != 0)
    {
      id v41 = (id)sub_A76A0();
    }
    else
    {
      if (v35 >= *(void *)((char *)&dword_10 + (v40 & 0xFFFFFFFFFFFFFF8))) {
        goto LABEL_39;
      }
      id v41 = *(id *)(v40 + 8 * v22 + 40);
    }
    uint64_t v42 = v41;
    swift_bridgeObjectRelease();
    if ((uint64_t)[v42 substringRange] >= v39)
    {
      id v44 = [v42 substringRange];
      if (__OFSUB__(v44, v39)) {
        goto LABEL_40;
      }
      if ((uint64_t)v44 - v39 < 2)
      {
        (*v52)(v12, v8);

        goto LABEL_32;
      }
      uint64_t v43 = v50;
    }
    else
    {
      uint64_t v43 = v50;
    }
    sub_A5900();
    sub_A5910();

    uint64_t v45 = *v52;
    (*v52)(v43, v8);
    v45(v12, v8);
LABEL_32:
    unint64_t v21 = (unint64_t)v17;
    uint64_t v17 = (char *)a2;
    a2 = v51;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_9C03C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_A58C0();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v10 = sub_A5DF0();
    sub_A7670();
    if (*(void *)(v4 + 16) && (unint64_t v5 = sub_85F3C((uint64_t)v11), (v6 & 1) != 0))
    {
      sub_10330(*(void *)(v4 + 56) + 32 * v5, (uint64_t)&v12);
    }
    else
    {
      long long v12 = 0u;
      long long v13 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_102DC((uint64_t)v11);
    if (*((void *)&v13 + 1))
    {
      uint64_t result = swift_dynamicCast();
      if (result)
      {
        uint64_t v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for AXLTTextView(0) + 40));
        uint64_t v9 = *v7;
        uint64_t v8 = v7[1];
        v11[0] = v9;
        v11[1] = v8;
        *(void *)&long long v12 = v10;
        sub_7AF4(&qword_D8FB0);
        return sub_A6E90();
      }
    }
    else
    {
      return sub_A35C((uint64_t)&v12, &qword_D92A0);
    }
  }
  return result;
}

uint64_t sub_9C158()
{
  if (qword_D7E58 != -1) {
    swift_once();
  }
  if (qword_D7E48 != -1) {
    swift_once();
  }
  UIFontTextStyle v0 = textFontStyle;
  AXLTSettingsManager.contentCategory.getter();
  uint64_t v2 = v1;
  sub_A2F50((uint64_t)v0, UIFontWeightBold);

  sub_A6AC0();
  type metadata accessor for AXLTTextView(0);
  sub_7AF4(&qword_D8FA8);
  return sub_A6E90();
}

double sub_9C26C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11, uint64_t a12)
{
  uint64_t v21 = sub_A5D50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(a9, a1, v21);
  uint64_t v22 = (int *)type metadata accessor for AXLTTextScrollView(0);
  uint64_t v23 = a9 + v22[5];
  *(void *)uint64_t v23 = a2;
  *(void *)(v23 + 8) = a3;
  *(double *)(v23 + 16) = a10;
  uint64_t v24 = (void *)(a9 + v22[6]);
  *uint64_t v24 = a4;
  v24[1] = a5;
  void v24[2] = a6;
  id v25 = (void *)(a9 + v22[7]);
  void *v25 = a7;
  v25[1] = a8;
  void v25[2] = a11;
  v25[3] = a12;
  float v26 = (_OWORD *)(a9 + v22[8]);
  if (qword_D7E58 != -1) {
    swift_once();
  }
  swift_beginAccess();
  swift_retain();
  sub_A6E70();
  *float v26 = v36;
  uint64_t v27 = v22[9];
  if (qword_D7E48 != -1) {
    swift_once();
  }
  int v28 = (_OWORD *)(a9 + v27);
  UIFontTextStyle v29 = textFontStyle;
  AXLTSettingsManager.contentCategory.getter();
  uint64_t v31 = v30;
  sub_A2F50((uint64_t)v29, UIFontWeightBold);

  sub_A6AC0();
  sub_A6E70();
  *int v28 = v36;
  unint64_t v32 = (uint64_t *)(a9 + v22[10]);
  uint64_t *v32 = swift_getKeyPath();
  sub_7AF4(&qword_D7E68);
  swift_storeEnumTagMultiPayload();
  uint64_t v33 = v22[11];
  sub_7AF4(&qword_D82A8);
  sub_A6E70();
  double result = *(double *)&v36;
  *(_OWORD *)(a9 + v33) = v36;
  return result;
}

uint64_t sub_9C4E4@<X0>(uint64_t a1@<X8>)
{
  return sub_9AAC4(v1, a1);
}

uint64_t type metadata accessor for AXLTTextScrollView(uint64_t a1)
{
  return sub_1182C(a1, qword_DB2D8);
}

uint64_t sub_9C50C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AXLTTextScrollView(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_9C568@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v77 = a2;
  uint64_t v3 = type metadata accessor for AXLTTextScrollView(0);
  char v74 = *(char **)(v3 - 8);
  __chkstk_darwin(v3 - 8);
  char v75 = v4;
  uint64_t v79 = (uint64_t)&v63 - ((unint64_t)(v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_A7520();
  uint64_t v76 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v81 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = (void *)sub_A6740();
  uint64_t v68 = *(v73 - 1);
  uint64_t v69 = (char *)(v73 - 1);
  uint64_t v70 = v68;
  __chkstk_darwin(v73 - 1);
  uint64_t v71 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_7AF4(&qword_DB348);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_7AF4(&qword_DB350);
  uint64_t v11 = v10 - 8;
  __chkstk_darwin(v10);
  long long v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_7AF4(&qword_DB358);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_7AF4(&qword_DB360);
  uint64_t v18 = v17 - 8;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_7AF4(&qword_DB368);
  __chkstk_darwin(v66);
  uint64_t v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_7AF4(&qword_DB370);
  __chkstk_darwin(v67);
  uint64_t v64 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  char v65 = (char *)&v63 - v25;
  uint64_t v72 = sub_7AF4(&qword_DB378);
  __chkstk_darwin(v72);
  uint64_t v78 = (uint64_t)&v63 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v16 = sub_A6680();
  *((void *)v16 + 1) = 0;
  v16[16] = 1;
  uint64_t v63 = &v16[*(int *)(sub_7AF4(&qword_DB380) + 44)];
  *(void *)uint64_t v9 = sub_A6690();
  *((void *)v9 + 1) = 0;
  unsigned char v9[16] = 1;
  uint64_t v27 = (uint64_t)&v9[*(int *)(sub_7AF4(&qword_DB388) + 44)];
  uint64_t v80 = a1;
  sub_9CFCC(a1, v27);
  sub_A62A0();
  sub_A62A0();
  sub_A7000();
  sub_A6270();
  sub_8860((uint64_t)v9, (uint64_t)v13, &qword_DB348);
  int v28 = &v13[*(int *)(v11 + 44)];
  long long v29 = v85;
  *(_OWORD *)int v28 = v84;
  *((_OWORD *)v28 + 1) = v29;
  *((_OWORD *)v28 + 2) = v86;
  sub_A35C((uint64_t)v9, &qword_DB348);
  sub_29C10((uint64_t)v13, (uint64_t)v63, &qword_DB350);
  sub_A62A0();
  sub_A62A0();
  sub_A7030();
  sub_A6270();
  sub_8860((uint64_t)v16, (uint64_t)v20, &qword_DB358);
  char v30 = &v20[*(int *)(v18 + 44)];
  long long v31 = v88;
  *(_OWORD *)char v30 = v87;
  *((_OWORD *)v30 + 1) = v31;
  *((_OWORD *)v30 + 2) = v89;
  sub_A35C((uint64_t)v16, &qword_DB358);
  sub_8860((uint64_t)v20, (uint64_t)v22, &qword_DB360);
  *(_WORD *)&v22[*(int *)(v66 + 36)] = 0;
  sub_A35C((uint64_t)v20, &qword_DB360);
  sub_A0CFC();
  uint64_t v32 = (uint64_t)v64;
  sub_A6BC0();
  uint64_t v33 = (uint64_t)v22;
  uint64_t v34 = (uint64_t)v65;
  sub_A35C(v33, &qword_DB368);
  sub_7AF4(&qword_D9018);
  uint64_t v35 = v70;
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_A9DC0;
  sub_A6710();
  sub_A6700();
  uint64_t v83 = v36;
  sub_9F6D8(&qword_D9020, (void (*)(uint64_t))&type metadata accessor for AccessibilityTraits);
  sub_7AF4(&qword_D9028);
  sub_A45C(&qword_D9030, &qword_D9028);
  uint64_t v37 = v71;
  uint64_t v38 = v73;
  sub_A7640();
  sub_A6400();
  (*(void (**)(char *, void *))(v35 + 8))(v37, v38);
  sub_A35C(v32, &qword_DB370);
  uint64_t v73 = self;
  id v39 = [v73 defaultCenter];
  if (qword_D7E10 != -1) {
    swift_once();
  }
  uint64_t v40 = v81;
  sub_A7530();

  uint64_t v41 = v79;
  sub_9F720(v80, v79, type metadata accessor for AXLTTextScrollView);
  uint64_t v42 = v74[80];
  uint64_t v43 = (v42 + 16) & ~v42;
  char v74 = &v75[v43];
  uint64_t v71 = (char *)(v42 | 7);
  uint64_t v44 = swift_allocObject();
  sub_A0C14(v41, v44 + v43, type metadata accessor for AXLTTextScrollView);
  uint64_t v45 = v78;
  sub_8860(v34, v78, &qword_DB370);
  uint64_t v46 = v72;
  uint64_t v47 = v45 + *(int *)(v72 + 52);
  uint64_t v48 = v34;
  uint64_t v49 = v76;
  uint64_t v50 = v82;
  char v75 = *(char **)(v76 + 16);
  ((void (*)(uint64_t, char *, uint64_t))v75)(v47, v40, v82);
  uint64_t v51 = (uint64_t (**)(uint64_t))(v45 + *(int *)(v46 + 56));
  *uint64_t v51 = sub_A1034;
  v51[1] = (uint64_t (*)(uint64_t))v44;
  uint64_t v52 = *(void (**)(char *, uint64_t))(v49 + 8);
  v52(v40, v50);
  sub_A35C(v48, &qword_DB370);
  id v53 = [v73 defaultCenter];
  if (qword_D7E20 != -1) {
    swift_once();
  }
  uint64_t v54 = v81;
  sub_A7530();

  uint64_t v55 = v79;
  sub_9F720(v80, v79, type metadata accessor for AXLTTextScrollView);
  uint64_t v56 = swift_allocObject();
  sub_A0C14(v55, v56 + v43, type metadata accessor for AXLTTextScrollView);
  uint64_t v57 = v77;
  uint64_t v58 = v78;
  sub_8860(v78, v77, &qword_DB378);
  uint64_t v59 = sub_7AF4(&qword_DB3A8);
  uint64_t v60 = v82;
  ((void (*)(uint64_t, char *, uint64_t))v75)(v57 + *(int *)(v59 + 52), v54, v82);
  uint64_t v61 = (uint64_t (**)(uint64_t))(v57 + *(int *)(v59 + 56));
  *uint64_t v61 = sub_A1064;
  v61[1] = (uint64_t (*)(uint64_t))v56;
  v52(v54, v60);
  return sub_A35C(v58, &qword_DB378);
}

uint64_t sub_9CFCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v60 = a2;
  uint64_t v61 = sub_A5D50();
  uint64_t v59 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v58 = &v28[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = type metadata accessor for AXLTTextScrollView(0);
  uint64_t v5 = v4 - 8;
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v52 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_9D6CC(v86);
  uint64_t v55 = v86[1];
  uint64_t v56 = v86[0];
  char v8 = v86[2];
  uint64_t v57 = v86[3];
  uint64_t v9 = (uint64_t *)(a1 + *(int *)(v5 + 44));
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  v63[0] = v11;
  v63[1] = v10;
  sub_7AF4(&qword_D8FA8);
  sub_A6E80();
  uint64_t v54 = v87;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v51 = swift_getKeyPath();
  sub_A62A0();
  sub_A6FF0();
  uint64_t v62 = a1;
  sub_A64A0();
  uint64_t v38 = v87;
  uint64_t v41 = v89;
  uint64_t v44 = v91;
  uint64_t v45 = v93;
  uint64_t v47 = v95;
  uint64_t v48 = v97;
  uint64_t v49 = v100;
  uint64_t v50 = v99;
  char v71 = v8;
  char v70 = 1;
  char v69 = v88;
  unsigned __int8 v68 = v90;
  unsigned __int8 v67 = v92;
  unsigned __int8 v66 = v94;
  unsigned __int8 v65 = v96;
  unsigned __int8 v64 = v98;
  sub_A62A0();
  sub_A6FF0();
  sub_A6270();
  char v12 = v102;
  uint64_t v36 = v101;
  uint64_t v37 = v103;
  LOBYTE(v5) = v104;
  uint64_t v39 = v106;
  uint64_t v40 = v105;
  char v13 = v71;
  char v14 = v70;
  char v15 = v69;
  int v29 = v68;
  int v30 = v67;
  int v31 = v66;
  int v34 = v65;
  int v35 = v64;
  char v73 = v102;
  char v72 = v104;
  uint64_t v46 = type metadata accessor for AXLTTextScrollView;
  sub_9F720(a1, (uint64_t)v7, type metadata accessor for AXLTTextScrollView);
  uint64_t v16 = *(unsigned __int8 *)(v52 + 80);
  uint64_t v17 = (v16 + 16) & ~v16;
  uint64_t v52 = v17 + v6;
  uint64_t v43 = v16 | 7;
  uint64_t v18 = swift_allocObject();
  uint64_t v42 = type metadata accessor for AXLTTextScrollView;
  sub_A0C14((uint64_t)v7, v18 + v17, type metadata accessor for AXLTTextScrollView);
  uint64_t v19 = sub_A7030();
  uint64_t v32 = v20;
  uint64_t v33 = v19;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_A109C;
  *(void *)(v21 + 24) = v18;
  v63[0] = v56;
  v63[1] = v55;
  LOBYTE(v63[2]) = v13;
  *(_DWORD *)((char *)&v63[2] + 1) = *(_DWORD *)v85;
  HIDWORD(v63[2]) = *(_DWORD *)&v85[3];
  v63[3] = v57;
  v63[4] = KeyPath;
  v63[5] = v54;
  v63[6] = v51;
  v63[7] = 0;
  LOBYTE(v63[8]) = v14;
  *(_DWORD *)((char *)&v63[8] + 1) = *(_DWORD *)v84;
  HIDWORD(v63[8]) = *(_DWORD *)&v84[3];
  v63[9] = v38;
  LOBYTE(v63[10]) = v15;
  *(_DWORD *)((char *)&v63[10] + 1) = *(_DWORD *)v83;
  HIDWORD(v63[10]) = *(_DWORD *)&v83[3];
  v63[11] = v41;
  LOBYTE(v63[12]) = v29;
  *(_DWORD *)((char *)&v63[12] + 1) = *(_DWORD *)v82;
  HIDWORD(v63[12]) = *(_DWORD *)&v82[3];
  v63[13] = v44;
  LOBYTE(v63[14]) = v30;
  *(_DWORD *)((char *)&v63[14] + 1) = *(_DWORD *)v81;
  HIDWORD(v63[14]) = *(_DWORD *)&v81[3];
  v63[15] = v45;
  LOBYTE(v63[16]) = v31;
  HIDWORD(v63[16]) = *(_DWORD *)&v80[3];
  *(_DWORD *)((char *)&v63[16] + 1) = *(_DWORD *)v80;
  v63[17] = v47;
  LOBYTE(v63[18]) = v34;
  HIDWORD(v63[18]) = *(_DWORD *)&v79[3];
  *(_DWORD *)((char *)&v63[18] + 1) = *(_DWORD *)v79;
  v63[19] = v48;
  LOBYTE(v63[20]) = v35;
  HIDWORD(v63[20]) = *(_DWORD *)&v78[3];
  *(_DWORD *)((char *)&v63[20] + 1) = *(_DWORD *)v78;
  v63[21] = v50;
  v63[22] = v49;
  v63[23] = v36;
  LOBYTE(v63[24]) = v12;
  HIDWORD(v63[24]) = *(_DWORD *)&v77[3];
  *(_DWORD *)((char *)&v63[24] + 1) = *(_DWORD *)v77;
  v63[25] = v37;
  LOBYTE(v63[26]) = v5;
  *(_DWORD *)((char *)&v63[26] + 1) = *(_DWORD *)v76;
  HIDWORD(v63[26]) = *(_DWORD *)&v76[3];
  v63[27] = v40;
  v63[28] = v39;
  LOWORD(v63[29]) = 256;
  *(_DWORD *)((char *)&v63[29] + 2) = v74;
  HIWORD(v63[29]) = v75;
  v63[30] = sub_53608;
  v63[31] = 0;
  v63[32] = v33;
  v63[33] = v32;
  v63[34] = sub_A114C;
  v63[35] = v21;
  uint64_t v23 = v58;
  uint64_t v22 = v59;
  uint64_t v25 = v61;
  uint64_t v24 = v62;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v59 + 16))(v58, v62, v61);
  sub_9F720(v24, (uint64_t)v7, v46);
  uint64_t v26 = swift_allocObject();
  sub_A0C14((uint64_t)v7, v26 + v17, v42);
  sub_7AF4(&qword_DB3B0);
  sub_A11D8();
  sub_9F6D8(&qword_D9280, (void (*)(uint64_t))&type metadata accessor for AXLTCaption);
  sub_A6CE0();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v22 + 8))(v23, v25);
  memcpy(v86, v63, sizeof(v86));
  return sub_A157C((uint64_t)v86);
}

uint64_t sub_9D6CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v55 = a1;
  uint64_t v2 = sub_A5920();
  __chkstk_darwin(v2 - 8);
  sub_9B9A4(v1, (uint64_t)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = sub_A6B50();
  uint64_t v6 = v5;
  char v8 = v7;
  uint64_t v9 = (uint64_t *)(v1 + *(int *)(type metadata accessor for AXLTTextScrollView(0) + 32));
  uint64_t v11 = *v9;
  unint64_t v10 = v9[1];
  uint64_t v52 = v11;
  uint64_t v56 = v11;
  unint64_t v57 = v10;
  uint64_t v54 = v10;
  uint64_t v53 = sub_7AF4(&qword_D8FB0);
  sub_A6E80();
  uint64_t v12 = sub_A5D10();
  uint64_t v14 = v13;
  if (v12 == sub_A5D80() && v14 == v15)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v16 = sub_A7800();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0) {
      goto LABEL_8;
    }
  }
  uint64_t v56 = 0x3FF0000000000000;
  if (qword_D7DF0 != -1) {
    swift_once();
  }
  [(id)qword_DF660 getRed:0 green:0 blue:0 alpha:&v56];
LABEL_8:
  sub_A6DC0();
  swift_release();
  char v17 = v8 & 1;
  uint64_t v18 = sub_A6AE0();
  uint64_t v20 = v19;
  int v22 = v21;
  uint64_t v24 = v23;
  swift_release();
  sub_10024(v4, v6, v17);
  swift_bridgeObjectRelease();
  sub_A5CA0();
  uint64_t v25 = sub_A7220();
  uint64_t result = swift_bridgeObjectRelease();
  if (v25 < 1)
  {
    char v46 = v22 & 1;
  }
  else
  {
    int v49 = v22;
    uint64_t v50 = v20;
    uint64_t v51 = v24;
    v58._uint64_t countAndFlagsBits = sub_A5CA0();
    uint64_t v56 = 10;
    unint64_t v57 = 0xE100000000000000;
    sub_A7240(v58);
    swift_bridgeObjectRelease();
    sub_FF30();
    uint64_t v27 = sub_A6B60();
    uint64_t v29 = v28;
    char v31 = v30;
    uint64_t v56 = v52;
    unint64_t v57 = v54;
    sub_A6E80();
    uint64_t v56 = 0x3FF0000000000000;
    if (qword_D7DF0 != -1) {
      swift_once();
    }
    [(id)qword_DF660 getRed:0 green:0 blue:0 alpha:&v56];
    sub_A6DC0();
    swift_release();
    char v32 = v31 & 1;
    uint64_t v33 = sub_A6AE0();
    uint64_t v35 = v34;
    char v37 = v36;
    swift_release();
    char v38 = v37 & 1;
    sub_10024(v27, v29, v32);
    swift_bridgeObjectRelease();
    char v39 = v49 & 1;
    uint64_t v40 = v50;
    uint64_t v41 = sub_A6AF0();
    uint64_t v53 = v42;
    uint64_t v54 = v41;
    uint64_t v44 = v43;
    char v46 = v45 & 1;
    sub_10024(v18, v40, v39);
    swift_bridgeObjectRelease();
    sub_10024(v33, v35, v38);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v20 = v53;
    uint64_t v18 = v54;
    uint64_t v24 = v44;
  }
  uint64_t v47 = v55;
  *uint64_t v55 = v18;
  v47[1] = v20;
  *((unsigned char *)v47 + 16) = v46;
  double v47[3] = v24;
  return result;
}

void sub_9DB0C(double a1, double a2)
{
  os_log_type_t v3 = sub_A7420();
  uint64_t v4 = (id)AXLogLiveTranscription();
  if (v4)
  {
    uint64_t v5 = v4;
    if (os_log_type_enabled(v4, v3))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 134217984;
      sub_A7600();
      _os_log_impl(&def_5ED54, v5, v3, "readSize captionHeight: %f", v6, 0xCu);
      swift_slowDealloc();
    }

    sub_9DC00(a2);
  }
  else
  {
    __break(1u);
  }
}

void sub_9DC00(double a1)
{
  uint64_t v3 = type metadata accessor for AXLTTextScrollView(0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  char v8 = (char *)&v68 - v7;
  uint64_t v9 = sub_A6380();
  unint64_t v10 = *(uint8_t **)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = ((char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = sub_7AF4(&qword_D85E8);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (uint64_t)&v68 - v17;
  if (qword_D7E58 != -1) {
    swift_once();
  }
  char v69 = v8;
  char v70 = v10;
  uint64_t v71 = v1;
  if (qword_D7E48 != -1) {
    swift_once();
  }
  UIFontTextStyle v19 = textFontStyle;
  AXLTSettingsManager.contentCategory.getter();
  int v21 = v20;
  id v22 = sub_A2F50((uint64_t)v19, UIFontWeightBold);

  [v22 lineHeight];
  double v24 = v23;

  uint64_t v25 = sub_A5D10();
  uint64_t v27 = v26;
  if (v25 == sub_A5D80() && v27 == v28)
  {
    swift_bridgeObjectRelease_n();
LABEL_9:
    uint64_t v29 = v71;
    char v30 = (void *)(v71 + *(int *)(v3 + 20));
    uint64_t v31 = v30[1];
    uint64_t v32 = v30[2];
    *(void *)&long long v72 = *v30;
    *((void *)&v72 + 1) = v31;
    uint64_t v73 = v32;
    double v74 = v24;
    sub_7AF4(&qword_D8378);
    goto LABEL_33;
  }
  uint64_t v29 = sub_A7800();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v29) {
    goto LABEL_9;
  }
  double v33 = a1 / v24;
  if ((~*(void *)&v33 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v33 <= -9.22337204e18)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (v33 >= 9.22337204e18)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  os_log_type_t v34 = sub_A7420();
  uint64_t v35 = (id)AXLogLiveTranscription();
  if (!v35) {
    goto LABEL_44;
  }
  char v36 = v35;
  os_log_type_t v37 = v34;
  BOOL v38 = os_log_type_enabled(v35, v34);
  uint64_t v68 = (uint64_t)v33;
  if (v38)
  {
    char v39 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)char v39 = 134217984;
    *(void *)&long long v72 = (uint64_t)v33;
    sub_A7600();
    _os_log_impl(&def_5ED54, v36, v37, "linesCount: %ld", v39, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v29 = v71;
  sub_53C54(v18);
  uint64_t v25 = (uint64_t)v70;
  (*((void (**)(uint64_t, void, uint64_t, uint64_t))v70 + 7))(v18, 0, 1, v9);
  sub_8860(v18, (uint64_t)v15, &qword_D85E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v15, 1, v9) != 1)
  {
    (*(void (**)(NSObject *, char *, uint64_t))(v25 + 32))(v12, v15, v9);
    if (qword_D7D60 != -1) {
      goto LABEL_42;
    }
    goto LABEL_19;
  }
  sub_A35C((uint64_t)v15, &qword_D85E8);
  sub_A35C(v18, &qword_D85E8);
  uint64_t v40 = v68;
LABEL_20:
  for (uint64_t i = sub_A5DC0(); ; uint64_t i = sub_A5E80())
  {
    uint64_t v43 = i;
    uint64_t v44 = (uint64_t *)(v29 + *(int *)(v3 + 24));
    uint64_t v29 = *v44;
    uint64_t v25 = v44[1];
    uint64_t v18 = v44[2];
    *(void *)&long long v72 = *v44;
    *((void *)&v72 + 1) = v25;
    uint64_t v73 = v18;
    uint64_t v9 = sub_7AF4(&qword_DB168);
    sub_A6F00();
    double v45 = v74;
    if (*(uint64_t *)&v74 >= v40) {
      double v45 = *(double *)&v40;
    }
    *(void *)&long long v72 = v29;
    *((void *)&v72 + 1) = v25;
    uint64_t v73 = v18;
    double v74 = v45;
    sub_A6F10();
    BOOL v46 = __OFSUB__(v40, v43);
    uint64_t v12 = (v40 - v43);
    if (v46)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    *(void *)&long long v72 = v29;
    *((void *)&v72 + 1) = v25;
    uint64_t v73 = v18;
    sub_A6F00();
    double v47 = v74;
    if (*(uint64_t *)&v74 <= (uint64_t)v12) {
      double v47 = *(double *)&v12;
    }
    *(void *)&long long v72 = v29;
    *((void *)&v72 + 1) = v25;
    uint64_t v73 = v18;
    double v74 = v47;
    sub_A6F10();
    os_log_type_t v48 = sub_A7420();
    int v49 = (id)AXLogLiveTranscription();
    if (!v49) {
      goto LABEL_45;
    }
    uint64_t v12 = v49;
    uint64_t v29 = v71;
    uint64_t v25 = (uint64_t)v69;
    sub_9F720(v71, (uint64_t)v69, type metadata accessor for AXLTTextScrollView);
    uint64_t v18 = v48;
    if (os_log_type_enabled(v12, v48))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = v25;
      *(_DWORD *)uint64_t v50 = 134217984;
      uint64_t v25 = (uint64_t)(v50 + 12);
      char v70 = v50 + 4;
      uint64_t v52 = v51 + *(int *)(v3 + 24);
      long long v53 = *(_OWORD *)v52;
      uint64_t v54 = *(void *)(v52 + 16);
      long long v72 = v53;
      uint64_t v73 = v54;
      sub_A6F00();
      double v55 = v74;
      uint64_t v56 = v51;
      uint64_t v40 = v68;
      sub_9C50C(v56);
      *(double *)&long long v72 = v55;
      sub_A7600();
      _os_log_impl(&def_5ED54, v12, (os_log_type_t)v18, "lineNumberDisplay: %ld", v50, 0xCu);
      uint64_t v29 = v71;
      swift_slowDealloc();
    }
    else
    {
      sub_9C50C(v25);
    }

    uint64_t v57 = v44[2];
    long long v72 = *(_OWORD *)v44;
    uint64_t v73 = v57;
    sub_A6F00();
    if (!__OFSUB__(v40, *(void *)&v74)) {
      break;
    }
LABEL_41:
    __break(1u);
LABEL_42:
    swift_once();
LABEL_19:
    sub_7B38(v9, (uint64_t)accessibilityLayoutTextSize);
    sub_9F6D8((unint64_t *)&qword_D85F0, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
    char v41 = sub_A7180();
    (*(void (**)(NSObject *, uint64_t))(v25 + 8))(v12, v9);
    sub_A35C(v18, &qword_D85E8);
    uint64_t v40 = v68;
    if (v41) {
      goto LABEL_20;
    }
  }
  Swift::String v58 = (void *)(v29 + *(int *)(v3 + 20));
  uint64_t v59 = v58[1];
  uint64_t v60 = v58[2];
  *(void *)&long long v72 = *v58;
  *((void *)&v72 + 1) = v59;
  uint64_t v73 = v60;
  double v74 = v24 * (double)(v40 - *(void *)&v74);
  sub_7AF4(&qword_D8378);
LABEL_33:
  sub_A6F10();
  os_log_type_t v61 = sub_A7420();
  uint64_t v62 = (id)AXLogLiveTranscription();
  if (v62)
  {
    uint64_t v63 = v62;
    sub_9F720(v29, (uint64_t)v5, type metadata accessor for AXLTTextScrollView);
    if (os_log_type_enabled(v63, v61))
    {
      unsigned __int8 v64 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unsigned __int8 v64 = 134217984;
      unsigned __int8 v65 = &v5[*(int *)(v3 + 20)];
      uint64_t v66 = *((void *)v65 + 1);
      uint64_t v67 = *((void *)v65 + 2);
      *(void *)&long long v72 = *(void *)v65;
      *((void *)&v72 + 1) = v66;
      uint64_t v73 = v67;
      sub_7AF4(&qword_D8378);
      sub_A6F00();
      sub_A7600();
      sub_9C50C((uint64_t)v5);
      _os_log_impl(&def_5ED54, v63, v61, "textHeight: %f", v64, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      sub_9C50C((uint64_t)v5);
    }
    return;
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

NSObject *sub_9E4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_A5D50();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for AXLTTextScrollView(0);
  __chkstk_darwin(v54);
  uint64_t v53 = (uint64_t)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v51 - v11;
  os_log_type_t v13 = sub_A7420();
  uint64_t result = (id)AXLogLiveTranscription();
  if (result)
  {
    uint64_t v15 = result;
    sub_9F720(a3, (uint64_t)v12, type metadata accessor for AXLTTextScrollView);
    if (os_log_type_enabled(v15, v13))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v55 = a3;
      uint64_t v17 = (uint8_t *)v16;
      *(void *)&long long v57 = swift_slowAlloc();
      uint64_t v52 = a2;
      *(_DWORD *)uint64_t v17 = 136315138;
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v12, v5);
      uint64_t v18 = sub_A71F0();
      uint64_t v60 = sub_15F94(v18, v19, (uint64_t *)&v57);
      sub_A7600();
      swift_bridgeObjectRelease();
      sub_9C50C((uint64_t)v12);
      _os_log_impl(&def_5ED54, v15, v13, "onChange caption: %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v55;
      swift_slowDealloc();
    }
    else
    {

      sub_9C50C((uint64_t)v12);
    }
    uint64_t v20 = sub_A5CE0();
    uint64_t v22 = v21;
    uint64_t v23 = sub_A5D10();
    uint64_t v25 = v24;
    if (v23 == sub_A5D80() && v25 == v26) {
      goto LABEL_7;
    }
    char v27 = sub_A7800();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v27) {
      goto LABEL_17;
    }
    uint64_t v28 = sub_A5D00();
    unint64_t v30 = v29;
    uint64_t v31 = *(int *)(v54 + 28);
    uint64_t v55 = a3;
    uint64_t v32 = (uint64_t *)(a3 + v31);
    uint64_t v33 = *v32;
    uint64_t v34 = v32[1];
    uint64_t v36 = v32[2];
    uint64_t v35 = v32[3];
    *(void *)&long long v57 = *v32;
    *((void *)&v57 + 1) = v34;
    uint64_t v58 = v36;
    uint64_t v59 = v35;
    uint64_t v37 = sub_7AF4(&qword_DB170);
    sub_A6F00();
    if (v60 == v28 && v61 == v30)
    {
LABEL_7:
      swift_bridgeObjectRelease_n();
LABEL_17:
      sub_9EA68(v20, v22);
      return swift_bridgeObjectRelease();
    }
    uint64_t v52 = v37;
    char v38 = sub_A7800();
    swift_bridgeObjectRelease();
    if (v38)
    {
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    uint64_t v39 = v55;
    uint64_t v40 = v55 + *(int *)(v54 + 24);
    long long v41 = *(_OWORD *)v40;
    uint64_t v42 = *(void *)(v40 + 16);
    long long v57 = v41;
    uint64_t v58 = v42;
    uint64_t v60 = 0;
    sub_7AF4(&qword_DB168);
    sub_A6F10();
    *(void *)&long long v57 = v33;
    *((void *)&v57 + 1) = v34;
    uint64_t v58 = v36;
    uint64_t v59 = v35;
    uint64_t v60 = v28;
    unint64_t v61 = v30;
    sub_A6F10();
    os_log_type_t v43 = sub_A7420();
    uint64_t result = (id)AXLogLiveTranscription();
    if (result)
    {
      uint64_t v44 = result;
      uint64_t v45 = v53;
      sub_9F720(v39, v53, type metadata accessor for AXLTTextScrollView);
      if (os_log_type_enabled(v44, v43))
      {
        BOOL v46 = (uint8_t *)swift_slowAlloc();
        uint64_t v51 = swift_slowAlloc();
        uint64_t v56 = v51;
        *(_DWORD *)BOOL v46 = 136315138;
        uint64_t v47 = v45 + *(int *)(v54 + 28);
        long long v48 = *(_OWORD *)v47;
        uint64_t v50 = *(void *)(v47 + 16);
        uint64_t v49 = *(void *)(v47 + 24);
        long long v57 = v48;
        uint64_t v58 = v50;
        uint64_t v59 = v49;
        sub_A6F00();
        *(void *)&long long v57 = sub_15F94(v60, v61, &v56);
        sub_A7600();
        swift_bridgeObjectRelease();
        sub_9C50C(v45);
        _os_log_impl(&def_5ED54, v44, v43, "onChange caption, lineNumberDisplaCGFloat y = 0, current time: %s", v46, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_9C50C(v45);
      }
      goto LABEL_17;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_9EA68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v23 = a1;
  uint64_t v5 = type metadata accessor for AXLTTextScrollView(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5 - 8);
  uint64_t v9 = (void *)(v2 + *(int *)(v8 + 52));
  uint64_t v10 = v9[1];
  *(void *)&long long aBlock = *v9;
  uint64_t v11 = aBlock;
  *((void *)&aBlock + 1) = v10;
  sub_7AF4(&qword_D8370);
  sub_A6E80();
  id v12 = v29;
  [v29 invalidate];

  *(void *)&long long aBlock = v11;
  *((void *)&aBlock + 1) = v10;
  id v29 = 0;
  sub_A6E90();
  os_log_type_t v13 = self;
  sub_A5E60();
  double v15 = v14;
  sub_9F720(v3, (uint64_t)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AXLTTextScrollView);
  unint64_t v16 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v17 = swift_allocObject();
  sub_A0C14((uint64_t)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, type metadata accessor for AXLTTextScrollView);
  uint64_t v18 = (void *)(v17 + ((v7 + v16 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v18 = v23;
  v18[1] = a2;
  char v27 = sub_A1814;
  uint64_t v28 = v17;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  uint64_t v25 = sub_1684C;
  uint64_t v26 = &unk_D2148;
  unint64_t v19 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  id v20 = [v13 scheduledTimerWithTimeInterval:1 repeats:v19 block:v15];
  _Block_release(v19);
  long long aBlock = *(_OWORD *)v9;
  id v29 = v20;
  return sub_A6E90();
}

uint64_t sub_9ECE4(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_A58C0();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v10 = sub_A5DF0();
    sub_A7670();
    if (*(void *)(v4 + 16) && (unint64_t v5 = sub_85F3C((uint64_t)v11), (v6 & 1) != 0))
    {
      sub_10330(*(void *)(v4 + 56) + 32 * v5, (uint64_t)&v12);
    }
    else
    {
      long long v12 = 0u;
      long long v13 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_102DC((uint64_t)v11);
    if (*((void *)&v13 + 1))
    {
      uint64_t result = swift_dynamicCast();
      if (result)
      {
        uint64_t v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for AXLTTextScrollView(0) + 32));
        uint64_t v9 = *v7;
        uint64_t v8 = v7[1];
        v11[0] = v9;
        v11[1] = v8;
        *(void *)&long long v12 = v10;
        sub_7AF4(&qword_D8FB0);
        return sub_A6E90();
      }
    }
    else
    {
      return sub_A35C((uint64_t)&v12, &qword_D92A0);
    }
  }
  return result;
}

uint64_t sub_9EE00()
{
  if (qword_D7E58 != -1) {
    swift_once();
  }
  if (qword_D7E48 != -1) {
    swift_once();
  }
  UIFontTextStyle v0 = textFontStyle;
  AXLTSettingsManager.contentCategory.getter();
  uint64_t v2 = v1;
  sub_A2F50((uint64_t)v0, UIFontWeightBold);

  sub_A6AC0();
  type metadata accessor for AXLTTextScrollView(0);
  sub_7AF4(&qword_D8FA8);
  return sub_A6E90();
}

NSObject *sub_9EF14(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (int *)type metadata accessor for AXLTTextScrollView(0);
  *(void *)&double v9 = __chkstk_darwin(v8).n128_u64[0];
  uint64_t v11 = (char *)v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = objc_msgSend(a1, "isValid", v9);
  if (result)
  {
    if (qword_D7E58 != -1) {
      swift_once();
    }
    if (qword_D7E48 != -1) {
      swift_once();
    }
    UIFontTextStyle v13 = textFontStyle;
    AXLTSettingsManager.contentCategory.getter();
    double v15 = v14;
    id v16 = sub_A2F50((uint64_t)v13, UIFontWeightBold);

    [v16 lineHeight];
    double v18 = v17;

    unint64_t v19 = (void *)(a2 + v8[5]);
    uint64_t v20 = v19[1];
    uint64_t v21 = v19[2];
    *(void *)&long long v52 = *v19;
    *((void *)&v52 + 1) = v20;
    uint64_t v53 = v21;
    sub_7AF4(&qword_D8378);
    uint64_t result = sub_A6F00();
    double v22 = *(double *)&v54 / v18;
    if ((~COERCE__INT64(*(double *)&v54 / v18) & 0x7FF0000000000000) != 0)
    {
      if (v22 > -9.22337204e18)
      {
        if (v22 < 9.22337204e18)
        {
          uint64_t v23 = (uint64_t)v22;
          uint64_t v54 = (uint64_t)v22;
          uint64_t v24 = (uint64_t)v22 - 1;
          if ((uint64_t)v22 < 1)
          {
LABEL_22:
            if (!v23)
            {
              long long v41 = (void *)(a2 + v8[11]);
              uint64_t v43 = v41[1];
              *(void *)&long long v52 = *v41;
              uint64_t v42 = v52;
              *((void *)&v52 + 1) = v43;
              sub_7AF4(&qword_D8370);
              sub_A6E80();
              id v44 = v51;
              [v51 invalidate];

              *(void *)&long long v52 = v42;
              *((void *)&v52 + 1) = v43;
              uint64_t v51 = 0;
              return sub_A6E90();
            }
            return result;
          }
          if (sub_A5E00() == a3 && v25 == a4) {
            goto LABEL_15;
          }
          char v26 = sub_A7800();
          swift_bridgeObjectRelease();
          if (v26)
          {
LABEL_16:
            uint64_t v54 = 1;
            uint64_t v28 = (void *)(a2 + v8[11]);
            uint64_t v30 = v28[1];
            *(void *)&long long v52 = *v28;
            uint64_t v29 = v52;
            *((void *)&v52 + 1) = v30;
            sub_7AF4(&qword_D8370);
            sub_A6E80();
            id v31 = v51;
            [v51 invalidate];

            *(void *)&long long v52 = v29;
            *((void *)&v52 + 1) = v30;
            uint64_t v51 = 0;
            sub_A6E90();
            goto LABEL_17;
          }
          if (sub_A5DA0() == a3 && v27 == a4)
          {
LABEL_15:
            swift_bridgeObjectRelease();
            goto LABEL_16;
          }
          char v45 = sub_A7800();
          swift_bridgeObjectRelease();
          if (v45) {
            goto LABEL_16;
          }
          BOOL v46 = (uint64_t *)(a2 + v8[6]);
          uint64_t v47 = *v46;
          uint64_t v48 = v46[1];
          uint64_t v49 = v46[2];
          *(void *)&long long v52 = *v46;
          *((void *)&v52 + 1) = v48;
          uint64_t v53 = v49;
          swift_retain();
          swift_retain();
          sub_7AF4(&qword_DB168);
          uint64_t result = sub_A6F00();
          if (!__OFADD__(v51, 1))
          {
            *(void *)&long long v52 = v47;
            *((void *)&v52 + 1) = v48;
            uint64_t v53 = v49;
            v50[2] = v51 + 1;
            sub_A6F10();
            swift_release();
            swift_release();
            uint64_t v54 = v24;
LABEL_17:
            os_log_type_t v32 = sub_A7420();
            uint64_t result = (id)AXLogLiveTranscription();
            if (result)
            {
              uint64_t v33 = result;
              sub_9F720(a2, (uint64_t)v11, type metadata accessor for AXLTTextScrollView);
              os_log_type_t v34 = v32;
              if (os_log_type_enabled(v33, v32))
              {
                uint64_t v35 = (uint8_t *)swift_slowAlloc();
                *(_DWORD *)uint64_t v35 = 134217984;
                uint64_t v36 = &v11[v8[6]];
                long long v37 = *(_OWORD *)v36;
                uint64_t v38 = *((void *)v36 + 2);
                long long v52 = v37;
                uint64_t v53 = v38;
                sub_7AF4(&qword_DB168);
                sub_A6F00();
                uint64_t v39 = v51;
                sub_9C50C((uint64_t)v11);
                *(void *)&long long v52 = v39;
                sub_A7600();
                _os_log_impl(&def_5ED54, v33, v34, "Moving Timer fired, lineNumberDisplay: %ld", v35, 0xCu);
                swift_slowDealloc();
              }
              else
              {
                sub_9C50C((uint64_t)v11);
              }

              __chkstk_darwin(v40);
              v50[-4] = a2;
              *(double *)&v50[-3] = v18;
              v50[-2] = &v54;
              sub_A7080();
              sub_A6300();
              uint64_t result = swift_release();
              uint64_t v23 = v54;
              goto LABEL_22;
            }
LABEL_32:
            __break(1u);
            return result;
          }
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_30;
  }
  return result;
}

uint64_t sub_9F470()
{
  return sub_A6F10();
}

uint64_t sub_9F4FC@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(a1 - 8);
  sub_9F720(v2, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for AXLTTextScrollView);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  uint64_t result = sub_A0C14((uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6, type metadata accessor for AXLTTextScrollView);
  *a2 = sub_A0C7C;
  a2[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v7;
  return result;
}

uint64_t sub_9F610@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_A6630();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_9F644@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_A6630();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_9F678()
{
  return sub_A6640();
}

uint64_t sub_9F6A8()
{
  return sub_A6640();
}

uint64_t sub_9F6D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_9F720(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_9F78C(uint64_t a1)
{
  return sub_9F94C(a1, type metadata accessor for AXLTTextView, sub_9C03C);
}

uint64_t sub_9F7BC()
{
  uint64_t v1 = *(void *)(type metadata accessor for AXLTTextView(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = sub_A5D50();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_9F920(uint64_t a1)
{
  return sub_9F94C(a1, type metadata accessor for AXLTTextView, (uint64_t (*)(uint64_t, uint64_t))sub_9C158);
}

uint64_t sub_9F94C(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  uint64_t v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a3(a1, v6);
}

void sub_9F9D4()
{
}

void sub_9F9F4()
{
}

uint64_t sub_9FA1C()
{
  return 8;
}

uint64_t sub_9FA28()
{
  return swift_release();
}

uint64_t sub_9FA30(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_9FA40()
{
  return sub_A7170();
}

void *sub_9FA88(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t *sub_9FA9C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_A5D50();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)v4 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v10[2] = v11[2];
    UIFontTextStyle v13 = (uint64_t *)((char *)v4 + v9);
    double v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *UIFontTextStyle v13 = *v14;
    v13[1] = v15;
    void v13[2] = v14[2];
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    double v18 = (uint64_t *)((char *)v4 + v16);
    unint64_t v19 = (uint64_t *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *double v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = v19[3];
    void v18[2] = v19[2];
    v18[3] = v21;
    double v22 = (uint64_t *)((char *)v4 + v17);
    uint64_t v23 = (uint64_t *)((char *)a2 + v17);
    uint64_t v40 = v23[1];
    *double v22 = *v23;
    v22[1] = v40;
    uint64_t v24 = a3[9];
    uint64_t v25 = a3[10];
    char v26 = (uint64_t *)((char *)v4 + v24);
    uint64_t v27 = (uint64_t *)((char *)a2 + v24);
    uint64_t v39 = v27[1];
    *char v26 = *v27;
    v26[1] = v39;
    long long v37 = (uint64_t *)((char *)v4 + v25);
    uint64_t v38 = (uint64_t *)((char *)a2 + v25);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_7AF4(&qword_D7E68);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v28 = sub_A6380();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v28 - 8) + 16))(v37, v38, v28);
    }
    else
    {
      void *v37 = *v38;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v30 = a3[11];
    id v31 = (uint64_t *)((char *)v4 + v30);
    os_log_type_t v32 = (char *)a2 + v30;
    uint64_t v33 = *(void **)v32;
    uint64_t v34 = *((void *)v32 + 1);
    void *v31 = *(void *)v32;
    v31[1] = v34;
    id v35 = v33;
  }
  swift_retain();
  return v4;
}

uint64_t sub_9FD08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_A5D50();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v5 = a1 + *(int *)(a2 + 40);
  sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_A6380();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }

  return swift_release();
}

uint64_t sub_9FE7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_A5D50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  v9[2] = v10[2];
  uint64_t v12 = (void *)(a1 + v8);
  UIFontTextStyle v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  v12[2] = v13[2];
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v15);
  double v18 = (void *)(a2 + v15);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = v18[3];
  v17[2] = v18[2];
  void v17[3] = v20;
  uint64_t v21 = (void *)(a1 + v16);
  double v22 = (void *)(a2 + v16);
  uint64_t v37 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v37;
  uint64_t v23 = a3[9];
  uint64_t v24 = a3[10];
  uint64_t v39 = a3;
  uint64_t v25 = (void *)(a1 + v23);
  char v26 = (void *)(a2 + v23);
  uint64_t v27 = v26[1];
  void *v25 = *v26;
  v25[1] = v27;
  uint64_t v38 = (void *)(a1 + v24);
  uint64_t v36 = (void *)(a2 + v24);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v28 = sub_A6380();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v28 - 8) + 16))(v38, v36, v28);
  }
  else
  {
    *uint64_t v38 = *v36;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v29 = v39[11];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = a2 + v29;
  os_log_type_t v32 = *(void **)v31;
  uint64_t v33 = *(void *)(v31 + 8);
  *uint64_t v30 = *(void *)v31;
  v30[1] = v33;
  id v34 = v32;
  swift_retain();
  return a1;
}

uint64_t sub_A00A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_A5D50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_retain();
  swift_release();
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  swift_retain();
  swift_release();
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  swift_retain();
  swift_release();
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  swift_retain();
  swift_release();
  *(void *)(v11 + 16) = *(void *)(v12 + 16);
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  swift_retain();
  swift_release();
  v14[1] = v15[1];
  swift_retain();
  swift_release();
  v14[2] = v15[2];
  v14[3] = v15[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  swift_retain();
  swift_release();
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  swift_retain();
  swift_release();
  uint64_t v19 = a3[9];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  swift_retain();
  swift_release();
  *(void *)(v20 + 8) = *(void *)(v21 + 8);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    uint64_t v22 = a3[10];
    uint64_t v23 = (void *)(a1 + v22);
    uint64_t v24 = (void *)(a2 + v22);
    sub_A35C(a1 + v22, &qword_D7E68);
    sub_7AF4(&qword_D7E68);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v25 = sub_A6380();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
    }
    else
    {
      void *v23 = *v24;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v26 = a3[11];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = a2 + v26;
  uint64_t v29 = *(void **)(a1 + v26);
  uint64_t v30 = *(void **)v28;
  *uint64_t v27 = *(void *)v28;
  id v31 = v30;

  v27[1] = *(void *)(v28 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_A0358(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_A5D50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(void *)(v9 + 16) = *(void *)(v10 + 16);
  uint64_t v11 = a1 + v8;
  uint64_t v12 = a2 + v8;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(void *)(v11 + 16) = *(void *)(v12 + 16);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  long long v15 = *(_OWORD *)(a2 + v13);
  long long v16 = *(_OWORD *)(a2 + v13 + 16);
  uint64_t v17 = (_OWORD *)(a1 + v13);
  *uint64_t v17 = v15;
  v17[1] = v16;
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  uint64_t v18 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  uint64_t v21 = sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = sub_A6380();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v22 - 8) + 32))(v19, v20, v22);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_A04D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_A5D50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_release();
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  swift_release();
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  uint64_t v10 = a3[6];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  swift_release();
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  swift_release();
  *(void *)(v11 + 16) = *(void *)(v12 + 16);
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  long long v15 = (void *)(a2 + v13);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  swift_release();
  v14[1] = v15[1];
  swift_release();
  uint64_t v16 = v15[3];
  v14[2] = v15[2];
  v14[3] = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(void *)(a1 + v17) = *(void *)(a2 + v17);
  swift_release();
  *(void *)(v18 + 8) = *(void *)(v19 + 8);
  swift_release();
  uint64_t v20 = a3[9];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  swift_release();
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  swift_release();
  if (a1 != a2)
  {
    uint64_t v23 = a3[10];
    uint64_t v24 = (void *)(a1 + v23);
    uint64_t v25 = (const void *)(a2 + v23);
    sub_A35C(a1 + v23, &qword_D7E68);
    uint64_t v26 = sub_7AF4(&qword_D7E68);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v27 = sub_A6380();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v27 - 8) + 32))(v24, v25, v27);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
    }
  }
  uint64_t v28 = a3[11];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  id v31 = *(void **)(a1 + v28);
  *uint64_t v29 = *v30;

  v29[1] = v30[1];
  swift_release();
  return a1;
}

uint64_t sub_A072C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_A0740);
}

uint64_t sub_A0740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_A5D50();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = sub_7AF4(&qword_D8EB0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 40);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_A0874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_A0888);
}

uint64_t sub_A0888(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_A5D50();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = sub_7AF4(&qword_D8EB0);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 40);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void sub_A09BC()
{
  sub_A5D50();
  if (v0 <= 0x3F)
  {
    sub_359A0();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unint64_t sub_A0AB0()
{
  unint64_t result = qword_DB328;
  if (!qword_DB328)
  {
    sub_7C5C(&qword_DB330);
    sub_A0B24();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DB328);
  }
  return result;
}

unint64_t sub_A0B24()
{
  unint64_t result = qword_DB338;
  if (!qword_DB338)
  {
    sub_7C5C(&qword_DB340);
    sub_A45C(&qword_DB268, &qword_DB260);
    sub_9F6D8(&qword_DB270, (void (*)(uint64_t))type metadata accessor for AXLTTextScrollView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DB338);
  }
  return result;
}

uint64_t sub_A0BF4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_A0C14(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_A0C7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for AXLTTextScrollView(0) - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_9C568(v4, a1);
}

unint64_t sub_A0CFC()
{
  unint64_t result = qword_DB390;
  if (!qword_DB390)
  {
    sub_7C5C(&qword_DB368);
    sub_A0D9C();
    sub_A45C(&qword_DAFD8, &qword_DAFE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DB390);
  }
  return result;
}

unint64_t sub_A0D9C()
{
  unint64_t result = qword_DB398;
  if (!qword_DB398)
  {
    sub_7C5C(&qword_DB360);
    sub_A45C(&qword_DB3A0, &qword_DB358);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DB398);
  }
  return result;
}

uint64_t sub_A0E40()
{
  uint64_t v1 = type metadata accessor for AXLTTextScrollView(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = sub_A5D50();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3 + *(int *)(v1 + 40);
  sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_A6380();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }

  swift_release();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_A1034(uint64_t a1)
{
  return sub_9F94C(a1, type metadata accessor for AXLTTextScrollView, sub_9ECE4);
}

uint64_t sub_A1064(uint64_t a1)
{
  return sub_9F94C(a1, type metadata accessor for AXLTTextScrollView, (uint64_t (*)(uint64_t, uint64_t))sub_9EE00);
}

void sub_A109C(double a1, double a2)
{
  type metadata accessor for AXLTTextScrollView(0);

  sub_9DB0C(a1, a2);
}

uint64_t sub_A1114()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_A114C(double *a1)
{
  return sub_92BE0(a1, *(uint64_t (**)(double, double))(v1 + 16));
}

NSObject *sub_A1158(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for AXLTTextScrollView(0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_9E4BC(a1, a2, v6);
}

unint64_t sub_A11D8()
{
  unint64_t result = qword_DB3B8;
  if (!qword_DB3B8)
  {
    sub_7C5C(&qword_DB3B0);
    sub_A1278();
    sub_A45C(&qword_DB078, &qword_DB080);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DB3B8);
  }
  return result;
}

unint64_t sub_A1278()
{
  unint64_t result = qword_DB3C0;
  if (!qword_DB3C0)
  {
    sub_7C5C(&qword_DB3C8);
    sub_A1374(&qword_DB3D0, &qword_DB3D8, (void (*)(void))sub_A1344);
    sub_A45C(&qword_DB068, &qword_DB070);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DB3C0);
  }
  return result;
}

uint64_t sub_A1344()
{
  return sub_A1374(&qword_DB3E0, &qword_DB3E8, (void (*)(void))sub_A13F0);
}

uint64_t sub_A1374(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_7C5C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_A13F0()
{
  return sub_A1374(&qword_DB3F0, &qword_DB3F8, (void (*)(void))sub_A1420);
}

unint64_t sub_A1420()
{
  unint64_t result = qword_DB400;
  if (!qword_DB400)
  {
    sub_7C5C(&qword_DB408);
    sub_A14E0(&qword_DB410, &qword_DB418, &qword_D9718, &qword_D9720);
    sub_A45C(&qword_D9008, &qword_D9010);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_DB400);
  }
  return result;
}

uint64_t sub_A14E0(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_7C5C(a2);
    sub_A45C(a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_A157C(uint64_t a1)
{
  return a1;
}

uint64_t sub_A1608()
{
  uint64_t v1 = type metadata accessor for AXLTTextScrollView(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = sub_A5D50();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3 + *(int *)(v1 + 40);
  sub_7AF4(&qword_D7E68);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_A6380();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    swift_release();
  }

  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

NSObject *sub_A1814(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AXLTTextScrollView(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + v4;
  uint64_t v6 = (uint64_t *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];

  return sub_9EF14(a1, v5, v7, v8);
}

uint64_t sub_A18B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_A18C4()
{
  return swift_release();
}

uint64_t sub_A18CC()
{
  return sub_9F470();
}

uint64_t sub_A18F0()
{
  return sub_A45C(&qword_DB420, &qword_DB428);
}

uint64_t *AXLTSettingsManager.shared.unsafeMutableAddressor()
{
  if (qword_D7E58 != -1) {
    swift_once();
  }
  return &static AXLTSettingsManager.shared;
}

NSNotificationName *pausedChangedNotification.unsafeMutableAddressor()
{
  if (qword_D7E08 != -1) {
    swift_once();
  }
  return &pausedChangedNotification;
}

NSNotificationName *nubbitIdleOpacityChangedNotification.unsafeMutableAddressor()
{
  if (qword_D7E28 != -1) {
    swift_once();
  }
  return &nubbitIdleOpacityChangedNotification;
}

NSNotificationName *textFontChangedNotification.unsafeMutableAddressor()
{
  if (qword_D7E20 != -1) {
    swift_once();
  }
  return &textFontChangedNotification;
}

NSNotificationName *textColorChangedNotification.unsafeMutableAddressor()
{
  if (qword_D7E10 != -1) {
    swift_once();
  }
  return &textColorChangedNotification;
}

void *titleOpacity.unsafeMutableAddressor()
{
  return &titleOpacity;
}

NSNotificationName *micOnChangedNotification.unsafeMutableAddressor()
{
  if (qword_D7E00 != -1) {
    swift_once();
  }
  return &micOnChangedNotification;
}

NSNotificationName *backgroundColorChangedNotification.unsafeMutableAddressor()
{
  if (qword_D7E18 != -1) {
    swift_once();
  }
  return &backgroundColorChangedNotification;
}

NSString *sub_A1B4C()
{
  uint64_t result = (NSString *)sub_A71A0();
  macOSSettingsDidChangedNotification = result;
  return result;
}

NSNotificationName *macOSSettingsDidChangedNotification.unsafeMutableAddressor()
{
  if (qword_D7DF8 != -1) {
    swift_once();
  }
  return &macOSSettingsDidChangedNotification;
}

Swift::String *macOSTranscriptionEnabledKey.unsafeMutableAddressor()
{
  return &macOSTranscriptionEnabledKey;
}

Swift::String *macOSTranscriptionViewFontKey.unsafeMutableAddressor()
{
  return &macOSTranscriptionViewFontKey;
}

Swift::String *macOSTranscriptionViewFontSizeKey.unsafeMutableAddressor()
{
  return &macOSTranscriptionViewFontSizeKey;
}

Swift::String *macOSTranscriptionViewFontColorKey.unsafeMutableAddressor()
{
  return &macOSTranscriptionViewFontColorKey;
}

Swift::String *macOSTranscriptionViewBackgroundColorKey.unsafeMutableAddressor()
{
  return &macOSTranscriptionViewBackgroundColorKey;
}

NSString *sub_A1C0C()
{
  uint64_t result = (NSString *)sub_A71A0();
  micOnChangedNotification = result;
  return result;
}

NSString *sub_A1C44()
{
  uint64_t result = (NSString *)sub_A71A0();
  pausedChangedNotification = result;
  return result;
}

NSString *sub_A1C7C()
{
  uint64_t result = (NSString *)sub_A71A0();
  textColorChangedNotification = result;
  return result;
}

NSString *sub_A1CB4()
{
  uint64_t result = (NSString *)sub_A71A0();
  backgroundColorChangedNotification = result;
  return result;
}

NSString *sub_A1CEC()
{
  uint64_t result = (NSString *)sub_A71A0();
  textFontChangedNotification = result;
  return result;
}

NSString *sub_A1D24()
{
  uint64_t result = (NSString *)sub_A71A0();
  nubbitIdleOpacityChangedNotification = result;
  return result;
}

void *inactiveOpacity.unsafeMutableAddressor()
{
  return &inactiveOpacity;
}

void *titleToBodyTextFontSizeRatio.unsafeMutableAddressor()
{
  return &titleToBodyTextFontSizeRatio;
}

uint64_t sub_A1D74()
{
  uint64_t result = sub_A6DA0();
  qword_DB430 = result;
  return result;
}

uint64_t sub_A1D94()
{
  uint64_t result = sub_A6D90();
  qword_DB438 = result;
  return result;
}

id sub_A1DB4(uint64_t a1)
{
  return sub_A1E58(a1, &qword_D7DD8, (void **)&qword_DF638, (void **)&titleFontStyle);
}

UIFontTextStyle *titleFontStyle.unsafeMutableAddressor()
{
  if (qword_D7E40 != -1) {
    swift_once();
  }
  return &titleFontStyle;
}

id sub_A1E2C(uint64_t a1)
{
  return sub_A1E58(a1, &qword_D7DD0, (void **)&qword_DF630, (void **)&textFontStyle);
}

id sub_A1E58(uint64_t a1, void *a2, void **a3, void **a4)
{
  if (*a2 != -1) {
    swift_once();
  }
  uint64_t v6 = *a3;
  *a4 = *a3;

  return v6;
}

UIFontTextStyle *textFontStyle.unsafeMutableAddressor()
{
  if (qword_D7E48 != -1) {
    swift_once();
  }
  return &textFontStyle;
}

UIFontTextStyle sub_A1EFC()
{
  buttonFontStyle = UIFontTextStyleHeadline;
  return UIFontTextStyleHeadline;
}

UIFontTextStyle *buttonFontStyle.unsafeMutableAddressor()
{
  if (qword_D7E50 != -1) {
    swift_once();
  }
  return &buttonFontStyle;
}

uint64_t AXLTSettingsManager.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t AXLTSettingsManager.delegate.setter()
{
  return swift_unknownObjectRelease();
}

void (*AXLTSettingsManager.delegate.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR___AXLTSettingsManager_delegate;
  v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return sub_A213C;
}

void sub_A213C(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t AXLTSettingsManager.textColor.getter()
{
  return sub_A223C();
}

uint64_t AXLTSettingsManager.textColor.setter(uint64_t a1)
{
  return sub_A2290(a1, &OBJC_IVAR___AXLTSettingsManager_textColor);
}

uint64_t (*AXLTSettingsManager.textColor.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t AXLTSettingsManager.backgroundColor.getter()
{
  return sub_A223C();
}

uint64_t sub_A223C()
{
  return swift_retain();
}

uint64_t AXLTSettingsManager.backgroundColor.setter(uint64_t a1)
{
  return sub_A2290(a1, &OBJC_IVAR___AXLTSettingsManager_backgroundColor);
}

uint64_t sub_A2290(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  *uint64_t v4 = a1;
  return swift_release();
}

uint64_t (*AXLTSettingsManager.backgroundColor.modify())()
{
  return j__swift_endAccess;
}

uint64_t AXLTSettingsManager.titleFont.getter()
{
  sub_A2D14();

  return sub_A6AC0();
}

uint64_t AXLTSettingsManager.textFont.getter()
{
  if (qword_D7E48 != -1) {
    swift_once();
  }
  UIFontTextStyle v0 = textFontStyle;
  AXLTSettingsManager.contentCategory.getter();
  uint64_t v2 = v1;
  sub_A2F50((uint64_t)v0, UIFontWeightBold);

  return sub_A6AC0();
}

uint64_t AXLTSettingsManager.buttonFont.getter()
{
  return sub_A2414((double *)&UIFontWeightBold);
}

uint64_t AXLTSettingsManager.semiboldButtonFont.getter()
{
  return sub_A2414((double *)&UIFontWeightSemibold);
}

uint64_t sub_A2414(double *a1)
{
  AXLTSettingsManager.contentCategory.getter();
  uint64_t v2 = qword_D7DE8;
  uint64_t v4 = (NSString *)v3;
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_A6380();
  sub_7B38(v5, (uint64_t)qword_DF648);
  uint64_t v6 = sub_75128();
  char v7 = sub_A7550();

  if (v7)
  {
    uint64_t v8 = sub_75128();

    uint64_t v4 = v8;
  }
  if (qword_D7E50 != -1) {
    swift_once();
  }
  sub_A2F50((uint64_t)buttonFontStyle, *a1);

  return sub_A6AC0();
}

uint64_t AXLTSettingsManager.buttonDynamicTypeSize.getter@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_7AF4(&qword_D85E8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_D7DE8 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_A6380();
  uint64_t v6 = sub_7B38(v5, (uint64_t)qword_DF648);
  uint64_t v7 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v4, v6, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v4, 0, 1, v5);
  AXLTSettingsManager.dynamicTypeSize(_:)((uint64_t)v4, a1);
  return sub_A3844((uint64_t)v4);
}

double AXLTSettingsManager.buttonScaledHeight.getter()
{
  uint64_t v0 = sub_7AF4(&qword_D85E8);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_A6380();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_D7E40 != -1) {
    swift_once();
  }
  id v7 = [objc_allocWithZone((Class)UIFontMetrics) initForTextStyle:titleFontStyle];
  if (qword_D7DE0 != -1) {
    swift_once();
  }
  double v8 = *(double *)&qword_DF640;
  if (qword_D7DE8 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_7B38(v3, (uint64_t)qword_DF648);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v2, v9, v3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
  AXLTSettingsManager.dynamicTypeSize(_:)((uint64_t)v2, v6);
  sub_A3844((uint64_t)v2);
  unint64_t v10 = sub_75128();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  id v11 = [self traitCollectionWithPreferredContentSizeCategory:v10];

  [v7 scaledValueForValue:v11 compatibleWithTraitCollection:v8];
  double v13 = v12;

  return v13;
}

void AXLTSettingsManager.contentCategory.getter()
{
  uint64_t v1 = OBJC_IVAR___AXLTSettingsManager__contentCategory;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR___AXLTSettingsManager__contentCategory);
  if (v2) {
    goto LABEL_10;
  }
  uint64_t v3 = _AXSLiveCaptionsCopyContentSizeCategoryName();
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    sub_A71D0();
    NSString v5 = sub_A71A0();

    swift_bridgeObjectRelease();
    uint64_t v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v5;
    id v7 = v5;

    double v8 = *(void **)(v0 + v1);
    if (v8)
    {
      v8;

LABEL_10:
      id v14 = v2;
      return;
    }
    __break(1u);
  }
  else
  {
    uint64_t v9 = _AXSCopyPreferredContentSizeCategoryNameGlobal();
    if (v9)
    {
      unint64_t v10 = (void *)v9;
      sub_A71D0();
      id v11 = (NSString *)sub_A71A0();

      swift_bridgeObjectRelease();
    }
    else
    {
      id v11 = UIContentSizeCategoryLarge;
    }
    double v12 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v11;

    double v13 = *(void **)(v0 + v1);
    if (v13)
    {
      v13;
      goto LABEL_10;
    }
  }
  __break(1u);
}

BOOL AXLTSettingsManager.boldText.getter()
{
  uint64_t v1 = OBJC_IVAR___AXLTSettingsManager__boldText;
  int v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR___AXLTSettingsManager__boldText);
  if (v2 != 2) {
    return v2 & 1;
  }
  int v3 = _AXSLiveCaptionsBoldTextEnabled();
  if (v3 == -1) {
    BOOL result = _AXSEnhanceTextLegibilityEnabled() != 0;
  }
  else {
    BOOL result = v3 == 1;
  }
  *(unsigned char *)(v0 + v1) = result;
  return result;
}

uint64_t AXLTSettingsManager.dynamicTypeSize(_:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = sub_A6380();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_7AF4(&qword_D85E8);
  __chkstk_darwin(v8 - 8);
  unint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  double v13 = (char *)&v19 - v12;
  AXLTSettingsManager.contentCategory.getter();
  sub_A6390();
  id v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v14(v13, 1, v4) == 1)
  {
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(a2, enum case for DynamicTypeSize.large(_:), v4);
    sub_A3844((uint64_t)v13);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a2, v13, v4);
  }
  sub_A38A4(a1, (uint64_t)v10);
  if (v14(v10, 1, v4) == 1) {
    return sub_A3844((uint64_t)v10);
  }
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v16(v7, v10, v4);
  sub_A57D4((unint64_t *)&qword_D85F0, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  char v17 = sub_A7180();
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  if ((v17 & 1) == 0) {
    return v18(v7, v4);
  }
  v18(a2, v4);
  return ((uint64_t (*)(char *, char *, uint64_t))v16)(a2, v7, v4);
}

id sub_A2D14()
{
  AXLTSettingsManager.contentCategory.getter();
  uint64_t v9 = v0;
  uint64_t v1 = v0;
  char v2 = sub_A7550();

  if (v2)
  {
    int v3 = UIContentSizeCategoryAccessibilityExtraLarge;

    uint64_t v9 = v3;
  }
  uint64_t v4 = sub_11C10(0, &qword_DB4F0);
  __chkstk_darwin(v4);
  uint64_t v5 = (void *)sub_A7500();
  uint64_t v6 = self;
  if (qword_D7E40 != -1) {
    swift_once();
  }
  id v7 = [v6 preferredFontForTextStyle:titleFontStyle compatibleWithTraitCollection:v5];

  return v7;
}

uint64_t sub_A2E64(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  sub_A577C(a1, *(void *)(a1 + 24));
  id v6 = v5;
  sub_A6050();
  uint64_t v7 = OBJC_IVAR___AXLTSettingsManager__boldText;
  if (*(unsigned char *)(a3 + OBJC_IVAR___AXLTSettingsManager__boldText) == 2)
  {
    int v8 = _AXSLiveCaptionsBoldTextEnabled();
    if (v8 == -1) {
      *(unsigned char *)(a3 + v7) = _AXSEnhanceTextLegibilityEnabled() != 0;
    }
    else {
      *(unsigned char *)(a3 + v7) = v8 == 1;
    }
  }
  sub_A577C(a1, *(void *)(a1 + 24));
  return sub_A6040();
}

id sub_A2F50(uint64_t a1, double a2)
{
  uint64_t v3 = v2;
  sub_11C10(0, &qword_DB4F0);
  uint64_t v26 = v2;
  id v6 = (void *)sub_A7500();
  id v7 = [self preferredFontDescriptorWithTextStyle:a1 compatibleWithTraitCollection:v6];
  sub_7AF4(&qword_DB4F8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_A9C60;
  *(void *)(inited + 32) = UIFontDescriptorTraitsAttribute;
  sub_7AF4(&qword_DB500);
  uint64_t v9 = swift_initStackObject();
  *(_OWORD *)(v9 + 16) = xmmword_A9C60;
  *(void *)(v9 + 32) = UIFontWeightTrait;
  uint64_t v10 = OBJC_IVAR___AXLTSettingsManager__boldText;
  int v11 = *(unsigned __int8 *)(v26 + OBJC_IVAR___AXLTSettingsManager__boldText);
  if (v11 == 2)
  {
    id v12 = v7;
    double v13 = UIFontDescriptorTraitsAttribute;
    id v14 = UIFontWeightTrait;
    int v15 = _AXSLiveCaptionsBoldTextEnabled();
    if (v15 == -1) {
      int v16 = _AXSEnhanceTextLegibilityEnabled() != 0;
    }
    else {
      int v16 = v15 == 1;
    }
    *(unsigned char *)(v3 + v10) = v16;
  }
  else
  {
    int v16 = v11 & 1;
    id v17 = v7;
    uint64_t v18 = UIFontDescriptorTraitsAttribute;
    uint64_t v19 = UIFontWeightTrait;
  }
  double v20 = UIFontWeightBlack;
  if (!v16) {
    double v20 = a2;
  }
  *(double *)(v9 + 40) = v20;
  unint64_t v21 = sub_696C(v9);
  *(void *)(inited + 64) = sub_7AF4(&qword_DB508);
  *(void *)(inited + 40) = v21;
  sub_6A78(inited);
  type metadata accessor for AttributeName(0);
  sub_A57D4(&qword_D8080, type metadata accessor for AttributeName);
  Class isa = sub_A7130().super.isa;
  swift_bridgeObjectRelease();
  id v23 = [v7 fontDescriptorByAddingAttributes:isa];

  id v24 = [self fontWithDescriptor:v23 size:0.0];
  return v24;
}

uint64_t sub_A31EC(uint64_t a1, void *a2, uint64_t a3)
{
  sub_A577C(a1, *(void *)(a1 + 24));
  id v6 = a2;
  sub_A6050();
  uint64_t v7 = OBJC_IVAR___AXLTSettingsManager__boldText;
  if (*(unsigned char *)(a3 + OBJC_IVAR___AXLTSettingsManager__boldText) == 2)
  {
    int v8 = _AXSLiveCaptionsBoldTextEnabled();
    if (v8 == -1) {
      *(unsigned char *)(a3 + v7) = _AXSEnhanceTextLegibilityEnabled() != 0;
    }
    else {
      *(unsigned char *)(a3 + v7) = v8 == 1;
    }
  }
  sub_A577C(a1, *(void *)(a1 + 24));
  return sub_A6040();
}

double AXLTSettingsManager.titleFontPointSize.getter()
{
  id v0 = sub_A2D14();
  [v0 pointSize];
  double v2 = v1;

  return v2;
}

double AXLTSettingsManager.titleLineHeight.getter()
{
  id v0 = sub_A2D14();
  [v0 lineHeight];
  double v2 = v1;

  return v2;
}

double AXLTSettingsManager.textLineHeight.getter()
{
  if (qword_D7E48 != -1) {
    swift_once();
  }
  UIFontTextStyle v0 = textFontStyle;
  AXLTSettingsManager.contentCategory.getter();
  double v2 = v1;
  id v3 = sub_A2F50((uint64_t)v0, UIFontWeightBold);

  [v3 lineHeight];
  double v5 = v4;

  return v5;
}

double AXLTSettingsManager.buttonFontLineHeight.getter()
{
  AXLTSettingsManager.contentCategory.getter();
  uint64_t v0 = qword_D7DE8;
  double v2 = (NSString *)v1;
  if (v0 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_A6380();
  sub_7B38(v3, (uint64_t)qword_DF648);
  double v4 = sub_75128();
  char v5 = sub_A7550();

  if (v5)
  {
    id v6 = sub_75128();

    double v2 = v6;
  }
  if (qword_D7E50 != -1) {
    swift_once();
  }
  id v7 = sub_A2F50((uint64_t)buttonFontStyle, UIFontWeightBold);

  [v7 lineHeight];
  double v9 = v8;

  return v9;
}

uint64_t AXLTSettingsManager.isMicOn.getter()
{
  id v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___AXLTSettingsManager_isMicOn);
  swift_beginAccess();
  return *v1;
}

uint64_t AXLTSettingsManager.isMicOn.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR___AXLTSettingsManager_isMicOn);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*AXLTSettingsManager.isMicOn.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t AXLTSettingsManager.isPaused.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR___AXLTSettingsManager_isPaused);
  swift_beginAccess();
  return *v1;
}

uint64_t AXLTSettingsManager.isPaused.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR___AXLTSettingsManager_isPaused);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*AXLTSettingsManager.isPaused.modify())()
{
  return j_j__swift_endAccess;
}

double AXLTSettingsManager.nubbitIdleOpacity.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___AXLTSettingsManager_nubbitIdleOpacity;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t AXLTSettingsManager.nubbitIdleOpacity.setter(double a1)
{
  uint64_t v3 = (double *)(v1 + OBJC_IVAR___AXLTSettingsManager_nubbitIdleOpacity);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*AXLTSettingsManager.nubbitIdleOpacity.modify())()
{
  return j_j__swift_endAccess;
}

id sub_A3814()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for AXLTSettingsManager()) init];
  static AXLTSettingsManager.shared = (uint64_t)result;
  return result;
}

uint64_t sub_A3844(uint64_t a1)
{
  uint64_t v2 = sub_7AF4(&qword_D85E8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_A38A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_7AF4(&qword_D85E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id static AXLTSettingsManager.shared.getter()
{
  if (qword_D7E58 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static AXLTSettingsManager.shared;

  return v0;
}

__CFNotificationCenter *sub_A39C4()
{
  swift_unknownObjectWeakInit();
  uint64_t v1 = OBJC_IVAR___AXLTSettingsManager_textColor;
  uint64_t v2 = qword_D7E30;
  uint64_t v3 = v0;
  if (v2 != -1) {
    swift_once();
  }
  *(void *)&v0[v1] = qword_DB430;
  uint64_t v4 = OBJC_IVAR___AXLTSettingsManager_backgroundColor;
  uint64_t v5 = qword_D7E38;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  *(void *)&v3[v4] = qword_DB438;
  *(void *)&v3[OBJC_IVAR___AXLTSettingsManager__contentCategory] = 0;
  v3[OBJC_IVAR___AXLTSettingsManager__boldText] = 2;
  uint64_t v6 = OBJC_IVAR___AXLTSettingsManager_isMicOn;
  swift_retain();
  v3[v6] = _AXSLiveTranscriptionMicOn() != 0;
  uint64_t v7 = OBJC_IVAR___AXLTSettingsManager_isPaused;
  v3[v7] = _AXSLiveTranscriptionPaused() != 0;
  *(void *)&v3[OBJC_IVAR___AXLTSettingsManager_nubbitIdleOpacity] = 0x3FE0000000000000;
  *(void *)&v3[OBJC_IVAR___AXLTSettingsManager_micStateChanged] = sub_A3F80;
  *(void *)&v3[OBJC_IVAR___AXLTSettingsManager_pausedStateChanged] = sub_A3FAC;
  *(void *)&v3[OBJC_IVAR___AXLTSettingsManager_fontChanged] = sub_A40A0;
  *(void *)&v3[OBJC_IVAR___AXLTSettingsManager_transcriptionEnabledChanged] = sub_A40B8;
  *(void *)&v3[OBJC_IVAR___AXLTSettingsManager_nubbitIdleOpacityChanged] = sub_A4198;
  *(void *)&v3[OBJC_IVAR___AXLTSettingsManager_textColorChanged] = sub_A49F4;
  *(void *)&v3[OBJC_IVAR___AXLTSettingsManager_backgroundColorChanged] = sub_A4A0C;

  v41.receiver = v3;
  v41.super_class = (Class)type metadata accessor for AXLTSettingsManager();
  double v8 = (char *)objc_msgSendSuper2(&v41, "init");
  id result = CFNotificationCenterGetDarwinNotifyCenter();
  if (!kAXSLiveTranscriptionMicOnDidChangeNotification)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v10 = result;
  int v11 = *(void (__cdecl **)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))&v8[OBJC_IVAR___AXLTSettingsManager_micStateChanged];
  id v12 = (__CFString *)kAXSLiveTranscriptionMicOnDidChangeNotification;
  CFNotificationCenterAddObserver(v10, 0, v11, v12, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  id result = CFNotificationCenterGetDarwinNotifyCenter();
  if (!kAXSLiveTranscriptionPausedDidChangeNotification)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  double v13 = result;
  id v14 = *(void (__cdecl **)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))&v8[OBJC_IVAR___AXLTSettingsManager_pausedStateChanged];
  int v15 = (__CFString *)kAXSLiveTranscriptionPausedDidChangeNotification;
  CFNotificationCenterAddObserver(v13, 0, v14, v15, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  id result = CFNotificationCenterGetDarwinNotifyCenter();
  if (!kAXSLiveTranscriptionTextColorDidChangeNotification)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  int v16 = result;
  id v17 = *(void (__cdecl **)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))&v8[OBJC_IVAR___AXLTSettingsManager_textColorChanged];
  uint64_t v18 = (__CFString *)kAXSLiveTranscriptionTextColorDidChangeNotification;
  CFNotificationCenterAddObserver(v16, 0, v17, v18, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  id result = CFNotificationCenterGetDarwinNotifyCenter();
  if (!kAXSLiveTranscriptionBackgroundColorDidChangeNotification)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v19 = result;
  double v20 = *(void (__cdecl **)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))&v8[OBJC_IVAR___AXLTSettingsManager_backgroundColorChanged];
  unint64_t v21 = (__CFString *)kAXSLiveTranscriptionBackgroundColorDidChangeNotification;
  CFNotificationCenterAddObserver(v19, 0, v20, v21, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  id result = CFNotificationCenterGetDarwinNotifyCenter();
  if (!kAXSLiveCaptionsNubbitIdleOpacityDidChangeNotification)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v22 = result;
  id v23 = *(void (__cdecl **)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))&v8[OBJC_IVAR___AXLTSettingsManager_nubbitIdleOpacityChanged];
  id v24 = (__CFString *)kAXSLiveCaptionsNubbitIdleOpacityDidChangeNotification;
  CFNotificationCenterAddObserver(v22, 0, v23, v24, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  id result = CFNotificationCenterGetDarwinNotifyCenter();
  if (!kAXSApplePreferredContentSizeCategoryNotification)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v25 = result;
  uint64_t v26 = OBJC_IVAR___AXLTSettingsManager_fontChanged;
  uint64_t v27 = *(void (__cdecl **)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))&v8[OBJC_IVAR___AXLTSettingsManager_fontChanged];
  uint64_t v28 = (__CFString *)kAXSApplePreferredContentSizeCategoryNotification;
  CFNotificationCenterAddObserver(v25, 0, v27, v28, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  id result = CFNotificationCenterGetDarwinNotifyCenter();
  if (!kAXSLiveCaptionsContentSizeCategoryNameChangeNotification)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v29 = result;
  uint64_t v30 = *(void (__cdecl **)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))&v8[v26];
  id v31 = (__CFString *)kAXSLiveCaptionsContentSizeCategoryNameChangeNotification;
  CFNotificationCenterAddObserver(v29, 0, v30, v31, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  id result = CFNotificationCenterGetDarwinNotifyCenter();
  if (!kAXSEnhanceTextLegibilityChangedNotification)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  os_log_type_t v32 = result;
  uint64_t v33 = *(void (__cdecl **)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))&v8[v26];
  id v34 = (__CFString *)kAXSEnhanceTextLegibilityChangedNotification;
  CFNotificationCenterAddObserver(v32, 0, v33, v34, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  id result = CFNotificationCenterGetDarwinNotifyCenter();
  if (!kAXSLiveCaptionsBoldTextChangeNotification)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  id v35 = result;
  uint64_t v36 = *(void (__cdecl **)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))&v8[v26];
  uint64_t v37 = (__CFString *)kAXSLiveCaptionsBoldTextChangeNotification;
  CFNotificationCenterAddObserver(v35, 0, v36, v37, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  id result = CFNotificationCenterGetDarwinNotifyCenter();
  if (kAXSLiveTranscriptionEnabledDidChangeNotification)
  {
    uint64_t v38 = result;
    uint64_t v39 = *(void (__cdecl **)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))&v8[OBJC_IVAR___AXLTSettingsManager_transcriptionEnabledChanged];
    uint64_t v40 = (__CFString *)kAXSLiveTranscriptionEnabledDidChangeNotification;
    CFNotificationCenterAddObserver(v38, 0, v39, v40, 0, CFNotificationSuspensionBehaviorDeliverImmediately);

    sub_A47EC();
    sub_A4A24();
    sub_A4F34();
    sub_A4B70();

    return (__CFNotificationCenter *)v8;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_A3F80(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
}

void sub_A3FAC(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
}

void sub_A3FD8(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, unsigned int (*a6)(void), void (*a7)(BOOL))
{
  uint64_t v11 = qword_D7E58;
  id v12 = a1;
  id v13 = a3;
  id v15 = a5;
  if (v11 != -1) {
    swift_once();
  }
  BOOL v14 = a6() != 0;
  a7(v14);
}

void sub_A40A0(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
}

void sub_A40B8(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v7 = qword_D7E58;
  id v8 = a1;
  id v9 = a3;
  id v10 = a5;
  if (v7 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    [Strong transcriptionEnabledDidChange];

    swift_unknownObjectRelease();
  }
  else
  {
  }
}

void sub_A4198(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
}

void sub_A41B0(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void (*a6)(void))
{
  uint64_t v9 = qword_D7E58;
  id v10 = a1;
  id v11 = a3;
  id v12 = a5;
  if (v9 != -1) {
    swift_once();
  }
  a6();
}

void sub_A4264(char a1)
{
  os_log_type_t v3 = sub_A7420();
  uint64_t v4 = (id)AXLogLiveTranscription();
  if (v4)
  {
    uint64_t v5 = v4;
    if (os_log_type_enabled(v4, v3))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 67109120;
      sub_A7600();
      _os_log_impl(&def_5ED54, v5, v3, "updateMicOnState: %{BOOL}d", v6, 8u);
      swift_slowDealloc();
    }

    uint64_t v7 = (char *)(v1 + OBJC_IVAR___AXLTSettingsManager_isMicOn);
    swift_beginAccess();
    if (*v7 != (a1 & 1))
    {
      char *v7 = a1 & 1;
      if (qword_D7D98 != -1) {
        swift_once();
      }
      sub_3FA1C();
    }
    id v8 = [self defaultCenter];
    if (qword_D7E00 != -1) {
      swift_once();
    }
    NSNotificationName v9 = micOnChangedNotification;
    sub_7AF4(&qword_DB4E0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_A9C60;
    uint64_t v14 = sub_A5DF0();
    uint64_t v15 = v11;
    sub_A7670();
    char v12 = *v7;
    *(void *)(inited + 96) = &type metadata for Bool;
    *(unsigned char *)(inited + 72) = v12;
    sub_6BC0(inited);
    Class isa = sub_A7130().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v8, "postNotificationName:object:userInfo:", v9, 0, isa, v14, v15);
  }
  else
  {
    __break(1u);
  }
}

void sub_A44D0(char a1)
{
  os_log_type_t v3 = sub_A7420();
  uint64_t v4 = (id)AXLogLiveTranscription();
  if (v4)
  {
    uint64_t v5 = v4;
    if (os_log_type_enabled(v4, v3))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 67109120;
      sub_A7600();
      _os_log_impl(&def_5ED54, v5, v3, "updatePausedState: %{BOOL}d", v6, 8u);
      swift_slowDealloc();
    }

    uint64_t v7 = (char *)(v1 + OBJC_IVAR___AXLTSettingsManager_isPaused);
    swift_beginAccess();
    char *v7 = a1 & 1;
    if (qword_D7D98 != -1) {
      swift_once();
    }
    uint64_t v8 = static AXLTCaptionsProvider.shared;
    if (qword_D7E58 != -1) {
      swift_once();
    }
    NSNotificationName v9 = (unsigned __int8 *)(static AXLTSettingsManager.shared + OBJC_IVAR___AXLTSettingsManager_isPaused);
    swift_beginAccess();
    int v10 = *v9;
    uint64_t v11 = (unsigned char *)(v8 + OBJC_IVAR___AXLTCaptionsProvider_isTranscribing);
    if (v10 == 1)
    {
      swift_beginAccess();
      if (*v11) {
        AXLTCaptionsProvider.stopTranscribing()();
      }
    }
    else
    {
      swift_beginAccess();
      if ((*v11 & 1) == 0) {
        AXLTCaptionsProvider.startTranscribing()();
      }
    }
    sub_3C738(0, 0);
    id v12 = [self defaultCenter];
    if (qword_D7E08 != -1) {
      swift_once();
    }
    NSNotificationName v13 = pausedChangedNotification;
    sub_7AF4(&qword_DB4E0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_A9C60;
    uint64_t v18 = sub_A5DF0();
    uint64_t v19 = v15;
    sub_A7670();
    char v16 = *v7;
    *(void *)(inited + 96) = &type metadata for Bool;
    *(unsigned char *)(inited + 72) = v16;
    sub_6BC0(inited);
    Class isa = sub_A7130().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v12, "postNotificationName:object:userInfo:", v13, 0, isa, v18, v19);
  }
  else
  {
    __break(1u);
  }
}

void sub_A47EC()
{
  uint64_t v1 = (void *)_AXSLiveCaptionsNubbitIdleOpacity();
  uint64_t v2 = v1;
  if (v1)
  {
    [v1 floatValue];
    double v4 = v3;
    uint64_t v5 = (double *)(v0 + OBJC_IVAR___AXLTSettingsManager_nubbitIdleOpacity);
    swift_beginAccess();
    *uint64_t v5 = v4;
  }
  id v6 = [self defaultCenter];
  if (qword_D7E28 != -1) {
    swift_once();
  }
  NSNotificationName v7 = nubbitIdleOpacityChangedNotification;
  sub_7AF4(&qword_DB4E0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_A9C60;
  sub_A5DF0();
  sub_A7670();
  NSNotificationName v9 = (uint64_t *)(v0 + OBJC_IVAR___AXLTSettingsManager_nubbitIdleOpacity);
  swift_beginAccess();
  uint64_t v10 = *v9;
  *(void *)(inited + 96) = &type metadata for CGFloat;
  *(void *)(inited + 72) = v10;
  sub_6BC0(inited);
  Class isa = sub_A7130().super.isa;
  swift_bridgeObjectRelease();
  [v6 postNotificationName:v7 object:0 userInfo:isa];
}

void sub_A49F4(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
}

void sub_A4A0C(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
}

void *sub_A4A24()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___AXLTSettingsManager__contentCategory);
  *(void *)(v0 + OBJC_IVAR___AXLTSettingsManager__contentCategory) = 0;

  *(unsigned char *)(v0 + OBJC_IVAR___AXLTSettingsManager__boldText) = 2;
  id v2 = [self defaultCenter];
  if (qword_D7E20 != -1) {
    swift_once();
  }
  [v2 postNotificationName:textFontChangedNotification object:0 userInfo:0];

  swift_beginAccess();
  id result = (void *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    [result fontDidChange];
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

void sub_A4B70()
{
  uint64_t v1 = v0;
  uint64_t v2 = _AXSLiveTranscriptionCopyTextColorData();
  if (!v2) {
    goto LABEL_3;
  }
  float v3 = (void *)v2;
  sub_11C10(0, &qword_DB4E8);
  sub_11C10(0, &qword_D9DD0);
  id v4 = v3;
  uint64_t v5 = sub_A59C0();
  unint64_t v7 = v6;
  uint64_t v18 = (void *)sub_A7480();

  sub_A571C(v5, v7);
  if (v18)
  {
    id v10 = v18;
    uint64_t v19 = sub_A6DF0();
    double v20 = (uint64_t *)(v1 + OBJC_IVAR___AXLTSettingsManager_textColor);
    swift_beginAccess();
    uint64_t *v20 = v19;
  }
  else
  {
LABEL_3:
    if (qword_D7E30 != -1) {
      swift_once();
    }
    uint64_t v8 = qword_DB430;
    NSNotificationName v9 = (uint64_t *)(v1 + OBJC_IVAR___AXLTSettingsManager_textColor);
    swift_beginAccess();
    *NSNotificationName v9 = v8;
    swift_retain();
    id v10 = 0;
  }
  swift_release();
  id v11 = [self defaultCenter];
  if (qword_D7E10 != -1) {
    swift_once();
  }
  NSNotificationName v12 = textColorChangedNotification;
  sub_7AF4(&qword_DB4E0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_A9C60;
  sub_A5DF0();
  sub_A7670();
  uint64_t v14 = (uint64_t *)(v1 + OBJC_IVAR___AXLTSettingsManager_textColor);
  swift_beginAccess();
  uint64_t v15 = *v14;
  *(void *)(inited + 96) = &type metadata for Color;
  *(void *)(inited + 72) = v15;
  swift_retain();
  sub_6BC0(inited);
  Class isa = sub_A7130().super.isa;
  swift_bridgeObjectRelease();
  [v11 postNotificationName:v12 object:0 userInfo:isa];

  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    [Strong textColorDidChange];
    swift_unknownObjectRelease();
  }
}

void sub_A4F34()
{
  uint64_t v1 = v0;
  uint64_t v2 = _AXSLiveTranscriptionCopyBackgroundColorData();
  if (!v2) {
    goto LABEL_3;
  }
  float v3 = (void *)v2;
  sub_11C10(0, &qword_DB4E8);
  sub_11C10(0, &qword_D9DD0);
  id v4 = v3;
  uint64_t v5 = sub_A59C0();
  unint64_t v7 = v6;
  uint64_t v18 = (void *)sub_A7480();

  sub_A571C(v5, v7);
  if (v18)
  {
    id v10 = v18;
    uint64_t v19 = sub_A6DF0();
    double v20 = (uint64_t *)(v1 + OBJC_IVAR___AXLTSettingsManager_backgroundColor);
    swift_beginAccess();
    uint64_t *v20 = v19;
  }
  else
  {
LABEL_3:
    if (qword_D7E38 != -1) {
      swift_once();
    }
    uint64_t v8 = qword_DB438;
    NSNotificationName v9 = (uint64_t *)(v1 + OBJC_IVAR___AXLTSettingsManager_backgroundColor);
    swift_beginAccess();
    *NSNotificationName v9 = v8;
    swift_retain();
    id v10 = 0;
  }
  swift_release();
  id v11 = [self defaultCenter];
  if (qword_D7E18 != -1) {
    swift_once();
  }
  NSNotificationName v12 = backgroundColorChangedNotification;
  sub_7AF4(&qword_DB4E0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_A9C60;
  sub_A5DF0();
  sub_A7670();
  uint64_t v14 = (uint64_t *)(v1 + OBJC_IVAR___AXLTSettingsManager_backgroundColor);
  swift_beginAccess();
  uint64_t v15 = *v14;
  *(void *)(inited + 96) = &type metadata for Color;
  *(void *)(inited + 72) = v15;
  swift_retain();
  sub_6BC0(inited);
  Class isa = sub_A7130().super.isa;
  swift_bridgeObjectRelease();
  [v11 postNotificationName:v12 object:0 userInfo:isa];

  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    [Strong backgroundColorDidChange];
    swift_unknownObjectRelease();
  }
}

id AXLTSettingsManager.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AXLTSettingsManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AXLTSettingsManager()
{
  return self;
}

uint64_t sub_A5438@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for AXLTSettingsManager();
  uint64_t result = sub_A6070();
  *a1 = result;
  return result;
}

UIFont_optional __swiftcall AXLTSettingsManager.fontObjc()()
{
  uint64_t v0 = self;
  if (qword_D7E48 != -1) {
    swift_once();
  }
  id v1 = [v0 preferredFontForTextStyle:textFontStyle];

  objc_super v2 = (objc_class *)v1;
  result.value.super.Class isa = v2;
  result.is_nil = v3;
  return result;
}

UIColor_optional __swiftcall AXLTSettingsManager.textColorObjc()()
{
  uint64_t v0 = (objc_class *)sub_A55CC();
  result.value.super.Class isa = v0;
  result.is_nil = v1;
  return result;
}

UIColor_optional __swiftcall AXLTSettingsManager.backgroundColorObjc()()
{
  uint64_t v0 = (objc_class *)sub_A55CC();
  result.value.super.Class isa = v0;
  result.is_nil = v1;
  return result;
}

uint64_t sub_A55CC()
{
  return sub_A7580();
}

id sub_A5650()
{
  sub_11C10(0, &qword_D9DD0);
  swift_beginAccess();
  swift_retain();
  uint64_t v0 = (void *)sub_A7580();

  return v0;
}

Swift::Bool __swiftcall AXLTSettingsManager.transcriptionEnabledObjc()()
{
  return _AXSLiveTranscriptionEnabled() != 0;
}

uint64_t sub_A571C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_A5774(uint64_t a1)
{
  return sub_A2E64(a1, *(void ***)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_A577C(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_A57CC(uint64_t a1)
{
  return sub_A31EC(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_A57D4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_A581C()
{
  dlerror();
  uint64_t v0 = abort_report_np();
  sub_A5840(v0);
}

void sub_A5840()
{
  uint64_t v0 = abort_report_np();
  sub_A5868(v0);
}

void sub_A5868()
{
}

uint64_t sub_A5890()
{
  return Notification.description.getter();
}

uint64_t sub_A58A0()
{
  return static Notification._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_A58B0()
{
  return Notification.object.getter();
}

uint64_t sub_A58C0()
{
  return Notification.userInfo.getter();
}

uint64_t sub_A58D0()
{
  return type metadata accessor for Notification();
}

uint64_t sub_A58E0()
{
  return AttributeScopes.SwiftUIAttributes.underlineStyle.getter();
}

uint64_t sub_A58F0()
{
  return AttributedString.subscript.setter();
}

uint64_t sub_A5900()
{
  return AttributedString.init(stringLiteral:)();
}

uint64_t sub_A5910()
{
  return AttributedString.append<A>(_:)();
}

uint64_t sub_A5920()
{
  return type metadata accessor for AttributedString();
}

uint64_t sub_A5930()
{
  return AttributedString.init(_:attributes:)();
}

uint64_t sub_A5940()
{
  return AttributeContainer.init()();
}

uint64_t sub_A5950()
{
  return type metadata accessor for AttributeContainer();
}

uint64_t sub_A5960()
{
  return AttributeDynamicLookup.subscript.getter();
}

uint64_t sub_A5970()
{
  return _convertErrorToNSError(_:)();
}

uint64_t sub_A5980()
{
  return _convertNSErrorToError(_:)();
}

void sub_A5990(NSURL *retstr@<X8>)
{
}

uint64_t sub_A59A0()
{
  return URL.init(string:)();
}

uint64_t sub_A59B0()
{
  return type metadata accessor for URL();
}

uint64_t sub_A59C0()
{
  return Data.init(referencing:)();
}

uint64_t _s19LiveSpeechUIService0aB5StoreC015_lastWillReplayB4Date33_4A0AB17BFF9235D7F87EB31E9A8C2185LL7Combine9PublishedVy10Foundation0H0VGvpfi_0()
{
  return static Date.distantPast.getter();
}

NSDate sub_A59E0()
{
  return Date._bridgeToObjectiveC()();
}

uint64_t sub_A59F0()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_A5A00()
{
  return Date.init()();
}

uint64_t sub_A5A10()
{
  return type metadata accessor for Date();
}

uint64_t sub_A5A20()
{
  return type metadata accessor for Locale();
}

uint64_t sub_A5A30()
{
  return type metadata accessor for CGPathFillRule();
}

uint64_t sub_A5A50()
{
  return static CGFloat._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t sub_A5A60()
{
  return static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t sub_A5A70()
{
  return static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_A5A80()
{
  return isFeatureEnabled(_:)();
}

uint64_t sub_A5A90()
{
  return type metadata accessor for TTSSpeechQueue.QueuingBehavior();
}

uint64_t sub_A5AA0()
{
  return type metadata accessor for TTSSpeechQueue.IsoPrioritizedBehavior();
}

uint64_t sub_A5AB0()
{
  return dispatch thunk of CoreSynthesizer.mixToTelephonyUplink.setter();
}

uint64_t sub_A5AC0()
{
  return dispatch thunk of CoreSynthesizer.audioSession.getter();
}

uint64_t sub_A5AD0()
{
  return dispatch thunk of CoreSynthesizer.audioSession.setter();
}

uint64_t sub_A5AE0()
{
  return dispatch thunk of CoreSynthesizer.audioSessionAutomaticallyDeactivatesAfterSpeaking.setter();
}

uint64_t sub_A5AF0()
{
  return type metadata accessor for CoreSynthesizer.Event();
}

uint64_t sub_A5B00()
{
  return CoreSynthesizer.Voice.description.getter();
}

uint64_t sub_A5B10()
{
  return CoreSynthesizer.Voice.id.getter();
}

uint64_t sub_A5B20()
{
  return CoreSynthesizer.Voice.name.getter();
}

uint64_t sub_A5B30()
{
  return static CoreSynthesizer.Voice.Trait.personal.getter();
}

uint64_t sub_A5B40()
{
  return type metadata accessor for CoreSynthesizer.Voice.Trait();
}

uint64_t sub_A5B50()
{
  return CoreSynthesizer.Voice.traits.getter();
}

uint64_t sub_A5B60()
{
  return type metadata accessor for CoreSynthesizer.Voice();
}

uint64_t sub_A5B70()
{
  return type metadata accessor for CoreSynthesizer.Marker.Mark();
}

uint64_t sub_A5B80()
{
  return CoreSynthesizer.Marker.mark.getter();
}

uint64_t sub_A5B90()
{
  return type metadata accessor for CoreSynthesizer.Marker();
}

uint64_t sub_A5BA0()
{
  return dispatch thunk of CoreSynthesizer.enqueue(utterance:)();
}

uint64_t sub_A5BB0()
{
  return type metadata accessor for CoreSynthesizer.Utterance.Speech();
}

uint64_t sub_A5BC0()
{
  return static CoreSynthesizer.Utterance.ReplacementOptions.emoji.getter();
}

uint64_t sub_A5BD0()
{
  return type metadata accessor for CoreSynthesizer.Utterance.ReplacementOptions();
}

uint64_t sub_A5BE0()
{
  return CoreSynthesizer.Utterance.init(id:speech:voice:priority:behavior:isoPrioritizedBehavior:replacementOptions:)();
}

uint64_t sub_A5BF0()
{
  return type metadata accessor for CoreSynthesizer.Utterance();
}

uint64_t sub_A5C00()
{
  return CoreSynthesizer.__allocating_init()();
}

uint64_t sub_A5C10()
{
  return type metadata accessor for CoreSynthesizer();
}

uint64_t sub_A5C20()
{
  return VoiceSelection.rate.getter();
}

uint64_t sub_A5C30()
{
  return VoiceSelection.pitch.getter();
}

uint64_t sub_A5C40()
{
  return VoiceSelection.volume.getter();
}

uint64_t sub_A5C50()
{
  return VoiceSelection.voiceId.getter();
}

uint64_t sub_A5C60()
{
  return type metadata accessor for VoiceSelection();
}

uint64_t sub_A5C70()
{
  return dispatch thunk of AXSetting.stream.getter();
}

uint64_t sub_A5C80()
{
  return AXLTCaption.actionType.getter();
}

uint64_t sub_A5C90()
{
  return AXLTCaption.actionType.setter();
}

uint64_t sub_A5CA0()
{
  return AXLTCaption.placeholder.getter();
}

uint64_t sub_A5CB0()
{
  return AXLTCaption.placeholder.setter();
}

uint64_t sub_A5CC0()
{
  return AXLTCaption.init(id:appID:appName:time:text:segments:placeholder:actionType:)();
}

uint64_t sub_A5CD0()
{
  return AXLTCaption.id.getter();
}

uint64_t sub_A5CE0()
{
  return AXLTCaption.text.getter();
}

uint64_t sub_A5CF0()
{
  return AXLTCaption.text.setter();
}

uint64_t sub_A5D00()
{
  return AXLTCaption.time.getter();
}

uint64_t sub_A5D10()
{
  return AXLTCaption.appID.getter();
}

uint64_t sub_A5D20()
{
  return AXLTCaption.appName.getter();
}

uint64_t sub_A5D30()
{
  return AXLTCaption.segments.getter();
}

uint64_t sub_A5D40()
{
  return AXLTCaption.segments.setter();
}

uint64_t sub_A5D50()
{
  return type metadata accessor for AXLTCaption();
}

uint64_t sub_A5D60()
{
  return static AXLTUtilities.AXLTLocString(_:)();
}

uint64_t sub_A5D70()
{
  return mergeCaptions(_:_:)();
}

uint64_t sub_A5D80()
{
  return placeholderID.getter();
}

uint64_t sub_A5D90()
{
  return placeholderName.getter();
}

uint64_t sub_A5DA0()
{
  return placeholderText.getter();
}

uint64_t sub_A5DB0()
{
  return placeholderMicName.getter();
}

uint64_t sub_A5DC0()
{
  return textLinesNumberMax.getter();
}

uint64_t sub_A5DD0()
{
  return textLinesNumberMin.getter();
}

uint64_t sub_A5DE0()
{
  return captionTextTimeLimit.getter();
}

uint64_t sub_A5DF0()
{
  return notificationValueKey.getter();
}

uint64_t sub_A5E00()
{
  return placeholderPausedText.getter();
}

uint64_t sub_A5E10()
{
  return type metadata accessor for AXLTCaptionActionsType();
}

uint64_t sub_A5E20()
{
  return historyTimeIntervalMax.getter();
}

uint64_t sub_A5E30()
{
  return micCaptionTextTimeLimit.getter();
}

uint64_t sub_A5E40()
{
  return placeholderTimeInterval.getter();
}

uint64_t sub_A5E50()
{
  return historyCheckTimeInterval.getter();
}

uint64_t sub_A5E60()
{
  return textOnScreenTimeInterval.getter();
}

uint64_t sub_A5E70()
{
  return historyTimeIntervalMaxBraille.getter();
}

uint64_t sub_A5E80()
{
  return textLinesAccessibilityNumberMax.getter();
}

uint64_t sub_A5E90()
{
  return LiveCaptionsLog.getter();
}

uint64_t sub_A5EA0()
{
  return type metadata accessor for LiveCaptionsError();
}

uint64_t sub_A5EB0()
{
  return LiveCaptionsError.init(_:)();
}

uint64_t sub_A5EC0()
{
  return LiveSpeechLog.getter();
}

uint64_t sub_A5ED0()
{
  return type metadata accessor for LiveSpeechError();
}

uint64_t sub_A5EE0()
{
  return LiveSpeechError.init(_:)();
}

uint64_t sub_A5EF0()
{
  return LiveSpeechService.observeFavoriteLiveSpeechPhrasesChanges(_:)();
}

uint64_t sub_A5F00()
{
  return LiveSpeechService.liveSpeechPhrases.getter();
}

uint64_t sub_A5F10()
{
  return static LiveSpeechService.shared.getter();
}

uint64_t sub_A5F20()
{
  return LiveSpeechService.inputMode.getter();
}

uint64_t sub_A5F30()
{
  return LiveSpeechService.inputMode.setter();
}

uint64_t sub_A5F40()
{
  return type metadata accessor for LiveSpeechService();
}

uint64_t sub_A5F50()
{
  return static LiveSpeechAnalytics.didSpeak(inputMode:mixToUplink:voiceName:language:)();
}

uint64_t sub_A5F60()
{
  return LiveSpeechInputMode.systemImageName.getter();
}

uint64_t sub_A5F70()
{
  return LiveSpeechInputMode.title.getter();
}

uint64_t sub_A5F80()
{
  return type metadata accessor for LiveSpeechInputMode();
}

uint64_t sub_A5F90(Swift::String a1)
{
  return LiveSpeechCaptionsServicesLocString(_:)(a1)._countAndFlagsBits;
}

uint64_t sub_A5FA0()
{
  return LiveSpeechLiveCaptionsUIServiceMessageID.init(rawValue:)();
}

uint64_t sub_A5FB0()
{
  return type metadata accessor for LiveSpeechLiveCaptionsUIServiceMessageID();
}

uint64_t sub_A5FC0()
{
  return LSLCCommonLog.getter();
}

uint64_t sub_A5FD0()
{
  return os_log(_:dso:log:_:_:)();
}

uint64_t sub_A5FE0()
{
  return Logger.logObject.getter();
}

uint64_t sub_A5FF0()
{
  return type metadata accessor for Logger();
}

uint64_t sub_A6000()
{
  return static TTSVBLiveSpeechSupport.phraseTextKey.getter();
}

uint64_t sub_A6010()
{
  return static TTSVBLiveSpeechSupport.phraseInputIDKey.getter();
}

uint64_t sub_A6020()
{
  return dispatch thunk of TTSVBAccessManager.isDeviceLocked.getter();
}

uint64_t sub_A6030()
{
  return type metadata accessor for TTSVBAccessManager();
}

uint64_t sub_A6040()
{
  return UIMutableTraits.legibilityWeight.setter();
}

uint64_t sub_A6050()
{
  return UIMutableTraits.preferredContentSizeCategory.setter();
}

uint64_t sub_A6060()
{
  return static ObservableObject.environmentStore.getter();
}

uint64_t sub_A6070()
{
  return ObservableObject<>.objectWillChange.getter();
}

uint64_t sub_A6080()
{
  return ConnectablePublisher.autoconnect()();
}

uint64_t sub_A6090()
{
  return Published.init(initialValue:)();
}

uint64_t sub_A60A0()
{
  return Published.projectedValue.getter();
}

uint64_t sub_A60B0()
{
  return Published.projectedValue.setter();
}

uint64_t sub_A60C0()
{
  return static Published.subscript.modify();
}

uint64_t sub_A60D0()
{
  return static Published.subscript.getter();
}

uint64_t sub_A60E0()
{
  return static Published.subscript.setter();
}

uint64_t sub_A60F0()
{
  return type metadata accessor for Published();
}

uint64_t sub_A6100()
{
  return Publisher.receive<A>(on:options:)();
}

uint64_t sub_A6110()
{
  return Publisher<>.sink(receiveValue:)();
}

uint64_t sub_A6120()
{
  return static ButtonRole.destructive.getter();
}

uint64_t sub_A6130()
{
  return type metadata accessor for ButtonRole();
}

uint64_t sub_A6140()
{
  return EdgeInsets.init(_all:)();
}

uint64_t sub_A6150()
{
  return FocusState.wrappedValue.setter();
}

uint64_t sub_A6160()
{
  return FocusState.projectedValue.getter();
}

uint64_t _s19LiveSpeechUIService0aB11HUDView_iOSV23_isTextInputViewFocused33_F2BA035E101D43293F5F7FB749375E86LL7SwiftUI10FocusStateVySbGvpfi_0()
{
  return FocusState.init<>()();
}

uint64_t sub_A6180()
{
  return ScrollView.init(_:showsIndicators:content:)();
}

uint64_t sub_A6190()
{
  return TapGesture.init(count:)();
}

uint64_t sub_A61A0()
{
  return type metadata accessor for TapGesture();
}

uint64_t sub_A61B0()
{
  return DragGesture.init<A>(minimumDistance:coordinateSpace:)();
}

uint64_t sub_A61C0()
{
  return DragGesture.Value.translation.getter();
}

uint64_t sub_A61D0()
{
  return DragGesture.Value.predictedEndTranslation.getter();
}

uint64_t sub_A61E0()
{
  return type metadata accessor for DragGesture.Value();
}

uint64_t sub_A61F0()
{
  return type metadata accessor for DragGesture();
}

uint64_t sub_A6200()
{
  return type metadata accessor for Environment.Content();
}

uint64_t sub_A6210()
{
  return static GestureMask.all.getter();
}

uint64_t sub_A6220()
{
  return StateObject.wrappedValue.getter();
}

uint64_t sub_A6230()
{
  return static VerticalEdge.Set.all.getter();
}

uint64_t sub_A6240()
{
  return static ViewModifier._makeView(modifier:inputs:body:)();
}

uint64_t sub_A6250()
{
  return static ViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t sub_A6260()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_A6270()
{
  return _FrameLayout.init(width:height:alignment:)();
}

uint64_t sub_A6280()
{
  return AnyShapeStyle.init<A>(_:)();
}

uint64_t sub_A6290()
{
  return GeometryProxy.safeAreaInsets.getter();
}

uint64_t sub_A62A0()
{
  return GeometryProxy.size.getter();
}

uint64_t sub_A62B0()
{
  return GeometryProxy.frame<A>(in:)();
}

uint64_t sub_A62C0()
{
  return type metadata accessor for GeometryProxy();
}

uint64_t sub_A62D0()
{
  return static PreferenceKey._isReadableByHost.getter();
}

uint64_t sub_A62E0()
{
  return static PreferenceKey._includesRemovedValues.getter();
}

uint64_t sub_A62F0()
{
  return type metadata accessor for _TaskModifier();
}

uint64_t sub_A6300()
{
  return withAnimation<A>(_:_:)();
}

uint64_t sub_A6310()
{
  return GeometryReader.init(content:)();
}

uint64_t sub_A6320()
{
  return type metadata accessor for GeometryReader();
}

uint64_t sub_A6330()
{
  return LinearGradient.init(gradient:startPoint:endPoint:)();
}

uint64_t sub_A6340()
{
  return ObservedObject.init(wrappedValue:)();
}

uint64_t sub_A6360()
{
  return _UIHostingView.init(rootView:)();
}

uint64_t sub_A6370()
{
  return static DynamicTypeSize.< infix(_:_:)();
}

uint64_t sub_A6380()
{
  return type metadata accessor for DynamicTypeSize();
}

uint64_t sub_A6390()
{
  return DynamicTypeSize.init(_:)();
}

uint64_t sub_A63A0()
{
  return GraphicsContext.withCGContext(content:)();
}

uint64_t sub_A63B0()
{
  return static LayoutDirection.== infix(_:_:)();
}

uint64_t sub_A63C0()
{
  return type metadata accessor for LayoutDirection();
}

uint64_t sub_A63D0()
{
  return ModifiedContent<>.accessibility(identifier:)();
}

uint64_t sub_A63E0()
{
  return ModifiedContent<>.accessibility(sortPriority:)();
}

uint64_t sub_A63F0()
{
  return ModifiedContent<>.accessibility(hidden:)();
}

uint64_t sub_A6400()
{
  return ModifiedContent<>.accessibilityAddTraits(_:)();
}

uint64_t sub_A6410()
{
  return ModifiedContent<>.accessibilityIdentifier(_:)();
}

uint64_t sub_A6420()
{
  return ModifiedContent<>.accessibilityCustomAttribute(_:value:)();
}

uint64_t sub_A6430()
{
  return static SafeAreaRegions.all.getter();
}

uint64_t sub_A6440()
{
  return ScrollViewProxy.setContentOffset(_:)();
}

uint64_t sub_A6450()
{
  return type metadata accessor for ScrollViewProxy();
}

uint64_t sub_A6460()
{
  return type metadata accessor for LegibilityWeight();
}

uint64_t sub_A6470()
{
  return PlainButtonStyle.init()();
}

uint64_t sub_A6480()
{
  return type metadata accessor for PlainButtonStyle();
}

uint64_t sub_A6490()
{
  return type metadata accessor for RoundedRectangle();
}

uint64_t sub_A64A0()
{
  return _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
}

uint64_t sub_A64B0()
{
  return EnvironmentObject.error()();
}

uint64_t sub_A64C0()
{
  return EnvironmentObject.init()();
}

uint64_t sub_A64D0()
{
  return EnvironmentValues.dynamicTypeSize.getter();
}

uint64_t sub_A64E0()
{
  return EnvironmentValues.dynamicTypeSize.setter();
}

uint64_t sub_A64F0()
{
  return EnvironmentValues.foregroundColor.getter();
}

uint64_t sub_A6500()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_A6510()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_A6520()
{
  return EnvironmentValues.layoutDirection.setter();
}

uint64_t sub_A6530()
{
  return EnvironmentValues.legibilityWeight.getter();
}

uint64_t sub_A6540()
{
  return EnvironmentValues.legibilityWeight.setter();
}

uint64_t sub_A6550()
{
  return EnvironmentValues.verticalSizeClass.getter();
}

uint64_t sub_A6560()
{
  return EnvironmentValues.verticalSizeClass.setter();
}

uint64_t sub_A6570()
{
  return EnvironmentValues.listSectionSpacing.getter();
}

uint64_t sub_A6580()
{
  return EnvironmentValues.listSectionSpacing.setter();
}

uint64_t sub_A6590()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t sub_A65A0()
{
  return EnvironmentValues.horizontalSizeClass.setter();
}

uint64_t sub_A65B0()
{
  return EnvironmentValues.font.getter();
}

uint64_t sub_A65C0()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_A65D0()
{
  return EnvironmentValues.tint.getter();
}

uint64_t sub_A65E0()
{
  return EnvironmentValues.tint.setter();
}

uint64_t sub_A65F0()
{
  return EnvironmentValues.locale.getter();
}

uint64_t sub_A6600()
{
  return EnvironmentValues.locale.setter();
}

uint64_t sub_A6610()
{
  return EnvironmentValues.isEnabled.getter();
}

uint64_t sub_A6620()
{
  return EnvironmentValues.isEnabled.setter();
}

uint64_t sub_A6630()
{
  return EnvironmentValues.lineLimit.getter();
}

uint64_t sub_A6640()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t sub_A6650()
{
  return EnvironmentValues.init()();
}

uint64_t sub_A6660()
{
  return type metadata accessor for EnvironmentValues();
}

uint64_t sub_A6670()
{
  return static VerticalAlignment.lastTextBaseline.getter();
}

uint64_t sub_A6680()
{
  return static VerticalAlignment.top.getter();
}

uint64_t sub_A6690()
{
  return static VerticalAlignment.bottom.getter();
}

uint64_t sub_A66A0()
{
  return static VerticalAlignment.center.getter();
}

uint64_t sub_A66B0()
{
  return type metadata accessor for ColorRenderingMode();
}

uint64_t sub_A66C0()
{
  return static ListSectionSpacing.custom(_:)();
}

uint64_t sub_A66D0()
{
  return type metadata accessor for ListSectionSpacing();
}

uint64_t sub_A66E0()
{
  return type metadata accessor for RoundedCornerStyle();
}

uint64_t sub_A66F0()
{
  return static AccessibilityTraits.isSelected.getter();
}

uint64_t sub_A6700()
{
  return static AccessibilityTraits.isStaticText.getter();
}

uint64_t sub_A6710()
{
  return static AccessibilityTraits.updatesFrequently.getter();
}

uint64_t sub_A6720()
{
  return static AccessibilityTraits.isImage.getter();
}

uint64_t sub_A6730()
{
  return static AccessibilityTraits.isButton.getter();
}

uint64_t sub_A6740()
{
  return type metadata accessor for AccessibilityTraits();
}

uint64_t sub_A6750()
{
  return static HorizontalAlignment.center.getter();
}

uint64_t sub_A6760()
{
  return static HorizontalAlignment.leading.getter();
}

uint64_t sub_A6770()
{
  return static SymbolRenderingMode.hierarchical.getter();
}

uint64_t sub_A6780()
{
  return type metadata accessor for SymbolRenderingMode();
}

uint64_t sub_A6790()
{
  return UIHostingController.init(hostingView:)();
}

uint64_t sub_A67A0()
{
  return UIHostingController.init(rootView:)();
}

uint64_t sub_A67B0()
{
  return dispatch thunk of UIHostingController.rootView.setter();
}

uint64_t sub_A67C0()
{
  return UIViewRepresentable._resetUIView(_:coordinator:destroy:)();
}

uint64_t sub_A67D0()
{
  return static UIViewRepresentable.dismantleUIView(_:coordinator:)();
}

uint64_t sub_A67F0()
{
  return static UIViewRepresentable._layoutOptions(_:)();
}

uint64_t sub_A6800()
{
  return UIViewRepresentable._identifiedViewTree(in:)();
}

uint64_t sub_A6810()
{
  return UIViewRepresentable._overrideLayoutTraits(_:for:)();
}

uint64_t sub_A6820()
{
  return UIViewRepresentable._overrideSizeThatFits(_:in:uiView:)();
}

uint64_t sub_A6830()
{
  return static UIViewRepresentable._modifyBridgedViewInputs(_:)();
}

uint64_t sub_A6840()
{
  return UIViewRepresentable.body.getter();
}

uint64_t sub_A6860()
{
  return _ConditionalContent<>.init(storage:)();
}

uint64_t sub_A6870()
{
  return type metadata accessor for LocalCoordinateSpace();
}

uint64_t sub_A6880()
{
  return type metadata accessor for NamedCoordinateSpace();
}

uint64_t sub_A6890()
{
  return RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)();
}

uint64_t sub_A68A0()
{
  return static ScrollBounceBehavior.basedOnSize.getter();
}

uint64_t sub_A68B0()
{
  return type metadata accessor for ScrollBounceBehavior();
}

uint64_t sub_A68C0()
{
  return type metadata accessor for GlobalCoordinateSpace();
}

uint64_t sub_A68D0()
{
  return InsetGroupedListStyle.init()();
}

uint64_t sub_A68E0()
{
  return type metadata accessor for InsetGroupedListStyle();
}

uint64_t sub_A68F0()
{
  return static ContentMarginPlacement.automatic.getter();
}

uint64_t sub_A6900()
{
  return type metadata accessor for ContentMarginPlacement();
}

uint64_t sub_A6910()
{
  return type metadata accessor for UnevenRoundedRectangle();
}

uint64_t sub_A6920()
{
  return type metadata accessor for UserInterfaceSizeClass();
}

uint64_t sub_A6930()
{
  return static CoordinateSpaceProtocol<>.local.getter();
}

uint64_t sub_A6940()
{
  return static CoordinateSpaceProtocol<>.named<A>(_:)();
}

uint64_t sub_A6950()
{
  return static CoordinateSpaceProtocol<>.global.getter();
}

uint64_t sub_A6960()
{
  return static ScrollIndicatorVisibility.hidden.getter();
}

uint64_t sub_A6970()
{
  return type metadata accessor for ScrollIndicatorVisibility();
}

uint64_t sub_A6980()
{
  return static AccessibilityChildBehavior.ignore.getter();
}

uint64_t sub_A6990()
{
  return static AccessibilityChildBehavior.combine.getter();
}

uint64_t sub_A69A0()
{
  return type metadata accessor for AccessibilityChildBehavior();
}

uint64_t sub_A69B0()
{
  return UIViewRepresentableContext.coordinator.getter();
}

uint64_t sub_A69C0()
{
  return static Log.runtimeIssuesLog.getter();
}

uint64_t sub_A69D0()
{
  return static Axis.Set.horizontal.getter();
}

uint64_t sub_A69E0()
{
  return Axis.Set.init(rawValue:)();
}

uint64_t sub_A69F0()
{
  return static Axis.Set.vertical.getter();
}

uint64_t sub_A6A00()
{
  return static Edge.Set.horizontal.getter();
}

uint64_t sub_A6A10()
{
  return static Edge.Set.all.getter();
}

uint64_t sub_A6A20()
{
  return static Edge.Set.top.getter();
}

uint64_t sub_A6A30()
{
  return static Edge.Set.bottom.getter();
}

uint64_t sub_A6A40()
{
  return static Edge.Set.leading.getter();
}

uint64_t sub_A6A50()
{
  return Edge.Set.init(rawValue:)();
}

uint64_t sub_A6A60()
{
  return static Edge.Set.trailing.getter();
}

uint64_t sub_A6A70()
{
  return static Edge.Set.vertical.getter();
}

uint64_t sub_A6A80()
{
  return type metadata accessor for Font.Design();
}

uint64_t sub_A6A90()
{
  return static Font.Weight.black.getter();
}

uint64_t sub_A6AA0()
{
  return static Font.system(size:weight:design:)();
}

uint64_t sub_A6AB0()
{
  return static Font.headline.getter();
}

uint64_t sub_A6AC0()
{
  return Font.init(_:)();
}

uint64_t sub_A6AD0()
{
  return List<>.init(content:)();
}

uint64_t sub_A6AE0()
{
  return Text.foregroundColor(_:)();
}

uint64_t sub_A6AF0()
{
  return static Text.+ infix(_:_:)();
}

uint64_t sub_A6B00()
{
  return Text.font(_:)();
}

uint64_t sub_A6B10()
{
  return static Text.LineStyle.Pattern.dot.getter();
}

uint64_t sub_A6B20()
{
  return type metadata accessor for Text.LineStyle.Pattern();
}

uint64_t sub_A6B30()
{
  return Text.LineStyle.init(pattern:color:)();
}

uint64_t sub_A6B40()
{
  return type metadata accessor for Text.LineStyle();
}

uint64_t sub_A6B50()
{
  return Text.init(_:)();
}

uint64_t sub_A6B60()
{
  return Text.init<A>(_:)();
}

uint64_t sub_A6B70()
{
  return static View._makeView(view:inputs:)();
}

uint64_t sub_A6B80()
{
  return static View._makeViewList(view:inputs:)();
}

uint64_t sub_A6B90()
{
  return View.buttonStyle<A>(_:)();
}

uint64_t sub_A6BA0()
{
  return View.onTapGesture(count:perform:)();
}

uint64_t sub_A6BB0()
{
  return View.swipeActions<A>(edge:allowsFullSwipe:content:)();
}

uint64_t sub_A6BC0()
{
  return View.accessibility(identifier:)();
}

uint64_t sub_A6BD0()
{
  return View.accessibility(removeTraits:)();
}

uint64_t sub_A6BE0()
{
  return View.accessibility(label:)();
}

uint64_t sub_A6BF0()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_A6C00()
{
  return View.contentMargins(_:_:for:)();
}

uint64_t sub_A6C10()
{
  return View.dynamicTypeSize<A>(_:)();
}

uint64_t sub_A6C20()
{
  return View.listRowSeparator(_:edges:)();
}

uint64_t sub_A6C30()
{
  return View.scrollIndicators(_:axes:)();
}

uint64_t sub_A6C40()
{
  return View.accessibilityLabel<A>(_:)();
}

uint64_t sub_A6C50()
{
  return View.allowsSecureDrawing()();
}

uint64_t sub_A6C60()
{
  return View.simultaneousGesture<A>(_:including:)();
}

uint64_t sub_A6C70()
{
  return View.accessibilityElement(children:)();
}

uint64_t sub_A6C80()
{
  return View.scrollBounceBehavior(_:axes:)();
}

uint64_t sub_A6C90()
{
  return View.accessibilityAddTraits(_:)();
}

uint64_t sub_A6CA0()
{
  return View.accessibilityIdentifier(_:)();
}

uint64_t sub_A6CB0()
{
  return View.scrollContentBackground(_:)();
}

uint64_t sub_A6CC0()
{
  return View.focused(_:)();
}

uint64_t sub_A6CD0()
{
  return View.gesture<A>(_:including:)();
}

uint64_t sub_A6CE0()
{
  return View.onChange<A>(of:initial:_:)();
}

uint64_t sub_A6CF0()
{
  return View.onChange<A>(of:initial:_:)();
}

uint64_t sub_A6D00()
{
  return View.listStyle<A>(_:)();
}

uint64_t sub_A6D10()
{
  return Color.cgColor.getter();
}

uint64_t sub_A6D20()
{
  return Color.init(uiColor:)();
}

uint64_t sub_A6D30()
{
  return type metadata accessor for Color.RGBColorSpace();
}

uint64_t sub_A6D40()
{
  return static Color.== infix(_:_:)();
}

uint64_t sub_A6D50()
{
  return static Color.red.getter();
}

uint64_t sub_A6D60()
{
  return static Color.blue.getter();
}

uint64_t sub_A6D70()
{
  return static Color.gray.getter();
}

uint64_t sub_A6D80()
{
  return static Color.black.getter();
}

uint64_t sub_A6D90()
{
  return static Color.clear.getter();
}

uint64_t sub_A6DA0()
{
  return static Color.white.getter();
}

uint64_t sub_A6DB0()
{
  return static Color.orange.getter();
}

uint64_t sub_A6DC0()
{
  return Color.opacity(_:)();
}

uint64_t sub_A6DD0()
{
  return static Color.primary.getter();
}

uint64_t sub_A6DE0()
{
  return Color.init(_:white:opacity:)();
}

uint64_t sub_A6DF0()
{
  return Color.init(_:)();
}

uint64_t sub_A6E00()
{
  return Image.init(uiImage:)();
}

uint64_t sub_A6E10()
{
  return Image.init(systemName:)();
}

uint64_t sub_A6E20()
{
  return type metadata accessor for Image.ResizingMode();
}

uint64_t sub_A6E30()
{
  return Image.init(_internalSystemName:)();
}

uint64_t sub_A6E40()
{
  return Image.symbolRenderingMode(_:)();
}

uint64_t sub_A6E50()
{
  return Image.resizable(capInsets:resizingMode:)();
}

uint64_t sub_A6E60()
{
  return Label<>.init<A>(_:systemImage:)();
}

uint64_t sub_A6E70()
{
  return State.init(wrappedValue:)();
}

uint64_t sub_A6E80()
{
  return State.wrappedValue.getter();
}

uint64_t sub_A6E90()
{
  return State.wrappedValue.setter();
}

uint64_t sub_A6EA0()
{
  return State.projectedValue.getter();
}

uint64_t sub_A6EB0()
{
  return type metadata accessor for State();
}

uint64_t sub_A6EC0()
{
  return Button.init(role:action:label:)();
}

uint64_t sub_A6ED0()
{
  return Button.init(action:label:)();
}

uint64_t sub_A6EE0()
{
  return Canvas<>.init(opaque:colorMode:rendersAsynchronously:renderer:)();
}

uint64_t sub_A6EF0()
{
  return AnyView.init<A>(_:)();
}

uint64_t sub_A6F00()
{
  return Binding.wrappedValue.getter();
}

uint64_t sub_A6F10()
{
  return Binding.wrappedValue.setter();
}

uint64_t sub_A6F20()
{
  return Binding.projectedValue.getter();
}

uint64_t sub_A6F30()
{
  return type metadata accessor for Capsule();
}

uint64_t sub_A6F40()
{
  return ForEach<>.init(_:id:content:)();
}

uint64_t sub_A6F50()
{
  return ForEach<>.init(_:content:)();
}

uint64_t sub_A6F60()
{
  return Gesture.onEnded(_:)();
}

uint64_t sub_A6F70()
{
  return Gesture<>.onChanged(_:)();
}

uint64_t sub_A6F80()
{
  return Section<>.init(content:)();
}

uint64_t sub_A6F90()
{
  return AnyShape.init<A>(_:)();
}

uint64_t sub_A6FA0()
{
  return Gradient.init(colors:)();
}

uint64_t sub_A6FB0()
{
  return static Material.thin.getter();
}

uint64_t sub_A6FC0()
{
  return static Material.thick.getter();
}

uint64_t sub_A6FD0()
{
  return static Material.regular.getter();
}

uint64_t sub_A6FE0()
{
  return type metadata accessor for Material();
}

uint64_t sub_A6FF0()
{
  return static Alignment.topLeading.getter();
}

uint64_t sub_A7000()
{
  return static Alignment.bottomLeading.getter();
}

uint64_t sub_A7010()
{
  return static Alignment.top.getter();
}

uint64_t sub_A7020()
{
  return static Alignment.bottom.getter();
}

uint64_t sub_A7030()
{
  return static Alignment.center.getter();
}

uint64_t sub_A7040()
{
  return static Alignment.leading.getter();
}

uint64_t sub_A7050()
{
  return Animation.repeatCount(_:autoreverses:)();
}

uint64_t sub_A7060()
{
  return Animation.delay(_:)();
}

uint64_t sub_A7070()
{
  return static Animation.linear(duration:)();
}

uint64_t sub_A7080()
{
  return static Animation.default.getter();
}

uint64_t sub_A7090()
{
  return static Animation.easeInOut(duration:)();
}

uint64_t sub_A70A0()
{
  return static UnitPoint.top.getter();
}

uint64_t sub_A70B0()
{
  return static UnitPoint.bottom.getter();
}

uint64_t sub_A70C0()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t sub_A70D0()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t sub_A70E0()
{
  return static DispatchQoS.userInitiated.getter();
}

uint64_t sub_A70F0()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t sub_A7100()
{
  return static DispatchTime.now()();
}

uint64_t sub_A7110()
{
  return type metadata accessor for DispatchTime();
}

uint64_t sub_A7120()
{
  return + infix(_:_:)();
}

NSDictionary sub_A7130()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_A7140()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_A7150()
{
  return Dictionary.description.getter();
}

uint64_t sub_A7160()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t sub_A7170()
{
  return dispatch thunk of Hashable.hashValue.getter();
}

uint64_t sub_A7180()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t sub_A7190()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString sub_A71A0()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_A71B0()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t sub_A71C0()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t sub_A71D0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_A71E0()
{
  return String.init(format:_:)();
}

uint64_t sub_A71F0()
{
  return String.init<A>(describing:)();
}

uint64_t sub_A7200()
{
  return static String._fromSubstring(_:)();
}

uint64_t sub_A7210()
{
  return String.hash(into:)();
}

uint64_t sub_A7220()
{
  return String.count.getter();
}

uint64_t sub_A7230()
{
  return String.index(_:offsetBy:limitedBy:)();
}

void sub_A7240(Swift::String a1)
{
}

Swift::Int sub_A7250()
{
  return String.UTF8View._foreignCount()();
}

uint64_t sub_A7260()
{
  return String.subscript.getter();
}

uint64_t sub_A7270()
{
  return String.subscript.getter();
}

uint64_t sub_A7280()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t sub_A7290()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray sub_A72A0()
{
  return Array._bridgeToObjectiveC()();
}

uint64_t sub_A72B0()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_A72C0()
{
  return specialized Array._endMutation()();
}

uint64_t sub_A72D0()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_A72E0()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t sub_A72F0()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t sub_A7300()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t sub_A7310()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_A7320()
{
  return static MainActor.shared.getter();
}

uint64_t sub_A7330()
{
  return type metadata accessor for MainActor();
}

uint64_t sub_A7340()
{
  return static TaskPriority.high.getter();
}

uint64_t sub_A7350()
{
  return TaskPriority.rawValue.getter();
}

uint64_t sub_A7360()
{
  return type metadata accessor for TaskPriority();
}

uint64_t sub_A7380()
{
  return AsyncThrowingStream.makeAsyncIterator()();
}

uint64_t sub_A73A0()
{
  return Double.description.getter();
}

uint64_t sub_A73C0()
{
  return CGContextRef.fillPath(using:)();
}

uint64_t sub_A73E0()
{
  return AXPreferences.LiveSpeech.$keyboardVoiceSelections.getter();
}

uint64_t sub_A73F0()
{
  return static AXPreferences.shared.getter();
}

uint64_t sub_A7400()
{
  return type metadata accessor for AXPreferences();
}

uint64_t sub_A7410()
{
  return static os_log_type_t.info.getter();
}

uint64_t sub_A7420()
{
  return static os_log_type_t.debug.getter();
}

uint64_t sub_A7430()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_A7440()
{
  return static os_log_type_t.fault.getter();
}

uint64_t sub_A7450()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_A7460()
{
  return CGMutablePathRef.addRoundedRect(in:cornerWidth:cornerHeight:transform:)();
}

uint64_t sub_A7470()
{
  return type metadata accessor for LiveSpeechPhrase();
}

uint64_t sub_A7480()
{
  return static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
}

uint64_t sub_A7490()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t sub_A74A0()
{
  return OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
}

uint64_t sub_A74B0()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t sub_A74C0()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t sub_A74D0()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_A74E0()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t sub_A74F0()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t sub_A7500()
{
  return UITraitCollection.init(mutations:)();
}

uint64_t sub_A7510()
{
  return type metadata accessor for LiveSpeechCategory();
}

uint64_t sub_A7520()
{
  return type metadata accessor for NSNotificationCenter.Publisher();
}

uint64_t sub_A7530()
{
  return NSNotificationCenter.publisher(for:object:)();
}

uint64_t sub_A7540()
{
  return UIContentSizeCategory.isAccessibilityCategory.getter();
}

uint64_t sub_A7550()
{
  return static UIContentSizeCategory.> infix(_:_:)();
}

uint64_t sub_A7560()
{
  return type metadata accessor for NSTimer.TimerPublisher();
}

uint64_t sub_A7570()
{
  return static NSTimer.publish(every:tolerance:on:in:options:)();
}

uint64_t sub_A7580()
{
  return UIColor.init(_:)();
}

NSNumber sub_A7590(Swift::Bool BOOLeanLiteral)
{
  return NSNumber.init(BOOLeanLiteral:)(BOOLeanLiteral);
}

Swift::Int sub_A75A0(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t sub_A75B0()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t sub_A75C0()
{
  return _NSRange.init<A, B>(_:in:)();
}

uint64_t sub_A75D0()
{
  return type metadata accessor for NSRunLoop.SchedulerOptions();
}

uint64_t sub_A75E0()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t sub_A75F0()
{
  return type metadata accessor for Optional();
}

uint64_t sub_A7600()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_A7610()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t sub_A7620()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t sub_A7630()
{
  return dispatch thunk of SetAlgebra.isSuperset(of:)();
}

uint64_t sub_A7640()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

Swift::Int sub_A7650(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t sub_A7660()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t sub_A7670()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t sub_A7680()
{
  return _StringGuts.copyUTF8(into:)();
}

void sub_A7690(Swift::Int a1)
{
}

uint64_t sub_A76A0()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t sub_A76B0()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_A76C0()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t sub_A76D0()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t sub_A76E0()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t sub_A76F0()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t sub_A7700()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t sub_A7710()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t sub_A7720()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_A7730()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_A7740()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t sub_A7750()
{
  return _CocoaArrayWrapper.subscript.getter();
}

uint64_t sub_A7760()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t sub_A7770()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t sub_A7780()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t sub_A7790()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t sub_A77A0()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

Swift::Int sub_A77B0(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases, string);
}

Swift::Int sub_A77C0(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t sub_A77D0()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_A77F0()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t sub_A7800()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_A7810()
{
  return type metadata accessor for __ContiguousArrayStorageBase();
}

uint64_t sub_A7820()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_A7830()
{
  return Error.localizedDescription.getter();
}

uint64_t sub_A7850()
{
  return Hasher.init(_seed:)();
}

void sub_A7860(Swift::UInt a1)
{
}

void sub_A7870(Swift::UInt8 a1)
{
}

void sub_A7880(Swift::UInt64 a1)
{
}

Swift::Int sub_A7890()
{
  return Hasher._finalize()();
}

uint64_t AXDeviceHasJindo()
{
  return _AXDeviceHasJindo();
}

uint64_t AXDeviceIsPad()
{
  return _AXDeviceIsPad();
}

uint64_t AXDeviceIsPadMiniIdiom()
{
  return _AXDeviceIsPadMiniIdiom();
}

uint64_t AXDeviceIsPhone()
{
  return _AXDeviceIsPhone();
}

uint64_t AXDeviceIsRealityDevice()
{
  return _AXDeviceIsRealityDevice();
}

uint64_t AXDeviceSupportsLiveSpeechCategory()
{
  return _AXDeviceSupportsLiveSpeechCategory();
}

uint64_t AXLogLiveTranscription()
{
  return _AXLogLiveTranscription();
}

uint64_t AnalyticsSendEventLazy()
{
  return _AnalyticsSendEventLazy();
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return _CFNotificationCenterGetDarwinNotifyCenter();
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
}

CGColorRef CGColorCreateGenericGray(CGFloat gray, CGFloat alpha)
{
  return _CGColorCreateGenericGray(gray, alpha);
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return _CGPathCreateMutable();
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return _CGRectContainsPoint(rect, point);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return _CGRectEqualToRect(rect1, rect2);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  return _CGRectGetHeight(rect);
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  return _CGRectGetMaxY(rect);
}

CGFloat CGRectGetMinY(CGRect rect)
{
  return _CGRectGetMinY(rect);
}

CGFloat CGRectGetWidth(CGRect rect)
{
  return _CGRectGetWidth(rect);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return _CGRectIsEmpty(rect);
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  return _CGRectUnion(r1, r2);
}

BOOL CGSizeEqualToSize(CGSize size1, CGSize size2)
{
  return _CGSizeEqualToSize(size1, size2);
}

CGSize CGSizeFromString(NSString *string)
{
  CGSize v3 = _CGSizeFromString(string);
  double height = v3.height;
  double width = v3.width;
  result.double height = height;
  result.double width = width;
  return result;
}

uint64_t LiveSpeechLogCommon()
{
  return _LiveSpeechLogCommon();
}

NSString *__cdecl NSStringFromCGSize(CGSize size)
{
  return _NSStringFromCGSize(size);
}

void UIAccessibilityPostNotification(UIAccessibilityNotifications notification, id argument)
{
}

uint64_t _AXSBrailleInputDeviceConnected()
{
  return __AXSBrailleInputDeviceConnected();
}

uint64_t _AXSCopyPreferredContentSizeCategoryNameGlobal()
{
  return __AXSCopyPreferredContentSizeCategoryNameGlobal();
}

uint64_t _AXSEnhanceTextLegibilityEnabled()
{
  return __AXSEnhanceTextLegibilityEnabled();
}

uint64_t _AXSLiveCaptionsBoldTextEnabled()
{
  return __AXSLiveCaptionsBoldTextEnabled();
}

uint64_t _AXSLiveCaptionsCopyContentSizeCategoryName()
{
  return __AXSLiveCaptionsCopyContentSizeCategoryName();
}

uint64_t _AXSLiveCaptionsNubbitIdleOpacity()
{
  return __AXSLiveCaptionsNubbitIdleOpacity();
}

uint64_t _AXSLiveSpeechEnabled()
{
  return __AXSLiveSpeechEnabled();
}

uint64_t _AXSLiveSpeechSetEnabled()
{
  return __AXSLiveSpeechSetEnabled();
}

uint64_t _AXSLiveTranscriptionCopyBackgroundColorData()
{
  return __AXSLiveTranscriptionCopyBackgroundColorData();
}

uint64_t _AXSLiveTranscriptionCopyTextColorData()
{
  return __AXSLiveTranscriptionCopyTextColorData();
}

uint64_t _AXSLiveTranscriptionEnabled()
{
  return __AXSLiveTranscriptionEnabled();
}

uint64_t _AXSLiveTranscriptionMicOn()
{
  return __AXSLiveTranscriptionMicOn();
}

uint64_t _AXSLiveTranscriptionPaused()
{
  return __AXSLiveTranscriptionPaused();
}

uint64_t _AXSLiveTranscriptionScreenshotHidingEnabled()
{
  return __AXSLiveTranscriptionScreenshotHidingEnabled();
}

uint64_t _AXSLiveTranscriptionSetEnabled()
{
  return __AXSLiveTranscriptionSetEnabled();
}

uint64_t _AXSLiveTranscriptionSetMicOn()
{
  return __AXSLiveTranscriptionSetMicOn();
}

uint64_t _AXSLiveTranscriptionSetPaused()
{
  return __AXSLiveTranscriptionSetPaused();
}

uint64_t _AXSVoiceOverTouchEnabled()
{
  return __AXSVoiceOverTouchEnabled();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return __sl_dlopen();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

uint64_t abort_report_np()
{
  return _abort_report_np();
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

char *dlerror(void)
{
  return _dlerror();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

void free(void *a1)
{
}

pid_t getpid(void)
{
  return _getpid();
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return _notify_get_state(token, state64);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

void objc_storeStrong(id *location, id obj)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_variant_has_internal_ui()
{
  return _os_variant_has_internal_ui();
}

long double sin(long double __x)
{
  return _sin(__x);
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return _swift_dynamicCastClassUnconditional();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return _swift_getOpaqueTypeConformance2();
}

uint64_t swift_getOpaqueTypeMetadata2()
{
  return _swift_getOpaqueTypeMetadata2();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

id objc_msgSend_acquireAssertionToDisableIdleTimerWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireAssertionToDisableIdleTimerWithReason:");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_registerLiveCaptionsPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerLiveCaptionsPID:");
}

id objc_msgSend_server(void *a1, const char *a2, ...)
{
  return _[a1 server];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}