uint64_t Data.Digest.MD5.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void v11[3];

  v4 = type metadata accessor for Insecure.MD5();
  v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined copy of Data._Representation(a1, a2);
  lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest(&lazy protocol witness table cache variable for type Insecure.MD5 and conformance Insecure.MD5, (void (*)(uint64_t))&type metadata accessor for Insecure.MD5);
  dispatch thunk of HashFunction.init()();
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      outlined copy of Data._Representation(a1, a2);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v7, (void (*)(void))&type metadata accessor for Insecure.MD5, &lazy protocol witness table cache variable for type Insecure.MD5 and conformance Insecure.MD5, (void (*)(uint64_t))&type metadata accessor for Insecure.MD5);
      break;
    case 2uLL:
      v8 = *(void *)(a1 + 16);
      v9 = *(void *)(a1 + 24);
      outlined copy of Data._Representation(a1, a2);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v8, v9, a2 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v7, (void (*)(void))&type metadata accessor for Insecure.MD5, &lazy protocol witness table cache variable for type Insecure.MD5 and conformance Insecure.MD5, (void (*)(uint64_t))&type metadata accessor for Insecure.MD5);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v11, 0, 14);
      goto LABEL_7;
    default:
      v11[0] = a1;
      LOWORD(v11[1]) = a2;
      BYTE2(v11[1]) = BYTE2(a2);
      BYTE3(v11[1]) = BYTE3(a2);
      BYTE4(v11[1]) = BYTE4(a2);
      BYTE5(v11[1]) = BYTE5(a2);
LABEL_7:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      break;
  }
  outlined consume of Data._Representation(a1, a2);
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t Data.Digest.SHA512.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for SHA512();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined copy of Data._Representation(a1, a2);
  lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest(&lazy protocol witness table cache variable for type SHA512 and conformance SHA512, (void (*)(uint64_t))&type metadata accessor for SHA512);
  dispatch thunk of HashFunction.init()();
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      outlined copy of Data._Representation(a1, a2);
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v7, (void (*)(void))&type metadata accessor for SHA512, &lazy protocol witness table cache variable for type SHA512 and conformance SHA512, (void (*)(uint64_t))&type metadata accessor for SHA512);
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      outlined copy of Data._Representation(a1, a2);
      swift_retain();
      swift_retain();
      specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v8, v9, a2 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v7, (void (*)(void))&type metadata accessor for SHA512, &lazy protocol witness table cache variable for type SHA512 and conformance SHA512, (void (*)(uint64_t))&type metadata accessor for SHA512);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v11, 0, 14);
      goto LABEL_7;
    default:
      v11[0] = a1;
      LOWORD(v11[1]) = a2;
      BYTE2(v11[1]) = BYTE2(a2);
      BYTE3(v11[1]) = BYTE3(a2);
      BYTE4(v11[1]) = BYTE4(a2);
      BYTE5(v11[1]) = BYTE5(a2);
LABEL_7:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      break;
  }
  outlined consume of Data._Representation(a1, a2);
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return outlined consume of Data._Representation(a1, a2);
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), unint64_t *a6, void (*a7)(uint64_t))
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      a5(0);
      lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest(a6, a7);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Data.Digest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for Data.Digest(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for Data.Digest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t *assignWithTake for Data.Digest(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Data.Digest(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Data.Digest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)uint64_t result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Data.Digest()
{
  return &type metadata for Data.Digest;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 >= 1) {
    uint64_t v5 = a4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!a2)
  {
LABEL_19:
    a3 = 0;
    goto LABEL_20;
  }
  if (!a3)
  {
LABEL_20:
    *(void *)uint64_t result = a4;
    *(void *)(result + 8) = a5;
    *(void *)(result + 16) = v5;
    *(unsigned char *)(result + 24) = a5 < 1;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = a4 + a5;
    BOOL v7 = __OFADD__(a4, a5);
    if (v5 > v6) {
      uint64_t v6 = v5;
    }
    if (a5 >= 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = v6 - v5;
      while (!v7)
      {
        if (v9 == v8)
        {
          v5 += v8;
          a3 = v9;
          goto LABEL_20;
        }
        *(void *)(a2 + 8 * v8) = v5 + v8;
        if (a3 - 1 == v8)
        {
          v5 += v8 + 1;
          goto LABEL_20;
        }
        ++v8;
      }
      __break(1u);
      goto LABEL_24;
    }
    uint64_t v5 = 0;
    goto LABEL_19;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t Array.append(_:if:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = v10(v7);
  if (v11)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
    Array.append(_:)();
  }
  return v11 & 1;
}

uint64_t Array.append<A>(contentsOf:if:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a5 - 8);
  uint64_t v8 = __chkstk_darwin(a1);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v12 = v11(v8);
  if (v12)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, a5);
    Array.append<A>(contentsOf:)();
  }
  return v12 & 1;
}

uint64_t Array.item(where:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection.firstIndex(where:)();
  if (v6)
  {
    uint64_t v4 = 1;
  }
  else
  {
    Array.subscript.getter();
    uint64_t v4 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, v4, 1, a1);
}

Swift::Void __swiftcall Array.moveItem(at:to:)(Swift::Int at, Swift::Int to)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(at);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v10 - v8;
  Array.remove(at:)();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  Array.insert(_:at:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
}

uint64_t Array.subscript.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  type metadata accessor for Array();
  swift_getWitnessTable();
  RandomAccessCollection<>.indices.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  if (Range.contains(_:)())
  {
    Array.subscript.getter();
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, v4, 1, a1);
}

uint64_t Array.inserting(separator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[2] = a3;
  v4[3] = a1;
  return Array.inserting(separator:)((uint64_t)partial apply for closure #1 in Array.inserting(separator:), (uint64_t)v4, a2, a3);
}

uint64_t partial apply for closure #1 in Array.inserting(separator:)@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 16) - 8) + 16))(a1, *(void *)(v1 + 24));
}

uint64_t Array.inserting(separator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = Array.count.getter();
  if (result < 2)
  {
    swift_bridgeObjectRetain();
    return a3;
  }
  if (result + 0x4000000000000000 >= 0)
  {
    v12[8] = 0;
    v12[9] = 2 * result - 1;
    __chkstk_darwin(result);
    v12[2] = a4;
    v12[3] = a3;
    v12[4] = a1;
    v12[5] = a2;
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    unint64_t v10 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF_0((void (*)(char *, char *))partial apply for closure #1 in Array.inserting(separator:), (uint64_t)v12, v9, a4, (uint64_t)&type metadata for Never, v10, (uint64_t)&protocol witness table for Never, v11);
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in Array.inserting(separator:)(void *a1)
{
  if (*a1) {
    return (*(uint64_t (**)(void))(v1 + 32))();
  }
  else {
    return Array.subscript.getter();
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF_0(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = a5;
  uint64_t v29 = a8;
  v38 = a1;
  uint64_t v39 = a2;
  uint64_t v27 = *(void *)(a5 - 8);
  __chkstk_darwin(a1);
  v40 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v33 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v10 = __chkstk_darwin(AssociatedTypeWitness);
  char v12 = (char *)&v26 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(v15 - 8);
  uint64_t v31 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v26 - v16;
  uint64_t v18 = dispatch thunk of Collection.count.getter();
  if (!v18) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v19 = v18;
  uint64_t v43 = ContiguousArray.init()();
  uint64_t v32 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v19);
  uint64_t v36 = v8;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    v34 = (void (**)(char *))(v33 + 2);
    v35 = v14;
    ++v33;
    while (1)
    {
      v21 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      v22 = v12;
      v23 = v12;
      uint64_t v24 = AssociatedTypeWitness;
      (*v34)(v22);
      v21(v42, 0);
      uint64_t v25 = v41;
      v38(v23, v40);
      if (v25) {
        break;
      }
      uint64_t v41 = 0;
      (*v33)(v23, v24);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      --v19;
      char v12 = v23;
      if (!v19)
      {
        (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
        return v43;
      }
    }
    (*v33)(v23, v24);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v29, v40, v28);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>;
  if (!lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&_sSnySiGMD_0);
    _sS2iSZsWl_0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  }
  return result;
}

uint64_t Set.insert(_:if:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a5 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(a1);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v12(v9))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a2, v7);
    char v13 = Set.insert(_:)();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, 1, 1, v7);
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t NSBundle.displayName.getter()
{
  id v1 = [v0 localizedInfoDictionary];
  if (!v1)
  {
    long long v8 = 0u;
    long long v9 = 0u;
    goto LABEL_11;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v3 + 16)
    || (uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000013, 0x8000000100471A90, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:)), (v5 & 1) == 0))
  {
    long long v8 = 0u;
    long long v9 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v4, (uint64_t)&v8);
  swift_bridgeObjectRelease();
  if (!*((void *)&v9 + 1))
  {
LABEL_11:
    outlined destroy of TaskPriority?((uint64_t)&v8, &_sypSgMD_1);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v7;
  }
  else {
    return 0;
  }
}

uint64_t NSBundle.exportedTypeDeclarations.getter()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForInfoDictionaryKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  _sypSgWOb_1((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : Any]]);
    if (swift_dynamicCast()) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of TaskPriority?((uint64_t)v6, &_sypSgMD_1);
    return 0;
  }
}

uint64_t Comparable.clamp(to:)()
{
  uint64_t v1 = type metadata accessor for ClosedRange();
  return ClosedRange.clamp(_:)(v0, v1);
}

uint64_t ClosedRange.clamp(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(a1);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  max<A>(_:_:)();
  min<A>(_:_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ClosedRange<>.scaledValue(relativeTo:relativeValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v33 = a5;
  uint64_t v31 = a1;
  uint64_t v32 = a4;
  uint64_t v27 = a2;
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) + 8);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = *(void *)(v7 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v28 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  v35 = (char *)&v26 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  v20 = (char *)&v26 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v26 - v21;
  uint64_t v29 = a3;
  uint64_t v30 = v6;
  uint64_t v26 = *(void *)(v6 + 8);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  LOBYTE(v6) = dispatch thunk of static Comparable.> infix(_:_:)();
  v23 = *(void (**)(char *, uint64_t))(v10 + 8);
  v23(v20, v7);
  if (v6)
  {
    ClosedRange.clamp(_:)(v27, v29);
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    dispatch thunk of static FloatingPoint./ infix(_:_:)();
    v23(v15, v7);
    uint64_t v24 = v28;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    dispatch thunk of static Numeric.* infix(_:_:)();
    v23(v24, v7);
    dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
    v23(v15, v7);
    v23(v35, v7);
    v23(v20, v7);
    return ((uint64_t (*)(char *, uint64_t))v23)(v22, v7);
  }
  else
  {
    v23(v22, v7);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v33, v34, v7);
  }
}

uint64_t Data.hexRepresentation.getter(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      outlined copy of Data._Representation(a1, a2);
      uint64_t v6 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a1, a2);
      uint64_t v8 = v9;
      goto LABEL_8;
    case 2uLL:
      uint64_t v4 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      outlined copy of Data._Representation(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v6 = specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(v4, v5, a2 & 0x3FFFFFFFFFFFFFFFLL, a1, a2);
      uint64_t v8 = v7;
      swift_release();
      swift_release();
LABEL_8:
      outlined consume of Data._Representation(a1, a2);
      goto LABEL_9;
    case 3uLL:
      memset(v11, 0, 14);
      goto LABEL_5;
    default:
      v11[0] = a1;
      LOWORD(v11[1]) = a2;
      BYTE2(v11[1]) = BYTE2(a2);
      BYTE3(v11[1]) = BYTE3(a2);
      BYTE4(v11[1]) = BYTE4(a2);
      BYTE5(v11[1]) = BYTE5(a2);
LABEL_5:
      closure #1 in Data.hexRepresentation.getter((unint64_t)v11, a1, a2, v12);
      outlined consume of Data._Representation(a1, a2);
      uint64_t v6 = v12[0];
      uint64_t v8 = v12[1];
LABEL_9:
      if (v8) {
        return v6;
      }
      else {
        return 0;
      }
  }
}

uint64_t closure #1 in Data.hexRepresentation.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v8 - 8);
  unint64_t v9 = a3 >> 62;
  switch(a3 >> 62)
  {
    case 1uLL:
      LODWORD(v10) = HIDWORD(a2) - a2;
      if (__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_41;
      }
      uint64_t v10 = (int)v10;
LABEL_6:
      if (v10 + 0x4000000000000000 < 0) {
        goto LABEL_39;
      }
      unint64_t v14 = swift_slowAlloc();
      if (v9)
      {
        if (v9 == 1)
        {
          LODWORD(v15) = HIDWORD(a2) - a2;
          if (__OFSUB__(HIDWORD(a2), a2))
          {
LABEL_43:
            __break(1u);
            goto LABEL_44;
          }
          uint64_t v15 = (int)v15;
        }
        else
        {
          uint64_t v17 = *(void *)(a2 + 16);
          uint64_t v16 = *(void *)(a2 + 24);
          BOOL v13 = __OFSUB__(v16, v17);
          uint64_t v15 = v16 - v17;
          if (v13)
          {
LABEL_44:
            __break(1u);
            JUMPOUT(0x10028EEF4);
          }
        }
        if (v15 < 0)
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v15 = BYTE6(a3);
      }
      if (v15)
      {
        unint64_t v18 = v15 - 1;
        if ((unint64_t)(v15 - 1) >= 0x4000000000000000) {
          unint64_t v19 = 0x4000000000000000;
        }
        else {
          unint64_t v19 = v15 - 1;
        }
        if (v19 <= 0xF) {
          goto LABEL_24;
        }
        if (v18 >= 0x4000000000000000) {
          unint64_t v18 = 0x4000000000000000;
        }
        if (v14 >= v18 + a1 + 1 || v14 + 2 * v18 + 2 <= a1)
        {
          unint64_t v21 = v19 + 1;
          uint64_t v22 = v21 & 0xF;
          if ((v21 & 0xF) == 0) {
            uint64_t v22 = 16;
          }
          unint64_t v20 = v21 - v22;
          v23.i64[0] = 0x9F9F9F9F9F9F9F9FLL;
          v23.i64[1] = 0x9F9F9F9F9F9F9F9FLL;
          v24.i64[0] = 0x5757575757575757;
          v24.i64[1] = 0x5757575757575757;
          v25.i64[0] = 0x3030303030303030;
          v25.i64[1] = 0x3030303030303030;
          v26.i64[0] = 0xF0F0F0F0F0F0F0FLL;
          v26.i64[1] = 0xF0F0F0F0F0F0F0FLL;
          v27.i64[0] = 0x909090909090909;
          v27.i64[1] = 0x909090909090909;
          unint64_t v28 = v20;
          uint64_t v29 = (int8x16_t *)a1;
          uint64_t v30 = (char *)v14;
          do
          {
            int8x16_t v31 = *v29++;
            v32.i64[0] = 0x5757575757575757;
            v32.i64[1] = 0x5757575757575757;
            v33.i64[0] = 0x3030303030303030;
            v33.i64[1] = 0x3030303030303030;
            v46.val[0] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v31, v23), (int8x16_t)vsraq_n_u8(v32, (uint8x16_t)v31, 4uLL), (int8x16_t)vsraq_n_u8(v33, (uint8x16_t)v31, 4uLL));
            int8x16_t v34 = vandq_s8(v31, v26);
            v46.val[1] = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v34, v27), vaddq_s8(v34, v24), vorrq_s8(v34, v25));
            vst2q_s8(v30, v46);
            v30 += 32;
            v28 -= 16;
          }
          while (v28);
        }
        else
        {
LABEL_24:
          unint64_t v20 = 0;
        }
        unint64_t v35 = v20 - 0x4000000000000000;
        uint64_t v36 = (unsigned char *)(v14 + 2 * v20 + 1);
        uint64_t v37 = v15 - v20;
        v38 = (unsigned __int8 *)(a1 + v20);
        while (v35)
        {
          unsigned int v40 = *v38++;
          char v39 = v40;
          int v41 = (v40 >> 4) + 87;
          int v42 = (v40 >> 4) | 0x30;
          if (v40 > 0x9F) {
            LOBYTE(v42) = v41;
          }
          *(v36 - 1) = v42;
          if ((v39 & 0xFu) <= 9) {
            char v43 = v39 & 0xF | 0x30;
          }
          else {
            char v43 = (v39 & 0xF) + 87;
          }
          *uint64_t v36 = v43;
          v36 += 2;
          ++v35;
          if (!--v37) {
            goto LABEL_37;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
LABEL_37:
      static String.Encoding.utf8.getter();
      uint64_t result = String.init(bytesNoCopy:length:encoding:freeWhenDone:)();
      *a4 = result;
      a4[1] = v45;
      return result;
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      uint64_t v11 = *(void *)(a2 + 24);
      BOOL v13 = __OFSUB__(v11, v12);
      uint64_t v10 = v11 - v12;
      if (!v13) {
        goto LABEL_6;
      }
      goto LABEL_42;
    case 3uLL:
      swift_slowAlloc();
      goto LABEL_37;
    default:
      uint64_t v10 = BYTE6(a3);
      goto LABEL_6;
  }
}

uint64_t one-time initialization function for hexToDecimalMapping()
{
  unint64_t v0 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for hexToDecimalMapping);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Character, UInt8));
  uint64_t result = swift_arrayDestroy();
  static Data.Hexadecimal.hexToDecimalMapping = v0;
  return result;
}

uint64_t *Data.Hexadecimal.hexToDecimalMapping.unsafeMutableAddressor()
{
  if (one-time initialization token for hexToDecimalMapping != -1) {
    swift_once();
  }
  return &static Data.Hexadecimal.hexToDecimalMapping;
}

uint64_t static Data.Hexadecimal.hexToDecimalMapping.getter()
{
  if (one-time initialization token for hexToDecimalMapping != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static Data.Hexadecimal.hexToDecimalMapping.setter(uint64_t a1)
{
  if (one-time initialization token for hexToDecimalMapping != -1) {
    swift_once();
  }
  swift_beginAccess();
  static Data.Hexadecimal.hexToDecimalMapping = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static Data.Hexadecimal.hexToDecimalMapping.modify())()
{
  if (one-time initialization token for hexToDecimalMapping != -1) {
    swift_once();
  }
  swift_beginAccess();
  return ArtworkVideoReportingController.videoArtworkContextProviding.modify;
}

uint64_t Data.init(hexString:)(uint64_t a1, void *a2)
{
  if (String.count.getter())
  {
    v16[0] = 48;
    v16[1] = 0xE100000000000000;
    v4._countAndFlagsBits = a1;
    v4._object = a2;
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = 0;
  LOBYTE(v6) = 0;
  long long v17 = xmmword_100493E60;
  while (1)
  {
    Swift::String_optional v8 = String.Iterator.next()();
    if (!v8.value._object) {
      break;
    }
    if (one-time initialization token for hexToDecimalMapping != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v9 = static Data.Hexadecimal.hexToDecimalMapping;
    if (!*(void *)(static Data.Hexadecimal.hexToDecimalMapping + 16)
      || (uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v8.value._countAndFlagsBits, (uint64_t)v8.value._object, (void (*)(unsigned char *, uint64_t, uint64_t))&Character.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:)), (v11 & 1) == 0))
    {
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v17, *((unint64_t *)&v17 + 1));
      return 0;
    }
    __int16 v12 = *(unsigned __int8 *)(*(void *)(v9 + 56) + v10);
    swift_endAccess();
    swift_bridgeObjectRelease();
    if (v5)
    {
      char v13 = v12 + v6;
      if (((v12 + v6) & 0x100) != 0) {
        goto LABEL_18;
      }
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<UInt8>);
      v16[3] = v14;
      v16[4] = lazy protocol witness table accessor for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>(&lazy protocol witness table cache variable for type CollectionOfOne<UInt8> and conformance <A> CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<UInt8>);
      LOBYTE(v16[0]) = v13;
      __swift_project_boxed_opaque_existential_0Tm(v16, v14);
      Data._Representation.replaceSubrange(_:with:count:)();
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v16);
      LOBYTE(v6) = 0;
    }
    else
    {
      __int16 v6 = 16 * (v12 & 0xF) + v6;
      if ((v6 & 0x100) != 0) {
        goto LABEL_17;
      }
    }
    if (__OFADD__(v5++, 1))
    {
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
    }
  }
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t one-time initialization function for musicDefaultCalendar()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Calendar.Identifier();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  __int16 v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Calendar();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  char v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_allocate_value_buffer(v9, static Calendar.musicDefaultCalendar);
  uint64_t v12 = __swift_project_value_buffer(v7, (uint64_t)static Calendar.musicDefaultCalendar);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for Calendar.Identifier.gregorian(_:), v3);
  Calendar.init(identifier:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  TimeZone.init(secondsFromGMT:)();
  uint64_t v13 = type metadata accessor for TimeZone();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v2, 1, v13);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    Calendar.timeZone.setter();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v12, v11, v7);
  }
  return result;
}

uint64_t Calendar.musicDefaultCalendar.unsafeMutableAddressor()
{
  if (one-time initialization token for musicDefaultCalendar != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Calendar();

  return __swift_project_value_buffer(v0, (uint64_t)static Calendar.musicDefaultCalendar);
}

uint64_t static Calendar.musicDefaultCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for musicDefaultCalendar != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Calendar();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Calendar.musicDefaultCalendar);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

id static NSDateFormatter.iso8601ExtendedDateFormatter.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Locale();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  __int16 v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [objc_allocWithZone((Class)NSDateFormatter) init];
  Locale.init(identifier:)();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  [v7 setLocale:isa];

  NSString v9 = String._bridgeToObjectiveC()();
  [v7 setDateFormat:v9];

  TimeZone.init(secondsFromGMT:)();
  uint64_t v10 = type metadata accessor for TimeZone();
  uint64_t v11 = *(void *)(v10 - 8);
  Class v12 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v2, 1, v10) != 1)
  {
    Class v12 = TimeZone._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v2, v10);
  }
  [v7 setTimeZone:v12];

  return v7;
}

id static NSDateFormatter.dayNameDateFormatter.getter()
{
  id v0 = [objc_allocWithZone((Class)NSDateFormatter) init];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setLocalizedDateFormatFromTemplate:v1];

  return v0;
}

void one-time initialization function for releaseDateFormatter()
{
  uint64_t v0 = type metadata accessor for TimeZone();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [objc_allocWithZone((Class)NSDateFormatter) init];
  [v4 setDateStyle:3];
  if (one-time initialization token for musicDefaultCalendar != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Calendar();
  __swift_project_value_buffer(v5, (uint64_t)static Calendar.musicDefaultCalendar);
  Calendar.timeZone.getter();
  Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  [v4 setTimeZone:isa];

  static NSDateFormatter.releaseDateFormatter = (uint64_t)v4;
}

uint64_t *NSDateFormatter.releaseDateFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for releaseDateFormatter != -1) {
    swift_once();
  }
  return &static NSDateFormatter.releaseDateFormatter;
}

id static NSDateFormatter.releaseDateFormatter.getter()
{
  return static ApplicationCapabilities.NotificationNames.allowsiTunesContentDidChange.getter(&one-time initialization token for releaseDateFormatter, (void **)&static NSDateFormatter.releaseDateFormatter);
}

id one-time initialization function for collectionsDurationFormatter()
{
  id v0 = [objc_allocWithZone((Class)NSDateComponentsFormatter) init];
  [v0 setUnitsStyle:3];
  id result = [v0 setAllowedUnits:96];
  static NSDateFormatter.collectionsDurationFormatter = (uint64_t)v0;
  return result;
}

uint64_t *NSDateFormatter.collectionsDurationFormatter.unsafeMutableAddressor()
{
  if (one-time initialization token for collectionsDurationFormatter != -1) {
    swift_once();
  }
  return &static NSDateFormatter.collectionsDurationFormatter;
}

id static NSDateFormatter.collectionsDurationFormatter.getter()
{
  return static ApplicationCapabilities.NotificationNames.allowsiTunesContentDidChange.getter(&one-time initialization token for collectionsDurationFormatter, (void **)&static NSDateFormatter.collectionsDurationFormatter);
}

uint64_t Dictionary.filterIncludingPairsWithStringValues()(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v55 = *(void *)(a3 - 8);
  uint64_t v8 = __chkstk_darwin(a1);
  uint64_t v10 = (char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v8);
  v57 = (char *)v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v70 = (char *)v48 - v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v66 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v66 - 8);
  uint64_t v17 = __chkstk_darwin(v66);
  v59 = (char *)v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  unint64_t v20 = (char *)v48 - v19;
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  uint64_t v58 = a4;
  uint64_t v73 = Dictionary.init(dictionaryLiteral:)();
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v21 = __CocoaDictionary.makeIterator()();
    unint64_t v49 = 0;
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    unint64_t v24 = v21 | 0x8000000000000000;
  }
  else
  {
    uint64_t v25 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v22 = ~v25;
    uint64_t v26 = *(void *)(a1 + 64);
    unint64_t v49 = a1 + 64;
    uint64_t v27 = -v25;
    if (v27 < 64) {
      uint64_t v28 = ~(-1 << v27);
    }
    else {
      uint64_t v28 = -1;
    }
    unint64_t v23 = v28 & v26;
    unint64_t v24 = a1;
  }
  unint64_t v67 = v24;
  uint64_t v51 = v24 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v65 = TupleTypeMetadata2 - 8;
  v48[1] = v22;
  v68 = (void (**)(char *, char *, uint64_t))(v54 + 16);
  uint64_t v52 = v55 + 16;
  v64 = (void (**)(char *, char *, uint64_t))(v16 + 32);
  v63 = (void (**)(char *, char *, uint64_t))(v54 + 32);
  v61 = (void (**)(char *, uint64_t))(v55 + 8);
  v62 = (void (**)(char *, char *, uint64_t))(v55 + 32);
  v60 = (uint64_t (**)(char *, uint64_t))(v54 + 8);
  int64_t v50 = (unint64_t)(v22 + 64) >> 6;
  v48[0] = v50 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v30 = v67;
  int64_t v31 = 0;
  v56 = v10;
  uint8x16_t v32 = v59;
  uint64_t v53 = v5;
  if ((v67 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_32:
  if (__CocoaDictionary.Iterator.next()())
  {
    _forceBridgeFromObjectiveC<A>(_:_:)();
    swift_unknownObjectRelease();
    _forceBridgeFromObjectiveC<A>(_:_:)();
    swift_unknownObjectRelease();
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v40 = 1;
  }
  int64_t v37 = v31;
  uint64_t v69 = v23;
  uint64_t v10 = v56;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
LABEL_36:
          uint64_t v43 = *(void *)(TupleTypeMetadata2 - 8);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56))(v32, v40, 1, TupleTypeMetadata2);
          (*v64)(v20, v32, v66);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v20, 1, TupleTypeMetadata2) == 1)
          {
            outlined consume of Set<MusicItemID>.Iterator._Variant();
            return v73;
          }
          v44 = &v20[*(int *)(TupleTypeMetadata2 + 48)];
          (*v63)(v70, v20, a2);
          (*v62)(v10, v44, v5);
          if (swift_dynamicCast())
          {
            id v33 = v71;
            uint64_t v34 = v72;
            goto LABEL_10;
          }
          type metadata accessor for UIMenu(0, &_sSo8NSNumberCML_0);
          if (swift_dynamicCast())
          {
            id v45 = v71;
            id v46 = [v71 description];
            id v33 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v34 = v47;

            uint64_t v10 = v56;
LABEL_10:
            (*v61)(v10, v5);
            unint64_t v35 = v70;
            (*v68)(v57, v70, a2);
            id v71 = v33;
            uint64_t v72 = v34;
            type metadata accessor for Dictionary();
            Dictionary.subscript.setter();
            uint64_t result = (*v60)(v35, a2);
            int64_t v31 = v37;
            unint64_t v23 = v69;
            uint8x16_t v32 = v59;
            unint64_t v30 = v67;
            if ((v67 & 0x8000000000000000) != 0) {
              goto LABEL_32;
            }
            goto LABEL_11;
          }
          (*v61)(v10, v5);
          uint64_t result = (*v60)(v70, a2);
          int64_t v31 = v37;
          unint64_t v23 = v69;
          unint64_t v30 = v67;
          if ((v67 & 0x8000000000000000) != 0) {
            goto LABEL_32;
          }
LABEL_11:
          if (v23)
          {
            uint64_t v69 = (v23 - 1) & v23;
            unint64_t v36 = __clz(__rbit64(v23)) | (v31 << 6);
            int64_t v37 = v31;
            goto LABEL_13;
          }
          int64_t v37 = v31 + 1;
          if (__OFADD__(v31, 1))
          {
            __break(1u);
            goto LABEL_44;
          }
          if (v37 < v50) {
            break;
          }
          uint64_t v69 = 0;
          uint64_t v40 = 1;
          int64_t v37 = v31;
        }
        unint64_t v41 = *(void *)(v49 + 8 * v37);
        if (!v41) {
          break;
        }
LABEL_17:
        uint64_t v69 = (v41 - 1) & v41;
        unint64_t v36 = __clz(__rbit64(v41)) + (v37 << 6);
LABEL_13:
        unint64_t v38 = v30;
        (*(void (**)(char *, unint64_t, uint64_t))(v54 + 16))(v32, *(void *)(v30 + 48) + *(void *)(v54 + 72) * v36, a2);
        unint64_t v39 = *(void *)(v38 + 56) + *(void *)(v55 + 72) * v36;
        uint64_t v5 = v53;
        (*(void (**)(char *, unint64_t, uint64_t))(v55 + 16))(&v32[*(int *)(TupleTypeMetadata2 + 48)], v39, v53);
        uint64_t v40 = 0;
      }
      if (v31 + 2 < v50) {
        break;
      }
      uint64_t v69 = 0;
      uint64_t v40 = 1;
    }
    unint64_t v41 = *(void *)(v49 + 8 * (v31 + 2));
    if (v41)
    {
      int64_t v37 = v31 + 2;
      goto LABEL_17;
    }
    int64_t v42 = v31 + 3;
    if (v31 + 3 < v50) {
      break;
    }
    uint64_t v69 = 0;
    uint64_t v40 = 1;
    int64_t v37 = v31 + 2;
  }
  unint64_t v41 = *(void *)(v49 + 8 * v42);
  if (v41)
  {
    int64_t v37 = v31 + 3;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v37 = v42 + 1;
    if (__OFADD__(v42, 1)) {
      break;
    }
    if (v37 >= v50)
    {
      uint64_t v69 = 0;
      uint64_t v40 = 1;
      int64_t v37 = v48[0];
      goto LABEL_36;
    }
    unint64_t v41 = *(void *)(v49 + 8 * v37);
    ++v42;
    if (v41) {
      goto LABEL_17;
    }
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t Dictionary.filteredDictionary(_:)(uint64_t (*a1)(char *, char *), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v66 = a1;
  uint64_t v67 = a2;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v54 = (char *)&v46 - v12;
  uint64_t v57 = *(void *)(a5 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v65 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = *(void *)(a4 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v53 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v46 - v17;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v71 = type metadata accessor for Optional();
  uint64_t v20 = *(void *)(v71 - 8);
  uint64_t v21 = __chkstk_darwin(v71);
  uint64_t v58 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  unint64_t v24 = (char *)&v46 - v23;
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  uint64_t v55 = a6;
  uint64_t v74 = Dictionary.init(dictionaryLiteral:)();
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v25 = __CocoaDictionary.makeIterator()();
    unint64_t v49 = 0;
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    unint64_t v28 = v25 | 0x8000000000000000;
  }
  else
  {
    uint64_t v29 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v26 = ~v29;
    uint64_t v30 = *(void *)(a3 + 64);
    unint64_t v49 = a3 + 64;
    uint64_t v31 = -v29;
    if (v31 < 64) {
      uint64_t v32 = ~(-1 << v31);
    }
    else {
      uint64_t v32 = -1;
    }
    unint64_t v27 = v32 & v30;
    unint64_t v28 = a3;
  }
  uint64_t v51 = v28 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v69 = TupleTypeMetadata2 - 8;
  uint64_t v48 = v26;
  v60 = (void (**)(char *, char *, uint64_t))(v56 + 16);
  v59 = (void (**)(char *, char *, uint64_t))(v57 + 16);
  v68 = (void (**)(char *, char *, uint64_t))(v20 + 32);
  v64 = (void (**)(char *, char *, uint64_t))(v56 + 32);
  v63 = (void (**)(char *, char *, uint64_t))(v57 + 32);
  v61 = (uint64_t (**)(char *, uint64_t))(v56 + 8);
  v62 = (void (**)(char *, uint64_t))(v57 + 8);
  uint64_t v52 = (void (**)(char *, void, uint64_t, uint64_t))(v57 + 56);
  int64_t v50 = (unint64_t)(v26 + 64) >> 6;
  int64_t v47 = v50 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v34 = 0;
  unint64_t v35 = v58;
  v70 = v24;
  unint64_t v72 = v28;
  while ((v28 & 0x8000000000000000) != 0)
  {
    if (__CocoaDictionary.Iterator.next()())
    {
      _forceBridgeFromObjectiveC<A>(_:_:)();
      swift_unknownObjectRelease();
      _forceBridgeFromObjectiveC<A>(_:_:)();
      swift_unknownObjectRelease();
      uint64_t v38 = 0;
    }
    else
    {
      uint64_t v38 = 1;
    }
    int64_t v37 = v34;
    uint64_t v73 = v27;
LABEL_22:
    uint64_t v40 = *(void *)(TupleTypeMetadata2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v35, v38, 1, TupleTypeMetadata2);
    unint64_t v41 = v70;
    (*v68)(v70, v35, v71);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v41, 1, TupleTypeMetadata2) == 1)
    {
      outlined consume of Set<MusicItemID>.Iterator._Variant();
      return v74;
    }
    int64_t v42 = &v41[*(int *)(TupleTypeMetadata2 + 48)];
    (*v64)(v18, v41, a4);
    uint64_t v43 = v65;
    (*v63)(v65, v42, a5);
    if (v66(v18, v43))
    {
      (*v60)(v53, v18, a4);
      v44 = v54;
      (*v59)(v54, v43, a5);
      (*v52)(v44, 0, 1, a5);
      type metadata accessor for Dictionary();
      unint64_t v35 = v58;
      Dictionary.subscript.setter();
    }
    (*v62)(v43, a5);
    uint64_t result = (*v61)(v18, a4);
    int64_t v34 = v37;
    unint64_t v28 = v72;
    unint64_t v27 = v73;
  }
  if (v27)
  {
    uint64_t v73 = (v27 - 1) & v27;
    unint64_t v36 = __clz(__rbit64(v27)) | (v34 << 6);
    int64_t v37 = v34;
    goto LABEL_12;
  }
  int64_t v37 = v34 + 1;
  if (__OFADD__(v34, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v37 >= v50)
  {
    uint64_t v73 = 0;
    uint64_t v38 = 1;
    int64_t v37 = v34;
    goto LABEL_22;
  }
  unint64_t v39 = *(void *)(v49 + 8 * v37);
  if (v39) {
    goto LABEL_18;
  }
  if (v34 + 2 >= v50)
  {
    uint64_t v73 = 0;
    uint64_t v38 = 1;
    goto LABEL_22;
  }
  unint64_t v39 = *(void *)(v49 + 8 * (v34 + 2));
  if (v39)
  {
    int64_t v37 = v34 + 2;
    unint64_t v28 = v72;
    goto LABEL_18;
  }
  int64_t v45 = v34 + 3;
  if (v34 + 3 >= v50)
  {
    uint64_t v73 = 0;
    uint64_t v38 = 1;
    int64_t v37 = v34 + 2;
    goto LABEL_22;
  }
  unint64_t v39 = *(void *)(v49 + 8 * v45);
  if (v39)
  {
    int64_t v37 = v34 + 3;
    unint64_t v28 = v72;
LABEL_18:
    uint64_t v73 = (v39 - 1) & v39;
    unint64_t v36 = __clz(__rbit64(v39)) + (v37 << 6);
LABEL_12:
    (*(void (**)(char *, unint64_t, uint64_t))(v56 + 16))(v35, *(void *)(v28 + 48) + *(void *)(v56 + 72) * v36, a4);
    (*(void (**)(char *, unint64_t, uint64_t))(v57 + 16))(&v35[*(int *)(TupleTypeMetadata2 + 48)], *(void *)(v28 + 56) + *(void *)(v57 + 72) * v36, a5);
    uint64_t v38 = 0;
    goto LABEL_22;
  }
  unint64_t v28 = v72;
  while (1)
  {
    int64_t v37 = v45 + 1;
    if (__OFADD__(v45, 1)) {
      break;
    }
    if (v37 >= v50)
    {
      uint64_t v73 = 0;
      uint64_t v38 = 1;
      int64_t v37 = v47;
      goto LABEL_22;
    }
    unint64_t v39 = *(void *)(v49 + 8 * v37);
    ++v45;
    if (v39) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t IndexPath.safeSection.getter()
{
  if ((unint64_t)(IndexPath.count.getter() - 1) > 1)
  {
    return NSNotFound.getter();
  }
  else
  {
    return IndexPath.subscript.getter();
  }
}

uint64_t IndexPath.safeSection.setter()
{
  uint64_t result = IndexPath.count.getter();
  if ((unint64_t)(result - 1) <= 1)
  {
    return IndexPath.subscript.setter();
  }
  return result;
}

uint64_t (*IndexPath.safeSection.modify(uint64_t *a1))()
{
  a1[1] = v1;
  if ((unint64_t)(IndexPath.count.getter() - 1) > 1) {
    uint64_t v3 = NSNotFound.getter();
  }
  else {
    uint64_t v3 = IndexPath.subscript.getter();
  }
  *a1 = v3;
  return IndexPath.safeSection.modify;
}

uint64_t IndexPath.safeSection.modify()
{
  uint64_t result = IndexPath.count.getter();
  if ((unint64_t)(result - 1) <= 1) {
    return IndexPath.subscript.setter();
  }
  return result;
}

uint64_t IndexPath.safeItem.getter()
{
  if ((unint64_t)IndexPath.count.getter() > 1)
  {
    return IndexPath.subscript.getter();
  }
  else
  {
    return NSNotFound.getter();
  }
}

unint64_t IndexPath.safeItem.setter()
{
  unint64_t result = IndexPath.count.getter();
  if (result >= 2)
  {
    return IndexPath.subscript.setter();
  }
  return result;
}

unint64_t (*IndexPath.safeItem.modify(uint64_t *a1))()
{
  a1[1] = v1;
  if ((unint64_t)IndexPath.count.getter() > 1) {
    uint64_t v3 = IndexPath.subscript.getter();
  }
  else {
    uint64_t v3 = NSNotFound.getter();
  }
  *a1 = v3;
  return IndexPath.safeItem.modify;
}

unint64_t IndexPath.safeItem.modify()
{
  unint64_t result = IndexPath.count.getter();
  if (result >= 2) {
    return IndexPath.subscript.setter();
  }
  return result;
}

void *String.nonBreakingSpace.unsafeMutableAddressor()
{
  return &static String.nonBreakingSpace;
}

uint64_t static String.nonBreakingSpace.getter()
{
  return 41154;
}

Swift::String __swiftcall String.trim()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = v3;
  v15[1] = v2;
  id v8 = [self whitespaceAndNewlineCharacterSet];
  static CharacterSet._unconditionallyBridgeFromObjectiveC(_:)();

  _sS2SSysWl_0();
  uint64_t v9 = StringProtocol.trimmingCharacters(in:)();
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v12 = v9;
  uint64_t v13 = v11;
  result._object = v13;
  result._countAndFlagsBits = v12;
  return result;
}

Swift::String __swiftcall String.removeSpaces()()
{
  _sS2SSysWl_0();
  uint64_t v0 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall String.replace(usingRegexPattern:with:options:)(Swift::String usingRegexPattern, Swift::String with, NSRegularExpressionOptions options)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  object = usingRegexPattern._object;
  uint64_t countAndFlagsBits = usingRegexPattern._countAndFlagsBits;
  objc_allocWithZone((Class)NSRegularExpression);
  swift_bridgeObjectRetain();
  id v10 = @nonobjc NSRegularExpression.init(pattern:options:)(countAndFlagsBits, (uint64_t)object, options);
  uint64_t v11 = v10;
  if (v10)
  {
    uint64_t v12 = String.count.getter();
    NSString v13 = String._bridgeToObjectiveC()();
    NSString v14 = String._bridgeToObjectiveC()();
    id v15 = objc_msgSend(v11, "stringByReplacingMatchesInString:options:range:withTemplate:", v13, 0, 0, v12, v14);

    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v16;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v17 = v6;
  uint64_t v18 = v5;
  result._object = v18;
  result._uint64_t countAndFlagsBits = v17;
  return result;
}

Swift::String __swiftcall String.htmlizedString()()
{
  _sS2SSysWl_0();
  uint64_t v0 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  String.decodeXMLCharacters()(v0, v1);
  swift_bridgeObjectRelease();
  uint64_t v2 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  uint64_t v5 = v2;
  uint64_t v6 = v4;
  result._object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

unint64_t String.decodeXMLCharacters()(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  __chkstk_darwin(v4 - 8);
  uint64_t v53 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = 0;
  unint64_t v60 = 0xE000000000000000;
  uint64_t v6 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v7 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v7 = 11;
  }
  unint64_t v49 = 4 * v6;
  uint64_t v57 = a1;
  unint64_t v58 = a2;
  uint64_t v54 = v7 | (v6 << 16);
  uint64_t v55 = 38;
  unint64_t v56 = 0xE100000000000000;
  unint64_t v8 = 0;
  uint64_t v52 = type metadata accessor for Locale();
  uint64_t v9 = *(void *)(v52 - 8);
  unint64_t v10 = 15;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  uint64_t v50 = v9 + 56;
  uint64_t v51 = v11;
  uint64_t v47 = a1;
  unint64_t v48 = a2;
  while (1)
  {
    uint64_t v13 = (uint64_t)v53;
    v51(v53, 1, 1, v52);
    _sS2SSysWl_0();
    unint64_t v14 = StringProtocol.range<A>(of:options:range:locale:)();
    char v16 = v15;
    outlined destroy of TaskPriority?(v13, &demangling cache variable for type metadata for Locale?);
    unint64_t result = swift_bridgeObjectRelease();
    if (v16) {
      break;
    }
    unint64_t v17 = v14 >> 14;
    if (v14 >> 14 < v8)
    {
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    String.subscript.getter();
    String.append(contentsOf:)();
    unint64_t result = swift_bridgeObjectRelease();
    uint64_t v57 = a1;
    unint64_t v58 = a2;
    uint64_t v55 = 59;
    unint64_t v56 = 0xE100000000000000;
    if (v49 < v17) {
      goto LABEL_34;
    }
    uint64_t v18 = (uint64_t)v53;
    v51(v53, 1, 1, v52);
    StringProtocol.range<A>(of:options:range:locale:)();
    unint64_t v10 = v19;
    char v21 = v20;
    outlined destroy of TaskPriority?(v18, &demangling cache variable for type metadata for Locale?);
    unint64_t result = swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_31;
    }
    unint64_t v8 = v10 >> 14;
    if (v10 >> 14 < v17) {
      goto LABEL_36;
    }
    unint64_t v22 = String.subscript.getter();
    unint64_t v24 = v23;
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    if (specialized Sequence<>.starts<A>(with:)(8998, 0xE200000000000000, v22, v23))
    {
      unint64_t result = Substring.index(_:offsetBy:)();
      if (v24 >> 14 < result >> 14) {
        goto LABEL_37;
      }
      unint64_t v29 = Substring.subscript.getter();
      unint64_t v31 = v30;
      if (specialized Sequence<>.starts<A>(with:)(120, 0xE100000000000000, v29, v30))
      {
        swift_bridgeObjectRelease();
        uint64_t v32 = 16;
      }
      else
      {
        BOOL v39 = specialized Sequence<>.starts<A>(with:)(88, 0xE100000000000000, v29, v31);
        swift_bridgeObjectRelease();
        if (v39) {
          uint64_t v32 = 16;
        }
        else {
          uint64_t v32 = 10;
        }
      }
      unint64_t v40 = Substring.index(_:offsetBy:)();
      unint64_t result = Substring.index(_:offsetBy:)();
      if (result >> 14 < v40 >> 14) {
        goto LABEL_38;
      }
      unint64_t v41 = Substring.subscript.getter();
      uint64_t v38 = decodeNumeric #1 (_:base:) in String.decodeXMLCharacters()(v41, v42, v43, v44, v32);
      int64_t v37 = v45;
      swift_bridgeObjectRelease();
      if (v37)
      {
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
    }
    else
    {
      if (one-time initialization token for xmlCharacterEntitiesMap != -1) {
        swift_once();
      }
      id v33 = static String.xmlCharacterEntitiesMap;
      if (*((void *)static String.xmlCharacterEntitiesMap + 2))
      {
        swift_bridgeObjectRetain();
        unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v24, v26, v28);
        if (v35)
        {
          unint64_t v36 = (uint64_t *)(v33[7] + 16 * v34);
          uint64_t v38 = *v36;
          int64_t v37 = (void *)v36[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease_n();
LABEL_29:
          v46._uint64_t countAndFlagsBits = v38;
          v46._object = v37;
          String.append(_:)(v46);
          goto LABEL_8;
        }
        swift_bridgeObjectRelease();
      }
    }
    String.append(contentsOf:)();
LABEL_8:
    a1 = v47;
    unint64_t result = swift_bridgeObjectRelease();
    a2 = v48;
    uint64_t v57 = a1;
    unint64_t v58 = v48;
    uint64_t v55 = 38;
    unint64_t v56 = 0xE100000000000000;
    if (v49 < v8) {
      goto LABEL_35;
    }
  }
  unint64_t v17 = v10 >> 14;
LABEL_31:
  if (v49 >= v17)
  {
    String.subscript.getter();
    String.append(contentsOf:)();
    swift_bridgeObjectRelease();
    return v59;
  }
LABEL_39:
  __break(1u);
  return result;
}

Swift::String __swiftcall String.insensitiveCompareString()()
{
  unint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = 0xE000000000000000;
  uint64_t v29 = 0;
  unint64_t v30 = 0xE000000000000000;
  uint64_t v8 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v8 = v3 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v25 = v3;
  unint64_t v26 = v2;
  uint64_t v27 = 0;
  uint64_t v28 = v8;
  swift_bridgeObjectRetain();
  Swift::String_optional v9 = String.Iterator.next()();
  if (v9.value._object)
  {
    uint64_t countAndFlagsBits = v9.value._countAndFlagsBits;
    object = v9.value._object;
    do
    {
      if ((Character.isPunctuation.getter() & 1) == 0)
      {
        v13._uint64_t countAndFlagsBits = countAndFlagsBits;
        v13._object = object;
        String.append(_:)(v13);
      }
      swift_bridgeObjectRelease();
      Swift::String_optional v12 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v12.value._countAndFlagsBits;
      object = v12.value._object;
    }
    while (v12.value._object);
    uint64_t v14 = v29;
    unint64_t v7 = v30;
  }
  else
  {
    uint64_t v14 = 0;
  }
  swift_bridgeObjectRelease();
  uint64_t v25 = v14;
  unint64_t v26 = v7;
  _sS2SSysWl_0();
  uint64_t v15 = StringProtocol.localizedLowercase.getter();
  unint64_t v17 = v16;
  swift_bridgeObjectRelease();
  uint64_t v25 = v15;
  unint64_t v26 = v17;
  static Locale.current.getter();
  uint64_t v18 = type metadata accessor for Locale();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v6, 0, 1, v18);
  uint64_t v19 = StringProtocol.folding(options:locale:)();
  char v21 = v20;
  outlined destroy of TaskPriority?((uint64_t)v6, &demangling cache variable for type metadata for Locale?);
  swift_bridgeObjectRelease();
  uint64_t v22 = v19;
  unint64_t v23 = v21;
  result._object = v23;
  result._uint64_t countAndFlagsBits = v22;
  return result;
}

id String.BOOLValue.getter()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [v0 BOOLValue];

  return v1;
}

BOOL String.containsExcessiveHeightCharacters.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CharacterSet?);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v20 - v5;
  uint64_t v7 = type metadata accessor for CharacterSet();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  unint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = CTFontCopySystemUIFontExcessiveLineHeightCharacterSet();
  Swift::String_optional v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  if (v11
    && (Swift::String v13 = (void *)v11,
        v12(v4, 1, 1, v7),
        lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet, (void (*)(uint64_t))&type metadata accessor for CharacterSet), dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)(), v13, uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48), v14(v4, 1, v7) != 1))
  {
    uint64_t v20 = a2;
    unint64_t v17 = v4;
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v18(v6, v17, v7);
    v12(v6, 0, 1, v7);
    if (v14(v6, 1, v7) != 1)
    {
      v18(v10, v6, v7);
      uint64_t v22 = v21;
      uint64_t v23 = v20;
      _sS2SSysWl_0();
      StringProtocol.rangeOfCharacter(from:options:range:)();
      BOOL v15 = (v19 & 1) == 0;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      return v15;
    }
  }
  else
  {
    v12(v6, 1, 1, v7);
  }
  outlined destroy of TaskPriority?((uint64_t)v6, &demangling cache variable for type metadata for CharacterSet?);
  return 0;
}

BOOL String.containsCharacter(from:)()
{
  _sS2SSysWl_0();
  StringProtocol.rangeOfCharacter(from:options:range:)();
  return (v0 & 1) == 0;
}

void *one-time initialization function for xmlCharacterEntitiesMap()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Substring, Character)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100493D90;
  *(void *)(inited + 32) = Substring.init(_:)();
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 48) = v2;
  *(void *)(inited + 56) = v3;
  *(void *)(inited + 64) = 34;
  *(void *)(inited + 72) = 0xE100000000000000;
  *(void *)(inited + 80) = Substring.init(_:)();
  *(void *)(inited + 88) = v4;
  *(void *)(inited + 96) = v5;
  *(void *)(inited + 104) = v6;
  *(void *)(inited + 112) = 38;
  *(void *)(inited + 120) = 0xE100000000000000;
  *(void *)(inited + 128) = Substring.init(_:)();
  *(void *)(inited + 136) = v7;
  *(void *)(inited + 144) = v8;
  *(void *)(inited + 152) = v9;
  *(void *)(inited + 160) = 39;
  *(void *)(inited + 168) = 0xE100000000000000;
  *(void *)(inited + 176) = Substring.init(_:)();
  *(void *)(inited + 184) = v10;
  *(void *)(inited + 192) = v11;
  *(void *)(inited + 200) = v12;
  *(void *)(inited + 208) = 60;
  *(void *)(inited + 216) = 0xE100000000000000;
  *(void *)(inited + 224) = Substring.init(_:)();
  *(void *)(inited + 232) = v13;
  *(void *)(inited + 240) = v14;
  *(void *)(inited + 248) = v15;
  *(void *)(inited + 256) = 62;
  *(void *)(inited + 264) = 0xE100000000000000;
  Swift::String result = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  static String.xmlCharacterEntitiesMap = result;
  return result;
}

uint64_t decodeNumeric #1 (_:base:) in String.decodeXMLCharacters()(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((unint64_t)(a5 - 37) < 0xFFFFFFFFFFFFFFDDLL)
  {
    __break(1u);
    return static String._uncheckedFromUTF8(_:)();
  }
  if ((a2 ^ a1) < 0x4000) {
    return 0;
  }
  uint64_t v10 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5s6UInt32VSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5i9VGXEfU_s6L7V_SsTG5SiTf1cn_n(a1, a2, a3, a4, a5);
  if ((v10 & 0x10000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = specialized _parseInteger<A, B>(ascii:radix:)(a1, a2, a3, a4, a5);
    swift_bridgeObjectRelease();
    if ((v11 & 0x100000000) != 0) {
      return 0;
    }
  }
  else
  {
    LODWORD(v11) = v10;
    if ((v10 & 0x100000000) != 0) {
      return 0;
    }
  }
  uint64_t result = 0;
  if (WORD1(v11) <= 0x10u && (v11 & 0xFFFFF800) != 0xD800)
  {
    if ((v11 & 0xFFFFFF80) == 0 && v11 > 0xFF)
    {
      __break(1u);
      return result;
    }
    return static String._uncheckedFromUTF8(_:)();
  }
  return result;
}

uint64_t Optional<A>.isEmpty.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  BOOL v3 = v2 == 0;
  return !a2 || v3;
}

uint64_t Optional<A>.nonEmpty.getter(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = a1;
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3) {
    return 0;
  }
  swift_bridgeObjectRetain();
  return v2;
}

NSAttributedString __swiftcall NSAttributedString.init(string:attributes:replacingPlaceholder:withImage:imageAttributes:)(Swift::String string, Swift::OpaquePointer attributes, Swift::String replacingPlaceholder, UIImage_optional withImage, Swift::OpaquePointer imageAttributes)
{
  Class isa = withImage.value.super.isa;
  static String.localizedStringWithFormat(_:_:)();
  id v6 = objc_allocWithZone((Class)NSMutableAttributedString);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  _sSo21NSAttributedStringKeyaMa_0(0);
  uint64_t v9 = v8;
  lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&_sSo21NSAttributedStringKeyaABSHSCWL_0, _sSo21NSAttributedStringKeyaMa_0);
  uint64_t v23 = v9;
  Class v10 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = [v6 initWithString:v7 attributes:v10];

  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = [v12 rangeOfString:v13 options:129];
  uint64_t v16 = v15;

  if (isa)
  {
    unint64_t v17 = self;
    Class isa = isa;
    id v18 = [v17 textAttachmentWithImage:isa];
    Class v19 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v20 = [self attributedStringWithAttachment:v18 attributes:v19];
  }
  else
  {
    swift_bridgeObjectRelease();
    id v20 = [objc_allocWithZone((Class)NSAttributedString) init];
  }
  objc_msgSend(v11, "replaceCharactersInRange:withAttributedString:", v14, v16, v20, v23);
  id v21 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithAttributedString:v11];

  return (NSAttributedString)v21;
}

void one-time initialization function for epsilon()
{
  static Double.epsilon = 0x3E80000000000000;
}

uint64_t *Double.epsilon.unsafeMutableAddressor()
{
  if (one-time initialization token for epsilon != -1) {
    swift_once();
  }
  return &static Double.epsilon;
}

double static Double.epsilon.getter()
{
  if (one-time initialization token for epsilon != -1) {
    swift_once();
  }
  return *(double *)&static Double.epsilon;
}

double TimeIntervalSyntaxSugar.minutes.getter(uint64_t a1, uint64_t a2)
{
  return (*(double (**)(void))(a2 + 16))() * 60.0;
}

double TimeIntervalSyntaxSugar.hours.getter(uint64_t a1, uint64_t a2)
{
  return (*(double (**)(void))(a2 + 24))() * 60.0;
}

double protocol witness for TimeIntervalSyntaxSugar.seconds.getter in conformance Int()
{
  return (double)*v0;
}

double protocol witness for TimeIntervalSyntaxSugar.minutes.getter in conformance Int()
{
  return (double)*v0 * 60.0;
}

double protocol witness for TimeIntervalSyntaxSugar.hours.getter in conformance Int()
{
  return (double)*v0 * 60.0 * 60.0;
}

double protocol witness for TimeIntervalSyntaxSugar.minutes.getter in conformance Double()
{
  return *v0 * 60.0;
}

double protocol witness for TimeIntervalSyntaxSugar.hours.getter in conformance Double()
{
  return *v0 * 60.0 * 60.0;
}

uint64_t _NSRange.init(range:in:)()
{
  String.Index.samePosition(in:)();
  if (v0 & 1) != 0 || (String.Index.samePosition(in:)(), (v1))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v2 = String.UTF16View.distance(from:to:)();
    String.UTF16View.distance(from:to:)();
    swift_bridgeObjectRelease();
    return v2;
  }
  return result;
}

{
  char v0;
  char v1;
  uint64_t v2;
  uint64_t result;

  String.index(after:)();
  String.Index.samePosition(in:)();
  if (v0 & 1) != 0 || (String.Index.samePosition(in:)(), (v1))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v2 = String.UTF16View.distance(from:to:)();
    String.UTF16View.distance(from:to:)();
    swift_bridgeObjectRelease();
    return v2;
  }
  return result;
}

Swift::Bool __swiftcall _NSRange.contains(_:)(__C::_NSRange a1)
{
  if (a1.location >= v1)
  {
    if (__OFADD__(a1.location, a1.length))
    {
      __break(1u);
    }
    else if (!__OFADD__(v1, v2))
    {
      LOBYTE(a1.location) = v1 + v2 >= a1.location + a1.length;
      return a1.location;
    }
    __break(1u);
    return a1.location;
  }
  LOBYTE(a1.location) = 0;
  return a1.location;
}

__C::_NSRange __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _NSRange.convert(from:to:preserveLength:)(Swift::String from, Swift::String to, Swift::Bool preserveLength)
{
  _sS2SSysWl_0();
  if (StringProtocol.contains<A>(_:)())
  {
    swift_bridgeObjectRetain();
    Swift::Int v4 = String.UTF16View.count.getter();
    swift_bridgeObjectRelease();
    NSString v5 = String._bridgeToObjectiveC()();
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = objc_msgSend(v5, "rangeOfString:", v6, to._countAndFlagsBits, to._object, from._countAndFlagsBits, from._object);
    Swift::Int v9 = v8;

    v10.Swift::Int location = 0;
    v10.Swift::Int length = v4;
    v11.Swift::Int location = (Swift::Int)v7;
    v11.Swift::Int length = v9;
    __C::_NSRange v14 = _NSRange.convert(from:to:preserveLength:)(v10, v11, preserveLength);
    Swift::Int length = v14.length;
    Swift::Int location = v14.location;
  }
  else
  {
    lazy protocol witness table accessor for type _NSRange.ConversionError and conformance _NSRange.ConversionError();
    swift_allocError();
    *uint64_t v15 = 4;
    Swift::Int location = swift_willThrow();
  }
  result.Swift::Int length = length;
  result.Swift::Int location = location;
  return result;
}

__C::_NSRange __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _NSRange.convert(from:to:preserveLength:)(__C::_NSRange from, __C::_NSRange to, Swift::Bool preserveLength)
{
  if (to.location < from.location) {
    goto LABEL_5;
  }
  if (__OFADD__(to.location, to.length))
  {
    __break(1u);
    goto LABEL_19;
  }
  Swift::Int v5 = from.location + from.length;
  if (__OFADD__(from.location, from.length))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v5 < to.location + to.length)
  {
LABEL_5:
    char v6 = 0;
LABEL_6:
    lazy protocol witness table accessor for type _NSRange.ConversionError and conformance _NSRange.ConversionError();
    swift_allocError();
    char *v7 = v6;
    from.Swift::Int location = swift_willThrow();
    return from;
  }
  if (v3 < from.location)
  {
LABEL_11:
    char v6 = 1;
    goto LABEL_6;
  }
  uint64_t v8 = v4;
  if (__OFADD__(v3, v4)) {
    goto LABEL_20;
  }
  if (v5 < v3 + v4) {
    goto LABEL_11;
  }
  if (__OFSUB__(v3, to.location))
  {
LABEL_21:
    __break(1u);
    return from;
  }
  v10.Swift::Int location = 0;
  v10.Swift::Int length = v11;
  *(__C::_NSRange_optional *)&from.Swift::Int location = _NSRange.intersection(_:)(v10);
  if (v12)
  {
    char v6 = 2;
    goto LABEL_6;
  }
  if (preserveLength && from.length != v8)
  {
    char v6 = 3;
    goto LABEL_6;
  }
  return from;
}

Swift::Bool __swiftcall _NSRange.intersects(_:)(__C::_NSRange a1)
{
  if (__OFADD__(v1, v2))
  {
    __break(1u);
    goto LABEL_13;
  }
  if (__OFADD__(a1.location, a1.length))
  {
LABEL_13:
    __break(1u);
    return a1.location;
  }
  if (v1 >= a1.location && a1.location + a1.length > v1) {
    return 1;
  }
  LOBYTE(a1.location) = a1.location >= v1 && v1 + v2 > a1.location;
  return a1.location;
}

uint64_t one-time initialization function for notFound()
{
  uint64_t result = NSNotFound.getter();
  static _NSRange.notFound = result;
  unk_1005ADAC0 = 0;
  return result;
}

uint64_t *_NSRange.notFound.unsafeMutableAddressor()
{
  if (one-time initialization token for notFound != -1) {
    swift_once();
  }
  return &static _NSRange.notFound;
}

uint64_t static _NSRange.notFound.getter()
{
  if (one-time initialization token for notFound != -1) {
    swift_once();
  }
  return static _NSRange.notFound;
}

Swift::tuple_first___C__NSRange_second___C__NSRange __swiftcall _NSRange.difference(_:)(__C::_NSRange a1)
{
  Swift::Int v3 = v2;
  Swift::Int v4 = v1;
  Swift::Int v5 = v1 + v2;
  BOOL v6 = __OFADD__(v1, v2);
  if (v1 < a1.location)
  {
    if (!v6) {
      goto LABEL_10;
    }
    __break(1u);
  }
  if (v6)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (__OFADD__(a1.location, a1.length))
  {
LABEL_52:
    __break(1u);
LABEL_53:
    swift_once();
    goto LABEL_43;
  }
  if (a1.location + a1.length >= v5)
  {
    if (one-time initialization token for notFound == -1)
    {
LABEL_45:
      Swift::Int v4 = static _NSRange.notFound;
      Swift::Int v3 = unk_1005ADAC0;
      Swift::Int v7 = static _NSRange.notFound;
      Swift::Int v9 = unk_1005ADAC0;
      goto LABEL_46;
    }
LABEL_48:
    swift_once();
    goto LABEL_45;
  }
LABEL_10:
  Swift::Int v7 = a1.location + a1.length;
  if (__OFADD__(a1.location, a1.length))
  {
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v4 < a1.location || v7 <= v4) {
    goto LABEL_27;
  }
  BOOL v8 = 0;
  Swift::Int v3 = a1.location - v4;
  if (!__OFSUB__(a1.location, v4))
  {
    while (1)
    {
      Swift::Int v9 = v5 - v7;
      if (__OFSUB__(v5, v7)) {
        goto LABEL_50;
      }
      if (!v8) {
        break;
      }
      if (v7 >= v5) {
        goto LABEL_38;
      }
      Swift::Int v5 = v4 + v3;
      if (__OFADD__(v4, v3))
      {
        __break(1u);
LABEL_55:
        Swift::Int v11 = a1.location + a1.length;
        Swift::Int v12 = v9;
        swift_once();
        Swift::Int v9 = v12;
        Swift::Int v7 = v11;
LABEL_42:
        Swift::Int v4 = v7;
        Swift::Int v3 = v9;
        goto LABEL_43;
      }
      if (v5 < v7) {
        goto LABEL_46;
      }
      if (__OFADD__(v7, v9))
      {
        __break(1u);
        goto LABEL_57;
      }
      if (v5 <= v7 + v9) {
        Swift::Int v5 = v7 + v9;
      }
      if (v7 < v4) {
        Swift::Int v4 = a1.location + a1.length;
      }
      Swift::Int v3 = v5 - v4;
      if (!__OFSUB__(v5, v4)) {
        goto LABEL_38;
      }
      __break(1u);
LABEL_27:
      if (a1.location < v4 || v5 <= a1.location) {
        goto LABEL_38;
      }
      BOOL v8 = v4 < a1.location && v3 > 0;
      Swift::Int v3 = a1.location - v4;
      if (__OFSUB__(a1.location, v4)) {
        goto LABEL_37;
      }
    }
    if (v7 < v5)
    {
      if (one-time initialization token for notFound != -1) {
        goto LABEL_55;
      }
      goto LABEL_42;
    }
    if (one-time initialization token for notFound == -1) {
      goto LABEL_45;
    }
    goto LABEL_48;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  if (one-time initialization token for notFound != -1) {
    goto LABEL_53;
  }
LABEL_43:
  Swift::Int v7 = static _NSRange.notFound;
  Swift::Int v9 = unk_1005ADAC0;
LABEL_46:
  a1.Swift::Int location = v4;
  a1.Swift::Int length = v3;
LABEL_57:
  result.first = a1;
  result.second.Swift::Int length = v9;
  result.second.Swift::Int location = v7;
  return result;
}

uint64_t _NSRange.extendRangeToBounds(of:allowedCharacterSet:forbiddenCharacterSet:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = a3;
  uint64_t v34 = a4;
  uint64_t v6 = Range<>.init(_:in:)();
  if (v8)
  {
LABEL_22:
    int v31 = 0;
    uint64_t v30 = 667;
    goto LABEL_25;
  }
  unint64_t v9 = v6;
  unint64_t v10 = v7;
  uint64_t v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v12 = 4 * v11;
  unint64_t v35 = a2;
  uint64_t v32 = 4 * v11;
LABEL_5:
  if (v9 >= 0x4000)
  {
    unint64_t v15 = String.index(before:)();
    if (v10 >> 14 >= v15 >> 14)
    {
      char v16 = 0;
      unint64_t v17 = v15;
      unint64_t v14 = v10;
      do
      {
        unint64_t v36 = v9;
        uint64_t v18 = String.subscript.getter();
        uint64_t v19 = a1;
        unint64_t v21 = v20;
        __chkstk_darwin(v18);
        uint64_t v30 = v33;
        swift_bridgeObjectRetain();
        char v22 = specialized Sequence.allSatisfy(_:)((uint64_t (*)(void *))partial apply for closure #1 in _NSRange.extendRangeToBounds(of:allowedCharacterSet:forbiddenCharacterSet:), (uint64_t)v29, v18, v21);
        uint64_t v23 = swift_bridgeObjectRelease();
        __chkstk_darwin(v23);
        uint64_t v30 = v34;
        char v24 = specialized Sequence.reduce<A>(_:_:)(0, (void (*)(uint64_t *__return_ptr, char *, void *))partial apply for closure #2 in _NSRange.extendRangeToBounds(of:allowedCharacterSet:forbiddenCharacterSet:), (uint64_t)v29, v18, v21);
        a1 = v19;
        uint64_t v12 = v32;
        swift_bridgeObjectRelease();
        if (v22 & 1) == 0 || (v24)
        {
          unint64_t v9 = v36;
          if (v16) {
            goto LABEL_18;
          }
        }
        else
        {
          unint64_t v9 = v17;
          unint64_t v14 = v10;
          if ((v16 & 1) == 0) {
            goto LABEL_5;
          }
        }
LABEL_10:
        char v13 = 1;
        if (v12 == v14 >> 14) {
          goto LABEL_9;
        }
        unint64_t v10 = String.index(after:)();
        char v16 = 1;
        unint64_t v17 = v9;
      }
      while (v10 >> 14 >= v9 >> 14);
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
  char v13 = 0;
  unint64_t v14 = v10;
LABEL_9:
  if ((v13 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_18:
  swift_bridgeObjectRetain();
  String.Index.samePosition(in:)();
  if (v25)
  {
    int v31 = 0;
    uint64_t v30 = 719;
  }
  else
  {
    String.Index.samePosition(in:)();
    if ((v26 & 1) == 0)
    {
      uint64_t v27 = String.UTF16View.distance(from:to:)();
      String.UTF16View.distance(from:to:)();
      swift_bridgeObjectRelease();
      return v27;
    }
    int v31 = 0;
    uint64_t v30 = 720;
  }
LABEL_25:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in _NSRange.extendRangeToBounds(of:allowedCharacterSet:forbiddenCharacterSet:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for CharacterSet();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CharacterSet?);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CharacterSet?(a2, (uint64_t)v9);
  char v10 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    char v10 = CharacterSet.contains(_:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v10 & 1;
}

uint64_t specialized Sequence.allSatisfy(_:)(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  v17[3] = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    uint64_t v16 = a4 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    while (1)
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        int v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v17[0] = a3;
          v17[1] = v16;
        }
        else if ((a3 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        int v10 = _decodeScalar(_:startingAt:)();
      }
      uint64_t v12 = v11;
      LODWORD(v17[0]) = v10;
      char v13 = a1(v17);
      if (v4)
      {
        swift_bridgeObjectRelease();
        return v14 & 1;
      }
      if ((v13 & 1) == 0) {
        break;
      }
      v9 += v12;
      if (v9 >= v5)
      {
        swift_bridgeObjectRelease();
        char v14 = 1;
        return v14 & 1;
      }
    }
    swift_bridgeObjectRelease();
    char v14 = 0;
  }
  else
  {
    char v14 = 1;
  }
  return v14 & 1;
}

uint64_t closure #2 in _NSRange.extendRangeToBounds(of:allowedCharacterSet:forbiddenCharacterSet:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X2>, unsigned char *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for CharacterSet();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CharacterSet?);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  char v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v18 - v14;
  LOBYTE(a1) = *a1;
  outlined init with copy of CharacterSet?(a2, (uint64_t)&v18 - v14);
  if (a1)
  {
    char v16 = 1;
  }
  else
  {
    outlined init with copy of CharacterSet?((uint64_t)v15, (uint64_t)v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6) == 1)
    {
      char v16 = 0;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, v6);
      char v16 = CharacterSet.contains(_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
  uint64_t result = outlined destroy of TaskPriority?((uint64_t)v15, &demangling cache variable for type metadata for CharacterSet?);
  *a3 = v16 & 1;
  return result;
}

uint64_t specialized Sequence.reduce<A>(_:_:)(char a1, void (*a2)(uint64_t *__return_ptr, char *, void *), uint64_t a3, uint64_t a4, unint64_t a5)
{
  BYTE1(v17) = a1;
  if ((a5 & 0x2000000000000000) != 0) {
    uint64_t v6 = HIBYTE(a5) & 0xF;
  }
  else {
    uint64_t v6 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v6)
  {
    uint64_t v15 = a5 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    uint64_t v10 = 0;
    do
    {
      if ((a5 & 0x1000000000000000) != 0)
      {
        int v11 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a5 & 0x2000000000000000) != 0)
        {
          v16[0] = a4;
          v16[1] = v15;
        }
        else if ((a4 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        int v11 = _decodeScalar(_:startingAt:)();
      }
      uint64_t v13 = v12;
      LODWORD(v16[0]) = v11;
      a2(&v17, (char *)&v17 + 1, v16);
      if (v5) {
        break;
      }
      v10 += v13;
      LOBYTE(v13) = v17;
      BYTE1(v17) = v17;
    }
    while (v10 < v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v13) = a1;
  }
  return v13 & 1;
}

Swift::Int_optional __swiftcall _NSRange.NSRangeIterator.next()()
{
  Swift::Int v1 = *(void *)(v0 + 16);
  if (*(unsigned char *)(v0 + 24))
  {
    Swift::Bool v2 = 1;
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 8);
    if (__OFADD__(*(void *)v0, v3))
    {
      __break(1u);
    }
    else if (v1 >= *(void *)v0 + v3)
    {
      Swift::Int v1 = 0;
      Swift::Bool v2 = 1;
    }
    else
    {
      Swift::Bool v2 = 0;
      *(void *)(v0 + 16) = v1 + 1;
    }
  }
  result.value = v1;
  result.is_nil = v2;
  return result;
}

void protocol witness for IteratorProtocol.next() in conformance _NSRange.NSRangeIterator(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  if (*(unsigned char *)(v1 + 24)) {
    goto LABEL_6;
  }
  uint64_t v3 = *(void *)(v1 + 8);
  if (!__OFADD__(*(void *)v1, v3))
  {
    if (v2 < *(void *)v1 + v3)
    {
      char v4 = 0;
      *(void *)(v1 + 16) = v2 + 1;
LABEL_7:
      *(void *)a1 = v2;
      *(unsigned char *)(a1 + 8) = v4;
      return;
    }
    uint64_t v2 = 0;
LABEL_6:
    char v4 = 1;
    goto LABEL_7;
  }
  __break(1u);
}

void protocol witness for Sequence.makeIterator() in conformance _NSRange(uint64_t a1@<X8>)
{
  uint64_t v2 = v1[1];
  if (v2 >= 1) {
    uint64_t v3 = *v1;
  }
  else {
    uint64_t v3 = 0;
  }
  *(void *)a1 = *v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v2 < 1;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _NSRange()
{
  return specialized _copySequenceToContiguousArray<A>(_:)(*v0, v0[1]);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _NSRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3, v3[1]);
}

uint64_t WeakWrapper.value.setter()
{
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

uint64_t (*WeakWrapper.value.modify(uint64_t *a1))()
{
  a1[1] = v1;
  *a1 = swift_unknownObjectWeakLoadStrong();
  return WeakWrapper.value.modify;
}

uint64_t WeakWrapper.value.modify()
{
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

uint64_t WeakWrapper.init(value:)()
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();

  return swift_unknownObjectRelease();
}

uint64_t Int.romanNumeral.getter(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  uint64_t v1 = a1;
  for (unint64_t i = 0; i != 13; ++i)
  {
    if (i >= 0xD)
    {
      __break(1u);
      JUMPOUT(0x10029395CLL);
    }
    uint64_t v3 = qword_1004A27D0[*((char *)&outlined read-only object #0 of static RomanNumerals.allCases.getter + i + 32)];
    if (v1 >= v3)
    {
      char v4 = (void *)0xE100000000000000;
      uint64_t v5 = 77;
      switch(*((unsigned char *)&outlined read-only object #0 of static RomanNumerals.allCases.getter + i + 32))
      {
        case 1:
          char v4 = (void *)0xE200000000000000;
          uint64_t v5 = 19779;
          break;
        case 2:
          uint64_t v5 = 68;
          break;
        case 3:
          char v4 = (void *)0xE200000000000000;
          uint64_t v5 = 17475;
          break;
        case 4:
          uint64_t v5 = 67;
          break;
        case 5:
          char v4 = (void *)0xE200000000000000;
          uint64_t v5 = 17240;
          break;
        case 6:
          uint64_t v5 = 76;
          break;
        case 7:
          char v4 = (void *)0xE200000000000000;
          uint64_t v5 = 19544;
          break;
        case 8:
          uint64_t v5 = 88;
          break;
        case 9:
          char v4 = (void *)0xE200000000000000;
          uint64_t v5 = 22601;
          break;
        case 0xA:
          uint64_t v5 = 86;
          break;
        case 0xB:
          char v4 = (void *)0xE200000000000000;
          uint64_t v5 = 22089;
          break;
        case 0xC:
          uint64_t v5 = 73;
          break;
        default:
          goto LABEL_19;
      }
      do
      {
LABEL_19:
        v1 -= v3;
        v6._uint64_t countAndFlagsBits = v5;
        v6._object = v4;
        String.append(_:)(v6);
      }
      while (v1 >= v3);
      swift_bridgeObjectRelease();
    }
  }
  return 0;
}

_UNKNOWN **static RomanNumerals.allCases.getter()
{
  return &outlined read-only object #0 of static RomanNumerals.allCases.getter;
}

uint64_t RomanNumerals.arabicNumber.getter(char a1)
{
  return qword_1004A27D0[a1];
}

uint64_t RomanNumerals.rawValue.getter(char a1)
{
  uint64_t result = 77;
  switch(a1)
  {
    case 1:
      uint64_t result = 19779;
      break;
    case 2:
      uint64_t result = 68;
      break;
    case 3:
      uint64_t result = 17475;
      break;
    case 4:
      uint64_t result = 67;
      break;
    case 5:
      uint64_t result = 17240;
      break;
    case 6:
      uint64_t result = 76;
      break;
    case 7:
      uint64_t result = 19544;
      break;
    case 8:
      uint64_t result = 88;
      break;
    case 9:
      uint64_t result = 22601;
      break;
    case 10:
      uint64_t result = 86;
      break;
    case 11:
      uint64_t result = 22089;
      break;
    case 12:
      uint64_t result = 73;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RomanNumerals(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = RomanNumerals.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == RomanNumerals.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RomanNumerals()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  RomanNumerals.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RomanNumerals()
{
  RomanNumerals.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RomanNumerals()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  RomanNumerals.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance RomanNumerals@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized RomanNumerals.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RomanNumerals@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RomanNumerals.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance RomanNumerals(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static RomanNumerals.allCases.getter;
}

Swift::Int one-time initialization function for all()
{
  Swift::Int result = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for all);
  static NSDirectionalEdgeInsets.Edge.all = result;
  return result;
}

uint64_t *NSDirectionalEdgeInsets.Edge.all.unsafeMutableAddressor()
{
  if (one-time initialization token for all != -1) {
    swift_once();
  }
  return &static NSDirectionalEdgeInsets.Edge.all;
}

uint64_t static NSDirectionalEdgeInsets.Edge.all.getter()
{
  if (one-time initialization token for all != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

double NSDirectionalEdgeInsets.init(edge:length:)(uint64_t a1, double a2)
{
  if (specialized Set.contains(_:)(0, a1)) {
    double v4 = a2;
  }
  else {
    double v4 = 0.0;
  }
  specialized Set.contains(_:)(1u, a1);
  specialized Set.contains(_:)(2u, a1);
  specialized Set.contains(_:)(3u, a1);
  swift_bridgeObjectRelease();
  return v4;
}

id @nonobjc NSRegularExpression.init(pattern:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = 0;
  id v6 = [v3 initWithPattern:v5 options:a3 error:&v10];

  if (v6)
  {
    id v7 = v10;
  }
  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t _ss22__RawDictionaryStorageC4findys10_HashTableV6BucketV6bucket_Sb5foundtxSHRzlFSS_Tg5_0(uint64_t a1, uint64_t a2)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))&Character.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Hasher.init(_seed:)();
  a3(v10, a1, a2);
  Swift::Int v7 = Hasher._finalize()();

  return a4(a1, a2, v7);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, a4, v8);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  if (a2)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v6 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if ((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v11 = *(void *)(v5 + 48);
    uint64_t v12 = (unint64_t *)(v11 + 32 * v8);
    unint64_t v13 = *v12;
    unint64_t v14 = v12[1];
    unint64_t v15 = v12[2];
    unint64_t v16 = v12[3];
    unint64_t v17 = a1 >> 16;
    unint64_t v18 = a2 >> 16;
    BOOL v19 = v15 == a3 && v16 == a4;
    BOOL v20 = v19 && v13 >> 16 == v17;
    BOOL v21 = v20 && v14 >> 16 == v18;
    if (!v21 && (_stringCompareInternal(_:_:_:_:expecting:)() & 1) == 0)
    {
      uint64_t v22 = ~v7;
      do
      {
        unint64_t v8 = (v8 + 1) & v22;
        if (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
          break;
        }
        uint64_t v23 = (void *)(v11 + 32 * v8);
        BOOL v24 = v23[2] == a3 && v23[3] == a4;
        BOOL v25 = v24 && *v23 >> 16 == v17;
        BOOL v26 = v25 && v23[1] >> 16 == v18;
      }
      while (!v26 && (_stringCompareInternal(_:_:_:_:expecting:)() & 1) == 0);
    }
  }
  return v8;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    uint64_t v8 = v4;
    uint64_t v11 = ~v6;
    do
    {
      unint64_t v14 = (void *)(*(void *)(v8 + 48) + 24 * v7);
      uint64_t v15 = v14[1];
      unint64_t v16 = (void *)v14[2];
      if (v15)
      {
        if (a2)
        {
          BOOL v17 = *v14 == a1 && v15 == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
LABEL_3:
            type metadata accessor for UIMenu(0, (unint64_t *)&_sSo8NSObjectCML_0);
            swift_bridgeObjectRetain();
            id v12 = v16;
            char v13 = static NSObject.== infix(_:_:)();

            swift_bridgeObjectRelease();
            if (v13) {
              return v7;
            }
          }
        }
      }
      else if (!a2)
      {
        goto LABEL_3;
      }
      unint64_t v7 = (v7 + 1) & v11;
    }
    while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t result, uint64_t a2)
{
  Swift::Int v2 = _swiftEmptyArrayStorage;
  BOOL v21 = a2 < 1;
  if (a2 < 1)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v3 = result;
    if (__OFADD__(result, a2))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v4 = 0;
    if (result <= result + a2) {
      uint64_t v5 = result + a2;
    }
    else {
      uint64_t v5 = result;
    }
    uint64_t v6 = &_swiftEmptyArrayStorage[4];
    while (v5 != v3)
    {
      if (!v4)
      {
        unint64_t v7 = v2[3];
        if ((uint64_t)((v7 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_33;
        }
        int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
        if (v8 <= 1) {
          uint64_t v9 = 1;
        }
        else {
          uint64_t v9 = v8;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
        id v10 = (void *)swift_allocObject();
        int64_t v11 = _swift_stdlib_malloc_size(v10);
        uint64_t v12 = v11 - 32;
        if (v11 < 32) {
          uint64_t v12 = v11 - 25;
        }
        uint64_t v13 = v12 >> 3;
        v10[2] = v9;
        v10[3] = 2 * (v12 >> 3);
        unint64_t v14 = (unint64_t)(v10 + 4);
        uint64_t v15 = v2[3] >> 1;
        if (v2[2])
        {
          if (v10 != v2 || v14 >= (unint64_t)&v2[v15 + 4]) {
            memmove(v10 + 4, v2 + 4, 8 * v15);
          }
          v2[2] = 0;
        }
        uint64_t v6 = (void *)(v14 + 8 * v15);
        uint64_t v4 = (v13 & 0x7FFFFFFFFFFFFFFFLL) - v15;
        Swift::Int result = swift_release();
        Swift::Int v2 = v10;
      }
      BOOL v17 = __OFSUB__(v4--, 1);
      if (v17)
      {
        __break(1u);
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
      *v6++ = v3++;
      if (v21) {
        break;
      }
    }
  }
  unint64_t v18 = v2[3];
  if (v18 < 2) {
    return (uint64_t)v2;
  }
  unint64_t v19 = v18 >> 1;
  BOOL v17 = __OFSUB__(v19, v4);
  uint64_t v20 = v19 - v4;
  if (!v17)
  {
    v2[2] = v20;
    return (uint64_t)v2;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  _sS2sSTsWl_0();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = _sSS8_copyingyS2SFZ_0();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v13 = specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13 | ((((unint64_t)v13 >> 32) & 1) << 32);
}

unsigned __int8 *specialized closure #1 in _parseInteger<A, B>(ascii:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            unint64_t v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__CFADD__(v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            unint64_t v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__CFADD__(v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            unint64_t v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (v14 < v15) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t _sSS8_copyingyS2SFZ_0()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = _sSS8_copyingySSSsFZ_0(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t _sSS8_copyingySSSsFZ_0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          char v11 = _ss22_ContiguousArrayBufferV19_uninitializedCount15minimumCapacityAByxGSi_SitcfCs5UInt8V_Tgmq5_1(v9, 0), v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4), swift_bridgeObjectRetain(), swift_bridgeObjectRelease(), v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

BOOL specialized Sequence<>.starts<A>(with:)(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4 >> 14;
  swift_bridgeObjectRetain();
  if (v5 == a3 >> 14)
  {
LABEL_10:
    object = String.Iterator.next()().value._object;
    swift_bridgeObjectRelease();
    BOOL v13 = object == 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    while (1)
    {
      while (1)
      {
        uint64_t v7 = Substring.subscript.getter();
        uint64_t v9 = v8;
        unint64_t v10 = Substring.index(after:)();
        Swift::String_optional v11 = String.Iterator.next()();
        if (!v11.value._object)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          BOOL v13 = 1;
          goto LABEL_13;
        }
        if (v7 != v11.value._countAndFlagsBits || v11.value._object != v9) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v5 == v10 >> 14)
        {
LABEL_9:
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
      }
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        break;
      }
      if (v5 == v10 >> 14) {
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    BOOL v13 = 0;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5s6UInt32VSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5i9VGXEfU_s6L7V_SsTG5SiTf1cn_n(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    LODWORD(result) = 0;
    unsigned __int8 v14 = 0;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v13[0] = a3;
    v13[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    Swift::String_optional v11 = v13;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    Swift::String_optional v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    Swift::String_optional v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5s6UInt32VSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5h9VGXEfU_s6L7V_SsTG5SiTf1nnc_nTf4xnn_n((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    unsigned __int8 v14 = BYTE4(result) & 1;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  return result;
}

unint64_t _sS2SSysWl_0()
{
  unint64_t result = _sS2SSysWL_0;
  if (!_sS2SSysWL_0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&_sS2SSysWL_0);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _NSRange.ConversionError and conformance _NSRange.ConversionError()
{
  unint64_t result = lazy protocol witness table cache variable for type _NSRange.ConversionError and conformance _NSRange.ConversionError;
  if (!lazy protocol witness table cache variable for type _NSRange.ConversionError and conformance _NSRange.ConversionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NSRange.ConversionError and conformance _NSRange.ConversionError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _NSRange.ConversionError and conformance _NSRange.ConversionError;
  if (!lazy protocol witness table cache variable for type _NSRange.ConversionError and conformance _NSRange.ConversionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NSRange.ConversionError and conformance _NSRange.ConversionError);
  }
  return result;
}

uint64_t partial apply for closure #1 in _NSRange.extendRangeToBounds(of:allowedCharacterSet:forbiddenCharacterSet:)(uint64_t a1)
{
  return closure #1 in _NSRange.extendRangeToBounds(of:allowedCharacterSet:forbiddenCharacterSet:)(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t partial apply for closure #2 in _NSRange.extendRangeToBounds(of:allowedCharacterSet:forbiddenCharacterSet:)@<X0>(unsigned char *a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #2 in _NSRange.extendRangeToBounds(of:allowedCharacterSet:forbiddenCharacterSet:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFqd__AGKXEfU_SRys5UInt8VGABySS8UTF8ViewVGSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lyAIqd__Isgyrzo_qd__sAO_pALRszr__lIetyggrzo_Tpq5s6UInt32VSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5h9VGXEfU_s6L7V_SsTG5SiTf1nnc_nTf4xnn_n(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_104;
  }
  unint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    unint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_100;
  }
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  unint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  unsigned __int8 v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    unsigned __int8 v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v33 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v34 = a6 + 55;
        }
        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v34 = 65;
        }
        if (a6 <= 10) {
          unsigned __int8 v35 = a6 + 48;
        }
        else {
          unsigned __int8 v35 = 58;
        }
        if (v19)
        {
          unsigned int v24 = 0;
          unint64_t v36 = v19 + 1;
          uint64_t v37 = result - 1;
          do
          {
            unsigned int v38 = *v36;
            if (v38 < 0x30 || v38 >= v35)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                unsigned int v29 = 0;
                unsigned __int8 v30 = 1;
                if (v38 < 0x61 || v38 >= v33) {
                  return v29 | ((unint64_t)v30 << 32);
                }
                char v39 = -87;
              }
              else
              {
                char v39 = -55;
              }
            }
            else
            {
              char v39 = -48;
            }
            unint64_t v40 = v24 * (unint64_t)a6;
            if ((v40 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_96;
            }
            unsigned __int8 v41 = v38 + v39;
            unsigned int v24 = v40 + v41;
            if (__CFADD__(v40, v41)) {
              goto LABEL_96;
            }
            ++v36;
            --v37;
          }
          while (v37);
LABEL_94:
          unsigned __int8 v30 = 0;
          unsigned int v29 = v24;
          return v29 | ((unint64_t)v30 << 32);
        }
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v42 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v43 = a6 + 55;
      }
      else
      {
        unsigned __int8 v42 = 97;
        unsigned __int8 v43 = 65;
      }
      if (a6 <= 10) {
        unsigned __int8 v44 = a6 + 48;
      }
      else {
        unsigned __int8 v44 = 58;
      }
      if (v19)
      {
        unsigned int v24 = 0;
        while (1)
        {
          unsigned int v45 = *v19;
          if (v45 < 0x30 || v45 >= v44)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              unsigned int v29 = 0;
              unsigned __int8 v30 = 1;
              if (v45 < 0x61 || v45 >= v42) {
                return v29 | ((unint64_t)v30 << 32);
              }
              char v46 = -87;
            }
            else
            {
              char v46 = -55;
            }
          }
          else
          {
            char v46 = -48;
          }
          unint64_t v47 = v24 * (unint64_t)a6;
          if ((v47 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_96;
          }
          unsigned __int8 v48 = v45 + v46;
          unsigned int v24 = v47 + v48;
          if (__CFADD__(v47, v48)) {
            goto LABEL_96;
          }
          ++v19;
          if (!--result) {
            goto LABEL_94;
          }
        }
      }
      goto LABEL_95;
    }
LABEL_96:
    unsigned int v29 = 0;
    unsigned __int8 v30 = 1;
    return v29 | ((unint64_t)v30 << 32);
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v22 = a6 + 55;
      }
      else
      {
        unsigned __int8 v21 = 97;
        unsigned __int8 v22 = 65;
      }
      if (a6 <= 10) {
        unsigned __int8 v23 = a6 + 48;
      }
      else {
        unsigned __int8 v23 = 58;
      }
      if (v19)
      {
        unsigned int v24 = 0;
        unsigned __int8 v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              unsigned int v29 = 0;
              unsigned __int8 v30 = 1;
              if (v27 < 0x61 || v27 >= v21) {
                return v29 | ((unint64_t)v30 << 32);
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          unint64_t v31 = v24 * (unint64_t)a6;
          if ((v31 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_96;
          }
          unsigned __int8 v32 = v27 + v28;
          unsigned int v24 = v31 - v32;
          if (v31 < v32) {
            goto LABEL_96;
          }
          ++v25;
          if (!--v26) {
            goto LABEL_94;
          }
        }
      }
LABEL_95:
      unsigned int v29 = 0;
      unsigned __int8 v30 = 0;
      return v29 | ((unint64_t)v30 << 32);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

unint64_t specialized RomanNumerals.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of RomanNumerals.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xD) {
    return 13;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type _NSRange.NSRangeIterator and conformance _NSRange.NSRangeIterator()
{
  unint64_t result = lazy protocol witness table cache variable for type _NSRange.NSRangeIterator and conformance _NSRange.NSRangeIterator;
  if (!lazy protocol witness table cache variable for type _NSRange.NSRangeIterator and conformance _NSRange.NSRangeIterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NSRange.NSRangeIterator and conformance _NSRange.NSRangeIterator);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RomanNumerals and conformance RomanNumerals()
{
  unint64_t result = lazy protocol witness table cache variable for type RomanNumerals and conformance RomanNumerals;
  if (!lazy protocol witness table cache variable for type RomanNumerals and conformance RomanNumerals)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RomanNumerals and conformance RomanNumerals);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in RomanNumerals()
{
  return lazy protocol witness table accessor for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>(&lazy protocol witness table cache variable for type [RomanNumerals] and conformance [A], &demangling cache variable for type metadata for [RomanNumerals]);
}

unint64_t lazy protocol witness table accessor for type NSDirectionalEdgeInsets.Edge and conformance NSDirectionalEdgeInsets.Edge()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDirectionalEdgeInsets.Edge and conformance NSDirectionalEdgeInsets.Edge;
  if (!lazy protocol witness table cache variable for type NSDirectionalEdgeInsets.Edge and conformance NSDirectionalEdgeInsets.Edge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDirectionalEdgeInsets.Edge and conformance NSDirectionalEdgeInsets.Edge);
  }
  return result;
}

ValueMetadata *type metadata accessor for Data.Hexadecimal()
{
  return &type metadata for Data.Hexadecimal;
}

unsigned char *__swift_memcpy1_1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

unsigned char *storeEnumTagSinglePayload for _NSRange.ConversionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002958D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _NSRange.ConversionError()
{
  return &type metadata for _NSRange.ConversionError;
}

__n128 __swift_memcpy25_8_0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _NSRange.NSRangeIterator(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _NSRange.NSRangeIterator(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 25) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _NSRange.NSRangeIterator()
{
  return &type metadata for _NSRange.NSRangeIterator;
}

uint64_t type metadata accessor for WeakWrapper()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for RomanNumerals(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *__n128 result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100295A70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RomanNumerals()
{
  return &type metadata for RomanNumerals;
}

unsigned char *storeEnumTagSinglePayload for NSDirectionalEdgeInsets.Edge(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100295B74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NSDirectionalEdgeInsets.Edge()
{
  return &type metadata for NSDirectionalEdgeInsets.Edge;
}

uint64_t lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of CharacterSet?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CharacterSet?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t _sS2sSTsWl_0()
{
  unint64_t result = _sS2sSTsWL_0;
  if (!_sS2sSTsWL_0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&_sS2sSTsWL_0);
  }
  return result;
}

BOOL static MPModelObject.LoggingComponent.__derived_enum_less_than(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance MPModelObject.LoggingComponent(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance MPModelObject.LoggingComponent(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance MPModelObject.LoggingComponent(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance MPModelObject.LoggingComponent(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

uint64_t MPModelObject.humanDescription(including:)(uint64_t a1)
{
  Swift::String v2 = v1;
  swift_getObjectType();
  v4._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 8250;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v14[0] = 0;
  v14[1] = 0xE000000000000000;
  unsigned int v6 = self;
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = a1;
  v7[3] = v14;
  v7[4] = v2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = partial apply for closure #1 in MPModelObject.humanDescription(including:);
  *(void *)(v8 + 24) = v7;
  v13[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  v13[5] = v8;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  void v13[2] = thunk for @escaping @callee_guaranteed () -> ();
  v13[3] = &block_descriptor_38;
  uint64_t v9 = _Block_copy(v13);
  swift_bridgeObjectRetain();
  id v10 = v2;
  swift_retain();
  swift_release();
  [v6 performWithoutEnforcement:v9];
  _Block_release(v9);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v2)
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = v14[0];
    swift_release();
    return v12;
  }
  return result;
}

uint64_t closure #1 in MPModelObject.humanDescription(including:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = swift_bridgeObjectRetain();
  Swift::String v5 = specialized _copyCollectionToContiguousArray<A>(_:)(v4);
  swift_bridgeObjectRelease();
  *(void *)&v28[0] = v5;
  specialized MutableCollection<>.sort(by:)((char **)v28);
  uint64_t v6 = *(void *)&v28[0];
  uint64_t v7 = *(void *)(*(void *)&v28[0] + 16);
  if (v7)
  {
    swift_retain();
    uint64_t v8 = 0;
    while (*(unsigned char *)(v6 + v8 + 32))
    {
      if (*(unsigned char *)(v6 + v8 + 32) == 1)
      {
        *(void *)&v28[0] = 23328;
        *((void *)&v28[0] + 1) = 0xE200000000000000;
        id v18 = [a3 shortDescription];
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unsigned __int8 v21 = v20;

        v22._uint64_t countAndFlagsBits = v19;
        v22._object = v21;
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._uint64_t countAndFlagsBits = 93;
        v23._object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        goto LABEL_4;
      }
      type metadata accessor for MPModelObject();
      ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
      InstanceVariable = class_getInstanceVariable(ObjCClassFromMetadata, "_storage");
      if (!InstanceVariable) {
        goto LABEL_6;
      }
      strcpy((char *)v29, " properties=");
      BYTE5(v29[1]) = 0;
      HIWORD(v29[1]) = -5120;
      if (object_getIvar(a3, InstanceVariable))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v28, 0, sizeof(v28));
      }
      __swift_instantiateConcreteTypeFromMangledName(&_sypSgMD_1);
      v26._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      uint64_t v15 = v29[0];
      uint64_t v16 = v29[1];
LABEL_5:
      uint64_t v17 = v16;
      String.append(_:)(*(Swift::String *)&v15);
      swift_bridgeObjectRelease();
LABEL_6:
      if (v7 == ++v8) {
        return swift_release_n();
      }
    }
    strcpy((char *)v28, " identifiers=");
    HIWORD(v28[0]) = -4864;
    id v9 = [a3 identifiers];
    id v10 = [v9 description];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    v14._uint64_t countAndFlagsBits = v11;
    v14._object = v13;
    String.append(_:)(v14);

    swift_bridgeObjectRelease();
LABEL_4:
    uint64_t v16 = *((void *)&v28[0] + 1);
    uint64_t v15 = *(void *)&v28[0];
    goto LABEL_5;
  }

  return swift_release();
}

uint64_t sub_100296304()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MPModelObject.humanDescription(including:)()
{
  return closure #1 in MPModelObject.humanDescription(including:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100296350()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_36(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_36()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type MPModelObject.LoggingComponent and conformance MPModelObject.LoggingComponent()
{
  unint64_t result = lazy protocol witness table cache variable for type MPModelObject.LoggingComponent and conformance MPModelObject.LoggingComponent;
  if (!lazy protocol witness table cache variable for type MPModelObject.LoggingComponent and conformance MPModelObject.LoggingComponent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MPModelObject.LoggingComponent and conformance MPModelObject.LoggingComponent);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MPModelObject.LoggingComponent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10029649CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MPModelObject.LoggingComponent()
{
  return &type metadata for MPModelObject.LoggingComponent;
}

uint64_t MPModelSong.shortDescription.getter()
{
  uint64_t v1 = v0;
  id v2 = [v0 title];
  if (v2)
  {
    int v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unsigned int v6 = v5;
  }
  else
  {
    unsigned int v6 = (void *)0xED0000676E6F5320;
    uint64_t v4 = 0x64656C7469746E55;
  }
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 34;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  id v9 = [v1 album];
  if (v9)
  {
    id v10 = v9;
    id v11 = [v9 shortDescription];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v14 = v13;

    v15._uint64_t countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = 0x206D75626C41203BLL;
    v16._object = (void *)0xE800000000000000;
    String.append(_:)(v16);

    swift_bridgeObjectRelease();
  }
  id v17 = [v1 artist];
  if (v17)
  {
    id v18 = v17;
    id v19 = [v17 shortDescription];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v22 = v21;

    v23._uint64_t countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 0x747369747241203BLL;
    v24._object = (void *)0xE900000000000020;
    String.append(_:)(v24);

    swift_bridgeObjectRelease();
  }
  return 0x22203A656C746954;
}

uint64_t MPModelPlaylist.shortDescription.getter()
{
  id v1 = [v0 name];
  if (v1)
  {
    id v2 = v1;
    unint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = (void *)0x800000010046F5A0;
    unint64_t v3 = 0xD000000000000011;
  }
  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 34;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0x22203A656D614ELL;
}

uint64_t MPModelPlaylistEntry.shortDescription.getter()
{
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for implicit closure #2 in implicit closure #1 in MPModelPlaylistEntry.shortDescription.getter;
  *(void *)(v2 + 24) = v1;
  uint64_t v12 = v2;
  id v3 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ());
  v4._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 2236475;
  v5._object = (void *)0xE300000000000000;
  String.append(_:)(v5);
  id v6 = objc_msgSend(v3, "anyObject", partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned MPModelPlaylistEntryType), v12);
  Swift::String v7 = v6;
  if (v6)
  {
    id v8 = [v6 shortDescription];

    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  __swift_instantiateConcreteTypeFromMangledName(&_sSSSgMD_0);
  v9._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 34;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 0x203A65707954;
}

uint64_t MPModelTVEpisode.shortDescription.getter()
{
  uint64_t v1 = v0;
  id v2 = [v0 title];
  if (v2)
  {
    id v3 = v2;
    unint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v6 = v5;
  }
  else
  {
    id v6 = (void *)0x8000000100471BE0;
    unint64_t v4 = 0xD000000000000010;
  }
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 34;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  id v9 = [v1 show];
  if (v9)
  {
    Swift::String v10 = v9;
    id v11 = [v9 shortDescription];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v14 = v13;

    v15._uint64_t countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = 0x20776F6853203BLL;
    v16._object = (void *)0xE700000000000000;
    String.append(_:)(v16);

    swift_bridgeObjectRelease();
  }
  id v17 = [v1 season];
  if (v17)
  {
    id v18 = v17;
    id v19 = [v17 shortDescription];
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v22 = v21;

    v23._uint64_t countAndFlagsBits = v20;
    v23._object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 0x6E6F73616553203BLL;
    v24._object = (void *)0xE900000000000020;
    String.append(_:)(v24);

    swift_bridgeObjectRelease();
  }
  return 0x22203A656C746954;
}

id @objc MPModelSong.shortDescription.getter(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();

  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v5;
}

uint64_t MPModelRadioStation.shortDescription.getter()
{
  id v1 = [v0 name];
  if (v1)
  {
    id v2 = v1;
    unint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v5 = v4;
  }
  else
  {
    NSString v5 = (void *)0x8000000100471BC0;
    unint64_t v3 = 0xD000000000000010;
  }
  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 34;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0x22203A656D614ELL;
}

uint64_t sub_100297350()
{
  return swift_deallocObject();
}

id partial apply for implicit closure #2 in implicit closure #1 in MPModelPlaylistEntry.shortDescription.getter()
{
  return [*(id *)(v0 + 16) type];
}

uint64_t sub_100297398()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned MPModelPlaylistEntryType)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(char **a1)
{
  id v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    id v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  char *v2;
  uint64_t v3;
  uint64_t result;
  void v5[2];

  id v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    id v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

{
  char *v2;
  uint64_t v3;
  uint64_t result;
  void v5[2];

  id v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    id v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

unint64_t type metadata accessor for MPModelObject()
{
  unint64_t result = _sSo13MPModelObjectCML_0;
  if (!_sSo13MPModelObjectCML_0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&_sSo13MPModelObjectCML_0);
  }
  return result;
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(void *a1)
{
  id v2 = a1;
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_138;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v76 = 0;
      uint64_t v77 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unsigned int v79 = *(unsigned __int8 *)(v77 + i);
        uint64_t v80 = v76;
        do
        {
          unsigned int v81 = *(unsigned __int8 *)(v77 + v80);
          if (v79 >= v81) {
            break;
          }
          if (!v77) {
            goto LABEL_142;
          }
          *(unsigned char *)(v77 + v80 + 1) = v81;
          *(unsigned char *)(v77 + v80--) = v79;
        }
        while (v80 != -1);
        ++v76;
      }
    }
  }
  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_137;
    }
    uint64_t v92 = result;
    Swift::Int v93 = v3;
    if (v3 > 1)
    {
      uint64_t v6 = v5 >> 1;
      uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(result + 16) = v6;
      Swift::Int v3 = v93;
      v91 = (void *)result;
      v95 = (unsigned __int8 *)(result + 32);
LABEL_13:
      Swift::Int v8 = 0;
      v90 = v2;
      uint64_t v9 = *v2;
      Swift::String v10 = (char *)_swiftEmptyArrayStorage;
      uint64_t v94 = *v2;
      while (1)
      {
        Swift::Int v12 = v8++;
        if (v8 < v3)
        {
          unsigned int v13 = *(unsigned __int8 *)(v9 + v8);
          unsigned int v14 = *(unsigned __int8 *)(v9 + v12);
          Swift::Int v8 = v12 + 2;
          if (v12 + 2 < v3)
          {
            unsigned int v15 = v13;
            while (1)
            {
              unsigned int v16 = *(unsigned __int8 *)(v9 + v8);
              if (v13 < v14 == v16 >= v15) {
                break;
              }
              ++v8;
              unsigned int v15 = v16;
              if (v3 == v8)
              {
                Swift::Int v8 = v3;
                break;
              }
            }
          }
          if (v13 < v14)
          {
            if (v8 < v12) {
              goto LABEL_139;
            }
            if (v12 < v8)
            {
              Swift::Int v17 = v8 - 1;
              Swift::Int v18 = v12;
              do
              {
                if (v18 != v17)
                {
                  if (!v9) {
                    goto LABEL_145;
                  }
                  char v19 = *(unsigned char *)(v9 + v18);
                  *(unsigned char *)(v9 + v18) = *(unsigned char *)(v9 + v17);
                  *(unsigned char *)(v9 + v17) = v19;
                }
                BOOL v58 = ++v18 < v17--;
              }
              while (v58);
            }
          }
        }
        if (v8 < v3)
        {
          if (__OFSUB__(v8, v12)) {
            goto LABEL_136;
          }
          if (v8 - v12 < v92)
          {
            Swift::Int v20 = v12 + v92;
            if (__OFADD__(v12, v92)) {
              goto LABEL_140;
            }
            if (v20 >= v3) {
              Swift::Int v20 = v3;
            }
            if (v20 < v12)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v8 != v20)
            {
              unsigned __int8 v21 = (unsigned char *)(v9 + v8);
              do
              {
                unsigned int v22 = *(unsigned __int8 *)(v9 + v8);
                Swift::Int v23 = v12;
                Swift::String v24 = v21;
                do
                {
                  unsigned int v25 = *(v24 - 1);
                  if (v22 >= v25) {
                    break;
                  }
                  if (!v9) {
                    goto LABEL_143;
                  }
                  *Swift::String v24 = v25;
                  *--Swift::String v24 = v22;
                  ++v23;
                }
                while (v8 != v23);
                ++v8;
                ++v21;
              }
              while (v8 != v20);
              Swift::Int v8 = v20;
            }
          }
        }
        if (v8 < v12) {
          goto LABEL_131;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSnySiG_Tgq5_0(0, *((void *)v10 + 2) + 1, 1, v10);
          Swift::String v10 = (char *)result;
        }
        unint64_t v27 = *((void *)v10 + 2);
        unint64_t v26 = *((void *)v10 + 3);
        unint64_t v11 = v27 + 1;
        uint64_t v9 = v94;
        if (v27 >= v26 >> 1)
        {
          uint64_t result = (uint64_t)_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSnySiG_Tgq5_0((char *)(v26 > 1), v27 + 1, 1, v10);
          uint64_t v9 = v94;
          Swift::String v10 = (char *)result;
        }
        *((void *)v10 + 2) = v11;
        char v28 = v10 + 32;
        unsigned int v29 = &v10[16 * v27 + 32];
        *(void *)unsigned int v29 = v12;
        *((void *)v29 + 1) = v8;
        if (v27)
        {
          while (1)
          {
            unint64_t v30 = v11 - 1;
            if (v11 >= 4)
            {
              unsigned __int8 v35 = &v28[2 * v11];
              uint64_t v36 = *(v35 - 8);
              uint64_t v37 = *(v35 - 7);
              BOOL v41 = __OFSUB__(v37, v36);
              uint64_t v38 = v37 - v36;
              if (v41) {
                goto LABEL_120;
              }
              uint64_t v40 = *(v35 - 6);
              uint64_t v39 = *(v35 - 5);
              BOOL v41 = __OFSUB__(v39, v40);
              uint64_t v33 = v39 - v40;
              char v34 = v41;
              if (v41) {
                goto LABEL_121;
              }
              unint64_t v42 = v11 - 2;
              unsigned __int8 v43 = &v28[2 * v11 - 4];
              uint64_t v45 = *v43;
              uint64_t v44 = v43[1];
              BOOL v41 = __OFSUB__(v44, v45);
              uint64_t v46 = v44 - v45;
              if (v41) {
                goto LABEL_122;
              }
              BOOL v41 = __OFADD__(v33, v46);
              uint64_t v47 = v33 + v46;
              if (v41) {
                goto LABEL_124;
              }
              if (v47 >= v38)
              {
                uint64_t v65 = &v28[2 * v30];
                uint64_t v67 = *v65;
                uint64_t v66 = v65[1];
                BOOL v41 = __OFSUB__(v66, v67);
                uint64_t v68 = v66 - v67;
                if (v41) {
                  goto LABEL_130;
                }
                BOOL v58 = v33 < v68;
                goto LABEL_84;
              }
            }
            else
            {
              if (v11 != 3)
              {
                uint64_t v59 = *((void *)v10 + 4);
                uint64_t v60 = *((void *)v10 + 5);
                BOOL v41 = __OFSUB__(v60, v59);
                uint64_t v52 = v60 - v59;
                char v53 = v41;
                goto LABEL_78;
              }
              uint64_t v32 = *((void *)v10 + 4);
              uint64_t v31 = *((void *)v10 + 5);
              BOOL v41 = __OFSUB__(v31, v32);
              uint64_t v33 = v31 - v32;
              char v34 = v41;
            }
            if (v34) {
              goto LABEL_123;
            }
            unint64_t v42 = v11 - 2;
            unsigned __int8 v48 = &v28[2 * v11 - 4];
            uint64_t v50 = *v48;
            uint64_t v49 = v48[1];
            BOOL v51 = __OFSUB__(v49, v50);
            uint64_t v52 = v49 - v50;
            char v53 = v51;
            if (v51) {
              goto LABEL_125;
            }
            uint64_t v54 = &v28[2 * v30];
            uint64_t v56 = *v54;
            uint64_t v55 = v54[1];
            BOOL v41 = __OFSUB__(v55, v56);
            uint64_t v57 = v55 - v56;
            if (v41) {
              goto LABEL_127;
            }
            if (__OFADD__(v52, v57)) {
              goto LABEL_129;
            }
            if (v52 + v57 >= v33)
            {
              BOOL v58 = v33 < v57;
LABEL_84:
              if (v58) {
                unint64_t v30 = v42;
              }
              goto LABEL_86;
            }
LABEL_78:
            if (v53) {
              goto LABEL_126;
            }
            v61 = &v28[2 * v30];
            uint64_t v63 = *v61;
            uint64_t v62 = v61[1];
            BOOL v41 = __OFSUB__(v62, v63);
            uint64_t v64 = v62 - v63;
            if (v41) {
              goto LABEL_128;
            }
            if (v64 < v52) {
              goto LABEL_15;
            }
LABEL_86:
            unint64_t v69 = v30 - 1;
            if (v30 - 1 >= v11)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v9) {
              goto LABEL_144;
            }
            v70 = &v28[2 * v69];
            uint64_t v71 = *v70;
            unint64_t v72 = v28;
            uint64_t v73 = &v28[2 * v30];
            uint64_t v74 = v73[1];
            uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)((unsigned __int8 *)(v9 + *v70), (unsigned __int8 *)(v9 + *v73), v9 + v74, v95);
            if (v1) {
              goto LABEL_114;
            }
            if (v74 < v71) {
              goto LABEL_117;
            }
            if (v30 > *((void *)v10 + 2)) {
              goto LABEL_118;
            }
            uint64_t *v70 = v71;
            v72[2 * v69 + 1] = v74;
            unint64_t v75 = *((void *)v10 + 2);
            if (v30 >= v75) {
              goto LABEL_119;
            }
            unint64_t v11 = v75 - 1;
            uint64_t result = (uint64_t)memmove(v73, v73 + 2, 16 * (v75 - 1 - v30));
            char v28 = v72;
            *((void *)v10 + 2) = v75 - 1;
            uint64_t v9 = v94;
            if (v75 <= 2) {
              goto LABEL_15;
            }
          }
        }
        unint64_t v11 = 1;
LABEL_15:
        Swift::Int v3 = v93;
        if (v8 >= v93)
        {
          id v2 = v90;
          Swift::String v7 = v91;
          goto LABEL_103;
        }
      }
    }
    Swift::String v7 = _swiftEmptyArrayStorage;
    v95 = (unsigned __int8 *)&_swiftEmptyArrayStorage[4];
    if (v3 == 1)
    {
      v91 = _swiftEmptyArrayStorage;
      goto LABEL_13;
    }
    unint64_t v11 = _swiftEmptyArrayStorage[2];
    Swift::String v10 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
    v91 = v7;
    if (v11 >= 2)
    {
      uint64_t v82 = *v2;
      do
      {
        unint64_t v83 = v11 - 2;
        if (v11 < 2) {
          goto LABEL_132;
        }
        if (!v82) {
          goto LABEL_146;
        }
        uint64_t v84 = (uint64_t)v10;
        v85 = v10 + 32;
        uint64_t v86 = *(void *)&v10[16 * v83 + 32];
        uint64_t v87 = *(void *)&v10[16 * v11 + 24];
        uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)((unsigned __int8 *)(v82 + v86), (unsigned __int8 *)(v82 + v85[2 * v11 - 2]), v82 + v87, v95);
        if (v1) {
          break;
        }
        if (v87 < v86) {
          goto LABEL_133;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)_ss12_ArrayBufferV20_consumeAndCreateNewAByxGyFSnySiG_Tgq5_0(v84);
          uint64_t v84 = result;
        }
        if (v83 >= *(void *)(v84 + 16)) {
          goto LABEL_134;
        }
        v88 = (void *)(v84 + 32 + 16 * v83);
        void *v88 = v86;
        v88[1] = v87;
        unint64_t v89 = *(void *)(v84 + 16);
        if (v11 > v89) {
          goto LABEL_135;
        }
        uint64_t result = (uint64_t)memmove((void *)(v84 + 32 + 16 * (v11 - 1)), (const void *)(v84 + 32 + 16 * v11), 16 * (v89 - v11));
        Swift::String v10 = (char *)v84;
        *(void *)(v84 + 16) = v89 - 1;
        unint64_t v11 = v89 - 1;
      }
      while (v89 > 2);
    }
LABEL_114:
    swift_bridgeObjectRelease();
    v91[2] = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  Swift::Int v19;
  unint64_t v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  Swift::Int v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  Swift::Int v34;
  uint64_t v35;
  Swift::Int v36;
  Swift::Int v37;
  char *v38;
  uint64_t v39;
  char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::Int v53;
  uint64_t v54;
  uint64_t v55;
  Swift::Int v56;
  Swift::Int v57;
  uint64_t v58;
  uint64_t v59;
  Swift::Int v60;
  char *v61;
  void *v62;
  void (*v63)(char *, uint64_t, uint64_t);
  uint64_t v64;
  char *v65;
  uint64_t (*v66)(char *, uint64_t);
  uint64_t v67;
  Swift::Int v68;
  void (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  void *v73;
  char *v74;
  Swift::Int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  char v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  unint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  char *v132;
  Swift::Int v133;
  char *v134;
  Swift::Int v135;
  unint64_t v136;
  void *v137;
  void (*v138)(char *, uint64_t, uint64_t);
  uint64_t v139;
  Swift::Int v140;
  Swift::Int v141;
  uint64_t (**v142)(char *, uint64_t);
  void *v143;
  char *v144;
  char *v145;
  Swift::Int v146;
  uint64_t v147;
  void *v148;
  char *v149;
  void (*v150)(char *, uint64_t, uint64_t);
  Swift::Int v151;
  void (**v152)(char *, uint64_t, uint64_t);

  id v2 = v1;
  id v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void **)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  v134 = (char *)&v129 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v8 = __chkstk_darwin(v6);
  v149 = (char *)&v129 - v9;
  Swift::String v10 = __chkstk_darwin(v8);
  v144 = (char *)&v129 - v11;
  __chkstk_darwin(v10);
  v145 = (char *)&v129 - v12;
  unsigned int v13 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v13);
  if (result >= v13)
  {
    if (v13 < 0) {
      goto LABEL_141;
    }
    if (v13) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v13, 1, a1);
    }
    return result;
  }
  if (v13 >= 0) {
    unsigned int v15 = v13;
  }
  else {
    unsigned int v15 = v13 + 1;
  }
  if (v13 < -1) {
    goto LABEL_140;
  }
  v147 = v4;
  v148 = a1;
  v131 = result;
  if (v13 > 1)
  {
    unsigned int v16 = v15 >> 1;
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = v16;
    Swift::Int v17 = (*((unsigned __int8 *)v5 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v5 + 80);
    v130 = (void *)result;
    v136 = result + v17;
LABEL_12:
    char v19 = 0;
    v142 = (uint64_t (**)(char *, uint64_t))(v5 + 1);
    v143 = v5 + 2;
    v152 = (void (**)(char *, uint64_t, uint64_t))(v5 + 4);
    Swift::Int v18 = (char *)_swiftEmptyArrayStorage;
    v137 = v5;
    while (1)
    {
      unsigned __int8 v21 = v19;
      unsigned int v22 = v19 + 1;
      v135 = v19;
      if (v19 + 1 >= v13) {
        break;
      }
      Swift::Int v23 = v147;
      Swift::String v24 = *v148;
      v139 = v24;
      v140 = v19 + 1;
      v151 = v137[9];
      unsigned int v25 = v151;
      unint64_t v26 = (void (*)(char *, uint64_t, uint64_t))v137[2];
      v26(v145, v24 + v151 * v22, v147);
      unint64_t v27 = v24 + v25 * v21;
      char v28 = v144;
      v26(v144, v27, v23);
      unsigned int v29 = lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (void (*)(uint64_t))&type metadata accessor for IndexPath);
      unint64_t v30 = v145;
      v146 = v29;
      LODWORD(v150) = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v31 = v13;
      uint64_t v32 = (void (*)(char *, uint64_t))v137[1];
      uint64_t v33 = v28;
      unsigned __int8 v21 = v135;
      v32(v33, v23);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v32)(v30, v23);
      char v34 = v151;
      unsigned int v22 = v21 + 2;
      v141 = v31;
      if (v21 + 2 >= v31)
      {
        unsigned int v13 = v141;
        if ((v150 & 1) == 0) {
          break;
        }
      }
      else
      {
        v132 = v18;
        v129 = v2;
        v140 *= v151;
        unsigned __int8 v35 = v139;
        uint64_t v36 = v151 * v22;
        while (1)
        {
          uint64_t v37 = v22;
          uint64_t v38 = v145;
          uint64_t v39 = v147;
          v26(v145, v35 + v36, v147);
          uint64_t v40 = v144;
          v26(v144, v35 + v140, v39);
          BOOL v41 = dispatch thunk of static Comparable.< infix(_:_:)();
          v32(v40, v39);
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v32)(v38, v39);
          if ((v150 ^ v41)) {
            break;
          }
          unsigned int v22 = v37 + 1;
          char v34 = v151;
          v35 += v151;
          if (v141 == v37 + 1)
          {
            unsigned int v13 = v141;
            unsigned int v22 = v141;
            id v2 = v129;
            Swift::Int v18 = v132;
            unsigned __int8 v21 = v135;
            if (v150) {
              goto LABEL_25;
            }
            goto LABEL_37;
          }
        }
        id v2 = v129;
        Swift::Int v18 = v132;
        unsigned int v22 = v37;
        unsigned __int8 v21 = v135;
        unsigned int v13 = v141;
        char v34 = v151;
        if ((v150 & 1) == 0) {
          break;
        }
      }
LABEL_25:
      if (v22 < v21) {
        goto LABEL_142;
      }
      if (v21 >= v22) {
        break;
      }
      v132 = v18;
      unint64_t v42 = 0;
      unsigned __int8 v43 = v34 * (v22 - 1);
      uint64_t v44 = v22 * v34;
      uint64_t v45 = v21 * v34;
      uint64_t v46 = v148;
      v146 = v22;
      do
      {
        if (v21 != v22 + v42 - 1)
        {
          unsigned __int8 v48 = v139;
          if (!v139) {
            goto LABEL_147;
          }
          uint64_t v49 = v2;
          uint64_t v50 = v139 + v45;
          BOOL v51 = v139 + v43;
          v150 = *v152;
          v150(v134, v139 + v45, v147);
          if (v45 < v43 || v50 >= v48 + v44)
          {
            uint64_t v47 = v147;
            swift_arrayInitWithTakeFrontToBack();
          }
          else
          {
            uint64_t v47 = v147;
            if (v45 != v43) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v150)(v51, v134, v47);
          id v2 = v49;
          uint64_t v46 = v148;
          unsigned int v22 = v146;
          char v34 = v151;
        }
        ++v21;
        --v42;
        v43 -= v34;
        v44 -= v34;
        v45 += v34;
      }
      while (v21 < v22 + v42);
      Swift::Int v18 = v132;
      unsigned __int8 v21 = v135;
      unsigned int v13 = v141;
LABEL_38:
      uint64_t v52 = v147;
      if (v22 < v13)
      {
        if (__OFSUB__(v22, v21)) {
          goto LABEL_139;
        }
        if (v22 - v21 < v131)
        {
          if (__OFADD__(v21, v131)) {
            goto LABEL_143;
          }
          if (v21 + v131 >= v13) {
            char v53 = v13;
          }
          else {
            char v53 = v21 + v131;
          }
          if (v53 < v21)
          {
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
            return result;
          }
          if (v22 != v53)
          {
            v132 = v18;
            v129 = v2;
            uint64_t v54 = v137[9];
            v138 = (void (*)(char *, uint64_t, uint64_t))v137[2];
            v139 = v54;
            uint64_t v55 = v54 * (v22 - 1);
            uint64_t v56 = v22 * v54;
            v133 = v53;
            do
            {
              BOOL v58 = 0;
              v146 = v22;
              v140 = v56;
              v141 = v55;
              while (1)
              {
                uint64_t v59 = *v46;
                v150 = (void (*)(char *, uint64_t, uint64_t))(v56 + v58);
                v151 = v21;
                uint64_t v60 = v56 + v58 + v59;
                v61 = v145;
                uint64_t v62 = v46;
                uint64_t v63 = v138;
                v138(v145, v60, v52);
                uint64_t v64 = v55 + v58 + v59;
                uint64_t v65 = v144;
                v63(v144, v64, v52);
                lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (void (*)(uint64_t))&type metadata accessor for IndexPath);
                LOBYTE(v59) = dispatch thunk of static Comparable.< infix(_:_:)();
                uint64_t v66 = *v142;
                (*v142)(v65, v52);
                uint64_t result = v66(v61, v52);
                if ((v59 & 1) == 0) {
                  break;
                }
                uint64_t v67 = *v62;
                if (!*v62) {
                  goto LABEL_145;
                }
                uint64_t v56 = v140;
                uint64_t v55 = v141;
                uint64_t v68 = v67 + v141 + v58;
                unint64_t v69 = *v152;
                v70 = v147;
                (*v152)(v149, v67 + v140 + v58, v147);
                uint64_t v52 = v70;
                swift_arrayInitWithTakeFrontToBack();
                uint64_t result = ((uint64_t (*)(Swift::Int, char *, uint64_t))v69)(v68, v149, v70);
                v58 -= v139;
                unsigned __int8 v21 = v151 + 1;
                uint64_t v57 = v146;
                uint64_t v46 = v148;
                if (v146 == v151 + 1) {
                  goto LABEL_49;
                }
              }
              uint64_t v57 = v146;
              uint64_t v52 = v147;
              uint64_t v46 = v62;
              uint64_t v56 = v140;
              uint64_t v55 = v141;
LABEL_49:
              unsigned int v22 = v57 + 1;
              v55 += v139;
              v56 += v139;
              unsigned __int8 v21 = v135;
            }
            while (v22 != v133);
            unsigned int v22 = v133;
            id v2 = v129;
            Swift::Int v18 = v132;
          }
        }
      }
      if (v22 < v21) {
        goto LABEL_134;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      v146 = v22;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSnySiG_Tgq5_0(0, *((void *)v18 + 2) + 1, 1, v18);
        Swift::Int v18 = (char *)result;
      }
      unint64_t v72 = *((void *)v18 + 2);
      uint64_t v71 = *((void *)v18 + 3);
      Swift::Int v20 = v72 + 1;
      if (v72 >= v71 >> 1)
      {
        uint64_t result = (uint64_t)_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSnySiG_Tgq5_0((char *)(v71 > 1), v72 + 1, 1, v18);
        Swift::Int v18 = (char *)result;
      }
      *((void *)v18 + 2) = v20;
      uint64_t v73 = v18 + 32;
      uint64_t v74 = &v18[16 * v72 + 32];
      unint64_t v75 = v146;
      *(void *)uint64_t v74 = v21;
      *((void *)v74 + 1) = v75;
      if (v72)
      {
        while (1)
        {
          uint64_t v76 = v20 - 1;
          if (v20 >= 4)
          {
            unsigned int v81 = &v73[2 * v20];
            uint64_t v82 = *(v81 - 8);
            unint64_t v83 = *(v81 - 7);
            uint64_t v87 = __OFSUB__(v83, v82);
            uint64_t v84 = v83 - v82;
            if (v87) {
              goto LABEL_123;
            }
            uint64_t v86 = *(v81 - 6);
            v85 = *(v81 - 5);
            uint64_t v87 = __OFSUB__(v85, v86);
            unsigned int v79 = v85 - v86;
            uint64_t v80 = v87;
            if (v87) {
              goto LABEL_124;
            }
            v88 = v20 - 2;
            unint64_t v89 = &v73[2 * v20 - 4];
            v91 = *v89;
            v90 = v89[1];
            uint64_t v87 = __OFSUB__(v90, v91);
            uint64_t v92 = v90 - v91;
            if (v87) {
              goto LABEL_125;
            }
            uint64_t v87 = __OFADD__(v79, v92);
            Swift::Int v93 = v79 + v92;
            if (v87) {
              goto LABEL_127;
            }
            if (v93 >= v84)
            {
              v111 = &v73[2 * v76];
              v113 = *v111;
              v112 = v111[1];
              uint64_t v87 = __OFSUB__(v112, v113);
              v114 = v112 - v113;
              if (v87) {
                goto LABEL_133;
              }
              v104 = v79 < v114;
              goto LABEL_94;
            }
          }
          else
          {
            if (v20 != 3)
            {
              v105 = *((void *)v18 + 4);
              v106 = *((void *)v18 + 5);
              uint64_t v87 = __OFSUB__(v106, v105);
              v98 = v106 - v105;
              v99 = v87;
              goto LABEL_88;
            }
            v78 = *((void *)v18 + 4);
            uint64_t v77 = *((void *)v18 + 5);
            uint64_t v87 = __OFSUB__(v77, v78);
            unsigned int v79 = v77 - v78;
            uint64_t v80 = v87;
          }
          if (v80) {
            goto LABEL_126;
          }
          v88 = v20 - 2;
          uint64_t v94 = &v73[2 * v20 - 4];
          v96 = *v94;
          v95 = v94[1];
          v97 = __OFSUB__(v95, v96);
          v98 = v95 - v96;
          v99 = v97;
          if (v97) {
            goto LABEL_128;
          }
          v100 = &v73[2 * v76];
          v102 = *v100;
          v101 = v100[1];
          uint64_t v87 = __OFSUB__(v101, v102);
          v103 = v101 - v102;
          if (v87) {
            goto LABEL_130;
          }
          if (__OFADD__(v98, v103)) {
            goto LABEL_132;
          }
          if (v98 + v103 >= v79)
          {
            v104 = v79 < v103;
LABEL_94:
            if (v104) {
              uint64_t v76 = v88;
            }
            goto LABEL_96;
          }
LABEL_88:
          if (v99) {
            goto LABEL_129;
          }
          v107 = &v73[2 * v76];
          v109 = *v107;
          v108 = v107[1];
          uint64_t v87 = __OFSUB__(v108, v109);
          v110 = v108 - v109;
          if (v87) {
            goto LABEL_131;
          }
          if (v110 < v98) {
            goto LABEL_14;
          }
LABEL_96:
          v115 = v76 - 1;
          if (v76 - 1 >= v20)
          {
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
            goto LABEL_144;
          }
          if (!*v148) {
            goto LABEL_146;
          }
          v116 = v18;
          v117 = &v73[2 * v115];
          v118 = *v117;
          v119 = &v73[2 * v76];
          v120 = v119[1];
          uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)(*v148 + v137[9] * *v117, *v148 + v137[9] * *v119, *v148 + v137[9] * v120, v136);
          if (v2) {
            goto LABEL_117;
          }
          if (v120 < v118) {
            goto LABEL_120;
          }
          if (v76 > *((void *)v116 + 2)) {
            goto LABEL_121;
          }
          v121 = v116;
          *v117 = v118;
          v73[2 * v115 + 1] = v120;
          v122 = *((void *)v116 + 2);
          if (v76 >= v122) {
            goto LABEL_122;
          }
          Swift::Int v18 = v121;
          Swift::Int v20 = v122 - 1;
          uint64_t result = (uint64_t)memmove(&v73[2 * v76], v119 + 2, 16 * (v122 - 1 - v76));
          *((void *)v18 + 2) = v122 - 1;
          if (v122 <= 2) {
            goto LABEL_14;
          }
        }
      }
      Swift::Int v20 = 1;
LABEL_14:
      unsigned int v13 = v148[1];
      char v19 = v146;
      uint64_t v5 = v137;
      if (v146 >= v13) {
        goto LABEL_106;
      }
    }
LABEL_37:
    uint64_t v46 = v148;
    goto LABEL_38;
  }
  Swift::Int v18 = (char *)_swiftEmptyArrayStorage;
  v136 = (unint64_t)_swiftEmptyArrayStorage
       + ((*((unsigned __int8 *)v5 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v5 + 80));
  v130 = _swiftEmptyArrayStorage;
  if (v13 == 1) {
    goto LABEL_12;
  }
  Swift::Int v20 = _swiftEmptyArrayStorage[2];
LABEL_106:
  if (v20 >= 2)
  {
    v123 = *v148;
    do
    {
      v124 = v20 - 2;
      if (v20 < 2) {
        goto LABEL_135;
      }
      if (!v123) {
        goto LABEL_148;
      }
      v125 = *(void *)&v18[16 * v124 + 32];
      v126 = *(void *)&v18[16 * v20 + 24];
      uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)(v123 + v5[9] * v125, v123 + v5[9] * *(void *)&v18[16 * v20 + 16], v123 + v5[9] * v126, v136);
      if (v2) {
        break;
      }
      if (v126 < v125) {
        goto LABEL_136;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)_ss12_ArrayBufferV20_consumeAndCreateNewAByxGyFSnySiG_Tgq5_0((uint64_t)v18);
        Swift::Int v18 = (char *)result;
      }
      if (v124 >= *((void *)v18 + 2)) {
        goto LABEL_137;
      }
      v127 = &v18[16 * v124 + 32];
      *(void *)v127 = v125;
      *((void *)v127 + 1) = v126;
      v128 = *((void *)v18 + 2);
      if (v20 > v128) {
        goto LABEL_138;
      }
      uint64_t result = (uint64_t)memmove(&v18[16 * v20 + 16], &v18[16 * v20 + 32], 16 * (v128 - v20));
      *((void *)v18 + 2) = v128 - 1;
      Swift::Int v20 = v128 - 1;
    }
    while (v128 > 2);
  }
LABEL_117:
  swift_bridgeObjectRelease();
  v130[2] = 0;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  void *v2;
  Swift::Int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  Swift::Int v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  Swift::Int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t *v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t *v20;
  uint64_t v21;
  Swift::Int v22;
  double *v23;
  double v24;
  Swift::Int v25;
  double *v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  unint64_t v91;
  void *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  Swift::Int v96;
  uint64_t v97;
  double *v98;

  id v2 = a1;
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      v78 = 0;
      unsigned int v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unsigned int v81 = *(double *)(v79 + 8 * i);
        uint64_t v82 = v78;
        do
        {
          unint64_t v83 = v79 + 8 * v82;
          if (v81 >= *(double *)v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(void *)(v83 + 8) = *(void *)v83;
          *(double *)(v79 + 8 * v82--) = v81;
        }
        while (v82 != -1);
        ++v78;
      }
    }
  }
  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_136;
    }
    v95 = result;
    v96 = v3;
    if (v3 > 1)
    {
      uint64_t v6 = v5 >> 1;
      uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(result + 16) = v6;
      Swift::Int v3 = v96;
      uint64_t v94 = (void *)result;
      v98 = (double *)(result + 32);
LABEL_13:
      Swift::Int v8 = 0;
      uint64_t v9 = *v2;
      uint64_t v92 = v2;
      Swift::Int v93 = *v2 - 8;
      Swift::String v10 = (char *)_swiftEmptyArrayStorage;
      v97 = *v2;
      while (1)
      {
        Swift::Int v12 = v8++;
        if (v8 < v3)
        {
          unsigned int v13 = *(double *)(v9 + 8 * v8);
          unsigned int v14 = *(double *)(v9 + 8 * v12);
          Swift::Int v8 = v12 + 2;
          if (v12 + 2 < v3)
          {
            unsigned int v15 = v13;
            while (1)
            {
              unsigned int v16 = v15;
              unsigned int v15 = *(double *)(v9 + 8 * v8);
              if (v13 < v14 == v15 >= v16) {
                break;
              }
              if (v3 == ++v8)
              {
                Swift::Int v8 = v3;
                break;
              }
            }
          }
          if (v13 < v14)
          {
            if (v8 < v12) {
              goto LABEL_138;
            }
            if (v12 < v8)
            {
              Swift::Int v17 = (uint64_t *)(v93 + 8 * v8);
              Swift::Int v18 = v8;
              char v19 = v12;
              Swift::Int v20 = (uint64_t *)(v9 + 8 * v12);
              do
              {
                if (v19 != --v18)
                {
                  if (!v9) {
                    goto LABEL_144;
                  }
                  unsigned __int8 v21 = *v20;
                  void *v20 = *v17;
                  void *v17 = v21;
                }
                ++v19;
                --v17;
                ++v20;
              }
              while (v19 < v18);
            }
          }
        }
        if (v8 < v3)
        {
          if (__OFSUB__(v8, v12)) {
            goto LABEL_135;
          }
          if (v8 - v12 < v95)
          {
            unsigned int v22 = v12 + v95;
            if (__OFADD__(v12, v95)) {
              goto LABEL_139;
            }
            if (v22 >= v3) {
              unsigned int v22 = v3;
            }
            if (v22 < v12)
            {
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
              return result;
            }
            if (v8 != v22)
            {
              Swift::Int v23 = (double *)(v93 + 8 * v8);
              do
              {
                Swift::String v24 = *(double *)(v9 + 8 * v8);
                unsigned int v25 = v12;
                unint64_t v26 = v23;
                do
                {
                  unint64_t v27 = *v26;
                  if (v24 >= *v26) {
                    break;
                  }
                  if (!v9) {
                    goto LABEL_142;
                  }
                  *unint64_t v26 = v24;
                  v26[1] = v27;
                  --v26;
                  ++v25;
                }
                while (v8 != v25);
                ++v8;
                ++v23;
              }
              while (v8 != v22);
              Swift::Int v8 = v22;
            }
          }
        }
        if (v8 < v12) {
          goto LABEL_130;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSnySiG_Tgq5_1(0, *((void *)v10 + 2) + 1, 1, v10);
          Swift::String v10 = (char *)result;
        }
        unsigned int v29 = *((void *)v10 + 2);
        char v28 = *((void *)v10 + 3);
        unint64_t v11 = v29 + 1;
        uint64_t v9 = v97;
        if (v29 >= v28 >> 1)
        {
          uint64_t result = (uint64_t)_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSnySiG_Tgq5_1((char *)(v28 > 1), v29 + 1, 1, v10);
          uint64_t v9 = v97;
          Swift::String v10 = (char *)result;
        }
        *((void *)v10 + 2) = v11;
        unint64_t v30 = v10 + 32;
        uint64_t v31 = &v10[16 * v29 + 32];
        *(void *)uint64_t v31 = v12;
        *((void *)v31 + 1) = v8;
        if (v29)
        {
          while (1)
          {
            uint64_t v32 = v11 - 1;
            if (v11 >= 4)
            {
              uint64_t v37 = &v30[2 * v11];
              uint64_t v38 = *(v37 - 8);
              uint64_t v39 = *(v37 - 7);
              unsigned __int8 v43 = __OFSUB__(v39, v38);
              uint64_t v40 = v39 - v38;
              if (v43) {
                goto LABEL_119;
              }
              unint64_t v42 = *(v37 - 6);
              BOOL v41 = *(v37 - 5);
              unsigned __int8 v43 = __OFSUB__(v41, v42);
              unsigned __int8 v35 = v41 - v42;
              uint64_t v36 = v43;
              if (v43) {
                goto LABEL_120;
              }
              uint64_t v44 = v11 - 2;
              uint64_t v45 = &v30[2 * v11 - 4];
              uint64_t v47 = *v45;
              uint64_t v46 = v45[1];
              unsigned __int8 v43 = __OFSUB__(v46, v47);
              unsigned __int8 v48 = v46 - v47;
              if (v43) {
                goto LABEL_121;
              }
              unsigned __int8 v43 = __OFADD__(v35, v48);
              uint64_t v49 = v35 + v48;
              if (v43) {
                goto LABEL_123;
              }
              if (v49 >= v40)
              {
                uint64_t v67 = &v30[2 * v32];
                unint64_t v69 = *v67;
                uint64_t v68 = v67[1];
                unsigned __int8 v43 = __OFSUB__(v68, v69);
                v70 = v68 - v69;
                if (v43) {
                  goto LABEL_129;
                }
                uint64_t v60 = v35 < v70;
                goto LABEL_83;
              }
            }
            else
            {
              if (v11 != 3)
              {
                v61 = *((void *)v10 + 4);
                uint64_t v62 = *((void *)v10 + 5);
                unsigned __int8 v43 = __OFSUB__(v62, v61);
                uint64_t v54 = v62 - v61;
                uint64_t v55 = v43;
                goto LABEL_77;
              }
              char v34 = *((void *)v10 + 4);
              uint64_t v33 = *((void *)v10 + 5);
              unsigned __int8 v43 = __OFSUB__(v33, v34);
              unsigned __int8 v35 = v33 - v34;
              uint64_t v36 = v43;
            }
            if (v36) {
              goto LABEL_122;
            }
            uint64_t v44 = v11 - 2;
            uint64_t v50 = &v30[2 * v11 - 4];
            uint64_t v52 = *v50;
            BOOL v51 = v50[1];
            char v53 = __OFSUB__(v51, v52);
            uint64_t v54 = v51 - v52;
            uint64_t v55 = v53;
            if (v53) {
              goto LABEL_124;
            }
            uint64_t v56 = &v30[2 * v32];
            BOOL v58 = *v56;
            uint64_t v57 = v56[1];
            unsigned __int8 v43 = __OFSUB__(v57, v58);
            uint64_t v59 = v57 - v58;
            if (v43) {
              goto LABEL_126;
            }
            if (__OFADD__(v54, v59)) {
              goto LABEL_128;
            }
            if (v54 + v59 >= v35)
            {
              uint64_t v60 = v35 < v59;
LABEL_83:
              if (v60) {
                uint64_t v32 = v44;
              }
              goto LABEL_85;
            }
LABEL_77:
            if (v55) {
              goto LABEL_125;
            }
            uint64_t v63 = &v30[2 * v32];
            uint64_t v65 = *v63;
            uint64_t v64 = v63[1];
            unsigned __int8 v43 = __OFSUB__(v64, v65);
            uint64_t v66 = v64 - v65;
            if (v43) {
              goto LABEL_127;
            }
            if (v66 < v54) {
              goto LABEL_15;
            }
LABEL_85:
            uint64_t v71 = v32 - 1;
            if (v32 - 1 >= v11)
            {
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
              goto LABEL_140;
            }
            if (!v9) {
              goto LABEL_143;
            }
            unint64_t v72 = &v30[2 * v71];
            uint64_t v73 = *v72;
            uint64_t v74 = v30;
            unint64_t v75 = &v30[2 * v32];
            uint64_t v76 = v75[1];
            uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v9 + 8 * *v72), (double *)(v9 + 8 * *v75), v9 + 8 * v76, v98);
            if (v1) {
              goto LABEL_113;
            }
            if (v76 < v73) {
              goto LABEL_116;
            }
            if (v32 > *((void *)v10 + 2)) {
              goto LABEL_117;
            }
            *unint64_t v72 = v73;
            v74[2 * v71 + 1] = v76;
            uint64_t v77 = *((void *)v10 + 2);
            if (v32 >= v77) {
              goto LABEL_118;
            }
            unint64_t v11 = v77 - 1;
            uint64_t result = (uint64_t)memmove(v75, v75 + 2, 16 * (v77 - 1 - v32));
            unint64_t v30 = v74;
            *((void *)v10 + 2) = v77 - 1;
            uint64_t v9 = v97;
            if (v77 <= 2) {
              goto LABEL_15;
            }
          }
        }
        unint64_t v11 = 1;
LABEL_15:
        Swift::Int v3 = v96;
        if (v8 >= v96)
        {
          Swift::String v7 = v94;
          id v2 = v92;
          goto LABEL_102;
        }
      }
    }
    Swift::String v7 = _swiftEmptyArrayStorage;
    v98 = (double *)&_swiftEmptyArrayStorage[4];
    if (v3 == 1)
    {
      uint64_t v94 = _swiftEmptyArrayStorage;
      goto LABEL_13;
    }
    unint64_t v11 = _swiftEmptyArrayStorage[2];
    Swift::String v10 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
    uint64_t v94 = v7;
    if (v11 >= 2)
    {
      uint64_t v84 = *v2;
      do
      {
        v85 = v11 - 2;
        if (v11 < 2) {
          goto LABEL_131;
        }
        if (!v84) {
          goto LABEL_145;
        }
        uint64_t v86 = (uint64_t)v10;
        uint64_t v87 = v10 + 32;
        v88 = *(void *)&v10[16 * v85 + 32];
        unint64_t v89 = *(void *)&v10[16 * v11 + 24];
        uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v84 + 8 * v88), (double *)(v84 + 8 * v87[2 * v11 - 2]), v84 + 8 * v89, v98);
        if (v1) {
          break;
        }
        if (v89 < v88) {
          goto LABEL_132;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)_ss12_ArrayBufferV20_consumeAndCreateNewAByxGyFSnySiG_Tgq5_1(v86);
          uint64_t v86 = result;
        }
        if (v85 >= *(void *)(v86 + 16)) {
          goto LABEL_133;
        }
        v90 = (void *)(v86 + 32 + 16 * v85);
        void *v90 = v88;
        v90[1] = v89;
        v91 = *(void *)(v86 + 16);
        if (v11 > v91) {
          goto LABEL_134;
        }
        uint64_t result = (uint64_t)memmove((void *)(v86 + 32 + 16 * (v11 - 1)), (const void *)(v86 + 32 + 16 * v11), 16 * (v91 - v11));
        Swift::String v10 = (char *)v86;
        *(void *)(v86 + 16) = v91 - 1;
        unint64_t v11 = v91 - 1;
      }
      while (v91 > 2);
    }
LABEL_113:
    swift_bridgeObjectRelease();
    v94[2] = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t v1;
  void *v2;
  Swift::Int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  Swift::Int v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  Swift::Int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  Swift::Int v17;
  Swift::Int v18;
  char v19;
  Swift::Int v20;
  unsigned char *v21;
  unsigned int v22;
  Swift::Int v23;
  unsigned char *v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  char v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t i;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  unint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  Swift::Int v93;
  uint64_t v94;
  unsigned __int8 *v95;

  id v2 = a1;
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_138;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v76 = 0;
      uint64_t v77 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unsigned int v79 = *(unsigned __int8 *)(v77 + i);
        uint64_t v80 = v76;
        do
        {
          unsigned int v81 = *(unsigned __int8 *)(v77 + v80);
          if (v79 >= v81) {
            break;
          }
          if (!v77) {
            goto LABEL_142;
          }
          *(unsigned char *)(v77 + v80 + 1) = v81;
          *(unsigned char *)(v77 + v80--) = v79;
        }
        while (v80 != -1);
        ++v76;
      }
    }
  }
  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1) {
      goto LABEL_137;
    }
    uint64_t v92 = result;
    Swift::Int v93 = v3;
    if (v3 > 1)
    {
      uint64_t v6 = v5 >> 1;
      uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(result + 16) = v6;
      Swift::Int v3 = v93;
      v91 = (void *)result;
      v95 = (unsigned __int8 *)(result + 32);
LABEL_13:
      Swift::Int v8 = 0;
      v90 = v2;
      uint64_t v9 = *v2;
      Swift::String v10 = (char *)_swiftEmptyArrayStorage;
      uint64_t v94 = *v2;
      while (1)
      {
        Swift::Int v12 = v8++;
        if (v8 < v3)
        {
          unsigned int v13 = *(unsigned __int8 *)(v9 + v8);
          unsigned int v14 = *(unsigned __int8 *)(v9 + v12);
          Swift::Int v8 = v12 + 2;
          if (v12 + 2 < v3)
          {
            unsigned int v15 = v13;
            while (1)
            {
              unsigned int v16 = *(unsigned __int8 *)(v9 + v8);
              if (v13 < v14 == v16 >= v15) {
                break;
              }
              ++v8;
              unsigned int v15 = v16;
              if (v3 == v8)
              {
                Swift::Int v8 = v3;
                break;
              }
            }
          }
          if (v13 < v14)
          {
            if (v8 < v12) {
              goto LABEL_139;
            }
            if (v12 < v8)
            {
              Swift::Int v17 = v8 - 1;
              Swift::Int v18 = v12;
              do
              {
                if (v18 != v17)
                {
                  if (!v9) {
                    goto LABEL_145;
                  }
                  char v19 = *(unsigned char *)(v9 + v18);
                  *(unsigned char *)(v9 + v18) = *(unsigned char *)(v9 + v17);
                  *(unsigned char *)(v9 + v17) = v19;
                }
                BOOL v58 = ++v18 < v17--;
              }
              while (v58);
            }
          }
        }
        if (v8 < v3)
        {
          if (__OFSUB__(v8, v12)) {
            goto LABEL_136;
          }
          if (v8 - v12 < v92)
          {
            Swift::Int v20 = v12 + v92;
            if (__OFADD__(v12, v92)) {
              goto LABEL_140;
            }
            if (v20 >= v3) {
              Swift::Int v20 = v3;
            }
            if (v20 < v12)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v8 != v20)
            {
              unsigned __int8 v21 = (unsigned char *)(v9 + v8);
              do
              {
                unsigned int v22 = *(unsigned __int8 *)(v9 + v8);
                Swift::Int v23 = v12;
                Swift::String v24 = v21;
                do
                {
                  unsigned int v25 = *(v24 - 1);
                  if (v22 >= v25) {
                    break;
                  }
                  if (!v9) {
                    goto LABEL_143;
                  }
                  *Swift::String v24 = v25;
                  *--Swift::String v24 = v22;
                  ++v23;
                }
                while (v8 != v23);
                ++v8;
                ++v21;
              }
              while (v8 != v20);
              Swift::Int v8 = v20;
            }
          }
        }
        if (v8 < v12) {
          goto LABEL_131;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSnySiG_Tgq5_1(0, *((void *)v10 + 2) + 1, 1, v10);
          Swift::String v10 = (char *)result;
        }
        unint64_t v27 = *((void *)v10 + 2);
        unint64_t v26 = *((void *)v10 + 3);
        unint64_t v11 = v27 + 1;
        uint64_t v9 = v94;
        if (v27 >= v26 >> 1)
        {
          uint64_t result = (uint64_t)_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSnySiG_Tgq5_1((char *)(v26 > 1), v27 + 1, 1, v10);
          uint64_t v9 = v94;
          Swift::String v10 = (char *)result;
        }
        *((void *)v10 + 2) = v11;
        char v28 = v10 + 32;
        unsigned int v29 = &v10[16 * v27 + 32];
        *(void *)unsigned int v29 = v12;
        *((void *)v29 + 1) = v8;
        if (v27)
        {
          while (1)
          {
            unint64_t v30 = v11 - 1;
            if (v11 >= 4)
            {
              unsigned __int8 v35 = &v28[2 * v11];
              uint64_t v36 = *(v35 - 8);
              uint64_t v37 = *(v35 - 7);
              BOOL v41 = __OFSUB__(v37, v36);
              uint64_t v38 = v37 - v36;
              if (v41) {
                goto LABEL_120;
              }
              uint64_t v40 = *(v35 - 6);
              uint64_t v39 = *(v35 - 5);
              BOOL v41 = __OFSUB__(v39, v40);
              uint64_t v33 = v39 - v40;
              char v34 = v41;
              if (v41) {
                goto LABEL_121;
              }
              unint64_t v42 = v11 - 2;
              unsigned __int8 v43 = &v28[2 * v11 - 4];
              uint64_t v45 = *v43;
              uint64_t v44 = v43[1];
              BOOL v41 = __OFSUB__(v44, v45);
              uint64_t v46 = v44 - v45;
              if (v41) {
                goto LABEL_122;
              }
              BOOL v41 = __OFADD__(v33, v46);
              uint64_t v47 = v33 + v46;
              if (v41) {
                goto LABEL_124;
              }
              if (v47 >= v38)
              {
                uint64_t v65 = &v28[2 * v30];
                uint64_t v67 = *v65;
                uint64_t v66 = v65[1];
                BOOL v41 = __OFSUB__(v66, v67);
                uint64_t v68 = v66 - v67;
                if (v41) {
                  goto LABEL_130;
                }
                BOOL v58 = v33 < v68;
                goto LABEL_84;
              }
            }
            else
            {
              if (v11 != 3)
              {
                uint64_t v59 = *((void *)v10 + 4);
                uint64_t v60 = *((void *)v10 + 5);
                BOOL v41 = __OFSUB__(v60, v59);
                uint64_t v52 = v60 - v59;
                char v53 = v41;
                goto LABEL_78;
              }
              uint64_t v32 = *((void *)v10 + 4);
              uint64_t v31 = *((void *)v10 + 5);
              BOOL v41 = __OFSUB__(v31, v32);
              uint64_t v33 = v31 - v32;
              char v34 = v41;
            }
            if (v34) {
              goto LABEL_123;
            }
            unint64_t v42 = v11 - 2;
            unsigned __int8 v48 = &v28[2 * v11 - 4];
            uint64_t v50 = *v48;
            uint64_t v49 = v48[1];
            BOOL v51 = __OFSUB__(v49, v50);
            uint64_t v52 = v49 - v50;
            char v53 = v51;
            if (v51) {
              goto LABEL_125;
            }
            uint64_t v54 = &v28[2 * v30];
            uint64_t v56 = *v54;
            uint64_t v55 = v54[1];
            BOOL v41 = __OFSUB__(v55, v56);
            uint64_t v57 = v55 - v56;
            if (v41) {
              goto LABEL_127;
            }
            if (__OFADD__(v52, v57)) {
              goto LABEL_129;
            }
            if (v52 + v57 >= v33)
            {
              BOOL v58 = v33 < v57;
LABEL_84:
              if (v58) {
                unint64_t v30 = v42;
              }
              goto LABEL_86;
            }
LABEL_78:
            if (v53) {
              goto LABEL_126;
            }
            v61 = &v28[2 * v30];
            uint64_t v63 = *v61;
            uint64_t v62 = v61[1];
            BOOL v41 = __OFSUB__(v62, v63);
            uint64_t v64 = v62 - v63;
            if (v41) {
              goto LABEL_128;
            }
            if (v64 < v52) {
              goto LABEL_15;
            }
LABEL_86:
            unint64_t v69 = v30 - 1;
            if (v30 - 1 >= v11)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v9) {
              goto LABEL_144;
            }
            v70 = &v28[2 * v69];
            uint64_t v71 = *v70;
            unint64_t v72 = v28;
            uint64_t v73 = &v28[2 * v30];
            uint64_t v74 = v73[1];
            uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)((unsigned __int8 *)(v9 + *v70), (unsigned __int8 *)(v9 + *v73), v9 + v74, v95);
            if (v1) {
              goto LABEL_114;
            }
            if (v74 < v71) {
              goto LABEL_117;
            }
            if (v30 > *((void *)v10 + 2)) {
              goto LABEL_118;
            }
            uint64_t *v70 = v71;
            v72[2 * v69 + 1] = v74;
            unint64_t v75 = *((void *)v10 + 2);
            if (v30 >= v75) {
              goto LABEL_119;
            }
            unint64_t v11 = v75 - 1;
            uint64_t result = (uint64_t)memmove(v73, v73 + 2, 16 * (v75 - 1 - v30));
            char v28 = v72;
            *((void *)v10 + 2) = v75 - 1;
            uint64_t v9 = v94;
            if (v75 <= 2) {
              goto LABEL_15;
            }
          }
        }
        unint64_t v11 = 1;
LABEL_15:
        Swift::Int v3 = v93;
        if (v8 >= v93)
        {
          id v2 = v90;
          Swift::String v7 = v91;
          goto LABEL_103;
        }
      }
    }
    Swift::String v7 = _swiftEmptyArrayStorage;
    v95 = (unsigned __int8 *)&_swiftEmptyArrayStorage[4];
    if (v3 == 1)
    {
      v91 = _swiftEmptyArrayStorage;
      goto LABEL_13;
    }
    unint64_t v11 = _swiftEmptyArrayStorage[2];
    Swift::String v10 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
    v91 = v7;
    if (v11 >= 2)
    {
      uint64_t v82 = *v2;
      do
      {
        unint64_t v83 = v11 - 2;
        if (v11 < 2) {
          goto LABEL_132;
        }
        if (!v82) {
          goto LABEL_146;
        }
        uint64_t v84 = (uint64_t)v10;
        v85 = v10 + 32;
        uint64_t v86 = *(void *)&v10[16 * v83 + 32];
        uint64_t v87 = *(void *)&v10[16 * v11 + 24];
        uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)((unsigned __int8 *)(v82 + v86), (unsigned __int8 *)(v82 + v85[2 * v11 - 2]), v82 + v87, v95);
        if (v1) {
          break;
        }
        if (v87 < v86) {
          goto LABEL_133;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)_ss12_ArrayBufferV20_consumeAndCreateNewAByxGyFSnySiG_Tgq5_1(v84);
          uint64_t v84 = result;
        }
        if (v83 >= *(void *)(v84 + 16)) {
          goto LABEL_134;
        }
        v88 = (void *)(v84 + 32 + 16 * v83);
        void *v88 = v86;
        v88[1] = v87;
        unint64_t v89 = *(void *)(v84 + 16);
        if (v11 > v89) {
          goto LABEL_135;
        }
        uint64_t result = (uint64_t)memmove((void *)(v84 + 32 + 16 * (v11 - 1)), (const void *)(v84 + 32 + 16 * v11), 16 * (v89 - v11));
        Swift::String v10 = (char *)v84;
        *(void *)(v84 + 16) = v89 - 1;
        unint64_t v11 = v89 - 1;
      }
      while (v89 > 2);
    }
LABEL_114:
    swift_bridgeObjectRelease();
    v91[2] = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unsigned __int8 *__dst, unsigned __int8 *__src, unint64_t a3, unsigned __int8 *a4)
{
  id v4 = a4;
  uint64_t v6 = __src;
  Swift::String v7 = __dst;
  int64_t v8 = __src - __dst;
  uint64_t v9 = a3 - (void)__src;
  if (__src - __dst < (uint64_t)(a3 - (void)__src))
  {
    if (a4 != __dst || __src <= a4) {
      memmove(a4, __dst, v8);
    }
    Swift::String v10 = &v4[v8];
    if ((unint64_t)v6 >= a3 || v8 < 1)
    {
LABEL_15:
      uint64_t v6 = v7;
      if (v7 != v4) {
        goto LABEL_38;
      }
      goto LABEL_37;
    }
    while (1)
    {
      unsigned int v11 = *v6;
      if (v11 >= *v4) {
        break;
      }
      BOOL v12 = v7 == v6++;
      if (!v12) {
        goto LABEL_12;
      }
LABEL_13:
      ++v7;
      if (v4 >= v10 || (unint64_t)v6 >= a3) {
        goto LABEL_15;
      }
    }
    LOBYTE(v11) = *v4;
    BOOL v12 = v7 == v4++;
    if (v12) {
      goto LABEL_13;
    }
LABEL_12:
    unsigned __int8 *v7 = v11;
    goto LABEL_13;
  }
  if (a4 != __src || a3 <= (unint64_t)a4) {
    memmove(a4, __src, a3 - (void)__src);
  }
  Swift::String v10 = &v4[v9];
  if (v7 >= v6 || v9 < 1)
  {
LABEL_36:
    if (v6 != v4) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  unsigned int v13 = (unsigned __int8 *)(a3 - 1);
  unsigned int v14 = v6;
  while (1)
  {
    unsigned int v15 = v13 + 1;
    unsigned int v17 = *--v14;
    unsigned __int8 v16 = v17;
    if (*(v10 - 1) >= v17)
    {
      unsigned __int8 v16 = *(v10 - 1);
      unsigned int v14 = v6;
      if (v15 != v10)
      {
        --v10;
LABEL_32:
        *unsigned int v13 = v16;
        goto LABEL_33;
      }
      if (v13 >= v10--) {
        goto LABEL_32;
      }
    }
    else if (v15 != v6 || v13 >= v6)
    {
      goto LABEL_32;
    }
LABEL_33:
    if (v14 <= v7) {
      break;
    }
    --v13;
    uint64_t v6 = v14;
    if (v10 <= v4)
    {
      uint64_t v6 = v14;
      goto LABEL_36;
    }
  }
  uint64_t v6 = v14;
  if (v14 != v4)
  {
LABEL_38:
    memmove(v6, v4, v10 - v4);
    return 1;
  }
LABEL_37:
  if (v6 >= v10) {
    goto LABEL_38;
  }
  return 1;
}

uint64_t specialized max<A>(_:_:)(uint64_t result, uint64_t a2)
{
  if (a2 > result) {
    return a2;
  }
  return result;
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t _sSa6append10contentsOfyqd__n_t7ElementQyd__RszSTRd__lFSS_SaySSGTg5_0(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = (uint64_t)_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

size_t _sSa6append10contentsOfyqd__n_t7ElementQyd__RszSTRd__lF10Foundation12URLQueryItemV_SayAGGTg5_0(size_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  size_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= v3[3] >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v11 = v4 + v2;
  }
  else {
    int64_t v11 = v4;
  }
  uint64_t result = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation12URLQueryItemV_Tg5_0(result, v11, 1, v3);
  uint64_t v3 = (void *)result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = (v3[3] >> 1) - v3[2];
  uint64_t result = type metadata accessor for URLQueryItem();
  if (v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = v3[2];
  BOOL v9 = __OFADD__(v8, v2);
  uint64_t v10 = v8 + v2;
  if (!v9)
  {
    v3[2] = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

char *String.components(wrappedToLineLength:bullet:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for CharacterSet();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unsigned int v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  static CharacterSet.newlines.getter();
  _sS2SSysWl_0();
  uint64_t v14 = StringProtocol.components(separatedBy:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  unsigned int v15 = (char *)_swiftEmptyArrayStorage;
  unsigned int v22 = (char *)_swiftEmptyArrayStorage;
  uint64_t v16 = *(void *)(v14 + 16);
  if (v16)
  {
    swift_bridgeObjectRetain();
    unsigned int v17 = (uint64_t *)(v14 + 40);
    do
    {
      uint64_t v18 = *v17;
      uint64_t v23 = *(v17 - 1);
      uint64_t v24 = v18;
      swift_bridgeObjectRetain();
      closure #1 in String.components(wrappedToLineLength:bullet:)(&v22, &v23, a2, a3, a1, &v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unsigned int v15 = v21;
      unsigned int v22 = v21;
      v17 += 2;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v15;
}

void closure #1 in String.components(wrappedToLineLength:bullet:)(char **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, char **a6@<X8>)
{
  unint64_t v71 = a4;
  uint64_t v12 = type metadata accessor for CharacterSet();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v17 = *a1;
  uint64_t v19 = *a2;
  unint64_t v18 = a2[1];
  unint64_t v83 = v17;
  uint64_t v20 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000) == 0) {
    uint64_t v20 = v19 & 0xFFFFFFFFFFFFLL;
  }
  if (v20)
  {
    uint64_t v68 = (char *)a6;
    uint64_t v69 = v6;
    uint64_t v21 = v14;
    uint64_t v22 = a3;
    id v23 = objc_allocWithZone((Class)NSScanner);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v25 = [v23 initWithString:v24];

    uint64_t v70 = v22;
    v82._uint64_t countAndFlagsBits = specialized getter of leftIndent #1 in closure #1 in String.components(wrappedToLineLength:bullet:)(v22, v71, (uint64_t)&v83);
    v82._object = v26;
    swift_beginAccess();
    static CharacterSet.whitespaces.getter();
    uint64_t v27 = NSScanner.scanUpToCharacters(from:)();
    New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 = v28;
    uint64_t v31 = *(void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v30 = v13 + 8;
    uint64_t v76 = v31;
    v31(v16, v21);
    id v74 = v25;
    if (New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0)
    {
      uint64_t v32 = v21;
      uint64_t v33 = v16;
      unint64_t v34 = HIBYTE(v71) & 0xF;
      if ((v71 & 0x2000000000000000) == 0) {
        unint64_t v34 = v70 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v72 = a5;
      unint64_t v73 = v34;
      uint64_t v75 = v30;
      while (1)
      {
        uint64_t v37 = v32;
        object = (char *)v82._object;
        uint64_t countAndFlagsBits = v82._countAndFlagsBits;
        swift_bridgeObjectRetain();
        uint64_t v40 = String.count.getter();
        swift_bridgeObjectRelease();
        uint64_t v41 = String.count.getter();
        uint64_t v42 = v40 + v41;
        if (__OFADD__(v40, v41)) {
          break;
        }
        BOOL v43 = __OFADD__(v42, 1);
        uint64_t v44 = v42 + 1;
        if (v43) {
          goto LABEL_39;
        }
        if (v44 <= a5)
        {
          v81._uint64_t countAndFlagsBits = v27;
          v81._object = New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0;
          swift_bridgeObjectRetain();
          v35._uint64_t countAndFlagsBits = 32;
          v35._object = (void *)0xE100000000000000;
          String.append(_:)(v35);
          swift_bridgeObjectRelease();
          String.append(_:)(v81);
          swift_bridgeObjectRelease();
        }
        else
        {
          v81._uint64_t countAndFlagsBits = countAndFlagsBits;
          v81._object = object;
          uint64_t v79 = 606827356;
          unint64_t v80 = 0xE400000000000000;
          uint64_t v77 = 0;
          unint64_t v78 = 0xE000000000000000;
          _sS2SSysWl_0();
          uint64_t countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v40 = v45;
          swift_bridgeObjectRelease();
          object = v83;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            object = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0(0, *((void *)object + 2) + 1, 1, object);
          }
          unint64_t v47 = *((void *)object + 2);
          unint64_t v46 = *((void *)object + 3);
          if (v47 >= v46 >> 1) {
            object = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0((char *)(v46 > 1), v47 + 1, 1, object);
          }
          *((void *)object + 2) = v47 + 1;
          unsigned __int8 v48 = &object[16 * v47];
          *((void *)v48 + 4) = countAndFlagsBits;
          *((void *)v48 + 5) = v40;
          unint64_t v83 = object;
          if (v73)
          {
            uint64_t v49 = String.count.getter();
            Swift::Int v50 = v49 + 1;
            id v25 = v74;
            a5 = v72;
            if (__OFADD__(v49, 1)) {
              goto LABEL_40;
            }
            v51._uint64_t countAndFlagsBits = 32;
            v51._object = (void *)0xE100000000000000;
            Swift::String v53 = String.init(repeating:count:)(v51, v50);
            uint64_t v52 = v53._countAndFlagsBits;
            uint64_t v54 = v53._object;
          }
          else
          {
            uint64_t v52 = 0;
            uint64_t v54 = (void *)0xE000000000000000;
            id v25 = v74;
            a5 = v72;
          }
          v81._uint64_t countAndFlagsBits = v52;
          v81._object = v54;
          swift_bridgeObjectRetain();
          v55._uint64_t countAndFlagsBits = v27;
          v55._object = New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0;
          String.append(_:)(v55);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v56._uint64_t countAndFlagsBits = 32;
          v56._object = (void *)0xE100000000000000;
          String.append(_:)(v56);
          swift_bridgeObjectRelease();
          Swift::String v82 = v81;
        }
        static CharacterSet.whitespaces.getter();
        uint64_t v27 = NSScanner.scanUpToCharacters(from:)();
        New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 = v36;
        uint64_t v32 = v37;
        v76(v33, v37);
        if (!New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0) {
          goto LABEL_22;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
    }
    else
    {
LABEL_22:
      uint64_t v57 = ((unint64_t)v82._object >> 56) & 0xF;
      if (((uint64_t)v82._object & 0x2000000000000000) == 0) {
        uint64_t v57 = v82._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (!v57)
      {

        swift_bridgeObjectRelease();
        object = v68;
LABEL_37:
        *(void *)object = v83;
        return;
      }
      Swift::String v81 = v82;
      uint64_t v79 = 606827356;
      unint64_t v80 = 0xE400000000000000;
      uint64_t v77 = 0;
      unint64_t v78 = 0xE000000000000000;
      _sS2SSysWl_0();
      uint64_t v40 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t countAndFlagsBits = v58;
      swift_bridgeObjectRelease();
      New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 = v83;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      object = v68;
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_26:
        unint64_t v61 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 2);
        unint64_t v60 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 3);
        if (v61 >= v60 >> 1) {
          New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0((char *)(v60 > 1), v61 + 1, 1, New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0);
        }
        *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 2) = v61 + 1;
        uint64_t v62 = &New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0[16 * v61];
        *((void *)v62 + 4) = v40;
        *((void *)v62 + 5) = countAndFlagsBits;
        unint64_t v83 = New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0;

        goto LABEL_37;
      }
    }
    New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0(0, *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0+ 2)+ 1, 1, New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0);
    goto LABEL_26;
  }
  uint64_t v63 = *((void *)v17 + 2);
  swift_bridgeObjectRetain();
  if (v63)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unsigned int v17 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0(0, v63 + 1, 1, v17);
    }
    unint64_t v65 = *((void *)v17 + 2);
    unint64_t v64 = *((void *)v17 + 3);
    if (v65 >= v64 >> 1) {
      unsigned int v17 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0((char *)(v64 > 1), v65 + 1, 1, v17);
    }
    *((void *)v17 + 2) = v65 + 1;
    uint64_t v66 = &v17[16 * v65];
    *((void *)v66 + 4) = v19;
    *((void *)v66 + 5) = v18;
  }
  *a6 = v17;
}

uint64_t specialized getter of leftIndent #1 in closure #1 in String.components(wrappedToLineLength:bullet:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3) {
    return 0;
  }
  swift_beginAccess();
  if (*(void *)(*(void *)a3 + 16))
  {
    uint64_t result = String.count.getter();
    Swift::Int v7 = result + 1;
    if (__OFADD__(result, 1))
    {
      __break(1u);
    }
    else
    {
      v8._uint64_t countAndFlagsBits = 32;
      v8._object = (void *)0xE100000000000000;
      return String.init(repeating:count:)(v8, v7)._countAndFlagsBits;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    v9._uint64_t countAndFlagsBits = 32;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    return a1;
  }
  return result;
}

char *Array<A>.asciiBoxed()(uint64_t a1)
{
  uint64_t v39 = *(void *)(a1 + 16);
  if (v39)
  {
    uint64_t v1 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v38 = v1;
    do
    {
      uint64_t v40 = *(void *)(v1 + 8 * v2);
      uint64_t v4 = *(void *)(v40 + 16);
      if (v4)
      {
        swift_bridgeObjectRetain();
        uint64_t v5 = v4 - 1;
        if (v5)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v6 = v40 + 56;
          do
          {
            swift_bridgeObjectRetain();
            String.count.getter();
            String.count.getter();
            v6 += 16;
            swift_bridgeObjectRelease();
            --v5;
          }
          while (v5);
          swift_bridgeObjectRelease();
          uint64_t v1 = v38;
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        uint64_t v7 = String.count.getter();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v7 > v3) {
          uint64_t v3 = v7;
        }
      }
      else
      {
        v3 &= ~(v3 >> 63);
      }
      ++v2;
    }
    while (v2 != v39);
    swift_bridgeObjectRelease();
    if (__OFADD__(v3, 2))
    {
      __break(1u);
      goto LABEL_39;
    }
  }
  _sS2SSysWl_0();
  uint64_t v42 = StringProtocol.padding<A>(toLength:withPad:startingAt:)();
  uint64_t v45 = v8;
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = 11441634;
  v9._object = (void *)0xA300000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = v45;
  uint64_t v37 = v42;
  uint64_t v43 = StringProtocol.padding<A>(toLength:withPad:startingAt:)();
  uint64_t v46 = v11;
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = 10786018;
  v12._object = (void *)0xA300000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  uint64_t v13 = v46;
  if (!v39)
  {
LABEL_39:
    New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 = (char *)_swiftEmptyArrayStorage;
    goto LABEL_40;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = 0;
  New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 = (char *)_swiftEmptyArrayStorage;
  uint64_t v36 = v10;
  do
  {
    if (v14) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = v10;
    }
    uint64_t v17 = *(void *)(a1 + 32 + 8 * v14);
    if (v14) {
      uint64_t v18 = v43;
    }
    else {
      uint64_t v18 = v37;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v41 = v14;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0(0, *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0+ 2)+ 1, 1, New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0);
    }
    unint64_t v20 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 2);
    unint64_t v19 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 3);
    if (v20 >= v19 >> 1) {
      New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0((char *)(v19 > 1), v20 + 1, 1, New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0);
    }
    *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 2) = v20 + 1;
    uint64_t v21 = &New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0[16 * v20];
    *((void *)v21 + 4) = v18;
    *((void *)v21 + 5) = v16;
    uint64_t v22 = *(void *)(v17 + 16);
    if (v22)
    {
      uint64_t v23 = v17 + 40;
      do
      {
        v24._uint64_t countAndFlagsBits = StringProtocol.padding<A>(toLength:withPad:startingAt:)();
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v25._uint64_t countAndFlagsBits = 8557794;
        v25._object = (void *)0xA300000000000000;
        String.append(_:)(v25);
        swift_bridgeObjectRelease();
        unint64_t v27 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 2);
        unint64_t v26 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 3);
        if (v27 >= v26 >> 1) {
          New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0((char *)(v26 > 1), v27 + 1, 1, New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0);
        }
        v23 += 16;
        *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 2) = v27 + 1;
        char v28 = &New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0[16 * v27];
        *((void *)v28 + 4) = 545428706;
        *((void *)v28 + 5) = 0xA400000000000000;
        --v22;
      }
      while (v22);
    }
    uint64_t v14 = v41 + 1;
    swift_bridgeObjectRelease();
    uint64_t v13 = v46;
    uint64_t v10 = v36;
  }
  while (v41 + 1 != v39);
  uint64_t v44 = StringProtocol.padding<A>(toLength:withPad:startingAt:)();
  uint64_t v47 = v29;
  swift_bridgeObjectRetain();
  v30._uint64_t countAndFlagsBits = 11507170;
  v30._object = (void *)0xA300000000000000;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  unint64_t v32 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 2);
  unint64_t v31 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 3);
  if (v32 >= v31 >> 1) {
    New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0((char *)(v31 > 1), v32 + 1, 1, New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0);
  }
  *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 2) = v32 + 1;
  uint64_t v33 = &New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0[16 * v32];
  *((void *)v33 + 4) = v44;
  *((void *)v33 + 5) = v47;
  swift_bridgeObjectRelease();
LABEL_40:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0;
}

{
  uint64_t inited;
  char *v3;

  __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCySaySSGGMD_0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100493400;
  *(void *)(inited + 32) = a1;
  swift_bridgeObjectRetain();
  uint64_t v3 = Array<A>.asciiBoxed()(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&_sSaySSGMD_0);
  swift_arrayDestroy();
  return v3;
}

uint64_t Array<A>.appendStringComponents(_:lineLength:bullet:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10 = type metadata accessor for CharacterSet();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  static CharacterSet.newlines.getter();
  _sS2SSysWl_0();
  uint64_t v14 = StringProtocol.components(separatedBy:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v15 = (char *)_swiftEmptyArrayStorage;
  uint64_t v22 = (char *)_swiftEmptyArrayStorage;
  uint64_t v16 = *(void *)(v14 + 16);
  if (v16)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = (uint64_t *)(v14 + 40);
    do
    {
      uint64_t v18 = *v17;
      uint64_t v23 = *(v17 - 1);
      uint64_t v24 = v18;
      swift_bridgeObjectRetain();
      closure #1 in String.components(wrappedToLineLength:bullet:)(&v22, &v23, a4, a5, a3, &v21);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = v21;
      uint64_t v22 = v21;
      v17 += 2;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return _sSa6append10contentsOfyqd__n_t7ElementQyd__RszSTRd__lFSS_SaySSGTg5_0((uint64_t)v15);
}

unint64_t type metadata accessor for UIBarButtonItem()
{
  unint64_t result = _sSo15UIBarButtonItemCML_0;
  if (!_sSo15UIBarButtonItemCML_0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&_sSo15UIBarButtonItemCML_0);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [UIBarButtonItem] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [UIBarButtonItem] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UIBarButtonItem] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UIBarButtonItem]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UIBarButtonItem] and conformance [A]);
  }
  return result;
}

uint64_t Optional<A>.isArtworkVisuallyIdentical(to:)(uint64_t a1, unint64_t a2)
{
  uint64_t result = (a2 | a1) == 0;
  if (a2)
  {
    if (a1) {
      return (uint64_t)objc_msgSend((id)a2, "isArtworkVisuallyIdenticalToCatalog:");
    }
  }
  return result;
}

uint64_t MPCPlaybackIntentOptions.debugDescription.getter(char a1)
{
  if ((a1 & 1) == 0)
  {
    New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 = (char *)_swiftEmptyArrayStorage;
    if ((a1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0(0, 1, 1, (char *)_swiftEmptyArrayStorage);
  unint64_t v4 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 2);
  unint64_t v3 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 3);
  if (v4 >= v3 >> 1) {
    New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0((char *)(v3 > 1), v4 + 1, 1, New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0);
  }
  *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 2) = v4 + 1;
  uint64_t v5 = &New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0[16 * v4];
  *((void *)v5 + 4) = 0x656D6D4979616C70;
  *((void *)v5 + 5) = 0xEF796C6574616964;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0(0, *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0+ 2)+ 1, 1, New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0);
    }
    unint64_t v7 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 2);
    unint64_t v6 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 3);
    if (v7 >= v6 >> 1) {
      New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0((char *)(v6 > 1), v7 + 1, 1, New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0);
    }
    *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 2) = v7 + 1;
    uint64_t v8 = &New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0[16 * v7];
    *((void *)v8 + 4) = 0x6575517465736572;
    *((void *)v8 + 5) = 0xEA00000000006575;
  }
LABEL_12:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0(0, *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0+ 2)+ 1, 1, New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0);
    }
    unint64_t v10 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 2);
    unint64_t v9 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 3);
    if (v10 >= v9 >> 1) {
      New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0((char *)(v9 > 1), v10 + 1, 1, New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0);
    }
    *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 2) = v10 + 1;
    uint64_t v11 = &New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0[16 * v10];
    *((void *)v11 + 4) = 0x4E70556F54646461;
    *((void *)v11 + 5) = 0xEF64616548747865;
    if ((a1 & 8) == 0)
    {
LABEL_14:
      if ((a1 & 0x10) == 0) {
        goto LABEL_31;
      }
      goto LABEL_26;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0(0, *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0+ 2)+ 1, 1, New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0);
  }
  unint64_t v13 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 2);
  unint64_t v12 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 3);
  if (v13 >= v12 >> 1) {
    New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0((char *)(v12 > 1), v13 + 1, 1, New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0);
  }
  *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 2) = v13 + 1;
  uint64_t v14 = &New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0[16 * v13];
  *((void *)v14 + 4) = 0x4E70556F54646461;
  *((void *)v14 + 5) = 0xEF6C696154747865;
  if ((a1 & 0x10) != 0)
  {
LABEL_26:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0(0, *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0+ 2)+ 1, 1, New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0);
    }
    unint64_t v16 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 2);
    unint64_t v15 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 3);
    if (v16 >= v15 >> 1) {
      New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0((char *)(v15 > 1), v16 + 1, 1, New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0);
    }
    *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0 + 2) = v16 + 1;
    uint64_t v17 = &New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0[16 * v16];
    *((void *)v17 + 4) = 0x5074726174736572;
    *((void *)v17 + 5) = 0xEF6B63616279616CLL;
  }
LABEL_31:
  __swift_instantiateConcreteTypeFromMangledName(&_sSaySSGMD_0);
  _sSaySSGSayxGSKsWl_0();
  uint64_t v18 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 93;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  return 91;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MPCPlaybackIntentOptions()
{
  return MPCPlaybackIntentOptions.debugDescription.getter(*v0);
}

void *MPMediaLibraryFilteringOptions.none.unsafeMutableAddressor()
{
  return &static MPMediaLibraryFilteringOptions.none;
}

__C::MPMediaLibraryFilteringOptions __swiftcall MPMediaLibraryFilteringOptions.init(_:)(NSNumber_optional a1)
{
  if (a1.value.super.super.isa)
  {
    Class isa = a1.value.super.super.isa;
    uint64_t v2 = (objc_class *)[(objc_class *)a1.value.super.super.isa unsignedIntegerValue];

    a1.value.super.super.Class isa = v2;
  }
  return (__C::MPMediaLibraryFilteringOptions)a1.value.super.super.isa;
}

uint64_t MPMediaLibraryFilteringOptions.itemRequestFilteringOptions.getter(char a1)
{
  return a1 & 2;
}

uint64_t static PropertySetCombinator.buildBlock(_:)(unint64_t a1)
{
  id v2 = [self emptyPropertySet];
  unint64_t v3 = v2;
  if (!(a1 >> 62))
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v5 = v2;
    uint64_t result = swift_bridgeObjectRetain();
    id v7 = v3;
    if (v4) {
      goto LABEL_3;
    }
LABEL_10:

    swift_bridgeObjectRelease();
    return (uint64_t)v7;
  }
  id v12 = v2;
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v4 = result;
  id v7 = v3;
  if (!result) {
    goto LABEL_10;
  }
LABEL_3:
  if (v4 >= 1)
  {
    uint64_t v8 = 0;
    unint64_t v9 = v3;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v10 = *(id *)(a1 + 8 * v8 + 32);
      }
      uint64_t v11 = v10;
      ++v8;
      id v7 = [v9 propertySetByCombiningWithPropertySet:v10];

      unint64_t v9 = v7;
    }
    while (v4 != v8);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

unint64_t _sSaySSGSayxGSKsWl_0()
{
  unint64_t result = _sSaySSGSayxGSKsWL_0;
  if (!_sSaySSGSayxGSKsWL_0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&_sSaySSGMD_0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&_sSaySSGSayxGSKsWL_0);
  }
  return result;
}

ValueMetadata *type metadata accessor for PropertySetCombinator()
{
  return &type metadata for PropertySetCombinator;
}

uint64_t GenericMusicItem.innerMusicItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for GenericMusicItem();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == enum case for GenericMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = type metadata accessor for Album();
    uint64_t v10 = v9;
    uint64_t v11 = &protocol witness table for Album;
LABEL_5:
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v11;
LABEL_19:
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a1);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(boxed_opaque_existential_1, v7, v10);
  }
  if (v8 == enum case for GenericMusicItem.artist(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = type metadata accessor for Artist();
    uint64_t v10 = v9;
    uint64_t v11 = &protocol witness table for Artist;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.composer(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v10 = type metadata accessor for Composer();
    *(void *)(a1 + 24) = v10;
    id v12 = (unint64_t *)&_s16MusicKitInternal8ComposerVAC0aB00A4ItemAAWL_0;
    unint64_t v13 = &type metadata accessor for Composer;
LABEL_18:
    *(void *)(a1 + 32) = lazy protocol witness table accessor for type UploadedVideo and conformance UploadedVideo(v12, (void (*)(uint64_t))v13);
    goto LABEL_19;
  }
  if (v8 == enum case for GenericMusicItem.creditArtist(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v10 = type metadata accessor for CreditArtist();
    *(void *)(a1 + 24) = v10;
    id v12 = (unint64_t *)&lazy protocol witness table cache variable for type CreditArtist and conformance CreditArtist;
    unint64_t v13 = &type metadata accessor for CreditArtist;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.curator(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = type metadata accessor for Curator();
    uint64_t v10 = v9;
    uint64_t v11 = &protocol witness table for Curator;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.editorialItem(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v10 = type metadata accessor for EditorialItem();
    *(void *)(a1 + 24) = v10;
    id v12 = (unint64_t *)&_s16MusicKitInternal13EditorialItemVAC0aB00aE0AAWL_0;
    unint64_t v13 = &type metadata accessor for EditorialItem;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.genre(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = type metadata accessor for Genre();
    uint64_t v10 = v9;
    uint64_t v11 = &protocol witness table for Genre;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v10 = type metadata accessor for MusicMovie();
    *(void *)(a1 + 24) = v10;
    id v12 = (unint64_t *)&_s16MusicKitInternal0A5MovieVAC0aB00A4ItemAAWL_0;
    unint64_t v13 = &type metadata accessor for MusicMovie;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = type metadata accessor for MusicVideo();
    uint64_t v10 = v9;
    uint64_t v11 = &protocol witness table for MusicVideo;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.playlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = type metadata accessor for Playlist();
    uint64_t v10 = v9;
    uint64_t v11 = &protocol witness table for Playlist;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.radioShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = type metadata accessor for RadioShow();
    uint64_t v10 = v9;
    uint64_t v11 = &protocol witness table for RadioShow;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.recordLabel(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = type metadata accessor for RecordLabel();
    uint64_t v10 = v9;
    uint64_t v11 = &protocol witness table for RecordLabel;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.socialProfile(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v10 = type metadata accessor for SocialProfile();
    *(void *)(a1 + 24) = v10;
    id v12 = (unint64_t *)&_s16MusicKitInternal13SocialProfileVAC0aB00A4ItemAAWL_0;
    unint64_t v13 = &type metadata accessor for SocialProfile;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = type metadata accessor for Song();
    uint64_t v10 = v9;
    uint64_t v11 = &protocol witness table for Song;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.station(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v9 = type metadata accessor for Station();
    uint64_t v10 = v9;
    uint64_t v11 = &protocol witness table for Station;
    goto LABEL_5;
  }
  if (v8 == enum case for GenericMusicItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v10 = type metadata accessor for TVEpisode();
    *(void *)(a1 + 24) = v10;
    id v12 = (unint64_t *)&_s16MusicKitInternal9TVEpisodeVAC0aB00A4ItemAAWL_0;
    unint64_t v13 = &type metadata accessor for TVEpisode;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.tvSeason(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v10 = type metadata accessor for TVSeason();
    *(void *)(a1 + 24) = v10;
    id v12 = (unint64_t *)&_s16MusicKitInternal8TVSeasonVAC0aB00A4ItemAAWL_0;
    unint64_t v13 = &type metadata accessor for TVSeason;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.tvShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v10 = type metadata accessor for TVShow();
    *(void *)(a1 + 24) = v10;
    id v12 = (unint64_t *)&_s16MusicKitInternal6TVShowVAC0aB00A4ItemAAWL_0;
    unint64_t v13 = &type metadata accessor for TVShow;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v10 = type metadata accessor for UploadedAudio();
    *(void *)(a1 + 24) = v10;
    id v12 = (unint64_t *)&_s16MusicKitInternal13UploadedAudioVAC0aB00A4ItemAAWL_0;
    unint64_t v13 = &type metadata accessor for UploadedAudio;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t v10 = type metadata accessor for UploadedVideo();
    *(void *)(a1 + 24) = v10;
    id v12 = (unint64_t *)&_s16MusicKitInternal13UploadedVideoVAC0aB00A4ItemAAWL_0;
    unint64_t v13 = &type metadata accessor for UploadedVideo;
    goto LABEL_18;
  }
  if (v8 == enum case for GenericMusicItem.other(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

uint64_t GenericMusicItem.catalogID.getter()
{
  uint64_t v0 = type metadata accessor for TVShow();
  uint64_t v37 = *(void *)(v0 - 8);
  uint64_t v38 = v0;
  __chkstk_darwin(v0);
  uint64_t v36 = (char *)&v36 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for TVSeason();
  uint64_t v40 = *(void *)(v2 - 8);
  uint64_t v41 = v2;
  __chkstk_darwin(v2);
  uint64_t v39 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TVEpisode();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  __chkstk_darwin(v4);
  uint64_t v42 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Song();
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v47 = v6;
  __chkstk_darwin(v6);
  uint64_t v45 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Playlist();
  uint64_t v49 = *(void *)(v8 - 8);
  uint64_t v50 = v8;
  __chkstk_darwin(v8);
  unsigned __int8 v48 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MusicVideo();
  uint64_t v52 = *(void *)(v10 - 8);
  uint64_t v53 = v10;
  __chkstk_darwin(v10);
  Swift::String v51 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for MusicMovie();
  uint64_t v54 = *(void *)(v12 - 8);
  uint64_t v55 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Artist();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Album();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  Swift::String v22 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for GenericMusicItem();
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  unint64_t v26 = (char *)&v36 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v56, v23);
  int v27 = (*(uint64_t (**)(char *, uint64_t))(v24 + 88))(v26, v23);
  if (v27 != enum case for GenericMusicItem.album(_:))
  {
    if (v27 == enum case for GenericMusicItem.artist(_:))
    {
      (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v26, v15);
      uint64_t v28 = Artist.catalogID.getter();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      return v28;
    }
    if (v27 != enum case for GenericMusicItem.composer(_:)
      && v27 != enum case for GenericMusicItem.curator(_:)
      && v27 != enum case for GenericMusicItem.editorialItem(_:)
      && v27 != enum case for GenericMusicItem.genre(_:))
    {
      if (v27 == enum case for GenericMusicItem.musicMovie(_:))
      {
        (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
        uint64_t v30 = v54;
        uint64_t v29 = v55;
        (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v14, v26, v55);
        uint64_t v28 = MusicMovie.catalogID.getter();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v29);
        return v28;
      }
      if (v27 == enum case for GenericMusicItem.musicVideo(_:))
      {
        (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
        unint64_t v31 = v51;
        uint64_t v32 = v52;
        uint64_t v33 = v53;
        (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v51, v26, v53);
        uint64_t v34 = MusicVideo.catalogID.getter();
LABEL_15:
        uint64_t v28 = v34;
        (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v33);
        return v28;
      }
      if (v27 == enum case for GenericMusicItem.playlist(_:))
      {
        (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
        unint64_t v31 = v48;
        uint64_t v32 = v49;
        uint64_t v33 = v50;
        (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v48, v26, v50);
        uint64_t v34 = Playlist.catalogID.getter();
        goto LABEL_15;
      }
      if (v27 != enum case for GenericMusicItem.radioShow(_:)
        && v27 != enum case for GenericMusicItem.recordLabel(_:)
        && v27 != enum case for GenericMusicItem.socialProfile(_:))
      {
        if (v27 == enum case for GenericMusicItem.song(_:))
        {
          (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
          unint64_t v31 = v45;
          uint64_t v32 = v46;
          uint64_t v33 = v47;
          (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v45, v26, v47);
          uint64_t v34 = Song.catalogID.getter();
          goto LABEL_15;
        }
        if (v27 != enum case for GenericMusicItem.station(_:))
        {
          if (v27 == enum case for GenericMusicItem.tvEpisode(_:))
          {
            (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
            unint64_t v31 = v42;
            uint64_t v32 = v43;
            uint64_t v33 = v44;
            (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v42, v26, v44);
            uint64_t v34 = TVEpisode.catalogID.getter();
            goto LABEL_15;
          }
          if (v27 == enum case for GenericMusicItem.tvSeason(_:))
          {
            (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
            unint64_t v31 = v39;
            uint64_t v32 = v40;
            uint64_t v33 = v41;
            (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v39, v26, v41);
            uint64_t v34 = TVSeason.catalogID.getter();
            goto LABEL_15;
          }
          if (v27 == enum case for GenericMusicItem.tvShow(_:))
          {
            (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
            unint64_t v31 = v36;
            uint64_t v32 = v37;
            uint64_t v33 = v38;
            (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v36, v26, v38);
            uint64_t v34 = TVShow.catalogID.getter();
            goto LABEL_15;
          }
        }
      }
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v24 + 96))(v26, v23);
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v26, v19);
  uint64_t v28 = Album.catalogID.getter();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  return v28;
}

uint64_t Playlist.Entry.InternalItem.musicItem.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Playlist.Entry.InternalItem();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v21 - v9, v2, v4);
  int v12 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v10, v4);
  if (v12 == enum case for Playlist.Entry.InternalItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    uint64_t v13 = type metadata accessor for MusicMovie();
    a1[3] = v13;
    uint64_t v14 = (unint64_t *)&_s16MusicKitInternal0A5MovieVAC0aB00A4ItemAAWL_0;
    uint64_t v15 = &type metadata accessor for MusicMovie;
LABEL_3:
    a1[4] = lazy protocol witness table accessor for type UploadedVideo and conformance UploadedVideo(v14, (void (*)(uint64_t))v15);
LABEL_9:
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(boxed_opaque_existential_1, v10, v13);
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    uint64_t v16 = type metadata accessor for MusicVideo();
    uint64_t v13 = v16;
    uint64_t v17 = &protocol witness table for MusicVideo;
LABEL_8:
    a1[3] = v16;
    a1[4] = (uint64_t)v17;
    goto LABEL_9;
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    uint64_t v16 = type metadata accessor for Song();
    uint64_t v13 = v16;
    uint64_t v17 = &protocol witness table for Song;
    goto LABEL_8;
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    uint64_t v13 = type metadata accessor for TVEpisode();
    a1[3] = v13;
    uint64_t v14 = (unint64_t *)&_s16MusicKitInternal9TVEpisodeVAC0aB00A4ItemAAWL_0;
    uint64_t v15 = &type metadata accessor for TVEpisode;
    goto LABEL_3;
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    uint64_t v13 = type metadata accessor for UploadedAudio();
    a1[3] = v13;
    uint64_t v14 = (unint64_t *)&_s16MusicKitInternal13UploadedAudioVAC0aB00A4ItemAAWL_0;
    uint64_t v15 = &type metadata accessor for UploadedAudio;
    goto LABEL_3;
  }
  if (v12 == enum case for Playlist.Entry.InternalItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v10, v4);
    uint64_t v13 = type metadata accessor for UploadedVideo();
    a1[3] = v13;
    uint64_t v14 = (unint64_t *)&_s16MusicKitInternal13UploadedVideoVAC0aB00A4ItemAAWL_0;
    uint64_t v15 = &type metadata accessor for UploadedVideo;
    goto LABEL_3;
  }
  v11(v8, v2, v4);
  unint64_t v21 = 0;
  unint64_t v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  unint64_t v21 = 0xD000000000000028;
  unint64_t v22 = 0x8000000100471C50;
  lazy protocol witness table accessor for type UploadedVideo and conformance UploadedVideo(&_s8MusicKit8PlaylistV5EntryV0aB8InternalE0E4ItemOAHs23CustomStringConvertibleAFWL_0, (void (*)(uint64_t))&type metadata accessor for Playlist.Entry.InternalItem);
  v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type UploadedVideo and conformance UploadedVideo(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized Array.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v5 + 16) + 1, 1, (char *)v5);
    uint64_t v5 = result;
  }
  unint64_t v8 = *(void *)(v5 + 16);
  unint64_t v7 = *(void *)(v5 + 24);
  if (v8 >= v7 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, (char *)v5);
    uint64_t v5 = result;
  }
  *(void *)(v5 + 16) = v8 + 1;
  unint64_t v9 = v5 + 16 * v8;
  *(void *)(v9 + 32) = a1;
  *(void *)(v9 + 40) = a2;
  *uint64_t v2 = v5;
  return result;
}

uint64_t specialized Array.append(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    uint64_t v3 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v4 > 1, v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (IndexPath, IndexPath))
                 - 8);
  uint64_t result = outlined init with take of PresentationSource?(a1, (uint64_t)v3+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v5, &demangling cache variable for type metadata for (IndexPath, IndexPath));
  *uint64_t v1 = v3;
  return result;
}

{
  void **v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;

  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  }
  unint64_t v5 = v3[2];
  unint64_t v4 = v3[3];
  if (v5 >= v4 >> 1) {
    uint64_t v3 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v4 > 1, v5 + 1, 1, v3);
  }
  v3[2] = v5 + 1;
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))((unint64_t)v3+ ((*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80))+ *(void *)(*(void *)(v6 - 8) + 72) * v5, a1, v6);
  *uint64_t v1 = v3;
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 16);
  if (v4)
  {
    uint64_t v8 = swift_bridgeObjectRetain() + 40;
    do
    {
      unint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 - 8);
      swift_retain();
      v9(a2, a3, a4);
      swift_release();
      v8 += 16;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized static UnsafeMutablePointer.allocate(capacity:)()
{
  return swift_slowAlloc();
}

unint64_t specialized Dictionary.subscript.setter(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if ((v9 & 1) == 0) {
      return result;
    }
    unint64_t v10 = result;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v3;
    uint64_t v14 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v12 = v14;
    }
    specialized _NativeDictionary._delete(at:)(v10, v12);
    *uint64_t v4 = v12;
  }
  else
  {
    char v7 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a3, v7);
    *uint64_t v3 = v13;
  }
  return swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> specialized Sequence<>.sorted()()
{
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v0);
}

uint64_t protocol witness for DiffableSection.items.getter in conformance _DiffableSection<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 44));
}

uint64_t AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, NSObject *a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, objc_class *a8@<X7>, NSObject *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, NSObject *a15)
{
  void (**v683)(uint8_t **__return_ptr, uint64_t);
  char *v684;
  uint64_t v685;
  void (**v686)(uint8_t **__return_ptr, uint64_t);
  void (**v687)(uint8_t **__return_ptr, uint64_t);
  uint64_t v688;
  void (**v689)(uint8_t **__return_ptr, uint64_t);
  uint64_t v690;
  void (**v691)(uint8_t **__return_ptr, uint64_t);
  void (**v692)(uint8_t **__return_ptr, uint64_t);
  uint8_t *v693;
  unsigned char *v694;
  uint64_t v695;
  uint64_t v696;
  unsigned char *v697;
  char *v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  char *v702;
  uint64_t v703;
  char *v704;
  char *v705;
  os_log_t v706;
  char *v707;
  uint64_t v708;
  unint64_t v709;
  uint64_t *v710;
  uint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  BOOL v715;
  BOOL v716;
  uint64_t v717;
  void (*v718)(char *, uint64_t);
  uint64_t v719;
  char v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  unint64_t v725;
  uint64_t v726;
  uint64_t v727;
  NSObject *v728;
  int v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  char *v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  unint64_t v740;
  uint64_t v741;
  uint64_t v742;
  char v743;
  char *v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  unint64_t v748;
  uint64_t v749;
  unint64_t v750;
  char *v751;
  uint64_t v752;
  NSObject *v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint8_t *v761;
  char **p_TupleTypeMetadata2;
  uint64_t v763;
  uint64_t v764;
  char v765;
  char *v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  unint64_t v770;
  uint64_t v771;
  unint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint8_t *v779;
  void (*v780)(char *, uint64_t);
  void (*v781)(char *, uint64_t);
  uint64_t v782;
  char *v783;
  uint64_t v784;
  os_log_type_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint8_t *v791;
  char **v792;
  uint64_t v793;
  uint64_t v794;
  NSObject *v795;
  os_log_type_t v796;
  uint64_t v797;
  char *v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint8_t *v804;
  void (*v805)(char *, uint64_t);
  uint64_t v806;
  void (*v807)(char *, uint64_t);
  uint64_t v808;
  uint64_t v809;
  char *v810;
  char *v811;
  uint64_t v812;
  uint64_t v813;
  NSObject *v814;
  NSObject *v815;
  os_log_type_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint8_t *v822;
  void (*v823)(char *, uint64_t);
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  NSObject *v828;
  os_log_type_t v829;
  uint64_t v830;
  uint8_t *v831;
  uint64_t v832;
  uint8_t *v833;
  void (*v834)(char *, uint64_t);
  uint64_t v835;
  uint64_t v836;
  void (**v837)(char *, char *, uint64_t);
  uint64_t v838;
  NSObject *v839;
  os_log_type_t v840;
  uint64_t v841;
  uint8_t *v842;
  void (*v843)(char *, uint64_t);
  uint64_t v844;
  void v845[2];
  void (**v846)(uint64_t, char *);
  void (**v847)(uint64_t);
  uint64_t v848;
  void (*v849)(uint8_t **, void);
  NSObject *v850;
  void (**v851)(char *, uint64_t);
  void (**v852)(char *, uint64_t);
  NSObject *v853;
  void (*v854)(char *, uint64_t);
  void (*v855)(uint64_t, NSObject *);
  void (**v856)(char *, void, uint64_t, uint64_t);
  uint64_t v857;
  void (*v858)(uint64_t, uint64_t);
  uint64_t v859;
  void (*v860)(char *, void, uint64_t, uint64_t);
  int64_t v861;
  void (**v862)(uint64_t, char *, uint64_t);
  unsigned int (**v863)(char *, uint64_t, uint64_t);
  int64_t v864;
  objc_class *v865;
  char *v866;
  uint64_t v867;
  void (**v868)(uint64_t, char *, uint64_t);
  void (**v869)(char *, char *, uint64_t);
  long long v870;
  char *v871;
  uint64_t v872;
  char *v873;
  char *v874;
  char *v875;
  char *v876;
  uint64_t v877;
  void (**v878)(char *, char *, uint64_t);
  void (**v879)(uint64_t, uint64_t);
  void (**v880)(char *, uint64_t);
  os_log_t v881;
  uint64_t v882;
  uint64_t v883;
  unint64_t v884;
  char *v885;
  char *v886;
  char *v887;
  void *v888;
  uint64_t v889;
  os_log_t v890;
  char *v891;
  char *v892;
  char *v893;
  char *v894;
  char *v895;
  char *v896;
  uint64_t AssociatedConformanceWitness;
  char *v898;
  uint64_t v899;
  char *v900;
  char *v901;
  uint64_t v902;
  char *v903;
  char *v904;
  uint64_t *v905;
  uint64_t v906;
  char *TupleTypeMetadata2;
  char *v908;
  uint64_t v909;
  long long v910;
  uint64_t *v911;
  uint64_t v912;
  char *v913;
  uint64_t v914;
  NSObject *v915;
  char *v916;
  char *v917;
  uint64_t v918;
  char *v919;
  char **v920;
  long long v921;
  uint64_t v922;
  char *v923;
  char *v924;
  uint64_t *v925;
  void *v926;
  void (**v927)(char *, uint64_t);
  void (*v928)(char *, uint64_t);
  char *v929;
  uint64_t v930;
  char *v931;
  char *v932;
  char *v933;
  long long v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  NSObject *v940;
  os_log_t v941;
  char *v942;
  uint64_t v943;
  void (**v944)(uint8_t **__return_ptr, uint64_t);
  void (**v945)(uint8_t **__return_ptr, uint64_t);
  void (**v946)(char *);
  uint64_t v947;
  char *v948;
  uint64_t v949;
  NSObject *v950;
  NSObject *v951;
  char *v952;
  uint64_t v953;
  char *v954;
  uint64_t v955;
  uint64_t v956;
  char *v957;
  uint64_t v958;
  void (**v959)(uint64_t, uint64_t, uint64_t);
  void (**v960)(uint8_t **__return_ptr, uint64_t);
  uint64_t v961;
  uint64_t v962;
  void (*v963)(void, uint64_t, uint64_t);
  NSObject *v964;
  uint64_t v965;
  char *v966;
  uint64_t v967;
  uint64_t v968;
  void *WitnessTable;
  char *v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t *v976;
  void (**v977)(uint64_t, uint64_t, uint64_t);
  void v978[5];
  unsigned char *v979;
  uint8_t *v980;
  uint64_t v981;
  char v982;
  void v983[2];
  uint64_t v984;
  void *v985;
  unint64_t v986;
  void *v987;
  unint64_t v988;

  LODWORD(v953) = a6;
  v890 = a5;
  v939 = a4;
  v974 = a3;
  v935 = a2;
  v936 = a11;
  v938 = a10;
  v922 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (IndexPath, IndexPath));
  __chkstk_darwin(v922);
  *(void *)&v921 = (char *)v845 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  v940 = a15;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v967 = type metadata accessor for CollectionDifference.Change();
  v880 = *(void (***)(char *, uint64_t))(v967 - 8);
  uint64_t v21 = __chkstk_darwin(v967);
  v976 = (void *)((char *)v845 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  v966 = (char *)v845 - v23;
  uint64_t v24 = type metadata accessor for CollectionDifference();
  WitnessTable = (void *)swift_getWitnessTable();
  v914 = type metadata accessor for IndexingIterator();
  v879 = *(void (***)(uint64_t, uint64_t))(v914 - 8);
  uint64_t v25 = __chkstk_darwin(v914);
  v904 = (char *)v845 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v25);
  v968 = (uint64_t)v845 - v28;
  v909 = *(void *)(v24 - 8);
  uint64_t v29 = __chkstk_darwin(v27);
  v965 = (uint64_t)v845 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v919 = (char *)v845 - v31;
  TupleTypeMetadata2 = (char *)swift_getTupleTypeMetadata2();
  v906 = type metadata accessor for Optional();
  v878 = *(void (***)(char *, char *, uint64_t))(v906 - 8);
  uint64_t v32 = __chkstk_darwin(v906);
  v908 = (char *)v845 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v905 = (void *)((char *)v845 - v34);
  v973 = v24;
  uint64_t v35 = type metadata accessor for Optional();
  __chkstk_darwin(v35 - 8);
  v972 = (uint64_t)v845 - v36;
  v882 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<String>>);
  uint64_t v37 = __chkstk_darwin(v882);
  v881 = (os_log_t)((char *)v845 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v39 = __chkstk_darwin(v37);
  v950 = ((char *)v845 - v40);
  v970 = (char *)AssociatedTypeWitness;
  v884 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v39);
  v902 = (uint64_t)v845 - v41;
  v899 = swift_checkMetadataState();
  v877 = *(void *)(v899 - 8);
  uint64_t v42 = __chkstk_darwin(v899);
  v886 = (char *)v845 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = __chkstk_darwin(v42);
  v893 = (char *)v845 - v45;
  v958 = a14;
  v889 = *(void *)(a14 - 8);
  uint64_t v46 = __chkstk_darwin(v44);
  v874 = (char *)v845 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __chkstk_darwin(v46);
  v885 = (char *)v845 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  v898 = (char *)v845 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  v913 = (char *)v845 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  v901 = (char *)v845 - v55;
  v872 = v56;
  __chkstk_darwin(v54);
  v957 = (char *)v845 - v57;
  v971 = type metadata accessor for IndexPath();
  v947 = *(void *)(v971 - 8);
  uint64_t v58 = __chkstk_darwin(v971);
  v894 = (char *)v845 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = __chkstk_darwin(v58);
  v900 = (char *)v845 - v61;
  uint64_t v62 = __chkstk_darwin(v60);
  v930 = (uint64_t)v845 - v63;
  uint64_t v64 = __chkstk_darwin(v62);
  v923 = (char *)v845 - v65;
  uint64_t v66 = __chkstk_darwin(v64);
  v933 = (char *)v845 - v67;
  uint64_t v68 = __chkstk_darwin(v66);
  v917 = (char *)v845 - v69;
  uint64_t v70 = __chkstk_darwin(v68);
  v931 = (char *)v845 - v71;
  uint64_t v72 = __chkstk_darwin(v70);
  v924 = (char *)v845 - v73;
  uint64_t v74 = __chkstk_darwin(v72);
  v903 = (char *)v845 - v75;
  uint64_t v76 = __chkstk_darwin(v74);
  v949 = (uint64_t)v845 - v77;
  v943 = v78;
  __chkstk_darwin(v76);
  *(void *)&v910 = (char *)v845 - v79;
  uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&_s10Foundation9IndexPathVSgMD_0);
  __chkstk_darwin(v80 - 8);
  v948 = (char *)v845 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  v918 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<String>);
  v937 = *(void *)(v918 - 8);
  uint64_t v82 = __chkstk_darwin(v918);
  v952 = (char *)v845 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v82);
  v892 = (char *)v845 - v84;
  uint64_t v85 = type metadata accessor for Logger();
  v951 = *(NSObject **)(v85 - 8);
  uint64_t v86 = __chkstk_darwin(v85);
  v977 = (void (**)(uint64_t, uint64_t, uint64_t))((char *)v845 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v88 = __chkstk_darwin(v86);
  v959 = (void (**)(uint64_t, uint64_t, uint64_t))((char *)v845 - v89);
  uint64_t v90 = __chkstk_darwin(v88);
  v896 = (char *)v845 - v91;
  uint64_t v92 = __chkstk_darwin(v90);
  v871 = (char *)v845 - v93;
  uint64_t v94 = __chkstk_darwin(v92);
  v876 = (char *)v845 - v95;
  uint64_t v96 = __chkstk_darwin(v94);
  v875 = (char *)v845 - v97;
  uint64_t v98 = __chkstk_darwin(v96);
  v891 = (char *)v845 - v99;
  uint64_t v100 = __chkstk_darwin(v98);
  v895 = (char *)v845 - v101;
  uint64_t v102 = __chkstk_darwin(v100);
  v887 = (char *)v845 - v103;
  uint64_t v104 = __chkstk_darwin(v102);
  v928 = (void (*)(char *, uint64_t))((char *)v845 - v105);
  uint64_t v106 = __chkstk_darwin(v104);
  v873 = (char *)v845 - v107;
  uint64_t v108 = __chkstk_darwin(v106);
  v929 = (char *)v845 - v109;
  uint64_t v110 = __chkstk_darwin(v108);
  v942 = (char *)v845 - v111;
  uint64_t v112 = __chkstk_darwin(v110);
  v916 = (char *)v845 - v113;
  uint64_t v114 = __chkstk_darwin(v112);
  v932 = (char *)v845 - v115;
  uint64_t v116 = __chkstk_darwin(v114);
  v954 = (char *)v845 - v117;
  uint64_t v118 = __chkstk_darwin(v116);
  v944 = (void (**)(uint8_t **__return_ptr, uint64_t))((char *)v845 - v119);
  uint64_t v120 = __chkstk_darwin(v118);
  v946 = (void (**)(char *))((char *)v845 - v121);
  uint64_t v122 = __chkstk_darwin(v120);
  v927 = (void (**)(char *, uint64_t))((char *)v845 - v123);
  uint64_t v124 = __chkstk_darwin(v122);
  v945 = (void (**)(uint8_t **__return_ptr, uint64_t))((char *)v845 - v125);
  uint64_t v126 = __chkstk_darwin(v124);
  v869 = (void (**)(char *, char *, uint64_t))((char *)v845 - v127);
  uint64_t v128 = __chkstk_darwin(v126);
  *(void *)&v870 = (char *)v845 - v129;
  __chkstk_darwin(v128);
  v131 = (char *)v845 - v130;
  LOBYTE(a9->isa) = 0;
  v132 = (int *)type metadata accessor for AIDiffingUpdate();
  v915 = ((char *)a9 + v132[6]);
  IndexSet.init()();
  v912 = (uint64_t)a9 + v132[7];
  IndexSet.init()();
  v133 = (Class *)((char *)&a9->isa + v132[8]);
  v134 = variable initialization expression of Library.Context.playlistVariants();
  v926 = v133;
  void *v133 = v134;
  v135 = (uint64_t *)((char *)a9 + v132[9]);
  uint64_t *v135 = variable initialization expression of AIDiffingUpdate.insertedIndexPathsSet();
  v135[1] = v136;
  v911 = v135;
  v137 = (uint64_t *)((char *)a9 + v132[10]);
  uint64_t *v137 = variable initialization expression of AIDiffingUpdate.insertedIndexPathsSet();
  v137[1] = v138;
  v925 = v137;
  v139 = (uint64_t *)((char *)a9 + v132[11]);
  uint64_t *v139 = variable initialization expression of AIDiffingUpdate.insertedIndexPathsSet();
  v139[1] = v140;
  uint64_t v141 = v132[12];
  uint64_t v142 = a1;
  v143 = (char **)((char *)a9 + v141);
  v144 = (char *)variable initialization expression of Library.Context.playlistVariants();
  v920 = v143;
  *v143 = v144;
  a9[1].Class isa = (Class)a7;
  a9[2].Class isa = a8;
  v941 = a9;
  if (!a1)
  {
    outlined copy of (@escaping @callee_guaranteed () -> ())?(a7);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(a12);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v938);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(a7);
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t result = swift_bridgeObjectRelease();
    LOBYTE(v941->isa) = 1;
    return result;
  }
  v956 = a12;
  v955 = a13;
  if (!v935)
  {
    outlined copy of (@escaping @callee_guaranteed () -> ())?(a7);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v956);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v938);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(a7);
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  outlined copy of (@escaping @callee_guaranteed () -> ())?(a7);
  uint64_t v145 = v958;
  uint64_t v146 = Array.count.getter();
  uint64_t v147 = v938;
  if (v146 <= 0 || (uint64_t v148 = v146, v883 = v142, v149 = Array.count.getter(), v149 < 1))
  {
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v956);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v147);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(a7);
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v868 = (void (**)(uint64_t, char *, uint64_t))v149;
  v857 = v148;
  v859 = a7;
  v865 = a8;
  uint64_t v150 = Logger.aiDiff.unsafeMutableAddressor();
  Class isa = (void (*)(void))v951[2].isa;
  v962 = v150;
  v964 = v951 + 2;
  v963 = (void (*)(void, uint64_t, uint64_t))isa;
  isa(v131);
  uint64_t v152 = swift_allocObject();
  v153 = v940;
  *(void *)(v152 + 16) = v145;
  *(void *)(v152 + 24) = v153;
  uint64_t v154 = swift_allocObject();
  *(void *)(v154 + 16) = v974;
  uint64_t v155 = swift_allocObject();
  *(void *)(v155 + 16) = partial apply for implicit closure #2 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
  *(void *)(v155 + 24) = v154;
  swift_bridgeObjectRetain();
  uint64_t v156 = Logger.logObject.getter();
  LODWORD(v960) = static os_log_type_t.default.getter();
  uint64_t v157 = swift_allocObject();
  *(unsigned char *)(v157 + 16) = 32;
  uint64_t v158 = swift_allocObject();
  *(unsigned char *)(v158 + 16) = 8;
  uint64_t v159 = swift_allocObject();
  *(void *)(v159 + 16) = partial apply for implicit closure #1 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
  *(void *)(v159 + 24) = v152;
  uint64_t v160 = swift_allocObject();
  *(void *)(v160 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v160 + 24) = v159;
  uint64_t v161 = swift_allocObject();
  *(void *)(v161 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v161 + 24) = v160;
  uint64_t v162 = swift_allocObject();
  *(unsigned char *)(v162 + 16) = 32;
  uint64_t v163 = swift_allocObject();
  *(unsigned char *)(v163 + 16) = 8;
  v164 = v156;
  uint64_t v165 = swift_allocObject();
  *(void *)(v165 + 16) = partial apply for specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
  *(void *)(v165 + 24) = v155;
  uint64_t v166 = swift_allocObject();
  *(void *)(v166 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  *(void *)(v166 + 24) = v165;
  v961 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>);
  uint64_t v167 = swift_allocObject();
  v934 = xmmword_1004940B0;
  *(_OWORD *)(v167 + 16) = xmmword_1004940B0;
  *(void *)(v167 + 32) = partial apply for closure #1 in OSLogArguments.append(_:);
  *(void *)(v167 + 40) = v157;
  *(void *)(v167 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
  *(void *)(v167 + 56) = v158;
  *(void *)(v167 + 64) = partial apply for closure #1 in OSLogArguments.append(_:);
  *(void *)(v167 + 72) = v161;
  *(void *)(v167 + 80) = closure #1 in OSLogArguments.append(_:)partial apply;
  *(void *)(v167 + 88) = v162;
  *(void *)(v167 + 96) = closure #1 in OSLogArguments.append(_:)partial apply;
  *(void *)(v167 + 104) = v163;
  *(void *)(v167 + 112) = partial apply for closure #1 in OSLogArguments.append(_:);
  *(void *)(v167 + 120) = v166;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  BOOL v168 = os_log_type_enabled(v164, (os_log_type_t)v960);
  v975 = v85;
  if (v168)
  {
    uint64_t v169 = swift_slowAlloc();
    v980 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v169 = 514;
    *(unsigned char *)(v169 + 2) = *(unsigned char *)(v157 + 16);
    swift_release();
    *(unsigned char *)(v169 + 3) = *(unsigned char *)(v158 + 16);
    uint64_t v170 = swift_release();
    uint64_t v171 = (*(uint64_t (**)(uint64_t))(v161 + 16))(v170);
    *(void *)(v169 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_1(v171, v172, (uint64_t *)&v980);
    swift_bridgeObjectRelease();
    swift_release();
    *(unsigned char *)(v169 + 12) = *(unsigned char *)(v162 + 16);
    swift_release();
    *(unsigned char *)(v169 + 13) = *(unsigned char *)(v163 + 16);
    uint64_t v173 = swift_release();
    uint64_t v174 = (*(uint64_t (**)(uint64_t))(v166 + 16))(v173);
    *(void *)(v169 + 14) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_1(v174, v175, (uint64_t *)&v980);
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v164, (os_log_type_t)v960, "Building update for section with item type %s, visible index paths: %s", (uint8_t *)v169, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v176 = v951[1].isa;
    v177 = v131;
    uint64_t v178 = v975;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v176 = v951[1].isa;
    v177 = v131;
    uint64_t v178 = v85;
  }
  v960 = (void (**)(uint8_t **__return_ptr, uint64_t))v176;
  ((void (*)(char *, uint64_t))v176)(v177, v178);
  uint64_t v180 = v938;
  uint64_t v181 = v958;
  if (v938)
  {
    v182 = (void *)swift_allocObject();
    v183 = v940;
    v182[2] = v181;
    v182[3] = v183;
    uint64_t v184 = v936;
    v182[4] = v180;
    v182[5] = v184;
    v185 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.DiffableSection.Items.Sequence.Element, @in_guaranteed A.DiffableSection.Items.Sequence.Element) -> (@unowned Bool);
  }
  else
  {
    v182 = (void *)swift_allocObject();
    v183 = v940;
    v182[2] = v181;
    v182[3] = v183;
    v185 = partial apply for closure #1 in implicit closure #3 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
  }
  v186 = (void *)swift_allocObject();
  v186[2] = v181;
  v186[3] = v183;
  v186[4] = v185;
  v186[5] = v182;
  v888 = v186;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v180);
  uint64_t v187 = specialized static Array._allocateUninitialized(_:)(0);
  v988 = specialized Dictionary.init(dictionaryLiteral:)(v187);
  v987 = &_swiftEmptySetSingleton;
  v980 = (uint8_t *)v883;
  __chkstk_darwin(v988);
  v845[-4] = v181;
  v845[-3] = v183;
  v845[-2] = &v987;
  uint64_t v188 = type metadata accessor for Array();
  uint64_t v189 = swift_getWitnessTable();
  uint64_t v191 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF_0((void (*)(char *, char *))partial apply for closure #2 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:), (uint64_t)&v845[-6], v188, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Never, v189, (uint64_t)&protocol witness table for Never, v190);
  v978[0] = v935;
  swift_getWitnessTable();
  uint64_t v192 = Sequence.enumerated()();
  v978[0] = v980;
  uint64_t v193 = __chkstk_darwin(v192);
  v845[-4] = v181;
  v845[-3] = v183;
  v845[-2] = &v988;
  __chkstk_darwin(v193);
  v845[-4] = v181;
  v845[-3] = v183;
  v845[-2] = partial apply for closure #3 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
  v845[-1] = v194;
  uint64_t v195 = type metadata accessor for EnumeratedSequence();
  uint64_t v196 = swift_getWitnessTable();
  uint64_t v198 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@unowned Int, @in_guaranteed A) -> (@owned String), (uint64_t)&v845[-6], v195, (char *)&type metadata for String, (uint64_t)&type metadata for Never, v196, (uint64_t)&protocol witness table for Never, v197);
  swift_bridgeObjectRelease();
  uint64_t v199 = v987[2];
  if (v199 != specialized Array.count.getter(v191))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v258 = v977;
    uint64_t v201 = v975;
    v963(v977, v962, v975);
    uint64_t v259 = swift_allocObject();
    *(void *)(v259 + 16) = v191;
    uint64_t v260 = swift_allocObject();
    *(void *)(v260 + 16) = partial apply for implicit closure #4 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
    *(void *)(v260 + 24) = v259;
    v261 = Logger.logObject.getter();
    os_log_type_t v262 = static os_log_type_t.fault.getter();
    uint64_t v263 = swift_allocObject();
    *(unsigned char *)(v263 + 16) = 34;
    uint64_t v264 = swift_allocObject();
    *(unsigned char *)(v264 + 16) = 8;
    uint64_t v265 = swift_allocObject();
    *(void *)(v265 + 16) = partial apply for specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
    *(void *)(v265 + 24) = v260;
    uint64_t v266 = swift_allocObject();
    *(void *)(v266 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(void *)(v266 + 24) = v265;
    uint64_t v267 = swift_allocObject();
    *(_OWORD *)(v267 + 16) = xmmword_100493CE0;
    *(void *)(v267 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
    *(void *)(v267 + 40) = v263;
    *(void *)(v267 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
    *(void *)(v267 + 56) = v264;
    *(void *)(v267 + 64) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v267 + 72) = v266;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v261, v262))
    {
      uint64_t v268 = swift_slowAlloc();
      v980 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v268 = 258;
      *(unsigned char *)(v268 + 2) = *(unsigned char *)(v263 + 16);
      swift_release();
      *(unsigned char *)(v268 + 3) = *(unsigned char *)(v264 + 16);
      uint64_t v269 = swift_release();
      uint64_t v270 = (*(uint64_t (**)(uint64_t))(v266 + 16))(v269);
      *(void *)(v268 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_1(v270, v271, (uint64_t *)&v980);
      swift_bridgeObjectRelease();
      swift_release();
      os_log_type_t v272 = v262;
      v273 = "Found duplicate sections in old items, falling back to reload data. Sections: %{public}s";
LABEL_64:
      _os_log_impl((void *)&_mh_execute_header, v261, v272, v273, (uint8_t *)v268, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_66:
      swift_release();
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v956);
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v938);
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v859);

      ((void (*)(void (**)(uint64_t, uint64_t, uint64_t), uint64_t))v960)(v258, v201);
      LOBYTE(v941->isa) = 1;
      goto LABEL_228;
    }
LABEL_65:
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_66;
  }
  uint64_t v200 = specialized Array.count.getter(v198);
  uint64_t v201 = v975;
  if ((void (**)(uint64_t, char *, uint64_t))v200 != v868)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v258 = v959;
    v963(v959, v962, v201);
    uint64_t v274 = swift_allocObject();
    *(void *)(v274 + 16) = v198;
    uint64_t v275 = swift_allocObject();
    *(void *)(v275 + 16) = partial apply for implicit closure #4 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
    *(void *)(v275 + 24) = v274;
    v261 = Logger.logObject.getter();
    os_log_type_t v276 = static os_log_type_t.fault.getter();
    uint64_t v277 = swift_allocObject();
    *(unsigned char *)(v277 + 16) = 34;
    uint64_t v278 = swift_allocObject();
    *(unsigned char *)(v278 + 16) = 8;
    uint64_t v279 = swift_allocObject();
    *(void *)(v279 + 16) = partial apply for specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
    *(void *)(v279 + 24) = v275;
    uint64_t v280 = swift_allocObject();
    *(void *)(v280 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(void *)(v280 + 24) = v279;
    uint64_t v281 = swift_allocObject();
    *(_OWORD *)(v281 + 16) = xmmword_100493CE0;
    *(void *)(v281 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
    *(void *)(v281 + 40) = v277;
    *(void *)(v281 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
    *(void *)(v281 + 56) = v278;
    *(void *)(v281 + 64) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v281 + 72) = v280;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v261, v276))
    {
      uint64_t v268 = swift_slowAlloc();
      v978[0] = swift_slowAlloc();
      *(_WORD *)uint64_t v268 = 258;
      *(unsigned char *)(v268 + 2) = *(unsigned char *)(v277 + 16);
      swift_release();
      *(unsigned char *)(v268 + 3) = *(unsigned char *)(v278 + 16);
      v980 = (uint8_t *)(v268 + 4);
      swift_release();
      partial apply for closure #1 in OSLogArguments.append(_:)(&v980);
      swift_release();
      os_log_type_t v272 = v276;
      v273 = "Found duplicate sections in new items, falling back to reload data. Sections: %{public}s";
      goto LABEL_64;
    }
    goto LABEL_65;
  }
  v977 = 0;
  v978[0] = v191;
  v980 = (uint8_t *)v198;
  __swift_instantiateConcreteTypeFromMangledName(&_sSaySSGMD_0);
  lazy protocol witness table accessor for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>((unint64_t *)&_sSaySSGSayxGSKsWL_0, &_sSaySSGMD_0);
  BidirectionalCollection<>.difference<A>(from:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v202 = specialized static Array._allocateUninitialized(_:)(0);
  unint64_t v203 = specialized Dictionary.init(dictionaryLiteral:)(v202);
  swift_bridgeObjectRelease();
  v986 = v203;
  v985 = &_swiftEmptySetSingleton;
  v204 = v940;
  v848 = swift_getAssociatedConformanceWitness();
  uint64_t v205 = type metadata accessor for OrderedSet();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  v984 = Dictionary.init(dictionaryLiteral:)();
  static Array._allocateUninitialized(_:)();
  v983[1] = Dictionary.init(dictionaryLiteral:)();
  uint64_t v206 = v974;
  specialized Sequence<>.sorted()();
  uint64_t v207 = v206;
  swift_bridgeObjectRelease();
  uint64_t v208 = specialized Array.count.getter(v207);
  v959 = (void (**)(uint64_t, uint64_t, uint64_t))v205;
  v864 = v208;
  v845[1] = v207;
  if (v208)
  {
    uint64_t v209 = 0;
    v867 = *(void *)(v947 + 16);
    unint64_t v210 = v207 + ((*(unsigned __int8 *)(v947 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v947 + 80));
    v861 = *(void *)(v947 + 72);
    v211 = (void (**)(char *, void, uint64_t, uint64_t))(v947 + 56);
    v863 = (unsigned int (**)(char *, uint64_t, uint64_t))(v947 + 48);
    v862 = (void (**)(uint64_t, char *, uint64_t))(v947 + 32);
    v868 = (void (**)(uint64_t, char *, uint64_t))(v947 + 16);
    v866 = (char *)(v947 + 8);
    v853 = v204 + 5;
    v847 = (void (**)(uint64_t))(v884 + 16);
    v852 = (void (**)(char *, uint64_t))(v877 + 8);
    v846 = (void (**)(uint64_t, char *))(v884 + 8);
    v850 = v204 + 4;
    v851 = (void (**)(char *, uint64_t))(v889 + 8);
    uint64_t v212 = v971;
    uint64_t v213 = v910;
    v214 = v948;
    v856 = (void (**)(void, void, void, void))(v947 + 56);
    ((void (*)(char *, unint64_t, uint64_t))v867)(v948, v210, v971);
    while (1)
    {
      if (__OFADD__(v209, 1)) {
        goto LABEL_315;
      }
      v860 = *v211;
      v860(v214, 0, 1, v212);
      if ((*v863)(v214, 1, v212) == 1) {
        goto LABEL_69;
      }
      v974 = v209 + 1;
      (*v862)(v213, v214, v212);
      if (IndexPath.section.getter() >= v939 && ((v953 & 1) != 0 || IndexPath.section.getter() <= (uint64_t)v890))
      {
        v215 = v903;
        ((void (*)(char *, uint64_t, uint64_t))v867)(v903, v213, v212);
        uint64_t v216 = v949;
        specialized Set._Variant.insert(_:)(v949, v215);
        v858 = *(void (**)(uint64_t, uint64_t))v866;
        v858(v216, v212);
        v978[0] = IndexPath.section.getter();
        Dictionary.subscript.getter();
        uint64_t v217 = v981;
        outlined consume of OrderedSet<A.Items.Element>?<A>((uint64_t)v980, v981);
        if (!v217)
        {
          uint64_t v218 = IndexPath.section.getter();
          static Array._allocateUninitialized(_:)();
          v980 = (uint8_t *)OrderedSet.init(arrayLiteral:)();
          v981 = v219;
          v978[0] = v218;
          type metadata accessor for Dictionary();
          Dictionary.subscript.setter();
          uint64_t v220 = IndexPath.section.getter();
          uint64_t v221 = IndexPath.item.getter();
          specialized Dictionary.subscript.setter(v221, 0, v220);
        }
        v978[0] = IndexPath.section.getter();
        Dictionary.subscript.getter();
        uint64_t v222 = v981;
        outlined consume of OrderedSet<A.Items.Element>?<A>((uint64_t)v980, v981);
        if (!v222)
        {
          uint64_t v223 = IndexPath.section.getter();
          static Array._allocateUninitialized(_:)();
          v980 = (uint8_t *)OrderedSet.init(arrayLiteral:)();
          v981 = v224;
          v978[0] = v223;
          type metadata accessor for Dictionary();
          Dictionary.subscript.setter();
        }
        if (__OFSUB__(IndexPath.section.getter(), v939)) {
          goto LABEL_323;
        }
        Array.subscript.getter();
        v978[0] = IndexPath.section.getter();
        Dictionary.subscript.getter();
        uint64_t v225 = v981;
        if (v981)
        {
          v855 = (void (*)(uint64_t, NSObject *))ContiguousArray.count.getter();
          swift_release();
          swift_release();
        }
        else
        {
          v855 = 0;
        }
        v983[0] = IndexPath.section.getter();
        v849 = (void (*)(uint8_t **, void))type metadata accessor for Dictionary();
        v226 = (void (*)(char *, uint64_t))Dictionary.subscript.modify();
        if (*(void *)(v227 + 8))
        {
          v854 = v226;
          v228 = v893;
          ((void (*)(uint64_t, NSObject *))v204[5].isa)(v958, v204);
          v979 = (unsigned char *)IndexPath.item.getter();
          uint64_t v229 = v899;
          v230 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
          uint64_t v231 = v902;
          v232 = v970;
          (*v847)(v902);
          v230(v978, 0);
          (*v852)(v228, v229);
          OrderedSet._append(_:)();
          (*v846)(v231, v232);
          v854((char *)&v980, 0);
        }
        else
        {
          v226((char *)&v980, 0);
        }
        v978[0] = IndexPath.section.getter();
        Dictionary.subscript.getter();
        if (v981)
        {
          uint64_t v233 = ContiguousArray.count.getter();
          uint64_t v213 = v910;
          swift_release();
          swift_release();
          uint64_t v212 = v971;
          v204 = v940;
          v211 = (void (**)(char *, void, uint64_t, uint64_t))v856;
          if (v225 && v855 == (void (*)(uint64_t, NSObject *))v233)
          {
LABEL_294:
            v825 = v212;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v826 = v870;
            v827 = v975;
            v963(v870, v962, v975);
            v828 = Logger.logObject.getter();
            v829 = static os_log_type_t.fault.getter();
            v830 = specialized static Array._allocateUninitialized(_:)(0);
            if (os_log_type_enabled(v828, v829))
            {
              v831 = (uint8_t *)swift_slowAlloc();
              v832 = v937;
              v833 = v831;
              v978[0] = 0;
              v983[0] = 0;
              *(_WORD *)v831 = 0;
              v980 = v831 + 2;
              specialized Sequence.forEach(_:)(v830, (uint64_t)&v980, (uint64_t)v978, (uint64_t)v983);
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v828, v829, "Found duplicate in old visible items, falling back to reload data.", v833, 2u);
              swift_slowDealloc();
              swift_release();
              outlined consume of (@escaping @callee_guaranteed () -> ())?(v956);
              outlined consume of (@escaping @callee_guaranteed () -> ())?(v938);
              outlined consume of (@escaping @callee_guaranteed () -> ())?(v859);

              ((void (*)(uint64_t, uint64_t))v960)(v826, v827);
              (*v851)(v957, v958);
              v858(v910, v825);
              (*(void (**)(char *, uint64_t))(v832 + 8))(v892, v918);
LABEL_308:
              LOBYTE(v941->isa) = 1;
              goto LABEL_227;
            }
            swift_release();
            swift_bridgeObjectRelease();
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v956);
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v938);
            outlined consume of (@escaping @callee_guaranteed () -> ())?(v859);

            ((void (*)(uint64_t, uint64_t))v960)(v826, v827);
            (*v851)(v957, v958);
            v835 = v910;
            v836 = v825;
LABEL_307:
            v858(v835, v836);
            (*(void (**)(char *, uint64_t))(v937 + 8))(v892, v918);
            goto LABEL_308;
          }
        }
        else
        {
          uint64_t v212 = v971;
          v204 = v940;
          v211 = (void (**)(char *, void, uint64_t, uint64_t))v856;
          if (!v225) {
            goto LABEL_294;
          }
        }
        v234 = v957;
        uint64_t v235 = ((uint64_t (*)(uint64_t, NSObject *))v204[4].isa)(v958, v204);
        if (*(void *)(v988 + 16)
          && (_ss22__RawDictionaryStorageC4findys10_HashTableV6BucketV6bucket_Sb5foundtxSHRzlFSS_Tg5_0(v235, v236),
              (v237 & 1) != 0))
        {
          swift_bridgeObjectRelease();
          uint64_t v238 = v958;
          Array.subscript.getter();
          uint64_t v239 = IndexPath.item.getter();
          uint64_t v240 = v213;
          v241 = v893;
          v855 = (void (*)(uint64_t, NSObject *))v204[5].isa;
          v855(v238, v204);
          uint64_t v242 = v899;
          uint64_t v243 = dispatch thunk of Collection.count.getter();
          v244 = *v852;
          (*v852)(v241, v242);
          if (v239 < v243)
          {
            v854 = v244;
            v978[0] = IndexPath.section.getter();
            Dictionary.subscript.getter();
            uint64_t v245 = v981;
            if (v981)
            {
              v845[0] = ContiguousArray.count.getter();
              swift_release();
              swift_release();
            }
            else
            {
              v845[0] = 0;
            }
            v983[0] = IndexPath.section.getter();
            v246 = (void (*)(void, void))Dictionary.subscript.modify();
            if (*(void *)(v247 + 8))
            {
              v248 = v893;
              v849 = (void (*)(uint8_t **, void))v246;
              v855(v958, v204);
              v979 = (unsigned char *)IndexPath.item.getter();
              uint64_t v249 = v899;
              v250 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
              v251 = *v847;
              uint64_t v252 = v902;
              v855 = (void (*)(uint64_t, NSObject *))v245;
              v253 = v970;
              v251(v902);
              v250(v978, 0);
              v854(v248, v249);
              OrderedSet._append(_:)();
              v254 = v253;
              uint64_t v245 = (uint64_t)v855;
              (*v846)(v252, v254);
              v849(&v980, 0);
            }
            else
            {
              v246(&v980, 0);
            }
            v978[0] = IndexPath.section.getter();
            Dictionary.subscript.getter();
            if (v981)
            {
              uint64_t v255 = ContiguousArray.count.getter();
              swift_release();
              swift_release();
              uint64_t v240 = v910;
              if (v245 && v845[0] == v255)
              {
LABEL_303:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v837 = v869;
                v838 = v975;
                v963(v869, v962, v975);
                v839 = Logger.logObject.getter();
                v840 = static os_log_type_t.fault.getter();
                v841 = specialized static Array._allocateUninitialized(_:)(0);
                if (os_log_type_enabled(v839, v840))
                {
                  v842 = (uint8_t *)swift_slowAlloc();
                  v978[0] = 0;
                  v983[0] = 0;
                  *(_WORD *)v842 = 0;
                  v980 = v842 + 2;
                  specialized Sequence.forEach(_:)(v841, (uint64_t)&v980, (uint64_t)v978, (uint64_t)v983);
                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v839, v840, "Found duplicate in new visible items, falling back to reload data.", v842, 2u);
                  swift_slowDealloc();
                  swift_release();
                }
                else
                {
                  swift_release();
                  swift_bridgeObjectRelease();
                }
                outlined consume of (@escaping @callee_guaranteed () -> ())?(v956);
                outlined consume of (@escaping @callee_guaranteed () -> ())?(v938);
                outlined consume of (@escaping @callee_guaranteed () -> ())?(v859);

                ((void (*)(void (**)(char *, char *, uint64_t), uint64_t))v960)(v837, v838);
                v843 = *v851;
                v844 = v958;
                (*v851)(v901, v958);
                v843(v957, v844);
                v835 = v910;
                v836 = v971;
                goto LABEL_307;
              }
            }
            else
            {
              uint64_t v240 = v910;
              if (!v245) {
                goto LABEL_303;
              }
            }
          }
          v256 = *v851;
          uint64_t v257 = v958;
          (*v851)(v901, v958);
          v256(v957, v257);
          uint64_t v212 = v971;
          v858(v240, v971);
          uint64_t v213 = v240;
          v214 = v948;
          v211 = (void (**)(char *, void, uint64_t, uint64_t))v856;
        }
        else
        {
          swift_bridgeObjectRelease();
          (*v851)(v234, v958);
          v858(v213, v212);
          v214 = v948;
        }
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))v866)(v213, v212);
      }
      ++v209;
      v210 += v861;
      if (v974 == v864) {
        break;
      }
      ((void (*)(char *, unint64_t, uint64_t))v867)(v214, v210, v212);
    }
    v860(v214, 1, 1, v212);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v947 + 56))(v948, 1, 1, v971);
  }
LABEL_69:
  swift_bridgeObjectRelease();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  uint64_t v282 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v283 = *(void *)(v984 + 64);
  v902 = v984 + 64;
  v983[0] = v282;
  uint64_t v284 = 1 << *(unsigned char *)(v984 + 32);
  uint64_t v285 = -1;
  if (v284 < 64) {
    uint64_t v285 = ~(-1 << v284);
  }
  unint64_t v286 = v285 & v283;
  *(void *)&v910 = (unint64_t)(v284 + 63) >> 6;
  v903 = (char *)(v909 + 56);
  v948 = (char *)v984;
  swift_bridgeObjectRetain();
  uint64_t v287 = 0;
  uint64_t v288 = v975;
  uint64_t v289 = v937;
  uint64_t v290 = v972;
  while (1)
  {
    if (v286)
    {
      unint64_t v291 = __clz(__rbit64(v286));
      v286 &= v286 - 1;
      v974 = v287;
      unint64_t v292 = v291 | (v287 << 6);
      goto LABEL_87;
    }
    uint64_t v293 = v287 + 1;
    uint64_t v294 = v956;
    if (__OFADD__(v287, 1))
    {
      __break(1u);
LABEL_310:
      __break(1u);
LABEL_311:
      __break(1u);
LABEL_312:
      __break(1u);
LABEL_313:
      __break(1u);
      goto LABEL_314;
    }
    uint64_t v295 = v288;
    v296 = v977;
    if (v293 >= (uint64_t)v910) {
      goto LABEL_89;
    }
    unint64_t v297 = *(void *)(v902 + 8 * v293);
    uint64_t v298 = v287 + 1;
    if (!v297)
    {
      uint64_t v298 = v287 + 2;
      if (v287 + 2 >= (uint64_t)v910) {
        goto LABEL_89;
      }
      unint64_t v297 = *(void *)(v902 + 8 * v298);
      if (!v297) {
        break;
      }
    }
LABEL_86:
    unint64_t v286 = (v297 - 1) & v297;
    v974 = v298;
    unint64_t v292 = __clz(__rbit64(v297)) + (v298 << 6);
LABEL_87:
    uint64_t v300 = *(void *)(*((void *)v948 + 6) + 8 * v292);
    v301 = (uint64_t *)(*((void *)v948 + 7) + 16 * v292);
    uint64_t v303 = *v301;
    uint64_t v302 = v301[1];
    v978[0] = v300;
    swift_retain();
    swift_retain();
    uint64_t v304 = Dictionary.subscript.getter();
    uint64_t v305 = v981;
    if (v981)
    {
      v953 = (uint64_t)v845;
      uint64_t v306 = (uint64_t)v980;
      v978[0] = v303;
      v978[1] = v302;
      __chkstk_darwin(v304);
      v307 = v940;
      v845[-12] = v958;
      v845[-11] = v307;
      v308 = v888;
      v845[-10] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.DiffableSection.Items.Sequence.Element, @in_guaranteed A.DiffableSection.Items.Sequence.Element) -> (@out Bool);
      v845[-9] = v308;
      uint64_t v309 = v955;
      v845[-8] = v956;
      v845[-7] = v309;
      v845[-6] = v306;
      v845[-5] = v305;
      v845[-4] = &v986;
      v845[-3] = v300;
      v845[-2] = v941;
      v957 = (char *)v286;
      swift_getWitnessTable();
      uint64_t v288 = v975;
      BidirectionalCollection.difference<A>(from:by:)();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))v903)(v290, 0, 1, v973);
      v980 = (uint8_t *)v300;
      unint64_t v286 = (unint64_t)v957;
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
    uint64_t v289 = v937;
    uint64_t v287 = v974;
  }
  uint64_t v299 = v287 + 3;
  if (v287 + 3 < (uint64_t)v910)
  {
    unint64_t v297 = *(void *)(v902 + 8 * v299);
    if (!v297)
    {
      while (1)
      {
        uint64_t v298 = v299 + 1;
        if (__OFADD__(v299, 1)) {
          break;
        }
        if (v298 >= (uint64_t)v910) {
          goto LABEL_89;
        }
        unint64_t v297 = *(void *)(v902 + 8 * v298);
        ++v299;
        if (v297) {
          goto LABEL_86;
        }
      }
LABEL_314:
      __break(1u);
LABEL_315:
      __break(1u);
LABEL_316:
      __break(1u);
LABEL_317:
      __break(1u);
LABEL_318:
      __break(1u);
LABEL_319:
      __break(1u);
LABEL_320:
      __break(1u);
LABEL_321:
      __break(1u);
LABEL_322:
      __break(1u);
LABEL_323:
      __break(1u);
LABEL_324:
      __break(1u);
LABEL_325:
      __break(1u);
LABEL_326:
      __break(1u);
LABEL_327:
      __break(1u);
LABEL_328:
      __break(1u);
LABEL_329:
      __break(1u);
LABEL_330:
      __break(1u);
LABEL_331:
      __break(1u);
      goto LABEL_332;
    }
    uint64_t v298 = v287 + 3;
    goto LABEL_86;
  }
LABEL_89:
  swift_release();
  v310 = *(void (**)(os_log_t, char *, uint64_t))(v289 + 16);
  os_log_t v311 = v881;
  v948 = (char *)(v289 + 16);
  *(void *)&v910 = v310;
  v310(v881, v892, v918);
  uint64_t v312 = lazy protocol witness table accessor for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>(&lazy protocol witness table cache variable for type CollectionDifference<String> and conformance CollectionDifference<A>, &demangling cache variable for type metadata for CollectionDifference<String>);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v313 = v882;
  *(Class *)((char *)&v311->isa + *(int *)(v882 + 36)) = (Class)v980;
  v314 = v950;
  outlined init with take of PresentationSource?((uint64_t)v311, (uint64_t)v950, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<String>>);
  v315 = (uint8_t **)((char *)v314 + *(int *)(v313 + 36));
  v316 = *v315;
  dispatch thunk of Collection.endIndex.getter();
  if (v316 != v980)
  {
    v903 = (char *)(v937 + 8);
    v890 = v951 + 1;
    v870 = xmmword_100493CE0;
    uint64_t v538 = v918;
    v902 = v312;
    v901 = (char *)v315;
    do
    {
      v542 = (void (*)(uint8_t **, void))dispatch thunk of Collection.subscript.read();
      v544 = (void (**)(uint64_t, uint64_t, uint64_t))*v543;
      uint64_t v545 = (uint64_t)v543[2];
      uint64_t v546 = (uint64_t)v543[3];
      int v547 = *((unsigned __int8 *)v543 + 32);
      int v548 = *((unsigned __int8 *)v543 + 33);
      v957 = v543[1];
      v953 = v545;
      v974 = v546;
      MPCPlaybackEngine.Configuration.options.getter();
      v542(&v980, 0);
      v549 = v952;
      ((void (*)(char *, NSObject *, uint64_t))v910)(v952, v314, v538);
      dispatch thunk of Collection.formIndex(after:)();
      (*(void (**)(char *, uint64_t))v903)(v549, v538);
      uint64_t v550 = (uint64_t)v544 + v939;
      BOOL v551 = __OFADD__(v544, v939);
      LODWORD(v972) = v547;
      v959 = v544;
      if (v548)
      {
        if (v551) {
          goto LABEL_316;
        }
        if ((v547 & 1) == 0)
        {
          LODWORD(v882) = v548;
          v977 = v296;
          v552 = (void (**)(char *, char *, uint64_t))(v974 + v939);
          if (__OFADD__(v974, v939)) {
            goto LABEL_321;
          }
          v963(v944, v962, v295);
          uint64_t v553 = swift_allocObject();
          *(void *)(v553 + 16) = v550;
          uint64_t v554 = swift_allocObject();
          v869 = v552;
          *(void *)(v554 + 16) = v552;
          v881 = (os_log_t)Logger.logObject.getter();
          int v555 = static os_log_type_t.default.getter();
          uint64_t v556 = swift_allocObject();
          *(unsigned char *)(v556 + 16) = 2;
          uint64_t v557 = swift_allocObject();
          *(unsigned char *)(v557 + 16) = 8;
          uint64_t v558 = swift_allocObject();
          *(void *)(v558 + 16) = partial apply for implicit closure #11 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
          *(void *)(v558 + 24) = v553;
          uint64_t v559 = swift_allocObject();
          *(void *)(v559 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
          *(void *)(v559 + 24) = v558;
          uint64_t v560 = swift_allocObject();
          *(unsigned char *)(v560 + 16) = 2;
          uint64_t v561 = swift_allocObject();
          *(unsigned char *)(v561 + 16) = 8;
          uint64_t v562 = swift_allocObject();
          *(void *)(v562 + 16) = partial apply for implicit closure #11 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
          *(void *)(v562 + 24) = v554;
          uint64_t v563 = swift_allocObject();
          *(void *)(v563 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
          *(void *)(v563 + 24) = v562;
          uint64_t v564 = swift_allocObject();
          *(_OWORD *)(v564 + 16) = v934;
          *(void *)(v564 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
          *(void *)(v564 + 40) = v556;
          *(void *)(v564 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
          *(void *)(v564 + 56) = v557;
          *(void *)(v564 + 64) = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
          *(void *)(v564 + 72) = v559;
          *(void *)(v564 + 80) = closure #1 in OSLogArguments.append(_:)partial apply;
          *(void *)(v564 + 88) = v560;
          *(void *)(v564 + 96) = closure #1 in OSLogArguments.append(_:)partial apply;
          *(void *)(v564 + 104) = v561;
          *(void *)(v564 + 112) = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
          *(void *)(v564 + 120) = v563;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          LODWORD(v868) = v555;
          if (os_log_type_enabled(v881, (os_log_type_t)v555))
          {
            uint64_t v565 = swift_slowAlloc();
            *(_WORD *)uint64_t v565 = 512;
            *(unsigned char *)(v565 + 2) = *(unsigned char *)(v556 + 16);
            if (v977) {
              goto LABEL_336;
            }
            uint64_t v566 = v565;
            swift_release();
            *(unsigned char *)(v566 + 3) = *(unsigned char *)(v557 + 16);
            uint64_t v567 = swift_release();
            (*(void (**)(uint8_t **__return_ptr, uint64_t))(v559 + 16))(&v980, v567);
            *(void *)(v566 + 4) = v980;
            swift_release();
            *(unsigned char *)(v566 + 12) = *(unsigned char *)(v560 + 16);
            v296 = 0;
            swift_release();
            *(unsigned char *)(v566 + 13) = *(unsigned char *)(v561 + 16);
            v540 = (uint8_t **)v901;
            uint64_t v568 = swift_release();
            (*(void (**)(uint8_t **__return_ptr, uint64_t))(v563 + 16))(&v980, v568);
            *(void *)(v566 + 14) = v980;
            swift_release();
            os_log_t v569 = v881;
            _os_log_impl((void *)&_mh_execute_header, v881, (os_log_type_t)v868, "[Remove] Moving section from %{public}ld to %{public}ld", (uint8_t *)v566, 0x16u);
            swift_slowDealloc();
            uint64_t v294 = v956;
          }
          else
          {
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            uint64_t v294 = v956;
            v296 = v977;
            v540 = (uint8_t **)v901;
            os_log_t v569 = v881;
          }

          uint64_t v295 = v975;
          ((void (*)(void, uint64_t))v960)(v944, v975);
          uint64_t v612 = v550;
          uint64_t v613 = (uint64_t)v869;
LABEL_223:
          specialized Array.append(_:)(v612, v613);
          v314 = v950;
          goto LABEL_194;
        }
        v963(v946, v962, v295);
        uint64_t v588 = swift_allocObject();
        Swift::Int v589 = v550;
        *(void *)(v588 + 16) = v550;
        v590 = Logger.logObject.getter();
        os_log_type_t v591 = static os_log_type_t.default.getter();
        uint64_t v592 = swift_allocObject();
        *(unsigned char *)(v592 + 16) = 2;
        uint64_t v593 = swift_allocObject();
        *(unsigned char *)(v593 + 16) = 8;
        uint64_t v594 = swift_allocObject();
        *(void *)(v594 + 16) = partial apply for implicit closure #11 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
        *(void *)(v594 + 24) = v588;
        uint64_t v595 = swift_allocObject();
        *(void *)(v595 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
        *(void *)(v595 + 24) = v594;
        uint64_t v596 = swift_allocObject();
        *(_OWORD *)(v596 + 16) = v870;
        *(void *)(v596 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v596 + 40) = v592;
        *(void *)(v596 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v596 + 56) = v593;
        *(void *)(v596 + 64) = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
        *(void *)(v596 + 72) = v595;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v590, v591))
        {
          uint64_t v597 = swift_slowAlloc();
          *(_WORD *)uint64_t v597 = 256;
          *(unsigned char *)(v597 + 2) = *(unsigned char *)(v592 + 16);
          if (v296) {
            goto LABEL_333;
          }
          uint64_t v598 = v597;
          swift_release();
          *(unsigned char *)(v598 + 3) = *(unsigned char *)(v593 + 16);
          uint64_t v599 = swift_release();
          (*(void (**)(uint8_t **__return_ptr, uint64_t))(v595 + 16))(&v980, v599);
          *(void *)(v598 + 4) = v980;
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v590, v591, "Deleting section %{public}ld", (uint8_t *)v598, 0xCu);
          swift_slowDealloc();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }

        uint64_t v295 = v975;
        ((void (*)(void (**)(char *), uint64_t))v960)(v946, v975);
        Swift::Int v539 = v589;
      }
      else
      {
        if (v551) {
          goto LABEL_317;
        }
        if ((v547 & 1) == 0)
        {
          LODWORD(v882) = v548;
          v977 = v296;
          v570 = (void (**)(char *, char *, uint64_t))(v974 + v939);
          if (__OFADD__(v974, v939)) {
            goto LABEL_322;
          }
          v963(v927, v962, v295);
          uint64_t v571 = swift_allocObject();
          v869 = v570;
          *(void *)(v571 + 16) = v570;
          uint64_t v572 = swift_allocObject();
          *(void *)(v572 + 16) = v550;
          v881 = (os_log_t)Logger.logObject.getter();
          int v573 = static os_log_type_t.default.getter();
          uint64_t v574 = swift_allocObject();
          *(unsigned char *)(v574 + 16) = 2;
          uint64_t v575 = swift_allocObject();
          *(unsigned char *)(v575 + 16) = 8;
          uint64_t v576 = swift_allocObject();
          *(void *)(v576 + 16) = partial apply for implicit closure #11 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
          *(void *)(v576 + 24) = v571;
          uint64_t v577 = swift_allocObject();
          *(void *)(v577 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
          *(void *)(v577 + 24) = v576;
          uint64_t v578 = swift_allocObject();
          *(unsigned char *)(v578 + 16) = 2;
          uint64_t v579 = swift_allocObject();
          *(unsigned char *)(v579 + 16) = 8;
          uint64_t v580 = swift_allocObject();
          *(void *)(v580 + 16) = partial apply for implicit closure #11 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
          *(void *)(v580 + 24) = v572;
          uint64_t v581 = swift_allocObject();
          *(void *)(v581 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
          *(void *)(v581 + 24) = v580;
          uint64_t v582 = swift_allocObject();
          *(_OWORD *)(v582 + 16) = v934;
          *(void *)(v582 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
          *(void *)(v582 + 40) = v574;
          *(void *)(v582 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
          *(void *)(v582 + 56) = v575;
          *(void *)(v582 + 64) = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
          *(void *)(v582 + 72) = v577;
          *(void *)(v582 + 80) = closure #1 in OSLogArguments.append(_:)partial apply;
          *(void *)(v582 + 88) = v578;
          *(void *)(v582 + 96) = closure #1 in OSLogArguments.append(_:)partial apply;
          *(void *)(v582 + 104) = v579;
          *(void *)(v582 + 112) = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
          *(void *)(v582 + 120) = v581;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          LODWORD(v868) = v573;
          if (os_log_type_enabled(v881, (os_log_type_t)v573))
          {
            uint64_t v583 = swift_slowAlloc();
            *(_WORD *)uint64_t v583 = 512;
            *(unsigned char *)(v583 + 2) = *(unsigned char *)(v574 + 16);
            v296 = v977;
            if (v977) {
              goto LABEL_333;
            }
            uint64_t v584 = v583;
            swift_release();
            *(unsigned char *)(v584 + 3) = *(unsigned char *)(v575 + 16);
            uint64_t v585 = swift_release();
            (*(void (**)(uint8_t **__return_ptr, uint64_t))(v577 + 16))(&v980, v585);
            *(void *)(v584 + 4) = v980;
            swift_release();
            *(unsigned char *)(v584 + 12) = *(unsigned char *)(v578 + 16);
            swift_release();
            *(unsigned char *)(v584 + 13) = *(unsigned char *)(v579 + 16);
            v540 = (uint8_t **)v901;
            uint64_t v586 = swift_release();
            (*(void (**)(uint8_t **__return_ptr, uint64_t))(v581 + 16))(&v980, v586);
            *(void *)(v584 + 14) = v980;
            swift_release();
            os_log_t v587 = v881;
            _os_log_impl((void *)&_mh_execute_header, v881, (os_log_type_t)v868, "[Insert] Moving section from %{public}ld to %{public}ld", (uint8_t *)v584, 0x16u);
            swift_slowDealloc();
            uint64_t v294 = v956;
          }
          else
          {
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            uint64_t v294 = v956;
            v296 = v977;
            v540 = (uint8_t **)v901;
            os_log_t v587 = v881;
          }

          uint64_t v295 = v975;
          ((void (*)(void, uint64_t))v960)(v927, v975);
          uint64_t v612 = (uint64_t)v869;
          uint64_t v613 = v550;
          goto LABEL_223;
        }
        v963(v945, v962, v295);
        uint64_t v600 = swift_allocObject();
        Swift::Int v601 = v550;
        *(void *)(v600 + 16) = v550;
        v602 = Logger.logObject.getter();
        os_log_type_t v603 = static os_log_type_t.default.getter();
        uint64_t v604 = swift_allocObject();
        *(unsigned char *)(v604 + 16) = 2;
        uint64_t v605 = swift_allocObject();
        *(unsigned char *)(v605 + 16) = 8;
        uint64_t v606 = swift_allocObject();
        *(void *)(v606 + 16) = partial apply for implicit closure #11 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
        *(void *)(v606 + 24) = v600;
        uint64_t v607 = swift_allocObject();
        *(void *)(v607 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
        *(void *)(v607 + 24) = v606;
        uint64_t v608 = swift_allocObject();
        *(_OWORD *)(v608 + 16) = v870;
        *(void *)(v608 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v608 + 40) = v604;
        *(void *)(v608 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v608 + 56) = v605;
        *(void *)(v608 + 64) = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
        *(void *)(v608 + 72) = v607;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v602, v603))
        {
          uint64_t v609 = swift_slowAlloc();
          *(_WORD *)uint64_t v609 = 256;
          *(unsigned char *)(v609 + 2) = *(unsigned char *)(v604 + 16);
          if (v296) {
            goto LABEL_333;
          }
          uint64_t v610 = v609;
          swift_release();
          *(unsigned char *)(v610 + 3) = *(unsigned char *)(v605 + 16);
          uint64_t v611 = swift_release();
          (*(void (**)(uint8_t **__return_ptr, uint64_t))(v607 + 16))(&v980, v611);
          *(void *)(v610 + 4) = v980;
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v602, v603, "Inserting section %{public}ld", (uint8_t *)v610, 0xCu);
          swift_slowDealloc();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }

        uint64_t v295 = v975;
        ((void (*)(void, uint64_t))v960)(v945, v975);
        Swift::Int v539 = v601;
      }
      IndexSet.insert(_:)(v539);
      uint64_t v294 = v956;
      v540 = (uint8_t **)v901;
LABEL_194:
      outlined consume of CollectionDifference<String>.Change();
      v541 = *v540;
      uint64_t v538 = v918;
      dispatch thunk of Collection.endIndex.getter();
    }
    while (v541 != v980);
  }
  outlined destroy of IndexingIterator<CollectionDifference<String>>((uint64_t)v314);
  uint64_t v317 = swift_allocObject();
  uint64_t v318 = specialized static Array._allocateUninitialized(_:)(0);
  unint64_t v319 = specialized Dictionary.init(dictionaryLiteral:)(v318);
  swift_bridgeObjectRelease();
  v862 = (void (**)(uint64_t, char *, uint64_t))v317;
  *(void *)(v317 + 16) = v319;
  v903 = (char *)(v317 + 16);
  uint64_t v320 = *(void *)(v983[0] + 64);
  v863 = (unsigned int (**)(char *, uint64_t, uint64_t))(v983[0] + 64);
  uint64_t v321 = 1 << *(unsigned char *)(v983[0] + 32);
  uint64_t v322 = -1;
  if (v321 < 64) {
    uint64_t v322 = ~(-1 << v321);
  }
  unint64_t v323 = v322 & v320;
  v324 = TupleTypeMetadata2;
  *(void *)&v870 = TupleTypeMetadata2 - 8;
  v957 = (char *)(v909 + 16);
  v878 += 4;
  v869 = (void (**)(char *, char *, uint64_t))(v909 + 32);
  v881 = v940 + 4;
  v868 = (void (**)(uint64_t, char *, uint64_t))(v879 + 4);
  v946 = (void (**)(char *))(v880 + 2);
  v953 = v909 + 8;
  v945 = (void (**)(uint8_t **__return_ptr, uint64_t))(v880 + 4);
  v950 = v951 + 1;
  v944 = (void (**)(uint8_t **__return_ptr, uint64_t))(v884 + 8);
  v959 = (void (**)(uint64_t, uint64_t, uint64_t))(v947 + 16);
  v926 = (void *)(v947 + 32);
  v927 = (void (**)(char *, uint64_t))(v947 + 8);
  ++v879;
  v880 = (void (**)(char *, uint64_t))(v889 + 8);
  v864 = (unint64_t)(v321 + 63) >> 6;
  v861 = v864 - 1;
  v867 = v983[0];
  swift_bridgeObjectRetain();
  uint64_t v325 = 0;
  v866 = (char *)&type metadata for Any + 8;
  v910 = xmmword_100493CE0;
  uint64_t v326 = v968;
  while (2)
  {
    v327 = v908;
    if (v323)
    {
      unint64_t v328 = __clz(__rbit64(v323));
      uint64_t v329 = (v323 - 1) & v323;
      v882 = v325;
      unint64_t v330 = v328 | (v325 << 6);
      goto LABEL_96;
    }
    int64_t v333 = v325 + 1;
    if (__OFADD__(v325, 1)) {
      goto LABEL_324;
    }
    if (v333 >= v864)
    {
      v882 = v325;
      goto LABEL_102;
    }
    unint64_t v334 = (unint64_t)v863[v333];
    if (!v334)
    {
      uint64_t v530 = v325 + 2;
      if (v325 + 2 >= v864)
      {
        v884 = 0;
        uint64_t v332 = 1;
LABEL_178:
        v882 = v333;
        goto LABEL_103;
      }
      unint64_t v334 = (unint64_t)v863[v530];
      if (v334)
      {
        int64_t v333 = v325 + 2;
        goto LABEL_100;
      }
      int64_t v531 = v325 + 3;
      if (v531 < v864)
      {
        unint64_t v334 = (unint64_t)v863[v531];
        if (v334)
        {
          int64_t v333 = v531;
          goto LABEL_100;
        }
        while (1)
        {
          int64_t v333 = v531 + 1;
          if (__OFADD__(v531, 1)) {
            goto LABEL_330;
          }
          if (v333 >= v864) {
            break;
          }
          unint64_t v334 = (unint64_t)v863[v333];
          ++v531;
          if (v334) {
            goto LABEL_100;
          }
        }
        v884 = 0;
        uint64_t v332 = 1;
        int64_t v333 = v861;
        goto LABEL_178;
      }
      v882 = v530;
LABEL_102:
      v884 = 0;
      uint64_t v332 = 1;
      goto LABEL_103;
    }
LABEL_100:
    uint64_t v329 = (v334 - 1) & v334;
    unint64_t v330 = __clz(__rbit64(v334)) + (v333 << 6);
    v882 = v333;
LABEL_96:
    v884 = v329;
    uint64_t v331 = *(void *)(v867 + 56);
    *(void *)v908 = *(void *)(*(void *)(v867 + 48) + 8 * v330);
    (*(void (**)(char *, unint64_t, uint64_t))(v909 + 16))(&v327[*((int *)v324 + 12)], v331 + *(void *)(v909 + 72) * v330, v973);
    uint64_t v332 = 0;
LABEL_103:
    uint64_t v335 = *((void *)v324 - 1);
    (*(void (**)(char *, uint64_t, uint64_t, char *))(v335 + 56))(v327, v332, 1, v324);
    v336 = v905;
    (*v878)((char *)v905, v327, v906);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, char *))(v335 + 48))(v336, 1, v324) == 1)
    {
      swift_release();
      v615 = 0;
      v922 = (uint64_t)&v940[5];
      v616 = (char *)v940[4].isa;
      v617 = (char **)(v877 + 8);
      v923 = (char *)(v889 + 16);
      v924 = (char *)(v889 + 32);
      uint64_t v618 = v857 & ~(v857 >> 63);
      v921 = xmmword_1004A3B10;
      TupleTypeMetadata2 = (char *)&type metadata for Any + 8;
      uint64_t v619 = v937;
      v920 = (char **)(v877 + 8);
      v913 = v616;
      v912 = v618;
      while (1)
      {
        if (v615 == (char *)v618) {
          goto LABEL_326;
        }
        uint64_t v621 = v958;
        Array.subscript.getter();
        uint64_t v622 = ((uint64_t (*)(uint64_t, NSObject *))v616)(v621, v940);
        unint64_t v624 = v988;
        if (*(void *)(v988 + 16))
        {
          uint64_t v625 = _ss22__RawDictionaryStorageC4findys10_HashTableV6BucketV6bucket_Sb5foundtxSHRzlFSS_Tg5_0(v622, v623);
          if (v626) {
            break;
          }
        }
        swift_bridgeObjectRelease();
        (*v880)(v898, v958);
        uint64_t v620 = v938;
LABEL_231:
        if (++v615 == (char *)v857)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v294);
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v620);
          outlined consume of (@escaping @callee_guaranteed () -> ())?(v859);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v619 + 8))(v892, v918);
          goto LABEL_226;
        }
      }
      uint64_t v627 = *(void *)(*(void *)(v624 + 56) + 8 * v625);
      swift_bridgeObjectRelease();
      v628 = v940;
      v629 = (void (*)(uint64_t, NSObject *))v940[5].isa;
      uint64_t v630 = v958;
      v629(v958, v940);
      v976 = (uint64_t *)v627;
      Array.subscript.getter();
      v631 = v893;
      v629(v630, v628);
      uint64_t v632 = v899;
      uint64_t v633 = dispatch thunk of Collection.count.getter();
      v634 = *v617;
      ((void (*)(char *, uint64_t))*v617)(v631, v632);
      uint64_t v635 = dispatch thunk of Collection.count.getter();
      v968 = v633;
      uint64_t v636 = v635 - v633;
      if (__OFSUB__(v635, v633)) {
        goto LABEL_327;
      }
      v637 = v898;
      uint64_t v638 = v975;
      if (v636 < 0)
      {
        BOOL v639 = __OFSUB__(0, v636);
        uint64_t v636 = v633 - v635;
        if (v639) {
          goto LABEL_331;
        }
      }
      v930 = v635;
      v640 = v903;
      swift_beginAccess();
      uint64_t v641 = *(void *)v640;
      if (*(void *)(v641 + 16)
        && (unint64_t v642 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v976), (v643 & 1) != 0))
      {
        uint64_t v644 = *(void *)(*(void *)(v641 + 56) + 8 * v642);
      }
      else
      {
        uint64_t v644 = 0;
      }
      v928 = (void (*)(char *, uint64_t))v634;
      v977 = v296;
      swift_endAccess();
      v973 = v636 + v644;
      v974 = v636;
      if (__OFADD__(v636, v644)) {
        goto LABEL_328;
      }
      v967 = dispatch thunk of Collection.count.getter();
      v963(v887, v962, v638);
      WitnessTable = (void *)swift_allocObject();
      v931 = v615;
      WitnessTable[2] = v615;
      uint64_t v645 = v889;
      v646 = *(void (**)(char *, char *, uint64_t))(v889 + 16);
      v647 = v874;
      uint64_t v648 = v958;
      v646(v874, v637, v958);
      uint64_t v649 = *(unsigned __int8 *)(v645 + 80);
      uint64_t v650 = (v649 + 32) & ~v649;
      v651 = (char *)(v650 + v872);
      v652 = (v649 | 7);
      uint64_t v653 = swift_allocObject();
      v970 = (char *)v653;
      v654 = v940;
      *(void *)(v653 + 16) = v648;
      *(void *)(v653 + 24) = v654;
      v655 = *(void (**)(uint64_t, char *, uint64_t))(v645 + 32);
      v655(v653 + v650, v647, v648);
      v972 = swift_allocObject();
      *(void *)(v972 + 16) = v976;
      v917 = (char *)v646;
      v646(v647, v885, v648);
      v916 = v651;
      v915 = v652;
      uint64_t v656 = swift_allocObject();
      *(void *)(v656 + 16) = v648;
      *(void *)(v656 + 24) = v654;
      v919 = (char *)v650;
      v914 = (uint64_t)v655;
      v655(v656 + v650, v647, v648);
      uint64_t v657 = swift_allocObject();
      *(void *)(v657 + 16) = v974;
      uint64_t v658 = swift_allocObject();
      *(void *)(v658 + 16) = v973;
      uint64_t v659 = swift_allocObject();
      uint64_t v660 = (uint64_t)v976;
      *(void *)(v659 + 16) = v862;
      *(void *)(v659 + 24) = v660;
      swift_retain();
      v941 = (os_log_t)Logger.logObject.getter();
      LODWORD(v934) = static os_log_type_t.default.getter();
      v946 = (void (**)(char *))swift_allocObject();
      *((unsigned char *)v946 + 16) = 2;
      uint64_t v661 = swift_allocObject();
      *(unsigned char *)(v661 + 16) = 8;
      uint64_t v662 = swift_allocObject();
      v663 = WitnessTable;
      *(void *)(v662 + 16) = partial apply for implicit closure #11 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
      *(void *)(v662 + 24) = v663;
      uint64_t v664 = swift_allocObject();
      *(void *)(v664 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
      *(void *)(v664 + 24) = v662;
      v942 = (char *)swift_allocObject();
      v942[16] = 34;
      v965 = swift_allocObject();
      *(unsigned char *)(v965 + 16) = 8;
      uint64_t v665 = swift_allocObject();
      v666 = v970;
      *(void *)(v665 + 16) = partial apply for implicit closure #26 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
      *(void *)(v665 + 24) = v666;
      uint64_t v667 = swift_allocObject();
      *(void *)(v667 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      *(void *)(v667 + 24) = v665;
      v948 = (char *)swift_allocObject();
      v948[16] = 2;
      v951 = swift_allocObject();
      LOBYTE(v951[2].isa) = 8;
      uint64_t v668 = swift_allocObject();
      uint64_t v669 = v972;
      *(void *)(v668 + 16) = partial apply for implicit closure #11 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
      *(void *)(v668 + 24) = v669;
      uint64_t v670 = swift_allocObject();
      v945 = (void (**)(uint8_t **__return_ptr, uint64_t))v670;
      *(void *)(v670 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
      *(void *)(v670 + 24) = v668;
      v952 = (char *)swift_allocObject();
      v952[16] = 32;
      v953 = swift_allocObject();
      *(unsigned char *)(v953 + 16) = 8;
      uint64_t v671 = swift_allocObject();
      *(void *)(v671 + 16) = partial apply for implicit closure #26 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
      *(void *)(v671 + 24) = v656;
      v944 = (void (**)(uint8_t **__return_ptr, uint64_t))v664;
      uint64_t v672 = swift_allocObject();
      v933 = (char *)v672;
      *(void *)(v672 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      *(void *)(v672 + 24) = v671;
      WitnessTable = (void *)swift_allocObject();
      *((unsigned char *)WitnessTable + 16) = 2;
      v954 = (char *)swift_allocObject();
      v954[16] = 8;
      uint64_t v673 = swift_allocObject();
      *(void *)(v673 + 16) = partial apply for implicit closure #11 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
      *(void *)(v673 + 24) = v657;
      v674 = swift_allocObject();
      v960 = (void (**)(uint8_t **__return_ptr, uint64_t))v674;
      v674[2].Class isa = (Class)thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
      v674[3].Class isa = (Class)v673;
      v966 = (char *)swift_allocObject();
      v966[16] = 2;
      v957 = (char *)swift_allocObject();
      v957[16] = 8;
      uint64_t v675 = swift_allocObject();
      *(void *)(v675 + 16) = partial apply for implicit closure #11 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
      *(void *)(v675 + 24) = v658;
      uint64_t v676 = swift_allocObject();
      v970 = (char *)v676;
      *(void *)(v676 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
      *(void *)(v676 + 24) = v675;
      v972 = swift_allocObject();
      *(unsigned char *)(v972 + 16) = 34;
      v974 = swift_allocObject();
      *(unsigned char *)(v974 + 16) = 8;
      v932 = (char *)v667;
      uint64_t v677 = swift_allocObject();
      *(void *)(v677 + 16) = partial apply for implicit closure #31 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
      *(void *)(v677 + 24) = v659;
      uint64_t v678 = swift_allocObject();
      *(void *)(v678 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      *(void *)(v678 + 24) = v677;
      uint64_t v679 = v678;
      uint64_t v680 = swift_allocObject();
      *(_OWORD *)(v680 + 16) = v921;
      *(void *)(v680 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v680 + 40) = v946;
      *(void *)(v680 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v680 + 56) = v661;
      *(void *)(v680 + 64) = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
      *(void *)(v680 + 72) = v664;
      *(void *)(v680 + 80) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v680 + 88) = v942;
      *(void *)(v680 + 96) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v680 + 104) = v965;
      *(void *)(v680 + 112) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v680 + 120) = v667;
      *(void *)(v680 + 128) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v680 + 136) = v948;
      *(void *)(v680 + 144) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v680 + 152) = v951;
      *(void *)(v680 + 160) = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
      *(void *)(v680 + 168) = v945;
      *(void *)(v680 + 176) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v680 + 184) = v952;
      *(void *)(v680 + 192) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v680 + 200) = v953;
      *(void *)(v680 + 208) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v680 + 216) = v933;
      *(void *)(v680 + 224) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v680 + 232) = WitnessTable;
      *(void *)(v680 + 240) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v680 + 248) = v954;
      *(void *)(v680 + 256) = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
      *(void *)(v680 + 264) = v960;
      *(void *)(v680 + 272) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v680 + 280) = v966;
      *(void *)(v680 + 288) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v680 + 296) = v957;
      *(void *)(v680 + 304) = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
      *(void *)(v680 + 312) = v970;
      *(void *)(v680 + 320) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v680 + 328) = v972;
      *(void *)(v680 + 336) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v680 + 344) = v974;
      *(void *)(v680 + 352) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v680 + 360) = v679;
      swift_retain();
      v929 = (char *)v661;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      os_log_t v681 = v941;
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v681, (os_log_type_t)v934))
      {
        v682 = v929;
        v683 = v944;
        v684 = v942;
        v685 = v965;
        v686 = v945;
        v687 = v960;
        v688 = swift_slowAlloc();
        v908 = (char *)swift_slowAlloc();
        v978[4] = v908;
        *(_WORD *)v688 = 1794;
        *(unsigned char *)(v688 + 2) = *((unsigned char *)v946 + 16);
        v296 = v977;
        if (v977) {
          goto LABEL_333;
        }
        v909 = v679;
        swift_release();
        *(unsigned char *)(v688 + 3) = v682[16];
        v689 = v687;
        v690 = swift_release();
        v683[2](&v980, v690);
        *(void *)(v688 + 4) = v980;
        v691 = v686;
        swift_release();
        *(unsigned char *)(v688 + 12) = v684[16];
        swift_release();
        *(unsigned char *)(v688 + 13) = *(unsigned char *)(v685 + 16);
        v979 = (unsigned char *)(v688 + 14);
        v692 = v689;
        swift_release();
        partial apply for closure #1 in OSLogArguments.append(_:)(&v979);
        v693 = (uint8_t *)v688;
        swift_release();
        v694 = v979;
        *v979 = v948[16];
        swift_release();
        v694[1] = v951[2].isa;
        v695 = (uint64_t)v894;
        v696 = swift_release();
        v691[2](&v980, v696);
        *(void *)(v694 + 2) = v980;
        swift_release();
        v694[10] = v952[16];
        swift_release();
        v694[11] = *(unsigned char *)(v953 + 16);
        v979 = v694 + 12;
        swift_release();
        partial apply for closure #1 in OSLogArguments.append(_:)(&v979);
        swift_release();
        v697 = v979;
        *v979 = *((unsigned char *)WitnessTable + 16);
        swift_release();
        v697[1] = v954[16];
        v979 = v697 + 2;
        v698 = v895;
        v699 = v973;
        v700 = swift_release();
        v692[2](&v980, v700);
        *(void *)(v697 + 2) = v980;
        swift_release();
        v697[10] = v966[16];
        swift_release();
        v697[11] = v957[16];
        v701 = v971;
        v702 = v970;
        v703 = swift_release();
        (*((void (**)(uint8_t **__return_ptr, uint64_t))v702 + 2))(&v980, v703);
        *(void *)(v697 + 12) = v980;
        swift_release();
        v697[20] = *(unsigned char *)(v972 + 16);
        swift_release();
        v697[21] = *(unsigned char *)(v974 + 16);
        v979 = v697 + 22;
        v704 = v891;
        swift_release();
        partial apply for closure #1 in OSLogArguments.append(_:)(&v979);
        v705 = v887;
        swift_release();
        v706 = v941;
        _os_log_impl((void *)&_mh_execute_header, v941, (os_log_type_t)v934, "Section %{public}ld(%{public}s) mapped to section %{public}ld(%s): difference=%{public}ld adjustedDifference=%{public}ld diffAdjustmentMap=%{public}s", v693, 0x48u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        WitnessTable = v950->isa;
        ((void (*)(char *, uint64_t))WitnessTable)(v705, v975);
        v707 = v896;
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        WitnessTable = v950->isa;
        ((void (*)(char *, uint64_t))WitnessTable)(v887, v975);
        v701 = v971;
        v698 = v895;
        v296 = v977;
        v695 = (uint64_t)v894;
        v707 = v896;
        v704 = v891;
        v699 = v973;
      }
      v708 = swift_allocObject();
      v709 = specialized static Array._allocateUninitialized(_:)(0);
      v957 = (char *)v708;
      *(void *)(v708 + 16) = v709;
      v710 = (uint64_t *)(v708 + 16);
      v711 = specialized max<A>(_:_:)(v968, v930);
      v712 = v711 - 1;
      v713 = (uint64_t)v900;
      if (__OFSUB__(v711, 1)) {
        goto LABEL_329;
      }
      swift_beginAccess();
      v974 = (uint64_t)v710;
      if (specialized Array.count.getter(*v710) < v699)
      {
        v714 = (uint64_t)v931;
        v970 = &v931[v939];
        v715 = __OFADD__(v931, v939);
        LODWORD(v972) = v715;
        if (v967 < v968) {
          v714 = (uint64_t)v976;
        }
        v960 = (void (**)(uint8_t **__return_ptr, uint64_t))(v714 + v939);
        v716 = __OFADD__(v714, v939);
        LODWORD(v965) = v716;
        do
        {
          v976 = (uint64_t *)v712;
          if (v712 < 0)
          {
            v977 = v296;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v809 = v975;
            v963(v698, v962, v975);
            v810 = v874;
            v811 = v898;
            v812 = v958;
            ((void (*)(char *, char *, uint64_t))v917)(v874, v898, v958);
            v813 = swift_allocObject();
            v814 = v940;
            *(void *)(v813 + 16) = v812;
            *(void *)(v813 + 24) = v814;
            ((void (*)(char *, char *, uint64_t))v914)(&v919[v813], v810, v812);
            v815 = Logger.logObject.getter();
            v816 = static os_log_type_t.fault.getter();
            v817 = swift_allocObject();
            *(unsigned char *)(v817 + 16) = 34;
            v818 = swift_allocObject();
            *(unsigned char *)(v818 + 16) = 8;
            v819 = swift_allocObject();
            *(void *)(v819 + 16) = partial apply for implicit closure #26 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
            *(void *)(v819 + 24) = v813;
            v820 = swift_allocObject();
            *(void *)(v820 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
            *(void *)(v820 + 24) = v819;
            v821 = swift_allocObject();
            *(_OWORD *)(v821 + 16) = v910;
            *(void *)(v821 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
            *(void *)(v821 + 40) = v817;
            *(void *)(v821 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
            *(void *)(v821 + 56) = v818;
            *(void *)(v821 + 64) = partial apply for closure #1 in OSLogArguments.append(_:);
            *(void *)(v821 + 72) = v820;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease();
            if (!os_log_type_enabled(v815, v816))
            {
              swift_release();
              outlined consume of (@escaping @callee_guaranteed () -> ())?(v956);
              outlined consume of (@escaping @callee_guaranteed () -> ())?(v938);
              outlined consume of (@escaping @callee_guaranteed () -> ())?(v859);

              swift_release();
              swift_release();
              swift_release();
              ((void (*)(char *, uint64_t))WitnessTable)(v698, v809);
              v834 = *v880;
              (*v880)(v885, v812);
              v928(v886, v899);
              v834(v811, v812);
              goto LABEL_297;
            }
            v822 = (uint8_t *)swift_slowAlloc();
            v979 = (unsigned char *)swift_slowAlloc();
            *(_WORD *)v822 = 258;
            v822[2] = *(unsigned char *)(v817 + 16);
            if (!v977)
            {
              swift_release();
              v822[3] = *(unsigned char *)(v818 + 16);
              v980 = v822 + 4;
              swift_release();
              partial apply for closure #1 in OSLogArguments.append(_:)(&v980);
              swift_release();
              _os_log_impl((void *)&_mh_execute_header, v815, v816, "We ran out of items while trying to build index paths for section with identifier \"%{public}s\"", v822, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
              swift_release();
              outlined consume of (@escaping @callee_guaranteed () -> ())?(v956);
              outlined consume of (@escaping @callee_guaranteed () -> ())?(v938);
              outlined consume of (@escaping @callee_guaranteed () -> ())?(v859);

              ((void (*)(char *, uint64_t))WitnessTable)(v895, v975);
              v823 = *v880;
              v824 = v958;
              (*v880)(v885, v958);
              v928(v886, v899);
              v823(v898, v824);
LABEL_297:
              (*(void (**)(char *, uint64_t))(v937 + 8))(v892, v918);
              if (v976 != (uint64_t *)0x8000000000000000)
              {
                swift_release();
                goto LABEL_226;
              }
LABEL_332:
              __break(1u);
            }
LABEL_333:
            swift_errorRelease();
            __break(1u);
LABEL_334:
            swift_errorRelease();
            __break(1u);
            swift_errorRelease();
            __break(1u);
LABEL_335:
            swift_errorRelease();
            __break(1u);
LABEL_336:
            uint64_t result = swift_errorRelease();
            __break(1u);
            return result;
          }
          if (v972) {
            goto LABEL_320;
          }
          IndexPath.init(item:section:)();
          v719 = (uint64_t)v985;
          swift_bridgeObjectRetain();
          v720 = specialized Set.contains(_:)(v713, v719);
          swift_bridgeObjectRelease();
          if (v720)
          {
            v977 = v296;
            v721 = v975;
            v963(v704, v962, v975);
            v722 = v713;
            v723 = v947;
            v724 = v949;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v947 + 16))(v949, v722, v701);
            v725 = (*(unsigned __int8 *)(v723 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v723 + 80);
            v726 = swift_allocObject();
            (*(void (**)(unint64_t, uint64_t, uint64_t))(v723 + 32))(v726 + v725, v724, v701);
            v727 = swift_allocObject();
            *(void *)(v727 + 16) = partial apply for implicit closure #35 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
            *(void *)(v727 + 24) = v726;
            v728 = Logger.logObject.getter();
            v729 = static os_log_type_t.default.getter();
            v730 = swift_allocObject();
            *(unsigned char *)(v730 + 16) = 34;
            v731 = v701;
            v732 = swift_allocObject();
            *(unsigned char *)(v732 + 16) = 8;
            v733 = swift_allocObject();
            *(void *)(v733 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)specialized partial apply;
            *(void *)(v733 + 24) = v727;
            v734 = v704;
            v735 = swift_allocObject();
            *(void *)(v735 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
            *(void *)(v735 + 24) = v733;
            v736 = swift_allocObject();
            *(_OWORD *)(v736 + 16) = v910;
            *(void *)(v736 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
            *(void *)(v736 + 40) = v730;
            *(void *)(v736 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
            *(void *)(v736 + 56) = v732;
            *(void *)(v736 + 64) = partial apply for closure #1 in OSLogArguments.append(_:);
            *(void *)(v736 + 72) = v735;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease();
            LODWORD(v966) = v729;
            if (!os_log_type_enabled(v728, (os_log_type_t)v729))
            {

              swift_release();
              swift_release();
              swift_release();
              ((void (*)(char *, uint64_t))WitnessTable)(v734, v721);
              v713 = (uint64_t)v900;
              (*v927)(v900, v731);
              v701 = v731;
              v698 = v895;
              v296 = v977;
              v695 = (uint64_t)v894;
              v707 = v896;
              v704 = v734;
LABEL_279:
              v699 = v973;
              goto LABEL_259;
            }
            v737 = swift_slowAlloc();
            v980 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v737 = 258;
            *(unsigned char *)(v737 + 2) = *(unsigned char *)(v730 + 16);
            v296 = v977;
            if (v977) {
              goto LABEL_333;
            }
            swift_release();
            *(unsigned char *)(v737 + 3) = *(unsigned char *)(v732 + 16);
            v695 = (uint64_t)v894;
            v707 = v896;
            v699 = v973;
            v738 = swift_release();
            v739 = (*(uint64_t (**)(uint64_t))(v735 + 16))(v738);
            *(void *)(v737 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_1(v739, v740, (uint64_t *)&v980);
            swift_bridgeObjectRelease();
            swift_release();
            _os_log_impl((void *)&_mh_execute_header, v728, (os_log_type_t)v966, "%{public}s contained in the visible index paths set, skipping", (uint8_t *)v737, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            v704 = v891;
            ((void (*)(char *, uint64_t))WitnessTable)(v891, v975);
            v713 = (uint64_t)v900;
            v701 = v971;
            (*v927)(v900, v971);
            v698 = v895;
          }
          else
          {
            if (v965) {
              goto LABEL_325;
            }
            IndexPath.init(item:section:)();
            if (v967 >= v968)
            {
              v763 = *v925;
              v764 = v925[1];
              swift_retain();
              swift_retain();
              v765 = specialized OrderedSet.contains(_:)(v695, v763, v764);
              swift_release();
              swift_release();
              if (v765)
              {
                v977 = v296;
                v766 = v876;
                v767 = v975;
                v963(v876, v962, v975);
                v768 = v947;
                v769 = v949;
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v947 + 16))(v949, v695, v701);
                v770 = (*(unsigned __int8 *)(v768 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v768 + 80);
                v771 = swift_allocObject();
                v772 = v771 + v770;
                v751 = v766;
                (*(void (**)(unint64_t, uint64_t, uint64_t))(v768 + 32))(v772, v769, v701);
                v773 = swift_allocObject();
                *(void *)(v773 + 16) = partial apply for implicit closure #35 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
                *(void *)(v773 + 24) = v771;
                v753 = Logger.logObject.getter();
                LODWORD(v769) = static os_log_type_t.default.getter();
                v774 = swift_allocObject();
                *(unsigned char *)(v774 + 16) = 34;
                v775 = swift_allocObject();
                *(unsigned char *)(v775 + 16) = 8;
                v756 = v767;
                v776 = swift_allocObject();
                *(void *)(v776 + 16) = partial apply for specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
                *(void *)(v776 + 24) = v773;
                v758 = v701;
                v777 = swift_allocObject();
                *(void *)(v777 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
                *(void *)(v777 + 24) = v776;
                v778 = swift_allocObject();
                *(_OWORD *)(v778 + 16) = v910;
                *(void *)(v778 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
                *(void *)(v778 + 40) = v774;
                *(void *)(v778 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
                *(void *)(v778 + 56) = v775;
                *(void *)(v778 + 64) = partial apply for closure #1 in OSLogArguments.append(_:);
                *(void *)(v778 + 72) = v777;
                swift_retain();
                swift_retain();
                swift_retain();
                swift_bridgeObjectRelease();
                LODWORD(v966) = v769;
                if (!os_log_type_enabled(v753, (os_log_type_t)v769))
                {
LABEL_278:

                  swift_release();
                  swift_release();
                  swift_release();
                  ((void (*)(char *, uint64_t))WitnessTable)(v751, v756);
                  v781 = *v927;
                  v695 = (uint64_t)v894;
                  (*v927)(v894, v758);
                  v713 = (uint64_t)v900;
                  v781(v900, v758);
                  v701 = v758;
                  v698 = v895;
                  v296 = v977;
                  v707 = v896;
                  v704 = v891;
                  goto LABEL_279;
                }
                v779 = (uint8_t *)swift_slowAlloc();
                v979 = (unsigned char *)swift_slowAlloc();
                *(_WORD *)v779 = 258;
                v779[2] = *(unsigned char *)(v774 + 16);
                v296 = v977;
                v707 = v896;
                if (v977) {
                  goto LABEL_333;
                }
                swift_release();
                v779[3] = *(unsigned char *)(v775 + 16);
                v980 = v779 + 4;
                v695 = (uint64_t)v894;
                swift_release();
                partial apply for closure #1 in OSLogArguments.append(_:)(&v980);
                v699 = v973;
                swift_release();
                _os_log_impl((void *)&_mh_execute_header, v753, (os_log_type_t)v966, "%{public}s contained in the deleted index paths set, skipping", v779, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                p_TupleTypeMetadata2 = &v908;
                goto LABEL_277;
              }
            }
            else
            {
              v741 = *v911;
              v742 = v911[1];
              swift_retain();
              swift_retain();
              v743 = specialized OrderedSet.contains(_:)(v695, v741, v742);
              swift_release();
              swift_release();
              if (v743)
              {
                v977 = v296;
                v744 = v875;
                v745 = v975;
                v963(v875, v962, v975);
                v746 = v947;
                v747 = v949;
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v947 + 16))(v949, v695, v701);
                v748 = (*(unsigned __int8 *)(v746 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v746 + 80);
                v749 = swift_allocObject();
                v750 = v749 + v748;
                v751 = v744;
                (*(void (**)(unint64_t, uint64_t, uint64_t))(v746 + 32))(v750, v747, v701);
                v752 = swift_allocObject();
                *(void *)(v752 + 16) = partial apply for implicit closure #35 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
                *(void *)(v752 + 24) = v749;
                v753 = Logger.logObject.getter();
                LODWORD(v747) = static os_log_type_t.default.getter();
                v754 = swift_allocObject();
                *(unsigned char *)(v754 + 16) = 34;
                v755 = swift_allocObject();
                *(unsigned char *)(v755 + 16) = 8;
                v756 = v745;
                v757 = swift_allocObject();
                *(void *)(v757 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)specialized partial apply;
                *(void *)(v757 + 24) = v752;
                v758 = v701;
                v759 = swift_allocObject();
                *(void *)(v759 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
                *(void *)(v759 + 24) = v757;
                v760 = swift_allocObject();
                *(_OWORD *)(v760 + 16) = v910;
                *(void *)(v760 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
                *(void *)(v760 + 40) = v754;
                *(void *)(v760 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
                *(void *)(v760 + 56) = v755;
                *(void *)(v760 + 64) = partial apply for closure #1 in OSLogArguments.append(_:);
                *(void *)(v760 + 72) = v759;
                swift_retain();
                swift_retain();
                swift_retain();
                swift_bridgeObjectRelease();
                LODWORD(v966) = v747;
                if (!os_log_type_enabled(v753, (os_log_type_t)v747)) {
                  goto LABEL_278;
                }
                v761 = (uint8_t *)swift_slowAlloc();
                v979 = (unsigned char *)swift_slowAlloc();
                *(_WORD *)v761 = 258;
                v761[2] = *(unsigned char *)(v754 + 16);
                v296 = v977;
                v707 = v896;
                if (v977) {
                  goto LABEL_333;
                }
                swift_release();
                v761[3] = *(unsigned char *)(v755 + 16);
                v980 = v761 + 4;
                v695 = (uint64_t)v894;
                swift_release();
                partial apply for closure #1 in OSLogArguments.append(_:)(&v980);
                v699 = v973;
                swift_release();
                _os_log_impl((void *)&_mh_execute_header, v753, (os_log_type_t)v966, "%{public}s contained in the inserted index paths set, skipping", v761, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                p_TupleTypeMetadata2 = &TupleTypeMetadata2;
LABEL_277:
                ((void (*)(void, uint64_t))WitnessTable)(*(p_TupleTypeMetadata2 - 32), v975);
                v780 = *v927;
                v701 = v971;
                (*v927)((char *)v695, v971);
                v713 = (uint64_t)v900;
                v780(v900, v701);
                v698 = v895;
                v704 = v891;
                goto LABEL_259;
              }
            }
            v717 = v949;
            (*v959)(v949, v695, v701);
            specialized Array.append(_:)(v717);
            v718 = *v927;
            (*v927)((char *)v695, v701);
            v713 = (uint64_t)v900;
            v718(v900, v701);
          }
LABEL_259:
          v712 = (uint64_t)v976 - 1;
        }
        while (specialized Array.count.getter(*(void *)v974) < v699);
      }
      v782 = swift_bridgeObjectRetain();
      v783 = v957;
      if (v967 < v968)
      {
        specialized OrderedSet.append<A>(contentsOf:)(v782);
        swift_bridgeObjectRelease();
        v798 = v871;
        v793 = v975;
        v963(v871, v962, v975);
        v784 = swift_allocObject();
        *(void *)(v784 + 16) = partial apply for implicit closure #37 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
        *(void *)(v784 + 24) = v783;
        swift_retain();
        v795 = Logger.logObject.getter();
        v785 = static os_log_type_t.default.getter();
        v786 = swift_allocObject();
        *(unsigned char *)(v786 + 16) = 34;
        v787 = swift_allocObject();
        *(unsigned char *)(v787 + 16) = 8;
        v788 = swift_allocObject();
        *(void *)(v788 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)specialized partial apply;
        *(void *)(v788 + 24) = v784;
        v789 = swift_allocObject();
        *(void *)(v789 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(void *)(v789 + 24) = v788;
        v790 = swift_allocObject();
        *(_OWORD *)(v790 + 16) = v910;
        *(void *)(v790 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v790 + 40) = v786;
        *(void *)(v790 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v790 + 56) = v787;
        *(void *)(v790 + 64) = partial apply for closure #1 in OSLogArguments.append(_:);
        *(void *)(v790 + 72) = v789;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v795, v785))
        {
          v791 = (uint8_t *)swift_slowAlloc();
          v979 = (unsigned char *)swift_slowAlloc();
          *(_WORD *)v791 = 258;
          v791[2] = *(unsigned char *)(v786 + 16);
          if (v296) {
            goto LABEL_333;
          }
          swift_release();
          v791[3] = *(unsigned char *)(v787 + 16);
          v980 = v791 + 4;
          v615 = v931;
          swift_release();
          partial apply for closure #1 in OSLogArguments.append(_:)(&v980);
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v795, v785, "Non visible adjustment: inserting %{public}s", v791, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v792 = &v903;
          goto LABEL_288;
        }
      }
      else
      {
        specialized OrderedSet.append<A>(contentsOf:)(v782);
        swift_bridgeObjectRelease();
        v793 = v975;
        v963(v707, v962, v975);
        v794 = swift_allocObject();
        *(void *)(v794 + 16) = partial apply for implicit closure #37 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
        *(void *)(v794 + 24) = v783;
        swift_retain();
        v795 = Logger.logObject.getter();
        v796 = static os_log_type_t.default.getter();
        v797 = swift_allocObject();
        *(unsigned char *)(v797 + 16) = 34;
        v798 = v707;
        v799 = swift_allocObject();
        *(unsigned char *)(v799 + 16) = 8;
        v800 = swift_allocObject();
        *(void *)(v800 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)specialized partial apply;
        *(void *)(v800 + 24) = v794;
        v801 = swift_allocObject();
        *(void *)(v801 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(void *)(v801 + 24) = v800;
        v802 = swift_allocObject();
        *(_OWORD *)(v802 + 16) = v910;
        *(void *)(v802 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v802 + 40) = v797;
        *(void *)(v802 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v802 + 56) = v799;
        *(void *)(v802 + 64) = partial apply for closure #1 in OSLogArguments.append(_:);
        *(void *)(v802 + 72) = v801;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v795, v796))
        {
          v804 = (uint8_t *)swift_slowAlloc();
          v979 = (unsigned char *)swift_slowAlloc();
          *(_WORD *)v804 = 258;
          v804[2] = *(unsigned char *)(v797 + 16);
          if (v296) {
            goto LABEL_333;
          }
          swift_release();
          v804[3] = *(unsigned char *)(v799 + 16);
          v980 = v804 + 4;
          v615 = v931;
          swift_release();
          partial apply for closure #1 in OSLogArguments.append(_:)(&v980);
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v795, v796, "Non visible adjustment: deleting %{public}s", v804, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v792 = (char **)&v926;
LABEL_288:
          ((void (*)(void, uint64_t))WitnessTable)(*(v792 - 32), v975);
          v805 = *v880;
          v806 = v958;
          (*v880)(v885, v958);
          v617 = v920;
          v928(v886, v899);
          v805(v898, v806);
          swift_release();
          uint64_t v620 = v938;
          uint64_t v294 = v956;
          uint64_t v619 = v937;
LABEL_290:
          v616 = v913;
          uint64_t v618 = v912;
          goto LABEL_231;
        }
      }

      swift_release();
      swift_release();
      swift_release();
      ((void (*)(char *, uint64_t))WitnessTable)(v798, v793);
      v807 = *v880;
      v808 = v958;
      (*v880)(v885, v958);
      v617 = v920;
      v928(v886, v899);
      v807(v898, v808);
      swift_release();
      uint64_t v620 = v938;
      uint64_t v294 = v956;
      uint64_t v619 = v937;
      v615 = v931;
      goto LABEL_290;
    }
    uint64_t v337 = *v336;
    uint64_t v338 = v973;
    (*v869)(v919, (char *)v336 + *((int *)v324 + 12), v973);
    v972 = v337;
    if (__OFSUB__(v337, v939)) {
      goto LABEL_318;
    }
    uint64_t v339 = v958;
    Array.subscript.getter();
    uint64_t v340 = ((uint64_t (*)(uint64_t))v940[4].isa)(v339);
    unint64_t v342 = v988;
    if (*(void *)(v988 + 16)
      && (uint64_t v343 = _ss22__RawDictionaryStorageC4findys10_HashTableV6BucketV6bucket_Sb5foundtxSHRzlFSS_Tg5_0(v340, v341),
          (v344 & 1) != 0))
    {
      uint64_t v345 = *(void *)(*(void *)(v342 + 56) + 8 * v343);
      swift_bridgeObjectRelease();
      v912 = v345;
      specialized Dictionary.subscript.setter(0, 0, v345);
      LODWORD(v951) = 1;
    }
    else
    {
      swift_bridgeObjectRelease();
      LODWORD(v951) = 0;
      v912 = 0;
    }
    v346 = v904;
    v952 = *(char **)v957;
    ((void (*)(char *, char *, uint64_t))v952)(v904, v919, v338);
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v347 = v914;
    *(void *)&v346[*(int *)(v914 + 36)] = v980;
    (*v868)(v326, v346, v347);
    v348 = (char *)(v326 + *(int *)(v347 + 36));
    dispatch thunk of Collection.endIndex.getter();
    if (static CollectionDifference.Index.== infix(_:_:)())
    {
LABEL_93:
      (*v879)(v326, v914);
      (*v880)(v913, v958);
      (*(void (**)(char *, uint64_t))v953)(v919, v338);
      uint64_t v294 = v956;
      v324 = TupleTypeMetadata2;
      unint64_t v323 = v884;
      uint64_t v325 = v882;
      continue;
    }
    break;
  }
  v901 = (char *)(v912 + v939);
  BOOL v349 = __OFADD__(v912, v939);
  LODWORD(v902) = v349;
  v948 = v348;
  while (2)
  {
    v351 = v296;
    v352 = (void (*)(uint8_t **, void))dispatch thunk of Collection.subscript.read();
    v353 = v966;
    uint64_t v354 = v967;
    (*v946)(v966);
    v352(&v980, 0);
    uint64_t v355 = v965;
    ((void (*)(uint64_t, uint64_t, uint64_t))v952)(v965, v326, v338);
    dispatch thunk of Collection.formIndex(after:)();
    v356 = *(void (**)(char *, uint64_t))v953;
    (*(void (**)(uint64_t, uint64_t))v953)(v355, v338);
    v357 = v976;
    ((void (*)(uint64_t *, char *, uint64_t))*v945)(v976, v353, v354);
    LODWORD(v354) = swift_getEnumCaseMultiPayload();
    uint64_t v358 = *v357;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&_sSiSgMD_0);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    v360 = (char *)v357 + *(int *)(TupleTypeMetadata3 + 64);
    uint64_t v361 = *(void *)v360;
    int v362 = v360[8];
    unint64_t v363 = v986;
    uint64_t v364 = *(void *)(v986 + 16);
    v977 = v351;
    if (v354 != 1)
    {
      if (v364)
      {
        unint64_t v367 = specialized __RawDictionaryStorage.find<A>(_:)(v972);
        v368 = v954;
        if ((v369 & 1) != 0 && __OFADD__(v358, *(void *)(*(void *)(v363 + 56) + 8 * v367))) {
          goto LABEL_302;
        }
      }
      else
      {
        v368 = v954;
      }
      v974 = (uint64_t)v976 + *(int *)(TupleTypeMetadata3 + 48);
      if (v951)
      {
        if (v362)
        {
          v427 = specialized Dictionary.subscript.modify(&v980, v912);
          uint64_t v410 = v971;
          if (*(unsigned char *)(v426 + 8))
          {
            ((void (*)(uint8_t **, void))v427)(&v980, 0);
            uint64_t v402 = (uint64_t)v917;
            v428 = v916;
          }
          else
          {
            uint64_t v402 = (uint64_t)v917;
            v428 = v916;
            if (__OFADD__(*(void *)v426, 1)) {
              goto LABEL_319;
            }
            ++*(void *)v426;
            ((void (*)(uint8_t **, void))v427)(&v980, 0);
          }
          if (v902) {
            goto LABEL_312;
          }
          IndexPath.init(item:section:)();
          specialized OrderedSet._append(_:)(v402);
          uint64_t v406 = v975;
          v963(v428, v962, v975);
          uint64_t v500 = v947;
          uint64_t v501 = v949;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v947 + 16))(v949, v402, v410);
          unint64_t v502 = (*(unsigned __int8 *)(v500 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v500 + 80);
          v407 = v428;
          uint64_t v503 = swift_allocObject();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v500 + 32))(v503 + v502, v501, v410);
          uint64_t v504 = swift_allocObject();
          *(void *)(v504 + 16) = partial apply for implicit closure #35 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
          *(void *)(v504 + 24) = v503;
          v414 = Logger.logObject.getter();
          os_log_type_t v505 = static os_log_type_t.default.getter();
          uint64_t v506 = swift_allocObject();
          *(unsigned char *)(v506 + 16) = 34;
          uint64_t v507 = swift_allocObject();
          *(unsigned char *)(v507 + 16) = 8;
          uint64_t v508 = swift_allocObject();
          *(void *)(v508 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)specialized partial apply;
          *(void *)(v508 + 24) = v504;
          uint64_t v509 = swift_allocObject();
          *(void *)(v509 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
          *(void *)(v509 + 24) = v508;
          uint64_t v510 = swift_allocObject();
          *(_OWORD *)(v510 + 16) = v910;
          *(void *)(v510 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
          *(void *)(v510 + 40) = v506;
          *(void *)(v510 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
          *(void *)(v510 + 56) = v507;
          *(void *)(v510 + 64) = partial apply for closure #1 in OSLogArguments.append(_:);
          *(void *)(v510 + 72) = v509;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          if (!os_log_type_enabled(v414, v505)) {
            goto LABEL_114;
          }
          uint64_t v511 = swift_slowAlloc();
          v980 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v511 = 258;
          *(unsigned char *)(v511 + 2) = *(unsigned char *)(v506 + 16);
          if (v977) {
            goto LABEL_334;
          }
          swift_release();
          *(unsigned char *)(v511 + 3) = *(unsigned char *)(v507 + 16);
          uint64_t v512 = swift_release();
          uint64_t v513 = (*(uint64_t (**)(uint64_t))(v509 + 16))(v512);
          *(void *)(v511 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_1(v513, v514, (uint64_t *)&v980);
          swift_bridgeObjectRelease();
          uint64_t v515 = v406;
          v296 = 0;
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v414, v505, "Inserting item %{public}s", (uint8_t *)v511, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          ((void (*)(char *, uint64_t))v960)(v916, v515);
          (*v927)(v917, v971);
LABEL_166:
          uint64_t v338 = v973;
          uint64_t v326 = v968;
LABEL_115:
          v350 = v970;
LABEL_116:
          (*v944)((uint8_t **)v974, (uint64_t)v350);
          dispatch thunk of Collection.endIndex.getter();
          if (static CollectionDifference.Index.== infix(_:_:)()) {
            goto LABEL_93;
          }
          continue;
        }
        v466 = v924;
        IndexPath.init(item:section:)();
        v467 = v932;
        uint64_t v468 = v971;
        if (v902) {
          goto LABEL_311;
        }
        IndexPath.init(item:section:)();
        v963(v467, v962, v975);
        uint64_t v469 = v947;
        v470 = *(NSObject **)(v947 + 16);
        uint64_t v471 = v949;
        ((void (*)(uint64_t, char *, uint64_t))v470)(v949, v466, v468);
        unint64_t v472 = (*(unsigned __int8 *)(v469 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v469 + 80);
        uint64_t v473 = swift_allocObject();
        v474 = *(void (**)(unint64_t, uint64_t, uint64_t))(v469 + 32);
        v474(v473 + v472, v471, v468);
        uint64_t v475 = swift_allocObject();
        *(void *)(v475 + 16) = partial apply for implicit closure #35 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
        *(void *)(v475 + 24) = v473;
        v915 = v470;
        ((void (*)(uint64_t, char *, uint64_t))v470)(v471, v931, v468);
        uint64_t v476 = swift_allocObject();
        v474(v476 + v472, v471, v468);
        uint64_t v477 = swift_allocObject();
        *(void *)(v477 + 16) = partial apply for implicit closure #35 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
        *(void *)(v477 + 24) = v476;
        v960 = (void (**)(uint8_t **__return_ptr, uint64_t))Logger.logObject.getter();
        LODWORD(v470) = static os_log_type_t.default.getter();
        uint64_t v478 = swift_allocObject();
        *(unsigned char *)(v478 + 16) = 34;
        uint64_t v479 = swift_allocObject();
        *(unsigned char *)(v479 + 16) = 8;
        uint64_t v480 = swift_allocObject();
        *(void *)(v480 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)specialized partial apply;
        *(void *)(v480 + 24) = v475;
        uint64_t v481 = swift_allocObject();
        *(void *)(v481 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(void *)(v481 + 24) = v480;
        uint64_t v482 = swift_allocObject();
        *(unsigned char *)(v482 + 16) = 34;
        uint64_t v483 = swift_allocObject();
        *(unsigned char *)(v483 + 16) = 8;
        uint64_t v484 = swift_allocObject();
        uint64_t v485 = v975;
        uint64_t v486 = v484;
        *(void *)(v484 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)specialized partial apply;
        *(void *)(v484 + 24) = v477;
        uint64_t v487 = swift_allocObject();
        *(void *)(v487 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(void *)(v487 + 24) = v486;
        uint64_t v488 = swift_allocObject();
        *(_OWORD *)(v488 + 16) = v934;
        *(void *)(v488 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v488 + 40) = v478;
        *(void *)(v488 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v488 + 56) = v479;
        *(void *)(v488 + 64) = partial apply for closure #1 in OSLogArguments.append(_:);
        *(void *)(v488 + 72) = v481;
        *(void *)(v488 + 80) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v488 + 88) = v482;
        *(void *)(v488 + 96) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v488 + 104) = v483;
        *(void *)(v488 + 112) = partial apply for closure #1 in OSLogArguments.append(_:);
        *(void *)(v488 + 120) = v487;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        LODWORD(v890) = v470;
        os_log_type_t v489 = v470;
        v490 = v960;
        if (os_log_type_enabled((os_log_t)v960, v489))
        {
          uint64_t v491 = swift_slowAlloc();
          v980 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v491 = 514;
          *(unsigned char *)(v491 + 2) = *(unsigned char *)(v478 + 16);
          if (v977) {
            goto LABEL_335;
          }
          swift_release();
          *(unsigned char *)(v491 + 3) = *(unsigned char *)(v479 + 16);
          v296 = 0;
          uint64_t v492 = swift_release();
          uint64_t v493 = (*(uint64_t (**)(uint64_t))(v481 + 16))(v492);
          *(void *)(v491 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_1(v493, v494, (uint64_t *)&v980);
          swift_bridgeObjectRelease();
          v495 = v932;
          swift_release();
          *(unsigned char *)(v491 + 12) = *(unsigned char *)(v482 + 16);
          swift_release();
          *(unsigned char *)(v491 + 13) = *(unsigned char *)(v483 + 16);
          uint64_t v496 = swift_release();
          uint64_t v497 = (*(uint64_t (**)(uint64_t))(v487 + 16))(v496);
          *(void *)(v491 + 14) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_1(v497, v498, (uint64_t *)&v980);
          swift_bridgeObjectRelease();
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v490, (os_log_type_t)v890, "[Insert] Moving item %{public}s to %{public}s", (uint8_t *)v491, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v960 = (void (**)(uint8_t **__return_ptr, uint64_t))v950->isa;
          ((void (*)(char *, uint64_t))v960)(v495, v975);
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();

          v960 = (void (**)(uint8_t **__return_ptr, uint64_t))v950->isa;
          ((void (*)(char *, uint64_t))v960)(v932, v485);
          v296 = v977;
        }
        uint64_t v338 = v973;
        uint64_t v516 = v921;
        uint64_t v517 = v921 + *(int *)(v922 + 48);
        v518 = v924;
        uint64_t v519 = v971;
        os_log_t v520 = v915;
        ((void (*)(void, char *, uint64_t))v915)(v921, v924, v971);
        v521 = v931;
        ((void (*)(uint64_t, char *, uint64_t))v520)(v517, v931, v519);
        specialized Array.append(_:)(v516);
        v522 = *v927;
        (*v927)(v521, v519);
        v522(v518, v519);
        v350 = v970;
LABEL_171:
        uint64_t v326 = v968;
        goto LABEL_116;
      }
      uint64_t v429 = v975;
      v963(v368, v962, v975);
      uint64_t v430 = swift_allocObject();
      *(void *)(v430 + 16) = v972;
      uint64_t v431 = swift_allocObject();
      *(void *)(v431 + 16) = v358;
      v915 = Logger.logObject.getter();
      int v432 = static os_log_type_t.default.getter();
      uint64_t v433 = swift_allocObject();
      *(unsigned char *)(v433 + 16) = 2;
      uint64_t v434 = swift_allocObject();
      *(unsigned char *)(v434 + 16) = 8;
      uint64_t v435 = swift_allocObject();
      *(void *)(v435 + 16) = Library.Menu.Request.filteringOptions.getter;
      *(void *)(v435 + 24) = v430;
      uint64_t v436 = swift_allocObject();
      *(void *)(v436 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
      *(void *)(v436 + 24) = v435;
      uint64_t v437 = swift_allocObject();
      *(unsigned char *)(v437 + 16) = 2;
      uint64_t v438 = swift_allocObject();
      *(unsigned char *)(v438 + 16) = 8;
      uint64_t v439 = swift_allocObject();
      *(void *)(v439 + 16) = partial apply for implicit closure #11 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
      *(void *)(v439 + 24) = v431;
      uint64_t v440 = swift_allocObject();
      *(void *)(v440 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
      *(void *)(v440 + 24) = v439;
      uint64_t v441 = swift_allocObject();
      *(_OWORD *)(v441 + 16) = v934;
      *(void *)(v441 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v441 + 40) = v433;
      *(void *)(v441 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v441 + 56) = v434;
      *(void *)(v441 + 64) = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
      *(void *)(v441 + 72) = v436;
      *(void *)(v441 + 80) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v441 + 88) = v437;
      *(void *)(v441 + 96) = closure #1 in OSLogArguments.append(_:)partial apply;
      *(void *)(v441 + 104) = v438;
      *(void *)(v441 + 112) = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
      *(void *)(v441 + 120) = v440;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      LODWORD(v890) = v432;
      os_log_type_t v442 = v432;
      v443 = v915;
      if (os_log_type_enabled(v915, v442))
      {
        uint64_t v444 = swift_slowAlloc();
        *(_WORD *)uint64_t v444 = 512;
        *(unsigned char *)(v444 + 2) = *(unsigned char *)(v433 + 16);
        v296 = v977;
        if (v977) {
          goto LABEL_333;
        }
        uint64_t v445 = v444;
        swift_release();
        *(unsigned char *)(v445 + 3) = *(unsigned char *)(v434 + 16);
        uint64_t v446 = swift_release();
        (*(void (**)(uint8_t **__return_ptr, uint64_t))(v436 + 16))(&v980, v446);
        *(void *)(v445 + 4) = v980;
        swift_release();
        *(unsigned char *)(v445 + 12) = *(unsigned char *)(v437 + 16);
        swift_release();
        *(unsigned char *)(v445 + 13) = *(unsigned char *)(v438 + 16);
        uint64_t v447 = swift_release();
        (*(void (**)(uint8_t **__return_ptr, uint64_t))(v440 + 16))(&v980, v447);
        *(void *)(v445 + 14) = v980;
        uint64_t v326 = v968;
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v443, (os_log_type_t)v890, "Skipping insert for [%{public}ld,%{public}ld]", (uint8_t *)v445, 0x16u);
        swift_slowDealloc();

        v448 = (uint64_t *)&v982;
LABEL_154:
        ((void (*)(void, uint64_t))v960)(*(v448 - 32), v975);
        v350 = v970;
        uint64_t v338 = v973;
        goto LABEL_116;
      }
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      v499 = (uint64_t *)&v982;
LABEL_168:
      ((void (*)(void, uint64_t))v960)(*(v499 - 32), v429);
      v296 = v977;
      v350 = v970;
      uint64_t v338 = v973;
      goto LABEL_171;
    }
    break;
  }
  if (v364)
  {
    unint64_t v365 = specialized __RawDictionaryStorage.find<A>(_:)(v972);
    if (v366) {
      uint64_t v364 = *(void *)(*(void *)(v363 + 56) + 8 * v365);
    }
    else {
      uint64_t v364 = 0;
    }
  }
  if (__OFADD__(v358, v364))
  {
    __break(1u);
LABEL_302:
    __break(1u);
    goto LABEL_303;
  }
  if (!v951)
  {
    uint64_t v372 = (uint64_t)v976 + *(int *)(TupleTypeMetadata3 + 48);
    if (v362) {
      goto LABEL_140;
    }
    v974 = (uint64_t)v976 + *(int *)(TupleTypeMetadata3 + 48);
    uint64_t v429 = v975;
    v963(v942, v962, v975);
    uint64_t v449 = swift_allocObject();
    *(void *)(v449 + 16) = v972;
    uint64_t v450 = swift_allocObject();
    *(void *)(v450 + 16) = v361;
    v451 = Logger.logObject.getter();
    LODWORD(v915) = static os_log_type_t.default.getter();
    uint64_t v452 = swift_allocObject();
    *(unsigned char *)(v452 + 16) = 2;
    uint64_t v453 = swift_allocObject();
    *(unsigned char *)(v453 + 16) = 8;
    uint64_t v454 = swift_allocObject();
    *(void *)(v454 + 16) = partial apply for implicit closure #11 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
    *(void *)(v454 + 24) = v449;
    uint64_t v455 = swift_allocObject();
    *(void *)(v455 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(void *)(v455 + 24) = v454;
    uint64_t v456 = swift_allocObject();
    *(unsigned char *)(v456 + 16) = 2;
    uint64_t v457 = swift_allocObject();
    *(unsigned char *)(v457 + 16) = 8;
    uint64_t v458 = swift_allocObject();
    *(void *)(v458 + 16) = partial apply for implicit closure #11 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
    *(void *)(v458 + 24) = v450;
    uint64_t v459 = swift_allocObject();
    *(void *)(v459 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(void *)(v459 + 24) = v458;
    uint64_t v460 = swift_allocObject();
    *(_OWORD *)(v460 + 16) = v934;
    *(void *)(v460 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
    *(void *)(v460 + 40) = v452;
    *(void *)(v460 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
    *(void *)(v460 + 56) = v453;
    *(void *)(v460 + 64) = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
    *(void *)(v460 + 72) = v455;
    *(void *)(v460 + 80) = closure #1 in OSLogArguments.append(_:)partial apply;
    *(void *)(v460 + 88) = v456;
    *(void *)(v460 + 96) = closure #1 in OSLogArguments.append(_:)partial apply;
    *(void *)(v460 + 104) = v457;
    *(void *)(v460 + 112) = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
    *(void *)(v460 + 120) = v459;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v451, (os_log_type_t)v915))
    {
      v461 = v451;
      uint64_t v462 = swift_slowAlloc();
      *(_WORD *)uint64_t v462 = 512;
      *(unsigned char *)(v462 + 2) = *(unsigned char *)(v452 + 16);
      v296 = v977;
      if (v977) {
        goto LABEL_333;
      }
      uint64_t v463 = v462;
      swift_release();
      *(unsigned char *)(v463 + 3) = *(unsigned char *)(v453 + 16);
      uint64_t v464 = swift_release();
      (*(void (**)(uint8_t **__return_ptr, uint64_t))(v455 + 16))(&v980, v464);
      *(void *)(v463 + 4) = v980;
      swift_release();
      *(unsigned char *)(v463 + 12) = *(unsigned char *)(v456 + 16);
      swift_release();
      *(unsigned char *)(v463 + 13) = *(unsigned char *)(v457 + 16);
      uint64_t v465 = swift_release();
      (*(void (**)(uint8_t **__return_ptr, uint64_t))(v459 + 16))(&v980, v465);
      *(void *)(v463 + 14) = v980;
      uint64_t v326 = v968;
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v461, (os_log_type_t)v915, "Skipping insert for [%{public}ld,%{public}ld]", (uint8_t *)v463, 0x16u);
      swift_slowDealloc();

      v448 = &v974;
      goto LABEL_154;
    }
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v499 = &v974;
    goto LABEL_168;
  }
  v371 = specialized Dictionary.subscript.modify(&v980, v912);
  if (*(unsigned char *)(v370 + 8) != 1)
  {
    if (__OFSUB__(*(void *)v370, 1)) {
      goto LABEL_310;
    }
    --*(void *)v370;
  }
  ((void (*)(uint8_t **, void))v371)(&v980, 0);
  uint64_t v372 = (uint64_t)v976 + *(int *)(TupleTypeMetadata3 + 48);
  if ((v362 & 1) == 0)
  {
    v373 = v923;
    IndexPath.init(item:section:)();
    if (v902) {
      goto LABEL_313;
    }
    v974 = v372;
    IndexPath.init(item:section:)();
    v963(v929, v962, v975);
    uint64_t v374 = v971;
    uint64_t v375 = v947;
    v376 = *(NSObject **)(v947 + 16);
    uint64_t v377 = v949;
    ((void (*)(uint64_t, char *, uint64_t))v376)(v949, v373, v971);
    unint64_t v378 = (*(unsigned __int8 *)(v375 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v375 + 80);
    uint64_t v379 = swift_allocObject();
    v380 = *(void (**)(unint64_t, uint64_t, uint64_t))(v375 + 32);
    v380(v379 + v378, v377, v374);
    uint64_t v381 = swift_allocObject();
    *(void *)(v381 + 16) = partial apply for implicit closure #35 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
    *(void *)(v381 + 24) = v379;
    v915 = v376;
    ((void (*)(uint64_t, uint64_t, uint64_t))v376)(v377, v930, v374);
    uint64_t v382 = swift_allocObject();
    v380(v382 + v378, v377, v374);
    uint64_t v383 = swift_allocObject();
    *(void *)(v383 + 16) = partial apply for implicit closure #35 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
    *(void *)(v383 + 24) = v382;
    v384 = Logger.logObject.getter();
    LODWORD(v377) = static os_log_type_t.default.getter();
    uint64_t v385 = swift_allocObject();
    *(unsigned char *)(v385 + 16) = 34;
    uint64_t v386 = swift_allocObject();
    *(unsigned char *)(v386 + 16) = 8;
    uint64_t v387 = swift_allocObject();
    *(void *)(v387 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)specialized partial apply;
    *(void *)(v387 + 24) = v381;
    uint64_t v388 = swift_allocObject();
    *(void *)(v388 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(void *)(v388 + 24) = v387;
    uint64_t v389 = swift_allocObject();
    *(unsigned char *)(v389 + 16) = 34;
    uint64_t v390 = swift_allocObject();
    *(unsigned char *)(v390 + 16) = 8;
    uint64_t v391 = swift_allocObject();
    *(void *)(v391 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)specialized partial apply;
    *(void *)(v391 + 24) = v383;
    uint64_t v392 = swift_allocObject();
    *(void *)(v392 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(void *)(v392 + 24) = v391;
    uint64_t v393 = swift_allocObject();
    *(_OWORD *)(v393 + 16) = v934;
    *(void *)(v393 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
    *(void *)(v393 + 40) = v385;
    *(void *)(v393 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
    *(void *)(v393 + 56) = v386;
    *(void *)(v393 + 64) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v393 + 72) = v388;
    *(void *)(v393 + 80) = closure #1 in OSLogArguments.append(_:)partial apply;
    *(void *)(v393 + 88) = v389;
    *(void *)(v393 + 96) = closure #1 in OSLogArguments.append(_:)partial apply;
    *(void *)(v393 + 104) = v390;
    *(void *)(v393 + 112) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v393 + 120) = v392;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    LODWORD(v960) = v377;
    if (os_log_type_enabled(v384, (os_log_type_t)v377))
    {
      v890 = v384;
      uint64_t v394 = swift_slowAlloc();
      v980 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v394 = 514;
      *(unsigned char *)(v394 + 2) = *(unsigned char *)(v385 + 16);
      v296 = v977;
      if (v977) {
        goto LABEL_333;
      }
      swift_release();
      *(unsigned char *)(v394 + 3) = *(unsigned char *)(v386 + 16);
      uint64_t v395 = swift_release();
      uint64_t v396 = (*(uint64_t (**)(uint64_t))(v388 + 16))(v395);
      *(void *)(v394 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_1(v396, v397, (uint64_t *)&v980);
      swift_bridgeObjectRelease();
      swift_release();
      *(unsigned char *)(v394 + 12) = *(unsigned char *)(v389 + 16);
      swift_release();
      *(unsigned char *)(v394 + 13) = *(unsigned char *)(v390 + 16);
      uint64_t v398 = swift_release();
      uint64_t v399 = (*(uint64_t (**)(uint64_t))(v392 + 16))(v398);
      *(void *)(v394 + 14) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_1(v399, v400, (uint64_t *)&v980);
      swift_bridgeObjectRelease();
      swift_release();
      os_log_t v401 = v890;
      _os_log_impl((void *)&_mh_execute_header, v890, (os_log_type_t)v960, "[Remove] Moving item %{public}s to %{public}s", (uint8_t *)v394, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v960 = (void (**)(uint8_t **__return_ptr, uint64_t))v950->isa;
      ((void (*)(char *, uint64_t))v960)(v929, v975);
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      v960 = (void (**)(uint8_t **__return_ptr, uint64_t))v950->isa;
      ((void (*)(char *, uint64_t))v960)(v929, v975);
      v296 = v977;
    }
    uint64_t v326 = v968;
    uint64_t v523 = v921;
    uint64_t v524 = v921 + *(int *)(v922 + 48);
    v525 = v923;
    uint64_t v526 = v971;
    os_log_t v527 = v915;
    ((void (*)(void, char *, uint64_t))v915)(v921, v923, v971);
    uint64_t v528 = v930;
    ((void (*)(uint64_t, uint64_t, uint64_t))v527)(v524, v930, v526);
    specialized Array.append(_:)(v523);
    v529 = *v927;
    (*v927)((char *)v528, v526);
    v529(v525, v526);
    v350 = v970;
    uint64_t v338 = v973;
    goto LABEL_116;
  }
LABEL_140:
  uint64_t v402 = (uint64_t)v933;
  v403 = (char *)v928;
  IndexPath.init(item:section:)();
  uint64_t v404 = (uint64_t)v985;
  swift_bridgeObjectRetain();
  char v405 = specialized Set.contains(_:)(v402, v404);
  swift_bridgeObjectRelease();
  if (v405)
  {
    v974 = v372;
    specialized OrderedSet._append(_:)(v402);
    uint64_t v406 = v975;
    v963(v403, v962, v975);
    v407 = v403;
    uint64_t v408 = v947;
    uint64_t v409 = v949;
    uint64_t v410 = v971;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v947 + 16))(v949, v402, v971);
    unint64_t v411 = (*(unsigned __int8 *)(v408 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v408 + 80);
    uint64_t v412 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v408 + 32))(v412 + v411, v409, v410);
    uint64_t v413 = swift_allocObject();
    *(void *)(v413 + 16) = partial apply for implicit closure #35 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:);
    *(void *)(v413 + 24) = v412;
    v414 = Logger.logObject.getter();
    os_log_type_t v415 = static os_log_type_t.default.getter();
    uint64_t v416 = swift_allocObject();
    *(unsigned char *)(v416 + 16) = 34;
    uint64_t v417 = swift_allocObject();
    *(unsigned char *)(v417 + 16) = 8;
    uint64_t v418 = swift_allocObject();
    *(void *)(v418 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)specialized partial apply;
    *(void *)(v418 + 24) = v413;
    uint64_t v419 = swift_allocObject();
    *(void *)(v419 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(void *)(v419 + 24) = v418;
    uint64_t v420 = swift_allocObject();
    *(_OWORD *)(v420 + 16) = v910;
    *(void *)(v420 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
    *(void *)(v420 + 40) = v416;
    *(void *)(v420 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
    *(void *)(v420 + 56) = v417;
    *(void *)(v420 + 64) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v420 + 72) = v419;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v414, v415))
    {
      uint64_t v421 = swift_slowAlloc();
      v980 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v421 = 258;
      *(unsigned char *)(v421 + 2) = *(unsigned char *)(v416 + 16);
      if (v977) {
        goto LABEL_334;
      }
      swift_release();
      *(unsigned char *)(v421 + 3) = *(unsigned char *)(v417 + 16);
      uint64_t v422 = swift_release();
      uint64_t v423 = (*(uint64_t (**)(uint64_t))(v419 + 16))(v422);
      *(void *)(v421 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_1(v423, v424, (uint64_t *)&v980);
      swift_bridgeObjectRelease();
      uint64_t v425 = v406;
      v296 = 0;
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v414, v415, "Deleting item %{public}s", (uint8_t *)v421, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      ((void (*)(void, uint64_t))v960)(v928, v425);
      (*v927)(v933, v971);
      goto LABEL_166;
    }
LABEL_114:

    swift_release();
    swift_release();
    swift_release();
    ((void (*)(char *, uint64_t))v960)(v407, v406);
    (*v927)((char *)v402, v410);
    uint64_t v338 = v973;
    uint64_t v326 = v968;
    v296 = v977;
    goto LABEL_115;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v532 = v873;
  uint64_t v533 = v975;
  v963(v873, v962, v975);
  v534 = Logger.logObject.getter();
  os_log_type_t v535 = static os_log_type_t.error.getter();
  uint64_t v536 = specialized static Array._allocateUninitialized(_:)(0);
  if (os_log_type_enabled(v534, v535))
  {
    v537 = (uint8_t *)swift_slowAlloc();
    v978[0] = 0;
    *(_WORD *)v537 = 0;
    v979 = 0;
    v980 = v537 + 2;
    specialized Sequence.forEach(_:)(v536, (uint64_t)&v980, (uint64_t)v978, (uint64_t)&v979);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v534, v535, "Tried to delete an index path from the visible items diff that is not present in the visible index paths set. The visible index paths are likely not consecutive and the diff would be inconsistent, bailing and reloading data.", v537, 2u);
    swift_slowDealloc();
    swift_release();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v956);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v938);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v859);

  ((void (*)(char *, uint64_t))v960)(v532, v533);
  (*v927)(v933, v971);
  (*v879)(v968, v914);
  (*v880)(v913, v958);
  v356(v919, v973);
  swift_release();
  (*(void (**)(char *, uint64_t))(v937 + 8))(v892, v918);
  v614 = v970;
  LOBYTE(v941->isa) = 1;
  (*v944)((uint8_t **)v372, (uint64_t)v614);
LABEL_226:
  swift_release();
LABEL_227:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_228:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Logger.aiDiff.unsafeMutableAddressor()
{
  if (one-time initialization token for aiDiff != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return __swift_project_value_buffer(v0, (uint64_t)static Logger.aiDiff);
}

uint64_t implicit closure #1 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();

  return swift_getAssociatedTypeWitness();
}

uint64_t closure #1 in implicit closure #3 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)@<X0>(unsigned char *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t closure #2 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 32);
  Swift::Int v7 = v6(a1, a2);
  specialized Set._Variant.insert(_:)(&v11, v7, v8);
  swift_bridgeObjectRelease();
  uint64_t result = v6(a1, a2);
  *a3 = result;
  a3[1] = v10;
  return result;
}

uint64_t closure #3 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  char v9 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 32);
  uint64_t v10 = v9(a4, a5);
  uint64_t v12 = v11;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v15 = *a3;
  *a3 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, v10, v12, isUniquelyReferenced_nonNull_native);
  *a3 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9(a4, a5);
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a8;
  uint64_t v44 = a5;
  uint64_t v9 = v8;
  uint64_t v58 = a2;
  uint64_t v59 = a4;
  uint64_t v57 = a1;
  uint64_t v42 = *(void *)(a5 - 8);
  uint64_t v11 = __chkstk_darwin(a1);
  uint64_t v55 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v53 = (char *)&v40 - v13;
  uint64_t v15 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v41 = (char *)&v40 - v17;
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v18 - 8);
  uint64_t v46 = v18;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v51 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v40 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v40 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v50 = *((void *)v15 - 1);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a6;
  uint64_t v52 = v15;
  uint64_t v60 = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v30 = (char *)&v40 - v29;
  Swift::Int v31 = dispatch thunk of Sequence.underestimatedCount.getter();
  uint64_t v61 = ContiguousArray.init()();
  uint64_t v56 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v31);
  (*(void (**)(char *, uint64_t, void))(v50 + 16))(v28, v48, v52);
  uint64_t v59 = v30;
  uint64_t result = dispatch thunk of Sequence.makeIterator()();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    uint64_t v33 = (uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    uint64_t v34 = (uint64_t (**)(char *, uint64_t))(v54 + 8);
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()();
      uint64_t result = (*v33)(v23, 1, AssociatedTypeWitness);
      if (result == 1) {
        goto LABEL_18;
      }
      v57(v23, v55);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v55, v44);
        return (*v34)(v23, AssociatedTypeWitness);
      }
      uint64_t v9 = 0;
      (*v34)(v23, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      if (!--v31)
      {
        uint64_t v35 = v54;
        uint64_t v36 = v51;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v35 = v54;
  uint64_t v36 = v51;
LABEL_9:
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v55 = *(char **)(v35 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v36, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v37 = v51;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v46);
    return v61;
  }
  else
  {
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v54 = v35 + 32;
    uint64_t v38 = (void (**)(char *, uint64_t))(v35 + 8);
    uint64_t v39 = v41;
    uint64_t v37 = v51;
    while (1)
    {
      v52(v39, v37, AssociatedTypeWitness);
      v57(v39, v53);
      if (v9) {
        break;
      }
      uint64_t v9 = 0;
      (*v38)(v39, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of IteratorProtocol.next()();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v37, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_14;
      }
    }
    (*v38)(v39, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v53, v44);
  }
}

void (*specialized Dictionary.subscript.modify(void *a1, uint64_t a2))(void *a1)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  void v4[4] = specialized Dictionary._Variant.subscript.modify(v4, a2);
  return Dictionary.subscript.modifyspecialized ;
}

void Dictionary.subscript.modifyspecialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);

  free(v1);
}

{
  void *v1;
  void *v2;
  uint64_t vars8;

  uint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 40);
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  swift_bridgeObjectRelease();

  free(v1);
}

void (*specialized Dictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3, void *a4))(void *a1)
{
  uint64_t v8 = malloc(0x38uLL);
  *a1 = v8;
  v8[4] = a3;
  v8[5] = a4;
  swift_bridgeObjectRetain();
  v8[6] = specialized Dictionary._Variant.subscript.modify(v8, a2, a3, a4);
  return Dictionary.subscript.modifyspecialized ;
}

uint64_t closure #4 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  uint64_t v31 = a8;
  uint64_t v15 = type metadata accessor for IndexPath();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v19 = a3(a1, a2);
  if ((v19 & 1) == 0 || !a5) {
    return v19 & 1;
  }
  swift_retain();
  if ((a5(a1, a2) & 1) != 0
    || (uint64_t v29 = v16,
        uint64_t v30 = a7,
        swift_getAssociatedTypeWitness(),
        swift_getAssociatedConformanceWitness(),
        swift_getAssociatedTypeWitness(),
        swift_getAssociatedConformanceWitness(),
        uint64_t v20 = OrderedSet._find(_:)(),
        (v21 & 1) != 0))
  {
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a5);
    return v19 & 1;
  }
  uint64_t v22 = v20;
  uint64_t v23 = *a9;
  uint64_t v24 = *(void *)(*a9 + 16);
  if (v24)
  {
    unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a10);
    if (v26) {
      uint64_t v24 = *(void *)(*(void *)(v23 + 56) + 8 * v25);
    }
    else {
      uint64_t v24 = 0;
    }
  }
  uint64_t result = v22 + v24;
  if (!__OFADD__(v22, v24))
  {
    IndexPath.init(item:section:)();
    type metadata accessor for AIDiffingUpdate();
    specialized OrderedSet._append(_:)((uint64_t)v18);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a5);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v15);
    return v19 & 1;
  }
  __break(1u);
  return result;
}

uint64_t implicit closure #31 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)(a1 + 16) + 16)) {
    specialized __RawDictionaryStorage.find<A>(_:)(a2);
  }
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&_sSiSgMD_0);
  return String.init<A>(describing:)();
}

uint64_t specialized OrderedSet.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a3 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  uint64_t v11 = *(void *)(a3 + 16);
  if (a2)
  {
    swift_retain();
    specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, v10, v11, (void *)(a2 + 16), a2 + 32);
    char v13 = v12;
    swift_release();
    LOBYTE(v11) = (v13 & 1) == 0;
  }
  else if (v11)
  {
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v16 = v17;
    uint64_t v18 = *(void *)(v15 + 56);
    uint64_t v19 = v11 - 1;
    do
    {
      uint64_t v20 = v19;
      v16(v9, v10, v6);
      lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (void (*)(uint64_t))&type metadata accessor for IndexPath);
      LOBYTE(v11) = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v9, v6);
      if (v11) {
        break;
      }
      uint64_t v19 = v20 - 1;
      v10 += v18;
    }
    while (v20);
  }
  return v11 & 1;
}

uint64_t specialized OrderedSet.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IndexPath();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v40 = (char *)v27 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&_s10Foundation9IndexPathVSgMD_0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = *(void *)(a1 + 16);
  v27[2] = a1;
  if (v37)
  {
    char v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    char v12 = v13;
    unint64_t v32 = (*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64);
    uint64_t v36 = a1 + v32;
    uint64_t v39 = *(void *)(v11 + 56);
    uint64_t v34 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    uint64_t v31 = (void (**)(uint64_t, char *, uint64_t))(v11 + 16);
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    swift_bridgeObjectRetain();
    uint64_t v15 = 0;
    uint64_t v35 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 40);
    v27[1] = (v11 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v16 = (uint64_t)v40;
    uint64_t v33 = v10;
    uint64_t v28 = v13;
    uint64_t v29 = v11;
    while (1)
    {
      v12(v10, v36 + v39 * v15, v2);
      uint64_t v17 = *v35;
      (*v35)(v10, 0, 1, v2);
      if ((*v34)(v10, 1, v2) == 1) {
        return swift_bridgeObjectRelease();
      }
      uint64_t v30 = v17;
      (*v31)(v16, v10, v2);
      uint64_t v19 = *v38;
      uint64_t v18 = v38[1];
      uint64_t v20 = v18 + v32;
      uint64_t v21 = *(void *)(v18 + 16);
      if (*v38)
      {
        swift_retain();
        char v12 = v28;
        specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v16, v20, v21, (void *)(v19 + 16), v19 + 32);
        char v23 = v22;
        swift_release();
        if ((v23 & 1) == 0) {
          goto LABEL_4;
        }
        uint64_t v16 = (uint64_t)v40;
      }
      else if (v21)
      {
        do
        {
          v12(v6, v20, v2);
          lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (void (*)(uint64_t))&type metadata accessor for IndexPath);
          char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*v14)(v6, v2);
          if (v24) {
            goto LABEL_4;
          }
          uint64_t v16 = (uint64_t)v40;
          v20 += v39;
        }
        while (--v21);
      }
      specialized OrderedSet._appendNew(_:in:)(v16);
LABEL_4:
      ++v15;
      uint64_t v16 = (uint64_t)v40;
      (*v14)(v40, v2);
      uint64_t v10 = v33;
      if (v15 == v37)
      {
        v30(v33, 1, 1, v2);
        return swift_bridgeObjectRelease();
      }
    }
  }
  unint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  swift_bridgeObjectRetain();
  v25(v10, 1, 1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t specialized OrderedSet.append<A>(contentsOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v30 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&_s10Foundation9IndexPathVSgMD_0);
  __chkstk_darwin(v11 - 8);
  char v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = *(void *)(a2 + 16);
  v30[1] = a2;
  v30[2] = a1;
  if (v39)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v14 = v5 + 16;
    uint64_t v15 = v16;
    unint64_t v34 = (*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64);
    uint64_t v38 = a2 + v34;
    uint64_t v41 = *(void *)(v14 + 56);
    uint64_t v36 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 32);
    uint64_t v33 = (void (**)(char *, char *, uint64_t))(v14 + 16);
    uint64_t v17 = (void (**)(char *, uint64_t))(v14 - 8);
    swift_retain();
    swift_retain();
    uint64_t v18 = 0;
    uint64_t v37 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 40);
    v30[0] = (v14 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v35 = v13;
    uint64_t v42 = v10;
    v30[3] = v14;
    unint64_t v32 = v16;
    while (1)
    {
      v15(v13, v38 + v41 * v18, v4);
      uint64_t v19 = *v37;
      (*v37)(v13, 0, 1, v4);
      if ((*v36)(v13, 1, v4) == 1) {
        goto LABEL_15;
      }
      uint64_t v31 = v19;
      (*v33)(v10, v13, v4);
      uint64_t v21 = *v40;
      uint64_t v20 = v40[1];
      uint64_t v22 = (uint64_t)v10;
      uint64_t v23 = v20 + v34;
      uint64_t v24 = *(void *)(v20 + 16);
      if (*v40)
      {
        swift_retain();
        specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v22, v23, v24, (void *)(v21 + 16), v21 + 32);
        char v26 = v25;
        swift_release();
        uint64_t v15 = v32;
        if ((v26 & 1) == 0) {
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v15 = v32;
        if (v24)
        {
          do
          {
            v15(v8, v23, v4);
            lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (void (*)(uint64_t))&type metadata accessor for IndexPath);
            char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
            (*v17)(v8, v4);
            if (v27) {
              goto LABEL_4;
            }
            v23 += v41;
          }
          while (--v24);
        }
      }
      specialized OrderedSet._appendNew(_:in:)((uint64_t)v42);
LABEL_4:
      ++v18;
      uint64_t v10 = v42;
      (*v17)(v42, v4);
      char v13 = v35;
      if (v18 == v39)
      {
        v31(v35, 1, 1, v4);
        goto LABEL_15;
      }
    }
  }
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  swift_retain();
  swift_retain();
  v28(v13, 1, 1, v4);
LABEL_15:
  swift_release();
  return swift_release();
}

uint64_t UICollectionView.calculateAIDiff<A>(oldItems:newItems:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSObject *a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, objc_class *a7@<X6>, uint64_t a8@<X7>, NSObject *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, NSObject *a14)
{
  int v23 = a5 & 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v20 = [v14 indexPathsForVisibleItems];
  type metadata accessor for IndexPath();
  uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  outlined copy of (@escaping @callee_guaranteed () -> ())?(a6);
  outlined copy of (@escaping @callee_guaranteed () -> ())?(a8);
  outlined copy of (@escaping @callee_guaranteed () -> ())?(a11);
  return AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)(a1, a2, v21, a3, a4, v23, a6, a7, a9, a8, a10, a11, a12, a13, a14);
}

uint64_t UICollectionView.calculateAIDiff<A>(oldItems:newItems:sectionIndex:modelUpdateHandler:identityComparator:visualComparator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, NSObject *a3@<X2>, uint64_t a4@<X3>, objc_class *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, NSObject *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v45 = a4;
  uint64_t v49 = a7;
  uint64_t v50 = a8;
  uint64_t v46 = a5;
  uint64_t v51 = a9;
  uint64_t v52 = a3;
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t v47 = a10;
  uint64_t v48 = a6;
  uint64_t v11 = *(void *)(a11 - 8);
  __chkstk_darwin(a1);
  char v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for _DiffableSection();
  uint64_t v53 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15);
  uint64_t v19 = (uint64_t *)((char *)&v41 - v18);
  id v20 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v20(v13, v41, a11);
  uint64_t v54 = v19;
  *uint64_t v19 = 0;
  v19[1] = 0xE000000000000000;
  uint64_t v21 = (char *)v19 + *(int *)(v14 + 44);
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v22(v21, v13, a11);
  v20(v13, v42, a11);
  void *v17 = 0;
  v17[1] = 0xE000000000000000;
  int v23 = (char *)v17 + *(int *)(v14 + 44);
  uint64_t v43 = v17;
  v22(v23, v13, a11);
  type metadata accessor for _ContiguousArrayStorage();
  uint64_t v24 = v53;
  swift_allocObject();
  uint64_t v25 = static Array._adoptStorage(_:count:)();
  char v26 = *(void (**)(uint64_t, void *, uint64_t))(v24 + 16);
  v26(v27, v54, v14);
  _ss27_finalizeUninitializedArrayySayxGABnlF_0();
  swift_allocObject();
  uint64_t v28 = static Array._adoptStorage(_:count:)();
  v26(v29, v17, v14);
  _ss27_finalizeUninitializedArrayySayxGABnlF_0();
  id v30 = [v44 indexPathsForVisibleItems];
  type metadata accessor for IndexPath();
  uint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v33 = v45;
  unint64_t v32 = v46;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v45);
  uint64_t v34 = v48;
  uint64_t v35 = v49;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v48);
  uint64_t v36 = v50;
  uint64_t v37 = v47;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v50);
  WitnessTable = swift_getWitnessTable();
  AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)(v25, v28, v31, (uint64_t)v52, v52, 0, v33, v32, v51, v34, v35, v36, v37, v14, WitnessTable);
  uint64_t v39 = *(void (**)(void *, uint64_t))(v53 + 8);
  v39(v43, v14);
  return ((uint64_t (*)(void *, uint64_t))v39)(v54, v14);
}

uint64_t type metadata accessor for _DiffableSection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t UICollectionView.performSectionedAIDiff<A>(oldItems:newItems:startingSectionIndex:finalSectionIndex:animated:modelUpdateHandler:identityComparator:visualComparator:alongsideUpdates:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, char a5, int a6, uint64_t a7, objc_class *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(void), uint64_t a14, void (*a15)(uint64_t), uint64_t a16, uint64_t a17, NSObject *a18)
{
  uint64_t v39 = a3;
  uint64_t v33 = a7;
  uint64_t v34 = a8;
  int v45 = a6;
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  uint64_t v43 = a14;
  id v44 = a13;
  uint64_t v42 = a15;
  uint64_t v40 = a4;
  uint64_t v41 = a16;
  uint64_t v35 = a18;
  uint64_t v36 = a17;
  uint64_t v32 = a11;
  int v37 = a5 & 1;
  uint64_t v19 = type metadata accessor for AIDiffingUpdate();
  uint64_t v38 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v21 = ((char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v22 = [v18 indexPathsForVisibleItems];
  type metadata accessor for IndexPath();
  uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v24 = v33;
  uint64_t v25 = v34;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v33);
  outlined copy of (@escaping @callee_guaranteed () -> ())?(a9);
  uint64_t v26 = v32;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(v32);
  AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)(v30, v31, v23, v39, v40, v37, v24, v25, v21, a9, a10, v26, a12, v36, v35);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AIDiffingUpdate>);
  unint64_t v27 = (*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_100493400;
  outlined init with copy of AIDiffingUpdate((uint64_t)v21, v28 + v27);
  UICollectionView.applyUpdates(_:animated:alongsideUpdates:completion:)(v28, v45, v44, v43, v42, v41);
  swift_bridgeObjectRelease();
  return outlined destroy of AIDiffingUpdate((uint64_t)v21);
}

uint64_t UICollectionView.applyUpdates(_:animated:alongsideUpdates:completion:)(uint64_t a1, int a2, void (*a3)(void), uint64_t a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v137 = a6;
  v143 = a5;
  v144 = a3;
  int v134 = a2;
  uint64_t v10 = type metadata accessor for IndexSet();
  uint64_t v132 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  v131 = (char *)&v131 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (int *)type metadata accessor for AIDiffingUpdate();
  uint64_t v155 = (void *)*((void *)v12 - 1);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v131 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v131 - v16;
  swift_unknownObjectWeakInit();
  if (one-time initialization token for aiDiff != -1) {
    goto LABEL_47;
  }
  while (1)
  {
    uint64_t v18 = type metadata accessor for Logger();
    uint64_t v19 = __swift_project_value_buffer(v18, (uint64_t)static Logger.aiDiff);
    swift_bridgeObjectRetain();
    uint64_t v135 = v19;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    BOOL v22 = os_log_type_enabled(v20, v21);
    id v136 = v7;
    if (v22)
    {
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 134217984;
      *(void *)(v23 + 4) = *(void *)(a1 + 16);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "applyUpdates called with %ld updates", (uint8_t *)v23, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    uint64_t v145 = swift_allocBox();
    uint64_t v25 = v24;
    IndexSet.init()();
    uint64_t v133 = v10;
    uint64_t v146 = swift_allocBox();
    uint64_t v152 = v26;
    IndexSet.init()();
    uint64_t v27 = swift_allocObject();
    uint64_t v148 = v27;
    *(void *)(v27 + 16) = _swiftEmptyArrayStorage;
    v153 = (void *)(v27 + 16);
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = 0;
    uint64_t v149 = v10 + 16;
    *(void *)(v10 + 24) = _swiftEmptyArrayStorage;
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = 0;
    uint64_t v150 = v28 + 16;
    *(void *)(v28 + 24) = _swiftEmptyArrayStorage;
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = 0;
    uint64_t v151 = v29 + 16;
    uint64_t v141 = v29;
    *(void *)(v29 + 24) = _swiftEmptyArrayStorage;
    uint64_t v30 = swift_allocObject();
    uint64_t v140 = v30;
    *(void *)(v30 + 16) = _swiftEmptyArrayStorage;
    uint64_t v154 = (void *)(v30 + 16);
    uint64_t v31 = *(void *)(a1 + 16);
    uint64_t v147 = v28;
    uint64_t v139 = v10;
    uint64_t v142 = a4;
    uint64_t v138 = a1;
    if (!v31)
    {
LABEL_14:
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Final update:", v43, 2u);
        swift_slowDealloc();
      }

      swift_retain_n();
      id v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = 136315138;
        swift_beginAccess();
        uint64_t v47 = v132;
        uint64_t v48 = v131;
        uint64_t v49 = v133;
        (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v131, v25, v133);
        lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (void (*)(uint64_t))&type metadata accessor for IndexSet);
        uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v52 = v51;
        (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
        *(void *)(v46 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_1(v50, v52, aBlock);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v44, v45, " - Inserted sections: %s", (uint8_t *)v46, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      swift_retain_n();
      uint64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = swift_slowAlloc();
        uint64_t v155 = (void *)swift_slowAlloc();
        aBlock[0] = (uint64_t)v155;
        *(_DWORD *)uint64_t v55 = 136315138;
        uint64_t v56 = v152;
        swift_beginAccess();
        uint64_t v57 = v132;
        uint64_t v58 = v131;
        uint64_t v59 = v56;
        uint64_t v60 = v133;
        (*(void (**)(char *, uint64_t, uint64_t))(v132 + 16))(v131, v59, v133);
        lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, (void (*)(uint64_t))&type metadata accessor for IndexSet);
        uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v63 = v62;
        (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v60);
        *(void *)(v55 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_1(v61, v63, aBlock);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v53, v54, " - Deleted sections: %s", (uint8_t *)v55, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      swift_retain_n();
      uint64_t v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v66 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v66 = 136315138;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, Int));
        uint64_t v67 = Array.description.getter();
        unint64_t v69 = v68;
        swift_bridgeObjectRelease();
        *(void *)(v66 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_1(v67, v69, aBlock);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v64, v65, " - Section move pairs: %s", (uint8_t *)v66, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      swift_retain_n();
      uint64_t v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v70, v71))
      {
        uint64_t v72 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v72 = 136315138;
        swift_beginAccess();
        type metadata accessor for IndexPath();
        swift_retain();
        uint64_t v73 = Array.description.getter();
        unint64_t v75 = v74;
        swift_release();
        *(void *)(v72 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_1(v73, v75, aBlock);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v70, v71, " - Inserted index paths: %s", (uint8_t *)v72, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      swift_retain_n();
      uint64_t v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v76, v77))
      {
        uint64_t v78 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v78 = 136315138;
        swift_beginAccess();
        type metadata accessor for IndexPath();
        swift_retain();
        uint64_t v79 = Array.description.getter();
        unint64_t v81 = v80;
        swift_release();
        *(void *)(v78 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_1(v79, v81, aBlock);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v76, v77, " - Deleted index paths: %s", (uint8_t *)v78, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      uint64_t v82 = v141;
      swift_retain_n();
      uint64_t v83 = Logger.logObject.getter();
      os_log_type_t v84 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v83, v84))
      {
        uint64_t v85 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v85 = 136315138;
        swift_beginAccess();
        type metadata accessor for IndexPath();
        swift_retain();
        uint64_t v86 = Array.description.getter();
        unint64_t v88 = v87;
        swift_release();
        uint64_t v89 = v141;
        *(void *)(v85 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_1(v86, v88, aBlock);
        swift_release_n();
        uint64_t v82 = v89;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v83, v84, " - Updated index paths: %s", (uint8_t *)v85, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      uint64_t v90 = v140;
      swift_retain_n();
      uint64_t v91 = Logger.logObject.getter();
      os_log_type_t v92 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v91, v92))
      {
        uint64_t v93 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v93 = 136315138;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (IndexPath, IndexPath));
        uint64_t v94 = Array.description.getter();
        unint64_t v96 = v95;
        swift_bridgeObjectRelease();
        uint64_t v97 = v141;
        *(void *)(v93 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_1(v94, v96, aBlock);
        swift_release_n();
        uint64_t v82 = v97;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v91, v92, " - Item move pairs: %s", (uint8_t *)v93, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      id v98 = v136;
      a1 = v138;
      uint64_t v99 = v147;
      uint64_t v10 = v139;
      char v100 = v134;
      uint64_t v101 = v146;
      goto LABEL_41;
    }
    if (v31 == 1) {
      break;
    }
    uint64_t v7 = (void *)(a1 + ((*((unsigned __int8 *)v155 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v155 + 80)));
    swift_bridgeObjectRetain();
    a4 = 0;
    while (1)
    {
      a1 = a4 + 1;
      if (__OFADD__(a4, 1)) {
        break;
      }
      outlined init with copy of AIDiffingUpdate((uint64_t)v7 + v155[9] * a4, (uint64_t)v15);
      if (*v15 == 1)
      {
        uint64_t v102 = v138;
        swift_bridgeObjectRelease();
        specialized closure #1 in UICollectionView.applyUpdates(_:animated:alongsideUpdates:completion:)(v102, (uint64_t)v158, v144, v142, v143);
        outlined destroy of AIDiffingUpdate((uint64_t)v15);
        swift_unknownObjectWeakDestroy();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        goto LABEL_39;
      }
      IndexSet.formUnion(_:)();
      IndexSet.formUnion(_:)();
      uint64_t v32 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v32);
      uint64_t v33 = (uint64_t *)&v15[v12[9]];
      uint64_t v34 = *v33;
      uint64_t v35 = v33[1];
      swift_retain();
      swift_retain();
      specialized OrderedSet.append<A>(contentsOf:)(v34, v35);
      swift_release();
      swift_release();
      uint64_t v36 = (uint64_t *)&v15[v12[10]];
      uint64_t v37 = *v36;
      uint64_t v38 = v36[1];
      swift_retain();
      swift_retain();
      specialized OrderedSet.append<A>(contentsOf:)(v37, v38);
      swift_release();
      swift_release();
      uint64_t v39 = &v15[v12[11]];
      uint64_t v17 = *(unsigned char **)v39;
      uint64_t v10 = *((void *)v39 + 1);
      swift_retain();
      swift_retain();
      specialized OrderedSet.append<A>(contentsOf:)((uint64_t)v17, v10);
      swift_release();
      swift_release();
      size_t v40 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v40);
      outlined destroy of AIDiffingUpdate((uint64_t)v15);
      ++a4;
      if (a1 == v31)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_47:
    swift_once();
  }
  outlined init with copy of AIDiffingUpdate(a1 + ((*((unsigned __int8 *)v155 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v155 + 80)), (uint64_t)v17);
  if (*v17 == 1)
  {
    specialized closure #1 in UICollectionView.applyUpdates(_:animated:alongsideUpdates:completion:)(a1, (uint64_t)v158, v144, a4, v143);
    outlined destroy of AIDiffingUpdate((uint64_t)v17);
    swift_unknownObjectWeakDestroy();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_39:
    swift_release();
    swift_release();
LABEL_43:
    swift_release();
    uint64_t v124 = 0;
    return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v124);
  }
  uint64_t v103 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v132 + 24);
  uint64_t v104 = v133;
  v103(v25, &v17[v12[6]], v133);
  v103(v152, &v17[v12[7]], v104);
  void *v153 = *(void *)&v17[v12[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v105 = &v17[v12[9]];
  uint64_t v106 = v105[1];
  *(void *)(v10 + 16) = *v105;
  *(void *)(v10 + 24) = v106;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  uint64_t v107 = &v17[v12[10]];
  uint64_t v108 = v107[1];
  *(void *)(v147 + 16) = *v107;
  *(void *)(v147 + 24) = v108;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  uint64_t v109 = &v17[v12[11]];
  uint64_t v110 = v109[1];
  uint64_t v111 = v141;
  *(void *)(v141 + 16) = *v109;
  *(void *)(v111 + 24) = v110;
  swift_retain();
  swift_retain();
  uint64_t v99 = v147;
  swift_release();
  swift_release();
  uint64_t v112 = *(void *)&v17[v12[12]];
  swift_bridgeObjectRetain();
  outlined destroy of AIDiffingUpdate((uint64_t)v17);
  *uint64_t v154 = v112;
  swift_bridgeObjectRelease();
  id v98 = v136;
  uint64_t v90 = v140;
  uint64_t v101 = v146;
  char v100 = v134;
  uint64_t v82 = v111;
LABEL_41:
  uint64_t v113 = (void *)swift_allocObject();
  v113[2] = v98;
  v113[3] = a1;
  uint64_t v114 = v145;
  v113[4] = v101;
  v113[5] = v114;
  v113[6] = v148;
  v113[7] = v10;
  v113[8] = v99;
  v113[9] = v90;
  uint64_t v115 = v142;
  v113[10] = v144;
  v113[11] = v115;
  uint64_t v116 = v143;
  v113[12] = v82;
  v113[13] = v116;
  uint64_t v117 = v82;
  uint64_t v118 = v137;
  v113[14] = v137;
  if (v100)
  {
    swift_bridgeObjectRetain();
    uint64_t v119 = v145;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v120 = v143;
    outlined copy of (@escaping @callee_guaranteed () -> ())?((uint64_t)v143);
    uint64_t v121 = v144;
    uint64_t v122 = v142;
    outlined copy of (@escaping @callee_guaranteed () -> ())?((uint64_t)v144);
    id v123 = v98;
    closure #2 in UICollectionView.applyUpdates(_:animated:alongsideUpdates:completion:)(v123, a1, v146, v119, v148, v10, v147, v140, (uint64_t)v121, v122, v117, (uint64_t)v120, v118);
    swift_release();
    swift_unknownObjectWeakDestroy();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_43;
  }
  uint64_t v155 = self;
  uint64_t v125 = swift_allocObject();
  *(void *)(v125 + 16) = partial apply for closure #2 in UICollectionView.applyUpdates(_:animated:alongsideUpdates:completion:);
  *(void *)(v125 + 24) = v113;
  uint64_t v126 = swift_allocObject();
  uint64_t v124 = partial apply for closure #3 in View.actionContextMenu<A, B>(title:menu:excluding:preview:previewAction:);
  *(void *)(v126 + 16) = partial apply for closure #3 in View.actionContextMenu<A, B>(title:menu:excluding:preview:previewAction:);
  *(void *)(v126 + 24) = v125;
  aBlock[4] = (uint64_t)partial apply for thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v157 = (void *)v126;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_39;
  uint64_t v154 = _Block_copy(aBlock);
  v153 = v157;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed () -> ())?((uint64_t)v143);
  outlined copy of (@escaping @callee_guaranteed () -> ())?((uint64_t)v144);
  id v127 = v136;
  swift_retain();
  swift_retain();
  swift_release();
  uint64_t v128 = v154;
  [v155 performWithoutAnimation:v154];
  _Block_release(v128);
  swift_release();
  swift_unknownObjectWeakDestroy();
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0) {
    return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v124);
  }
  __break(1u);
  return result;
}

uint64_t UICollectionView.performAIDiff<A>(oldItems:newItems:sectionIndex:animated:modelUpdateHandler:identityComparator:visualComparator:completion:)(uint64_t a1, uint64_t a2, NSObject *a3, int a4, uint64_t a5, objc_class *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(uint64_t), uint64_t a12, long long a13)
{
  uint64_t v27 = a8;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v24 = a5;
  int v30 = a4;
  uint64_t v28 = a12;
  uint64_t v29 = a11;
  long long v23 = a13;
  uint64_t v16 = type metadata accessor for AIDiffingUpdate();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = ((char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  UICollectionView.calculateAIDiff<A>(oldItems:newItems:sectionIndex:modelUpdateHandler:identityComparator:visualComparator:)(a1, a2, a3, v24, v25, v26, v27, a9, v19, a10, a13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AIDiffingUpdate>);
  unint64_t v20 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_100493400;
  outlined init with copy of AIDiffingUpdate((uint64_t)v19, v21 + v20);
  UICollectionView.applyUpdates(_:animated:alongsideUpdates:completion:)(v21, v30, 0, 0, v29, v28);
  swift_bridgeObjectRelease();
  return outlined destroy of AIDiffingUpdate((uint64_t)v19);
}

void specialized closure #1 in UICollectionView.applyUpdates(_:animated:alongsideUpdates:completion:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v25 = a4;
  uint64_t v8 = type metadata accessor for AIDiffingUpdate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for aiDiff != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.aiDiff);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Found update with needsReloadData=true, reloading", v15, 2u);
    swift_slowDealloc();
  }

  uint64_t v16 = *(void *)(a1 + 16);
  if (v16)
  {
    uint64_t v24 = a3;
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v18 = *(void *)(v9 + 72);
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of AIDiffingUpdate(v17, (uint64_t)v11);
      uint64_t v19 = (void (*)(uint64_t))*((void *)v11 + 1);
      outlined copy of (@escaping @callee_guaranteed () -> ())?((uint64_t)v19);
      uint64_t v20 = outlined destroy of AIDiffingUpdate((uint64_t)v11);
      if (v19)
      {
        v19(v20);
        outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v19);
      }
      v17 += v18;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    a3 = v24;
  }
  swift_beginAccess();
  Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    BOOL v22 = Strong;
    [Strong reloadData];
  }
  if (a3) {
    a3();
  }
  if (a5) {
    a5(1);
  }
}

uint64_t closure #2 in UICollectionView.applyUpdates(_:animated:alongsideUpdates:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  type metadata accessor for IndexSet();
  uint64_t v18 = swift_projectBox();
  uint64_t v19 = swift_projectBox();
  uint64_t v20 = a5 + 16;
  uint64_t v21 = a6 + 16;
  uint64_t v22 = a8 + 16;
  id v23 = [a1 indexPathsForVisibleItems];
  type metadata accessor for IndexPath();
  uint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v25 = specialized Set.init<A>(_:)(v24);
  swift_bridgeObjectRelease();
  uint64_t v26 = (void *)swift_allocObject();
  v26[2] = a2;
  v26[3] = a1;
  v26[4] = v18;
  v26[5] = v19;
  v26[6] = v20;
  v26[7] = v21;
  v26[8] = a7 + 16;
  v26[9] = v22;
  v26[10] = v25;
  v26[11] = a9;
  v26[12] = a10;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = partial apply for closure #1 in closure #2 in UICollectionView.applyUpdates(_:animated:alongsideUpdates:completion:);
  *(void *)(v27 + 24) = v26;
  uint64_t v39 = (void (*)(int))thunk for @escaping @callee_guaranteed () -> ()partial apply;
  size_t v40 = (void *)v27;
  aBlock = _NSConcreteStackBlock;
  uint64_t v36 = 1107296256;
  uint64_t v37 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v38 = &block_descriptor_29;
  uint64_t v28 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  id v29 = a1;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(a9);
  swift_retain();
  swift_release();
  int v30 = (void *)swift_allocObject();
  v30[2] = a11;
  v30[3] = v29;
  void v30[4] = a12;
  v30[5] = a13;
  uint64_t v39 = partial apply for closure #2 in closure #2 in UICollectionView.applyUpdates(_:animated:alongsideUpdates:completion:);
  size_t v40 = v30;
  aBlock = _NSConcreteStackBlock;
  uint64_t v36 = 1107296256;
  uint64_t v37 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  uint64_t v38 = &block_descriptor_35;
  uint64_t v31 = _Block_copy(&aBlock);
  id v32 = v29;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed () -> ())?(a12);
  swift_release();
  [v32 performBatchUpdates:v28 completion:v31];
  _Block_release(v31);
  _Block_release(v28);
  swift_release();
  LOBYTE(v31) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v31) {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in closure #2 in UICollectionView.applyUpdates(_:animated:alongsideUpdates:completion:)(uint64_t a1, id a2, uint64_t a3, void (*a4)(void, void, void), uint64_t *a5, unsigned int (**a6)(uint64_t, uint64_t, uint64_t), uint64_t *a7, uint64_t *a8, char *a9, unint64_t a10)
{
  uint64_t v139 = a8;
  id v127 = a7;
  uint64_t v138 = a6;
  id v136 = a5;
  uint64_t v135 = a4;
  uint64_t v121 = a3;
  uint64_t v12 = type metadata accessor for IndexPath();
  uint64_t v126 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v118 = (char *)&v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v142 = (char *)&v113 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v140 = (char *)&v113 - v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v113 - v19;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&_s10Foundation9IndexPathVSgMD_0);
  __chkstk_darwin(v21 - 8);
  int v134 = (char *)&v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (IndexPath, IndexPath)?);
  __chkstk_darwin(v23 - 8);
  uint64_t v141 = (char *)&v113 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for IndexSet();
  uint64_t v25 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  uint64_t v119 = (char *)&v113 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for AIDiffingUpdate() - 8;
  __chkstk_darwin(v27);
  int v30 = (char *)&v113 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = *(void *)(a1 + 16);
  id v137 = a2;
  if (v31)
  {
    uint64_t v32 = a1 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
    uint64_t v33 = *(void *)(v28 + 72);
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of AIDiffingUpdate(v32, (uint64_t)v30);
      uint64_t v34 = (void (*)(uint64_t))*((void *)v30 + 1);
      outlined copy of (@escaping @callee_guaranteed () -> ())?((uint64_t)v34);
      uint64_t v35 = outlined destroy of AIDiffingUpdate((uint64_t)v30);
      if (v34)
      {
        v34(v35);
        outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v34);
      }
      v32 += v33;
      --v31;
    }
    while (v31);
    swift_bridgeObjectRelease();
    a2 = v137;
  }
  uint64_t v36 = v121;
  swift_beginAccess();
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  uint64_t v38 = v119;
  uint64_t v39 = v120;
  v37(v119, v36, v120);
  IndexSet._bridgeToObjectiveC()(v40);
  os_log_type_t v42 = v41;
  uint64_t v43 = *(void (**)(char *, uint64_t))(v25 + 8);
  v43(v38, v39);
  [a2 deleteSections:v42];

  id v44 = v135;
  swift_beginAccess();
  uint64_t v116 = v25 + 16;
  uint64_t v115 = v37;
  v37(v38, (uint64_t)v44, v39);
  IndexSet._bridgeToObjectiveC()(v45);
  uint64_t v47 = v46;
  uint64_t v117 = v25 + 8;
  uint64_t v114 = v43;
  v43(v38, v39);
  [a2 insertSections:v47];

  uint64_t v48 = v136;
  swift_beginAccess();
  uint64_t v49 = *v48;
  uint64_t v50 = *(void *)(*v48 + 16);
  uint64_t v51 = (uint64_t)v141;
  if (v50)
  {
    swift_bridgeObjectRetain();
    unint64_t v52 = (void *)(v49 + 40);
    do
    {
      [a2 moveSection:*(v52 - 1) toSection:*v52];
      v52 += 2;
      --v50;
    }
    while (v50);
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  swift_retain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_endAccess();
  swift_release();
  [a2 insertItemsAtIndexPaths:isa];

  swift_beginAccess();
  swift_retain();
  Class v54 = Array._bridgeToObjectiveC()().super.isa;
  swift_endAccess();
  swift_release();
  [a2 deleteItemsAtIndexPaths:v54];

  uint64_t v55 = v139;
  swift_beginAccess();
  uint64_t v56 = *v55;
  uint64_t v57 = *(void *)(v56 + 16);
  uint64_t v135 = (void (*)(void, void, void))v56;
  if (v57)
  {
    uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (IndexPath, IndexPath));
    uint64_t v59 = *(void *)(v58 - 8);
    uint64_t v60 = v56 + ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80));
    id v136 = *(uint64_t **)(v59 + 72);
    uint64_t v139 = (uint64_t *)(v59 + 56);
    uint64_t v138 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48);
    uint64_t v61 = (void (**)(char *, uint64_t, uint64_t))(v126 + 32);
    unint64_t v62 = (void (**)(char *, uint64_t))(v126 + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of (IndexPath, IndexPath)(v60, v51);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))*v139)(v51, 0, 1, v58);
      if ((*v138)(v51, 1, v58) == 1) {
        break;
      }
      unint64_t v63 = *v61;
      (*v61)(v20, v51 + *(int *)(v58 + 48), v12);
      uint64_t v64 = v140;
      v63(v140, v51, v12);
      Class v65 = IndexPath._bridgeToObjectiveC()().super.isa;
      uint64_t v66 = *v62;
      (*v62)(v64, v12);
      Class v67 = IndexPath._bridgeToObjectiveC()().super.isa;
      [v137 moveItemAtIndexPath:v65 toIndexPath:v67];

      v66(v20, v12);
      uint64_t v51 = (uint64_t)v141;
      v60 += (uint64_t)v136;
      if (!--v57) {
        goto LABEL_17;
      }
    }
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_17:
    uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (IndexPath, IndexPath));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v51, 1, 1, v68);
  }
  swift_bridgeObjectRelease();
  v144 = _swiftEmptyArrayStorage;
  id v69 = [v137 _indexPathsForPreparedItems];
  uint64_t v70 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v132 = *(char **)(v70 + 16);
  if (v132)
  {
    uint64_t v71 = v126;
    unint64_t v128 = (*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
    unint64_t v131 = v70 + v128;
    swift_beginAccess();
    swift_beginAccess();
    unint64_t v72 = 0;
    uint64_t v141 = (char *)(v71 + 16);
    uint64_t v129 = v71 + 48;
    id v136 = (uint64_t *)(v71 + 32);
    uint64_t v140 = a9;
    uint64_t v139 = (uint64_t *)(a9 + 56);
    uint64_t v73 = (void (**)(char *, uint64_t))(v71 + 8);
    uint64_t v130 = v71 + 56;
    unint64_t v113 = (v71 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v74 = (uint64_t)v142;
    unint64_t v75 = v134;
    uint64_t v125 = v70;
    while (1)
    {
      if (v72 >= *(void *)(v70 + 16))
      {
        __break(1u);
        goto LABEL_56;
      }
      uint64_t v76 = *(void *)(v71 + 72);
      os_log_type_t v77 = *(void (**)(char *, unint64_t, uint64_t))(v71 + 16);
      v77(v75, v131 + v76 * v72, v12);
      uint64_t v124 = *(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56);
      v124(v75, 0, 1, v12);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v75, 1, v12) == 1) {
        goto LABEL_47;
      }
      uint64_t v138 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v72;
      uint64_t v135 = (void (*)(void, void, void))*v136;
      v135(v74, v75, v12);
      if (*((void *)v140 + 2)
        && (uint64_t v78 = v140,
            lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (void (*)(uint64_t))&type metadata accessor for IndexPath), uint64_t v79 = dispatch thunk of Hashable._rawHashValue(seed:)(), v80 = -1 << v78[32], v81 = v79 & ~v80, ((*(unint64_t *)((char *)v139 + ((v81 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v81) & 1) != 0))
      {
        uint64_t v82 = ~v80;
        while (1)
        {
          v77(v20, *((void *)v140 + 6) + v81 * v76, v12);
          lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (void (*)(uint64_t))&type metadata accessor for IndexPath);
          char v83 = dispatch thunk of static Equatable.== infix(_:_:)();
          os_log_type_t v84 = *v73;
          (*v73)(v20, v12);
          if (v83) {
            break;
          }
          unint64_t v81 = (v81 + 1) & v82;
          if (((*(unint64_t *)((char *)v139 + ((v81 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v81) & 1) == 0) {
            goto LABEL_30;
          }
        }
      }
      else
      {
LABEL_30:
        uint64_t v85 = *v127;
        uint64_t v86 = v127[1];
        uint64_t v87 = v86 + v128;
        uint64_t v88 = *(void *)(v86 + 16);
        uint64_t v133 = (unint64_t)v73 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        if (v85)
        {
          id v123 = (void *)(v85 + 16);
          uint64_t v122 = v85 + 32;
          swift_retain();
          swift_retain();
          uint64_t v89 = (uint64_t)v142;
          specialized _HashTable.UnsafeHandle._find<A>(_:in:)((uint64_t)v142, v87, v88, v123, v122);
          char v91 = v90;
          swift_release();
          swift_release();
          uint64_t v71 = v126;
          if (v91) {
            goto LABEL_37;
          }
          os_log_type_t v84 = *v73;
        }
        else
        {
          swift_retain();
          if (!v88)
          {
LABEL_36:
            swift_release();
            uint64_t v71 = v126;
            uint64_t v89 = (uint64_t)v142;
LABEL_37:
            uint64_t v93 = v119;
            uint64_t v94 = v120;
            v115(v119, v121, v120);
            Swift::Int v95 = IndexPath.section.getter();
            Swift::Bool v96 = IndexSet.contains(_:)(v95);
            v114(v93, v94);
            uint64_t v74 = v89;
            if (!v96)
            {
              v77(v118, v89, v12);
              uint64_t v97 = v144;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v97 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v97[2] + 1, 1, (char *)v97);
              }
              id v98 = (void (*)(char *, char *, uint64_t))v135;
              unint64_t v100 = v97[2];
              unint64_t v99 = v97[3];
              if (v100 >= v99 >> 1) {
                uint64_t v97 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v99 > 1, v100 + 1, 1, (char *)v97);
              }
              v97[2] = v100 + 1;
              v98((char *)v97 + v128 + v100 * v76, v118, v12);
              v144 = v97;
            }
            (*v73)((char *)v74, v12);
            goto LABEL_22;
          }
          while (1)
          {
            v77(v20, v87, v12);
            lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (void (*)(uint64_t))&type metadata accessor for IndexPath);
            char v92 = dispatch thunk of static Equatable.== infix(_:_:)();
            os_log_type_t v84 = *v73;
            (*v73)(v20, v12);
            if (v92) {
              break;
            }
            v87 += v76;
            if (!--v88) {
              goto LABEL_36;
            }
          }
          swift_release();
          uint64_t v71 = v126;
        }
      }
      uint64_t v74 = (uint64_t)v142;
      v84(v142, v12);
LABEL_22:
      unint64_t v75 = v134;
      uint64_t v70 = v125;
      unint64_t v72 = (unint64_t)v138 + 1;
      if ((char *)v138 + 1 == v132)
      {
        v124(v134, 1, 1, v12);
        goto LABEL_47;
      }
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v126 + 56))(v134, 1, 1, v12);
LABEL_47:
  swift_bridgeObjectRelease();
  unint64_t v72 = a10;
  if (one-time initialization token for aiDiff != -1) {
LABEL_56:
  }
    swift_once();
  uint64_t v101 = type metadata accessor for Logger();
  __swift_project_value_buffer(v101, (uint64_t)static Logger.aiDiff);
  uint64_t v102 = Logger.logObject.getter();
  os_log_type_t v103 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v102, v103))
  {
    uint64_t v104 = swift_slowAlloc();
    uint64_t v143 = swift_slowAlloc();
    *(_DWORD *)uint64_t v104 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v105 = Array.description.getter();
    unint64_t v107 = v106;
    swift_bridgeObjectRelease();
    *(void *)(v104 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_1(v105, v107, &v143);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v102, v103, "Cleaning up prefetched cells by reloading index paths: %s", (uint8_t *)v104, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  swift_bridgeObjectRetain();
  Class v108 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v137 reloadItemsAtIndexPaths:v108];

  if (v72)
  {
    swift_retain();
    uint64_t v109 = Logger.logObject.getter();
    os_log_type_t v110 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v109, v110))
    {
      uint64_t v111 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v111 = 0;
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "Performing alongside updates", v111, 2u);
      swift_slowDealloc();
    }

    ((void (*)(void))v72)();
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v72);
  }
  return swift_bridgeObjectRelease();
}

void closure #2 in closure #2 in UICollectionView.applyUpdates(_:animated:alongsideUpdates:completion:)(int a1, uint64_t a2, void *a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for IndexPath();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&_s10Foundation9IndexPathVSgMD_0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = a2 + 16;
  if (one-time initialization token for aiDiff != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.aiDiff);
  swift_retain_n();
  uint64_t v18 = Logger.logObject.getter();
  int v57 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, (os_log_type_t)v57))
  {
    os_log_t v46 = v18;
    uint64_t v48 = a3;
    int v49 = a1;
    uint64_t v50 = a5;
    uint64_t v51 = a4;
    uint64_t v19 = (_DWORD *)swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    uint64_t v63 = v44;
    os_log_type_t v45 = v19;
    *uint64_t v19 = 136315138;
    swift_beginAccess();
    uint64_t v20 = *(void *)(a2 + 16);
    uint64_t v21 = *(void *)(a2 + 24);
    uint64_t v47 = a2;
    uint64_t v64 = 0;
    unint64_t v65 = 0xE000000000000000;
    swift_retain();
    swift_retain();
    v22._uint64_t countAndFlagsBits = 91;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    uint64_t v23 = *(void *)(v21 + 16);
    uint64_t v43 = v20;
    uint64_t v52 = v21;
    if (v23)
    {
      unint64_t v42 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      uint64_t v24 = v21 + v42;
      uint64_t v61 = *(void *)(v11 + 72);
      uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
      swift_retain();
      swift_retain();
      v25(v16, v24, v10);
      uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v26(v16, 0, 1, v10);
      uint64_t v59 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
      uint64_t v60 = v11 + 48;
      if (v59(v16, 1, v10) != 1)
      {
        uint64_t v58 = v26;
        v41[1] = (v11 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
        uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
        uint64_t v56 = v11 + 32;
        v55(v13, v16, v10);
        __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCyypGMD_0);
        uint64_t v27 = swift_allocObject();
        long long v54 = xmmword_100493400;
        *(_OWORD *)(v27 + 16) = xmmword_100493400;
        *(void *)(v27 + 56) = v10;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v27 + 32));
        v25((char *)boxed_opaque_existential_1, (uint64_t)v13, v10);
        print<A>(_:separator:terminator:to:)();
        swift_bridgeObjectRelease();
        uint64_t v53 = *(void (**)(char *, uint64_t))(v11 + 8);
        v53(v13, v10);
        uint64_t v29 = v23 - 1;
        if (v23 == 1)
        {
          v58(v16, 1, 1, v10);
        }
        else
        {
          uint64_t v31 = v52 + v61 + v42;
          uint64_t v32 = v58;
          while (1)
          {
            v25(v16, v31, v10);
            v32(v16, 0, 1, v10);
            if (v59(v16, 1, v10) == 1) {
              break;
            }
            v55(v13, v16, v10);
            v33._uint64_t countAndFlagsBits = 8236;
            v33._object = (void *)0xE200000000000000;
            String.append(_:)(v33);
            __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCyypGMD_0);
            uint64_t v34 = swift_allocObject();
            *(_OWORD *)(v34 + 16) = v54;
            *(void *)(v34 + 56) = v10;
            uint64_t v35 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v34 + 32));
            v25((char *)v35, (uint64_t)v13, v10);
            print<A>(_:separator:terminator:to:)();
            uint64_t v32 = v58;
            swift_bridgeObjectRelease();
            v53(v13, v10);
            v31 += v61;
            if (!--v29)
            {
              v32(v16, 1, 1, v10);
              break;
            }
          }
        }
      }
    }
    else
    {
      int v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      swift_retain();
      swift_retain();
      v30(v16, 1, 1, v10);
    }
    swift_release();
    swift_release();
    v36._uint64_t countAndFlagsBits = 93;
    v36._object = (void *)0xE100000000000000;
    String.append(_:)(v36);
    swift_release();
    swift_release();
    unint64_t v37 = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_1(v64, v65, &v63);
    uint64_t v38 = (uint8_t *)v45;
    *(void *)(v45 + 1) = v37;
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_t v39 = v46;
    _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v57, "Reconfiguring index paths: %s", v38, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a4 = v51;
    LOBYTE(a1) = v49;
    a3 = v48;
  }
  else
  {

    swift_release_n();
  }
  swift_beginAccess();
  swift_retain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_endAccess();
  swift_release();
  [a3 reconfigureItemsAtIndexPaths:isa];

  if (a4) {
    a4(a1 & 1);
  }
}

uint64_t one-time initialization function for aiDiff()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.aiDiff);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.aiDiff);
  return Logger.init(subsystem:category:)();
}

uint64_t specialized UnsafeMutablePointer.deallocate()()
{
  return swift_slowDealloc();
}

uint64_t specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v3);
  type metadata accessor for IndexPath();
  uint64_t v1 = Array.description.getter();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(void (*a1)(uint64_t))
{
  uint64_t v2 = type metadata accessor for IndexPath();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v4);
  lazy protocol witness table accessor for type IndexSet and conformance IndexSet((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (void (*)(uint64_t))&type metadata accessor for IndexPath);
  uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v7;
}

uint64_t type metadata accessor for AIDiffingUpdate()
{
  uint64_t result = type metadata singleton initialization cache for AIDiffingUpdate;
  if (!type metadata singleton initialization cache for AIDiffingUpdate) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of AIDiffingUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AIDiffingUpdate();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AIDiffingUpdate(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AIDiffingUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU__0(void *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  unint64_t v8 = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_1(v6, v7, a3);
  uint64_t v9 = (void *)*a1;
  *(void *)*a1 = v8;
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v9 + 1;
  return result;
}

uint64_t sub_1002AAE40()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1002AAE78()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002AAEB8()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(v0 + 80)) {
    swift_release();
  }
  swift_release();
  if (*(void *)(v0 + 104)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in UICollectionView.applyUpdates(_:animated:alongsideUpdates:completion:)()
{
  return closure #2 in UICollectionView.applyUpdates(_:animated:alongsideUpdates:completion:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112));
}

uint64_t sub_1002AAF90()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_37(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_37()
{
  return swift_release();
}

unint64_t _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_1(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = _ss11_StringGutsV16_deconstructUTF87scratchyXlSg5owner_xSi6lengthSb11usesScratchSb15allocatedMemorytSwSg_ts8_PointerRzlFSV_Tgq5_1(v12, 0, 0, 1, a1, a2);
  unint64_t v7 = v12[0];
  if (v6)
  {
    unint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v12);
  return v7;
}

unint64_t _ss11_StringGutsV16_deconstructUTF87scratchyXlSg5owner_xSi6lengthSb11usesScratchSb15allocatedMemorytSwSg_ts8_PointerRzlFSV_Tgq5_1(unint64_t *a1, void *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v10 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v10)
        {
          v12[0] = a5;
          v12[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          memcpy(__dst, v12, HIBYTE(a6) & 0xF);
          unint64_t result = 0;
          *((unsigned char *)__dst + v10) = 0;
          *a1 = (unint64_t)__dst;
          return result;
        }
      }
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    unint64_t result = (unint64_t)_ss11_StringGutsV23_allocateForDeconstructyXl5owner_SVSi6lengthtyF_1(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    unint64_t result = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    unint64_t result = _StringObject.sharedUTF8.getter();
    if (!result)
    {
      __break(1u);
      return result;
    }
  }
  *a1 = result;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

char *_ss11_StringGutsV23_allocateForDeconstructyXl5owner_SVSi6lengthtyF_1(uint64_t a1, unint64_t a2)
{
  New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_1 = (char *)_ss32_copyCollectionToContiguousArrayys0dE0Vy7ElementQzGxSlRzlFSS8UTF8ViewV_Tgq5_1(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_1 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_1(0, *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_1+ 2)+ 1, 1, New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_1);
  }
  unint64_t v4 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_1 + 2);
  unint64_t v3 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_1 + 3);
  if (v4 >= v3 >> 1) {
    New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_1 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_1((char *)(v3 > 1), v4 + 1, 1, New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_1);
  }
  *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_1 + 2) = v4 + 1;
  New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_1[v4 + 32] = 0;
  return New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_1;
}

void *_ss32_copyCollectionToContiguousArrayys0dE0Vy7ElementQzGxSlRzlFSS8UTF8ViewV_Tgq5_1(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_9;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = _ss22_ContiguousArrayBufferV19_uninitializedCount15minimumCapacityAByxGSi_SitcfCs5UInt8V_Tgmq5_1(v2, 0);
      unint64_t result = (void *)_StringGuts.copyUTF8(into:)();
      if (v5) {
        break;
      }
      if (result == (void *)v2) {
        return v3;
      }
      __break(1u);
LABEL_9:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void *_ss22_ContiguousArrayBufferV19_uninitializedCount15minimumCapacityAByxGSi_SitcfCs5UInt8V_Tgmq5_1(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCys5UInt8VGMD_1);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_1(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCys5UInt8VGMD_1);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *initializeBufferWithCopyOfBuffer for AIDiffingUpdate(uint64_t a1, void *a2, int *a3)
{
  unint64_t v4 = (char *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)unint64_t v4 = *a2;
    unint64_t v4 = (char *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = a2[1];
    if (v7)
    {
      uint64_t v8 = a2[2];
      *((void *)v4 + 1) = v7;
      *((void *)v4 + 2) = v8;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    }
    uint64_t v10 = a3[6];
    size_t v11 = &v4[v10];
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for IndexSet();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    v14(v11, v12, v13);
    v14(&v4[a3[7]], (char *)a2 + a3[7], v13);
    uint64_t v15 = a3[9];
    *(void *)&v4[a3[8]] = *(void *)((char *)a2 + a3[8]);
    uint64_t v16 = &v4[v15];
    uint64_t v17 = (void *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    *(void *)uint64_t v16 = *v17;
    *((void *)v16 + 1) = v18;
    uint64_t v19 = a3[10];
    uint64_t v20 = a3[11];
    uint64_t v21 = &v4[v19];
    Swift::String v22 = (void *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *(void *)uint64_t v21 = *v22;
    *((void *)v21 + 1) = v23;
    uint64_t v24 = &v4[v20];
    uint64_t v25 = (void *)((char *)a2 + v20);
    uint64_t v26 = v25[1];
    *(void *)uint64_t v24 = *v25;
    *((void *)v24 + 1) = v26;
    *(void *)&v4[a3[12]] = *(void *)((char *)a2 + a3[12]);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for AIDiffingUpdate(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8)) {
    swift_release();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for IndexSet();
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + *(int *)(a2 + 28), v5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AIDiffingUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for IndexSet();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12(a1 + a3[7], a2 + a3[7], v11);
  uint64_t v13 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = a3[10];
  uint64_t v18 = a3[11];
  uint64_t v19 = (void *)(a1 + v17);
  uint64_t v20 = (void *)(a2 + v17);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  Swift::String v22 = (void *)(a1 + v18);
  uint64_t v23 = (void *)(a2 + v18);
  uint64_t v24 = v23[1];
  void *v22 = *v23;
  v22[1] = v24;
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AIDiffingUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = (_OWORD *)(a1 + 8);
  uint64_t v8 = (_OWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 8);
  if (!*(void *)(a1 + 8))
  {
    if (v7)
    {
      uint64_t v10 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v10;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *uint64_t v6 = *v8;
    goto LABEL_8;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v9;
  swift_retain();
  swift_release();
LABEL_8:
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for IndexSet();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24);
  v15(v12, v13, v14);
  v15(a1 + a3[7], a2 + a3[7], v14);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[9];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  swift_retain();
  swift_release();
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  swift_retain();
  swift_release();
  uint64_t v19 = a3[10];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  swift_retain();
  swift_release();
  *(void *)(v20 + 8) = *(void *)(v21 + 8);
  swift_retain();
  swift_release();
  uint64_t v22 = a3[11];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)(a1 + v22) = *(void *)(a2 + v22);
  swift_retain();
  swift_release();
  *(void *)(v23 + 8) = *(void *)(v24 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AIDiffingUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v7;
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for IndexSet();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v12(a1 + a3[7], a2 + a3[7], v11);
  uint64_t v13 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  uint64_t v14 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithTake for AIDiffingUpdate(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = (_OWORD *)(a1 + 8);
  uint64_t v8 = (_OWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 8);
  if (!*(void *)(a1 + 8))
  {
    if (v7)
    {
      uint64_t v10 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v10;
      goto LABEL_8;
    }
LABEL_7:
    *uint64_t v6 = *v8;
    goto LABEL_8;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v9;
  swift_release();
LABEL_8:
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for IndexSet();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40);
  v15(v12, v13, v14);
  v15(a1 + a3[7], a2 + a3[7], v14);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[9];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  swift_release();
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  swift_release();
  uint64_t v19 = a3[10];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  swift_release();
  *(void *)(v20 + 8) = *(void *)(v21 + 8);
  swift_release();
  uint64_t v22 = a3[11];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)(a1 + v22) = *(void *)(a2 + v22);
  swift_release();
  *(void *)(v23 + 8) = *(void *)(v24 + 8);
  swift_release();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AIDiffingUpdate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002ABD0C);
}

uint64_t sub_1002ABD0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IndexSet();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 32));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for AIDiffingUpdate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002ABDE4);
}

uint64_t sub_1002ABDE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for IndexSet();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 24);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for AIDiffingUpdate()
{
  uint64_t result = type metadata accessor for IndexSet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for _DiffableSection()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _DiffableSection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    uint64_t v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    uint64_t v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t destroy for _DiffableSection(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *initializeWithCopy for _DiffableSection(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  swift_bridgeObjectRetain();
  v6(v8, v9, v5);
  return a1;
}

void *assignWithCopy for _DiffableSection(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_OWORD *initializeWithTake for _DiffableSection(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *assignWithTake for _DiffableSection(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _DiffableSection(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 16) & ~v6);
      }
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for _DiffableSection(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1002AC79CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 16] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t associated type witness table accessor for DiffableSection.Items : Collection in _DiffableSection<A>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t associated type witness table accessor for DiffableSection.Items.Sequence.Element : Hashable in _DiffableSection<A>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

id specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v11 = *v5;
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, (uint64_t)a4);
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v17 = v12;
  uint64_t v18 = *(void *)(v11 + 24);
  if (v18 >= v16 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v18 >= v16 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    uint64_t v19 = (void *)*v6;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7];
      id result = (id)swift_bridgeObjectRelease();
      *(void *)(v20 + 8 * v13) = a1;
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a5 & 1);
  unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, (uint64_t)a4);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_17:
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = v22;
  uint64_t v19 = (void *)*v6;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  v19[(v13 >> 6) + 8] |= 1 << v13;
  uint64_t v24 = (uint64_t *)(v19[6] + 24 * v13);
  *uint64_t v24 = a2;
  v24[1] = a3;
  v24[2] = (uint64_t)a4;
  *(void *)(v19[7] + 8 * v13) = a1;
  uint64_t v25 = v19[2];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v19[2] = v27;
  swift_bridgeObjectRetain();

  return a4;
}

uint64_t specialized MutableCollection<>.sort(by:)(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for IndexPath() - 8);
  unint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v3 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  uint64_t result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v3;
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  unint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  uint64_t result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v31 = a1;
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v41 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v37 = (char *)&v29 - v11;
  uint64_t result = __chkstk_darwin(v10);
  Swift::String v36 = (char *)&v29 - v14;
  uint64_t v39 = a3;
  uint64_t v30 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void (**)(void, void, void))(v13 + 16);
    uint64_t v15 = v13 + 16;
    uint64_t v17 = *(void *)(v15 + 56);
    uint64_t v32 = (uint64_t (**)(char *, uint64_t))(v15 - 8);
    Swift::String v33 = (void (*)(char *, uint64_t, uint64_t))v16;
    uint64_t v34 = a4;
    uint64_t v35 = v15;
    size_t v40 = (void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v44 = v17 * (v39 - 1);
    uint64_t v38 = v17;
    uint64_t v43 = v17 * v39;
LABEL_5:
    uint64_t v18 = 0;
    uint64_t v42 = v31;
    while (1)
    {
      uint64_t v19 = *a4;
      uint64_t v20 = v43 + v18 + *a4;
      uint64_t v21 = v36;
      unint64_t v22 = v33;
      v33(v36, v20, v7);
      char v23 = v37;
      v22(v37, v44 + v18 + v19, v7);
      lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (void (*)(uint64_t))&type metadata accessor for IndexPath);
      LOBYTE(v22) = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v24 = *v32;
      (*v32)(v23, v7);
      uint64_t v25 = v21;
      a4 = v34;
      uint64_t result = v24(v25, v7);
      if ((v22 & 1) == 0)
      {
LABEL_4:
        v44 += v38;
        v43 += v38;
        if (++v39 == v30) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v26 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v27 = v26 + v44 + v18;
      uint64_t v28 = *v40;
      (*v40)(v41, v26 + v43 + v18, v7);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(v27, v41, v7);
      v18 -= v38;
      if (v39 == ++v42) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v58 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  int v57 = (char *)&v49 - v13;
  uint64_t v55 = *(void *)(v14 + 72);
  if (!v55)
  {
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    return result;
  }
  if (a2 - a1 == 0x8000000000000000 && v55 == -1) {
    goto LABEL_67;
  }
  int64_t v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v55 == -1) {
    goto LABEL_68;
  }
  uint64_t v16 = (uint64_t)(a2 - a1) / v55;
  unint64_t v61 = a1;
  unint64_t v60 = a4;
  if (v16 >= v15 / v55)
  {
    uint64_t v18 = v15 / v55 * v55;
    if (a4 < a2 || a2 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
      uint64_t v19 = v9;
    }
    else
    {
      uint64_t v19 = v9;
      if (a4 != a2) {
        swift_arrayInitWithTakeBackToFront();
      }
    }
    unint64_t v35 = a4 + v18;
    unint64_t v59 = a4 + v18;
    unint64_t v61 = a2;
    unint64_t v53 = a1;
    if (v18 >= 1 && a1 < a2)
    {
      unint64_t v37 = -v55;
      uint64_t v39 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
      uint64_t v38 = v19 + 16;
      uint64_t v51 = v38 - 8;
      uint64_t v52 = v39;
      unint64_t v54 = -v55;
      uint64_t v56 = v38;
      unint64_t v50 = a4;
      size_t v40 = v57;
      uint64_t v41 = (void (**)(char *, uint64_t))(v38 - 8);
      do
      {
        uint64_t v55 = a3 + v37;
        uint64_t v42 = v52;
        v52(v40, v35 + v37, v8);
        unint64_t v43 = a2 + v37;
        unint64_t v44 = a3;
        os_log_type_t v45 = v58;
        v42(v58, v43, v8);
        lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (void (*)(uint64_t))&type metadata accessor for IndexPath);
        LOBYTE(v42) = dispatch thunk of static Comparable.< infix(_:_:)();
        os_log_t v46 = *v41;
        (*v41)(v45, v8);
        v46(v40, v8);
        if (v42)
        {
          a3 = v55;
          if (v44 < a2 || v55 >= a2)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v47 = v50;
          }
          else
          {
            unint64_t v47 = v50;
            if (v44 != a2) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v37 = v54;
          v61 += v54;
        }
        else
        {
          unint64_t v48 = v59;
          a3 = v55;
          v59 += v54;
          if (v44 < v48 || v55 >= v48)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v43 = a2;
            unint64_t v47 = v50;
          }
          else
          {
            unint64_t v47 = v50;
            if (v44 != v48) {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v43 = a2;
          }
          unint64_t v37 = v54;
        }
        unint64_t v35 = v59;
        if (v59 <= v47) {
          break;
        }
        a2 = v43;
      }
      while (v43 > v53);
    }
  }
  else
  {
    uint64_t v17 = v16 * v55;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v54 = a4 + v17;
    unint64_t v59 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      uint64_t v21 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
      uint64_t v56 = v9 + 16;
      unint64_t v22 = (void (**)(char *, uint64_t))(v9 + 8);
      do
      {
        unint64_t v23 = a3;
        uint64_t v24 = v57;
        v21(v57, a2, v8);
        unint64_t v25 = a4;
        uint64_t v26 = v58;
        v21(v58, v25, v8);
        lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (void (*)(uint64_t))&type metadata accessor for IndexPath);
        char v27 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v28 = *v22;
        (*v22)(v26, v8);
        v28(v24, v8);
        unint64_t v29 = v61;
        if (v27)
        {
          uint64_t v30 = v55;
          unint64_t v31 = a2 + v55;
          if (v61 < a2 || v61 >= v31)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v23;
          }
          else
          {
            a3 = v23;
            if (v61 == a2) {
              unint64_t v29 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        else
        {
          uint64_t v30 = v55;
          unint64_t v33 = v60 + v55;
          if (v61 < v60 || v61 >= v33)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v23;
          }
          else
          {
            a3 = v23;
            if (v61 != v60) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v60 = v33;
          unint64_t v31 = a2;
        }
        unint64_t v61 = v29 + v30;
        a4 = v60;
        if (v60 >= v54) {
          break;
        }
        a2 = v31;
      }
      while (v31 < a3);
    }
  }
  specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v61, &v60, (uint64_t *)&v59);
  return 1;
}

uint64_t specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  if (v5 - v4 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_17;
  }
  if (v3 < v4 || v3 >= v4 + (uint64_t)(v5 - v4) / v7 * v7)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v3 != v4)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

void (*specialized Dictionary._Variant.subscript.modify(void *a1, uint64_t a2))(uint64_t a1)
{
  unint64_t v4 = malloc(0x50uLL);
  *a1 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = specialized Dictionary._Variant.asNative.modify(v4);
  v4[9] = specialized _NativeDictionary.subscript.modify(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void Dictionary._Variant.subscript.modifyspecialized (uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 72))();
  v2(v1, 0);

  free(v1);
}

{
  void *v1;
  void (*v2)(void *, void);
  void *v3;
  uint64_t vars8;

  unint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 80);
  unint64_t v3 = *(void **)(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 88))();
  swift_bridgeObjectRelease();

  v2(v1, 0);

  free(v1);
}

void (*specialized Dictionary._Variant.subscript.modify(void *a1, uint64_t a2, uint64_t a3, void *a4))(uint64_t a1)
{
  uint64_t v8 = malloc(0x60uLL);
  *a1 = v8;
  v8[8] = a3;
  v8[9] = a4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  id v10 = a4;
  v8[10] = specialized Dictionary._Variant.asNative.modify(v8);
  v8[11] = specialized _NativeDictionary.subscript.modify(v8 + 4, a2, a3, (uint64_t)v10, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

uint64_t specialized OrderedSet._append(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for IndexPath();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  uint64_t v7 = v1[1];
  uint64_t v9 = v7 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v10 = *(void *)(v7 + 16);
  if (*v1)
  {
    swift_retain();
    specialized _HashTable.UnsafeHandle._find<A>(_:in:)(a1, v9, v10, (void *)(v8 + 16), v8 + 32);
    char v12 = v11;
    swift_release();
    if ((v12 & 1) == 0) {
      return 0;
    }
  }
  else if (v10)
  {
    v19[1] = v1;
    uint64_t v14 = 0;
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v16 = v4 + 16;
    int64_t v15 = v17;
    uint64_t v20 = *(void *)(v16 + 56);
    uint64_t v21 = v10;
    do
    {
      v15(v6, v9, v3);
      lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (void (*)(uint64_t))&type metadata accessor for IndexPath);
      char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v6, v3);
      if (v18) {
        return 0;
      }
      ++v14;
      v9 += v20;
    }
    while (v21 != v14);
  }
  specialized OrderedSet._appendNew(_:in:)(a1);
  return 1;
}

uint64_t specialized OrderedSet._appendNew(_:in:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v8 = v2 + 1;
  uint64_t v9 = v2[1];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v2[1] = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
    uint64_t v9 = *v8;
  }
  unint64_t v12 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
    uint64_t v9 = *v8;
  }
  *(void *)(v9 + 16) = v12 + 1;
  uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v12, v7, v4);
  v2[1] = v9;
  uint64_t v14 = *(void *)(v9 + 16);
  if (*v2)
  {
    swift_beginAccess();
    if (static _HashTable.maximumCapacity(forScale:)() >= v14)
    {
      uint64_t result = swift_isUniquelyReferenced_native();
      uint64_t v15 = *v2;
      if (!result)
      {
        if (!v15)
        {
LABEL_16:
          __break(1u);
          return result;
        }
        uint64_t v15 = _HashTable.copy()();
        uint64_t result = swift_release();
        *uint64_t v2 = v15;
      }
      if (v15) {
        return _HashTable.UnsafeHandle.subscript.setter();
      }
      __break(1u);
      goto LABEL_16;
    }
  }
  else if ((unint64_t)v14 < 0x10)
  {
    return result;
  }
  return specialized OrderedSet._regenerateHashTable()();
}

uint64_t specialized OrderedSet._regenerateHashTable()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  if (*v0)
  {
    swift_beginAccess();
    uint64_t v3 = *(void *)(v1 + 24) & 0x3FLL;
    unint64_t v4 = *(void *)(v2 + 16);
    if (v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v4 = *(void *)(v2 + 16);
  }
  if (v4 < 0x10)
  {
    uint64_t v5 = 0;
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v6 = static _HashTable.scale(forCapacity:)();
  if (v3 <= v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = v3;
  }
  uint64_t v5 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v2, v7, 0, v3);
LABEL_11:
  uint64_t result = swift_release();
  uint64_t *v0 = v5;
  return result;
}

uint64_t specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = static _HashTable.scale(forCapacity:)();
  uint64_t v9 = 0;
  if (a3) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = a2;
  }
  if (v10 <= v8) {
    uint64_t v10 = v8;
  }
  if (v10 <= a4) {
    uint64_t v11 = a4;
  }
  else {
    uint64_t v11 = v10;
  }
  if (v11 >= 5)
  {
    uint64_t v9 = _HashTable.init(scale:reservedScale:)();
    specialized closure #1 in static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v9 + 16, v9 + 32, a1);
  }
  return v9;
}

uint64_t specialized closure #1 in static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    uint64_t v3 = (void *)result;
    type metadata accessor for IndexPath();
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (void (*)(uint64_t))&type metadata accessor for IndexPath);
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      if (__OFSUB__(1 << *v3, 1)) {
        break;
      }
      if (_HashTable.UnsafeHandle._startIterator(bucket:)())
      {
        while (1)
          _HashTable.BucketIterator.advance()();
      }
      uint64_t result = _HashTable.BucketIterator.currentValue.setter();
      if (++v4 == v6) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _HashTable.UnsafeHandle._find<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v27 = a2;
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (void (*)(uint64_t))&type metadata accessor for IndexPath);
  uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = 1 << *a4;
  BOOL v13 = __OFSUB__(v12, 1);
  uint64_t v14 = v12 - 1;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    uint64_t v15 = v14 & result;
    uint64_t v16 = _HashTable.UnsafeHandle._startIterator(bucket:)();
    *(void *)&long long v36 = a4;
    *((void *)&v36 + 1) = a5;
    *(void *)&long long v37 = v15;
    *((void *)&v37 + 1) = v16;
    *(void *)&long long v38 = v17;
    *((void *)&v38 + 1) = v18;
    char v39 = 0;
    uint64_t v19 = _HashTable.BucketIterator.currentValue.getter();
    long long v28 = v36;
    long long v29 = v37;
    long long v30 = v38;
    char v31 = v39;
    if ((v20 & 1) == 0)
    {
      unint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
      uint64_t v21 = v8 + 16;
      unint64_t v22 = v23;
      uint64_t v24 = *(void *)(v21 + 56);
      do
      {
        v22(v10, v27 + v24 * v19, v7);
        lazy protocol witness table accessor for type IndexSet and conformance IndexSet(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (void (*)(uint64_t))&type metadata accessor for IndexPath);
        char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
        (*(void (**)(char *, uint64_t))(v21 - 8))(v10, v7);
        if (v25) {
          break;
        }
        _HashTable.BucketIterator.advance()();
        long long v32 = v28;
        long long v33 = v29;
        long long v34 = v30;
        char v35 = v31;
        uint64_t v19 = _HashTable.BucketIterator.currentValue.getter();
      }
      while ((v26 & 1) == 0);
    }
    return v19;
  }
  return result;
}

void (*specialized _NativeDictionary.subscript.modify(void *a1, uint64_t a2, char a3))(uint64_t **a1, char a2)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[2] = a2;
  v8[3] = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  *((unsigned char *)v8 + 9) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  char v13 = v10 ^ 1;
  uint64_t v14 = v12 + ((v10 ^ 1) & 1);
  if (__OFADD__(v12, (v10 ^ 1) & 1))
  {
    __break(1u);
  }
  else
  {
    unsigned __int8 v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[4] = v11;
      if (v15)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*(void *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *uint64_t v8 = v17;
        *((unsigned char *)v8 + 8) = v13 & 1;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      uint64_t v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a3 & 1);
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      unint64_t v11 = v18;
      v8[4] = v18;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **, char))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  LOBYTE(v4) = *((unsigned char *)*a1 + 8);
  LOBYTE(v5) = *((unsigned char *)*a1 + 9);
  if (a2)
  {
    if ((*a1)[1]) {
      goto LABEL_8;
    }
    unint64_t v6 = v2[4];
    uint64_t v4 = *(void **)v2[3];
    if (*((unsigned char *)*a1 + 9)) {
      goto LABEL_11;
    }
    uint64_t v7 = v2[2];
    v4[(v6 >> 6) + 8] |= 1 << v6;
    uint64_t v8 = 8 * v6;
    *(void *)(v4[6] + v8) = v7;
    uint64_t v5 = v4[7];
    *(void *)(v5 + v8) = v3;
    uint64_t v9 = v4[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v3 = v9 + 1;
    if (!v10)
    {
LABEL_13:
      v4[2] = v3;
      goto LABEL_14;
    }
    __break(1u);
  }
  if (v4)
  {
LABEL_8:
    if (v5) {
      specialized _NativeDictionary._delete(at:)(v2[4], *(void *)v2[3]);
    }
    goto LABEL_14;
  }
  unint64_t v6 = v2[4];
  uint64_t v4 = *(void **)v2[3];
  if ((v5 & 1) == 0)
  {
    uint64_t v11 = v2[2];
    v4[(v6 >> 6) + 8] |= 1 << v6;
    uint64_t v12 = 8 * v6;
    *(void *)(v4[6] + v12) = v11;
    *(void *)(v4[7] + v12) = v3;
    uint64_t v13 = v4[2];
    BOOL v10 = __OFADD__(v13, 1);
    uint64_t v3 = v13 + 1;
    if (v10)
    {
      __break(1u);
      return;
    }
    goto LABEL_13;
  }
LABEL_11:
  *(void *)(v4[7] + 8 * v6) = v3;
LABEL_14:

  free(v2);
}

void (*specialized _NativeDictionary.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5))(uint64_t **a1)
{
  unint64_t v6 = v5;
  uint64_t v12 = malloc(0x38uLL);
  *a1 = v12;
  unint64_t v12[3] = a4;
  v12[4] = v5;
  v12[1] = a2;
  void v12[2] = a3;
  uint64_t v13 = *v5;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4);
  *((unsigned char *)v12 + 48) = v14 & 1;
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    char v19 = v14;
    uint64_t v20 = *(void *)(v13 + 24);
    if (v20 >= v18 && (a5 & 1) != 0)
    {
LABEL_7:
      v12[5] = v15;
      if (v19)
      {
LABEL_8:
        uint64_t v21 = *(void *)(*(void *)(*v6 + 56) + 8 * v15);
LABEL_12:
        *uint64_t v12 = v21;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      uint64_t v21 = 0;
      goto LABEL_12;
    }
    if (v20 >= v18 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a5 & 1);
    unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4);
    if ((v19 & 1) == (v23 & 1))
    {
      unint64_t v15 = v22;
      v12[5] = v22;
      if (v19) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t **a1)
{
  uint64_t v1 = *a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *((unsigned char *)*a1 + 48), (uint64_t *)(*a1)[4], (*a1)[5], (*a1)[1], (*a1)[2], (void *)(*a1)[3]);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t Dictionary._Variant.asNative.modifyspecialized (uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(void *a1))()
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t *specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t *result, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v9 = *result;
  if (*result)
  {
    BOOL v10 = (void *)*a3;
    if (a2)
    {
      *(void *)(v10[7] + 8 * a4) = v9;
    }
    else
    {
      v10[(a4 >> 6) + 8] |= 1 << a4;
      uint64_t v12 = (void *)(v10[6] + 24 * a4);
      *uint64_t v12 = a5;
      v12[1] = a6;
      void v12[2] = a7;
      *(void *)(v10[7] + 8 * a4) = v9;
      uint64_t v13 = v10[2];
      BOOL v14 = __OFADD__(v13, 1);
      uint64_t v15 = v13 + 1;
      if (v14)
      {
        __break(1u);
        return result;
      }
      v10[2] = v15;
      swift_bridgeObjectRetain();
      id v16 = a7;
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }

  return (uint64_t *)swift_bridgeObjectRetain();
}

uint64_t sub_1002B1560()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 88)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in UICollectionView.applyUpdates(_:animated:alongsideUpdates:completion:)()
{
  return closure #1 in closure #2 in UICollectionView.applyUpdates(_:animated:alongsideUpdates:completion:)(*(void *)(v0 + 16), *(id *)(v0 + 24), *(void *)(v0 + 32), *(void (**)(void, void, void))(v0 + 40), *(uint64_t **)(v0 + 48), *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v0 + 56), *(uint64_t **)(v0 + 64), *(uint64_t **)(v0 + 72), *(char **)(v0 + 80), *(void *)(v0 + 88));
}

uint64_t sub_1002B15F8()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1608()
{
  swift_release();

  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return swift_deallocObject();
}

void partial apply for closure #2 in closure #2 in UICollectionView.applyUpdates(_:animated:alongsideUpdates:completion:)(int a1)
{
  closure #2 in closure #2 in UICollectionView.applyUpdates(_:animated:alongsideUpdates:completion:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void (**)(void))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t outlined init with copy of (IndexPath, IndexPath)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (IndexPath, IndexPath));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002B16CC()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)()
{
  return implicit closure #1 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)();
}

uint64_t partial apply for implicit closure #2 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t partial apply for specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)()
{
  return specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v3);
  uint64_t v1 = Array.description.getter();
  swift_bridgeObjectRelease();
  return v1;
}

{
  uint64_t v0;

  return specialized implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(*(void (**)(uint64_t))(v0 + 16));
}

uint64_t sub_1002B16F8()
{
  return swift_deallocObject();
}

unsigned char **partial apply for closure #1 in OSLogArguments.append(_:)(unsigned char **result)
{
  uint64_t v2 = *result;
  *uint64_t v2 = *(unsigned char *)(v1 + 16);
  *uint64_t result = v2 + 1;
  return result;
}

uint64_t sub_1002B171C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(void (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1002B1760()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1770()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1780()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in implicit closure #3 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in implicit closure #3 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)(a1);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.DiffableSection.Items.Sequence.Element, @in_guaranteed A.DiffableSection.Items.Sequence.Element) -> (@out Bool)()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 32))(&v2);
  return v2;
}

uint64_t partial apply for closure #2 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for closure #3 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)(uint64_t a1, uint64_t a2)
{
  return closure #3 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)(a1, a2, *(uint64_t **)(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned Int, @in_guaranteed A) -> (@owned String)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, char *))(v2 + 32);
  uint64_t v6 = *a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t result = v5(v6, (char *)a1 + *(int *)(TupleTypeMetadata2 + 48));
  *a2 = result;
  a2[1] = v9;
  return result;
}

uint64_t sub_1002B1880()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1890()
{
  return swift_deallocObject();
}

uint64_t sub_1002B18A0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1002B1940()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1950()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)(uint64_t a1, uint64_t a2)
{
  return closure #4 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)(a1, a2, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 32), *(void *)(v2 + 40), *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 72), *(uint64_t **)(v2 + 80), *(void *)(v2 + 88)) & 1;
}

uint64_t sub_1002B19A8()
{
  return swift_deallocObject();
}

uint64_t sub_1002B19B8()
{
  return swift_deallocObject();
}

uint64_t sub_1002B19C8()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t outlined consume of CollectionDifference<String>.Change()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002B1A14()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1A24()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1A34()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1A44()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1A54()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1A64()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1A74()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1A84()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1A94()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1AA4()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1AB4()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1AC4()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1AD4()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1AE4()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1AF4()
{
  return swift_deallocObject();
}

uint64_t outlined destroy of IndexingIterator<CollectionDifference<String>>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<String>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002B1B64()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1B7C()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1B90()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1BA0()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1BB0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #31 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)()
{
  return implicit closure #31 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1002B1BF0()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1C00()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1C10()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1C20()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1C30()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1C40()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1C50()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1C60()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1C70()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1C80()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1C90()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1CA0()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1CB0()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1CC0()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1CD4()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1CE4()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #37 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  *a1 = *(void *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1002B1D3C()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1D4C()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1D6C()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1D7C()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1D90()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1DA0()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1DB4()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1DC4()
{
  return swift_deallocObject();
}

uint64_t objectdestroy_247Tm()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #26 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 32))();
}

uint64_t sub_1002B1ECC()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1EDC()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1EF0()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1F00()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1F10()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1F20()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1F30()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1F40()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1F50()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1F60()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1F78()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1F88()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1F98()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1FA8()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1FB8()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1FC8()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1FD8()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1FE8()
{
  return swift_deallocObject();
}

uint64_t sub_1002B1FF8()
{
  return swift_deallocObject();
}

uint64_t sub_1002B2008()
{
  return swift_deallocObject();
}

void *partial apply for specialized closure #1 in OSLogArguments.append<A>(_:)(void **a1)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  uint64_t v4 = *a1;
  *uint64_t v4 = v5;
  *a1 = v4 + 1;
  return result;
}

uint64_t sub_1002B2064()
{
  return swift_deallocObject();
}

uint64_t sub_1002B2074()
{
  return swift_deallocObject();
}

uint64_t objectdestroy_420Tm()
{
  uint64_t v1 = type metadata accessor for IndexPath();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #35 in AIDiffingUpdate.init<A>(oldItems:newItems:visibleIndexPaths:startingSectionIndex:finalSectionIndex:modelUpdateHandler:identityComparator:visualComparator:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for IndexPath();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return v5(a1, v6, v3);
}

uint64_t sub_1002B2190()
{
  return swift_deallocObject();
}

uint64_t sub_1002B21A0()
{
  return swift_deallocObject();
}

uint64_t sub_1002B21B0()
{
  return swift_deallocObject();
}

uint64_t sub_1002B21C0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OSLogArguments.append(_:)(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(v3 + 16))();
  unint64_t v8 = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_1(v6, v7, a3);
  uint64_t v9 = (void *)*a1;
  *(void *)*a1 = v8;
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v9 + 1;
  return result;
}

uint64_t outlined consume of OrderedSet<A.Items.Element>?<A>(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1002B226C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.DiffableSection.Items.Sequence.Element, @in_guaranteed A.DiffableSection.Items.Sequence.Element) -> (@unowned Bool)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 32))();
  *a1 = result & 1;
  return result;
}

uint64_t lazy protocol witness table accessor for type IndexSet and conformance IndexSet(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for static ApproximatelyEquatable.==~ infix(_:_:) in conformance Double()
{
  lazy protocol witness table accessor for type Double and conformance Double();

  return static ApproximatelyEquatable<>.==~ infix(_:_:)();
}

uint64_t static ApproximatelyComparable<>.<~ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ApproximatelyComparable<>.<~ infix(_:_:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))&dispatch thunk of static Comparable.< infix(_:_:));
}

uint64_t static ApproximatelyComparable<>.>~ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ApproximatelyComparable<>.<~ infix(_:_:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))&dispatch thunk of static Comparable.> infix(_:_:));
}

uint64_t static ApproximatelyComparable<>.<~ infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (dispatch thunk of static ApproximatelyEquatable.==~ infix(_:_:)()) {
    return 0;
  }
  else {
    return a7(a1, a2, a3, a6) & 1;
  }
}

uint64_t Result.init(success:failure:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v39 = a5;
  uint64_t v38 = type metadata accessor for Optional();
  uint64_t v36 = *(void *)(v38 - 8);
  uint64_t v8 = __chkstk_darwin(v38);
  long long v34 = (char *)&v32 - v9;
  uint64_t v35 = *(void *)(a4 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a3 - 8);
  __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Result();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  char v19 = (char *)&v32 - v18;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a1, 1, a3) != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v38);
    long long v28 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 32);
    v28(v15, a1, a3);
    v28(v19, (uint64_t)v15, a3);
    uint64_t v26 = v39;
LABEL_6:
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v26, v19, v16);
    uint64_t v27 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v26, v27, 1, v16);
  }
  long long v33 = v12;
  uint64_t v20 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(a1, v20);
  uint64_t v21 = v36;
  unint64_t v22 = v34;
  uint64_t v23 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v34, v37, v38);
  uint64_t v24 = v35;
  int v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48))(v22, 1, a4);
  uint64_t v26 = v39;
  if (v25 != 1)
  {
    long long v29 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    long long v30 = v33;
    v29(v33, v22, a4);
    v29(v19, v30, a4);
    goto LABEL_6;
  }
  (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v23);
  uint64_t v27 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v26, v27, 1, v16);
}

uint64_t Collection.limited(to:)(uint64_t a1, uint64_t a2)
{
  __chkstk_darwin(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a2);
  if (dispatch thunk of Collection.count.getter() > a1 && __OFSUB__(dispatch thunk of Collection.count.getter(), a1)) {
    __break(1u);
  }
  return Sequence.dropLast(_:)();
}

uint64_t Collection.asyncMap<A>(transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[8] = a5;
  v6[9] = v5;
  v6[6] = a3;
  v6[7] = a4;
  v6[4] = a1;
  v6[5] = a2;
  uint64_t v7 = type metadata accessor for Optional();
  v6[10] = v7;
  v6[11] = *(void *)(v7 - 8);
  v6[12] = swift_task_alloc();
  return _swift_task_switch(Collection.asyncMap<A>(transform:), 0, 0);
}

void Collection.asyncMap<A>(transform:)()
{
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 48);
  long long v12 = *(_OWORD *)(v0 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v1, 1, 1, v6);
  uint64_t v8 = dispatch thunk of Collection.count.getter();
  uint64_t v9 = specialized Array.init(repeating:count:)(v1, v8, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  *(void *)(v0 + 16) = v9;
  swift_getTupleTypeMetadata2();
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 104) = v10;
  *(void *)(v10 + 16) = v7;
  *(void *)(v10 + 24) = v6;
  *(void *)(v10 + 32) = v5;
  *(void *)(v10 + 40) = v3;
  *(_OWORD *)(v10 + 48) = v12;
  *(void *)(v10 + 64) = v0 + 16;
  uint64_t v13 = (char *)&async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)
      + async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v11;
  *uint64_t v11 = v0;
  v11[1] = Collection.asyncMap<A>(transform:);
  __asm { BR              X0; withThrowingTaskGroup<A, B>(of:returning:isolation:body:) }
}

uint64_t Collection.asyncMap<A>(transform:)()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = Collection.asyncMap<A>(transform:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = Collection.asyncMap<A>(transform:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  long long v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 48);
  *(void *)(v0 + 24) = *(void *)(v0 + 16);
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = *(_OWORD *)(v0 + 56);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v4 = Sequence.compactMap<A>(_:)();
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in Collection.asyncMap<A>(transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[9] = a8;
  v8[10] = v17;
  v8[7] = a6;
  v8[8] = a7;
  v8[5] = a4;
  v8[6] = a5;
  v8[3] = a2;
  v8[4] = a3;
  uint64_t v9 = type metadata accessor for Optional();
  v8[11] = v9;
  v8[12] = *(void *)(v9 - 8);
  v8[13] = swift_task_alloc();
  v8[14] = *(void *)(v17 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[15] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  v8[16] = v11;
  v8[17] = *(void *)(v11 + 64);
  v8[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&_sScPSgMD_1);
  v8[19] = swift_task_alloc();
  v8[20] = swift_getTupleTypeMetadata2();
  type metadata accessor for Optional();
  v8[21] = swift_task_alloc();
  v8[22] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&_ss5Error_pMD_0);
  uint64_t v12 = type metadata accessor for ThrowingTaskGroup.Iterator();
  v8[23] = v12;
  v8[24] = *(void *)(v12 - 8);
  v8[25] = swift_task_alloc();
  v8[26] = swift_getTupleTypeMetadata2();
  uint64_t v13 = type metadata accessor for Optional();
  v8[27] = v13;
  v8[28] = *(void *)(v13 - 8);
  v8[29] = swift_task_alloc();
  v8[30] = swift_task_alloc();
  v8[31] = type metadata accessor for EnumeratedSequence();
  v8[32] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for EnumeratedSequence.Iterator();
  v8[33] = v14;
  v8[34] = *(void *)(v14 - 8);
  v8[35] = swift_task_alloc();
  return _swift_task_switch(closure #1 in Collection.asyncMap<A>(transform:), 0, 0);
}

uint64_t closure #1 in Collection.asyncMap<A>(transform:)()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 128);
  Sequence.enumerated()();
  EnumeratedSequence.makeIterator()();
  uint64_t v22 = v3;
  uint64_t v23 = v2;
  uint64_t v24 = v2 - 8;
  while (1)
  {
    uint64_t v5 = *(void *)(v0 + 232);
    uint64_t v4 = *(void *)(v0 + 240);
    uint64_t v7 = *(void *)(v0 + 208);
    uint64_t v6 = *(void *)(v0 + 216);
    EnumeratedSequence.Iterator.next()();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v4, v5, v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 48))(v4, 1, v7) == 1) {
      break;
    }
    uint64_t v8 = *(uint64_t **)(v0 + 240);
    uint64_t v9 = *(void *)(v0 + 152);
    uint64_t v10 = *(char **)(v0 + 144);
    uint64_t v11 = *(void *)(v0 + 120);
    uint64_t v27 = *(void *)(v0 + 80);
    uint64_t v12 = *(void *)(v0 + 48);
    uint64_t v28 = *(void *)(v0 + 40);
    uint64_t v13 = (char *)v8 + *(int *)(v23 + 48);
    uint64_t v26 = *v8;
    uint64_t v14 = type metadata accessor for TaskPriority();
    long long v25 = *(_OWORD *)(v0 + 64);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v9, 1, 1, v14);
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    v15(v10, v13, v11);
    unint64_t v16 = (*(unsigned __int8 *)(v22 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = 0;
    *(void *)(v17 + 24) = 0;
    *(_OWORD *)(v17 + 32) = v25;
    *(void *)(v17 + 48) = v27;
    *(void *)(v17 + 56) = v26;
    *(void *)(v17 + 64) = v28;
    *(void *)(v17 + 72) = v12;
    v15((char *)(v17 + v16), v10, v11);
    type metadata accessor for ThrowingTaskGroup();
    swift_retain();
    _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(v9, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in Collection.asyncMap<A>(transform:), v17);
    _sScPSgWOh_0(v9);
  }
  (*(void (**)(void, void))(*(void *)(v0 + 272) + 8))(*(void *)(v0 + 280), *(void *)(v0 + 264));
  ThrowingTaskGroup.makeAsyncIterator()();
  *(void *)(v0 + 288) = type metadata accessor for Array();
  Array._makeMutableAndUnique()();
  Array._makeMutableAndUnique()();
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v18;
  *uint64_t v18 = v0;
  v18[1] = closure #1 in Collection.asyncMap<A>(transform:);
  uint64_t v19 = *(void *)(v0 + 184);
  uint64_t v20 = *(void *)(v0 + 168);
  return __sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v20, 0, 0, v19, v0 + 16);
}

{
  uint64_t v0;
  uint64_t (*v1)();
  uint64_t v3;

  swift_task_dealloc();
  if (v0) {
    uint64_t v1 = closure #1 in Collection.asyncMap<A>(transform:);
  }
  else {
    uint64_t v1 = closure #1 in Collection.asyncMap<A>(transform:);
  }
  return _swift_task_switch(v1, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  Swift::Int *v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  Swift::Int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = v0[20];
  uint64_t v2 = (Swift::Int *)v0[21];
  if ((*(unsigned int (**)(Swift::Int *, uint64_t, uint64_t))(*(void *)(v1 - 8) + 48))(v2, 1, v1) == 1)
  {
    (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    uint64_t v5 = v0[12];
    uint64_t v6 = v0[13];
    uint64_t v7 = v0[11];
    uint64_t v8 = v0[9];
    uint64_t v9 = (uint64_t *)v0[7];
    uint64_t v10 = *v2;
    uint64_t v11 = (char *)v2 + *(int *)(v1 + 48);
    uint64_t v12 = *(void *)(v8 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v6, v11, v8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v6, 0, 1, v8);
    Array._makeMutableAndUnique()();
    uint64_t v13 = *v9;
    Array._checkSubscript_mutating(_:)(v10);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 40))(v13+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v10, v6, v7);
    uint64_t v14 = (void *)swift_task_alloc();
    v0[37] = v14;
    *uint64_t v14 = v0;
    v14[1] = closure #1 in Collection.asyncMap<A>(transform:);
    uint64_t v15 = v0[23];
    unint64_t v16 = v0[21];
    return __sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v16, 0, 0, v15, v0 + 2);
  }
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t closure #1 in closure #1 in Collection.asyncMap<A>(transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[6] = a7;
  v7[7] = v9;
  v7[4] = a5;
  v7[5] = a6;
  v7[2] = a1;
  v7[3] = a4;
  return _swift_task_switch(closure #1 in closure #1 in Collection.asyncMap<A>(transform:), 0, 0);
}

uint64_t closure #1 in closure #1 in Collection.asyncMap<A>(transform:)()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = (int *)v0[4];
  uint64_t v3 = (void *)v0[2];
  uint64_t v4 = (char *)v3 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  *uint64_t v3 = v2;
  uint64_t v8 = (uint64_t (*)(char *, uint64_t))((char *)v1 + *v1);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[8] = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in closure #1 in Collection.asyncMap<A>(transform:);
  uint64_t v6 = v0[6];
  return v8(v4, v6);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&_sScPSgMD_1);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  _sScPSgWOc_0(a1, (uint64_t)v9);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    _sScPSgWOh_0((uint64_t)v9);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = *v4;
  unint64_t v16 = (void *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    unint64_t v16 = v19;
    void v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v9 + 16) = v18;
  *uint64_t v18 = v9;
  v18[1] = partial apply for closure #1 in static MusicEngagementExtension.performRequest(with:completion:);
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

BOOL Collection<>.contains(approximatelyMatching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v15[-v11];
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a1;
  Sequence.first(where:)();
  BOOL v13 = (*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v12, 1, AssociatedTypeWitness) != 1;
  (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v12, v9);
  return v13;
}

uint64_t Collection<>.first(approximatelyMatching:)()
{
  return Sequence.first(where:)();
}

uint64_t Collection<>.firstIndex(approximatelyMatching:)()
{
  return Collection.firstIndex(where:)();
}

uint64_t static DisplayUnit.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  uint64_t v37 = *(void *)(a3 - 8);
  uint64_t v4 = __chkstk_darwin(a1);
  uint64_t v32 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  char v31 = (char *)&v30 - v6;
  uint64_t v34 = v7;
  uint64_t v8 = type metadata accessor for DisplayUnit();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v30 - v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v17 = __chkstk_darwin(TupleTypeMetadata2);
  uint64_t v19 = (char *)&v30 - v18;
  uint64_t v20 = (char *)&v30 + *(int *)(v17 + 48) - v18;
  uint64_t v33 = v9;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v21((char *)&v30 - v18, v35, v8);
  v21(v20, v36, v8);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v21(v14, (uint64_t)v19, v8);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v27 = v37;
      uint64_t v28 = v31;
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v31, v20, a3);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
      long long v25 = *(void (**)(char *, uint64_t))(v27 + 8);
      v25(v28, a3);
      uint64_t v26 = v14;
      goto LABEL_6;
    }
LABEL_8:
    (*(void (**)(char *, uint64_t))(v37 + 8))(v14, a3);
    char v24 = 0;
    uint64_t v8 = TupleTypeMetadata2;
    goto LABEL_9;
  }
  v21(v12, (uint64_t)v19, v8);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v14 = v12;
    goto LABEL_8;
  }
  uint64_t v22 = v37;
  uint64_t v23 = v32;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v32, v20, a3);
  char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  long long v25 = *(void (**)(char *, uint64_t))(v22 + 8);
  v25(v23, a3);
  uint64_t v26 = v12;
LABEL_6:
  v25(v26, a3);
  uint64_t v16 = v33;
LABEL_9:
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v8);
  return v24 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DisplayUnit<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static DisplayUnit.__derived_enum_equals(_:_:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t ClosedRange<>.linearMap(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v16 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v16 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v16 - v12, v3, v4);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  dispatch thunk of static Numeric.* infix(_:_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  v14(v11, v4);
  return ((uint64_t (*)(char *, uint64_t))v14)(v13, v4);
}

uint64_t ClosedRange<>.normalize(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(a1);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v11 - v7;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  dispatch thunk of static FloatingPoint./ infix(_:_:)();
  uint64_t v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v9(v6, v2);
  return ((uint64_t (*)(char *, uint64_t))v9)(v8, v2);
}

uint64_t ClosedRange<>.clampedNormalize(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  ClosedRange.clamp(_:)(v5, v8);
  ClosedRange<>.normalize(_:)((uint64_t)v7, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t Array.extract(_:)()
{
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v1 = _ArrayProtocol.filter(_:)();
  if (!v0)
  {
    swift_getWitnessTable();
    swift_getWitnessTable();
    RangeReplaceableCollection<>.removeAll(where:)();
  }
  return v1;
}

uint64_t Array.extractFirst(where:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Collection.firstIndex(where:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v2)
  {
    if (v6)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56))(a2, 1, 1);
    }
    else
    {
      Array.remove(at:)();
      return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56))(a2, 0, 1);
    }
  }
  return result;
}

uint64_t Array.removingDuplicates<A>(with:)()
{
  Set.init()();
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v0 = _ArrayProtocol.filter(_:)();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t closure #1 in Array.removingDuplicates<A>(with:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(class metadata base offset for KeyPath + *a3 + 8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  __chkstk_darwin();
  char v6 = (char *)&v9 - v5;
  swift_getAtKeyPath();
  type metadata accessor for Set();
  char v7 = Set.insert(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7 & 1;
}

uint64_t Collection.removingDuplicates<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v11 = &v14[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = Set.init()();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v11, v4, a2);
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = &v20;
  uint64_t v19 = a1;
  uint64_t v12 = Sequence.filter(_:)();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t closure #1 in Collection.removingDuplicates<A>(with:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(class metadata base offset for KeyPath + *a3 + 8);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  __chkstk_darwin(v5);
  char v7 = (char *)&v10 - v6;
  swift_getAtKeyPath();
  type metadata accessor for Set();
  char v8 = Set.insert(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v8 & 1;
}

uint64_t Sequence.sorted<A>(by:comparator:)()
{
  return Sequence.sorted(by:)();
}

uint64_t closure #1 in Sequence.sorted<A>(by:comparator:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, char *), uint64_t a4, void *a5)
{
  uint64_t v6 = *(void *)(class metadata base offset for KeyPath + *a5 + 8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v11 = (char *)v15 - v10;
  swift_getAtKeyPath();
  swift_getAtKeyPath();
  char v12 = a3(v11, v9);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v7 + 8);
  v13(v9, v6);
  v13(v11, v6);
  return v12 & 1;
}

uint64_t Sequence<>.excluding(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v8[5] = a1;
  swift_bridgeObjectRetain();
  uint64_t v9 = Sequence.exclude(_:)((uint64_t)partial apply for implicit closure #2 in implicit closure #1 in Sequence<>.excluding(_:), (uint64_t)v8, a2, a3);
  swift_release();
  return v9;
}

{
  uint64_t v7;
  void *v8;
  uint64_t v9;

  swift_getAssociatedTypeWitness();
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v7 = Set.init<A>(_:)();
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  v8[5] = v7;
  uint64_t v9 = Sequence.exclude(_:)((uint64_t)partial apply for implicit closure #2 in implicit closure #1 in Sequence<>.excluding(_:), (uint64_t)v8, a2, a3);
  swift_release();
  return v9;
}

uint64_t implicit closure #2 in implicit closure #1 in Sequence<>.excluding(_:)()
{
  return Sequence<>.contains(_:)() & 1;
}

uint64_t Sequence.exclude(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __chkstk_darwin(a1);
  (*(void (**)(unsigned char *, uint64_t))(v10 + 16))(&v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v4);
  uint64_t v13 = a3;
  uint64_t v14 = a4;
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  return Sequence.filter(_:)();
}

uint64_t Sequence<>.exclude(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[2] = a2;
  v5[3] = a3;
  v5[4] = a4;
  v5[5] = a1;
  return Sequence.exclude(_:)((uint64_t)partial apply for closure #1 in Sequence<>.exclude(_:), (uint64_t)v5, a2, a3);
}

{
  void v5[8];

  void v5[2] = a2;
  v5[3] = a3;
  v5[4] = a4;
  v5[5] = a1;
  return Sequence.exclude(_:)((uint64_t)partial apply for closure #1 in Sequence<>.exclude(_:), (uint64_t)v5, a2, a3);
}

uint64_t Sequence<>.exclude(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[2] = a2;
  v4[3] = a3;
  void v4[4] = a1;
  return Sequence.exclude(_:)((uint64_t)partial apply for closure #1 in Sequence<>.exclude(_:), (uint64_t)v4, a2, a3);
}

uint64_t EquatableIgnored.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t EquatableIgnored.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

Swift::Int HashableIgnored.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HashableIgnored<A>()
{
  return Hasher._finalize()();
}

Swift::Void __swiftcall Array._checkSubscript_mutating(_:)(Swift::Int a1)
{
  uint64_t v2 = v1;
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  if (a1 < 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return;
  }
  uint64_t v5 = v2 & 0xFFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0) {
    uint64_t v5 = v2;
  }
  if (*(void *)(v5 + 16) <= (unint64_t)a1) {
    goto LABEL_7;
  }
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = static Array._allocateUninitialized(_:)();
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = result;
    if (a2)
    {
      uint64_t v9 = v7;
      uint64_t v10 = *(void *)(a3 - 8);
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
      v11(v7, a1, a3);
      uint64_t v12 = a2 - 1;
      if (v12)
      {
        uint64_t v13 = *(void *)(v10 + 72);
        uint64_t v14 = v9 + v13;
        do
        {
          v11(v14, a1, a3);
          v14 += v13;
          --v12;
        }
        while (v12);
      }
    }
    type metadata accessor for Array();
    return v8;
  }
  return result;
}

void partial apply for closure #1 in Collection.asyncMap<A>(transform:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #3 in static Actions.ReportConcern.action(context:);
  uint64_t v2 = (char *)&async function pointer to closure #1 in Collection.asyncMap<A>(transform:)
     + async function pointer to closure #1 in Collection.asyncMap<A>(transform:);
  __asm { BR              X9; closure #1 in Collection.asyncMap<A>(transform:) }
}

uint64_t partial apply for closure #2 in Collection.asyncMap<A>(transform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t partial apply for closure #1 in Collection<>.first(approximatelyMatching:)()
{
  return partial apply for closure #1 in Collection<>.first(approximatelyMatching:)() & 1;
}

{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of static ApproximatelyEquatable.==~ infix(_:_:)() & 1;
}

uint64_t type metadata accessor for DisplayUnit()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in Array.removingDuplicates<A>(with:)(uint64_t a1)
{
  return closure #1 in Array.removingDuplicates<A>(with:)(a1, *(void *)(v1 + 24), *(void **)(v1 + 32)) & 1;
}

uint64_t partial apply for closure #1 in Collection.removingDuplicates<A>(with:)(uint64_t a1)
{
  return closure #1 in Collection.removingDuplicates<A>(with:)(a1, *(void *)(v1 + 40), *(void **)(v1 + 48)) & 1;
}

uint64_t partial apply for closure #1 in Sequence.sorted<A>(by:comparator:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in Sequence.sorted<A>(by:comparator:)(a1, a2, *(uint64_t (**)(char *, char *))(v2 + 40), *(void *)(v2 + 48), *(void **)(v2 + 56)) & 1;
}

BOOL partial apply for closure #1 in Sequence.exclude(_:)()
{
  return ((*(uint64_t (**)(void))(v0 + 32))() & 1) == 0;
}

uint64_t partial apply for closure #1 in Sequence<>.exclude(_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

{
  swift_getAssociatedTypeWitness();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

BOOL partial apply for closure #1 in Sequence<>.exclude(_:)(void *a1)
{
  return *a1 == *(void *)(v1 + 32);
}

uint64_t base witness table accessor for Equatable in HashableIgnored<A>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for DisplayUnit()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for DisplayUnit(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(_DWORD *)(v4 + 80);
  if (v6 <= 7 && (unint64_t)(v5 + 1) <= 0x18 && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    unsigned int v10 = a2[v5];
    if (v10 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_18;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_18;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_18;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_18:
          int v13 = (v12 | ((v10 - 2) << (8 * v5))) + 2;
          unsigned int v14 = v12 + 2;
          if (v5 >= 4) {
            unsigned int v10 = v14;
          }
          else {
            unsigned int v10 = v13;
          }
          break;
        default:
          break;
      }
    }
    (*(void (**)(void *))(v4 + 16))(a1);
    *((unsigned char *)v3 + v5) = v10 == 1;
  }
  else
  {
    uint64_t v9 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return v3;
}

uint64_t initializeWithCopy for DisplayUnit(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_10;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_10;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_10;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_10:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  BOOL v10 = v5 == 1;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
  *(unsigned char *)(a1 + v4) = v10;
  return a1;
}

unsigned __int8 *assignWithCopy for DisplayUnit(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 + 64);
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    unsigned int v9 = a2[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_11;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_11;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_11;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_11:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    BOOL v14 = v9 == 1;
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v5);
    a1[v8] = v14;
  }
  return a1;
}

uint64_t initializeWithTake for DisplayUnit(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_10;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_10;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_10;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_10:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  BOOL v10 = v5 == 1;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
  *(unsigned char *)(a1 + v4) = v10;
  return a1;
}

unsigned __int8 *assignWithTake for DisplayUnit(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 + 64);
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    unsigned int v9 = a2[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_11;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_11;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_11;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_11:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    BOOL v14 = v9 == 1;
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v5);
    a1[v8] = v14;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayUnit(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_20;
  }
  uint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_20;
      }
      goto LABEL_12;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_20;
      }
      goto LABEL_12;
    }
    if (v8 < 2)
    {
LABEL_20:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_20;
  }
LABEL_12:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void storeEnumTagSinglePayload for DisplayUnit(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_32:
        __break(1u);
        JUMPOUT(0x1002B6894);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_21;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_20;
      case 3:
        goto LABEL_32;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_21;
      default:
LABEL_20:
        if (a2) {
LABEL_21:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for DisplayUnit(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_10;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_10;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_10;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_10:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void destructiveInjectEnumTag for DisplayUnit(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t type metadata accessor for EquatableIgnored()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for EquatableIgnored(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for EquatableIgnored(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1002B6DE4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for HashableIgnored()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1002B6E78()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in Sequence<>.excluding(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();

  return Set.contains(_:)(a1, v3, AssociatedTypeWitness, v4);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in Sequence<>.excluding(_:)()
{
  return implicit closure #2 in implicit closure #1 in Sequence<>.excluding(_:)();
}

uint64_t sub_1002B6F24()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in Collection.asyncMap<A>(transform:)()
{
  swift_getAssociatedTypeWitness();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #1 in static MusicEngagementExtension.performRequest(with:completion:);
  uint64_t v2 = (char *)&async function pointer to closure #1 in closure #1 in Collection.asyncMap<A>(transform:)
     + async function pointer to closure #1 in closure #1 in Collection.asyncMap<A>(transform:);
  __asm { BR              X9; closure #1 in closure #1 in Collection.asyncMap<A>(transform:) }
}

uint64_t Text.withChevron<A>(_:tintColor:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, char a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  char v37 = a4 & 1;
  uint64_t v10 = type metadata accessor for LocalizedStringKey.StringInterpolation();
  __chkstk_darwin(v10 - 8);
  id v11 = a1;
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [self systemImageNamed:v12 withConfiguration:v11];

  if (v13)
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
    v14._uint64_t countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v14);
    v15._uint64_t countAndFlagsBits = 41154;
    v15._object = (void *)0xA200000000000000;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v15);
    v16._uint64_t countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v16);
    id v17 = [v13 imageWithRenderingMode:2];
    Image.init(uiImage:)();
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
    swift_release();
    v18._uint64_t countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v18);
    LocalizedStringKey.init(stringInterpolation:)();
    uint64_t v19 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v21 = v20;
    char v23 = v22 & 1;
    uint64_t v24 = Text.foregroundStyle<A>(_:)();
    uint64_t v36 = v13;
    uint64_t v26 = v25;
    char v28 = v27 & 1;
    outlined consume of Text.Storage(v19, v21, v23);
    swift_bridgeObjectRelease();
    uint64_t v29 = static Text.+ infix(_:_:)();
    uint64_t v31 = v30;
    LOBYTE(v21) = v32;
    a5 = v33;

    char v34 = v21 & 1;
    outlined consume of Text.Storage(v24, v26, v28);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a6 = v29;
  }
  else
  {
    *(void *)a6 = a2;
    uint64_t v31 = a3;
    char v34 = v37;
    outlined copy of Text.Storage(a2, a3, v37);
    uint64_t result = swift_bridgeObjectRetain();
  }
  *(void *)(a6 + 8) = v31;
  *(unsigned char *)(a6 + 16) = v34;
  *(void *)(a6 + 24) = a5;
  return result;
}

uint64_t Text.playableForegroundStyle<A>(_:isPlayable:)(uint64_t a1, char a2)
{
  __chkstk_darwin();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  if (swift_dynamicCast())
  {
    if (a2) {
      int v7 = v9[7];
    }
    else {
      int v7 = static HierarchicalShapeStyle.tertiary.getter();
    }
    v9[3] = v7;
  }
  return Text.foregroundStyle<A>(_:)();
}

uint64_t View.playableForegroundStyle<A>(_:isPlayable:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = a5;
  uint64_t v8 = *(void *)(a4 - 8);
  __chkstk_darwin(a1);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PlayableForegroundStyle();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  Swift::String v14 = (char *)&v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a4);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v14, v10, a4);
  v14[*(int *)(v11 + 36)] = a2;
  View.modifier<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t type metadata accessor for PlayableForegroundStyle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t PlayableForegroundStyle.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v63 = a1;
  uint64_t v66 = a3;
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for _ViewModifier_Content();
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v57 = *(void *)(a2 + 24);
  uint64_t v67 = type metadata accessor for _ForegroundStyleModifier();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v60 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v58 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v59 = (char *)&v55 - v10;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ForegroundStyleModifier<HierarchicalShapeStyle>);
  uint64_t v68 = v5;
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v56 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  Swift::String v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  id v17 = (char *)&v55 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v55 - v19;
  uint64_t v21 = *(void *)(v6 - 8);
  __chkstk_darwin(v18);
  char v23 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = v24;
  uint64_t v25 = type metadata accessor for _ConditionalContent();
  uint64_t v64 = *(void *)(v25 - 8);
  uint64_t v65 = v25;
  __chkstk_darwin(v25);
  uint64_t v62 = (char *)&v55 - v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v3, v6);
  if (swift_dynamicCast())
  {
    uint64_t v60 = v7;
    uint64_t v27 = v56;
    char v28 = v20;
    uint64_t v29 = v17;
    uint64_t v30 = v61;
    if (*(unsigned char *)(v3 + *(int *)(a2 + 36))) {
      int v31 = v83;
    }
    else {
      int v31 = static HierarchicalShapeStyle.quaternary.getter();
    }
    int v83 = v31;
    uint64_t WitnessTable = swift_getWitnessTable();
    unint64_t v59 = (char *)WitnessTable;
    View.foregroundStyle<A>(_:)();
    uint64_t v45 = lazy protocol witness table accessor for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>(&lazy protocol witness table cache variable for type _ForegroundStyleModifier<HierarchicalShapeStyle> and conformance _ForegroundStyleModifier<A>, &demangling cache variable for type metadata for _ForegroundStyleModifier<HierarchicalShapeStyle>);
    uint64_t v71 = WitnessTable;
    uint64_t v72 = v45;
    uint64_t v63 = swift_getWitnessTable();
    os_log_t v46 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
    v46(v28, v29, v30);
    unint64_t v47 = *(void (**)(char *, uint64_t))(v27 + 8);
    v47(v29, v30);
    v46(v14, v28, v30);
    uint64_t v48 = swift_getWitnessTable();
    id v69 = v59;
    uint64_t v70 = v48;
    swift_getWitnessTable();
    uint64_t v41 = v62;
    _s7SwiftUI11ViewBuilderV11buildEither5firstAA19_ConditionalContentVyxq_Gx_tAA0C0RzAaIR_r0_lFZ_0((uint64_t)v14, v30);
    v47(v14, v30);
    v47(v28, v30);
    uint64_t v43 = v64;
    uint64_t v42 = v65;
  }
  else
  {
    uint64_t v32 = swift_getWitnessTable();
    uint64_t v33 = (uint64_t)v58;
    View.foregroundStyle<A>(_:)();
    uint64_t v34 = swift_getWitnessTable();
    uint64_t v81 = v32;
    uint64_t v82 = v34;
    uint64_t v63 = swift_getWitnessTable();
    uint64_t v35 = v60;
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
    char v37 = v59;
    v36(v59, v33, v7);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v38(v33, v7);
    v36((char *)v33, (uint64_t)v37, v7);
    uint64_t v39 = lazy protocol witness table accessor for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>(&lazy protocol witness table cache variable for type _ForegroundStyleModifier<HierarchicalShapeStyle> and conformance _ForegroundStyleModifier<A>, &demangling cache variable for type metadata for _ForegroundStyleModifier<HierarchicalShapeStyle>);
    uint64_t v79 = v32;
    uint64_t v80 = v39;
    uint64_t v40 = v61;
    swift_getWitnessTable();
    uint64_t v41 = v62;
    _s7SwiftUI11ViewBuilderV11buildEither6secondAA19_ConditionalContentVyxq_Gq__tAA0C0RzAaIR_r0_lFZ_0(v33, v40, v7);
    v38(v33, v7);
    v38((uint64_t)v37, v7);
    uint64_t v43 = v64;
    uint64_t v42 = v65;
  }
  uint64_t v49 = swift_getWitnessTable();
  uint64_t v50 = lazy protocol witness table accessor for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>(&lazy protocol witness table cache variable for type _ForegroundStyleModifier<HierarchicalShapeStyle> and conformance _ForegroundStyleModifier<A>, &demangling cache variable for type metadata for _ForegroundStyleModifier<HierarchicalShapeStyle>);
  uint64_t v77 = v49;
  uint64_t v78 = v50;
  uint64_t v51 = swift_getWitnessTable();
  uint64_t v52 = swift_getWitnessTable();
  uint64_t v75 = v49;
  uint64_t v76 = v52;
  uint64_t v53 = swift_getWitnessTable();
  uint64_t v73 = v51;
  uint64_t v74 = v53;
  swift_getWitnessTable();
  (*(void (**)(uint64_t, char *, uint64_t))(v43 + 16))(v66, v41, v42);
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v41, v42);
}

uint64_t _s7SwiftUI11ViewBuilderV11buildEither5firstAA19_ConditionalContentVyxq_Gx_tAA0C0RzAaIR_r0_lFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _ConditionalContent.Storage();
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))((char *)&v7 - v5, a1, a2);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t _s7SwiftUI11ViewBuilderV11buildEither6secondAA19_ConditionalContentVyxq_Gq__tAA0C0RzAaIR_r0_lFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for _ConditionalContent.Storage();
  __chkstk_darwin(v5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))((char *)&v8 - v6, a1, a3);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

uint64_t ListChevron.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>();

  return Button.init(action:label:)();
}

uint64_t sub_1002B8198()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t closure #2 in ListChevron.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v49 = a1;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialRangeThrough<DynamicTypeSize>);
  __chkstk_darwin(v48);
  unint64_t v54 = (char *)&v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for Image.Scale();
  uint64_t v2 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v51 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.fontWeight(_:)>>.0);
  uint64_t v4 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>);
  __chkstk_darwin(v50);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.dynamicTypeSize<A>(_:)>>.0);
  uint64_t v45 = *(void *)(v9 - 8);
  uint64_t v46 = v9;
  __chkstk_darwin(v9);
  unint64_t v44 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier>);
  __chkstk_darwin(v11 - 8);
  unint64_t v47 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = Image.init(systemName:)();
  uint64_t v14 = static Font.body.getter();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v55 = v13;
  uint64_t v56 = KeyPath;
  unint64_t v57 = v14;
  static Font.Weight.semibold.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>);
  lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  View.fontWeight(_:)();
  uint64_t v16 = v50;
  swift_release();
  swift_release();
  swift_release();
  uint64_t v18 = v51;
  uint64_t v17 = v52;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v51, enum case for Image.Scale.small(_:), v52);
  uint64_t v19 = swift_getKeyPath();
  uint64_t v20 = (uint64_t *)&v8[*(int *)(v16 + 36)];
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))((char *)v20 + *(int *)(v21 + 28), v18, v17);
  uint64_t *v20 = v19;
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  uint64_t v43 = v8;
  char v23 = v8;
  uint64_t v24 = v53;
  v22(v23, v6, v53);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v18, v17);
  uint64_t v25 = v6;
  uint64_t v26 = (uint64_t)v54;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v25, v24);
  uint64_t v27 = enum case for DynamicTypeSize.accessibility1(_:);
  uint64_t v28 = type metadata accessor for DynamicTypeSize();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 104))(v26, v27, v28);
  lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier((unint64_t *)&lazy protocol witness table cache variable for type DynamicTypeSize and conformance DynamicTypeSize, (void (*)(uint64_t))&type metadata accessor for DynamicTypeSize);
  uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
  if (result)
  {
    unint64_t v30 = lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>();
    uint64_t v31 = lazy protocol witness table accessor for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>(&lazy protocol witness table cache variable for type PartialRangeThrough<DynamicTypeSize> and conformance PartialRangeThrough<A>, &demangling cache variable for type metadata for PartialRangeThrough<DynamicTypeSize>);
    uint64_t v32 = (uint64_t)v43;
    uint64_t v33 = v44;
    uint64_t v34 = v48;
    View.dynamicTypeSize<A>(_:)();
    outlined destroy of TaskPriority?(v26, &demangling cache variable for type metadata for PartialRangeThrough<DynamicTypeSize>);
    outlined destroy of TaskPriority?(v32, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>);
    uint64_t v55 = v16;
    uint64_t v56 = v34;
    unint64_t v57 = v30;
    uint64_t v58 = v31;
    swift_getOpaqueTypeConformance2();
    uint64_t v35 = v46;
    uint64_t v36 = (uint64_t)v47;
    View.accessibilityHidden(_:)();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v33, v35);
    id v37 = [self tertiaryLabelColor];
    uint64_t v38 = Color.init(uiColor:)();
    uint64_t v39 = swift_getKeyPath();
    uint64_t v55 = v38;
    swift_retain();
    uint64_t v40 = AnyShapeStyle.init<A>(_:)();
    uint64_t v41 = v49;
    outlined init with copy of ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier>(v36, v49);
    swift_release();
    uint64_t v42 = (uint64_t *)(v41
                    + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>)
                             + 36));
    *uint64_t v42 = v39;
    v42[1] = v40;
    return outlined destroy of TaskPriority?(v36, &demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier>);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
    lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<AnyShapeStyle?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<AnyShapeStyle?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PartialRangeThrough<DynamicTypeSize>);
    lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>(&lazy protocol witness table cache variable for type PartialRangeThrough<DynamicTypeSize> and conformance PartialRangeThrough<A>, &demangling cache variable for type metadata for PartialRangeThrough<DynamicTypeSize>);
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier(&_s7SwiftUI31AccessibilityAttachmentModifierVAcA04ViewE0AAWL_0, (void (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>>);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>);
    lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<<<opaque return type of View.fontWeight(_:)>>.0, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>>);
    lazy protocol witness table accessor for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t protocol witness for View.body.getter in conformance ListChevron()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>();

  return Button.init(action:label:)();
}

uint64_t _UIHostingView.init(content:)(uint64_t a1)
{
  uint64_t v1 = (void (*)(void))__chkstk_darwin(a1);
  v1();
  return dispatch thunk of _UIHostingView.__allocating_init(rootView:)();
}

uint64_t associated type witness table accessor for View.Body : View in ListChevron()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ListChevron()
{
  return &type metadata for ListChevron;
}

void *sub_1002B8CB0()
{
  return &protocol witness table for Text;
}

uint64_t sub_1002B8CBC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1002B8D50()
{
  return lazy protocol witness table accessor for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier>, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>>);
}

uint64_t type metadata completion function for PlayableForegroundStyle()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PlayableForegroundStyle(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_22;
  }
  uint64_t v9 = v6 + 1;
  char v10 = 8 * (v6 + 1);
  if ((v6 + 1) > 3) {
    goto LABEL_7;
  }
  unsigned int v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    int v11 = *(_DWORD *)((char *)a1 + v9);
    if (v11) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2) {
        goto LABEL_22;
      }
LABEL_7:
      int v11 = *((unsigned __int8 *)a1 + v9);
      if (!*((unsigned char *)a1 + v9)) {
        goto LABEL_22;
      }
LABEL_14:
      int v13 = (v11 - 1) << v10;
      if (v9 > 3) {
        int v13 = 0;
      }
      if (v9)
      {
        if (v9 > 3) {
          LODWORD(v9) = 4;
        }
        switch((int)v9)
        {
          case 2:
            LODWORD(v9) = *a1;
            break;
          case 3:
            LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v9) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v9) = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v7 + (v9 | v13) + 1;
    }
    int v11 = *(unsigned __int16 *)((char *)a1 + v9);
    if (*(unsigned __int16 *)((char *)a1 + v9)) {
      goto LABEL_14;
    }
  }
LABEL_22:
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v15 = *((unsigned __int8 *)a1 + v6);
  if (v15 < 2) {
    return 0;
  }
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for PlayableForegroundStyle(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x1002B91F4);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 < 0xFE)
        {
          a1[v9] = a2 + 1;
        }
        else
        {
          uint64_t v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return;
  }
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in PlayableForegroundStyle<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1002B9260@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1002B928C()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_1002B92B8()
{
  return EnvironmentValues.imageScale.getter();
}

uint64_t key path setter for EnvironmentValues.imageScale : EnvironmentValues, serialized(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Image.Scale();
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.imageScale.setter();
}

uint64_t lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002B93F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1002B941C()
{
  return EnvironmentValues.tint.setter();
}

uint64_t outlined init with copy of ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<<<opaque return type of View.dynamicTypeSize<A>(_:)>>.0, AccessibilityAttachmentModifier>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002B94B0()
{
  return swift_getWitnessTable();
}

size_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v5 = *v2;
  size_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    size_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
    unsigned int v5 = (void *)result;
  }
  unint64_t v7 = v5[2];
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v8 = v7 - 1;
    uint64_t v9 = *(void *)(type metadata accessor for NSUserDefaults._Observer.HandlerAssociation(0) - 8);
    uint64_t v10 = *(void *)(v9 + 72);
    unint64_t v11 = (unint64_t)v5
        + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
        + v10 * a1;
    size_t result = outlined init with take of NSUserDefaults._Observer.HandlerAssociation(v11, a2);
    if (v10 > 0 || v11 >= v11 + v10 + v10 * (v8 - a1))
    {
      size_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10)
    {
      size_t result = swift_arrayInitWithTakeBackToFront();
    }
    void v5[2] = v8;
    *uint64_t v2 = v5;
  }
  return result;
}

UIBarButtonItem __swiftcall UIBarButtonItem.init(image:style:)(UIImage_optional image, UIBarButtonItemStyle style)
{
  Class isa = image.value.super.isa;
  id v3 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithImage:image.value.super.isa style:*(void *)&image.is_nil target:0 action:0];

  return (UIBarButtonItem)v3;
}

void *UIBarButtonItem.spacerBarButtonTag.unsafeMutableAddressor()
{
  return &static UIBarButtonItem.spacerBarButtonTag;
}

uint64_t static UIBarButtonItem.spacerBarButtonTag.getter()
{
  return 9999;
}

void one-time initialization function for preferredFixedSpace()
{
  static UIBarButtonItem.preferredFixedSpace = 0x4030000000000000;
}

uint64_t *UIBarButtonItem.preferredFixedSpace.unsafeMutableAddressor()
{
  if (one-time initialization token for preferredFixedSpace != -1) {
    swift_once();
  }
  return &static UIBarButtonItem.preferredFixedSpace;
}

double static UIBarButtonItem.preferredFixedSpace.getter()
{
  if (one-time initialization token for preferredFixedSpace != -1) {
    swift_once();
  }
  return *(double *)&static UIBarButtonItem.preferredFixedSpace;
}

id static UIBarButtonItem.spacerBarButtonItem()()
{
  uint64_t v0 = self;
  if (one-time initialization token for preferredFixedSpace != -1) {
    swift_once();
  }
  id v1 = [v0 fixedSpaceItemOfWidth:*(double *)&static UIBarButtonItem.preferredFixedSpace];
  [v1 setTag:9999];
  return v1;
}

UIBarButtonItem_optional __swiftcall UINavigationItem.existingBarButtonItem(for:)(UIView a1)
{
  uint64_t v2 = v1;
  id v3 = [v1 rightBarButtonItems];
  if (v3)
  {
    uint64_t v4 = v3;
    type metadata accessor for UIMenu(0, (unint64_t *)&_sSo15UIBarButtonItemCML_0);
    unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v32 = v2;
    if (v5 >> 62) {
      goto LABEL_14;
    }
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t v7 = a1.super.super.isa;
    swift_bridgeObjectRetain();
    for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v8 = 4;
      while (1)
      {
        id v9 = (v5 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
           : *(id *)(v5 + 8 * v8);
        uint64_t v10 = v9;
        uint64_t v11 = v8 - 3;
        if (__OFADD__(v8 - 4, 1)) {
          break;
        }
        id v12 = [v9 customView];
        if (v12)
        {
          int v13 = v12;
          type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
          unsigned int v14 = a1.super.super.isa;
          id v15 = v13;
          LOBYTE(v13) = static NSObject.== infix(_:_:)();

          if (v13)
          {

            swift_bridgeObjectRelease_n();
            goto LABEL_33;
          }
        }

        ++v8;
        if (v11 == v6) {
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_14:
      int v17 = a1.super.super.isa;
      swift_bridgeObjectRetain();
    }
LABEL_15:

    swift_bridgeObjectRelease_n();
    uint64_t v2 = v32;
  }
  id v18 = objc_msgSend(v2, "leftBarButtonItems", v32);
  if (v18)
  {
    uint64_t v19 = v18;
    type metadata accessor for UIMenu(0, (unint64_t *)&_sSo15UIBarButtonItemCML_0);
    unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v20 >> 62) {
      goto LABEL_30;
    }
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v22 = a1.super.super.isa;
    swift_bridgeObjectRetain();
    for (; v21; uint64_t v21 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v23 = 4;
      while (1)
      {
        id v24 = (v20 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
            : *(id *)(v20 + 8 * v23);
        uint64_t v10 = v24;
        uint64_t v25 = v23 - 3;
        if (__OFADD__(v23 - 4, 1)) {
          break;
        }
        id v26 = [v24 customView];
        if (v26)
        {
          uint64_t v27 = v26;
          type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
          uint64_t v28 = a1.super.super.isa;
          id v29 = v27;
          LOBYTE(v27) = static NSObject.== infix(_:_:)();

          if (v27)
          {

            swift_bridgeObjectRelease();
            goto LABEL_32;
          }
        }

        ++v23;
        if (v25 == v21) {
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_30:
      unint64_t v30 = a1.super.super.isa;
      swift_bridgeObjectRetain();
    }
LABEL_31:

    swift_bridgeObjectRelease();
    uint64_t v10 = 0;
LABEL_32:
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = 0;
  }
LABEL_33:
  uint64_t v31 = (objc_class *)v10;
  result.value.super.super.Class isa = v31;
  result.is_nil = v16;
  return result;
}

uint64_t Collection<>.first(embedding:)()
{
  Sequence.first(where:)();
  return v1;
}

void *UINavigationItem.existingBarButtonItems(for:)(unint64_t a1)
{
  uint64_t v2 = v1;
  id v4 = [v1 rightBarButtonItems];
  if (v4)
  {
    unint64_t v5 = v4;
    type metadata accessor for UIMenu(0, (unint64_t *)&_sSo15UIBarButtonItemCML_0);
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    unint64_t v7 = specialized Sequence.filter(_:)(v6, a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)((unint64_t)v7);
  }
  id v8 = [v2 leftBarButtonItems];
  if (v8)
  {
    id v9 = v8;
    type metadata accessor for UIMenu(0, (unint64_t *)&_sSo15UIBarButtonItemCML_0);
    unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    uint64_t v11 = specialized Sequence.filter(_:)(v10, a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Array.append<A>(contentsOf:)((unint64_t)v11);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t Collection<>.all(embedding:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __chkstk_darwin(a1);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16))(&v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], v3, a2);
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a1;
  return Sequence.filter(_:)();
}

id closure #1 in Collection<>.first(embedding:)(id *a1, void *a2)
{
  id result = [*a1 customView];
  if (result)
  {
    id v4 = result;
    type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    id v5 = a2;
    id v6 = v4;
    char v7 = static NSObject.== infix(_:_:)();

    return (id)(v7 & 1);
  }
  return result;
}

id closure #1 in Collection<>.all(embedding:)(id *a1, unint64_t a2)
{
  id result = [*a1 customView];
  if (result)
  {
    id v4 = result;
    char v5 = specialized Sequence<>.contains(_:)((uint64_t)result, a2);

    return (id)(v5 & 1);
  }
  return result;
}

void UIWindowScene.mainWindow.getter()
{
  if ([v0 delegate])
  {
    uint64_t v1 = (void *)swift_dynamicCastObjCProtocolConditional();
    if (v1)
    {
      uint64_t v2 = v1;
      if ([v1 respondsToSelector:"window"])
      {
        [v2 window];
        swift_unknownObjectRelease();
        return;
      }
    }
    swift_unknownObjectRelease();
  }
  id v3 = [v0 windows];
  type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for UIWindow);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v6) {
      goto LABEL_11;
    }
  }
  else if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return;
  }
  if ((v4 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_11;
  }
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v5 = *(id *)(v4 + 32);
    goto LABEL_11;
  }
  __break(1u);
}

id UIWindowScene.rootViewController.getter()
{
  UIWindowScene.mainWindow.getter();
  uint64_t v1 = v0;
  id v2 = [v0 rootViewController];

  return v2;
}

BOOL UISceneActivationState.isForeground.getter(unint64_t a1)
{
  return a1 < 2;
}

uint64_t static UICollectionReusableView.reuseIdentifier.getter()
{
  return String.init<A>(describing:)();
}

void UICollectionView.register<A>(_:reuseIdentifier:)()
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v2 = String._bridgeToObjectiveC()();
  [v0 registerClass:ObjCClassFromMetadata forCellWithReuseIdentifier:v2];
}

void UICollectionView.register<A>(_:ofKind:reuseIdentifier:)()
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = String._bridgeToObjectiveC()();
  [v0 registerClass:ObjCClassFromMetadata forSupplementaryViewOfKind:v2 withReuseIdentifier:v3];
}

uint64_t UICollectionView.dequeue<A>(_:forItemAt:reuseIdentifier:)(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v9 = String._bridgeToObjectiveC()();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v11 = [v3 dequeueReusableCellWithReuseIdentifier:v9 forIndexPath:isa];

  uint64_t result = swift_dynamicCastUnknownClass();
  if (!result)
  {

    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
    unint64_t v16 = 0;
    unint64_t v17 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    unint64_t v16 = 0xD00000000000001ELL;
    unint64_t v17 = 0x8000000100471D20;
    v13._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = 544497952;
    v14._object = (void *)0xE400000000000000;
    String.append(_:)(v14);
    lazy protocol witness table accessor for type IndexPath and conformance IndexPath((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (void (*)(uint64_t))&type metadata accessor for IndexPath);
    v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t UICollectionView.dequeue<A>(_:ofKind:for:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  v20[1] = a1;
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v14 = [v5 dequeueReusableSupplementaryViewOfKind:v11 withReuseIdentifier:v12 forIndexPath:isa];

  uint64_t result = swift_dynamicCastUnknownClass();
  if (!result)
  {

    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4, v7);
    v20[2] = 0;
    v20[3] = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v16._object = (void *)0x8000000100471D40;
    v16._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 544497952;
    v18._object = (void *)0xE400000000000000;
    String.append(_:)(v18);
    lazy protocol witness table accessor for type IndexPath and conformance IndexPath((unint64_t *)&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, (void (*)(uint64_t))&type metadata accessor for IndexPath);
    v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t UICollectionView.globalIndex(for:)()
{
  id v1 = [v0 numberOfSections];
  uint64_t result = IndexPath.section.getter();
  if (__OFADD__(result, 1))
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  if (result + 1 >= (uint64_t)v1) {
    uint64_t v3 = (uint64_t)v1;
  }
  else {
    uint64_t v3 = result + 1;
  }
  if (v3 < 0) {
    goto LABEL_20;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  while (1)
  {
    if (v3 == v5)
    {
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    uint64_t v6 = (uint64_t)[v0 numberOfItemsInSection:v5];
    uint64_t result = IndexPath.section.getter();
    if (v5 == result) {
      break;
    }
    BOOL v7 = __OFADD__(v4, v6);
    v4 += v6;
    if (v7) {
      goto LABEL_18;
    }
    if (v3 == ++v5) {
      return 0;
    }
  }
  if (IndexPath.item.getter() >= v6) {
    return 0;
  }
  uint64_t v8 = IndexPath.item.getter();
  BOOL v7 = __OFADD__(v4, v8);
  uint64_t result = v4 + v8;
  if (v7) {
    goto LABEL_21;
  }
  return result;
}

uint64_t UICollectionView.indexPath(forGlobalIndex:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&_s10Foundation9IndexPathVSgMD_0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for IndexPath();
  unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
  v10(a2, 1, 1, v9);
  uint64_t result = (uint64_t)[v3 numberOfSections];
  if (result < 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  else
  {
    uint64_t v12 = result;
    uint64_t v17 = a2;
    if (result)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      while (1)
      {
        if (v12 == v14)
        {
          __break(1u);
LABEL_13:
          __break(1u);
          goto LABEL_14;
        }
        uint64_t result = (uint64_t)[v3 numberOfItemsInSection:v14];
        if (__OFADD__(v13, result)) {
          goto LABEL_13;
        }
        if (v13 + result > a1) {
          break;
        }
        ++v14;
        v13 += result;
        if (v12 == v14) {
          return result;
        }
      }
      uint64_t result = a1 - v13;
      if (__OFSUB__(a1, v13)) {
        goto LABEL_15;
      }
      IndexPath.init(item:section:)();
      uint64_t v15 = v17;
      _s10Foundation9IndexPathVSgWOh_0(v17);
      v10((uint64_t)v8, 0, 1, v9);
      return _s10Foundation9IndexPathVSgWOb_0((uint64_t)v8, v15);
    }
  }
  return result;
}

unint64_t UICollectionView.totalItemCount.getter()
{
  unint64_t result = (unint64_t)[v0 numberOfSections];
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t v2 = 0;
    unint64_t v3 = result;
    if (!result) {
      return v2;
    }
    uint64_t v4 = 0;
    while (1)
    {
      unint64_t result = (unint64_t)[v0 numberOfItemsInSection:v4];
      BOOL v5 = __OFADD__(v2, result);
      v2 += result;
      if (v5) {
        break;
      }
      if (v3 == ++v4) {
        return v2;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

char *UICollectionView.isLast(indexPath:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = IndexPath.section.getter();
  unint64_t result = (char *)[v2 numberOfSections];
  unint64_t v10 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  if ((char *)v8 == v10)
  {
    uint64_t v11 = IndexPath.item.getter();
    uint64_t v12 = (char *)[v2 numberOfItemsInSection:v8];
    unint64_t result = (char *)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if (!__OFSUB__(v12, 1)) {
      return (char *)(v11 == (void)(v12 - 1));
    }
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return 0;
}

uint64_t UICollectionView.visibleSupplementaryElements(of:)(uint64_t a1, uint64_t a2)
{
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v2 indexPathsForVisibleSupplementaryElementsOfKind:v5];

  type metadata accessor for IndexPath();
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v2;
  v8[3] = a1;
  v8[4] = a2;
  id v9 = v2;
  swift_bridgeObjectRetain();
  return v7;
}

void closure #1 in UICollectionView.visibleSupplementaryElements(of:)(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (IndexPath, UICollectionReusableView?))
              + 48);
  uint64_t v7 = type metadata accessor for IndexPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a3, a1, v7);
  NSString v8 = String._bridgeToObjectiveC()();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v10 = [a2 supplementaryViewForElementKind:v8 atIndexPath:isa];

  *(void *)(a3 + v6) = v10;
}

id UICollectionView.clearSelection(using:animated:)(void *a1, int a2)
{
  unint64_t v3 = v2;
  int v38 = a2;
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  NSString v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&_s10Foundation9IndexPathVSgMD_0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v39 = v3;
  id result = [v3 indexPathsForSelectedItems];
  if (result)
  {
    uint64_t v13 = result;
    uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (a1)
    {
      uint64_t v15 = swift_allocObject();
      id v16 = v39;
      *(void *)(v15 + 16) = v14;
      *(void *)(v15 + 24) = v16;
      *(unsigned char *)(v15 + 32) = v38 & 1;
      unint64_t v44 = partial apply for closure #1 in UICollectionView.clearSelection(using:animated:);
      uint64_t v45 = v15;
      aBlock = _NSConcreteStackBlock;
      uint64_t v41 = 1107296256;
      uint64_t v42 = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
      uint64_t v43 = &block_descriptor_40;
      uint64_t v17 = _Block_copy(&aBlock);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      id v18 = v16;
      swift_release();
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = v14;
      *(void *)(v19 + 24) = v18;
      unint64_t v44 = partial apply for closure #2 in UICollectionView.clearSelection(using:animated:);
      uint64_t v45 = v19;
      aBlock = _NSConcreteStackBlock;
      uint64_t v41 = 1107296256;
      uint64_t v42 = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
      uint64_t v43 = &block_descriptor_9_3;
      unint64_t v20 = _Block_copy(&aBlock);
      id v21 = v18;
      swift_release();
      [a1 animateAlongsideTransition:v17 completion:v20];
      _Block_release(v20);
      _Block_release(v17);
      return (id)swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v22 = *(void *)(v14 + 16);
      if (v22)
      {
        id v24 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
        uint64_t v23 = v6 + 16;
        unint64_t v25 = v14 + ((*(unsigned __int8 *)(v23 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 64));
        uint64_t v35 = *(void *)(v23 + 56);
        uint64_t v36 = v24;
        unint64_t v26 = v23 + 40;
        uint64_t v27 = v23;
        uint64_t v28 = (unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 32);
        uint64_t v29 = v14;
        uint64_t v37 = v27;
        unint64_t v30 = (void (**)(char *, uint64_t))(v27 - 8);
        v33[1] = v29;
        uint64_t v34 = (void (**)(char *, char *, uint64_t))(v27 + 16);
        swift_bridgeObjectRetain();
        v33[0] = v26 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
        while (1)
        {
          v36(v11, v25, v5);
          uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v26;
          (*(void (**)(char *, void, uint64_t, uint64_t))v26)(v11, 0, 1, v5);
          if ((*v28)(v11, 1, v5) == 1) {
            break;
          }
          (*v34)(v8, v11, v5);
          Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v39, "deselectItemAtIndexPath:animated:", isa, v38 & 1, v33[0]);

          (*v30)(v8, v5);
          v25 += v35;
          if (!--v22) {
            goto LABEL_10;
          }
        }
      }
      else
      {
        uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
        swift_bridgeObjectRetain();
LABEL_10:
        v31(v11, 1, 1, v5);
      }
      return (id)swift_bridgeObjectRelease_n();
    }
  }
  return result;
}

uint64_t closure #1 in UICollectionView.clearSelection(using:animated:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  id v30 = a3;
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&_s10Foundation9IndexPathVSgMD_0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t v24 = a2;
  if (v13)
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v14 = v7 + 16;
    uint64_t v16 = a2 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
    uint64_t v27 = *(void *)(v14 + 56);
    uint64_t v28 = v15;
    unint64_t v17 = v14 + 40;
    id v18 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 32);
    unint64_t v26 = (void (**)(char *, char *, uint64_t))(v14 + 16);
    uint64_t v29 = v14;
    uint64_t v19 = (void (**)(char *, uint64_t))(v14 - 8);
    swift_bridgeObjectRetain();
    unint64_t v23 = v17 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    unsigned int v25 = a4 & 1;
    while (1)
    {
      v28(v12, v16, v6);
      unint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v17;
      (*(void (**)(char *, void, uint64_t, uint64_t))v17)(v12, 0, 1, v6);
      if ((*v18)(v12, 1, v6) == 1) {
        break;
      }
      (*v26)(v9, v12, v6);
      Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v30, "deselectItemAtIndexPath:animated:", isa, v25, v23, v24);

      (*v19)(v9, v6);
      v16 += v27;
      if (!--v13) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    unint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain();
LABEL_7:
    v20(v12, 1, 1, v6);
  }
  return swift_bridgeObjectRelease();
}

id closure #2 in UICollectionView.clearSelection(using:animated:)(void *a1, uint64_t a2, void *a3)
{
  id v28 = a3;
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&_s10Foundation9IndexPathVSgMD_0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = [a1 isCancelled];
  if (result)
  {
    uint64_t v13 = *(void *)(a2 + 16);
    v23[2] = a2;
    if (v13)
    {
      uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      uint64_t v14 = v6 + 16;
      uint64_t v16 = a2 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
      uint64_t v17 = *(void *)(v14 + 56);
      id v18 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 40);
      unint64_t v26 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 32);
      uint64_t v27 = v15;
      uint64_t v24 = (void (**)(char *, char *, uint64_t))(v14 + 16);
      uint64_t v25 = v17;
      uint64_t v19 = (void (**)(char *, uint64_t))(v14 - 8);
      swift_bridgeObjectRetain();
      v23[1] = (v14 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      while (1)
      {
        v27(v11, v16, v5);
        unint64_t v20 = *v18;
        (*v18)(v11, 0, 1, v5);
        if ((*v26)(v11, 1, v5) == 1) {
          break;
        }
        (*v24)(v8, v11, v5);
        uint64_t v21 = v14;
        Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
        [v28 selectItemAtIndexPath:isa animated:0 scrollPosition:0];

        uint64_t v14 = v21;
        (*v19)(v8, v5);
        v16 += v25;
        if (!--v13) {
          goto LABEL_8;
        }
      }
    }
    else
    {
      unint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      swift_bridgeObjectRetain();
LABEL_8:
      v20(v11, 1, 1, v5);
    }
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t UICollectionView.isDraggingCell(at:)()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for UICellConfigurationState.DragState();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t v9 = type metadata accessor for UICellConfigurationState();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v14 = [v1 cellForItemAtIndexPath:isa];

  if (v14)
  {
    id v15 = [v14 _bridgedConfigurationState];
    static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)();

    UICellConfigurationState.cellDragState.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, enum case for UICellConfigurationState.DragState.dragging(_:), v2);
    char v16 = static UICellConfigurationState.DragState.== infix(_:_:)();

    uint64_t v17 = *(void (**)(char *, uint64_t))(v3 + 8);
    v17(v6, v2);
    v17(v8, v2);
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

void *UICollectionView.elementKindGlobalHeader.unsafeMutableAddressor()
{
  return &static UICollectionView.elementKindGlobalHeader;
}

unint64_t static UICollectionView.elementKindGlobalHeader.getter()
{
  return 0xD000000000000023;
}

id UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  id v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return [v8 initWithRed:(double)a1 / 255.0 green:(double)a2 / 255.0 blue:(double)a3 / 255.0 alpha:a4];
}

id UIColor.interpolate(to:ratio:)(void *a1, double a2)
{
  double v4 = fmin(a2, 1.0);
  if (a2 < 0.0) {
    double v5 = 0.0;
  }
  else {
    double v5 = v4;
  }
  double v13 = 0.0;
  double v14 = 0.0;
  double v11 = 0.0;
  double v12 = 0.0;
  double v9 = 0.0;
  double v10 = 0.0;
  double v7 = 0.0;
  double v8 = 0.0;
  [v2 getRed:&v14 green:&v12 blue:&v10 alpha:&v8];
  [a1 getRed:&v13 green:&v11 blue:&v9 alpha:&v7];
  return [objc_allocWithZone((Class)UIColor) initWithRed:(1.0 - v5) * v14 + v5 * v13 green:(1.0 - v5) * v12 + v5 * v11 blue:(1.0 - v5) * v10 + v5 * v9 alpha:(1.0 - v5) * v8 + v5 * v7];
}

double UIColor.hsba.getter()
{
  return UIColor.hsba.getter((SEL *)&selRef_getHue_saturation_brightness_alpha_);
}

double UIColor.rgba.getter()
{
  return UIColor.hsba.getter((SEL *)&selRef_getRed_green_blue_alpha_);
}

double UIColor.hsba.getter(SEL *a1)
{
  double v6 = 0.0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v3 = 0;
  objc_msgSend(v1, *a1, &v6, &v5, &v4, &v3);
  return v6;
}

UIImage_optional __swiftcall UIImage.init(systemName:font:scale:)(Swift::String systemName, UIFont font, UIImageSymbolScale scale)
{
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [self configurationWithFont:font.super.isa scale:scale];
  double v8 = (objc_class *)[ObjCClassFromMetadata systemImageNamed:v6 withConfiguration:v7];

  double v10 = v8;
  result.value.super.Class isa = v10;
  result.is_nil = v9;
  return result;
}

id UIImage.init(systemName:pointSize:weight:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [self configurationWithPointSize:a4 weight:a1];
  id v9 = [ObjCClassFromMetadata systemImageNamed:v7 withConfiguration:v8];

  return v9;
}

UIImage_optional __swiftcall UIImage.byCroppingToUniformCenter()()
{
  id v1 = v0;
  uint64_t v2 = v0;
  [(objc_class *)v2 size];
  double v4 = v3;
  double v6 = v5;
  if (static ApproximatelyEquatable.!=~ infix(_:_:)())
  {
    if (v6 >= v4)
    {
      double v9 = round((v6 - v4) * 0.5);
      double v8 = 0.0;
      double v10 = v4;
      double v11 = v4;
    }
    else
    {
      double v8 = round((v4 - v6) * 0.5);
      double v9 = 0.0;
      double v10 = v6;
      double v11 = v6;
    }
    id v1 = (objc_class *)UIImage.byCropping(to:)(v8, v9, v10, v11);
  }
  double v12 = v1;
  result.value.super.Class isa = v12;
  result.is_nil = v7;
  return result;
}

id UIImage.byCropping(to:)(double a1, double a2, double a3, double a4)
{
  double v5 = v4;
  double v10 = (CGImage *)[v4 CGImage];
  if (!v10) {
    return 0;
  }
  double v11 = v10;
  _sSo6CGSizeVMa_0(0);
  if ((static ApproximatelyEquatable.!=~ infix(_:_:)() & 1) == 0) {
    goto LABEL_7;
  }
  objc_msgSend(v4, "scale", 0, 0, *(void *)&a3, *(void *)&a4);
  double v13 = v12;
  char v14 = static ApproximatelyEquatable.!=~ infix(_:_:)();
  double v15 = v13 * a1;
  double v16 = v13 * a2;
  double v17 = v13 * a3;
  double v18 = v13 * a4;
  if ((v14 & 1) == 0)
  {
    double v18 = a4;
    double v17 = a3;
    double v16 = a2;
    double v15 = a1;
  }
  CGImageRef v19 = CGImageCreateWithImageInRect(v11, *(CGRect *)&v15);
  if (!v19)
  {
LABEL_7:

    return 0;
  }
  CGImageRef v20 = v19;
  id v21 = objc_msgSend(objc_allocWithZone((Class)UIImage), "initWithCGImage:scale:orientation:", v19, objc_msgSend(v5, "imageOrientation", 0x3FF0000000000000), v13);

  return v21;
}

UIViewController_optional __swiftcall UINavigationController.removeViewController(_:animated:)(UIViewController _, Swift::Bool animated)
{
  double v3 = v2;
  id v6 = [v2 viewControllers];
  type metadata accessor for UIMenu(0, (unint64_t *)&_sSo16UIViewControllerCML_0);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  specialized Collection<>.firstIndex(of:)((uint64_t)_.super.super.isa, v7);
  unint64_t v9 = v8;
  LOBYTE(v6) = v10;
  swift_bridgeObjectRelease();
  if (v6)
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = specialized Array.remove(at:)(v9);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v3 setViewControllers:isa animated:animated];
  }
  char v14 = (objc_class *)v11;
  result.value.super.super.Class isa = v14;
  result.is_nil = v13;
  return result;
}

double UIScrollView.normalizedContentOffset.getter()
{
  [v0 adjustedContentInset];
  double v2 = v1;
  [v0 contentOffset];
  return v2 + v3;
}

uint64_t UIScrollView.isScrolling.getter()
{
  if (([v0 isDragging] & 1) != 0
    || ([v0 isDecelerating] & 1) != 0
    || ([v0 _isVerticalBouncing] & 1) != 0)
  {
    return 1;
  }
  else
  {
    return (uint64_t)[v0 _isHorizontalBouncing];
  }
}

uint64_t static UIStackView.SpacerView.layerClass.getter()
{
  return type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for CATransformLayer);
}

id UIStackView.SpacerView.init(frame:)(double a1, double a2, double a3, double a4)
{
  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for UIStackView.SpacerView();
  return objc_msgSendSuper2(&v10, "initWithFrame:", a1, a2, a3, a4);
}

id UIStackView.SpacerView.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for UIStackView.SpacerView();
  id v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

id UIStackView.SpacerView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIStackView.SpacerView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id UIView.forAutolayout.getter()
{
  [v0 setTranslatesAutoresizingMaskIntoConstraints:0];

  return v2;
}

double UIView.Shadow.opacity.getter()
{
  return *(double *)(v0 + 8);
}

void UIView.Shadow.opacity.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

double UIView.Shadow.offset.getter()
{
  return *(double *)(v0 + 24);
}

void UIView.Shadow.offset.setter(double a1, double a2)
{
  *(double *)(v2 + 24) = a1;
  *(double *)(v2 + 32) = a2;
}

uint64_t UIView.Shadow.init(color:opacity:radius:offset:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  *(void *)a2 = result;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  return result;
}

void UIView.Shadow.hash(into:)()
{
  id v1 = *(id *)v0;
  NSObject.hash(into:)();
  outlined release of UIView.Shadow((id *)v0);
  if ((*(void *)(v0 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *(void *)(v0 + 8);
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((*(void *)(v0 + 16) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *(void *)(v0 + 16);
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  Swift::UInt64 v4 = *(void *)(v0 + 32);
  if ((*(void *)(v0 + 24) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = *(void *)(v0 + 24);
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v4;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
}

BOOL static UIView.Shadow.__derived_struct_equals(_:_:)(double *a1, double *a2)
{
  return (static NSObject.== infix(_:_:)() & 1) != 0
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4];
}

Swift::Int UIView.Shadow.hashValue.getter()
{
  Hasher.init(_seed:)();
  id v1 = *(id *)v0;
  NSObject.hash(into:)();
  outlined release of UIView.Shadow((id *)v0);
  if ((*(void *)(v0 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *(void *)(v0 + 8);
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((*(void *)(v0 + 16) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *(void *)(v0 + 16);
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  Swift::UInt64 v4 = *(void *)(v0 + 32);
  if ((*(void *)(v0 + 24) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = *(void *)(v0 + 24);
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v4;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UIView.Shadow()
{
  return UIView.Shadow.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance UIView.Shadow()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UIView.Shadow()
{
  id v1 = *(void **)v0;
  Swift::UInt64 v2 = *(void *)(v0 + 8);
  Swift::UInt64 v3 = *(void *)(v0 + 16);
  double v4 = *(double *)(v0 + 24);
  double v5 = *(double *)(v0 + 32);
  Hasher.init(_seed:)();
  id v6 = v1;
  NSObject.hash(into:)();

  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v2;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v8 = v3;
  }
  else {
    Swift::UInt64 v8 = 0;
  }
  Hasher._combine(_:)(v8);
  CGSize.hash(into:)(v4, v5);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UIView.Shadow(double *a1, double *a2)
{
  double v2 = a1[1];
  double v3 = a1[2];
  double v5 = a1[3];
  double v4 = a1[4];
  double v6 = a2[1];
  double v7 = a2[2];
  double v9 = a2[3];
  double v8 = a2[4];
  type metadata accessor for UIMenu(0, (unint64_t *)&_sSo8NSObjectCML_0);
  char v10 = static NSObject.== infix(_:_:)();
  BOOL result = 0;
  if ((v10 & 1) != 0 && v2 == v6 && v3 == v7) {
    return v4 == v8 && v5 == v9;
  }
  return result;
}

id UIView.shadowPathIsBounds.getter()
{
  id v1 = [v0 layer];
  id v2 = [v1 shadowPathIsBounds];

  return v2;
}

void UIView.shadowPathIsBounds.setter(char a1)
{
  id v3 = [v1 layer];
  [v3 setShadowPathIsBounds:a1 & 1];
}

void (*UIView.shadowPathIsBounds.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  id v3 = [v1 layer];
  unsigned __int8 v4 = [v3 shadowPathIsBounds];

  *(unsigned char *)(a1 + 8) = v4;
  return UIView.shadowPathIsBounds.modify;
}

void UIView.shadowPathIsBounds.modify(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  id v2 = [*(id *)a1 layer];
  [v2 setShadowPathIsBounds:v1];
}

void UIView.shadow.getter(uint64_t a1@<X8>)
{
  id v3 = [self clearColor];
  id v4 = [v1 layer];
  id v5 = [v4 shadowColor];

  if (v5)
  {
    id v6 = [objc_allocWithZone((Class)UIColor) initWithCGColor:v5];

    id v3 = v6;
  }
  id v7 = [v1 layer];
  [v7 shadowOpacity];
  float v9 = v8;

  double v10 = v9;
  id v11 = [v1 layer];
  [v11 shadowRadius];
  uint64_t v13 = v12;

  id v14 = [v1 layer];
  [v14 shadowOffset];
  uint64_t v16 = v15;
  uint64_t v18 = v17;

  *(void *)a1 = v3;
  *(double *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = v13;
  *(void *)(a1 + 24) = v16;
  *(void *)(a1 + 32) = v18;
}

void UIView.shadow.setter(uint64_t a1)
{
  id v3 = [v1 layer];
  id v4 = [*(id *)a1 CGColor];
  [v3 setShadowColor:v4];

  id v5 = [v1 layer];
  objc_msgSend(v5, "setShadowOffset:", *(double *)(a1 + 24), *(double *)(a1 + 32));

  id v6 = [v1 layer];
  [v6 setShadowRadius:*(double *)(a1 + 16)];

  id v8 = [v1 layer];
  double v7 = *(double *)(a1 + 8);
  *(float *)&double v7 = v7;
  [v8 setShadowOpacity:v7];
  outlined release of UIView.Shadow((id *)a1);
}

void (*UIView.shadow.modify(void *a1))(uint64_t *a1, char a2)
{
  id v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[15] = v1;
  UIView.shadow.getter((uint64_t)(v3 + 10));
  return UIView.shadow.modify;
}

void UIView.shadow.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a1 + 80;
  long long v4 = *(_OWORD *)(*a1 + 96);
  if (a2)
  {
    *(_OWORD *)uint64_t v2 = *(_OWORD *)v3;
    *(_OWORD *)(v2 + 16) = v4;
    *(void *)(v2 + 32) = *(void *)(v3 + 32);
    id v5 = *(id *)v2;
    UIView.shadow.setter(v2);
  }
  else
  {
    *(_OWORD *)(v2 + 40) = *(_OWORD *)v3;
    *(_OWORD *)(v2 + 56) = v4;
    *(void *)(v2 + 72) = *(void *)(v3 + 32);
    UIView.shadow.setter(v2 + 40);
  }

  free((void *)v2);
}

uint64_t UIView.Border.init(view:)(void *a1)
{
  uint64_t v2 = specialized UIView.Border.init(view:)(a1);

  return v2;
}

uint64_t static UIView.Border.__derived_struct_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a2)
  {
    if ((a5 & 1) == 0) {
      return 0;
    }
  }
  else if (a5)
  {
    return 0;
  }
  if (*(double *)&a1 == *(double *)&a4)
  {
    type metadata accessor for UIMenu(0, (unint64_t *)&_sSo8NSObjectCML_0);
    return static NSObject.== infix(_:_:)() & 1;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UIView.Border(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 8))
  {
    return 0;
  }
  if (*(double *)a1 == *(double *)a2)
  {
    type metadata accessor for UIMenu(0, (unint64_t *)&_sSo8NSObjectCML_0);
    return static NSObject.== infix(_:_:)() & 1;
  }
  return 0;
}

uint64_t UIView.border.getter()
{
  id v1 = v0;
  uint64_t v2 = specialized UIView.Border.init(view:)(v1);

  return v2;
}

void UIView.border.setter(uint64_t a1, char a2, void *a3)
{
  if (a3)
  {
    id v6 = [v3 layer];
    id v7 = v6;
    if (a2)
    {
      [v6 setBorderWidth:*(double *)&a1];
    }
    else
    {
      id v8 = [v3 traitCollection];
      [v8 displayScale];
      double v10 = v9;

      objc_msgSend(v7, "setBorderWidth:", *(double *)&a1 / fmax(v10, 1.0));
    }
  }
  else
  {
    id v7 = [v3 layer];
    [v7 setBorderWidth:0.0];
  }

  id v11 = [v3 layer];
  if (a3) {
    id v12 = [a3 CGColor];
  }
  else {
    id v12 = 0;
  }
  [v11 setBorderColor:v12];
}

void (*UIView.border.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[3] = (uint64_t)v1;
  id v3 = v1;
  uint64_t v4 = specialized UIView.Border.init(view:)(v3);
  uint64_t v6 = v5;
  uint64_t v8 = v7;

  *a1 = v4;
  a1[1] = v6;
  a1[2] = v8;
  return UIView.border.modify;
}

void UIView.border.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = (void *)a1[2];
  if (a2)
  {
    id v5 = v4;
    UIView.border.setter(v2, v3, v4);
  }
  else
  {
    UIView.border.setter(*a1, v3, v4);
  }
}

double UIView.untransformedFrame.getter()
{
  [v0 bounds];
  CGFloat v2 = v1;
  CGFloat v4 = v3;
  CGFloat v6 = v5;
  CGFloat v8 = v7;
  [v0 center];
  double v10 = v9;
  v17.origin.x = v2;
  v17.origin.y = v4;
  v17.size.width = v6;
  v17.size.height = v8;
  double Width = CGRectGetWidth(v17);
  id v12 = [v0 layer];
  [v12 anchorPoint];
  double v14 = v13;

  v18.origin.x = v2;
  v18.origin.y = v4;
  v18.size.width = v6;
  v18.size.height = v8;
  CGRectGetHeight(v18);
  id v15 = [v0 layer];
  [v15 anchorPoint];

  v19.origin.x = v2;
  v19.origin.y = v4;
  v19.size.width = v6;
  v19.size.height = v8;
  CGRectGetWidth(v19);
  v20.origin.x = v2;
  v20.origin.y = v4;
  v20.size.width = v6;
  v20.size.height = v8;
  CGRectGetHeight(v20);
  return v10 - Width * v14;
}

id UIView.untransformedFrame.setter(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MinX = CGRectGetMinX(*(CGRect *)&a1);
  v22.origin.x = a1;
  v22.origin.y = a2;
  v22.size.width = a3;
  v22.size.height = a4;
  double Width = CGRectGetWidth(v22);
  id v11 = [v4 layer];
  [v11 anchorPoint];
  double v13 = v12;

  double v14 = MinX + Width * v13;
  v23.origin.x = a1;
  v23.origin.y = a2;
  v23.size.width = a3;
  v23.size.height = a4;
  double MinY = CGRectGetMinY(v23);
  v24.origin.x = a1;
  v24.origin.y = a2;
  v24.size.width = a3;
  v24.size.height = a4;
  double Height = CGRectGetHeight(v24);
  id v17 = [v4 layer];
  [v17 anchorPoint];
  double v19 = v18;

  objc_msgSend(v4, "setCenter:", v14, MinY + Height * v19);
  [v4 bounds];

  return objc_msgSend(v4, "setBounds:");
}

void (*UIView.untransformedFrame.modify(double **a1))(CGFloat **a1)
{
  double v3 = (double *)malloc(0x28uLL);
  *a1 = v3;
  *((void *)v3 + 4) = v1;
  *double v3 = UIView.untransformedFrame.getter();
  *((void *)v3 + 1) = v4;
  *((void *)v3 + 2) = v5;
  *((void *)v3 + 3) = v6;
  return UIView.untransformedFrame.modify;
}

void UIView.untransformedFrame.modify(CGFloat **a1)
{
  uint64_t v1 = *a1;
  UIView.untransformedFrame.setter(**a1, (*a1)[1], (*a1)[2], (*a1)[3]);

  free(v1);
}

float UIView.contentCompressionResistancePriority.getter()
{
  id v1 = v0;
  [v1 contentCompressionResistancePriorityForAxis:0];
  float v3 = v2;
  [v1 contentCompressionResistancePriorityForAxis:1];

  return v3;
}

float UIView.CompressionResistancePriority.init(view:)(void *a1)
{
  [a1 contentCompressionResistancePriorityForAxis:0];
  float v3 = v2;
  [a1 contentCompressionResistancePriorityForAxis:1];

  return v3;
}

id UIView.contentCompressionResistancePriority.setter(double a1, float a2)
{
  objc_msgSend(v2, "setContentCompressionResistancePriority:forAxis:", 0);
  *(float *)&double v4 = a2;

  return [v2 setContentCompressionResistancePriority:1 forAxis:v4];
}

id (*UIView.contentCompressionResistancePriority.modify(uint64_t a1))(uint64_t a1, double a2)
{
  *(void *)a1 = v1;
  id v3 = v1;
  [v3 contentCompressionResistancePriorityForAxis:0];
  int v5 = v4;
  [v3 contentCompressionResistancePriorityForAxis:1];
  int v7 = v6;

  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v7;
  return UIView.contentCompressionResistancePriority.modify;
}

id UIView.contentCompressionResistancePriority.modify(uint64_t a1, double a2)
{
  id v2 = *(id *)a1;
  LODWORD(a2) = *(_DWORD *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  [*(id *)a1 setContentCompressionResistancePriority:0 forAxis:a2];
  LODWORD(v4) = v3;

  return [v2 setContentCompressionResistancePriority:1 forAxis:v4];
}

void UIView.CompressionResistancePriority.horizontal.setter(float a1)
{
  *id v1 = a1;
}

float UIView.CompressionResistancePriority.vertical.getter(double a1, float a2)
{
  return a2;
}

double UIView.maxReadableContentWidth(for:)()
{
  return 1500.0;
}

UIImage *UIView.screenshot.getter()
{
  [v0 bounds];
  CGFloat v2 = v1;
  CGFloat v4 = v3;
  unsigned __int8 v5 = [v0 isOpaque];
  v8.width = v2;
  v8.height = v4;
  UIGraphicsBeginImageContextWithOptions(v8, v5, 0.0);
  [v0 bounds];
  objc_msgSend(v0, "drawViewHierarchyInRect:afterScreenUpdates:", 1);
  int v6 = UIGraphicsGetImageFromCurrentImageContext();
  UIGraphicsEndImageContext();
  return v6;
}

Swift::Void __swiftcall UIView.visualizeLayout(with:)(UIColor with)
{
  CGFloat v2 = v1;
  CGFloat v4 = (objc_class *)[v2 viewWithTag:1234];
  if (v4)
  {
    Class isa = v4;
    objc_msgSend(v2, "bringSubviewToFront:");
  }
  else
  {
    id v5 = [objc_allocWithZone((Class)UIView) init];
    id v6 = [(objc_class *)with.super.isa colorWithAlphaComponent:0.2];
    [v5 setBackgroundColor:v6];

    int v7 = with.super.isa;
    UIView.border.setter(0x3FF0000000000000, 1, with.super.isa);
    [v5 setTranslatesAutoresizingMaskIntoConstraints:0];
    [v5 setTag:1234];
    [v5 setUserInteractionEnabled:0];
    [v2 addSubview:v5];
    CGSize v8 = self;
    __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCyyXlGMD_0);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_100493EA0;
    id v10 = [v5 topAnchor];
    id v11 = [v2 topAnchor];
    id v12 = [v10 constraintEqualToAnchor:v11];

    *(void *)(v9 + 32) = v12;
    id v13 = [v5 bottomAnchor];
    id v14 = [v2 bottomAnchor];
    id v15 = [v13 constraintEqualToAnchor:v14];

    *(void *)(v9 + 40) = v15;
    id v16 = [v5 leadingAnchor];
    id v17 = [v2 leadingAnchor];
    id v18 = [v16 constraintEqualToAnchor:v17];

    *(void *)(v9 + 48) = v18;
    id v19 = [v5 trailingAnchor];
    id v20 = [v2 trailingAnchor];
    id v21 = [v19 constraintEqualToAnchor:v20];

    *(void *)(v9 + 56) = v21;
    specialized Array._endMutation()();
    type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v8 activateConstraints:isa];
  }
}

void protocol witness for UILayoutDebugging.visualizeLayout(with:) in conformance UIView(UIColor a1)
{
}

void UIView.traverseViewHierarchy(_:)(void (*a1)(void *, char *), uint64_t a2)
{
  double v3 = v2;
  char v15 = 0;
  a1(v3, &v15);
  if (v15) {
    return;
  }
  id v6 = [v3 subviews];
  type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_4:
      if ((v7 & 0xC000000000000001) != 0)
      {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v9 = v7 & 0xFFFFFFFFFFFFFF8;
      }
      else
      {
        uint64_t v9 = v7 & 0xFFFFFFFFFFFFFF8;
        if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v10 = *(id *)(v7 + 32);
      }
      uint64_t v11 = 0;
      uint64_t v12 = v8 - 1;
      while (1)
      {
        specialized UIView.traverseViewHierarchy(_:)(v10, a1, a2, &v15);

        if (v12 == v11) {
          break;
        }
        unint64_t v13 = v11 + 1;
        if ((v7 & 0xC000000000000001) != 0)
        {
          id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v13 >= *(void *)(v9 + 16)) {
            goto LABEL_20;
          }
          id v14 = *(id *)(v7 + 8 * v11 + 40);
        }
        id v10 = v14;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
        ++v11;
        if (v15 == 1)
        {

          break;
        }
      }
    }
  }

  swift_bridgeObjectRelease();
}

void UIView.statusBarFrame.getter(uint64_t a1@<X8>)
{
  id v3 = [v1 window];
  uint64_t v4 = 0;
  if (v3)
  {
    id v5 = v3;
    id v6 = [v3 windowScene];

    if (v6)
    {
      id v7 = [v6 statusBarManager];
      if (v7)
      {
        uint64_t v8 = v7;
        if (([v7 isStatusBarHidden] & 1) == 0)
        {
          [v8 statusBarFrame];
          double v14 = v13;
          double v16 = v15;
          double v18 = v17;
          double v20 = v19;
          id v21 = [v6 screen];
          id v22 = [v21 coordinateSpace];

          objc_msgSend(v1, "convertRect:fromCoordinateSpace:", v22, v14, v16, v18, v20);
          uint64_t v4 = v23;
          uint64_t v10 = v24;
          uint64_t v11 = v25;
          uint64_t v12 = v26;

          swift_unknownObjectRelease();
          char v9 = 0;
          goto LABEL_8;
        }
      }
      else
      {
      }
    }
  }
  char v9 = 1;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
LABEL_8:
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = v12;
  *(unsigned char *)(a1 + 32) = v9;
}

Swift::Void __swiftcall UILayoutGuide.visualizeLayout(with:)(UIColor with)
{
  CGFloat v2 = v1;
  id v4 = [v2 owningView];
  if (v4)
  {
    id v5 = v4;
    id v6 = (objc_class *)[v4 viewWithTag:1234];
    if (v6)
    {
      Class isa = v6;
      objc_msgSend(v5, "bringSubviewToFront:");
    }
    else
    {
      id v7 = [objc_allocWithZone((Class)UIView) init];
      id v8 = [(objc_class *)with.super.isa colorWithAlphaComponent:0.2];
      [v7 setBackgroundColor:v8];

      char v9 = with.super.isa;
      UIView.border.setter(0x3FF0000000000000, 1, with.super.isa);
      [v7 setTranslatesAutoresizingMaskIntoConstraints:0];
      [v7 setTag:1234];
      [v7 setUserInteractionEnabled:0];
      [v5 addSubview:v7];
      uint64_t v10 = self;
      __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCyyXlGMD_0);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_100493EA0;
      id v12 = [v7 topAnchor];
      id v13 = [v2 topAnchor];
      id v14 = [v12 constraintEqualToAnchor:v13];

      *(void *)(v11 + 32) = v14;
      id v15 = [v7 bottomAnchor];
      id v16 = [v2 bottomAnchor];
      id v17 = [v15 constraintEqualToAnchor:v16];

      *(void *)(v11 + 40) = v17;
      id v18 = [v7 leadingAnchor];
      id v19 = [v2 leadingAnchor];
      id v20 = [v18 constraintEqualToAnchor:v19];

      *(void *)(v11 + 48) = v20;
      id v21 = [v7 trailingAnchor];
      id v22 = [v2 trailingAnchor];
      id v23 = [v21 constraintEqualToAnchor:v22];

      *(void *)(v11 + 56) = v23;
      specialized Array._endMutation()();
      type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v10 activateConstraints:isa];

      id v5 = v7;
    }
  }
}

void protocol witness for UILayoutDebugging.visualizeLayout(with:) in conformance UILayoutGuide(UIColor a1)
{
}

BOOL UIViewController.canPresentViewControllers.getter()
{
  id v1 = [v0 popoverPresentationController];
  id v2 = v1;
  if (v1) {

  }
  return v2 == 0;
}

BOOL UIViewController.canBeDismissed.getter()
{
  id v1 = [v0 presentingViewController];
  id v2 = v1;
  if (v1) {

  }
  return v2 != 0;
}

Swift::Void __swiftcall UIViewController.dismiss(after:)(Swift::Double after)
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v18 = *(void *)(v4 - 8);
  uint64_t v19 = v4;
  __chkstk_darwin(v4);
  id v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v13 = (char *)&v17 - v12;
  type metadata accessor for UIMenu(0, (unint64_t *)&_sSo17OS_dispatch_queueCML_0);
  id v14 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  id v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v11, v7);
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in UIViewController.dismiss(after:);
  uint64_t aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_17;
  id v16 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath((unint64_t *)&_s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWL_0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  __swift_instantiateConcreteTypeFromMangledName(&_sSay8Dispatch0A13WorkItemFlagsVGMD_0);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWl_0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v6, v19);
  v17(v13, v7);
}

void closure #1 in UIViewController.dismiss(after:)()
{
  swift_beginAccess();
  Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    id v2 = [Strong presentingViewController];
    if (v2)
    {
      id v3 = v2;
      id v4 = [v2 presentedViewController];
      if (v4)
      {
        id v5 = v4;
        type metadata accessor for UIMenu(0, (unint64_t *)&_sSo8NSObjectCML_0);
        if (static NSObject.== infix(_:_:)()) {
          [v3 dismissViewControllerAnimated:1 completion:0];
        }

        uint64_t v1 = v3;
      }
      else
      {
        id v5 = v3;
      }

      uint64_t v1 = v5;
    }
  }
}

Swift::Void __swiftcall UIViewController.add(_:)(UIViewController a1)
{
  [v1 addChildViewController:a1.super.super.isa];
  if ([v1 isViewLoaded])
  {
    id v3 = [v1 view];
    if (v3)
    {
      id v4 = v3;
      id v5 = [(objc_class *)a1.super.super.isa view];
      if (v5)
      {
        id v6 = v5;
        [v4 addSubview:v5];

        id v7 = [v1 view];
        if (v7)
        {
          uint64_t v8 = v7;
          [v7 setNeedsLayout];

          goto LABEL_6;
        }
LABEL_11:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
LABEL_6:

  [(objc_class *)a1.super.super.isa didMoveToParentViewController:v1];
}

Swift::Void __swiftcall UIViewController.remove(_:)(UIViewController a1)
{
  id v3 = [(objc_class *)a1.super.super.isa parentViewController];
  if (!v3) {
    return;
  }
  id v4 = v3;

  if (v4 != v1) {
    return;
  }
  [(objc_class *)a1.super.super.isa willMoveToParentViewController:0];
  if (![v1 isViewLoaded]
    || ![(objc_class *)a1.super.super.isa isViewLoaded])
  {
    goto LABEL_11;
  }
  id v5 = [(objc_class *)a1.super.super.isa view];
  if (!v5)
  {
    __break(1u);
    goto LABEL_15;
  }
  id v6 = v5;
  id v7 = [v1 view];
  if (!v7)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v8 = v7;
  unsigned int v9 = [v6 isDescendantOfView:v7];

  if (v9)
  {
    id v10 = [(objc_class *)a1.super.super.isa view];
    if (v10)
    {
      uint64_t v11 = v10;
      [v10 removeFromSuperview];

      goto LABEL_11;
    }
LABEL_16:
    __break(1u);
    return;
  }
LABEL_11:

  [(objc_class *)a1.super.super.isa removeFromParentViewController];
}

Swift::Bool __swiftcall UIViewController.isDescendant(of:)(UIViewController of)
{
  id v3 = (objc_class *)[v1 parentViewController];
  if (v3 && (id v4 = v3, v3, v4 == of.super.super.isa))
  {
    LOBYTE(v5) = 1;
  }
  else
  {
    id v5 = [v1 parentViewController];
    if (v5)
    {
      id v6 = v5;
      Swift::Bool v7 = UIViewController.isDescendant(of:)(of);

      LOBYTE(v5) = v7;
    }
  }
  return (char)v5;
}

void UIViewController.traverseViewControllerHierarchy(_:)(void (*a1)(void *, char *), uint64_t a2)
{
  id v3 = v2;
  char v15 = 0;
  a1(v3, &v15);
  id v6 = [v3 childViewControllers];
  type metadata accessor for UIMenu(0, (unint64_t *)&_sSo16UIViewControllerCML_0);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62) {
    goto LABEL_17;
  }
  uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v8)
  {
    swift_beginAccess();
    uint64_t v9 = 4;
    while (1)
    {
      id v10 = (v7 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v7 + 8 * v9);
      uint64_t v11 = v10;
      uint64_t v12 = v9 - 3;
      if (__OFADD__(v9 - 4, 1)) {
        break;
      }
      if (v15)
      {

        goto LABEL_12;
      }
      specialized UIViewController.traverseViewControllerHierarchy(_:)(v10, a1, a2, &v15);

      ++v9;
      if (v12 == v8) {
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_12:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if ((v15 & 1) == 0)
  {
    id v13 = [v3 presentedViewController];
    if (v13)
    {
      id v14 = v13;
      specialized UIViewController.traverseViewControllerHierarchy(_:)(v13, a1, a2, &v15);
    }
  }
}

uint64_t closure #1 in traverseInnerViewController #1 (_:) in UIViewController.traverseViewControllerHierarchy(_:)(uint64_t a1, unsigned char *a2, void (*a3)(uint64_t, unsigned char *), uint64_t a4, unsigned char *a5)
{
  swift_beginAccess();
  a3(a1, a5);
  swift_endAccess();
  uint64_t result = swift_beginAccess();
  *a2 = *a5;
  return result;
}

NSLayoutConstraint __swiftcall NSLayoutConstraint.with(priority:)(__C::UILayoutPriority priority)
{
  [v1 setPriority:*(double *)&priority.rawValue];

  return (NSLayoutConstraint)v3;
}

void UIView.constrainToBounds(of:useLayoutMarginsGuide:padding:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSLayoutAttribute, CGFloat)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100493E10;
  *(void *)(inited + 32) = 3;
  *(void *)(inited + 40) = 0x3FF0000000000000;
  *(void *)(inited + 48) = 5;
  *(void *)(inited + 56) = 0x3FF0000000000000;
  *(void *)(inited + 64) = 6;
  *(void *)(inited + 72) = 0xBFF0000000000000;
  *(void *)(inited + 80) = 4;
  *(void *)(inited + 88) = 0xBFF0000000000000;
  unint64_t v1 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  swift_setDeallocating();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySo17NSLayoutAttributeV12CoreGraphics7CGFloatVG_So0D10ConstraintCs5NeverOTg506_sSo17de3V12f9Graphics7h7VSo0A10i27CIgyyo_AB3key_AE5valuetAGs5J11OIegnrzr_TRAgjMIgyyo_Tf1cn_nTf4ng_n(v1, (void (*)(void, double))partial apply for closure #1 in UIView.constrainToBounds(of:useLayoutMarginsGuide:padding:));
  swift_bridgeObjectRelease();
  id v2 = self;
  type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v2 activateConstraints:isa];
  swift_bridgeObjectRelease();
}

id closure #1 in UIView.constrainToBounds(of:useLayoutMarginsGuide:padding:)(uint64_t a1, void *a2, char a3, void *a4, double a5, double a6)
{
  v17[3] = type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  v17[0] = a2;
  id v12 = a2;
  if (a3) {
    id v13 = [a4 layoutMarginsGuide];
  }
  else {
    id v13 = a4;
  }
  id v14 = v13;
  type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  v16[3] = type metadata accessor for UIMenu(0, (unint64_t *)&_sSo8NSObjectCML_0);
  v16[0] = v14;
  return @nonobjc NSLayoutConstraint.__allocating_init(item:attribute:relatedBy:toItem:attribute:multiplier:constant:)(v17, a1, 0, v16, a1, 1.0, a5 * a6);
}

id @nonobjc NSLayoutConstraint.__allocating_init(item:attribute:relatedBy:toItem:attribute:multiplier:constant:)(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, double a6, double a7)
{
  __swift_project_boxed_opaque_existential_0Tm(a1, a1[3]);
  uint64_t v14 = _bridgeAnythingToObjectiveC<A>(_:)();
  uint64_t v15 = a4[3];
  if (v15)
  {
    id v16 = __swift_project_boxed_opaque_existential_0Tm(a4, a4[3]);
    uint64_t v24 = a5;
    uint64_t v25 = a2;
    uint64_t v17 = a3;
    uint64_t v18 = *(void *)(v15 - 8);
    __chkstk_darwin(v16);
    uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v18 + 16))(v20);
    uint64_t v21 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v15);
    a3 = v17;
    a5 = v24;
    a2 = v25;
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a4);
  }
  else
  {
    uint64_t v21 = 0;
  }
  id v22 = [(id)swift_getObjCClassFromMetadata() constraintWithItem:v14 attribute:a2 relatedBy:a3 toItem:v21 attribute:a5 multiplier:a6 constant:a7];
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  return v22;
}

void Array<A>.activate()(uint64_t a1)
{
}

void UIView.addSubviewAnchoredToBounds(_:useLayoutMarginsGuide:padding:)(void *a1)
{
  [a1 setTranslatesAutoresizingMaskIntoConstraints:0];
  [v1 addSubview:a1];
  UIView.constrainToBounds(of:useLayoutMarginsGuide:padding:)();
}

void Array<A>.deactivate()(uint64_t a1)
{
}

void Array<A>.activate()(uint64_t a1, SEL *a2)
{
  id v3 = self;
  type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, *a2, isa);
}

uint64_t NSTextAlignment.init(languageCode:)()
{
  uint64_t v0 = type metadata accessor for Locale.Language();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Locale.Language.init(identifier:)();
  uint64_t v4 = Locale.Language.characterDirection.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v5 = 4;
  if (v4 == 2) {
    uint64_t v5 = 2;
  }
  if (v4 == 1) {
    return 0;
  }
  else {
    return v5;
  }
}

Swift::Void __swiftcall NSTextAlignment.flip()()
{
  if (*v0)
  {
    if (*v0 != 2) {
      return;
    }
    uint64_t v1 = 0;
  }
  else
  {
    uint64_t v1 = 2;
  }
  uint64_t *v0 = v1;
}

uint64_t NSTextAlignment.ctTextAlignment.getter(unint64_t a1)
{
  if (a1 >= 5) {
    return 4;
  }
  else {
    return (0x403010200uLL >> (8 * a1));
  }
}

uint64_t UIViewPropertyAnimator.UpdateReason.init(rawValue:)(unint64_t a1)
{
  if (a1 >= 4) {
    return 3;
  }
  else {
    return 0x2010003u >> (8 * a1);
  }
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance UIViewPropertyAnimator.UpdateReason@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result >= 4uLL) {
    char v2 = 3;
  }
  else {
    char v2 = 0x2010003u >> (8 * *result);
  }
  *a2 = v2;
  return result;
}

void UIViewPropertyAnimator.addModifiedAnimations(with:animations:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[4] = a2;
  v5[5] = a3;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  void v5[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v5[3] = &block_descriptor_20;
  uint64_t v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  [v3 addAnimations:v4];
  _Block_release(v4);
}

UIViewPropertyAnimator __swiftcall UIViewPropertyAnimator.init(springTimingParameters:)(UISpringTimingParameters springTimingParameters)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  [(objc_class *)springTimingParameters.super.isa settlingDuration];
  id v3 = objc_msgSend(v2, "initWithDuration:timingParameters:", springTimingParameters.super.isa);

  return (UIViewPropertyAnimator)v3;
}

id UISpringTimingParameters.init(dampingRatio:response:)(double a1, double a2)
{
  double v2 = 6.28318531 / a2 * (6.28318531 / a2);
  double v3 = sqrt(v2);
  double v4 = (v3 + v3) * a1;
  id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return objc_msgSend(v5, "initWithMass:stiffness:damping:initialVelocity:", 1.0, v2, v4, 0.0, 0.0);
}

id UIView.setAnchorPoint(_:preserveFrame:)(char a1, double a2, double a3)
{
  if (a1)
  {
    double v6 = UIView.untransformedFrame.getter();
    CGFloat v8 = v7;
    CGFloat v10 = v9;
    CGFloat v12 = v11;
    objc_msgSend(v3, "setAnchorPoint:", a2, a3);
    return UIView.untransformedFrame.setter(v6, v8, v10, v12);
  }
  else
  {
    return objc_msgSend(v3, "setAnchorPoint:");
  }
}

double one-time initialization function for identity()
{
  static UIView.Shadow.identity = (uint64_t)[self blackColor];
  *(_OWORD *)algn_1005ADAE0 = xmmword_1004A3B20;
  double result = 0.0;
  *(_OWORD *)&algn_1005ADAE0[16] = xmmword_1004A3B30;
  return result;
}

uint64_t *UIView.Shadow.identity.unsafeMutableAddressor()
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  return &static UIView.Shadow.identity;
}

id static UIView.Shadow.identity.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  double v2 = (void *)static UIView.Shadow.identity;
  *(void *)a1 = static UIView.Shadow.identity;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)algn_1005ADAE0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&algn_1005ADAE0[16];

  return v2;
}

void (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  double v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

unint64_t partial apply for closure #1 in Collection<>.first(embedding:)(id *a1)
{
  return (unint64_t)closure #1 in Collection<>.first(embedding:)(a1, *(void **)(v1 + 32)) & 1;
}

void CGSize.hash(into:)(double a1, double a2)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)&a2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySo17NSLayoutAttributeV12CoreGraphics7CGFloatVG_So0D10ConstraintCs5NeverOTg506_sSo17de3V12f9Graphics7h7VSo0A10i27CIgyyo_AB3key_AE5valuetAGs5J11OIegnrzr_TRAgjMIgyyo_Tf1cn_nTf4ng_n(uint64_t a1, void (*a2)(void, double))
{
  uint64_t v3 = *(void *)(a1 + 16);
  double result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    double result = (void *)specialized Dictionary.startIndex.getter(a1);
    uint64_t v5 = (uint64_t)result;
    int v7 = v6;
    uint64_t v8 = 0;
    uint64_t v9 = a1 + 64;
    while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(a1 + 32))
    {
      unint64_t v11 = (unint64_t)v5 >> 6;
      if ((*(void *)(v9 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
        goto LABEL_22;
      }
      if (*(_DWORD *)(a1 + 36) != v7) {
        goto LABEL_23;
      }
      uint64_t v18 = v8;
      a2(*(void *)(*(void *)(a1 + 48) + 8 * v5), *(double *)(*(void *)(a1 + 56) + 8 * v5));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      double result = (void *)specialized ContiguousArray._endMutation()();
      int64_t v10 = 1 << *(unsigned char *)(a1 + 32);
      if (v5 >= v10) {
        goto LABEL_24;
      }
      uint64_t v12 = *(void *)(v9 + 8 * v11);
      if ((v12 & (1 << v5)) == 0) {
        goto LABEL_25;
      }
      if (*(_DWORD *)(a1 + 36) != v7) {
        goto LABEL_26;
      }
      unint64_t v13 = v12 & (-2 << (v5 & 0x3F));
      if (v13)
      {
        int64_t v10 = __clz(__rbit64(v13)) | v5 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v14 = v11 + 1;
        unint64_t v15 = (unint64_t)(v10 + 63) >> 6;
        if (v11 + 1 < v15)
        {
          unint64_t v16 = *(void *)(v9 + 8 * v14);
          if (v16)
          {
LABEL_18:
            int64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
          }
          else
          {
            while (v15 - 2 != v11)
            {
              unint64_t v16 = *(void *)(a1 + 80 + 8 * v11++);
              if (v16)
              {
                unint64_t v14 = v11 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      uint64_t v8 = v18 + 1;
      uint64_t v5 = v10;
      if (v18 + 1 == v3) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

void *specialized Sequence.filter(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_42;
  }
  uint64_t v21 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v21)
  {
    while (1)
    {
      unint64_t v4 = 0;
      uint64_t v26 = v3 & 0xFFFFFFFFFFFFFF8;
      unint64_t v27 = v3 & 0xC000000000000001;
      uint64_t v23 = a2 & 0xFFFFFFFFFFFFFF8;
      unint64_t v22 = a2 & 0xC000000000000001;
      unint64_t v24 = a2 >> 62;
      uint64_t v25 = v3 + 32;
      unint64_t v28 = a2;
      uint64_t v3 = v21;
      while (1)
      {
        if (v27)
        {
          id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v4 >= *(void *)(v26 + 16))
          {
            __break(1u);
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            goto LABEL_41;
          }
          id v5 = *(id *)(v25 + 8 * v4);
        }
        int v6 = v5;
        if (__OFADD__(v4++, 1)) {
          goto LABEL_39;
        }
        id v8 = [v5 customView];
        if (v8) {
          break;
        }

LABEL_5:
        if (v4 == v3) {
          return _swiftEmptyArrayStorage;
        }
      }
      uint64_t v9 = v8;
      if (!v24) {
        break;
      }
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      if (!v10) {
        goto LABEL_35;
      }
LABEL_13:
      if (v22) {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v11 = *(id *)(a2 + 32);
      }
      uint64_t v12 = v11;
      uint64_t v3 = type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      char v13 = static NSObject.== infix(_:_:)();

      if (v13)
      {

LABEL_32:
        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v3 = v21;
        goto LABEL_5;
      }
      if (v10 == 1)
      {
LABEL_24:

LABEL_25:
        swift_bridgeObjectRelease();
        uint64_t v3 = v21;
        goto LABEL_5;
      }
      if (v22)
      {
        uint64_t v14 = 1;
        while (1)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
          a2 = v14 + 1;
          if (__OFADD__(v14, 1)) {
            goto LABEL_40;
          }
          char v15 = static NSObject.== infix(_:_:)();
          swift_unknownObjectRelease();
          if (v15) {
            goto LABEL_31;
          }
          ++v14;
          BOOL v16 = a2 == v10;
          a2 = v28;
          if (v16) {
            goto LABEL_24;
          }
        }
      }
      uint64_t v17 = 5;
      while (1)
      {
        a2 = v17 - 3;
        if (__OFADD__(v17 - 4, 1)) {
          break;
        }
        id v18 = *(id *)(v28 + 8 * v17);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19)
        {
LABEL_31:

          a2 = v28;
          goto LABEL_32;
        }
        ++v17;
        if (a2 == v10)
        {

          a2 = v28;
          goto LABEL_25;
        }
      }
LABEL_41:
      __break(1u);
LABEL_42:
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      if (!v21) {
        return _swiftEmptyArrayStorage;
      }
    }
    uint64_t v10 = *(void *)(v23 + 16);
    swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_13;
    }
LABEL_35:

    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  return _swiftEmptyArrayStorage;
}

unint64_t partial apply for closure #1 in Collection<>.all(embedding:)(id *a1)
{
  return (unint64_t)closure #1 in Collection<>.all(embedding:)(a1, *(void *)(v1 + 32)) & 1;
}

uint64_t _s10Foundation9IndexPathVSgWOh_0(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&_s10Foundation9IndexPathVSgMD_0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _s10Foundation9IndexPathVSgWOb_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&_s10Foundation9IndexPathVSgMD_0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002BFF3C()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #1 in UICollectionView.visibleSupplementaryElements(of:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  closure #1 in UICollectionView.visibleSupplementaryElements(of:)(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_1002BFF88()
{
  return objectdestroy_2Tm_2();
}

uint64_t partial apply for closure #1 in UICollectionView.clearSelection(using:animated:)(uint64_t a1)
{
  return closure #1 in UICollectionView.clearSelection(using:animated:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(unsigned char *)(v1 + 32));
}

uint64_t block_copy_helper_38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_38()
{
  return swift_release();
}

uint64_t sub_1002BFFB4()
{
  return objectdestroy_2Tm_2();
}

uint64_t objectdestroy_2Tm_2()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

id partial apply for closure #2 in UICollectionView.clearSelection(using:animated:)(void *a1)
{
  return closure #2 in UICollectionView.clearSelection(using:animated:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t type metadata accessor for UIStackView.SpacerView()
{
  return self;
}

id *outlined release of UIView.Shadow(id *a1)
{
  return a1;
}

uint64_t specialized UIView.Border.init(view:)(void *a1)
{
  id v2 = [a1 layer];
  [v2 borderWidth];
  double v4 = v3;

  if (v4 <= 0.0) {
    return 0;
  }
  id v5 = [a1 layer];
  id v6 = [v5 borderColor];

  if (!v6) {
    return 0;
  }
  id v7 = [a1 layer];
  [v7 borderWidth];
  uint64_t v9 = v8;

  uint64_t v10 = v9;
  [objc_allocWithZone((Class)UIColor) initWithCGColor:v6];

  return v10;
}

void specialized UIView.traverseViewHierarchy(_:)(void *a1, void (*a2)(void *, char *), uint64_t a3, char *a4)
{
  void v15[2] = a2;
  v15[3] = a3;
  v15[4] = a4;
  a2(a1, a4);
  char v16 = *a4;
  if ((v16 & 1) == 0)
  {
    id v6 = [a1 subviews];
    type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v7 >> 62) {
      goto LABEL_20;
    }
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v8)
    {
      if ((v7 & 0xC000000000000001) != 0)
      {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v9 = v7 & 0xFFFFFFFFFFFFFF8;
      }
      else
      {
        uint64_t v9 = v7 & 0xFFFFFFFFFFFFFF8;
        if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        id v10 = *(id *)(v7 + 32);
      }
      uint64_t v11 = 0;
      uint64_t v12 = v8 - 1;
      while (1)
      {
        specialized UIView.traverseViewHierarchy(_:)(v10, partial apply for closure #1 in UIView.traverseViewHierarchy(_:), v15, &v16);

        if (v12 == v11) {
          goto LABEL_16;
        }
        unint64_t v13 = v11 + 1;
        if ((v7 & 0xC000000000000001) != 0)
        {
          id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v13 >= *(void *)(v9 + 16)) {
            goto LABEL_19;
          }
          id v14 = *(id *)(v7 + 8 * v11 + 40);
        }
        id v10 = v14;
        if (__OFADD__(v13, 1)) {
          break;
        }
        ++v11;
        if (v16 == 1)
        {

LABEL_16:
          swift_bridgeObjectRelease();
          return;
        }
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1002C0368()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void partial apply for closure #1 in UIViewController.dismiss(after:)()
{
}

uint64_t lazy protocol witness table accessor for type IndexPath and conformance IndexPath(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void specialized UIViewController.traverseViewControllerHierarchy(_:)(void *a1, void (*a2)(void *, char *), uint64_t a3, char *a4)
{
  void v16[2] = a2;
  v16[3] = a3;
  void v16[4] = a4;
  swift_beginAccess();
  a2(a1, a4);
  swift_endAccess();
  swift_beginAccess();
  char v17 = *a4;
  id v7 = [a1 childViewControllers];
  type metadata accessor for UIMenu(0, (unint64_t *)&_sSo16UIViewControllerCML_0);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62) {
    goto LABEL_17;
  }
  uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v9)
  {
    swift_beginAccess();
    uint64_t v10 = 4;
    while (1)
    {
      id v11 = (v8 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v8 + 8 * v10);
      uint64_t v12 = v11;
      uint64_t v13 = v10 - 3;
      if (__OFADD__(v10 - 4, 1)) {
        break;
      }
      if (v17 == 1)
      {

        goto LABEL_12;
      }
      specialized UIViewController.traverseViewControllerHierarchy(_:)(v11, partial apply for closure #1 in traverseInnerViewController #1 (_:) in UIViewController.traverseViewControllerHierarchy(_:), v16, &v17);

      ++v10;
      if (v13 == v9) {
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_12:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if ((v17 & 1) == 0)
  {
    id v14 = [a1 presentedViewController];
    if (v14)
    {
      char v15 = v14;
      specialized UIViewController.traverseViewControllerHierarchy(_:)(v14, partial apply for closure #1 in traverseInnerViewController #1 (_:) in UIViewController.traverseViewControllerHierarchy(_:), v16, &v17);
    }
  }
}

id partial apply for closure #1 in UIView.constrainToBounds(of:useLayoutMarginsGuide:padding:)(uint64_t a1, double a2)
{
  return closure #1 in UIView.constrainToBounds(of:useLayoutMarginsGuide:padding:)(a1, *(void **)(v2 + 16), *(unsigned char *)(v2 + 24), *(void **)(v2 + 32), a2, *(double *)(v2 + 40));
}

unint64_t lazy protocol witness table accessor for type UIView.Shadow and conformance UIView.Shadow()
{
  unint64_t result = lazy protocol witness table cache variable for type UIView.Shadow and conformance UIView.Shadow;
  if (!lazy protocol witness table cache variable for type UIView.Shadow and conformance UIView.Shadow)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIView.Shadow and conformance UIView.Shadow);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UIViewPropertyAnimator.UpdateReason and conformance UIViewPropertyAnimator.UpdateReason()
{
  unint64_t result = lazy protocol witness table cache variable for type UIViewPropertyAnimator.UpdateReason and conformance UIViewPropertyAnimator.UpdateReason;
  if (!lazy protocol witness table cache variable for type UIViewPropertyAnimator.UpdateReason and conformance UIViewPropertyAnimator.UpdateReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIViewPropertyAnimator.UpdateReason and conformance UIViewPropertyAnimator.UpdateReason);
  }
  return result;
}

uint64_t initializeWithCopy for UIView.Shadow(uint64_t a1, uint64_t a2)
{
  double v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for UIView.Shadow(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy40_8_0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for UIView.Shadow(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for UIView.Shadow()
{
  return &type metadata for UIView.Shadow;
}

uint64_t initializeBufferWithCopyOfBuffer for UIView.Border(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v3 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  id v4 = v3;
  return a1;
}

void destroy for UIView.Border(uint64_t a1)
{
}

uint64_t assignWithCopy for UIView.Border(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v3;
  id v4 = (void *)a2[2];
  id v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  id v6 = v4;

  return a1;
}

__n128 __swift_memcpy24_8_1(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for UIView.Border(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for UIView.Border(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UIView.Border(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UIView.Border()
{
  return &type metadata for UIView.Border;
}

void *__swift_memcpy8_4_0(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for UIView.CompressionResistancePriority()
{
  return &type metadata for UIView.CompressionResistancePriority;
}

unsigned char *storeEnumTagSinglePayload for UIViewPropertyAnimator.UpdateReason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002C0A50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UIViewPropertyAnimator.UpdateReason()
{
  return &type metadata for UIViewPropertyAnimator.UpdateReason;
}

uint64_t partial apply for closure #1 in traverseInnerViewController #1 (_:) in UIViewController.traverseViewControllerHierarchy(_:)(uint64_t a1, unsigned char *a2)
{
  return closure #1 in traverseInnerViewController #1 (_:) in UIViewController.traverseViewControllerHierarchy(_:)(a1, a2, *(void (**)(uint64_t, unsigned char *))(v2 + 16), *(void *)(v2 + 24), *(unsigned char **)(v2 + 32));
}

uint64_t partial apply for closure #1 in UIView.traverseViewHierarchy(_:)(uint64_t a1, unsigned char *a2)
{
  unsigned int v4 = *(unsigned char **)(v2 + 32);
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *))(v2 + 16))(a1, v4);
  *a2 = *v4;
  return result;
}

uint64_t outlined init with take of NSUserDefaults._Observer.HandlerAssociation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NSUserDefaults._Observer.HandlerAssociation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t URL.appending(_:)()
{
  return URL.appendingPathComponent(_:isDirectory:)();
}

uint64_t URL.init(string:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&_s10Foundation3URLVSgMD_0);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    goto LABEL_4;
  }
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    outlined destroy of TaskPriority?((uint64_t)v6, &_s10Foundation3URLVSgMD_0);
LABEL_4:
    uint64_t v9 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a2, 1, 1, v9);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v6, v7);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
}

uint64_t URL.parametrize(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&_s10Foundation3URLVSgMD_0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for URLQueryItem();
  uint64_t v8 = *(void *)(v68 - 8);
  uint64_t v9 = __chkstk_darwin(v68);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v67 = (char *)&v48 - v13;
  __chkstk_darwin(v12);
  uint64_t v63 = (char *)&v48 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&_s10Foundation13URLComponentsVSgMD_0);
  __chkstk_darwin(v15 - 8);
  char v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for URLComponents();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  unint64_t v54 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for URL();
  uint64_t v53 = *(void *)(v21 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(a2, v2, v21);
  if (*(void *)(a1 + 16))
  {
    URLComponents.init(url:resolvingAgainstBaseURL:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
    {
      return outlined destroy of TaskPriority?((uint64_t)v17, &_s10Foundation13URLComponentsVSgMD_0);
    }
    else
    {
      uint64_t v51 = v19;
      uint64_t v52 = v18;
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v54, v17, v18);
      uint64_t v23 = URLComponents.queryItems.getter();
      if (v23) {
        unint64_t v24 = (void *)v23;
      }
      else {
        unint64_t v24 = _swiftEmptyArrayStorage;
      }
      uint64_t v25 = swift_bridgeObjectRetain();
      uint64_t v26 = specialized _copyCollectionToContiguousArray<A>(_:)(v25);
      swift_bridgeObjectRelease();
      id v69 = v26;
      specialized MutableCollection<>.sort(by:)(&v69);
      unint64_t v27 = v69;
      uint64_t v62 = v69[2];
      if (v62)
      {
        uint64_t v48 = v21;
        uint64_t v49 = v7;
        uint64_t v50 = a2;
        unint64_t v28 = 0;
        uint64_t v60 = v69;
        uint64_t v61 = v69 + 4;
        uint64_t v65 = (void (**)(char *, char *, uint64_t))(v8 + 16);
        uint64_t v66 = (void (**)(char *, uint64_t))(v8 + 8);
        uint64_t v57 = v8 + 32;
        uint64_t v58 = v8;
        uint64_t v55 = (void (**)(char *, char *, uint64_t))(v8 + 40);
        unint64_t v56 = (v8 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        IsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation12URLQueryItemV_Tg5_0 = v24;
        unint64_t v59 = v11;
        while (v28 < v27[2])
        {
          unint64_t v64 = v28;
          uint64_t v32 = &v61[4 * v28];
          uint64_t v33 = *v32;
          uint64_t v34 = v32[1];
          uint64_t v35 = IsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation12URLQueryItemV_Tg5_0;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          URLQueryItem.init(name:value:)();
          swift_bridgeObjectRelease();
          uint64_t v36 = IsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation12URLQueryItemV_Tg5_0[2];
          if (v36)
          {
            unint64_t v37 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
            uint64_t v38 = *(void *)(v8 + 72);
            id v39 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
            swift_bridgeObjectRetain();
            unint64_t v40 = 0;
            while (1)
            {
              v39(v67, (char *)IsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation12URLQueryItemV_Tg5_0 + v37, v68);
              if (URLQueryItem.name.getter() == v33 && v41 == v34) {
                break;
              }
              char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              (*v66)(v67, v68);
              if (v42) {
                goto LABEL_25;
              }
              ++v40;
              v37 += v38;
              IsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation12URLQueryItemV_Tg5_0 = v35;
              if (v36 == v40)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v8 = v58;
                uint64_t v11 = v59;
                goto LABEL_20;
              }
            }
            swift_bridgeObjectRelease();
            (*v66)(v67, v68);
LABEL_25:
            swift_bridgeObjectRelease();
            IsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation12URLQueryItemV_Tg5_0 = v35;
            swift_bridgeObjectRelease();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              IsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation12URLQueryItemV_Tg5_0 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v35);
            }
            uint64_t v11 = v59;
            if (v40 >= IsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation12URLQueryItemV_Tg5_0[2]) {
              goto LABEL_36;
            }
            (*v55)((char *)IsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation12URLQueryItemV_Tg5_0 + v37, v63, v68);
            uint64_t v8 = v58;
          }
          else
          {
            swift_bridgeObjectRelease();
            id v39 = *v65;
LABEL_20:
            uint64_t v43 = v63;
            v39(v11, v63, v68);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              IsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation12URLQueryItemV_Tg5_0 = (void *)_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation12URLQueryItemV_Tg5_0(0, IsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation12URLQueryItemV_Tg5_0[2] + 1, 1, IsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation12URLQueryItemV_Tg5_0);
            }
            unint64_t v45 = IsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation12URLQueryItemV_Tg5_0[2];
            unint64_t v44 = IsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation12URLQueryItemV_Tg5_0[3];
            if (v45 >= v44 >> 1) {
              IsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation12URLQueryItemV_Tg5_0 = (void *)_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation12URLQueryItemV_Tg5_0(v44 > 1, v45 + 1, 1, IsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation12URLQueryItemV_Tg5_0);
            }
            IsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation12URLQueryItemV_Tg5_0[2] = v45 + 1;
            unint64_t v30 = (unint64_t)IsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation12URLQueryItemV_Tg5_0
                + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
                + *(void *)(v8 + 72) * v45;
            uint64_t v31 = v68;
            (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v30, v11, v68);
            (*(void (**)(char *, uint64_t))(v8 + 8))(v43, v31);
          }
          unint64_t v28 = v64 + 1;
          unint64_t v27 = v60;
          if (v64 + 1 == v62)
          {
            swift_release();
            a2 = v50;
            uint64_t v7 = v49;
            uint64_t v21 = v48;
            goto LABEL_31;
          }
        }
        __break(1u);
LABEL_36:
        __break(1u);
        uint64_t result = swift_release();
        __break(1u);
      }
      else
      {
        swift_release();
LABEL_31:
        uint64_t v46 = v54;
        URLComponents.queryItems.setter();
        URLComponents.url.getter();
        (*(void (**)(char *, uint64_t))(v51 + 8))(v46, v52);
        uint64_t v47 = v53;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v7, 1, v21) == 1)
        {
          return outlined destroy of TaskPriority?((uint64_t)v7, &_s10Foundation3URLVSgMD_0);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t))(v47 + 8))(a2, v21);
          return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v47 + 32))(a2, v7, v21);
        }
      }
    }
  }
  return result;
}

uint64_t static URL.+ infix(_:_:)()
{
  return URL.appendingPathComponent(_:isDirectory:)();
}

uint64_t URLComponents.queryItemsDictionary.getter()
{
  uint64_t v0 = type metadata accessor for URLQueryItem();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  int v3 = (char *)v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = URLComponents.queryItems.getter();
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 + 16);
  if (!v6)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v7 = (void *)_sSD17dictionaryLiteralSDyxq_Gx_q_td_tcfCSS_SSTgm5_0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
  uint64_t v8 = v1 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 64);
  v33[1] = v5;
  uint64_t v34 = v3;
  uint64_t v11 = v5 + ((v10 + 32) & ~v10);
  unint64_t v37 = (void (**)(char *, uint64_t))(v8 - 8);
  uint64_t v38 = v9;
  uint64_t v39 = v8;
  uint64_t v12 = *(void *)(v8 + 56);
  uint64_t v35 = v0;
  uint64_t v36 = v12;
  v9(v3, v11, v0);
  while (1)
  {
    uint64_t v14 = URLQueryItem.value.getter();
    if (v15) {
      break;
    }
LABEL_6:
    (*v37)(v3, v0);
    v11 += v36;
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v7;
    }
    v38(v3, v11, v0);
  }
  uint64_t v40 = v15;
  uint64_t v16 = v14;
  URLQueryItem.name.getter();
  Swift::String v17 = String.lowercased()();
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v41 = v7;
  unint64_t v20 = _ss22__RawDictionaryStorageC4findys10_HashTableV6BucketV6bucket_Sb5foundtxSHRzlFSS_Tg5_0(v17._countAndFlagsBits, (uint64_t)v17._object);
  uint64_t v21 = v7[2];
  BOOL v22 = (v19 & 1) == 0;
  uint64_t v23 = v21 + v22;
  if (!__OFADD__(v21, v22))
  {
    char v24 = v19;
    if (v7[3] < v23)
    {
      _ss17_NativeDictionaryV20_copyOrMoveAndResize8capacity12moveElementsySi_SbtFSS_SSTg5_0(v23, isUniquelyReferenced_nonNull_native);
      uint64_t v25 = _ss22__RawDictionaryStorageC4findys10_HashTableV6BucketV6bucket_Sb5foundtxSHRzlFSS_Tg5_0(v17._countAndFlagsBits, (uint64_t)v17._object);
      if ((v24 & 1) != (v26 & 1)) {
        goto LABEL_26;
      }
      unint64_t v20 = v25;
      uint64_t v27 = v40;
      uint64_t v7 = v41;
      if ((v24 & 1) == 0) {
        goto LABEL_16;
      }
LABEL_4:
      uint64_t v13 = (uint64_t *)(v7[7] + 16 * v20);
      swift_bridgeObjectRelease();
      *uint64_t v13 = v16;
      v13[1] = v27;
LABEL_5:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v3 = v34;
      uint64_t v0 = v35;
      goto LABEL_6;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v27 = v40;
      uint64_t v7 = v41;
      if (v19) {
        goto LABEL_4;
      }
    }
    else
    {
      _ss17_NativeDictionaryV4copyyyFSS_SSTg5_0();
      uint64_t v27 = v40;
      uint64_t v7 = v41;
      if (v24) {
        goto LABEL_4;
      }
    }
LABEL_16:
    v7[(v20 >> 6) + 8] |= 1 << v20;
    *(Swift::String *)(v7[6] + 16 * v20) = v17;
    unint64_t v28 = (uint64_t *)(v7[7] + 16 * v20);
    *unint64_t v28 = v16;
    v28[1] = v27;
    uint64_t v29 = v7[2];
    BOOL v30 = __OFADD__(v29, 1);
    uint64_t v31 = v29 + 1;
    if (v30) {
      goto LABEL_25;
    }
    v7[2] = v31;
    swift_bridgeObjectRetain();
    goto LABEL_5;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(unsigned char *)(*(void *)(a4 + 48) + v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t _ss17_NativeDictionaryV20_copyOrMoveAndResize8capacity12moveElementsySi_SbtFSS_SSTg5_0(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&_ss18_DictionaryStorageCyS2SGMD_0);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    char v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          int v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    char v19 = (void *)(*(void *)(v7 + 48) + v18);
    *char v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    void *v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int v3 = v39;
  char v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *int v3 = v7;
  return result;
}

void *_ss17_NativeDictionaryV4copyyyFSS_SSTg5_0()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&_ss18_DictionaryStorageCyS2SGMD_0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    unint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    int64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    void *v23 = v19;
    v23[1] = v18;
    char v24 = (void *)(*(void *)(v4 + 56) + v16);
    *char v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t destroy for URL.Component()
{
  return outlined consume of URL.Component();
}

uint64_t outlined consume of URL.Component()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for URL.Component(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  Library.Menu.Revision.Version.selected.getter();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for URL.Component(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  Library.Menu.Revision.Version.selected.getter();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of URL.Component();
  return a1;
}

__n128 __swift_memcpy17_8_0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for URL.Component(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of URL.Component();
  return a1;
}

uint64_t getEnumTagSinglePayload for URL.Component(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for URL.Component(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for URL.Component(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for URL.Component(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for URL.Component()
{
  return &type metadata for URL.Component;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__dst, char *__src, unint64_t a3, char *a4)
{
  int v4 = a4;
  uint64_t v6 = __src;
  unint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = __src - __dst + 31;
  if (__src - __dst >= 0) {
    int64_t v9 = __src - __dst;
  }
  uint64_t v10 = v9 >> 5;
  uint64_t v11 = a3 - (void)__src;
  uint64_t v12 = a3 - (void)__src + 31;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v12 = a3 - (void)__src;
  }
  uint64_t v13 = v12 >> 5;
  if (v10 >= v12 >> 5)
  {
    if (a4 != __src || &__src[32 * v13] <= a4) {
      memmove(a4, __src, 32 * v13);
    }
    unint64_t v14 = &v4[32 * v13];
    if (v7 >= v6 || v11 < 32) {
      goto LABEL_48;
    }
    uint64_t v18 = (char *)(a3 - 32);
    while (1)
    {
      uint64_t v19 = v18 + 32;
      unint64_t v20 = v6 - 32;
      BOOL v21 = *((void *)v6 - 4) == *((void *)v14 - 4) && *((void *)v6 - 3) == *((void *)v14 - 3);
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        unint64_t v20 = v14 - 32;
        if (v19 != v14)
        {
          v14 -= 32;
LABEL_45:
          long long v23 = *((_OWORD *)v20 + 1);
          *(_OWORD *)uint64_t v18 = *(_OWORD *)v20;
          *((_OWORD *)v18 + 1) = v23;
          goto LABEL_46;
        }
        BOOL v22 = v18 >= v14;
        v14 -= 32;
        if (v22) {
          goto LABEL_45;
        }
      }
      else
      {
        if (v19 != v6)
        {
          v6 -= 32;
          goto LABEL_45;
        }
        BOOL v22 = v18 >= v6;
        v6 -= 32;
        if (v22) {
          goto LABEL_45;
        }
      }
LABEL_46:
      if (v6 > v7)
      {
        v18 -= 32;
        if (v14 > v4) {
          continue;
        }
      }
      goto LABEL_48;
    }
  }
  if (a4 != __dst || &__dst[32 * v10] <= a4) {
    memmove(a4, __dst, 32 * v10);
  }
  unint64_t v14 = &v4[32 * v10];
  if ((unint64_t)v6 < a3 && v8 >= 32)
  {
    while (1)
    {
      BOOL v15 = *(void *)v4 == *(void *)v6 && *((void *)v4 + 1) == *((void *)v6 + 1);
      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      uint64_t v16 = v6;
      BOOL v15 = v7 == v6;
      v6 += 32;
      if (!v15) {
        goto LABEL_20;
      }
LABEL_21:
      v7 += 32;
      if (v4 >= v14 || (unint64_t)v6 >= a3) {
        goto LABEL_23;
      }
    }
    uint64_t v16 = v4;
    BOOL v15 = v7 == v4;
    v4 += 32;
    if (v15) {
      goto LABEL_21;
    }
LABEL_20:
    long long v17 = *((_OWORD *)v16 + 1);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v16;
    *((_OWORD *)v7 + 1) = v17;
    goto LABEL_21;
  }
LABEL_23:
  uint64_t v6 = v7;
LABEL_48:
  if (v6 != v4 || v6 >= &v4[(v14 - v4 + (v14 - v4 < 0 ? 0x1FuLL : 0)) & 0xFFFFFFFFFFFFFFE0]) {
    memmove(v6, v4, 32 * ((v14 - v4) / 32));
  }
  return 1;
}

char *_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSnySiG_Tgq5_0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCySnySiGGMD_0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *_ss12_ArrayBufferV20_consumeAndCreateNewAByxGyFSnySiG_Tgq5_0(uint64_t a1)
{
  return _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSnySiG_Tgq5_0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

size_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

void *specialized _ContiguousArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t static NSUserDefaults.observe<A>(_:in:valueChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v37 = a2;
  uint64_t v9 = *(void *)(a6 - 8);
  __chkstk_darwin(a1);
  int64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NSUserDefaults.KeyValueRegistration.Identifier(0);
  uint64_t v13 = v12 - 8;
  uint64_t v34 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v34 + 64);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v35 = (uint64_t)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v36 = (uint64_t)&v34 - v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v34 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a6);
  swift_bridgeObjectRetain();
  uint64_t v20 = String.init<A>(_:)();
  uint64_t v22 = v21;
  UUID.init()();
  long long v23 = &v19[*(int *)(v13 + 28)];
  *(void *)long long v23 = v37;
  *((void *)v23 + 1) = a3;
  char v24 = (uint64_t *)&v19[*(int *)(v13 + 32)];
  *char v24 = v20;
  v24[1] = v22;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v25 = static NSUserDefaults._Observer.shared;
  uint64_t v26 = *(void *)(static NSUserDefaults._Observer.shared
                  + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v26 + 16));
  uint64_t v27 = v40;
  closure #1 in NSUserDefaults._Observer.addObserver(identifiedBy:handler:)(v25, (uint64_t)v19, v38, v39);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v26 + 16));
  if (v27)
  {
    outlined destroy of NSUserDefaults.KeyValueRegistration.Identifier((uint64_t)v19, type metadata accessor for NSUserDefaults.KeyValueRegistration.Identifier);
  }
  else
  {
    uint64_t v28 = v36;
    outlined init with copy of NSUserDefaults.KeyValueRegistration.Identifier((uint64_t)v19, v36);
    uint64_t v29 = v35;
    outlined init with take of NSUserDefaults.KeyValueRegistration.Identifier((uint64_t)v19, v35, type metadata accessor for NSUserDefaults.KeyValueRegistration.Identifier);
    unint64_t v30 = (*(unsigned __int8 *)(v34 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
    uint64_t v31 = swift_allocObject();
    outlined init with take of NSUserDefaults.KeyValueRegistration.Identifier(v29, v31 + v30, type metadata accessor for NSUserDefaults.KeyValueRegistration.Identifier);
    type metadata accessor for NSUserDefaults.KeyValueRegistration(0);
    uint64_t v26 = swift_allocObject();
    outlined init with take of NSUserDefaults.KeyValueRegistration.Identifier(v28, v26 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_identifier, type metadata accessor for NSUserDefaults.KeyValueRegistration.Identifier);
    uint64_t v32 = (void (**)())(v26 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate);
    *uint64_t v32 = partial apply for closure #1 in static NSUserDefaults.observe<A>(_:in:valueChanged:);
    v32[1] = (void (*)())v31;
  }
  return v26;
}

uint64_t specialized Sequence.first(where:)(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a1;
  uint64_t v4 = v3;
  uint64_t v23 = a3 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 64);
  int64_t v24 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  if (!v8) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(a3 + 48) + 24 * i);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    uint64_t v19 = (void *)v16[2];
    uint64_t v20 = *(void *)(*(void *)(a3 + 56) + 8 * i);
    v25[0] = *v16;
    v25[1] = v17;
    v25[2] = v19;
    v25[3] = v20;
    swift_bridgeObjectRetain();
    id v21 = v19;
    swift_bridgeObjectRetain();
    char v22 = v26(v25);
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      return v18;
    }
    if (v22)
    {
      swift_release();
      return v18;
    }
    swift_bridgeObjectRelease();

    uint64_t result = swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v10++, 1)) {
      break;
    }
    if (v10 >= v24) {
      goto LABEL_28;
    }
    unint64_t v14 = *(void *)(v23 + 8 * v10);
    if (!v14)
    {
      int64_t v15 = v10 + 1;
      if (v10 + 1 >= v24) {
        goto LABEL_28;
      }
      unint64_t v14 = *(void *)(v23 + 8 * v15);
      if (v14) {
        goto LABEL_16;
      }
      int64_t v15 = v10 + 2;
      if (v10 + 2 >= v24) {
        goto LABEL_28;
      }
      unint64_t v14 = *(void *)(v23 + 8 * v15);
      if (v14) {
        goto LABEL_16;
      }
      int64_t v15 = v10 + 3;
      if (v10 + 3 >= v24) {
        goto LABEL_28;
      }
      unint64_t v14 = *(void *)(v23 + 8 * v15);
      if (v14)
      {
LABEL_16:
        int64_t v10 = v15;
        goto LABEL_17;
      }
      int64_t v15 = v10 + 4;
      if (v10 + 4 < v24)
      {
        unint64_t v14 = *(void *)(v23 + 8 * v15);
        if (!v14)
        {
          while (1)
          {
            int64_t v10 = v15 + 1;
            if (__OFADD__(v15, 1)) {
              goto LABEL_31;
            }
            if (v10 >= v24) {
              goto LABEL_28;
            }
            unint64_t v14 = *(void *)(v23 + 8 * v10);
            ++v15;
            if (v14) {
              goto LABEL_17;
            }
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      swift_release();
      return 0;
    }
LABEL_17:
    unint64_t v8 = (v14 - 1) & v14;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t UserDefault.init(wrappedValue:defaults:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  *(void *)a5 = a2;
  uint64_t v9 = type metadata accessor for UserDefault();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(&a5[*(int *)(v9 + 44)], a3, a4);
  int64_t v10 = &a5[*(int *)(v9 + 48)];
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32);

  return v12(v10, a1, v11);
}

uint64_t UserDefault.init<A>(wrappedValue:defaults:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, char *a7@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v21 = a6;
  uint64_t v19 = a7;
  __chkstk_darwin(a1);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v18 - v15, a1, v13);
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a3, a5);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
  return UserDefault.init(wrappedValue:defaults:key:)((uint64_t)v16, v20, (uint64_t)v12, a4, v19);
}

uint64_t UserDefault.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v20 = a2;
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = __chkstk_darwin(a1);
  unint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v6 + 24);
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v12 = (char *)&v19 - v11;
  NSUserDefaults.subscript.getter(v2 + *(int *)(a1 + 44), &v21);
  __swift_instantiateConcreteTypeFromMangledName(&_sypSgMD_1);
  int v13 = swift_dynamicCast();
  uint64_t v14 = *(void *)(v9 - 8);
  uint64_t v15 = *(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56);
  v15(v12, v13 ^ 1u, 1, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v3, a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v9) == 1)
  {
    uint64_t v16 = v19;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v20, &v8[*(int *)(a1 + 48)], v19);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v16);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
    uint64_t v18 = v20;
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v20, v12, v9);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v15)(v18, 0, 1, v9);
  }
}

double NSUserDefaults.subscript.getter@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __chkstk_darwin(a1);
  (*(void (**)(char *))(v5 + 16))((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  String.init<A>(_:)();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [v2 objectForKey:v6];

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t UserDefault.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  specialized UserDefault.wrappedValue.setter(a1, a2);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(a1, v3);
}

uint64_t NSUserDefaults.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = __chkstk_darwin(a1);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any?(v9, (uint64_t)&v16);
  if (v17)
  {
    outlined init with take of Any(&v16, &v18);
    __swift_project_boxed_opaque_existential_0Tm(&v18, v19);
    uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a2, a3);
    String.init<A>(_:)();
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v4 setObject:v12 forKey:v13];
    swift_unknownObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a2, a3);
    _sypSgWOh_0(a1);
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v18);
  }
  else
  {
    _sypSgWOh_0((uint64_t)&v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a2, a3);
    String.init<A>(_:)();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v4 removeObjectForKey:v15];

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a2, a3);
    return _sypSgWOh_0(a1);
  }
}

{
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t vars8;

  specialized NSUserDefaults.subscript.setter(a1);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v5(a2, a3);
}

void (*UserDefault.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = type metadata accessor for Optional();
  void v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  UserDefault.wrappedValue.getter(a2, (uint64_t)v9);
  return UserDefault.wrappedValue.modify;
}

void UserDefault.wrappedValue.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v7 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    specialized UserDefault.wrappedValue.setter((uint64_t)v3, v7);
    size_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    specialized UserDefault.wrappedValue.setter((*a1)[5], v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t UserDefault.defaultValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 48);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

void NSUserDefaults.Suite.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t static NSUserDefaults.Suite.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return a4 == 0;
  }
  if (!a4) {
    return 0;
  }
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

Swift::Int NSUserDefaults.Suite.hashValue.getter(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSUserDefaults.Suite()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NSUserDefaults.Suite()
{
  if (*(void *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSUserDefaults.Suite()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSUserDefaults.Suite(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a2[1];
  if (!v3) {
    return v4 == 0;
  }
  if (!v4) {
    return 0;
  }
  if (*a1 == *a2 && v3 == v4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

id NSUserDefaults.init(suite:)(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithSuiteName:0];
  }
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 initWithSuiteName:v3];

  swift_bridgeObjectRelease();
  if (v4) {

  }
  return v4;
}

void (*NSUserDefaults.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1, char a2)
{
  uint64_t v9 = malloc(0x70uLL);
  *a1 = v9;
  v9[9] = a4;
  v9[10] = v4;
  _DWORD v9[8] = a3;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = v10;
  v9[11] = v10;
  size_t v12 = *(void *)(v10 + 64);
  v9[12] = malloc(v12);
  v9[13] = malloc(v12);
  (*(void (**)(void))(v11 + 16))();
  NSUserDefaults.subscript.getter(a2, v9);
  return NSUserDefaults.subscript.modify;
}

void NSUserDefaults.subscript.modify(uint64_t *a1, char a2)
{
  id v2 = (uint64_t *)*a1;
  uint64_t v4 = *(void **)(*a1 + 96);
  NSString v3 = *(void **)(*a1 + 104);
  if (a2)
  {
    uint64_t v5 = v2[11];
    uint64_t v6 = v2[8];
    outlined init with copy of Any?(*a1, (uint64_t)(v2 + 4));
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v4, v3, v6);
    NSUserDefaults.subscript.setter((uint64_t)(v2 + 4), (uint64_t)v4, v6);
    _sypSgWOh_0((uint64_t)v2);
  }
  else
  {
    NSUserDefaults.subscript.setter(*a1, v2[13], v2[8]);
  }
  free(v3);
  free(v4);

  free(v2);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t vars8;

  id v2 = (void *)*a1;
  if (a2)
  {
    uint64_t v4 = v2[12];
    NSString v3 = (void *)v2[13];
    uint64_t v5 = v2[8];
    outlined init with copy of Any?(*a1, (uint64_t)(v2 + 4));
    specialized NSUserDefaults.subscript.setter((uint64_t)(v2 + 4));
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
    _sypSgWOh_0((uint64_t)v2);
  }
  else
  {
    uint64_t v6 = v2[12];
    NSString v3 = (void *)v2[13];
    uint64_t v7 = v2[8];
    specialized NSUserDefaults.subscript.setter(*a1);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v3, v7);
  }
  free(v3);

  free(v2);
}

uint64_t NSUserDefaults.subscript.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v5 = (char *)&v8 - v4;
  dispatch thunk of RawRepresentable.rawValue.getter();
  double v6 = NSUserDefaults.subscript.getter((uint64_t)v5, a1);
  return (*(uint64_t (**)(char *, uint64_t, double))(v3 + 8))(v5, AssociatedTypeWitness, v6);
}

void (*NSUserDefaults.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t *a1, char a2)
{
  uint64_t v10 = malloc(0x70uLL);
  *a1 = v10;
  v10[10] = a5;
  v10[11] = v5;
  v10[8] = a3;
  v10[9] = a4;
  uint64_t v11 = *(void *)(a3 - 8);
  uint64_t v12 = v11;
  v10[12] = v11;
  v10[13] = malloc(*(void *)(v11 + 64));
  (*(void (**)(void))(v12 + 16))();
  NSUserDefaults.subscript.getter(v10);
  return NSUserDefaults.subscript.modify;
}

uint64_t NSUserDefaults.Migrator.init(userDefaults:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  double v6 = (char *)a4 + *(int *)(type metadata accessor for NSUserDefaults.Migrator() + 44);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32);

  return v7(v6, a2, a3);
}

uint64_t NSUserDefaults.Migrator.init<A>(userDefaults:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, char *a5@<X8>)
{
  uint64_t v10 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a2, a4);
  *(void *)a5 = a1;
  uint64_t v13 = type metadata accessor for NSUserDefaults.Migrator();
  return (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(&a5[*(int *)(v13 + 44)], v12, a3);
}

uint64_t NSUserDefaults.Migrator.migrateValue<A, B>(to:valueTransformer:destination:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  uint64_t v51 = a6;
  uint64_t v61 = a4;
  uint64_t v66 = a3;
  uint64_t v67 = a2;
  uint64_t v57 = a1;
  uint64_t v52 = a7;
  uint64_t v63 = a5;
  uint64_t v55 = *(void *)(a5 - 8);
  uint64_t v9 = __chkstk_darwin(a1);
  uint64_t v62 = (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = v11;
  uint64_t v12 = v11 - 8;
  uint64_t v64 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v9);
  uint64_t v53 = (id *)((char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = *(void *)(v12 + 24);
  uint64_t v65 = *(void *)(v15 - 8);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = v18;
  uint64_t v59 = type metadata accessor for Optional();
  uint64_t v58 = *(void *)(v59 - 8);
  uint64_t v19 = __chkstk_darwin(v59);
  unint64_t v54 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v74 = (char *)&v51 - v21;
  uint64_t v22 = *(void *)(v12 + 32);
  uint64_t v23 = type metadata accessor for Optional();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v69 = v23;
  uint64_t v70 = v24;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v51 - v25;
  uint64_t v27 = v7 + *(int *)(v12 + 52);
  NSUserDefaults.subscript.getter(v27, v73);
  outlined init with copy of Any?((uint64_t)v73, (uint64_t)&v71);
  __swift_instantiateConcreteTypeFromMangledName(&_sypSgMD_1);
  int v28 = swift_dynamicCast();
  uint64_t v29 = *(void *)(v22 - 8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, v28 ^ 1u, 1, v22);
  outlined init with copy of Any?((uint64_t)v73, (uint64_t)&v71);
  uint64_t v30 = *((void *)&v72 + 1);
  _sypSgWOh_0((uint64_t)&v71);
  if (v30 && (*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v26, 1, v22) == 1)
  {
    type metadata accessor for NSUserDefaults.Migrator.Error();
    swift_getWitnessTable();
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v31, v27, v15);
    swift_willThrow();
LABEL_5:
    _sypSgWOh_0((uint64_t)v73);
    return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v26, v69);
  }
  id v32 = v68;
  v67(v26);
  if (v32) {
    goto LABEL_5;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v17, v27, v15);
  long long v71 = 0u;
  long long v72 = 0u;
  NSUserDefaults.subscript.setter((uint64_t)&v71, (uint64_t)v17, v15);
  uint64_t v34 = v53;
  uint64_t v35 = v56;
  (*(void (**)(id *, uint64_t, uint64_t))(v64 + 16))(v53, v8, v56);
  uint64_t v36 = v61;
  if (v61)
  {
    id v68 = v61;
  }
  else
  {
    id v37 = *v34;
    uint64_t v36 = v61;
    id v68 = v37;
  }
  uint64_t v38 = v62;
  uint64_t v39 = v63;
  uint64_t v40 = v58;
  uint64_t v41 = *(void (**)(id *, uint64_t))(v64 + 8);
  id v42 = v36;
  v41(v34, v35);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v38, v57, v39);
  uint64_t v43 = v54;
  uint64_t v44 = v59;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v54, v74, v59);
  uint64_t v45 = v60;
  uint64_t v46 = *(void *)(v60 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v43, 1, v60) == 1)
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v43, v44);
    long long v71 = 0u;
    long long v72 = 0u;
  }
  else
  {
    *((void *)&v72 + 1) = v45;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v71);
    (*(void (**)(uint64_t *, char *, uint64_t))(v46 + 32))(boxed_opaque_existential_1, v43, v45);
  }
  uint64_t v48 = v52;
  uint64_t v49 = v68;
  uint64_t v50 = v69;
  NSUserDefaults.subscript.setter((uint64_t)&v71, v62, v63);

  _sypSgWOh_0((uint64_t)v73);
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v48, v74, v44);
  return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v26, v50);
}

uint64_t NSUserDefaults.Migrator.migrateValue<A, B>(to:valueTransformer:destination:)@<X0>(void (*a1)(char *)@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>, uint64_t a7)
{
  uint64_t v19 = a5;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v16 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v13 = (char *)&v15 - v12;
  dispatch thunk of RawRepresentable.rawValue.getter();
  NSUserDefaults.Migrator.migrateValue<A, B>(to:valueTransformer:destination:)((uint64_t)v13, a1, a2, v17, AssociatedTypeWitness, v16, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
}

uint64_t NSUserDefaults.Migrator.migrateValue<A>(to:destination:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = *(void *)(a3 + 24);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  NSUserDefaults.Migrator.migrateValue<A, B>(to:valueTransformer:destination:)(a1, (void (*)(char *))partial apply for closure #1 in static ArrayBuilder.buildExpression(_:), v12, a2, a4, a5, a6);
  return swift_release();
}

uint64_t (*static NSUserDefaults.ValueTransformer<>.identity.getter(uint64_t a1))@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(swift_allocObject() + 16) = a1;
  return partial apply for closure #1 in static ArrayBuilder.buildExpression(_:);
}

uint64_t NSUserDefaults.Migrator.migrateValue<A>(to:destination:)@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v12 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = (char *)&v12 - v9;
  dispatch thunk of RawRepresentable.rawValue.getter();
  NSUserDefaults.Migrator.migrateValue<A>(to:destination:)((uint64_t)v10, a1, a2, AssociatedTypeWitness, v12, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
}

uint64_t NSUserDefaults.migrateValue<A, B>(for:to:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v18 = a5;
  uint64_t v19 = a2;
  uint64_t v9 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NSUserDefaults.Migrator();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a3);
  *(void *)uint64_t v15 = v5;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v15[*(int *)(v12 + 44)], v11, a3);
  id v16 = v5;
  NSUserDefaults.Migrator.migrateValue<A>(to:destination:)(a1, v19, v12, a3, a4, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t NSUserDefaults.migrateValue<A, B>(for:to:)@<X0>(void *a1@<X1>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  uint64_t v10 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v8 = (char *)&v10 - v7;
  dispatch thunk of RawRepresentable.rawValue.getter();
  NSUserDefaults.migrateValue<A, B>(for:to:)((uint64_t)v8, a1, AssociatedTypeWitness, v10, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
}

Swift::Void __swiftcall NSUserDefaults.KeyValueRegistration.invalidate()()
{
  (*(void (**)(void))(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate))();
}

uint64_t NSUserDefaults.KeyValueRegistration.deinit()
{
  (*(void (**)(void))(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate))();
  outlined destroy of NSUserDefaults.KeyValueRegistration.Identifier(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_identifier, type metadata accessor for NSUserDefaults.KeyValueRegistration.Identifier);
  swift_release();
  return v0;
}

uint64_t NSUserDefaults.KeyValueRegistration.__deallocating_deinit()
{
  (*(void (**)(void))(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_onInvalidate))();
  outlined destroy of NSUserDefaults.KeyValueRegistration.Identifier(v0 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaults20KeyValueRegistration_identifier, type metadata accessor for NSUserDefaults.KeyValueRegistration.Identifier);
  swift_release();

  return swift_deallocClassInstance();
}

void closure #1 in static NSUserDefaults.observe<A>(_:in:valueChanged:)(uint64_t a1)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = static NSUserDefaults._Observer.shared;
  uint64_t v3 = *(void *)(static NSUserDefaults._Observer.shared
                 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_lock);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v3 + 16));
  closure #1 in NSUserDefaults._Observer.removeObserver(identifiedBy:)(v2, a1);
  uint64_t v4 = *(os_unfair_lock_s **)(v3 + 16);

  os_unfair_lock_unlock(v4);
}

uint64_t static NSUserDefaults.observe<A>(_:in:valueChanged:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v17[0] = a5;
  v17[1] = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v14 = (char *)v17 - v13;
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v15 = static NSUserDefaults.observe<A>(_:in:valueChanged:)((uint64_t)v14, a2, a3, a4, v17[0], AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
  return v15;
}

uint64_t closure #1 in NSUserDefaults._Observer.addObserver(identifiedBy:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v59 = a3;
  uint64_t v60 = a4;
  uint64_t v58 = type metadata accessor for NSUserDefaults._Observer.HandlerAssociation(0);
  uint64_t v61 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = a1;
  uint64_t v9 = (uint64_t *)(a1
                 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_registeredSuites);
  swift_beginAccess();
  uint64_t v10 = *v9;
  uint64_t v63 = a2;
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized Sequence.first(where:)((uint64_t (*)(void *))partial apply for closure #1 in closure #1 in NSUserDefaults._Observer.addObserver(identifiedBy:handler:), (uint64_t)v62, v10);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  if (v15)
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = v11;
  }
  else
  {
    type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for NSUserDefaults);
    uint64_t v17 = (uint64_t *)(a2 + *(int *)(type metadata accessor for NSUserDefaults.KeyValueRegistration.Identifier(0) + 20));
    uint64_t v16 = *v17;
    uint64_t v13 = v17[1];
    swift_bridgeObjectRetain();
    id v18 = NSUserDefaults.init(suite:)(v16, v13);
    if (!v18)
    {
      lazy protocol witness table accessor for type NSUserDefaults.Error and conformance NSUserDefaults.Error();
      swift_allocError();
      *uint64_t v36 = v16;
      v36[1] = v13;
      swift_bridgeObjectRetain();
      return swift_willThrow();
    }
    uint64_t v15 = v18;
    swift_bridgeObjectRetain();
  }
  uint64_t v19 = *v9;
  uint64_t v20 = *(void *)(*v9 + 16);
  uint64_t v57 = v4;
  if (v20)
  {
    swift_bridgeObjectRetain();
    id v21 = v15;
    swift_bridgeObjectRetain();
    unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v13, (uint64_t)v21);
    if (v23)
    {
      unint64_t v55 = *(void *)(*(void *)(v19 + 56) + 8 * v22);
      swift_bridgeObjectRetain();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  unint64_t v55 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
LABEL_10:
  uint64_t v24 = *v9;
  if (!*(void *)(*v9 + 16))
  {
LABEL_20:
    uint64_t v35 = _swiftEmptyArrayStorage;
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  id v25 = v15;
  swift_bridgeObjectRetain();
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v13, (uint64_t)v25);
  if ((v27 & 1) == 0)
  {

    swift_bridgeObjectRelease();
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  uint64_t v28 = *(void *)(*(void *)(v24 + 56) + 8 * v26);
  swift_bridgeObjectRetain();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v29 = type metadata accessor for NSUserDefaults.KeyValueRegistration.Identifier(0);
  if (!*(void *)(v28 + 16)) {
    goto LABEL_19;
  }
  uint64_t v30 = (uint64_t *)(a2 + *(int *)(v29 + 24));
  uint64_t v31 = *v30;
  uint64_t v32 = v30[1];
  swift_bridgeObjectRetain();
  uint64_t v33 = _ss22__RawDictionaryStorageC4findys10_HashTableV6BucketV6bucket_Sb5foundtxSHRzlFSS_Tg5_0(v31, v32);
  if ((v34 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  uint64_t v35 = *(void **)(*(void *)(v28 + 56) + 8 * v33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_21:
  uint64_t v38 = v35[2];
  uint64_t v56 = v16;
  if (!v38)
  {
    type metadata accessor for NSUserDefaults.KeyValueRegistration.Identifier(0);
    id v39 = v15;
    NSString v40 = String._bridgeToObjectiveC()();
    [v39 addObserver:v54 forKeyPath:v40 options:0 context:0];
  }
  uint64_t v41 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16))(v8, a2, v41);
  id v42 = &v8[*(int *)(v58 + 20)];
  uint64_t v43 = v60;
  *(void *)id v42 = v59;
  *((void *)v42 + 1) = v43;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v35 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
  }
  unint64_t v45 = v35[2];
  unint64_t v44 = v35[3];
  if (v45 >= v44 >> 1) {
    uint64_t v35 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1, v35);
  }
  v35[2] = v45 + 1;
  outlined init with take of NSUserDefaults.KeyValueRegistration.Identifier((uint64_t)v8, (uint64_t)v35+ ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ *(void *)(v61 + 72) * v45, type metadata accessor for NSUserDefaults._Observer.HandlerAssociation);
  uint64_t v46 = (uint64_t *)(a2 + *(int *)(type metadata accessor for NSUserDefaults.KeyValueRegistration.Identifier(0) + 24));
  uint64_t v47 = *v46;
  uint64_t v48 = v46[1];
  swift_bridgeObjectRetain();
  unint64_t v49 = v55;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v64 = v49;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v35, v47, v48, isUniquelyReferenced_nonNull_native);
  uint64_t v51 = v64;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v52 = v15;
  char v53 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v65 = *v9;
  *uint64_t v9 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v51, v56, v13, v52, v53);
  *uint64_t v9 = v65;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for NSUserDefaults.KeyValueRegistration.Identifier(uint64_t a1)
{
  return type metadata accessor for Notice.Variant(a1, (uint64_t *)&type metadata singleton initialization cache for NSUserDefaults.KeyValueRegistration.Identifier);
}

uint64_t sub_1002C7480()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for NSUserDefaults.KeyValueRegistration.Identifier(0)
                                      - 8)
                          + 80);
  uint64_t v2 = v0 + ((v1 + 16) & ~v1);
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t type metadata accessor for NSUserDefaults.KeyValueRegistration(uint64_t a1)
{
  return type metadata accessor for Notice.Variant(a1, (uint64_t *)&type metadata singleton initialization cache for NSUserDefaults.KeyValueRegistration);
}

uint64_t type metadata accessor for UserDefault()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in NSUserDefaults._Observer.removeObserver(identifiedBy:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for NSUserDefaults._Observer.HandlerAssociation(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (uint64_t *)(a1
                 + OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_registeredSuites);
  swift_beginAccess();
  uint64_t v10 = *v9;
  uint64_t v49 = a2;
  swift_bridgeObjectRetain();
  uint64_t v47 = (void (*)(unsigned char *, void))specialized Sequence.first(where:)((uint64_t (*)(void *))partial apply for closure #1 in closure #1 in NSUserDefaults._Observer.removeObserver(identifiedBy:), (uint64_t)v48, v10);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v17 = v2;
  uint64_t result = swift_bridgeObjectRelease();
  if (v14)
  {
    uint64_t v19 = type metadata accessor for NSUserDefaults.KeyValueRegistration.Identifier(0);
    if (*(void *)(v16 + 16))
    {
      uint64_t v46 = a1;
      uint64_t v20 = (uint64_t *)(a2 + *(int *)(v19 + 24));
      uint64_t v21 = *v20;
      uint64_t v22 = v20[1];
      unint64_t v45 = v20;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v23 = _ss22__RawDictionaryStorageC4findys10_HashTableV6BucketV6bucket_Sb5foundtxSHRzlFSS_Tg5_0(v21, v22);
      if (v24)
      {
        uint64_t v44 = v12;
        uint64_t v25 = *(void *)(*(void *)(v16 + 56) + 8 * v23);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v53 = v25;
        uint64_t v26 = *(void *)(v25 + 16);
        if (v26)
        {
          v43[1] = v17;
          unint64_t v27 = v25 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
          uint64_t v28 = *(void *)(v6 + 72);
          swift_bridgeObjectRetain();
          unint64_t v29 = 0;
          while ((static UUID.== infix(_:_:)() & 1) == 0)
          {
            ++v29;
            v27 += v28;
            if (v26 == v29)
            {

              swift_bridgeObjectRelease_n();
              goto LABEL_11;
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v30 = v44;
          swift_bridgeObjectRetain();
          id v31 = v14;
          specialized Array.remove(at:)(v29, (uint64_t)v8);
          outlined destroy of NSUserDefaults.KeyValueRegistration.Identifier((uint64_t)v8, type metadata accessor for NSUserDefaults._Observer.HandlerAssociation);
          uint64_t v32 = v53;
          if (!*(void *)(v53 + 16))
          {
            id v33 = v31;
            NSString v34 = String._bridgeToObjectiveC()();
            [v33 removeObserver:v46 forKeyPath:v34];
          }
          swift_bridgeObjectRetain();
          id v35 = v31;
          uint64_t v36 = NSUserDefaults._Observer.registeredSuites.modify();
          uint64_t v38 = specialized Dictionary.subscript.modify(v51, (uint64_t)v47, v30, v35);
          if (*v37)
          {
            id v39 = v37;
            uint64_t v47 = (void (*)(unsigned char *, void))v36;
            uint64_t v41 = *v45;
            uint64_t v40 = v45[1];
            swift_bridgeObjectRetain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v50 = *v39;
            *id v39 = 0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, v41, v40, isUniquelyReferenced_nonNull_native);
            *id v39 = v50;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            ((void (*)(void *, void))v38)(v51, 0);

            swift_bridgeObjectRelease();
            v47(v52, 0);
          }
          else
          {
            swift_bridgeObjectRelease();
            ((void (*)(void *, void))v38)(v51, 0);

            swift_bridgeObjectRelease();
            ((void (*)(unsigned char *, void))v36)(v52, 0);
          }

          swift_bridgeObjectRelease_n();
          return swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL closure #1 in closure #1 in NSUserDefaults._Observer.addObserver(identifiedBy:handler:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = (void *)(a2 + *(int *)(type metadata accessor for NSUserDefaults.KeyValueRegistration.Identifier(0) + 20));
  uint64_t v5 = v4[1];
  if (!v3) {
    return v5 == 0;
  }
  if (!v5) {
    return 0;
  }
  if (v2 == *v4 && v3 == v5) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

void NSUserDefaults._Observer.observeValue(forKeyPath:of:change:context:)(uint64_t a1, void *a2, uint64_t a3, Class isa, uint64_t a5)
{
  NSString v9 = a2;
  uint64_t v35 = a1;
  if (!a2)
  {
LABEL_9:
    outlined init with copy of Any?(a3, (uint64_t)&v38);
    uint64_t v20 = *((void *)&v39 + 1);
    if (*((void *)&v39 + 1))
    {
      uint64_t v21 = __swift_project_boxed_opaque_existential_0Tm(&v38, *((uint64_t *)&v39 + 1));
      uint64_t v22 = *(void *)(v20 - 8);
      __chkstk_darwin(v21);
      char v24 = (char *)&v34 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v22 + 16))(v24);
      uint64_t v25 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v20);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v38);
      if (!isa)
      {
LABEL_12:
        uint64_t v26 = (objc_class *)type metadata accessor for NSUserDefaults._Observer();
        v37.receiver = v5;
        v37.super_class = v26;
        objc_msgSendSuper2(&v37, "observeValueForKeyPath:ofObject:change:context:", v9, v25, isa, a5);

        swift_unknownObjectRelease();
LABEL_13:

        return;
      }
    }
    else
    {
      uint64_t v25 = 0;
      if (!isa) {
        goto LABEL_12;
      }
    }
    type metadata accessor for NSKeyValueChangeKey(0);
    lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    goto LABEL_12;
  }
  outlined init with copy of Any?(a3, (uint64_t)&v38);
  if (!*((void *)&v39 + 1))
  {
    _sypSgWOh_0((uint64_t)&v38);
    goto LABEL_8;
  }
  type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for NSUserDefaults);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    NSString v9 = String._bridgeToObjectiveC()();
    goto LABEL_9;
  }
  uint64_t v10 = *(void *)&v5[OBJC_IVAR____TtCE14MusicUtilitiesCSo14NSUserDefaultsP33_0EE8F48931DDE162065F15584D7CE3A39_Observer_lock];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 16));
  swift_beginAccess();
  Class isa = (Class)v36;
  uint64_t v11 = swift_bridgeObjectRetain();
  specialized Sequence.first(where:)(v11, isa);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();

  if (!v13) {
    goto LABEL_16;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Sequence.first(where:)(v15, v35, (uint64_t)v9);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v17) {
    swift_bridgeObjectRelease();
  }
  else {
LABEL_16:
  }
    uint64_t v19 = _swiftEmptyArrayStorage;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 16));
  uint64_t v27 = v19[2];
  if (!v27)
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v28 = type metadata accessor for NSUserDefaults._Observer.HandlerAssociation(0);
  unint64_t v29 = (char *)v19
      + ((*(unsigned __int8 *)(*(void *)(v28 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v28 - 8) + 80));
  uint64_t v30 = *(void *)(*(void *)(v28 - 8) + 72);
  NSString v34 = v19;
  swift_bridgeObjectRetain();
  do
  {
    id v31 = *(void (**)(long long *))&v29[*(int *)(v28 + 20)];
    NSString v32 = String._bridgeToObjectiveC()();
    id v33 = -[objc_class valueForKey:](isa, "valueForKey:", v32, v34);

    if (v33)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v38 = 0u;
      long long v39 = 0u;
    }
    v31(&v38);
    _sypSgWOh_0((uint64_t)&v38);
    v29 += v30;
    --v27;
  }
  while (v27);

  swift_bridgeObjectRelease_n();
}

uint64_t (*NSUserDefaults._Observer.registeredSuites.modify())()
{
  return ArtworkVideoReportingController.videoArtworkContextProviding.modify;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSUserDefaults._Observer.SuiteAssociation()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NSUserDefaults._Observer.SuiteAssociation()
{
  if (*(void *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSUserDefaults._Observer.SuiteAssociation()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSUserDefaults._Observer.SuiteAssociation(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a2[1];
  if (v3)
  {
    if (v4)
    {
      BOOL v5 = *a1 == *a2 && v3 == v4;
      if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_8;
      }
    }
  }
  else if (!v4)
  {
LABEL_8:
    type metadata accessor for UIMenu(0, (unint64_t *)&_sSo8NSObjectCML_0);
    return static NSObject.== infix(_:_:)() & 1;
  }
  return 0;
}

id NSUserDefaults._Observer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NSUserDefaults._Observer();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t NSUserDefaults.encodeValue(_:forKey:)(void *a1)
{
  objc_super v2 = v1;
  __swift_project_boxed_opaque_existential_0Tm(a1, a1[3]);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v3 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v5 = v4;
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  NSString v7 = String._bridgeToObjectiveC()();
  [v2 setValue:isa forKey:v7];

  return outlined consume of Data._Representation(v3, v5);
}

uint64_t NSUserDefaults.decodeValue<A>(_:forKey:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v2 valueForKey:v5];

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  _sypSgWOb_1((uint64_t)v11, (uint64_t)v12);
  if (!v12[3])
  {
    _sypSgWOh_0((uint64_t)v12);
    goto LABEL_8;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    uint64_t v7 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, v7, 1, a1);
  }
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  outlined consume of Data._Representation(v9, v10);
  swift_release();
  uint64_t v7 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, v7, 1, a1);
}

uint64_t one-time initialization function for userDefaults()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.userDefaults);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.userDefaults);
  return Logger.init(subsystem:category:)();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(void (*a1)(void))
{
  a1();

  return _typeName(_:qualified:)();
}

uint64_t specialized Sequence.first(where:)(uint64_t result, void *a2)
{
  int64_t v3 = 0;
  uint64_t v4 = result + 64;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v12 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v12 >= v8) {
      return 0;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v12);
    ++v3;
    if (!v13)
    {
      int64_t v3 = v12 + 1;
      if (v12 + 1 >= v8) {
        return 0;
      }
      unint64_t v13 = *(void *)(v4 + 8 * v3);
      if (!v13)
      {
        int64_t v3 = v12 + 2;
        if (v12 + 2 >= v8) {
          return 0;
        }
        unint64_t v13 = *(void *)(v4 + 8 * v3);
        if (!v13)
        {
          int64_t v3 = v12 + 3;
          if (v12 + 3 >= v8) {
            return 0;
          }
          unint64_t v13 = *(void *)(v4 + 8 * v3);
          if (!v13)
          {
            int64_t v14 = v12 + 4;
            if (v14 >= v8) {
              return 0;
            }
            unint64_t v13 = *(void *)(v4 + 8 * v14);
            if (!v13)
            {
              while (1)
              {
                int64_t v3 = v14 + 1;
                if (__OFADD__(v14, 1)) {
                  goto LABEL_27;
                }
                if (v3 >= v8) {
                  return 0;
                }
                unint64_t v13 = *(void *)(v4 + 8 * v3);
                ++v14;
                if (v13) {
                  goto LABEL_22;
                }
              }
            }
            int64_t v3 = v14;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = *(void *)(result + 48);
    if (*(void **)(v11 + 24 * v10 + 16) == a2)
    {
      uint64_t v15 = *(void *)(v11 + 24 * v10);
      swift_bridgeObjectRetain();
      id v16 = a2;
      swift_bridgeObjectRetain();
      return v15;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.first(where:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  int64_t v6 = 0;
  uint64_t v7 = result + 64;
  uint64_t v8 = 1 << *(unsigned char *)(result + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(result + 64);
  int64_t v19 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v12 = v11 | (v6 << 6);
      goto LABEL_22;
    }
    int64_t v13 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v13 >= v19) {
      return 0;
    }
    unint64_t v14 = *(void *)(v7 + 8 * v13);
    ++v6;
    if (!v14)
    {
      int64_t v6 = v13 + 1;
      if (v13 + 1 >= v19) {
        return 0;
      }
      unint64_t v14 = *(void *)(v7 + 8 * v6);
      if (!v14)
      {
        int64_t v6 = v13 + 2;
        if (v13 + 2 >= v19) {
          return 0;
        }
        unint64_t v14 = *(void *)(v7 + 8 * v6);
        if (!v14)
        {
          int64_t v6 = v13 + 3;
          if (v13 + 3 >= v19) {
            return 0;
          }
          unint64_t v14 = *(void *)(v7 + 8 * v6);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v10 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v6 << 6);
LABEL_22:
    id v16 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v12);
    uint64_t v17 = *v16;
    if (*v16 == a2 && v16[1] == a3)
    {
      uint64_t v17 = a2;
LABEL_29:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return v17;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_29;
    }
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v19) {
    return 0;
  }
  unint64_t v14 = *(void *)(v7 + 8 * v15);
  if (v14)
  {
    int64_t v6 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v6 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v6 >= v19) {
      return 0;
    }
    unint64_t v14 = *(void *)(v7 + 8 * v6);
    ++v15;
    if (v14) {
      goto LABEL_21;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t specialized UserDefault.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)(a2 + 16);
  __chkstk_darwin(v8);
  int64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, v2 + *(int *)(a2 + 44), v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  uint64_t v15 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    long long v18 = 0u;
    long long v19 = 0u;
  }
  else
  {
    *((void *)&v19 + 1) = v5;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v18);
    (*(void (**)(uint64_t *, char *, uint64_t))(v15 + 32))(boxed_opaque_existential_1, v10, v5);
  }
  return NSUserDefaults.subscript.setter((uint64_t)&v18, (uint64_t)v13, v11);
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&_sypSgMD_1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized NSUserDefaults.subscript.setter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v4 = &v6[-v3];
  dispatch thunk of RawRepresentable.rawValue.getter();
  outlined init with copy of Any?(a1, (uint64_t)v6);
  NSUserDefaults.subscript.setter((uint64_t)v6, (uint64_t)v4, AssociatedTypeWitness);
  return _sypSgWOh_0(a1);
}

uint64_t type metadata accessor for NSUserDefaults.Migrator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for NSUserDefaults.Migrator.Error()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1002C908C()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type NSUserDefaults.Suite and conformance NSUserDefaults.Suite()
{
  unint64_t result = lazy protocol witness table cache variable for type NSUserDefaults.Suite and conformance NSUserDefaults.Suite;
  if (!lazy protocol witness table cache variable for type NSUserDefaults.Suite and conformance NSUserDefaults.Suite)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSUserDefaults.Suite and conformance NSUserDefaults.Suite);
  }
  return result;
}

uint64_t type metadata completion function for UserDefault()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void **initializeBufferWithCopyOfBuffer for UserDefault(void **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(v4 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v8 + v10;
  if (*(_DWORD *)(v9 + 84)) {
    size_t v12 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  else {
    size_t v12 = *(void *)(*(void *)(v4 - 8) + 64) + 1;
  }
  int v13 = (*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000;
  uint64_t v14 = (char *)*a2;
  *a1 = *a2;
  if ((v10 | v7) > 7 || v13 != 0 || v12 + ((v8 + v10 + ((v7 + 8) & ~v7)) & ~v10) > 0x18)
  {
    uint64_t v17 = &v14[((v10 | v7) & 0xF8 ^ 0x1F8) & ((v10 | v7) + 16)];
    swift_retain();
  }
  else
  {
    uint64_t v18 = ~v10;
    uint64_t v25 = a1;
    uint64_t v19 = ((unint64_t)a1 + v7 + 8) & ~v7;
    uint64_t v20 = ((unint64_t)a2 + v7 + 8) & ~v7;
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    uint64_t v22 = v14;
    v21(v19, v20, v5);
    uint64_t v23 = (void *)((v19 + v11) & v18);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v20 + v11) & v18, 1, v4))
    {
      memcpy(v23, (const void *)((v20 + v11) & v18), v12);
    }
    else
    {
      (*(void (**)(void *, uint64_t, uint64_t))(v9 + 16))(v23, (v20 + v11) & v18, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v23, 0, 1, v4);
    }
    return v25;
  }
  return (void **)v17;
}

uint64_t destroy for UserDefault(id *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = ((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = (v6 + *(void *)(v5 + 56) + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = v8;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7);
  if (!result)
  {
    uint64_t v11 = *(uint64_t (**)(unint64_t, uint64_t))(v12 + 8);
    return v11(v9, v7);
  }
  return result;
}

void **initializeWithCopy for UserDefault(void **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  *a1 = *a2;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  uint64_t v9 = v7 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = ((unint64_t)a1 + v10 + 8) & ~v10;
  uint64_t v12 = ((unint64_t)a2 + v10 + 8) & ~v10;
  id v13 = v5;
  v8(v11, v12, v6);
  uint64_t v14 = *(void *)(a3 + 24);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = *(void *)(v9 + 48) + v16;
  uint64_t v18 = (void *)((v17 + v11) & ~v16);
  uint64_t v19 = (const void *)((v17 + v12) & ~v16);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v19, 1, v14))
  {
    if (*(_DWORD *)(v15 + 84)) {
      size_t v20 = *(void *)(v15 + 64);
    }
    else {
      size_t v20 = *(void *)(v15 + 64) + 1;
    }
    memcpy(v18, v19, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v18, v19, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
  }
  return a1;
}

void **assignWithCopy for UserDefault(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 24;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ((unint64_t)a1 + v11 + 8) & ~v11;
  uint64_t v13 = ((unint64_t)a2 + v11 + 8) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v12, v13);
  uint64_t v14 = *(void *)(v10 + 40);
  uint64_t v15 = *(void *)(a3 + 24);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = v14 + v17;
  uint64_t v19 = (void *)((v18 + v12) & ~v17);
  size_t v20 = (void *)((v18 + v13) & ~v17);
  uint64_t v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v13) = v21(v19, 1, v15);
  int v22 = v21(v20, 1, v15);
  if (v13)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v19, v20, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v15);
      return a1;
    }
    int v23 = *(_DWORD *)(v16 + 84);
    size_t v24 = *(void *)(v16 + 64);
  }
  else
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v19, v20, v15);
      return a1;
    }
    uint64_t v26 = *(void (**)(void *, uint64_t))(v16 + 8);
    uint64_t v25 = v16 + 8;
    v26(v19, v15);
    int v23 = *(_DWORD *)(v25 + 76);
    size_t v24 = *(void *)(v25 + 56);
  }
  if (v23) {
    size_t v27 = v24;
  }
  else {
    size_t v27 = v24 + 1;
  }
  memcpy(v19, v20, v27);
  return a1;
}

void *initializeWithTake for UserDefault(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 32);
  uint64_t v11 = *(void *)(a3 + 24);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = v10 + v13;
  uint64_t v15 = (void *)((v14 + v8) & ~v13);
  uint64_t v16 = (const void *)((v14 + v9) & ~v13);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v16, 1, v11))
  {
    if (*(_DWORD *)(v12 + 84)) {
      size_t v17 = *(void *)(v12 + 64);
    }
    else {
      size_t v17 = *(void *)(v12 + 64) + 1;
    }
    memcpy(v15, v16, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v15, v16, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  }
  return a1;
}

void **assignWithTake for UserDefault(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)a1 + v9 + 8) & ~v9;
  uint64_t v11 = ((unint64_t)a2 + v9 + 8) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 24);
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = v12 + v15;
  size_t v17 = (void *)((v16 + v10) & ~v15);
  uint64_t v18 = (void *)((v16 + v11) & ~v15);
  uint64_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v11) = v19(v17, 1, v13);
  int v20 = v19(v18, 1, v13);
  if (v11)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v17, v18, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v13);
      return a1;
    }
    int v21 = *(_DWORD *)(v14 + 84);
    size_t v22 = *(void *)(v14 + 64);
  }
  else
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v17, v18, v13);
      return a1;
    }
    size_t v24 = *(void (**)(void *, uint64_t))(v14 + 8);
    uint64_t v23 = v14 + 8;
    v24(v17, v13);
    int v21 = *(_DWORD *)(v23 + 76);
    size_t v22 = *(void *)(v23 + 56);
  }
  if (v21) {
    size_t v25 = v22;
  }
  else {
    size_t v25 = v22 + 1;
  }
  memcpy(v17, v18, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for UserDefault(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned int *)(v7 + 84);
  unsigned int v10 = v9 - 1;
  if (!v9) {
    unsigned int v10 = 0;
  }
  if (v5 <= v10) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v4 + 84);
  }
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = v11;
  }
  uint64_t v13 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v16 = *(void *)(*(void *)(v6 - 8) + 64);
  if (!v9) {
    ++v16;
  }
  if (!a2) {
    return 0;
  }
  int v17 = a2 - v12;
  if (a2 <= v12) {
    goto LABEL_31;
  }
  uint64_t v18 = v16 + ((v14 + v15 + ((v13 + 8) & ~v13)) & ~v15);
  char v19 = 8 * v18;
  if (v18 > 3) {
    goto LABEL_14;
  }
  unsigned int v21 = ((v17 + ~(-1 << v19)) >> v19) + 1;
  if (HIWORD(v21))
  {
    int v20 = *(_DWORD *)((char *)a1 + v18);
    if (v20) {
      goto LABEL_21;
    }
LABEL_31:
    if ((v11 & 0x80000000) == 0)
    {
      uint64_t v25 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v25) = -1;
      }
      return (v25 + 1);
    }
    uint64_t v27 = ((unint64_t)a1 + v13 + 8) & ~v13;
    if (v5 == v12)
    {
      uint64_t v28 = *(uint64_t (**)(uint64_t))(v4 + 48);
      return v28(v27);
    }
    if (v9 >= 2)
    {
      unsigned int v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((v27 + v14 + v15) & ~v15, v9, v6);
      if (v29 >= 2) {
        return v29 - 1;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  if (v21 > 0xFF)
  {
    int v20 = *(unsigned __int16 *)((char *)a1 + v18);
    if (*(unsigned __int16 *)((char *)a1 + v18)) {
      goto LABEL_21;
    }
    goto LABEL_31;
  }
  if (v21 < 2) {
    goto LABEL_31;
  }
LABEL_14:
  int v20 = *((unsigned __int8 *)a1 + v18);
  if (!*((unsigned char *)a1 + v18)) {
    goto LABEL_31;
  }
LABEL_21:
  int v22 = (v20 - 1) << v19;
  if (v18 > 3) {
    int v22 = 0;
  }
  if (v18)
  {
    if (v18 <= 3) {
      int v23 = v18;
    }
    else {
      int v23 = 4;
    }
    switch(v23)
    {
      case 2:
        int v24 = *a1;
        break;
      case 3:
        int v24 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v24 = *(_DWORD *)a1;
        break;
      default:
        int v24 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v24 = 0;
  }
  return v12 + (v24 | v22) + 1;
}

void storeEnumTagSinglePayload for UserDefault(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v13 = *(void *)(v7 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  unsigned int v15 = v11 - 1;
  if (!v11) {
    unsigned int v15 = 0;
  }
  if (v8 <= v15) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v7 + 84);
  }
  if (v16 <= 0x7FFFFFFF) {
    unsigned int v17 = 0x7FFFFFFF;
  }
  else {
    unsigned int v17 = v16;
  }
  if (v11) {
    uint64_t v18 = *(void *)(*(void *)(v9 - 8) + 64);
  }
  else {
    uint64_t v18 = *(void *)(*(void *)(v9 - 8) + 64) + 1;
  }
  size_t v19 = v18 + ((v13 + v14 + ((v12 + 8) & ~v12)) & ~v14);
  BOOL v20 = a3 >= v17;
  unsigned int v21 = a3 - v17;
  if (v21 == 0 || !v20)
  {
LABEL_21:
    if (v17 < a2) {
      goto LABEL_22;
    }
    goto LABEL_29;
  }
  if (v19 > 3)
  {
    int v6 = 1;
    if (v17 < a2) {
      goto LABEL_22;
    }
    goto LABEL_29;
  }
  unsigned int v22 = ((v21 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
  if (!HIWORD(v22))
  {
    if (v22 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v22 > 1;
    }
    goto LABEL_21;
  }
  int v6 = 4;
  if (v17 < a2)
  {
LABEL_22:
    unsigned int v23 = ~v17 + a2;
    if (v19 < 4)
    {
      int v24 = (v23 >> (8 * v19)) + 1;
      if (v19)
      {
        int v25 = v23 & ~(-1 << (8 * v19));
        bzero(a1, v19);
        if (v19 == 3)
        {
          *(_WORD *)a1 = v25;
          a1[2] = BYTE2(v25);
        }
        else if (v19 == 2)
        {
          *(_WORD *)a1 = v25;
        }
        else
        {
          *a1 = v25;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1 = v23;
      int v24 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v19] = v24;
        return;
      case 2:
        *(_WORD *)&a1[v19] = v24;
        return;
      case 3:
        goto LABEL_56;
      case 4:
        *(_DWORD *)&a1[v19] = v24;
        return;
      default:
        return;
    }
  }
LABEL_29:
  switch(v6)
  {
    case 1:
      a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_34;
    case 2:
      *(_WORD *)&a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_34;
    case 3:
LABEL_56:
      __break(1u);
      JUMPOUT(0x1002CA15CLL);
    case 4:
      *(_DWORD *)&a1[v19] = 0;
      goto LABEL_33;
    default:
LABEL_33:
      if (a2)
      {
LABEL_34:
        if ((v16 & 0x80000000) != 0)
        {
          unint64_t v27 = (unint64_t)&a1[v12 + 8] & ~v12;
          if (v8 == v17)
          {
            uint64_t v28 = *(void (**)(unint64_t))(v7 + 56);
            v28(v27);
          }
          else if (v11 >= 2)
          {
            unint64_t v29 = (v27 + v13 + v14) & ~v14;
            uint64_t v30 = a2 + 1;
            id v31 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
            v31(v29, v30, v11, v9);
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v26 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v26 = a2 - 1;
          }
          *(void *)a1 = v26;
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for NSUserDefaults.Suite()
{
  return &type metadata for NSUserDefaults.Suite;
}

uint64_t type metadata accessor for NSUserDefaults.ValueTransformer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for NSUserDefaults.Migrator()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void **initializeBufferWithCopyOfBuffer for NSUserDefaults.Migrator(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 8) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = (char *)*a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (void **)&v9[(v6 & 0xF8 ^ 0x1F8) & (v6 + 16)];
    swift_retain();
  }
  else
  {
    uint64_t v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    unsigned int v15 = v9;
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t destroy for NSUserDefaults.Migrator(id *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = ((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void **initializeWithCopy for NSUserDefaults.Migrator(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  id v11 = v4;
  v7(v9, v10, v5);
  return a1;
}

void **assignWithCopy for NSUserDefaults.Migrator(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

void *initializeWithTake for NSUserDefaults.Migrator(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void **assignWithTake for NSUserDefaults.Migrator(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for NSUserDefaults.Migrator(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for NSUserDefaults.Migrator(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 8) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x1002CA9D8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
          BOOL v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v18 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v18 = a2 - 1;
          }
          *(void *)a1 = v18;
        }
      }
      return;
  }
}

uint64_t ObjC metadata update function for NSUserDefaults.KeyValueRegistration()
{
  return type metadata accessor for NSUserDefaults.KeyValueRegistration(0);
}

uint64_t type metadata completion function for NSUserDefaults.KeyValueRegistration()
{
  uint64_t result = type metadata accessor for NSUserDefaults.KeyValueRegistration.Identifier(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for NSUserDefaults._Observer()
{
  return self;
}

uint64_t *initializeBufferWithCopyOfBuffer for NSUserDefaults._Observer.HandlerAssociation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    size_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for NSUserDefaults._Observer.HandlerAssociation(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_release();
}

uint64_t initializeWithCopy for NSUserDefaults._Observer.HandlerAssociation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NSUserDefaults._Observer.HandlerAssociation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for NSUserDefaults._Observer.HandlerAssociation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for NSUserDefaults._Observer.HandlerAssociation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NSUserDefaults._Observer.HandlerAssociation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002CAE48);
}

uint64_t sub_1002CAE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for NSUserDefaults._Observer.HandlerAssociation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002CAF1C);
}

uint64_t sub_1002CAF1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for NSUserDefaults._Observer.HandlerAssociation(uint64_t a1)
{
  return type metadata accessor for Notice.Variant(a1, (uint64_t *)&type metadata singleton initialization cache for NSUserDefaults._Observer.HandlerAssociation);
}

uint64_t type metadata completion function for NSUserDefaults._Observer.HandlerAssociation()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void destroy for NSUserDefaults._Observer.SuiteAssociation(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 16);
}

void *initializeBufferWithCopyOfBuffer for NSUserDefaults._Observer.SuiteAssociation(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

void *assignWithCopy for NSUserDefaults._Observer.SuiteAssociation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[2];
  id v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for NSUserDefaults._Observer.SuiteAssociation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

ValueMetadata *type metadata accessor for NSUserDefaults._Observer.SuiteAssociation()
{
  return &type metadata for NSUserDefaults._Observer.SuiteAssociation;
}

uint64_t type metadata completion function for NSUserDefaults.Migrator.Error(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState();
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8);
    swift_initEnumMetadataSingleCase();
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NSUserDefaults.Migrator.Error(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for NSUserDefaults.Migrator.Error(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1002CB5E4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for NSUserDefaults.KeyValueRegistration.Identifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    unsigned int v10 = (uint64_t *)((char *)a1 + v8);
    int v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    void *v10 = *v11;
    v10[1] = v12;
    int v13 = (uint64_t *)((char *)a1 + v9);
    unsigned int v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *int v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for NSUserDefaults.KeyValueRegistration.Identifier(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for NSUserDefaults.KeyValueRegistration.Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  unsigned int v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  int v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NSUserDefaults.KeyValueRegistration.Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for NSUserDefaults.KeyValueRegistration.Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for NSUserDefaults.KeyValueRegistration.Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 24);
  int v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *int v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NSUserDefaults.KeyValueRegistration.Identifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002CBA2C);
}

uint64_t sub_1002CBA2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for NSUserDefaults.KeyValueRegistration.Identifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002CBB04);
}

uint64_t sub_1002CBB04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for NSUserDefaults.KeyValueRegistration.Identifier()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSUserDefaults._Observer.SuiteAssociation and conformance NSUserDefaults._Observer.SuiteAssociation()
{
  unint64_t result = lazy protocol witness table cache variable for type NSUserDefaults._Observer.SuiteAssociation and conformance NSUserDefaults._Observer.SuiteAssociation;
  if (!lazy protocol witness table cache variable for type NSUserDefaults._Observer.SuiteAssociation and conformance NSUserDefaults._Observer.SuiteAssociation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSUserDefaults._Observer.SuiteAssociation and conformance NSUserDefaults._Observer.SuiteAssociation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey;
  if (!lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey)
  {
    type metadata accessor for NSKeyValueChangeKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey);
  }
  return result;
}

uint64_t outlined destroy of NSUserDefaults.KeyValueRegistration.Identifier(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL partial apply for closure #1 in closure #1 in NSUserDefaults._Observer.addObserver(identifiedBy:handler:)(uint64_t *a1)
{
  return closure #1 in closure #1 in NSUserDefaults._Observer.addObserver(identifiedBy:handler:)(a1, *(void *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type NSUserDefaults.Error and conformance NSUserDefaults.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type NSUserDefaults.Error and conformance NSUserDefaults.Error;
  if (!lazy protocol witness table cache variable for type NSUserDefaults.Error and conformance NSUserDefaults.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSUserDefaults.Error and conformance NSUserDefaults.Error);
  }
  return result;
}

uint64_t outlined init with take of NSUserDefaults.KeyValueRegistration.Identifier(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *type metadata accessor for NSUserDefaults.Error()
{
  return &unk_10053E478;
}

BOOL partial apply for closure #1 in closure #1 in NSUserDefaults._Observer.removeObserver(identifiedBy:)(uint64_t *a1)
{
  return partial apply for closure #1 in closure #1 in NSUserDefaults._Observer.addObserver(identifiedBy:handler:)(a1);
}

uint64_t specialized Collection.first.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return String.subscript.getter();
  }
  else {
    return 0;
  }
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      id v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_5:
      uint64_t v6 = v5;
      type metadata accessor for UIView();
      char v7 = static NSObject.== infix(_:_:)();

      if (v7)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v3 == 1) {
        goto LABEL_18;
      }
      if (v4) {
        break;
      }
      unint64_t v4 = 5;
      while (1)
      {
        unint64_t v12 = v4 - 3;
        if (__OFADD__(v4 - 4, 1)) {
          break;
        }
        id v13 = *(id *)(a2 + 8 * v4);
        char v14 = static NSObject.== infix(_:_:)();

        if (v14) {
          goto LABEL_6;
        }
        ++v4;
        if (v12 == v3) {
          goto LABEL_18;
        }
      }
      __break(1u);
    }
    uint64_t v9 = 1;
    while (1)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      char v11 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if (v11) {
        goto LABEL_6;
      }
      ++v9;
      if (v10 == v3) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  char v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  id v13;
  char v14;

  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      id v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_5:
      uint64_t v6 = v5;
      type metadata accessor for SyncedLyricsLineView();
      char v7 = static NSObject.== infix(_:_:)();

      if (v7)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v3 == 1) {
        goto LABEL_18;
      }
      if (v4) {
        break;
      }
      unint64_t v4 = 5;
      while (1)
      {
        unint64_t v12 = v4 - 3;
        if (__OFADD__(v4 - 4, 1)) {
          break;
        }
        id v13 = *(id *)(a2 + 8 * v4);
        char v14 = static NSObject.== infix(_:_:)();

        if (v14) {
          goto LABEL_6;
        }
        ++v4;
        if (v12 == v3) {
          goto LABEL_18;
        }
      }
      __break(1u);
    }
    uint64_t v9 = 1;
    while (1)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      char v11 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if (v11) {
        goto LABEL_6;
      }
      ++v9;
      if (v10 == v3) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

void one-time initialization function for httpOnly()
{
  static URL.ITMSSchemes.httpOnly = (uint64_t)&outlined read-only object #0 of one-time initialization function for httpOnly;
}

void one-time initialization function for httpsOnly()
{
  static URL.ITMSSchemes.httpsOnly = (uint64_t)&outlined read-only object #0 of one-time initialization function for httpsOnly;
}

void one-time initialization function for standard()
{
  static URL.ITMSSchemes.standard = &outlined read-only object #0 of one-time initialization function for standard;
}

uint64_t one-time initialization function for http()
{
  if (one-time initialization token for standard != -1) {
    swift_once();
  }
  uint64_t v0 = static URL.ITMSSchemes.standard;
  if (one-time initialization token for httpOnly != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t result = _sSa6append10contentsOfyqd__n_t7ElementQyd__RszSTRd__lFSS_SaySSGTg5_0(v1);
  static URL.ITMSSchemes.http = (uint64_t)v0;
  return result;
}

uint64_t one-time initialization function for https()
{
  if (one-time initialization token for standard != -1) {
    swift_once();
  }
  uint64_t v0 = (char *)static URL.ITMSSchemes.standard;
  int64_t v1 = *((void *)static URL.ITMSSchemes.standard + 2);
  if (v1)
  {
    swift_bridgeObjectRetain();
    _ss15ContiguousArrayV16_createNewBuffer14bufferIsUnique15minimumCapacity13growForAppendySb_SiSbtFSS_Tg5_0(0, v1, 0);
    uint64_t v2 = (uint64_t *)(v0 + 40);
    do
    {
      uint64_t v9 = *(v2 - 1);
      uint64_t v10 = *v2;
      swift_bridgeObjectRetain_n();
      v3._uint64_t countAndFlagsBits = 115;
      v3._object = (void *)0xE100000000000000;
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      unint64_t v5 = _swiftEmptyArrayStorage[2];
      unint64_t v4 = _swiftEmptyArrayStorage[3];
      if (v5 >= v4 >> 1) {
        _ss15ContiguousArrayV16_createNewBuffer14bufferIsUnique15minimumCapacity13growForAppendySb_SiSbtFSS_Tg5_0((char *)(v4 > 1), v5 + 1, 1);
      }
      v2 += 2;
      _swiftEmptyArrayStorage[2] = v5 + 1;
      uint64_t v6 = &_swiftEmptyArrayStorage[2 * v5];
      v6[4] = v9;
      v6[5] = v10;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for httpsOnly != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = swift_bridgeObjectRetain();
  _sSa6append10contentsOfyqd__n_t7ElementQyd__RszSTRd__lFSS_SaySSGTg5_0(v7);
  uint64_t result = swift_bridgeObjectRelease();
  static URL.ITMSSchemes.https = (uint64_t)_swiftEmptyArrayStorage;
  return result;
}

uint64_t URL.replacingSchemeWithHTTP.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&_s10Foundation13URLComponentsVSgMD_0);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URLComponents();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v4, &_s10Foundation13URLComponentsVSgMD_0);
LABEL_9:
    uint64_t v13 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  uint64_t v9 = URLComponents.scheme.getter();
  if (!v10)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    goto LABEL_9;
  }
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (one-time initialization token for https != -1) {
    swift_once();
  }
  if (specialized Sequence<>.contains(_:)(v11, v12, (void *)static URL.ITMSSchemes.https))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for http != -1) {
      swift_once();
    }
    char v15 = specialized Sequence<>.contains(_:)(v11, v12, (void *)static URL.ITMSSchemes.http);
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0) {
      goto LABEL_14;
    }
  }
  URLComponents.scheme.setter();
LABEL_14:
  URLComponents.url.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Void __swiftcall URLComponents.appendPath(_:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v3 = URLComponents.path.getter();
  uint64_t v5 = specialized BidirectionalCollection.last.getter(v3, v4);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (v7)
  {
    if (v5 == 47 && v7 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      uint64_t v9 = (void (*)(void *, void))URLComponents.path.modify();
      v10._uint64_t countAndFlagsBits = countAndFlagsBits;
      v10._object = object;
      String.append(_:)(v10);
      v9(v18, 0);
      return;
    }
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized Collection.first.getter(countAndFlagsBits, (unint64_t)object);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  if (v13)
  {
    if (v11 == 47 && v13 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_12:
      swift_bridgeObjectRetain();
      goto LABEL_14;
    }
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_12;
    }
  }
  v18[0] = 47;
  v18[1] = 0xE100000000000000;
  v15._uint64_t countAndFlagsBits = countAndFlagsBits;
  v15._object = object;
  String.append(_:)(v15);
  uint64_t countAndFlagsBits = 47;
  object = (void *)0xE100000000000000;
LABEL_14:
  uint64_t v16 = (void (*)(void *, void))URLComponents.path.modify();
  v17._uint64_t countAndFlagsBits = countAndFlagsBits;
  v17._object = object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v16(v18, 0);
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  String.index(before:)();
  return String.subscript.getter();
}

Swift::Void __swiftcall URLComponents.appendQueryItems(_:)(Swift::OpaquePointer a1)
{
  if (URLComponents.queryItems.getter())
  {
    size_t v1 = swift_bridgeObjectRetain();
    _sSa6append10contentsOfyqd__n_t7ElementQyd__RszSTRd__lF10Foundation12URLQueryItemV_SayAGGTg5_0(v1);
  }
  else
  {
    swift_bridgeObjectRetain();
  }

  URLComponents.queryItems.setter();
}

BOOL URL.isSafariScriptURL.getter()
{
  uint64_t v0 = type metadata accessor for URLQueryItem();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  unint64_t v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v34 - v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLQueryItem?);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&_s10Foundation13URLComponentsVSgMD_0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URLComponents();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v12, &_s10Foundation13URLComponentsVSgMD_0);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  uint64_t v17 = URLComponents.queryItems.getter();
  if (!v17)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    return 0;
  }
  long long v39 = v16;
  uint64_t v18 = *(void *)(v17 + 16);
  if (!v18)
  {
    uint64_t v31 = 1;
    NSString v32 = v39;
    goto LABEL_24;
  }
  uint64_t v35 = v14;
  uint64_t v36 = v13;
  objc_super v37 = v9;
  uint64_t v38 = v1;
  unsigned int v21 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
  uint64_t v20 = v1 + 16;
  unint64_t v19 = v21;
  unint64_t v22 = v17 + ((*(unsigned __int8 *)(v20 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 64));
  unsigned int v23 = (void (**)(char *, uint64_t))(v20 - 8);
  uint64_t v43 = *(void *)(v20 + 56);
  uint64_t v34 = v17;
  swift_bridgeObjectRetain();
  uint64_t v42 = (v20 - 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v41 = "registeredSuites";
  unint64_t v40 = 0x8000000100471F00;
  while (1)
  {
    v19(v6, v22, v0);
    if (URLQueryItem.name.getter() == 0x6E6F69746361 && v25 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      v19(v4, (unint64_t)v6, v0);
    }
    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v19(v4, (unint64_t)v6, v0);
      if ((v26 & 1) == 0) {
        goto LABEL_6;
      }
    }
    uint64_t v27 = URLQueryItem.value.getter();
    if (!v28)
    {
LABEL_6:
      int v24 = *v23;
      (*v23)(v4, v0);
      goto LABEL_7;
    }
    if (v27 == 0xD000000000000016 && v28 == v40) {
      break;
    }
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    int v24 = *v23;
    (*v23)(v4, v0);
    if (v29) {
      goto LABEL_22;
    }
LABEL_7:
    v24(v6, v0);
    v22 += v43;
    if (!--v18)
    {
      swift_bridgeObjectRelease();
      uint64_t v31 = 1;
      uint64_t v9 = v37;
      uint64_t v1 = v38;
      goto LABEL_23;
    }
  }
  swift_bridgeObjectRelease();
  (*v23)(v4, v0);
LABEL_22:
  swift_bridgeObjectRelease();
  uint64_t v9 = v37;
  uint64_t v1 = v38;
  (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v37, v6, v0);
  uint64_t v31 = 0;
LABEL_23:
  uint64_t v14 = v35;
  uint64_t v13 = v36;
  NSString v32 = v39;
LABEL_24:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v9, v31, 1, v0);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v32, v13);
  swift_bridgeObjectRelease();
  BOOL v30 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v9, 1, v0) != 1;
  outlined destroy of TaskPriority?((uint64_t)v9, &demangling cache variable for type metadata for URLQueryItem?);
  return v30;
}

ValueMetadata *type metadata accessor for URL.ITMSSchemes()
{
  return &type metadata for URL.ITMSSchemes;
}

char *_ss15ContiguousArrayV16_createNewBuffer14bufferIsUnique15minimumCapacity13growForAppendySb_SiSbtFSS_Tg5_0(char *a1, int64_t a2, char a3)
{
  uint64_t result = _ss22_ContiguousArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

char *_ss22_ContiguousArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCySSGMD_0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

unint64_t type metadata accessor for UIView()
{
  unint64_t result = lazy cache variable for type metadata for UIView;
  if (!lazy cache variable for type metadata for UIView)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIView);
  }
  return result;
}

const char *Feature.MediaPlayer.domain.getter()
{
  return "MediaPlayer";
}

const char *Feature.MediaPlayer.feature.getter(char a1)
{
  unint64_t result = "image_decoding";
  switch(a1)
  {
    case 1:
      unint64_t result = "UpgradeOnPlay";
      break;
    case 2:
      unint64_t result = "QueueFA";
      break;
    case 3:
      unint64_t result = "RSuntory";
      break;
    default:
      return result;
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance Feature.MediaPlayer()
{
  unint64_t result = "image_decoding";
  switch(*v0)
  {
    case 1:
      unint64_t result = "UpgradeOnPlay";
      break;
    case 2:
      unint64_t result = "QueueFA";
      break;
    case 3:
      unint64_t result = "RSuntory";
      break;
    default:
      return result;
  }
  return result;
}

const char *Feature.MediaControls.domain.getter()
{
  return "MediaControls";
}

const char *Feature.MediaControls.feature.getter()
{
  return "NewVolumeControlsMusic";
}

const char *Feature.MusicKit.domain.getter()
{
  return "MusicKit";
}

const char *Feature.MusicKit.feature.getter()
{
  return "yuma";
}

const char *Feature.MediaRemote.domain.getter()
{
  return "MediaRemote";
}

const char *Feature.MediaRemote.feature.getter()
{
  return "cayenne_music_bottom_player_routing";
}

unint64_t lazy protocol witness table accessor for type Feature.MediaControls and conformance Feature.MediaControls()
{
  unint64_t result = lazy protocol witness table cache variable for type Feature.MediaControls and conformance Feature.MediaControls;
  if (!lazy protocol witness table cache variable for type Feature.MediaControls and conformance Feature.MediaControls)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Feature.MediaControls and conformance Feature.MediaControls);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Feature.MusicKit and conformance Feature.MusicKit()
{
  unint64_t result = lazy protocol witness table cache variable for type Feature.MusicKit and conformance Feature.MusicKit;
  if (!lazy protocol witness table cache variable for type Feature.MusicKit and conformance Feature.MusicKit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Feature.MusicKit and conformance Feature.MusicKit);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Feature.MediaRemote and conformance Feature.MediaRemote()
{
  unint64_t result = lazy protocol witness table cache variable for type Feature.MediaRemote and conformance Feature.MediaRemote;
  if (!lazy protocol witness table cache variable for type Feature.MediaRemote and conformance Feature.MediaRemote)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Feature.MediaRemote and conformance Feature.MediaRemote);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Feature.MediaPlayer(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002CD6A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Feature.MediaPlayer()
{
  return &type metadata for Feature.MediaPlayer;
}

ValueMetadata *type metadata accessor for Feature.MediaControls()
{
  return &type metadata for Feature.MediaControls;
}

ValueMetadata *type metadata accessor for Feature.MusicKit()
{
  return &type metadata for Feature.MusicKit;
}

unsigned char *storeEnumTagSinglePayload for Feature.MediaControls(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1002CD798);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Feature.MediaRemote()
{
  return &type metadata for Feature.MediaRemote;
}

const char *Feature.Music.domain.getter()
{
  return "Music";
}

const char *Feature.Music.feature.getter(char a1)
{
  unint64_t result = "potluck";
  switch(a1)
  {
    case 1:
      unint64_t result = "tails";
      break;
    case 2:
      unint64_t result = "razzmatazz";
      break;
    case 3:
      unint64_t result = "bilby";
      break;
    case 4:
      unint64_t result = "symphony";
      break;
    case 5:
      unint64_t result = "qulh";
      break;
    case 6:
      unint64_t result = "inline_large_title";
      break;
    case 7:
      unint64_t result = "image_playground_covers";
      break;
    case 8:
      unint64_t result = "in_with_the_new";
      break;
    default:
      return result;
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance Feature.Music()
{
  return Feature.Music.feature.getter(*v0);
}

uint64_t getEnumTagSinglePayload for Feature.Music(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Feature.Music(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002CDAA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Feature.Music()
{
  return &type metadata for Feature.Music;
}

uint64_t Feature.UIP.isEnabled.getter(char a1)
{
  if (a1)
  {
    unsigned int v6 = &unk_10053E918;
    unint64_t v7 = lazy protocol witness table accessor for type Feature.UIP.Music and conformance Feature.UIP.Music();
    v5[0] = 1;
    char v3 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v5);
    if ((v3 & 1) == 0)
    {
      char v2 = 0;
      return v2 & 1;
    }
    unsigned int v6 = &unk_10053E888;
    unint64_t v7 = lazy protocol witness table accessor for type Feature.UIP.UIKit and conformance Feature.UIP.UIKit();
    v5[0] = 1;
    goto LABEL_6;
  }
  unsigned int v6 = &unk_10053E918;
  unint64_t v7 = lazy protocol witness table accessor for type Feature.UIP.Music and conformance Feature.UIP.Music();
  v5[0] = 0;
  char v1 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v5);
  char v2 = 0;
  if (v1)
  {
    unsigned int v6 = &unk_10053E888;
    unint64_t v7 = lazy protocol witness table accessor for type Feature.UIP.UIKit and conformance Feature.UIP.UIKit();
    v5[0] = 0;
LABEL_6:
    char v2 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v5);
  }
  return v2 & 1;
}

unint64_t lazy protocol witness table accessor for type Feature.UIP.Music and conformance Feature.UIP.Music()
{
  unint64_t result = lazy protocol witness table cache variable for type Feature.UIP.Music and conformance Feature.UIP.Music;
  if (!lazy protocol witness table cache variable for type Feature.UIP.Music and conformance Feature.UIP.Music)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Feature.UIP.Music and conformance Feature.UIP.Music);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Feature.UIP.Music and conformance Feature.UIP.Music;
  if (!lazy protocol witness table cache variable for type Feature.UIP.Music and conformance Feature.UIP.Music)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Feature.UIP.Music and conformance Feature.UIP.Music);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Feature.UIP.UIKit and conformance Feature.UIP.UIKit()
{
  unint64_t result = lazy protocol witness table cache variable for type Feature.UIP.UIKit and conformance Feature.UIP.UIKit;
  if (!lazy protocol witness table cache variable for type Feature.UIP.UIKit and conformance Feature.UIP.UIKit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Feature.UIP.UIKit and conformance Feature.UIP.UIKit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Feature.UIP.UIKit and conformance Feature.UIP.UIKit;
  if (!lazy protocol witness table cache variable for type Feature.UIP.UIKit and conformance Feature.UIP.UIKit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Feature.UIP.UIKit and conformance Feature.UIP.UIKit);
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance Feature.UIP.Music()
{
  return "Music";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance Feature.UIP.Music()
{
  if (*v0) {
    return "uip_fluid_transitions";
  }
  else {
    return "uip_floating_tab_bar";
  }
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance Feature.UIP.UIKit()
{
  return "UIKit";
}

unint64_t lazy protocol witness table accessor for type Feature.UIP and conformance Feature.UIP()
{
  unint64_t result = lazy protocol witness table cache variable for type Feature.UIP and conformance Feature.UIP;
  if (!lazy protocol witness table cache variable for type Feature.UIP and conformance Feature.UIP)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Feature.UIP and conformance Feature.UIP);
  }
  return result;
}

ValueMetadata *type metadata accessor for Feature.UIP()
{
  return &type metadata for Feature.UIP;
}

void *type metadata accessor for Feature.UIP.UIKit()
{
  return &unk_10053E888;
}

unsigned char *storeEnumTagSinglePayload for Feature.UIP(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002CDE00);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Feature.UIP.Music()
{
  return &unk_10053E918;
}

uint64_t FeatureFlagsKey.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  v6[3] = a1;
  v6[4] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v6);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(boxed_opaque_existential_1, v2, v3);
  LOBYTE(v3) = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v6);
  return v3 & 1;
}

ValueMetadata *type metadata accessor for Feature()
{
  return &type metadata for Feature;
}

uint64_t GestureRecognizerHandler.__allocating_init<A>(gestureRecognizer:handler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  GestureRecognizerHandler.init<A>(gestureRecognizer:handler:)(a1, a2, a3, a4);
  return v8;
}

uint64_t GestureRecognizerHandler.init<A>(gestureRecognizer:handler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a4;
  v9[3] = a2;
  v9[4] = a3;
  *(void *)(v4 + 24) = partial apply for closure #1 in ControlEventHandler.init<A>(control:events:handler:);
  *(void *)(v4 + 32) = v9;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    int64_t v11 = (void *)Strong;
    swift_retain();
    [v11 addTarget:v4 action:"handleActionFromGestureRecognizer:"];

    swift_release();
  }

  return v4;
}

uint64_t sub_1002CE0B0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t GestureRecognizerHandler.deinit()
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = Strong;
    [Strong removeTarget:v0 action:"handleActionFromGestureRecognizer:"];
  }
  swift_unknownObjectWeakDestroy();
  swift_release();
  return v0;
}

uint64_t GestureRecognizerHandler.__deallocating_deinit()
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = Strong;
    [Strong removeTarget:v0 action:"handleActionFromGestureRecognizer:"];
  }
  swift_unknownObjectWeakDestroy();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t one-time initialization function for GestureRecognitionHandling()
{
  uint64_t result = swift_slowAlloc();
  static AssociatedKeys.GestureRecognitionHandling = result;
  return result;
}

uint64_t UIGestureRecognizerHandling<>.addHandler(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (one-time initialization token for GestureRecognitionHandling != -1) {
    swift_once();
  }
  if (objc_getAssociatedObject(v4, (const void *)static AssociatedKeys.GestureRecognitionHandling))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v16, 0, sizeof(v16));
  }
  _sypSgWOb_1((uint64_t)v16, (uint64_t)v17);
  if (v17[3])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GestureRecognizerHandler]);
    if (swift_dynamicCast())
    {
      uint64_t v8 = v15;
      goto LABEL_11;
    }
  }
  else
  {
    _sypSgWOh_0((uint64_t)v17);
  }
  uint64_t v8 = _swiftEmptyArrayStorage;
LABEL_11:
  v17[0] = v8;
  type metadata accessor for GestureRecognizerHandler();
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a3;
  v9[3] = a1;
  v9[4] = a2;
  uint64_t v10 = swift_allocObject();
  id v11 = v4;
  swift_retain();
  GestureRecognizerHandler.init<A>(gestureRecognizer:handler:)(v11, (uint64_t)partial apply for closure #1 in UIGestureRecognizerHandling<>.addHandler(_:), (uint64_t)v9, a3);
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v17[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v17[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v12 = (const void *)static AssociatedKeys.GestureRecognitionHandling;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_setAssociatedObject(v11, v12, isa, (void *)1);

  return v10;
}

uint64_t type metadata accessor for GestureRecognizerHandler()
{
  return self;
}

uint64_t closure #1 in UIGestureRecognizerHandling<>.addHandler(_:)(void *a1, void (*a2)(void *, id), uint64_t a3, uint64_t a4)
{
  v5[3] = a4;
  v5[4] = &protocol witness table for UIGestureRecognizer;
  v5[0] = a1;
  a2(v5, [a1 state]);
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v5);
}

uint64_t partial apply for closure #1 in UIGestureRecognizerHandling<>.addHandler(_:)(void *a1)
{
  return closure #1 in UIGestureRecognizerHandling<>.addHandler(_:)(a1, *(void (**)(void *, id))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 16));
}

void UIGestureRecognizerHandling<>.removeHandler(_:)(uint64_t a1)
{
  if (one-time initialization token for GestureRecognitionHandling != -1) {
    swift_once();
  }
  if (objc_getAssociatedObject(v1, (const void *)static AssociatedKeys.GestureRecognitionHandling))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  _sypSgWOb_1((uint64_t)v7, (uint64_t)v8);
  if (!v9)
  {
    _sypSgWOh_0((uint64_t)v8);
    goto LABEL_10;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [GestureRecognizerHandler]);
  if (!swift_dynamicCast())
  {
LABEL_10:
    uint64_t v3 = _swiftEmptyArrayStorage;
    goto LABEL_11;
  }
  uint64_t v3 = v6;
LABEL_11:
  swift_retain();
  specialized _ArrayProtocol.filter(_:)((unint64_t)v3, a1);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = (const void *)static AssociatedKeys.GestureRecognitionHandling;
  type metadata accessor for GestureRecognizerHandler();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_setAssociatedObject(v1, v4, isa, (void *)1);
}

uint64_t protocol witness for UIGestureRecognizerHandling.addHandler(_:) in conformance UIGestureRecognizer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UIGestureRecognizerHandling<>.addHandler(_:)(a1, a2, a3);
}

void protocol witness for UIGestureRecognizerHandling.removeHandler(_:) in conformance UIGestureRecognizer(uint64_t a1)
{
}

void *specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_16:
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
LABEL_3:
      for (unint64_t i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v7 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_13:
            __break(1u);
            return _swiftEmptyArrayStorage;
          }
        }
        else
        {
          if (i >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_16;
          }
          uint64_t v6 = *(void *)(a1 + 8 * i + 32);
          swift_retain();
          unint64_t v7 = i + 1;
          if (__OFADD__(i, 1)) {
            goto LABEL_13;
          }
        }
        if (v6 == a2)
        {
          swift_release();
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        if (v7 == v4) {
          return _swiftEmptyArrayStorage;
        }
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

double KeyboardAvoidance.beginFrame.getter()
{
  return *(double *)v0;
}

double KeyboardAvoidance.endFrame.getter()
{
  return *(double *)(v0 + 32);
}

double KeyboardAvoidance.animationDuration.getter()
{
  return *(double *)(v0 + 64);
}

uint64_t KeyboardAvoidance.animationCurve.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t KeyboardAvoidance.local.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t KeyboardAvoidance.animationOptions.getter()
{
  uint64_t result = *(void *)(v0 + 72) << 16;
  if (result < 0) {
    __break(1u);
  }
  return result;
}

uint64_t KeyboardAvoidance.init(notification:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  specialized KeyboardAvoidance.init(notification:)(a1, (uint64_t)v4);
  return outlined init with take of PresentationSource?((uint64_t)v4, a2, &demangling cache variable for type metadata for KeyboardAvoidance?);
}

void KeyboardAvoidance.animate(alongsideKeyboard:completion:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(v4 + 72) << 16;
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v13 = a1;
    uint64_t v14 = a2;
    uint64_t v9 = _NSConcreteStackBlock;
    uint64_t v10 = 1107296256;
    id v11 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v12 = &block_descriptor_41;
    uint64_t v8 = _Block_copy(&v9);
    swift_retain();
    swift_release();
    if (a3)
    {
      uint64_t v13 = a3;
      uint64_t v14 = a4;
      uint64_t v9 = _NSConcreteStackBlock;
      uint64_t v10 = 1107296256;
      id v11 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
      uint64_t v12 = &block_descriptor_3_7;
      a3 = _Block_copy(&v9);
      swift_retain();
      swift_release();
    }
    [self animateWithDuration:v5 delay:v8 options:a3 animations:*(double *)(v4 + 64) completion:0.0];
    _Block_release(a3);
    _Block_release(v8);
  }
}

void KeyboardAvoidance.animate(alongsideKeyboard:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = self;
  uint64_t v6 = *(void *)(v2 + 72) << 16;
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = (void *)v5;
    double v8 = *(double *)(v2 + 64);
    v10[4] = a1;
    v10[5] = a2;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v10[3] = &block_descriptor_6_3;
    uint64_t v9 = _Block_copy(v10);
    swift_retain();
    swift_release();
    [v7 animateWithDuration:v6 delay:v9 options:0 animations:v8 completion:0.0];
    _Block_release(v9);
  }
}

Swift::Void __swiftcall KeyboardAvoidance.animateContentScrollView(in:)(UIViewController in)
{
  uint64_t v3 = swift_allocObject();
  long long v4 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v3 + 64) = v4;
  *(_OWORD *)(v3 + 80) = *(_OWORD *)(v1 + 64);
  *(unsigned char *)(v3 + 96) = *(unsigned char *)(v1 + 80);
  long long v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v3 + 32) = v5;
  *(UIViewController *)(v3 + 104) = in;
  uint64_t v6 = self;
  uint64_t v7 = *(void *)(v1 + 72) << 16;
  if (v7 < 0)
  {
    __break(1u);
  }
  else
  {
    double v8 = (void *)v6;
    double v9 = *(double *)(v1 + 64);
    void v12[4] = partial apply for closure #1 in KeyboardAvoidance.animateContentScrollView(in:);
    v12[5] = v3;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    void v12[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    unint64_t v12[3] = &block_descriptor_9_4;
    uint64_t v10 = _Block_copy(v12);
    id v11 = in.super.super.isa;
    swift_retain();
    swift_release();
    [v8 animateWithDuration:v7 delay:v10 options:0 animations:v9 completion:0.0];
    _Block_release(v10);
    swift_release();
  }
}

Swift::Void __swiftcall KeyboardAvoidance.applyAdditionalSafeAreaInsets(to:)(UIViewController to)
{
  if ([(objc_class *)to.super.super.isa isViewLoaded])
  {
    id v3 = [(objc_class *)to.super.super.isa view];
    if (v3)
    {
      long long v4 = v3;
      objc_msgSend(v3, "convertRect:fromView:", 0, v1[4], v1[5], v1[6], v1[7]);
      CGFloat v6 = v5;
      CGFloat v8 = v7;
      CGFloat v10 = v9;
      CGFloat v12 = v11;
      id v13 = [(objc_class *)to.super.super.isa view];
      if (v13)
      {
        uint64_t v14 = v13;
        [v13 safeAreaInsets];
        double v16 = v15;

        [(objc_class *)to.super.super.isa additionalSafeAreaInsets];
        double v18 = v16 - v17;
        [v4 frame];
        double Height = CGRectGetHeight(v23);
        v24.origin.x = v6;
        v24.origin.y = v8;
        v24.size.width = v10;
        v24.size.height = v12;
        double MinY = CGRectGetMinY(v24);

        if (Height - MinY - v18 < 0.0) {
          double v21 = 0.0;
        }
        else {
          double v21 = Height - MinY - v18;
        }
        -[objc_class setAdditionalSafeAreaInsets:](to.super.super.isa, "setAdditionalSafeAreaInsets:", 0.0, 0.0, v21, 0.0);
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void KeyboardAvoidance.additionalSafeAreaInsets(for:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v5 = 0.0;
  if (![a1 isViewLoaded]
    || (id v6 = [a1 view]) == 0)
  {
    char v24 = 1;
LABEL_8:
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(double *)(a2 + 16) = v5;
    *(void *)(a2 + 24) = 0;
    *(unsigned char *)(a2 + 32) = v24;
    return;
  }
  double v7 = v6;
  objc_msgSend(v6, "convertRect:fromView:", 0, v2[4], v2[5], v2[6], v2[7]);
  CGFloat v9 = v8;
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  CGFloat v15 = v14;
  id v16 = [a1 view];
  if (v16)
  {
    double v17 = v16;
    [v16 safeAreaInsets];
    double v19 = v18;

    [a1 additionalSafeAreaInsets];
    double v21 = v19 - v20;
    [v7 frame];
    double Height = CGRectGetHeight(v25);
    v26.origin.x = v9;
    v26.origin.y = v11;
    v26.size.width = v13;
    v26.size.height = v15;
    double MinY = CGRectGetMinY(v26);

    char v24 = 0;
    if (Height - MinY - v21 < 0.0) {
      double v5 = 0.0;
    }
    else {
      double v5 = Height - MinY - v21;
    }
    goto LABEL_8;
  }
  __break(1u);
}

void KeyboardAvoidance.recommendedScrollRect(in:preferredVisibleRect:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = swift_allocObject();
  specialized static KeyboardAvoidance.firstResponderFrame(in:)(a1, (uint64_t)v50);
  outlined init with take of PresentationSource?((uint64_t)v50, (uint64_t)v53, &demangling cache variable for type metadata for CGRect?);
  if (v54 == 1)
  {
    swift_deallocUninitializedObject();
LABEL_12:
    char v38 = 1;
    CGFloat x = 0.0;
    CGFloat v34 = 0.0;
    CGFloat width = 0.0;
    double v39 = 0.0;
    goto LABEL_13;
  }
  long long v8 = v53[1];
  *(_OWORD *)(v7 + 16) = v53[0];
  *(_OWORD *)(v7 + 32) = v8;
  id v9 = [a1 contentScrollViewForEdge:1];
  if (!v9) {
    goto LABEL_11;
  }
  double v10 = v9;
  id v11 = [a1 view];
  if (v11)
  {
    double v12 = v11;
    id v13 = [v11 window];

    if (!v13
      || (id v14 = [v13 windowScene], v13, !v14)
      || (id v15 = [v14 screen], v14, !v15))
    {
      swift_release();

      goto LABEL_12;
    }
    *(void *)(v7 + 16) = 0;
    uint64_t v16 = swift_allocObject();
    [v10 bounds];
    CGFloat v18 = v17;
    double v20 = v19;
    CGFloat v22 = v21;
    *(double *)(v16 + 16) = v17;
    *(double *)(v16 + 24) = v19;
    *(double *)(v16 + 32) = v21;
    id v23 = [v15 coordinateSpace];
    double v24 = v3[4];
    double v25 = v3[5];
    double v26 = v3[6];
    double v27 = v3[7];
    id v28 = v10;
    objc_msgSend(v23, "convertRect:toCoordinateSpace:", v28, v24, v25, v26, v27);
    double v30 = v29;

    swift_unknownObjectRelease();
    double v31 = v30 - v20;
    *(double *)(v16 + 40) = v30 - v20;
    v55.origin.CGFloat x = v18;
    v55.origin.CGFloat y = v20;
    v55.size.CGFloat width = v22;
    v55.size.height = v30 - v20;
    double Height = CGRectGetHeight(v55);
    if (CGRectGetHeight(*(CGRect *)(v7 + 16)) > Height)
    {
      CGFloat x = *(double *)(v7 + 16);
      CGFloat v34 = *(double *)(v7 + 24);
      CGFloat width = *(double *)(v7 + 32);
      double v36 = *(double *)(v7 + 40);
      v56.origin.CGFloat x = v18;
      v56.origin.CGFloat y = v20;
      v56.size.CGFloat width = v22;
      v56.size.height = v31;
      double v37 = CGRectGetHeight(v56);
      swift_release();
      swift_release();

      char v38 = 0;
      double v39 = v36 - v37;
LABEL_13:
      *(CGFloat *)a3 = x;
      *(CGFloat *)(a3 + 8) = v34;
      *(CGFloat *)(a3 + 16) = width;
      *(double *)(a3 + 24) = v39;
      *(unsigned char *)(a3 + 32) = v38;
      return;
    }
    outlined init with take of PresentationSource?(a2, (uint64_t)&v51, &demangling cache variable for type metadata for CGRect?);
    if ((v52 & 1) == 0)
    {
      CGFloat y = v51.origin.y;
      CGRect v58 = CGRectUnion(*(CGRect *)(v7 + 16), v51);
      CGFloat x = v58.origin.x;
      CGFloat v34 = v58.origin.y;
      CGFloat width = v58.size.width;
      double v39 = v58.size.height;
      v58.origin.CGFloat x = v18;
      v58.origin.CGFloat y = v20;
      v58.size.CGFloat width = v22;
      v58.size.height = v31;
      double v49 = CGRectGetHeight(v58);
      v59.origin.CGFloat x = x;
      v59.origin.CGFloat y = v34;
      v59.size.CGFloat width = width;
      v59.size.height = v39;
      if (CGRectGetHeight(v59) <= v49)
      {
        v60.origin.CGFloat x = v18;
        v60.origin.CGFloat y = v20;
        v60.size.CGFloat width = v22;
        v60.size.height = v31;
        double v44 = CGRectGetWidth(v60);
        v61.origin.CGFloat x = x;
        v61.origin.CGFloat y = v34;
        v61.size.CGFloat width = width;
        v61.size.height = v39;
        if (CGRectGetWidth(v61) <= v44) {
          goto LABEL_22;
        }
      }
      CGFloat v43 = y;
LABEL_21:
      CGFloat x = specialized firstResponderScrollRect #1 (from:) in KeyboardAvoidance.recommendedScrollRect(in:preferredVisibleRect:)(v7, v16, v28, v43);
      CGFloat v34 = v45;
      CGFloat width = v46;
      double v39 = v47;
LABEL_22:
      swift_release();

      swift_release();
      char v38 = 0;
      goto LABEL_13;
    }
    [v28 contentOffset];
    double v41 = v40;
    if (v40 > CGRectGetMinY(*(CGRect *)(v7 + 16))
      || (v57.origin.CGFloat x = v18,
          v57.origin.CGFloat y = v20,
          v57.size.CGFloat width = v22,
          v57.size.height = v31,
          CGFloat v42 = v41 + CGRectGetHeight(v57),
          CGRectGetMaxY(*(CGRect *)(v7 + 16)) > v42))
    {
      CGFloat v43 = v41;
      goto LABEL_21;
    }
    swift_release();

LABEL_11:
    swift_release();
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t static KeyboardAvoidance.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if (CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2)
    && CGRectEqualToRect(*(CGRect *)(a1 + 32), *(CGRect *)(a2 + 32))
    && *(double *)(a1 + 64) == *(double *)(a2 + 64)
    && *(void *)(a1 + 72) == *(void *)(a2 + 72))
  {
    char v4 = ((*(unsigned char *)(a1 + 80) & 1) == 0) ^ *(unsigned char *)(a2 + 80);
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance KeyboardAvoidance(uint64_t a1, uint64_t a2)
{
  CGFloat v2 = *(double *)(a1 + 48);
  CGFloat v15 = *(double *)(a1 + 40);
  CGFloat v16 = *(double *)(a1 + 32);
  CGFloat v4 = *(double *)(a1 + 56);
  double v3 = *(double *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 72);
  int v6 = *(unsigned __int8 *)(a1 + 80);
  CGFloat v7 = *(double *)(a2 + 32);
  CGFloat v8 = *(double *)(a2 + 40);
  CGFloat v9 = *(double *)(a2 + 48);
  CGFloat v10 = *(double *)(a2 + 56);
  double v11 = *(double *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 72);
  int v13 = *(unsigned __int8 *)(a2 + 80);
  uint64_t result = CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2);
  if (result)
  {
    v17.origin.CGFloat y = v15;
    v17.origin.CGFloat x = v16;
    v17.size.CGFloat width = v2;
    v17.size.height = v4;
    v18.origin.CGFloat x = v7;
    v18.origin.CGFloat y = v8;
    v18.size.CGFloat width = v9;
    v18.size.height = v10;
    uint64_t result = CGRectEqualToRect(v17, v18);
    if (result)
    {
      uint64_t result = 0;
      if (v3 == v11)
      {
        if (v5 == v12) {
          return v6 ^ v13 ^ 1u;
        }
        else {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t KeyboardObserver.update.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t KeyboardObserver.init(options:update:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  uint64_t v6 = swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy14MusicUtilities16KeyboardObserverV6OptionOG_AF012NotificationG0Cs5NeverOTg504_s14d11Utilities16fg24V7options6updateACShyAC6h33OG_yAG_AA0C9AvoidanceVtctcfcAA012I10D0CAGXEfU_AjF0fT0VIegyy_Tf1cn_nTf4ng_n(v6, a2, a3);
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t closure #1 in closure #1 in KeyboardObserver.init(options:update:)(uint64_t a1, uint64_t (*a2)(uint64_t, _OWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Notification();
  __chkstk_darwin(v7);
  CGFloat v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t))(v10 + 16))(v9, a1);
  specialized KeyboardAvoidance.init(notification:)((uint64_t)v9, (uint64_t)v12);
  uint64_t result = outlined init with take of PresentationSource?((uint64_t)v12, (uint64_t)v13, &demangling cache variable for type metadata for KeyboardAvoidance?);
  if (v14 != 2)
  {
    void v15[2] = v13[2];
    v15[3] = v13[3];
    v15[4] = v13[4];
    char v16 = v14;
    v15[0] = v13[0];
    v15[1] = v13[1];
    return a2(a4, v15);
  }
  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  CGFloat v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy14MusicUtilities16KeyboardObserverV6OptionOG_AF012NotificationG0Cs5NeverOTg504_s14d11Utilities16fg24V7options6updateACShyAC6h33OG_yAG_AA0C9AvoidanceVtctcfcAA012I10D0CAGXEfU_AjF0fT0VIegyy_Tf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v4)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    int64_t v6 = specialized Set.startIndex.getter(v3);
    int v8 = v7;
    char v10 = v9 & 1;
    uint64_t v24 = v3 + 56;
    uint64_t result = self;
    id v22 = result;
    uint64_t v23 = v3;
    while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(unsigned char *)(v3 + 32))
    {
      if (((*(void *)(v24 + (((unint64_t)v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_11;
      }
      if (*(_DWORD *)(v3 + 36) != v8) {
        goto LABEL_12;
      }
      uint64_t v11 = *(char *)(*(void *)(v3 + 48) + v6);
      uint64_t v12 = *(void **)*(&off_10053EC70 + v11);
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = a2;
      *(void *)(v13 + 24) = a3;
      *(unsigned char *)(v13 + 32) = v11;
      type metadata accessor for NotificationObserver();
      uint64_t v14 = swift_allocObject();
      swift_unknownObjectWeakInit();
      *(void *)(v14 + 16) = v12;
      swift_unknownObjectWeakAssign();
      *(unsigned char *)(v14 + 32) = 1;
      *(void *)(v14 + 48) = partial apply for closure #1 in closure #1 in KeyboardObserver.init(options:update:);
      *(void *)(v14 + 56) = v13;
      id v15 = v12;
      swift_retain();
      swift_retain();
      id v16 = [v22 defaultCenter];
      *(void *)(v14 + 40) = v16;
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      id v18 = v15;
      id v19 = v16;
      swift_retain();
      [v19 addObserver:v14 selector:"handleNotification:" name:v18 object:Strong];

      swift_release();
      swift_unknownObjectRelease();

      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      uint64_t v3 = v23;
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t result = (void *)specialized _NativeSet.index(after:)(v6, v8, v10 & 1, v23);
      int64_t v6 = (int64_t)result;
      int v8 = v20;
      char v10 = v21 & 1;
      if (!--v4)
      {
        outlined consume of Set<KeyboardObserver.Option>.Index._Variant((uint64_t)result, v20, v21 & 1);
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

uint64_t specialized KeyboardAvoidance.init(notification:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = Notification.userInfo.getter();
  if (!v4) {
    goto LABEL_32;
  }
  uint64_t v5 = v4;
  id v41 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  if (*(void *)(v5 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v46), (v7 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v6, (uint64_t)&v47);
  }
  else
  {
    long long v47 = 0u;
    long long v48 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v46);
  if (!*((void *)&v48 + 1)) {
    goto LABEL_29;
  }
  type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for NSValue);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_31;
  }
  [v41 CGRectValue];
  uint64_t v40 = v8;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;

  id v42 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  if (*(void *)(v5 + 16) && (unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v46), (v16 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v15, (uint64_t)&v47);
  }
  else
  {
    long long v47 = 0u;
    long long v48 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v46);
  if (!*((void *)&v48 + 1)) {
    goto LABEL_29;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_31;
  }
  [v42 CGRectValue];
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23;

  id v43 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  if (*(void *)(v5 + 16) && (unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v46), (v26 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v25, (uint64_t)&v47);
  }
  else
  {
    long long v47 = 0u;
    long long v48 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v46);
  if (!*((void *)&v48 + 1)) {
    goto LABEL_29;
  }
  type metadata accessor for UIMenu(0, &_sSo8NSNumberCML_0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  [v43 floatValue];
  float v28 = v27;

  id v44 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  if (*(void *)(v5 + 16) && (unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v46), (v30 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v29, (uint64_t)&v47);
  }
  else
  {
    long long v47 = 0u;
    long long v48 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v46);
  if (!*((void *)&v48 + 1))
  {
LABEL_29:
    swift_bridgeObjectRelease();
LABEL_30:
    _sypSgWOh_0((uint64_t)&v47);
    goto LABEL_32;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_31;
  }
  id v31 = [v44 integerValue];

  id v45 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  if (*(void *)(v5 + 16) && (unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v46), (v33 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v32, (uint64_t)&v47);
  }
  else
  {
    long long v47 = 0u;
    long long v48 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v46);
  if (!*((void *)&v48 + 1)) {
    goto LABEL_30;
  }
  if (swift_dynamicCast())
  {
    unsigned __int8 v37 = [v45 BOOLValue];

    double v38 = v28;
    uint64_t v39 = type metadata accessor for Notification();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(a1, v39);
    uint64_t v36 = v40;
    goto LABEL_33;
  }
LABEL_32:
  uint64_t v34 = type metadata accessor for Notification();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(a1, v34);
  id v31 = 0;
  uint64_t v36 = 0;
  uint64_t v10 = 0;
  unsigned __int8 v37 = 2;
  uint64_t v12 = 0;
  uint64_t v14 = 0;
  uint64_t v18 = 0;
  uint64_t v20 = 0;
  uint64_t v22 = 0;
  uint64_t v24 = 0;
  double v38 = 0.0;
LABEL_33:
  *(void *)a2 = v36;
  *(void *)(a2 + 8) = v10;
  *(void *)(a2 + 16) = v12;
  *(void *)(a2 + 24) = v14;
  *(void *)(a2 + 32) = v18;
  *(void *)(a2 + 40) = v20;
  *(void *)(a2 + 48) = v22;
  *(void *)(a2 + 56) = v24;
  *(double *)(a2 + 64) = v38;
  *(void *)(a2 + 72) = v31;
  *(unsigned char *)(a2 + 80) = v37;
  return result;
}

uint64_t block_copy_helper_39(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_39()
{
  return swift_release();
}

uint64_t sub_1002CFFE8()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in KeyboardAvoidance.animateContentScrollView(in:)()
{
  unint64_t v1 = *(void **)(v0 + 104);
  KeyboardAvoidance.applyAdditionalSafeAreaInsets(to:)((UIViewController)v1);

  specialized KeyboardAvoidance.scrollFirstResponderToVisible(in:)(v1);
}

uint64_t sub_1002D0064()
{
  return swift_deallocObject();
}

void specialized KeyboardAvoidance.scrollFirstResponderToVisible(in:)(void *a1)
{
  id v1 = [a1 contentScrollView];
  if (v1)
  {
    id v29 = v1;
    id v2 = [v1 firstResponder];
    if (v2)
    {
      uint64_t v3 = v2;
      self;
      uint64_t v4 = swift_dynamicCastObjCClass();
      if (v4)
      {
        uint64_t v5 = (void *)v4;
        id v6 = v3;
        id v7 = [v5 superview];
        if (v7)
        {
          id v8 = v7;
          type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
          while (1)
          {
            id v9 = v8;
            id v10 = v29;
            char v11 = static NSObject.== infix(_:_:)();

            if (v11) {
              break;
            }
            self;
            if (swift_dynamicCastObjCClass() || (self, swift_dynamicCastObjCClass()))
            {
              id v9 = v9;

              uint64_t v5 = v9;
              break;
            }
            id v8 = [v9 superview];

            if (!v8) {
              goto LABEL_10;
            }
          }
        }
        else
        {
LABEL_10:
          id v9 = 0;
        }
        [v5 frame];
        double v13 = v12;
        double v15 = v14;
        double v17 = v16;
        double v19 = v18;
        id v20 = [v5 superview];
        objc_msgSend(v29, "convertRect:fromView:", v20, v13, v15, v17, v19);
        double v22 = v21;
        double v24 = v23;
        double v26 = v25;
        double v28 = v27;

        objc_msgSend(v29, "scrollRectToVisible:animated:", 0, v22, v24, v26, v28);
        id v29 = v5;
      }
    }
  }
}

void specialized static KeyboardAvoidance.firstResponderFrame(in:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = 1;
  id v4 = [a1 contentScrollViewForEdge:1];
  uint64_t v5 = 0;
  if (!v4) {
    goto LABEL_7;
  }
  id v6 = v4;
  id v7 = [v4 firstResponder];
  if (!v7)
  {
LABEL_6:

    char v3 = 1;
LABEL_7:
    uint64_t v22 = 0;
    uint64_t v24 = 0;
    uint64_t v26 = 0;
    goto LABEL_8;
  }
  id v8 = v7;
  self;
  id v9 = (void *)swift_dynamicCastObjCClass();
  if (!v9)
  {

    goto LABEL_6;
  }
  id v10 = v9;
  [v9 frame];
  double v12 = v11;
  double v14 = v13;
  double v16 = v15;
  double v18 = v17;
  id v19 = [v10 superview];
  objc_msgSend(v6, "convertRect:fromView:", v19, v12, v14, v16, v18);
  uint64_t v5 = v20;
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;

  char v3 = 0;
LABEL_8:
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v22;
  *(void *)(a2 + 16) = v24;
  *(void *)(a2 + 24) = v26;
  *(unsigned char *)(a2 + 32) = v3;
}

double specialized firstResponderScrollRect #1 (from:) in KeyboardAvoidance.recommendedScrollRect(in:preferredVisibleRect:)(uint64_t a1, uint64_t a2, void *a3, CGFloat a4)
{
  swift_beginAccess();
  double v8 = *(double *)(a1 + 16);
  swift_beginAccess();
  CGRectGetHeight(*(CGRect *)(a2 + 16));
  swift_beginAccess();
  CGRectGetHeight(*(CGRect *)(a1 + 16));
  swift_beginAccess();
  if (CGRectGetMinY(*(CGRect *)(a1 + 16)) > a4)
  {
    [a3 adjustedContentInset];
    swift_beginAccess();
    CGRectGetMaxY(*(CGRect *)(a1 + 16));
  }
  return v8;
}

unint64_t lazy protocol witness table accessor for type KeyboardObserver.Option and conformance KeyboardObserver.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type KeyboardObserver.Option and conformance KeyboardObserver.Option;
  if (!lazy protocol witness table cache variable for type KeyboardObserver.Option and conformance KeyboardObserver.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyboardObserver.Option and conformance KeyboardObserver.Option);
  }
  return result;
}

__n128 __swift_memcpy81_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for KeyboardAvoidance(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 80);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyboardAvoidance(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 81) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 80) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyboardAvoidance()
{
  return &type metadata for KeyboardAvoidance;
}

uint64_t destroy for KeyboardObserver()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for KeyboardObserver(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for KeyboardObserver(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for KeyboardObserver(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for KeyboardObserver()
{
  return &type metadata for KeyboardObserver;
}

unsigned char *storeEnumTagSinglePayload for KeyboardObserver.Option(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002D08E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyboardObserver.Option()
{
  return &type metadata for KeyboardObserver.Option;
}

uint64_t sub_1002D0918()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in KeyboardObserver.init(options:update:)(uint64_t a1)
{
  return closure #1 in closure #1 in KeyboardObserver.init(options:update:)(a1, *(uint64_t (**)(uint64_t, _OWORD *))(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32));
}

uint64_t outlined consume of Set<KeyboardObserver.Option>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Signpost.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for OSSignpostID();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

id Signpost.log.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for Signpost() + 20));

  return v1;
}

uint64_t type metadata accessor for Signpost()
{
  uint64_t result = type metadata singleton initialization cache for Signpost;
  if (!type metadata singleton initialization cache for Signpost) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t Signpost.name.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Signpost() + 24));
}

uint64_t Signpost.init(name:object:log:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X4>, char *a5@<X8>)
{
  int v30 = a3;
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  id v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  double v12 = (char *)&v27 - v11;
  uint64_t v13 = type metadata accessor for OSSignpostID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  double v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v19 = (char *)&v27 - v18;
  id v20 = a4;
  swift_unknownObjectRetain();
  OSSignpostID.init(log:object:)();
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v12, v19, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
  outlined init with copy of OSSignpostID?((uint64_t)v12, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v13) == 1)
  {
    id v21 = v20;
    OSSignpostID.init(log:)();
    outlined destroy of OSSignpostID?((uint64_t)v12);
    outlined destroy of OSSignpostID?((uint64_t)v10);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(a5, v17, v13);
  }
  else
  {
    outlined destroy of OSSignpostID?((uint64_t)v12);
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v22(v17, v10, v13);
    v22(a5, v17, v13);
  }
  swift_unknownObjectRelease();
  uint64_t v23 = type metadata accessor for Signpost();
  *(void *)&a5[*(int *)(v23 + 20)] = v20;
  uint64_t v24 = &a5[*(int *)(v23 + 24)];
  uint64_t v25 = v29;
  *(void *)uint64_t v24 = v28;
  *((void *)v24 + 1) = v25;
  v24[16] = v30;
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v19, v13);
}

uint64_t Signpost.init(name:id:log:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, unsigned char *a6@<X8>)
{
  int v23 = a3;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = &v22[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = type metadata accessor for OSSignpostID();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  double v17 = &v22[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of OSSignpostID?(a4, (uint64_t)v13);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    id v18 = a5;
    OSSignpostID.init(log:)();
    outlined destroy of OSSignpostID?(a4);
    outlined destroy of OSSignpostID?((uint64_t)v13);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v15 + 32))(a6, v17, v14);
  }
  else
  {
    outlined destroy of OSSignpostID?(a4);
    id v19 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v15 + 32);
    v19(v17, v13, v14);
    v19(a6, v17, v14);
  }
  uint64_t result = type metadata accessor for Signpost();
  *(void *)&a6[*(int *)(result + 20)] = a5;
  id v21 = &a6[*(int *)(result + 24)];
  *(void *)id v21 = a1;
  *((void *)v21 + 1) = a2;
  v21[16] = v23;
  return result;
}

uint64_t outlined init with copy of OSSignpostID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of OSSignpostID?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Signpost.emit(dso:)(uint64_t a1)
{
  return Signpost.emit(dso:)(a1, (void (*)(void))&static os_signpost_type_t.event.getter);
}

uint64_t Signpost.emit(dso:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Signpost.emit(dso:_:_:)(a1, a2, a3, a4, a5, (void (*)(void))&static os_signpost_type_t.event.getter);
}

uint64_t Signpost.begin(dso:)(uint64_t a1)
{
  return Signpost.emit(dso:)(a1, (void (*)(void))&static os_signpost_type_t.begin.getter);
}

uint64_t Signpost.begin(dso:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Signpost.emit(dso:_:_:)(a1, a2, a3, a4, a5, (void (*)(void))&static os_signpost_type_t.begin.getter);
}

uint64_t Signpost.end(dso:)(uint64_t a1)
{
  return Signpost.emit(dso:)(a1, (void (*)(void))&static os_signpost_type_t.end.getter);
}

uint64_t Signpost.emit(dso:)(uint64_t a1, void (*a2)(void))
{
  a2();
  type metadata accessor for Signpost();

  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t Signpost.end(dso:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return Signpost.emit(dso:_:_:)(a1, a2, a3, a4, a5, (void (*)(void))&static os_signpost_type_t.end.getter);
}

uint64_t Signpost.emit(dso:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  return os_signpost(_:dso:log:name:signpostID:_:_:)();
}

uint64_t static Signpost.interval<A>(name:log:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v31[2] = a6;
  unint64_t v32 = a5;
  int v34 = a3;
  uint64_t v33 = a2;
  v31[1] = a7;
  uint64_t v9 = type metadata accessor for OSSignpostID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  id v18 = (char *)v31 - v17;
  uint64_t v19 = type metadata accessor for Signpost();
  __chkstk_darwin(v19);
  id v21 = (char *)v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v18, 1, 1, v9);
  outlined init with copy of OSSignpostID?((uint64_t)v18, (uint64_t)v16);
  int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, v9);
  id v23 = a4;
  id v24 = v23;
  if (v22 == 1)
  {
    id v25 = v23;
    OSSignpostID.init(log:)();
    outlined destroy of OSSignpostID?((uint64_t)v18);
    outlined destroy of OSSignpostID?((uint64_t)v16);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v21, v12, v9);
  }
  else
  {
    outlined destroy of OSSignpostID?((uint64_t)v18);
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v26(v12, v16, v9);
    v26(v21, v12, v9);
  }
  *(void *)&v21[*(int *)(v19 + 20)] = v24;
  uint64_t v27 = &v21[*(int *)(v19 + 24)];
  uint64_t v28 = v33;
  *(void *)uint64_t v27 = a1;
  *((void *)v27 + 1) = v28;
  v27[16] = v34;
  static os_signpost_type_t.begin.getter();
  uint64_t v29 = os_signpost(_:dso:log:name:signpostID:)();
  v32(v29);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return outlined destroy of Signpost((uint64_t)v21);
}

uint64_t *initializeBufferWithCopyOfBuffer for Signpost(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for OSSignpostID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    uint64_t v11 = (char *)a1 + v9;
    uint64_t v12 = (char *)a2 + v9;
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    v11[16] = v12[16];
    id v13 = v10;
  }
  return a1;
}

void destroy for Signpost(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = *(void **)(a1 + *(int *)(a2 + 20));
}

uint64_t initializeWithCopy for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
  id v12 = v9;
  return a1;
}

uint64_t assignWithCopy for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = *(void *)(v13 + 8);
  *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  return a1;
}

uint64_t initializeWithTake for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(unsigned char *)(v8 + 16) = *(unsigned char *)(v9 + 16);
  return a1;
}

uint64_t assignWithTake for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Signpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002D1830);
}

uint64_t sub_1002D1830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for Signpost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002D1904);
}

uint64_t sub_1002D1904(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for OSSignpostID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for Signpost()
{
  uint64_t result = type metadata accessor for OSSignpostID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void UnfairLock.locked<A>(_:)(void (*a1)(void))
{
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v1 + 16));
  a1();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v1 + 16));
}

uint64_t UnfairLock.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = (_DWORD *)swift_slowAlloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = 0;
  return v0;
}

uint64_t UnfairLock.init()()
{
  uint64_t v1 = (_DWORD *)swift_slowAlloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = 0;
  return v0;
}

uint64_t UnfairLock.deinit()
{
  swift_slowDealloc();
  return v0;
}

uint64_t UnfairLock.__deallocating_deinit()
{
  swift_slowDealloc();

  return swift_deallocClassInstance();
}

Swift::Void __swiftcall UnfairLock.assertOwned()()
{
  os_unfair_lock_assert_owner(*(const os_unfair_lock **)(v0 + 16));
}

Swift::Void __swiftcall UnfairLock.assertNotOwned()()
{
  os_unfair_lock_assert_not_owner(*(const os_unfair_lock **)(v0 + 16));
}

uint64_t type metadata accessor for UnfairLock()
{
  return self;
}

uint64_t WeakArray.endIndex.getter()
{
  type metadata accessor for WeakArray.WeakBox();

  return Array.endIndex.getter();
}

uint64_t type metadata accessor for WeakArray.WeakBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t WeakArray.subscript.getter()
{
  uint64_t v0 = type metadata accessor for WeakArray.WeakBox();
  Array.subscript.getter();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  (*(void (**)(unsigned char *, uint64_t))(*(void *)(v0 - 8) + 8))(v3, v0);
  return Strong;
}

{
  char v0;
  uint64_t result;

  type metadata accessor for WeakArray.WeakBox();
  type metadata accessor for Array();
  swift_getWitnessTable();
  RandomAccessCollection<>.indices.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  uint64_t v0 = Range.contains(_:)();
  uint64_t result = 0;
  if (v0) {
    return WeakArray.subscript.getter();
  }
  return result;
}

Swift::Int __swiftcall WeakArray.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t WeakArray.init(_:)(uint64_t a1, uint64_t a2)
{
  v8[5] = a1;
  v8[2] = a2;
  uint64_t v2 = type metadata accessor for Array();
  uint64_t v3 = type metadata accessor for WeakArray.WeakBox();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF_0((void (*)(char *, char *))partial apply for closure #1 in WeakArray.init(_:), (uint64_t)v8, v2, v3, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v5);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t closure #1 in WeakArray.init(_:)()
{
  return swift_unknownObjectRelease();
}

uint64_t partial apply for closure #1 in WeakArray.init(_:)()
{
  return closure #1 in WeakArray.init(_:)();
}

uint64_t WeakArray.append(_:)()
{
  return Array.append(_:)();
}

uint64_t WeakArray.remove(at:)()
{
  uint64_t v0 = type metadata accessor for WeakArray.WeakBox();
  type metadata accessor for Array();
  Array.remove(at:)();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  (*(void (**)(unsigned char *, uint64_t))(*(void *)(v0 - 8) + 8))(v3, v0);
  return Strong;
}

uint64_t WeakArray.remove(_:)()
{
  return RangeReplaceableCollection<>.removeAll(where:)();
}

Swift::Void __swiftcall WeakArray.reap()()
{
}

uint64_t partial apply for closure #1 in WeakArray.remove(_:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v3 = result;
    swift_unknownObjectRelease();
    return v3 == v1;
  }
  return result;
}

BOOL partial apply for closure #1 in WeakArray.reap()()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong) {
    swift_unknownObjectRelease();
  }
  return Strong == 0;
}

uint64_t WeakArray.allElements.getter()
{
  return Sequence.compactMap<A>(_:)();
}

uint64_t partial apply for closure #1 in WeakArray.allElements.getter@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_unknownObjectRetain();
}

uint64_t type metadata accessor for WeakArray()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Sequence in WeakArray<A>()
{
  return swift_getWitnessTable();
}

void *associated type witness table accessor for Collection.Index : Comparable in WeakArray<A>()
{
  return &protocol witness table for Int;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in WeakArray<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in WeakArray<A>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for Collection.endIndex.getter in conformance WeakArray<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = WeakArray.endIndex.getter();
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance WeakArray<A>(uint64_t **a1))(void *a1)
{
  uint64_t v2 = (uint64_t *)malloc(0x30uLL);
  *a1 = v2;
  uint64_t v3 = WeakArray.subscript.read(v2);
  v2[4] = v4;
  v2[5] = (uint64_t)v3;
  return protocol witness for Collection.subscript.read in conformance WeakArray<A>;
}

void protocol witness for Collection.subscript.read in conformance WeakArray<A>(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 40))(*a1);

  free(v1);
}

uint64_t (*WeakArray.subscript.read(uint64_t *a1))()
{
  *a1 = WeakArray.subscript.getter();
  return Array.subscript.readspecialized ;
}

uint64_t protocol witness for Collection.subscript.getter in conformance WeakArray<A>()
{
  return Collection<>.subscript.getter();
}

uint64_t protocol witness for Collection.indices.getter in conformance WeakArray<A>()
{
  return Collection<>.indices.getter();
}

uint64_t protocol witness for Collection.count.getter in conformance WeakArray<A>()
{
  return Collection.count.getter();
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance WeakArray<A>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance WeakArray<A>()
{
  return Collection.index(_:offsetBy:)();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance WeakArray<A>()
{
  return Collection.index(_:offsetBy:limitedBy:)();
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance WeakArray<A>()
{
  return Collection.distance(from:to:)();
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance WeakArray<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))&type metadata accessor for Range, (uint64_t (*)(char *, char *, uint64_t, uint64_t))&dispatch thunk of static Comparable.< infix(_:_:));
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))&type metadata accessor for ClosedRange, (uint64_t (*)(char *, char *, uint64_t, uint64_t))&dispatch thunk of static Comparable.<= infix(_:_:));
}

void *protocol witness for Collection.index(after:) in conformance WeakArray<A>@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance WeakArray<A>(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in WeakArray<A>()
{
  return swift_getWitnessTable();
}

void protocol witness for Sequence.makeIterator() in conformance WeakArray<A>(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance WeakArray<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return Collection.underestimatedCount.getter(a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance WeakArray<A>()
{
  swift_getWitnessTable();
  uint64_t v0 = specialized Collection._copyToContiguousArray()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = type metadata accessor for Range();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v17 - v10;
  v17[1] = AssociatedConformanceWitness;
  LOBYTE(AssociatedConformanceWitness) = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12(v11, a1, v5);
  v12(v9, a2, v5);
  if ((AssociatedConformanceWitness & 1) == 0)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
    v16(v9, v5);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v11, v5);
    goto LABEL_5;
  }
  char v13 = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v9, v5);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v11, v5);
  if ((v13 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t specialized Collection._copyToContiguousArray()()
{
  return _copyCollectionToContiguousArray<A>(_:)();
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  id v23 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v13);
  id v18 = (char *)&v22 - v17;
  char v19 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  char v20 = v23(v18, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t WeakValuesDictionary.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  WeakValuesDictionary.init()();
  return v0;
}

uint64_t WeakValuesDictionary.init()()
{
  type metadata accessor for NSValue();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  *(void *)(v0 + 16) = Dictionary.init(dictionaryLiteral:)();
  return v0;
}

uint64_t WeakValuesDictionary.subscript.getter()
{
  swift_beginAccess();
  type metadata accessor for NSValue();
  swift_bridgeObjectRetain();
  Dictionary.subscript.getter();
  swift_bridgeObjectRelease();
  if (v3[0])
  {
    if ([v3[0] weakObjectValue])
    {
      _bridgeAnyObjectToAny(_:)();

      swift_unknownObjectRelease();
    }
    else
    {

      memset(v2, 0, sizeof(v2));
    }
    _sypSgWOb_1((uint64_t)v2, (uint64_t)v3);
    if (v3[3])
    {
      if (swift_dynamicCast()) {
        return v1;
      }
    }
    else
    {
      _sypSgWOh_0((uint64_t)v3);
    }
  }
  return 0;
}

void WeakValuesDictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(*(void *)v2 + 80);
  uint64_t v6 = *(void *)(v5 - 8);
  if (__chkstk_darwin(a1))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v10 - v7, a2, v5);
    uint64_t v10 = a1;
    swift_unknownObjectRetain();
    uint64_t v8 = _bridgeAnythingToObjectiveC<A>(_:)();
    id v9 = [self valueWithWeakObject:v8];
    swift_unknownObjectRelease();
    id v11 = v9;
    swift_beginAccess();
    type metadata accessor for NSValue();
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    swift_endAccess();
    swift_unknownObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v5);
  }
  else
  {
    swift_beginAccess();
    type metadata accessor for NSValue();
    type metadata accessor for Dictionary();
    Dictionary.removeValue(forKey:)();
    swift_endAccess();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a2, v5);
  }
}

void (*WeakValuesDictionary.subscript.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[1] = v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 80);
  v3[2] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  v3[3] = v5;
  size_t v7 = *(void *)(v5 + 64);
  id v3[4] = malloc(v7);
  v3[5] = malloc(v7);
  (*(void (**)(void))(v6 + 16))();
  *uint64_t v3 = WeakValuesDictionary.subscript.getter();
  return WeakValuesDictionary.subscript.modify;
}

void WeakValuesDictionary.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v2[3] + 32))((*a1)[4], v4, v2[2]);
    uint64_t v5 = swift_unknownObjectRetain();
    WeakValuesDictionary.subscript.setter(v5, (uint64_t)v3);
    swift_unknownObjectRelease();
  }
  else
  {
    WeakValuesDictionary.subscript.setter(**a1, (uint64_t)v4);
  }
  free(v4);
  free(v3);

  free(v2);
}

Swift::Void __swiftcall WeakValuesDictionary.compact()()
{
  uint64_t v65 = *v0;
  uint64_t v1 = *(void *)(v65 + 80);
  uint64_t v56 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v50 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  CGRect v58 = (char *)&v45 - v3;
  uint64_t v46 = v4;
  __chkstk_darwin();
  CGRect v60 = (char *)&v45 - v5;
  unint64_t v53 = type metadata accessor for NSValue();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v63 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v63 - 8);
  __chkstk_darwin();
  id v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  id v11 = (char *)&v45 - v10;
  uint64_t v70 = static Array._allocateUninitialized(_:)();
  double v49 = v0 + 2;
  swift_beginAccess();
  unint64_t v12 = v0[2];
  if ((v12 & 0xC000000000000001) != 0)
  {
    uint64_t v13 = __CocoaDictionary.makeIterator()();
    unint64_t v51 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    unint64_t v16 = v13 | 0x8000000000000000;
  }
  else
  {
    uint64_t v17 = -1 << *(unsigned char *)(v12 + 32);
    uint64_t v14 = ~v17;
    uint64_t v18 = *(void *)(v12 + 64);
    unint64_t v51 = v12 + 64;
    uint64_t v19 = -v17;
    if (v19 < 64) {
      uint64_t v20 = ~(-1 << v19);
    }
    else {
      uint64_t v20 = -1;
    }
    unint64_t v15 = v20 & v18;
    unint64_t v16 = v12;
  }
  uint64_t v55 = v16 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v61 = TupleTypeMetadata2 - 8;
  uint64_t v48 = v14;
  uint64_t v67 = (void (**)(char *, char *, uint64_t))(v56 + 16);
  uint64_t v62 = (void (**)(char *, char *, uint64_t))(v7 + 32);
  CGRect v59 = (void (**)(char *, char *, uint64_t))(v56 + 32);
  uint64_t v66 = (void (**)(char *, uint64_t))(v56 + 8);
  int64_t v54 = (unint64_t)(v14 + 64) >> 6;
  int64_t v47 = v54 - 1;
  swift_bridgeObjectRetain();
  int64_t v21 = 0;
  CGRect v57 = (char *)&type metadata for Any + 8;
  char v52 = (char *)&type metadata for Swift.AnyObject + 8;
  for (i = v16; ; unint64_t v16 = i)
  {
    if ((v16 & 0x8000000000000000) != 0)
    {
      if (__CocoaDictionary.Iterator.next()())
      {
        uint64_t v30 = v29;
        _forceBridgeFromObjectiveC<A>(_:_:)();
        swift_unknownObjectRelease();
        uint64_t v31 = *(int *)(TupleTypeMetadata2 + 48);
        *(void *)&v68[0] = v30;
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v32 = v69[0];
        swift_unknownObjectRelease();
        *(void *)&v9[v31] = v32;
        uint64_t v26 = *(void *)(TupleTypeMetadata2 - 8);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v9, 0, 1, TupleTypeMetadata2);
      }
      else
      {
        uint64_t v26 = *(void *)(TupleTypeMetadata2 - 8);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v9, 1, 1, TupleTypeMetadata2);
      }
      int64_t v28 = v21;
      uint64_t v22 = v15;
    }
    else
    {
      if (v15)
      {
        uint64_t v22 = (v15 - 1) & v15;
        unint64_t v23 = __clz(__rbit64(v15)) | (v21 << 6);
        int64_t v24 = v21;
LABEL_14:
        (*(void (**)(char *, unint64_t, uint64_t))(v56 + 16))(v9, *(void *)(v16 + 48) + *(void *)(v56 + 72) * v23, v1);
        id v25 = *(void **)(*(void *)(v16 + 56) + 8 * v23);
        *(void *)&v9[*(int *)(TupleTypeMetadata2 + 48)] = v25;
        uint64_t v26 = *(void *)(TupleTypeMetadata2 - 8);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v9, 0, 1, TupleTypeMetadata2);
        id v27 = v25;
        int64_t v28 = v24;
        goto LABEL_35;
      }
      int64_t v24 = v21 + 1;
      if (__OFADD__(v21, 1))
      {
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        return;
      }
      int64_t v28 = v21;
      if (v24 < v54)
      {
        unint64_t v33 = *(void *)(v51 + 8 * v24);
        unint64_t v16 = i;
        if (v33) {
          goto LABEL_20;
        }
        int64_t v28 = v21 + 1;
        if (v21 + 2 < v54)
        {
          unint64_t v33 = *(void *)(v51 + 8 * (v21 + 2));
          unint64_t v16 = i;
          if (v33)
          {
            int64_t v24 = v21 + 2;
LABEL_20:
            uint64_t v22 = (v33 - 1) & v33;
            unint64_t v23 = __clz(__rbit64(v33)) + (v24 << 6);
            goto LABEL_14;
          }
          int64_t v34 = v21 + 3;
          int64_t v28 = v21 + 2;
          if (v21 + 3 < v54)
          {
            unint64_t v33 = *(void *)(v51 + 8 * v34);
            unint64_t v16 = i;
            if (v33)
            {
              int64_t v24 = v21 + 3;
              goto LABEL_20;
            }
            while (1)
            {
              int64_t v24 = v34 + 1;
              if (__OFADD__(v34, 1)) {
                goto LABEL_54;
              }
              if (v24 >= v54) {
                break;
              }
              unint64_t v33 = *(void *)(v51 + 8 * v24);
              ++v34;
              if (v33) {
                goto LABEL_20;
              }
            }
            int64_t v28 = v47;
          }
        }
      }
      uint64_t v26 = *(void *)(TupleTypeMetadata2 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v9, 1, 1, TupleTypeMetadata2);
      uint64_t v22 = 0;
    }
LABEL_35:
    (*v62)(v11, v9, v63);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v11, 1, TupleTypeMetadata2) == 1) {
      break;
    }
    uint64_t v35 = *(void **)&v11[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v36 = v60;
    (*v59)(v60, v11, v1);
    if ([v35 weakObjectValue])
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v68, 0, sizeof(v68));
    }
    _sypSgWOb_1((uint64_t)v68, (uint64_t)v69);
    if (!v69[3])
    {
      _sypSgWOh_0((uint64_t)v69);
LABEL_9:
      (*v67)(v58, v36, v1);
      type metadata accessor for Array();
      Array.append(_:)();

      goto LABEL_10;
    }
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_9;
    }

    swift_unknownObjectRelease();
LABEL_10:
    (*v66)(v36, v1);
    int64_t v21 = v28;
    unint64_t v15 = v22;
  }
  outlined consume of Set<MusicItemID>.Iterator._Variant();
  uint64_t v37 = v70;
  uint64_t v38 = Array.endIndex.getter();
  uint64_t v39 = v56;
  uint64_t v40 = v50;
  if (!v38) {
    goto LABEL_52;
  }
  uint64_t v41 = 0;
  while (2)
  {
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v40, v37+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(void *)(v39 + 72) * v41, v1);
      uint64_t v43 = v41 + 1;
      if (__OFADD__(v41, 1)) {
        break;
      }
      goto LABEL_46;
    }
    uint64_t v44 = _ArrayBuffer._getElementSlowPath(_:)();
    if (v46 != 8) {
      goto LABEL_55;
    }
    v69[0] = v44;
    (*v67)(v40, (char *)v69, v1);
    swift_unknownObjectRelease();
    uint64_t v43 = v41 + 1;
    if (!__OFADD__(v41, 1))
    {
LABEL_46:
      swift_beginAccess();
      type metadata accessor for Dictionary();
      Dictionary.removeValue(forKey:)();
      swift_endAccess();

      (*v66)(v40, v1);
      ++v41;
      if (v43 == Array.endIndex.getter()) {
        goto LABEL_52;
      }
      continue;
    }
    break;
  }
  __break(1u);
LABEL_52:
  swift_bridgeObjectRelease();
}

uint64_t WeakValuesDictionary.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t type metadata completion function for WeakValuesDictionary()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for WeakValuesDictionary()
{
  return __swift_instantiateGenericMetadata();
}

void sub_1002D4B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCNAvatarImageRendererClass_block_invoke(uint64_t a1)
{
  ContactsUILibrary();
  Class result = objc_getClass("CNAvatarImageRenderer");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getCNAvatarImageRendererClass_block_invoke_cold_1();
  }
  getCNAvatarImageRendererClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void ContactsUILibrary()
{
  v0[0] = 0;
  if (!ContactsUILibraryCore_frameworkLibrary)
  {
    v0[1] = _NSConcreteStackBlock;
    v0[2] = (void *)3221225472;
    v0[3] = __ContactsUILibraryCore_block_invoke;
    v0[4] = &__block_descriptor_40_e5_v8__0l;
    v0[5] = v0;
    long long v1 = off_10053EEB0;
    uint64_t v2 = 0;
    ContactsUILibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!ContactsUILibraryCore_frameworkLibrary) {
    ContactsUILibrary_cold_1(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t __ContactsUILibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  ContactsUILibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

Class __getCNAvatarImageRendererSettingsClass_block_invoke(uint64_t a1)
{
  ContactsUILibrary();
  Class result = objc_getClass("CNAvatarImageRendererSettings");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getCNAvatarImageRendererSettingsClass_block_invoke_cold_1();
  }
  getCNAvatarImageRendererSettingsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getCNAvatarImageRenderingScopeClass_block_invoke(uint64_t a1)
{
  ContactsUILibrary();
  Class result = objc_getClass("CNAvatarImageRenderingScope");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getCNAvatarImageRenderingScopeClass_block_invoke_cold_1();
  }
  getCNAvatarImageRenderingScopeClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getCNContactClass_block_invoke(uint64_t a1)
{
  v3[0] = 0;
  if (!ContactsLibraryCore_frameworkLibrary)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = __ContactsLibraryCore_block_invoke;
    id v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = off_10053EEE8;
    uint64_t v5 = 0;
    ContactsLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!ContactsLibraryCore_frameworkLibrary) {
    __getCNContactClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("CNContact");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getCNContactClass_block_invoke_cold_2();
  }
  getCNContactClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __ContactsLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  ContactsLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

id __Music_darwinNotificationReceived(uint64_t a1, void *a2)
{
  return [a2 darwinNotificationReceived];
}

void sub_1002D5340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getAFPreferencesClass_block_invoke(uint64_t a1)
{
  v3[0] = 0;
  if (!AssistantServicesLibraryCore_frameworkLibrary)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = __AssistantServicesLibraryCore_block_invoke;
    id v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = off_10053EF00;
    uint64_t v5 = 0;
    AssistantServicesLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!AssistantServicesLibraryCore_frameworkLibrary) {
    __getAFPreferencesClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("AFPreferences");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getAFPreferencesClass_block_invoke_cold_2();
  }
  getAFPreferencesClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __AssistantServicesLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  AssistantServicesLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

Class __getVTPreferencesClass_block_invoke(uint64_t a1)
{
  v3[0] = 0;
  if (!VoiceTriggerLibraryCore_frameworkLibrary)
  {
    v3[1] = _NSConcreteStackBlock;
    v3[2] = (void *)3221225472;
    v3[3] = __VoiceTriggerLibraryCore_block_invoke;
    id v3[4] = &__block_descriptor_40_e5_v8__0l;
    v3[5] = v3;
    long long v4 = off_10053EF18;
    uint64_t v5 = 0;
    VoiceTriggerLibraryCore_frameworkLibrarCGFloat y = _sl_dlopen();
  }
  if (!VoiceTriggerLibraryCore_frameworkLibrary) {
    __getVTPreferencesClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("VTPreferences");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getVTPreferencesClass_block_invoke_cold_2();
  }
  getVTPreferencesClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __VoiceTriggerLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  VoiceTriggerLibraryCore_frameworkLibrarCGFloat y = result;
  return result;
}

void __getCNAvatarImageRendererClass_block_invoke_cold_1()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  long long v1 = +[NSString stringWithUTF8String:"Class getCNAvatarImageRendererClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"MonogramArtworkDataSource.m", 21, @"Unable to find class %s", "CNAvatarImageRenderer");

  __break(1u);
}

void ContactsUILibrary_cold_1(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"void *ContactsUILibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"MonogramArtworkDataSource.m", 20, @"%s", *a1);

  __break(1u);
}

void __getCNAvatarImageRendererSettingsClass_block_invoke_cold_1()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  long long v1 = +[NSString stringWithUTF8String:"Class getCNAvatarImageRendererSettingsClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"MonogramArtworkDataSource.m", 23, @"Unable to find class %s", "CNAvatarImageRendererSettings");

  __break(1u);
}

void __getCNAvatarImageRenderingScopeClass_block_invoke_cold_1()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  long long v1 = +[NSString stringWithUTF8String:"Class getCNAvatarImageRenderingScopeClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"MonogramArtworkDataSource.m", 22, @"Unable to find class %s", "CNAvatarImageRenderingScope");

  __break(1u);
}

void __getCNContactClass_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"void *ContactsLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"MonogramArtworkDataSource.m", 28, @"%s", *a1);

  __break(1u);
}

void __getCNContactClass_block_invoke_cold_2()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  long long v1 = +[NSString stringWithUTF8String:"Class getCNContactClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"MonogramArtworkDataSource.m", 29, @"Unable to find class %s", "CNContact");

  __break(1u);
}

void __getAFPreferencesClass_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"void *AssistantServicesLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"MusicSiriUtilities.m", 16, @"%s", *a1);

  __break(1u);
}

void __getAFPreferencesClass_block_invoke_cold_2()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  long long v1 = +[NSString stringWithUTF8String:"Class getAFPreferencesClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"MusicSiriUtilities.m", 17, @"Unable to find class %s", "AFPreferences");

  __break(1u);
}

void __getVTPreferencesClass_block_invoke_cold_1(void *a1)
{
  uint64_t v2 = +[NSAssertionHandler currentHandler];
  uint64_t v3 = +[NSString stringWithUTF8String:"void *VoiceTriggerLibrary(void)"];
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, @"MusicSiriUtilities.m", 19, @"%s", *a1);

  __break(1u);
}

void __getVTPreferencesClass_block_invoke_cold_2()
{
  uint64_t v0 = +[NSAssertionHandler currentHandler];
  long long v1 = +[NSString stringWithUTF8String:"Class getVTPreferencesClass(void)_block_invoke"];
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, @"MusicSiriUtilities.m", 20, @"Unable to find class %s", "VTPreferences");

  __break(1u);
}

void variable initialization expression of Artwork.caching(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

id variable initialization expression of Artwork.decoration@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for Artwork.Decoration(0);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v3 = (char *)a1 + v2[5];
  uint64_t v4 = type metadata accessor for UIView.Corner();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v2[6];
  id result = [self blackColor];
  *(void *)((char *)a1 + v5) = result;
  *(void *)((char *)a1 + v2[7]) = 1;
  return result;
}

uint64_t variable initialization expression of Artwork.size()
{
  return 0;
}

double variable initialization expression of Artwork.View._laidBounds()
{
  return 0.0;
}

uint64_t variable initialization expression of Artwork.Decoration.corner@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of Artwork.Decoration.corner((uint64_t (*)(void))&type metadata accessor for UIView.Corner, a1);
}

id variable initialization expression of Artwork.Decoration.fillColor()
{
  id v0 = [self blackColor];

  return v0;
}

id variable initialization expression of Artwork.Placeholder.background()
{
  id v0 = [self secondarySystemFillColor];

  return v0;
}

uint64_t variable initialization expression of Artwork.Placeholder.tint()
{
  if (one-time initialization token for defaultTint != -1) {
    swift_once();
  }
  uint64_t v0 = static Artwork.Placeholder.defaultTint;
  id v1 = (id)static Artwork.Placeholder.defaultTint;
  return v0;
}

id variable initialization expression of Artwork.Placeholder.symbolConfiguration()
{
  id v0 = [self configurationWithWeight:4];

  return v0;
}

double variable initialization expression of Artwork.Placeholder.imageScaleFactor()
{
  return 0.5;
}

double static CGFloat.squareAspectRatio.getter()
{
  return 1.0;
}

id variable initialization expression of Artwork.Placeholder.View.contentView()
{
  id v0 = objc_allocWithZone((Class)UIImageView);

  return [v0 init];
}

unint64_t variable initialization expression of Lyrics.translationMap()
{
  return specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t variable initialization expression of LyricsLoader.lyricsOperations()
{
  return specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t variable initialization expression of LyricsLoader.accessQueue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin();
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  type metadata accessor for UIMenu(0, (unint64_t *)&_sSo17OS_dispatch_queueCML_1);
  static DispatchQoS.unspecified.getter();
  v5[1] = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&_sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWL_0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&_sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGMD_0);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result = _sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGSayxGSTsWL_0;
  if (!_sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGSayxGSTsWL_0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&_sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGMD_0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&_sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGSayxGSTsWL_0);
  }
  return result;
}

id variable initialization expression of LyricsLoader.operationQueue()
{
  id v0 = [objc_allocWithZone((Class)NSOperationQueue) init];
  [v0 setMaxConcurrentOperationCount:1];
  return v0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.firstLineStartingPosition()
{
  return 60.0;
}

void variable initialization expression of SyncedLyricsViewController.Specs.selectedLinePosition(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x4028000000000000;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineSpacing()
{
  return 25.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.backgroundVocalsTopSpacing()
{
  return 15.0;
}

CGFloat variable initialization expression of SyncedLyricsViewController.Specs.backgroundVocalsDeselectedTransform@<D0>(_OWORD *a1@<X8>)
{
  return variable initialization expression of SyncedLyricsViewController.Specs.backgroundVocalsDeselectedTransform(a1, 0.9);
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineDelay()
{
  return 0.05;
}

uint64_t variable initialization expression of SyncedLyricsViewController.Specs.font()
{
  return static UIFont.preferredFont(forTextStyle:weight:)();
}

uint64_t variable initialization expression of SyncedLyricsViewController.Specs.backgroundVocalsFont()
{
  return static UIFont.shortEmphasizedPreferredFont(forTextStyle:)();
}

id variable initialization expression of SyncedLyricsViewController.Specs.writtenByFont()
{
  return variable initialization expression of SyncedLyricsViewController.Specs.writtenByFont((double *)&UIFontWeightBold);
}

id variable initialization expression of SyncedLyricsViewController.Specs.songwritersNamesFont()
{
  return variable initialization expression of SyncedLyricsViewController.Specs.writtenByFont((double *)&UIFontWeightMedium);
}

id variable initialization expression of SyncedLyricsViewController.Specs.writtenByFont(double *a1)
{
  id v1 = [self systemFontOfSize:22.0 weight:*a1];

  return v1;
}

double variable initialization expression of SyncedLyricsViewController.Specs.emphasizingScaleRange()
{
  return 1.0;
}

id variable initialization expression of SyncedLyricsViewController.Specs.selectedTextColor()
{
  return variable initialization expression of SyncedLyricsViewController.Specs.selectedTextColor((SEL *)&selRef_labelColor, (uint64_t)&unk_10053F7F0, (uint64_t)partial apply for closure #1 in UIColor.init(normal:highContrast:), (uint64_t)&block_descriptor_42);
}

id variable initialization expression of SyncedLyricsViewController.Specs.selectedUpcomingTextColor()
{
  id v0 = self;
  id v1 = [v0 whiteColor];
  id v2 = [v1 colorWithAlphaComponent:0.35];

  id v3 = [v0 labelColor];
  id v4 = [v3 colorWithAlphaComponent:0.85];

  id v5 = objc_allocWithZone((Class)UIColor);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v2;
  void v12[4] = closure #1 in UIColor.init(normal:highContrast:)partial apply;
  v12[5] = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  void v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed UITraitCollection) -> (@owned UIColor);
  unint64_t v12[3] = &block_descriptor_47;
  uint64_t v7 = _Block_copy(v12);
  id v8 = v4;
  id v9 = v2;
  swift_release();
  id v10 = [v5 initWithDynamicProvider:v7];

  _Block_release(v7);
  return v10;
}

id variable initialization expression of SyncedLyricsViewController.Specs.deselectedTextColor()
{
  id v0 = self;
  id v1 = [v0 whiteColor];
  id v2 = [v1 colorWithAlphaComponent:0.175];

  id v3 = [v0 labelColor];
  id v4 = [v3 colorWithAlphaComponent:0.4];

  id v5 = objc_allocWithZone((Class)UIColor);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v2;
  void v12[4] = closure #1 in UIColor.init(normal:highContrast:)partial apply;
  v12[5] = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  void v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed UITraitCollection) -> (@owned UIColor);
  unint64_t v12[3] = &block_descriptor_54;
  uint64_t v7 = _Block_copy(v12);
  id v8 = v4;
  id v9 = v2;
  swift_release();
  id v10 = [v5 initWithDynamicProvider:v7];

  _Block_release(v7);
  return v10;
}

id variable initialization expression of SyncedLyricsViewController.Specs.selectedBackgroundVocalsTextColor()
{
  id v0 = self;
  id v1 = [v0 whiteColor];
  id v2 = [v1 colorWithAlphaComponent:0.35];

  id v3 = [v0 labelColor];
  id v4 = [v3 colorWithAlphaComponent:0.85];

  id v5 = objc_allocWithZone((Class)UIColor);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v2;
  void v12[4] = closure #1 in UIColor.init(normal:highContrast:)partial apply;
  v12[5] = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  void v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed UITraitCollection) -> (@owned UIColor);
  unint64_t v12[3] = &block_descriptor_61_0;
  uint64_t v7 = _Block_copy(v12);
  id v8 = v4;
  id v9 = v2;
  swift_release();
  id v10 = [v5 initWithDynamicProvider:v7];

  _Block_release(v7);
  return v10;
}

id variable initialization expression of SyncedLyricsViewController.Specs.selectedUpcomingBackgroundVocalsTextColor()
{
  id v0 = self;
  id v1 = [v0 whiteColor];
  id v2 = [v1 colorWithAlphaComponent:0.175];

  id v3 = [v0 labelColor];
  id v4 = [v3 colorWithAlphaComponent:0.65];

  id v5 = objc_allocWithZone((Class)UIColor);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v2;
  void v12[4] = closure #1 in UIColor.init(normal:highContrast:)partial apply;
  v12[5] = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  void v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed UITraitCollection) -> (@owned UIColor);
  unint64_t v12[3] = &block_descriptor_68;
  uint64_t v7 = _Block_copy(v12);
  id v8 = v4;
  id v9 = v2;
  swift_release();
  id v10 = [v5 initWithDynamicProvider:v7];

  _Block_release(v7);
  return v10;
}

id variable initialization expression of SyncedLyricsViewController.Specs.deselectedScrollTextColor()
{
  id v0 = self;
  id v1 = [v0 whiteColor];
  id v2 = [v1 colorWithAlphaComponent:0.4];

  id v3 = [v0 labelColor];
  id v4 = [v3 colorWithAlphaComponent:0.4];

  id v5 = objc_allocWithZone((Class)UIColor);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v2;
  void v12[4] = closure #1 in UIColor.init(normal:highContrast:)partial apply;
  v12[5] = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  void v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed UITraitCollection) -> (@owned UIColor);
  unint64_t v12[3] = &block_descriptor_75;
  uint64_t v7 = _Block_copy(v12);
  id v8 = v4;
  id v9 = v2;
  swift_release();
  id v10 = [v5 initWithDynamicProvider:v7];

  _Block_release(v7);
  return v10;
}

CGFloat variable initialization expression of SyncedLyricsViewController.Specs.deselectedTransform@<D0>(_OWORD *a1@<X8>)
{
  return variable initialization expression of SyncedLyricsViewController.Specs.backgroundVocalsDeselectedTransform(a1, 0.98);
}

id variable initialization expression of SyncedLyricsViewController.Specs.hiddenTextColor()
{
  id v0 = [self clearColor];

  return v0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineTapProgressFreezeDuration()
{
  return 0.1;
}

double variable initialization expression of SyncedLyricsViewController.Specs.glowRadius()
{
  return 5.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.glowRange()
{
  return 0.0;
}

id variable initialization expression of SyncedLyricsViewController.Specs.lineProgressionGradientColor()
{
  return variable initialization expression of SyncedLyricsViewController.Specs.selectedTextColor((SEL *)&selRef_tintColor, (uint64_t)&unk_10053F9D0, (uint64_t)closure #1 in UIColor.init(normal:highContrast:)partial apply, (uint64_t)&block_descriptor_82_1);
}

id variable initialization expression of SyncedLyricsViewController.Specs.selectedTextColor(SEL *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = self;
  id v8 = [v7 whiteColor];
  id v9 = [v7 *a1];
  id v10 = objc_allocWithZone((Class)UIColor);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v9;
  *(void *)(v11 + 24) = v8;
  void v17[4] = a3;
  v17[5] = v11;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  void v17[2] = thunk for @escaping @callee_guaranteed (@guaranteed UITraitCollection) -> (@owned UIColor);
  v17[3] = a4;
  unint64_t v12 = _Block_copy(v17);
  id v13 = v9;
  id v14 = v8;
  swift_release();
  id v15 = [v10 initWithDynamicProvider:v12];

  _Block_release(v12);
  return v15;
}

id variable initialization expression of SyncedLyricsViewController.Specs.lineProgressionBackgroundVocalsGradientColor()
{
  id v0 = self;
  id v1 = [v0 whiteColor];
  id v2 = [v1 colorWithAlphaComponent:0.175];

  id v3 = [v0 tintColor];
  id v4 = [v3 colorWithAlphaComponent:0.175];

  id v5 = objc_allocWithZone((Class)UIColor);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v2;
  void v12[4] = closure #1 in UIColor.init(normal:highContrast:)partial apply;
  v12[5] = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  void v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed UITraitCollection) -> (@owned UIColor);
  unint64_t v12[3] = &block_descriptor_89_1;
  uint64_t v7 = _Block_copy(v12);
  id v8 = v4;
  id v9 = v2;
  swift_release();
  id v10 = [v5 initWithDynamicProvider:v7];

  _Block_release(v7);
  return v10;
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineProgressionGradientFeather()
{
  return 30.0;
}

CGFloat variable initialization expression of SyncedLyricsViewController.Specs.touchDownTransform@<D0>(_OWORD *a1@<X8>)
{
  return variable initialization expression of SyncedLyricsViewController.Specs.backgroundVocalsDeselectedTransform(a1, 0.95);
}

CGFloat variable initialization expression of SyncedLyricsViewController.Specs.backgroundVocalsDeselectedTransform@<D0>(_OWORD *a1@<X8>, CGFloat a2@<D0>)
{
  CGAffineTransformMakeScale(&v6, a2, a2);
  CGFloat result = v6.a;
  long long v4 = *(_OWORD *)&v6.c;
  long long v5 = *(_OWORD *)&v6.tx;
  *a1 = *(_OWORD *)&v6.a;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

double variable initialization expression of SyncedLyricsViewController.Specs.vocalGroupWidthCoefficient()
{
  return 0.85;
}

id variable initialization expression of SyncedLyricsViewController.Specs.highlightViewBackgroundColor()
{
  id v0 = objc_allocWithZone((Class)UIColor);

  return [v0 initWithWhite:1.0 alpha:0.08];
}

double variable initialization expression of SyncedLyricsViewController.Specs.highlightViewMargin()
{
  return 16.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.instrumentalBreakVisualizationMinSeconds()
{
  return 7.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.instrumentalBreakViewHeight()
{
  return 40.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.syllableLift()
{
  return 2.0;
}

double variable initialization expression of SyncedLyricsViewController.Specs.lineFinishProgressAnimationDuration()
{
  return 0.25;
}

uint64_t sub_1002D7520()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in UIColor.init(normal:highContrast:)(void *a1)
{
  return closure #1 in UIColor.init(normal:highContrast:)(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  id v2 = *(void **)(v1 + 16);
  id v3 = *(void **)(v1 + 24);
  long long v4 = [a1 accessibilityContrast];
  if (v4 == (id)1) {
    long long v5 = v2;
  }
  else {
    long long v5 = v3;
  }
  if (v4 == (id)-1) {
    CGAffineTransform v6 = v3;
  }
  else {
    CGAffineTransform v6 = v5;
  }

  return v6;
}

id thunk for @escaping @callee_guaranteed (@guaranteed UITraitCollection) -> (@owned UIColor)(uint64_t a1, void *a2)
{
  id v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  long long v5 = (void *)v3();
  swift_release();

  return v5;
}

uint64_t block_copy_helper_40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_40()
{
  return swift_release();
}

double variable initialization expression of SyncedLyricsViewController.bottomTapAreaHeight()
{
  return Int.seconds.getter(0);
}

void *variable initialization expression of SyncedLyricsViewController.specs@<X0>(void *a1@<X8>)
{
  specialized SyncedLyricsViewController.Specs.init(_:)(0, v3);
  return memcpy(a1, v3, 0x219uLL);
}

id variable initialization expression of SyncedLyricsViewController.scrollView()
{
  id v0 = objc_allocWithZone((Class)UIScrollView);

  return [v0 init];
}

id variable initialization expression of SyncedLyricsViewController.tapFeedbackGenerator()
{
  id v0 = objc_allocWithZone((Class)UISelectionFeedbackGenerator);

  return [v0 init];
}

id variable initialization expression of LineProgressGradientView.gradientView()
{
  return variable initialization expression of LineProgressGradientView.gradientView((void (*)(void))type metadata accessor for LineProgressGradientView.GradientView);
}

uint64_t variable initialization expression of NoticePresenter._notice@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of Artwork.Decoration.corner(type metadata accessor for Notice, a1);
}

__n128 variable initialization expression of NoticePresenter.uiKitConfiguration@<Q0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultEdgePadding != -1) {
    swift_once();
  }
  uint64_t v2 = static NoticePresenter.defaultEdgePadding;
  __n128 v6 = *(__n128 *)&NSDirectionalEdgeInsetsZero.top;
  CGFloat bottom = NSDirectionalEdgeInsetsZero.bottom;
  CGFloat trailing = NSDirectionalEdgeInsetsZero.trailing;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(a1 + 8) = 2;
  *(void *)(a1 + 16) = v2;
  __n128 result = v6;
  *(__n128 *)(a1 + 24) = v6;
  *(CGFloat *)(a1 + 40) = bottom;
  *(CGFloat *)(a1 + 48) = trailing;
  return result;
}

uint64_t variable initialization expression of NoticePresentingModifier._controller()
{
  type metadata accessor for NoticePresenter();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type NoticePresenter and conformance NoticePresenter, (void (*)(uint64_t))type metadata accessor for NoticePresenter);

  return EnvironmentObject.init()();
}

double variable initialization expression of ArtistRazzmatazzView._rowHeight()
{
  return 75.0;
}

uint64_t variable initialization expression of ArtworkImage.Placeholder.View._placeholderStyle@<X0>(uint64_t *a1@<X8>)
{
  return variable initialization expression of ArtworkImage.Placeholder.View._placeholderStyle(&demangling cache variable for type metadata for Environment<ArtworkImage.Placeholder.View.Style?>.Content, a1);
}

uint64_t variable initialization expression of ArtworkImage.Placeholder.View._colorSchemeContrast@<X0>(uint64_t *a1@<X8>)
{
  return variable initialization expression of ArtworkImage.Placeholder.View._placeholderStyle(&demangling cache variable for type metadata for Environment<ColorSchemeContrast>.Content, a1);
}

uint64_t variable initialization expression of ArtworkImage.Placeholder.View.Style.blendMode@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of Artwork.Decoration.corner((uint64_t (*)(void))&type metadata accessor for BlendMode, a1);
}

uint64_t variable initialization expression of Card.DisplayStyle._displayCornerRadius()
{
  return swift_getKeyPath();
}

uint64_t key path getter for EnvironmentValues.displayCornerRadius : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.displayCornerRadius.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.displayCornerRadius : EnvironmentValues()
{
  return EnvironmentValues.displayCornerRadius.setter();
}

uint64_t variable initialization expression of Collaboration.Flow.View._dismiss@<X0>(uint64_t *a1@<X8>)
{
  return variable initialization expression of ArtworkImage.Placeholder.View._placeholderStyle(&demangling cache variable for type metadata for Environment<DismissAction>.Content, a1);
}

uint64_t key path getter for EnvironmentValues.dismiss : EnvironmentValues()
{
  return EnvironmentValues.dismiss.getter();
}

double variable initialization expression of Card.ViewController.maxRegularWidth()
{
  return 414.0;
}

uint64_t variable initialization expression of CarouselView.selectedItem@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Binding();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t variable initialization expression of CarouselView._scrollViewProxy@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ScrollViewProxy();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t variable initialization expression of CarouselView._layoutDirection@<X0>(uint64_t *a1@<X8>)
{
  *a1 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Environment<LayoutDirection>.Content);

  return swift_storeEnumTagMultiPayload();
}

uint64_t variable initialization expression of CircularProgressView._state()
{
  return 0;
}

id variable initialization expression of CircularProgressView.trackLayer()
{
  id v0 = objc_allocWithZone((Class)CAShapeLayer);

  return [v0 init];
}

uint64_t variable initialization expression of Collaboration.Management.Model._hasNetworkConnectivity()
{
  static ApplicationCapabilities.shared.getter((uint64_t)v1);
  outlined release of ApplicationCapabilities((uint64_t)v1);
  return v1[1];
}

uint64_t variable initialization expression of Collaboration.Management.Model.$__lazy_storage_$_artworkViewModel@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ArtworkImage.ViewModel?);
  char v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t variable initialization expression of Collaboration.Management.View._dynamicTypeSize@<X0>(uint64_t *a1@<X8>)
{
  return variable initialization expression of ArtworkImage.Placeholder.View._placeholderStyle((uint64_t *)&demangling cache variable for type metadata for Environment<DynamicTypeSize>.Content, a1);
}

uint64_t variable initialization expression of Collaboration.Management.View._openURL@<X0>(uint64_t *a1@<X8>)
{
  return variable initialization expression of ArtworkImage.Placeholder.View._placeholderStyle((uint64_t *)&demangling cache variable for type metadata for Environment<OpenURLAction>.Content, a1);
}

uint64_t variable initialization expression of PlaylistCurators.View._horizontalSizeClass@<X0>(uint64_t *a1@<X8>)
{
  return variable initialization expression of ArtworkImage.Placeholder.View._placeholderStyle(&demangling cache variable for type metadata for Environment<UserInterfaceSizeClass?>.Content, a1);
}

uint64_t key path getter for EnvironmentValues.horizontalSizeClass : EnvironmentValues()
{
  return EnvironmentValues.horizontalSizeClass.getter();
}

uint64_t key path setter for EnvironmentValues.horizontalSizeClass : EnvironmentValues(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserInterfaceSizeClass?);
  __chkstk_darwin();
  outlined init with copy of (String, Any)(a1, (uint64_t)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for UserInterfaceSizeClass?);
  return EnvironmentValues.horizontalSizeClass.setter();
}

uint64_t variable initialization expression of Collaboration.Flow.Collaborator.artwork@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of Artwork.Decoration.corner((uint64_t (*)(void))&type metadata accessor for Artwork, a1);
}

uint64_t variable initialization expression of InlineProfileEditingView.Context._name()
{
  return 0;
}

uint64_t variable initialization expression of InlineProfileEditingView._imagePickerSourceType()
{
  return 1;
}

uint64_t variable initialization expression of MoreLabel._layoutDirection@<X0>(uint64_t *a1@<X8>)
{
  return variable initialization expression of ArtworkImage.Placeholder.View._placeholderStyle(&demangling cache variable for type metadata for Environment<LayoutDirection>.Content, a1);
}

uint64_t variable initialization expression of MoreLabel._accessibilityShowButtonShapes()
{
  return swift_getKeyPath();
}

uint64_t variable initialization expression of LoadingView.style()
{
  return 0x10000000000;
}

id variable initialization expression of LoadingView.label()
{
  id v0 = objc_allocWithZone((Class)UILabel);

  return objc_msgSend(v0, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

id variable initialization expression of LoadingView.activityIndicator()
{
  id v0 = objc_allocWithZone((Class)UIActivityIndicatorView);

  return [v0 initWithActivityIndicatorStyle:100];
}

uint64_t variable initialization expression of NoticeView._dismiss()
{
  return swift_getKeyPath();
}

UIFontTextStyle variable initialization expression of SymbolButton.Configuration.symbol@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = UIFontTextStyleSubheadline;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 48) = xmmword_1004A3B50;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = -1;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0x3FF0000000000000;
  *(void *)(a1 + 112) = 0;
  return UIFontTextStyleSubheadline;
}

UIFontTextStyle SymbolButton.Title.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = UIFontTextStyleSubheadline;
  *(UIFontWeight *)(a1 + 24) = UIFontWeightSemibold;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0x3FF0000000000000;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  return UIFontTextStyleSubheadline;
}

double variable initialization expression of SymbolButton.Configuration.material@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  return result;
}

double variable initialization expression of SymbolButton.Configuration.customView@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

double variable initialization expression of SymbolButton.Configuration.symbolToTextSpacing()
{
  return 4.0;
}

double variable initialization expression of SymbolButton.Configuration.minimumSize()
{
  return variable initialization expression of SymbolButton.Configuration.minimumSize(&one-time initialization token for platterMinimumSize, (uint64_t)&static SymbolButton.Configuration.platterMinimumSize);
}

CGFloat variable initialization expression of SymbolButton.Configuration.contentInsets()
{
  return NSDirectionalEdgeInsetsZero.top;
}

uint64_t variable initialization expression of SymbolButton.Configuration.accessibility()
{
  return 1;
}

uint64_t variable initialization expression of PlayIntentButtonWrapper._playIntentButtonMaterial()
{
  return swift_getKeyPath();
}

char *variable initialization expression of PlayIntentLayoutHelper.playButton()
{
  return SymbolButton.__allocating_init(intent:)(0);
}

char *variable initialization expression of PlayIntentLayoutHelper.shuffleButton()
{
  return SymbolButton.__allocating_init(intent:)(1);
}

uint64_t variable initialization expression of PlayIntentLayoutHelper.configuration()
{
  return 513;
}

id variable initialization expression of QRCodeOverlayViewController.backgroundView()
{
  id v0 = objc_allocWithZone((Class)UIVisualEffectView);

  return [v0 init];
}

id variable initialization expression of QRCodeOverlayViewController.qrCodeView()
{
  return variable initialization expression of LineProgressGradientView.gradientView((void (*)(void))type metadata accessor for QRCodeOverlayViewController.ContainerView);
}

id variable initialization expression of LineProgressGradientView.gradientView(void (*a1)(void))
{
  a1(0);
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return [v1 init];
}

id variable initialization expression of QRCodeOverlayViewController.logoView()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self _systemImageNamed:v0];

  id v2 = [objc_allocWithZone((Class)UIImageView) initWithImage:v1];
  return v2;
}

id variable initialization expression of QRCodeOverlayViewController.titleLabel()
{
  id v0 = objc_allocWithZone((Class)UILabel);

  return [v0 init];
}

id variable initialization expression of QRCodeOverlayViewController.subtitleLabelEffectView()
{
  if (one-time initialization token for blurEffect != -1) {
    swift_once();
  }
  id v0 = [self effectForBlurEffect:static QRCodeOverlayViewController.Specs.blurEffect];
  id v1 = [objc_allocWithZone((Class)UIVisualEffectView) initWithEffect:v0];

  return v1;
}

id variable initialization expression of QRCodeOverlayViewController.ContainerView.imageView()
{
  return variable initialization expression of QRCodeOverlayViewController.ContainerView.imageView((Class *)UIImageView_ptr);
}

id variable initialization expression of QRCodeOverlayViewController.ContainerView.overlayLayer()
{
  id v0 = objc_allocWithZone((Class)CALayer);

  return [v0 init];
}

uint64_t variable initialization expression of QRCodeOverlayViewController.ImageViewRepresentable._foregroundColor()
{
  return swift_getKeyPath();
}

uint64_t key path getter for EnvironmentValues.effectiveForegroundColor : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.effectiveForegroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t variable initialization expression of Reactions.StackView._colorScheme@<X0>(uint64_t *a1@<X8>)
{
  return variable initialization expression of ArtworkImage.Placeholder.View._placeholderStyle(&demangling cache variable for type metadata for Environment<ColorScheme>.Content, a1);
}

uint64_t variable initialization expression of ArtworkImage.Placeholder.View._placeholderStyle@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  *a2 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(a1);

  return swift_storeEnumTagMultiPayload();
}

id variable initialization expression of SliderView.stackView()
{
  return variable initialization expression of QRCodeOverlayViewController.ContainerView.imageView((Class *)UIStackView_ptr);
}

id variable initialization expression of SliderView.remainingTrack()
{
  return variable initialization expression of QRCodeOverlayViewController.ContainerView.imageView((Class *)UIView_ptr);
}

id variable initialization expression of QRCodeOverlayViewController.ContainerView.imageView(Class *a1)
{
  id v1 = [objc_allocWithZone(*a1) init];
  id v2 = UIView.forAutolayout.getter();

  return v2;
}

id variable initialization expression of SliderView.feedbackGenerator()
{
  id v0 = objc_allocWithZone((Class)UIImpactFeedbackGenerator);

  return [v0 initWithStyle:0];
}

id variable initialization expression of SliderView.trackLayoutGuide()
{
  id v0 = objc_allocWithZone((Class)UILayoutGuide);

  return [v0 init];
}

id variable initialization expression of SliderView.elapsedTrackColor()
{
  id v0 = [self whiteColor];

  return v0;
}

id variable initialization expression of SliderView.remainingTrackColor()
{
  id v0 = [self systemFillColor];

  return v0;
}

id variable initialization expression of SliderView.trackingColor()
{
  if (one-time initialization token for normal != -1) {
    swift_once();
  }
  id v0 = (void *)static UIColor.MusicTint.normal;

  return v0;
}

double variable initialization expression of SymbolButton.hitRectMinimumSize()
{
  return variable initialization expression of SymbolButton.Configuration.minimumSize(&one-time initialization token for hitRectMinimumSize, (uint64_t)&static SymbolButton.Configuration.hitRectMinimumSize);
}

double variable initialization expression of SymbolButton.Configuration.minimumSize(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(double *)a2;
}

id variable initialization expression of SymbolButton.containerView()
{
  id v0 = objc_allocWithZone((Class)UIView);

  return [v0 init];
}

id variable initialization expression of SymbolButton.materialView()
{
  uint64_t v4 = 1;
  id v0 = (objc_class *)type metadata accessor for SymbolButton.MaterialView();
  long long v5 = 0u;
  long long v6 = 0u;
  uint64_t v7 = 0;
  v3.receiver = objc_allocWithZone(v0);
  v3.super_class = v0;
  id v1 = objc_msgSendSuper2(&v3, "initWithEffect:", 0);
  SymbolButton.MaterialView.apply(_:)((uint64_t)&v4);

  return v1;
}

id variable initialization expression of SymbolButton.backgroundView()
{
  if (one-time initialization token for clear != -1) {
    swift_once();
  }
  swift_beginAccess();
  double v0 = *(double *)&static SymbolButton.Background.clear;
  id v1 = (void *)qword_1005AEC48;
  uint64_t v2 = qword_1005AEC50;
  uint64_t v3 = qword_1005AEC58;
  objc_allocWithZone((Class)type metadata accessor for SymbolButton.BackgroundView());
  swift_bridgeObjectRetain();
  id v4 = v1;
  return SymbolButton.BackgroundView.init(configuration:)(v1, v0, v2, v3);
}

uint64_t variable initialization expression of SymbolButton.$__lazy_storage_$_metrics@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of Artwork.Decoration.corner(type metadata accessor for SymbolButton.Metrics, a1);
}

uint64_t variable initialization expression of Artwork.Decoration.corner@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

double variable initialization expression of SymbolButton.Update.animationOptions()
{
  return 0.0;
}

double variable initialization expression of VerticalToggleSlider._minValue()
{
  return 0.0;
}

UIFontTextStyle variable initialization expression of SymbolButton.Symbol.style()
{
  return UIFontTextStyleSubheadline;
}

uint64_t variable initialization expression of SymbolButton.Symbol.weight()
{
  return 6;
}

uint64_t variable initialization expression of SymbolButton.Symbol.offset()
{
  return 0;
}

UIFontWeight variable initialization expression of SymbolButton.Title.weight()
{
  return UIFontWeightSemibold;
}

CGFloat variable initialization expression of SymbolButton.CustomView.insets()
{
  return UIEdgeInsetsZero.top;
}

double variable initialization expression of VerticalToggleSlider.packageDefinition@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

float variable initialization expression of VerticalToggleSlider.minLevelOffsetRatio()
{
  if (one-time initialization token for expandedSize != -1) {
    swift_once();
  }
  double v0 = *((double *)&static VerticalToggleSlider.DesignSpecs.expandedSize + 1);
  if (one-time initialization token for minLevelOffsetInPoint != -1) {
    swift_once();
  }
  return 1.0 / v0 * *(double *)&static VerticalToggleSlider.DesignSpecs.minLevelOffsetInPoint;
}

uint64_t variable initialization expression of VerticalToggleSlider.growAnchorPoint()
{
  return 8;
}

double variable initialization expression of VerticalToggleSlider.internalValueRange()
{
  return 0.0;
}

float variable initialization expression of VerticalToggleSlider._maxValue()
{
  return 1.0;
}

id variable initialization expression of VerticalToggleSlider.blurEffect()
{
  if (one-time initialization token for blurRadius != -1) {
    swift_once();
  }
  id v0 = [self effectWithBlurRadius:*(double *)&static VerticalToggleSlider.blurRadius];

  return v0;
}

double variable initialization expression of VerticalToggleSlider.shapeChange()
{
  if (one-time initialization token for zero != -1) {
    swift_once();
  }
  return *(double *)&static VerticalToggleSlider.ShapeChange.zero;
}

void variable initialization expression of VerticalToggleSlider.growTransform(void *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0x3FF0000000000000;
  a1[4] = 0;
  a1[5] = 0;
}

id variable initialization expression of WaveformPlayIndicator.colorPalette()
{
  id v0 = self;
  id v1 = [v0 tintColor];
  id v2 = [v0 labelColor];
  id v3 = [v2 colorWithAlphaComponent:0.35];

  id v4 = [v0 labelColor];
  id v5 = [v4 colorWithAlphaComponent:0.2];

  id v6 = [v0 labelColor];
  id v7 = [v6 colorWithAlphaComponent:0.6];

  return v1;
}

id variable initialization expression of WaveformPlayIndicator.waveform()
{
  id v0 = [self zero];

  return v0;
}

uint64_t variable initialization expression of WaveformPlayIndicator.cannedAnimationAsset()
{
  return BouncyBarsAsset.init()();
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIContentSizeCategory(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIContentSizeCategory(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

NSNumber protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIFontWeight()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance UIFontWeight(uint64_t a1, uint64_t a2)
{
  uint64_t result = static CGFloat._forceBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UIFontWeight(uint64_t a1, uint64_t a2)
{
  char v3 = static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UIFontWeight@<X0>(void *a1@<X8>)
{
  uint64_t result = static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = v3;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UIFontWeight(double *a1, double *a2)
{
  return *a1 == *a2;
}

double protocol witness for RawRepresentable.rawValue.getter in conformance UIFontWeight@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIContentSizeCategory()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIContentSizeCategory and conformance UIContentSizeCategory, type metadata accessor for UIContentSizeCategory);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIContentSizeCategory and conformance UIContentSizeCategory, type metadata accessor for UIContentSizeCategory);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIFontTextStyle()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontTextStyle and conformance UIFontTextStyle, type metadata accessor for UIFontTextStyle);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontTextStyle and conformance UIFontTextStyle, type metadata accessor for UIFontTextStyle);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIFontWeight()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIFontDescriptorFeatureKey()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorFeatureKey and conformance UIFontDescriptorFeatureKey, type metadata accessor for UIFontDescriptorFeatureKey);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorFeatureKey and conformance UIFontDescriptorFeatureKey, type metadata accessor for UIFontDescriptorFeatureKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t _sSo29UIFontDescriptorAttributeNameas35_HasCustomAnyHashableRepresentationSCsACP03_tofgH0s0gH0VSgyFTW_0()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&_sSo29UIFontDescriptorAttributeNameaABSHSCWL_0, _sSo29UIFontDescriptorAttributeNameaMa_0);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&_sSo29UIFontDescriptorAttributeNameaABs20_SwiftNewtypeWrapperSCWL_0, _sSo29UIFontDescriptorAttributeNameaMa_0);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NLLanguage()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage, type metadata accessor for NLLanguage);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage, type metadata accessor for NLLanguage);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t _sSo21NSAttributedStringKeyas35_HasCustomAnyHashableRepresentationSCsACP03_toefG0s0fG0VSgyFTW_1()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes((unint64_t *)&_sSo21NSAttributedStringKeyaABSHSCWL_1, _sSo21NSAttributedStringKeyaMa_1);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&_sSo21NSAttributedStringKeyaABs20_SwiftNewtypeWrapperSCWL_1, _sSo21NSAttributedStringKeyaMa_1);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t _sSo38UIApplicationOpenExternalURLOptionsKeyas35_HasCustomAnyHashableRepresentationSCsACP03_toghI0s0hI0VSgyFTW_0()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&_sSo38UIApplicationOpenExternalURLOptionsKeyaABSHSCWL_0, _sSo38UIApplicationOpenExternalURLOptionsKeyaMa_0);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&_sSo38UIApplicationOpenExternalURLOptionsKeyaABs20_SwiftNewtypeWrapperSCWL_0, _sSo38UIApplicationOpenExternalURLOptionsKeyaMa_0);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance CAGradientLayerType()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type CAGradientLayerType and conformance CAGradientLayerType, type metadata accessor for CAGradientLayerType);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type CAGradientLayerType and conformance CAGradientLayerType, type metadata accessor for CAGradientLayerType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIImagePickerControllerInfoKey()
{
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIImagePickerControllerInfoKey and conformance UIImagePickerControllerInfoKey, type metadata accessor for UIImagePickerControllerInfoKey);
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIImagePickerControllerInfoKey and conformance UIImagePickerControllerInfoKey, type metadata accessor for UIImagePickerControllerInfoKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance UIFontWeight()
{
  return Double.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance UIFontWeight()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance UIFontWeight()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NLLanguage(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIContentSizeCategory(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIContentSizeCategory(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

__n128 __swift_memcpy32_8_1(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
}

void type metadata accessor for UIViewKeyframeAnimationOptions(uint64_t a1)
{
}

void type metadata accessor for UIUserInterfaceStyle(uint64_t a1)
{
}

void type metadata accessor for CGPathRef(uint64_t a1)
{
}

void _sSo10CGColorRefaMa_0(uint64_t a1)
{
}

void type metadata accessor for CAGradientLayerType(uint64_t a1)
{
}

void _sSo9CTLineRefaMa_0(uint64_t a1)
{
}

void _sSo10CTFrameRefaMa_0(uint64_t a1)
{
}

void type metadata accessor for CTFramesetterRef(uint64_t a1)
{
}

void type metadata accessor for NSTextAlignment(uint64_t a1)
{
}

__n128 __swift_memcpy16_8_1(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void _sSo8_NSRangeVMa_0(uint64_t a1)
{
}

__n128 __swift_memcpy48_8_0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void _sSo17CGAffineTransformVMa_0(uint64_t a1)
{
}

void type metadata accessor for UIAxis(uint64_t a1)
{
}

void type metadata accessor for UIRectCorner(uint64_t a1)
{
}

void _sSo7CGPointVMa_1(uint64_t a1)
{
}

void _sSo6CGSizeVMa_1(uint64_t a1)
{
}

void type metadata accessor for UIImagePickerControllerInfoKey(uint64_t a1)
{
}

void _sSo6CGRectVMa_1(uint64_t a1)
{
}

void _sSo29UIFontDescriptorAttributeNameaMa_0(uint64_t a1)
{
}

void type metadata accessor for UIFontDescriptorFeatureKey(uint64_t a1)
{
}

void type metadata accessor for UIOffset(uint64_t a1)
{
}

void type metadata accessor for UIImageSymbolScale(uint64_t a1)
{
}

void type metadata accessor for UIImageSymbolWeight(uint64_t a1)
{
}

void type metadata accessor for UIFontWeight(uint64_t a1)
{
}

void type metadata accessor for UIFontTextStyle(uint64_t a1)
{
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
}

void _sSo23NSDirectionalEdgeInsetsVMa_0(uint64_t a1)
{
}

uint64_t base witness table accessor for RawRepresentable in UIContentSizeCategory()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIContentSizeCategory and conformance UIContentSizeCategory, type metadata accessor for UIContentSizeCategory);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIContentSizeCategory()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIContentSizeCategory and conformance UIContentSizeCategory, type metadata accessor for UIContentSizeCategory);
}

uint64_t base witness table accessor for Equatable in UIContentSizeCategory()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIContentSizeCategory and conformance UIContentSizeCategory, type metadata accessor for UIContentSizeCategory);
}

uint64_t base witness table accessor for RawRepresentable in UIFontTextStyle()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontTextStyle and conformance UIFontTextStyle, type metadata accessor for UIFontTextStyle);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIFontTextStyle()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontTextStyle and conformance UIFontTextStyle, type metadata accessor for UIFontTextStyle);
}

uint64_t base witness table accessor for Equatable in UIFontTextStyle()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontTextStyle and conformance UIFontTextStyle, type metadata accessor for UIFontTextStyle);
}

uint64_t base witness table accessor for RawRepresentable in UIFontWeight()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontWeight and conformance UIFontWeight, type metadata accessor for UIFontWeight);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIFontWeight()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontWeight and conformance UIFontWeight, type metadata accessor for UIFontWeight);
}

uint64_t base witness table accessor for Equatable in UIFontWeight()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontWeight and conformance UIFontWeight, type metadata accessor for UIFontWeight);
}

uint64_t base witness table accessor for RawRepresentable in UIFontDescriptorFeatureKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorFeatureKey and conformance UIFontDescriptorFeatureKey, type metadata accessor for UIFontDescriptorFeatureKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIFontDescriptorFeatureKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorFeatureKey and conformance UIFontDescriptorFeatureKey, type metadata accessor for UIFontDescriptorFeatureKey);
}

uint64_t base witness table accessor for Equatable in UIFontDescriptorFeatureKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIFontDescriptorFeatureKey and conformance UIFontDescriptorFeatureKey, type metadata accessor for UIFontDescriptorFeatureKey);
}

uint64_t _sSo29UIFontDescriptorAttributeNameas20_SwiftNewtypeWrapperSCSYWb_0()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&_sSo29UIFontDescriptorAttributeNameaABSYSCWL_0, _sSo29UIFontDescriptorAttributeNameaMa_0);
}

uint64_t _sSo29UIFontDescriptorAttributeNameas20_SwiftNewtypeWrapperSCs35_HasCustomAnyHashableRepresentationPWb_0()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&_sSo29UIFontDescriptorAttributeNameaABs35_HasCustomAnyHashableRepresentationSCWL_0, _sSo29UIFontDescriptorAttributeNameaMa_0);
}

uint64_t base witness table accessor for RawRepresentable in UIImagePickerControllerInfoKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIImagePickerControllerInfoKey and conformance UIImagePickerControllerInfoKey, type metadata accessor for UIImagePickerControllerInfoKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIImagePickerControllerInfoKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIImagePickerControllerInfoKey and conformance UIImagePickerControllerInfoKey, type metadata accessor for UIImagePickerControllerInfoKey);
}

uint64_t base witness table accessor for Equatable in UIAxis()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIAxis and conformance UIAxis, type metadata accessor for UIAxis);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in UIAxis()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIAxis and conformance UIAxis, type metadata accessor for UIAxis);
}

uint64_t base witness table accessor for RawRepresentable in UIAxis()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIAxis and conformance UIAxis, type metadata accessor for UIAxis);
}

uint64_t base witness table accessor for SetAlgebra in UIAxis()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIAxis and conformance UIAxis, type metadata accessor for UIAxis);
}

uint64_t base witness table accessor for RawRepresentable in CAGradientLayerType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type CAGradientLayerType and conformance CAGradientLayerType, type metadata accessor for CAGradientLayerType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in CAGradientLayerType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type CAGradientLayerType and conformance CAGradientLayerType, type metadata accessor for CAGradientLayerType);
}

uint64_t base witness table accessor for Equatable in CAGradientLayerType()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type CAGradientLayerType and conformance CAGradientLayerType, type metadata accessor for CAGradientLayerType);
}

uint64_t base witness table accessor for Equatable in UIViewKeyframeAnimationOptions()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIViewKeyframeAnimationOptions and conformance UIViewKeyframeAnimationOptions, type metadata accessor for UIViewKeyframeAnimationOptions);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in UIViewKeyframeAnimationOptions()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIViewKeyframeAnimationOptions and conformance UIViewKeyframeAnimationOptions, type metadata accessor for UIViewKeyframeAnimationOptions);
}

uint64_t base witness table accessor for RawRepresentable in UIViewKeyframeAnimationOptions()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIViewKeyframeAnimationOptions and conformance UIViewKeyframeAnimationOptions, type metadata accessor for UIViewKeyframeAnimationOptions);
}

uint64_t base witness table accessor for SetAlgebra in UIViewKeyframeAnimationOptions()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIViewKeyframeAnimationOptions and conformance UIViewKeyframeAnimationOptions, type metadata accessor for UIViewKeyframeAnimationOptions);
}

uint64_t base witness table accessor for Equatable in UIImagePickerControllerInfoKey()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type UIImagePickerControllerInfoKey and conformance UIImagePickerControllerInfoKey, type metadata accessor for UIImagePickerControllerInfoKey);
}

uint64_t _sSo29UIFontDescriptorAttributeNameaSHSCSQWb_0()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&_sSo29UIFontDescriptorAttributeNameaABSQSCWL_0, _sSo29UIFontDescriptorAttributeNameaMa_0);
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

uint64_t _s10Foundation3URLVSgWOb_1(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&_s10Foundation3URLVSgMD_1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s10Foundation3URLVSgWOh_1(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&_s10Foundation3URLVSgMD_1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for NLLanguage(uint64_t a1)
{
}

void _sSo38UIApplicationOpenExternalURLOptionsKeyaMa_0(uint64_t a1)
{
}

void type metadata accessor for CTParagraphStyleRef(uint64_t a1)
{
}

void _sSo8CTRunRefaMa_0(uint64_t a1)
{
}

void _sSo21NSAttributedStringKeyaMa_1(uint64_t a1)
{
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
}

void type metadata accessor for UIUserInterfaceLayoutDirection(uint64_t a1)
{
}

uint64_t _sSo21NSAttributedStringKeyas20_SwiftNewtypeWrapperSCSYWb_1()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&_sSo21NSAttributedStringKeyaABSYSCWL_1, _sSo21NSAttributedStringKeyaMa_1);
}

uint64_t _sSo21NSAttributedStringKeyas20_SwiftNewtypeWrapperSCs35_HasCustomAnyHashableRepresentationPWb_1()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&_sSo21NSAttributedStringKeyaABs35_HasCustomAnyHashableRepresentationSCWL_1, _sSo21NSAttributedStringKeyaMa_1);
}

uint64_t _sSo38UIApplicationOpenExternalURLOptionsKeyas20_SwiftNewtypeWrapperSCSYWb_0()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&_sSo38UIApplicationOpenExternalURLOptionsKeyaABSYSCWL_0, _sSo38UIApplicationOpenExternalURLOptionsKeyaMa_0);
}

uint64_t _sSo38UIApplicationOpenExternalURLOptionsKeyas20_SwiftNewtypeWrapperSCs35_HasCustomAnyHashableRepresentationPWb_0()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&_sSo38UIApplicationOpenExternalURLOptionsKeyaABs35_HasCustomAnyHashableRepresentationSCWL_0, _sSo38UIApplicationOpenExternalURLOptionsKeyaMa_0);
}

uint64_t base witness table accessor for RawRepresentable in NLLanguage()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage, type metadata accessor for NLLanguage);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NLLanguage()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage, type metadata accessor for NLLanguage);
}

uint64_t base witness table accessor for Equatable in NLLanguage()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&lazy protocol witness table cache variable for type NLLanguage and conformance NLLanguage, type metadata accessor for NLLanguage);
}

uint64_t _sSo38UIApplicationOpenExternalURLOptionsKeyaSHSCSQWb_0()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&_sSo38UIApplicationOpenExternalURLOptionsKeyaABSQSCWL_0, _sSo38UIApplicationOpenExternalURLOptionsKeyaMa_0);
}

uint64_t _sSo21NSAttributedStringKeyaSHSCSQWb_1()
{
  return lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes(&_sSo21NSAttributedStringKeyaABSQSCWL_1, _sSo21NSAttributedStringKeyaMa_1);
}

void Card.ViewController.hostingController.setter()
{
}

uint64_t Artwork.caching.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of (String, Any)(v1, a1, &demangling cache variable for type metadata for Artwork.Caching?);
}

uint64_t Artwork.caching.setter(uint64_t a1)
{
  return outlined assign with take of Album?(a1, v1, &demangling cache variable for type metadata for Artwork.Caching?);
}

void *Artwork.content.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  outlined copy of Artwork.Content?(v1, *(void **)(v0 + 32));
  return v1;
}

id outlined copy of Artwork.Content?(id result, void *a2)
{
  if (a2)
  {
    id v2 = result;
    return a2;
  }
  return result;
}

void Artwork.content.setter(uint64_t a1, uint64_t a2)
{
  outlined consume of Artwork.Content?(*(void **)(v2 + 24), *(void **)(v2 + 32));
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
}

void outlined consume of Artwork.Content?(void *a1, void *a2)
{
  if (a2)
  {
  }
}

uint64_t Artwork.decoration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Artwork(0);
  return outlined init with copy of Artwork.Decoration(v1 + *(int *)(v3 + 24), a1, type metadata accessor for Artwork.Decoration);
}

uint64_t type metadata accessor for Artwork(uint64_t a1)
{
  return type metadata accessor for Notice.Variant(a1, (uint64_t *)&type metadata singleton initialization cache for Artwork);
}

uint64_t type metadata accessor for Artwork.Decoration(uint64_t a1)
{
  return type metadata accessor for Notice.Variant(a1, (uint64_t *)&type metadata singleton initialization cache for Artwork.Decoration);
}

uint64_t Artwork.decoration.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Artwork(0) + 24);

  return outlined assign with take of Artwork.Decoration(a1, v3);
}

uint64_t outlined assign with take of Artwork.Decoration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Artwork.Decoration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

CFRange (__swiftcall *Artwork.decoration.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

uint64_t Artwork.placeholder.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Artwork(0);
  return outlined init with copy of (String, Any)(v1 + *(int *)(v3 + 28), a1, &demangling cache variable for type metadata for Artwork.Placeholder?);
}

uint64_t Artwork.placeholder.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Artwork(0);
  return outlined assign with take of Album?(a1, v1 + *(int *)(v3 + 28), &demangling cache variable for type metadata for Artwork.Placeholder?);
}

CFRange (__swiftcall *Artwork.placeholder.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

uint64_t Artwork.size.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Artwork(0) + 32));
}

uint64_t Artwork.size.setter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result = type metadata accessor for Artwork(0);
  uint64_t v10 = v4 + *(int *)(result + 32);
  *(void *)uint64_t v10 = a1;
  *(void *)(v10 + 8) = a2;
  *(void *)(v10 + 16) = a3;
  *(unsigned char *)(v10 + 24) = a4;
  return result;
}

CFRange (__swiftcall *Artwork.size.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

double Artwork.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (int *)type metadata accessor for Artwork(0);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  uint64_t v3 = (void *)(a1 + v2[6]);
  uint64_t v4 = (int *)type metadata accessor for Artwork.Decoration(0);
  v3[1] = 0;
  v3[2] = 0;
  *uint64_t v3 = 0;
  uint64_t v5 = (char *)v3 + v4[5];
  uint64_t v6 = type metadata accessor for UIView.Corner();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = v4[6];
  *(void *)((char *)v3 + v7) = [self blackColor];
  *(void *)((char *)v3 + v4[7]) = 1;
  id v8 = (_OWORD *)(a1 + v2[7]);
  v8[1] = 0u;
  v8[2] = 0u;
  *id v8 = 0u;
  uint64_t v9 = a1 + v2[8];
  double result = 0.0;
  *(_OWORD *)uint64_t v9 = xmmword_1004A3B60;
  *(void *)(v9 + 16) = 0;
  *(unsigned char *)(v9 + 24) = 0;
  return result;
}

uint64_t static Artwork.with(_:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (int *)type metadata accessor for Artwork(0);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 32) = 0;
  uint64_t v5 = (void *)(a2 + v4[6]);
  uint64_t v6 = (int *)type metadata accessor for Artwork.Decoration(0);
  v5[1] = 0;
  void v5[2] = 0;
  *uint64_t v5 = 0;
  uint64_t v7 = (char *)v5 + v6[5];
  uint64_t v8 = type metadata accessor for UIView.Corner();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = v6[6];
  *(void *)((char *)v5 + v9) = [self blackColor];
  *(void *)((char *)v5 + v6[7]) = 1;
  uint64_t v10 = (_OWORD *)(a2 + v4[7]);
  v10[1] = 0u;
  v10[2] = 0u;
  _OWORD *v10 = 0u;
  uint64_t v11 = a2 + v4[8];
  *(_OWORD *)uint64_t v11 = xmmword_1004A3B60;
  *(void *)(v11 + 16) = 0;
  *(unsigned char *)(v11 + 24) = 0;
  return a1(a2);
}

char *protocol witness for UIContentConfiguration.makeContentView() in conformance Artwork()
{
  __chkstk_darwin();
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Artwork.Decoration(v0, (uint64_t)v2, type metadata accessor for Artwork);
  id v3 = objc_allocWithZone((Class)type metadata accessor for Artwork.View(0));
  uint64_t v4 = Artwork.View.init(configuration:)((uint64_t)v2);
  lazy protocol witness table accessor for type Artwork.View and conformance Artwork.View(&lazy protocol witness table cache variable for type Artwork.View and conformance Artwork.View, (void (*)(uint64_t))type metadata accessor for Artwork.View);
  return v4;
}

uint64_t protocol witness for UIContentConfiguration.updated(for:) in conformance Artwork@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Artwork.Decoration(v1, a1, type metadata accessor for Artwork);
}

char *Artwork.View.__allocating_init(configuration:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return Artwork.View.init(configuration:)(a1);
}

char *Artwork.View.init(configuration:)(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = &v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = &v1[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds];
  *(_OWORD *)uint64_t v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  uint64_t v6 = OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView;
  id v7 = objc_allocWithZone((Class)UIImageView);
  uint64_t v8 = v1;
  *(void *)&v1[v6] = [v7 init];
  uint64_t v9 = &v8[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  outlined init with copy of Artwork.Decoration(a1, (uint64_t)&v8[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration], type metadata accessor for Artwork);

  v26.receiver = v8;
  v26.super_class = ObjectType;
  uint64_t v10 = (char *)objc_msgSendSuper2(&v26, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  [v10 setContentMode:4];
  uint64_t v11 = OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView;
  id v12 = [*(id *)&v10[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView] layer];
  [v12 setMinificationFilter:kCAFilterTrilinear];

  id v13 = [*(id *)&v10[v11] layer];
  [v13 setMagnificationFilter:kCAFilterTrilinear];

  id v14 = *(void **)&v10[v11];
  [v14 setContentMode:2];
  [v14 setClipsToBounds:1];
  [v14 setAccessibilityIgnoresInvertColors:1];
  [v10 addSubview:v14];
  uint64_t v15 = a1 + *(int *)(type metadata accessor for Artwork(0) + 28);
  unint64_t v16 = *(void **)(v15 + 24);
  if (v16)
  {
    uint64_t v17 = *(void **)&v10[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
    if (v17)
    {
      uint64_t v18 = *(void **)v15;
      uint64_t v19 = *(void **)(v15 + 8);
      uint64_t v20 = *(void **)(v15 + 16);
      uint64_t v21 = *(void *)(v15 + 32);
      uint64_t v22 = *(void *)(v15 + 40);
      swift_getObjectType();
      lazy protocol witness table accessor for type Artwork.Placeholder and conformance Artwork.Placeholder();
      id v25 = (void *)swift_allocObject();
      v25[2] = v18;
      v25[3] = v19;
      void v25[4] = v20;
      v25[5] = v16;
      v25[6] = v21;
      v25[7] = v22;
      outlined copy of Artwork.Placeholder?(v18, v19, v20, v16);
      outlined copy of Artwork.Placeholder?(v18, v19, v20, v16);
      id v23 = v17;
      dispatch thunk of UIContentView.configuration.setter();
      outlined consume of Artwork.Placeholder?(v18, v19, v20, v16);
    }
  }
  Artwork.View.applyDecoration()();
  Artwork.View.reloadArtworkCatalogIfNeeded()();

  outlined destroy of Artwork(a1, type metadata accessor for Artwork);
  return v10;
}

uint64_t Artwork.View.typedConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess();
  return outlined init with copy of Artwork.Decoration(v3, a1, type metadata accessor for Artwork);
}

uint64_t Artwork.View.typedConfiguration.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Artwork(0);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v23 - v7;
  __chkstk_darwin();
  uint64_t v10 = (char *)&v23 - v9;
  uint64_t v11 = v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess();
  outlined init with copy of Artwork.Decoration(v11, (uint64_t)v10, type metadata accessor for Artwork);
  swift_beginAccess();
  outlined assign with copy of Artwork(a1, v11);
  swift_endAccess();
  outlined init with copy of Artwork.Decoration(v11, (uint64_t)v8, type metadata accessor for Artwork);
  char v12 = specialized static Artwork.__derived_struct_equals(_:_:)((uint64_t)v8, (uint64_t)v10);
  outlined destroy of Artwork((uint64_t)v8, type metadata accessor for Artwork);
  if ((v12 & 1) == 0)
  {
    outlined init with copy of Artwork.Decoration(v11, (uint64_t)v6, type metadata accessor for Artwork);
    id v13 = &v6[*(int *)(v4 + 28)];
    id v14 = (void *)*((void *)v13 + 3);
    if (v14 && *(void *)(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView))
    {
      uint64_t v15 = *(void **)v13;
      unint64_t v16 = (void *)*((void *)v13 + 1);
      uint64_t v17 = (void *)*((void *)v13 + 2);
      uint64_t v18 = *((void *)v13 + 4);
      uint64_t v19 = *((void *)v13 + 5);
      id v25 = *(id *)(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView);
      uint64_t v26 = v18;
      uint64_t v28 = *(void *)(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView + 8);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v30 = &type metadata for Artwork.Placeholder;
      unint64_t v31 = lazy protocol witness table accessor for type Artwork.Placeholder and conformance Artwork.Placeholder();
      uint64_t v20 = (void *)swift_allocObject();
      uint64_t v29 = v20;
      v20[2] = v15;
      v20[3] = v16;
      void v20[4] = v17;
      v20[5] = v14;
      v20[6] = v26;
      v20[7] = v19;
      int64_t v24 = v17;
      outlined copy of Artwork.Placeholder?(v15, v16, v17, v14);
      outlined copy of Artwork.Placeholder?(v15, v16, v17, v14);
      id v21 = v25;
      dispatch thunk of UIContentView.configuration.setter();
      outlined consume of Artwork.Placeholder?(v15, v16, v24, v14);
    }
    Artwork.View.applyDecoration()();
    Artwork.View.reloadArtworkCatalogIfNeeded()();
    outlined destroy of Artwork((uint64_t)v6, type metadata accessor for Artwork);
  }
  outlined destroy of Artwork(a1, type metadata accessor for Artwork);
  return outlined destroy of Artwork((uint64_t)v10, type metadata accessor for Artwork);
}

void (*Artwork.View.typedConfiguration.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  size_t v4 = *(void *)(*(void *)(type metadata accessor for Artwork(0) - 8) + 64);
  id v3[4] = malloc(v4);
  uint64_t v5 = malloc(v4);
  v3[5] = v5;
  uint64_t v6 = v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess();
  outlined init with copy of Artwork.Decoration(v6, (uint64_t)v5, type metadata accessor for Artwork);
  return Artwork.View.typedConfiguration.modify;
}

void Artwork.View.typedConfiguration.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 32);
  size_t v4 = *(void **)(*(void *)a1 + 40);
  if (a2)
  {
    outlined init with copy of Artwork.Decoration(*(void *)(*(void *)a1 + 40), (uint64_t)v3, type metadata accessor for Artwork);
    Artwork.View.typedConfiguration.setter((uint64_t)v3);
    outlined destroy of Artwork((uint64_t)v4, type metadata accessor for Artwork);
  }
  else
  {
    Artwork.View.typedConfiguration.setter(*(void *)(*(void *)a1 + 40));
  }
  free(v4);
  free(v3);

  free(v2);
}

id Artwork.View.currentImage.getter()
{
  id v1 = [*(id *)(v0 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView) image];

  return v1;
}

uint64_t Artwork.View.imageDidChangeHandler.getter()
{
  id v1 = (uint64_t *)(v0 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler);
  swift_beginAccess();
  uint64_t v2 = *v1;
  outlined copy of (@escaping @callee_guaranteed () -> ())?(*v1);
  return v2;
}

uint64_t Artwork.View.imageDidChangeHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler);
  swift_beginAccess();
  uint64_t v6 = *v5;
  *uint64_t v5 = a1;
  v5[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v6);
}

uint64_t (*Artwork.View.imageDidChangeHandler.modify())()
{
  return ArtworkVideoReportingController.videoArtworkContextProviding.modify;
}

Swift::Void __swiftcall Artwork.View.layoutSubviews()()
{
  v27.receiver = v0;
  v27.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v27, "layoutSubviews");
  [v0 bounds];
  double v2 = v1;
  double v4 = v3;
  [v0 bounds];
  double v7 = Artwork.View.fittingImageSize(in:)(v5, v6);
  double v9 = v8;
  switch((unint64_t)[v0 contentMode])
  {
    case 6uLL:
      [v0 bounds];
      double MaxY = CGRectGetMaxY(v28);
      v29.origin.CGFloat x = v2;
      v29.origin.CGFloat y = v4;
      v29.size.CGFloat width = v7;
      v29.size.height = v9;
      double v4 = MaxY - CGRectGetHeight(v29);
      break;
    case 8uLL:
      [v0 bounds];
      double MaxX = CGRectGetMaxX(v30);
      v31.origin.CGFloat x = v2;
      v31.origin.CGFloat y = v4;
      v31.size.CGFloat width = v7;
      v31.size.height = v9;
      double v2 = MaxX - CGRectGetWidth(v31);
      break;
    default:
      break;
  }
  char v12 = *(void **)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView];
  CGRect.centeringAlong(axes:in:)();
  objc_msgSend(v12, "setFrame:");
  id v13 = *(void **)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
  if (v13) {
    objc_msgSend(v13, "setFrame:", v2, v4, v7, v9);
  }
  id v14 = &v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds];
  CGFloat v15 = *(double *)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds];
  CGFloat v16 = *(double *)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds + 8];
  CGFloat v17 = *(double *)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds + 16];
  CGFloat v18 = *(double *)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds + 24];
  [v0 bounds];
  v33.origin.CGFloat x = v19;
  v33.origin.CGFloat y = v20;
  v33.size.CGFloat width = v21;
  v33.size.height = v22;
  v32.origin.CGFloat x = v15;
  v32.origin.CGFloat y = v16;
  v32.size.CGFloat width = v17;
  v32.size.height = v18;
  if (!CGRectEqualToRect(v32, v33))
  {
    [v0 bounds];
    *(void *)id v14 = v23;
    *((void *)v14 + 1) = v24;
    *((void *)v14 + 2) = v25;
    *((void *)v14 + 3) = v26;
    Artwork.View.reloadArtworkCatalogIfNeeded()();
  }
  Artwork.View.applyDecoration()();
}

double Artwork.View.fittingImageSize(in:)(double a1, double a2)
{
  if (a1 == 0.0 && a2 == 0.0)
  {
    id v5 = [v2 artworkCatalog];
    double v6 = 0.0;
    if (v5)
    {
      double v7 = v5;
      *(double *)&uint64_t v8 = COERCE_DOUBLE(MPArtworkCatalog.originalSize.getter());
      char v10 = v9;

      if ((v10 & 1) == 0) {
        return *(double *)&v8;
      }
    }
    return v6;
  }
  CGSize.aspectRatio.getter();
  double v12 = v11;
  id v13 = [*(id *)&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView] image];
  if (v13)
  {
    id v14 = v13;
    [v13 size];
  }
  else
  {
    id v17 = [v2 artworkCatalog];
    if (!v17) {
      return a1;
    }
    CGFloat v18 = v17;
    MPArtworkCatalog.originalSize.getter();
    char v20 = v19;

    if (v20) {
      return a1;
    }
  }
  CGSize.aspectRatio.getter();
  if ((static ApproximatelyEquatable.!=~ infix(_:_:)() & 1) == 0) {
    return a1;
  }
  CGSize.aspectRatio.getter();
  if (vabdd_f64(v12, v15) <= 0.1) {
    return a1;
  }
  CGSize.aspectRatio.getter();
  if (v16 <= 1.0)
  {
    double v6 = v16 * a2;
    if (v16 * a2 > a1) {
      return a1;
    }
  }
  else
  {
    double v6 = a1;
    if (a1 / v16 > a2) {
      return v16 * a2;
    }
  }
  return v6;
}

void Artwork.View.reloadArtworkCatalogIfNeeded()()
{
  double v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  id v3 = [v0 artworkCatalog];
  uint64_t v4 = (uint64_t)v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess();
  if (*(void *)(v4 + 32))
  {
    id v5 = *(void **)(v4 + 32);
    id v6 = v5;
  }
  else
  {
    id v5 = 0;
  }
  swift_endAccess();
  char v7 = Optional<A>.isArtworkVisuallyIdentical(to:)((uint64_t)v5, (unint64_t)v3);

  if ((v7 & 1) == 0)
  {
    [v1 clearArtworkCatalogs];
    Artwork.View.apply(artworkImage:)(0);
  }
  [v1 bounds];
  if (v9 == 0.0 && v8 == 0.0 || (char v10 = *(void **)(v4 + 32)) == 0)
  {
    Artwork.View.apply(artworkImage:)(0);
    [v1 setNeedsLayout];
    return;
  }
  outlined init with copy of (String, Any)(v4, (uint64_t)v47, &demangling cache variable for type metadata for Artwork.Caching?);
  outlined init with copy of (String, Any)((uint64_t)v47, (uint64_t)&v45, &demangling cache variable for type metadata for Artwork.Caching?);
  if (v46)
  {
    id v11 = v10;
    swift_bridgeObjectRetain();
    outlined destroy of Artwork.Caching((uint64_t)&v45);
  }
  else
  {
    id v12 = v10;
    outlined destroy of TaskPriority?((uint64_t)&v45, &demangling cache variable for type metadata for Artwork.Caching?);
  }
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  outlined init with copy of (String, Any)((uint64_t)v47, (uint64_t)&v45, &demangling cache variable for type metadata for Artwork.Caching?);
  if (v46)
  {
    uint64_t Strong = swift_weakLoadStrong();
    outlined destroy of Artwork.Caching((uint64_t)&v45);
  }
  else
  {
    outlined destroy of TaskPriority?((uint64_t)&v45, &demangling cache variable for type metadata for Artwork.Caching?);
    uint64_t Strong = 0;
  }
  [v10 setCacheIdentifier:v13 forCacheReference:Strong];

  swift_unknownObjectRelease();
  id v15 = [v1 traitCollection];
  [v15 displayScale];
  double v17 = v16;

  [v10 setDestinationScale:v17];
  uint64_t v18 = v4 + *(int *)(type metadata accessor for Artwork(0) + 32);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 8);
  if (v19 == 255)
  {
    [v1 bounds];
    double v21 = v20;
    double v23 = v22;
  }
  else
  {
    uint64_t v24 = *(void *)(v18 + 16);
    uint64_t v25 = *(void *)v18;
    char v26 = *(unsigned char *)(v18 + 24);
    [v1 bounds];
    double v28 = v27;
    double v30 = v29;
    Artwork.Size.Dimension.value(in:)(v27, v29, v25, v19);
    double v21 = v31;
    Artwork.Size.Dimension.value(in:)(v28, v30, v24, v26);
    double v23 = v32;
  }
  objc_msgSend(v10, "setFittingSize:", v21, v23);
  objc_msgSend(v10, "setRenderHint:", (unint64_t)objc_msgSend(v10, "renderHint") | 1);
  id v33 = [v1 artworkCatalog];
  if (v33)
  {
    int64_t v34 = v33;
    [v33 scaledFittingSize];
    double v36 = v35;
    double v38 = v37;

    [v10 scaledFittingSize];
    if (v36 == v40 && v38 == v39)
    {
      id v41 = [v1 artworkCatalog];

      if (v41)
      {
        outlined destroy of TaskPriority?((uint64_t)v47, &demangling cache variable for type metadata for Artwork.Caching?);

        return;
      }
    }
  }
  else
  {
    [v10 scaledFittingSize];
  }
  MPArtworkCatalog.expectedRatio.getter();
  if ((v42 & 1) == 0) {
    [v1 setNeedsLayout];
  }
  uint64_t v45 = v1;
  uint64_t v43 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = v43;
  *(void *)(v44 + 24) = ObjectType;
  MPArtworkCatalog.setDestination<A>(_:for:completion:)((uint64_t)&v45, 1, (uint64_t)partial apply for closure #1 in Artwork.View.reloadArtworkCatalogIfNeeded(), v44, ObjectType);

  swift_release();
  outlined destroy of TaskPriority?((uint64_t)v47, &demangling cache variable for type metadata for Artwork.Caching?);
}

uint64_t Artwork.View.applyDecoration()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Artwork.Decoration?);
  __chkstk_darwin();
  uint64_t v78 = (char *)&v76 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v79 = (uint64_t *)((char *)&v76 - v2);
  __chkstk_darwin();
  uint64_t v86 = (uint64_t)&v76 - v3;
  __chkstk_darwin();
  uint64_t v87 = (uint64_t)&v76 - v4;
  __chkstk_darwin();
  int v83 = (uint64_t *)((char *)&v76 - v5);
  __chkstk_darwin();
  uint64_t v85 = (char *)&v76 - v6;
  __chkstk_darwin();
  double v8 = (char *)&v76 - v7;
  __chkstk_darwin();
  char v10 = (uint64_t *)((char *)&v76 - v9);
  __chkstk_darwin();
  id v12 = (char *)&v76 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
  __chkstk_darwin();
  id v14 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v84 = (uint64_t)&v76 - v15;
  __chkstk_darwin();
  uint64_t v80 = (uint64_t)&v76 - v16;
  __chkstk_darwin();
  uint64_t v18 = (char *)&v76 - v17;
  uint64_t v19 = (int *)type metadata accessor for Artwork.Decoration(0);
  uint64_t v89 = *((void *)v19 - 1);
  __chkstk_darwin();
  double v21 = (char *)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  double v23 = (char *)&v76 - v22;
  id v82 = *(id *)&v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView];
  [v82 frame];
  double v25 = v24;
  double v27 = v26;
  double v28 = &v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration];
  swift_beginAccess();
  uint64_t v29 = (uint64_t)&v28[*(int *)(type metadata accessor for Artwork(0) + 24)];
  char v91 = v23;
  outlined init with copy of Artwork.Decoration(v29, (uint64_t)v23, type metadata accessor for Artwork.Decoration);
  uint64_t v30 = *(void *)(v29 + v19[7]);
  if ((v30 & 1) != 0 && v25 < v27)
  {
    outlined init with copy of Artwork.Decoration((uint64_t)v91, (uint64_t)v21, type metadata accessor for Artwork.Decoration);
LABEL_6:
    outlined init with copy of (String, Any)((uint64_t)&v21[v19[5]], (uint64_t)v18, &demangling cache variable for type metadata for UIView.Corner?);
    outlined destroy of Artwork((uint64_t)v21, type metadata accessor for Artwork.Decoration);
    uint64_t v31 = type metadata accessor for UIView.Corner();
    int v32 = 1;
    BOOL v33 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v18, 1, v31) != 1;
    outlined destroy of TaskPriority?((uint64_t)v18, &demangling cache variable for type metadata for UIView.Corner?);
    [v0 setClipsToBounds:v33];
    id v34 = *(id *)&v91[v19[6]];
    goto LABEL_8;
  }
  outlined init with copy of Artwork.Decoration((uint64_t)v91, (uint64_t)v21, type metadata accessor for Artwork.Decoration);
  if ((v30 & 2) != 0 && v27 < v25) {
    goto LABEL_6;
  }
  outlined destroy of Artwork((uint64_t)v21, type metadata accessor for Artwork.Decoration);
  [v0 setClipsToBounds:0];
  id v34 = [self clearColor];
  int v32 = 0;
LABEL_8:
  [v0 setBackgroundColor:v34];

  uint64_t v77 = v14;
  int v90 = v32;
  if (v32)
  {
    outlined init with copy of Artwork.Decoration((uint64_t)v91, (uint64_t)v12, type metadata accessor for Artwork.Decoration);
    uint64_t v35 = v89;
    double v36 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v89 + 56);
    double v37 = v12;
    uint64_t v38 = 0;
  }
  else
  {
    uint64_t v35 = v89;
    double v36 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v89 + 56);
    double v37 = v12;
    uint64_t v38 = 1;
  }
  uint64_t v88 = v36;
  v36((uint64_t)v37, v38, 1, v19);
  outlined init with copy of (String, Any)((uint64_t)v12, (uint64_t)v10, &demangling cache variable for type metadata for Artwork.Decoration?);
  double v39 = *(unsigned int (**)(uint64_t *, uint64_t, int *))(v35 + 48);
  if (v39(v10, 1, v19) == 1)
  {
    double v40 = v0;
    outlined destroy of TaskPriority?((uint64_t)v10, &demangling cache variable for type metadata for Artwork.Decoration?);
    uint64_t v41 = 0;
    LOBYTE(v42) = 0;
    uint64_t v43 = 0;
  }
  else
  {
    uint64_t v41 = *v10;
    uint64_t v42 = v10[1];
    uint64_t v43 = (void *)v10[2];
    id v44 = v43;
    uint64_t v45 = v0;
    outlined destroy of Artwork((uint64_t)v10, type metadata accessor for Artwork.Decoration);
  }
  UIView.border.setter(v41, v42, v43);
  outlined init with copy of (String, Any)((uint64_t)v12, (uint64_t)v8, &demangling cache variable for type metadata for Artwork.Decoration?);
  if (v39((uint64_t *)v8, 1, v19) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v8, &demangling cache variable for type metadata for Artwork.Decoration?);
    uint64_t v46 = type metadata accessor for UIView.Corner();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v80, 1, 1, v46);
  }
  else
  {
    outlined init with copy of (String, Any)((uint64_t)&v8[v19[5]], v80, &demangling cache variable for type metadata for UIView.Corner?);
    outlined destroy of Artwork((uint64_t)v8, type metadata accessor for Artwork.Decoration);
  }
  uint64_t v47 = (uint64_t)v85;
  uint64_t v48 = v83;
  UIView.corner.setter();

  outlined destroy of TaskPriority?((uint64_t)v12, &demangling cache variable for type metadata for Artwork.Decoration?);
  if (v90)
  {
    uint64_t v49 = 1;
  }
  else
  {
    outlined init with copy of Artwork.Decoration((uint64_t)v91, v47, type metadata accessor for Artwork.Decoration);
    uint64_t v49 = 0;
  }
  v88(v47, v49, 1, v19);
  outlined init with copy of (String, Any)(v47, (uint64_t)v48, &demangling cache variable for type metadata for Artwork.Decoration?);
  unsigned int v50 = v39(v48, 1, v19);
  uint64_t v81 = v0;
  unint64_t v51 = v39;
  if (v50 == 1)
  {
    id v52 = v82;
    id v53 = v82;
    outlined destroy of TaskPriority?((uint64_t)v48, &demangling cache variable for type metadata for Artwork.Decoration?);
    uint64_t v54 = 0;
    LOBYTE(v55) = 0;
    uint64_t v56 = 0;
  }
  else
  {
    uint64_t v54 = *v48;
    uint64_t v55 = v48[1];
    uint64_t v56 = (void *)v48[2];
    id v57 = v56;
    id v52 = v82;
    id v58 = v82;
    outlined destroy of Artwork((uint64_t)v48, type metadata accessor for Artwork.Decoration);
  }
  UIView.border.setter(v54, v55, v56);
  uint64_t v59 = v87;
  outlined init with copy of (String, Any)(v47, v87, &demangling cache variable for type metadata for Artwork.Decoration?);
  CGRect v60 = v51;
  if (v51((uint64_t *)v59, 1, v19) == 1)
  {
    outlined destroy of TaskPriority?(v59, &demangling cache variable for type metadata for Artwork.Decoration?);
    uint64_t v61 = type metadata accessor for UIView.Corner();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v84, 1, 1, v61);
  }
  else
  {
    outlined init with copy of (String, Any)(v59 + v19[5], v84, &demangling cache variable for type metadata for UIView.Corner?);
    outlined destroy of Artwork(v59, type metadata accessor for Artwork.Decoration);
  }
  uint64_t v62 = v81;
  UIView.corner.setter();

  outlined destroy of TaskPriority?(v47, &demangling cache variable for type metadata for Artwork.Decoration?);
  if (v90)
  {
    uint64_t v63 = 1;
    uint64_t v64 = v86;
  }
  else
  {
    uint64_t v64 = v86;
    outlined init with copy of Artwork.Decoration((uint64_t)v91, v86, type metadata accessor for Artwork.Decoration);
    uint64_t v63 = 0;
  }
  v88(v64, v63, 1, v19);
  uint64_t v65 = *(void **)&v62[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
  if (v65)
  {
    uint64_t v66 = v79;
    outlined init with copy of (String, Any)(v64, (uint64_t)v79, &demangling cache variable for type metadata for Artwork.Decoration?);
    if (v60(v66, 1, v19) == 1)
    {
      id v67 = v65;
      outlined destroy of TaskPriority?((uint64_t)v66, &demangling cache variable for type metadata for Artwork.Decoration?);
      uint64_t v68 = 0;
      LOBYTE(v69) = 0;
      uint64_t v70 = 0;
    }
    else
    {
      uint64_t v68 = *v66;
      uint64_t v69 = v66[1];
      uint64_t v70 = (void *)v66[2];
      id v71 = v70;
      id v72 = v65;
      outlined destroy of Artwork((uint64_t)v66, type metadata accessor for Artwork.Decoration);
    }
    uint64_t v73 = (uint64_t)v78;
    UIView.border.setter(v68, v69, v70);
    outlined init with copy of (String, Any)(v64, v73, &demangling cache variable for type metadata for Artwork.Decoration?);
    if (v60((uint64_t *)v73, 1, v19) == 1)
    {
      outlined destroy of TaskPriority?(v73, &demangling cache variable for type metadata for Artwork.Decoration?);
      uint64_t v74 = type metadata accessor for UIView.Corner();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56))(v77, 1, 1, v74);
    }
    else
    {
      outlined init with copy of (String, Any)(v73 + v19[5], (uint64_t)v77, &demangling cache variable for type metadata for UIView.Corner?);
      outlined destroy of Artwork(v73, type metadata accessor for Artwork.Decoration);
    }
    UIView.corner.setter();
  }
  outlined destroy of TaskPriority?(v64, &demangling cache variable for type metadata for Artwork.Decoration?);
  return outlined destroy of Artwork((uint64_t)v91, type metadata accessor for Artwork.Decoration);
}

double Artwork.View.intrinsicContentSize.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess();
  uint64_t v2 = v1 + *(int *)(type metadata accessor for Artwork(0) + 32);
  if (*(unsigned char *)(v2 + 8) == 2 && *(unsigned char *)(v2 + 24) == 2)
  {
    double v3 = *(double *)(v2 + 16);
    double v4 = *(double *)v2;
  }
  else
  {
    double v4 = 0.0;
    double v3 = 0.0;
  }
  return Artwork.View.fittingImageSize(in:)(v4, v3);
}

double Artwork.View.sizeThatFits(_:)(double a1, double a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess();
  uint64_t v6 = v5 + *(int *)(type metadata accessor for Artwork(0) + 32);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 8);
  if (v7 == 255) {
    return Artwork.View.fittingImageSize(in:)(a1, a2);
  }
  uint64_t v9 = *(void *)(v6 + 16);
  char v10 = *(unsigned char *)(v6 + 24);
  Artwork.Size.Dimension.value(in:)(a1, a2, *(void *)v6, v7);
  double v8 = v11;
  Artwork.Size.Dimension.value(in:)(a1, a2, v9, v10);
  return v8;
}

double Artwork.Size.computedSize(in:)(uint64_t a1, char a2, uint64_t a3, char a4, double a5, double a6)
{
  Artwork.Size.Dimension.value(in:)(a5, a6, a1, a2);
  double v11 = v10;
  Artwork.Size.Dimension.value(in:)(a5, a6, a3, a4);
  return v11;
}

uint64_t Artwork.View.apply(artworkImage:)(uint64_t a1)
{
  uint64_t v2 = v1;
  double v4 = *(void **)&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView];
  [v4 setImage:a1];
  uint64_t v5 = &v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration];
  swift_beginAccess();
  if (*((void *)v5 + 4) && (uint64_t v6 = (void *)*((void *)v5 + 3)) != 0) {
    id v7 = v6;
  }
  else {
    id v7 = [self clearColor];
  }
  double v8 = v7;
  [v4 setBackgroundColor:v7];

  if (a1 || (id v11 = [v2 artworkCatalog], v11, !v11))
  {
    if (*((void *)v5 + 4))
    {
      uint64_t v9 = *(void **)&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
      if (!v9) {
        goto LABEL_16;
      }
      BOOL v10 = 1;
      goto LABEL_15;
    }
  }
  uint64_t v12 = type metadata accessor for Artwork(0);
  uint64_t v13 = &v5[*(int *)(v12 + 28)];
  id v14 = (void *)*((void *)v13 + 3);
  if (v14)
  {
    uint64_t v16 = *(void **)v13;
    uint64_t v15 = (void *)*((void *)v13 + 1);
    uint64_t v17 = (void *)*((void *)v13 + 2);
    uint64_t v18 = *((void *)v13 + 4);
    uint64_t v19 = *((void *)v13 + 5);
    v33[0] = *(void *)v13;
    v33[1] = v15;
    void v33[2] = v17;
    v33[3] = v14;
    v33[4] = v18;
    v33[5] = v19;
    uint64_t v20 = &v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
    if (!*(void *)&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView])
    {
      objc_allocWithZone((Class)type metadata accessor for Artwork.Placeholder.View());
      outlined copy of Artwork.Placeholder?(v16, v15, v17, v14);
      id v21 = v17;
      id v22 = v14;
      id v23 = v16;
      id v24 = v15;
      double v25 = Artwork.Placeholder.View.init(configuration:)((uint64_t)v33);
      uint64_t v26 = lazy protocol witness table accessor for type Artwork.View and conformance Artwork.View(&lazy protocol witness table cache variable for type Artwork.Placeholder.View and conformance Artwork.Placeholder.View, (void (*)(uint64_t))type metadata accessor for Artwork.Placeholder.View);
      [v25 setClipsToBounds:1];
      double v27 = v25;
      [v2 addSubview:v27];

      double v28 = *(void **)v20;
      *(void *)uint64_t v20 = v27;
      *((void *)v20 + 1) = v26;
    }
  }
  uint64_t v9 = *(void **)&v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
  if (v9)
  {
    BOOL v10 = *(void *)&v5[*(int *)(v12 + 28) + 24] == 0;
LABEL_15:
    [v9 setHidden:v10];
  }
LABEL_16:
  Artwork.View.applyDecoration()();
  uint64_t v29 = &v2[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler];
  uint64_t result = swift_beginAccess();
  uint64_t v31 = *(void (**)(uint64_t))v29;
  if (*(void *)v29)
  {
    uint64_t v32 = swift_retain();
    v31(v32);
    return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v31);
  }
  return result;
}

void closure #1 in Artwork.View.reloadArtworkCatalogIfNeeded()(void **a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = swift_dynamicCastClass();
  if (!v6) {
    return;
  }
  id v7 = (void *)v6;
  id v18 = v5;
  id v8 = [a2 imageRepresentation];
  if (v8)
  {
    id v17 = v8;
    id v9 = [v8 image];
    if (v9)
    {
      BOOL v10 = v9;
      if (([v17 isImagePrepared] & 1) == 0)
      {
        uint64_t v13 = (void *)swift_allocObject();
        void v13[2] = a3;
        v13[3] = v10;
        v13[4] = v7;
        aBlock[4] = partial apply for closure #1 in closure #1 in Artwork.View.reloadArtworkCatalogIfNeeded();
        uint64_t aBlock[5] = v13;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed MPAVRoute?) -> ();
        aBlock[3] = &block_descriptor_43;
        id v14 = _Block_copy(aBlock);
        id v15 = v18;
        id v16 = v10;
        swift_retain();
        swift_release();
        [v16 prepareForDisplayWithCompletionHandler:v14];

        _Block_release(v14);
        return;
      }
      id v11 = v10;
      Artwork.View.apply(artworkImage:)((uint64_t)v10);

      [v7 setNeedsLayout];
      uint64_t v12 = v17;
      goto LABEL_8;
    }
  }
  Artwork.View.apply(artworkImage:)(0);
  [v7 setNeedsLayout];
  uint64_t v12 = v18;
LABEL_8:
}

uint64_t closure #1 in closure #1 in Artwork.View.reloadArtworkCatalogIfNeeded()(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v8 - 8);
  __chkstk_darwin();
  BOOL v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v23 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIMenu(0, (unint64_t *)&_sSo17OS_dispatch_queueCML_1);
  uint64_t v22 = static OS_dispatch_queue.main.getter();
  id v14 = (void *)swift_allocObject();
  void v14[2] = a2;
  void v14[3] = a1;
  v14[4] = a3;
  v14[5] = a4;
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in Artwork.View.reloadArtworkCatalogIfNeeded();
  uint64_t aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_35_0;
  id v15 = _Block_copy(aBlock);
  id v16 = a1;
  id v17 = a3;
  id v18 = a4;
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  lazy protocol witness table accessor for type Artwork.View and conformance Artwork.View((unint64_t *)&_s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWL_1, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  __swift_instantiateConcreteTypeFromMangledName(&_sSay8Dispatch0A13WorkItemFlagsVGMD_1);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWl_1();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v19 = (void *)v22;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v23);
}

void closure #1 in closure #1 in closure #1 in Artwork.View.reloadArtworkCatalogIfNeeded()(uint64_t a1, void *a2, void *a3, void *a4)
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  id v8 = [a4 artworkCatalog];
  uint64_t v9 = v8;
  if (!Strong)
  {
    if (v8)
    {

      return;
    }
LABEL_7:
    if (a2)
    {
      id v12 = a2;
      Artwork.View.apply(artworkImage:)((uint64_t)a2);
    }
    else
    {
      if (one-time initialization token for artwork != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Logger.artwork);
      id v14 = a3;
      id v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        id v18 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 138412290;
        *(void *)(v17 + 4) = v14;
        *id v18 = v14;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to prepare image: %@", (uint8_t *)v17, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&_sSo8NSObjectCSgMD_1);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      Artwork.View.apply(artworkImage:)((uint64_t)v14);
    }
    [a4 setNeedsLayout];
    return;
  }
  if (!v8)
  {

    return;
  }
  type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for MPArtworkCatalog);
  id v10 = Strong;
  char v11 = static NSObject.== infix(_:_:)();

  if (v11) {
    goto LABEL_7;
  }
}

void Gradient.View.init(frame:)()
{
}

uint64_t protocol witness for UIContentView.configuration.getter in conformance Artwork.View@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = type metadata accessor for Artwork(0);
  a1[4] = lazy protocol witness table accessor for type Artwork.View and conformance Artwork.View(&lazy protocol witness table cache variable for type Artwork and conformance Artwork, (void (*)(uint64_t))type metadata accessor for Artwork);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  uint64_t v4 = v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess();
  return outlined init with copy of Artwork.Decoration(v4, (uint64_t)boxed_opaque_existential_1, type metadata accessor for Artwork);
}

uint64_t protocol witness for UIContentView.configuration.setter in conformance Artwork.View(uint64_t a1)
{
  type metadata accessor for Artwork(0);
  __chkstk_darwin();
  double v3 = &v6[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of AlertPresenting(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIContentConfiguration);
  swift_dynamicCast();
  Artwork.View.typedConfiguration.setter((uint64_t)v3);
  return __swift_destroy_boxed_opaque_existential_0Tm(a1);
}

void (*protocol witness for UIContentView.configuration.modify in conformance Artwork.View(uint64_t **a1))(uint64_t *a1, char a2)
{
  double v3 = (uint64_t *)malloc(0xD0uLL);
  *a1 = v3;
  v3[23] = v1;
  uint64_t v4 = type metadata accessor for Artwork(0);
  v3[24] = v4;
  v3[25] = (uint64_t)malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[3] = v4;
  id v3[4] = lazy protocol witness table accessor for type Artwork.View and conformance Artwork.View(&lazy protocol witness table cache variable for type Artwork and conformance Artwork, (void (*)(uint64_t))type metadata accessor for Artwork);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v3);
  uint64_t v6 = v1 + OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_typedConfiguration;
  swift_beginAccess();
  outlined init with copy of Artwork.Decoration(v6, (uint64_t)boxed_opaque_existential_1, type metadata accessor for Artwork);
  return protocol witness for UIContentView.configuration.modify in conformance Artwork.View;
}

void protocol witness for UIContentView.configuration.modify in conformance Artwork.View(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  double v3 = *(void **)(*a1 + 200);
  if (a2)
  {
    outlined init with copy of AlertPresenting(*a1, (uint64_t)v2 + 40);
    outlined init with copy of AlertPresenting((uint64_t)v2 + 40, (uint64_t)v2 + 80);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIContentConfiguration);
    swift_dynamicCast();
    Artwork.View.typedConfiguration.setter((uint64_t)v3);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v2 + 40);
  }
  else
  {
    outlined init with copy of AlertPresenting(*a1, (uint64_t)v2 + 120);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIContentConfiguration);
    swift_dynamicCast();
    Artwork.View.typedConfiguration.setter((uint64_t)v3);
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v2);
  free(v3);

  free(v2);
}

uint64_t protocol witness for UIContentView.supports(_:) in conformance Artwork.View(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType();

  return UIContentView.supports(_:)(a1, ObjectType, a3);
}

uint64_t Artwork.Caching.init(reference:identifier:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  swift_weakInit();
  *a3 = a1;
  a3[1] = a2;
  swift_weakAssign();

  return swift_release();
}

uint64_t Artwork.Caching.init(reference:)@<X0>(void *a1@<X8>)
{
  swift_weakInit();
  swift_weakAssign();
  uint64_t result = swift_release();
  *a1 = 0xD00000000000001CLL;
  a1[1] = 0x8000000100472640;
  return result;
}

void *Artwork.Caching.Reference.defaultIdentifier.unsafeMutableAddressor()
{
  return &static Artwork.Caching.Reference.defaultIdentifier;
}

unint64_t static Artwork.Caching.Reference.defaultIdentifier.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t Artwork.Caching.Reference.__allocating_init()()
{
  return swift_allocObject();
}

BOOL static Artwork.Caching.Reference.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void *Artwork.Content.init(catalog:background:)(uint64_t a1, void *a2)
{
  if (!a1)
  {

    return 0;
  }
  return a2;
}

uint64_t static Artwork.Content.__derived_struct_equals(_:_:)(void *a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    if (a3)
    {
      uint64_t v4 = a1;
      type metadata accessor for UIMenu(0, (unint64_t *)&_sSo7UIColorCML_0);
      id v5 = a3;
      id v6 = v4;
      LOBYTE(v4) = static NSObject.== infix(_:_:)();

      if (v4) {
        goto LABEL_4;
      }
    }
  }
  else if (!a3)
  {
LABEL_4:
    type metadata accessor for UIMenu(0, (unint64_t *)&_sSo8NSObjectCML_1);
    return static NSObject.== infix(_:_:)() & 1;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Artwork.Content(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  double v3 = *a2;
  if (*a1)
  {
    if (v3)
    {
      type metadata accessor for UIMenu(0, (unint64_t *)&_sSo7UIColorCML_0);
      id v4 = v3;
      id v5 = v2;
      char v6 = static NSObject.== infix(_:_:)();

      if (v6) {
        goto LABEL_4;
      }
    }
  }
  else if (!v3)
  {
LABEL_4:
    type metadata accessor for UIMenu(0, (unint64_t *)&_sSo8NSObjectCML_1);
    return static NSObject.== infix(_:_:)() & 1;
  }
  return 0;
}

uint64_t Artwork.Decoration.border.getter()
{
  uint64_t v1 = *v0;
  id v2 = (id)v0[2];
  return v1;
}

void Artwork.Decoration.border.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)uint64_t v3 = a1;
  *(void *)(v3 + 8) = a2;
  *(void *)(v3 + 16) = a3;
}

uint64_t Artwork.Decoration.corner.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Artwork.Decoration(0);
  return outlined init with copy of (String, Any)(v1 + *(int *)(v3 + 20), a1, &demangling cache variable for type metadata for UIView.Corner?);
}

uint64_t Artwork.Decoration.corner.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Artwork.Decoration(0);
  return outlined assign with take of Album?(a1, v1 + *(int *)(v3 + 20), &demangling cache variable for type metadata for UIView.Corner?);
}

CFRange (__swiftcall *Artwork.Decoration.corner.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

id Artwork.Decoration.fillColor.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for Artwork.Decoration(0) + 24));

  return v1;
}

void Artwork.Decoration.fillColor.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for Artwork.Decoration(0) + 24);

  *(void *)(v1 + v3) = a1;
}

CFRange (__swiftcall *Artwork.Decoration.fillColor.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

uint64_t Artwork.Decoration.fillAxes.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Artwork.Decoration(0) + 28));
}

uint64_t Artwork.Decoration.fillAxes.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for Artwork.Decoration(0);
  *(void *)(v1 + *(int *)(result + 28)) = a1;
  return result;
}

CFRange (__swiftcall *Artwork.Decoration.fillAxes.modify())(__C::_NSRange)
{
  return CFRange.init(_:);
}

uint64_t static Artwork.Decoration.with(_:)@<X0>(uint64_t (*a1)(void *)@<X0>, void *a2@<X8>)
{
  id v4 = (int *)type metadata accessor for Artwork.Decoration(0);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  id v5 = (char *)a2 + v4[5];
  uint64_t v6 = type metadata accessor for UIView.Corner();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = v4[6];
  *(void *)((char *)a2 + v7) = [self blackColor];
  *(void *)((char *)a2 + v4[7]) = 1;
  return a1(a2);
}

uint64_t Artwork.Size.Dimension.value(in:)(double a1, double a2, uint64_t a3, char a4)
{
  if (!a4)
  {
    if (a1 != 1.79769313e308) {
      return result;
    }
    _StringGuts.grow(_:)(67);
    v8._uint64_t countAndFlagsBits = 0x6F69736E656D6944;
    v8._object = (void *)0xE90000000000006ELL;
    String.append(_:)(v8);
    v9._object = (void *)0x80000001004727D0;
    v9._uint64_t countAndFlagsBits = 0xD000000000000030;
    String.append(_:)(v9);
    v10._uint64_t countAndFlagsBits = CGSize.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = 0x696C61766E49203ALL;
    v11._object = (void *)0xEF68746469772064;
    String.append(_:)(v11);
LABEL_10:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (a4 == 1 && a2 == 1.79769313e308)
  {
    _StringGuts.grow(_:)(68);
    v4._uint64_t countAndFlagsBits = 0x6F69736E656D6944;
    v4._object = (void *)0xE90000000000006ELL;
    String.append(_:)(v4);
    v5._object = (void *)0x80000001004727D0;
    v5._uint64_t countAndFlagsBits = 0xD000000000000030;
    String.append(_:)(v5);
    v6._uint64_t countAndFlagsBits = CGSize.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 0xD000000000000010;
    v7._object = (void *)0x8000000100472810;
    String.append(_:)(v7);
    goto LABEL_10;
  }
  return result;
}

BOOL static Artwork.Size.Dimension.__derived_enum_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a2)
  {
    BOOL v4 = *(double *)&a1 == *(double *)&a3;
    if (a4 != 1) {
      BOOL v4 = 0;
    }
    BOOL v5 = a4 == 2 && *(double *)&a1 == *(double *)&a3;
    if (a2 == 1) {
      return v4;
    }
    else {
      return v5;
    }
  }
  else
  {
    return !a4 && *(double *)&a1 == *(double *)&a3;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Artwork.Size.Dimension(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a1 + 8) == 1)
    {
      if (v4 == 1 && v2 == v3) {
        return 1;
      }
    }
    else if (v4 == 2 && v2 == v3)
    {
      return 1;
    }
  }
  else if (!*(unsigned char *)(a2 + 8) && v2 == v3)
  {
    return 1;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Artwork.Size(uint64_t a1, uint64_t a2)
{
  return specialized static Artwork.Size.__derived_struct_equals(_:_:)(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24), *(void *)a2, *(unsigned char *)(a2 + 8), *(void *)(a2 + 16), *(unsigned char *)(a2 + 24));
}

uint64_t one-time initialization function for grid(uint64_t a1)
{
  return one-time initialization function for grid(a1, static Artwork.Decoration.grid, &one-time initialization token for medium, (uint64_t)static UIView.Corner.medium);
}

uint64_t Artwork.Decoration.grid.unsafeMutableAddressor()
{
  return Artwork.Decoration.grid.unsafeMutableAddressor(&one-time initialization token for grid, (uint64_t)static Artwork.Decoration.grid);
}

uint64_t static Artwork.Decoration.grid.getter@<X0>(uint64_t a1@<X8>)
{
  return static Artwork.Decoration.grid.getter(&one-time initialization token for grid, (uint64_t)static Artwork.Decoration.grid, a1);
}

uint64_t one-time initialization function for list(uint64_t a1)
{
  return one-time initialization function for grid(a1, static Artwork.Decoration.list, &one-time initialization token for small, (uint64_t)static UIView.Corner.small);
}

uint64_t one-time initialization function for grid(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
  __chkstk_darwin();
  Swift::String v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v9 = (int *)type metadata accessor for Artwork.Decoration(0);
  __swift_allocate_value_buffer((uint64_t)v9, a2);
  Swift::String v10 = (void *)__swift_project_value_buffer((uint64_t)v9, (uint64_t)a2);
  if (one-time initialization token for artwork != -1) {
    swift_once();
  }
  uint64_t v11 = static UIView.Border.artwork;
  uint64_t v12 = byte_1005ADE08;
  uint64_t v13 = *a3;
  id v14 = (id)qword_1005ADE10;
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for UIView.Corner();
  uint64_t v16 = __swift_project_value_buffer(v15, a4);
  uint64_t v17 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v8, v16, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v8, 0, 1, v15);
  id v18 = [self blackColor];
  void *v10 = v11;
  v10[1] = v12;
  v10[2] = v14;
  uint64_t result = outlined init with take of UIView.Corner?((uint64_t)v8, (uint64_t)v10 + v9[5]);
  *(void *)((char *)v10 + v9[6]) = v18;
  *(void *)((char *)v10 + v9[7]) = 1;
  return result;
}

uint64_t Artwork.Decoration.list.unsafeMutableAddressor()
{
  return Artwork.Decoration.grid.unsafeMutableAddressor(&one-time initialization token for list, (uint64_t)static Artwork.Decoration.list);
}

uint64_t Artwork.Decoration.grid.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Artwork.Decoration(0);

  return __swift_project_value_buffer(v3, a2);
}

uint64_t static Artwork.Decoration.list.getter@<X0>(uint64_t a1@<X8>)
{
  return static Artwork.Decoration.grid.getter(&one-time initialization token for list, (uint64_t)static Artwork.Decoration.list, a1);
}

uint64_t one-time initialization function for round()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
  __chkstk_darwin();
  uint64_t v1 = (char *)&v11 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v2 = (int *)type metadata accessor for Artwork.Decoration(0);
  __swift_allocate_value_buffer((uint64_t)v2, static Artwork.Decoration.round);
  uint64_t v3 = (void *)__swift_project_value_buffer((uint64_t)v2, (uint64_t)static Artwork.Decoration.round);
  if (one-time initialization token for artwork != -1) {
    swift_once();
  }
  uint64_t v4 = static UIView.Border.artwork;
  uint64_t v5 = byte_1005ADE08;
  uint64_t v6 = qword_1005ADE10;
  id v7 = (id)qword_1005ADE10;
  static UIView.Corner.rounded.getter();
  uint64_t v8 = type metadata accessor for UIView.Corner();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v1, 0, 1, v8);
  id v9 = [self blackColor];
  *uint64_t v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  uint64_t result = outlined init with take of UIView.Corner?((uint64_t)v1, (uint64_t)v3 + v2[5]);
  *(void *)((char *)v3 + v2[6]) = v9;
  *(void *)((char *)v3 + v2[7]) = 1;
  return result;
}

uint64_t Artwork.Decoration.round.unsafeMutableAddressor()
{
  return Artwork.Decoration.grid.unsafeMutableAddressor(&one-time initialization token for round, (uint64_t)static Artwork.Decoration.round);
}

uint64_t static Artwork.Decoration.round.getter@<X0>(uint64_t a1@<X8>)
{
  return static Artwork.Decoration.grid.getter(&one-time initialization token for round, (uint64_t)static Artwork.Decoration.round, a1);
}

uint64_t static Artwork.Decoration.grid.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Artwork.Decoration(0);
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  return outlined init with copy of Artwork.Decoration(v6, a3, type metadata accessor for Artwork.Decoration);
}

uint64_t Artwork.Decoration.scaled(using:compatibleWith:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
  __chkstk_darwin();
  id v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UIView.Corner.Radius();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  double v28 = (uint64_t *)((char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  id v14 = (char *)&v27 - v13;
  outlined init with copy of Artwork.Decoration(v4, a3, type metadata accessor for Artwork.Decoration);
  if (*(void *)(v4 + 16) && *(void *)(a3 + 16))
  {
    int v15 = *(_DWORD *)(v4 + 8);
    [a1 scaledValueForValue:a2 compatibleWithTraitCollection:*(double *)v4];
    *(void *)a3 = v16;
    *(unsigned char *)(a3 + 8) = v15 & 1;
  }
  id v29 = a1;
  uint64_t v30 = a2;
  uint64_t v17 = type metadata accessor for Artwork.Decoration(0);
  outlined init with copy of (String, Any)(v4 + *(int *)(v17 + 20), (uint64_t)v9, &demangling cache variable for type metadata for UIView.Corner?);
  uint64_t v18 = type metadata accessor for UIView.Corner();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v20(v9, 1, v18) == 1) {
    return outlined destroy of TaskPriority?((uint64_t)v9, &demangling cache variable for type metadata for UIView.Corner?);
  }
  UIView.Corner.radius.getter();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v18);
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v14, v10);
  if (v22 != enum case for UIView.Corner.Radius.value(_:)) {
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v11 + 96))(v14, v10);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v20)(a3 + *(int *)(v17 + 20), 1, v18);
  if (!result)
  {
    char v24 = v14[8];
    [v29 scaledValueForValue:v30 compatibleWithTraitCollection:*(double *)v14];
    double v25 = v28;
    *double v28 = v26;
    *((unsigned char *)v25 + 8) = v24;
    (*(void (**)(void *, uint64_t, uint64_t))(v11 + 104))(v25, v23, v10);
    return UIView.Corner.radius.setter();
  }
  return result;
}

uint64_t specialized static Artwork.Size.__derived_struct_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  if (a2)
  {
    if (a2 == 1)
    {
      uint64_t result = 0;
      if (a6 != 1) {
        return result;
      }
    }
    else
    {
      uint64_t result = 0;
      if (a6 != 2) {
        return result;
      }
    }
  }
  else
  {
    uint64_t result = 0;
    if (a6) {
      return result;
    }
  }
  if (*(double *)&a1 == *(double *)&a5)
  {
    if (a4)
    {
      if (a4 == 1)
      {
        if (a8 == 1 && *(double *)&a3 == *(double *)&a7) {
          return 1;
        }
      }
      else if (a8 == 2 && *(double *)&a3 == *(double *)&a7)
      {
        return 1;
      }
    }
    else if (!a8 && *(double *)&a3 == *(double *)&a7)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t specialized static Artwork.Caching.__derived_struct_equals(_:_:)(void *a1, void *a2)
{
  BOOL v2 = *a1 == *a2 && a1[1] == a2[1];
  if (v2 || (v3 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v3 & 1) != 0))
  {
    uint64_t Strong = swift_weakLoadStrong();
    uint64_t v6 = swift_weakLoadStrong();
    uint64_t v7 = v6;
    if (Strong)
    {
      swift_release();
      if (v7)
      {
        swift_release();
        if (Strong == v7) {
          return 1;
        }
      }
    }
    else
    {
      if (!v6) {
        return 1;
      }
      swift_release();
    }
    return 0;
  }
  return result;
}

BOOL specialized static Artwork.Decoration.__derived_struct_equals(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UIView.Corner();
  uint64_t v44 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UIView.Corner?, UIView.Corner?));
  __chkstk_darwin();
  id v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
  __chkstk_darwin();
  __chkstk_darwin();
  __chkstk_darwin();
  uint64_t v13 = (void *)a1[2];
  id v14 = (void *)a2[2];
  if (v13)
  {
    if (!v14) {
      return 0;
    }
    uint64_t v42 = v12;
    uint64_t v43 = (uint64_t)&v39 - v10;
    double v40 = v6;
    uint64_t v41 = v11;
    uint64_t v15 = v4;
    uint64_t v16 = *a1;
    uint64_t v17 = a1[1];
    uint64_t v39 = *a2;
    uint64_t v18 = v9;
    uint64_t v19 = a1;
    uint64_t v20 = a2[1];
    id v21 = v14;
    id v22 = v13;
    char v23 = v17 & 1;
    uint64_t v4 = v15;
    char v46 = v23;
    char v24 = v23;
    char v25 = v20 & 1;
    a1 = v19;
    id v9 = v18;
    char v45 = v25;
    LOBYTE(v16) = static UIView.Border.__derived_struct_equals(_:_:)(v16, v24, (uint64_t)v22, v39, v25);

    if ((v16 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t v42 = v12;
    uint64_t v43 = (uint64_t)&v39 - v10;
    double v40 = v6;
    uint64_t v41 = v11;
    if (v14) {
      return 0;
    }
  }
  uint64_t v26 = type metadata accessor for Artwork.Decoration(0);
  uint64_t v27 = v43;
  outlined init with copy of (String, Any)((uint64_t)a1 + *(int *)(v26 + 20), v43, &demangling cache variable for type metadata for UIView.Corner?);
  uint64_t v39 = v26;
  uint64_t v28 = v42;
  outlined init with copy of (String, Any)((uint64_t)a2 + *(int *)(v26 + 20), v42, &demangling cache variable for type metadata for UIView.Corner?);
  uint64_t v29 = (uint64_t)&v9[*(int *)(v7 + 48)];
  outlined init with copy of (String, Any)(v27, (uint64_t)v9, &demangling cache variable for type metadata for UIView.Corner?);
  outlined init with copy of (String, Any)(v28, v29, &demangling cache variable for type metadata for UIView.Corner?);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
  if (v30((uint64_t)v9, 1, v4) != 1)
  {
    uint64_t v32 = v41;
    outlined init with copy of (String, Any)((uint64_t)v9, v41, &demangling cache variable for type metadata for UIView.Corner?);
    if (v30(v29, 1, v4) != 1)
    {
      uint64_t v31 = a2;
      uint64_t v33 = v44;
      id v34 = v40;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v40, v29, v4);
      lazy protocol witness table accessor for type Artwork.View and conformance Artwork.View((unint64_t *)&lazy protocol witness table cache variable for type UIView.Corner and conformance UIView.Corner, (void (*)(uint64_t))&type metadata accessor for UIView.Corner);
      char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      double v36 = *(void (**)(char *, uint64_t))(v33 + 8);
      v36(v34, v4);
      outlined destroy of TaskPriority?(v28, &demangling cache variable for type metadata for UIView.Corner?);
      outlined destroy of TaskPriority?(v43, &demangling cache variable for type metadata for UIView.Corner?);
      v36((char *)v32, v4);
      outlined destroy of TaskPriority?((uint64_t)v9, &demangling cache variable for type metadata for UIView.Corner?);
      if ((v35 & 1) == 0) {
        return 0;
      }
      goto LABEL_13;
    }
    outlined destroy of TaskPriority?(v28, &demangling cache variable for type metadata for UIView.Corner?);
    outlined destroy of TaskPriority?(v43, &demangling cache variable for type metadata for UIView.Corner?);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v32, v4);
LABEL_11:
    outlined destroy of TaskPriority?((uint64_t)v9, &demangling cache variable for type metadata for (UIView.Corner?, UIView.Corner?));
    return 0;
  }
  outlined destroy of TaskPriority?(v28, &demangling cache variable for type metadata for UIView.Corner?);
  outlined destroy of TaskPriority?(v27, &demangling cache variable for type metadata for UIView.Corner?);
  if (v30(v29, 1, v4) != 1) {
    goto LABEL_11;
  }
  uint64_t v31 = a2;
  outlined destroy of TaskPriority?((uint64_t)v9, &demangling cache variable for type metadata for UIView.Corner?);
LABEL_13:
  type metadata accessor for UIMenu(0, (unint64_t *)&_sSo8NSObjectCML_1);
  uint64_t v37 = v39;
  if (static NSObject.== infix(_:_:)()) {
    return *(uint64_t *)((char *)a1 + *(int *)(v37 + 28)) == *(uint64_t *)((char *)v31 + *(int *)(v37 + 28));
  }
  return 0;
}

uint64_t specialized static Artwork.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of (String, Any)(a1, (uint64_t)v49, &demangling cache variable for type metadata for Artwork.Caching?);
  outlined init with copy of (String, Any)(a2, (uint64_t)v48, &demangling cache variable for type metadata for Artwork.Caching?);
  outlined init with copy of (String, Any)((uint64_t)v49, (uint64_t)&v50, &demangling cache variable for type metadata for Artwork.Caching?);
  outlined init with copy of (String, Any)((uint64_t)v48, (uint64_t)&v53, &demangling cache variable for type metadata for Artwork.Caching?);
  if (v51)
  {
    outlined init with copy of (String, Any)((uint64_t)&v50, (uint64_t)&v47, &demangling cache variable for type metadata for Artwork.Caching?);
    if (*((void *)&v53 + 1))
    {
      outlined init with take of Artwork.Caching(&v53, &v46);
      if (v47 == v46 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t Strong = swift_weakLoadStrong();
        uint64_t v5 = swift_weakLoadStrong();
        uint64_t v6 = v5;
        if (Strong)
        {
          swift_release();
          if (v6)
          {
            swift_release();
            if (Strong == v6) {
              goto LABEL_18;
            }
          }
        }
        else
        {
          if (!v5)
          {
LABEL_18:
            outlined destroy of Artwork.Caching((uint64_t)&v46);
            outlined destroy of TaskPriority?((uint64_t)v48, &demangling cache variable for type metadata for Artwork.Caching?);
            outlined destroy of TaskPriority?((uint64_t)v49, &demangling cache variable for type metadata for Artwork.Caching?);
            outlined destroy of Artwork.Caching((uint64_t)&v47);
            goto LABEL_19;
          }
          swift_release();
        }
      }
      outlined destroy of Artwork.Caching((uint64_t)&v46);
      outlined destroy of TaskPriority?((uint64_t)v48, &demangling cache variable for type metadata for Artwork.Caching?);
      outlined destroy of TaskPriority?((uint64_t)v49, &demangling cache variable for type metadata for Artwork.Caching?);
      outlined destroy of Artwork.Caching((uint64_t)&v47);
      uint64_t v7 = &demangling cache variable for type metadata for Artwork.Caching?;
LABEL_16:
      outlined destroy of TaskPriority?((uint64_t)&v50, v7);
      return 0;
    }
    outlined destroy of TaskPriority?((uint64_t)v48, &demangling cache variable for type metadata for Artwork.Caching?);
    outlined destroy of TaskPriority?((uint64_t)v49, &demangling cache variable for type metadata for Artwork.Caching?);
    outlined destroy of Artwork.Caching((uint64_t)&v47);
LABEL_12:
    uint64_t v7 = (uint64_t *)&demangling cache variable for type metadata for (Artwork.Caching?, Artwork.Caching?);
    goto LABEL_16;
  }
  outlined destroy of TaskPriority?((uint64_t)v48, &demangling cache variable for type metadata for Artwork.Caching?);
  outlined destroy of TaskPriority?((uint64_t)v49, &demangling cache variable for type metadata for Artwork.Caching?);
  if (*((void *)&v53 + 1)) {
    goto LABEL_12;
  }
LABEL_19:
  outlined destroy of TaskPriority?((uint64_t)&v50, &demangling cache variable for type metadata for Artwork.Caching?);
  id v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void **)(a2 + 32);
  if (!v9)
  {
    if (!v10) {
      goto LABEL_33;
    }
    return 0;
  }
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *(void **)(a1 + 24);
  uint64_t v12 = *(void **)(a2 + 24);
  if (v11)
  {
    if (!v12)
    {
      outlined copy of Artwork.Content?(*(id *)(a1 + 24), *(void **)(a1 + 32));
      outlined copy of Artwork.Content?(v11, v9);
      outlined copy of Artwork.Content?(0, v10);
      goto LABEL_30;
    }
    type metadata accessor for UIMenu(0, (unint64_t *)&_sSo7UIColorCML_0);
    outlined copy of Artwork.Content?(v11, v9);
    outlined copy of Artwork.Content?(v11, v9);
    outlined copy of Artwork.Content?(v12, v10);
    id v13 = v12;
    id v14 = v11;
    char v15 = static NSObject.== infix(_:_:)();

    if ((v15 & 1) == 0)
    {

LABEL_30:
      outlined consume of Artwork.Content?(v11, v9);
      return 0;
    }
  }
  else
  {
    outlined copy of Artwork.Content?(0, *(void **)(a1 + 32));
    outlined copy of Artwork.Content?(0, v9);
    if (v12)
    {
      outlined copy of Artwork.Content?(v12, v10);

      goto LABEL_30;
    }
    outlined copy of Artwork.Content?(0, v10);
    id v14 = 0;
    id v13 = 0;
  }
  type metadata accessor for UIMenu(0, (unint64_t *)&_sSo8NSObjectCML_1);
  char v16 = static NSObject.== infix(_:_:)();

  outlined consume of Artwork.Content?(v11, v9);
  if ((v16 & 1) == 0) {
    return 0;
  }
LABEL_33:
  uint64_t v17 = (int *)type metadata accessor for Artwork(0);
  if (!specialized static Artwork.Decoration.__derived_struct_equals(_:_:)((uint64_t *)(a1 + v17[6]), (uint64_t *)(a2 + v17[6])))return 0; {
  uint64_t v18 = v17[7];
  }
  uint64_t v19 = *(void **)(a1 + v18);
  uint64_t v20 = *(void **)(a1 + v18 + 8);
  id v22 = *(void **)(a1 + v18 + 16);
  id v21 = *(void **)(a1 + v18 + 24);
  uint64_t v24 = *(void *)(a1 + v18 + 32);
  uint64_t v23 = *(void *)(a1 + v18 + 40);
  char v25 = (void **)(a2 + v18);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  uint64_t v28 = v25[2];
  uint64_t v29 = v25[3];
  uint64_t v30 = v25[4];
  uint64_t v31 = v25[5];
  if (!v21)
  {
    if (!v29) {
      goto LABEL_40;
    }
LABEL_39:
    uint64_t v33 = *v25;
    char v45 = *v25;
    id v34 = v19;
    char v35 = v25[2];
    outlined copy of Artwork.Placeholder?(v19, v20, v22, v21);
    outlined copy of Artwork.Placeholder?(v33, v26, v35, v29);
    outlined consume of Artwork.Placeholder?(v34, v20, v22, v21);
    outlined consume of Artwork.Placeholder?(v45, v26, v35, v29);
    return 0;
  }
  if (!v29) {
    goto LABEL_39;
  }
  v49[0] = v19;
  v49[1] = v20;
  v49[2] = v22;
  v49[3] = v21;
  v49[4] = v24;
  v49[5] = v23;
  unsigned int v50 = v27;
  unint64_t v51 = v26;
  id v52 = v28;
  *(void *)&long long v53 = v29;
  *((void *)&v53 + 1) = v30;
  uint64_t v54 = v31;
  uint64_t v44 = v27;
  uint64_t v32 = v19;
  uint64_t v41 = v28;
  uint64_t v42 = v19;
  outlined copy of Artwork.Placeholder?(v19, v20, v22, v21);
  outlined copy of Artwork.Placeholder?(v32, v20, v22, v21);
  outlined copy of Artwork.Placeholder?(v44, v26, v41, v29);
  BOOL v43 = specialized static Artwork.Placeholder.__derived_struct_equals(_:_:)((uint64_t)v49, (uint64_t)&v50);

  outlined consume of Artwork.Placeholder?(v42, v20, v22, v21);
  if (!v43) {
    return 0;
  }
LABEL_40:
  uint64_t v36 = v17[8];
  uint64_t v37 = a1 + v36;
  uint64_t v38 = *(unsigned __int8 *)(a1 + v36 + 8);
  uint64_t v39 = a2 + v36;
  uint64_t v40 = *(unsigned __int8 *)(v39 + 8);
  if (v38 == 255)
  {
    if (v40 != 255) {
      return 0;
    }
  }
  else if (v40 == 255 {
         || (specialized static Artwork.Size.__derived_struct_equals(_:_:)(*(void *)v37, v38, *(void *)(v37 + 16), *(unsigned char *)(v37 + 24), *(void *)v39, v40, *(void *)(v39 + 16), *(unsigned char *)(v39 + 24)) & 1) == 0)
  }
  {
    return 0;
  }
  return 1;
}

uint64_t outlined init with copy of Artwork.Decoration(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Artwork.Placeholder and conformance Artwork.Placeholder()
{
  unint64_t result = lazy protocol witness table cache variable for type Artwork.Placeholder and conformance Artwork.Placeholder;
  if (!lazy protocol witness table cache variable for type Artwork.Placeholder and conformance Artwork.Placeholder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Artwork.Placeholder and conformance Artwork.Placeholder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Artwork.Placeholder and conformance Artwork.Placeholder;
  if (!lazy protocol witness table cache variable for type Artwork.Placeholder and conformance Artwork.Placeholder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Artwork.Placeholder and conformance Artwork.Placeholder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Artwork.Placeholder and conformance Artwork.Placeholder;
  if (!lazy protocol witness table cache variable for type Artwork.Placeholder and conformance Artwork.Placeholder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Artwork.Placeholder and conformance Artwork.Placeholder);
  }
  return result;
}

uint64_t sub_1002DF8A0()
{
  return swift_deallocObject();
}

id outlined copy of Artwork.Placeholder?(id result, void *a2, void *a3, void *a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    id v6 = a3;
    id v7 = a4;
    id v8 = v5;
    return a2;
  }
  return result;
}

void outlined consume of Artwork.Placeholder?(void *a1, void *a2, void *a3, void *a4)
{
  if (a4)
  {
  }
}

void specialized Artwork.View.init(coder:)()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageDidChangeHandler];
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
  BOOL v2 = &v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View__laidBounds];
  *(_OWORD *)BOOL v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  uint64_t v3 = OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_imageView;
  *(void *)&v0[v3] = [objc_allocWithZone((Class)UIImageView) init];
  uint64_t v4 = &v0[OBJC_IVAR____TtCV11MusicCoreUI7Artwork4View_placeholderView];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t outlined assign with copy of Artwork(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Artwork(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t associated type witness table accessor for MusicUIContentConfiguration.View : MusicUIContentView in Artwork()
{
  return lazy protocol witness table accessor for type Artwork.View and conformance Artwork.View(&lazy protocol witness table cache variable for type Artwork.View and conformance Artwork.View, (void (*)(uint64_t))type metadata accessor for Artwork.View);
}

uint64_t type metadata accessor for Artwork.View(uint64_t a1)
{
  return type metadata accessor for Notice.Variant(a1, (uint64_t *)&type metadata singleton initialization cache for Artwork.View);
}

uint64_t instantiation function for generic protocol witness table for Artwork(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type Artwork.View and conformance Artwork.View(&lazy protocol witness table cache variable for type Artwork and conformance Artwork, (void (*)(uint64_t))type metadata accessor for Artwork);
  uint64_t result = lazy protocol witness table accessor for type Artwork.View and conformance Artwork.View(&lazy protocol witness table cache variable for type Artwork and conformance Artwork, (void (*)(uint64_t))type metadata accessor for Artwork);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type Artwork.View and conformance Artwork.View(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for MusicUIContentView.Configuration : MusicUIContentConfiguration in Artwork.View()
{
  return lazy protocol witness table accessor for type Artwork.View and conformance Artwork.View(&lazy protocol witness table cache variable for type Artwork and conformance Artwork, (void (*)(uint64_t))type metadata accessor for Artwork);
}

uint64_t instantiation function for generic protocol witness table for Artwork.View(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type Artwork.View and conformance Artwork.View(&lazy protocol witness table cache variable for type Artwork.View and conformance Artwork.View, (void (*)(uint64_t))type metadata accessor for Artwork.View);
  *(void *)(a1 + 8) = result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for Artwork(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    if (v7)
    {
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
      swift_weakCopyInit();
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
    }
    id v9 = (void **)(a2 + 3);
    uint64_t v10 = (void *)a2[4];
    if (v10)
    {
      uint64_t v11 = *v9;
      a1[3] = v11;
      a1[4] = v10;
      id v12 = v11;
      id v13 = v10;
    }
    else
    {
      *(_OWORD *)(a1 + 3) = *(_OWORD *)v9;
    }
    uint64_t v47 = a3;
    uint64_t v14 = *(int *)(a3 + 24);
    char v15 = (char *)a1 + v14;
    char v16 = (char *)a2 + v14;
    *(void *)char v15 = *(void *)((char *)a2 + v14);
    v15[8] = *((unsigned char *)a2 + v14 + 8);
    uint64_t v17 = *(void **)((char *)a2 + v14 + 16);
    *((void *)v15 + 2) = v17;
    uint64_t v18 = type metadata accessor for Artwork.Decoration(0);
    uint64_t v19 = *(int *)(v18 + 20);
    __dst = &v15[v19];
    uint64_t v46 = v18;
    uint64_t v20 = &v16[v19];
    uint64_t v21 = type metadata accessor for UIView.Corner();
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
    id v24 = v17;
    if (v23(v20, 1, v21))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
      memcpy(__dst, v20, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(__dst, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
    }
    uint64_t v26 = *(int *)(v46 + 24);
    uint64_t v27 = *(void **)&v16[v26];
    *(void *)&v15[v26] = v27;
    *(void *)&v15[*(int *)(v46 + 28)] = *(void *)&v16[*(int *)(v46 + 28)];
    uint64_t v28 = *(int *)(v47 + 28);
    uint64_t v29 = (char *)a1 + v28;
    uint64_t v30 = (char *)a2 + v28;
    uint64_t v31 = *(void **)((char *)a2 + v28 + 24);
    id v32 = v27;
    if (v31)
    {
      uint64_t v33 = *(void **)v30;
      id v34 = (void *)*((void *)v30 + 1);
      *(void *)uint64_t v29 = *(void *)v30;
      *((void *)v29 + 1) = v34;
      char v35 = (void *)*((void *)v30 + 2);
      *((void *)v29 + 2) = v35;
      *((void *)v29 + 3) = v31;
      *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
      id v36 = v33;
      id v37 = v34;
      id v38 = v35;
      id v39 = v31;
    }
    else
    {
      long long v40 = *((_OWORD *)v30 + 1);
      *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
      *((_OWORD *)v29 + 1) = v40;
      *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
    }
    uint64_t v41 = *(int *)(v47 + 32);
    uint64_t v42 = (_OWORD *)((char *)a1 + v41);
    BOOL v43 = (_OWORD *)((char *)a2 + v41);
    *uint64_t v42 = *v43;
    *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)((char *)v43 + 9);
  }
  return a1;
}

void destroy for Artwork(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_weakDestroy();
  }
  if (*(void *)(a1 + 32))
  {
  }
  uint64_t v4 = a1 + *(int *)(a2 + 24);

  uint64_t v5 = type metadata accessor for Artwork.Decoration(0);
  uint64_t v6 = v4 + *(int *)(v5 + 20);
  uint64_t v7 = type metadata accessor for UIView.Corner();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }

  uint64_t v9 = a1 + *(int *)(a2 + 28);
  if (*(void *)(v9 + 24))
  {

    uint64_t v10 = *(void **)(v9 + 24);
  }
}

void *initializeWithCopy for Artwork(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  if (v6)
  {
    *a1 = *a2;
    a1[1] = v6;
    swift_bridgeObjectRetain();
    swift_weakCopyInit();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
  }
  uint64_t v7 = (void **)(a2 + 3);
  uint64_t v8 = (void *)a2[4];
  if (v8)
  {
    uint64_t v9 = *v7;
    a1[3] = v9;
    a1[4] = v8;
    id v10 = v9;
    id v11 = v8;
  }
  else
  {
    *(_OWORD *)(a1 + 3) = *(_OWORD *)v7;
  }
  uint64_t v44 = a3;
  char v45 = a2;
  uint64_t v12 = *(int *)(a3 + 24);
  id v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  *(void *)id v13 = *(void *)((char *)a2 + v12);
  v13[8] = *((unsigned char *)a2 + v12 + 8);
  char v15 = *(void **)((char *)a2 + v12 + 16);
  *((void *)v13 + 2) = v15;
  char v16 = (int *)type metadata accessor for Artwork.Decoration(0);
  uint64_t v17 = v16[5];
  __dst = &v13[v17];
  uint64_t v18 = &v14[v17];
  uint64_t v19 = type metadata accessor for UIView.Corner();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  id v22 = v15;
  if (v21(v18, 1, v19))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
    memcpy(__dst, v18, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(__dst, v18, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
  }
  uint64_t v24 = v16[6];
  uint64_t v25 = *(void **)&v14[v24];
  *(void *)&v13[v24] = v25;
  *(void *)&v13[v16[7]] = *(void *)&v14[v16[7]];
  uint64_t v26 = *(int *)(v44 + 28);
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)v45 + v26;
  uint64_t v29 = *(void **)((char *)v45 + v26 + 24);
  id v30 = v25;
  if (v29)
  {
    uint64_t v31 = *(void **)v28;
    id v32 = (void *)*((void *)v28 + 1);
    *(void *)uint64_t v27 = *(void *)v28;
    *((void *)v27 + 1) = v32;
    uint64_t v33 = (void *)*((void *)v28 + 2);
    *((void *)v27 + 2) = v33;
    *((void *)v27 + 3) = v29;
    *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
    id v34 = v31;
    id v35 = v32;
    id v36 = v33;
    id v37 = v29;
  }
  else
  {
    long long v38 = *((_OWORD *)v28 + 1);
    *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
    *((_OWORD *)v27 + 1) = v38;
    *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
  }
  uint64_t v39 = *(int *)(v44 + 32);
  long long v40 = (_OWORD *)((char *)a1 + v39);
  uint64_t v41 = (_OWORD *)((char *)v45 + v39);
  _OWORD *v40 = *v41;
  *(_OWORD *)((char *)v40 + 9) = *(_OWORD *)((char *)v41 + 9);
  return a1;
}

uint64_t assignWithCopy for Artwork(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  if (*(void *)(a1 + 8))
  {
    if (v6)
    {
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_weakCopyAssign();
    }
    else
    {
      outlined destroy of Artwork.Caching(a1);
      uint64_t v7 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = v7;
    }
  }
  else if (v6)
  {
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = a2[1];
    swift_bridgeObjectRetain();
    swift_weakCopyInit();
  }
  else
  {
    long long v8 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = a2[2];
    *(_OWORD *)a1 = v8;
  }
  uint64_t v9 = a2[4];
  if (*(void *)(a1 + 32))
  {
    if (v9)
    {
      id v10 = *(void **)(a1 + 24);
      id v11 = (void *)a2[3];
      *(void *)(a1 + 24) = v11;
      id v12 = v11;

      id v13 = (void *)a2[4];
      uint64_t v14 = *(void **)(a1 + 32);
      *(void *)(a1 + 32) = v13;
      id v15 = v13;

      goto LABEL_15;
    }
    outlined destroy of Artwork.Content((id *)(a1 + 24));
  }
  else if (v9)
  {
    char v16 = (void *)a2[3];
    *(void *)(a1 + 24) = v16;
    uint64_t v17 = (void *)a2[4];
    *(void *)(a1 + 32) = v17;
    id v18 = v16;
    id v19 = v17;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
LABEL_15:
  uint64_t v75 = a3;
  uint64_t v76 = a2;
  uint64_t v20 = *(int *)(a3 + 24);
  uint64_t v21 = a1 + v20;
  id v22 = (char *)a2 + v20;
  uint64_t v23 = *(void *)((char *)a2 + v20);
  *(unsigned char *)(v21 + 8) = v22[8];
  *(void *)uint64_t v21 = v23;
  uint64_t v24 = (void *)*((void *)v22 + 2);
  uint64_t v25 = *(void **)(v21 + 16);
  *(void *)(v21 + 16) = v24;
  id v26 = v24;

  uint64_t v74 = (int *)type metadata accessor for Artwork.Decoration(0);
  uint64_t v27 = v74[5];
  uint64_t v28 = (void *)(v21 + v27);
  uint64_t v29 = &v22[v27];
  uint64_t v30 = type metadata accessor for UIView.Corner();
  uint64_t v31 = *(void *)(v30 - 8);
  id v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v28, 1, v30);
  int v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(void *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v34)
  {
    (*(void (**)(void *, uint64_t))(v31 + 8))(v28, v30);
LABEL_20:
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
    memcpy(v28, v29, *(void *)(*(void *)(v35 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(void *, char *, uint64_t))(v31 + 24))(v28, v29, v30);
LABEL_21:
  uint64_t v36 = v74[6];
  id v37 = *(void **)&v22[v36];
  long long v38 = *(void **)(v21 + v36);
  *(void *)(v21 + v36) = v37;
  id v39 = v37;

  *(void *)(v21 + v74[7]) = *(void *)&v22[v74[7]];
  uint64_t v40 = *(int *)(v75 + 28);
  uint64_t v41 = (void *)(a1 + v40);
  uint64_t v42 = (char *)v76 + v40;
  uint64_t v43 = *(void *)(a1 + v40 + 24);
  uint64_t v44 = *(void *)((char *)v76 + v40 + 24);
  if (v43)
  {
    if (v44)
    {
      char v45 = (void *)*v41;
      uint64_t v46 = *(void **)v42;
      *uint64_t v41 = *(void *)v42;
      id v47 = v46;

      uint64_t v48 = (void *)v41[1];
      uint64_t v49 = (void *)*((void *)v42 + 1);
      v41[1] = v49;
      id v50 = v49;

      unint64_t v51 = (void *)v41[2];
      id v52 = (void *)*((void *)v42 + 2);
      void v41[2] = v52;
      id v53 = v52;

      uint64_t v54 = (void *)*((void *)v42 + 3);
      uint64_t v55 = (void *)v41[3];
      v41[3] = v54;
      id v56 = v54;

      v41[4] = *((void *)v42 + 4);
      v41[5] = *((void *)v42 + 5);
    }
    else
    {
      outlined destroy of Artwork.Placeholder((uint64_t)v41);
      long long v66 = *((_OWORD *)v42 + 1);
      long long v65 = *((_OWORD *)v42 + 2);
      *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
      *((_OWORD *)v41 + 1) = v66;
      *((_OWORD *)v41 + 2) = v65;
    }
  }
  else if (v44)
  {
    id v57 = *(void **)v42;
    *uint64_t v41 = *(void *)v42;
    id v58 = (void *)*((void *)v42 + 1);
    v41[1] = v58;
    uint64_t v59 = (void *)*((void *)v42 + 2);
    void v41[2] = v59;
    CGRect v60 = (void *)*((void *)v42 + 3);
    v41[3] = v60;
    v41[4] = *((void *)v42 + 4);
    v41[5] = *((void *)v42 + 5);
    id v61 = v57;
    id v62 = v58;
    id v63 = v59;
    id v64 = v60;
  }
  else
  {
    long long v67 = *(_OWORD *)v42;
    long long v68 = *((_OWORD *)v42 + 2);
    *((_OWORD *)v41 + 1) = *((_OWORD *)v42 + 1);
    *((_OWORD *)v41 + 2) = v68;
    *(_OWORD *)uint64_t v41 = v67;
  }
  uint64_t v69 = *(int *)(v75 + 32);
  uint64_t v70 = (_OWORD *)(a1 + v69);
  id v71 = (long long *)((char *)v76 + v69);
  long long v72 = *v71;
  *(_OWORD *)((char *)v70 + 9) = *(long long *)((char *)v71 + 9);
  _OWORD *v70 = v72;
  return a1;
}

uint64_t outlined destroy of Artwork.Caching(uint64_t a1)
{
  return a1;
}

id *outlined destroy of Artwork.Content(id *a1)
{
  return a1;
}

uint64_t outlined destroy of Artwork.Placeholder(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for Artwork(uint64_t a1, uint64_t a2, int *a3)
{
  if (*(void *)(a2 + 8))
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    swift_weakTakeInit();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(_OWORD *)uint64_t v7 = *(_OWORD *)(a2 + v6);
  *(void *)(v7 + 16) = *(void *)(a2 + v6 + 16);
  uint64_t v9 = (int *)type metadata accessor for Artwork.Decoration(0);
  uint64_t v10 = v9[5];
  id v11 = (void *)(v7 + v10);
  id v12 = (const void *)(v8 + v10);
  uint64_t v13 = type metadata accessor for UIView.Corner();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  *(void *)(v7 + v9[6]) = *(void *)(v8 + v9[6]);
  *(void *)(v7 + v9[7]) = *(void *)(v8 + v9[7]);
  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  id v18 = (_OWORD *)(a1 + v16);
  id v19 = (_OWORD *)(a2 + v16);
  long long v20 = v19[1];
  *id v18 = *v19;
  v18[1] = v20;
  v18[2] = v19[2];
  uint64_t v21 = (_OWORD *)(a1 + v17);
  id v22 = (_OWORD *)(a2 + v17);
  *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)((char *)v22 + 9);
  *uint64_t v21 = *v22;
  return a1;
}

uint64_t assignWithTake for Artwork(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  if (*(void *)(a1 + 8))
  {
    if (v6)
    {
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v6;
      swift_bridgeObjectRelease();
      swift_weakTakeAssign();
      goto LABEL_8;
    }
    outlined destroy of Artwork.Caching(a1);
  }
  else if (v6)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    swift_weakTakeInit();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = a2[2];
LABEL_8:
  if (*(void *)(a1 + 32))
  {
    if (a2[4])
    {
      uint64_t v7 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = a2[3];

      uint64_t v8 = *(void **)(a1 + 32);
      *(void *)(a1 + 32) = a2[4];

      goto LABEL_13;
    }
    outlined destroy of Artwork.Content((id *)(a1 + 24));
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
LABEL_13:
  uint64_t v37 = a3;
  long long v38 = a2;
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v9;
  id v11 = (char *)a2 + v9;
  *(void *)uint64_t v10 = *(void *)((char *)a2 + v9);
  *(unsigned char *)(v10 + 8) = *((unsigned char *)a2 + v9 + 8);
  id v12 = *(void **)(a1 + v9 + 16);
  *(void *)(v10 + 16) = *(void *)((char *)a2 + v9 + 16);

  uint64_t v36 = (int *)type metadata accessor for Artwork.Decoration(0);
  uint64_t v13 = v36[5];
  uint64_t v14 = (void *)(v10 + v13);
  uint64_t v15 = &v11[v13];
  uint64_t v16 = type metadata accessor for UIView.Corner();
  uint64_t v17 = *(void *)(v16 - 8);
  id v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
LABEL_18:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, char *, uint64_t))(v17 + 40))(v14, v15, v16);
LABEL_19:
  uint64_t v22 = v36[6];
  uint64_t v23 = *(void **)(v10 + v22);
  *(void *)(v10 + v22) = *(void *)&v11[v22];

  *(void *)(v10 + v36[7]) = *(void *)&v11[v36[7]];
  uint64_t v24 = *(int *)(v37 + 28);
  uint64_t v25 = a1 + v24;
  id v26 = (char *)v38 + v24;
  if (!*(void *)(a1 + v24 + 24))
  {
LABEL_23:
    long long v31 = *((_OWORD *)v26 + 1);
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    *(_OWORD *)(v25 + 16) = v31;
    goto LABEL_24;
  }
  if (!*((void *)v26 + 3))
  {
    outlined destroy of Artwork.Placeholder(v25);
    goto LABEL_23;
  }
  uint64_t v27 = *(void **)v25;
  *(void *)uint64_t v25 = *(void *)v26;

  uint64_t v28 = *(void **)(v25 + 8);
  *(void *)(v25 + 8) = *((void *)v26 + 1);

  uint64_t v29 = *(void **)(v25 + 16);
  *(void *)(v25 + 16) = *((void *)v26 + 2);

  uint64_t v30 = *(void **)(v25 + 24);
  *(void *)(v25 + 24) = *((void *)v26 + 3);

LABEL_24:
  *(_OWORD *)(v25 + 32) = *((_OWORD *)v26 + 2);
  uint64_t v32 = *(int *)(v37 + 32);
  int v33 = (_OWORD *)(a1 + v32);
  int v34 = (_OWORD *)((char *)v38 + v32);
  *int v33 = *v34;
  *(_OWORD *)((char *)v33 + 9) = *(_OWORD *)((char *)v34 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Artwork(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002E0CE8);
}

uint64_t sub_1002E0CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = type metadata accessor for Artwork.Decoration(0);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 24);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for Artwork(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002E0DB8);
}

uint64_t sub_1002E0DB8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for Artwork.Decoration(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for Artwork()
{
  uint64_t result = type metadata accessor for Artwork.Decoration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for Artwork.View()
{
  return type metadata accessor for Artwork.View(0);
}

uint64_t type metadata completion function for Artwork.View()
{
  uint64_t result = type metadata accessor for Artwork(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t destroy for Artwork.Caching()
{
  swift_bridgeObjectRelease();

  return swift_weakDestroy();
}

void *initializeWithCopy for Artwork.Caching(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  return a1;
}

void *assignWithCopy for Artwork.Caching(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_weakCopyAssign();
  return a1;
}

_OWORD *initializeWithTake for Artwork.Caching(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_weakTakeInit();
  return a1;
}

void *assignWithTake for Artwork.Caching(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  swift_weakTakeAssign();
  return a1;
}

ValueMetadata *type metadata accessor for Artwork.Caching()
{
  return &type metadata for Artwork.Caching;
}

uint64_t type metadata accessor for Artwork.Caching.Reference()
{
  return self;
}

void *initializeBufferWithCopyOfBuffer for Artwork.Content(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  unint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

uint64_t assignWithCopy for Artwork.Content(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for Artwork.Content(uint64_t a1, _OWORD *a2)
{
  unint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for Artwork.Content()
{
  return &type metadata for Artwork.Content;
}

void *initializeBufferWithCopyOfBuffer for Artwork.Decoration(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = (void *)a2[2];
    *(void *)(a1 + 16) = v7;
    uint64_t v8 = a3[5];
    id v9 = (void *)(a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UIView.Corner();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
    id v14 = v7;
    if (v13(v10, 1, v11))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
      memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v17 = a3[6];
    uint64_t v18 = a3[7];
    int v19 = *(void **)((char *)a2 + v17);
    *(void *)((char *)v4 + v17) = v19;
    *(void *)((char *)v4 + v18) = *(uint64_t *)((char *)a2 + v18);
    id v20 = v19;
  }
  return v4;
}

void destroy for Artwork.Decoration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UIView.Corner();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = *(void **)(a1 + *(int *)(a2 + 24));
}

uint64_t initializeWithCopy for Artwork.Decoration(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  id v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UIView.Corner();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  id v13 = v6;
  if (v12(v9, 1, v10))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v15 = a3[6];
  uint64_t v16 = a3[7];
  uint64_t v17 = *(void **)(a2 + v15);
  *(void *)(a1 + v15) = v17;
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  id v18 = v17;
  return a1;
}

uint64_t assignWithCopy for Artwork.Decoration(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  uint64_t v7 = (void *)a2[2];
  uint64_t v8 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  id v9 = v7;

  uint64_t v10 = a3[5];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UIView.Corner();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  uint64_t v19 = a3[6];
  id v20 = *(void **)((char *)a2 + v19);
  uint64_t v21 = *(void **)(a1 + v19);
  *(void *)(a1 + v19) = v20;
  id v22 = v20;

  *(void *)(a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for Artwork.Decoration(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UIView.Corner();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  return a1;
}

uint64_t assignWithTake for Artwork.Decoration(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for UIView.Corner();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v16 = a3[6];
  int v17 = *(void **)(a1 + v16);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);

  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for Artwork.Decoration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002E1AE4);
}

uint64_t sub_1002E1AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for Artwork.Decoration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002E1BC0);
}

uint64_t sub_1002E1BC0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

void type metadata completion function for Artwork.Decoration()
{
  type metadata accessor for UIView.Corner?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for UIView.Corner?()
{
  if (!lazy cache variable for type metadata for UIView.Corner?)
  {
    type metadata accessor for UIView.Corner();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIView.Corner?);
    }
  }
}

__n128 __swift_memcpy25_8_1(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Artwork.Size(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Artwork.Size(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Artwork.Size()
{
  return &type metadata for Artwork.Size;
}

uint64_t __swift_memcpy9_8_1(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t destructiveInjectEnumTag for Artwork.Size.Dimension(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Artwork.Size.Dimension()
{
  return &type metadata for Artwork.Size.Dimension;
}

uint64_t outlined init with take of UIView.Corner?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002E1ED8()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1002E1F10()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in Artwork.View.reloadArtworkCatalogIfNeeded()(void **a1, void *a2)
{
  closure #1 in Artwork.View.reloadArtworkCatalogIfNeeded()(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1002E1F50()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in Artwork.View.reloadArtworkCatalogIfNeeded()(void *a1)
{
  return closure #1 in closure #1 in Artwork.View.reloadArtworkCatalogIfNeeded()(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t block_copy_helper_41(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_41()
{
  return swift_release();
}

uint64_t sub_1002E1FBC()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #1 in Artwork.View.reloadArtworkCatalogIfNeeded()()
{
  closure #1 in closure #1 in closure #1 in Artwork.View.reloadArtworkCatalogIfNeeded()(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40));
}

unint64_t _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWl_1()
{
  unint64_t result = _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWL_1;
  if (!_sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWL_1)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&_sSay8Dispatch0A13WorkItemFlagsVGMD_1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&_sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWL_1);
  }
  return result;
}

uint64_t outlined destroy of Artwork(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

_OWORD *outlined init with take of Artwork.Caching(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  swift_weakTakeInit();
  return a2;
}

void *Artwork.Placeholder.tint.getter()
{
  uint64_t v1 = *(void **)(v0 + 8);
  id v2 = v1;
  return v1;
}

double Radiosity.Specs.Radiosity.blurRadius.getter()
{
  return *(double *)(v0 + 32);
}

void Radiosity.Specs.Radiosity.blurRadius.setter(double a1)
{
  *(double *)(v1 + 32) = a1;
}

id one-time initialization function for defaultTint()
{
  id result = [self tertiaryLabelColor];
  static Artwork.Placeholder.defaultTint = (uint64_t)result;
  return result;
}

__n128 static Artwork.Placeholder.with(_:)@<Q0>(void (*a1)(long long *)@<X0>, uint64_t a2@<X8>)
{
  id v4 = [self secondarySystemFillColor];
  if (one-time initialization token for defaultTint != -1) {
    swift_once();
  }
  uint64_t v5 = (void *)static Artwork.Placeholder.defaultTint;
  uint64_t v6 = self;
  id v7 = v5;
  *(void *)&long long v11 = v4;
  *((void *)&v11 + 1) = v5;
  uint64_t v12 = 0;
  id v13 = [v6 configurationWithWeight:4];
  long long v14 = xmmword_1004A3B70;
  a1(&v11);
  uint64_t v8 = v12;
  id v9 = v13;
  __n128 result = (__n128)v14;
  *(_OWORD *)a2 = v11;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = v9;
  *(__n128 *)(a2 + 32) = result;
  return result;
}

id Artwork.Placeholder.preferredSymbolConfiguration(in:)(double a1, double a2)
{
  if (a1 > a2) {
    double v3 = a1;
  }
  else {
    double v3 = a2;
  }
  if (a2 < a1) {
    a1 = a2;
  }
  if (v3 * *(double *)(v2 + 32) >= a1) {
    double v4 = a1;
  }
  else {
    double v4 = v3 * *(double *)(v2 + 32);
  }
  uint64_t v5 = *(void **)(v2 + 24);
  id v6 = [self configurationWithPointSize:v4];
  id v7 = [v5 configurationByApplyingConfiguration:v6];

  return v7;
}

uint64_t Artwork.Placeholder.image(with:graphicsFormat:)(uint64_t a1, double a2, double a3)
{
  double v4 = (_OWORD *)v3;
  id v5 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRenderer), "initWithSize:format:", a1, a2, a3);
  uint64_t v16 = 0;
  outlined init with take of PresentationSource?(v3, (uint64_t)&v19, &demangling cache variable for type metadata for UIColor?);
  outlined init with take of PresentationSource?(v3 + 8, (uint64_t)&v18, &demangling cache variable for type metadata for UIColor?);
  outlined init with take of PresentationSource?(v3 + 16, (uint64_t)&v17, &demangling cache variable for type metadata for UIImage?);
  id v6 = *(void **)(v3 + 24);
  uint64_t v7 = swift_allocObject();
  long long v8 = v4[1];
  *(_OWORD *)(v7 + 16) = *v4;
  *(_OWORD *)(v7 + 32) = v8;
  *(_OWORD *)(v7 + 48) = v4[2];
  *(void *)(v7 + 64) = &v16;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for closure #1 in Artwork.Placeholder.image(with:graphicsFormat:);
  *(void *)(v9 + 24) = v7;
  v15[4] = partial apply for thunk for @callee_guaranteed (@guaranteed MPIdentifierSet & MPMutableIdentifierSet) -> ();
  _OWORD v15[5] = v9;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  void v15[2] = thunk for @escaping @callee_guaranteed (@guaranteed MPIdentifierSet & MPMutableIdentifierSet) -> ();
  v15[3] = &block_descriptor_44;
  uint64_t v10 = _Block_copy(v15);
  outlined retain of ICMusicSubscriptionStatus?(&v19);
  outlined retain of ICMusicSubscriptionStatus?(&v18);
  outlined retain of ICMusicSubscriptionStatus?(&v17);
  id v11 = v6;
  swift_retain();
  swift_release();
  id v12 = [v5 imageWithActions:v10];

  _Block_release(v10);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v5)
  {
    __break(1u);
  }
  else
  {
    uint64_t v14 = v16;
    swift_release();
    return v14;
  }
  return result;
}

void closure #1 in Artwork.Placeholder.image(with:graphicsFormat:)(void *a1, uint64_t a2, void **a3)
{
  id v6 = [a1 format];
  [v6 bounds];
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  double v14 = v13;

  id v15 = [self secondarySystemBackgroundColor];
  [v15 setFill];

  uint64_t v16 = self;
  id v17 = objc_msgSend(v16, "bezierPathWithRect:", v8, v10, v12, v14);
  [v17 fill];

  if (*(void *)a2)
  {
    id v18 = *(id *)a2;
    [v18 setFill];
    id v19 = objc_msgSend(v16, "bezierPathWithRect:", v8, v10, v12, v14);
    [v19 fill];
  }
  if (v12 > v14) {
    double v20 = v12;
  }
  else {
    double v20 = v14;
  }
  if (v14 >= v12) {
    double v21 = v12;
  }
  else {
    double v21 = v14;
  }
  double v22 = v20 * *(double *)(a2 + 32);
  if (v22 >= v21) {
    double v23 = v21;
  }
  else {
    double v23 = v22;
  }
  uint64_t v24 = *(void **)(a2 + 24);
  id v25 = [self configurationWithPointSize:v23];
  id v26 = [v24 configurationByApplyingConfiguration:v25];

  outlined init with take of PresentationSource?(a2 + 16, (uint64_t)v37, &demangling cache variable for type metadata for UIImage?);
  outlined init with take of PresentationSource?((uint64_t)v37, (uint64_t)&v38, &demangling cache variable for type metadata for UIImage?);
  if (v38)
  {
    id v27 = [v38 imageWithSymbolConfiguration:v26];
    if (v27)
    {
      uint64_t v28 = v27;
      uint64_t v29 = *(void **)(a2 + 8);
      if (v29)
      {
        id v30 = v29;
        id v31 = [v28 imageWithTintColor:v30];

        uint64_t v28 = v31;
      }
      [v28 size];
      uint64_t v33 = v32;
      id v34 = [self mainScreen];
      [v34 scale];

      CGRect.centeringAlong(axes:bounds:scale:)();
      [v28 drawInRect:v33];
    }
  }
  id v35 = [a1 currentImage];

  uint64_t v36 = *a3;
  *a3 = v35;
}

uint64_t sub_1002E286C()
{
  return objectdestroy_17Tm_0();
}

void partial apply for closure #1 in Artwork.Placeholder.image(with:graphicsFormat:)(void *a1)
{
  closure #1 in Artwork.Placeholder.image(with:graphicsFormat:)(a1, v1 + 16, *(void ***)(v1 + 64));
}

uint64_t sub_1002E2880()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_42(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_42()
{
  return swift_release();
}

char *Artwork.Placeholder.View.__allocating_init(configuration:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return Artwork.Placeholder.View.init(configuration:)(a1);
}

char *Artwork.Placeholder.View.init(configuration:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_contentView;
  id v6 = objc_allocWithZone((Class)UIImageView);
  double v7 = v1;
  *(void *)&v2[v5] = [v6 init];
  outlined init with take of PresentationSource?(a1, (uint64_t)&v20, &demangling cache variable for type metadata for UIColor?);
  outlined init with take of PresentationSource?(a1 + 8, (uint64_t)&v19, &demangling cache variable for type metadata for UIColor?);
  outlined init with take of PresentationSource?(a1 + 16, (uint64_t)&v18, &demangling cache variable for type metadata for UIImage?);
  double v8 = *(void **)(a1 + 24);
  double v9 = &v7[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration];
  long long v10 = *(_OWORD *)a1;
  long long v11 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v9 + 1) = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v9 + 2) = v11;
  *(_OWORD *)double v9 = v10;
  outlined retain of ICMusicSubscriptionStatus?(&v20);
  outlined retain of ICMusicSubscriptionStatus?(&v19);
  outlined retain of ICMusicSubscriptionStatus?(&v18);
  id v12 = v8;

  v17.receiver = v7;
  v17.super_class = ObjectType;
  double v13 = (char *)objc_msgSendSuper2(&v17, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  uint64_t v14 = *(void *)&v13[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_contentView];
  id v15 = v13;
  [v15 addSubview:v14];
  memset(v21, 0, sizeof(v21));
  Artwork.Placeholder.View.configurationDidChange(_:)((uint64_t)v21);
  outlined release of UIView.Shadow(&v20);
  outlined release of UIView.Shadow(&v19);
  outlined release of UIView.Shadow(&v18);

  return v15;
}

void Artwork.Placeholder.View.configurationDidChange(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  outlined init with take of PresentationSource?(a1, (uint64_t)v29, &demangling cache variable for type metadata for Artwork.Placeholder?);
  double v4 = v30;
  uint64_t v5 = &v1[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration];
  swift_beginAccess();
  double v7 = *(void **)v5;
  id v6 = (void *)*((void *)v5 + 1);
  double v8 = (void *)*((void *)v5 + 2);
  double v9 = (void *)*((void *)v5 + 3);
  double v11 = *((double *)v5 + 4);
  double v10 = *((double *)v5 + 5);
  if (*(void *)v5)
  {
    id v12 = v8;
    id v13 = v9;
    id v14 = v6;
    id v15 = v7;
  }
  else
  {
    uint64_t v16 = self;
    id v12 = v8;
    id v17 = v9;
    id v14 = v6;
    id v15 = [v16 clearColor];
    double v7 = 0;
  }
  id v18 = v7;
  [v2 setBackgroundColor:v15];

  id v19 = *(void **)&v2[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_contentView];
  [v19 setHidden:v8 == 0];
  [v19 setImage:v12];
  [v19 setTintColor:v14];
  [v19 setAlpha:v10];
  id v20 = [v2 superview];

  if (!v20) {
    goto LABEL_18;
  }
  outlined init with take of PresentationSource?(a1, (uint64_t)v34, &demangling cache variable for type metadata for Artwork.Placeholder?);
  if (!v36)
  {
    if (!v8) {
      goto LABEL_14;
    }
    goto LABEL_17;
  }
  id v21 = v35;
  id v22 = v35;
  double v23 = v22;
  if (!v8)
  {
    if (!v21) {
      goto LABEL_14;
    }

LABEL_17:
    [v2 setNeedsLayout];
    goto LABEL_18;
  }
  if (!v21) {
    goto LABEL_17;
  }
  type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for UIImage);
  id v24 = v12;
  char v25 = static NSObject.== infix(_:_:)();

  if ((v25 & 1) == 0) {
    goto LABEL_17;
  }
LABEL_14:
  outlined init with take of PresentationSource?(a1, (uint64_t)v31, &demangling cache variable for type metadata for Artwork.Placeholder?);
  if (!v32) {
    goto LABEL_17;
  }
  if (v11 != v33) {
    goto LABEL_17;
  }
  type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for UIImageSymbolConfiguration);
  id v26 = v9;
  id v27 = v4;
  char v28 = static NSObject.== infix(_:_:)();

  if ((v28 & 1) == 0) {
    goto LABEL_17;
  }
LABEL_18:
}

void Artwork.Placeholder.View.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_contentView;
  *(void *)&v0[v1] = [objc_allocWithZone((Class)UIImageView) init];

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id Artwork.Placeholder.View.typedConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess();
  double v4 = *(void **)v3;
  uint64_t v5 = *(void **)(v3 + 8);
  id v6 = *(void **)(v3 + 16);
  id v11 = *(id *)(v3 + 24);
  *(void *)a1 = *(void *)v3;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v11;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v3 + 32);
  id v7 = v4;
  id v8 = v5;
  id v9 = v6;

  return v11;
}

void Artwork.Placeholder.View.typedConfiguration.setter(uint64_t a1)
{
  uint64_t v3 = (long long *)(v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration);
  swift_beginAccess();
  long long v4 = v3[1];
  long long v30 = *v3;
  v31[0] = v4;
  v31[1] = v3[2];
  uint64_t v22 = *((void *)v3 + 1);
  uint64_t v23 = *(void *)v3;
  uint64_t v20 = *((void *)v3 + 3);
  uint64_t v21 = *((void *)v3 + 2);
  uint64_t v18 = *((void *)v3 + 5);
  uint64_t v19 = *((void *)v3 + 4);
  outlined init with take of PresentationSource?((uint64_t)&v30, (uint64_t)&v32, &demangling cache variable for type metadata for UIColor?);
  outlined init with take of PresentationSource?((uint64_t)&v30 + 8, (uint64_t)&v33, &demangling cache variable for type metadata for UIColor?);
  outlined init with take of PresentationSource?((uint64_t)v31, (uint64_t)&v34, &demangling cache variable for type metadata for UIImage?);
  uint64_t v5 = (void *)*((void *)&v31[0] + 1);
  outlined init with take of PresentationSource?(a1, (uint64_t)&v26, &demangling cache variable for type metadata for UIColor?);
  outlined init with take of PresentationSource?(a1 + 8, (uint64_t)&v25, &demangling cache variable for type metadata for UIColor?);
  outlined init with take of PresentationSource?(a1 + 16, (uint64_t)&v24, &demangling cache variable for type metadata for UIImage?);
  id v6 = *(void **)(a1 + 24);
  id v8 = *(void **)v3;
  id v7 = (void *)*((void *)v3 + 1);
  double v10 = (void *)*((void *)v3 + 2);
  id v9 = (void *)*((void *)v3 + 3);
  long long v11 = *(_OWORD *)(a1 + 16);
  *uint64_t v3 = *(_OWORD *)a1;
  v3[1] = v11;
  v3[2] = *(_OWORD *)(a1 + 32);
  outlined retain of ICMusicSubscriptionStatus?(&v32);
  outlined retain of ICMusicSubscriptionStatus?(&v33);
  outlined retain of ICMusicSubscriptionStatus?(&v34);
  id v12 = v5;
  outlined retain of ICMusicSubscriptionStatus?(&v26);
  outlined retain of ICMusicSubscriptionStatus?(&v25);
  outlined retain of ICMusicSubscriptionStatus?(&v24);
  id v13 = v6;

  long long v14 = v3[1];
  long long v28 = *v3;
  v29[0] = v14;
  v29[1] = v3[2];
  outlined init with take of PresentationSource?((uint64_t)&v28, (uint64_t)&v35, &demangling cache variable for type metadata for UIColor?);
  outlined init with take of PresentationSource?((uint64_t)&v28 + 8, (uint64_t)&v36, &demangling cache variable for type metadata for UIColor?);
  outlined init with take of PresentationSource?((uint64_t)v29, (uint64_t)v37, &demangling cache variable for type metadata for UIImage?);
  id v15 = (void *)*((void *)&v29[0] + 1);
  outlined retain of ICMusicSubscriptionStatus?(&v35);
  outlined retain of ICMusicSubscriptionStatus?(&v36);
  outlined retain of ICMusicSubscriptionStatus?(v37);
  id v16 = v15;
  BOOL v17 = specialized static Artwork.Placeholder.__derived_struct_equals(_:_:)((uint64_t)&v28, (uint64_t)&v30);
  outlined release of UIView.Shadow(&v35);
  outlined release of UIView.Shadow(&v36);
  outlined release of UIView.Shadow(v37);

  if (!v17)
  {
    v27[0] = v23;
    v27[1] = v22;
    v27[2] = v21;
    void v27[3] = v20;
    v27[4] = v19;
    v27[5] = v18;
    Artwork.Placeholder.View.configurationDidChange(_:)((uint64_t)v27);
  }
  outlined release of UIView.Shadow(&v26);
  outlined release of UIView.Shadow(&v25);
  outlined release of UIView.Shadow(&v24);

  outlined release of UIView.Shadow(&v32);
  outlined release of UIView.Shadow(&v33);
  outlined release of UIView.Shadow(&v34);
}

void (*Artwork.Placeholder.View.typedConfiguration.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0xC8uLL);
  *a1 = v3;
  v3[24] = v1;
  uint64_t v4 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess();
  uint64_t v5 = *(void **)v4;
  id v6 = *(void **)(v4 + 8);
  id v7 = *(void **)(v4 + 16);
  id v8 = *(void **)(v4 + 24);
  v3[6] = *(void *)v4;
  v3[7] = v6;
  v3 += 6;
  v3[2] = v7;
  v3[3] = v8;
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v4 + 32);
  id v9 = v7;
  id v10 = v8;
  id v11 = v5;
  id v12 = v6;
  return Artwork.Placeholder.View.typedConfiguration.modify;
}

void Artwork.Placeholder.View.typedConfiguration.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (_OWORD *)(*a1 + 48);
  long long v4 = *(_OWORD *)(*a1 + 64);
  if (a2)
  {
    *(_OWORD *)uint64_t v2 = *v3;
    *(_OWORD *)(v2 + 16) = v4;
    *(_OWORD *)(v2 + 32) = v3[2];
    outlined init with take of PresentationSource?(v2, v2 + 168, &demangling cache variable for type metadata for UIColor?);
    outlined init with take of PresentationSource?(v2 + 8, v2 + 176, &demangling cache variable for type metadata for UIColor?);
    outlined init with take of PresentationSource?(v2 + 16, v2 + 184, &demangling cache variable for type metadata for UIImage?);
    uint64_t v5 = *(void **)(v2 + 24);
    outlined retain of ICMusicSubscriptionStatus?((id *)(v2 + 168));
    outlined retain of ICMusicSubscriptionStatus?((id *)(v2 + 176));
    outlined retain of ICMusicSubscriptionStatus?((id *)(v2 + 184));
    id v6 = v5;
    Artwork.Placeholder.View.typedConfiguration.setter(v2);
    id v7 = *(void **)(v2 + 48);
    id v8 = *(void **)(v2 + 56);
    id v9 = *(void **)(v2 + 64);
  }
  else
  {
    *(_OWORD *)(v2 + 96) = *v3;
    *(_OWORD *)(v2 + 112) = v4;
    *(_OWORD *)(v2 + 128) = v3[2];
    Artwork.Placeholder.View.typedConfiguration.setter(v2 + 96);
  }

  free((void *)v2);
}

Swift::Void __swiftcall Artwork.Placeholder.View.layoutSubviews()()
{
  v41.receiver = v0;
  v41.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v41, "layoutSubviews");
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_contentView];
  uint64_t v2 = &v0[OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration];
  swift_beginAccess();
  uint64_t v3 = *(void **)v2;
  long long v4 = (void *)*((void *)v2 + 1);
  uint64_t v5 = (void *)*((void *)v2 + 3);
  double v6 = *((double *)v2 + 4);
  id v7 = *((id *)v2 + 2);
  id v8 = v5;
  id v9 = v3;
  id v10 = v4;
  [v0 bounds];
  if (v11 > v12) {
    double v13 = v11;
  }
  else {
    double v13 = v12;
  }
  if (v12 >= v11) {
    double v14 = v11;
  }
  else {
    double v14 = v12;
  }
  double v15 = v6 * v13;
  if (v15 >= v14) {
    double v16 = v14;
  }
  else {
    double v16 = v15;
  }
  BOOL v17 = self;
  id v18 = [v17 configurationWithPointSize:v16];
  id v19 = [v8 configurationByApplyingConfiguration:v18];

  [v1 setPreferredSymbolConfiguration:v19];
  if ([self _isInAnimationBlock] && (uint64_t v20 = *((void *)v2 + 2)) != 0)
  {
    id v21 = [objc_allocWithZone((Class)UIImageView) initWithImage:v20];
    uint64_t v22 = *(void **)v2;
    uint64_t v23 = (void *)*((void *)v2 + 1);
    id v24 = (void *)*((void *)v2 + 3);
    double v25 = *((double *)v2 + 4);
    id v26 = *((id *)v2 + 2);
    id v27 = v24;
    id v28 = v22;
    id v29 = v23;
    [v0 bounds];
    if (v30 > v31) {
      double v32 = v30;
    }
    else {
      double v32 = v31;
    }
    if (v31 >= v30) {
      double v33 = v30;
    }
    else {
      double v33 = v31;
    }
    double v34 = v25 * v32;
    if (v34 >= v33) {
      double v34 = v33;
    }
    id v35 = [v17 configurationWithPointSize:v34];
    id v36 = [v27 configurationByApplyingConfiguration:v35];

    [v21 setPreferredSymbolConfiguration:v36];
    [v1 setContentMode:1];
    [v0 bounds];
    objc_msgSend(v21, "sizeThatFits:", v37, v38);
    CGRect.centeringAlong(axes:in:)();
    objc_msgSend(v1, "setFrame:");
  }
  else
  {
    [v1 setContentMode:4];
    [v0 bounds];
    objc_msgSend(v1, "sizeThatFits:", v39, v40);
    CGRect.centeringAlong(axes:in:)();
    objc_msgSend(v1, "setFrame:");
  }
}

char *protocol witness for MusicUIContentView.init(configuration:) in conformance Artwork.Placeholder.View(_OWORD *a1)
{
  long long v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  void v5[2] = a1[2];
  id v3 = objc_allocWithZone(v1);
  return Artwork.Placeholder.View.init(configuration:)((uint64_t)v5);
}

id protocol witness for MusicUIContentView.typedConfiguration.getter in conformance Artwork.Placeholder.View@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess();
  long long v4 = *(void **)v3;
  id v11 = *(id *)(v3 + 8);
  uint64_t v5 = *(void **)(v3 + 16);
  double v6 = *(void **)(v3 + 24);
  *(void *)a1 = *(void *)v3;
  *(void *)(a1 + 8) = v11;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v3 + 32);
  id v7 = v5;
  id v8 = v6;
  id v9 = v4;

  return v11;
}

void protocol witness for MusicUIContentView.typedConfiguration.setter in conformance Artwork.Placeholder.View(_OWORD *a1)
{
  long long v1 = a1[1];
  v2[0] = *a1;
  v2[1] = v1;
  _OWORD v2[2] = a1[2];
  Artwork.Placeholder.View.typedConfiguration.setter((uint64_t)v2);
}

void (*protocol witness for MusicUIContentView.typedConfiguration.modify in conformance Artwork.Placeholder.View(void *a1))(void *a1)
{
  long long v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Artwork.Placeholder.View.typedConfiguration.modify(v2);
  return protocol witness for MusicUIContentView.typedConfiguration.modify in conformance Artwork.Placeholder.View;
}

void protocol witness for MusicUIContentView.typedConfiguration.modify in conformance Artwork.Placeholder.View(void *a1)
{
  long long v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

id protocol witness for UIContentView.configuration.getter in conformance Artwork.Placeholder.View@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = (uint64_t)&type metadata for Artwork.Placeholder;
  a1[4] = lazy protocol witness table accessor for type Artwork.Placeholder and conformance Artwork.Placeholder();
  uint64_t v3 = swift_allocObject();
  *a1 = v3;
  uint64_t v4 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess();
  uint64_t v5 = *(void **)v4;
  id v12 = *(id *)(v4 + 8);
  double v6 = *(void **)(v4 + 16);
  id v7 = *(void **)(v4 + 24);
  *(void *)(v3 + 16) = *(void *)v4;
  *(void *)(v3 + 24) = v12;
  *(void *)(v3 + 32) = v6;
  *(void *)(v3 + 40) = v7;
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(v4 + 32);
  id v8 = v6;
  id v9 = v7;
  id v10 = v5;

  return v12;
}

uint64_t protocol witness for UIContentView.configuration.setter in conformance Artwork.Placeholder.View(uint64_t a1)
{
  outlined init with copy of AlertPresenting(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIContentConfiguration);
  swift_dynamicCast();
  v7[0] = v3;
  v7[1] = v4;
  _OWORD v7[2] = v5;
  Artwork.Placeholder.View.typedConfiguration.setter((uint64_t)v7);
  return __swift_destroy_boxed_opaque_existential_0Tm(a1);
}

void (*protocol witness for UIContentView.configuration.modify in conformance Artwork.Placeholder.View(void *a1))(_OWORD **a1, char a2)
{
  long long v3 = malloc(0x128uLL);
  *a1 = v3;
  v3[36] = v1;
  v3[26] = &type metadata for Artwork.Placeholder;
  v3[27] = lazy protocol witness table accessor for type Artwork.Placeholder and conformance Artwork.Placeholder();
  uint64_t v4 = swift_allocObject();
  v3[23] = v4;
  uint64_t v5 = v1 + OBJC_IVAR____TtCVV11MusicCoreUI7Artwork11Placeholder4View_typedConfiguration;
  swift_beginAccess();
  double v6 = *(void **)v5;
  id v7 = *(void **)(v5 + 8);
  id v8 = *(void **)(v5 + 16);
  id v9 = *(void **)(v5 + 24);
  *(void *)(v4 + 16) = *(void *)v5;
  *(void *)(v4 + 24) = v7;
  *(void *)(v4 + 32) = v8;
  *(void *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(v5 + 32);
  id v10 = v8;
  id v11 = v9;
  id v12 = v6;
  id v13 = v7;
  return protocol witness for UIContentView.configuration.modify in conformance Artwork.Placeholder.View;
}

void protocol witness for UIContentView.configuration.modify in conformance Artwork.Placeholder.View(_OWORD **a1, char a2)
{
  long long v2 = *a1;
  long long v3 = *a1 + 6;
  uint64_t v4 = (uint64_t)(*a1 + 9);
  uint64_t v5 = (uint64_t)*a1 + 184;
  if (a2)
  {
    outlined init with copy of AlertPresenting((uint64_t)*a1 + 184, (uint64_t)(v2 + 14));
    outlined init with copy of AlertPresenting((uint64_t)(v2 + 14), v4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIContentConfiguration);
    swift_dynamicCast();
    long long v6 = v3[1];
    *long long v2 = *v3;
    v2[1] = v6;
    _OWORD v2[2] = v3[2];
    Artwork.Placeholder.View.typedConfiguration.setter((uint64_t)v2);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)(v2 + 14));
  }
  else
  {
    outlined init with copy of AlertPresenting((uint64_t)*a1 + 184, v4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIContentConfiguration);
    swift_dynamicCast();
    long long v7 = v3[1];
    _OWORD v2[3] = *v3;
    v2[4] = v7;
    v2[5] = v3[2];
    Artwork.Placeholder.View.typedConfiguration.setter((uint64_t)(v2 + 3));
  }
  __swift_destroy_boxed_opaque_existential_0Tm(v5);

  free(v2);
}

char *protocol witness for UIContentConfiguration.makeContentView() in conformance Artwork.Placeholder()
{
  long long v1 = v0[1];
  long long v8 = *v0;
  v9[0] = v1;
  v9[1] = v0[2];
  outlined init with take of PresentationSource?((uint64_t)&v8, (uint64_t)&v10, &demangling cache variable for type metadata for UIColor?);
  outlined init with take of PresentationSource?((uint64_t)&v8 + 8, (uint64_t)&v11, &demangling cache variable for type metadata for UIColor?);
  outlined init with take of PresentationSource?((uint64_t)v9, (uint64_t)&v12, &demangling cache variable for type metadata for UIImage?);
  long long v2 = (void *)*((void *)&v9[0] + 1);
  id v3 = objc_allocWithZone((Class)type metadata accessor for Artwork.Placeholder.View());
  outlined retain of ICMusicSubscriptionStatus?(&v10);
  outlined retain of ICMusicSubscriptionStatus?(&v11);
  outlined retain of ICMusicSubscriptionStatus?(&v12);
  id v4 = v2;
  uint64_t v5 = Artwork.Placeholder.View.init(configuration:)((uint64_t)&v8);
  lazy protocol witness table accessor for type Artwork.Placeholder.View and conformance Artwork.Placeholder.View(&lazy protocol witness table cache variable for type Artwork.Placeholder.View and conformance Artwork.Placeholder.View, v6, (void (*)(uint64_t))type metadata accessor for Artwork.Placeholder.View);
  return v5;
}

id protocol witness for UIContentConfiguration.updated(for:) in conformance Artwork.Placeholder@<X0>(uint64_t a1@<X8>)
{
  long long v2 = *(void **)v1;
  id v9 = *(id *)(v1 + 8);
  id v3 = *(void **)(v1 + 16);
  id v4 = *(void **)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  id v5 = v3;
  id v6 = v4;
  id v7 = v2;

  return v9;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Artwork.Placeholder(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  _OWORD v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return specialized static Artwork.Placeholder.__derived_struct_equals(_:_:)((uint64_t)v7, (uint64_t)v8);
}

double one-time initialization function for nowPlaying()
{
  uint64_t v0 = self;
  id v1 = [v0 blackColor];
  id v2 = [v1 colorWithAlphaComponent:0.1];

  id v3 = [v0 whiteColor];
  id v4 = [v3 colorWithAlphaComponent:0.12];

  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [self _systemImageNamed:v5];

  id v7 = [self configurationWithWeight:3];
  static Artwork.Placeholder.nowPlaying = (uint64_t)v2;
  unk_1005ADB90 = v4;
  qword_1005ADB98 = (uint64_t)v6;
  unk_1005ADBA0 = v7;
  double result = 0.46;
  xmmword_1005ADBA8 = xmmword_1004A3B80;
  return result;
}

uint64_t *Artwork.Placeholder.nowPlaying.unsafeMutableAddressor()
{
  if (one-time initialization token for nowPlaying != -1) {
    swift_once();
  }
  return &static Artwork.Placeholder.nowPlaying;
}

id static Artwork.Placeholder.nowPlaying.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for nowPlaying != -1) {
    swift_once();
  }
  id v2 = (void *)static Artwork.Placeholder.nowPlaying;
  id v3 = (void *)unk_1005ADB90;
  NSString v5 = (void *)qword_1005ADB98;
  uint64_t v4 = unk_1005ADBA0;
  id v10 = (id)unk_1005ADBA0;
  *(void *)a1 = static Artwork.Placeholder.nowPlaying;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_1005ADBA8;
  id v6 = v2;
  id v7 = v3;
  id v8 = v5;

  return v10;
}

double one-time initialization function for miniPlayer()
{
  uint64_t v0 = self;
  id v1 = [v0 tertiarySystemFillColor];
  id v2 = [v0 quaternaryLabelColor];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [self _systemImageNamed:v3];

  id v5 = [self configurationWithWeight:3];
  static Artwork.Placeholder.miniPlayer = (uint64_t)v1;
  unk_1005ADBC0 = v2;
  qword_1005ADBC8 = (uint64_t)v4;
  unk_1005ADBD0 = v5;
  double result = 0.46;
  xmmword_1005ADBD8 = xmmword_1004A3B80;
  return result;
}

uint64_t *Artwork.Placeholder.miniPlayer.unsafeMutableAddressor()
{
  if (one-time initialization token for miniPlayer != -1) {
    swift_once();
  }
  return &static Artwork.Placeholder.miniPlayer;
}

id static Artwork.Placeholder.miniPlayer.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for miniPlayer != -1) {
    swift_once();
  }
  id v2 = (void *)static Artwork.Placeholder.miniPlayer;
  NSString v3 = (void *)unk_1005ADBC0;
  id v5 = (void *)qword_1005ADBC8;
  uint64_t v4 = unk_1005ADBD0;
  id v10 = (id)unk_1005ADBD0;
  *(void *)a1 = static Artwork.Placeholder.miniPlayer;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_1005ADBD8;
  id v6 = v2;
  id v7 = v3;
  id v8 = v5;

  return v10;
}

void static Artwork.Placeholder.device(representing:basedOn:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v6 = *(void **)a2;
  id v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a2 + 24);
  id v9 = self;
  id v10 = v7;
  id v11 = v8;
  id v12 = v6;
  id v13 = [v9 _symbolImageForRoute:a1];
  double v14 = v13;
  if (v7)
  {
    double v32 = v6;
    double v15 = self;
    id v16 = v10;
    id v17 = v14;
    id v18 = [v15 secondaryLabelColor];
    type metadata accessor for UIMenu(0, (unint64_t *)&_sSo7UIColorCML_0);
    char v19 = static NSObject.== infix(_:_:)();

    if (v19)
    {

      id v20 = [v15 labelColor];
    }
    else
    {
      id v24 = v16;
      id v25 = [v15 tertiaryLabelColor];
      char v26 = static NSObject.== infix(_:_:)();

      if (v26)
      {

        id v20 = [v15 secondaryLabelColor];
      }
      else
      {
        id v23 = v24;
        id v27 = [v15 quaternaryLabelColor];
        char v28 = static NSObject.== infix(_:_:)();

        if ((v28 & 1) == 0)
        {
LABEL_12:
          id v6 = v32;
          goto LABEL_13;
        }

        id v20 = [v15 tertiaryLabelColor];
      }
    }
    id v23 = v20;
    goto LABEL_12;
  }
  uint64_t v21 = one-time initialization token for defaultTint;
  id v22 = v13;
  if (v21 != -1) {
    swift_once();
  }
  id v23 = (id)static Artwork.Placeholder.defaultTint;
LABEL_13:
  uint64_t v29 = *(void *)(a2 + 40);
  id v30 = [self configurationWithHierarchicalColor:v23];
  id v31 = [v11 configurationByApplyingConfiguration:v30];

  *a3 = v6;
  a3[1] = v7;
  a3[2] = v14;
  a3[3] = v31;
  a3[4] = 0x3FE0000000000000;
  a3[5] = v29;
}

uint64_t *Artwork.Placeholder.music.unsafeMutableAddressor()
{
  if (one-time initialization token for music != -1) {
    swift_once();
  }
  return &static Artwork.Placeholder.music;
}

id static Artwork.Placeholder.music.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for music != -1) {
    swift_once();
  }
  id v2 = (void *)static Artwork.Placeholder.music;
  NSString v3 = (void *)unk_1005ADBF0;
  id v5 = (void *)qword_1005ADBF8;
  uint64_t v4 = unk_1005ADC00;
  id v10 = (id)unk_1005ADC00;
  *(void *)a1 = static Artwork.Placeholder.music;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_1005ADC08;
  id v6 = v2;
  id v7 = v3;
  id v8 = v5;

  return v10;
}

id one-time initialization function for musicVideo()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self _systemImageNamed:v0];

  id v2 = [self configurationWithWeight:5];
  id v3 = [self secondarySystemFillColor];
  if (one-time initialization token for defaultTint != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)static Artwork.Placeholder.defaultTint;
  static Artwork.Placeholder.musicVideo = (uint64_t)v3;
  unk_1005ADC20 = static Artwork.Placeholder.defaultTint;
  qword_1005ADC28 = (uint64_t)v1;
  unk_1005ADC30 = v2;
  xmmword_1005ADC38 = xmmword_1004A3B70;

  return v4;
}

uint64_t *Artwork.Placeholder.musicVideo.unsafeMutableAddressor()
{
  if (one-time initialization token for musicVideo != -1) {
    swift_once();
  }
  return &static Artwork.Placeholder.musicVideo;
}

id static Artwork.Placeholder.musicVideo.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for musicVideo != -1) {
    swift_once();
  }
  id v2 = (void *)static Artwork.Placeholder.musicVideo;
  id v3 = (void *)unk_1005ADC20;
  id v5 = (void *)qword_1005ADC28;
  uint64_t v4 = unk_1005ADC30;
  id v10 = (id)unk_1005ADC30;
  *(void *)a1 = static Artwork.Placeholder.musicVideo;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_1005ADC38;
  id v6 = v2;
  id v7 = v3;
  id v8 = v5;

  return v10;
}

id one-time initialization function for tv()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self _systemImageNamed:v0];

  id v2 = [self configurationWithWeight:5];
  id v3 = [self secondarySystemFillColor];
  if (one-time initialization token for defaultTint != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)static Artwork.Placeholder.defaultTint;
  static Artwork.Placeholder.tv = (uint64_t)v3;
  unk_1005ADC50 = static Artwork.Placeholder.defaultTint;
  qword_1005ADC58 = (uint64_t)v1;
  unk_1005ADC60 = v2;
  xmmword_1005ADC68 = xmmword_1004A3B70;

  return v4;
}

uint64_t *Artwork.Placeholder.tv.unsafeMutableAddressor()
{
  if (one-time initialization token for tv != -1) {
    swift_once();
  }
  return &static Artwork.Placeholder.tv;
}

id static Artwork.Placeholder.tv.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for tv != -1) {
    swift_once();
  }
  id v2 = (void *)static Artwork.Placeholder.tv;
  id v3 = (void *)unk_1005ADC50;
  id v5 = (void *)qword_1005ADC58;
  uint64_t v4 = unk_1005ADC60;
  id v10 = (id)unk_1005ADC60;
  *(void *)a1 = static Artwork.Placeholder.tv;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_1005ADC68;
  id v6 = v2;
  id v7 = v3;
  id v8 = v5;

  return v10;
}

id one-time initialization function for microphone()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self _systemImageNamed:v0];

  id v2 = [self configurationWithWeight:4];
  id v3 = [self secondarySystemFillColor];
  if (one-time initialization token for defaultTint != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)static Artwork.Placeholder.defaultTint;
  static Artwork.Placeholder.microphone = (uint64_t)v3;
  unk_1005ADC80 = static Artwork.Placeholder.defaultTint;
  qword_1005ADC88 = (uint64_t)v1;
  unk_1005ADC90 = v2;
  xmmword_1005ADC98 = xmmword_1004A3B80;

  return v4;
}

uint64_t *Artwork.Placeholder.microphone.unsafeMutableAddressor()
{
  if (one-time initialization token for microphone != -1) {
    swift_once();
  }
  return &static Artwork.Placeholder.microphone;
}

id static Artwork.Placeholder.microphone.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for microphone != -1) {
    swift_once();
  }
  id v2 = (void *)static Artwork.Placeholder.microphone;
  id v3 = (void *)unk_1005ADC80;
  id v5 = (void *)qword_1005ADC88;
  uint64_t v4 = unk_1005ADC90;
  id v10 = (id)unk_1005ADC90;
  *(void *)a1 = static Artwork.Placeholder.microphone;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_1005ADC98;
  id v6 = v2;
  id v7 = v3;
  id v8 = v5;

  return v10;
}

id one-time initialization function for person()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self _systemImageNamed:v0];

  id v2 = [self configurationWithWeight:3];
  id v3 = [self secondarySystemFillColor];
  if (one-time initialization token for defaultTint != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)static Artwork.Placeholder.defaultTint;
  static Artwork.Placeholder.person = (uint64_t)v3;
  unk_1005ADCB0 = static Artwork.Placeholder.defaultTint;
  qword_1005ADCB8 = (uint64_t)v1;
  unk_1005ADCC0 = v2;
  xmmword_1005ADCC8 = xmmword_1004A3B70;

  return v4;
}

uint64_t *Artwork.Placeholder.person.unsafeMutableAddressor()
{
  if (one-time initialization token for person != -1) {
    swift_once();
  }
  return &static Artwork.Placeholder.person;
}

id static Artwork.Placeholder.person.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for person != -1) {
    swift_once();
  }
  id v2 = (void *)static Artwork.Placeholder.person;
  id v3 = (void *)unk_1005ADCB0;
  id v5 = (void *)qword_1005ADCB8;
  uint64_t v4 = unk_1005ADCC0;
  id v10 = (id)unk_1005ADCC0;
  *(void *)a1 = static Artwork.Placeholder.person;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_1005ADCC8;
  id v6 = v2;
  id v7 = v3;
  id v8 = v5;

  return v10;
}

double one-time initialization function for newPlaylist()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self _systemImageNamed:v0];

  id v2 = [self configurationWithWeight:3];
  static Artwork.Placeholder.newPlaylist = (uint64_t)[self secondarySystemFillColor];
  unk_1005ADCE0 = 0;
  qword_1005ADCE8 = (uint64_t)v1;
  unk_1005ADCF0 = v2;
  double result = 0.5;
  xmmword_1005ADCF8 = xmmword_1004A3B70;
  return result;
}

uint64_t *Artwork.Placeholder.newPlaylist.unsafeMutableAddressor()
{
  if (one-time initialization token for newPlaylist != -1) {
    swift_once();
  }
  return &static Artwork.Placeholder.newPlaylist;
}

id static Artwork.Placeholder.newPlaylist.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for newPlaylist != -1) {
    swift_once();
  }
  id v2 = (void *)static Artwork.Placeholder.newPlaylist;
  id v3 = (void *)unk_1005ADCE0;
  id v5 = (void *)qword_1005ADCE8;
  uint64_t v4 = unk_1005ADCF0;
  id v10 = (id)unk_1005ADCF0;
  *(void *)a1 = static Artwork.Placeholder.newPlaylist;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_1005ADCF8;
  id v6 = v2;
  id v7 = v3;
  id v8 = v5;

  return v10;
}

double static Artwork.Placeholder.playlist(ofType:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&_s8MusicKit8PlaylistV0aB8InternalE7VariantOSgMD_0);
  __chkstk_darwin();
  id v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Playlist.Variant();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  id v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MPModelPlaylistType.variant.getter(a1, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for Playlist.Variant.regular(_:), v6);
    outlined destroy of Playlist.Variant?((uint64_t)v5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  }
  double v10 = specialized static Artwork.Placeholder.playlist(withVariant:)((uint64_t)v9, (uint64_t)v13);
  (*(void (**)(char *, uint64_t, double))(v7 + 8))(v9, v6, v10);
  long long v11 = v13[1];
  *a2 = v13[0];
  a2[1] = v11;
  double result = *(double *)&v14;
  a2[2] = v14;
  return result;
}

double static Artwork.Placeholder.playlist(withVariant:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  specialized static Artwork.Placeholder.playlist(withVariant:)(a1, (uint64_t)v5);
  long long v3 = v5[1];
  *a2 = v5[0];
  a2[1] = v3;
  double result = *(double *)&v6;
  a2[2] = v6;
  return result;
}

id one-time initialization function for radio()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self _systemImageNamed:v0];

  id v2 = [self configurationWithWeight:4];
  id v3 = [self secondarySystemFillColor];
  if (one-time initialization token for defaultTint != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)static Artwork.Placeholder.defaultTint;
  static Artwork.Placeholder.radio = (uint64_t)v3;
  unk_1005ADD10 = static Artwork.Placeholder.defaultTint;
  qword_1005ADD18 = (uint64_t)v1;
  unk_1005ADD20 = v2;
  xmmword_1005ADD28 = xmmword_1004A3B90;

  return v4;
}

uint64_t *Artwork.Placeholder.radio.unsafeMutableAddressor()
{
  if (one-time initialization token for radio != -1) {
    swift_once();
  }
  return &static Artwork.Placeholder.radio;
}

id static Artwork.Placeholder.radio.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for radio != -1) {
    swift_once();
  }
  id v2 = (void *)static Artwork.Placeholder.radio;
  id v3 = (void *)unk_1005ADD10;
  id v5 = (void *)qword_1005ADD18;
  uint64_t v4 = unk_1005ADD20;
  id v10 = (id)unk_1005ADD20;
  *(void *)a1 = static Artwork.Placeholder.radio;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_1005ADD28;
  id v6 = v2;
  id v7 = v3;
  id v8 = v5;

  return v10;
}

__n128 Artwork.Placeholder.withSolidBackgroundColor()@<Q0>(__n128 *a1@<X8>)
{
  id v2 = v1;
  uint64_t v4 = (void *)v1[1].n128_u64[0];
  id v5 = (void *)v1[1].n128_u64[1];
  id v6 = (id)v1->n128_u64[0];
  id v7 = (void *)v1->n128_u64[1];
  if (v1->n128_u64[0])
  {
    id v8 = self;
    id v22 = v4;
    id v9 = v4;
    id v10 = v5;
    id v11 = v6;
    id v12 = v7;
    id v13 = [v8 secondarySystemFillColor];
    type metadata accessor for UIMenu(0, (unint64_t *)&_sSo7UIColorCML_0);
    char v14 = static NSObject.== infix(_:_:)();

    if (v14)
    {
      if (one-time initialization token for solidSecondarySystemFill != -1) {
        swift_once();
      }
      id v6 = (id)static UIColor.solidSecondarySystemFill;

      uint64_t v4 = v22;
    }
    else
    {
      id v18 = v11;
      id v19 = [v8 tertiarySystemFillColor];
      char v20 = static NSObject.== infix(_:_:)();

      uint64_t v4 = v22;
      if (v20)
      {
        if (one-time initialization token for solidTertiarySystemFill != -1) {
          swift_once();
        }
        id v6 = (id)static UIColor.solidTertiarySystemFill;
      }
    }
  }
  else
  {
    id v15 = v4;
    id v16 = v5;
    id v17 = v7;
  }
  a1->n128_u64[0] = (unint64_t)v6;
  a1->n128_u64[1] = (unint64_t)v7;
  a1[1].n128_u64[0] = (unint64_t)v4;
  a1[1].n128_u64[1] = (unint64_t)v5;
  __n128 result = v2[2];
  a1[2] = result;
  return result;
}

id Artwork.Placeholder.withBackground(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = *(void **)(v2 + 8);
  uint64_t v4 = *(void **)(v2 + 16);
  id v9 = *(id *)(v2 + 24);
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v9;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  id v5 = a1;
  id v6 = v3;
  id v7 = v4;

  return v9;
}

id Artwork.Placeholder.withScaleFactor(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  id v3 = *(void **)v2;
  uint64_t v4 = *(void **)(v2 + 8);
  id v5 = *(void **)(v2 + 16);
  id v11 = *(id *)(v2 + 24);
  uint64_t v6 = *(void *)(v2 + 40);
  *(void *)a1 = *(void *)v2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v11;
  *(double *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = v6;
  id v7 = v3;
  id v8 = v4;
  id v9 = v5;

  return v11;
}

id Artwork.Placeholder.withTint(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void **)v2;
  id v5 = *(void **)(v2 + 16);
  id v10 = *(id *)(v2 + 24);
  *(void *)a2 = *(void *)v2;
  *(void *)(a2 + 8) = a1;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v10;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  id v6 = v4;
  id v7 = a1;
  id v8 = v5;

  return v10;
}

uint64_t one-time initialization function for solidSecondarySystemFill(uint64_t a1)
{
  return one-time initialization function for solidSecondarySystemFill(a1, (uint64_t)closure #1 in variable initialization expression of static UIColor.solidSecondarySystemFill, (uint64_t)&block_descriptor_14_0, &static UIColor.solidSecondarySystemFill);
}

id closure #1 in variable initialization expression of static UIColor.solidSecondarySystemFill(void *a1)
{
  return closure #1 in variable initialization expression of static UIColor.solidSecondarySystemFill(a1, 38, 41, 233, 234);
}

uint64_t one-time initialization function for solidTertiarySystemFill(uint64_t a1)
{
  return one-time initialization function for solidSecondarySystemFill(a1, (uint64_t)closure #1 in variable initialization expression of static UIColor.solidTertiarySystemFill, (uint64_t)&block_descriptor_17_0, &static UIColor.solidTertiarySystemFill);
}

uint64_t one-time initialization function for solidSecondarySystemFill(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = objc_allocWithZone((Class)UIColor);
  v11[4] = a2;
  v11[5] = 0;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  _OWORD v11[2] = thunk for @escaping @callee_guaranteed (@guaranteed UITraitCollection) -> (@owned UIColor);
  void v11[3] = a3;
  id v8 = _Block_copy(v11);
  id v9 = [v7 initWithDynamicProvider:v8];
  _Block_release(v8);
  uint64_t result = swift_release();
  *a4 = v9;
  return result;
}

id closure #1 in variable initialization expression of static UIColor.solidTertiarySystemFill(void *a1)
{
  return closure #1 in variable initialization expression of static UIColor.solidSecondarySystemFill(a1, 44, 46, 245, 245);
}

id closure #1 in variable initialization expression of static UIColor.solidSecondarySystemFill(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9 = [a1 userInterfaceStyle];
  type metadata accessor for UIMenu(0, (unint64_t *)&_sSo7UIColorCML_0);
  if (v9 == (id)2)
  {
    uint64_t v10 = a2;
    uint64_t v11 = a2;
    uint64_t v12 = a3;
  }
  else
  {
    uint64_t v10 = a4;
    uint64_t v11 = a4;
    uint64_t v12 = a5;
  }
  return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v10, v11, v12, 1.0);
}

double MPModelSong.preferredArtworkAspectRatio.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCySSGMD_1);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100493400;
  *(void *)(v1 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v1 + 40) = v2;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v4 = self;
  id v5 = [v4 propertySetWithProperties:isa];

  LODWORD(isa) = [v0 hasLoadedValuesForPropertySet:v5];
  double v6 = 1.0;
  if (isa && [v0 hasVideo])
  {
    if (one-time initialization token for musicVideoAspectRatio != -1) {
      swift_once();
    }
    double v6 = *(double *)&static Artwork.Size.musicVideoAspectRatio;
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_100493400;
    *(void *)(v7 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v7 + 40) = v8;
    Class v9 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v10 = [v4 propertySetWithProperties:v9];

    unsigned int v11 = [v0 hasLoadedValuesForPropertySet:v10];
    if (v11)
    {
      id v12 = [v0 artworkCatalog];
      if (v12)
      {
        id v13 = v12;
        double v14 = COERCE_DOUBLE(MPArtworkCatalog.expectedRatio.getter());
        if ((v15 & 1) == 0 && v14 < 1.0)
        {
          if (one-time initialization token for verticalMusicVideoAspectRatio != -1) {
            swift_once();
          }
          double v6 = *(double *)&static Artwork.Size.verticalMusicVideoAspectRatio;
        }
      }
    }
  }
  return v6;
}

uint64_t *Artwork.Size.musicVideoAspectRatio.unsafeMutableAddressor()
{
  if (one-time initialization token for musicVideoAspectRatio != -1) {
    swift_once();
  }
  return &static Artwork.Size.musicVideoAspectRatio;
}

uint64_t *Artwork.Size.verticalMusicVideoAspectRatio.unsafeMutableAddressor()
{
  if (one-time initialization token for verticalMusicVideoAspectRatio != -1) {
    swift_once();
  }
  return &static Artwork.Size.verticalMusicVideoAspectRatio;
}

id static MPModelPlaylist.artworkPlaceholderImage(for:)()
{
  return specialized static MPModelPlaylist.artworkPlaceholderImage(for:)();
}

id MPModelPlaylist.artworkPlaceholderImage.getter()
{
  if ([v0 hasLoadedValueForKey:MPModelPropertyPlaylistType])
  {
    [v0 type];
    return specialized static MPModelPlaylist.artworkPlaceholderImage(for:)();
  }
  else
  {
    NSString v2 = String._bridgeToObjectiveC()();
    id v3 = [self _systemImageNamed:v2];

    return v3;
  }
}

void one-time initialization function for musicVideoAspectRatio()
{
  static Artwork.Size.musicVideoAspectRatio = 0x3FFC71C71C71C71CLL;
}

double static Artwork.Size.musicVideoAspectRatio.getter()
{
  return static Artwork.Size.musicVideoAspectRatio.getter(&one-time initialization token for musicVideoAspectRatio, (uint64_t)&static Artwork.Size.musicVideoAspectRatio);
}

void one-time initialization function for verticalMusicVideoAspectRatio()
{
  static Artwork.Size.verticalMusicVideoAspectRatio = 0x3FE2000000000000;
}

double static Artwork.Size.verticalMusicVideoAspectRatio.getter()
{
  return static Artwork.Size.musicVideoAspectRatio.getter(&one-time initialization token for verticalMusicVideoAspectRatio, (uint64_t)&static Artwork.Size.verticalMusicVideoAspectRatio);
}

double one-time initialization function for videoAspectRatio(uint64_t a1)
{
  return one-time initialization function for videoAspectRatio(a1, &one-time initialization token for musicVideoAspectRatio, (double *)&static Artwork.Size.musicVideoAspectRatio, &static Artwork.Size.videoAspectRatio);
}

void *Artwork.Size.videoAspectRatio.unsafeMutableAddressor()
{
  if (one-time initialization token for videoAspectRatio != -1) {
    swift_once();
  }
  return &static Artwork.Size.videoAspectRatio;
}

double static Artwork.Size.videoAspectRatio.getter()
{
  return static Artwork.Size.musicVideoAspectRatio.getter(&one-time initialization token for videoAspectRatio, (uint64_t)&static Artwork.Size.videoAspectRatio);
}

double one-time initialization function for verticalVideoAspectRatio(uint64_t a1)
{
  return one-time initialization function for videoAspectRatio(a1, &one-time initialization token for verticalMusicVideoAspectRatio, (double *)&static Artwork.Size.verticalMusicVideoAspectRatio, &static Artwork.Size.verticalVideoAspectRatio);
}

double one-time initialization function for videoAspectRatio(uint64_t a1, void *a2, double *a3, void *a4)
{
  if (*a2 != -1) {
    swift_once();
  }
  double result = *a3;
  *a4 = *(void *)a3;
  return result;
}

void *Artwork.Size.verticalVideoAspectRatio.unsafeMutableAddressor()
{
  if (one-time initialization token for verticalVideoAspectRatio != -1) {
    swift_once();
  }
  return &static Artwork.Size.verticalVideoAspectRatio;
}

double static Artwork.Size.verticalVideoAspectRatio.getter()
{
  return static Artwork.Size.musicVideoAspectRatio.getter(&one-time initialization token for verticalVideoAspectRatio, (uint64_t)&static Artwork.Size.verticalVideoAspectRatio);
}

double static Artwork.Size.musicVideoAspectRatio.getter(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(double *)a2;
}

void MPModelObject.artworkPlaceholder.getter(void *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&_s8MusicKit8PlaylistV0aB8InternalE7VariantOSgMD_0);
  __chkstk_darwin();
  uint64_t v4 = (char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Playlist.Variant();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  uint64_t v9 = swift_dynamicCastObjCClass();
  if (v9)
  {
    id v10 = (void *)v9;
    id v11 = v1;
    id v12 = [v10 anyObject];
    if (v12)
    {
      id v13 = v12;
      MPModelObject.artworkPlaceholder.getter(v38);

LABEL_23:
      uint64_t v22 = v38[4];
      uint64_t v23 = v38[5];
      uint64_t v21 = (void *)v38[2];
      id v25 = (id)v38[3];
      id v18 = (void *)v38[0];
      id v19 = (void *)v38[1];
      goto LABEL_24;
    }
    if (one-time initialization token for music != -1) {
      swift_once();
    }
    id v18 = (void *)static Artwork.Placeholder.music;
    id v19 = (void *)unk_1005ADBF0;
    uint64_t v21 = (void *)qword_1005ADBF8;
    char v20 = (void *)unk_1005ADC00;
    uint64_t v23 = *((void *)&xmmword_1005ADC08 + 1);
    uint64_t v22 = xmmword_1005ADC08;
    id v24 = (id)qword_1005ADBF8;
    id v25 = v20;
    id v26 = v18;
    id v27 = v19;
  }
  else
  {
    self;
    uint64_t v14 = swift_dynamicCastObjCClass();
    if (v14)
    {
      char v15 = (void *)v14;
      uint64_t v16 = MPModelPropertyPlaylistType;
      id v17 = v1;
      if ([v15 hasLoadedValueForKey:v16])
      {
        MPModelPlaylistType.variant.getter((uint64_t)[v15 type], (uint64_t)v4);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
        {
          (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for Playlist.Variant.regular(_:), v5);
          outlined destroy of Playlist.Variant?((uint64_t)v4);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
        }
        double v37 = specialized static Artwork.Placeholder.playlist(withVariant:)((uint64_t)v8, (uint64_t)v38);
        (*(void (**)(char *, uint64_t, double))(v6 + 8))(v8, v5, v37);

        goto LABEL_23;
      }
      if (one-time initialization token for music != -1) {
        swift_once();
      }
      id v18 = (void *)static Artwork.Placeholder.music;
      id v19 = (void *)unk_1005ADBF0;
      uint64_t v21 = (void *)qword_1005ADBF8;
      double v33 = (void *)unk_1005ADC00;
      uint64_t v23 = *((void *)&xmmword_1005ADC08 + 1);
      uint64_t v22 = xmmword_1005ADC08;
      id v34 = (id)qword_1005ADBF8;
      id v25 = v33;
      id v35 = v18;
      id v36 = v19;
    }
    else
    {
      self;
      if (swift_dynamicCastObjCClass()
        || (self, swift_dynamicCastObjCClass())
        || (self, swift_dynamicCastObjCClass()))
      {
        if (one-time initialization token for microphone != -1) {
          swift_once();
        }
        char v28 = &static Artwork.Placeholder.microphone;
      }
      else
      {
        self;
        if (swift_dynamicCastObjCClass())
        {
          if (one-time initialization token for person != -1) {
            swift_once();
          }
          char v28 = &static Artwork.Placeholder.person;
        }
        else
        {
          self;
          if (swift_dynamicCastObjCClass()
            || (self, swift_dynamicCastObjCClass())
            || (self, swift_dynamicCastObjCClass())
            || (self, swift_dynamicCastObjCClass()))
          {
            if (one-time initialization token for tv != -1) {
              swift_once();
            }
            char v28 = &static Artwork.Placeholder.tv;
          }
          else
          {
            if (one-time initialization token for music != -1) {
              swift_once();
            }
            char v28 = &static Artwork.Placeholder.music;
          }
        }
      }
      id v18 = (void *)*v28;
      id v19 = (void *)v28[1];
      uint64_t v21 = (void *)v28[2];
      uint64_t v29 = (void *)v28[3];
      uint64_t v22 = v28[4];
      uint64_t v23 = v28[5];
      id v30 = v21;
      id v25 = v29;
      id v31 = v18;
      id v32 = v19;
    }
  }
LABEL_24:
  *a1 = v18;
  a1[1] = v19;
  a1[2] = v21;
  a1[3] = v25;
  a1[4] = v22;
  a1[5] = v23;
}

id MusicItem.artworkPlaceholder.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v127 = a2;
  uint64_t v89 = type metadata accessor for Station();
  uint64_t v87 = *(void *)(v89 - 8);
  __chkstk_darwin();
  int v90 = (char *)&v86 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for MusicMovie();
  uint64_t v88 = *(void *)(v93 - 8);
  __chkstk_darwin();
  char v92 = (char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for TVSeason();
  uint64_t v91 = *(void *)(v96 - 8);
  __chkstk_darwin();
  Swift::Int v95 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = type metadata accessor for TVEpisode();
  uint64_t v94 = *(void *)(v99 - 8);
  __chkstk_darwin();
  id v98 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = type metadata accessor for TVShow();
  uint64_t v97 = *(void *)(v103 - 8);
  __chkstk_darwin();
  uint64_t v102 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for Playlist.Folder();
  uint64_t v101 = *(void *)(v109 - 8);
  __chkstk_darwin();
  Class v108 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&_s8MusicKit8PlaylistV0aB8InternalE7VariantOSgMD_0);
  __chkstk_darwin();
  unint64_t v107 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for Playlist.Variant();
  uint64_t v114 = *(void *)(v110 - 8);
  __chkstk_darwin();
  unint64_t v100 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  unint64_t v106 = (char *)&v86 - v11;
  uint64_t v113 = type metadata accessor for Playlist();
  uint64_t v105 = *(void *)(v113 - 8);
  __chkstk_darwin();
  uint64_t v104 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v111 = (char *)&v86 - v13;
  uint64_t v116 = type metadata accessor for MusicVideo();
  uint64_t v112 = *(void *)(v116 - 8);
  __chkstk_darwin();
  uint64_t v117 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for SocialProfile();
  uint64_t v115 = *(void *)(v120 - 8);
  __chkstk_darwin();
  uint64_t v119 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = type metadata accessor for Curator();
  uint64_t v118 = *(void *)(v123 - 8);
  __chkstk_darwin();
  uint64_t v122 = (char *)&v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Composer();
  uint64_t v121 = *(void *)(v17 - 8);
  __chkstk_darwin();
  id v19 = (char *)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for RecordLabel();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin();
  uint64_t v23 = (char *)&v86 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Artist();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin();
  id v27 = (char *)&v86 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v29 = (char *)&v86 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = v30;
  (*(void (**)(char *, void, uint64_t))(v30 + 16))(v29, v124, a1);
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
    uint64_t v31 = v127;
    uint64_t v32 = a1;
LABEL_5:
    (*(void (**)(char *, uint64_t))(v126 + 8))(v29, v32);
    if (one-time initialization token for microphone != -1) {
      swift_once();
    }
    double v33 = &static Artwork.Placeholder.microphone;
    goto LABEL_18;
  }
  uint64_t v32 = a1;
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    uint64_t v31 = v127;
    goto LABEL_5;
  }
  int v34 = swift_dynamicCast();
  uint64_t v31 = v127;
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v121 + 8))(v19, v17);
  }
  else
  {
    id v36 = v122;
    uint64_t v35 = v123;
    if (swift_dynamicCast())
    {
      uint64_t v37 = v118;
    }
    else
    {
      id v36 = v119;
      uint64_t v35 = v120;
      if (!swift_dynamicCast())
      {
        uint64_t v47 = v116;
        if (swift_dynamicCast())
        {
          uint64_t v48 = v29;
          if (one-time initialization token for musicVideo != -1) {
            swift_once();
          }
          double v38 = (void *)static Artwork.Placeholder.musicVideo;
          double v39 = (void *)unk_1005ADC20;
          objc_super v41 = (void *)qword_1005ADC28;
          uint64_t v49 = (void *)unk_1005ADC30;
          long long v124 = xmmword_1005ADC38;
          id v50 = *(void (**)(char *, uint64_t))(v112 + 8);
          id v51 = (id)static Artwork.Placeholder.musicVideo;
          id v52 = v39;
          id v53 = v41;
          id v43 = v49;
          v50(v117, v47);
          id result = (id)(*(uint64_t (**)(char *, uint64_t))(v126 + 8))(v48, v32);
          goto LABEL_19;
        }
        uint64_t v54 = v111;
        uint64_t v55 = v113;
        if (swift_dynamicCast())
        {
          uint64_t v56 = v105;
          id v57 = v104;
          (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v104, v54, v55);
          uint64_t v58 = (uint64_t)v107;
          Playlist.variant.getter();
          uint64_t v59 = v114;
          uint64_t v60 = v110;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v114 + 48))(v58, 1, v110) == 1)
          {
            uint64_t v61 = (uint64_t)v106;
            (*(void (**)(char *, void, uint64_t))(v59 + 104))(v106, enum case for Playlist.Variant.regular(_:), v60);
            outlined destroy of Playlist.Variant?(v58);
          }
          else
          {
            uint64_t v61 = (uint64_t)v106;
            (*(void (**)(char *, uint64_t, uint64_t))(v59 + 32))(v106, v58, v60);
          }
          double v69 = specialized static Artwork.Placeholder.playlist(withVariant:)(v61, (uint64_t)v128);
          (*(void (**)(uint64_t, uint64_t, double))(v59 + 8))(v61, v60, v69);
          (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v55);
        }
        else
        {
          id v62 = v108;
          uint64_t v63 = v109;
          int v64 = swift_dynamicCast();
          uint64_t v65 = v114;
          if (!v64)
          {
            uint64_t v70 = v102;
            uint64_t v71 = v103;
            if (swift_dynamicCast())
            {
              long long v72 = v128;
            }
            else
            {
              uint64_t v70 = v98;
              uint64_t v71 = v99;
              if (swift_dynamicCast())
              {
                long long v72 = (uint64_t *)&v125;
              }
              else
              {
                uint64_t v70 = v95;
                uint64_t v71 = v96;
                if (swift_dynamicCast())
                {
                  long long v72 = &v123;
                }
                else
                {
                  uint64_t v70 = v92;
                  uint64_t v71 = v93;
                  if (!swift_dynamicCast())
                  {
                    uint64_t v73 = v89;
                    if (swift_dynamicCast())
                    {
                      uint64_t v74 = v29;
                      if (one-time initialization token for radio != -1) {
                        swift_once();
                      }
                      double v38 = (void *)static Artwork.Placeholder.radio;
                      double v39 = (void *)unk_1005ADD10;
                      objc_super v41 = (void *)qword_1005ADD18;
                      uint64_t v75 = (void *)unk_1005ADD20;
                      long long v124 = xmmword_1005ADD28;
                      uint64_t v76 = *(void (**)(char *, uint64_t))(v87 + 8);
                      id v77 = (id)static Artwork.Placeholder.radio;
                      id v78 = v39;
                      id v79 = v41;
                      id v43 = v75;
                      v76(v90, v73);
                      id result = (id)(*(uint64_t (**)(char *, uint64_t))(v126 + 8))(v74, v32);
                    }
                    else
                    {
                      uint64_t v80 = v29;
                      if (one-time initialization token for music != -1) {
                        swift_once();
                      }
                      double v38 = (void *)static Artwork.Placeholder.music;
                      double v39 = (void *)unk_1005ADBF0;
                      objc_super v41 = (void *)qword_1005ADBF8;
                      uint64_t v81 = (void *)unk_1005ADC00;
                      long long v124 = xmmword_1005ADC08;
                      id v82 = *(uint64_t (**)(char *, uint64_t))(v126 + 8);
                      id v83 = (id)static Artwork.Placeholder.music;
                      id v84 = v39;
                      id v85 = v41;
                      id v43 = v81;
                      id result = (id)v82(v80, v32);
                    }
                    goto LABEL_19;
                  }
                  long long v72 = &v120;
                }
              }
            }
            (*(void (**)(char *, uint64_t))(*(v72 - 32) + 8))(v70, v71);
            (*(void (**)(char *, uint64_t))(v126 + 8))(v29, v32);
            if (one-time initialization token for tv != -1) {
              swift_once();
            }
            double v33 = &static Artwork.Placeholder.tv;
            goto LABEL_18;
          }
          uint64_t v66 = (uint64_t)v100;
          uint64_t v67 = v110;
          (*(void (**)(char *, void, uint64_t))(v114 + 104))(v100, enum case for Playlist.Variant.folder(_:), v110);
          double v68 = specialized static Artwork.Placeholder.playlist(withVariant:)(v66, (uint64_t)v128);
          (*(void (**)(uint64_t, uint64_t, double))(v65 + 8))(v66, v67, v68);
          (*(void (**)(char *, uint64_t))(v101 + 8))(v62, v63);
        }
        id result = (id)(*(uint64_t (**)(char *, uint64_t))(v126 + 8))(v29, v32);
        long long v46 = v129;
        objc_super v41 = (void *)v128[2];
        id v43 = (id)v128[3];
        double v38 = (void *)v128[0];
        double v39 = (void *)v128[1];
        goto LABEL_20;
      }
      uint64_t v37 = v115;
    }
    (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v35);
  }
  (*(void (**)(char *, uint64_t))(v126 + 8))(v29, a1);
  if (one-time initialization token for person != -1) {
    swift_once();
  }
  double v33 = &static Artwork.Placeholder.person;
LABEL_18:
  double v38 = (void *)*v33;
  double v39 = (void *)v33[1];
  objc_super v41 = (void *)v33[2];
  double v40 = (void *)v33[3];
  long long v124 = *((_OWORD *)v33 + 2);
  id v42 = v41;
  id v43 = v40;
  id v44 = v38;
  id result = v39;
LABEL_19:
  long long v46 = v124;
LABEL_20:
  *(void *)uint64_t v31 = v38;
  *(void *)(v31 + 8) = v39;
  *(void *)(v31 + 16) = v41;
  *(void *)(v31 + 24) = v43;
  *(_OWORD *)(v31 + 32) = v46;
  return result;
}

BOOL specialized static Artwork.Placeholder.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  if (*(void *)a1)
  {
    if (!v5) {
      return 0;
    }
    type metadata accessor for UIMenu(0, (unint64_t *)&_sSo7UIColorCML_0);
    id v6 = v5;
    id v7 = v4;
    char v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0) {
      return 0;
    }
  }
  else if (v5)
  {
    return 0;
  }
  uint64_t v9 = *(void **)(a1 + 8);
  uint64_t v10 = *(void **)(a2 + 8);
  if (v9)
  {
    if (!v10) {
      return 0;
    }
    type metadata accessor for UIMenu(0, (unint64_t *)&_sSo7UIColorCML_0);
    id v11 = v10;
    id v12 = v9;
    char v13 = static NSObject.== infix(_:_:)();

    if ((v13 & 1) == 0) {
      return 0;
    }
  }
  else if (v10)
  {
    return 0;
  }
  uint64_t v14 = *(void **)(a1 + 16);
  uint64_t v15 = *(void **)(a2 + 16);
  if (v14)
  {
    if (!v15) {
      return 0;
    }
    type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for UIImage);
    id v16 = v15;
    id v17 = v14;
    char v18 = static NSObject.== infix(_:_:)();

    if ((v18 & 1) == 0) {
      return 0;
    }
  }
  else if (v15)
  {
    return 0;
  }
  type metadata accessor for UIMenu(0, (unint64_t *)&_sSo8NSObjectCML_1);
  if ((static NSObject.== infix(_:_:)() & 1) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32)) {
    return *(double *)(a1 + 40) == *(double *)(a2 + 40);
  }
  return 0;
}

uint64_t outlined destroy of Playlist.Variant?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&_s8MusicKit8PlaylistV0aB8InternalE7VariantOSgMD_0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double specialized static Artwork.Placeholder.playlist(withVariant:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Playlist.Variant();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  id v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v9 = &v21[-v8];
  uint64_t v10 = *(void (**)(unsigned char *))(v5 + 104);
  int v22 = enum case for Playlist.Variant.folder(_:);
  v10(&v21[-v8]);
  lazy protocol witness table accessor for type Artwork.Placeholder.View and conformance Artwork.Placeholder.View(&lazy protocol witness table cache variable for type Playlist.Variant and conformance Playlist.Variant, 255, (void (*)(uint64_t))&type metadata accessor for Playlist.Variant);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v11 = v23;
  uint64_t v12 = v24;
  char v13 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v13(v9, v4);
  uint64_t v14 = 0;
  if (v12 != v11)
  {
    if (one-time initialization token for defaultTint != -1) {
      swift_once();
    }
    uint64_t v14 = static Artwork.Placeholder.defaultTint;
    id v15 = (id)static Artwork.Placeholder.defaultTint;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  int v16 = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 88))(v7, v4);
  if (v16 != enum case for Playlist.Variant.smart(_:) && v16 != enum case for Playlist.Variant.genius(_:) && v16 != v22) {
    v13(v7, v4);
  }
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v18 = [self _systemImageNamed:v17];

  id v19 = [self configurationWithWeight:3];
  *(void *)a2 = [self secondarySystemFillColor];
  *(void *)(a2 + 8) = v14;
  *(void *)(a2 + 16) = v18;
  *(void *)(a2 + 24) = v19;
  double result = 0.4;
  *(_OWORD *)(a2 + 32) = xmmword_1004A3B90;
  return result;
}

id specialized static MPModelPlaylist.artworkPlaceholderImage(for:)()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self _systemImageNamed:v0];

  return v1;
}

uint64_t instantiation function for generic protocol witness table for Artwork.Placeholder.View(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type Artwork.Placeholder.View and conformance Artwork.Placeholder.View(&lazy protocol witness table cache variable for type Artwork.Placeholder.View and conformance Artwork.Placeholder.View, a2, (void (*)(uint64_t))type metadata accessor for Artwork.Placeholder.View);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for Artwork.Placeholder.View()
{
  return self;
}

uint64_t associated type witness table accessor for MusicUIContentConfiguration.View : MusicUIContentView in Artwork.Placeholder(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type Artwork.Placeholder.View and conformance Artwork.Placeholder.View(&lazy protocol witness table cache variable for type Artwork.Placeholder.View and conformance Artwork.Placeholder.View, a2, (void (*)(uint64_t))type metadata accessor for Artwork.Placeholder.View);
}

unint64_t instantiation function for generic protocol witness table for Artwork.Placeholder(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type Artwork.Placeholder and conformance Artwork.Placeholder();
  unint64_t result = lazy protocol witness table accessor for type Artwork.Placeholder and conformance Artwork.Placeholder();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t initializeWithCopy for Artwork.Placeholder(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  id v7 = v3;
  id v8 = v4;
  id v9 = v5;
  id v10 = v6;
  return a1;
}

uint64_t assignWithCopy for Artwork.Placeholder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  id v7 = *(void **)(a1 + 8);
  id v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  id v10 = *(void **)(a1 + 16);
  uint64_t v11 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v11;
  id v12 = v11;

  char v13 = *(void **)(a2 + 24);
  uint64_t v14 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v13;
  id v15 = v13;

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for Artwork.Placeholder(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  uint64_t v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  *(_OWORD *)(a1 + 32) = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for Artwork.Placeholder(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Artwork.Placeholder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Artwork.Placeholder()
{
  return &type metadata for Artwork.Placeholder;
}

uint64_t sub_1002E7F58()
{
  return objectdestroy_17Tm_0();
}

uint64_t lazy protocol witness table accessor for type Artwork.Placeholder.View and conformance Artwork.Placeholder.View(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

__n128 CAPackageDefinition.transform.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 40);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 56);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

__n128 CAPackageDefinition.transform.setter(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v1 + 24) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 40) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(v1 + 56) = result;
  return result;
}

__n128 CAPackageDefinition.init(name:bundle:transform:states:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  long long v6 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a6 + 24) = *(_OWORD *)a4;
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(_OWORD *)(a6 + 40) = v6;
  __n128 result = *(__n128 *)(a4 + 32);
  *(__n128 *)(a6 + 56) = result;
  *(void *)(a6 + 72) = a5;
  return result;
}

__n128 CAPackageDefinition.scaled(byX:y:)@<Q0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  long long v15 = *(_OWORD *)(v3 + 40);
  long long v17 = *(_OWORD *)(v3 + 24);
  CGFloat v5 = *(double *)(v3 + 56);
  CGFloat v6 = *(double *)(v3 + 64);
  uint64_t v7 = *(void *)v3;
  uint64_t v8 = *(void *)(v3 + 72);
  long long v19 = *(_OWORD *)(v3 + 8);
  CGAffineTransformMakeScale(&t1, a2, a3);
  long long v9 = *(_OWORD *)&t1.a;
  long long v10 = *(_OWORD *)&t1.c;
  long long v11 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v17;
  *(_OWORD *)&t1.c = v15;
  t1.tCGFloat x = v5;
  t1.tCGFloat y = v6;
  *(_OWORD *)&t2.a = v9;
  *(_OWORD *)&t2.c = v10;
  *(_OWORD *)&t2.tCGFloat x = v11;
  CGAffineTransformConcat(&v20, &t1, &t2);
  __n128 v16 = *(__n128 *)&v20.c;
  long long v18 = *(_OWORD *)&v20.a;
  tCGFloat x = v20.tx;
  tCGFloat y = v20.ty;
  outlined retain of CAPackageDefinition(v3);
  *(void *)a1 = v7;
  *(_OWORD *)(a1 + 8) = v19;
  *(_OWORD *)(a1 + 24) = v18;
  __n128 result = v16;
  *(__n128 *)(a1 + 40) = v16;
  *(CGFloat *)(a1 + 56) = tx;
  *(CGFloat *)(a1 + 64) = ty;
  *(void *)(a1 + 72) = v8;
  return result;
}

uint64_t outlined retain of CAPackageDefinition(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 16);
  swift_bridgeObjectRetain();
  id v3 = v2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CAPackageDefinition(_OWORD *a1, long long *a2)
{
  long long v2 = a1[3];
  v8[2] = a1[2];
  _OWORD v8[3] = v2;
  long long v3 = a1[4];
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a2[3];
  _OWORD v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  long long v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return specialized static CAPackageDefinition.__derived_struct_equals(_:_:)(v8, v9) & 1;
}

void *one-time initialization function for shared()
{
  type metadata accessor for CAPackage.PackageDataCache();
  swift_allocObject();
  __n128 result = (void *)CAPackage.PackageDataCache.init()();
  static CAPackage.PackageDataCache.shared = result;
  return result;
}

uint64_t CAPackage.PackageDataCache.set(data:packageName:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v10 - 8);
  __chkstk_darwin();
  id v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v22 - 8);
  __chkstk_darwin();
  long long v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v16 = *(void **)(v5 + 24);
  long long v17 = (void *)swift_allocObject();
  void v17[2] = v5;
  v17[3] = a3;
  void v17[4] = a4;
  v17[5] = a1;
  void v17[6] = a2;
  aBlock[4] = partial apply for closure #1 in CAPackage.PackageDataCache.set(data:packageName:);
  uint64_t aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_21_0;
  long long v18 = _Block_copy(aBlock);
  id v19 = v16;
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a1, a2);
  static DispatchQoS.unspecified.getter();
  uint64_t v24 = _swiftEmptyArrayStorage;
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_3((unint64_t *)&_s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWL_1, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  __swift_instantiateConcreteTypeFromMangledName(&_sSay8Dispatch0A13WorkItemFlagsVGMD_1);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&_sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWL_1, &_sSay8Dispatch0A13WorkItemFlagsVGMD_1);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v22);
  return swift_release();
}

uint64_t closure #1 in CAPackage.PackageDataCache.set(data:packageName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a4, a5);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a4, a5, a2, a3, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 16) = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t closure #1 in CAPackage.PackageDataCache.data(for:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t v8 = *(void *)(a2 + 16);
  if (*(void *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if (v10)
    {
      uint64_t v11 = (uint64_t *)(*(void *)(v8 + 56) + 16 * v9);
      uint64_t v12 = *v11;
      unint64_t v13 = v11[1];
      outlined copy of Data._Representation(*v11, v13);
    }
    else
    {
      uint64_t v12 = 0;
      unint64_t v13 = 0xF000000000000000;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0xF000000000000000;
  }
  uint64_t v14 = *a1;
  unint64_t v15 = a1[1];
  *a1 = v12;
  a1[1] = v13;
  return outlined consume of Data?(v14, v15);
}

uint64_t CAPackage.PackageDataCache.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t CAPackage.PackageDataCache.init()()
{
  v5[0] = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v5[0] - 8);
  __chkstk_darwin();
  long long v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin();
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  *(void *)(v0 + 16) = _sSD17dictionaryLiteralSDyxq_Gx_q_td_tcfCSS_10Foundation4DataVTgm5_0((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for UIMenu(0, (unint64_t *)&_sSo17OS_dispatch_queueCML_1);
  static DispatchQoS.unspecified.getter();
  v5[1] = _swiftEmptyArrayStorage;
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_3((unint64_t *)&_sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWL_0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&_sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGMD_0);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&_sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGSayxGSTsWL_0, (uint64_t *)&_sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGMD_0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, void))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v5[0]);
  *(void *)(v0 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  return v0;
}

char *CAPackage.init(definition:)(uint64_t *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&_s10Foundation3URLVSgMD_1);
  __chkstk_darwin();
  long long v3 = (char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for URL();
  uint64_t v47 = *(void *)(v45 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  id v43 = (char *)&v42 - v6;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static CAPackage.PackageDataCache.shared;
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v48 = a1;
  long long v50 = xmmword_1004A3BA0;
  char v10 = (void *)*((void *)static CAPackage.PackageDataCache.shared + 3);
  uint64_t v11 = (void *)swift_allocObject();
  _OWORD v11[2] = &v50;
  void v11[3] = v7;
  uint64_t v46 = v8;
  v11[4] = v8;
  v11[5] = v9;
  uint64_t v12 = (void *)swift_allocObject();
  void v12[2] = partial apply for closure #1 in CAPackage.PackageDataCache.data(for:);
  unint64_t v12[3] = v11;
  aBlock[4] = partial apply for closure #3 in View.actionContextMenu<A, B>(title:menu:excluding:preview:previewAction:);
  uint64_t aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_45;
  unint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = v10;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v14, v13);

  _Block_release(v13);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v8) {
    __break(1u);
  }
  long long v15 = v50;
  swift_release();
  if (*((void *)&v15 + 1) >> 60 == 15)
  {
    uint64_t v16 = (uint64_t)v48;
    id v17 = (id)v48[2];
    NSString v18 = String._bridgeToObjectiveC()();
    NSString v19 = String._bridgeToObjectiveC()();
    id v20 = [v17 URLForResource:v18 withExtension:v19];

    if (v20)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v21 = v47;
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
      uint64_t v23 = v45;
      v22(v3, v5, v45);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v3, 0, 1, v23);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v3, 1, v23) != 1)
      {
        uint64_t v24 = v43;
        v22(v43, v3, v23);
        uint64_t v25 = v44;
        uint64_t v26 = Data.init(contentsOf:options:)();
        if (v25)
        {

          outlined release of CAPackageDefinition(v16);
          (*(void (**)(char *, uint64_t))(v47 + 8))(v24, v23);
        }
        else
        {
          uint64_t v36 = v26;
          unint64_t v37 = v27;
          CAPackage.PackageDataCache.set(data:packageName:)(v26, v27, v46, v9);
          uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
          unint64_t v39 = v37;
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          aBlock[0] = 0;
          long long v3 = (char *)[ObjCClassFromMetadata packageWithData:isa type:kCAPackageTypeArchive options:0 error:aBlock];

          if (v3)
          {
            id v41 = aBlock[0];
          }
          else
          {
            long long v3 = (char *)aBlock[0];
            _convertNSErrorToError(_:)();

            swift_willThrow();
          }

          outlined consume of Data._Representation(v36, v39);
          outlined release of CAPackageDefinition(v16);
          (*(void (**)(char *, uint64_t))(v47 + 8))(v43, v23);
        }
        return v3;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v3, 1, 1, v45);
    }
    _s10Foundation3URLVSgWOh_1((uint64_t)v3);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    long long v3 = v32;
    id v33 = objc_allocWithZone((Class)NSError);
    NSString v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v33 initWithDomain:v34 code:-1002 userInfo:0];

    swift_willThrow();
    outlined release of CAPackageDefinition(v16);

    return v3;
  }
  uint64_t v28 = (void *)swift_getObjCClassFromMetadata();
  Class v29 = Data._bridgeToObjectiveC()().super.isa;
  aBlock[0] = 0;
  long long v3 = (char *)[v28 packageWithData:v29 type:kCAPackageTypeArchive options:0 error:aBlock];

  uint64_t v30 = (uint64_t)v48;
  if (v3)
  {
    id v31 = aBlock[0];
  }
  else
  {
    long long v3 = (char *)aBlock[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  outlined release of CAPackageDefinition(v30);
  outlined consume of Data?(v15, *((unint64_t *)&v15 + 1));
  return v3;
}

id static CAPackageDefinition.play.getter@<X0>(void *a1@<X8>)
{
  return static CAPackageDefinition.play.getter(0x7375615079616C50, 0xED0000706F745365, (uint64_t)&outlined read-only object #0 of static CAPackageDefinition.play.getter, a1);
}

id static CAPackageDefinition.pause.getter@<X0>(void *a1@<X8>)
{
  return static CAPackageDefinition.play.getter(0x7375615079616C50, 0xED0000706F745365, (uint64_t)&outlined read-only object #0 of static CAPackageDefinition.pause.getter, a1);
}

id static CAPackageDefinition.stop.getter@<X0>(void *a1@<X8>)
{
  return static CAPackageDefinition.play.getter(0x7375615079616C50, 0xED0000706F745365, (uint64_t)&outlined read-only object #0 of static CAPackageDefinition.stop.getter, a1);
}

id static CAPackageDefinition.skipForward.getter@<X0>(void *a1@<X8>)
{
  return static CAPackageDefinition.play.getter(0x4264726177726F46, 0xEF647261776B6361, (uint64_t)&outlined read-only object #0 of static CAPackageDefinition.skipForward.getter, a1);
}

id static CAPackageDefinition.skipBackward.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for module != -1) {
    swift_once();
  }
  id v6 = (id)static NSBundle.module;
  CGAffineTransformMakeScale(&v7, -1.0, 1.0);
  long long v2 = *(_OWORD *)&v7.a;
  long long v3 = *(_OWORD *)&v7.c;
  long long v4 = *(_OWORD *)&v7.tx;
  *(void *)a1 = 0x4264726177726F46;
  *(void *)(a1 + 8) = 0xEF647261776B6361;
  *(void *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = v2;
  *(_OWORD *)(a1 + 40) = v3;
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a1 + 72) = &outlined read-only object #0 of static CAPackageDefinition.skipBackward.getter;

  return v6;
}

id static CAPackageDefinition.favorite.getter@<X0>(void *a1@<X8>)
{
  return static CAPackageDefinition.play.getter(0x657469726F766146, 0xE800000000000000, (uint64_t)_swiftEmptyArrayStorage, a1);
}

id static CAPackageDefinition.favoriteDark.getter@<X0>(void *a1@<X8>)
{
  return static CAPackageDefinition.play.getter(0x657469726F766146, 0xEC0000006B726144, (uint64_t)_swiftEmptyArrayStorage, a1);
}

id static CAPackageDefinition.favoriteHighContrastDark.getter@<X0>(void *a1@<X8>)
{
  return static CAPackageDefinition.play.getter(0xD000000000000018, 0x80000001004728E0, (uint64_t)_swiftEmptyArrayStorage, a1);
}

id static CAPackageDefinition.favoriteHighContrastLight.getter@<X0>(void *a1@<X8>)
{
  return static CAPackageDefinition.play.getter(0xD000000000000019, 0x8000000100472900, (uint64_t)_swiftEmptyArrayStorage, a1);
}

id static CAPackageDefinition.play.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  if (one-time initialization token for module != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)static NSBundle.module;
  *a4 = a1;
  a4[1] = a2;
  a4[2] = v8;
  a4[3] = 0x3FF0000000000000;
  a4[4] = 0;
  a4[5] = 0;
  a4[6] = 0x3FF0000000000000;
  a4[7] = 0;
  a4[8] = 0;
  a4[9] = a3;

  return v8;
}

uint64_t specialized static CAPackageDefinition.__derived_struct_equals(_:_:)(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  type metadata accessor for UIMenu(0, (unint64_t *)&_sSo8NSObjectCML_1);
  if ((static NSObject.== infix(_:_:)() & 1) == 0 || (static CGAffineTransform.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v5 = (void *)a1[9];
  id v6 = (void *)a2[9];

  return specialized static Array<A>.== infix(_:_:)(v5, v6);
}

uint64_t sub_1002E9318()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CAPackage.PackageDataCache.data(for:)()
{
  return closure #1 in CAPackage.PackageDataCache.data(for:)(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1002E9364()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_43(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_43()
{
  return swift_release();
}

uint64_t outlined release of CAPackageDefinition(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for CAPackageDefinition(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CAPackageDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  BOOL v4 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  id v5 = v4;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CAPackageDefinition(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  BOOL v4 = (void *)a2[2];
  id v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy80_8_0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for CAPackageDefinition(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  long long v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CAPackageDefinition()
{
  return &type metadata for CAPackageDefinition;
}

uint64_t type metadata accessor for CAPackage.PackageDataCache()
{
  return self;
}

uint64_t sub_1002E95EC()
{
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(*(void *)(v0 + 40), *(void *)(v0 + 48));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CAPackage.PackageDataCache.set(data:packageName:)()
{
  return closure #1 in CAPackage.PackageDataCache.set(data:packageName:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_3(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id CoreAnimationPackageView.__allocating_init(definition:)(_OWORD *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CoreAnimationPackageView.init(definition:)(a1);
}

id CoreAnimationPackageView.init(definition:)(_OWORD *a1)
{
  swift_getObjectType();
  id v3 = &v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName];
  *(void *)id v3 = 0;
  *((void *)v3 + 1) = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_currentStates] = _swiftEmptyArrayStorage;
  *(void *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_package] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer] = 0;
  *(void *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController] = 0;
  long long v4 = &v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition];
  long long v5 = a1[3];
  *((_OWORD *)v4 + 2) = a1[2];
  *((_OWORD *)v4 + 3) = v5;
  *((_OWORD *)v4 + 4) = a1[4];
  long long v6 = a1[1];
  *(_OWORD *)long long v4 = *a1;
  *((_OWORD *)v4 + 1) = v6;
  outlined retain of CAPackageDefinition((uint64_t)a1);
  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for CoreAnimationPackageView();
  id v7 = objc_msgSendSuper2(&v10, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  CoreAnimationPackageView.setupPackage()();
  CoreAnimationPackageView.reset()();
  type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for UITraitCollection);
  id v8 = v7;
  static UITraitCollection.systemTraitsAffectingColorAppearance.getter();
  UIView.registerForTraitChanges<A>(_:handler:)();
  outlined release of CAPackageDefinition((uint64_t)a1);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return v8;
}

uint64_t type metadata accessor for CoreAnimationPackageView()
{
  return self;
}

void CoreAnimationPackageView.definition.didset(uint64_t *a1)
{
  id v3 = &v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition];
  swift_beginAccess();
  long long v4 = (void *)*((void *)v3 + 2);
  long long v5 = (void *)*((void *)v3 + 9);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  BOOL v8 = *(void *)v3 == *a1 && *((void *)v3 + 1) == v7;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    type metadata accessor for UIMenu(0, (unint64_t *)&_sSo8NSObjectCML_1);
    swift_bridgeObjectRetain();
    id v9 = v4;
    swift_bridgeObjectRetain();
    if (static NSObject.== infix(_:_:)() & 1) != 0 && (static CGAffineTransform.== infix(_:_:)())
    {
      char v10 = specialized static Array<A>.== infix(_:_:)(v5, (void *)a1[9]);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      if (v10) {
        return;
      }
    }
    else
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
  }
  BOOL v11 = *(void *)v3 == v6 && *((void *)v3 + 1) == v7;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    CoreAnimationPackageView.setupPackage()();
  }
  if ((static CGAffineTransform.== infix(_:_:)() & 1) == 0) {
    [v1 setNeedsLayout];
  }
  CoreAnimationPackageView.reset()();
}

uint64_t CoreAnimationPackageView.definition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 8);
  long long v5 = *(void **)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 72);
  *(void *)a1 = *(void *)v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v3 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v3 + 56);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRetain();
  id v7 = v5;
  return swift_bridgeObjectRetain();
}

uint64_t CoreAnimationPackageView.definition.setter(_OWORD *a1)
{
  uint64_t v3 = (_OWORD *)(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition);
  swift_beginAccess();
  long long v4 = v3[1];
  long long v5 = v3[3];
  v10[2] = v3[2];
  v10[3] = v5;
  v10[4] = v3[4];
  v10[0] = *v3;
  v10[1] = v4;
  uint64_t v6 = (void *)*((void *)v3 + 2);
  long long v7 = a1[1];
  *uint64_t v3 = *a1;
  v3[1] = v7;
  long long v8 = a1[4];
  v3[3] = a1[3];
  id v3[4] = v8;
  v3[2] = a1[2];
  outlined retain of CAPackageDefinition((uint64_t)v10);
  outlined retain of CAPackageDefinition((uint64_t)a1);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  CoreAnimationPackageView.definition.didset((uint64_t *)v10);
  outlined release of CAPackageDefinition((uint64_t)a1);
  return outlined release of CAPackageDefinition((uint64_t)v10);
}

void (*CoreAnimationPackageView.definition.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = (char *)malloc(0x118uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition;
  *((void *)v3 + 33) = v1;
  *((void *)v3 + 34) = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 8);
  long long v7 = *(void **)(v5 + 16);
  *((void *)v3 + 20) = *(void *)v5;
  *((void *)v3 + 21) = v6;
  v3 += 160;
  uint64_t v8 = *(void *)(v5 + 72);
  *((void *)v3 + 2) = v7;
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(v5 + 24);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(v5 + 40);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(v5 + 56);
  *((void *)v3 + 9) = v8;
  swift_bridgeObjectRetain();
  id v9 = v7;
  swift_bridgeObjectRetain();
  return CoreAnimationPackageView.definition.modify;
}

void CoreAnimationPackageView.definition.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 160);
  uint64_t v4 = *(void *)(*a1 + 168);
  uint64_t v5 = *(void **)(*a1 + 176);
  uint64_t v7 = *(void *)(*a1 + 184);
  uint64_t v6 = *(void *)(*a1 + 192);
  uint64_t v9 = *(void *)(*a1 + 200);
  uint64_t v8 = *(void *)(*a1 + 208);
  uint64_t v11 = *(void *)(*a1 + 216);
  uint64_t v10 = *(void *)(*a1 + 224);
  uint64_t v12 = *(void *)(*a1 + 232);
  uint64_t v13 = *(void *)(*a1 + 264) + *(void *)(*a1 + 272);
  if (a2)
  {
    *(_OWORD *)uint64_t v2 = *(_OWORD *)v13;
    long long v14 = *(_OWORD *)(v13 + 16);
    long long v15 = *(_OWORD *)(v13 + 32);
    long long v16 = *(_OWORD *)(v13 + 64);
    *(_OWORD *)(v2 + 48) = *(_OWORD *)(v13 + 48);
    *(_OWORD *)(v2 + 64) = v16;
    *(_OWORD *)(v2 + 16) = v14;
    *(_OWORD *)(v2 + 32) = v15;
    id v17 = *(void **)(v13 + 16);
    *(void *)uint64_t v13 = v3;
    *(void *)(v13 + 8) = v4;
    *(void *)(v13 + 16) = v5;
    *(void *)(v13 + 24) = v7;
    *(void *)(v13 + 32) = v6;
    *(void *)(v13 + 40) = v9;
    *(void *)(v13 + 48) = v8;
    *(void *)(v13 + 56) = v11;
    *(void *)(v13 + 64) = v10;
    *(void *)(v13 + 72) = v12;
    swift_bridgeObjectRetain_n();
    id v18 = v5;
    swift_bridgeObjectRetain_n();
    id v19 = v18;
    outlined retain of CAPackageDefinition(v2);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    CoreAnimationPackageView.definition.didset((uint64_t *)v2);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    outlined release of CAPackageDefinition(v2);
    id v20 = *(void **)(v2 + 176);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  else
  {
    *(_OWORD *)(v2 + 80) = *(_OWORD *)v13;
    long long v21 = *(_OWORD *)(v13 + 16);
    long long v22 = *(_OWORD *)(v13 + 32);
    long long v23 = *(_OWORD *)(v13 + 64);
    *(_OWORD *)(v2 + 128) = *(_OWORD *)(v13 + 48);
    *(_OWORD *)(v2 + 144) = v23;
    *(_OWORD *)(v2 + 96) = v21;
    *(_OWORD *)(v2 + 112) = v22;
    uint64_t v24 = *(void **)(v13 + 16);
    *(void *)uint64_t v13 = v3;
    *(void *)(v13 + 8) = v4;
    *(void *)(v13 + 16) = v5;
    *(void *)(v13 + 24) = v7;
    *(void *)(v13 + 32) = v6;
    *(void *)(v13 + 40) = v9;
    *(void *)(v13 + 48) = v8;
    *(void *)(v13 + 56) = v11;
    *(void *)(v13 + 64) = v10;
    *(void *)(v13 + 72) = v12;
    outlined retain of CAPackageDefinition(v2 + 80);
    swift_bridgeObjectRetain();
    id v25 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    CoreAnimationPackageView.definition.didset((uint64_t *)(v2 + 80));
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    outlined release of CAPackageDefinition(v2 + 80);
  }

  free((void *)v2);
}

void CoreAnimationPackageView.setupPackage()()
{
  uint64_t v1 = v0;
  type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for CAPackage);
  uint64_t v2 = &v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition];
  swift_beginAccess();
  long long v3 = *((_OWORD *)v2 + 2);
  long long v4 = *((_OWORD *)v2 + 3);
  long long v5 = *(_OWORD *)v2;
  v30[1] = *((_OWORD *)v2 + 1);
  v30[2] = v3;
  long long v6 = *((_OWORD *)v2 + 4);
  v30[3] = v4;
  void v30[4] = v6;
  v30[0] = v5;
  outlined retain of CAPackageDefinition((uint64_t)v30);
  uint64_t v7 = CAPackage.init(definition:)((uint64_t *)v30);
  id v20 = *(void **)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_package];
  *(void *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_package] = v7;
  long long v21 = v7;

  id v22 = [v21 rootLayer];
  if (v22)
  {
    long long v23 = *(void **)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer];
    *(void *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer] = v22;
    id v24 = v22;
    [v23 removeFromSuperlayer];

    id v25 = [objc_allocWithZone((Class)CAStateController) initWithLayer:v24];
    uint64_t v26 = *(void **)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController];
    *(void *)&v1[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController] = v25;

    [v24 removeFromSuperlayer];
    objc_msgSend(v24, "setGeometryFlipped:", objc_msgSend(v21, "isGeometryFlipped"));
    id v27 = [v1 layer];
    [v27 addSublayer:v24];

    id v28 = [v1 layer];
    [v28 bounds];

    CGRect.center.getter();
    objc_msgSend(v24, "setPosition:");
    CoreAnimationPackageView.updateColorFilter()();
  }
  else
  {
    lazy protocol witness table accessor for type Error #1 in CoreAnimationPackageView.setupPackage() and conformance Error #1 in CoreAnimationPackageView.setupPackage()();
    swift_allocError();
    swift_willThrow();

    if (one-time initialization token for musicCoreUI != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.musicCoreUI);
    uint64_t v9 = v1;
    swift_errorRetain();
    uint64_t v10 = v9;
    swift_errorRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      v29[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136446466;
      long long v14 = (void *)*((void *)v2 + 2);
      swift_bridgeObjectRetain();
      id v15 = v14;
      swift_bridgeObjectRetain();
      uint64_t v16 = String.init<A>(describing:)();
      *(void *)(v13 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v16, v17, v29);

      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2082;
      swift_errorRetain();
      __swift_instantiateConcreteTypeFromMangledName(&_ss5Error_pMD_1);
      uint64_t v18 = String.init<A>(describing:)();
      *(void *)(v13 + 14) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v18, v19, v29);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to load CAPackage with definition=%{public}s. Error=%{public}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

void CoreAnimationPackageView.stateName.didset(uint64_t a1, uint64_t a2)
{
  long long v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
  swift_beginAccess();
  uint64_t v6 = v5[1];
  if (v6)
  {
    uint64_t v7 = *v5;
    if (a2)
    {
      BOOL v8 = v7 == a1 && v6 == a2;
      if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return;
      }
    }
    uint64_t v9 = (void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
    uint64_t v10 = *(void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
    if (!v10) {
      return;
    }
    id v11 = v10;
    swift_bridgeObjectRetain();
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!a2) {
      return;
    }
    uint64_t v9 = (void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
    uint64_t v13 = *(void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
    if (!v13) {
      return;
    }
    id v11 = v13;
    NSString v12 = 0;
  }
  id v14 = [v11 stateWithName:v12];

  if (v14)
  {
    id v15 = *(void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController);
    if (v15)
    {
      uint64_t v16 = *v9;
      unint64_t v17 = self;
      id v18 = v16;
      id v19 = v15;
      id v20 = v14;
      unsigned int v21 = [v17 areAnimationsEnabled];
      double v22 = 0.0;
      if (v21) {
        *(float *)&double v22 = 1.0;
      }
      [v19 setState:v20 ofLayer:v18 transitionSpeed:v22];
    }
  }
}

uint64_t CoreAnimationPackageView.stateName.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CoreAnimationPackageView.stateName.setter(uint64_t a1, uint64_t a2)
{
  long long v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
  swift_beginAccess();
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  *long long v5 = a1;
  v5[1] = a2;
  CoreAnimationPackageView.stateName.didset(v6, v7);
  return swift_bridgeObjectRelease();
}

void (*CoreAnimationPackageView.stateName.modify(void *a1))(uint64_t a1, char a2)
{
  long long v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName;
  v3[5] = v1;
  v3[6] = v4;
  long long v5 = (void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = v5[1];
  v3[3] = *v5;
  id v3[4] = v6;
  swift_bridgeObjectRetain();
  return CoreAnimationPackageView.stateName.modify;
}

void CoreAnimationPackageView.stateName.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  uint64_t v5 = *(void *)(*(void *)a1 + 40);
  uint64_t v4 = *(void *)(*(void *)a1 + 48);
  uint64_t v6 = *(void *)(*(void *)a1 + 32);
  uint64_t v7 = (uint64_t *)(v5 + v4);
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  uint64_t *v7 = v3;
  v7[1] = v6;
  if (a2)
  {
    swift_bridgeObjectRetain();
    CoreAnimationPackageView.stateName.didset(v9, v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    CoreAnimationPackageView.stateName.didset(v9, v8);
  }
  swift_bridgeObjectRelease();

  free(v2);
}

void *CoreAnimationPackageView.foregroundColor.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void CoreAnimationPackageView.foregroundColor.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
  Class v5 = a1;

  if (*v3)
  {
    CoreAnimationPackageView.updateColorFilter()();
  }
  else
  {
    uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
    if (v6)
    {
      id v7 = v6;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      [v7 setFilters:isa];

      Class v5 = isa;
    }
  }
}

void (*CoreAnimationPackageView.foregroundColor.modify(void *a1))(void **a1, char a2)
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor;
  v3[3] = v1;
  id v3[4] = v4;
  swift_beginAccess();
  return CoreAnimationPackageView.foregroundColor.modify;
}

void CoreAnimationPackageView.foregroundColor.modify(void **a1, char a2)
{
  id v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = v3[3];
    if (*(void *)(v4 + v3[4]))
    {
      CoreAnimationPackageView.updateColorFilter()();
    }
    else
    {
      Class v5 = *(void **)(v4 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
      if (v5)
      {
        id v6 = v5;
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        [v6 setFilters:isa];
      }
    }
  }

  free(v3);
}

Swift::Void __swiftcall CoreAnimationPackageView.reset()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition;
  swift_beginAccess();
  uint64_t v2 = *(void **)(v1 + 72);
  if (v2[2])
  {
    uint64_t v4 = v2[4];
    uint64_t v3 = v2[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  Class v5 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
  swift_beginAccess();
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  *Class v5 = v4;
  v5[1] = v3;
  CoreAnimationPackageView.stateName.didset(v6, v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v1 + 72);
  uint64_t v9 = *(void *)(v8 + 16);
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  uint64_t v10 = (void *)swift_dynamicCastClass();
  if (!v10)
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  uint64_t v11 = v10[2];
  swift_release();
  if (v11 == v9 - (v9 != 0))
  {
    NSString v12 = (void *)swift_dynamicCastClass();
    if (!v12)
    {
      swift_bridgeObjectRelease();
      NSString v12 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    specialized _copyCollectionToContiguousArray<A>(_:)(v8, v8 + 32, v9 != 0, (2 * v9) | 1);
    NSString v12 = v13;
  }
  swift_bridgeObjectRelease();
  *(void *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_currentStates) = v12;
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall CoreAnimationPackageView.set(stateName:forSublayer:)(Swift::String stateName, Swift::String forSublayer)
{
  uint64_t v3 = *(void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer);
  if (v3)
  {
    object = forSublayer._object;
    uint64_t countAndFlagsBits = forSublayer._countAndFlagsBits;
    id v6 = [v3 sublayers];
    if (v6)
    {
      uint64_t v7 = v6;
      type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for CALayer);
      unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      swift_bridgeObjectRetain();
      id v17 = specialized Sequence.first(where:)(v8, countAndFlagsBits, (uint64_t)object);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v17)
      {
        NSString v9 = String._bridgeToObjectiveC()();
        id v10 = [v17 stateWithName:v9];

        if (v10)
        {
          uint64_t v11 = *(void **)(v2 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController);
          if (v11)
          {
            NSString v12 = self;
            id v13 = v11;
            id v14 = v10;
            id v10 = v17;
            unsigned int v15 = [v12 areAnimationsEnabled];
            double v16 = 0.0;
            if (v15) {
              *(float *)&double v16 = 1.0;
            }
            objc_msgSend(v13, "setState:ofLayer:transitionSpeed:", v14, v10, v16, v17);
          }
        }
      }
    }
  }
}

Swift::Void __swiftcall CoreAnimationPackageView.advanceState()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_currentStates);
  uint64_t v3 = *v2;
  if (*(void *)(*v2 + 16)
    || (uint64_t v4 = v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition,
        swift_beginAccess(),
        *uint64_t v2 = *(void *)(v4 + 72),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        uint64_t v3 = *v2,
        *(void *)(*v2 + 16)))
  {
    uint64_t v6 = *(void *)(v3 + 32);
    uint64_t v5 = *(void *)(v3 + 40);
    swift_bridgeObjectRetain();
    _sSa15replaceSubrange_4withySnySiG_qd__nt7ElementQyd__RszSlRd__lFSS_s15EmptyCollectionVySSGTg5Tf4ndn_n_0(0, 1);
    uint64_t v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName);
    swift_beginAccess();
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t *v7 = v6;
    v7[1] = v5;
    CoreAnimationPackageView.stateName.didset(v8, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall CoreAnimationPackageView.startCyclingThroughStates(with:)(Swift::Double with)
{
  uint64_t v3 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer);
  if (!v4 || ([v4 timeInterval], v5 != with))
  {
    uint64_t v6 = self;
    uint64_t v7 = swift_allocObject();
    swift_unknownObjectWeakInit();
    void v12[4] = partial apply for closure #1 in CoreAnimationPackageView.startCyclingThroughStates(with:);
    v12[5] = v7;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    void v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIAlertAction) -> ();
    unint64_t v12[3] = &block_descriptor_46;
    uint64_t v8 = _Block_copy(v12);
    swift_release();
    id v9 = [v6 scheduledTimerWithTimeInterval:1 repeats:v8 block:with];
    _Block_release(v8);
    id v10 = *(void **)(v1 + v3);
    *(void *)(v1 + v3) = v9;
    id v11 = v9;
    [v10 invalidate];
  }
}

void closure #1 in CoreAnimationPackageView.startCyclingThroughStates(with:)()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    CoreAnimationPackageView.advanceState()();
  }
}

Swift::Void __swiftcall CoreAnimationPackageView.stopCyclingThroughStates()()
{
  uint64_t v1 = OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer;
  if (*(void *)(v0 + OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer))
  {
    CoreAnimationPackageView.reset()();
    uint64_t v2 = *(void **)(v0 + v1);
    id v3 = v2;
    *(void *)(v0 + v1) = 0;
    [v2 invalidate];
  }
}

Swift::Void __swiftcall CoreAnimationPackageView.layoutSubviews()()
{
  v36.receiver = v0;
  v36.super_class = (Class)type metadata accessor for CoreAnimationPackageView();
  objc_msgSendSuper2(&v36, "layoutSubviews");
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer];
  if (v1)
  {
    id v2 = v1;
    id v3 = [v0 layer];
    [v3 bounds];
    CGFloat v5 = v4;
    CGFloat v7 = v6;
    CGFloat v9 = v8;
    CGFloat v11 = v10;

    [v2 bounds];
    CGFloat v29 = v12;
    CGFloat v14 = v13;
    CGFloat v16 = v15;
    CGFloat v18 = v17;
    v37.origin.CGFloat x = v5;
    v37.origin.CGFloat y = v7;
    v37.size.CGFloat width = v9;
    v37.size.height = v11;
    double Width = CGRectGetWidth(v37);
    v38.origin.CGFloat x = v5;
    v38.origin.CGFloat y = v7;
    v38.size.CGFloat width = v9;
    CGFloat rect = v11;
    v38.size.height = v11;
    double v20 = Width / CGRectGetHeight(v38);
    v39.origin.CGFloat x = v29;
    v39.origin.CGFloat y = v14;
    v39.size.CGFloat width = v16;
    v39.size.height = v18;
    double v21 = CGRectGetWidth(v39);
    v40.origin.CGFloat x = v29;
    v40.origin.CGFloat y = v14;
    v40.size.CGFloat width = v16;
    v40.size.height = v18;
    if (v20 >= v21 / CGRectGetHeight(v40))
    {
      v43.origin.CGFloat x = v5;
      v43.origin.CGFloat y = v7;
      v43.size.CGFloat width = v9;
      v43.size.height = rect;
      double Height = CGRectGetHeight(v43);
      v44.origin.CGFloat x = v29;
      v44.origin.CGFloat y = v14;
      v44.size.CGFloat width = v16;
      v44.size.height = v18;
      double v23 = CGRectGetHeight(v44);
    }
    else
    {
      v41.origin.CGFloat x = v5;
      v41.origin.CGFloat y = v7;
      v41.size.CGFloat width = v9;
      v41.size.height = rect;
      double Height = CGRectGetWidth(v41);
      v42.origin.CGFloat x = v29;
      v42.origin.CGFloat y = v14;
      v42.size.CGFloat width = v16;
      v42.size.height = v18;
      double v23 = CGRectGetWidth(v42);
    }
    CGAffineTransformMakeScale((CGAffineTransform *)&t1, Height / v23, Height / v23);
    long long v31 = *(_OWORD *)&t1.m13;
    long long v32 = *(_OWORD *)&t1.m11;
    CGFloat m21 = t1.m21;
    CGFloat m22 = t1.m22;
    uint64_t v26 = &v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_definition];
    swift_beginAccess();
    *(_OWORD *)&t1.m11 = v32;
    *(_OWORD *)&t1.m13 = v31;
    t1.CGFloat m21 = m21;
    t1.CGFloat m22 = m22;
    long long v27 = *(_OWORD *)(v26 + 40);
    *(_OWORD *)&t2.a = *(_OWORD *)(v26 + 24);
    *(_OWORD *)&t2.c = v27;
    *(_OWORD *)&t2.tCGFloat x = *(_OWORD *)(v26 + 56);
    CGAffineTransformConcat(&v34, (CGAffineTransform *)&t1, &t2);
    CGAffineTransform t2 = v34;
    CATransform3DMakeAffineTransform(&t1, &t2);
    [v2 setTransform:&t1];
    id v28 = [v0 layer];
    [v28 bounds];

    CGRect.center.getter();
    objc_msgSend(v2, "setPosition:");
  }
}

id CoreAnimationPackageView.updateColorFilter()()
{
  uint64_t v1 = self;
  [v1 begin];
  [v1 setDisableActions:1];
  id v2 = (void **)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor];
  swift_beginAccess();
  id v3 = *v2;
  if (*v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v4 = objc_allocWithZone((Class)CAFilter);
    Class v5 = v3;
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v7 = [v4 initWithType:v6];

    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    [v7 setValue:isa forKey:kCAFilterInputBias];

    Class v9 = Int._bridgeToObjectiveC()().super.super.isa;
    [v7 setValue:v9 forKey:kCAFilterInputAmount];

    id v10 = [v0 traitCollection];
    id v11 = [(objc_class *)v5 resolvedColorWithTraitCollection:v10];

    id v12 = [v11 CGColor];
    [v7 setValue:v12 forKey:kCAFilterInputColor];

    double v13 = *(void **)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer];
    if (v13)
    {
      __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCyypGMD_1);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_100493400;
      *(void *)(v14 + 56) = type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for CAFilter);
      *(void *)(v14 + 32) = v7;
      id v15 = v13;
      id v16 = v7;
      Class v17 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v15 setFilters:v17];
    }
    goto LABEL_6;
  }
  CGFloat v18 = *(void **)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer];
  if (v18)
  {
    id v7 = v18;
    Class v5 = Array._bridgeToObjectiveC()().super.isa;
    [v7 setFilters:v5];
LABEL_6:
  }
  return [v1 commit];
}

void CoreAnimationPackageView.init(frame:)()
{
}

id CoreAnimationPackageView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CoreAnimationPackageView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id specialized closure #1 in CoreAnimationPackageView.init(definition:)()
{
  return CoreAnimationPackageView.updateColorFilter()();
}

void specialized CoreAnimationPackageView.init(coder:)()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateName];
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_foregroundColor] = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateAnimationTimer] = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_currentStates] = _swiftEmptyArrayStorage;
  *(void *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_package] = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_packageLayer] = 0;
  *(void *)&v0[OBJC_IVAR____TtC11MusicCoreUI24CoreAnimationPackageView_stateController] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void *specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v6);
      double v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      id v10 = [v7 name];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        if (v12 == a2 && v14 == a3)
        {
          swift_bridgeObjectRelease();
LABEL_18:
          swift_bridgeObjectRelease();
          return v8;
        }
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v16) {
          goto LABEL_18;
        }
      }

      ++v6;
      if (v9 == v5) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_21:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t _sSa15replaceSubrange_4withySnySiG_qd__nt7ElementQyd__RszSlRd__lFSS_s15EmptyCollectionVySSGTg5Tf4ndn_n_0(uint64_t result, int64_t a2)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_1 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = result;
  int64_t v7 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = result - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native
    || v9 > *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_1 + 3) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_1 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_1(isUniquelyReferenced_nonNull_native, v11, 1, New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_1);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_19;
  }
  uint64_t v12 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_1 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_25;
  }
  id v15 = &New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_1[16 * a2 + 32];
  if (v6 != a2
    || &New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_1[16 * v6 + 32] >= &v15[16 * v14])
  {
    uint64_t result = (uint64_t)memmove(&New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_1[16 * v6 + 32], v15, 16 * v14);
  }
  uint64_t v16 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_1 + 2);
  BOOL v13 = __OFADD__(v16, v8);
  uint64_t v17 = v16 - v7;
  if (!v13)
  {
    *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_1 + 2) = v17;
LABEL_19:
    *objc_super v2 = New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_1;
    return result;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1002EBD38()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void partial apply for closure #1 in CoreAnimationPackageView.startCyclingThroughStates(with:)()
{
}

uint64_t block_copy_helper_44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_44()
{
  return swift_release();
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v3 = a2;
    uint64_t v5 = a1;
    uint64_t v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v22 < v3) {
    goto LABEL_28;
  }
LABEL_4:
  uint64_t v7 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v8 = (unint64_t *)(v5 - v3);
  if (__OFSUB__(0, v7))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    id v10 = (char *)v8 + v23;
    if (!__OFADD__(v23, v8)) {
      goto LABEL_8;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if ((unint64_t)*v4 >> 62) {
    goto LABEL_31;
  }
  uint64_t v9 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v10 = (char *)(v9 - v7);
  if (__OFADD__(v9, v8)) {
    goto LABEL_33;
  }
LABEL_8:
  unint64_t v11 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *id v4 = v11;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v11 & 0x8000000000000000) != 0
    || (v11 & 0x4000000000000000) != 0
    || (uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8, (uint64_t)v10 > *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    uint64_t v7 = (uint64_t)v8;
    uint64_t v8 = v6;
    if (!(v11 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      *id v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      uint64_t v13 = *v4 & 0xFFFFFFFFFFFFFF8;
      uint64_t v6 = v8;
      uint64_t v8 = (unint64_t *)v7;
      goto LABEL_14;
    }
LABEL_34:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v14 = v13 + 32;
  id v15 = (char *)(v13 + 32 + 8 * v5);
  type metadata accessor for UIMenu(0, v6);
  uint64_t result = swift_arrayDestroy();
  if (v8)
  {
    if ((unint64_t)*v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v18 = v24 - v3;
      if (!__OFSUB__(v24, v3)) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v17 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v18 = v17 - v3;
      if (!__OFSUB__(v17, v3))
      {
LABEL_17:
        id v19 = (char *)(v14 + 8 * v3);
        if (v5 != v3 || v15 >= &v19[8 * v18]) {
          uint64_t result = (uint64_t)memmove(v15, v19, 8 * v18);
        }
        if (!((unint64_t)*v4 >> 62))
        {
          uint64_t v20 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
          double v21 = (char *)v8 + v20;
          if (!__OFADD__(v20, v8))
          {
LABEL_22:
            *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v21;
            goto LABEL_23;
          }
LABEL_40:
          __break(1u);
          return result;
        }
LABEL_38:
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t result = swift_bridgeObjectRelease();
        double v21 = (char *)v8 + v25;
        if (!__OFADD__(v25, v8)) {
          goto LABEL_22;
        }
        goto LABEL_40;
      }
    }
    __break(1u);
    goto LABEL_38;
  }
LABEL_23:

  return specialized Array._endMutation()();
}

unint64_t lazy protocol witness table accessor for type Error #1 in CoreAnimationPackageView.setupPackage() and conformance Error #1 in CoreAnimationPackageView.setupPackage()()
{
  unint64_t result = lazy protocol witness table cache variable for type Error #1 in CoreAnimationPackageView.setupPackage() and conformance Error #1 in CoreAnimationPackageView.setupPackage();
  if (!lazy protocol witness table cache variable for type Error #1 in CoreAnimationPackageView.setupPackage() and conformance Error #1 in CoreAnimationPackageView.setupPackage())
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Error #1 in CoreAnimationPackageView.setupPackage() and conformance Error #1 in CoreAnimationPackageView.setupPackage());
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Error #1 in CoreAnimationPackageView.setupPackage() and conformance Error #1 in CoreAnimationPackageView.setupPackage();
  if (!lazy protocol witness table cache variable for type Error #1 in CoreAnimationPackageView.setupPackage() and conformance Error #1 in CoreAnimationPackageView.setupPackage())
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Error #1 in CoreAnimationPackageView.setupPackage() and conformance Error #1 in CoreAnimationPackageView.setupPackage());
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Error #1 in CoreAnimationPackageView.setupPackage()(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1002EC454);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for Error #1 in CoreAnimationPackageView.setupPackage()()
{
  return &unk_1005409D0;
}

id one-time initialization function for musicCoreUIBundle()
{
  if (one-time initialization token for module != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static NSBundle.module;
  static NSBundle.musicCoreUIBundle = static NSBundle.module;

  return v0;
}

uint64_t *NSBundle.musicCoreUIBundle.unsafeMutableAddressor()
{
  if (one-time initialization token for musicCoreUIBundle != -1) {
    swift_once();
  }
  return &static NSBundle.musicCoreUIBundle;
}

id static NSBundle.musicCoreUIBundle.getter()
{
  if (one-time initialization token for musicCoreUIBundle != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static NSBundle.musicCoreUIBundle;

  return v0;
}

void MusicLibrary.ActionableState.updateSymbolConfiguration(from:traitCollection:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for platterMinimumSize != -1) {
    swift_once();
  }
  unsigned int v9 = a4;
  long long v10 = static SymbolButton.Configuration.platterMinimumSize;
  unint64_t v11 = (int *)type metadata accessor for SymbolButton.Configuration(0);
  *(_OWORD *)(a1 + v11[13]) = v10;
  static UIView.Corner.rounded.getter();
  uint64_t v12 = type metadata accessor for UIView.Corner();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 0, 1, v12);
  outlined assign with take of UIView.Corner?((uint64_t)v8, a1 + v11[9]);
  uint64_t v13 = a1 + v11[10];
  if (*(void *)v13)
  {
    long long v14 = *(_OWORD *)&UIEdgeInsetsZero.bottom;
    *(_OWORD *)(v13 + 8) = *(_OWORD *)&UIEdgeInsetsZero.top;
    *(_OWORD *)(v13 + 24) = v14;
  }

  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 56) = 2;
  objc_storeStrong((id *)(a1 + 24), UIFontTextStyleSubheadline);
  *(void *)(a1 + 48) = 6;
  switch(v9 >> 8)
  {
    case 2u:
      swift_bridgeObjectRelease();
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      goto LABEL_16;
    case 3u:
      swift_bridgeObjectRelease();
      *(_OWORD *)a1 = xmmword_1004A3BD0;
      *(void *)(a1 + 48) = 7;
      goto LABEL_16;
    case 4u:
      swift_bridgeObjectRelease();
      long long v19 = xmmword_1004A3BC0;
      goto LABEL_15;
    case 5u:
      swift_bridgeObjectRelease();
      long long v19 = xmmword_1004A3BB0;
      goto LABEL_15;
    default:
      if ((v9 & 0x100) != 0)
      {
        swift_bridgeObjectRelease();
        long long v19 = xmmword_1004A3BE0;
LABEL_15:
        *(_OWORD *)a1 = v19;
LABEL_16:
        outlined consume of SymbolButton.CustomView?(*(void **)v13, *(void *)(v13 + 8), *(void *)(v13 + 16), *(void *)(v13 + 24), *(void *)(v13 + 32), *(void *)(v13 + 40), *(void **)(v13 + 48));
        *(void *)(v13 + 48) = 0;
        *(_OWORD *)(v13 + 16) = 0u;
        *(_OWORD *)(v13 + 32) = 0u;
        *(_OWORD *)uint64_t v13 = 0u;
      }
      else
      {
        id v15 = *(void **)v13;
        if (*(void *)v13
          && (type metadata accessor for CircularProgressView(), (uint64_t v16 = swift_dynamicCastClass()) != 0))
        {
          uint64_t v17 = (char *)v16;
          id v18 = v15;
        }
        else
        {
          id v20 = objc_allocWithZone((Class)type metadata accessor for CircularProgressView());
          uint64_t v17 = CircularProgressView.init(size:)(0.0, 0.0);
        }
        CircularProgressView.setState(_:animated:)(a3, v9 & 1, 1);
        outlined consume of SymbolButton.Background?(*(void *)(a1 + 192), *(void **)(a1 + 200));
        *(_OWORD *)(a1 + 192) = xmmword_100493CF0;
        *(void *)(a1 + 208) = 0;
        *(void *)(a1 + 216) = 0;
        swift_bridgeObjectRelease();
        *(_OWORD *)a1 = xmmword_1004A3BF0;
        *(void *)(a1 + 56) = 1;
        double v21 = UIFontTextStyleFootnote;

        *(void *)(a1 + 24) = v21;
        long long v24 = *(_OWORD *)&UIEdgeInsetsZero.top;
        CGFloat bottom = UIEdgeInsetsZero.bottom;
        CGFloat right = UIEdgeInsetsZero.right;
        outlined consume of SymbolButton.CustomView?(*(void **)v13, *(void *)(v13 + 8), *(void *)(v13 + 16), *(void *)(v13 + 24), *(void *)(v13 + 32), *(void *)(v13 + 40), *(void **)(v13 + 48));
        *(void *)uint64_t v13 = v17;
        *(_OWORD *)(v13 + 8) = v24;
        *(CGFloat *)(v13 + 24) = bottom;
        *(CGFloat *)(v13 + 32) = right;
        *(_OWORD *)(v13 + 40) = xmmword_1004A3B00;
      }
      return;
  }
}

uint64_t outlined assign with take of UIView.Corner?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void outlined consume of SymbolButton.CustomView?(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a1)
  {
  }
}

uint64_t outlined consume of SymbolButton.Background?(uint64_t a1, void *a2)
{
  if (a2 != (void *)1)
  {

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t one-time initialization function for musicCoreUI()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.musicCoreUI);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.musicCoreUI);
  _sSo9OS_os_logCMa_0();
  OS_os_log.init(musicCategory:)();
  return Logger.init(_:)();
}

unint64_t _sSo9OS_os_logCMa_0()
{
  unint64_t result = _sSo9OS_os_logCML_0;
  if (!_sSo9OS_os_logCML_0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&_sSo9OS_os_logCML_0);
  }
  return result;
}

uint64_t ArtworkImageViewModelAttributeProviding.cropStyle.getter@<X0>(uint64_t a1@<X8>)
{
  static Artwork.CropStyle.boundedBox.getter();
  uint64_t v2 = type metadata accessor for Artwork.CropStyle();
  int v3 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 0, 1, v2);
}

uint64_t specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter@<X0>(void (*a1)(uint64_t)@<X0>, void (*a2)(uint64_t)@<X1>, char *a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&_s8MusicKit7ArtworkV0aB8InternalE9CropStyleVSgMD_0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&_s8MusicKit7ArtworkVSgMD_0);
  __chkstk_darwin();
  unsigned int v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Artwork();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin();
  uint64_t v16 = (char *)&v23 - v15;
  a1(v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v9, (uint64_t *)&_s8MusicKit7ArtworkVSgMD_0);
    uint64_t v17 = type metadata accessor for ArtworkImage.ViewModel(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a3, 1, 1, v17);
  }
  else
  {
    long long v19 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v19(v16, v9, v10);
    uint64_t v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, v10);
    a2(v20);
    uint64_t v21 = type metadata accessor for Artwork.CropStyle();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v7, 0, 1, v21);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    v19(a3, v13, v10);
    uint64_t v22 = type metadata accessor for ArtworkImage.ViewModel(0);
    outlined init with take of Artwork.CropStyle?((uint64_t)v7, (uint64_t)&a3[*(int *)(v22 + 20)]);
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(a3, 0, 1, v22);
  }
}

uint64_t specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter@<X0>(char *a1@<X8>)
{
  return specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&UploadedVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter@<X0>(unsigned char *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&_s8MusicKit7ArtworkV0aB8InternalE9CropStyleVSgMD_0);
  __chkstk_darwin();
  int v3 = &v17[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&_s8MusicKit7ArtworkVSgMD_0);
  __chkstk_darwin();
  uint64_t v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for Artwork();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  unsigned int v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v11 = &v17[-v10];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MusicAttributeProperty<Artist, Artwork>);
  swift_allocObject();
  MusicAttributeProperty.init(_:)();
  Artist.subscript.getter();
  swift_release();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v5, (uint64_t *)&_s8MusicKit7ArtworkVSgMD_0);
    uint64_t v12 = type metadata accessor for ArtworkImage.ViewModel(0);
    return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  else
  {
    uint64_t v14 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 32);
    v14(v11, v5, v6);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 16))(v9, v11, v6);
    static Artwork.CropStyle.boundedBox.getter();
    uint64_t v15 = type metadata accessor for Artwork.CropStyle();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v3, 0, 1, v15);
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v11, v6);
    v14(a1, v9, v6);
    uint64_t v16 = type metadata accessor for ArtworkImage.ViewModel(0);
    outlined init with take of Artwork.CropStyle?((uint64_t)v3, (uint64_t)&a1[*(int *)(v16 + 20)]);
    return (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a1, 0, 1, v16);
  }
}

uint64_t ArtworkImageViewModelAttributeProviding.artworkViewModel.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&_s8MusicKit7ArtworkV0aB8InternalE9CropStyleVSgMD_0);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&_s8MusicKit7ArtworkVSgMD_0);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Artwork();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v22 - v15;
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(a2 + 16);
  uint64_t v23 = v3;
  v17(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v10, (uint64_t *)&_s8MusicKit7ArtworkVSgMD_0);
    uint64_t v18 = type metadata accessor for ArtworkImage.ViewModel(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a3, 1, 1, v18);
  }
  else
  {
    uint64_t v22 = a1;
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v20(v16, v10, v11);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v16, v11);
    (*(void (**)(uint64_t, uint64_t))(a2 + 24))(v22, a2);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
    v20(a3, v14, v11);
    uint64_t v21 = type metadata accessor for ArtworkImage.ViewModel(0);
    outlined init with take of Artwork.CropStyle?((uint64_t)v8, (uint64_t)&a3[*(int *)(v21 + 20)]);
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a3, 0, 1, v21);
  }
}

uint64_t outlined init with take of Artwork.CropStyle?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&_s8MusicKit7ArtworkV0aB8InternalE9CropStyleVSgMD_0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for ArtworkImageViewModelAttributeProviding.artwork.getter in conformance Album()
{
  return Album.artwork.getter();
}

uint64_t protocol witness for ArtworkImageViewModelAttributeProviding.cropStyle.getter in conformance Album@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for ArtworkImageViewModelAttributeProviding.cropStyle.getter in conformance Album((void (*)(void))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t protocol witness for ArtworkImageViewModelProviding.artworkViewModel.getter in conformance Album@<X0>(char *a1@<X8>)
{
  return specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&Album.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t protocol witness for ArtworkImageViewModelAttributeProviding.artwork.getter in conformance Artist()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MusicAttributeProperty<Artist, Artwork>);
  swift_allocObject();
  MusicAttributeProperty.init(_:)();
  Artist.subscript.getter();

  return swift_release();
}

uint64_t protocol witness for ArtworkImageViewModelAttributeProviding.artwork.getter in conformance Curator()
{
  return Curator.artwork.getter();
}

uint64_t protocol witness for ArtworkImageViewModelProviding.artworkViewModel.getter in conformance Curator@<X0>(char *a1@<X8>)
{
  return specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&Curator.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t protocol witness for ArtworkImageViewModelAttributeProviding.artwork.getter in conformance EditorialItem()
{
  return EditorialItem.artwork.getter();
}

uint64_t protocol witness for ArtworkImageViewModelProviding.artworkViewModel.getter in conformance EditorialItem@<X0>(char *a1@<X8>)
{
  return specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&EditorialItem.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t protocol witness for ArtworkImageViewModelAttributeProviding.artwork.getter in conformance Genre()
{
  return Genre.artwork.getter();
}

uint64_t protocol witness for ArtworkImageViewModelProviding.artworkViewModel.getter in conformance Genre@<X0>(char *a1@<X8>)
{
  return specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&Genre.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t protocol witness for ArtworkImageViewModelProviding.artworkViewModel.getter in conformance MusicVideo@<X0>(char *a1@<X8>)
{
  return specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&MusicVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t Playlist._artworkViewModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Artwork();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&_s8MusicKit7ArtworkVSgMD_0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v15 - v8;
  Playlist.artwork.getter();
  outlined init with copy of (String, Any)((uint64_t)v9, (uint64_t)v7, (uint64_t *)&_s8MusicKit7ArtworkVSgMD_0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v7, 1, v2) == 1)
  {
    uint64_t v10 = type metadata accessor for ArtworkImage.ViewModel(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a1, 1, 1, v10);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v7, v2);
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1, v5, v2);
    uint64_t v11 = type metadata accessor for ArtworkImage.ViewModel(0);
    uint64_t v12 = a1 + *(int *)(v11 + 20);
    static Artwork.CropStyle.squareCenterCrop.getter();
    uint64_t v13 = type metadata accessor for Artwork.CropStyle();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 0, 1, v13);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a1, 0, 1, v11);
  }
  return outlined destroy of TaskPriority?((uint64_t)v9, (uint64_t *)&_s8MusicKit7ArtworkVSgMD_0);
}

uint64_t Playlist.artworkViewModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v71 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&_s8MusicKit7ArtworkV0aB8InternalE9CropStyleVSgMD_0);
  __chkstk_darwin();
  id v62 = (char *)&v60 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Artwork();
  uint64_t v67 = *(void *)(v3 - 8);
  uint64_t v68 = v3;
  __chkstk_darwin();
  uint64_t v61 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v66 = (char *)&v60 - v5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&_s8MusicKit7ArtworkVSgMD_0);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v65 = (char *)&v60 - v8;
  __chkstk_darwin();
  uint64_t v10 = (char *)&v60 - v9;
  __chkstk_darwin();
  uint64_t v12 = (char *)&v60 - v11;
  uint64_t v13 = type metadata accessor for Playlist();
  uint64_t v69 = *(void *)(v13 - 8);
  uint64_t v70 = v13;
  __chkstk_darwin();
  int v64 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v16 = (char *)&v60 - v15;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ArtworkImage.ViewModel?);
  __chkstk_darwin();
  uint64_t v63 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  long long v19 = (char *)&v60 - v18;
  __swift_instantiateConcreteTypeFromMangledName(&_s8MusicKit8PlaylistV0aB8InternalE7VariantOSgMD_0);
  __chkstk_darwin();
  uint64_t v21 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v23 = (char *)&v60 - v22;
  Playlist.variant.getter();
  uint64_t v24 = type metadata accessor for Playlist.Variant();
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1) {
    goto LABEL_2;
  }
  outlined init with copy of (String, Any)((uint64_t)v23, (uint64_t)v21, &_s8MusicKit8PlaylistV0aB8InternalE7VariantOSgMD_0);
  int v27 = (*(uint64_t (**)(char *, uint64_t))(v25 + 88))(v21, v24);
  if (v27 != enum case for Playlist.Variant.regular(_:) && v27 != enum case for Playlist.Variant.smart(_:))
  {
    if (v27 == enum case for Playlist.Variant.genius(_:)) {
      goto LABEL_2;
    }
    if (v27 == enum case for Playlist.Variant.favoriteSongs(_:)) {
      goto LABEL_7;
    }
    if (v27 == enum case for Playlist.Variant.folder(_:)) {
      goto LABEL_14;
    }
    if (v27 != enum case for Playlist.Variant.subscribed(_:))
    {
      if (v27 != enum case for Playlist.Variant.admin(_:))
      {
        if (v27 == enum case for Playlist.Variant.personalMix(_:))
        {
          uint64_t v46 = (uint64_t)v65;
          Playlist.editorialArtwork.getter();
          outlined init with copy of (String, Any)(v46, (uint64_t)v7, (uint64_t *)&_s8MusicKit7ArtworkVSgMD_0);
          uint64_t v48 = v67;
          uint64_t v47 = v68;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v7, 1, v68) == 1)
          {
            uint64_t v49 = type metadata accessor for ArtworkImage.ViewModel(0);
            uint64_t v50 = (uint64_t)v63;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v63, 1, 1, v49);
          }
          else
          {
            uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
            id v51 = v66;
            v60(v66, v7, v47);
            id v52 = v61;
            (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v61, v51, v47);
            uint64_t v53 = (uint64_t)v62;
            static Artwork.CropStyle.featuredContentCrop170T100B.getter();
            uint64_t v54 = type metadata accessor for Artwork.CropStyle();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v53, 0, 1, v54);
            uint64_t v50 = (uint64_t)v63;
            v60(v63, v52, v47);
            uint64_t v49 = type metadata accessor for ArtworkImage.ViewModel(0);
            outlined init with take of Artwork.CropStyle?(v53, v50 + *(int *)(v49 + 20));
            (*(void (**)(char *, uint64_t))(v48 + 8))(v51, v47);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v50, 0, 1, v49);
          }
          uint64_t v56 = v70;
          uint64_t v55 = v71;
          uint64_t v57 = v69;
          uint64_t v58 = v64;
          outlined destroy of TaskPriority?(v46, (uint64_t *)&_s8MusicKit7ArtworkVSgMD_0);
          (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v58, v1, v56);
          type metadata accessor for ArtworkImage.ViewModel(0);
          uint64_t v59 = *(void *)(v49 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v50, 1, v49) == 1)
          {
            Playlist._artworkViewModel.getter(v55);
            (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v56);
            outlined destroy of TaskPriority?(v50, (uint64_t *)&demangling cache variable for type metadata for ArtworkImage.ViewModel?);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v56);
            outlined init with take of ArtworkImage.ViewModel(v50, v55);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v59 + 56))(v55, 0, 1, v49);
          }
          goto LABEL_15;
        }
        (*(void (**)(char *, uint64_t))(v25 + 8))(v21, v24);
LABEL_14:
        uint64_t v45 = type metadata accessor for ArtworkImage.ViewModel(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v71, 1, 1, v45);
LABEL_15:
        CGRect v42 = &_s8MusicKit8PlaylistV0aB8InternalE7VariantOSgMD_0;
        uint64_t v43 = (uint64_t)v23;
        return outlined destroy of TaskPriority?(v43, v42);
      }
LABEL_2:
      outlined destroy of TaskPriority?((uint64_t)v23, &_s8MusicKit8PlaylistV0aB8InternalE7VariantOSgMD_0);
      return Playlist._artworkViewModel.getter(v71);
    }
  }
LABEL_7:
  outlined destroy of TaskPriority?((uint64_t)v23, &_s8MusicKit8PlaylistV0aB8InternalE7VariantOSgMD_0);
  Playlist._artworkViewModel.getter((uint64_t)v19);
  uint64_t v28 = v69;
  uint64_t v29 = v1;
  uint64_t v30 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v16, v29, v70);
  uint64_t v31 = type metadata accessor for ArtworkImage.ViewModel(0);
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v19, 1, v31) == 1)
  {
    Playlist.tracksTiledArtwork.getter();
    outlined init with copy of (String, Any)((uint64_t)v12, (uint64_t)v10, (uint64_t *)&_s8MusicKit7ArtworkVSgMD_0);
    uint64_t v34 = v67;
    uint64_t v33 = v68;
    uint64_t v35 = 1;
    BOOL v36 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v10, 1, v68) == 1;
    uint64_t v37 = v71;
    if (!v36)
    {
      CGRect v38 = v66;
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v66, v10, v33);
      CGRect v39 = v38;
      (*(void (**)(uint64_t, char *, uint64_t))(v34 + 16))(v71, v38, v33);
      uint64_t v40 = v71 + *(int *)(v31 + 20);
      static Artwork.CropStyle.boundedBox.getter();
      uint64_t v41 = type metadata accessor for Artwork.CropStyle();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v40, 0, 1, v41);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v39, v33);
      uint64_t v37 = v71;
      uint64_t v35 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v37, v35, 1, v31);
    outlined destroy of TaskPriority?((uint64_t)v12, (uint64_t *)&_s8MusicKit7ArtworkVSgMD_0);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v70);
    CGRect v42 = (uint64_t *)&demangling cache variable for type metadata for ArtworkImage.ViewModel?;
    uint64_t v43 = (uint64_t)v19;
    return outlined destroy of TaskPriority?(v43, v42);
  }
  (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v30);
  uint64_t v44 = v71;
  outlined init with take of ArtworkImage.ViewModel((uint64_t)v19, v71);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v44, 0, 1, v31);
}

uint64_t outlined init with take of ArtworkImage.ViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ArtworkImage.ViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for ArtworkImageViewModelProviding.artworkViewModel.getter in conformance Song@<X0>(char *a1@<X8>)
{
  return specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&Song.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t protocol witness for ArtworkImageViewModelAttributeProviding.artwork.getter in conformance Playlist.Entry.InternalItem()
{
  return Playlist.Entry.InternalItem.artwork.getter();
}

uint64_t protocol witness for ArtworkImageViewModelProviding.artworkViewModel.getter in conformance Playlist.Entry.InternalItem@<X0>(char *a1@<X8>)
{
  return specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&Playlist.Entry.InternalItem.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t protocol witness for ArtworkImageViewModelAttributeProviding.artwork.getter in conformance RadioShow()
{
  return RadioShow.artwork.getter();
}

uint64_t protocol witness for ArtworkImageViewModelProviding.artworkViewModel.getter in conformance RadioShow@<X0>(char *a1@<X8>)
{
  return specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&RadioShow.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t RecentlyAddedMusicItem.artworkViewModel.getter@<X0>(char *a1@<X8>)
{
  uint64_t v45 = a1;
  uint64_t v1 = type metadata accessor for UploadedVideo();
  uint64_t v34 = *(void *)(v1 - 8);
  uint64_t v35 = v1;
  __chkstk_darwin();
  uint64_t v33 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for MusicVideo();
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  __chkstk_darwin();
  uint64_t v41 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TVSeason();
  uint64_t v37 = *(void *)(v5 - 8);
  uint64_t v38 = v5;
  __chkstk_darwin();
  BOOL v36 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Playlist();
  uint64_t v39 = *(void *)(v7 - 8);
  uint64_t v40 = v7;
  __chkstk_darwin();
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MusicMovie();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Album();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for RecentlyAddedMusicItem();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin();
  uint64_t v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v44, v18);
  int v22 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v21, v18);
  if (v22 == enum case for RecentlyAddedMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v21, v14);
    specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&Album.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v45);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  uint64_t v24 = v45;
  if (v22 == enum case for RecentlyAddedMusicItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v21, v10);
    specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&MusicMovie.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  if (v22 == enum case for RecentlyAddedMusicItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
    uint64_t v26 = v41;
    uint64_t v25 = v42;
    uint64_t v27 = v43;
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v41, v21, v43);
    uint64_t v28 = &MusicVideo.artwork.getter;
  }
  else
  {
    if (v22 == enum case for RecentlyAddedMusicItem.playlist(_:))
    {
      (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
      uint64_t v30 = v39;
      uint64_t v29 = v40;
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v9, v21, v40);
      Playlist.artworkViewModel.getter((uint64_t)v24);
      return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v9, v29);
    }
    if (v22 == enum case for RecentlyAddedMusicItem.tvSeason(_:))
    {
      (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
      uint64_t v26 = v36;
      uint64_t v25 = v37;
      uint64_t v27 = v38;
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v36, v21, v38);
      uint64_t v28 = &TVSeason.artwork.getter;
    }
    else
    {
      if (v22 != enum case for RecentlyAddedMusicItem.uploadedVideo(_:))
      {
        uint64_t v31 = type metadata accessor for ArtworkImage.ViewModel(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v24, 1, 1, v31);
        return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
      }
      (*(void (**)(char *, uint64_t))(v19 + 96))(v21, v18);
      uint64_t v26 = v33;
      uint64_t v25 = v34;
      uint64_t v27 = v35;
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v33, v21, v35);
      uint64_t v28 = &UploadedVideo.artwork.getter;
    }
  }
  specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))v28, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v26, v27);
}

uint64_t protocol witness for ArtworkImageViewModelAttributeProviding.artwork.getter in conformance RecordLabel()
{
  return RecordLabel.artwork.getter();
}

uint64_t protocol witness for ArtworkImageViewModelProviding.artworkViewModel.getter in conformance RecordLabel@<X0>(char *a1@<X8>)
{
  return specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&RecordLabel.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t protocol witness for ArtworkImageViewModelAttributeProviding.artwork.getter in conformance MusicMovie()
{
  return MusicMovie.artwork.getter();
}

uint64_t protocol witness for ArtworkImageViewModelProviding.artworkViewModel.getter in conformance MusicMovie@<X0>(char *a1@<X8>)
{
  return specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&MusicMovie.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t protocol witness for ArtworkImageViewModelAttributeProviding.artwork.getter in conformance SocialProfile()
{
  return SocialProfile.artwork.getter();
}

uint64_t protocol witness for ArtworkImageViewModelAttributeProviding.cropStyle.getter in conformance SocialProfile@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for ArtworkImageViewModelAttributeProviding.cropStyle.getter in conformance Album((void (*)(void))&static Artwork.CropStyle.specificRectangle.getter, a1);
}

uint64_t protocol witness for ArtworkImageViewModelProviding.artworkViewModel.getter in conformance SocialProfile@<X0>(char *a1@<X8>)
{
  return specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&SocialProfile.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.specificRectangle.getter, a1);
}

uint64_t protocol witness for ArtworkImageViewModelAttributeProviding.artwork.getter in conformance Station()
{
  return Station.artwork.getter();
}

uint64_t protocol witness for ArtworkImageViewModelProviding.artworkViewModel.getter in conformance Station@<X0>(char *a1@<X8>)
{
  return specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&Station.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.specificRectangle.getter, a1);
}

uint64_t TVEpisode.artworkViewModel.getter@<X0>(char *a1@<X8>)
{
  uint64_t v31 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&_s8MusicKit7ArtworkV0aB8InternalE9CropStyleVSgMD_0);
  __chkstk_darwin();
  uint64_t v30 = (char *)&v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&_s8MusicKit7ArtworkVSgMD_0);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v30 - v4;
  uint64_t v6 = type metadata accessor for Artwork();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v30 - v10;
  __chkstk_darwin();
  uint64_t v13 = (char *)&v30 - v12;
  TVEpisode.previewArtwork.getter();
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v14(v5, 1, v6) == 1)
  {
    uint64_t v15 = v9;
    uint64_t v16 = (uint64_t)v30;
    outlined destroy of TaskPriority?((uint64_t)v5, (uint64_t *)&_s8MusicKit7ArtworkVSgMD_0);
    TVEpisode.artwork.getter();
    int v17 = v14(v3, 1, v6);
    uint64_t v18 = v31;
    if (v17 == 1)
    {
      outlined destroy of TaskPriority?((uint64_t)v3, (uint64_t *)&_s8MusicKit7ArtworkVSgMD_0);
      uint64_t v19 = type metadata accessor for ArtworkImage.ViewModel(0);
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
    }
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v28(v15, v3, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v15, v6);
    static Artwork.CropStyle.boundedBox.getter();
    uint64_t v29 = type metadata accessor for Artwork.CropStyle();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v16, 0, 1, v29);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
    v28(v18, v11, v6);
    uint64_t v25 = type metadata accessor for ArtworkImage.ViewModel(0);
    outlined init with take of Artwork.CropStyle?(v16, (uint64_t)&v18[*(int *)(v25 + 20)]);
    uint64_t v26 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56);
    uint64_t v27 = v18;
  }
  else
  {
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v21(v13, v5, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v13, v6);
    uint64_t v22 = (uint64_t)v30;
    static Artwork.CropStyle.boundedBox.getter();
    uint64_t v23 = type metadata accessor for Artwork.CropStyle();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 0, 1, v23);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    uint64_t v24 = v31;
    v21(v31, v11, v6);
    uint64_t v25 = type metadata accessor for ArtworkImage.ViewModel(0);
    outlined init with take of Artwork.CropStyle?(v22, (uint64_t)&v24[*(int *)(v25 + 20)]);
    uint64_t v26 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56);
    uint64_t v27 = v24;
  }
  return v26((uint64_t)v27, 0, 1, v25);
}

uint64_t protocol witness for ArtworkImageViewModelAttributeProviding.artwork.getter in conformance TVShow()
{
  return TVShow.artwork.getter();
}

uint64_t protocol witness for ArtworkImageViewModelProviding.artworkViewModel.getter in conformance TVShow@<X0>(char *a1@<X8>)
{
  return specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&TVShow.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t protocol witness for ArtworkImageViewModelAttributeProviding.artwork.getter in conformance TVSeason()
{
  return TVSeason.artwork.getter();
}

uint64_t protocol witness for ArtworkImageViewModelProviding.artworkViewModel.getter in conformance TVSeason@<X0>(char *a1@<X8>)
{
  return specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&TVSeason.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t protocol witness for ArtworkImageViewModelAttributeProviding.artwork.getter in conformance UploadedVideo()
{
  return UploadedVideo.artwork.getter();
}

uint64_t protocol witness for ArtworkImageViewModelProviding.artworkViewModel.getter in conformance UploadedVideo@<X0>(char *a1@<X8>)
{
  return specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&UploadedVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t protocol witness for ArtworkImageViewModelAttributeProviding.artwork.getter in conformance UploadedAudio()
{
  return UploadedAudio.artwork.getter();
}

uint64_t protocol witness for ArtworkImageViewModelProviding.artworkViewModel.getter in conformance UploadedAudio@<X0>(char *a1@<X8>)
{
  return specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&UploadedAudio.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t SocialProfile.cropStyle.getter@<X0>(uint64_t a1@<X8>)
{
  static Artwork.CropStyle.specificRectangle.getter();
  uint64_t v2 = type metadata accessor for Artwork.CropStyle();
  uint64_t v3 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 0, 1, v2);
}

uint64_t protocol witness for ArtworkImageViewModelAttributeProviding.artwork.getter in conformance UserProfile()
{
  return UserProfile.artwork.getter();
}

uint64_t protocol witness for ArtworkImageViewModelProviding.artworkViewModel.getter in conformance UserProfile@<X0>(char *a1@<X8>)
{
  return specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&UserProfile.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.specificRectangle.getter, a1);
}

uint64_t protocol witness for ArtworkImageViewModelAttributeProviding.artwork.getter in conformance CreditArtist()
{
  return CreditArtist.artwork.getter();
}

uint64_t protocol witness for ArtworkImageViewModelAttributeProviding.cropStyle.getter in conformance Album@<X0>(void (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  a1();
  uint64_t v3 = type metadata accessor for Artwork.CropStyle();
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 0, 1, v3);
}

uint64_t protocol witness for ArtworkImageViewModelProviding.artworkViewModel.getter in conformance CreditArtist@<X0>(char *a1@<X8>)
{
  return specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&CreditArtist.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
}

uint64_t Track.artworkViewModel.getter@<X0>(char *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for MusicVideo();
  uint64_t v20 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Song();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin();
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Track();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v2, v11);
  int v15 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v14, v11);
  if (v15 == enum case for Track.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v14, v7);
    specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&Song.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else if (v15 == enum case for Track.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
    uint64_t v17 = v20;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v6, v14, v4);
    specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&MusicVideo.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v4);
  }
  else
  {
    uint64_t v18 = type metadata accessor for ArtworkImage.ViewModel(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a1, 1, 1, v18);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t GenericMusicItem.artworkViewModel.getter@<X0>(char *a1@<X8>)
{
  uint64_t v117 = a1;
  uint64_t v1 = type metadata accessor for CreditArtist();
  uint64_t v115 = *(void *)(v1 - 8);
  uint64_t v116 = v1;
  __chkstk_darwin();
  uint64_t v114 = (char *)&v63 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for SocialProfile();
  uint64_t v88 = *(void *)(v89 - 8);
  __chkstk_darwin();
  uint64_t v87 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for UploadedVideo();
  uint64_t v67 = *(void *)(v68 - 8);
  __chkstk_darwin();
  uint64_t v66 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for UploadedAudio();
  uint64_t v70 = *(void *)(v71 - 8);
  __chkstk_darwin();
  uint64_t v69 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for TVShow();
  uint64_t v73 = *(void *)(v74 - 8);
  __chkstk_darwin();
  long long v72 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for TVSeason();
  uint64_t v76 = *(void *)(v77 - 8);
  __chkstk_darwin();
  uint64_t v75 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for TVEpisode();
  uint64_t v79 = *(void *)(v80 - 8);
  __chkstk_darwin();
  id v78 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for RecordLabel();
  uint64_t v91 = *(void *)(v92 - 8);
  __chkstk_darwin();
  int v90 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for RadioShow();
  uint64_t v94 = *(void *)(v95 - 8);
  __chkstk_darwin();
  uint64_t v93 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for Station();
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin();
  uint64_t v81 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for Song();
  uint64_t v85 = *(void *)(v86 - 8);
  __chkstk_darwin();
  id v84 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for Playlist();
  uint64_t v97 = *(void *)(v98 - 8);
  __chkstk_darwin();
  uint64_t v96 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for MusicVideo();
  uint64_t v100 = *(void *)(v14 - 8);
  uint64_t v101 = v14;
  __chkstk_darwin();
  uint64_t v99 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for MusicMovie();
  uint64_t v103 = *(void *)(v16 - 8);
  uint64_t v104 = v16;
  __chkstk_darwin();
  uint64_t v102 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Genre();
  uint64_t v106 = *(void *)(v18 - 8);
  uint64_t v107 = v18;
  __chkstk_darwin();
  uint64_t v105 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for EditorialItem();
  uint64_t v109 = *(void *)(v20 - 8);
  uint64_t v110 = v20;
  __chkstk_darwin();
  Class v108 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Curator();
  uint64_t v112 = *(void *)(v22 - 8);
  uint64_t v113 = v22;
  __chkstk_darwin();
  uint64_t v111 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Artist();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin();
  uint64_t v27 = (char *)&v63 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for Album();
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin();
  uint64_t v31 = (char *)&v63 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for GenericMusicItem();
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin();
  uint64_t v65 = (char *)&v63 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  BOOL v36 = (char *)&v63 - v35;
  int v64 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
  v64((char *)&v63 - v35, v118, v32);
  int v37 = (*(uint64_t (**)(char *, uint64_t))(v33 + 88))(v36, v32);
  if (v37 == enum case for GenericMusicItem.album(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v36, v32);
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v31, v36, v28);
    specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter((void (*)(uint64_t))&Album.artwork.getter, (void (*)(uint64_t))&static Artwork.CropStyle.boundedBox.getter, v117);
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v31, v28);
  }
  uint64_t v39 = v117;
  if (v37 == enum case for GenericMusicItem.artist(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v36, v32);
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v27, v36, v24);
    specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter(v39);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  }
  if (v37 == enum case for GenericMusicItem.composer(_:))
  {
    uint64_t v40 = type metadata accessor for ArtworkImage.ViewModel(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 1, 1, v40);
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v36, v32);
  }
  if (v37 == enum case for GenericMusicItem.creditArtist(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v36, v32);
    uint64_t v41 = v114;
    uint64_t v42 = v115;
    uint64_t v43 = v116;
    (*(void (**)(char *, char *, uint64_t))(v115 + 32))(v114, v36, v116);
    uint64_t v44 = &CreditArtist.artwork.getter;
LABEL_13:
    uint64_t v45 = (void (*)(uint64_t))v44;
    uint64_t v46 = &static Artwork.CropStyle.boundedBox.getter;
LABEL_14:
    specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter(v45, (void (*)(uint64_t))v46, v39);
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v41, v43);
  }
  if (v37 == enum case for GenericMusicItem.curator(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v36, v32);
    uint64_t v41 = v111;
    uint64_t v42 = v112;
    uint64_t v43 = v113;
    (*(void (**)(char *, char *, uint64_t))(v112 + 32))(v111, v36, v113);
    uint64_t v44 = &Curator.artwork.getter;
    goto LABEL_13;
  }
  if (v37 == enum case for GenericMusicItem.editorialItem(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v36, v32);
    uint64_t v41 = v108;
    uint64_t v42 = v109;
    uint64_t v43 = v110;
    (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v108, v36, v110);
    uint64_t v44 = &EditorialItem.artwork.getter;
    goto LABEL_13;
  }
  if (v37 == enum case for GenericMusicItem.genre(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v36, v32);
    uint64_t v48 = v105;
    uint64_t v47 = v106;
    uint64_t v49 = v107;
    (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v105, v36, v107);
    uint64_t v50 = &Genre.artwork.getter;
LABEL_22:
    id v51 = (void (*)(uint64_t))v50;
    id v52 = &static Artwork.CropStyle.boundedBox.getter;
LABEL_23:
    specialized ArtworkImageViewModelAttributeProviding.artworkViewModel.getter(v51, (void (*)(uint64_t))v52, v39);
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v48, v49);
  }
  if (v37 == enum case for GenericMusicItem.musicMovie(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v36, v32);
    uint64_t v48 = v102;
    uint64_t v47 = v103;
    uint64_t v49 = v104;
    (*(void (**)(char *, char *, uint64_t))(v103 + 32))(v102, v36, v104);
    uint64_t v50 = &MusicMovie.artwork.getter;
    goto LABEL_22;
  }
  if (v37 == enum case for GenericMusicItem.musicVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v36, v32);
    uint64_t v48 = v99;
    uint64_t v47 = v100;
    uint64_t v49 = v101;
    (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v99, v36, v101);
    uint64_t v50 = &MusicVideo.artwork.getter;
    goto LABEL_22;
  }
  if (v37 == enum case for GenericMusicItem.playlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v36, v32);
    uint64_t v47 = v97;
    uint64_t v48 = v96;
    uint64_t v49 = v98;
    (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v96, v36, v98);
    Playlist.artworkViewModel.getter((uint64_t)v39);
    return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v48, v49);
  }
  if (v37 == enum case for GenericMusicItem.radioShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v36, v32);
    uint64_t v47 = v94;
    uint64_t v48 = v93;
    uint64_t v49 = v95;
    (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v93, v36, v95);
    uint64_t v50 = &RadioShow.artwork.getter;
    goto LABEL_22;
  }
  if (v37 == enum case for GenericMusicItem.recordLabel(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v36, v32);
    uint64_t v47 = v91;
    uint64_t v48 = v90;
    uint64_t v49 = v92;
    (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v90, v36, v92);
    uint64_t v50 = &RecordLabel.artwork.getter;
    goto LABEL_22;
  }
  if (v37 == enum case for GenericMusicItem.socialProfile(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v36, v32);
    uint64_t v47 = v88;
    uint64_t v48 = v87;
    uint64_t v49 = v89;
    (*(void (**)(char *, char *, uint64_t))(v88 + 32))(v87, v36, v89);
    id v51 = (void (*)(uint64_t))&SocialProfile.artwork.getter;
    id v52 = &static Artwork.CropStyle.specificRectangle.getter;
    goto LABEL_23;
  }
  if (v37 == enum case for GenericMusicItem.song(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v36, v32);
    uint64_t v47 = v85;
    uint64_t v48 = v84;
    uint64_t v49 = v86;
    (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v84, v36, v86);
    uint64_t v50 = &Song.artwork.getter;
    goto LABEL_22;
  }
  if (v37 == enum case for GenericMusicItem.station(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v36, v32);
    uint64_t v42 = v82;
    uint64_t v41 = v81;
    uint64_t v43 = v83;
    (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v81, v36, v83);
    uint64_t v45 = (void (*)(uint64_t))&Station.artwork.getter;
    uint64_t v46 = &static Artwork.CropStyle.specificRectangle.getter;
    goto LABEL_14;
  }
  if (v37 == enum case for GenericMusicItem.tvEpisode(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v36, v32);
    uint64_t v42 = v79;
    uint64_t v41 = v78;
    uint64_t v43 = v80;
    (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v78, v36, v80);
    TVEpisode.artworkViewModel.getter(v39);
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v41, v43);
  }
  if (v37 == enum case for GenericMusicItem.tvSeason(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v36, v32);
    uint64_t v42 = v76;
    uint64_t v41 = v75;
    uint64_t v43 = v77;
    (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v75, v36, v77);
    uint64_t v44 = &TVSeason.artwork.getter;
    goto LABEL_13;
  }
  if (v37 == enum case for GenericMusicItem.tvShow(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v36, v32);
    uint64_t v42 = v73;
    uint64_t v41 = v72;
    uint64_t v43 = v74;
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v72, v36, v74);
    uint64_t v44 = &TVShow.artwork.getter;
    goto LABEL_13;
  }
  if (v37 == enum case for GenericMusicItem.uploadedAudio(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v36, v32);
    uint64_t v42 = v70;
    uint64_t v41 = v69;
    uint64_t v43 = v71;
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v69, v36, v71);
    uint64_t v44 = &UploadedAudio.artwork.getter;
    goto LABEL_13;
  }
  if (v37 == enum case for GenericMusicItem.uploadedVideo(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v36, v32);
    uint64_t v42 = v67;
    uint64_t v41 = v66;
    uint64_t v43 = v68;
    (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v66, v36, v68);
    uint64_t v44 = &UploadedVideo.artwork.getter;
    goto LABEL_13;
  }
  if (v37 == enum case for GenericMusicItem.other(_:))
  {
    (*(void (**)(char *, uint64_t))(v33 + 96))(v36, v32);
    swift_bridgeObjectRelease();
    uint64_t v53 = type metadata accessor for ArtworkImage.ViewModel(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v39, 1, 1, v53);
  }
  else
  {
    if (one-time initialization token for artwork != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    __swift_project_value_buffer(v54, (uint64_t)static Logger.artwork);
    v64(v65, v118, v32);
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = swift_slowAlloc();
      uint64_t v118 = swift_slowAlloc();
      uint64_t v119 = v118;
      *(_DWORD *)uint64_t v57 = 136315394;
      *(void *)(v57 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(0xD000000000000010, 0x8000000100472AE0, &v119);
      *(_WORD *)(v57 + 12) = 2080;
      lazy protocol witness table accessor for type GenericMusicItem and conformance GenericMusicItem();
      uint64_t v58 = v65;
      uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v57 + 14) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v59, v60, &v119);
      swift_bridgeObjectRelease();
      uint64_t v61 = *(void (**)(char *, uint64_t))(v33 + 8);
      v61(v58, v32);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Unhandled case for %s: %s", (uint8_t *)v57, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v61 = *(void (**)(char *, uint64_t))(v33 + 8);
      v61(v65, v32);
    }

    uint64_t v62 = type metadata accessor for ArtworkImage.ViewModel(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v39, 1, 1, v62);
    return ((uint64_t (*)(char *, uint64_t))v61)(v36, v32);
  }
}

uint64_t ArtworkImage.ViewModel.image(for:)(double a1, double a2)
{
  *(void *)(v3 + 32) = v2;
  *(double *)(v3 + 16) = a1;
  *(double *)(v3 + 24) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&_s8MusicKit7ArtworkV0aB8InternalE9CropStyleVSgMD_0);
  *(void *)(v3 + 40) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Artwork.CropStyle();
  *(void *)(v3 + 48) = v4;
  *(void *)(v3 + 56) = *(void *)(v4 - 8);
  *(void *)(v3 + 64) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Artwork();
  *(void *)(v3 + 72) = v5;
  *(void *)(v3 + 80) = *(void *)(v5 - 8);
  *(void *)(v3 + 88) = swift_task_alloc();
  return _swift_task_switch(ArtworkImage.ViewModel.image(for:), 0, 0);
}

uint64_t ArtworkImage.ViewModel.image(for:)()
{
  uint64_t v1 = *((void *)v0 + 6);
  uint64_t v2 = *((void *)v0 + 7);
  uint64_t v4 = *((void *)v0 + 4);
  uint64_t v3 = *((void *)v0 + 5);
  (*(void (**)(void, uint64_t, void))(*((void *)v0 + 10) + 16))(*((void *)v0 + 11), v4, *((void *)v0 + 9));
  uint64_t v5 = type metadata accessor for ArtworkImage.ViewModel(0);
  outlined init with copy of (String, Any)(v4 + *(int *)(v5 + 20), v3, &_s8MusicKit7ArtworkV0aB8InternalE9CropStyleVSgMD_0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    if (one-time initialization token for fallback != -1) {
      swift_once();
    }
    uint64_t v7 = *((void *)v0 + 7);
    uint64_t v6 = *((void *)v0 + 8);
    uint64_t v9 = *((void *)v0 + 5);
    uint64_t v8 = *((void *)v0 + 6);
    uint64_t v10 = __swift_project_value_buffer(v8, (uint64_t)static Artwork.CropStyle.fallback);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v10, v8);
    outlined destroy of TaskPriority?(v9, &_s8MusicKit7ArtworkV0aB8InternalE9CropStyleVSgMD_0);
  }
  else
  {
    (*(void (**)(void, void, void))(*((void *)v0 + 7) + 32))(*((void *)v0 + 8), *((void *)v0 + 5), *((void *)v0 + 6));
  }
  if (one-time initialization token for fallback != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Artwork.ImageFormat();
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)static Artwork.ImageFormat.fallback);
  uint64_t v13 = (void *)swift_task_alloc();
  *((void *)v0 + 12) = v13;
  *uint64_t v13 = v0;
  v13[1] = ArtworkImage.ViewModel.image(for:);
  uint64_t v14 = *((void *)v0 + 8);
  double v15 = v0[2];
  double v16 = v0[3];
  return Artwork.image(for:cropStyle:format:)(v14, v12, v15, v16);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ArtworkImage.ViewModel.image(for:)(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v5 = (void *)*v2;
  v4[13] = v1;
  swift_task_dealloc();
  uint64_t v6 = v4[11];
  uint64_t v7 = v4[10];
  uint64_t v8 = v4[9];
  uint64_t v9 = v4[7];
  uint64_t v10 = v4[6];
  if (v1)
  {
    (*(void (**)(void, uint64_t))(v9 + 8))(v4[8], v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    return _swift_task_switch(ArtworkImage.ViewModel.image(for:), 0, 0);
  }
  else
  {
    (*(void (**)(void, uint64_t))(v9 + 8))(v4[8], v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(uint64_t))v5[1];
    return v11(a1);
  }
}

uint64_t Artwork.image(for:cropStyle:format:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(void *)(v5 + 40) = a2;
  *(void *)(v5 + 48) = v4;
  *(void *)(v5 + 32) = a1;
  *(double *)(v5 + 16) = a3;
  *(double *)(v5 + 24) = a4;
  __swift_instantiateConcreteTypeFromMangledName(&_s8MusicKit7ArtworkV0aB8InternalE11ImageFormatOSgMD_0);
  *(void *)(v5 + 56) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&_s8MusicKit7ArtworkV0aB8InternalE9CropStyleVSgMD_0);
  *(void *)(v5 + 64) = swift_task_alloc();
  return _swift_task_switch(Artwork.image(for:cropStyle:format:), 0, 0);
}

uint64_t Artwork.image(for:cropStyle:format:)()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  id v5 = [self currentTraitCollection];
  [v5 displayScale];
  double v7 = v6;

  uint64_t v8 = type metadata accessor for Artwork.CropStyle();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v2, v4, v8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v2, 0, 1, v8);
  uint64_t v10 = type metadata accessor for Artwork.ImageFormat();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v1, v3, v10);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v1, 0, 1, v10);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[9] = v12;
  *uint64_t v12 = v0;
  v12[1] = Artwork.image(for:cropStyle:format:);
  uint64_t v14 = v0[7];
  uint64_t v15 = v0[8];
  v16.n128_u64[0] = v0[2];
  v17.n128_u64[0] = v0[3];
  v13.n128_f64[0] = 1.0 / v7;
  return Artwork.image(width:height:pixelLength:cropStyle:format:cacheOwner:)(v15, v14, 0, 0, v16, v17, v13);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t Artwork.image(for:cropStyle:format:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v4 + 64);
  outlined destroy of TaskPriority?(*(void *)(v4 + 56), &_s8MusicKit7ArtworkV0aB8InternalE11ImageFormatOSgMD_0);
  outlined destroy of TaskPriority?(v6, &_s8MusicKit7ArtworkV0aB8InternalE9CropStyleVSgMD_0);
  if (v1)
  {
    return _swift_task_switch(Artwork.image(for:cropStyle:format:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    double v7 = *(uint64_t (**)(uint64_t))(v5 + 8);
    return v7(a1);
  }
}

uint64_t protocol witness for ArtworkImageFetching.image(for:) in conformance ArtworkImage.ViewModel(double a1, double a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = static SharedListening.buildSharedSession(with:);
  return ArtworkImage.ViewModel.image(for:)(a1, a2);
}

uint64_t ArtworkImageFetching<>.image(for:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(void *)(v5 + 40) = a2;
  *(void *)(v5 + 48) = v4;
  *(void *)(v5 + 32) = a1;
  *(double *)(v5 + 16) = a3;
  *(double *)(v5 + 24) = a4;
  __swift_instantiateConcreteTypeFromMangledName(&_s8MusicKit7ArtworkV0aB8InternalE9CropStyleVSgMD_0);
  *(void *)(v5 + 56) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Artwork.CropStyle();
  *(void *)(v5 + 64) = v6;
  *(void *)(v5 + 72) = *(void *)(v6 - 8);
  *(void *)(v5 + 80) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Artwork();
  *(void *)(v5 + 88) = v7;
  *(void *)(v5 + 96) = *(void *)(v7 - 8);
  *(void *)(v5 + 104) = swift_task_alloc();
  return _swift_task_switch(ArtworkImageFetching<>.image(for:), 0, 0);
}

uint64_t ArtworkImageFetching<>.image(for:)()
{
  uint64_t v1 = *((void *)v0 + 8);
  uint64_t v2 = *((void *)v0 + 9);
  uint64_t v3 = *((void *)v0 + 7);
  uint64_t v5 = *((void *)v0 + 4);
  uint64_t v4 = *((void *)v0 + 5);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v4);
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v5, v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    if (one-time initialization token for fallback != -1) {
      swift_once();
    }
    uint64_t v7 = *((void *)v0 + 9);
    uint64_t v6 = *((void *)v0 + 10);
    uint64_t v9 = *((void *)v0 + 7);
    uint64_t v8 = *((void *)v0 + 8);
    uint64_t v10 = __swift_project_value_buffer(v8, (uint64_t)static Artwork.CropStyle.fallback);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v10, v8);
    outlined destroy of TaskPriority?(v9, &_s8MusicKit7ArtworkV0aB8InternalE9CropStyleVSgMD_0);
  }
  else
  {
    (*(void (**)(void, void, void))(*((void *)v0 + 9) + 32))(*((void *)v0 + 10), *((void *)v0 + 7), *((void *)v0 + 8));
  }
  if (one-time initialization token for fallback != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Artwork.ImageFormat();
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)static Artwork.ImageFormat.fallback);
  __n128 v13 = (void *)swift_task_alloc();
  *((void *)v0 + 14) = v13;
  *__n128 v13 = v0;
  v13[1] = ArtworkImageFetching<>.image(for:);
  uint64_t v14 = *((void *)v0 + 10);
  double v15 = v0[2];
  double v16 = v0[3];
  return Artwork.image(for:cropStyle:format:)(v14, v12, v15, v16);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ArtworkImageFetching<>.image(for:)(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v5 = (void *)*v2;
  v4[15] = v1;
  swift_task_dealloc();
  uint64_t v6 = v4[13];
  uint64_t v7 = v4[12];
  uint64_t v8 = v4[11];
  uint64_t v9 = v4[9];
  uint64_t v10 = v4[8];
  if (v1)
  {
    (*(void (**)(void, uint64_t))(v9 + 8))(v4[10], v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    return _swift_task_switch(ArtworkImageFetching<>.image(for:), 0, 0);
  }
  else
  {
    (*(void (**)(void, uint64_t))(v9 + 8))(v4[10], v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(uint64_t))v5[1];
    return v11(a1);
  }
}

uint64_t _s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU__1(void *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  unint64_t v8 = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v6, v7, a3);
  uint64_t v9 = (void *)*a1;
  *(void *)*a1 = v8;
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v9 + 1;
  return result;
}

unint64_t _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6 = _ss11_StringGutsV16_deconstructUTF87scratchyXlSg5owner_xSi6lengthSb11usesScratchSb15allocatedMemorytSwSg_ts8_PointerRzlFSV_Tgq5_2(v12, 0, 0, 1, a1, a2);
  unint64_t v7 = v12[0];
  if (v6)
  {
    unint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v12);
  return v7;
}

unint64_t _ss11_StringGutsV16_deconstructUTF87scratchyXlSg5owner_xSi6lengthSb11usesScratchSb15allocatedMemorytSwSg_ts8_PointerRzlFSV_Tgq5_2(unint64_t *a1, void *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v10 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v10)
        {
          v12[0] = a5;
          v12[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          memcpy(__dst, v12, HIBYTE(a6) & 0xF);
          unint64_t result = 0;
          *((unsigned char *)__dst + v10) = 0;
          *a1 = (unint64_t)__dst;
          return result;
        }
      }
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    unint64_t result = (unint64_t)_ss11_StringGutsV23_allocateForDeconstructyXl5owner_SVSi6lengthtyF_2(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    unint64_t result = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    unint64_t result = _StringObject.sharedUTF8.getter();
    if (!result)
    {
      __break(1u);
      return result;
    }
  }
  *a1 = result;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

char *_ss11_StringGutsV23_allocateForDeconstructyXl5owner_SVSi6lengthtyF_2(uint64_t a1, unint64_t a2)
{
  New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_2 = (char *)_ss32_copyCollectionToContiguousArrayys0dE0Vy7ElementQzGxSlRzlFSS8UTF8ViewV_Tgq5_2(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_2 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_2(0, *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_2+ 2)+ 1, 1, New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_2);
  }
  unint64_t v4 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_2 + 2);
  unint64_t v3 = *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_2 + 3);
  if (v4 >= v3 >> 1) {
    New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_2 = _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_2((char *)(v3 > 1), v4 + 1, 1, New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_2);
  }
  *((void *)New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_2 + 2) = v4 + 1;
  New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_2[v4 + 32] = 0;
  return New14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_2;
}

void *_ss32_copyCollectionToContiguousArrayys0dE0Vy7ElementQzGxSlRzlFSS8UTF8ViewV_Tgq5_2(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_9;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = _ss22_ContiguousArrayBufferV19_uninitializedCount15minimumCapacityAByxGSi_SitcfCs5UInt8V_Tgmq5_2(v2, 0);
      unint64_t result = (void *)_StringGuts.copyUTF8(into:)();
      if (v5) {
        break;
      }
      if (result == (void *)v2) {
        return v3;
      }
      __break(1u);
LABEL_9:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

char *_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFs5UInt8V_Tgq5_2(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCys5UInt8VGMD_2);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t lazy protocol witness table accessor for type GenericMusicItem and conformance GenericMusicItem()
{
  unint64_t result = _s16MusicKitInternal07GenericA4ItemOACs23CustomStringConvertibleAAWL_0;
  if (!_s16MusicKitInternal07GenericA4ItemOACs23CustomStringConvertibleAAWL_0)
  {
    type metadata accessor for GenericMusicItem();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&_s16MusicKitInternal07GenericA4ItemOACs23CustomStringConvertibleAAWL_0);
  }
  return result;
}

Swift::Bool __swiftcall Text.StringOption.evaluate(_:)(Swift::String a1)
{
  uint64_t v1 = HIBYTE(a1._object) & 0xF;
  if (((uint64_t)a1._object & 0x2000000000000000) == 0) {
    uint64_t v1 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  return v1 != 0;
}

uint64_t Text.init(optional:options:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2
    && (swift_bridgeObjectRetain(),
        char v6 = specialized Sequence.first(where:)(a3, a1, a2),
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        (v6 & 1) != 0))
  {
    _sS2SSysWl_1();
    return Text.init<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t static Edge.Set.on(_:)()
{
  uint64_t v0 = Edge.Set.init(rawValue:)();
  unsigned __int8 v1 = static Axis.Set.horizontal.getter();
  Axis.Set.init(rawValue:)();
  if (Axis.Set.init(rawValue:)() == v1)
  {
    unsigned __int8 v2 = static Edge.Set.leading.getter();
    unsigned __int8 v3 = static Edge.Set.trailing.getter();
    unsigned __int8 v4 = Edge.Set.init(rawValue:)();
    Edge.Set.init(rawValue:)();
    if (Edge.Set.init(rawValue:)() != v2) {
      unsigned __int8 v4 = Edge.Set.init(rawValue:)();
    }
    Edge.Set.init(rawValue:)();
    if (Edge.Set.init(rawValue:)() != v3) {
      unsigned __int8 v4 = Edge.Set.init(rawValue:)();
    }
    Edge.Set.init(rawValue:)();
    if (Edge.Set.init(rawValue:)() != v4) {
      uint64_t v0 = Edge.Set.init(rawValue:)();
    }
  }
  unsigned __int8 v5 = static Axis.Set.vertical.getter();
  Axis.Set.init(rawValue:)();
  if (Axis.Set.init(rawValue:)() != v5) {
    return v0;
  }
  unsigned __int8 v6 = static Edge.Set.top.getter();
  unsigned __int8 v7 = static Edge.Set.bottom.getter();
  unsigned __int8 v8 = Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v6) {
    unsigned __int8 v8 = Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v7) {
    unsigned __int8 v8 = Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() == v8) {
    return v0;
  }

  return Edge.Set.init(rawValue:)();
}

double EdgeInsets.init(_:length:)(char a1, double a2)
{
  if (a1) {
    static Axis.Set.vertical.getter();
  }
  else {
    static Axis.Set.horizontal.getter();
  }
  static Edge.Set.on(_:)();

  return specialized EdgeInsets.init(_:length:)(a2);
}

double EdgeInsets.init(_:length:)(double a1)
{
  static Edge.Set.on(_:)();

  return specialized EdgeInsets.init(_:length:)(a1);
}

double EdgeInsets.init(horizontal:vertical:)(double a1, double a2)
{
  return a2;
}

void EdgeInsets.affecting(_:)(uint64_t a1)
{
  static Edge.Set.all.getter();
  specialized EdgeInsets.init(_:length:)(0.0);
  int64_t v2 = 0;
  uint64_t v3 = a1 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    while (v6)
      v6 &= v6 - 1;
    int64_t v8 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v8 >= v7) {
      return;
    }
    uint64_t v9 = *(void *)(v3 + 8 * v8);
    ++v2;
    if (!v9)
    {
      int64_t v2 = v8 + 1;
      if (v8 + 1 >= v7) {
        return;
      }
      uint64_t v9 = *(void *)(v3 + 8 * v2);
      if (!v9)
      {
        int64_t v2 = v8 + 2;
        if (v8 + 2 >= v7) {
          return;
        }
        uint64_t v9 = *(void *)(v3 + 8 * v2);
        if (!v9)
        {
          int64_t v2 = v8 + 3;
          if (v8 + 3 >= v7) {
            return;
          }
          uint64_t v9 = *(void *)(v3 + 8 * v2);
          if (!v9)
          {
            int64_t v2 = v8 + 4;
            if (v8 + 4 >= v7) {
              return;
            }
            uint64_t v9 = *(void *)(v3 + 8 * v2);
            if (!v9) {
              break;
            }
          }
        }
      }
    }
LABEL_23:
    uint64_t v6 = (v9 - 1) & v9;
  }
  int64_t v10 = v8 + 5;
  if (v10 >= v7) {
    return;
  }
  uint64_t v9 = *(void *)(v3 + 8 * v10);
  if (v9)
  {
    int64_t v2 = v10;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v2 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v2 >= v7) {
      return;
    }
    uint64_t v9 = *(void *)(v3 + 8 * v2);
    ++v10;
    if (v9) {
      goto LABEL_23;
    }
  }
LABEL_26:
  __break(1u);
}

double EdgeInsets.affecting(_:)(char a1)
{
  char v1 = a1 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Axis>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100493400;
  *(unsigned char *)(inited + 32) = v1;
  Swift::Int v3 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  EdgeInsets.affecting(_:)(v3);
  double v5 = v4;
  swift_bridgeObjectRelease();
  return v5;
}

double EdgeInsets.value(for:)(char a1, double a2, double a3, double a4, double a5)
{
  double result = a2 + a4;
  double v6 = a3 + a5;
  if ((a1 & 1) == 0) {
    return v6;
  }
  return result;
}

double EdgeInsets.horizontal.getter(double a1, double a2, double a3, double a4)
{
  return a2 + a4;
}

double EdgeInsets.vertical.getter(double a1, double a2, double a3)
{
  return a1 + a3;
}

double one-time initialization function for zero()
{
  double result = 0.0;
  static EdgeInsets.zero = 0u;
  *(_OWORD *)&qword_1005ADD88 = 0u;
  return result;
}

{
  double result;

  double result = 0.0;
  static VerticalToggleSlider.ShapeChange.zero = 0u;
  *(_OWORD *)&qword_100584EE8 = 0u;
  return result;
}

long long *EdgeInsets.zero.unsafeMutableAddressor()
{
  if (one-time initialization token for zero != -1) {
    swift_once();
  }
  return &static EdgeInsets.zero;
}

double static EdgeInsets.zero.getter()
{
  if (one-time initialization token for zero != -1) {
    swift_once();
  }
  return *(double *)&static EdgeInsets.zero;
}

double CGSize.length(for:)(char a1, double a2, double a3)
{
  if (a1) {
    return a3;
  }
  return result;
}

BOOL CGSize.fitsWithin(_:)(double a1, double a2, double a3, double a4)
{
  return a4 <= a2 && a3 <= a1;
}

BOOL Axis.orthogonal.getter(char a1)
{
  return (a1 & 1) == 0;
}

uint64_t Axis.isOrthogonal(to:)(char a1, char a2)
{
  if (a2)
  {
    if ((a1 & 1) == 0) {
      return 1;
    }
  }
  else if (a1)
  {
    return 1;
  }
  return 0;
}

uint64_t Optional<A>.isOrthogonal(to:)(char a1, char a2)
{
  if (a2 == 2) {
    return 1;
  }
  if (a2)
  {
    if ((a1 & 1) == 0) {
      return 1;
    }
  }
  else if (a1)
  {
    return 1;
  }
  return 0;
}

uint64_t Axis.Set.init(_:)(char a1)
{
  if (a1) {
    return static Axis.Set.vertical.getter();
  }
  else {
    return static Axis.Set.horizontal.getter();
  }
}

uint64_t View.always(perform:)@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  a1();
  double v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16);

  return v6(a3, v3, a2);
}

double DynamicTypeSize.scaledValue(_:relativeTo:)(uint64_t a1, double a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DynamicTypeSize?);
  __chkstk_darwin();
  double v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [objc_allocWithZone((Class)UIFontMetrics) initForTextStyle:a1];
  uint64_t v8 = type metadata accessor for DynamicTypeSize();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v6, v2, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  int64_t v10 = (void *)UIContentSizeCategory.init(_:)();
  id v11 = [self traitCollectionWithPreferredContentSizeCategory:v10];
  [v7 scaledValueForValue:v11 compatibleWithTraitCollection:a2];
  double v13 = v12;

  return v13;
}

uint64_t static Color.random(opacity:)()
{
  uint64_t v0 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001uLL);
  specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001uLL);
  specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001uLL);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for Color.RGBColorSpace.sRGB(_:), v0);
  return Color.init(_:red:green:blue:opacity:)();
}

uint64_t RoundedRectangle.outset(horizontal:vertical:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for LayoutDirection();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  id v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  double v13 = (char *)&v21 - v12;
  type metadata accessor for RoundedRectangle();
  __chkstk_darwin();
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of RoundedRectangle(v4, (uint64_t)v15, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  uint64_t v16 = enum case for LayoutDirection.leftToRight(_:);
  __n128 v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
  v17(v13, enum case for LayoutDirection.leftToRight(_:), v8);
  outlined init with copy of RoundedRectangle((uint64_t)v15, a1, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  uint64_t v18 = (int *)type metadata accessor for RoundedRectangle.OmnidirectionalOutset();
  *(double *)(a1 + v18[5]) = a3;
  *(double *)(a1 + v18[6]) = a2;
  *(double *)(a1 + v18[7]) = a3;
  *(double *)(a1 + v18[8]) = a2;
  v17(v11, v16, v8);
  LOBYTE(v16) = static LayoutDirection.== infix(_:_:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19(v13, v8);
  outlined destroy of RoundedRectangle((uint64_t)v15);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v19)(v11, v8);
  *(void *)(a1 + v18[9]) = (v16 & 1) == 0;
  return result;
}

uint64_t RoundedRectangle.outset(top:leading:bottom:trailing:layoutDirection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v7 = v6;
  uint64_t v14 = type metadata accessor for LayoutDirection();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin();
  __n128 v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v19 = (char *)&v25 - v18;
  type metadata accessor for RoundedRectangle();
  __chkstk_darwin();
  uint64_t v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of RoundedRectangle(v7, (uint64_t)v21, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v19, a1, v14);
  outlined init with copy of RoundedRectangle((uint64_t)v21, a2, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  uint64_t v22 = (int *)type metadata accessor for RoundedRectangle.OmnidirectionalOutset();
  *(double *)(a2 + v22[5]) = a3;
  *(double *)(a2 + v22[6]) = a4;
  *(double *)(a2 + v22[7]) = a5;
  *(double *)(a2 + v22[8]) = a6;
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, enum case for LayoutDirection.leftToRight(_:), v14);
  LOBYTE(v7) = static LayoutDirection.== infix(_:_:)();
  uint64_t v23 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23(v19, v14);
  outlined destroy of RoundedRectangle((uint64_t)v21);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v23)(v17, v14);
  *(void *)(a2 + v22[9]) = (v7 & 1) == 0;
  return result;
}

double protocol witness for InsettableShape.inset(by:) in conformance RoundedRectangle.OmnidirectionalOutset@<D0>(int *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v5 = v3;
  outlined init with copy of RoundedRectangle(v5, a2, (uint64_t (*)(void))type metadata accessor for RoundedRectangle.OmnidirectionalOutset);
  uint64_t v8 = a1[6];
  *(double *)(a2 + a1[5]) = *(double *)(a2 + a1[5]) - a3;
  *(double *)(a2 + v8) = *(double *)(a2 + v8) - a3;
  uint64_t v9 = a1[8];
  *(double *)(a2 + a1[7]) = *(double *)(a2 + a1[7]) - a3;
  double result = *(double *)(a2 + v9) - a3;
  *(double *)(a2 + v9) = result;
  return result;
}

double protocol witness for Shape.path(in:) in conformance RoundedRectangle.OmnidirectionalOutset@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RoundedCornerStyle();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin();
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGRect.outset(by:for:)();
  outlined init with copy of RoundedRectangle(v2, (uint64_t)v10, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, &v10[*(int *)(v8 + 28)], v4);
  Path.init(roundedRect:cornerSize:style:)();
  double result = *(double *)&v14;
  long long v12 = v15;
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v12;
  *(unsigned char *)(a1 + 32) = v16;
  return result;
}

uint64_t protocol witness for static Shape.role.getter in conformance RoundedRectangle.OmnidirectionalOutset()
{
  return static Shape.role.getter();
}

uint64_t protocol witness for Shape.layoutDirectionBehavior.getter in conformance RoundedRectangle.OmnidirectionalOutset()
{
  return Shape.layoutDirectionBehavior.getter();
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance RoundedRectangle.OmnidirectionalOutset()
{
  return Shape.sizeThatFits(_:)();
}

void (*protocol witness for Animatable.animatableData.modify in conformance RoundedRectangle.OmnidirectionalOutset(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return protocol witness for MusicUIContentView.typedConfiguration.modify in conformance Artwork.Placeholder.View;
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance RoundedRectangle.OmnidirectionalOutset()
{
  return static Animatable<>._makeAnimatable(value:inputs:)();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance RoundedRectangle.OmnidirectionalOutset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type RoundedRectangle.OmnidirectionalOutset and conformance RoundedRectangle.OmnidirectionalOutset(&lazy protocol witness table cache variable for type RoundedRectangle.OmnidirectionalOutset and conformance RoundedRectangle.OmnidirectionalOutset, (void (*)(uint64_t))type metadata accessor for RoundedRectangle.OmnidirectionalOutset);

  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance RoundedRectangle.OmnidirectionalOutset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type RoundedRectangle.OmnidirectionalOutset and conformance RoundedRectangle.OmnidirectionalOutset(&lazy protocol witness table cache variable for type RoundedRectangle.OmnidirectionalOutset and conformance RoundedRectangle.OmnidirectionalOutset, (void (*)(uint64_t))type metadata accessor for RoundedRectangle.OmnidirectionalOutset);

  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t protocol witness for View.body.getter in conformance RoundedRectangle.OmnidirectionalOutset(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type RoundedRectangle.OmnidirectionalOutset and conformance RoundedRectangle.OmnidirectionalOutset(&lazy protocol witness table cache variable for type RoundedRectangle.OmnidirectionalOutset and conformance RoundedRectangle.OmnidirectionalOutset, (void (*)(uint64_t))type metadata accessor for RoundedRectangle.OmnidirectionalOutset);

  return Shape.body.getter(a1, v2);
}

uint64_t specialized Sequence.first(where:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int64_t v3 = 0;
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t result = a1 + 56;
  uint64_t v5 = v6;
  uint64_t v7 = 1 << *(unsigned char *)(result - 24);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  uint64_t v9 = v8 & v5;
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v11 = a2 & 0xFFFFFFFFFFFFLL;
  }
  while (1)
  {
    if (!v9)
    {
      int64_t v12 = v3 + 1;
      if (__OFADD__(v3, 1))
      {
        __break(1u);
        goto LABEL_27;
      }
      if (v12 >= v10) {
        return 1;
      }
      uint64_t v9 = *(void *)(result + 8 * v12);
      ++v3;
      if (!v9)
      {
        int64_t v3 = v12 + 1;
        if (v12 + 1 >= v10) {
          return 1;
        }
        uint64_t v9 = *(void *)(result + 8 * v3);
        if (!v9)
        {
          int64_t v3 = v12 + 2;
          if (v12 + 2 >= v10) {
            return 1;
          }
          uint64_t v9 = *(void *)(result + 8 * v3);
          if (!v9)
          {
            int64_t v3 = v12 + 3;
            if (v12 + 3 >= v10) {
              return 1;
            }
            uint64_t v9 = *(void *)(result + 8 * v3);
            if (!v9) {
              break;
            }
          }
        }
      }
    }
LABEL_7:
    v9 &= v9 - 1;
    if (!v11) {
      return 0;
    }
  }
  int64_t v13 = v12 + 4;
  if (v13 >= v10) {
    return 1;
  }
  uint64_t v9 = *(void *)(result + 8 * v13);
  if (v9)
  {
    int64_t v3 = v13;
    goto LABEL_7;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v10) {
      return 1;
    }
    uint64_t v9 = *(void *)(result + 8 * v3);
    ++v13;
    if (v9) {
      goto LABEL_7;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t _sS2SSysWl_1()
{
  unint64_t result = _sS2SSysWL_1;
  if (!_sS2SSysWL_1)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&_sS2SSysWL_1);
  }
  return result;
}

double specialized EdgeInsets.init(_:length:)(double a1)
{
  unsigned __int8 v2 = static Edge.Set.top.getter();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() == v2) {
    double v3 = a1;
  }
  else {
    double v3 = 0.0;
  }
  static Edge.Set.leading.getter();
  Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  static Edge.Set.bottom.getter();
  Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  static Edge.Set.trailing.getter();
  Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  return v3;
}

uint64_t type metadata accessor for RoundedRectangle.OmnidirectionalOutset()
{
  uint64_t result = type metadata singleton initialization cache for RoundedRectangle.OmnidirectionalOutset;
  if (!type metadata singleton initialization cache for RoundedRectangle.OmnidirectionalOutset) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined destroy of RoundedRectangle(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RoundedRectangle();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type Text.StringOption and conformance Text.StringOption()
{
  unint64_t result = lazy protocol witness table cache variable for type Text.StringOption and conformance Text.StringOption;
  if (!lazy protocol witness table cache variable for type Text.StringOption and conformance Text.StringOption)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Text.StringOption and conformance Text.StringOption);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Text.StringOption(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1002F3E80);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.StringOption()
{
  return &type metadata for Text.StringOption;
}

uint64_t sub_1002F3EB8()
{
  return lazy protocol witness table accessor for type RoundedRectangle.OmnidirectionalOutset and conformance RoundedRectangle.OmnidirectionalOutset(&lazy protocol witness table cache variable for type RoundedRectangle.OmnidirectionalOutset and conformance RoundedRectangle.OmnidirectionalOutset, (void (*)(uint64_t))type metadata accessor for RoundedRectangle.OmnidirectionalOutset);
}

uint64_t *initializeBufferWithCopyOfBuffer for RoundedRectangle.OmnidirectionalOutset(uint64_t *a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v7 = *(int *)(type metadata accessor for RoundedRectangle() + 20);
    uint64_t v8 = (char *)v4 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for RoundedCornerStyle();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[6];
    *(uint64_t *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)v4 + v11) = *(uint64_t *)((char *)a2 + v11);
    uint64_t v12 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v4 + v12) = *(uint64_t *)((char *)a2 + v12);
    *(uint64_t *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  }
  return v4;
}

uint64_t destroy for RoundedRectangle.OmnidirectionalOutset(uint64_t a1)
{
  uint64_t v1 = a1 + *(int *)(type metadata accessor for RoundedRectangle() + 20);
  uint64_t v2 = type metadata accessor for RoundedCornerStyle();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

_OWORD *initializeWithCopy for RoundedRectangle.OmnidirectionalOutset(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for RoundedRectangle() + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  uint64_t v11 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

void *assignWithCopy for RoundedRectangle.OmnidirectionalOutset(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(type metadata accessor for RoundedRectangle() + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

_OWORD *initializeWithTake for RoundedRectangle.OmnidirectionalOutset(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for RoundedRectangle() + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  uint64_t v11 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

_OWORD *assignWithTake for RoundedRectangle.OmnidirectionalOutset(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for RoundedRectangle() + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  uint64_t v11 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for RoundedRectangle.OmnidirectionalOutset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002F43D0);
}

uint64_t sub_1002F43D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoundedRectangle();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for RoundedRectangle.OmnidirectionalOutset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002F4450);
}

uint64_t sub_1002F4450(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoundedRectangle();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for RoundedRectangle.OmnidirectionalOutset()
{
  uint64_t result = type metadata accessor for RoundedRectangle();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeView<RoundedRectangle.OmnidirectionalOutset, ForegroundStyle> and conformance _ShapeView<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShapeView<RoundedRectangle.OmnidirectionalOutset, ForegroundStyle> and conformance _ShapeView<A, B>;
  if (!lazy protocol witness table cache variable for type _ShapeView<RoundedRectangle.OmnidirectionalOutset, ForegroundStyle> and conformance _ShapeView<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ShapeView<RoundedRectangle.OmnidirectionalOutset, ForegroundStyle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeView<RoundedRectangle.OmnidirectionalOutset, ForegroundStyle> and conformance _ShapeView<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EmptyAnimatableData and conformance EmptyAnimatableData()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData;
  if (!lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData);
  }
  return result;
}

uint64_t base witness table accessor for Animatable in RoundedRectangle.OmnidirectionalOutset()
{
  return lazy protocol witness table accessor for type RoundedRectangle.OmnidirectionalOutset and conformance RoundedRectangle.OmnidirectionalOutset(&lazy protocol witness table cache variable for type RoundedRectangle.OmnidirectionalOutset and conformance RoundedRectangle.OmnidirectionalOutset, (void (*)(uint64_t))type metadata accessor for RoundedRectangle.OmnidirectionalOutset);
}

uint64_t base witness table accessor for View in RoundedRectangle.OmnidirectionalOutset()
{
  return lazy protocol witness table accessor for type RoundedRectangle.OmnidirectionalOutset and conformance RoundedRectangle.OmnidirectionalOutset(&lazy protocol witness table cache variable for type RoundedRectangle.OmnidirectionalOutset and conformance RoundedRectangle.OmnidirectionalOutset, (void (*)(uint64_t))type metadata accessor for RoundedRectangle.OmnidirectionalOutset);
}

uint64_t base witness table accessor for Shape in RoundedRectangle.OmnidirectionalOutset()
{
  return lazy protocol witness table accessor for type RoundedRectangle.OmnidirectionalOutset and conformance RoundedRectangle.OmnidirectionalOutset(&lazy protocol witness table cache variable for type RoundedRectangle.OmnidirectionalOutset and conformance RoundedRectangle.OmnidirectionalOutset, (void (*)(uint64_t))type metadata accessor for RoundedRectangle.OmnidirectionalOutset);
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in RoundedRectangle.OmnidirectionalOutset()
{
  return lazy protocol witness table accessor for type RoundedRectangle.OmnidirectionalOutset and conformance RoundedRectangle.OmnidirectionalOutset(&lazy protocol witness table cache variable for type RoundedRectangle.OmnidirectionalOutset and conformance RoundedRectangle.OmnidirectionalOutset, (void (*)(uint64_t))type metadata accessor for RoundedRectangle.OmnidirectionalOutset);
}

uint64_t outlined init with copy of RoundedRectangle(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1)
{
}

{
  specialized Set.init(_nonEmptyArrayLiteral:)(a1, &demangling cache variable for type metadata for _SetStorage<SyncedLyricsLineView>, (void (*)(void))type metadata accessor for SyncedLyricsLineView);
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1, uint64_t *a2, void (*a3)(void))
{
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(a2);
      uint64_t v6 = (void *)static _SetStorage.allocate(capacity:)();
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v5) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v8) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v6 = &_swiftEmptySetSingleton;
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v5) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    return;
  }
LABEL_9:
  uint64_t v10 = (char *)(v6 + 7);
  uint64_t v46 = v8;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v13 = __OFADD__(v11++, 1);
      if (v13)
      {
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v14 = v12;
      Swift::Int v15 = NSObject._rawHashValue(seed:)(v6[5]);
      uint64_t v16 = -1 << *((unsigned char *)v6 + 32);
      unint64_t v17 = v15 & ~v16;
      unint64_t v18 = v17 >> 6;
      uint64_t v19 = *(void *)&v10[8 * (v17 >> 6)];
      uint64_t v20 = 1 << v17;
      if (((1 << v17) & v19) != 0)
      {
        a3(0);
        id v21 = *(id *)(v6[6] + 8 * v17);
        char v22 = static NSObject.== infix(_:_:)();

        if (v22)
        {
LABEL_11:
          swift_unknownObjectRelease();
          goto LABEL_12;
        }
        uint64_t v23 = ~v16;
        while (1)
        {
          unint64_t v17 = (v17 + 1) & v23;
          unint64_t v18 = v17 >> 6;
          uint64_t v19 = *(void *)&v10[8 * (v17 >> 6)];
          uint64_t v20 = 1 << v17;
          if ((v19 & (1 << v17)) == 0) {
            break;
          }
          id v24 = *(id *)(v6[6] + 8 * v17);
          char v25 = static NSObject.== infix(_:_:)();

          if (v25) {
            goto LABEL_11;
          }
        }
      }
      *(void *)&v10[8 * v18] = v20 | v19;
      *(void *)(v6[6] + 8 * v17) = v14;
      uint64_t v26 = v6[2];
      BOOL v13 = __OFADD__(v26, 1);
      uint64_t v27 = v26 + 1;
      if (v13) {
        goto LABEL_37;
      }
      void v6[2] = v27;
LABEL_12:
      if (v11 == v46) {
        return;
      }
    }
  }
  uint64_t v28 = 0;
  uint64_t v44 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v28 != v44)
  {
    Swift::Int v29 = v6[5];
    id v30 = *(id *)(a1 + 32 + 8 * v28);
    Swift::Int v31 = NSObject._rawHashValue(seed:)(v29);
    uint64_t v32 = -1 << *((unsigned char *)v6 + 32);
    unint64_t v33 = v31 & ~v32;
    unint64_t v34 = v33 >> 6;
    uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
    uint64_t v36 = 1 << v33;
    if (((1 << v33) & v35) != 0)
    {
      a3(0);
      id v37 = *(id *)(v6[6] + 8 * v33);
      char v38 = static NSObject.== infix(_:_:)();

      if (v38) {
        goto LABEL_23;
      }
      uint64_t v39 = ~v32;
      unint64_t v33 = (v33 + 1) & v39;
      unint64_t v34 = v33 >> 6;
      uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
      uint64_t v36 = 1 << v33;
      if ((v35 & (1 << v33)) != 0)
      {
        while (1)
        {
          id v40 = *(id *)(v6[6] + 8 * v33);
          char v41 = static NSObject.== infix(_:_:)();

          if (v41) {
            break;
          }
          unint64_t v33 = (v33 + 1) & v39;
          unint64_t v34 = v33 >> 6;
          uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
          uint64_t v36 = 1 << v33;
          if ((v35 & (1 << v33)) == 0) {
            goto LABEL_31;
          }
        }
LABEL_23:

        uint64_t v8 = v46;
        goto LABEL_24;
      }
LABEL_31:
      uint64_t v8 = v46;
    }
    *(void *)&v10[8 * v34] = v36 | v35;
    *(void *)(v6[6] + 8 * v33) = v30;
    uint64_t v42 = v6[2];
    BOOL v13 = __OFADD__(v42, 1);
    uint64_t v43 = v42 + 1;
    if (v13) {
      goto LABEL_38;
    }
    void v6[2] = v43;
LABEL_24:
    if (++v28 == v8) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

uint64_t lazy protocol witness table accessor for type RoundedRectangle.OmnidirectionalOutset and conformance RoundedRectangle.OmnidirectionalOutset(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t v4 = static _SetStorage.allocate(capacity:)();
    uint64_t v5 = 0;
    uint64_t v6 = v4 + 56;
    uint64_t v7 = a1 + 32;
    while (1)
    {
      Swift::UInt v8 = *(unsigned __int8 *)(v7 + v5);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v8);
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v6 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      uint64_t v15 = *(void *)(v4 + 48);
      if (((1 << v11) & v13) != 0)
      {
        if (*(unsigned __int8 *)(v15 + v11) == v8) {
          goto LABEL_3;
        }
        uint64_t v16 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v16;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v6 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          if (*(unsigned __int8 *)(v15 + v11) == v8) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v6 + 8 * v12) = v14 | v13;
      *(unsigned char *)(v15 + v11) = v8;
      uint64_t v17 = *(void *)(v4 + 16);
      BOOL v18 = __OFADD__(v17, 1);
      uint64_t v19 = v17 + 1;
      if (v18)
      {
        __break(1u);
        return result;
      }
      *(void *)(v4 + 16) = v19;
LABEL_3:
      if (++v5 == v2) {
        return v4;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

unint64_t type metadata accessor for MSVLyricsAgent()
{
  unint64_t result = lazy cache variable for type metadata for MSVLyricsAgent;
  if (!lazy cache variable for type metadata for MSVLyricsAgent)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MSVLyricsAgent);
  }
  return result;
}

unint64_t SymbolButton.Configuration.description.getter()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
  __chkstk_darwin();
  uint64_t v224 = (uint64_t)&v215 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v3 = (void *)type metadata accessor for UIView.Corner();
  uint64_t v225 = (void (**)(char *, uint64_t, id))*(v3 - 1);
  id v226 = v3;
  __chkstk_darwin();
  uint64_t v222 = (char *)&v215 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v223 = (char *)&v215 - v5;
  unint64_t v235 = 0xD00000000000001CLL;
  unint64_t v236 = 0x8000000100472B00;
  v229._uint64_t countAndFlagsBits = 0;
  v229._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v229._uint64_t countAndFlagsBits = 0xD000000000000017;
  v229._object = (void *)0x8000000100472B20;
  uint64_t v6 = (int *)type metadata accessor for SymbolButton.Configuration(0);
  v7._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 10;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  String.append(_:)(v229);
  swift_bridgeObjectRelease();
  v229._uint64_t countAndFlagsBits = 0;
  v229._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v229._uint64_t countAndFlagsBits = 0x6D756D696E696D20;
  v229._object = (void *)0xEF203A20657A6953;
  v9._uint64_t countAndFlagsBits = CGSize.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 10;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  String.append(_:)(v229);
  swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v0 + v6[14] + 16) & 1) == 0)
  {
    v229._uint64_t countAndFlagsBits = 0;
    v229._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v229._uint64_t countAndFlagsBits = 0xD000000000000014;
    v229._object = (void *)0x8000000100472EE0;
    v11._uint64_t countAndFlagsBits = CGSize.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 10;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    String.append(_:)(v229);
    swift_bridgeObjectRelease();
  }
  v229._uint64_t countAndFlagsBits = 0;
  v229._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  v234._uint64_t countAndFlagsBits = 0xD000000000000011;
  v234._object = (void *)0x8000000100472B40;
  uint64_t v13 = v0 + v6[15];
  long long v14 = *(_OWORD *)(v13 + 16);
  Swift::String v229 = *(Swift::String *)v13;
  long long v230 = v14;
  _sSo23NSDirectionalEdgeInsetsVMa_0(0);
  v15._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 10;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  String.append(_:)(v234);
  swift_bridgeObjectRelease();
  int v17 = *(unsigned __int8 *)(v0 + v6[19]);
  if (v17 == 2)
  {
    v18._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    v18._object = (void *)0x8000000100472B60;
    String.append(_:)(v18);
  }
  else
  {
    v229._uint64_t countAndFlagsBits = 0;
    v229._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    v229._uint64_t countAndFlagsBits = 0xD000000000000010;
    v229._object = (void *)0x8000000100472EC0;
    if (v17) {
      uint64_t v19 = 1702195828;
    }
    else {
      uint64_t v19 = 0x65736C6166;
    }
    if (v17) {
      unint64_t v20 = 0xE400000000000000;
    }
    else {
      unint64_t v20 = 0xE500000000000000;
    }
    unint64_t v21 = v20;
    String.append(_:)(*(Swift::String *)&v19);
    swift_bridgeObjectRelease();
    v22._uint64_t countAndFlagsBits = 10;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    String.append(_:)(v229);
    swift_bridgeObjectRelease();
  }
  v229._uint64_t countAndFlagsBits = 0x3A206168706C6120;
  v229._object = (void *)0xE900000000000020;
  v23._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 10;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  String.append(_:)(v229);
  swift_bridgeObjectRelease();
  v229._uint64_t countAndFlagsBits = 0x203A20746E697420;
  v229._object = (void *)0xE800000000000000;
  v228 = v6;
  v234._uint64_t countAndFlagsBits = *(void *)(v0 + v6[18]);
  id v25 = (id)v234._countAndFlagsBits;
  uint64_t v227 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIColor?);
  v26._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 10;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  String.append(_:)(v229);
  swift_bridgeObjectRelease();
  uint64_t v28 = *(void **)(v0 + 8);
  if (v28)
  {
    Swift::Int v29 = *(void **)(v0 + 16);
    id v30 = *(void **)(v0 + 24);
    char v31 = *(unsigned char *)(v0 + 40);
    uint64_t v32 = *(void *)(v0 + 48);
    uint64_t v219 = *(void *)(v0 + 56);
    uint64_t v217 = *(void *)(v0 + 64);
    uint64_t v216 = *(void **)(v0 + 72);
    LODWORD(v220) = *(unsigned __int8 *)(v0 + 80);
    unint64_t v33 = *(void **)(v0 + 96);
    uint64_t v218 = *(void *)(v0 + 88);
    id v221 = *(id *)(v0 + 112);
    uint64_t v34 = *(void *)v0;
    swift_bridgeObjectRetain();
    v35._uint64_t countAndFlagsBits = 0x6D7953209480E220;
    v35._object = (void *)0xAE000A7B206C6F62;
    String.append(_:)(v35);
    v229._uint64_t countAndFlagsBits = 0x656D616E20202020;
    v229._object = (void *)0xEB00000000203A20;
    v36._uint64_t countAndFlagsBits = v34;
    v36._object = v28;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._uint64_t countAndFlagsBits = 10;
    v37._object = (void *)0xE100000000000000;
    String.append(_:)(v37);
    String.append(_:)(v229);
    swift_bridgeObjectRelease();
    if (v29)
    {
      id v38 = [v29 bundlePath];
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      char v41 = v40;

      v229._uint64_t countAndFlagsBits = 0;
      v229._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)&v229, "    bundle : ");
      HIWORD(v229._object) = -4864;
      v42._uint64_t countAndFlagsBits = v39;
      v42._object = v41;
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      v43._uint64_t countAndFlagsBits = 10;
      v43._object = (void *)0xE100000000000000;
      String.append(_:)(v43);
      String.append(_:)(v229);
      swift_bridgeObjectRelease();
    }
    strcpy((char *)&v229, "    style : ");
    BYTE5(v229._object) = 0;
    HIWORD(v229._object) = -5120;
    v234._uint64_t countAndFlagsBits = (uint64_t)v30;
    type metadata accessor for UIFontTextStyle(0);
    id v44 = v30;
    v45._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._uint64_t countAndFlagsBits = 10;
    v46._object = (void *)0xE100000000000000;
    String.append(_:)(v46);
    String.append(_:)(v229);
    swift_bridgeObjectRelease();
    if ((v31 & 1) == 0)
    {
      v229._uint64_t countAndFlagsBits = 0;
      v229._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      v229._uint64_t countAndFlagsBits = 0xD000000000000014;
      v229._object = (void *)0x8000000100472EA0;
      v47._uint64_t countAndFlagsBits = Double.description.getter();
      String.append(_:)(v47);
      swift_bridgeObjectRelease();
      v48._uint64_t countAndFlagsBits = 10;
      v48._object = (void *)0xE100000000000000;
      String.append(_:)(v48);
      String.append(_:)(v229);
      swift_bridgeObjectRelease();
    }
    v229._uint64_t countAndFlagsBits = 0;
    v229._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)&v229, "    weight : ");
    HIWORD(v229._object) = -4864;
    v234._uint64_t countAndFlagsBits = v32;
    type metadata accessor for UIImageSymbolWeight(0);
    v49._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    v50._uint64_t countAndFlagsBits = 10;
    v50._object = (void *)0xE100000000000000;
    String.append(_:)(v50);
    String.append(_:)(v229);
    swift_bridgeObjectRelease();
    strcpy((char *)&v229, "    scale : ");
    BYTE5(v229._object) = 0;
    HIWORD(v229._object) = -5120;
    v234._uint64_t countAndFlagsBits = v219;
    type metadata accessor for UIImageSymbolScale(0);
    v51._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    v52._uint64_t countAndFlagsBits = 10;
    v52._object = (void *)0xE100000000000000;
    String.append(_:)(v52);
    String.append(_:)(v229);
    swift_bridgeObjectRelease();
    char v53 = v220;
    if (v220 != 255)
    {
      v229._uint64_t countAndFlagsBits = 0;
      v229._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)&v234, "    offset : ");
      HIWORD(v234._object) = -4864;
      v229._uint64_t countAndFlagsBits = v217;
      v229._object = v216;
      LOBYTE(v230) = v53 & 1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DisplayUnit<UIOffset>);
      v54._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v54);
      swift_bridgeObjectRelease();
      v55._uint64_t countAndFlagsBits = 10;
      v55._object = (void *)0xE100000000000000;
      String.append(_:)(v55);
      String.append(_:)(v234);
      swift_bridgeObjectRelease();
    }
    strcpy((char *)&v229, "    alpha : ");
    BYTE5(v229._object) = 0;
    HIWORD(v229._object) = -5120;
    v56._uint64_t countAndFlagsBits = Double.description.getter();
    String.append(_:)(v56);
    swift_bridgeObjectRelease();
    v57._uint64_t countAndFlagsBits = 10;
    v57._object = (void *)0xE100000000000000;
    String.append(_:)(v57);
    String.append(_:)(v229);
    swift_bridgeObjectRelease();
    v229._uint64_t countAndFlagsBits = 0x746E697420202020;
    v229._object = (void *)0xEB00000000203A20;
    v234._uint64_t countAndFlagsBits = (uint64_t)v221;
    id v58 = v221;
    v59._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v59);
    swift_bridgeObjectRelease();
    v60._uint64_t countAndFlagsBits = 10;
    v60._object = (void *)0xE100000000000000;
    String.append(_:)(v60);
    String.append(_:)(v229);
    swift_bridgeObjectRelease();
    if (v33)
    {
      v229._uint64_t countAndFlagsBits = 0;
      v229._object = (void *)0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      v229._uint64_t countAndFlagsBits = 0xD000000000000018;
      v229._object = (void *)0x8000000100472E80;
      v61._uint64_t countAndFlagsBits = v218;
      v61._object = v33;
      String.append(_:)(v61);
      swift_bridgeObjectRelease();
      v62._uint64_t countAndFlagsBits = 10;
      v62._object = (void *)0xE100000000000000;
      String.append(_:)(v62);
      String.append(_:)(v229);
      swift_bridgeObjectRelease();
    }
    v63._uint64_t countAndFlagsBits = 687392;
    v63._object = (void *)0xE300000000000000;
    String.append(_:)(v63);
  }
  else
  {
    v64._object = (void *)0x8000000100472B80;
    v64._uint64_t countAndFlagsBits = 0x1000000000000012;
    String.append(_:)(v64);
  }
  uint64_t v65 = *(void **)(v1 + 128);
  if (v65)
  {
    uint64_t v66 = *(void **)(v1 + 160);
    uint64_t v220 = *(void *)(v1 + 152);
    LODWORD(v221) = *(unsigned __int8 *)(v1 + 184);
    uint64_t v67 = *(void **)(v1 + 176);
    uint64_t v68 = *(void *)(v1 + 144);
    uint64_t v69 = *(void **)(v1 + 136);
    uint64_t v70 = *(void *)(v1 + 120);
    swift_bridgeObjectRetain();
    v71._object = (void *)0xAD00000A7B20656CLL;
    v71._uint64_t countAndFlagsBits = 0x746954209480E220;
    String.append(_:)(v71);
    v229._uint64_t countAndFlagsBits = 0x7478657420202020;
    v229._object = (void *)0xEB00000000203A20;
    v72._uint64_t countAndFlagsBits = v70;
    v72._object = v65;
    String.append(_:)(v72);
    swift_bridgeObjectRelease();
    v73._uint64_t countAndFlagsBits = 10;
    v73._object = (void *)0xE100000000000000;
    String.append(_:)(v73);
    String.append(_:)(v229);
    swift_bridgeObjectRelease();
    strcpy((char *)&v229, "    style : ");
    BYTE5(v229._object) = 0;
    HIWORD(v229._object) = -5120;
    v234._uint64_t countAndFlagsBits = (uint64_t)v69;
    type metadata accessor for UIFontTextStyle(0);
    id v74 = v69;
    v75._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v75);
    swift_bridgeObjectRelease();
    v76._uint64_t countAndFlagsBits = 10;
    v76._object = (void *)0xE100000000000000;
    String.append(_:)(v76);
    String.append(_:)(v229);
    swift_bridgeObjectRelease();
    v229._uint64_t countAndFlagsBits = 0;
    v229._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)&v229, "    weight : ");
    HIWORD(v229._object) = -4864;
    v234._uint64_t countAndFlagsBits = v68;
    type metadata accessor for UIFontWeight(0);
    v77._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v77);
    swift_bridgeObjectRelease();
    v78._uint64_t countAndFlagsBits = 10;
    v78._object = (void *)0xE100000000000000;
    String.append(_:)(v78);
    String.append(_:)(v229);
    swift_bridgeObjectRelease();
    strcpy((char *)&v229, "    alpha : ");
    BYTE5(v229._object) = 0;
    HIWORD(v229._object) = -5120;
    v79._uint64_t countAndFlagsBits = Double.description.getter();
    String.append(_:)(v79);
    swift_bridgeObjectRelease();
    v80._uint64_t countAndFlagsBits = 10;
    v80._object = (void *)0xE100000000000000;
    String.append(_:)(v80);
    String.append(_:)(v229);
    swift_bridgeObjectRelease();
    v229._uint64_t countAndFlagsBits = 0x746E697420202020;
    v229._object = (void *)0xEB00000000203A20;
    v234._uint64_t countAndFlagsBits = (uint64_t)v67;
    id v81 = v67;
    v82._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v82);
    swift_bridgeObjectRelease();
    v83._uint64_t countAndFlagsBits = 10;
    v83._object = (void *)0xE100000000000000;
    String.append(_:)(v83);
    String.append(_:)(v229);
    swift_bridgeObjectRelease();
    v229._uint64_t countAndFlagsBits = 0;
    v229._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)&v229, "    hidden : ");
    HIWORD(v229._object) = -4864;
    if (v221) {
      uint64_t v84 = 1702195828;
    }
    else {
      uint64_t v84 = 0x65736C6166;
    }
    if (v221) {
      unint64_t v85 = 0xE400000000000000;
    }
    else {
      unint64_t v85 = 0xE500000000000000;
    }
    unint64_t v86 = v85;
    String.append(_:)(*(Swift::String *)&v84);
    swift_bridgeObjectRelease();
    v87._uint64_t countAndFlagsBits = 10;
    v87._object = (void *)0xE100000000000000;
    String.append(_:)(v87);
    String.append(_:)(v229);
    swift_bridgeObjectRelease();
    if (v66)
    {
      v229._uint64_t countAndFlagsBits = 0;
      v229._object = (void *)0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      v229._uint64_t countAndFlagsBits = 0xD000000000000018;
      v229._object = (void *)0x8000000100472E80;
      v88._uint64_t countAndFlagsBits = v220;
      v88._object = v66;
      String.append(_:)(v88);
      swift_bridgeObjectRelease();
      v89._uint64_t countAndFlagsBits = 10;
      v89._object = (void *)0xE100000000000000;
      String.append(_:)(v89);
      String.append(_:)(v229);
      swift_bridgeObjectRelease();
    }
    uint64_t v90 = 687392;
    unint64_t v91 = 0xE300000000000000;
  }
  else
  {
    uint64_t v90 = 0x1000000000000011;
    unint64_t v91 = 0x8000000100472BA0;
  }
  String.append(_:)(*(Swift::String *)&v90);
  uint64_t v92 = *(void **)(v1 + 200);
  if (v92 == (void *)1)
  {
    v93._uint64_t countAndFlagsBits = 0x1000000000000016;
    v93._object = (void *)0x8000000100472BC0;
    String.append(_:)(v93);
  }
  else
  {
    uint64_t v95 = *(void *)(v1 + 208);
    uint64_t v94 = *(void **)(v1 + 216);
    swift_bridgeObjectRetain();
    id v96 = v92;
    v97._object = (void *)0x8000000100472E60;
    v97._uint64_t countAndFlagsBits = 0x1000000000000012;
    String.append(_:)(v97);
    strcpy((char *)&v229, "    alpha : ");
    BYTE5(v229._object) = 0;
    HIWORD(v229._object) = -5120;
    v98._uint64_t countAndFlagsBits = Double.description.getter();
    String.append(_:)(v98);
    swift_bridgeObjectRelease();
    v99._uint64_t countAndFlagsBits = 10;
    v99._object = (void *)0xE100000000000000;
    String.append(_:)(v99);
    String.append(_:)(v229);
    swift_bridgeObjectRelease();
    v229._uint64_t countAndFlagsBits = 0x746E697420202020;
    v229._object = (void *)0xEB00000000203A20;
    v234._uint64_t countAndFlagsBits = (uint64_t)v92;
    id v100 = v96;
    v101._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v101);
    swift_bridgeObjectRelease();
    v102._uint64_t countAndFlagsBits = 10;
    v102._object = (void *)0xE100000000000000;
    String.append(_:)(v102);
    String.append(_:)(v229);
    swift_bridgeObjectRelease();
    if (v94)
    {
      v229._uint64_t countAndFlagsBits = 0;
      v229._object = (void *)0xE000000000000000;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      v229._uint64_t countAndFlagsBits = 0xD000000000000018;
      v229._object = (void *)0x8000000100472E80;
      v103._uint64_t countAndFlagsBits = v95;
      v103._object = v94;
      String.append(_:)(v103);
      swift_bridgeObjectRelease();
      v104._uint64_t countAndFlagsBits = 10;
      v104._object = (void *)0xE100000000000000;
      String.append(_:)(v104);
      String.append(_:)(v229);
      swift_bridgeObjectRelease();
    }
    v105._uint64_t countAndFlagsBits = 687392;
    v105._object = (void *)0xE300000000000000;
    String.append(_:)(v105);
    swift_bridgeObjectRelease();
  }
  uint64_t v106 = *(void **)(v1 + 288);
  if (v106)
  {
    int v107 = *(_DWORD *)(v1 + 280);
    uint64_t v108 = *(void *)(v1 + 272);
    v229._uint64_t countAndFlagsBits = 0;
    v229._object = (void *)0xE000000000000000;
    id v109 = v106;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v234._uint64_t countAndFlagsBits = 0x726F42209480E220;
    v234._object = (void *)0xAE00203A20726564;
    v229._uint64_t countAndFlagsBits = v108;
    LOBYTE(v229._object) = v107 & 1;
    *(void *)&long long v230 = v109;
    id v110 = v109;
    v111._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v111);
    swift_bridgeObjectRelease();
    v112._uint64_t countAndFlagsBits = 10;
    v112._object = (void *)0xE100000000000000;
    String.append(_:)(v112);
    String.append(_:)(v234);

    swift_bridgeObjectRelease();
  }
  else
  {
    v113._object = (void *)0x8000000100472BE0;
    v113._uint64_t countAndFlagsBits = 0x1000000000000012;
    String.append(_:)(v113);
  }
  uint64_t v114 = v228;
  uint64_t v115 = v224;
  outlined init with copy of UIView.Corner?(v1 + v228[9], v224);
  uint64_t v117 = v225;
  id v116 = v226;
  if (((unsigned int (*)(uint64_t, uint64_t, id))v225[6])(v115, 1, v226) == 1)
  {
    outlined destroy of UIView.Corner?(v115);
    v118._object = (void *)0x8000000100472C00;
    v118._uint64_t countAndFlagsBits = 0x1000000000000012;
    String.append(_:)(v118);
  }
  else
  {
    uint64_t v119 = v223;
    v117[4](v223, v115, v116);
    v229._uint64_t countAndFlagsBits = 0;
    v229._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v229._uint64_t countAndFlagsBits = 0x726F43209480E220;
    v229._object = (void *)0xAE00203A2072656ELL;
    v117[2](v222, (uint64_t)v119, v116);
    v120._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v120);
    swift_bridgeObjectRelease();
    v121._uint64_t countAndFlagsBits = 10;
    v121._object = (void *)0xE100000000000000;
    String.append(_:)(v121);
    String.append(_:)(v229);
    swift_bridgeObjectRelease();
    ((void (*)(char *, id))v117[1])(v119, v116);
  }
  uint64_t v122 = *(void **)(v1 + 224);
  if (v122 == (void *)1)
  {
    v123._uint64_t countAndFlagsBits = 0x1000000000000014;
    v123._object = (void *)0x8000000100472C20;
    String.append(_:)(v123);
  }
  else
  {
    char v125 = *(void **)(v1 + 232);
    long long v124 = *(void **)(v1 + 240);
    uint64_t v126 = *(void **)(v1 + 264);
    uint64_t v224 = *(void *)(v1 + 256);
    uint64_t v127 = *(unsigned __int8 *)(v1 + 248);
    swift_bridgeObjectRetain();
    id v128 = v122;
    id v226 = v125;
    uint64_t v225 = v124;
    v129._uint64_t countAndFlagsBits = 0x1000000000000010;
    v129._object = (void *)0x8000000100472DE0;
    String.append(_:)(v129);
    if (v122)
    {
      v229._uint64_t countAndFlagsBits = 0;
      v229._object = (void *)0xE000000000000000;
      id v130 = v128;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      v229._uint64_t countAndFlagsBits = 0xD000000000000017;
      v229._object = (void *)0x8000000100472E40;
      id v131 = v130;
      id v132 = [v131 description];
      uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v135 = v134;

      v136._uint64_t countAndFlagsBits = v133;
      v136._object = v135;
      String.append(_:)(v136);
      swift_bridgeObjectRelease();
      v137._uint64_t countAndFlagsBits = 10;
      v137._object = (void *)0xE100000000000000;
      String.append(_:)(v137);
      String.append(_:)(v229);

      swift_bridgeObjectRelease();
    }
    if (v125)
    {
      v229._uint64_t countAndFlagsBits = 0;
      v229._object = (void *)0xE000000000000000;
      id v138 = v226;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      v229._uint64_t countAndFlagsBits = 0xD000000000000017;
      v229._object = (void *)0x8000000100472E20;
      id v139 = v138;
      id v140 = [v139 description];
      uint64_t v141 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v143 = v142;

      v144._uint64_t countAndFlagsBits = v141;
      v144._object = v143;
      String.append(_:)(v144);
      swift_bridgeObjectRelease();
      v145._uint64_t countAndFlagsBits = 10;
      v145._object = (void *)0xE100000000000000;
      String.append(_:)(v145);
      String.append(_:)(v229);

      swift_bridgeObjectRelease();
    }
    if (v124)
    {
      v229._uint64_t countAndFlagsBits = 0;
      v229._object = (void *)0xE000000000000000;
      uint64_t v146 = v225;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      v229._uint64_t countAndFlagsBits = 0xD000000000000014;
      v229._object = (void *)0x8000000100472E00;
      uint64_t v147 = v146;
      id v148 = [v147 description];
      uint64_t v149 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v151 = v150;

      v152._uint64_t countAndFlagsBits = v149;
      v152._object = v151;
      String.append(_:)(v152);
      swift_bridgeObjectRelease();
      v153._uint64_t countAndFlagsBits = 10;
      v153._object = (void *)0xE100000000000000;
      String.append(_:)(v153);
      String.append(_:)(v229);

      swift_bridgeObjectRelease();
    }
    uint64_t v114 = v228;
    if (v127 != 2)
    {
      strcpy((char *)&v229, "    color : ");
      BYTE5(v229._object) = 0;
      HIWORD(v229._object) = -5120;
      LOBYTE(v234._countAndFlagsBits) = v127 & 1;
      v154._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v154);
      swift_bridgeObjectRelease();
      v155._uint64_t countAndFlagsBits = 10;
      v155._object = (void *)0xE100000000000000;
      String.append(_:)(v155);
      String.append(_:)(v229);
      swift_bridgeObjectRelease();
    }
    if (v126)
    {
      strcpy((char *)&v229, "    group : ");
      BYTE5(v229._object) = 0;
      HIWORD(v229._object) = -5120;
      swift_bridgeObjectRetain();
      v156._uint64_t countAndFlagsBits = v224;
      v156._object = v126;
      String.append(_:)(v156);
      swift_bridgeObjectRelease();
      v157._uint64_t countAndFlagsBits = 10;
      v157._object = (void *)0xE100000000000000;
      String.append(_:)(v157);
      String.append(_:)(v229);
      swift_bridgeObjectRelease();
    }
    v158._uint64_t countAndFlagsBits = 687392;
    v158._object = (void *)0xE300000000000000;
    String.append(_:)(v158);
    swift_bridgeObjectRelease();
  }
  uint64_t v159 = v1 + v114[10];
  uint64_t v160 = *(void **)v159;
  if (*(void *)v159)
  {
    uint64_t v162 = *(void *)(v159 + 40);
    uint64_t v161 = *(void **)(v159 + 48);
    uint64_t v164 = *(void *)(v159 + 24);
    uint64_t v163 = *(void *)(v159 + 32);
    uint64_t v165 = *(void **)(v159 + 8);
    uint64_t v166 = *(void *)(v159 + 16);
    v229._uint64_t countAndFlagsBits = 0;
    v229._object = (void *)0xE000000000000000;
    outlined copy of SymbolButton.CustomView?(v160, (uint64_t)v165, v166, v164, v163, v162, v161);
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    v234._uint64_t countAndFlagsBits = 0x1000000000000013;
    v234._object = (void *)0x8000000100472DC0;
    v229._uint64_t countAndFlagsBits = (uint64_t)v160;
    v229._object = v165;
    *(void *)&long long v230 = v166;
    *((void *)&v230 + 1) = v164;
    uint64_t v231 = v163;
    uint64_t v232 = v162;
    uint64_t v233 = v161;
    id v167 = v161;
    id v168 = v160;
    v169._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v169);
    swift_bridgeObjectRelease();
    v170._uint64_t countAndFlagsBits = 10;
    v170._object = (void *)0xE100000000000000;
    String.append(_:)(v170);
    String.append(_:)(v234);
    swift_bridgeObjectRelease();
    uint64_t v171 = v162;
    uint64_t v114 = v228;
    outlined consume of SymbolButton.CustomView?(v160, (uint64_t)v165, v166, v164, v163, v171, v161);
  }
  else
  {
    v172._uint64_t countAndFlagsBits = 0x1000000000000017;
    v172._object = (void *)0x8000000100472C40;
    String.append(_:)(v172);
  }
  uint64_t v173 = (uint64_t *)(v1 + v114[11]);
  uint64_t v174 = (void *)v173[2];
  if (v174 == (void *)1)
  {
    v175._uint64_t countAndFlagsBits = 0x1000000000000011;
    v175._object = (void *)0x8000000100472C60;
    String.append(_:)(v175);
  }
  else
  {
    uint64_t v177 = *v173;
    uint64_t v176 = v173[1];
    id v178 = v174;
    v179._uint64_t countAndFlagsBits = 0x646142209480E220;
    v179._object = (void *)0xAD00000A7B206567;
    String.append(_:)(v179);
    v229._uint64_t countAndFlagsBits = 0;
    v229._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v229._uint64_t countAndFlagsBits = 0xD000000000000014;
    v229._object = (void *)0x8000000100472DA0;
    v180._uint64_t countAndFlagsBits = Double.description.getter();
    String.append(_:)(v180);
    swift_bridgeObjectRelease();
    v181._uint64_t countAndFlagsBits = 10;
    v181._object = (void *)0xE100000000000000;
    String.append(_:)(v181);
    String.append(_:)(v229);
    swift_bridgeObjectRelease();
    strcpy((char *)&v229, "    alpha : ");
    BYTE5(v229._object) = 0;
    HIWORD(v229._object) = -5120;
    v182._uint64_t countAndFlagsBits = Double.description.getter();
    String.append(_:)(v182);
    swift_bridgeObjectRelease();
    v183._uint64_t countAndFlagsBits = 10;
    v183._object = (void *)0xE100000000000000;
    String.append(_:)(v183);
    String.append(_:)(v229);
    swift_bridgeObjectRelease();
    v229._uint64_t countAndFlagsBits = 0x746E697420202020;
    v229._object = (void *)0xEB00000000203A20;
    v234._uint64_t countAndFlagsBits = (uint64_t)v174;
    id v184 = v178;
    v185._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v185);
    swift_bridgeObjectRelease();
    v186._uint64_t countAndFlagsBits = 10;
    v186._object = (void *)0xE100000000000000;
    String.append(_:)(v186);
    String.append(_:)(v229);
    swift_bridgeObjectRelease();
    v187._uint64_t countAndFlagsBits = 687392;
    v187._object = (void *)0xE300000000000000;
    String.append(_:)(v187);
    outlined consume of SymbolButton.Badge?(v177, v176, (uint64_t)v174);
  }
  uint64_t v188 = (unsigned __int8 *)(v1 + v228[16]);
  int v189 = *v188;
  uint64_t v190 = (void *)*((void *)v188 + 1);
  uint64_t v191 = (void *)*((void *)v188 + 2);
  int v192 = v188[24];
  v193._uint64_t countAndFlagsBits = 0x1000000000000015;
  v193._object = (void *)0x8000000100472C80;
  String.append(_:)(v193);
  v229._uint64_t countAndFlagsBits = 0;
  v229._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v229._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v229._object = (void *)0x8000000100472CA0;
  if (v189) {
    uint64_t v194 = 1702195828;
  }
  else {
    uint64_t v194 = 0x65736C6166;
  }
  if (v189) {
    unint64_t v195 = 0xE400000000000000;
  }
  else {
    unint64_t v195 = 0xE500000000000000;
  }
  unint64_t v196 = v195;
  String.append(_:)(*(Swift::String *)&v194);
  swift_bridgeObjectRelease();
  v197._uint64_t countAndFlagsBits = 10;
  v197._object = (void *)0xE100000000000000;
  String.append(_:)(v197);
  String.append(_:)(v229);
  swift_bridgeObjectRelease();
  if (v190)
  {
    v229._uint64_t countAndFlagsBits = 0;
    v229._object = (void *)0xE000000000000000;
    id v198 = v190;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    v229._uint64_t countAndFlagsBits = 0xD000000000000021;
    v229._object = (void *)0x8000000100472D70;
    v234._uint64_t countAndFlagsBits = (uint64_t)v198;
    type metadata accessor for UIContentSizeCategory(0);
    id v199 = v198;
    v200._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v200);
    swift_bridgeObjectRelease();
    v201._uint64_t countAndFlagsBits = 10;
    v201._object = (void *)0xE100000000000000;
    String.append(_:)(v201);
    String.append(_:)(v229);

    swift_bridgeObjectRelease();
    if (v191)
    {
LABEL_72:
      v229._uint64_t countAndFlagsBits = 0;
      v229._object = (void *)0xE000000000000000;
      id v202 = v191;
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      v229._uint64_t countAndFlagsBits = 0xD000000000000021;
      v229._object = (void *)0x8000000100472D40;
      v234._uint64_t countAndFlagsBits = (uint64_t)v202;
      type metadata accessor for UIContentSizeCategory(0);
      id v203 = v202;
      v204._uint64_t countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v204);
      swift_bridgeObjectRelease();
      v205._uint64_t countAndFlagsBits = 10;
      v205._object = (void *)0xE100000000000000;
      String.append(_:)(v205);
      String.append(_:)(v229);

      swift_bridgeObjectRelease();
      goto LABEL_75;
    }
  }
  else
  {
    v206._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    v206._object = (void *)0x8000000100472CC0;
    String.append(_:)(v206);
    if (v191) {
      goto LABEL_72;
    }
  }
  v207._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v207._object = (void *)0x8000000100472CF0;
  String.append(_:)(v207);
LABEL_75:
  v229._uint64_t countAndFlagsBits = 0;
  v229._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v229._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  v229._object = (void *)0x8000000100472D20;
  if (v192) {
    uint64_t v208 = 1702195828;
  }
  else {
    uint64_t v208 = 0x65736C6166;
  }
  if (v192) {
    unint64_t v209 = 0xE400000000000000;
  }
  else {
    unint64_t v209 = 0xE500000000000000;
  }
  unint64_t v210 = v209;
  String.append(_:)(*(Swift::String *)&v208);
  swift_bridgeObjectRelease();
  v211._uint64_t countAndFlagsBits = 10;
  v211._object = (void *)0xE100000000000000;
  String.append(_:)(v211);
  String.append(_:)(v229);
  swift_bridgeObjectRelease();
  v212._uint64_t countAndFlagsBits = 687392;
  v212._object = (void *)0xE300000000000000;
  String.append(_:)(v212);
  v213._uint64_t countAndFlagsBits = 41;
  v213._object = (void *)0xE100000000000000;
  String.append(_:)(v213);
  return v235;
}

uint64_t outlined init with copy of UIView.Corner?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UIView.Corner?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIView.Corner?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined consume of SymbolButton.Badge?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return _objc_release_x2();
  }
  return result;
}

id outlined copy of SymbolButton.CustomView?(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (result)
  {
    id v8 = result;
    id v7 = a7;
    return v8;
  }
  return result;
}

uint64_t one-time initialization function for normal(uint64_t a1)
{
  return one-time initialization function for solidSecondarySystemFill(a1, (uint64_t)closure #1 in variable initialization expression of static UIColor.MusicTint.normal, (uint64_t)&block_descriptor_13_1, &static UIColor.MusicTint.normal);
}

{
  return one-time initialization function for normal(a1, &one-time initialization token for normal, (id *)&static UIColor.MusicTint.normal, &static Color.MusicTint.normal);
}

id closure #1 in variable initialization expression of static UIColor.MusicTint.normal(void *a1)
{
  id v2 = [a1 userInterfaceStyle];
  id v3 = [a1 accessibilityContrast];
  id v4 = v3;
  if (!v2) {
    goto LABEL_6;
  }
  if (v2 == (id)2)
  {
    type metadata accessor for UIColor();
    double v5 = 1.0;
    uint64_t v6 = 250;
    if (v4 == (id)1)
    {
      uint64_t v7 = 88;
      uint64_t v8 = 106;
    }
    else
    {
      uint64_t v7 = 45;
      uint64_t v8 = 72;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      type metadata accessor for UIColor();
      double v5 = 1.0;
      uint64_t v6 = 204;
      uint64_t v7 = 0;
      uint64_t v8 = 20;
    }
    else
    {
      type metadata accessor for UIColor();
      double v5 = 1.0;
      uint64_t v6 = 250;
      uint64_t v7 = 35;
      uint64_t v8 = 59;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t *UIColor.MusicTint.normal.unsafeMutableAddressor()
{
  if (one-time initialization token for normal != -1) {
    swift_once();
  }
  return &static UIColor.MusicTint.normal;
}

id static UIColor.MusicTint.normal.getter()
{
  return static ApplicationCapabilities.NotificationNames.allowsiTunesContentDidChange.getter(&one-time initialization token for normal, (void **)&static UIColor.MusicTint.normal);
}

uint64_t one-time initialization function for rollover(uint64_t a1)
{
  return one-time initialization function for solidSecondarySystemFill(a1, (uint64_t)closure #1 in variable initialization expression of static UIColor.MusicTint.rollover, (uint64_t)&block_descriptor_10_0, &static UIColor.MusicTint.rollover);
}

{
  return one-time initialization function for normal(a1, &one-time initialization token for rollover, (id *)&static UIColor.MusicTint.rollover, &static Color.MusicTint.rollover);
}

id closure #1 in variable initialization expression of static UIColor.MusicTint.rollover(void *a1)
{
  id v2 = [a1 userInterfaceStyle];
  id v3 = [a1 accessibilityContrast];
  id v4 = v3;
  if (!v2) {
    goto LABEL_6;
  }
  if (v2 == (id)2)
  {
    type metadata accessor for UIColor();
    double v5 = 1.0;
    uint64_t v6 = 255;
    if (v4 == (id)1)
    {
      uint64_t v7 = 138;
      uint64_t v8 = 156;
    }
    else
    {
      uint64_t v7 = 95;
      uint64_t v8 = 122;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      type metadata accessor for UIColor();
      double v5 = 1.0;
      uint64_t v6 = 162;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
    }
    else
    {
      type metadata accessor for UIColor();
      double v5 = 1.0;
      uint64_t v6 = 198;
      uint64_t v7 = 0;
      uint64_t v8 = 7;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *UIColor.MusicTint.rollover.unsafeMutableAddressor()
{
  if (one-time initialization token for rollover != -1) {
    swift_once();
  }
  return &static UIColor.MusicTint.rollover;
}

id static UIColor.MusicTint.rollover.getter()
{
  return static ApplicationCapabilities.NotificationNames.allowsiTunesContentDidChange.getter(&one-time initialization token for rollover, (void **)&static UIColor.MusicTint.rollover);
}

uint64_t one-time initialization function for pressed(uint64_t a1)
{
  return one-time initialization function for solidSecondarySystemFill(a1, (uint64_t)closure #1 in variable initialization expression of static UIColor.MusicTint.pressed, (uint64_t)&block_descriptor_7_0, &static UIColor.MusicTint.pressed);
}

{
  return one-time initialization function for normal(a1, &one-time initialization token for pressed, (id *)&static UIColor.MusicTint.pressed, &static Color.MusicTint.pressed);
}

id closure #1 in variable initialization expression of static UIColor.MusicTint.pressed(void *a1)
{
  id v2 = [a1 userInterfaceStyle];
  id v3 = [a1 accessibilityContrast];
  id v4 = v3;
  if (!v2) {
    goto LABEL_6;
  }
  if (v2 == (id)2)
  {
    type metadata accessor for UIColor();
    double v5 = 1.0;
    uint64_t v6 = 255;
    if (v4 == (id)1)
    {
      uint64_t v7 = 113;
      uint64_t v8 = 131;
    }
    else
    {
      uint64_t v7 = 70;
      uint64_t v8 = 97;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      type metadata accessor for UIColor();
      double v5 = 1.0;
      uint64_t v6 = 187;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
    }
    else
    {
      type metadata accessor for UIColor();
      double v5 = 1.0;
      uint64_t v6 = 224;
      uint64_t v7 = 9;
      uint64_t v8 = 33;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t *UIColor.MusicTint.pressed.unsafeMutableAddressor()
{
  if (one-time initialization token for pressed != -1) {
    swift_once();
  }
  return &static UIColor.MusicTint.pressed;
}

id static UIColor.MusicTint.pressed.getter()
{
  return static ApplicationCapabilities.NotificationNames.allowsiTunesContentDidChange.getter(&one-time initialization token for pressed, (void **)&static UIColor.MusicTint.pressed);
}

uint64_t one-time initialization function for deepPressed(uint64_t a1)
{
  return one-time initialization function for solidSecondarySystemFill(a1, (uint64_t)closure #1 in variable initialization expression of static UIColor.MusicTint.deepPressed, (uint64_t)&block_descriptor_4, &static UIColor.MusicTint.deepPressed);
}

{
  return one-time initialization function for normal(a1, &one-time initialization token for deepPressed, (id *)&static UIColor.MusicTint.deepPressed, &static Color.MusicTint.deepPressed);
}

id closure #1 in variable initialization expression of static UIColor.MusicTint.deepPressed(void *a1)
{
  id v2 = [a1 userInterfaceStyle];
  id v3 = [a1 accessibilityContrast];
  id v4 = v3;
  if (!v2) {
    goto LABEL_6;
  }
  if (v2 == (id)2)
  {
    type metadata accessor for UIColor();
    double v5 = 1.0;
    uint64_t v6 = 255;
    if (v4 == (id)1)
    {
      uint64_t v7 = 138;
      uint64_t v8 = 156;
    }
    else
    {
      uint64_t v7 = 95;
      uint64_t v8 = 122;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      type metadata accessor for UIColor();
      double v5 = 1.0;
      uint64_t v6 = 162;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
    }
    else
    {
      type metadata accessor for UIColor();
      double v5 = 1.0;
      uint64_t v6 = 198;
      uint64_t v7 = 0;
      uint64_t v8 = 7;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v6, v7, v8, v5);
  }
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *UIColor.MusicTint.deepPressed.unsafeMutableAddressor()
{
  if (one-time initialization token for deepPressed != -1) {
    swift_once();
  }
  return &static UIColor.MusicTint.deepPressed;
}

id static UIColor.MusicTint.deepPressed.getter()
{
  return static ApplicationCapabilities.NotificationNames.allowsiTunesContentDidChange.getter(&one-time initialization token for deepPressed, (void **)&static UIColor.MusicTint.deepPressed);
}

uint64_t one-time initialization function for disabled(uint64_t a1)
{
  return one-time initialization function for solidSecondarySystemFill(a1, (uint64_t)closure #1 in variable initialization expression of static UIColor.MusicTint.disabled, (uint64_t)&block_descriptor_47, &static UIColor.MusicTint.disabled);
}

{
  return one-time initialization function for normal(a1, &one-time initialization token for disabled, (id *)&static UIColor.MusicTint.disabled, &static Color.MusicTint.disabled);
}

id closure #1 in variable initialization expression of static UIColor.MusicTint.disabled(void *a1)
{
  id v2 = [a1 userInterfaceStyle];
  id v3 = [a1 accessibilityContrast];
  id v4 = v3;
  if (!v2) {
    goto LABEL_6;
  }
  if (v2 == (id)2)
  {
    type metadata accessor for UIColor();
    uint64_t v5 = 250;
    if (v4 == (id)1)
    {
      uint64_t v6 = 88;
      uint64_t v7 = 106;
    }
    else
    {
      uint64_t v6 = 45;
      uint64_t v7 = 72;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v5, v6, v7, 0.35);
  }
  if (v2 == (id)1)
  {
LABEL_6:
    if (v3 == (id)1)
    {
      type metadata accessor for UIColor();
      uint64_t v5 = 214;
      uint64_t v6 = 0;
      uint64_t v7 = 23;
    }
    else
    {
      type metadata accessor for UIColor();
      uint64_t v5 = 250;
      uint64_t v6 = 35;
      uint64_t v7 = 59;
    }
    return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v5, v6, v7, 0.35);
  }
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *UIColor.MusicTint.disabled.unsafeMutableAddressor()
{
  if (one-time initialization token for disabled != -1) {
    swift_once();
  }
  return &static UIColor.MusicTint.disabled;
}

id static UIColor.MusicTint.disabled.getter()
{
  return static ApplicationCapabilities.NotificationNames.allowsiTunesContentDidChange.getter(&one-time initialization token for disabled, (void **)&static UIColor.MusicTint.disabled);
}

uint64_t *Color.MusicTint.normal.unsafeMutableAddressor()
{
  if (one-time initialization token for normal != -1) {
    swift_once();
  }
  return &static Color.MusicTint.normal;
}

uint64_t static Color.MusicTint.normal.getter()
{
  return static Color.MusicTint.normal.getter(&one-time initialization token for normal);
}

uint64_t *Color.MusicTint.rollover.unsafeMutableAddressor()
{
  if (one-time initialization token for rollover != -1) {
    swift_once();
  }
  return &static Color.MusicTint.rollover;
}

uint64_t static Color.MusicTint.rollover.getter()
{
  return static Color.MusicTint.normal.getter(&one-time initialization token for rollover);
}

uint64_t *Color.MusicTint.pressed.unsafeMutableAddressor()
{
  if (one-time initialization token for pressed != -1) {
    swift_once();
  }
  return &static Color.MusicTint.pressed;
}

uint64_t static Color.MusicTint.pressed.getter()
{
  return static Color.MusicTint.normal.getter(&one-time initialization token for pressed);
}

uint64_t *Color.MusicTint.deepPressed.unsafeMutableAddressor()
{
  if (one-time initialization token for deepPressed != -1) {
    swift_once();
  }
  return &static Color.MusicTint.deepPressed;
}

uint64_t static Color.MusicTint.deepPressed.getter()
{
  return static Color.MusicTint.normal.getter(&one-time initialization token for deepPressed);
}

uint64_t one-time initialization function for normal(uint64_t a1, void *a2, id *a3, uint64_t *a4)
{
  if (*a2 != -1) {
    swift_once();
  }
  id v6 = *a3;
  uint64_t result = Color.init(_:)();
  *a4 = result;
  return result;
}

uint64_t *Color.MusicTint.disabled.unsafeMutableAddressor()
{
  if (one-time initialization token for disabled != -1) {
    swift_once();
  }
  return &static Color.MusicTint.disabled;
}

uint64_t static Color.MusicTint.disabled.getter()
{
  return static Color.MusicTint.normal.getter(&one-time initialization token for disabled);
}

uint64_t static Color.MusicTint.normal.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_retain();
}

ValueMetadata *type metadata accessor for UIColor.MusicTint()
{
  return &type metadata for UIColor.MusicTint;
}

ValueMetadata *type metadata accessor for Color.MusicTint()
{
  return &type metadata for Color.MusicTint;
}

uint64_t block_copy_helper_45(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_45()
{
  return swift_release();
}

unint64_t type metadata accessor for UIColor()
{
  unint64_t result = _sSo7UIColorCML_0;
  if (!_sSo7UIColorCML_0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&_sSo7UIColorCML_0);
  }
  return result;
}

UITraitCollection __swiftcall UITraitCollection.init(mediaLibrary:)(MPMediaLibrary_optional mediaLibrary)
{
  Class isa = mediaLibrary.value.super.isa;
  __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCyyXlGMD_1);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100493D20;
  id v3 = self;
  id v4 = isa;
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v3 _traitCollectionWithValue:v4 forTraitNamed:v5];

  if (v6)
  {
    uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    *(void *)(v2 + 32) = v6;
    specialized Array._endMutation()();
    type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for UITraitCollection);
    Class v9 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v10 = [ObjCClassFromMetadata traitCollectionWithTraitsFromCollections:v9];

    return (UITraitCollection)v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id UITraitCollection.mediaLibrary.getter()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 _valueForTraitNamed:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  _sypSgWOb_2((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    type metadata accessor for UIMenu(0, &_sSo14MPMediaLibraryCML_0);
    if (swift_dynamicCast()) {
      return (id)v4;
    }
  }
  else
  {
    _sypSgWOh_1((uint64_t)v6);
  }
  id result = [self deviceMediaLibrary];
  if (!result) {
    __break(1u);
  }
  return result;
}

uint64_t _sypSgWOb_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&_sypSgMD_2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _sypSgWOh_1(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&_sypSgMD_2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

UITraitCollection __swiftcall UITraitCollection.init(legacyLibraryFilter:)(__C::MPMediaLibraryFilteringOptions legacyLibraryFilter)
{
  UITraitCollection.init(legacyLibraryFilter:)(legacyLibraryFilter.rawValue);
  return result;
}

__C::MPMediaLibraryFilteringOptions UITraitCollection.legacyLibraryFilter.getter()
{
  return UITraitCollection.legacyLibraryFilter.getter();
}

{
  void *v0;
  NSString v1;
  id v2;
  NSNumber_optional v3;
  objc_class *v5;
  _OWORD v6[2];
  unsigned char v7[24];
  uint64_t v8;

  NSString v1 = String._bridgeToObjectiveC()();
  uint64_t v2 = [v0 _valueForTraitNamed:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  _sypSgWOb_2((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    type metadata accessor for UIMenu(0, &_sSo8NSNumberCML_1);
    if (swift_dynamicCast()) {
      v3.value.super.super.Class isa = v5;
    }
    else {
      v3.value.super.super.Class isa = 0;
    }
  }
  else
  {
    _sypSgWOh_1((uint64_t)v7);
    v3.value.super.super.Class isa = 0;
  }
  return MPMediaLibraryFilteringOptions.init(_:)(v3);
}

BOOL UITraitCollection.isMediaPicker.getter()
{
  uint64_t v0 = (void *)UITraitCollection.mediaPickerConfiguration.getter();
  NSString v1 = v0;
  if (v0) {

  }
  return v1 != 0;
}

uint64_t UITraitCollection.mediaPickerConfiguration.getter()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 _valueForTraitNamed:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  _sypSgWOb_2((uint64_t)v5, (uint64_t)v6);
  if (v7)
  {
    type metadata accessor for UIMenu(0, &_sSo26MPMediaPickerConfigurationCML_0);
    if (swift_dynamicCast()) {
      return v4;
    }
    else {
      return 0;
    }
  }
  else
  {
    _sypSgWOh_1((uint64_t)v6);
    return 0;
  }
}

uint64_t UITraitCollection.init(mediaPickerConfiguration:)(void *a1)
{
  id v2 = self;
  id v3 = a1;
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v2 _traitCollectionWithValue:v3 forTraitNamed:v4];

  if (v5)
  {
    v6.rawValue = *(void *)MPMediaLibraryFilteringOptions.none.unsafeMutableAddressor();
    if (![v3 showsItemsWithProtectedAssets]) {
      v6.rawValue |= 0x20;
    }
    if (![v3 showsCloudItems]) {
      v6.rawValue |= 2;
    }
    type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for UITraitCollection);
    Class isa = UITraitCollection.init(mediaPickerLibraryFilter:)(v6).super.isa;
    uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCyyXlGMD_1);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_100493E20;
    *(void *)(v9 + 32) = v5;
    *(void *)(v9 + 40) = isa;
    specialized Array._endMutation()();
    id v10 = v5;
    Swift::String v11 = isa;
    Class v12 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v13 = [ObjCClassFromMetadata traitCollectionWithTraitsFromCollections:v12];

    return (uint64_t)v13;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

UITraitCollection __swiftcall UITraitCollection.init(mediaPickerLibraryFilter:)(__C::MPMediaLibraryFilteringOptions mediaPickerLibraryFilter)
{
  UITraitCollection.init(legacyLibraryFilter:)(mediaPickerLibraryFilter.rawValue);
  return result;
}

void UITraitCollection.init(legacyLibraryFilter:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCyyXlGMD_1);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100493D20;
  id v3 = self;
  id v4 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInteger:a1];
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v3 _traitCollectionWithValue:v4 forTraitNamed:v5];

  if (v6)
  {
    uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    *(void *)(v2 + 32) = v6;
    specialized Array._endMutation()();
    type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for UITraitCollection);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [ObjCClassFromMetadata traitCollectionWithTraitsFromCollections:isa];
  }
  else
  {
    __break(1u);
  }
}

__C::MPMediaLibraryFilteringOptions UITraitCollection.mediaPickerLibraryFilter.getter()
{
  return UITraitCollection.legacyLibraryFilter.getter();
}

__C::MPMediaLibraryFilteringOptions UITraitCollection.combinedLibraryRequestFilter.getter()
{
  Swift::UInt rawValue = UITraitCollection.legacyLibraryFilter.getter().rawValue;
  return (__C::MPMediaLibraryFilteringOptions)(UITraitCollection.mediaPickerLibraryFilter.getter().rawValue | rawValue);
}

uint64_t UITraitCollection.configure<A, B>(libraryRequest:)(void *a1)
{
  id v2 = [a1 mediaLibrary];
  id v3 = UITraitCollection.mediaLibrary.getter();
  id v4 = v3;
  if (v2)
  {
    type metadata accessor for UIMenu(0, &_sSo14MPMediaLibraryCML_0);
    id v5 = v2;
    char v6 = static NSObject.== infix(_:_:)();

    if (v6)
    {
      uint64_t v7 = 0;
      goto LABEL_6;
    }
  }
  else
  {
  }
  id v8 = UITraitCollection.mediaLibrary.getter();
  [a1 setMediaLibrary:v8];

  uint64_t v7 = 1;
LABEL_6:
  unint64_t v9 = (unint64_t)[a1 filteringOptions];
  Swift::UInt rawValue = UITraitCollection.legacyLibraryFilter.getter().rawValue;
  if (((UITraitCollection.mediaPickerLibraryFilter.getter().rawValue | rawValue) & ~v9) != 0)
  {
    Swift::UInt v11 = UITraitCollection.legacyLibraryFilter.getter().rawValue;
    objc_msgSend(a1, "setFilteringOptions:", UITraitCollection.mediaPickerLibraryFilter.getter().rawValue | v11 | (unint64_t)objc_msgSend(a1, "filteringOptions"));
    return 1;
  }
  return v7;
}

unint64_t _sSD17dictionaryLiteralSDyxq_Gx_q_td_tcfCSS_10Foundation4DataVTgm5_0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    id v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&_ss18_DictionaryStorageCySS10Foundation4DataVGMD_0);
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  id v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v7 = *(v4 - 1);
    unint64_t v8 = *v4;
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v7, v8);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    Swift::UInt v11 = (uint64_t *)(v2[6] + 16 * result);
    *Swift::UInt v11 = v5;
    v11[1] = v6;
    Class v12 = (uint64_t *)(v2[7] + 16 * result);
    *Class v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    _OWORD v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t _sSD17dictionaryLiteralSDyxq_Gx_q_td_tcfCSS_So13MPPropertySetCTgm5_0(uint64_t a1)
{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &_ss18_DictionaryStorageCySSSo13MPPropertySetCGMD_0);
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v6 = (uint64_t)*(v5 - 2);
    uint64_t v7 = (uint64_t)*(v5 - 1);
    unint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    id v9 = v8;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if (v11) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    Class v12 = (uint64_t *)(v3[6] + 16 * result);
    *Class v12 = v6;
    v12[1] = v7;
    *(void *)(v3[7] + 8 * result) = v9;
    uint64_t v13 = v3[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t _sSD17dictionaryLiteralSDyxq_Gx_q_td_tcfCSo21NSAttributedStringKeya_ypTgm5_0(uint64_t a1)
{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &_ss18_DictionaryStorageCySo21NSAttributedStringKeyaypGMD_0, &_sSo21NSAttributedStringKeya_yptMD_0, (uint64_t (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

unint64_t _sSD17dictionaryLiteralSDyxq_Gx_q_td_tcfCSo38UIApplicationOpenExternalURLOptionsKeya_ypTgm5_0(uint64_t a1)
{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &_ss18_DictionaryStorageCySo38UIApplicationOpenExternalURLOptionsKeyaypGMD_0, &_sSo38UIApplicationOpenExternalURLOptionsKeya_yptMD_0, (uint64_t (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

unint64_t _sSD17dictionaryLiteralSDyxq_Gx_q_td_tcfCSS_SbTgm5_1(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    id v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&_ss18_DictionaryStorageCySSSbGMD_1);
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(unsigned char *)(v2[7] + result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 24;
    _OWORD v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void static UIButton.Configuration.barButtonConfiguration(imageName:)()
{
  uint64_t v0 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UIButton.Configuration.CornerStyle();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  char v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIButton.Configuration.gray()();
  id v8 = [self configurationWithPointSize:6 weight:2 scale:15.0];
  swift_bridgeObjectRetain();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [self systemImageNamed:v9];

  if (v10)
  {
    id v11 = [v10 imageWithConfiguration:v8];
  }
  UIButton.Configuration.image.setter();
  id v12 = [self tertiarySystemFillColor];
  UIButton.Configuration.baseBackgroundColor.setter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v4);
  UIButton.Configuration.cornerStyle.setter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for UIButton.Configuration.Size.small(_:), v0);
  UIButton.Configuration.buttonSize.setter();
}

void static UIButton.Configuration.selectedBarButtonConfiguration(imageName:)()
{
  uint64_t v0 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UIButton.Configuration.CornerStyle();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  char v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIButton.Configuration.gray()();
  id v8 = [self configurationWithPointSize:6 weight:2 scale:15.0];
  swift_bridgeObjectRetain();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [self systemImageNamed:v9];

  if (v10)
  {
    id v11 = [v10 imageWithConfiguration:v8];
  }
  UIButton.Configuration.image.setter();
  id v12 = self;
  id v13 = [v12 tintColor];
  UIButton.Configuration.baseBackgroundColor.setter();
  id v14 = [v12 systemBackgroundColor];
  UIButton.Configuration.baseForegroundColor.setter();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v4);
  UIButton.Configuration.cornerStyle.setter();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for UIButton.Configuration.Size.small(_:), v0);
  UIButton.Configuration.buttonSize.setter();
}

id thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @guaranteed [UIMenuElement]?) -> (@owned UIMenu?)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = *(uint64_t (**)(long long *, uint64_t))(a1 + 32);
  if (a2)
  {
    *((void *)&v9 + 1) = swift_getObjectType();
    *(void *)&long long v8 = a2;
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  long long v8 = 0u;
  long long v9 = 0u;
  if (a3)
  {
LABEL_3:
    type metadata accessor for UIMenu(0, &_sSo13UIMenuElementCML_0);
    uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
LABEL_4:
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v6 = (void *)v5(&v8, v3);
  swift_release();
  swift_bridgeObjectRelease();
  _sypSgWOh_1((uint64_t)&v8);

  return v6;
}

id static UIBarButtonItem.contextBarButtonItem(_:)(uint64_t a1, uint64_t a2)
{
  id v2 = specialized static UIButton.contextBarButton(_:)(a1, a2);
  id v3 = [objc_allocWithZone((Class)UIBarButtonItem) initWithCustomView:v2];

  return v3;
}

uint64_t UITraitCollection.isAccessibilitySizeCategory.getter()
{
  id v1 = [v0 preferredContentSizeCategory];
  char v2 = UIContentSizeCategory.isAccessibilityCategory.getter();

  return v2 & 1;
}

Swift::Bool __swiftcall UIViewController.scrollToTopIfPossible()()
{
  id v1 = [v0 contentScrollView];
  if (!v1) {
    return 0;
  }
  char v2 = v1;
  unsigned __int8 v3 = [v1 _scrollToTopIfPossible:1];

  return v3;
}

Swift::Bool __swiftcall UIViewController.focusOnSearchBarIfPossible()()
{
  id v1 = [v0 navigationItem];
  id v2 = [v1 searchController];

  if (!v2) {
    return 0;
  }
  id v3 = [v2 searchBar];
  unsigned int v4 = [v3 canBecomeFirstResponder];

  if (v4)
  {
    id v5 = [v2 searchBar];
    unsigned __int8 v6 = [v5 becomeFirstResponder];

    id v2 = v5;
  }
  else
  {
    unsigned __int8 v6 = 0;
  }

  return v6;
}

id static UIKeyCommand.findKeyCommand(affecting:)()
{
  type metadata accessor for Locale();
  __chkstk_darwin();
  uint64_t v0 = type metadata accessor for String.LocalizationValue();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  id v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  id v5 = &v13[-v4];
  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for UIKeyCommand);
  swift_retain();
  String.LocalizationValue.init(stringLiteral:)();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v1 + 16))(v3, v5, v0);
  if (one-time initialization token for module != -1) {
    swift_once();
  }
  id v7 = (id)static NSBundle.module;
  static Locale.current.getter();
  uint64_t v8 = String.init(localized:table:bundle:locale:comment:)();
  uint64_t v10 = v9;
  (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v5, v0);
  id v11 = UIKeyCommand.init(title:input:modifierFlags:handler:)(v8, v10, 102, 0xE100000000000000, 1572864, (uint64_t)partial apply for closure #1 in static UIKeyCommand.findKeyCommand(affecting:), v6);
  swift_release();
  return v11;
}

void closure #1 in static UIKeyCommand.findKeyCommand(affecting:)()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    [Strong setActive:1];
    id v2 = [v1 searchBar];
    [v2 becomeFirstResponder];

    uint64_t v3 = UISearchController.searchText.getter();
    if (v4)
    {
      uint64_t v5 = v3;
      unint64_t v6 = v4;
      swift_bridgeObjectRelease();
      uint64_t v7 = HIBYTE(v6) & 0xF;
      if ((v6 & 0x2000000000000000) == 0) {
        uint64_t v7 = v5 & 0xFFFFFFFFFFFFLL;
      }
      if (v7)
      {
        id v8 = [v1 searchBar];
        id v9 = [v8 searchTextField];

        [v9 selectAll:v1];
      }
    }
  }
}

uint64_t UISearchController.searchText.getter()
{
  uint64_t v1 = type metadata accessor for CharacterSet();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  unint64_t v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [v0 searchBar];
  id v6 = [v5 text];

  if (!v6) {
    return 0;
  }
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  v15[0] = v7;
  v15[1] = v9;
  static CharacterSet.newlines.getter();
  _sS2SSysWl_1();
  uint64_t v10 = StringProtocol.trimmingCharacters(in:)();
  unint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_bridgeObjectRelease();
  uint64_t v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
  }
  if (!v13)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v10;
}

id static UIKeyCommand.findKeyCommand(_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Locale();
  __chkstk_darwin();
  uint64_t v4 = type metadata accessor for String.LocalizationValue();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  uint64_t v9 = &v15[-v8];
  type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for UIKeyCommand);
  String.LocalizationValue.init(stringLiteral:)();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 16))(v7, v9, v4);
  if (one-time initialization token for module != -1) {
    swift_once();
  }
  id v10 = (id)static NSBundle.module;
  static Locale.current.getter();
  uint64_t v11 = String.init(localized:table:bundle:locale:comment:)();
  uint64_t v13 = v12;
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v9, v4);
  swift_retain();
  return UIKeyCommand.init(title:input:modifierFlags:handler:)(v11, v13, 102, 0xE100000000000000, 1572864, a1, a2);
}

id UIKeyCommand.init(title:input:modifierFlags:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [ObjCClassFromMetadata keyCommandWithInput:v11 modifierFlags:a5 action:"music_handleKeyCommand:"];

  id v13 = v12;
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v13 setTitle:v14];

  uint64_t v15 = one-time initialization token for Handling;
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  Swift::String v16 = (const void *)static UIKeyCommand.KeyCommandAssociatedKeys.Handling;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a6;
  *(void *)(v17 + 24) = a7;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  Swift::String v18 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  objc_setAssociatedObject(v13, v16, v18, (void *)3);

  swift_unknownObjectRelease();
  swift_release_n();
  return v13;
}

uint64_t UIKeyCommand.handler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for Handling != -1) {
    swift_once();
  }
  uint64_t v6 = (const void *)static UIKeyCommand.KeyCommandAssociatedKeys.Handling;
  if (a1)
  {
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = a1;
    *(void *)(v7 + 24) = a2;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
    uint64_t v8 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  }
  else
  {
    uint64_t v8 = 0;
  }
  objc_setAssociatedObject(v3, v6, v8, (void *)3);
  outlined consume of (@escaping @callee_guaranteed () -> ())?(a1);
  return swift_unknownObjectRelease();
}

uint64_t (*UIKeyCommand.handler.getter())(uint64_t a1)
{
  if (one-time initialization token for Handling != -1) {
    swift_once();
  }
  if (objc_getAssociatedObject(v0, (const void *)static UIKeyCommand.KeyCommandAssociatedKeys.Handling))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v3, 0, sizeof(v3));
  }
  _sypSgWOb_2((uint64_t)v3, (uint64_t)v4);
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
    if (swift_dynamicCast())
    {
      *(_OWORD *)(swift_allocObject() + 16) = v2;
      return partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed UIKeyCommand) -> (@out ());
    }
  }
  else
  {
    _sypSgWOh_1((uint64_t)v4);
  }
  return 0;
}

void (*UIKeyCommand.handler.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  id v3[4] = v1;
  *uint64_t v3 = UIKeyCommand.handler.getter();
  v3[1] = v4;
  return UIKeyCommand.handler.modify;
}

void UIKeyCommand.handler.modify(uint64_t **a1, char a2)
{
  long long v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  if (a2)
  {
    outlined copy of (@escaping @callee_guaranteed () -> ())?(**a1);
    if (one-time initialization token for Handling != -1) {
      swift_once();
    }
    uint64_t v5 = (const void *)static UIKeyCommand.KeyCommandAssociatedKeys.Handling;
    if (v4)
    {
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = v4;
      *(void *)(v6 + 24) = v3;
      _OWORD v2[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed UIKeyCommand) -> ()partial apply;
      _OWORD v2[3] = v6;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
      uint64_t v7 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    }
    else
    {
      uint64_t v7 = 0;
    }
    objc_setAssociatedObject((id)v2[4], v5, v7, (void *)3);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v4);
    swift_unknownObjectRelease();
    outlined consume of (@escaping @callee_guaranteed () -> ())?(*v2);
  }
  else
  {
    if (one-time initialization token for Handling != -1) {
      swift_once();
    }
    uint64_t v8 = (const void *)static UIKeyCommand.KeyCommandAssociatedKeys.Handling;
    if (v4)
    {
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v4;
      *(void *)(v9 + 24) = v3;
      _OWORD v2[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed UIKeyCommand) -> ()partial apply;
      _OWORD v2[3] = v9;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
      id v10 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    }
    else
    {
      id v10 = 0;
    }
    objc_setAssociatedObject((id)v2[4], v8, v10, (void *)3);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v4);
    swift_unknownObjectRelease();
  }

  free(v2);
}

uint64_t one-time initialization function for Handling()
{
  uint64_t result = swift_slowAlloc();
  static UIKeyCommand.KeyCommandAssociatedKeys.Handling = result;
  return result;
}

id UIKeyCommand.pioritizedOverSystemBehavior(_:)(char a1)
{
  [v1 setWantsPriorityOverSystemBehavior:a1 & 1];

  return v3;
}

void @objc UIKeyCommand.music_handleKeyCommand(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v7 = a1;
  uint64_t v5 = UIKeyCommand.handler.getter();
  if (v5)
  {
    uint64_t v6 = (uint64_t)v5;
    v5((uint64_t)v4);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v6);
  }
}

id UIFont.monospacedDigits()()
{
  swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIFontDescriptorFeatureKey, Any)>);
  uint64_t inited = swift_initStackObject();
  long long v2 = (void *)UIFontFeatureTypeIdentifierKey_ForNewSwiftAPI;
  *(void *)(inited + 32) = UIFontFeatureTypeIdentifierKey_ForNewSwiftAPI;
  *(void *)(inited + 40) = 6;
  *(_OWORD *)(inited + 16) = xmmword_100493D00;
  id v3 = (void *)UIFontFeatureSelectorIdentifierKey_ForNewSwiftAPI;
  *(void *)(inited + 64) = &type metadata for Int;
  *(void *)(inited + 72) = v3;
  *(void *)(inited + 104) = &type metadata for Int;
  *(void *)(inited + 80) = 0;
  id v4 = v2;
  id v5 = v3;
  unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(inited, &demangling cache variable for type metadata for _DictionaryStorage<UIFontDescriptorFeatureKey, Any>, &demangling cache variable for type metadata for (UIFontDescriptorFeatureKey, Any), (uint64_t (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
  id v7 = [v0 fontDescriptor];
  __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCySo29UIFontDescriptorAttributeNamea_yptGMD_0);
  uint64_t v8 = swift_initStackObject();
  *(_OWORD *)(v8 + 16) = xmmword_100493400;
  *(void *)(v8 + 32) = UIFontDescriptorFeatureSettingsAttribute;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[UIFontDescriptorFeatureKey : Any]>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100493400;
  *(void *)(v9 + 32) = v6;
  *(void *)(v8 + 64) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[UIFontDescriptorFeatureKey : Any]]);
  *(void *)(v8 + 40) = v9;
  id v10 = UIFontDescriptorFeatureSettingsAttribute;
  specialized Dictionary.init(dictionaryLiteral:)(v8, &_ss18_DictionaryStorageCySo29UIFontDescriptorAttributeNameaypGMD_0, &_sSo29UIFontDescriptorAttributeNamea_yptMD_0, (uint64_t (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
  _sSo29UIFontDescriptorAttributeNameaMa_0(0);
  _sSo29UIFontDescriptorAttributeNameaABSHSCWl_0();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v12 = [v7 fontDescriptorByAddingAttributes:isa];

  id v13 = [(id)swift_getObjCClassFromMetadata() fontWithDescriptor:v12 size:0.0];
  return v13;
}

id specialized static UIButton.contextBarButton(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = a2;
  uint64_t v44 = a1;
  type metadata accessor for Locale();
  __chkstk_darwin();
  char v41 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for String.LocalizationValue();
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  __chkstk_darwin();
  uint64_t v39 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  id v40 = (char *)&v34 - v5;
  uint64_t v38 = type metadata accessor for UIButton.Configuration.Size();
  uint64_t v6 = *(void *)(v38 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for UIButton.Configuration.CornerStyle();
  uint64_t v9 = *(void *)(v36 - 8);
  __chkstk_darwin();
  NSString v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for UIButton.Configuration();
  uint64_t v12 = *(void *)(v37 - 8);
  __chkstk_darwin();
  NSString v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  Swift::String v16 = (char *)&v34 - v15;
  static UIButton.Configuration.gray()();
  id v17 = [self configurationWithPointSize:6 weight:2 scale:15.0];
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [self systemImageNamed:v18];

  if (v19)
  {
    id v20 = [v19 imageWithConfiguration:v17];
  }
  type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for UIButton);
  UIButton.Configuration.image.setter();
  id v21 = [self tertiarySystemFillColor];
  UIButton.Configuration.baseBackgroundColor.setter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v36);
  UIButton.Configuration.cornerStyle.setter();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for UIButton.Configuration.Size.small(_:), v38);
  UIButton.Configuration.buttonSize.setter();

  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v14, v37);
  Swift::String v22 = (void *)UIButton.init(configuration:primaryAction:)();
  [v22 setShowsMenuAsPrimaryAction:1];
  Swift::String v23 = v40;
  String.LocalizationValue.init(stringLiteral:)();
  uint64_t v25 = v42;
  uint64_t v24 = v43;
  (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v23, v43);
  if (one-time initialization token for module != -1) {
    swift_once();
  }
  id v26 = (id)static NSBundle.module;
  static Locale.current.getter();
  String.init(localized:table:bundle:locale:comment:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v23, v24);
  id v27 = v22;
  NSString v28 = String._bridgeToObjectiveC()();
  [v27 setAccessibilityLabel:v28];

  id v29 = v27;
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v29 setLargeContentTitle:v30];

  [v29 setShowsLargeContentViewer:1];
  uint64_t v31 = v44;
  if (v44)
  {
    aBlock[4] = v44;
    uint64_t aBlock[5] = v35;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @guaranteed [UIMenuElement]?) -> (@owned UIMenu?);
    aBlock[3] = &block_descriptor_48;
    uint64_t v32 = _Block_copy(aBlock);
    swift_retain_n();
    swift_release();
    [v29 _setMenuProvider:v32];
    _Block_release(v32);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v31);
  }
  return v29;
}

uint64_t sub_1002FABD8()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void partial apply for closure #1 in static UIKeyCommand.findKeyCommand(affecting:)()
{
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed UIKeyCommand) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed UIKeyCommand) -> (@out ())(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_1002FAC7C()
{
  swift_release();

  return swift_deallocObject();
}

unint64_t _sSo29UIFontDescriptorAttributeNameaABSHSCWl_0()
{
  unint64_t result = _sSo29UIFontDescriptorAttributeNameaABSHSCWL_0;
  if (!_sSo29UIFontDescriptorAttributeNameaABSHSCWL_0)
  {
    _sSo29UIFontDescriptorAttributeNameaMa_0(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&_sSo29UIFontDescriptorAttributeNameaABSHSCWL_0);
  }
  return result;
}

uint64_t block_copy_helper_46(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_46()
{
  return swift_release();
}

uint64_t *UIView.Border.artwork.unsafeMutableAddressor()
{
  if (one-time initialization token for artwork != -1) {
    swift_once();
  }
  return &static UIView.Border.artwork;
}

uint64_t UIView.Corner.medium.unsafeMutableAddressor()
{
  return UIView.Corner.medium.unsafeMutableAddressor(&one-time initialization token for medium, (uint64_t)static UIView.Corner.medium);
}

uint64_t UIView.Corner.small.unsafeMutableAddressor()
{
  return UIView.Corner.medium.unsafeMutableAddressor(&one-time initialization token for small, (uint64_t)static UIView.Corner.small);
}

void one-time initialization function for artwork()
{
  id v0 = objc_allocWithZone((Class)UIColor);
  v5[4] = closure #1 in variable initialization expression of static UIView.Border.artwork;
  void v5[5] = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  _OWORD v5[2] = thunk for @escaping @callee_guaranteed (@guaranteed UITraitCollection) -> (@owned UIColor);
  _OWORD v5[3] = &block_descriptor_49;
  uint64_t v1 = _Block_copy(v5);
  [v0 initWithDynamicProvider:v1];
  _Block_release(v1);
  swift_release();
  UIView.Border.init(thickness:color:)();
  static UIView.Border.artwork = v2;
  byte_1005ADE08 = v3 & 1;
  qword_1005ADE10 = v4;
}

id closure #1 in variable initialization expression of static UIView.Border.artwork(void *a1)
{
  id v1 = [a1 userInterfaceStyle];
  id v2 = objc_allocWithZone((Class)UIColor);
  double v3 = 0.0;
  if (v1 == (id)2) {
    double v3 = 1.0;
  }

  return [v2 initWithWhite:v3 alpha:0.1];
}

uint64_t static UIView.Border.artwork.getter()
{
  if (one-time initialization token for artwork != -1) {
    swift_once();
  }
  uint64_t v0 = static UIView.Border.artwork;
  id v1 = (id)qword_1005ADE10;
  return v0;
}

void one-time initialization function for isVision()
{
  id v0 = [self currentDevice];
  id v1 = [v0 userInterfaceIdiom];

  static UIView.Corner.isVision = v1 == (id)6;
}

{
  id v0;
  id v1;

  id v0 = [self currentDevice];
  id v1 = [v0 userInterfaceIdiom];

  static Corner.isVision = v1 == (id)6;
}

{
  id v0;
  id v1;

  id v0 = [self currentTraitCollection];
  id v1 = [v0 userInterfaceIdiom];

  static Card.DisplayStyle.Specs.CloseButton.isVision = v1 == (id)6;
}

{
  id v0;
  id v1;

  id v0 = [self currentTraitCollection];
  id v1 = [v0 userInterfaceIdiom];

  static Collaboration.Management.View.Specs.isVision = v1 == (id)6;
}

{
  id v0;
  id v1;

  id v0 = [self currentTraitCollection];
  id v1 = [v0 userInterfaceIdiom];

  static Collaboration.Flow.Specs.isVision = v1 == (id)6;
}

uint64_t one-time initialization function for extraSmall()
{
  uint64_t v0 = type metadata accessor for UIView.Corner();
  __swift_allocate_value_buffer(v0, static UIView.Corner.extraSmall);
  __swift_project_value_buffer(v0, (uint64_t)static UIView.Corner.extraSmall);
  if (one-time initialization token for isVision != -1) {
    swift_once();
  }
  return static UIView.Corner.value(_:continuous:)();
}

{
  uint64_t v0;
  uint64_t result;

  if (one-time initialization token for isVision != -1) {
    unint64_t result = swift_once();
  }
  uint64_t v0 = 0x4008000000000000;
  if (static Corner.isVision) {
    uint64_t v0 = 0x4018000000000000;
  }
  static Corner.extraSmall = v0;
  *(void *)algn_1005AE8B8 = -1;
  byte_1005AE8C0 = 0;
  return result;
}

uint64_t UIView.Corner.extraSmall.unsafeMutableAddressor()
{
  return UIView.Corner.medium.unsafeMutableAddressor(&one-time initialization token for extraSmall, (uint64_t)static UIView.Corner.extraSmall);
}

uint64_t static UIView.Corner.extraSmall.getter@<X0>(uint64_t a1@<X8>)
{
  return static UIView.Corner.extraSmall.getter(&one-time initialization token for extraSmall, (uint64_t)static UIView.Corner.extraSmall, a1);
}

uint64_t one-time initialization function for small()
{
  uint64_t v0 = type metadata accessor for UIView.Corner();
  __swift_allocate_value_buffer(v0, static UIView.Corner.small);
  __swift_project_value_buffer(v0, (uint64_t)static UIView.Corner.small);
  if (one-time initialization token for isVision != -1) {
    swift_once();
  }
  return static UIView.Corner.value(_:continuous:)();
}

{
  uint64_t v0;
  uint64_t result;

  if (one-time initialization token for isVision != -1) {
    unint64_t result = swift_once();
  }
  uint64_t v0 = 0x4014000000000000;
  if (static Corner.isVision) {
    uint64_t v0 = 0x4020000000000000;
  }
  static Corner.small = v0;
  unk_1005AE8D0 = -1;
  byte_1005AE8D8 = 0;
  return result;
}

uint64_t static UIView.Corner.small.getter@<X0>(uint64_t a1@<X8>)
{
  return static UIView.Corner.extraSmall.getter(&one-time initialization token for small, (uint64_t)static UIView.Corner.small, a1);
}

uint64_t one-time initialization function for medium()
{
  uint64_t v0 = type metadata accessor for UIView.Corner();
  __swift_allocate_value_buffer(v0, static UIView.Corner.medium);
  __swift_project_value_buffer(v0, (uint64_t)static UIView.Corner.medium);
  if (one-time initialization token for isVision != -1) {
    swift_once();
  }
  return static UIView.Corner.value(_:continuous:)();
}

{
  uint64_t v0;
  uint64_t result;

  if (one-time initialization token for isVision != -1) {
    unint64_t result = swift_once();
  }
  uint64_t v0 = 0x4020000000000000;
  if (static Corner.isVision) {
    uint64_t v0 = 0x4024000000000000;
  }
  static Corner.medium = v0;
  *(void *)algn_1005AE8E8 = -1;
  byte_1005AE8F0 = 0;
  return result;
}

uint64_t static UIView.Corner.medium.getter@<X0>(uint64_t a1@<X8>)
{
  return static UIView.Corner.extraSmall.getter(&one-time initialization token for medium, (uint64_t)static UIView.Corner.medium, a1);
}

uint64_t one-time initialization function for large()
{
  uint64_t v0 = type metadata accessor for UIView.Corner();
  __swift_allocate_value_buffer(v0, static UIView.Corner.large);
  __swift_project_value_buffer(v0, (uint64_t)static UIView.Corner.large);
  if (one-time initialization token for isVision != -1) {
    swift_once();
  }
  return static UIView.Corner.value(_:continuous:)();
}

{
  uint64_t v0;
  uint64_t result;

  if (one-time initialization token for isVision != -1) {
    unint64_t result = swift_once();
  }
  uint64_t v0 = 0x4024000000000000;
  if (static Corner.isVision) {
    uint64_t v0 = 0x4030000000000000;
  }
  static Corner.large = v0;
  unk_1005AE900 = -1;
  byte_1005AE908 = 0;
  return result;
}

uint64_t UIView.Corner.large.unsafeMutableAddressor()
{
  return UIView.Corner.medium.unsafeMutableAddressor(&one-time initialization token for large, (uint64_t)static UIView.Corner.large);
}

uint64_t static UIView.Corner.large.getter@<X0>(uint64_t a1@<X8>)
{
  return static UIView.Corner.extraSmall.getter(&one-time initialization token for large, (uint64_t)static UIView.Corner.large, a1);
}

uint64_t one-time initialization function for extraLarge()
{
  uint64_t v0 = type metadata accessor for UIView.Corner();
  __swift_allocate_value_buffer(v0, static UIView.Corner.extraLarge);
  __swift_project_value_buffer(v0, (uint64_t)static UIView.Corner.extraLarge);
  if (one-time initialization token for isVision != -1) {
    swift_once();
  }
  return static UIView.Corner.value(_:continuous:)();
}

{
  uint64_t v0;
  uint64_t result;

  if (one-time initialization token for isVision != -1) {
    unint64_t result = swift_once();
  }
  uint64_t v0 = 0x402C000000000000;
  if (static Corner.isVision) {
    uint64_t v0 = 0x4038000000000000;
  }
  static Corner.extraLarge = v0;
  *(void *)algn_1005AE918 = -1;
  byte_1005AE920 = 0;
  return result;
}

uint64_t UIView.Corner.extraLarge.unsafeMutableAddressor()
{
  return UIView.Corner.medium.unsafeMutableAddressor(&one-time initialization token for extraLarge, (uint64_t)static UIView.Corner.extraLarge);
}

uint64_t UIView.Corner.medium.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for UIView.Corner();

  return __swift_project_value_buffer(v3, a2);
}

uint64_t static UIView.Corner.extraLarge.getter@<X0>(uint64_t a1@<X8>)
{
  return static UIView.Corner.extraSmall.getter(&one-time initialization token for extraLarge, (uint64_t)static UIView.Corner.extraLarge, a1);
}

uint64_t static UIView.Corner.extraSmall.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for UIView.Corner();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t block_copy_helper_47(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_47()
{
  return swift_release();
}

uint64_t one-time initialization function for prominentTextColor(uint64_t a1)
{
  return one-time initialization function for solidSecondarySystemFill(a1, (uint64_t)closure #1 in variable initialization expression of static HI.Color.prominentTextColor, (uint64_t)&block_descriptor_3_8, &static HI.Color.prominentTextColor);
}

id closure #1 in variable initialization expression of static HI.Color.prominentTextColor(void *a1)
{
  return closure #1 in variable initialization expression of static HI.Color.prominentTextColor(a1, 224, 9, 33);
}

void *HI.Color.prominentTextColor.unsafeMutableAddressor()
{
  if (one-time initialization token for prominentTextColor != -1) {
    swift_once();
  }
  return &static HI.Color.prominentTextColor;
}

id static HI.Color.prominentTextColor.getter()
{
  return static ApplicationCapabilities.NotificationNames.allowsiTunesContentDidChange.getter(&one-time initialization token for prominentTextColor, (void **)&static HI.Color.prominentTextColor);
}

uint64_t one-time initialization function for prominentBackgroundColor(uint64_t a1)
{
  return one-time initialization function for solidSecondarySystemFill(a1, (uint64_t)closure #1 in variable initialization expression of static HI.Color.prominentBackgroundColor, (uint64_t)&block_descriptor_50, &static HI.Color.prominentBackgroundColor);
}

id closure #1 in variable initialization expression of static HI.Color.prominentBackgroundColor(void *a1)
{
  return closure #1 in variable initialization expression of static HI.Color.prominentTextColor(a1, 250, 35, 59);
}

id closure #1 in variable initialization expression of static HI.Color.prominentTextColor(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = [a1 userInterfaceStyle];
  type metadata accessor for UIColor();
  if (v7 == (id)2)
  {
    uint64_t v8 = 250;
    uint64_t v9 = 45;
    uint64_t v10 = 72;
  }
  else
  {
    uint64_t v8 = a2;
    uint64_t v9 = a3;
    uint64_t v10 = a4;
  }
  return UIColor.init(decimalRed:decimalGreen:decimalBlue:alpha:)(v8, v9, v10, 1.0);
}

void *HI.Color.prominentBackgroundColor.unsafeMutableAddressor()
{
  if (one-time initialization token for prominentBackgroundColor != -1) {
    swift_once();
  }
  return &static HI.Color.prominentBackgroundColor;
}

id static HI.Color.prominentBackgroundColor.getter()
{
  return static ApplicationCapabilities.NotificationNames.allowsiTunesContentDidChange.getter(&one-time initialization token for prominentBackgroundColor, (void **)&static HI.Color.prominentBackgroundColor);
}

ValueMetadata *type metadata accessor for HI.Color()
{
  return &type metadata for HI.Color;
}

uint64_t block_copy_helper_48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_48()
{
  return swift_release();
}

double HI.SizeClass.rawValue.getter(char a1)
{
  return dbl_1004A6700[a1];
}

double HI.SizeClass.gutter.getter(char a1)
{
  return dbl_1004A65E0[a1];
}

double HI.SizeClass.margin.getter(char a1)
{
  return dbl_1004A6620[a1];
}

double HI.SizeClass.peek.getter()
{
  return 36.0;
}

_UNKNOWN **static HI.SizeClass.allCases.getter()
{
  return &outlined read-only object #0 of static HI.SizeClass.allCases.getter;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance HI.SizeClass(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance HI.SizeClass@<X0>(double *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized HI.SizeClass.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

double protocol witness for RawRepresentable.rawValue.getter in conformance HI.SizeClass@<D0>(double *a1@<X8>)
{
  double result = dbl_1004A6700[*v1];
  *a1 = result;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance HI.SizeClass(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static HI.SizeClass.allCases.getter;
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance HI.SizeClass(char *a1, char *a2)
{
  return specialized static HI.SizeClass.< infix(_:_:)(*a1, *a2);
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance HI.SizeClass(char *a1, char *a2)
{
  return specialized static Comparable.<= infix(_:_:)(*a1, *a2);
}

BOOL specialized static Comparable.<= infix(_:_:)(char a1, char a2)
{
  return dbl_1004A6700[a2] >= dbl_1004A6700[a1];
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance HI.SizeClass(char *a1, char *a2)
{
  return specialized static Comparable.>= infix(_:_:)(*a1, *a2);
}

BOOL specialized static Comparable.>= infix(_:_:)(char a1, char a2)
{
  return dbl_1004A6700[a1] >= dbl_1004A6700[a2];
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance HI.SizeClass(char *a1, char *a2)
{
  return specialized static Comparable.> infix(_:_:)(*a1, *a2);
}

BOOL specialized static Comparable.> infix(_:_:)(char a1, char a2)
{
  return dbl_1004A6700[a2] < dbl_1004A6700[a1];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance HI.SizeClass()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance HI.SizeClass(uint64_t a1)
{
  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HI.SizeClass()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

double HI.SizeClass.columnCount(for:swiping:)(char a1, char a2, char a3)
{
  switch(a3)
  {
    case 1:
      double result = 1.0;
      switch(a1)
      {
        case 1:
          goto LABEL_20;
        case 2:
          double result = 3.0;
          break;
        case 3:
          if (a2) {
            double result = 4.0;
          }
          break;
        default:
          return result;
      }
      return result;
    case 2:
      double result = 3.0;
      switch(a1)
      {
        case 1:
          return result;
        case 2:
          double result = 4.0;
          break;
        case 3:
LABEL_20:
          double result = 2.0;
          break;
        default:
          double result = 1.0;
          if (a2) {
            double result = 3.0;
          }
          break;
      }
      return result;
    case 3:
      uint64_t v3 = a1;
      uint64_t v4 = (double *)&unk_1004A6680;
      return v4[v3];
    case 4:
      uint64_t v3 = a1;
      uint64_t v4 = (double *)&unk_1004A66A0;
      return v4[v3];
    case 5:
      double result = 3.0;
      switch(a1)
      {
        case 1:
          double result = 6.0;
          break;
        case 2:
          double result = 7.0;
          break;
        case 3:
          double result = 5.0;
          if (a2) {
            double result = 9.0;
          }
          break;
        default:
          return result;
      }
      return result;
    case 6:
      double result = 7.0;
      switch(a1)
      {
        case 1:
          return result;
        case 2:
          double result = 8.0;
          break;
        case 3:
          double result = 6.0;
          if (a2) {
            double result = 28.0;
          }
          break;
        default:
          double result = 4.0;
          if (a2) {
            double result = 7.0;
          }
          break;
      }
      return result;
    case 7:
      double result = 5.0;
      switch(a1)
      {
        case 1:
          double result = 10.0;
          break;
        case 2:
          double result = 12.0;
          break;
        case 3:
          double result = 7.0;
          if (a2) {
            double result = 15.0;
          }
          break;
        default:
          return result;
      }
      return result;
    default:
      uint64_t v3 = a1;
      uint64_t v4 = (double *)&unk_1004A6660;
      return v4[v3];
  }
}

double HI.SizeClass.span(for:swiping:)(char a1, char a2, char a3)
{
  switch(a3)
  {
    case 1:
      if (a1 != 3) {
        return 1.0;
      }
      double result = 3.0;
      if ((a2 & 1) == 0) {
        return 1.0;
      }
      return result;
    case 2:
      if (!a1) {
        goto LABEL_11;
      }
      return 1.0;
    case 5:
    case 7:
      if (a1 != 3) {
        return 1.0;
      }
      goto LABEL_11;
    case 6:
      if (a1 != 3)
      {
        if (!a1)
        {
LABEL_11:
          double result = 2.0;
          if (a2) {
            return result;
          }
        }
        return 1.0;
      }
      double result = 5.0;
      if ((a2 & 1) == 0) {
        return 1.0;
      }
      return result;
    default:
      return 1.0;
  }
}

_UNKNOWN **static HI.Grid.Variant.allCases.getter()
{
  return &outlined read-only object #0 of static HI.Grid.Variant.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance HI.Grid.Variant(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance HI.Grid.Variant;
}

uint64_t Lyrics.TextLine.agentAlignment.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t Lyrics.TextLine.direction.getter()
{
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t Lyrics.TextLine.lyricsDirection.getter()
{
  return *(unsigned __int8 *)(v0 + 26);
}

double Lyrics.TextLine.primaryVocalsStartTime.getter()
{
  return *(double *)(v0 + 40);
}

double Lyrics.TextLine.primaryVocalsEndTime.getter()
{
  return *(double *)(v0 + 48);
}

void HI.Grid.Metrics.init(width:variant:swiping:isAccessibilitySize:)(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  if (a5 <= 374.0)
  {
    char v13 = 0;
    double v10 = 10.0;
    double v11 = 16.0;
    goto LABEL_19;
  }
  double v10 = 12.0;
  double v11 = 20.0;
  if (a5 <= 500.0)
  {
    char v13 = 1;
    goto LABEL_19;
  }
  if (a5 <= 726.0)
  {
    char v13 = 2;
    goto LABEL_19;
  }
  double v10 = 20.0;
  if (a5 <= 981.0)
  {
    char v13 = 3;
LABEL_18:
    double v11 = 34.0;
    goto LABEL_19;
  }
  if (a5 <= 1194.0)
  {
    char v13 = 4;
    goto LABEL_18;
  }
  if (a5 <= 2500.0) {
    char v12 = 6;
  }
  else {
    char v12 = 7;
  }
  if (a5 > 1500.0) {
    char v13 = v12;
  }
  else {
    char v13 = 5;
  }
  double v11 = 34.0;
LABEL_19:
  double v14 = a5 - (v11 + v11);
  if (a3)
  {
    id v15 = [objc_allocWithZone((Class)UIFontMetrics) initForTextStyle:UIFontTextStyleBody];
    [v15 scaledValueForValue:1.0];
    double v17 = v16;

    double v18 = round(HI.SizeClass.columnCount(for:swiping:)(a1, a2 & 1, v13) * (1.0 / (v17 * 0.7)));
  }
  else
  {
    double v18 = HI.SizeClass.columnCount(for:swiping:)(a1, a2 & 1, v13);
  }
  char v19 = a2 & 1;
  double v20 = HI.SizeClass.span(for:swiping:)(a1, v19, v13);
  double v21 = v20 * ((v14 - v10 * (v18 + -1.0)) / v18);
  double v22 = v20 + -1.0;
  double v23 = v10 * v22;
  BOOL v24 = v22 <= 0.0;
  double v25 = -0.0;
  if (!v24) {
    double v25 = v23;
  }
  double v26 = v25 + v21;
  *(double *)a4 = a5;
  *(double *)(a4 + 8) = v10;
  *(double *)(a4 + 16) = v11;
  *(unsigned char *)(a4 + 24) = v13;
  BOOL v27 = v18 == 1.0 || v26 > 300.0;
  *(unsigned char *)(a4 + 25) = a1;
  *(unsigned char *)(a4 + 26) = v19;
  *(double *)(a4 + 32) = v14;
  *(double *)(a4 + 40) = v18;
  if ((a3 & 1) == 0) {
    BOOL v27 = 0;
  }
  *(double *)(a4 + 48) = v26;
  *(unsigned char *)(a4 + 56) = v27;
}

void HI.Grid.Metrics.hash(into:)()
{
  if ((*(void *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *(void *)v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((*(void *)(v0 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *(void *)(v0 + 8);
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  if ((*(void *)(v0 + 16) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *(void *)(v0 + 16);
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(qword_1004A66C0[*(char *)(v0 + 24)]);
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 25));
  Hasher._combine(_:)(*(unsigned char *)(v0 + 26) & 1);
  if ((*(void *)(v0 + 32) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)(v0 + 32);
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
  if ((*(void *)(v0 + 40) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = *(void *)(v0 + 40);
  }
  else {
    Swift::UInt64 v5 = 0;
  }
  Hasher._combine(_:)(v5);
  if ((*(void *)(v0 + 48) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = *(void *)(v0 + 48);
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 56) & 1);
}

Swift::Int HI.Grid.Metrics.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HI.Grid.Metrics()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HI.Grid.Metrics(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v6[0] = a1[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a1 + 41);
  long long v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v8[0] = a2[2];
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a2 + 41);
  return specialized static HI.Grid.Metrics.__derived_struct_equals(_:_:)((uint64_t)v5, (uint64_t)v7) & 1;
}

const char *HI.IndexBar.NumberOfItemsRequirement.artists.unsafeMutableAddressor()
{
  return "2";
}

uint64_t static HI.IndexBar.NumberOfItemsRequirement.artists.getter()
{
  return 50;
}

const char *HI.IndexBar.NumberOfItemsRequirement.default.unsafeMutableAddressor()
{
  return "d";
}

uint64_t static HI.IndexBar.NumberOfItemsRequirement.default.getter()
{
  return 100;
}

double one-time initialization function for search()
{
  double result = 12.0;
  static Corner.search = xmmword_1004A3C00;
  byte_1005ADEB0 = 0;
  return result;
}

long long *Corner.search.unsafeMutableAddressor()
{
  if (one-time initialization token for search != -1) {
    swift_once();
  }
  return &static Corner.search;
}

uint64_t static Corner.search.getter()
{
  if (one-time initialization token for search != -1) {
    swift_once();
  }
  return static Corner.search;
}

double one-time initialization function for featured()
{
  double result = 16.0;
  static Corner.featured = xmmword_1004A3C10;
  byte_1005ADED0 = 0;
  return result;
}

long long *Corner.featured.unsafeMutableAddressor()
{
  if (one-time initialization token for featured != -1) {
    swift_once();
  }
  return &static Corner.featured;
}

uint64_t static Corner.featured.getter()
{
  if (one-time initialization token for featured != -1) {
    swift_once();
  }
  return static Corner.featured;
}

void one-time initialization function for list()
{
  static HI.HoverOutset.list = 0x4024000000000000;
}

uint64_t *HI.HoverOutset.list.unsafeMutableAddressor()
{
  if (one-time initialization token for list != -1) {
    swift_once();
  }
  return &static HI.HoverOutset.list;
}

double static HI.HoverOutset.list.getter()
{
  return static Artwork.Size.musicVideoAspectRatio.getter(&one-time initialization token for list, (uint64_t)&static HI.HoverOutset.list);
}

void one-time initialization function for grid()
{
  static HI.HoverOutset.grid = 0x4028000000000000;
}

uint64_t *HI.HoverOutset.grid.unsafeMutableAddressor()
{
  if (one-time initialization token for grid != -1) {
    swift_once();
  }
  return &static HI.HoverOutset.grid;
}

double static HI.HoverOutset.grid.getter()
{
  return static Artwork.Size.musicVideoAspectRatio.getter(&one-time initialization token for grid, (uint64_t)&static HI.HoverOutset.grid);
}

void one-time initialization function for text()
{
  static HI.HoverOutset.text = 0x4010000000000000;
}

uint64_t *HI.HoverOutset.text.unsafeMutableAddressor()
{
  if (one-time initialization token for text != -1) {
    swift_once();
  }
  return &static HI.HoverOutset.text;
}

double static HI.HoverOutset.text.getter()
{
  return static Artwork.Size.musicVideoAspectRatio.getter(&one-time initialization token for text, (uint64_t)&static HI.HoverOutset.text);
}

void one-time initialization function for overlappingHeight()
{
  static HI.BottomPlayer.Ornament.overlappingdouble Height = Int.seconds.getter(20);
}

uint64_t *HI.BottomPlayer.Ornament.overlappingHeight.unsafeMutableAddressor()
{
  if (one-time initialization token for overlappingHeight != -1) {
    swift_once();
  }
  return &static HI.BottomPlayer.Ornament.overlappingHeight;
}

double static HI.BottomPlayer.Ornament.overlappingHeight.getter()
{
  return static Artwork.Size.musicVideoAspectRatio.getter(&one-time initialization token for overlappingHeight, (uint64_t)&static HI.BottomPlayer.Ornament.overlappingHeight);
}

double one-time initialization function for offset()
{
  if (one-time initialization token for overlappingHeight != -1) {
    swift_once();
  }
  double result = -*(double *)&static HI.BottomPlayer.Ornament.overlappingHeight;
  static HI.BottomPlayer.Ornament.offset = 0;
  *(double *)&qword_1005ADF00 = -*(double *)&static HI.BottomPlayer.Ornament.overlappingHeight;
  return result;
}

uint64_t *HI.BottomPlayer.Ornament.offset.unsafeMutableAddressor()
{
  if (one-time initialization token for offset != -1) {
    swift_once();
  }
  return &static HI.BottomPlayer.Ornament.offset;
}

double static HI.BottomPlayer.Ornament.offset.getter()
{
  if (one-time initialization token for offset != -1) {
    swift_once();
  }
  return *(double *)&static HI.BottomPlayer.Ornament.offset;
}

double static HI.BottomPlayer.size(dynamicTypeSize:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DynamicTypeSize?);
  __chkstk_darwin();
  long long v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DynamicTypeSize();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  id v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  uint64_t v9 = (char *)&v14 - v8;
  outlined init with copy of DynamicTypeSize?(a1, (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of DynamicTypeSize?((uint64_t)v3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v3, v4);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for DynamicTypeSize.accessibility1(_:), v4);
    lazy protocol witness table accessor for type DynamicTypeSize and conformance DynamicTypeSize();
    char v10 = dispatch thunk of static Comparable.< infix(_:_:)();
    double v11 = *(void (**)(char *, uint64_t))(v5 + 8);
    v11(v7, v4);
    v11(v9, v4);
    if ((v10 & 1) == 0) {
      return 924.0;
    }
  }
  return 784.0;
}

void one-time initialization function for buttonSpacing()
{
  static HI.BottomPlayer.buttonSpacing = Int.seconds.getter(16);
}

uint64_t *HI.BottomPlayer.buttonSpacing.unsafeMutableAddressor()
{
  if (one-time initialization token for buttonSpacing != -1) {
    swift_once();
  }
  return &static HI.BottomPlayer.buttonSpacing;
}

double static HI.BottomPlayer.buttonSpacing.getter()
{
  return static Artwork.Size.musicVideoAspectRatio.getter(&one-time initialization token for buttonSpacing, (uint64_t)&static HI.BottomPlayer.buttonSpacing);
}

void one-time initialization function for contentHorizontalPadding()
{
  static HI.BottomPlayer.contentHorizontalPadding = Int.seconds.getter(16);
}

uint64_t *HI.BottomPlayer.contentHorizontalPadding.unsafeMutableAddressor()
{
  if (one-time initialization token for contentHorizontalPadding != -1) {
    swift_once();
  }
  return &static HI.BottomPlayer.contentHorizontalPadding;
}

double static HI.BottomPlayer.contentHorizontalPadding.getter()
{
  return static Artwork.Size.musicVideoAspectRatio.getter(&one-time initialization token for contentHorizontalPadding, (uint64_t)&static HI.BottomPlayer.contentHorizontalPadding);
}

uint64_t specialized static HI.Grid.Metrics.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && *(double *)(a1 + 16) == *(double *)(a2 + 16)
    && dbl_1004A6700[*(char *)(a1 + 24)] == dbl_1004A6700[*(char *)(a2 + 24)]
    && *(unsigned __int8 *)(a1 + 25) == *(unsigned __int8 *)(a2 + 25)
    && ((*(unsigned __int8 *)(a1 + 26) ^ *(unsigned __int8 *)(a2 + 26)) & 1) == 0
    && *(double *)(a1 + 32) == *(double *)(a2 + 32)
    && *(double *)(a1 + 40) == *(double *)(a2 + 40)
    && *(double *)(a1 + 48) == *(double *)(a2 + 48))
  {
    return (((*(unsigned char *)(a1 + 56) & 1) == 0) ^ *(unsigned __int8 *)(a2 + 56)) & 1;
  }
  else
  {
    return 0;
  }
}

BOOL specialized static HI.SizeClass.< infix(_:_:)(char a1, char a2)
{
  return dbl_1004A6700[a1] < dbl_1004A6700[a2];
}

uint64_t specialized HI.SizeClass.init(_:)(double a1)
{
  if (a1 <= 374.0) {
    return 0;
  }
  if (a1 <= 500.0) {
    return 1;
  }
  if (a1 <= 726.0) {
    return 2;
  }
  if (a1 <= 981.0) {
    return 3;
  }
  if (a1 > 2500.0) {
    int v1 = 7;
  }
  else {
    int v1 = 6;
  }
  if (a1 > 1500.0) {
    unsigned int v2 = v1;
  }
  else {
    unsigned int v2 = 5;
  }
  if (a1 > 1194.0) {
    return v2;
  }
  else {
    return 4;
  }
}

uint64_t specialized HI.SizeClass.init(rawValue:)(double a1)
{
  if (a1 == 374.0) {
    return 0;
  }
  if (a1 == 500.0) {
    return 1;
  }
  if (a1 == 726.0) {
    return 2;
  }
  if (a1 == 981.0) {
    return 3;
  }
  if (a1 == 1194.0) {
    return 4;
  }
  if (a1 == 2501.0) {
    int v2 = 7;
  }
  else {
    int v2 = 8;
  }
  if (a1 == 2500.0) {
    unsigned int v3 = 6;
  }
  else {
    unsigned int v3 = v2;
  }
  if (a1 == 1500.0) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t outlined init with copy of DynamicTypeSize?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DynamicTypeSize?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DynamicTypeSize?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DynamicTypeSize?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type DynamicTypeSize and conformance DynamicTypeSize()
{
  unint64_t result = lazy protocol witness table cache variable for type DynamicTypeSize and conformance DynamicTypeSize;
  if (!lazy protocol witness table cache variable for type DynamicTypeSize and conformance DynamicTypeSize)
  {
    type metadata accessor for DynamicTypeSize();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DynamicTypeSize and conformance DynamicTypeSize);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in HI.SizeClass()
{
  return lazy protocol witness table accessor for type [Player.PlaybackCommand] and conformance [A](&lazy protocol witness table cache variable for type [HI.SizeClass] and conformance [A], &demangling cache variable for type metadata for [HI.SizeClass]);
}

unint64_t lazy protocol witness table accessor for type HI.SizeClass and conformance HI.SizeClass()
{
  unint64_t result = lazy protocol witness table cache variable for type HI.SizeClass and conformance HI.SizeClass;
  if (!lazy protocol witness table cache variable for type HI.SizeClass and conformance HI.SizeClass)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HI.SizeClass and conformance HI.SizeClass);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in HI.Grid.Variant()
{
  return lazy protocol witness table accessor for type [Player.PlaybackCommand] and conformance [A](&lazy protocol witness table cache variable for type [HI.Grid.Variant] and conformance [A], &demangling cache variable for type metadata for [HI.Grid.Variant]);
}

unint64_t lazy protocol witness table accessor for type HI.Grid.Variant and conformance HI.Grid.Variant()
{
  unint64_t result = lazy protocol witness table cache variable for type HI.Grid.Variant and conformance HI.Grid.Variant;
  if (!lazy protocol witness table cache variable for type HI.Grid.Variant and conformance HI.Grid.Variant)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HI.Grid.Variant and conformance HI.Grid.Variant);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HI.Grid.Metrics and conformance HI.Grid.Metrics()
{
  unint64_t result = lazy protocol witness table cache variable for type HI.Grid.Metrics and conformance HI.Grid.Metrics;
  if (!lazy protocol witness table cache variable for type HI.Grid.Metrics and conformance HI.Grid.Metrics)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HI.Grid.Metrics and conformance HI.Grid.Metrics);
  }
  return result;
}

ValueMetadata *type metadata accessor for HI()
{
  return &type metadata for HI;
}

unsigned char *__swift_memcpy1_1_2(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

unsigned char *storeEnumTagSinglePayload for HI.SizeClass(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002FCEF0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HI.SizeClass()
{
  return &type metadata for HI.SizeClass;
}

ValueMetadata *type metadata accessor for HI.Grid()
{
  return &type metadata for HI.Grid;
}

unsigned char *storeEnumTagSinglePayload for HI.Grid.Variant(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002FD004);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HI.Grid.Variant()
{
  return &type metadata for HI.Grid.Variant;
}

__n128 __swift_memcpy57_8_0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for HI.Grid.Metrics(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 26);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HI.Grid.Metrics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 26) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HI.Grid.Metrics()
{
  return &type metadata for HI.Grid.Metrics;
}

ValueMetadata *type metadata accessor for HI.IndexBar()
{
  return &type metadata for HI.IndexBar;
}

ValueMetadata *type metadata accessor for HI.IndexBar.NumberOfItemsRequirement()
{
  return &type metadata for HI.IndexBar.NumberOfItemsRequirement;
}

ValueMetadata *type metadata accessor for HI.HoverOutset()
{
  return &type metadata for HI.HoverOutset;
}

ValueMetadata *type metadata accessor for HI.BottomPlayer()
{
  return &type metadata for HI.BottomPlayer;
}

ValueMetadata *type metadata accessor for HI.BottomPlayer.Ornament()
{
  return &type metadata for HI.BottomPlayer.Ornament;
}

void one-time initialization function for padding()
{
  static HI.Modal.padding = Int.seconds.getter(32);
}

{
  static Card.DisplayStyle.Specs.padding = 0x4018000000000000;
}

double HI.Modal.ModalType.preferredModalSize(forSceneSize:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  id v7 = [self currentTraitCollection];
  id v8 = [v7 userInterfaceIdiom];

  double result = 512.0;
  switch(a4)
  {
    case 1:
    case 4:
      double result = 540.0;
      if (v8 == (id)6) {
        double result = 512.0;
      }
      break;
    case 2:
      double result = 540.0;
      if ((a3 & 1) == 0 && *(double *)&a1 > 1194.0) {
        double result = 712.0;
      }
      break;
    case 3:
      return result;
    default:
      double result = 540.0;
      if (v8 == (id)6) {
        double result = 512.0;
      }
      break;
  }
  return result;
}

double static HI.Modal.modalSize(modalType:sceneSize:canExceedSceneSize:navigationBarHeight:)(char a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  int v7 = a4 & 1;
  double v8 = HI.Modal.ModalType.preferredModalSize(forSceneSize:)(a2, a3, a4 & 1, a1);
  id v9 = [self currentTraitCollection];
  id v10 = [v9 userInterfaceIdiom];

  BOOL v11 = v10 == (id)6 && v7 == 0;
  if (v11 && (a5 & 1) == 0)
  {
    double v12 = *(double *)&a2;
    if (one-time initialization token for padding != -1)
    {
      swift_once();
      double v12 = *(double *)&a2;
    }
    if (v8 + *(double *)&static HI.Modal.padding + *(double *)&static HI.Modal.padding > v12) {
      return v12 - (*(double *)&static HI.Modal.padding + *(double *)&static HI.Modal.padding);
    }
  }
  return v8;
}

unint64_t lazy protocol witness table accessor for type HI.Modal.ModalType and conformance HI.Modal.ModalType()
{
  unint64_t result = lazy protocol witness table cache variable for type HI.Modal.ModalType and conformance HI.Modal.ModalType;
  if (!lazy protocol witness table cache variable for type HI.Modal.ModalType and conformance HI.Modal.ModalType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HI.Modal.ModalType and conformance HI.Modal.ModalType);
  }
  return result;
}

ValueMetadata *type metadata accessor for HI.Modal()
{
  return &type metadata for HI.Modal;
}

unsigned char *storeEnumTagSinglePayload for HI.Modal.ModalType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002FD588);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HI.Modal.ModalType()
{
  return &type metadata for HI.Modal.ModalType;
}

void *_ss15_arrayForceCastySayq_GSayxGr0_lF10Foundation3URLV_AFSgTg5_0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&_s10Foundation3URLVSgMD_1);
  uint64_t v6 = *(void *)(v19 - 8);
  __chkstk_darwin();
  double v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a1 + 16);
  id v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    double v20 = _swiftEmptyArrayStorage;
    _ss15ContiguousArrayV16_createNewBuffer14bufferIsUnique15minimumCapacity13growForAppendySb_SiSbtF10Foundation3URLVSg_Tg5_0(0, v9, 0);
    double v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v17 = *(void *)(v11 + 56);
    double v18 = v12;
    do
    {
      v18(v5, v13, v2);
      swift_dynamicCast();
      id v10 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        _ss15ContiguousArrayV16_createNewBuffer14bufferIsUnique15minimumCapacity13growForAppendySb_SiSbtF10Foundation3URLVSg_Tg5_0(0, v10[2] + 1, 1);
        id v10 = v20;
      }
      unint64_t v15 = v10[2];
      unint64_t v14 = v10[3];
      if (v15 >= v14 >> 1)
      {
        _ss15ContiguousArrayV16_createNewBuffer14bufferIsUnique15minimumCapacity13growForAppendySb_SiSbtF10Foundation3URLVSg_Tg5_0(v14 > 1, v15 + 1, 1);
        id v10 = v20;
      }
      v10[2] = v15 + 1;
      outlined init with take of PresentationSource?((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v15, &_s10Foundation3URLVSgMD_1);
      v13 += v17;
      --v9;
    }
    while (v9);
  }
  return v10;
}

BOOL specialized == infix<A>(_:_:)(char a1, char a2)
{
  return dbl_1004A6F98[a1] == dbl_1004A6F98[a2];
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
    return 0;
  }
  uint64_t v3 = (double *)(a1 + 40);
  uint64_t v4 = (double *)(a2 + 40);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    double v7 = *v3++;
    double v8 = v7;
    double v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    double v9 = a2 + 7;
    for (unint64_t i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

double TimedElement.duration.getter(uint64_t a1, uint64_t a2)
{
  double v4 = (*(double (**)(void))(a2 + 16))();
  return v4 - (*(double (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
}

void TimedElement.timeRange.getter(uint64_t a1, uint64_t a2)
{
  double v4 = (*(double (**)(void))(a2 + 8))();
  if (v4 > (*(double (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2)) {
    __break(1u);
  }
}

double Lyrics.Word.startTime.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (*(void *)(v1 + 16)) {
    return *(double *)(v1 + 32);
  }
  else {
    return 0.0;
  }
}

double Lyrics.Word.endTime.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2) {
    return *(double *)(v1 + 56 * v2 - 16);
  }
  else {
    return 0.0;
  }
}

uint64_t Lyrics.Word.range.getter()
{
  return specialized Lyrics.Word.range.getter(*(void *)(v0 + 16));
}

uint64_t Lyrics.Word.emphasis.getter()
{
  return *(void *)(v0 + 24);
}

double Lyrics.Word.Emphasis.factor.getter(uint64_t a1, char a2)
{
  double result = *(double *)&a1;
  if (a2) {
    return 0.0;
  }
  return result;
}

void Lyrics.Word.Emphasis.hash(into:)(uint64_t a1, Swift::UInt64 a2, char a3)
{
  if (a3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v4 = a2;
    }
    else {
      Swift::UInt64 v4 = 0;
    }
    Hasher._combine(_:)(v4);
  }
}

uint64_t static Lyrics.Word.Emphasis.__derived_enum_equals(_:_:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, unsigned __int8 a4)
{
  if ((a2 | a4)) {
    char v4 = a2 & a4;
  }
  else {
    char v4 = *(double *)&a1 == *(double *)&a3;
  }
  return v4 & 1;
}

Swift::Int Lyrics.Word.Emphasis.hashValue.getter(Swift::UInt64 a1, char a2)
{
  Hasher.init(_seed:)();
  if (a2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v4 = a1;
    }
    else {
      Swift::UInt64 v4 = 0;
    }
    Hasher._combine(_:)(v4);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Lyrics.Word.Emphasis()
{
  return Lyrics.Word.Emphasis.hashValue.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
}

void protocol witness for Hashable.hash(into:) in conformance Lyrics.Word.Emphasis()
{
  if (*(unsigned char *)(v0 + 8))
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v1 = *(void *)v0;
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v2 = v1;
    }
    else {
      Swift::UInt64 v2 = 0;
    }
    Hasher._combine(_:)(v2);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Lyrics.Word.Emphasis()
{
  Swift::UInt64 v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v3 = v1;
    }
    else {
      Swift::UInt64 v3 = 0;
    }
    Hasher._combine(_:)(v3);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Lyrics.Word.Emphasis(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
  uint64_t result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0) {
    return *(double *)a1 == *(double *)a2;
  }
  return result;
}

void Lyrics.Word.hash(into:)(uint64_t a1)
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);
  swift_bridgeObjectRelease();
  outlined init with take of Library.Menu.Request.MediaLibrarySource((uint64_t *)(v1 + 24), (uint64_t)v6);
  outlined init with take of Library.Menu.Request.MediaLibrarySource(v6, (uint64_t)&v7);
  if (v8 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v4 = v7;
    Hasher._combine(_:)(1uLL);
    if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v5 = v4;
    }
    else {
      Swift::UInt64 v5 = 0;
    }
    Hasher._combine(_:)(v5);
  }
}

uint64_t static Lyrics.Word.__derived_struct_equals(_:_:)(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    if (specialized static Array<A>.== infix(_:_:)(a1[2], a2[2]))
    {
      outlined init with take of Library.Menu.Request.MediaLibrarySource(a1 + 3, (uint64_t)v9);
      outlined init with take of Library.Menu.Request.MediaLibrarySource(a2 + 3, (uint64_t)v8);
      outlined init with take of Library.Menu.Request.MediaLibrarySource(v9, (uint64_t)&v10);
      if (v11 == 1)
      {
        outlined init with take of Library.Menu.Request.MediaLibrarySource(v8, (uint64_t)&v12);
        if (v13) {
          return 1;
        }
      }
      else
      {
        double v7 = v10;
        outlined init with take of Library.Menu.Request.MediaLibrarySource(v8, (uint64_t)&v12);
        if ((v13 & 1) == 0 && v7 == v12) {
          return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

Swift::Int Lyrics.Word.hashValue.getter()
{
  Hasher.init(_seed:)();
  Lyrics.Word.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Lyrics.Word()
{
  long long v1 = v0[1];
  long long v4 = *v0;
  long long v5 = v1;
  char v6 = *((unsigned char *)v0 + 32);
  Hasher.init(_seed:)();
  Lyrics.Word.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Lyrics.Word(uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Lyrics.Word()
{
  long long v1 = v0[1];
  long long v4 = *v0;
  long long v5 = v1;
  char v6 = *((unsigned char *)v0 + 32);
  Hasher.init(_seed:)();
  Lyrics.Word.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Lyrics.Word(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  double v3 = *(double *)(a1 + 24);
  int v4 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 16);
  double v6 = *(double *)(a2 + 24);
  int v7 = *(unsigned __int8 *)(a2 + 32);
  BOOL v8 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v8 || (char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v9 & 1) != 0))
  {
    int v11 = specialized static Array<A>.== infix(_:_:)(v2, v5);
    int v12 = v11 ^ 1 | v4;
    if ((v12 | v7)) {
      return v11 & v7 & v12;
    }
    else {
      return v3 == v6;
    }
  }
  return result;
}

uint64_t Lyrics.TextLine.BackgroundVocals.range.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t Lyrics.Syllable.wordLength.getter()
{
  return *(void *)(v0 + 48);
}

void Lyrics.Syllable.hash(into:)()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v0[1];
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  outlined retain of Lyrics.Syllable((uint64_t)v0);
  String.hash(into:)();
  outlined release of CarNowPlayingMetrics.Data?((uint64_t)v0);
  Swift::UInt v3 = v0[5];
  Hasher._combine(_:)(v0[4]);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v0[6]);
}

Swift::Int Lyrics.Syllable.hashValue.getter()
{
  Hasher.init(_seed:)();
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v0[1];
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  outlined retain of Lyrics.Syllable((uint64_t)v0);
  String.hash(into:)();
  outlined release of CarNowPlayingMetrics.Data?((uint64_t)v0);
  Swift::UInt v3 = v0[5];
  Hasher._combine(_:)(v0[4]);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v0[6]);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Lyrics.Syllable()
{
  return Lyrics.Syllable.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance Lyrics.Syllable()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Lyrics.Syllable()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Swift::UInt v3 = v0[4];
  Swift::UInt v4 = v0[5];
  Swift::UInt v5 = v0[6];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v1;
  }
  else {
    Swift::UInt64 v6 = 0;
  }
  Hasher._combine(_:)(v6);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v2;
  }
  else {
    Swift::UInt64 v7 = 0;
  }
  Hasher._combine(_:)(v7);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Lyrics.Syllable(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  _OWORD v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return specialized static Lyrics.Syllable.__derived_struct_equals(_:_:)((uint64_t)v5, (uint64_t)v7);
}

uint64_t Lyrics.TextLine.words.getter()
{
  return (*(uint64_t (**)(void))(v0 + 72))();
}

uint64_t Lyrics.TextLine.text.getter()
{
  return (*(uint64_t (**)(void))(v0 + 56))();
}

uint64_t Lyrics.TextLine.backgroundVocals.getter@<X0>(uint64_t a1@<X8>)
{
  (*(void (**)(void *__return_ptr))(v1 + 88))(v4);
  return outlined init with take of PresentationSource?((uint64_t)v4, a1, &demangling cache variable for type metadata for Lyrics.TextLine.BackgroundVocals?);
}

uint64_t Lyrics.TextLine.backgroundText.getter()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 88))(v3);
  outlined init with take of PresentationSource?((uint64_t)v3, (uint64_t)v4, &demangling cache variable for type metadata for Lyrics.TextLine.BackgroundVocals?);
  if (!v6) {
    return 0;
  }
  uint64_t v1 = v5;
  swift_bridgeObjectRetain();
  outlined release of Lyrics.TextLine.BackgroundVocals?(v3);
  return v1;
}

uint64_t Lyrics.TextLine.debugDescription.getter()
{
  _StringGuts.grow(_:)(54);
  v1._object = (void *)0x80000001004730B0;
  v1._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x6954747261747320;
  v3._object = (void *)0xEB000000003D656DLL;
  String.append(_:)(v3);
  Double.write<A>(to:)();
  v4._uint64_t countAndFlagsBits = 0x656D6954646E6520;
  v4._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v4);
  Double.write<A>(to:)();
  v5._uint64_t countAndFlagsBits = 0x3D7478657420;
  v5._object = (void *)0xE600000000000000;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(v0 + 56))();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t Lyrics.TextLine.textAlignment.getter()
{
  if (*(unsigned char *)(v0 + 26))
  {
    if ((*(unsigned char *)(v0 + 24) & 1) == 0) {
      return 2;
    }
  }
  else if (*(unsigned char *)(v0 + 24))
  {
    return 2;
  }
  return 0;
}

_UNKNOWN **static Lyrics.Capability.allCases.getter()
{
  return &outlined read-only object #0 of static Lyrics.Capability.allCases.getter;
}

uint64_t Lyrics.TextLine.init(lineIndex:startTime:endTime:primaryVocalsStartTime:primaryVocalsEndTime:agentAlignment:direction:lyricsDirection:capabilities:localizedTextProvider:localizedWordsProvider:localizedBackgroundVocalsProvider:)@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, long long a14, uint64_t a15)
{
  *(double *)a9 = a10;
  *(double *)(a9 + 8) = a11;
  *(void *)(a9 + 16) = result;
  *(unsigned char *)(a9 + 24) = a2 & 1;
  *(unsigned char *)(a9 + 25) = a3 & 1;
  *(unsigned char *)(a9 + 26) = a4 & 1;
  *(void *)(a9 + 32) = a5;
  *(double *)(a9 + 40) = a12;
  *(double *)(a9 + 48) = a13;
  *(void *)(a9 + 56) = a6;
  *(void *)(a9 + 64) = a7;
  *(void *)(a9 + 72) = a8;
  *(_OWORD *)(a9 + 80) = a14;
  *(void *)(a9 + 96) = a15;
  return result;
}

uint64_t Lyrics.TextLine.hash(into:)()
{
  Hasher._combine(_:)(*(void *)(v0 + 16));
  if ((*(void *)v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *(void *)v0;
  }
  else {
    Swift::UInt64 v1 = 0;
  }
  Hasher._combine(_:)(v1);
  if ((*(void *)(v0 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *(void *)(v0 + 8);
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  (*(void (**)(void))(v0 + 56))();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t Lyrics.TextLine.BackgroundVocals.direction.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t Lyrics.TextLine.BackgroundVocals.words.getter()
{
  return swift_bridgeObjectRetain();
}

Swift::Int Lyrics.TextLine.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for LyricsLine.textAlignment.getter in conformance Lyrics.TextLine()
{
  if (*(unsigned char *)(v0 + 26))
  {
    if (*(unsigned char *)(v0 + 24)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(v0 + 24) & 1) == 0)
  {
    return 0;
  }
  return 2;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Lyrics.TextLine()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Lyrics.TextLine(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v2;
  uint64_t v12 = *(void *)(a1 + 96);
  long long v3 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v3;
  long long v4 = *(_OWORD *)(a1 + 48);
  _OWORD v11[2] = *(_OWORD *)(a1 + 32);
  void v11[3] = v4;
  long long v5 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 64);
  long long v9 = *(_OWORD *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 96);
  v13[4] = v8;
  _OWORD v13[5] = v9;
  _OWORD v13[2] = v6;
  v13[3] = v7;
  return specialized static Lyrics.TextLine.== infix(_:_:)((uint64_t)v11, (uint64_t)v13) & 1;
}

double Lyrics.InstrumentalLine.endTime.getter(double a1, double a2)
{
  return a2;
}

uint64_t Lyrics.InstrumentalLine.lyricsDirection.getter(uint64_t a1, char a2)
{
  return a2 & 1;
}

uint64_t Lyrics.InstrumentalLine.textAlignment.getter(uint64_t a1, char a2)
{
  return 2 * (a2 & 1u);
}

uint64_t Lyrics.InstrumentalLine.debugDescription.getter()
{
  _StringGuts.grow(_:)(54);
  v0._object = (void *)0x80000001004730D0;
  v0._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x6954747261747320;
  v2._object = (void *)0xEB000000003D656DLL;
  String.append(_:)(v2);
  Double.write<A>(to:)();
  v3._uint64_t countAndFlagsBits = 0x656D6954646E6520;
  v3._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v3);
  Double.write<A>(to:)();
  return 0;
}

uint64_t Lyrics.SongwritersLine.textAlignment.getter()
{
  if (*(unsigned char *)(v0 + 24)) {
    return 2;
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Lyrics.InstrumentalLine()
{
  return Lyrics.InstrumentalLine.debugDescription.getter();
}

uint64_t Lyrics.SongwritersLine.debugDescription.getter()
{
  _StringGuts.grow(_:)(68);
  v1._object = (void *)0x80000001004730F0;
  v1._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 0x6954747261747320;
  v3._object = (void *)0xEB000000003D656DLL;
  String.append(_:)(v3);
  Double.write<A>(to:)();
  v4._uint64_t countAndFlagsBits = 0x656D6954646E6520;
  v4._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v4);
  Double.write<A>(to:)();
  v5._uint64_t countAndFlagsBits = 0x697277676E6F7320;
  v5._object = (void *)0xED00003D73726574;
  String.append(_:)(v5);
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  outlined release of Lyrics.SongwritersLine(v0);
  return 0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Lyrics.SongwritersLine()
{
  return Lyrics.SongwritersLine.debugDescription.getter();
}

uint64_t Lyrics.originalLines.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Lyrics.availableLanguages.getter()
{
  return swift_bridgeObjectRetain();
}

double Lyrics.leadingSilence.getter()
{
  return *(double *)(v0 + 88);
}

uint64_t Lyrics.vocalistsType.getter()
{
  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t Lyrics.songwriters.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Lyrics.currentLanguage.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Lyrics.currentLanguage.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 112) = a1;
  *(void *)(v2 + 120) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*Lyrics.currentLanguage.modify())()
{
  return ArtworkVideoReportingController.videoArtworkContextProviding.modify;
}

uint64_t Lyrics.staticText.getter()
{
  if (*(void *)(v0 + 144))
  {
    uint64_t v1 = *(void *)(v0 + 136);
  }
  else
  {
    uint64_t v1 = closure #1 in Lyrics.staticText.getter(v0);
    *(void *)(v0 + 136) = v1;
    *(void *)(v0 + 144) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in Lyrics.staticText.getter(uint64_t a1)
{
  void (*v17)(uint64_t *__return_ptr);
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t countAndFlagsBits;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30[8];
  unsigned char v31[16];
  uint64_t v32;
  uint64_t v33;

  uint64_t v1 = *(void *)(a1 + 32);
  NSString v28 = 0;
  id v29 = 0xE000000000000000;
  double v26 = *(void *)(v1 + 16);
  if (v26)
  {
    double v25 = v1 + 32;
    swift_bridgeObjectRetain_n();
    uint64_t v2 = 0;
    do
    {
      uint64_t v6 = *(void *)(v25 + 8 * v2);
      uint64_t v3 = v28;
      unint64_t v4 = v29;
      uint64_t v7 = *(void *)(v6 + 16);
      if (v7)
      {
        BOOL v27 = v2;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        uint64_t v8 = v6 + 128;
        do
        {
          double v16 = *(uint64_t (**)(uint64_t))(v8 - 40);
          uint64_t v17 = *(void (**)(uint64_t *__return_ptr))(v8 - 8);
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          double v18 = swift_retain();
          if ((v29 & 0xF00000000000000) != 0)
          {
            v19._uint64_t countAndFlagsBits = 10;
            v19._object = (void *)0xE100000000000000;
            String.append(_:)(v19);
          }
          double v20 = v16(v18);
          double v22 = v21;
          v17(v30);
          outlined init with take of PresentationSource?((uint64_t)v30, (uint64_t)v31, &demangling cache variable for type metadata for Lyrics.TextLine.BackgroundVocals?);
          uint64_t v12 = v33;
          if (v33)
          {
            uint64_t v9 = v32;
            swift_bridgeObjectRetain();
            outlined release of Lyrics.TextLine.BackgroundVocals?(v30);
            v10._uint64_t countAndFlagsBits = v9;
            v10._object = (void *)v12;
            String.append(_:)(v10);
            v11._uint64_t countAndFlagsBits = 41;
            v11._object = (void *)0xE100000000000000;
            String.append(_:)(v11);
            swift_bridgeObjectRelease();
            uint64_t v12 = 40;
            char v13 = (void *)0xE100000000000000;
          }
          else
          {
            char v13 = (void *)0xE000000000000000;
          }
          swift_bridgeObjectRetain();
          v14._uint64_t countAndFlagsBits = v12;
          v14._object = v13;
          String.append(_:)(v14);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v15._uint64_t countAndFlagsBits = v20;
          v15._object = v22;
          String.append(_:)(v15);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          v8 += 104;
          --v7;
        }
        while (v7);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        unint64_t v4 = v29;
        uint64_t v2 = v27;
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      ++v2;
      NSString v28 = v3;
      id v29 = v4;
      v5._uint64_t countAndFlagsBits = 10;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
    }
    while (v2 != v26);
    swift_bridgeObjectRelease_n();
  }
  uint64_t countAndFlagsBits = String.trim()()._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t Lyrics.staticText.setter(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 136) = a1;
  *(void *)(v2 + 144) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*Lyrics.staticText.modify(uint64_t *a1))(void *a1)
{
  a1[2] = v1;
  *a1 = Lyrics.staticText.getter();
  a1[1] = v3;
  return Lyrics.staticText.modify;
}

uint64_t Lyrics.staticText.modify(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  *(void *)(v1 + 136) = *a1;
  *(void *)(v1 + 144) = v2;
  return swift_bridgeObjectRelease();
}

uint64_t Lyrics.alignment(for:default:)(void *a1, uint64_t a2, char a3)
{
  if (*(unsigned char *)(v3 + 96))
  {
    uint64_t v4 = a1[3];
    uint64_t v5 = a1[4];
    __swift_project_boxed_opaque_existential_0Tm(a1, v4);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  }
  else
  {
    outlined init with copy of AlertPresenting((uint64_t)a1, (uint64_t)v11);
    if (a3)
    {
      uint64_t v9 = v12;
      uint64_t v10 = v13;
      __swift_project_boxed_opaque_existential_0Tm(v11, v12);
      a2 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 24))(v9, v10);
    }
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v11);
    return a2;
  }
}

double *Lyrics.originalLine(for:)@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v4 = *(void *)(v3 + 16);
  long long v5 = 0uLL;
  if (!v4)
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    double v23 = 0;
    uint64_t v24 = 0;
    long long v25 = 0uLL;
    long long v26 = 0uLL;
    long long v27 = 0uLL;
    goto LABEL_20;
  }
  uint64_t v6 = result;
  uint64_t v31 = a2;
  double v7 = *result;
  swift_bridgeObjectRetain_n();
  uint64_t v8 = 0;
  while (1)
  {
    uint64_t v9 = v3 + v8;
    long long v10 = *(_OWORD *)(v3 + v8 + 32);
    if (*(double *)&v10 != v7 || *((double *)&v10 + 1) != v6[1]) {
      goto LABEL_3;
    }
    uint64_t v38 = *(void *)(v9 + 48);
    uint64_t v34 = *(unsigned __int8 *)(v9 + 56);
    int v32 = *(unsigned __int8 *)(v9 + 57);
    int v33 = *(unsigned __int8 *)(v9 + 58);
    long long v35 = *(_OWORD *)(v3 + v8 + 32);
    long long v36 = *(_OWORD *)(v9 + 72);
    Swift::String v11 = *(uint64_t (**)(void))(v9 + 88);
    long long v40 = *(_OWORD *)(v9 + 112);
    long long v41 = *(_OWORD *)(v9 + 96);
    uint64_t v12 = *(void *)(v9 + 128);
    uint64_t v39 = *(void *)(v9 + 64);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    uint64_t v13 = swift_retain();
    uint64_t v37 = v11;
    uint64_t v14 = v11(v13);
    uint64_t v16 = v15;
    if (v14 == (*((uint64_t (**)(void))v6 + 7))() && v16 == v17) {
      break;
    }
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_15;
    }
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_3:
    v8 += 104;
    if (!--v4)
    {
      uint64_t result = (double *)swift_bridgeObjectRelease_n();
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      double v23 = 0;
      uint64_t v24 = 0;
      long long v25 = 0uLL;
      long long v26 = 0uLL;
      long long v27 = 0uLL;
      a2 = v31;
      long long v5 = 0uLL;
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_15:
  uint64_t result = (double *)swift_bridgeObjectRelease_n();
  uint64_t v28 = 256;
  if (!v32) {
    uint64_t v28 = 0;
  }
  uint64_t v29 = v28 | v34;
  uint64_t v30 = 0x10000;
  if (!v33) {
    uint64_t v30 = 0;
  }
  uint64_t v21 = v29 | v30;
  long long v5 = v35;
  long long v25 = v36;
  a2 = v31;
  double v23 = v37;
  uint64_t v20 = v38;
  uint64_t v24 = v12;
  uint64_t v22 = v39;
  long long v27 = v40;
  long long v26 = v41;
LABEL_20:
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v20;
  *(void *)(a2 + 24) = v21;
  *(void *)(a2 + 32) = v22;
  *(_OWORD *)(a2 + 40) = v25;
  *(void *)(a2 + 56) = v23;
  *(_OWORD *)(a2 + 64) = v26;
  *(_OWORD *)(a2 + 80) = v27;
  *(void *)(a2 + 96) = v24;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Lyrics.Capability(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Lyrics.Capability;
}

NLLanguage one-time initialization function for noLiftNorEmphasisLanguages()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NLLanguage>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100493D00;
  *(void *)(v0 + 32) = NLLanguageArabic;
  *(void *)(v0 + 40) = NLLanguageHebrew;
  static Lyrics.noLiftNorEmphasisLanguages = v0;
  uint64_t v1 = NLLanguageArabic;

  return NLLanguageHebrew;
}

NLLanguage one-time initialization function for noSpaceLanguages()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NLLanguage>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100493CE0;
  *(void *)(v0 + 32) = NLLanguageJapanese;
  *(void *)(v0 + 40) = NLLanguageSimplifiedChinese;
  *(void *)(v0 + 48) = NLLanguageTraditionalChinese;
  static Lyrics.noSpaceLanguages = v0;
  uint64_t v1 = NLLanguageJapanese;
  uint64_t v2 = NLLanguageSimplifiedChinese;

  return NLLanguageTraditionalChinese;
}

uint64_t Lyrics.audioAttributes.getter()
{
  return swift_bridgeObjectRetain();
}

void Lyrics.AudioAttribute.hash(into:)(double a1)
{
  Hasher._combine(_:)(0);
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
}

BOOL static Lyrics.AudioAttribute.__derived_enum_equals(_:_:)(double a1, double a2)
{
  return a1 == a2;
}

Swift::Int Lyrics.AudioAttribute.hashValue.getter(double a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Lyrics.AudioAttribute()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Lyrics.AudioAttribute()
{
  Swift::UInt64 v1 = *v0;
  Hasher._combine(_:)(0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Lyrics.AudioAttribute()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void Lyrics.spatialOffset.getter()
{
  uint64_t v1 = *(void *)(v0 + 152);
  char v2 = *(unsigned char *)(v1 + 32);
  uint64_t v3 = -1;
  if (1 << v2 < 64) {
    uint64_t v3 = ~(-1 << (1 << v2));
  }
  if ((v3 & *(void *)(v1 + 56)) == 0)
  {
    unsigned int v4 = v2 & 0x3F;
    if (v4 > 6
      && !*(void *)(v1 + 64)
      && v4 >= 8
      && !*(void *)(v1 + 72)
      && !*(void *)(v1 + 80)
      && v4 >= 9
      && !*(void *)(v1 + 88))
    {
      unint64_t v5 = (unint64_t)((1 << v2) + 63) >> 6;
      if (v5 <= 5) {
        unint64_t v5 = 5;
      }
      unint64_t v6 = v5 - 5;
      double v7 = (uint64_t *)(v1 + 96);
      uint64_t v8 = 256;
      do
      {
        if (!v6) {
          break;
        }
        uint64_t v9 = *v7++;
        --v6;
        v8 += 64;
      }
      while (!v9);
    }
  }
}

uint64_t Lyrics.__allocating_init(identifier:songInfo:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  Lyrics.init(identifier:songInfo:)(a1, a2, a3);
  return v6;
}

uint64_t Lyrics.init(identifier:songInfo:)(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&long long v198 = type metadata accessor for Locale.Language();
  int64_t v196 = *(void *)(v198 - 8);
  __chkstk_darwin();
  unint64_t v195 = (char *)v179 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[14] = 0;
  v3[15] = 0;
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  Swift::String v180 = v3;
  v3[16] = v8;
  uint64_t v9 = v3 + 16;
  v3[17] = 0;
  v3[18] = 0;
  _OWORD v3[2] = a1;
  v3[3] = a2;
  Swift::String v197 = a3;
  id v10 = [a3 language];
  if (v10)
  {
    Swift::String v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v14 = 0;
  }
  uint64_t v15 = v180;
  v180[8] = v12;
  v15[9] = v14;
  uint64_t v16 = v197;
  id v17 = [v197 availableTranslations];
  uint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v15[10] = v18;
  uint64_t v20 = v15[8];
  uint64_t v19 = v15[9];
  swift_beginAccess();
  v15[14] = v20;
  v15[15] = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v21 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  swift_beginAccess();
  unsigned char v15[16] = v21;
  swift_bridgeObjectRelease();
  [v16 leadingSilence];
  v15[11] = v22;
  id v23 = [v16 songwriters];
  v179[1] = type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for MSVLyricsSongWriter);
  unint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v24 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v25) {
      goto LABEL_6;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    long long v27 = _swiftEmptyArrayStorage;
    goto LABEL_17;
  }
  uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v25) {
    goto LABEL_16;
  }
LABEL_6:
  *(void *)&long long v200 = _swiftEmptyArrayStorage;
  _ss15ContiguousArrayV16_createNewBuffer14bufferIsUnique15minimumCapacity13growForAppendySb_SiSbtFSS_Tg5_1(0, v25 & ~(v25 >> 63), 0);
  if (v25 < 0)
  {
    __break(1u);
LABEL_107:
    swift_bridgeObjectRetain();
    uint64_t v98 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v98) {
      goto LABEL_108;
    }
LABEL_70:
    if (v98 < 1)
    {
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    *(void *)&long long v199 = v15;
    uint64_t v99 = 0;
    id v100 = (char *)_swiftEmptyArrayStorage;
    Swift::String v187 = _swiftEmptyArrayStorage;
    while (1)
    {
      if ((v24 & 0xC000000000000001) != 0) {
        id v101 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v101 = *(id *)(v24 + 8 * v99 + 32);
      }
      Swift::String v102 = v101;
      id v103 = [v101 lines];
      type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for MSVLyricsLine);
      uint64_t v104 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      Swift::String v105 = specialized processLines #1 (_:) in Lyrics.init(identifier:songInfo:)(v104, v181, v182, v183, v197, v186, (uint64_t)v194, v184);
      swift_bridgeObjectRelease();
      uint64_t v106 = *((void *)v105 + 2);
      int64_t v107 = *((void *)v100 + 2);
      int64_t v108 = v107 + v106;
      if (__OFADD__(v107, v106)) {
        goto LABEL_98;
      }
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      id v110 = v100;
      if (isUniquelyReferenced_nonNull_native && v108 <= *((void *)v100 + 3) >> 1)
      {
        if (!*((void *)v105 + 2)) {
          goto LABEL_87;
        }
      }
      else
      {
        if (v107 <= v108) {
          int64_t v113 = v107 + v106;
        }
        else {
          int64_t v113 = v107;
        }
        id v110 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v113, 1, v100);
        if (!*((void *)v105 + 2))
        {
LABEL_87:
          id v100 = v110;
          if (v106) {
            goto LABEL_99;
          }
          goto LABEL_88;
        }
      }
      if ((*((void *)v110 + 3) >> 1) - *((void *)v110 + 2) < v106) {
        goto LABEL_100;
      }
      id v100 = v110;
      swift_arrayInitWithCopy();
      if (v106)
      {
        uint64_t v111 = *((void *)v100 + 2);
        BOOL v68 = __OFADD__(v111, v106);
        uint64_t v112 = v111 + v106;
        if (v68) {
          goto LABEL_102;
        }
        *((void *)v100 + 2) = v112;
      }
LABEL_88:
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        Swift::String v187 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v187[2] + 1, 1, v187, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Lyrics.TextLine]>, &demangling cache variable for type metadata for [Lyrics.TextLine]);
      }
      unint64_t v115 = v187[2];
      unint64_t v114 = v187[3];
      if (v115 >= v114 >> 1) {
        Swift::String v187 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v114 > 1), v115 + 1, 1, v187, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Lyrics.TextLine]>, &demangling cache variable for type metadata for [Lyrics.TextLine]);
      }
      ++v99;
      id v116 = v187;
      v187[2] = v115 + 1;
      v116[v115 + 4] = v105;

      if (v98 == v99)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_109;
      }
    }
  }
  uint64_t v194 = (_UNKNOWN **)v9;
  uint64_t v26 = 0;
  long long v27 = (void *)v200;
  *(void *)&long long v199 = v24 & 0xC000000000000001;
  unint64_t v28 = v24;
  uint64_t v29 = v25;
  do
  {
    if ((void)v199) {
      id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v30 = *(id *)(v24 + 8 * v26 + 32);
    }
    uint64_t v31 = v30;
    id v32 = [v30 name];
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = v34;

    *(void *)&long long v200 = v27;
    unint64_t v37 = v27[2];
    unint64_t v36 = v27[3];
    if (v37 >= v36 >> 1)
    {
      _ss15ContiguousArrayV16_createNewBuffer14bufferIsUnique15minimumCapacity13growForAppendySb_SiSbtFSS_Tg5_1((char *)(v36 > 1), v37 + 1, 1);
      long long v27 = (void *)v200;
    }
    ++v26;
    v27[2] = v37 + 1;
    uint64_t v38 = &v27[2 * v37];
    v38[4] = v33;
    v38[5] = v35;
    unint64_t v24 = v28;
  }
  while (v29 != v26);
  swift_bridgeObjectRelease();
  uint64_t v9 = v194;
LABEL_17:
  v180[13] = v27;
  id v39 = [v197 audioAttributes];
  if (v39)
  {
    long long v40 = v39;
    long long v41 = &selRef_shadowColor;
    if ([v39 isSpatialRole])
    {
      [v40 lyricsOffset];
      uint64_t v43 = v42;

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Lyrics.AudioAttribute>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100493400;
      *(void *)(inited + 32) = v43;
      Swift::String v45 = (void *)specialized Set.init(_nonEmptyArrayLiteral:)(inited);
      swift_setDeallocating();
    }
    else
    {

      Swift::String v45 = &_swiftEmptySetSingleton;
    }
  }
  else
  {
    Swift::String v45 = &_swiftEmptySetSingleton;
    long long v41 = &selRef_shadowColor;
  }
  Swift::String v46 = v180;
  v180[19] = v45;
  Swift::String v47 = v197;
  id v48 = [v197 type];
  char v49 = v48 == (id)1;
  if (v48 == (id)2) {
    char v49 = 2;
  }
  *((unsigned char *)v46 + 56) = v49;
  uint64_t v184 = swift_allocObject();
  v179[0] = v184 + 16;
  swift_weakInit();
  Swift::String v183 = (BOOL *)swift_allocObject();
  v183[16] = 0;
  uint64_t v182 = swift_allocObject();
  *(void *)(v182 + 16) = 0;
  id v50 = [v47 v41[211]];
  if (v50)
  {
    Swift::String v51 = v50;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    Swift::String v52 = v195;
    Locale.Language.init(identifier:)();
    BOOL v186 = Locale.Language.characterDirection.getter() == 2;
    (*(void (**)(char *, void))(v196 + 8))(v52, v198);
    swift_bridgeObjectRelease();
  }
  else
  {
    BOOL v186 = 0;
  }
  id v53 = [v197 v41[211]];
  if (v53)
  {
    Swift::String v54 = v53;
    uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v57 = v56;
  }
  else
  {
    uint64_t v55 = 0;
    uint64_t v57 = 0;
  }
  uint64_t v194 = specialized static Lyrics.capabilities(for:)(v55, v57);
  swift_bridgeObjectRelease();
  id v58 = [v197 translationsMap];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : MSVLyricsLine]);
  uint64_t v59 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v60 = 0;
  uint64_t v61 = *(void *)(v59 + 64);
  unint64_t v195 = (char *)(v59 + 64);
  *(void *)&long long v198 = v59;
  uint64_t v62 = 1 << *(unsigned char *)(v59 + 32);
  uint64_t v63 = -1;
  if (v62 < 64) {
    uint64_t v63 = ~(-1 << v62);
  }
  unint64_t v64 = v63 & v61;
  int64_t v196 = (unint64_t)(v62 + 63) >> 6;
  while (1)
  {
    if (v64)
    {
      unint64_t v66 = __clz(__rbit64(v64));
      v64 &= v64 - 1;
      *(void *)&long long v199 = v60;
      unint64_t v67 = v66 | (v60 << 6);
      goto LABEL_48;
    }
    BOOL v68 = __OFADD__(v60, 1);
    int64_t v69 = v60 + 1;
    if (v68) {
      goto LABEL_97;
    }
    if (v69 >= v196) {
      break;
    }
    unint64_t v70 = *(void *)&v195[8 * v69];
    if (!v70)
    {
      int64_t v71 = v69 + 1;
      if (v69 + 1 >= v196) {
        break;
      }
      unint64_t v70 = *(void *)&v195[8 * v71];
      if (!v70)
      {
        int64_t v71 = v69 + 2;
        if (v69 + 2 >= v196) {
          break;
        }
        unint64_t v70 = *(void *)&v195[8 * v71];
        if (!v70)
        {
          int64_t v71 = v69 + 3;
          if (v69 + 3 >= v196) {
            break;
          }
          unint64_t v70 = *(void *)&v195[8 * v71];
          if (!v70)
          {
            while (1)
            {
              int64_t v69 = v71 + 1;
              if (__OFADD__(v71, 1)) {
                goto LABEL_101;
              }
              if (v69 >= v196) {
                goto LABEL_63;
              }
              unint64_t v70 = *(void *)&v195[8 * v69];
              ++v71;
              if (v70) {
                goto LABEL_47;
              }
            }
          }
        }
      }
      int64_t v69 = v71;
    }
LABEL_47:
    unint64_t v64 = (v70 - 1) & v70;
    *(void *)&long long v199 = v69;
    unint64_t v67 = __clz(__rbit64(v70)) + (v69 << 6);
LABEL_48:
    Swift::String v72 = (uint64_t *)(*(void *)(v198 + 48) + 16 * v67);
    uint64_t v73 = *v72;
    uint64_t v74 = v72[1];
    swift_bridgeObjectRetain_n();
    Swift::String v75 = v197;
    uint64_t v76 = swift_bridgeObjectRetain();
    Swift::String v77 = specialized _NativeDictionary.mapValues<A>(_:)(v76, v75, v73, v74);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_beginAccess();
    char v78 = swift_isUniquelyReferenced_nonNull_native();
    id v203 = (void *)*v9;
    Swift::String v79 = v203;
    Swift::String v80 = v9;
    *uint64_t v9 = 0x8000000000000000;
    unint64_t v82 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v74);
    uint64_t v83 = v79[2];
    BOOL v84 = (v81 & 1) == 0;
    uint64_t v85 = v83 + v84;
    if (__OFADD__(v83, v84))
    {
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
      goto LABEL_103;
    }
    char v86 = v81;
    if (v79[3] >= v85)
    {
      if (v78)
      {
        if (v81) {
          goto LABEL_33;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        Swift::String v79 = v203;
        if (v86) {
          goto LABEL_33;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v85, v78);
      Swift::String v79 = v203;
      unint64_t v87 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v74);
      if ((v86 & 1) != (v88 & 1)) {
        goto LABEL_164;
      }
      unint64_t v82 = v87;
      if (v86)
      {
LABEL_33:
        uint64_t v65 = v79[7];
        swift_bridgeObjectRelease();
        *(void *)(v65 + 8 * v82) = v77;
        goto LABEL_34;
      }
    }
    v79[(v82 >> 6) + 8] |= 1 << v82;
    Swift::String v89 = (uint64_t *)(v79[6] + 16 * v82);
    *Swift::String v89 = v73;
    v89[1] = v74;
    *(void *)(v79[7] + 8 * v82) = v77;
    uint64_t v90 = v79[2];
    BOOL v68 = __OFADD__(v90, 1);
    uint64_t v91 = v90 + 1;
    if (v68) {
      goto LABEL_96;
    }
    v79[2] = v91;
    swift_bridgeObjectRetain();
LABEL_34:
    uint64_t v9 = v80;
    *Swift::String v80 = v79;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v60 = v199;
  }
LABEL_63:
  swift_release();
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
  {
LABEL_64:
    uint64_t v92 = &_swiftEmptySetSingleton;
    goto LABEL_65;
  }
LABEL_103:
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_64;
  }
  specialized Set.init(_nonEmptyArrayLiteral:)((unint64_t)_swiftEmptyArrayStorage);
  uint64_t v92 = v121;
LABEL_65:
  uint64_t v93 = swift_allocObject();
  Swift::String v181 = (char *)v93;
  *(void *)(v93 + 16) = v92;
  uint64_t v15 = (void *)(v93 + 16);
  id v94 = [v197 lyricsSections];
  type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for MSVLyricsSection);
  unint64_t v95 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v95 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v96 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v96 = *(void *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v96 <= 0)
  {
    uint64_t v117 = v197;
    id v118 = [v197 lyricsLines];
    type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for MSVLyricsLine);
    uint64_t v119 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v100 = specialized processLines #1 (_:) in Lyrics.init(identifier:songInfo:)(v119, v181, v182, v183, v117, v186, (uint64_t)v194, v184);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Lyrics.TextLine]>);
    uint64_t v120 = swift_allocObject();
    *(_OWORD *)(v120 + 16) = xmmword_100493400;
    Swift::String v187 = (void *)v120;
    *(void *)(v120 + 32) = v100;
    swift_bridgeObjectRetain();
    goto LABEL_109;
  }
  id v97 = [v197 lyricsSections];
  unint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v24 >> 62) {
    goto LABEL_107;
  }
  uint64_t v98 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v98) {
    goto LABEL_70;
  }
LABEL_108:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v100 = (char *)_swiftEmptyArrayStorage;
  Swift::String v187 = _swiftEmptyArrayStorage;
LABEL_109:
  swift_beginAccess();
  uint64_t v122 = swift_bridgeObjectRetain();
  char v123 = specialized static Lyrics.vocalistType(for:)(v122);
  swift_bridgeObjectRelease();
  long long v124 = v180;
  *((unsigned char *)v180 + 96) = v123;
  v124[6] = v100;
  uint64_t v125 = *((void *)v100 + 2);
  Swift::String v185 = v100;
  if (v125)
  {
    int64_t v126 = *((void *)v100 + 14);
    uint64_t v127 = (char *)*((void *)v100 + 12);
    id v128 = (_UNKNOWN **)*((void *)v100 + 8);
    double v129 = *((double *)v100 + 4);
    double v130 = *((double *)v100 + 5);
    swift_bridgeObjectRetain_n();
    uint64_t v194 = v128;
    swift_bridgeObjectRetain();
    unint64_t v195 = v127;
    swift_retain();
    int64_t v196 = v126;
    swift_retain();
    swift_retain();
    uint64_t v131 = 0;
    uint64_t v132 = 0;
    uint64_t v133 = _swiftEmptyArrayStorage;
    while (1)
    {
      double v135 = *(double *)&v185[v131 + 32];
      double v134 = *(double *)&v185[v131 + 40];
      int v136 = v185[v131 + 56];
      int v137 = v185[v131 + 57];
      int v138 = v185[v131 + 58];
      id v139 = *(char ***)&v185[v131 + 64];
      long long v140 = *(_OWORD *)&v185[v131 + 72];
      uint64_t v141 = *(void *)&v185[v131 + 88];
      long long v199 = *(_OWORD *)&v185[v131 + 96];
      long long v198 = *(_OWORD *)&v185[v131 + 112];
      uint64_t v142 = *(void *)&v185[v131 + 128];
      long long v193 = v140;
      int v192 = v136;
      int v191 = v137;
      int v190 = v138;
      uint64_t v189 = v141;
      if (v132 || v129 <= 7.0)
      {
        if (v135 - v130 <= 7.0)
        {
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v133 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v133[2] + 1, 1, v133);
          }
          unint64_t v147 = v133[2];
          unint64_t v146 = v133[3];
          if (v147 >= v146 >> 1) {
            uint64_t v133 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v146 > 1), v147 + 1, 1, v133);
          }
          Swift::String v201 = &type metadata for Lyrics.InstrumentalLine;
          id v202 = &protocol witness table for Lyrics.InstrumentalLine;
          uint64_t v148 = swift_allocObject();
          *(void *)&long long v200 = v148;
          *(void *)(v148 + 16) = v132;
          *(double *)(v148 + 24) = v130 + 0.1;
          *(double *)(v148 + 32) = v135;
          *(unsigned char *)(v148 + 40) = v186;
          v133[2] = v147 + 1;
          outlined init with take of AlertPresenting(&v200, (uint64_t)&v133[5 * v147 + 4]);
          BOOL v68 = __OFADD__(v132++, 1);
          if (v68) {
            goto LABEL_159;
          }
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v133 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v133[2] + 1, 1, v133);
        }
        unint64_t v144 = v133[2];
        unint64_t v143 = v133[3];
        if (v144 >= v143 >> 1) {
          uint64_t v133 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v143 > 1), v144 + 1, 1, v133);
        }
        Swift::String v201 = &type metadata for Lyrics.InstrumentalLine;
        id v202 = &protocol witness table for Lyrics.InstrumentalLine;
        uint64_t v145 = swift_allocObject();
        *(void *)&long long v200 = v145;
        *(void *)(v145 + 16) = 0;
        *(void *)(v145 + 24) = 0;
        *(double *)(v145 + 32) = v129;
        *(unsigned char *)(v145 + 40) = v186;
        v133[2] = v144 + 1;
        outlined init with take of AlertPresenting(&v200, (uint64_t)&v133[5 * v144 + 4]);
        uint64_t v132 = 1;
      }
      uint64_t v188 = v125;
      swift_bridgeObjectRetain_n();
      uint64_t v149 = (char *)v199;
      swift_retain_n();
      int64_t v150 = v198;
      swift_retain_n();
      swift_retain_n();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v133 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v133[2] + 1, 1, v133);
      }
      unint64_t v152 = v133[2];
      unint64_t v151 = v133[3];
      Swift::String v153 = v133;
      if (v152 >= v151 >> 1) {
        Swift::String v153 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v151 > 1), v152 + 1, 1, v133);
      }
      Swift::String v201 = &type metadata for Lyrics.TextLine;
      id v202 = &protocol witness table for Lyrics.TextLine;
      uint64_t v154 = swift_allocObject();
      *(void *)&long long v200 = v154;
      *(double *)(v154 + 16) = v135;
      *(double *)(v154 + 24) = v134;
      *(void *)(v154 + 32) = v132;
      *(unsigned char *)(v154 + 40) = v192;
      *(unsigned char *)(v154 + 41) = v191;
      *(unsigned char *)(v154 + 42) = v190;
      *(void *)(v154 + 48) = v139;
      *(_OWORD *)(v154 + 56) = v193;
      *(void *)(v154 + 72) = v189;
      long long v155 = v198;
      *(_OWORD *)(v154 + 80) = v199;
      *(_OWORD *)(v154 + 96) = v155;
      *(void *)(v154 + 112) = v142;
      v153[2] = v152 + 1;
      uint64_t v133 = v153;
      outlined init with take of AlertPresenting(&v200, (uint64_t)&v153[5 * v152 + 4]);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      BOOL v68 = __OFADD__(v132++, 1);
      if (v68) {
        break;
      }
      v131 += 104;
      double v129 = v135;
      double v130 = v134;
      uint64_t v194 = (_UNKNOWN **)v139;
      unint64_t v195 = v149;
      int64_t v196 = v150;
      uint64_t v125 = v188 - 1;
      if (v188 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        goto LABEL_135;
      }
    }
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    swift_bridgeObjectRetain();
    uint64_t v158 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v132 = 0;
    uint64_t v133 = _swiftEmptyArrayStorage;
    double v134 = 0.0;
LABEL_135:
    id v139 = &selRef_shadowColor;
    id v156 = [v197 songwriters];
    unint64_t v157 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v157 >> 62) {
      goto LABEL_160;
    }
    uint64_t v158 = *(void *)((v157 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v158)
  {
    swift_bridgeObjectRelease();
    goto LABEL_157;
  }
  id v159 = [v197 v139[429]];
  unint64_t v160 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v160 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v161 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v161 = *(void *)((v160 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  *(void *)&long long v198 = v133;
  if (!v161)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v163 = _swiftEmptyArrayStorage;
    goto LABEL_152;
  }
  *(void *)&long long v200 = _swiftEmptyArrayStorage;
  _ss15ContiguousArrayV16_createNewBuffer14bufferIsUnique15minimumCapacity13growForAppendySb_SiSbtFSS_Tg5_1(0, v161 & ~(v161 >> 63), 0);
  if (v161 < 0) {
    goto LABEL_163;
  }
  uint64_t v162 = 0;
  uint64_t v163 = (void *)v200;
  *(void *)&long long v199 = v160 & 0xC000000000000001;
  unint64_t v164 = v160;
  do
  {
    if ((void)v199) {
      id v165 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v165 = *(id *)(v160 + 8 * v162 + 32);
    }
    uint64_t v166 = v165;
    id v167 = [v165 name];
    uint64_t v168 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v170 = v169;

    *(void *)&long long v200 = v163;
    unint64_t v172 = v163[2];
    unint64_t v171 = v163[3];
    if (v172 >= v171 >> 1)
    {
      _ss15ContiguousArrayV16_createNewBuffer14bufferIsUnique15minimumCapacity13growForAppendySb_SiSbtFSS_Tg5_1((char *)(v171 > 1), v172 + 1, 1);
      uint64_t v163 = (void *)v200;
    }
    ++v162;
    v163[2] = v172 + 1;
    uint64_t v173 = &v163[2 * v172];
    v173[4] = v168;
    v173[5] = v170;
    unint64_t v160 = v164;
  }
  while (v161 != v162);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_152:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    *(void *)&long long v198 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v198 + 16) + 1, 1, (void *)v198);
  }
  unint64_t v175 = *(void *)(v198 + 16);
  unint64_t v174 = *(void *)(v198 + 24);
  if (v175 >= v174 >> 1) {
    *(void *)&long long v198 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v174 > 1), v175 + 1, 1, (void *)v198);
  }
  Swift::String v201 = &type metadata for Lyrics.SongwritersLine;
  id v202 = &protocol witness table for Lyrics.SongwritersLine;
  uint64_t v176 = swift_allocObject();
  *(void *)&long long v200 = v176;
  *(void *)(v176 + 16) = v132;
  *(double *)(v176 + 24) = v134;
  *(void *)(v176 + 32) = 0x7FF0000000000000;
  *(unsigned char *)(v176 + 40) = v186;
  *(void *)(v176 + 48) = v163;
  uint64_t v133 = (void *)v198;
  *(void *)(v198 + 16) = v175 + 1;
  outlined init with take of AlertPresenting(&v200, (uint64_t)&v133[5 * v175 + 4]);
LABEL_157:

  uint64_t v177 = v180;
  v180[4] = v187;
  v177[5] = v133;
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return (uint64_t)v177;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo10NLLanguageaG_SSs5NeverOTg5172_s11MusicCoreUI6LyricsC27shouldSplitOnEveryCharacter33_697B9CC07E0EE097740C02293B75B59ALL3forSbSSSg_tFZSSSo10NLLanguageacfu_32c43bab182bd346b2349def4725b5ae5dAISSTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    _ss15ContiguousArrayV16_createNewBuffer14bufferIsUnique15minimumCapacity13growForAppendySb_SiSbtFSS_Tg5_1(0, v1, 0);
    uint64_t v3 = a1 + 32;
    do
    {
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v6 = v5;
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1) {
        _ss15ContiguousArrayV16_createNewBuffer14bufferIsUnique15minimumCapacity13growForAppendySb_SiSbtFSS_Tg5_1((char *)(v7 > 1), v8 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v8 + 1;
      uint64_t v9 = &_swiftEmptyArrayStorage[2 * v8];
      v9[4] = v4;
      _OWORD v9[5] = v6;
      v3 += 8;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

BOOL specialized thunk for @callee_guaranteed (@unowned Double, @unowned Double) -> (@unowned Bool)(double *a1, double *a2)
{
  return *a1 < *a2;
}

uint64_t closure #2 in processLines #1 (_:) in Lyrics.init(identifier:songInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    goto LABEL_19;
  }
  unint64_t v8 = (void *)Strong;
  swift_beginAccess();
  uint64_t v9 = v8[15];
  if (!v9
    || ((v10 = v8[9]) != 0 ? (BOOL v11 = a3 == 0) : (BOOL v11 = 1),
        v11
     || ((v12 = v8[14], v12 == v8[8]) ? (BOOL v13 = v9 == v10) : (BOOL v13 = 0),
         v13
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || (swift_beginAccess(), uint64_t v14 = v8[16], !*(void *)(v14 + 16)))))
  {
    swift_release();
LABEL_19:
    swift_bridgeObjectRetain();
    return a4;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v9);
  if ((v16 & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  uint64_t v17 = *(void *)(*(void *)(v14 + 56) + 8 * v15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v17 + 16) || (unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v19 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_23;
  }
  uint64_t v20 = (uint64_t *)(*(void *)(v17 + 56) + 88 * v18);
  uint64_t v22 = v20[2];
  uint64_t v21 = v20[3];
  uint64_t v23 = v20[5];
  uint64_t v27 = v20[1];
  uint64_t v28 = v20[4];
  uint64_t v24 = v20[6];
  uint64_t v26 = *v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Lyrics.TextLine.BackgroundVocals?(v21, v28, v23, v24);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v27)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  a4 = v26;
  outlined consume of Lyrics.LineTranslationMetadata?(v26, v27, v22, v21, v28, v23, v24);
  swift_bridgeObjectRelease();
  return a4;
}

uint64_t closure #3 in processLines #1 (_:) in Lyrics.init(identifier:songInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    goto LABEL_16;
  }
  unint64_t v8 = (void *)Strong;
  swift_beginAccess();
  uint64_t v9 = v8[15];
  if (!v9) {
    goto LABEL_15;
  }
  uint64_t v10 = v8[9];
  if (!v10) {
    goto LABEL_15;
  }
  if (!a3) {
    goto LABEL_15;
  }
  uint64_t v11 = v8[14];
  if (v11 == v8[8] && v9 == v10) {
    goto LABEL_15;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_15;
  }
  swift_beginAccess();
  uint64_t v12 = v8[16];
  if (!*(void *)(v12 + 16)) {
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v9);
  if ((v14 & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_16:
    swift_beginAccess();
    uint64_t v19 = *(void *)(a4 + 16);
    swift_bridgeObjectRetain();
    return v19;
  }
  uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v15 + 16) || (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v17 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_15:
    swift_release();
    goto LABEL_16;
  }
  unint64_t v18 = (void *)(*(void *)(v15 + 56) + 88 * v16);
  uint64_t v19 = v18[2];
  uint64_t v20 = v18[3];
  uint64_t v21 = v18[4];
  uint64_t v22 = v18[5];
  uint64_t v23 = v18[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Lyrics.TextLine.BackgroundVocals?(v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Lyrics.TextLine.BackgroundVocals?(v20, v21, v22, v23);
  return v19;
}

uint64_t closure #4 in processLines #1 (_:) in Lyrics.init(identifier:songInfo:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t *a4@<X8>)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    goto LABEL_16;
  }
  uint64_t v9 = (void *)Strong;
  swift_beginAccess();
  uint64_t v10 = v9[15];
  if (!v10) {
    goto LABEL_15;
  }
  uint64_t v11 = v9[9];
  if (!v11) {
    goto LABEL_15;
  }
  if (!a2) {
    goto LABEL_15;
  }
  uint64_t v12 = v9[14];
  if (v12 == v9[8] && v10 == v11) {
    goto LABEL_15;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_15;
  }
  swift_beginAccess();
  uint64_t v13 = v9[16];
  if (!*(void *)(v13 + 16)) {
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v10);
  if ((v15 & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_16:
    swift_beginAccess();
    uint64_t v20 = a3[2];
    uint64_t v21 = a3[3];
    uint64_t v22 = a3[4];
    uint64_t v23 = a3[5];
    uint64_t v24 = a3[6];
    uint64_t v25 = a3[7];
    uint64_t v27 = a3[8];
    uint64_t v26 = a3[9];
    uint64_t result = outlined copy of Lyrics.TextLine.BackgroundVocals?(v20, v21, v22, v23);
    goto LABEL_17;
  }
  uint64_t v16 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v16 + 16) || (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v18 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_15:
    swift_release();
    goto LABEL_16;
  }
  uint64_t v19 = (void *)(*(void *)(v16 + 56) + 88 * v17);
  uint64_t v20 = v19[3];
  uint64_t v21 = v19[4];
  uint64_t v22 = v19[5];
  uint64_t v23 = v19[6];
  uint64_t v24 = v19[7];
  uint64_t v25 = v19[8];
  uint64_t v27 = v19[9];
  uint64_t v26 = v19[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Lyrics.TextLine.BackgroundVocals?(v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined copy of Lyrics.TextLine.BackgroundVocals?(v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = outlined consume of Lyrics.TextLine.BackgroundVocals?(v20, v21, v22, v23);
LABEL_17:
  *a4 = v20;
  a4[1] = v21;
  a4[2] = v22;
  a4[3] = v23;
  a4[4] = v24;
  a4[5] = v25;
  a4[6] = v27;
  a4[7] = v26;
  return result;
}

void Lyrics.line(before:useOriginalLines:)(char a1@<W0>, uint64_t a2@<X8>, double a3@<D0>)
{
  if (a1)
  {
    uint64_t v6 = specialized _arrayForceCast<A, B>(_:)(*(void *)(v3 + 48));
    uint64_t v7 = v6[2];
    if (!v7) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v6 = *(void **)(v3 + 40);
    swift_bridgeObjectRetain();
    uint64_t v7 = v6[2];
    if (!v7)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return;
    }
  }
  unint64_t v8 = v6 + 4;
  outlined init with copy of AlertPresenting((uint64_t)(v6 + 4), (uint64_t)&v29);
  uint64_t v10 = *((void *)&v30 + 1);
  uint64_t v9 = v31;
  __swift_project_boxed_opaque_existential_0Tm(&v29, *((uint64_t *)&v30 + 1));
  double v11 = (*(double (**)(uint64_t))(*(void *)(v9 + 8) + 8))(v10);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v29);
  if (v11 > a3) {
    goto LABEL_6;
  }
  uint64_t v12 = 0;
  uint64_t v13 = v7 - 1;
  uint64_t v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v14 = v13;
  while (!__OFSUB__(v14, v12))
  {
    unint64_t v15 = v12 + (v14 - v12) / 2;
    if (__OFADD__(v12, (v14 - v12) / 2)) {
      goto LABEL_25;
    }
    if ((v15 & 0x8000000000000000) != 0) {
      goto LABEL_26;
    }
    if (v15 >= v6[2]) {
      goto LABEL_27;
    }
    outlined init with copy of AlertPresenting((uint64_t)&v8[5 * v15], (uint64_t)v26);
    uint64_t v17 = v27;
    uint64_t v16 = v28;
    __swift_project_boxed_opaque_existential_0Tm(v26, v27);
    double v18 = (*(double (**)(uint64_t))(*(void *)(v16 + 8) + 8))(v17);
    double v19 = v18;
    if ((uint64_t)v15 >= v13)
    {
      double v22 = INFINITY;
      if (v18 > a3) {
        goto LABEL_8;
      }
    }
    else
    {
      if (v15 + 1 >= v6[2]) {
        goto LABEL_28;
      }
      outlined init with copy of AlertPresenting((uint64_t)&v8[5 * v15 + 5], (uint64_t)v23);
      uint64_t v21 = v24;
      uint64_t v20 = v25;
      __swift_project_boxed_opaque_existential_0Tm(v23, v24);
      double v22 = (*(double (**)(uint64_t))(*(void *)(v20 + 8) + 8))(v21);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v23);
      if (v19 > a3)
      {
LABEL_8:
        uint64_t v14 = v15 - 1;
        goto LABEL_9;
      }
    }
    if (v22 >= a3)
    {
      outlined destroy of TaskPriority?((uint64_t)&v29, &demangling cache variable for type metadata for LyricsLine?);
      swift_bridgeObjectRelease();
      outlined init with copy of AlertPresenting((uint64_t)v26, (uint64_t)&v29);
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v26);
      goto LABEL_23;
    }
    uint64_t v12 = v15 + 1;
LABEL_9:
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v26);
    if (v14 < v12)
    {
      swift_bridgeObjectRelease();
LABEL_23:
      outlined init with take of PresentationSource?((uint64_t)&v29, a2, &demangling cache variable for type metadata for LyricsLine?);
      return;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t Lyrics.line(after:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_0Tm(a1, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  uint64_t v7 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v8 = *(void *)(v2 + 40);
  if (v7 >= *(void *)(v8 + 16))
  {
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  if (v7 < 0) {
    goto LABEL_9;
  }

  return outlined init with copy of AlertPresenting(v8 + 40 * v7 + 32, a2);
}

BOOL closure #2 in static Lyrics.msvWordsToLyricsWords(msvWords:text:lineText:lineDuration:shouldProcessEmphasis:everyCharAWord:dontDoWordSplitting:)(id *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  [*a1 characterRange];
  v9._uint64_t countAndFlagsBits = a2;
  v9._object = a3;
  v10._uint64_t countAndFlagsBits = a4;
  v10._object = a5;
  __C::_NSRange v11 = _NSRange.convert(from:to:preserveLength:)(v9, v10, 1);
  if (!v12) {
    return _NSRange.contains(_:)(v11);
  }
  swift_errorRelease();
  return 0;
}

BOOL closure #3 in static Lyrics.msvWordsToLyricsWords(msvWords:text:lineText:lineDuration:shouldProcessEmphasis:everyCharAWord:dontDoWordSplitting:)(id *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = *a1;
  [*a1 characterRange];
  v10._uint64_t countAndFlagsBits = a2;
  v10._object = a3;
  v11._uint64_t countAndFlagsBits = a4;
  v11._object = a5;
  __C::_NSRange v12 = _NSRange.convert(from:to:preserveLength:)(v10, v11, 0);
  if (!v13) {
    return _NSRange.intersects(_:)(v12);
  }
  if (one-time initialization token for lyrics != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.lyrics);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  id v15 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  id v16 = v15;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v24 = (void *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136446978;
    [v16 characterRange];
    uint64_t v20 = _NSRange.description.getter();
    *(void *)(v19 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v20, v21, &v25);

    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v19 + 14) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(a4, (unint64_t)a5, &v25);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 22) = 2082;
    swift_bridgeObjectRetain();
    *(void *)(v19 + 24) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(a2, (unint64_t)a3, &v25);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 32) = 2114;
    swift_errorRetain();
    uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v19 + 34) = v22;
    *uint64_t v24 = v22;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "    Wasn't able to convert syllable range from primaryVocalText to lyricsText indicating a parsing issue.\n    MSVLyricsWord.characterRange=%{public}s\n    primaryVocalsText=%{public}s\n    lyricsText=%{public}s\n    thrownError=%{public}@", (uint8_t *)v19, 0x2Au);
    __swift_instantiateConcreteTypeFromMangledName(&_sSo8NSObjectCSgMD_1);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    swift_errorRelease();
    swift_errorRelease();
  }
  return 0;
}

uint64_t Logger.lyrics.unsafeMutableAddressor()
{
  if (one-time initialization token for lyrics != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return __swift_project_value_buffer(v0, (uint64_t)static Logger.lyrics);
}

void specialized Sequence.contains(where:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for MSVLyricsAgent);
    lazy protocol witness table accessor for type MSVLyricsAgent and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v25;
    uint64_t v24 = v26;
    uint64_t v2 = v27;
    uint64_t v3 = v28;
    unint64_t v4 = v29;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v24 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  uint64_t v22 = v2;
  int64_t v23 = (unint64_t)(v2 + 64) >> 6;
  while (1)
  {
    uint64_t v9 = v3;
    if (v1 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_37;
      }
      type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for MSVLyricsAgent);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v12 = v30;
      swift_unknownObjectRelease();
      if (!v30) {
        goto LABEL_37;
      }
      goto LABEL_32;
    }
    if (!v4) {
      break;
    }
    unint64_t v10 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v11 = v10 | (v3 << 6);
LABEL_31:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v11);
    if (!v12) {
      goto LABEL_37;
    }
LABEL_32:
    id v16 = objc_msgSend(v12, "type", v22);
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = v1;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      if (v19 == 0x70756F7267 && v21 == 0xE500000000000000)
      {

        swift_bridgeObjectRelease();
LABEL_37:
        outlined consume of Set<MusicItemID>.Iterator._Variant();
        return;
      }
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      uint64_t v1 = v18;
      if (v8) {
        goto LABEL_37;
      }
    }
    else
    {
    }
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 >= v23) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v13);
    ++v3;
    if (!v14)
    {
      uint64_t v3 = v9 + 2;
      if (v9 + 2 >= v23) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v24 + 8 * v3);
      if (!v14)
      {
        uint64_t v3 = v9 + 3;
        if (v9 + 3 >= v23) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v24 + 8 * v3);
        if (!v14)
        {
          uint64_t v3 = v9 + 4;
          if (v9 + 4 >= v23) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v24 + 8 * v3);
          if (!v14)
          {
            uint64_t v3 = v9 + 5;
            if (v9 + 5 >= v23) {
              goto LABEL_37;
            }
            unint64_t v14 = *(void *)(v24 + 8 * v3);
            if (!v14)
            {
              uint64_t v15 = v9 + 6;
              while (v23 != v15)
              {
                unint64_t v14 = *(void *)(v24 + 8 * v15++);
                if (v14)
                {
                  uint64_t v3 = v15 - 1;
                  goto LABEL_30;
                }
              }
              goto LABEL_37;
            }
          }
        }
      }
    }
LABEL_30:
    unint64_t v4 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v3 << 6);
    goto LABEL_31;
  }
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;

  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for MSVLyricsAgent);
    lazy protocol witness table accessor for type MSVLyricsAgent and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v25;
    uint64_t v24 = v26;
    uint64_t v2 = v27;
    uint64_t v3 = v28;
    unint64_t v4 = v29;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v24 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  uint64_t v22 = v2;
  int64_t v23 = (unint64_t)(v2 + 64) >> 6;
  while (1)
  {
    uint64_t v9 = v3;
    if (v1 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_37;
      }
      type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for MSVLyricsAgent);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v12 = v30;
      swift_unknownObjectRelease();
      if (!v30) {
        goto LABEL_37;
      }
      goto LABEL_32;
    }
    if (!v4) {
      break;
    }
    unint64_t v10 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v11 = v10 | (v3 << 6);
LABEL_31:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v11);
    if (!v12) {
      goto LABEL_37;
    }
LABEL_32:
    id v16 = objc_msgSend(v12, "type", v22);
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = v1;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      if (v19 == 0x726568746FLL && v21 == 0xE500000000000000)
      {

        swift_bridgeObjectRelease();
LABEL_37:
        outlined consume of Set<MusicItemID>.Iterator._Variant();
        return;
      }
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      uint64_t v1 = v18;
      if (v8) {
        goto LABEL_37;
      }
    }
    else
    {
    }
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 >= v23) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v13);
    ++v3;
    if (!v14)
    {
      uint64_t v3 = v9 + 2;
      if (v9 + 2 >= v23) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v24 + 8 * v3);
      if (!v14)
      {
        uint64_t v3 = v9 + 3;
        if (v9 + 3 >= v23) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v24 + 8 * v3);
        if (!v14)
        {
          uint64_t v3 = v9 + 4;
          if (v9 + 4 >= v23) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v24 + 8 * v3);
          if (!v14)
          {
            uint64_t v3 = v9 + 5;
            if (v9 + 5 >= v23) {
              goto LABEL_37;
            }
            unint64_t v14 = *(void *)(v24 + 8 * v3);
            if (!v14)
            {
              uint64_t v15 = v9 + 6;
              while (v23 != v15)
              {
                unint64_t v14 = *(void *)(v24 + 8 * v15++);
                if (v14)
                {
                  uint64_t v3 = v15 - 1;
                  goto LABEL_30;
                }
              }
              goto LABEL_37;
            }
          }
        }
      }
    }
LABEL_30:
    unint64_t v4 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v3 << 6);
    goto LABEL_31;
  }
  __break(1u);
}

uint64_t Lyrics.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Lyrics.__deallocating_deinit()
{
  Lyrics.deinit();

  return swift_deallocClassInstance();
}

id specialized implicit closure #1 in MSVLyricsLine.primaryVocalWords.getter(id *a1)
{
  return [*a1 isBackgroundVocal];
}

id protocol witness for TimedElement.startTime.getter in conformance MSVLyricsLine()
{
  return [*v0 startTime];
}

id protocol witness for TimedElement.endTime.getter in conformance MSVLyricsLine()
{
  return [*v0 endTime];
}

uint64_t MSVLyricsAgent.isEqual(_:)(uint64_t a1)
{
  outlined init with copy of (String, Any)(a1, (uint64_t)v48, &_sypSgMD_2);
  if (!v49)
  {
    outlined destroy of TaskPriority?((uint64_t)v48, &_sypSgMD_2);
    goto LABEL_46;
  }
  type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for MSVLyricsAgent);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_46:
    char v34 = 0;
    return v34 & 1;
  }
  id v2 = [v1 type];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  id v7 = [v47 type];
  if (v7)
  {
    char v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    if (v6)
    {
      if (!v11) {
        goto LABEL_44;
      }
      if (v4 == v9 && v6 == v11)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v12 & 1) == 0) {
          goto LABEL_51;
        }
      }
    }
    else if (v11)
    {
      goto LABEL_44;
    }
  }
  else if (v6)
  {
    goto LABEL_44;
  }
  id v13 = [v1 name];
  if (v13)
  {
    unint64_t v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v17 = 0;
  }
  id v18 = [v47 name];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;

    if (v17)
    {
      if (!v22) {
        goto LABEL_44;
      }
      if (v15 == v20 && v17 == v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0) {
          goto LABEL_51;
        }
      }
    }
    else if (v22)
    {
      goto LABEL_44;
    }
  }
  else if (v17)
  {
    goto LABEL_44;
  }
  id v24 = [v1 artistID];
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v28 = 0;
  }
  id v29 = [v47 artistID];
  if (!v29)
  {
    if (v28) {
      goto LABEL_44;
    }
    goto LABEL_49;
  }
  long long v30 = v29;
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v32;

  if (!v28)
  {
    if (v33) {
      goto LABEL_44;
    }
    goto LABEL_49;
  }
  if (!v33) {
    goto LABEL_44;
  }
  if (v26 == v31 && v28 == v33)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v36 & 1) == 0)
  {
LABEL_51:

    goto LABEL_46;
  }
LABEL_49:
  id v37 = [v1 identifier];
  if (v37)
  {
    uint64_t v38 = v37;
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v41 = v40;
  }
  else
  {
    uint64_t v39 = 0;
    uint64_t v41 = 0;
  }
  id v42 = [v47 identifier];
  if (!v42)
  {
    if (!v41)
    {

      char v34 = 1;
      return v34 & 1;
    }
    goto LABEL_44;
  }
  uint64_t v43 = v42;
  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v46 = v45;

  if (!v41)
  {

    if (!v46)
    {
      char v34 = 1;
      return v34 & 1;
    }
    goto LABEL_45;
  }
  if (!v46)
  {
LABEL_44:

LABEL_45:
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  if (v39 == v44 && v41 == v46) {
    char v34 = 1;
  }
  else {
    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v34 & 1;
}

uint64_t one-time initialization function for lyrics()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.lyrics);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.lyrics);
  return static Logger.music(_:)();
}

uint64_t static Logger.lyrics.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for lyrics != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.lyrics);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

size_t _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation3URLVSg_Tg5_0(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    id v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCy10Foundation3URLVSgGMD_0);
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&_s10Foundation3URLVSgMD_1) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  id v13 = (void *)swift_allocObject();
  uint64_t result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  _OWORD v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&_s10Foundation3URLVSgMD_1) - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

char *_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_1(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCySSGMD_1);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  id v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSs_Tg5_0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCySsGMD_0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  id v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFyyc_Tg5_0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCyyycGMD_0);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&_syycMD_0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t _ss15ContiguousArrayV16_createNewBuffer14bufferIsUnique15minimumCapacity13growForAppendySb_SiSbtF10Foundation3URLVSg_Tg5_0(size_t a1, int64_t a2, char a3)
{
  size_t result = _ss22_ContiguousArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation3URLVSg_Tg5_0(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

char *_ss15ContiguousArrayV16_createNewBuffer14bufferIsUnique15minimumCapacity13growForAppendySb_SiSbtFSS_Tg5_1(char *a1, int64_t a2, char a3)
{
  size_t result = _ss22_ContiguousArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_1(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

size_t _ss22_ContiguousArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtF10Foundation3URLVSg_Tg5_0(size_t result, int64_t a2, char a3, void *a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    id v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCy10Foundation3URLVSgGMD_0);
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&_s10Foundation3URLVSgMD_1) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  id v13 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_29;
  }
  _OWORD v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&_s10Foundation3URLVSgMD_1) - 8);
  if (v5)
  {
    if (v13 < a4
      || (unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(void *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

char *_ss22_ContiguousArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSS_Tg5_1(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCySSGMD_1);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  id v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

size_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(size_t result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  char v8 = result;
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_29;
  }
  _OWORD v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(result - v15) / v14);
LABEL_19:
  uint64_t v18 = *(void *)(a6(0) - 8);
  if (v8)
  {
    if (v16 < a4
      || (unint64_t v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80),
          (char *)v16 + v19 >= (char *)a4 + v19 + *(void *)(v18 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v16;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(char a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v14 = ~v3;
    while (1)
    {
      int v5 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v4);
      if (v5 == 1) {
        unint64_t v6 = 0xD000000000000014;
      }
      else {
        unint64_t v6 = 0xD000000000000015;
      }
      if (v5 == 1) {
        unint64_t v7 = 0x80000001004724C0;
      }
      else {
        unint64_t v7 = 0x80000001004724E0;
      }
      if (*(unsigned char *)(*(void *)(v2 + 48) + v4)) {
        unint64_t v8 = v6;
      }
      else {
        unint64_t v8 = 0xD000000000000015;
      }
      if (*(unsigned char *)(*(void *)(v2 + 48) + v4)) {
        unint64_t v9 = v7;
      }
      else {
        unint64_t v9 = 0x80000001004724A0;
      }
      if (a1)
      {
        if (a1 == 1) {
          unint64_t v10 = 0xD000000000000014;
        }
        else {
          unint64_t v10 = 0xD000000000000015;
        }
        if (a1 == 1) {
          unint64_t v11 = 0x80000001004724C0;
        }
        else {
          unint64_t v11 = 0x80000001004724E0;
        }
        if (v8 != v10) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v11 = 0x80000001004724A0;
        if (v8 != 0xD000000000000015) {
          goto LABEL_26;
        }
      }
      if (v9 == v11)
      {
        swift_bridgeObjectRelease_n();
        return v4;
      }
LABEL_26:
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v14;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
  }
  return v4;
}

uint64_t _ss17_NativeDictionaryV20_copyOrMoveAndResize8capacity12moveElementsySi_SbtFs11AnyHashableV_ypTg5_0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&_ss18_DictionaryStorageCys11AnyHashableVypGMD_0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      outlined init with take of Any((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      outlined init with copy of AnyHashable(v25, (uint64_t)&v38);
      outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)outlined init with take of Any(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

void *_ss17_NativeDictionaryV4copyyyFs11AnyHashableV_ypTg5_0()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&_ss18_DictionaryStorageCys11AnyHashableVypGMD_0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    uint64_t result = outlined init with take of Any(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t a1)
{
  char v3 = *(unsigned char *)(a1 + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if (v3 & 0x3Fu) <= 0xD || (swift_stdlib_isStackAllocationSafe())
  {
    __chkstk_darwin();
    bzero((char *)&v11 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)((char *)&v11 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, a1);
    uint64_t v7 = v6;
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v8 = (void *)swift_slowAlloc();
    bzero(v8, v5);
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v8, v4, a1);
    uint64_t v7 = v9;
    swift_release();
    swift_slowDealloc();
  }
  return v7;
}

void specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a2;
  int64_t v4 = 0;
  uint64_t v5 = a3 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 56);
  int64_t v26 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v10 = v9 | (v4 << 6);
LABEL_21:
    id v14 = *(id *)(*(void *)(a3 + 48) + 8 * v10);
    id v15 = objc_msgSend(v14, "type", v23);
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v18;

      if (v17 == 0x6E6F73726570 && v19 == 0xE600000000000000)
      {

        swift_bridgeObjectRelease();
LABEL_29:
        *(unint64_t *)((char *)a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        if (__OFADD__(v25++, 1))
        {
          __break(1u);
LABEL_32:
          swift_retain();
          specialized _NativeSet.extractSubset(using:count:)(a1, v23, v25, a3);
          return;
        }
      }
      else
      {
        char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        if (v21) {
          goto LABEL_29;
        }
      }
    }
    else
    {
    }
  }
  int64_t v11 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v11 >= v26) {
    goto LABEL_32;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v11);
  ++v4;
  if (v12) {
    goto LABEL_20;
  }
  int64_t v4 = v11 + 1;
  if (v11 + 1 >= v26) {
    goto LABEL_32;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v4);
  if (v12) {
    goto LABEL_20;
  }
  int64_t v4 = v11 + 2;
  if (v11 + 2 >= v26) {
    goto LABEL_32;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v4);
  if (v12)
  {
LABEL_20:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
    goto LABEL_21;
  }
  int64_t v13 = v11 + 3;
  if (v13 >= v26) {
    goto LABEL_32;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v26) {
      goto LABEL_32;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }
LABEL_34:
  __break(1u);
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    int64_t v4 = (Swift::UInt64 *)(a2 + 40);
    do
    {
      Swift::UInt64 v5 = *v4;
      Swift::UInt v6 = v4[3];
      Swift::UInt v7 = v4[4];
      Swift::UInt v8 = v4[5];
      if ((*(v4 - 1) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v9 = *(v4 - 1);
      }
      else {
        Swift::UInt64 v9 = 0;
      }
      Hasher._combine(_:)(v9);
      if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v10 = v5;
      }
      else {
        Swift::UInt64 v10 = 0;
      }
      Hasher._combine(_:)(v10);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Hasher._combine(_:)(v6);
      Hasher._combine(_:)(v7);
      Hasher._combine(_:)(v8);
      swift_bridgeObjectRelease();
      v4 += 7;
      --v3;
    }
    while (v3);
  }
}

BOOL specialized static Lyrics.Syllable.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
    return 0;
  }
  BOOL v4 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    if (*(void *)(a1 + 32) == *(void *)(a2 + 32) && *(void *)(a1 + 40) == *(void *)(a2 + 40)) {
      return *(void *)(a1 + 48) == *(void *)(a2 + 48);
    }
    return 0;
  }
  return result;
}

uint64_t specialized static Lyrics.TextLine.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16)
    && *(double *)a1 == *(double *)a2
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && *(double *)(a1 + 40) == *(double *)(a2 + 40)
    && *(double *)(a1 + 48) == *(double *)(a2 + 48))
  {
    uint64_t v3 = (*(uint64_t (**)(void))(a1 + 56))();
    uint64_t v5 = v4;
    if (v3 == (*(uint64_t (**)(void))(a2 + 56))() && v5 == v6) {
      char v7 = 1;
    }
    else {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

uint64_t specialized Lyrics.Word.range.getter(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result + 56 * v1;
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v3 = *(void *)(v2 + 16);
  BOOL v5 = __OFADD__(v4, v3);
  uint64_t v6 = v4 + v3;
  if (v5) {
    goto LABEL_7;
  }
  BOOL result = *(void *)(result + 64);
  if (__OFSUB__(v6, result))
  {
    __break(1u);
LABEL_7:
    __break(1u);
  }
  return result;
}

uint64_t outlined retain of Lyrics.Syllable(uint64_t a1)
{
  return a1;
}

uint64_t *outlined release of Lyrics.TextLine.BackgroundVocals?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of Lyrics.TextLine.BackgroundVocals?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined release of Lyrics.SongwritersLine(uint64_t a1)
{
  return a1;
}

uint64_t sub_100308850()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100308888()
{
  return swift_deallocObject();
}

uint64_t sub_100308898()
{
  return swift_deallocObject();
}

_UNKNOWN **specialized static Lyrics.capabilities(for:)(uint64_t a1, uint64_t a2)
{
  v24[1] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.LanguageCode?);
  __chkstk_darwin();
  uint64_t v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Locale.Language();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  Swift::UInt v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Locale.LanguageCode();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin();
  unint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  id v14 = (char *)v24 - v13;
  __chkstk_darwin();
  if (!a2) {
    return &outlined read-only object #3 of static Lyrics.capabilities(for:);
  }
  uint64_t v16 = (char *)v24 - v15;
  swift_bridgeObjectRetain();
  Locale.Language.init(identifier:)();
  Locale.Language.languageCode.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v4, 1, v9) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v4, &demangling cache variable for type metadata for Locale.LanguageCode?);
    return &outlined read-only object #3 of static Lyrics.capabilities(for:);
  }
  uint64_t v18 = v16;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v4, v9);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v16, v9);
  Locale.LanguageCode.init(stringLiteral:)();
  lazy protocol witness table accessor for type Artwork and conformance Artwork(&lazy protocol witness table cache variable for type Locale.LanguageCode and conformance Locale.LanguageCode, (void (*)(uint64_t))&type metadata accessor for Locale.LanguageCode);
  char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
  long long v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v20(v12, v9);
  if ((v19 & 1) != 0
    || (Locale.LanguageCode.init(stringLiteral:)(),
        char v21 = dispatch thunk of static Equatable.== infix(_:_:)(),
        v20(v12, v9),
        (v21 & 1) != 0))
  {
    v20(v14, v9);
    v20(v18, v9);
    return &outlined read-only object #0 of static Lyrics.capabilities(for:);
  }
  Locale.LanguageCode.init(stringLiteral:)();
  char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
  v20(v12, v9);
  if (v22)
  {
    v20(v14, v9);
LABEL_11:
    v20(v18, v9);
    return &outlined read-only object #1 of static Lyrics.capabilities(for:);
  }
  Locale.LanguageCode.init(stringLiteral:)();
  char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
  v20(v12, v9);
  v20(v14, v9);
  if (v23) {
    goto LABEL_11;
  }
  v20(v18, v9);
  return &outlined read-only object #2 of static Lyrics.capabilities(for:);
}

uint64_t specialized static Lyrics.msvWordsToLyricsWords(msvWords:text:lineText:lineDuration:shouldProcessEmphasis:everyCharAWord:dontDoWordSplitting:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, int a6, char a7, char a8)
{
  v184._object = a5;
  v184._uint64_t countAndFlagsBits = a4;
  unint64_t v8 = a1;
  unint64_t v224 = a1;
  if ((a8 & 1) == 0)
  {
    if (a7)
    {
      swift_bridgeObjectRetain();
      NSString v205 = String._bridgeToObjectiveC()();
      uint64_t result = String.count.getter();
      if (result < 0) {
        goto LABEL_131;
      }
      uint64_t v37 = result;
      if (!result)
      {
        unint64_t v12 = (char *)_swiftEmptyArrayStorage;
LABEL_118:
        swift_bridgeObjectRelease();

        return (uint64_t)v12;
      }
      long long v38 = 0;
      uint64_t v39 = 0;
      unint64_t v12 = (char *)_swiftEmptyArrayStorage;
      int64x2_t v199 = vdupq_n_s64(1uLL);
      uint64_t v188 = result;
      while (1)
      {
        while (1)
        {
          if (__OFSUB__(++v39, v38)) {
            goto LABEL_123;
          }
          uint64_t v40 = v38;
          uint64_t v222 = v38;
          uint64_t v223 = (char *)(v39 - (void)v38);
          __chkstk_darwin();
          uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MSVLyricsWord]);
          unint64_t v8 = 0;
          Array.extractFirst(where:)(v41, (uint64_t)v220);
          id v209 = v220[0];
          if (v220[0]) {
            break;
          }
          long long v38 = v40;
          if (v39 == v37) {
            goto LABEL_118;
          }
        }
        if (v224 >> 62)
        {
          id v45 = v220[0];
          swift_bridgeObjectRetain();
          unint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v8)
          {
LABEL_22:
            uint64_t v43 = v222;
            uint64_t v44 = v223;
            goto LABEL_26;
          }
        }
        else
        {
          unint64_t v8 = *(void *)((v224 & 0xFFFFFFFFFFFFFF8) + 0x10);
          id v42 = v220[0];
          if (v8) {
            goto LABEL_22;
          }
        }
        uint64_t v46 = (char *)[v205 length];
        uint64_t v44 = (char *)(v46 - (char *)v40);
        if (__OFSUB__(v46, v40)) {
          goto LABEL_126;
        }
        uint64_t v43 = v40;
        uint64_t v222 = v40;
        uint64_t v223 = v44;
LABEL_26:
        uint64_t v193 = v39;
        long long v198 = v43;
        uint64_t v47 = (uint64_t)v44;
        _NSRange.makeIterator()();
        v220[0] = v48;
        v220[1] = v49;
        v220[2] = v50;
        char v221 = v51 & 1;
        Swift::Int_optional v225 = _NSRange.NSRangeIterator.next()();
        uint64_t v195 = v47;
        if (!v225.is_nil)
        {
          Swift::Int value = v225.value;
          uint64_t v53 = 0;
          double v54 = (double)v47;
          while (1)
          {
            uint64_t v55 = v12;
            if (__OFADD__(v53, 1)) {
              break;
            }
            id v56 = objc_msgSend(v205, "substringWithRange:", value, 1);
            uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v213 = v58;
            uint64_t v217 = v57;

            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Lyrics.Syllable>);
            uint64_t v59 = swift_allocObject();
            *(_OWORD *)(v59 + 16) = xmmword_100493400;
            [v209 startTime];
            double v61 = v60;
            id v62 = v209;
            [v62 endTime];
            double v64 = v63;
            [v62 startTime];
            double v66 = v65;

            double v67 = v61 + (v64 - v66) / v54 * (double)v53;
            [v62 startTime];
            double v69 = v68;
            id v70 = v62;
            [v70 endTime];
            double v72 = v71;
            [v70 startTime];
            double v74 = v73;

            id v75 = objc_msgSend(v205, "substringWithRange:", value, 1);
            uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v78 = v77;

            *(double *)(v59 + 32) = v67;
            *(double *)(v59 + 40) = v69 + (v72 - v74) / v54 * (double)(v53 + 1);
            *(void *)(v59 + 48) = v76;
            *(void *)(v59 + 56) = v78;
            *(void *)(v59 + 64) = value;
            *(int64x2_t *)(v59 + 72) = v199;
            unint64_t v12 = v55;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v55 + 2) + 1, 1, v55);
            }
            unint64_t v8 = *((void *)v12 + 2);
            unint64_t v79 = *((void *)v12 + 3);
            if (v8 >= v79 >> 1) {
              unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v79 > 1), v8 + 1, 1, v12);
            }
            *((void *)v12 + 2) = v8 + 1;
            Swift::String v80 = &v12[40 * v8];
            *((void *)v80 + 4) = v217;
            *((void *)v80 + 5) = v213;
            *((void *)v80 + 6) = v59;
            *((void *)v80 + 7) = 0;
            v80[64] = 1;
            Swift::Int_optional v226 = _NSRange.NSRangeIterator.next()();
            Swift::Int value = v226.value;
            ++v53;
            if (v226.is_nil) {
              goto LABEL_34;
            }
          }
          __break(1u);
          goto LABEL_120;
        }
LABEL_34:

        long long v38 = (void *)((char *)v198 + v195);
        if (__OFADD__(v198, v195)) {
          goto LABEL_124;
        }
        uint64_t v37 = v188;
        uint64_t v39 = v193;
        if (v193 == v188) {
          goto LABEL_118;
        }
      }
    }
    uint64_t v81 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v81 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (!v81)
    {
      swift_bridgeObjectRetain();
      unint64_t v12 = (char *)_swiftEmptyArrayStorage;
LABEL_116:
      swift_bridgeObjectRelease();
      return (uint64_t)v12;
    }
    uint64_t v180 = 4 * v81;
    int v82 = a6 ^ 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v83 = 0;
    unint64_t v84 = 0;
    uint64_t v85 = 0;
    unint64_t v8 = 0;
    LOBYTE(v86) = 1;
    unint64_t v87 = 15;
    unint64_t v12 = (char *)_swiftEmptyArrayStorage;
    Swift::String v181 = _swiftEmptyArrayStorage;
    uint64_t v218 = _swiftEmptyArrayStorage;
    unsigned int v194 = v82;
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v183 = String.index(after:)();
      swift_bridgeObjectRelease();
      BOOL v88 = (v86 & 1) == 0;
      if (v86) {
        unint64_t v89 = v87;
      }
      else {
        unint64_t v89 = v83;
      }
      unint64_t v90 = v87;
      if (v88) {
        unint64_t v87 = v84;
      }
      unint64_t v91 = v90;
      if (v89 >> 14 > (unint64_t)String.index(after:)() >> 14)
      {
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
        goto LABEL_125;
      }
      unint64_t v200 = v89 >> 14;
      swift_bridgeObjectRetain();
      uint64_t v92 = _NSRange.init(range:in:)();
      if (v8 < v87 >> 14) {
        goto LABEL_122;
      }
      uint64_t v94 = v93;
      unint64_t v210 = v8;
      unint64_t v214 = v89;
      Swift::String v185 = v85;
      uint64_t v95 = v92;
      swift_bridgeObjectRetain();
      unint64_t v206 = v87;
      unint64_t v96 = v91;
      uint64_t v202 = _NSRange.init(range:in:)();
      uint64_t v98 = v97;
      __chkstk_darwin();
      uint64_t v196 = v95;
      uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MSVLyricsWord]);
      Array.extractFirst(where:)(v99, (uint64_t)v220);
      unint64_t v86 = (unint64_t)v220[0];
      String.subscript.getter();
      uint64_t v100 = Character.isWhitespace.getter();
      swift_bridgeObjectRelease();
      if ((v100 & 1) == 0) {
        break;
      }
      uint64_t v101 = v194;
      Swift::String v102 = (void *)v86;
      if (v86)
      {
        id v103 = v185;
        if (v185) {
          goto LABEL_54;
        }
LABEL_61:
        id v112 = v102;
        LOBYTE(v86) = 0;
        unint64_t v8 = v214;
        unint64_t v83 = v214;
        goto LABEL_62;
      }
      if (v185)
      {
        id v113 = v185;
        [v113 characterRange];
        v114._uint64_t countAndFlagsBits = a2;
        v114._object = (void *)a3;
        __C::_NSRange v115 = _NSRange.convert(from:to:preserveLength:)(v184, v114, 0);
        if (v116)
        {
          swift_errorRelease();

          LOBYTE(v86) = 0;
LABEL_78:
          unint64_t v8 = v214;
          unint64_t v83 = v214;
          unint64_t v84 = v206;
          uint64_t v85 = v185;
          goto LABEL_79;
        }
        if (!_NSRange.contains(_:)(v115))
        {

          LOBYTE(v86) = 0;
          goto LABEL_78;
        }
        id v189 = v113;
        String.subscript.getter();
        uint64_t v117 = static String._fromSubstring(_:)();
        uint64_t v186 = v118;
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v218 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v218[2] + 1, 1, v218);
        }
        unint64_t v120 = v218[2];
        unint64_t v119 = v218[3];
        if (v120 >= v119 >> 1) {
          uint64_t v218 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v119 > 1), v120 + 1, 1, v218);
        }
        v218[2] = v120 + 1;
        Swift::String v121 = &v218[5 * v120];
        v121[4] = v189;
        v121[5] = v117;
        v121[6] = v186;
        v121[7] = v202;
        v121[8] = v98;
        String.subscript.getter();
        uint64_t v122 = static String._fromSubstring(_:)();
        uint64_t v124 = v123;
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          Swift::String v181 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v181[2] + 1, 1, v181);
        }
        unint64_t v86 = v181[2];
        unint64_t v125 = v181[3];
        if (v86 >= v125 >> 1) {
          Swift::String v181 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v125 > 1), v86 + 1, 1, v181);
        }
        v181[2] = v86 + 1;
        int64_t v126 = &v181[5 * v86];
        v126[4] = v122;
        v126[5] = v124;
        v126[6] = v218;
        v126[7] = v196;
        v126[8] = v94;

        unint64_t v83 = 0;
        unint64_t v84 = 0;
        uint64_t v85 = 0;
        LOBYTE(v86) = 1;
        uint64_t v218 = _swiftEmptyArrayStorage;
        unint64_t v8 = v214;
      }
      else
      {
        LOBYTE(v86) = 0;
        uint64_t v85 = 0;
        unint64_t v8 = v214;
        unint64_t v83 = v214;
        unint64_t v84 = v206;
      }
LABEL_79:
      if (v210 == (unint64_t)String.index(before:)() >> 14 && v85)
      {
        if (v210 >= v200)
        {
          unint64_t v176 = v84;
          unint64_t v177 = v83;
          char v178 = v86;
          uint64_t v182 = v102;
          swift_bridgeObjectRetain();
          Swift::String v187 = v85;
          id v127 = v85;
          uint64_t v211 = _NSRange.init(range:in:)();
          uint64_t v203 = v128;
          swift_bridgeObjectRetain();
          uint64_t v201 = _NSRange.init(range:in:)();
          uint64_t v130 = v129;
          swift_bridgeObjectRetain();
          id v179 = v127;
          String.index(after:)();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          uint64_t v131 = static String._fromSubstring(_:)();
          uint64_t v133 = v132;
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v218 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v218[2] + 1, 1, v218);
          }
          unint64_t v135 = v218[2];
          unint64_t v134 = v218[3];
          if (v135 >= v134 >> 1) {
            uint64_t v218 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v134 > 1), v135 + 1, 1, v218);
          }
          v218[2] = v135 + 1;
          int v136 = &v218[5 * v135];
          v136[4] = v179;
          v136[5] = v131;
          v136[6] = v133;
          v136[7] = v201;
          v136[8] = v130;
          swift_bridgeObjectRetain();
          String.index(after:)();
          String.subscript.getter();
          swift_bridgeObjectRelease();
          uint64_t v137 = static String._fromSubstring(_:)();
          uint64_t v139 = v138;
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            Swift::String v181 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v181[2] + 1, 1, v181);
          }
          unint64_t v141 = v181[2];
          unint64_t v140 = v181[3];
          if (v141 >= v140 >> 1) {
            Swift::String v181 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v140 > 1), v141 + 1, 1, v181);
          }
          v181[2] = v141 + 1;
          uint64_t v142 = &v181[5 * v141 + 4];
          *uint64_t v142 = v137;
          v142[1] = v139;
          v142[2] = (uint64_t)v218;
          v142[3] = v211;
          v142[4] = v203;
          v220[0] = _swiftEmptyArrayStorage;
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v141 + 1, 0);
          uint64_t v143 = 0;
          unint64_t v144 = v220[0];
          unint64_t v190 = v141;
          while (1)
          {
            uint64_t v145 = &v181[5 * v143 + 4];
            uint64_t v146 = *v145;
            unint64_t v8 = v145[2];
            uint64_t v215 = v145[1];
            uint64_t v219 = v145[4];
            uint64_t v147 = *(void *)(v8 + 16);
            uint64_t v212 = v143;
            uint64_t v207 = v146;
            if (v147)
            {
              Swift::String v204 = v144;
              uint64_t v148 = *(void **)(v8 + 40 * v147 - 8);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              [v148 endTime];
              if (!*(void *)(v8 + 16))
              {
LABEL_120:
                __break(1u);
                goto LABEL_121;
              }
              double v150 = v149;
              uint64_t v151 = v101;
              [*(id *)(v8 + 32) startTime];
              double v153 = v150 - v152;
              unint64_t v154 = v8;
              int64_t v155 = *(void *)(v8 + 16);
              if (v155)
              {
                uint64_t v222 = _swiftEmptyArrayStorage;
                swift_bridgeObjectRetain();
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v155, 0);
                id v156 = v222;
                unint64_t v157 = (uint64_t *)(v154 + 64);
                do
                {
                  uint64_t v158 = *(v157 - 3);
                  uint64_t v159 = *(v157 - 2);
                  uint64_t v160 = *(v157 - 1);
                  uint64_t v161 = *v157;
                  id v162 = (id)*(v157 - 4);
                  swift_bridgeObjectRetain();
                  [v162 startTime];
                  uint64_t v164 = v163;
                  [v162 endTime];
                  uint64_t v166 = v165;

                  uint64_t v222 = v156;
                  unint64_t v168 = v156[2];
                  unint64_t v167 = v156[3];
                  if (v168 >= v167 >> 1)
                  {
                    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v167 > 1), v168 + 1, 1);
                    id v156 = v222;
                  }
                  v157 += 5;
                  v156[2] = v168 + 1;
                  uint64_t v169 = &v156[7 * v168];
                  v169[4] = v164;
                  v169[5] = v166;
                  v169[6] = v158;
                  v169[7] = v159;
                  v169[8] = v160;
                  v169[9] = v161;
                  v169[10] = v219;
                  --v155;
                }
                while (v155);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v101 = v194;
                unint64_t v141 = v190;
                unint64_t v144 = v204;
                goto LABEL_102;
              }
              unint64_t v144 = v204;
              uint64_t v101 = v151;
            }
            else
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              double v153 = 0.0;
            }
            swift_bridgeObjectRelease();
            id v156 = _swiftEmptyArrayStorage;
LABEL_102:
            char v170 = 1;
            double v171 = 0.0;
            if (!(v101 & 1 | (v153 <= 1.0)) && v219 <= 7)
            {
              double v172 = v153 + -1.0;
              if (v153 > 2.0) {
                double v172 = 1.0;
              }
              if (v153 < 1.0) {
                double v172 = 0.0;
              }
              if (v172 > 0.0)
              {
                char v170 = 0;
                double v171 = v172;
              }
            }
            v220[0] = v144;
            unint64_t v174 = v144[2];
            unint64_t v173 = v144[3];
            if (v174 >= v173 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v173 > 1), v174 + 1, 1);
              unint64_t v144 = v220[0];
            }
            v144[2] = v174 + 1;
            unint64_t v175 = (double *)&v144[5 * v174];
            *((void *)v175 + 4) = v207;
            *((void *)v175 + 5) = v215;
            *((void *)v175 + 6) = v156;
            v175[7] = v171;
            *((unsigned char *)v175 + 64) = v170;
            uint64_t v143 = v212 + 1;
            if (v212 == v141)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              unint64_t v12 = (char *)v144;
              uint64_t v218 = _swiftEmptyArrayStorage;
              unint64_t v87 = v183;
              uint64_t v85 = v187;
              LOBYTE(v86) = v178;
              unint64_t v83 = v177;
              unint64_t v84 = v176;
              goto LABEL_42;
            }
          }
        }
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        swift_bridgeObjectRetain();
        uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
        if (v9) {
          goto LABEL_4;
        }
LABEL_128:
        swift_bridgeObjectRelease();
        return (uint64_t)_swiftEmptyArrayStorage;
      }

      unint64_t v87 = v183;
LABEL_42:
      unint64_t v8 = v87 >> 14;
      if (v87 >> 14 == v180)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_116;
      }
    }
    uint64_t v101 = v194;
    Swift::String v102 = (void *)v86;
    if (!v86) {
      goto LABEL_78;
    }
    id v103 = v185;
    if (!v185) {
      goto LABEL_61;
    }
LABEL_54:
    id v104 = v103;
    id v105 = v102;
    id v106 = v104;
    String.subscript.getter();
    uint64_t v107 = static String._fromSubstring(_:)();
    uint64_t v109 = v108;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v218 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v218[2] + 1, 1, v218);
    }
    unint64_t v86 = v218[2];
    unint64_t v110 = v218[3];
    if (v86 >= v110 >> 1) {
      uint64_t v218 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v110 > 1), v86 + 1, 1, v218);
    }
    v218[2] = v86 + 1;
    uint64_t v111 = &v218[5 * v86];
    v111[4] = v106;
    v111[5] = v107;
    v111[6] = v109;
    v111[7] = v202;
    v111[8] = v98;

    LOBYTE(v86) = 0;
    unint64_t v8 = v214;
    unint64_t v83 = v214;
LABEL_62:
    unint64_t v84 = v96;
    uint64_t v85 = v102;
    goto LABEL_79;
  }
  if (a1 >> 62) {
    goto LABEL_127;
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v9) {
    goto LABEL_128;
  }
LABEL_4:
  v220[0] = _swiftEmptyArrayStorage;
  uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9 & ~(v9 >> 63), 0);
  if ((v9 & 0x8000000000000000) == 0)
  {
    uint64_t v11 = 0;
    unint64_t v12 = (char *)v220[0];
    unint64_t v208 = v8 & 0xC000000000000001;
    unint64_t v216 = v8;
    do
    {
      Swift::String v197 = v12;
      if (v208) {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v13 = *(id *)(v8 + 8 * v11 + 32);
      }
      id v14 = v13;
      id v15 = [v13 lyricsText];
      id v16 = [v15 string];

      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v18;

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Lyrics.Syllable>);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_100493400;
      [v14 startTime];
      uint64_t v22 = v21;
      [v14 endTime];
      uint64_t v24 = v23;
      id v25 = [v14 lyricsText];
      id v26 = [v25 string];

      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v29 = v28;

      id v30 = [v14 characterRange];
      uint64_t v32 = v31;
      [v14 characterRange];
      *(void *)(v20 + 32) = v22;
      *(void *)(v20 + 40) = v24;
      *(void *)(v20 + 48) = v27;
      *(void *)(v20 + 56) = v29;
      *(void *)(v20 + 64) = v30;
      *(void *)(v20 + 72) = v32;
      *(void *)(v20 + 80) = v33;

      unint64_t v12 = v197;
      v220[0] = v197;
      unint64_t v35 = *((void *)v197 + 2);
      unint64_t v34 = *((void *)v197 + 3);
      if (v35 >= v34 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v34 > 1), v35 + 1, 1);
        unint64_t v12 = (char *)v220[0];
      }
      ++v11;
      *((void *)v12 + 2) = v35 + 1;
      uint64_t v36 = &v12[40 * v35];
      *((void *)v36 + 4) = v17;
      *((void *)v36 + 5) = v19;
      *((void *)v36 + 6) = v20;
      *((void *)v36 + 7) = 0;
      v36[64] = 1;
      unint64_t v8 = v216;
    }
    while (v9 != v11);
    goto LABEL_116;
  }
  __break(1u);
LABEL_131:
  __break(1u);
  return result;
}

uint64_t specialized static Lyrics.words(for:language:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = [a1 words];
  if (v6)
  {
    uint64_t v7 = v6;
    type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for MSVLyricsWord);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MSVLyricsWord]);
    uint64_t v9 = lazy protocol witness table accessor for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>(&lazy protocol witness table cache variable for type [MSVLyricsWord] and conformance [A], &demangling cache variable for type metadata for [MSVLyricsWord]);
    uint64_t v10 = (void *)Sequence.exclude(_:)((uint64_t)specialized implicit closure #1 in MSVLyricsLine.primaryVocalWords.getter, 0, v8, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (one-time initialization token for noSpaceLanguages != -1) {
    swift_once();
  }
  uint64_t v11 = swift_bridgeObjectRetain();
  unint64_t v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo10NLLanguageaG_SSs5NeverOTg5172_s11MusicCoreUI6LyricsC27shouldSplitOnEveryCharacter33_697B9CC07E0EE097740C02293B75B59ALL3forSbSSSg_tFZSSSo10NLLanguageacfu_32c43bab182bd346b2349def4725b5ae5dAISSTf3nnnpk_nTf1cn_nTm(v11);
  swift_bridgeObjectRelease();
  if (a3) {
    char v13 = specialized Sequence<>.contains(_:)(a2, a3, v12);
  }
  else {
    char v13 = 0;
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for noLiftNorEmphasisLanguages != -1) {
    swift_once();
  }
  uint64_t v14 = swift_bridgeObjectRetain();
  id v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo10NLLanguageaG_SSs5NeverOTg5172_s11MusicCoreUI6LyricsC27shouldSplitOnEveryCharacter33_697B9CC07E0EE097740C02293B75B59ALL3forSbSSSg_tFZSSSo10NLLanguageacfu_32c43bab182bd346b2349def4725b5ae5dAISSTf3nnnpk_nTf1cn_nTm(v14);
  swift_bridgeObjectRelease();
  if (a3) {
    char v16 = specialized Sequence<>.contains(_:)(a2, a3, v15);
  }
  else {
    char v16 = 0;
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = specialized static Lyrics.capabilities(for:)(a2, a3);
  id v18 = [a1 primaryVocalText];
  id v19 = [v18 string];

  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v22 = v21;

  id v23 = [a1 lyricsText];
  id v24 = [v23 string];

  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  id v28 = a1;
  [v28 endTime];
  [v28 startTime];

  LOBYTE(v28) = specialized Sequence<>.contains(_:)(2, (uint64_t)v17);
  swift_bridgeObjectRelease();
  uint64_t v29 = specialized static Lyrics.msvWordsToLyricsWords(msvWords:text:lineText:lineDuration:shouldProcessEmphasis:everyCharAWord:dontDoWordSplitting:)((unint64_t)v10, v20, v22, v25, v27, v28 & 1, v13 & 1, v16 & 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v29;
}

unint64_t specialized static Lyrics.direction(recognizedFrom:)()
{
  uint64_t v0 = type metadata accessor for Locale.Language();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin();
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = self;
  NSString v5 = String._bridgeToObjectiveC()();
  unint64_t v6 = (unint64_t)[v4 dominantLanguageForString:v5];

  if (v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Locale.Language.init(identifier:)();
    uint64_t v7 = Locale.Language.characterDirection.getter();

    unint64_t v6 = v7 == 2;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return v6;
}

unint64_t specialized Lyrics.TextLine.BackgroundVocals.init(backgroundVocals:language:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v9 = [a1 subwords];
  if (!v9) {
    goto LABEL_10;
  }
  uint64_t v10 = v9;
  type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for MSVLyricsWord);
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_9:
    swift_bridgeObjectRelease();
LABEL_10:
    [a1 startTime];
    uint64_t v4 = v16;
    goto LABEL_11;
  }
LABEL_4:
  if ((v11 & 0xC000000000000001) != 0)
  {
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_39;
    }
    id v12 = *(id *)(v11 + 32);
  }
  char v13 = v12;
  swift_bridgeObjectRelease();
  [v13 startTime];
  uint64_t v4 = v14;

LABEL_11:
  id v17 = [a1 subwords];
  if (!v17)
  {
LABEL_22:
    [a1 endTime];
    uint64_t v25 = v26;
    goto LABEL_23;
  }
  id v18 = v17;
  type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for MSVLyricsWord);
  unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v19 >> 62))
  {
    uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v20) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v20)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
LABEL_14:
  unint64_t result = v20 - 1;
  if (__OFSUB__(v20, 1))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if ((v19 & 0xC000000000000001) != 0)
  {
LABEL_40:
    id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_19;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_42;
  }
  if (result >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_42:
    __break(1u);
    return result;
  }
  id v22 = *(id *)(v19 + 8 * result + 32);
LABEL_19:
  id v23 = v22;
  swift_bridgeObjectRelease();
  [v23 endTime];
  uint64_t v25 = v24;

LABEL_23:
  if (one-time initialization token for noSpaceLanguages != -1) {
    swift_once();
  }
  uint64_t v27 = swift_bridgeObjectRetain();
  id v28 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo10NLLanguageaG_SSs5NeverOTg5172_s11MusicCoreUI6LyricsC27shouldSplitOnEveryCharacter33_697B9CC07E0EE097740C02293B75B59ALL3forSbSSSg_tFZSSSo10NLLanguageacfu_32c43bab182bd346b2349def4725b5ae5dAISSTf3nnnpk_nTf1cn_nTm(v27);
  swift_bridgeObjectRelease();
  if (a3) {
    char v56 = specialized Sequence<>.contains(_:)(a2, a3, v28);
  }
  else {
    char v56 = 0;
  }
  swift_bridgeObjectRelease();
  id v29 = [a1 lyricsText];
  id v30 = [v29 string];

  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v59 = v32;
  uint64_t v60 = v31;

  id v33 = [a1 characterRange];
  uint64_t v57 = v34;
  id v58 = v33;
  id v35 = [a1 lyricsText];
  id v36 = [v35 string];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v37 = specialized static Lyrics.direction(recognizedFrom:)();
  swift_bridgeObjectRelease();
  id v38 = [a1 subwords];
  if (v38)
  {
    uint64_t v39 = v38;
    uint64_t v55 = a2;
    type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for MSVLyricsWord);
    unint64_t v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    id v41 = [a1 lyricsText];
    id v42 = [v41 string];

    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v45 = v44;

    id v46 = [a1 lyricsText];
    id v47 = [v46 string];

    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v50 = v49;

    if (one-time initialization token for noLiftNorEmphasisLanguages != -1) {
      swift_once();
    }
    uint64_t v51 = swift_bridgeObjectRetain();
    Swift::String v52 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo10NLLanguageaG_SSs5NeverOTg5172_s11MusicCoreUI6LyricsC27shouldSplitOnEveryCharacter33_697B9CC07E0EE097740C02293B75B59ALL3forSbSSSg_tFZSSSo10NLLanguageacfu_32c43bab182bd346b2349def4725b5ae5dAISSTf3nnnpk_nTf1cn_nTm(v51);
    swift_bridgeObjectRelease();
    if (a3) {
      char v53 = specialized Sequence<>.contains(_:)(v55, a3, v52);
    }
    else {
      char v53 = 0;
    }
    swift_bridgeObjectRelease();
    double v54 = (void *)specialized static Lyrics.msvWordsToLyricsWords(msvWords:text:lineText:lineDuration:shouldProcessEmphasis:everyCharAWord:dontDoWordSplitting:)(v40, v43, v45, v48, v50, 0, v56 & 1, v53 & 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  else
  {
    double v54 = _swiftEmptyArrayStorage;
  }
  unint64_t result = swift_bridgeObjectRelease();
  *(void *)a4 = v4;
  *(void *)(a4 + 8) = v25;
  *(void *)(a4 + 16) = v60;
  *(void *)(a4 + 24) = v59;
  *(void *)(a4 + 32) = v58;
  *(void *)(a4 + 40) = v57;
  *(unsigned char *)(a4 + 48) = v37 & 1;
  *(void *)(a4 + 56) = v54;
  return result;
}

void *specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Lyrics.LineTranslationMetadata>);
  unint64_t result = (void *)static _DictionaryStorage.copy(original:)();
  int64_t v8 = 0;
  uint64_t v54 = a1;
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v10 = a1 + 64;
  uint64_t v9 = v11;
  uint64_t v12 = 1 << *(unsigned char *)(v10 - 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v9;
  uint64_t v47 = v10;
  int64_t v48 = (unint64_t)(v12 + 63) >> 6;
  Swift::String v52 = result;
  char v53 = result + 8;
  uint64_t v50 = a3;
  uint64_t v51 = a4;
  if (!v14) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v56 = (v14 - 1) & v14;
  for (unint64_t i = __clz(__rbit64(v14)) | (v8 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v8 << 6))
  {
    uint64_t v19 = *(void *)(v54 + 56);
    uint64_t v20 = (uint64_t *)(*(void *)(v54 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    uint64_t v65 = *v20;
    id v22 = *(void **)(v19 + 8 * i);
    uint64_t v58 = v21;
    swift_bridgeObjectRetain();
    id v23 = v22;
    id v24 = [a2 type];
    id v25 = [v23 lyricsText];
    id v26 = [v25 string];

    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v28;

    int64_t v57 = v8;
    if (v24 == (id)2)
    {
      uint64_t v49 = v27;
      id v30 = (void *)specialized static Lyrics.words(for:language:)(v23, a3, a4);
      id v31 = [v23 backgroundVocals];
      if (v31)
      {
        uint64_t v32 = v31;
        swift_bridgeObjectRetain();
        specialized Lyrics.TextLine.BackgroundVocals.init(backgroundVocals:language:)(v32, a3, a4, (uint64_t)&v59);
        uint64_t v33 = v60;
        uint64_t v34 = v61;
        long long v45 = v62;
        long long v46 = v59;
        uint64_t v35 = v63;
        uint64_t v36 = v64;

        long long v38 = v45;
        long long v37 = v46;
      }
      else
      {

        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        long long v37 = 0uLL;
        long long v38 = 0uLL;
      }
      unint64_t result = v52;
      uint64_t v39 = v65;
      uint64_t v27 = v49;
    }
    else
    {

      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      long long v37 = 0uLL;
      long long v38 = 0uLL;
      id v30 = _swiftEmptyArrayStorage;
      unint64_t result = v52;
      uint64_t v39 = v65;
    }
    *(void *)((char *)v53 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    unint64_t v40 = (void *)(result[6] + 16 * i);
    void *v40 = v39;
    v40[1] = v58;
    uint64_t v41 = result[7] + 88 * i;
    *(void *)uint64_t v41 = v27;
    *(void *)(v41 + 8) = v29;
    *(void *)(v41 + 16) = v30;
    *(_OWORD *)(v41 + 24) = v37;
    *(void *)(v41 + 40) = v33;
    *(void *)(v41 + 48) = v34;
    *(_OWORD *)(v41 + 56) = v38;
    *(void *)(v41 + 72) = v35;
    *(void *)(v41 + 80) = v36;
    uint64_t v42 = result[2];
    BOOL v43 = __OFADD__(v42, 1);
    uint64_t v44 = v42 + 1;
    if (v43)
    {
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    result[2] = v44;
    a3 = v50;
    a4 = v51;
    unint64_t v14 = v56;
    int64_t v8 = v57;
    if (v56) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v16 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_30;
    }
    if (v16 >= v48) {
      return result;
    }
    unint64_t v17 = *(void *)(v47 + 8 * v16);
    ++v8;
    if (!v17)
    {
      int64_t v8 = v16 + 1;
      if (v16 + 1 >= v48) {
        return result;
      }
      unint64_t v17 = *(void *)(v47 + 8 * v8);
      if (!v17)
      {
        int64_t v8 = v16 + 2;
        if (v16 + 2 >= v48) {
          return result;
        }
        unint64_t v17 = *(void *)(v47 + 8 * v8);
        if (!v17) {
          break;
        }
      }
    }
LABEL_18:
    uint64_t v56 = (v17 - 1) & v17;
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v48) {
    return result;
  }
  unint64_t v17 = *(void *)(v47 + 8 * v18);
  if (v17)
  {
    int64_t v8 = v18;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v8 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v8 >= v48) {
      return result;
    }
    unint64_t v17 = *(void *)(v47 + 8 * v8);
    ++v18;
    if (v17) {
      goto LABEL_18;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

char *specialized processLines #1 (_:) in Lyrics.init(identifier:songInfo:)(uint64_t a1, char *a2, uint64_t a3, BOOL *a4, void *a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v136 = a8;
  uint64_t v147 = a7;
  LOBYTE(v8) = a6;
  id v139 = a5;
  uint64_t v128 = type metadata accessor for Locale.Language();
  uint64_t v13 = *(void *)(v128 - 8);
  __chkstk_darwin();
  id v127 = (char *)&v122 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153[0] = a1;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MSVLyricsLine]);
  lazy protocol witness table accessor for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>(&lazy protocol witness table cache variable for type [MSVLyricsLine] and conformance [A], &demangling cache variable for type metadata for [MSVLyricsLine]);
  unint64_t v15 = Sequence.sorted<A>(by:comparator:)();
  unint64_t result = (char *)swift_release();
  unint64_t v137 = v15;
  if (v15 >> 62) {
    goto LABEL_100;
  }
  uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  id v18 = v139;
  if (v17)
  {
    if (v17 >= 1)
    {
      int v132 = v8 & 1;
      int64_t v126 = a2 + 16;
      uint64_t v133 = v17;
      unint64_t v135 = v15 & 0xC000000000000001;
      id v134 = self;
      swift_beginAccess();
      swift_beginAccess();
      swift_beginAccess();
      uint64_t v123 = (id *)(a3 + 16);
      swift_beginAccess();
      swift_beginAccess();
      swift_beginAccess();
      uint64_t v129 = a4 + 16;
      swift_beginAccess();
      uint64_t v19 = 0;
      uint64_t v138 = 0;
      unint64_t v125 = (void (**)(char *, uint64_t))(v13 + 8);
      double v149 = (char *)_swiftEmptyArrayStorage;
      while (1)
      {
        uint64_t v146 = v19;
        if (v135) {
          id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v20 = *(id *)(v15 + 8 * v19 + 32);
        }
        uint64_t v21 = v20;
        id v22 = [v20 agent];
        double v150 = v21;
        if (!v22) {
          goto LABEL_19;
        }
        id v23 = v22;
        swift_beginAccess();
        id v24 = v23;
        specialized Set._Variant.insert(_:)(v152, v24);
        swift_endAccess();

        id v25 = [v24 type];
        if (!v25)
        {

          goto LABEL_19;
        }
        id v26 = v25;
        uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v29 = v28;

        BOOL v30 = v27 == 0x6E6F73726570 && v29 == 0xE600000000000000;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          id v31 = [v24 identifier];
          if (v31)
          {
            uint64_t v32 = v31;
            uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v35 = v34;
          }
          else
          {
            uint64_t v33 = 0;
            uint64_t v35 = 0;
          }
          if (*v123 && (id v37 = [*v123 identifier]) != 0)
          {
            long long v38 = v37;
            uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v41 = v40;

            if (v35) {
              goto LABEL_27;
            }
          }
          else
          {
            uint64_t v39 = 0;
            uint64_t v41 = 0;
            if (v35)
            {
LABEL_27:
              if (!v41)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                id v18 = v139;
                goto LABEL_42;
              }
              if (v33 == v39 && v35 == v41)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                id v18 = v139;
              }
              else
              {
                char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                id v18 = v139;
                if ((v42 & 1) == 0) {
                  goto LABEL_41;
                }
              }
              goto LABEL_33;
            }
          }
          id v18 = v139;
          if (v41)
          {
            swift_bridgeObjectRelease();
LABEL_41:
            swift_bridgeObjectRelease();
LABEL_42:
            uint64_t v44 = v123;
            id v45 = *v123;
            long long v46 = v129;
            uint64_t v21 = v150;
            if (*v123)
            {
              *uint64_t v129 = !*v129;
              id v45 = *v44;
            }
            id *v44 = v23;

            int v36 = *v46;
            goto LABEL_45;
          }
        }
LABEL_33:
        if (v27 == 0x70756F7267 && v29 == 0xE500000000000000)
        {

          swift_bridgeObjectRelease();
          int v140 = 0;
          uint64_t v21 = v150;
          goto LABEL_46;
        }
        char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v21 = v150;
        if (v43)
        {

          swift_bridgeObjectRelease();
          int v140 = 0;
          goto LABEL_46;
        }
        if (v27 == 0x726568746FLL && v29 == 0xE500000000000000)
        {

          swift_bridgeObjectRelease();
          int v36 = 1;
          goto LABEL_45;
        }
        char v105 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        if (v105)
        {
          int v36 = 1;
          goto LABEL_45;
        }
LABEL_19:
        int v36 = *v129;
LABEL_45:
        int v140 = v36;
LABEL_46:
        id v47 = [v21 translationKey];
        if (v47)
        {
          int64_t v48 = v47;
          uint64_t v144 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v145 = v49;
        }
        else
        {
          uint64_t v144 = 0;
          uint64_t v145 = 0;
        }
        id v50 = [v18 type];
        uint64_t v51 = &selRef_primaryVocalText;
        if (v50 != (id)2) {
          uint64_t v51 = &selRef_lyricsText;
        }
        id v52 = [v21 *v51];
        id v53 = [v52 string];

        uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v56 = v55;

        uint64_t v141 = v54;
        uint64_t v142 = v56;
        NSString v57 = String._bridgeToObjectiveC()();
        a4 = (BOOL *)[v134 dominantLanguageForString:v57];

        if (a4)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v58 = v127;
          Locale.Language.init(identifier:)();
          uint64_t v59 = Locale.Language.characterDirection.getter();

          BOOL v143 = v59 == 2;
          (*v125)(v58, v128);
        }
        else
        {
          BOOL v143 = 0;
        }
        id v60 = [v21 words];
        if (v60)
        {
          uint64_t v61 = v60;
          type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for MSVLyricsWord);
          uint64_t v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v151 = v62;
          uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MSVLyricsWord]);
          uint64_t v64 = lazy protocol witness table accessor for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>(&lazy protocol witness table cache variable for type [MSVLyricsWord] and conformance [A], &demangling cache variable for type metadata for [MSVLyricsWord]);
          uint64_t v65 = v63;
          a4 = v138;
          uint64_t v13 = Sequence.exclude(_:)((uint64_t)specialized implicit closure #1 in MSVLyricsLine.primaryVocalWords.getter, 0, v65, v64);
          uint64_t v138 = a4;
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v13 = (uint64_t)_swiftEmptyArrayStorage;
        }
        uint64_t v66 = swift_allocObject();
        uint64_t v148 = v66;
        *(void *)(v66 + 16) = _swiftEmptyArrayStorage;
        double v67 = (uint64_t *)(v66 + 16);
        uint64_t v68 = swift_allocObject();
        *(_OWORD *)(v68 + 16) = 0u;
        a3 = v68 + 16;
        *(_OWORD *)(v68 + 32) = 0u;
        *(_OWORD *)(v68 + 48) = 0u;
        *(_OWORD *)(v68 + 64) = 0u;
        if ([v18 type] == (id)2)
        {
          id v69 = [v18 language];
          if (v69)
          {
            id v70 = v69;
            uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v73 = v72;
          }
          else
          {
            uint64_t v71 = 0;
            uint64_t v73 = 0;
          }
          double v74 = v150;
          uint64_t v75 = specialized static Lyrics.words(for:language:)(v150, v71, v73);
          swift_bridgeObjectRelease();
          swift_beginAccess();
          *double v67 = v75;
          swift_bridgeObjectRelease();
          id v76 = [v74 backgroundVocals];
          if (v76)
          {
            uint64_t v124 = v68 + 16;
            id v77 = v76;
            id v78 = [v139 language];
            if (v78)
            {
              unint64_t v79 = v78;
              uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v82 = v81;
            }
            else
            {

              uint64_t v80 = 0;
              uint64_t v82 = 0;
            }
            specialized Lyrics.TextLine.BackgroundVocals.init(backgroundVocals:language:)(v77, v80, v82, (uint64_t)v153);
            uint64_t v83 = v153[0];
            uint64_t v84 = v153[1];
            uint64_t v85 = v153[2];
            a4 = (BOOL *)v153[3];
            uint64_t v86 = v153[4];
            uint64_t v130 = v154;
            uint64_t v131 = v153[5];
            uint64_t v87 = v155;

            a3 = v124;
          }
          else
          {
            uint64_t v83 = 0;
            uint64_t v84 = 0;
            uint64_t v85 = 0;
            a4 = 0;
            uint64_t v86 = 0;
            uint64_t v130 = 0;
            uint64_t v131 = 0;
            uint64_t v87 = 0;
          }
          swift_beginAccess();
          uint64_t v88 = *(void *)(v68 + 16);
          uint64_t v89 = *(void *)(v68 + 24);
          uint64_t v90 = *(void *)(v68 + 32);
          uint64_t v91 = *(void *)(v68 + 40);
          *(void *)(v68 + 16) = v83;
          *(void *)(v68 + 24) = v84;
          *(void *)(v68 + 32) = v85;
          *(void *)(v68 + 40) = a4;
          uint64_t v92 = v131;
          *(void *)(v68 + 48) = v86;
          *(void *)(v68 + 56) = v92;
          *(void *)(v68 + 64) = v130;
          *(void *)(v68 + 72) = v87;
          outlined consume of Lyrics.TextLine.BackgroundVocals?(v88, v89, v90, v91);
          uint64_t v21 = v150;
        }
        a2 = (char *)[v21 lineIndex];
        [v21 startTime];
        uint64_t v94 = v93;
        [v21 endTime];
        uint64_t v96 = v95;
        if ((unint64_t)v13 >> 62)
        {
          if (v13 < 0) {
            a4 = (BOOL *)v13;
          }
          else {
            a4 = (BOOL *)(v13 & 0xFFFFFFFFFFFFFF8);
          }
          swift_bridgeObjectRetain();
          uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
          if (!v8)
          {
LABEL_86:
            swift_bridgeObjectRelease();
            [v21 startTime];
            uint64_t v99 = v106;
            swift_bridgeObjectRelease();
            [v21 endTime];
            uint64_t v104 = v107;
            goto LABEL_87;
          }
        }
        else
        {
          uint64_t v8 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v8) {
            goto LABEL_86;
          }
        }
        if ((v13 & 0xC000000000000001) != 0)
        {
          uint64_t v97 = (BOOL *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
LABEL_100:
            swift_bridgeObjectRetain();
            unint64_t v15 = v137;
            uint64_t v121 = _CocoaArrayWrapper.endIndex.getter();
            unint64_t result = (char *)swift_bridgeObjectRelease();
            uint64_t v17 = v121;
            goto LABEL_3;
          }
          uint64_t v97 = (BOOL *)*(id *)(v13 + 32);
        }
        a4 = v97;
        swift_bridgeObjectRelease();
        [a4 startTime];
        uint64_t v99 = v98;

        unint64_t v100 = v8 - 1;
        if (__OFSUB__(v8, 1)) {
          goto LABEL_97;
        }
        if ((v13 & 0xC000000000000001) != 0)
        {
          id v101 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v100 & 0x8000000000000000) != 0) {
            goto LABEL_98;
          }
          if (v100 >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_99;
          }
          id v101 = *(id *)(v13 + 8 * v100 + 32);
        }
        Swift::String v102 = v101;
        swift_bridgeObjectRelease();
        [v102 endTime];
        uint64_t v104 = v103;

LABEL_87:
        uint64_t v108 = (void *)swift_allocObject();
        uint64_t v109 = v136;
        uint64_t v111 = v144;
        uint64_t v110 = v145;
        v108[2] = v136;
        v108[3] = v111;
        uint64_t v112 = v141;
        v108[4] = v110;
        v108[5] = v112;
        v108[6] = v142;
        id v113 = (void *)swift_allocObject();
        v113[2] = v109;
        v113[3] = v111;
        uint64_t v114 = v148;
        v113[4] = v110;
        v113[5] = v114;
        __C::_NSRange v115 = (void *)swift_allocObject();
        v115[2] = v109;
        v115[3] = v111;
        v115[4] = v110;
        v115[5] = v68;
        swift_bridgeObjectRetain_n();
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          double v149 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v149 + 2) + 1, 1, v149);
        }
        unint64_t v117 = *((void *)v149 + 2);
        unint64_t v116 = *((void *)v149 + 3);
        id v18 = v139;
        if (v117 >= v116 >> 1) {
          double v149 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v116 > 1), v117 + 1, 1, v149);
        }
        uint64_t v118 = v146 + 1;
        unint64_t v119 = v149;
        *((void *)v149 + 2) = v117 + 1;
        unint64_t v120 = &v119[104 * v117];
        *((void *)v120 + 4) = v94;
        *((void *)v120 + 5) = v96;
        *((void *)v120 + 6) = a2;
        uint64_t v19 = v118;
        v120[56] = v140;
        v120[57] = v143;
        v120[58] = v132;
        *((void *)v120 + 8) = v147;
        *((void *)v120 + 9) = v99;
        *((void *)v120 + 10) = v104;
        *((void *)v120 + 11) = partial apply for closure #2 in processLines #1 (_:) in Lyrics.init(identifier:songInfo:);
        *((void *)v120 + 12) = v108;
        *((void *)v120 + 13) = partial apply for closure #3 in processLines #1 (_:) in Lyrics.init(identifier:songInfo:);
        *((void *)v120 + 14) = v113;
        *((void *)v120 + 15) = partial apply for closure #4 in processLines #1 (_:) in Lyrics.init(identifier:songInfo:);
        *((void *)v120 + 16) = v115;

        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        unint64_t v15 = v137;
        if (v133 == v19) {
          goto LABEL_95;
        }
      }
    }
    __break(1u);
  }
  else
  {
    double v149 = (char *)_swiftEmptyArrayStorage;
LABEL_95:
    swift_bridgeObjectRelease();
    return v149;
  }
  return result;
}

Swift::Int specialized static Lyrics.vocalistType(for:)(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a1 + 16) > 1uLL)
    {
      uint64_t v21 = swift_bridgeObjectRetain();
      uint64_t v2 = specialized _NativeSet.filter(_:)(v21);
      if ((v2 & 0xC000000000000001) != 0) {
        goto LABEL_34;
      }
      goto LABEL_30;
    }
    return 0;
  }
  if (__CocoaSet.count.getter() <= 1) {
    return 0;
  }
  uint64_t v2 = (uint64_t)&_swiftEmptySetSingleton;
  swift_bridgeObjectRetain();
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()()) {
    goto LABEL_33;
  }
  type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for MSVLyricsAgent);
  do
  {
    swift_dynamicCast();
    id v3 = [v30 type];
    if (!v3)
    {
LABEL_5:

      continue;
    }
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    if (v5 == 0x6E6F73726570 && v7 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v9 & 1) == 0) {
        goto LABEL_5;
      }
    }
    unint64_t v10 = *((void *)&_swiftEmptySetSingleton + 2);
    if (*((void *)&_swiftEmptySetSingleton + 3) <= v10) {
      specialized _NativeSet.resize(capacity:)(v10 + 1);
    }
    Swift::Int result = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptySetSingleton + 5));
    uint64_t v12 = (char *)&_swiftEmptySetSingleton + 56;
    uint64_t v13 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
    unint64_t v14 = result & ~v13;
    unint64_t v15 = v14 >> 6;
    if (((-1 << v14) & ~*((void *)&_swiftEmptySetSingleton + (v14 >> 6) + 7)) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*((void *)&_swiftEmptySetSingleton + (v14 >> 6) + 7))) | v14 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v17 = 0;
      unint64_t v18 = (unint64_t)(63 - v13) >> 6;
      do
      {
        if (++v15 == v18 && (v17 & 1) != 0)
        {
          __break(1u);
          return result;
        }
        BOOL v19 = v15 == v18;
        if (v15 == v18) {
          unint64_t v15 = 0;
        }
        v17 |= v19;
        uint64_t v20 = *(void *)&v12[8 * v15];
      }
      while (v20 == -1);
      unint64_t v16 = __clz(__rbit64(~v20)) + (v15 << 6);
    }
    *(void *)&v12[(v16 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v16;
    *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v16) = v30;
    ++*((void *)&_swiftEmptySetSingleton + 2);
  }
  while (__CocoaSet.Iterator.next()());
  uint64_t v2 = (uint64_t)&_swiftEmptySetSingleton;
LABEL_33:
  swift_release();
  if (((unint64_t)&_swiftEmptySetSingleton & 0xC000000000000001) == 0)
  {
LABEL_30:
    unint64_t v22 = *(void *)(v2 + 16);
    goto LABEL_35;
  }
LABEL_34:
  unint64_t v22 = __CocoaSet.count.getter();
LABEL_35:
  swift_release();
  specialized Sequence.contains(where:)(a1);
  char v24 = v23;
  specialized Sequence.contains(where:)(a1);
  if (v22 == 2) {
    unsigned int v26 = 1;
  }
  else {
    unsigned int v26 = 2;
  }
  if (v22 == 1) {
    unsigned int v26 = 0;
  }
  if (v22 >= 3) {
    unsigned int v27 = 2;
  }
  else {
    unsigned int v27 = 0x10000u >> (8 * v22);
  }
  if (v24) {
    unsigned int v26 = v27;
  }
  if (v22 == 2) {
    unsigned int v28 = 1;
  }
  else {
    unsigned int v28 = 2;
  }
  if (v22 >= 3) {
    unsigned int v29 = 2;
  }
  else {
    unsigned int v29 = 0x10200u >> (8 * v22);
  }
  if ((v24 & 1) == 0) {
    unsigned int v28 = v29;
  }
  if (v25) {
    return v28;
  }
  else {
    return v26;
  }
}

uint64_t sub_10030BFB0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_10030C000()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10030C038()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type Lyrics.Word.Emphasis and conformance Lyrics.Word.Emphasis()
{
  unint64_t result = lazy protocol witness table cache variable for type Lyrics.Word.Emphasis and conformance Lyrics.Word.Emphasis;
  if (!lazy protocol witness table cache variable for type Lyrics.Word.Emphasis and conformance Lyrics.Word.Emphasis)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Lyrics.Word.Emphasis and conformance Lyrics.Word.Emphasis);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Lyrics.Word and conformance Lyrics.Word()
{
  unint64_t result = lazy protocol witness table cache variable for type Lyrics.Word and conformance Lyrics.Word;
  if (!lazy protocol witness table cache variable for type Lyrics.Word and conformance Lyrics.Word)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Lyrics.Word and conformance Lyrics.Word);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Lyrics.Syllable and conformance Lyrics.Syllable()
{
  unint64_t result = lazy protocol witness table cache variable for type Lyrics.Syllable and conformance Lyrics.Syllable;
  if (!lazy protocol witness table cache variable for type Lyrics.Syllable and conformance Lyrics.Syllable)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Lyrics.Syllable and conformance Lyrics.Syllable);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Lyrics.TextLine and conformance Lyrics.TextLine()
{
  unint64_t result = lazy protocol witness table cache variable for type Lyrics.TextLine and conformance Lyrics.TextLine;
  if (!lazy protocol witness table cache variable for type Lyrics.TextLine and conformance Lyrics.TextLine)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Lyrics.TextLine and conformance Lyrics.TextLine);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Lyrics.LyricsType and conformance Lyrics.LyricsType()
{
  unint64_t result = lazy protocol witness table cache variable for type Lyrics.LyricsType and conformance Lyrics.LyricsType;
  if (!lazy protocol witness table cache variable for type Lyrics.LyricsType and conformance Lyrics.LyricsType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Lyrics.LyricsType and conformance Lyrics.LyricsType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Lyrics.VocalistsType and conformance Lyrics.VocalistsType()
{
  unint64_t result = lazy protocol witness table cache variable for type Lyrics.VocalistsType and conformance Lyrics.VocalistsType;
  if (!lazy protocol witness table cache variable for type Lyrics.VocalistsType and conformance Lyrics.VocalistsType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Lyrics.VocalistsType and conformance Lyrics.VocalistsType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Lyrics.AgentAlignment and conformance Lyrics.AgentAlignment()
{
  unint64_t result = lazy protocol witness table cache variable for type Lyrics.AgentAlignment and conformance Lyrics.AgentAlignment;
  if (!lazy protocol witness table cache variable for type Lyrics.AgentAlignment and conformance Lyrics.AgentAlignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Lyrics.AgentAlignment and conformance Lyrics.AgentAlignment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Lyrics.Direction and conformance Lyrics.Direction()
{
  unint64_t result = lazy protocol witness table cache variable for type Lyrics.Direction and conformance Lyrics.Direction;
  if (!lazy protocol witness table cache variable for type Lyrics.Direction and conformance Lyrics.Direction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Lyrics.Direction and conformance Lyrics.Direction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Lyrics.Capability and conformance Lyrics.Capability()
{
  unint64_t result = lazy protocol witness table cache variable for type Lyrics.Capability and conformance Lyrics.Capability;
  if (!lazy protocol witness table cache variable for type Lyrics.Capability and conformance Lyrics.Capability)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Lyrics.Capability and conformance Lyrics.Capability);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Lyrics.Capability()
{
  return lazy protocol witness table accessor for type Publishers.Autoconnect<NSTimer.TimerPublisher> and conformance Publishers.Autoconnect<A>(&lazy protocol witness table cache variable for type [Lyrics.Capability] and conformance [A], &demangling cache variable for type metadata for [Lyrics.Capability]);
}

unint64_t lazy protocol witness table accessor for type Lyrics.AudioAttribute and conformance Lyrics.AudioAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type Lyrics.AudioAttribute and conformance Lyrics.AudioAttribute;
  if (!lazy protocol witness table cache variable for type Lyrics.AudioAttribute and conformance Lyrics.AudioAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Lyrics.AudioAttribute and conformance Lyrics.AudioAttribute);
  }
  return result;
}

uint64_t type metadata accessor for Lyrics()
{
  return self;
}

uint64_t destroy for Lyrics.Word()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Lyrics.Word(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Lyrics.Word(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  return a1;
}

__n128 __swift_memcpy33_8_0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Lyrics.Word(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.Word(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.Word(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.Word()
{
  return &type metadata for Lyrics.Word;
}

ValueMetadata *type metadata accessor for Lyrics.Word.Emphasis()
{
  return &type metadata for Lyrics.Word.Emphasis;
}

uint64_t initializeWithCopy for Lyrics.Syllable(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Lyrics.Syllable(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

__n128 __swift_memcpy56_8_0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Lyrics.Syllable(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.Syllable(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.Syllable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.Syllable()
{
  return &type metadata for Lyrics.Syllable;
}

uint64_t destroy for Lyrics.TextLine()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for Lyrics.TextLine(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v3 = *(void *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(void *)(a1 + 96) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Lyrics.TextLine(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v6;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy104_8_0(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Lyrics.TextLine(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.TextLine(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.TextLine(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.TextLine()
{
  return &type metadata for Lyrics.TextLine;
}

uint64_t destroy for Lyrics.TextLine.BackgroundVocals()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Lyrics.TextLine.BackgroundVocals(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Lyrics.TextLine.BackgroundVocals(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8_0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Lyrics.TextLine.BackgroundVocals(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.TextLine.BackgroundVocals(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.TextLine.BackgroundVocals(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.TextLine.BackgroundVocals()
{
  return &type metadata for Lyrics.TextLine.BackgroundVocals;
}

uint64_t getEnumTagSinglePayload for Lyrics.InstrumentalLine(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.InstrumentalLine(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.InstrumentalLine()
{
  return &type metadata for Lyrics.InstrumentalLine;
}

uint64_t destroy for Lyrics.SongwritersLine()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Lyrics.SongwritersLine(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Lyrics.SongwritersLine(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8_1(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Lyrics.SongwritersLine(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.SongwritersLine(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.SongwritersLine(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.SongwritersLine()
{
  return &type metadata for Lyrics.SongwritersLine;
}

ValueMetadata *type metadata accessor for Lyrics.LyricsType()
{
  return &type metadata for Lyrics.LyricsType;
}

ValueMetadata *type metadata accessor for Lyrics.VocalistsType()
{
  return &type metadata for Lyrics.VocalistsType;
}

ValueMetadata *type metadata accessor for Lyrics.AgentAlignment()
{
  return &type metadata for Lyrics.AgentAlignment;
}

unsigned char *storeEnumTagSinglePayload for Lyrics.AgentAlignment(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10030D0BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.Direction()
{
  return &type metadata for Lyrics.Direction;
}

unsigned char *storeEnumTagSinglePayload for Lyrics.LyricsType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10030D1C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.Capability()
{
  return &type metadata for Lyrics.Capability;
}

void *__swift_memcpy8_8_0(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for Lyrics.AudioAttribute()
{
  return &type metadata for Lyrics.AudioAttribute;
}

uint64_t destroy for Lyrics.LineTranslationMetadata(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Lyrics.LineTranslationMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v6;
    long long v7 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v7;
  }
  return a1;
}

uint64_t assignWithCopy for Lyrics.LineTranslationMetadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 24);
  uint64_t v5 = (long long *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v6)
    {
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Lyrics.TextLine.BackgroundVocals(a1 + 24);
      long long v7 = *(_OWORD *)(a2 + 72);
      long long v9 = *v5;
      long long v8 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = v7;
      *uint64_t v4 = v9;
      *(_OWORD *)(a1 + 40) = v8;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v10 = *v5;
    long long v11 = *(_OWORD *)(a2 + 40);
    long long v12 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v12;
    *uint64_t v4 = v10;
    *(_OWORD *)(a1 + 40) = v11;
  }
  return a1;
}

uint64_t outlined destroy of Lyrics.TextLine.BackgroundVocals(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for Lyrics.LineTranslationMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 48)) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(a2 + 48);
  if (!v5)
  {
    outlined destroy of Lyrics.TextLine.BackgroundVocals(a1 + 24);
LABEL_5:
    long long v6 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v6;
    long long v7 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v7;
    return a1;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Lyrics.LineTranslationMetadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Lyrics.LineTranslationMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for Lyrics.LineTranslationMetadata()
{
  return &unk_100541F08;
}

void *outlined copy of PlaylistCovers.CarouselItem.CarouselItemType(void *result, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  if (result)
  {
    id v15 = result;
    outlined copy of PlaylistCovers.Cover.Representation?(a2, a3, a4, a5, a6, a7, a8);
    return (void *)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined copy of PageIndicator?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined init with copy of PlaylistCurators.Curator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PlaylistCurators.Curator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PlaylistCurators.Curator(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PlaylistCurators.Curator(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type MSVLyricsAgent and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type MSVLyricsAgent and conformance NSObject;
  if (!lazy protocol witness table cache variable for type MSVLyricsAgent and conformance NSObject)
  {
    type metadata accessor for UIMenu(255, (unint64_t *)&lazy cache variable for type metadata for MSVLyricsAgent);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MSVLyricsAgent and conformance NSObject);
  }
  return result;
}

const char *keypath_get_selector_startTime()
{
  return "startTime";
}

id sub_10030D868@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 startTime];
  *a2 = v4;
  return result;
}

id sub_10030D89C(double *a1, id *a2)
{
  return [*a2 setStartTime:*a1];
}

uint64_t sub_10030D8B0()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_10030D8E8()
{
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t sub_10030D92C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in processLines #1 (_:) in Lyrics.init(identifier:songInfo:)()
{
  return closure #2 in processLines #1 (_:) in Lyrics.init(identifier:songInfo:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t partial apply for closure #3 in processLines #1 (_:) in Lyrics.init(identifier:songInfo:)()
{
  return closure #3 in processLines #1 (_:) in Lyrics.init(identifier:songInfo:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t objectdestroy_77Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in processLines #1 (_:) in Lyrics.init(identifier:songInfo:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #4 in processLines #1 (_:) in Lyrics.init(identifier:songInfo:)(*(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), a1);
}

BOOL partial apply for closure #3 in static Lyrics.msvWordsToLyricsWords(msvWords:text:lineText:lineDuration:shouldProcessEmphasis:everyCharAWord:dontDoWordSplitting:)(id *a1)
{
  return closure #3 in static Lyrics.msvWordsToLyricsWords(msvWords:text:lineText:lineDuration:shouldProcessEmphasis:everyCharAWord:dontDoWordSplitting:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

BOOL partial apply for closure #2 in static Lyrics.msvWordsToLyricsWords(msvWords:text:lineText:lineDuration:shouldProcessEmphasis:everyCharAWord:dontDoWordSplitting:)(id *a1)
{
  return closure #2 in static Lyrics.msvWordsToLyricsWords(msvWords:text:lineText:lineDuration:shouldProcessEmphasis:everyCharAWord:dontDoWordSplitting:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t outlined copy of Lyrics.TextLine.BackgroundVocals?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void outlined consume of Lyrics.LineTranslationMetadata?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Lyrics.TextLine.BackgroundVocals?(a4, a5, a6, a7);
  }
}

uint64_t lazy protocol witness table accessor for type Artwork and conformance Artwork(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static LyricsLoader.supportsLyrics(for:)(char *a1)
{
  uint64_t v2 = type metadata accessor for Song();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v118 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  int64_t v126 = (char *)&v118 - v6;
  __chkstk_darwin();
  unint64_t v125 = (char *)&v118 - v7;
  __chkstk_darwin();
  uint64_t v124 = (char *)&v118 - v8;
  __chkstk_darwin();
  unint64_t v119 = (char *)&v118 - v9;
  __chkstk_darwin();
  uint64_t v118 = (char *)&v118 - v10;
  __chkstk_darwin();
  long long v12 = (char *)&v118 - v11;
  __chkstk_darwin();
  unint64_t v14 = (char *)&v118 - v13;
  __chkstk_darwin();
  uint64_t v121 = (char *)&v118 - v15;
  __chkstk_darwin();
  unint64_t v120 = (char *)&v118 - v16;
  __chkstk_darwin();
  uint64_t v123 = (char *)&v118 - v17;
  __chkstk_darwin();
  uint64_t v122 = (char *)&v118 - v18;
  __chkstk_darwin();
  uint64_t v20 = (char *)&v118 - v19;
  char v21 = Song.hasLyrics.getter();
  uint64_t v127 = v3;
  unint64_t v22 = a1;
  char v23 = a1;
  char v24 = (char *)v2;
  char v25 = *(char **)(v3 + 16);
  ((void (*)(char *, char *, char *))v25)(v20, v23, v24);
  if (v21)
  {
    unsigned int v26 = v20;
    unsigned int v27 = *(void (**)(char *, char *))(v3 + 8);
    v27(v26, v24);
  }
  else
  {
    char v28 = Song.hasCustomLyrics.getter();
    unsigned int v29 = v20;
    unsigned int v27 = *(void (**)(char *, char *))(v3 + 8);
    v27(v29, v24);
    if ((v28 & 1) == 0)
    {
      if (one-time initialization token for lyrics != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for Logger();
      __swift_project_value_buffer(v45, (uint64_t)static Logger.lyrics);
      ((void (*)(char *, char *, char *))v25)(v5, v22, v24);
      long long v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = swift_slowAlloc();
        uint64_t v131 = (char *)swift_slowAlloc();
        *(_DWORD *)uint64_t v48 = 136446210;
        uint64_t v49 = Song.loggingInfo.getter();
        *(void *)(v48 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v49, v50, (uint64_t *)&v131);
        swift_bridgeObjectRelease();
        v27(v5, v24);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Loader supportsLyrics=false [hasLyrics and hasCustomLyrics were false] %{public}s", (uint8_t *)v48, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        v27(v5, v24);
      }

      char v102 = 0;
      return v102 & 1;
    }
  }
  BagProvider.shared.unsafeMutableAddressor();
  swift_retain();
  id v30 = (char *)BagProvider.bag.getter();
  swift_release();
  id v31 = v22;
  if (!v30)
  {
    if (one-time initialization token for lyrics != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.lyrics);
    ((void (*)(char *, char *, char *))v25)(v14, v22, v24);
    uint64_t v123 = v25;
    ((void (*)(char *, char *, char *))v25)(v12, v22, v24);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v122 = v24;
      uint64_t v37 = v36;
      uint64_t v121 = (char *)swift_slowAlloc();
      uint64_t v131 = v121;
      *(_DWORD *)uint64_t v37 = 136446466;
      char v38 = Song.hasCustomLyrics.getter();
      BOOL v39 = (v38 & 1) == 0;
      if (v38) {
        uint64_t v40 = 1702195828;
      }
      else {
        uint64_t v40 = 0x65736C6166;
      }
      if (v39) {
        unint64_t v41 = 0xE500000000000000;
      }
      else {
        unint64_t v41 = 0xE400000000000000;
      }
      *(void *)(v37 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v40, v41, (uint64_t *)&v131);
      swift_bridgeObjectRelease();
      char v42 = v14;
      uint64_t v32 = v27;
      v27(v42, v122);
      *(_WORD *)(v37 + 12) = 2082;
      uint64_t v43 = Song.loggingInfo.getter();
      *(void *)(v37 + 14) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v43, v44, (uint64_t *)&v131);
      swift_bridgeObjectRelease();
      v27(v12, v122);
      id v31 = v22;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Loader supportsLyrics=%{public}s [bag is nil] %{public}s", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      char v24 = v122;
      swift_slowDealloc();
    }
    else
    {
      uint64_t v68 = v14;
      uint64_t v32 = v27;
      v27(v68, v24);
      v27(v12, v24);
    }

    char v25 = v123;
LABEL_34:
    char v69 = Song.hasLyrics.getter();
    id v70 = v126;
    uint64_t v71 = v125;
    uint64_t v72 = v124;
    if ((v69 & 1) == 0) {
      goto LABEL_41;
    }
    static ApplicationCapabilities.shared.getter((uint64_t)v129);
    uint64_t v73 = v25;
    uint64_t v74 = v130;
    swift_bridgeObjectRetain();
    outlined release of ApplicationCapabilities((uint64_t)v129);
    char v75 = _sSh8containsySbxF9MusicCore23ApplicationCapabilitiesV7ServiceO_Tg5_0(2u, v74);
    char v25 = v73;
    swift_bridgeObjectRelease();
    if (v75)
    {
      static ApplicationCapabilities.shared.getter((uint64_t)&v131);
      outlined release of ApplicationCapabilities((uint64_t)&v131);
      if (v132)
      {
        char v102 = 1;
        return v102 & 1;
      }
      if (one-time initialization token for lyrics != -1) {
        swift_once();
      }
      uint64_t v76 = type metadata accessor for Logger();
      __swift_project_value_buffer(v76, (uint64_t)static Logger.lyrics);
      id v77 = v118;
      ((void (*)(char *, char *, char *))v73)(v118, v31, v24);
      id v78 = v119;
      ((void (*)(char *, char *, char *))v73)(v119, v31, v24);
      unint64_t v79 = Logger.logObject.getter();
      os_log_type_t v80 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v79, v80))
      {
        uint64_t v81 = swift_slowAlloc();
        uint64_t v128 = swift_slowAlloc();
        *(_DWORD *)uint64_t v81 = 67240450;
        int v82 = Song.hasCustomLyrics.getter() & 1;
        v32(v77, v24);
        *(_DWORD *)(v81 + 4) = v82;
        *(_WORD *)(v81 + 8) = 2082;
        uint64_t v83 = Song.loggingInfo.getter();
        *(void *)(v81 + 10) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v83, v84, &v128);
        swift_bridgeObjectRelease();
        v32(v78, v24);
        uint64_t v85 = "Loader supportsLyrics=%{BOOL,public}d [not supported by subscription] subscriptionCapabilities.contains(.c"
              "atalogLyricsViewing)=false %{public}s";
        uint64_t v86 = v79;
        os_log_type_t v87 = v80;
        uint64_t v88 = (uint8_t *)v81;
        uint32_t v89 = 18;
LABEL_45:
        _os_log_impl((void *)&_mh_execute_header, v86, v87, v85, v88, v89);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
LABEL_48:

        char v102 = Song.hasCustomLyrics.getter();
        return v102 & 1;
      }
      v32(v77, v24);
      id v101 = v78;
    }
    else
    {
LABEL_41:
      if (one-time initialization token for lyrics != -1) {
        swift_once();
      }
      uint64_t v90 = type metadata accessor for Logger();
      __swift_project_value_buffer(v90, (uint64_t)static Logger.lyrics);
      ((void (*)(char *, char *, char *))v25)(v72, v31, v24);
      ((void (*)(char *, char *, char *))v25)(v71, v31, v24);
      ((void (*)(char *, char *, char *))v25)(v70, v31, v24);
      unint64_t v79 = Logger.logObject.getter();
      os_log_type_t v91 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v79, v91))
      {
        uint64_t v92 = swift_slowAlloc();
        uint64_t v123 = v31;
        uint64_t v93 = v92;
        uint64_t v128 = swift_slowAlloc();
        *(_DWORD *)uint64_t v93 = 67240962;
        int v94 = Song.hasCustomLyrics.getter() & 1;
        v32(v72, v24);
        *(_DWORD *)(v93 + 4) = v94;
        *(_WORD *)(v93 + 8) = 1026;
        int v95 = Song.hasLyrics.getter() & 1;
        v32(v71, v24);
        *(_DWORD *)(v93 + 10) = v95;
        *(_WORD *)(v93 + 14) = 1026;
        static ApplicationCapabilities.shared.getter((uint64_t)&v131);
        uint64_t v96 = v133;
        swift_bridgeObjectRetain();
        outlined release of ApplicationCapabilities((uint64_t)&v131);
        char v97 = _sSh8containsySbxF9MusicCore23ApplicationCapabilitiesV7ServiceO_Tg5_0(2u, v96);
        swift_bridgeObjectRelease();
        *(_DWORD *)(v93 + 16) = v97 & 1;
        *(_WORD *)(v93 + 20) = 2082;
        uint64_t v98 = v126;
        uint64_t v99 = Song.loggingInfo.getter();
        *(void *)(v93 + 22) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v99, v100, &v128);
        swift_bridgeObjectRelease();
        v32(v98, v24);
        uint64_t v85 = "Loader supportsLyrics=%{BOOL,public}d [can't support store lyrics] song.hasLyrics=%{BOOL,public}d allowsSu"
              "bscriptionContent=%{BOOL,public}d %{public}s";
        uint64_t v86 = v79;
        os_log_type_t v87 = v91;
        uint64_t v88 = (uint8_t *)v93;
        uint32_t v89 = 30;
        goto LABEL_45;
      }
      v32(v71, v24);
      v32(v72, v24);
      id v101 = v70;
    }
    v32(v101, v24);
    goto LABEL_48;
  }
  if ([self supportsLyricsForURLBag:v30])
  {

    uint64_t v32 = v27;
    goto LABEL_34;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v51 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v52 = [v30 dictionaryForBagKey:v51];

  if (v52)
  {

    if (one-time initialization token for lyrics != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)static Logger.lyrics);
    uint64_t v54 = v122;
    ((void (*)(char *, char *, char *))v25)(v122, v22, v24);
    uint64_t v55 = v123;
    ((void (*)(char *, char *, char *))v25)(v123, v22, v24);
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = v54;
      uint64_t v59 = swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      int64_t v126 = v30;
      uint64_t v131 = (char *)v60;
      *(_DWORD *)uint64_t v59 = 136446466;
      char v61 = Song.hasCustomLyrics.getter();
      BOOL v62 = (v61 & 1) == 0;
      if (v61) {
        uint64_t v63 = 1702195828;
      }
      else {
        uint64_t v63 = 0x65736C6166;
      }
      if (v62) {
        unint64_t v64 = 0xE500000000000000;
      }
      else {
        unint64_t v64 = 0xE400000000000000;
      }
      *(void *)(v59 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v63, v64, (uint64_t *)&v131);
      swift_bridgeObjectRelease();
      v27(v58, v24);
      *(_WORD *)(v59 + 12) = 2082;
      uint64_t v65 = v123;
      uint64_t v66 = Song.loggingInfo.getter();
      *(void *)(v59 + 14) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v66, v67, (uint64_t *)&v131);
      swift_bridgeObjectRelease();
      v27(v65, v24);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Loader supportsLyrics=%{public}s [no lyrics keys in bag] %{public}s", (uint8_t *)v59, 0x16u);
      swift_arrayDestroy();
      id v30 = v126;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v27(v54, v24);
      v27(v55, v24);
    }
  }
  else
  {
    int64_t v126 = v30;
    if (one-time initialization token for lyrics != -1) {
      swift_once();
    }
    uint64_t v103 = type metadata accessor for Logger();
    __swift_project_value_buffer(v103, (uint64_t)static Logger.lyrics);
    uint64_t v104 = v120;
    ((void (*)(char *, char *, char *))v25)(v120, v22, v24);
    char v105 = v121;
    ((void (*)(char *, char *, char *))v25)(v121, v31, v24);
    uint64_t v106 = Logger.logObject.getter();
    os_log_type_t v107 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v106, v107))
    {
      uint64_t v108 = v104;
      uint64_t v109 = swift_slowAlloc();
      uint64_t v131 = (char *)swift_slowAlloc();
      *(_DWORD *)uint64_t v109 = 136446466;
      char v110 = Song.hasCustomLyrics.getter();
      BOOL v111 = (v110 & 1) == 0;
      if (v110) {
        uint64_t v112 = 1702195828;
      }
      else {
        uint64_t v112 = 0x65736C6166;
      }
      if (v111) {
        unint64_t v113 = 0xE500000000000000;
      }
      else {
        unint64_t v113 = 0xE400000000000000;
      }
      *(void *)(v109 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v112, v113, (uint64_t *)&v131);
      swift_bridgeObjectRelease();
      v27(v108, v24);
      *(_WORD *)(v109 + 12) = 2082;
      uint64_t v114 = v121;
      uint64_t v115 = Song.loggingInfo.getter();
      *(void *)(v109 + 14) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v115, v116, (uint64_t *)&v131);
      swift_bridgeObjectRelease();
      v27(v114, v24);
      _os_log_impl((void *)&_mh_execute_header, v106, v107, "Loader supportsLyrics=%{public}s [no musicSubscription key in bag] %{public}s", (uint8_t *)v109, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v27(v104, v24);
      v27(v105, v24);
    }

    id v30 = v126;
  }
  char v102 = Song.hasCustomLyrics.getter();

  return v102 & 1;
}

uint64_t Song.loggingInfo.getter()
{
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = Song.title.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 0x64692E676E6F7320;
  v1._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v1);
  Song.id.getter();
  v2._uint64_t countAndFlagsBits = MusicItemID.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3._object = (void *)0x8000000100473350;
  v3._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v3);
  Song.catalogID.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MusicItemID?);
  v4._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0x7469742E676E6F73;
}

uint64_t _sSh8containsySbxF9MusicCore23ApplicationCapabilitiesV7ServiceO_Tg5_0(unsigned __int8 a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    Hasher.init(_seed:)();
    ApplicationCapabilities.Service.rawValue.getter(a1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v4 = Hasher._finalize()();
    uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v6 = v4 & ~v5;
    if ((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
    {
      uint64_t v7 = ~v5;
      uint64_t v8 = a1;
      while (1)
      {
        unint64_t v9 = 0xE500000000000000;
        unint64_t v10 = 0x636973756DLL;
        switch(*(unsigned char *)(*(void *)(a2 + 48) + v6))
        {
          case 1:
            unint64_t v10 = 0x646956636973756DLL;
            unint64_t v9 = 0xEB00000000736F65;
            break;
          case 2:
            unint64_t v9 = 0x8000000100467310;
            goto LABEL_13;
          case 3:
            unint64_t v9 = 0xE600000000000000;
            unint64_t v10 = 0x6C6169636F73;
            break;
          case 4:
            unint64_t v10 = 0x6F69646172;
            break;
          case 5:
            unint64_t v9 = 0xE600000000000000;
            unint64_t v10 = 0x73656E757469;
            break;
          case 6:
            unint64_t v10 = 0x74634170756F7267;
            unint64_t v9 = 0xED00007974697669;
            break;
          case 7:
            unint64_t v10 = 0x746963696C707865;
            unint64_t v9 = 0xEF746E65746E6F43;
            break;
          case 8:
            unint64_t v9 = 0x8000000100467350;
LABEL_13:
            unint64_t v10 = 0xD000000000000013;
            break;
          case 9:
            unint64_t v10 = 0xD000000000000011;
            unint64_t v9 = 0x8000000100467370;
            break;
          case 0xA:
            unint64_t v10 = 0x6C62616E45696C6DLL;
            unint64_t v9 = 0xEA00000000006465;
            break;
          default:
            break;
        }
        unint64_t v11 = 0xE500000000000000;
        unint64_t v12 = 0x636973756DLL;
        switch(v8)
        {
          case 1:
            unint64_t v11 = 0xEB00000000736F65;
            if (v10 == 0x646956636973756DLL) {
              goto LABEL_35;
            }
            goto LABEL_36;
          case 2:
            unint64_t v11 = 0x8000000100467310;
            goto LABEL_31;
          case 3:
            unint64_t v11 = 0xE600000000000000;
            if (v10 != 0x6C6169636F73) {
              goto LABEL_36;
            }
            goto LABEL_35;
          case 4:
            if (v10 != 0x6F69646172) {
              goto LABEL_36;
            }
            goto LABEL_35;
          case 5:
            unint64_t v11 = 0xE600000000000000;
            if (v10 != 0x73656E757469) {
              goto LABEL_36;
            }
            goto LABEL_35;
          case 6:
            unint64_t v11 = 0xED00007974697669;
            if (v10 != 0x74634170756F7267) {
              goto LABEL_36;
            }
            goto LABEL_35;
          case 7:
            unint64_t v11 = 0xEF746E65746E6F43;
            if (v10 != 0x746963696C707865) {
              goto LABEL_36;
            }
            goto LABEL_35;
          case 8:
            unint64_t v11 = 0x8000000100467350;
LABEL_31:
            if (v10 != 0xD000000000000013) {
              goto LABEL_36;
            }
            goto LABEL_35;
          case 9:
            unint64_t v12 = 0xD000000000000011;
            unint64_t v11 = 0x8000000100467370;
            goto LABEL_34;
          case 10:
            unint64_t v11 = 0xEA00000000006465;
            if (v10 != 0x6C62616E45696C6DLL) {
              goto LABEL_36;
            }
            goto LABEL_35;
          default:
LABEL_34:
            if (v10 != v12) {
              goto LABEL_36;
            }
LABEL_35:
            if (v9 == v11)
            {
              swift_bridgeObjectRelease_n();
              char v13 = 1;
              return v13 & 1;
            }
LABEL_36:
            char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v13) {
              return v13 & 1;
            }
            unint64_t v6 = (v6 + 1) & v7;
            if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
              return v13 & 1;
            }
            break;
        }
      }
    }
  }
  char v13 = 0;
  return v13 & 1;
}

uint64_t LyricsLoader.loadLyrics(for:)(uint64_t a1)
{
  v2[67] = v1;
  v2[66] = a1;
  uint64_t v3 = type metadata accessor for String.Encoding();
  v2[68] = v3;
  v2[69] = *(void *)(v3 - 8);
  v2[70] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Song();
  v2[71] = v4;
  v2[72] = *(void *)(v4 - 8);
  v2[73] = swift_task_alloc();
  v2[74] = swift_task_alloc();
  v2[75] = swift_task_alloc();
  v2[76] = swift_task_alloc();
  v2[77] = swift_task_alloc();
  v2[78] = swift_task_alloc();
  v2[79] = swift_task_alloc();
  v2[80] = swift_task_alloc();
  v2[81] = swift_task_alloc();
  v2[82] = swift_task_alloc();
  v2[83] = swift_task_alloc();
  return _swift_task_switch(LyricsLoader.loadLyrics(for:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;

  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return _swift_task_switch(LyricsLoader.loadLyrics(for:), 0, 0);
}

uint64_t LyricsLoader.loadLyrics(for:)()
{
  uint64_t v40 = v0;
  uint64_t v1 = v0[83];
  uint64_t v2 = v0[72];
  uint64_t v3 = v0[71];
  uint64_t v4 = v0[66];
  char v5 = Song.hasLyrics.getter();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[84] = v6;
  v0[85] = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v4, v3);
  uint64_t v7 = v0[83];
  uint64_t v8 = v0[72];
  uint64_t v9 = v0[71];
  if (v5)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v10(v0[83], v0[71]);
LABEL_4:
    v0[86] = v10;
    __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCyyXlGMD_1);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_100493D20;
    __swift_instantiateConcreteTypeFromMangledName(&_s8MusicKit07PartialA13AsyncPropertyCyAA4SongVGMD_0);
    *(void *)(v12 + 32) = static PartialMusicProperty<A>.customLyrics.getter();
    v39[0] = v12;
    specialized Array._endMutation()();
    uint64_t v13 = v12;
    v0[87] = v12;
    unint64_t v14 = (void *)swift_task_alloc();
    v0[88] = v14;
    uint64_t v15 = _s8MusicKit4SongVACSeAAWlTm_0((unint64_t *)&_s8MusicKit4SongVACSeAAWL_0, (void (*)(uint64_t))&type metadata accessor for Song);
    *unint64_t v14 = v0;
    v14[1] = LyricsLoader.loadLyrics(for:);
    uint64_t v16 = v0[82];
    uint64_t v17 = v0[71];
    return MusicItem<>.with(_:)(v16, v13, v17, &protocol witness table for Song, &protocol witness table for Song, v15);
  }
  char v11 = Song.hasCustomLyrics.getter();
  unint64_t v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v10(v7, v9);
  if (v11) {
    goto LABEL_4;
  }
  if (one-time initialization token for lyrics != -1) {
    swift_once();
  }
  uint64_t v18 = v0[76];
  uint64_t v19 = v0[71];
  uint64_t v20 = (void *)v0[67];
  uint64_t v21 = v0[66];
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.lyrics);
  v6(v18, v21, v19);
  id v23 = v20;
  char v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v27 = v0[76];
  uint64_t v28 = v0[71];
  unsigned int v29 = (void *)v0[67];
  if (v26)
  {
    uint64_t v38 = v0[71];
    uint64_t v30 = swift_slowAlloc();
    v39[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136446466;
    v0[62] = v29;
    uint64_t v31 = String.init<A>(describing:)();
    *(void *)(v30 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v31, v32, v39);

    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2082;
    uint64_t v33 = Song.loggingInfo.getter();
    *(void *)(v30 + 14) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v33, v34, v39);
    swift_bridgeObjectRelease();
    v10(v27, v38);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Loader<%{public}s> loadLyrics(for:completion:) returned without loading lyrics [hasLyrics and hasCustomLyrics were false] %{public}s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    v10(v27, v28);
  }

  lazy protocol witness table accessor for type LyricsLoader.LyricsError and conformance LyricsLoader.LyricsError();
  swift_allocError();
  unsigned char *v35 = 1;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = (uint64_t (*)(void))v0[1];
  return v36();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 712) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = LyricsLoader.loadLyrics(for:);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = LyricsLoader.loadLyrics(for:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  NSString v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(uint64_t, unint64_t, void);
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  NSObject *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  BOOL v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  NSObject *v66;
  os_log_type_t v67;
  BOOL v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  BOOL v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  void (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  unsigned char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned char *v95;
  uint64_t (*v96)(void);
  void (*v97)(uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  void *v104;
  id v105;
  Class isa;
  id v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  void *typea;
  os_log_type_t type;
  uint64_t v113[2];
  uint64_t v114;
  uint64_t v115;

  uint64_t v114 = v0;
  uint64_t v1 = Song.customLyrics.getter();
  if (v2)
  {
    uint64_t v3 = v1;
    uint64_t v4 = v2;
    char v5 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0) {
      char v5 = v1 & 0xFFFFFFFFFFFFLL;
    }
    if (v5)
    {
      uint64_t v6 = [self standardUserDefaults];
      uint64_t v7 = String._bridgeToObjectiveC()();
      uint64_t v8 = [v6 BOOLForKey:v7];

      if (!v8) {
        goto LABEL_9;
      }
      if (*DeviceCapabilities.isInternalInstall.unsafeMutableAddressor() != 1) {
        goto LABEL_9;
      }
      String.trim()();
      uint64_t v9 = specialized Sequence<>.starts<A>(with:)();
      swift_bridgeObjectRelease();
      if ((v9 & 1) == 0) {
        goto LABEL_9;
      }
      unint64_t v10 = *(void *)(v0 + 560);
      char v11 = *(void *)(v0 + 552);
      uint64_t v12 = *(void *)(v0 + 544);
      static String.Encoding.utf8.getter();
      uint64_t v13 = String.data(using:allowLossyConversion:)();
      uint64_t v15 = v14;
      *(void *)(v0 + 720) = v13;
      *(void *)(v0 + 728) = v14;
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      if (v15 >> 60 != 15)
      {
        swift_bridgeObjectRelease();
        char v105 = objc_allocWithZone((Class)MSVLyricsTTMLParser);
        outlined copy of Data._Representation(v13, v15);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        os_log_type_t v107 = [v105 initWithTTMLData:isa];
        *(void *)(v0 + 736) = v107;
        outlined consume of Data?(v13, v15);

        *(void *)(v0 + 16) = v0;
        *(void *)(v0 + 56) = v0 + 480;
        *(void *)(v0 + 24) = LyricsLoader.loadLyrics(for:);
        uint64_t v108 = swift_continuation_init();
        *(void *)(v0 + 368) = _NSConcreteStackBlock;
        *(void *)(v0 + 376) = 0x40000000;
        *(void *)(v0 + 384) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned MSVLyricsSongInfo?, @unowned NSError?) -> () with result type MSVLyricsSongInfo;
        *(void *)(v0 + 392) = &block_descriptor_7_1;
        *(void *)(v0 + 400) = v108;
        [v107 parseWithCompletion:v0 + 368];
        return _swift_continuation_await(v0 + 16);
      }
      else
      {
LABEL_9:
        (*(void (**)(void, void))(v0 + 688))(*(void *)(v0 + 656), *(void *)(v0 + 568));
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v16 = *(uint64_t (**)(uint64_t, unint64_t, void))(v0 + 8);
        return v16(v3, v4, 0);
      }
    }
    swift_bridgeObjectRelease();
  }
  if ((Song.hasLyrics.getter() & 1) == 0)
  {
    if (one-time initialization token for lyrics == -1)
    {
LABEL_22:
      os_log_type_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 672);
      uint64_t v58 = *(void *)(v0 + 656);
      uint64_t v59 = *(void *)(v0 + 648);
      uint64_t v60 = *(void *)(v0 + 640);
      char v61 = *(void *)(v0 + 632);
      BOOL v62 = *(void *)(v0 + 568);
      typea = *(void **)(v0 + 536);
      uint64_t v63 = *(void *)(v0 + 528);
      unint64_t v64 = type metadata accessor for Logger();
      __swift_project_value_buffer(v64, (uint64_t)static Logger.lyrics);
      v57(v59, v63, v62);
      v57(v60, v58, v62);
      v57(v61, v63, v62);
      uint64_t v65 = typea;
      uint64_t v66 = Logger.logObject.getter();
      unint64_t v67 = static os_log_type_t.default.getter();
      uint64_t v68 = os_log_type_enabled(v66, v67);
      char v69 = *(void (**)(uint64_t, uint64_t))(v0 + 688);
      id v70 = *(void *)(v0 + 648);
      uint64_t v71 = *(void *)(v0 + 640);
      uint64_t v72 = *(void *)(v0 + 632);
      uint64_t v73 = *(void *)(v0 + 568);
      uint64_t v74 = *(void **)(v0 + 536);
      if (v68)
      {
        type = v67;
        uint64_t v109 = *(void *)(v0 + 632);
        char v75 = swift_slowAlloc();
        v113[0] = swift_slowAlloc();
        *(_DWORD *)char v75 = 136446978;
        *(void *)(v0 + 488) = v74;
        uint64_t v76 = String.init<A>(describing:)();
        *(void *)(v75 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v76, v77, v113);

        swift_bridgeObjectRelease();
        *(_WORD *)(v75 + 12) = 2082;
        id v78 = Song.hasCustomLyrics.getter();
        unint64_t v79 = (v78 & 1) == 0;
        if (v78) {
          os_log_type_t v80 = 1702195828;
        }
        else {
          os_log_type_t v80 = 0x65736C6166;
        }
        if (v79) {
          uint64_t v81 = 0xE500000000000000;
        }
        else {
          uint64_t v81 = 0xE400000000000000;
        }
        *(void *)(v75 + 14) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v80, v81, v113);
        swift_bridgeObjectRelease();
        v69(v70, v73);
        *(_WORD *)(v75 + 22) = 2082;
        *(void *)(v0 + 448) = Song.customLyrics.getter();
        *(void *)(v0 + 456) = v82;
        __swift_instantiateConcreteTypeFromMangledName(&_sSSSgMD_1);
        uint64_t v83 = String.init<A>(describing:)();
        *(void *)(v75 + 24) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v83, v84, v113);
        swift_bridgeObjectRelease();
        v69(v71, v73);
        *(_WORD *)(v75 + 32) = 2082;
        uint64_t v85 = Song.loggingInfo.getter();
        *(void *)(v75 + 34) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v85, v86, v113);
        swift_bridgeObjectRelease();
        v69(v109, v73);
        _os_log_impl((void *)&_mh_execute_header, v66, type, "Loader<%{public}s> loadLyrics(for:completion:) didn't load lyrics [no lyrics found] song.hasLyrics=false song.hasCustomLyrics=%{public}s song.customLyrics=%{public}s %{public}s", (uint8_t *)v75, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        v69(v70, v73);
        v69(v71, v73);
        v69(v72, v73);
      }

      os_log_type_t v87 = *(void (**)(uint64_t, uint64_t))(v0 + 688);
      uint64_t v88 = *(void *)(v0 + 656);
      uint32_t v89 = *(void *)(v0 + 568);
      lazy protocol witness table accessor for type LyricsLoader.LyricsError and conformance LyricsLoader.LyricsError();
      swift_allocError();
      char *v90 = 1;
      swift_willThrow();
      os_log_type_t v91 = v88;
      uint64_t v92 = v89;
LABEL_34:
      v87(v91, v92);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v96 = *(uint64_t (**)(void))(v0 + 8);
      return v96();
    }
LABEL_44:
    swift_once();
    goto LABEL_22;
  }
  uint64_t v18 = *(char **)(v0 + 536);
  uint64_t v19 = Song.id.getter();
  uint64_t v21 = v20;
  *(void *)(v0 + 464) = 0;
  uint64_t v22 = *(void **)&v18[OBJC_IVAR___MusicLyricsLoader_accessQueue];
  id v23 = (void *)swift_allocObject();
  v23[2] = v0 + 464;
  void v23[3] = v18;
  v23[4] = v19;
  v23[5] = v21;
  char v24 = swift_allocObject();
  *(void *)(v24 + 16) = partial apply for closure #1 in LyricsLoader.existingOperation(with:);
  *(void *)(v24 + 24) = v23;
  *(void *)(v0 + 352) = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  *(void *)(v0 + 360) = v24;
  *(void *)(v0 + 320) = _NSConcreteStackBlock;
  *(void *)(v0 + 328) = 1107296256;
  *(void *)(v0 + 336) = thunk for @escaping @callee_guaranteed () -> ();
  *(void *)(v0 + 344) = &block_descriptor_51;
  os_log_type_t v25 = _Block_copy((const void *)(v0 + 320));
  BOOL v26 = v18;
  uint64_t v27 = v22;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v27, v25);

  _Block_release(v25);
  LOBYTE(v25) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v25)
  {
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v28 = *(void **)(v0 + 464);
  swift_bridgeObjectRelease();
  swift_release();

  if (v28
    || (static ApplicationCapabilities.shared.getter(v0 + 200),
        outlined release of ApplicationCapabilities(v0 + 200),
        (*(unsigned char *)(v0 + 210) & 1) == 0))
  {
    unsigned int v29 = [self sharedController];
    uint64_t v30 = [v29 musicSubscriptionStatus];

    static ApplicationCapabilities.shared.getter(v0 + 80);
    outlined release of ApplicationCapabilities(v0 + 80);
    uint64_t v31 = *(void *)(v0 + 88);
    if (one-time initialization token for lyrics != -1) {
      swift_once();
    }
    unint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 672);
    uint64_t v33 = *(void *)(v0 + 616);
    unint64_t v34 = *(void *)(v0 + 568);
    os_log_type_t v35 = *(void **)(v0 + 536);
    uint64_t v36 = *(void *)(v0 + 528);
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.lyrics);
    v32(v33, v36, v34);
    uint64_t v38 = v35;
    BOOL v39 = v30;
    uint64_t v40 = v38;
    uint64_t v41 = v39;
    char v42 = Logger.logObject.getter();
    uint64_t v43 = static os_log_type_t.default.getter();
    unint64_t v44 = os_log_type_enabled(v42, v43);
    uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v0 + 688);
    long long v46 = *(void *)(v0 + 616);
    os_log_type_t v47 = *(void *)(v0 + 568);
    uint64_t v48 = *(void **)(v0 + 536);
    if (v44)
    {
      char v110 = v41;
      uint64_t v49 = swift_slowAlloc();
      v113[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v49 = 136446978;
      *(void *)(v0 + 472) = v48;
      unint64_t v50 = String.init<A>(describing:)();
      *(void *)(v49 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v50, v51, v113);

      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 12) = 2082;
      *(void *)(v0 + 520) = v30;
      id v52 = v110;
      __swift_instantiateConcreteTypeFromMangledName(&_sSo25ICMusicSubscriptionStatusCSgMD_0);
      uint64_t v53 = String.init<A>(describing:)();
      *(void *)(v49 + 14) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v53, v54, v113);

      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 22) = 1026;
      *(_DWORD *)(v49 + 24) = WORD1(v31) & 1;
      *(_WORD *)(v49 + 28) = 2082;
      uint64_t v55 = Song.loggingInfo.getter();
      *(void *)(v49 + 30) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v55, v56, v113);
      swift_bridgeObjectRelease();
      v45(v46, v47);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Loader<%{public}s> loadLyrics(for:completion:) didn't load store lyrics [not supported by subscription] subscriptionStatus=%{public}s subscriptionStatus.capabilities.contains(.catalogLyricsViewing)=%{BOOL,public}d %{public}s", (uint8_t *)v49, 0x26u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v41 = v110;
      swift_slowDealloc();
    }
    else
    {

      v45(v46, v47);
    }

    os_log_type_t v87 = *(void (**)(uint64_t, uint64_t))(v0 + 688);
    uint64_t v93 = *(void *)(v0 + 656);
    int v94 = *(void *)(v0 + 568);
    lazy protocol witness table accessor for type LyricsLoader.LyricsError and conformance LyricsLoader.LyricsError();
    swift_allocError();
    char *v95 = 2;
    swift_willThrow();

    os_log_type_t v91 = v93;
    uint64_t v92 = v94;
    goto LABEL_34;
  }
  char v97 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 672);
  uint64_t v98 = *(void *)(v0 + 624);
  uint64_t v99 = *(void *)(v0 + 568);
  unint64_t v100 = *(void *)(v0 + 536);
  id v101 = *(void *)(v0 + 528);
  type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for MPStoreLyricsRequest);
  v97(v98, v101, v99);
  char v102 = MPStoreLyricsRequest.init(song:)();
  *(void *)(v0 + 752) = v102;
  uint64_t v103 = (void *)swift_task_alloc();
  *(void *)(v0 + 760) = v103;
  v103[2] = v100;
  v103[3] = v102;
  v103[4] = v101;
  uint64_t v104 = (void *)swift_task_alloc();
  *(void *)(v0 + 768) = v104;
  *uint64_t v104 = v0;
  v104[1] = LyricsLoader.loadLyrics(for:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 408, 0, 0, 0xD000000000000010, 0x8000000100473210, partial apply for closure #1 in LyricsLoader.loadLyrics(for:), v103, &type metadata for LyricsLoader.Result);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 744) = v1;
  if (v1) {
    uint64_t v2 = LyricsLoader.loadLyrics(for:);
  }
  else {
    uint64_t v2 = LyricsLoader.loadLyrics(for:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  void *v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(uint64_t, void, uint64_t);
  uint64_t v10;
  uint64_t v11;

  uint64_t v1 = (void *)v0[92];
  uint64_t v2 = v0[91];
  uint64_t v3 = v0[90];
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[86];
  char v5 = v0[82];
  uint64_t v6 = v0[71];
  uint64_t v7 = (void *)v0[60];
  type metadata accessor for Lyrics();
  swift_allocObject();
  unint64_t v10 = Lyrics.init(identifier:songInfo:)(0, 0, v7);

  outlined consume of Data?(v3, v2);
  v4(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(uint64_t, void, uint64_t))v0[1];
  return v8(v10, 0, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 776) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = LyricsLoader.loadLyrics(for:);
  }
  else {
    uint64_t v2 = LyricsLoader.loadLyrics(for:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, void);
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 688);
  uint64_t v2 = *(void *)(v0 + 656);
  uint64_t v3 = *(void *)(v0 + 568);

  v1(v2, v3);
  uint64_t v7 = *(void *)(v0 + 416);
  uint64_t v8 = *(void *)(v0 + 408);
  uint64_t v6 = *(unsigned __int8 *)(v0 + 424);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, void))(v0 + 8);
  return v4(v8, v7, v6);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  unsigned char *v40;
  uint64_t (*v41)(void);
  uint64_t v43;
  void *typea;
  os_log_type_t type;
  uint64_t v46;
  uint64_t v47[2];
  void *v48;
  uint64_t v49;

  uint64_t v48 = v0;
  swift_willThrow();
  if (one-time initialization token for lyrics != -1) {
    swift_once();
  }
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[84];
  uint64_t v2 = v0[82];
  uint64_t v3 = v0[75];
  uint64_t v4 = v0[74];
  char v5 = v0[73];
  uint64_t v6 = v0[71];
  typea = (void *)v0[67];
  uint64_t v7 = v0[66];
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.lyrics);
  v1(v3, v7, v6);
  v1(v4, v2, v6);
  v1(v5, v7, v6);
  uint64_t v9 = typea;
  swift_errorRetain();
  unint64_t v10 = v9;
  swift_errorRetain();
  char v11 = Logger.logObject.getter();
  uint64_t v12 = static os_log_type_t.default.getter();
  uint64_t v13 = os_log_type_enabled(v11, v12);
  unint64_t v14 = v0[93];
  uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[86];
  uint64_t v16 = v0[75];
  long long v46 = v0[74];
  uint64_t v17 = v0[73];
  uint64_t v18 = v0[71];
  uint64_t v19 = (void *)v0[67];
  if (v13)
  {
    type = v12;
    uint64_t v43 = v0[73];
    uint64_t v20 = swift_slowAlloc();
    v47[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136447234;
    v0[63] = v19;
    uint64_t v21 = String.init<A>(describing:)();
    *(void *)(v20 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v21, v22, v47);

    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2082;
    v0[64] = v14;
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName(&_ss5Error_pMD_1);
    id v23 = String.init<A>(describing:)();
    *(void *)(v20 + 14) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v23, v24, v47);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v20 + 22) = 2082;
    os_log_type_t v25 = Song.hasCustomLyrics.getter();
    BOOL v26 = (v25 & 1) == 0;
    if (v25) {
      uint64_t v27 = 1702195828;
    }
    else {
      uint64_t v27 = 0x65736C6166;
    }
    if (v26) {
      uint64_t v28 = 0xE500000000000000;
    }
    else {
      uint64_t v28 = 0xE400000000000000;
    }
    *(void *)(v20 + 24) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v27, v28, v47);
    swift_bridgeObjectRelease();
    v15(v16, v18);
    *(_WORD *)(v20 + 32) = 2082;
    v0[54] = Song.customLyrics.getter();
    v0[55] = v29;
    __swift_instantiateConcreteTypeFromMangledName(&_sSSSgMD_1);
    uint64_t v30 = String.init<A>(describing:)();
    *(void *)(v20 + 34) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v30, v31, v47);
    swift_bridgeObjectRelease();
    v15(v46, v18);
    *(_WORD *)(v20 + 42) = 2082;
    unint64_t v32 = Song.loggingInfo.getter();
    *(void *)(v20 + 44) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v32, v33, v47);
    swift_bridgeObjectRelease();
    v15(v43, v18);
    _os_log_impl((void *)&_mh_execute_header, v11, type, "Loader<%{public}s> loadLyrics(for:completion:) didn't parse TTML custom lyrics with error=%{public}s song.hasCustomLyrics=%{public}s song.customLyrics=%{public}s %{public}s", (uint8_t *)v20, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    v15(v16, v18);
    v15(v46, v18);
    v15(v17, v18);
  }

  unint64_t v34 = (void *)v0[92];
  os_log_type_t v35 = v0[91];
  uint64_t v36 = v0[90];
  uint64_t v37 = (void (*)(uint64_t, uint64_t))v0[86];
  uint64_t v38 = v0[82];
  BOOL v39 = v0[71];
  lazy protocol witness table accessor for type LyricsLoader.LyricsError and conformance LyricsLoader.LyricsError();
  swift_allocError();
  void *v40 = 0;
  swift_willThrow();

  swift_errorRelease();
  outlined consume of Data?(v36, v35);
  v37(v38, v39);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v41 = (uint64_t (*)(void))v0[1];
  return v41();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 688);
  uint64_t v2 = *(void *)(v0 + 656);
  uint64_t v3 = *(void *)(v0 + 568);

  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  int8x16_t *v1;
  void *v2;
  uint64_t v4;

  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 40), *(int8x16_t *)(v0 + 40), 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  *uint64_t v2 = v0;
  v2[1] = LyricsLoader.loadLyrics(for:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000010, 0x8000000100473210, partial apply for closure #1 in LyricsLoader.loadLyrics(for:), v1, &type metadata for LyricsLoader.Result);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = LyricsLoader.loadLyrics(for:);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = LyricsLoader.loadLyrics(for:);
  }
  return _swift_task_switch(v2, 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void, void, void))(v0 + 8))(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized Sequence<>.starts<A>(with:)()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String_optional v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    uint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    do
    {
      Swift::String_optional v5 = String.Iterator.next()();
      if (!v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      if (countAndFlagsBits == v5.value._countAndFlagsBits && object == v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      Swift::String_optional v4 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v4.value._countAndFlagsBits;
      object = v4.value._object;
    }
    while (v4.value._object);
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease();
  BOOL v7 = v6 == 0;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned MSVLyricsSongInfo?, @unowned NSError?) -> () with result type MSVLyricsSongInfo(uint64_t result, void *a2, void *a3)
{
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&_ss5Error_pMD_1);
    swift_allocError();
    *Swift::String_optional v4 = a3;
    id v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    **(void **)(*(void *)(*(void *)(result + 32) + 64) + 40) = a2;
    id v6 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in LyricsLoader.loadLyrics(for:)(uint64_t a1, char *a2, void *a3, uint64_t a4)
{
  uint64_t v18 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<LyricsLoader.Result, Error>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin();
  uint64_t v10 = type metadata accessor for Song();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a4, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v14 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v15 + v14, (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  specialized LyricsLoader.performStoreLyricsRequest(request:song:completion:)(a3, (uint64_t)v13, (uint64_t)partial apply for closure #1 in closure #1 in LyricsLoader.loadLyrics(for:), v15, v18);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t LyricsLoader.hasRequest(for:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = Song.id.getter();
  uint64_t v4 = v3;
  unsigned __int8 v14 = 0;
  id v5 = *(void **)&v0[OBJC_IVAR___MusicLyricsLoader_accessQueue];
  id v6 = (void *)swift_allocObject();
  uint64_t v6[2] = &v14;
  v6[3] = v1;
  v6[4] = v2;
  uint64_t v6[5] = v4;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #1 in LyricsLoader.hasRequest(with:);
  *(void *)(v7 + 24) = v6;
  aBlock[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  uint64_t aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_17_1;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = v5;
  id v10 = v1;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v9, v8);

  _Block_release(v8);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = v14;
    swift_release();
    swift_bridgeObjectRelease();
    return v12;
  }
  return result;
}

{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  id v10;
  uint64_t result;
  uint64_t v12;
  void aBlock[6];
  unsigned __int8 v14;

  uint64_t v1 = v0;
  uint64_t v2 = MPModelSong.lyricsOperationIdentifier.getter();
  uint64_t v4 = v3;
  unsigned __int8 v14 = 0;
  id v5 = *(void **)&v0[OBJC_IVAR___MusicLyricsLoader_accessQueue];
  id v6 = (void *)swift_allocObject();
  uint64_t v6[2] = &v14;
  v6[3] = v1;
  v6[4] = v2;
  uint64_t v6[5] = v4;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = closure #1 in LyricsLoader.hasRequest(with:)partial apply;
  *(void *)(v7 + 24) = v6;
  aBlock[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  uint64_t aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_47_0;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = v5;
  id v10 = v1;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v9, v8);

  _Block_release(v8);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = v14;
    swift_release();
    swift_bridgeObjectRelease();
    return v12;
  }
  return result;
}

uint64_t LyricsLoader.cancelRequest(for:)()
{
  uint64_t v0 = Song.id.getter();
  LyricsLoader.cancelRequest(with:)(v0, v1);

  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t vars8;

  uint64_t v0 = MPModelSong.lyricsOperationIdentifier.getter();
  LyricsLoader.cancelRequest(with:)(v0, v1);

  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in LyricsLoader.loadLyrics(for:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<LyricsLoader.Result, Error>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v9 + v8, (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  LyricsLoader.loadLyrics(for:completion:)(a3, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))partial apply for closure #1 in closure #1 in LyricsLoader.loadLyrics(for:), v9);
  return swift_release();
}

uint64_t closure #1 in closure #1 in LyricsLoader.loadLyrics(for:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  if (a3 == 255)
  {
    if (!a4)
    {
      lazy protocol witness table accessor for type LyricsLoader.LyricsError and conformance LyricsLoader.LyricsError();
      swift_allocError();
      *uint64_t v5 = 3;
    }
    swift_errorRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<LyricsLoader.Result, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    outlined copy of Text.Storage(a1, a2, a3 & 1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<LyricsLoader.Result, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

id static LyricsLoader.requiredProperties()()
{
  __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCySSGMD_1);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100493E10;
  *(void *)(v0 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 40) = v1;
  *(void *)(v0 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 72) = v3;
  *(void *)(v0 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v0 + 88) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCySS_So13MPPropertySetCtGMD_0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100493CE0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v6;
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100493400;
  *(void *)(v7 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v7 + 40) = v8;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v10 = self;
  id v11 = [v10 propertySetWithProperties:isa];

  *(void *)(inited + 48) = v11;
  *(void *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 64) = v12;
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_100493E10;
  *(void *)(v13 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v13 + 40) = v14;
  *(void *)(v13 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v13 + 56) = v15;
  *(void *)(v13 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v13 + 72) = v16;
  *(void *)(v13 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v13 + 88) = v17;
  Class v18 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v19 = [v10 propertySetWithProperties:v18];

  *(void *)(inited + 72) = v19;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v20;
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_100493400;
  *(void *)(v21 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v21 + 40) = v22;
  uint64_t v23 = swift_initStackObject();
  *(_OWORD *)(v23 + 16) = xmmword_100493400;
  *(void *)(v23 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v23 + 40) = v24;
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_100493400;
  *(void *)(v25 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v25 + 40) = v26;
  Class v27 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v28 = [v10 propertySetWithProperties:v27];

  *(void *)(v23 + 48) = v28;
  _sSD17dictionaryLiteralSDyxq_Gx_q_td_tcfCSS_So13MPPropertySetCTgm5_0(v23);
  id v29 = objc_allocWithZone((Class)MPPropertySet);
  Class v30 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for UIMenu(0, &_sSo13MPPropertySetCML_0);
  Class v31 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v32 = [v29 initWithProperties:v30 relationships:v31];

  *(void *)(inited + 96) = v32;
  _sSD17dictionaryLiteralSDyxq_Gx_q_td_tcfCSS_So13MPPropertySetCTgm5_0(inited);
  id v33 = objc_allocWithZone((Class)MPPropertySet);
  Class v34 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v35 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v36 = [v33 initWithProperties:v34 relationships:v35];

  return v36;
}

void LyricsLoader.loadLyrics(for:completion:)(void *a1, void (*a2)(uint64_t, unint64_t, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for String.Encoding();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  id v11 = (char *)&v140 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = [a1 lyrics];
  if (v12)
  {
    id v13 = v12;
    uint64_t v145 = a2;
    id v14 = [v12 text];
    uint64_t v144 = a3;
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v18 = v17;

      uint64_t v19 = HIBYTE(v18) & 0xF;
      if ((v18 & 0x2000000000000000) == 0) {
        uint64_t v19 = v16 & 0xFFFFFFFFFFFFLL;
      }
      if (v19)
      {
        id v20 = [self standardUserDefaults];
        NSString v21 = String._bridgeToObjectiveC()();
        unsigned int v22 = [v20 BOOLForKey:v21];

        if (v22
          && *DeviceCapabilities.isInternalInstall.unsafeMutableAddressor() == 1
          && (String.trim()(),
              char v23 = specialized Sequence<>.starts<A>(with:)(),
              swift_bridgeObjectRelease(),
              (v23 & 1) != 0)
          && (static String.Encoding.utf8.getter(),
              uint64_t v24 = String.data(using:allowLossyConversion:)(),
              unint64_t v26 = v25,
              (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8),
              v26 >> 60 != 15))
        {
          swift_bridgeObjectRelease();
          id v134 = objc_allocWithZone((Class)MSVLyricsTTMLParser);
          outlined copy of Data._Representation(v24, v26);
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          id v136 = [v134 initWithTTMLData:isa];
          outlined consume of Data?(v24, v26);

          uint64_t v137 = swift_allocObject();
          uint64_t v138 = v144;
          *(void *)(v137 + 16) = v145;
          *(void *)(v137 + 24) = v138;
          uint64_t v155 = partial apply for closure #1 in LyricsLoader.loadLyrics(for:completion:);
          id v156 = (char **)v137;
          uint64_t v151 = _NSConcreteStackBlock;
          uint64_t v152 = 1107296256;
          double v153 = (uint64_t (*)(uint64_t))thunk for @escaping @callee_guaranteed (@guaranteed MSVLyricsSongInfo?, @guaranteed Error?) -> ();
          unsigned __int8 v154 = &block_descriptor_36_1;
          id v139 = _Block_copy(&v151);
          swift_retain();
          swift_release();
          [v136 parseWithCompletion:v139];

          _Block_release(v139);
          outlined consume of Data?(v24, v26);
        }
        else
        {
          v145(v16, v18, 0, 0);

          swift_bridgeObjectRelease();
        }
        return;
      }
      swift_bridgeObjectRelease();
    }
    char v42 = &selRef_environmentMonitorDidChangeThermalLevel_;
    if ([v13 hasStoreLyrics])
    {
      uint64_t v43 = MPModelSong.lyricsOperationIdentifier.getter();
      uint64_t v45 = v44;
      double v149 = 0;
      long long v46 = *(void **)&v4[OBJC_IVAR___MusicLyricsLoader_accessQueue];
      os_log_type_t v47 = (void *)swift_allocObject();
      v47[2] = &v149;
      v47[3] = v4;
      v47[4] = v43;
      v47[5] = v45;
      uint64_t v48 = swift_allocObject();
      *(void *)(v48 + 16) = closure #1 in LyricsLoader.existingOperation(with:)partial apply;
      *(void *)(v48 + 24) = v47;
      uint64_t v155 = (uint64_t (*)(void *, uint64_t))thunk for @escaping @callee_guaranteed () -> ()partial apply;
      id v156 = (char **)v48;
      uint64_t v151 = _NSConcreteStackBlock;
      uint64_t v152 = 1107296256;
      double v153 = thunk for @escaping @callee_guaranteed () -> ();
      unsigned __int8 v154 = &block_descriptor_30_0;
      uint64_t v49 = _Block_copy(&v151);
      char v42 = v156;
      uint64_t v4 = v4;
      unint64_t v50 = v46;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      dispatch_sync(v50, v49);

      _Block_release(v49);
      LOBYTE(v49) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v49 & 1) == 0)
      {
        NSString v51 = v149;
        swift_release();
        swift_bridgeObjectRelease();

        uint64_t v52 = (uint64_t)v145;
        if (!v51)
        {
          static ApplicationCapabilities.shared.getter((uint64_t)&v149);
          outlined release of ApplicationCapabilities((uint64_t)&v149);
          if (v150)
          {
            id v122 = [objc_allocWithZone((Class)MPStoreLyricsRequest) init];
            [v122 setSong:a1];
            id v123 = a1;
            specialized LyricsLoader.performStoreLyricsRequest(request:song:completion:)(v122, v123, v52, v144, v4);

            return;
          }
        }
        id v53 = [self sharedController];
        id v54 = [v53 musicSubscriptionStatus];

        static ApplicationCapabilities.shared.getter((uint64_t)&v151);
        outlined release of ApplicationCapabilities((uint64_t)&v151);
        unsigned int v55 = v152;
        if (one-time initialization token for lyrics != -1) {
          swift_once();
        }
        uint64_t v56 = type metadata accessor for Logger();
        __swift_project_value_buffer(v56, (uint64_t)static Logger.lyrics);
        id v57 = a1;
        uint64_t v58 = v4;
        id v59 = v54;
        id v60 = v57;
        char v61 = v58;
        id v62 = v59;
        uint64_t v63 = Logger.logObject.getter();
        int v64 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v63, (os_log_type_t)v64))
        {
          int v141 = v64;
          uint64_t v65 = swift_slowAlloc();
          uint64_t v142 = swift_slowAlloc();
          uint64_t v148 = v142;
          *(_DWORD *)uint64_t v65 = 136447234;
          uint64_t v146 = (uint64_t)v61;
          uint64_t v66 = String.init<A>(describing:)();
          *(void *)(v65 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v66, v67, &v148);
          swift_bridgeObjectRelease();

          *(_WORD *)(v65 + 12) = 2082;
          uint64_t v146 = (uint64_t)v54;
          uint64_t v143 = (uint64_t)v62;
          id v68 = v62;
          __swift_instantiateConcreteTypeFromMangledName(&_sSo25ICMusicSubscriptionStatusCSgMD_0);
          uint64_t v69 = String.init<A>(describing:)();
          *(void *)(v65 + 14) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v69, v70, &v148);
          swift_bridgeObjectRelease();

          *(_WORD *)(v65 + 22) = 1026;
          *(_DWORD *)(v65 + 24) = HIWORD(v55) & 1;
          *(_WORD *)(v65 + 28) = 2082;
          id v71 = [v60 title];
          if (v71)
          {
            uint64_t v72 = v71;
            uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v75 = v74;
          }
          else
          {
            uint64_t v73 = 0;
            uint64_t v75 = 0;
          }
          os_log_type_t v124 = v141;
          uint64_t v146 = v73;
          uint64_t v147 = v75;
          __swift_instantiateConcreteTypeFromMangledName(&_sSSSgMD_1);
          uint64_t v125 = String.init<A>(describing:)();
          *(void *)(v65 + 30) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v125, v126, &v148);
          swift_bridgeObjectRelease();

          *(_WORD *)(v65 + 38) = 2082;
          id v127 = [v60 identifiers];
          id v128 = [v127 description];
          uint64_t v129 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v131 = v130;

          *(void *)(v65 + 40) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v129, v131, &v148);
          swift_bridgeObjectRelease();

          _os_log_impl((void *)&_mh_execute_header, v63, v124, "Loader<%{public}s> loadLyrics(for:completion:) didn't load store lyrics [not supported by subscription] subscriptionStatus=%{public}s subscriptionStatus.capabilities.contains(.catalogLyricsViewing)=%{BOOL,public}d song.title=%{public}s song.identifiers=%{public}s", (uint8_t *)v65, 0x30u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          id v62 = (id)v143;
        }
        else
        {
        }
        lazy protocol witness table accessor for type LyricsLoader.LyricsError and conformance LyricsLoader.LyricsError();
        uint64_t v132 = swift_allocError();
        unsigned char *v133 = 2;
        v145(0, 0, 255, v132);
        swift_errorRelease();

        goto LABEL_46;
      }
      __break(1u);
    }
    else if (one-time initialization token for lyrics == -1)
    {
LABEL_28:
      uint64_t v76 = type metadata accessor for Logger();
      __swift_project_value_buffer(v76, (uint64_t)static Logger.lyrics);
      id v77 = v13;
      id v78 = a1;
      id v79 = v77;
      id v80 = v78;
      id v81 = v79;
      id v82 = v80;
      uint64_t v83 = v4;
      id v13 = v81;
      id v84 = v82;
      uint64_t v85 = v83;
      uint64_t v86 = Logger.logObject.getter();
      os_log_type_t v87 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v86, v87))
      {
        uint64_t v88 = swift_slowAlloc();
        uint64_t v143 = swift_slowAlloc();
        double v149 = (void *)v143;
        *(_DWORD *)uint64_t v88 = 136447234;
        uint64_t v151 = v85;
        uint64_t v89 = String.init<A>(describing:)();
        *(void *)(v88 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v89, v90, (uint64_t *)&v149);
        swift_bridgeObjectRelease();

        *(_WORD *)(v88 + 12) = 1026;
        unsigned int v91 = [v13 v42[259]];

        *(_DWORD *)(v88 + 14) = v91;
        *(_WORD *)(v88 + 18) = 2082;
        id v92 = [v13 text];
        if (v92)
        {
          uint64_t v93 = v92;
          uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v96 = v95;
        }
        else
        {
          uint64_t v94 = 0;
          uint64_t v96 = 0;
        }
        uint64_t v151 = (void **)v94;
        uint64_t v152 = v96;
        __swift_instantiateConcreteTypeFromMangledName(&_sSSSgMD_1);
        uint64_t v106 = String.init<A>(describing:)();
        *(void *)(v88 + 20) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v106, v107, (uint64_t *)&v149);
        swift_bridgeObjectRelease();

        *(_WORD *)(v88 + 28) = 2082;
        id v108 = [v84 title];
        if (v108)
        {
          uint64_t v109 = v108;
          uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v112 = v111;
        }
        else
        {
          uint64_t v110 = 0;
          uint64_t v112 = 0;
        }
        uint64_t v151 = (void **)v110;
        uint64_t v152 = v112;
        uint64_t v113 = String.init<A>(describing:)();
        *(void *)(v88 + 30) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v113, v114, (uint64_t *)&v149);
        swift_bridgeObjectRelease();

        *(_WORD *)(v88 + 38) = 2082;
        id v115 = [v84 identifiers];
        id v116 = [v115 description];
        uint64_t v117 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v119 = v118;

        *(void *)(v88 + 40) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v117, v119, (uint64_t *)&v149);
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v86, v87, "Loader<%{public}s> loadLyrics(for:completion:) didn't load lyrics [no lyrics found] lyrics.hasStoreLyrics=%{BOOL,public}d lyrics.text=%{public}s song.title=%{public}s song.identifiers=%{public}s", (uint8_t *)v88, 0x30u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      lazy protocol witness table accessor for type LyricsLoader.LyricsError and conformance LyricsLoader.LyricsError();
      uint64_t v120 = swift_allocError();
      *uint64_t v121 = 1;
      v145(0, 0, 255, v120);
      swift_errorRelease();
LABEL_46:

      return;
    }
    swift_once();
    goto LABEL_28;
  }
  if (one-time initialization token for lyrics != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.lyrics);
  id v28 = a1;
  id v29 = v4;
  id v30 = v28;
  Class v31 = v29;
  id v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v144 = a3;
    uint64_t v145 = a2;
    uint64_t v34 = swift_slowAlloc();
    double v149 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 136446722;
    uint64_t v151 = v31;
    uint64_t v35 = String.init<A>(describing:)();
    *(void *)(v34 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v35, v36, (uint64_t *)&v149);
    swift_bridgeObjectRelease();

    *(_WORD *)(v34 + 12) = 2082;
    id v37 = [v30 title];
    if (v37)
    {
      uint64_t v38 = v37;
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v41 = v40;
    }
    else
    {
      uint64_t v39 = 0;
      uint64_t v41 = 0;
    }
    uint64_t v151 = (void **)v39;
    uint64_t v152 = v41;
    __swift_instantiateConcreteTypeFromMangledName(&_sSSSgMD_1);
    uint64_t v97 = String.init<A>(describing:)();
    *(void *)(v34 + 14) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v97, v98, (uint64_t *)&v149);
    swift_bridgeObjectRelease();

    *(_WORD *)(v34 + 22) = 2082;
    id v99 = [v30 identifiers];
    id v100 = [v99 description];
    uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v103 = v102;

    *(void *)(v34 + 24) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v101, v103, (uint64_t *)&v149);
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Loader<%{public}s> loadLyrics(for:completion:) returned without loading lyrics [MPModelLyrics was nil] song.title=%{public}s song.identifiers=%{public}s", (uint8_t *)v34, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a2 = v145;
  }
  else
  {
  }
  lazy protocol witness table accessor for type LyricsLoader.LyricsError and conformance LyricsLoader.LyricsError();
  uint64_t v104 = swift_allocError();
  *char v105 = 1;
  a2(0, 0, 255, v104);
  swift_errorRelease();
}

uint64_t closure #1 in LyricsLoader.loadLyrics(for:completion:)(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t, void, uint64_t, uint64_t))
{
  if (!a1) {
    return a3(0, 0, 255, a2);
  }
  type metadata accessor for Lyrics();
  swift_allocObject();
  id v5 = a1;
  uint64_t v6 = Lyrics.init(identifier:songInfo:)(0, 0, v5);
  a3(v6, 0, 1, 0);

  return swift_release();
}

uint64_t MPModelSong.lyricsOperationIdentifier.getter()
{
  uint64_t v1 = v0;
  id v2 = [v0 identifiers];
  uint64_t v3 = MPIdentifierSet.bestStoreIdentifier.getter();
  uint64_t v5 = v4;

  if (!v5)
  {
    id v6 = [v1 identifiers];
    uint64_t v3 = MPIdentifierSet.bestLibraryIdentifier.getter();
    uint64_t v8 = v7;

    if (!v8)
    {
      id v9 = [v1 identifiers];
      NSObject.hashValue.getter();

      return dispatch thunk of CustomStringConvertible.description.getter();
    }
  }
  return v3;
}

uint64_t closure #1 in LyricsLoader.hasRequest(with:)(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a2 + OBJC_IVAR___MusicLyricsLoader_lyricsOperations;
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)v7 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    char v10 = v9;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    char v10 = 0;
  }
  *a1 = v10 & 1;
  return result;
}

void closure #1 in LyricsLoader.existingOperation(with:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (uint64_t *)(a2 + OBJC_IVAR___MusicLyricsLoader_lyricsOperations);
  swift_beginAccess();
  uint64_t v8 = *v7;
  if (*(void *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if (v10)
    {
      id v11 = *(void **)(*(void *)(v8 + 56) + 8 * v9);
      id v12 = v11;
    }
    else
    {
      id v11 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v11 = 0;
  }
  id v13 = *a1;
  *a1 = v11;
}

void LyricsLoader.cancelRequest(with:)(uint64_t a1, uint64_t a2)
{
  id v14 = 0;
  uint64_t v5 = *(void **)&v2[OBJC_IVAR___MusicLyricsLoader_accessQueue];
  id v6 = (void *)swift_allocObject();
  uint64_t v6[2] = &v14;
  v6[3] = v2;
  v6[4] = a1;
  uint64_t v6[5] = a2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #1 in LyricsLoader.cancelRequest(with:);
  *(void *)(v7 + 24) = v6;
  aBlock[4] = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  uint64_t aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_160_0;
  uint64_t v8 = _Block_copy(aBlock);
  unint64_t v9 = v5;
  char v10 = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v9, v8);

  _Block_release(v8);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    [v14 cancel];
    id v12 = v14;
    swift_release();
  }
}

void closure #1 in LyricsLoader.cancelRequest(with:)(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (uint64_t *)(a2 + OBJC_IVAR___MusicLyricsLoader_lyricsOperations);
  swift_beginAccess();
  uint64_t v8 = *v7;
  if (*(void *)(*v7 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if (v10)
    {
      id v11 = *(void **)(*(void *)(v8 + 56) + 8 * v9);
      id v12 = v11;
    }
    else
    {
      id v11 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v11 = 0;
  }
  id v13 = *a1;
  *a1 = v11;

  swift_beginAccess();
  swift_bridgeObjectRetain();
  id v14 = (void *)specialized Dictionary._Variant.removeValue(forKey:)(a3, a4);
  swift_endAccess();
  swift_bridgeObjectRelease();
}

uint64_t closure #1 in LyricsLoader.performStoreLyricsRequest(request:song:completion:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(void, void, void, void), uint64_t a6)
{
  uint64_t v68 = a6;
  uint64_t v69 = a5;
  unint64_t v70 = a1;
  uint64_t v67 = type metadata accessor for String.Encoding();
  uint64_t v66 = *(void *)(v67 - 8);
  __chkstk_darwin();
  uint64_t v65 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    char v10 = (void *)Strong;
    uint64_t aBlock = 0x3C726564616F4CLL;
    unint64_t v74 = 0xE700000000000000;
    *(void *)&v72[0] = Strong;
    v11._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 62;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);

    uint64_t v13 = aBlock;
    unint64_t v14 = v74;
  }
  else
  {
    unint64_t v14 = 0xEC0000003E303078;
    uint64_t v13 = 0x303C726564616F4CLL;
  }
  uint64_t v71 = v13;
  if (one-time initialization token for lyrics != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.lyrics);
  outlined init with copy of AlertPresenting((uint64_t)a4, (uint64_t)&aBlock);
  swift_bridgeObjectRetain_n();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v63 = a4;
    uint64_t v19 = v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v64 = a2;
    *(void *)&v72[0] = v20;
    *(_DWORD *)uint64_t v19 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)(v19 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v71, v14, (uint64_t *)v72);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 12) = 2082;
    NSString v21 = v76;
    unsigned int v22 = v77;
    __swift_project_boxed_opaque_existential_0Tm(&aBlock, (uint64_t)v76);
    uint64_t v23 = (*((uint64_t (**)(void *, void))v22 + 2))(v21, v22);
    *(void *)(v19 + 14) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v23, v24, (uint64_t *)v72);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&aBlock);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%{public}s loadLyrics(for:completion:) completed for %{public}s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    a2 = v64;
    swift_slowDealloc();
    a4 = v63;
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&aBlock);
  }

  swift_beginAccess();
  uint64_t v25 = swift_unknownObjectWeakLoadStrong();
  if (!v25)
  {
    Class v31 = 0;
    unint64_t v36 = v70;
    if (a2) {
      goto LABEL_19;
    }
    goto LABEL_14;
  }
  unint64_t v26 = (void *)v25;
  uint64_t v27 = *(void **)(v25 + OBJC_IVAR___MusicLyricsLoader_accessQueue);
  id v28 = a4;
  outlined init with copy of AlertPresenting((uint64_t)a4, (uint64_t)v72);
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v26;
  outlined init with take of AlertPresenting(v72, v29 + 24);
  uint64_t v30 = swift_allocObject();
  Class v31 = partial apply for closure #1 in closure #1 in LyricsLoader.performStoreLyricsRequest(request:song:completion:);
  *(void *)(v30 + 16) = partial apply for closure #1 in closure #1 in LyricsLoader.performStoreLyricsRequest(request:song:completion:);
  *(void *)(v30 + 24) = v29;
  id v77 = (uint64_t (*)(void *, uint64_t))thunk for @escaping @callee_guaranteed () -> ()partial apply;
  id v78 = (void *)v30;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  unint64_t v74 = 1107296256;
  uint64_t v75 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v76 = &block_descriptor_147;
  id v32 = _Block_copy(&aBlock);
  os_log_type_t v33 = v27;
  id v34 = v26;
  swift_retain();
  swift_release();
  dispatch_sync(v33, v32);

  _Block_release(v32);
  LOBYTE(v34) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v34 & 1) == 0)
  {
    a4 = v28;
    unint64_t v36 = v70;
    if (a2) {
      goto LABEL_19;
    }
LABEL_14:
    if (v36)
    {
      id v37 = v36;
      id v38 = [v37 lyrics];
      if (!v38) {
        goto LABEL_18;
      }
      uint64_t v39 = v38;
      id v40 = [v38 TTML];

      if (!v40) {
        goto LABEL_18;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v41 = v65;
      static String.Encoding.utf8.getter();
      uint64_t v42 = String.data(using:allowLossyConversion:)();
      unint64_t v44 = v43;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v41, v67);
      if (v44 >> 60 != 15)
      {
        id v53 = objc_allocWithZone((Class)MSVLyricsTTMLParser);
        outlined copy of Data._Representation(v42, v44);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        id v55 = [v53 initWithTTMLData:isa];
        outlined consume of Data?(v42, v44);

        uint64_t v56 = (void *)swift_allocObject();
        uint64_t v58 = v68;
        id v57 = v69;
        v56[2] = v37;
        v56[3] = v57;
        uint64_t v59 = v71;
        v56[4] = v58;
        v56[5] = v59;
        v56[6] = v14;
        id v77 = partial apply for closure #2 in closure #1 in LyricsLoader.performStoreLyricsRequest(request:song:completion:);
        id v78 = v56;
        uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
        unint64_t v74 = 1107296256;
        uint64_t v75 = (uint64_t (*)(uint64_t))thunk for @escaping @callee_guaranteed (@guaranteed MSVLyricsSongInfo?, @guaranteed Error?) -> ();
        uint64_t v76 = &block_descriptor_137;
        id v60 = _Block_copy(&aBlock);
        id v61 = v37;
        swift_retain();
        swift_release();
        [v55 parseWithCompletion:v60];

        _Block_release(v60);
        outlined consume of Data?(v42, v44);
      }
      else
      {
LABEL_18:
        lazy protocol witness table accessor for type LyricsLoader.LyricsError and conformance LyricsLoader.LyricsError();
        uint64_t v45 = swift_allocError();
        *long long v46 = 1;
        id v47 = v37;
        specialized log #1 (_:for:) in closure #1 in LyricsLoader.performStoreLyricsRequest(request:song:completion:)(v45, v47, v71, v14);
        swift_errorRelease();
        swift_bridgeObjectRelease();

        uint64_t v48 = swift_allocError();
        *uint64_t v49 = 1;
        v69(0, 0, 255, v48);

        swift_errorRelease();
      }
      return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v31);
    }
LABEL_19:
    uint64_t v50 = a4[3];
    uint64_t v51 = a4[4];
    uint64_t v52 = __swift_project_boxed_opaque_existential_0Tm(a4, v50);
    specialized log #1 (_:for:) in closure #1 in LyricsLoader.performStoreLyricsRequest(request:song:completion:)(a2, (uint64_t)v52, v71, v14, v50, v51);
    swift_bridgeObjectRelease();
    v69(0, 0, 255, a2);
    return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v31);
  }
  __break(1u);
  return result;
}

void closure #1 in closure #1 in LyricsLoader.performStoreLyricsRequest(request:song:completion:)(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[3];
  uint64_t v3 = a2[4];
  __swift_project_boxed_opaque_existential_0Tm(a2, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  uint64_t v6 = v5;
  swift_beginAccess();
  uint64_t v7 = (void *)specialized Dictionary._Variant.removeValue(forKey:)(v4, v6);
  swift_endAccess();
  swift_bridgeObjectRelease();
}

uint64_t closure #2 in closure #1 in LyricsLoader.performStoreLyricsRequest(request:song:completion:)(void *a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, void, uint64_t, uint64_t), uint64_t a5, uint64_t a6, unint64_t a7)
{
  if (!a1)
  {
    id v19 = a3;
    specialized log #1 (_:for:) in closure #1 in LyricsLoader.performStoreLyricsRequest(request:song:completion:)(a2, v19, a6, a7);

    return a4(0, 0, 255, a2);
  }
  id v9 = a1;
  id v10 = [a3 lyrics];
  Swift::String v11 = v10;
  if (!v10) {
    goto LABEL_7;
  }
  id v12 = [v10 identifiers];

  id v13 = [v12 lyricsID];
  if (!v13)
  {
    Swift::String v11 = 0;
LABEL_7:
    uint64_t v15 = 0;
    goto LABEL_8;
  }
  Swift::String v11 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

LABEL_8:
  type metadata accessor for Lyrics();
  swift_allocObject();
  id v21 = v9;
  uint64_t v22 = Lyrics.init(identifier:songInfo:)((uint64_t)v11, v15, v21);
  a4(v22, 0, 1, 0);

  return swift_release();
}

uint64_t closure #2 in LyricsLoader.performStoreLyricsRequest(request:song:completion:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2[3];
  uint64_t v6 = a2[4];
  __swift_project_boxed_opaque_existential_0Tm(a2, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
  uint64_t v9 = v8;
  id v10 = (uint64_t *)(a1 + OBJC_IVAR___MusicLyricsLoader_lyricsOperations);
  swift_beginAccess();
  id v11 = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *v10;
  uint64_t *v10 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v11, v7, v9, isUniquelyReferenced_nonNull_native);
  uint64_t *v10 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

id LyricsLoader.init()()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin();
  type metadata accessor for DispatchQoS();
  __chkstk_darwin();
  uint64_t v5 = OBJC_IVAR___MusicLyricsLoader_lyricsOperations;
  uint64_t v6 = v0;
  *(void *)&v0[v5] = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v11 = OBJC_IVAR___MusicLyricsLoader_accessQueue;
  type metadata accessor for UIMenu(0, (unint64_t *)&_sSo17OS_dispatch_queueCML_1);
  static DispatchQoS.unspecified.getter();
  id v13 = _swiftEmptyArrayStorage;
  _s8MusicKit4SongVACSeAAWlTm_0((unint64_t *)&_sSo17OS_dispatch_queueC8DispatchE10AttributesVAEs10SetAlgebraACWL_0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&_sSaySo17OS_dispatch_queueC8DispatchE10AttributesVGMD_0);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v1);
  *(void *)&v6[v11] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v7 = OBJC_IVAR___MusicLyricsLoader_operationQueue;
  id v8 = [objc_allocWithZone((Class)NSOperationQueue) init];
  [v8 setMaxConcurrentOperationCount:1];
  *(void *)&v6[v7] = v8;

  uint64_t v9 = (objc_class *)type metadata accessor for LyricsLoader();
  v12.receiver = v6;
  v12.super_class = v9;
  return objc_msgSendSuper2(&v12, "init");
}

id LyricsLoader.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LyricsLoader();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t LyricsLoader.Song.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Song();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for LyricsLoader.Song();

  return swift_storeEnumTagMultiPayload();
}

uint64_t LyricsLoader.Song.init(_:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  uint64_t v4 = type metadata accessor for LyricsLoader.Song();
  swift_storeEnumTagMultiPayload();
  uint64_t v5 = *(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a3, 0, 1, v4);
}

uint64_t LyricsLoader.Song.modelObjectSong.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Song();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LyricsLoader.Song();
  __chkstk_darwin();
  uint64_t v7 = (id *)((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of LyricsLoader.Song(v1, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    id v8 = *v7;

    return (uint64_t)v8;
  }
  (*(void (**)(char *, id *, uint64_t))(v3 + 32))(v5, v7, v2);
  type metadata accessor for UIMenu(0, &_sSo15MPIdentifierSetCML_0);
  id v9 = [self kindWithVariants:1];
  __chkstk_darwin();
  aBlock[-2] = v5;
  uint64_t v11 = MPIdentifierSet.__allocating_init(source:modelKind:block:)(0xD000000000000012, 0x8000000100473260, v10, (uint64_t)partial apply for closure #1 in LyricsLoader.Song.modelObjectSong.getter, (uint64_t)&aBlock[-4]);
  __chkstk_darwin();
  aBlock[-2] = v5;
  id v12 = objc_allocWithZone((Class)MPModelSong);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = partial apply for closure #2 in LyricsLoader.Song.modelObjectSong.getter;
  *(void *)(v13 + 24) = &aBlock[-4];
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@guaranteed MPIdentifierSet & MPMutableIdentifierSet) -> ();
  uint64_t aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed MPIdentifierSet & MPMutableIdentifierSet) -> ();
  aBlock[3] = &block_descriptor_53_0;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  id v8 = [v12 initWithIdentifiers:v11 block:v14];

  _Block_release(v14);
  swift_release();
  LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v11 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return (uint64_t)v8;
  }
  __break(1u);
  return result;
}

void closure #1 in LyricsLoader.Song.modelObjectSong.getter(uint64_t isEscapingClosureAtFileLocation, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Song();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = Song.catalogID.getter();
  if (v9)
  {
    uint64_t v10 = v8;
    uint64_t v11 = v9;
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v10;
    *(void *)(v12 + 24) = v11;
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = partial apply for closure #1 in closure #1 in LyricsLoader.Song.modelObjectSong.getter;
    *(void *)(v4 + 24) = v12;
    aBlock[4] = thunk for @callee_guaranteed (@guaranteed MPIdentifierSet & MPMutableIdentifierSet) -> ()partial apply;
    uint64_t aBlock[5] = v4;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed MPMutableUniversalStoreIdentifiers) -> ();
    aBlock[3] = &block_descriptor_112_0;
    uint64_t v7 = (char *)_Block_copy(aBlock);
    swift_retain();
    swift_release();
    [(id)isEscapingClosureAtFileLocation setUniversalStoreIdentifiersWithBlock:v7];
    _Block_release(v7);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return;
    }
    __break(1u);
  }
  static ApplicationCapabilities.shared.getter((uint64_t)aBlock);
  outlined release of ApplicationCapabilities((uint64_t)aBlock);
  if ((aBlock[0] & 0x10000) != 0) {
    goto LABEL_8;
  }
  type metadata accessor for UIMenu(0, &_sSo14MPMediaLibraryCML_0);
  id v13 = static MPMediaLibrary.device.getter();
  id v14 = [v13 uniqueIdentifier];

  if (v14)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
    unint64_t v15 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v16 = swift_allocObject();
    os_log_type_t v17 = *(void (**)(unint64_t, char *, uint64_t))(v5 + 32);
    v5 += 32;
    v17(v16 + v15, v7, v4);
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = partial apply for closure #3 in closure #1 in LyricsLoader.Song.modelObjectSong.getter;
    *(void *)(v4 + 24) = v16;
    id v28 = thunk for @callee_guaranteed (@guaranteed MPIdentifierSet & MPMutableIdentifierSet) -> ()partial apply;
    uint64_t v29 = v4;
    unint64_t v24 = _NSConcreteStackBlock;
    uint64_t v25 = 1107296256;
    unint64_t v26 = thunk for @escaping @callee_guaranteed (@guaranteed MPMutableUniversalStoreIdentifiers) -> ();
    uint64_t v27 = &block_descriptor_93_0;
    uint64_t v7 = (char *)_Block_copy(&v24);
    a2 = v29;
    swift_retain();
    swift_release();
    [(id)isEscapingClosureAtFileLocation setLibraryIdentifiersWithDatabaseID:v14 block:v7];

    _Block_release(v7);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
LABEL_8:
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
      unint64_t v18 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      uint64_t v19 = swift_allocObject();
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v19 + v18, v7, v4);
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = partial apply for closure #2 in closure #1 in LyricsLoader.Song.modelObjectSong.getter;
      *(void *)(v20 + 24) = v19;
      id v28 = thunk for @callee_guaranteed (@guaranteed MPIdentifierSet & MPMutableIdentifierSet) -> ()partial apply;
      uint64_t v29 = v20;
      unint64_t v24 = _NSConcreteStackBlock;
      uint64_t v25 = 1107296256;
      unint64_t v26 = thunk for @escaping @callee_guaranteed (@guaranteed MPMutableUniversalStoreIdentifiers) -> ();
      uint64_t v27 = &block_descriptor_102_0;
      id v21 = _Block_copy(&v24);
      swift_retain();
      swift_release();
      [(id)isEscapingClosureAtFileLocation setUniversalStoreIdentifiersWithBlock:v21];
      _Block_release(v21);
      char v22 = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if (v22) {
        __break(1u);
      }
    }
  }
}

id closure #1 in closure #1 in LyricsLoader.Song.modelObjectSong.getter(id result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = result;
  uint64_t v5 = HIBYTE(a3) & 0xF;
  uint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v7 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v7 = v6;
  }
  if (!v7)
  {
    uint64_t v21 = 0;
    return [v4 setAdamID:v21];
  }
  if ((a3 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = (uint64_t)_ss13_parseInteger5ascii5radixq_Sgx_SitSyRzs010FixedWidthB0R_r0_lFSSSiADSSRszsAER_r0_lIetgyr_Tpq5s5Int64V_Tg5_0(v3, a3, 10);
    LOBYTE(v3) = v25;
    swift_bridgeObjectRelease();
LABEL_44:
    if (v3) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = v10;
    }
    return [v4 setAdamID:v21];
  }
  if ((a3 & 0x2000000000000000) == 0)
  {
    if ((v3 & 0x1000000000000000) != 0) {
      uint64_t v9 = (unsigned __int8 *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v10 = (uint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v9, v6, 10);
    LOBYTE(v3) = v11 & 1;
    goto LABEL_44;
  }
  v26[0] = v3;
  v26[1] = a3 & 0xFFFFFFFFFFFFFFLL;
  if (v3 == 43)
  {
    if (!v5) {
      goto LABEL_58;
    }
    if (v5 == 1 || (BYTE1(v3) - 48) > 9u) {
      goto LABEL_31;
    }
    uint64_t v10 = (BYTE1(v3) - 48);
    if (v5 != 2)
    {
      if ((BYTE2(v3) - 48) > 9u) {
        goto LABEL_31;
      }
      uint64_t v10 = 10 * (BYTE1(v3) - 48) + (BYTE2(v3) - 48);
      uint64_t v12 = v5 - 3;
      if (v12)
      {
        id v13 = (unsigned __int8 *)v26 + 3;
        while (1)
        {
          unsigned int v14 = *v13 - 48;
          if (v14 > 9) {
            goto LABEL_31;
          }
          uint64_t v15 = 10 * v10;
          if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63) {
            goto LABEL_31;
          }
          uint64_t v10 = v15 + v14;
          if (__OFADD__(v15, v14)) {
            goto LABEL_31;
          }
          LOBYTE(v3) = 0;
          ++v13;
          if (!--v12) {
            goto LABEL_44;
          }
        }
      }
    }
LABEL_43:
    LOBYTE(v3) = 0;
    goto LABEL_44;
  }
  if (v3 != 45)
  {
    if (!v5 || (v3 - 48) > 9u) {
      goto LABEL_31;
    }
    uint64_t v10 = (v3 - 48);
    if (v5 != 1)
    {
      if ((BYTE1(v3) - 48) > 9u) {
        goto LABEL_31;
      }
      uint64_t v10 = 10 * (v3 - 48) + (BYTE1(v3) - 48);
      uint64_t v16 = v5 - 2;
      if (v16)
      {
        os_log_type_t v17 = (unsigned __int8 *)v26 + 2;
        while (1)
        {
          unsigned int v18 = *v17 - 48;
          if (v18 > 9) {
            goto LABEL_31;
          }
          uint64_t v19 = 10 * v10;
          if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63) {
            goto LABEL_31;
          }
          uint64_t v10 = v19 + v18;
          if (__OFADD__(v19, v18)) {
            goto LABEL_31;
          }
          LOBYTE(v3) = 0;
          ++v17;
          if (!--v16) {
            goto LABEL_44;
          }
        }
      }
    }
    goto LABEL_43;
  }
  if (v5)
  {
    if (v5 != 1 && (BYTE1(v3) - 48) <= 9u)
    {
      if (v5 == 2)
      {
        LOBYTE(v3) = 0;
        uint64_t v10 = -(uint64_t)(BYTE1(v3) - 48);
        goto LABEL_44;
      }
      if ((BYTE2(v3) - 48) <= 9u)
      {
        uint64_t v10 = -10 * (BYTE1(v3) - 48) - (BYTE2(v3) - 48);
        uint64_t v20 = v5 - 3;
        if (!v20) {
          goto LABEL_43;
        }
        char v22 = (unsigned __int8 *)v26 + 3;
        while (1)
        {
          unsigned int v23 = *v22 - 48;
          if (v23 > 9) {
            break;
          }
          uint64_t v24 = 10 * v10;
          if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63) {
            break;
          }
          uint64_t v10 = v24 - v23;
          if (__OFSUB__(v24, v23)) {
            break;
          }
          LOBYTE(v3) = 0;
          ++v22;
          if (!--v20) {
            goto LABEL_44;
          }
        }
      }
    }
LABEL_31:
    uint64_t v10 = 0;
    LOBYTE(v3) = 1;
    goto LABEL_44;
  }
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

void closure #2 in closure #1 in LyricsLoader.Song.modelObjectSong.getter(void *a1)
{
  Song.id.getter();
  id v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a1 setUniversalCloudLibraryID:v2];
}

uint64_t closure #3 in closure #1 in LyricsLoader.Song.modelObjectSong.getter(void *a1)
{
  uint64_t result = Song.id.getter();
  uint64_t v4 = v3;
  uint64_t v5 = HIBYTE(v3) & 0xF;
  uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000) != 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = 0;
    return (uint64_t)[a1 setPersistentID:v21];
  }
  if ((v4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (uint64_t)_ss13_parseInteger5ascii5radixq_Sgx_SitSyRzs010FixedWidthB0R_r0_lFSSSiADSSRszsAER_r0_lIetgyr_Tpq5s5Int64V_Tg5_0(result, v4, 10);
    char v11 = v25;
LABEL_44:
    swift_bridgeObjectRelease();
    if (v11) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = v9;
    }
    return (uint64_t)[a1 setPersistentID:v21];
  }
  if ((v4 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0) {
      uint64_t v8 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v9 = (uint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v8, v6, 10);
    char v11 = v10 & 1;
    goto LABEL_44;
  }
  v26[0] = result;
  v26[1] = v4 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v5) {
      goto LABEL_58;
    }
    if (v5 == 1 || (BYTE1(result) - 48) > 9u) {
      goto LABEL_31;
    }
    uint64_t v9 = (BYTE1(result) - 48);
    if (v5 != 2)
    {
      if ((BYTE2(result) - 48) > 9u) {
        goto LABEL_31;
      }
      uint64_t v9 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
      uint64_t v12 = v5 - 3;
      if (v12)
      {
        id v13 = (unsigned __int8 *)v26 + 3;
        while (1)
        {
          unsigned int v14 = *v13 - 48;
          if (v14 > 9) {
            goto LABEL_31;
          }
          uint64_t v15 = 10 * v9;
          if ((unsigned __int128)(v9 * (__int128)10) >> 64 != (10 * v9) >> 63) {
            goto LABEL_31;
          }
          uint64_t v9 = v15 + v14;
          if (__OFADD__(v15, v14)) {
            goto LABEL_31;
          }
          char v11 = 0;
          ++v13;
          if (!--v12) {
            goto LABEL_44;
          }
        }
      }
    }
LABEL_43:
    char v11 = 0;
    goto LABEL_44;
  }
  if (result != 45)
  {
    if (!v5 || (result - 48) > 9u) {
      goto LABEL_31;
    }
    uint64_t v9 = (result - 48);
    if (v5 != 1)
    {
      if ((BYTE1(result) - 48) > 9u) {
        goto LABEL_31;
      }
      uint64_t v9 = 10 * (result - 48) + (BYTE1(result) - 48);
      uint64_t v16 = v5 - 2;
      if (v16)
      {
        os_log_type_t v17 = (unsigned __int8 *)v26 + 2;
        while (1)
        {
          unsigned int v18 = *v17 - 48;
          if (v18 > 9) {
            goto LABEL_31;
          }
          uint64_t v19 = 10 * v9;
          if ((unsigned __int128)(v9 * (__int128)10) >> 64 != (10 * v9) >> 63) {
            goto LABEL_31;
          }
          uint64_t v9 = v19 + v18;
          if (__OFADD__(v19, v18)) {
            goto LABEL_31;
          }
          char v11 = 0;
          ++v17;
          if (!--v16) {
            goto LABEL_44;
          }
        }
      }
    }
    goto LABEL_43;
  }
  if (v5)
  {
    if (v5 != 1 && (BYTE1(result) - 48) <= 9u)
    {
      if (v5 == 2)
      {
        char v11 = 0;
        uint64_t v9 = -(uint64_t)(BYTE1(result) - 48);
        goto LABEL_44;
      }
      if ((BYTE2(result) - 48) <= 9u)
      {
        uint64_t v9 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
        uint64_t v20 = v5 - 3;
        if (!v20) {
          goto LABEL_43;
        }
        char v22 = (unsigned __int8 *)v26 + 3;
        while (1)
        {
          unsigned int v23 = *v22 - 48;
          if (v23 > 9) {
            break;
          }
          uint64_t v24 = 10 * v9;
          if ((unsigned __int128)(v9 * (__int128)10) >> 64 != (10 * v9) >> 63) {
            break;
          }
          uint64_t v9 = v24 - v23;
          if (__OFSUB__(v24, v23)) {
            break;
          }
          char v11 = 0;
          ++v22;
          if (!--v20) {
            goto LABEL_44;
          }
        }
      }
    }
LABEL_31:
    uint64_t v9 = 0;
    char v11 = 1;
    goto LABEL_44;
  }
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

uint64_t MPIdentifierSet.__allocating_init(source:modelKind:block:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a4;
  *(void *)(v10 + 24) = a5;
  v14[4] = thunk for @callee_guaranteed (@guaranteed MPIdentifierSet & MPMutableIdentifierSet) -> ()partial apply;
  v14[5] = v10;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  void v14[2] = _sSo22MPMutableIdentifierSet_So012MPIdentifierC0CXcIegg_SoAA_ACXcIyBy_TR_0;
  void v14[3] = &block_descriptor_84;
  char v11 = _Block_copy(v14);
  swift_retain();
  id v12 = [v8 initWithSource:v9 modelKind:a3 block:v11];

  _Block_release(v11);
  swift_release();
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((a3 & 1) == 0) {
    return (uint64_t)v12;
  }
  __break(1u);
  return result;
}

void closure #2 in LyricsLoader.Song.modelObjectSong.getter(void *a1, uint64_t a2)
{
  self;
  uint64_t v4 = (void *)swift_dynamicCastObjCClassUnconditional();
  id v5 = a1;
  Song.title.getter();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 setTitle:v6];

  [v4 setArtistUploadedContent:0];
  id v7 = [self emptyIdentifierSet];
  void v12[2] = a2;
  id v8 = objc_allocWithZone((Class)MPModelLyrics);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for closure #1 in closure #2 in LyricsLoader.Song.modelObjectSong.getter;
  *(void *)(v9 + 24) = v12;
  aBlock[4] = thunk for @callee_guaranteed (@guaranteed MPIdentifierSet & MPMutableIdentifierSet) -> ()partial apply;
  uint64_t aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed MPIdentifierSet & MPMutableIdentifierSet) -> ();
  aBlock[3] = &block_descriptor_78_0;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  id v11 = [v8 initWithIdentifiers:v7 block:v10];

  _Block_release(v10);
  swift_release();
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v7)
  {
    __break(1u);
  }
  else
  {
    [v4 setLyrics:v11];

    [v4 setHasVideo:0];
  }
}

void closure #1 in closure #2 in LyricsLoader.Song.modelObjectSong.getter(void *a1)
{
  self;
  id v2 = (void *)swift_dynamicCastObjCClassUnconditional();
  id v3 = a1;
  [v2 setHasStoreLyrics:Song.hasLyrics.getter() & 1];
  [v2 setHasLibraryLyrics:Song.hasCustomLyrics.getter() & 1];
  [v2 setHasTimeSyncedLyrics:Song.hasTimeSyncedLyrics.getter() & 1];
  [v2 setText:0];
}

uint64_t MPModelSong.loggingInfo.getter()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  id v2 = [v0 title];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&_sSSSgMD_1);
  v7._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x80000001004732D0;
  v8._uint64_t countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v8);
  id v9 = objc_msgSend(v1, "identifiers", v4, v6);
  id v10 = [v9 description];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v13 = v12;

  v14._uint64_t countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);

  swift_bridgeObjectRelease();
  return 0x7469742E676E6F73;
}

uint64_t protocol witness for LyricsLoadable.lyricsOperationIdentifier.getter in conformance MPModelSong()
{
  return MPModelSong.lyricsOperationIdentifier.getter();
}

uint64_t protocol witness for LyricsLoadable.loggingInfo.getter in conformance MPModelSong()
{
  return MPModelSong.loggingInfo.getter();
}

void *_ss22_ContiguousArrayBufferV19_uninitializedCount15minimumCapacityAByxGSi_SitcfCs5UInt8V_Tgmq5_2(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCys5UInt8VGMD_2);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

unint64_t lazy protocol witness table accessor for type LyricsLoader.LyricsError and conformance LyricsLoader.LyricsError()
{
  unint64_t result = lazy protocol witness table cache variable for type LyricsLoader.LyricsError and conformance LyricsLoader.LyricsError;
  if (!lazy protocol witness table cache variable for type LyricsLoader.LyricsError and conformance LyricsLoader.LyricsError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LyricsLoader.LyricsError and conformance LyricsLoader.LyricsError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LyricsLoader.LyricsError and conformance LyricsLoader.LyricsError;
  if (!lazy protocol witness table cache variable for type LyricsLoader.LyricsError and conformance LyricsLoader.LyricsError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LyricsLoader.LyricsError and conformance LyricsLoader.LyricsError);
  }
  return result;
}

void partial apply for closure #1 in LyricsLoader.existingOperation(with:)()
{
  closure #1 in LyricsLoader.existingOperation(with:)(*(void ***)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1003160EC()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_49(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_49()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in LyricsLoader.loadLyrics(for:)(uint64_t a1)
{
  return closure #1 in LyricsLoader.loadLyrics(for:)(a1, *(char **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

{
  uint64_t v1;

  return closure #1 in LyricsLoader.loadLyrics(for:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t partial apply for closure #1 in LyricsLoader.hasRequest(with:)()
{
  return closure #1 in LyricsLoader.hasRequest(with:)(*(unsigned char **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100316130()
{
  return swift_deallocObject();
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  size_t v5 = (void **)v4;
  id v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    unsigned int v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  unsigned int v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  swift_bridgeObjectRetain();
}

unsigned __int8 *_ss13_parseInteger5ascii5radixq_Sgx_SitSyRzs010FixedWidthB0R_r0_lFSSSiADSSRszsAER_r0_lIetgyr_Tpq5s5Int64V_Tg5_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    Swift::String v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = _sSS8_copyingyS2SFZ_1();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    Swift::String v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    Swift::String v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  char v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t _sSS8_copyingyS2SFZ_1()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = _sSS8_copyingySSSsFZ_1(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t _sSS8_copyingySSSsFZ_1(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          char v11 = _ss22_ContiguousArrayBufferV19_uninitializedCount15minimumCapacityAByxGSi_SitcfCs5UInt8V_Tgmq5_2(v9, 0), v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4), swift_bridgeObjectRetain(), swift_bridgeObjectRelease(), v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t specialized LyricsLoader.performStoreLyricsRequest(request:song:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v10 = type metadata accessor for Song();
  void v31[3] = v10;
  v31[4] = (uint64_t)&protocol witness table for Song;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v31);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(boxed_opaque_existential_1, a2, v10);
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  outlined init with copy of AlertPresenting((uint64_t)v31, (uint64_t)v30);
  uint64_t v13 = (void *)swift_allocObject();
  _OWORD v13[2] = v12;
  outlined init with take of AlertPresenting(v30, (uint64_t)(v13 + 3));
  v13[8] = a3;
  v13[9] = a4;
  id v28 = closure #1 in LyricsLoader.performStoreLyricsRequest(request:song:completion:)partial apply;
  uint64_t v29 = v13;
  uint64_t v24 = _NSConcreteStackBlock;
  uint64_t v25 = 1107296256;
  unint64_t v26 = (uint64_t (*)(uint64_t))thunk for @escaping @callee_guaranteed (@guaranteed MSVLyricsSongInfo?, @guaranteed Error?) -> ();
  uint64_t v27 = &block_descriptor_171;
  uint64_t v14 = _Block_copy(&v24);
  swift_retain();
  swift_release();
  id v15 = [a1 newOperationWithResponseHandler:v14];
  _Block_release(v14);
  char v16 = *(void **)&a5[OBJC_IVAR___MusicLyricsLoader_accessQueue];
  outlined init with copy of AlertPresenting((uint64_t)v31, (uint64_t)v30);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a5;
  outlined init with take of AlertPresenting(v30, v17 + 24);
  *(void *)(v17 + 64) = v15;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = closure #2 in LyricsLoader.performStoreLyricsRequest(request:song:completion:)partial apply;
  *(void *)(v18 + 24) = v17;
  id v28 = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  uint64_t v29 = (void *)v18;
  uint64_t v24 = _NSConcreteStackBlock;
  uint64_t v25 = 1107296256;
  unint64_t v26 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v27 = &block_descriptor_182;
  uint64_t v19 = _Block_copy(&v24);
  unint64_t v20 = v16;
  char v21 = a5;
  id v22 = v15;
  swift_retain();
  swift_release();
  dispatch_sync(v20, v19);

  _Block_release(v19);
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v15)
  {
    __break(1u);
  }
  else
  {
    [*(id *)&v21[OBJC_IVAR___MusicLyricsLoader_operationQueue] addOperation:v22];

    swift_release();
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v31);
  }
  return result;
}

uint64_t specialized LyricsLoader.performStoreLyricsRequest(request:song:completion:)(void *a1, void *a2, uint64_t a3, uint64_t a4, char *a5)
{
  v30[3] = type metadata accessor for UIMenu(0, &_sSo11MPModelSongCML_0);
  void v30[4] = &protocol witness table for MPModelSong;
  v30[0] = a2;
  uint64_t v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  outlined init with copy of AlertPresenting((uint64_t)v30, (uint64_t)v29);
  char v11 = (void *)swift_allocObject();
  _OWORD v11[2] = v10;
  outlined init with take of AlertPresenting(v29, (uint64_t)(v11 + 3));
  v11[8] = a3;
  v11[9] = a4;
  uint64_t v27 = partial apply for closure #1 in LyricsLoader.performStoreLyricsRequest(request:song:completion:);
  id v28 = v11;
  unsigned int v23 = _NSConcreteStackBlock;
  uint64_t v24 = 1107296256;
  uint64_t v25 = (uint64_t (*)(uint64_t))thunk for @escaping @callee_guaranteed (@guaranteed MSVLyricsSongInfo?, @guaranteed Error?) -> ();
  unint64_t v26 = &block_descriptor_121;
  uint64_t v12 = _Block_copy(&v23);
  id v13 = a2;
  swift_retain();
  swift_release();
  id v14 = [a1 newOperationWithResponseHandler:v12];
  _Block_release(v12);
  id v15 = *(void **)&a5[OBJC_IVAR___MusicLyricsLoader_accessQueue];
  outlined init with copy of AlertPresenting((uint64_t)v30, (uint64_t)v29);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a5;
  outlined init with take of AlertPresenting(v29, v16 + 24);
  *(void *)(v16 + 64) = v14;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = partial apply for closure #2 in LyricsLoader.performStoreLyricsRequest(request:song:completion:);
  *(void *)(v17 + 24) = v16;
  uint64_t v27 = (uint64_t (*)(void *, uint64_t))thunk for @escaping @callee_guaranteed () -> ()partial apply;
  id v28 = (void *)v17;
  unsigned int v23 = _NSConcreteStackBlock;
  uint64_t v24 = 1107296256;
  uint64_t v25 = thunk for @escaping @callee_guaranteed () -> ();
  unint64_t v26 = &block_descriptor_131;
  uint64_t v18 = _Block_copy(&v23);
  uint64_t v19 = v15;
  unint64_t v20 = a5;
  id v21 = v14;
  swift_retain();
  swift_release();
  dispatch_sync(v19, v18);

  _Block_release(v18);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v14)
  {
    __break(1u);
  }
  else
  {
    [*(id *)&v20[OBJC_IVAR___MusicLyricsLoader_operationQueue] addOperation:v21];

    swift_release();
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v30);
  }
  return result;
}

uint64_t specialized log #1 (_:for:) in closure #1 in LyricsLoader.performStoreLyricsRequest(request:song:completion:)(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  v55[3] = type metadata accessor for UIMenu(0, &_sSo11MPModelSongCML_0);
  v55[4] = &protocol witness table for MPModelSong;
  v55[0] = a2;
  if (!a1)
  {
    uint64_t v30 = one-time initialization token for lyrics;
    id v31 = a2;
    if (v30 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.lyrics);
    outlined init with copy of AlertPresenting((uint64_t)v55, (uint64_t)v53);
    swift_bridgeObjectRetain_n();
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v33))
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136446722;
      swift_bridgeObjectRetain();
      *(void *)(v34 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(a3, a4, &v52);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v34 + 12) = 2082;
      v51[0] = 0;
      v51[1] = 0;
      __swift_instantiateConcreteTypeFromMangledName(&_sSSSgMD_1);
      uint64_t v35 = String.init<A>(describing:)();
      *(void *)(v34 + 14) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v35, v36, &v52);
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 22) = 2082;
      __swift_project_boxed_opaque_existential_0Tm(v53, v54);
      uint64_t v37 = MPModelSong.loggingInfo.getter();
      *(void *)(v34 + 24) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v37, v38, &v52);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v53);
      _os_log_impl((void *)&_mh_execute_header, v20, v33, "%{public}s loadLyrics(for:completion:) failed to handle error on store lyrics request [failed to convert Error? to NSError] error.localizedDescription=%{public}s %{public}s", (uint8_t *)v34, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      goto LABEL_26;
    }
    swift_bridgeObjectRelease_n();
LABEL_25:
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v53);
    goto LABEL_26;
  }
  id v8 = a2;
  uint64_t v9 = (void *)_convertErrorToNSError(_:)();
  id v10 = [v9 domain];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v13 == v14)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
      if (one-time initialization token for lyrics != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Logger.lyrics);
      outlined init with copy of AlertPresenting((uint64_t)v55, (uint64_t)v53);
      id v18 = v9;
      swift_bridgeObjectRetain_n();
      id v19 = v18;
      unint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc();
        v51[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 136446978;
        swift_bridgeObjectRetain();
        *(void *)(v22 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(a3, a4, v51);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v22 + 12) = 2050;
        id v23 = [v19 code];

        *(void *)(v22 + 14) = v23;
        *(_WORD *)(v22 + 22) = 2082;
        id v24 = [v19 domain];
        uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v27 = v26;

        *(void *)(v22 + 24) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v25, v27, v51);
        swift_bridgeObjectRelease();
        *(_WORD *)(v22 + 32) = 2082;
        __swift_project_boxed_opaque_existential_0Tm(v53, v54);
        uint64_t v28 = MPModelSong.loggingInfo.getter();
        *(void *)(v22 + 34) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v28, v29, v51);
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v53);
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "%{public}s loadLyrics(for:completion:) failed to handle error on store lyrics request [unexpected error domain or code] standardError.code=%{public}ld standardError.domain=%{public}s %{public}s", (uint8_t *)v22, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

LABEL_26:
        return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v55);
      }
      swift_bridgeObjectRelease_n();

      goto LABEL_25;
    }
  }
  if ([v9 code] != (id)-3005)
  {
    if (one-time initialization token for lyrics != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logger.lyrics);
    outlined init with copy of AlertPresenting((uint64_t)v55, (uint64_t)v53);
    swift_bridgeObjectRetain_n();
    id v40 = v9;
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      v51[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136446722;
      swift_bridgeObjectRetain();
      *(void *)(v42 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(a3, a4, v51);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v42 + 12) = 2082;
      id v43 = v40;
      id v44 = [v43 description];
      uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v47 = v46;

      *(void *)(v42 + 14) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v45, v47, v51);
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 22) = 2082;
      __swift_project_boxed_opaque_existential_0Tm(v53, v54);
      uint64_t v48 = MPModelSong.loggingInfo.getter();
      *(void *)(v42 + 24) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v48, v49, v51);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v53);
      _os_log_impl((void *)&_mh_execute_header, v20, v41, "%{public}s loadLyrics(for:completion:) unexpected error on store lyrics request [found error other than .explicitContentRestricted] error=%{public}s) %{public}s", (uint8_t *)v42, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_26;
    }
    swift_bridgeObjectRelease_n();

    goto LABEL_25;
  }

  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v55);
}

uint64_t specialized log #1 (_:for:) in closure #1 in LyricsLoader.performStoreLyricsRequest(request:song:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  v57[3] = a5;
  v57[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v57);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(boxed_opaque_existential_1, a2, a5);
  if (!a1)
  {
    if (one-time initialization token for lyrics != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.lyrics);
    outlined init with copy of AlertPresenting((uint64_t)v57, (uint64_t)v55);
    swift_bridgeObjectRetain_n();
    id v24 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136446722;
      swift_bridgeObjectRetain();
      *(void *)(v36 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(a3, a4, &v54);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v36 + 12) = 2082;
      v53[0] = 0;
      v53[1] = 0;
      __swift_instantiateConcreteTypeFromMangledName(&_sSSSgMD_1);
      uint64_t v37 = String.init<A>(describing:)();
      *(void *)(v36 + 14) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v37, v38, &v54);
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 22) = 2082;
      __swift_project_boxed_opaque_existential_0Tm(v55, v56);
      uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
      *(void *)(v36 + 24) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v39, v40, &v54);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v55);
      _os_log_impl((void *)&_mh_execute_header, v24, v35, "%{public}s loadLyrics(for:completion:) failed to handle error on store lyrics request [failed to convert Error? to NSError] error.localizedDescription=%{public}s %{public}s", (uint8_t *)v36, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      goto LABEL_26;
    }
    swift_bridgeObjectRelease_n();
LABEL_25:
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v55);
    goto LABEL_26;
  }
  uint64_t v13 = (void *)_convertErrorToNSError(_:)();
  id v14 = [v13 domain];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {
      if (one-time initialization token for lyrics != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)static Logger.lyrics);
      outlined init with copy of AlertPresenting((uint64_t)v57, (uint64_t)v55);
      id v22 = v13;
      swift_bridgeObjectRetain_n();
      id v23 = v22;
      id v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = swift_slowAlloc();
        v53[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 136446978;
        swift_bridgeObjectRetain();
        *(void *)(v26 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(a3, a4, v53);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v26 + 12) = 2050;
        id v27 = [v23 code];

        *(void *)(v26 + 14) = v27;
        *(_WORD *)(v26 + 22) = 2082;
        id v28 = [v23 domain];
        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v31 = v30;

        *(void *)(v26 + 24) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v29, v31, v53);
        swift_bridgeObjectRelease();
        *(_WORD *)(v26 + 32) = 2082;
        __swift_project_boxed_opaque_existential_0Tm(v55, v56);
        uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
        *(void *)(v26 + 34) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v32, v33, v53);
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v55);
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "%{public}s loadLyrics(for:completion:) failed to handle error on store lyrics request [unexpected error domain or code] standardError.code=%{public}ld standardError.domain=%{public}s %{public}s", (uint8_t *)v26, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

LABEL_26:
        return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v57);
      }
      swift_bridgeObjectRelease_n();

      goto LABEL_25;
    }
  }
  if ([v13 code] != (id)-3005)
  {
    if (one-time initialization token for lyrics != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.lyrics);
    outlined init with copy of AlertPresenting((uint64_t)v57, (uint64_t)v55);
    swift_bridgeObjectRetain_n();
    id v42 = v13;
    id v24 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v43))
    {
      uint64_t v44 = swift_slowAlloc();
      v53[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 136446722;
      swift_bridgeObjectRetain();
      *(void *)(v44 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(a3, a4, v53);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v44 + 12) = 2082;
      id v45 = v42;
      id v46 = [v45 description];
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v49 = v48;

      *(void *)(v44 + 14) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v47, v49, v53);
      swift_bridgeObjectRelease();
      *(_WORD *)(v44 + 22) = 2082;
      __swift_project_boxed_opaque_existential_0Tm(v55, v56);
      uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
      *(void *)(v44 + 24) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v50, v51, v53);
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v55);
      _os_log_impl((void *)&_mh_execute_header, v24, v43, "%{public}s loadLyrics(for:completion:) unexpected error on store lyrics request [found error other than .explicitContentRestricted] error=%{public}s) %{public}s", (uint8_t *)v44, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_26;
    }
    swift_bridgeObjectRelease_n();

    goto LABEL_25;
  }

  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v57);
}

uint64_t specialized static LyricsLoader.Song.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Song();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  Swift::String v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LyricsLoader.Song();
  __chkstk_darwin();
  uint64_t v9 = (void **)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  uint64_t v11 = (char *)&v27 - v10;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (LyricsLoader.Song, LyricsLoader.Song));
  uint64_t v12 = __chkstk_darwin();
  id v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (void **)&v14[*(int *)(v12 + 56)];
  outlined init with copy of LyricsLoader.Song(a1, (uint64_t)v14);
  outlined init with copy of LyricsLoader.Song(a2, (uint64_t)v15);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of LyricsLoader.Song((uint64_t)v14, (uint64_t)v9);
    uint64_t v16 = *v9;
    uint64_t v17 = v9[1];
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v18 = *v15;
      id v19 = v15[1];
      type metadata accessor for UIMenu(0, (unint64_t *)&_sSo8NSObjectCML_1);
      char v20 = static NSObject.== infix(_:_:)();

      if (v20)
      {
        if (v17)
        {
          if (v19)
          {
            type metadata accessor for UIMenu(0, &_sSo26MPCPlayerResponseTracklistCML_0);
            id v21 = v19;
            id v22 = v17;
            char v23 = static NSObject.== infix(_:_:)();

            if (v23) {
              goto LABEL_20;
            }
            goto LABEL_15;
          }
        }
        else
        {
          if (!v19)
          {
LABEL_20:
            outlined destroy of LyricsLoader.Song((uint64_t)v14);
            char v24 = 1;
            return v24 & 1;
          }
          uint64_t v17 = v19;
        }
      }
      else
      {
      }
LABEL_15:
      outlined destroy of LyricsLoader.Song((uint64_t)v14);
      goto LABEL_16;
    }

LABEL_11:
    outlined destroy of (LyricsLoader.Song, LyricsLoader.Song)((uint64_t)v14);
LABEL_16:
    char v24 = 0;
    return v24 & 1;
  }
  outlined init with copy of LyricsLoader.Song((uint64_t)v14, (uint64_t)v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    goto LABEL_11;
  }
  (*(void (**)(char *, void **, uint64_t))(v5 + 32))(v7, v15, v4);
  char v24 = static Song.== infix(_:_:)();
  os_log_type_t v25 = *(void (**)(char *, uint64_t))(v5 + 8);
  v25(v7, v4);
  v25(v11, v4);
  outlined destroy of LyricsLoader.Song((uint64_t)v14);
  return v24 & 1;
}

uint64_t specialized static LyricsLoader.supportsLyrics(for:)(void *a1)
{
  id v2 = [a1 lyrics];
  if (v2)
  {
    id v3 = v2;
    if ([a1 hasVideo])
    {

      goto LABEL_4;
    }
    id v14 = [v3 hasLibraryLyrics];
    if (([v3 hasStoreLyrics] & 1) == 0 && !v14)
    {
      if (one-time initialization token for lyrics != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)static Logger.lyrics);
      id v16 = a1;
      uint64_t v6 = v3;
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = swift_slowAlloc();
        v133[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 67240962;
        *(_DWORD *)(v19 + 4) = [v6 hasLibraryLyrics];
        *(_WORD *)(v19 + 8) = 1026;
        *(_DWORD *)(v19 + 10) = [v6 hasStoreLyrics];

        *(_WORD *)(v19 + 14) = 2082;
        id v20 = [v16 title];
        if (v20)
        {
          id v21 = v20;
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v23;
        }
        else
        {
          uint64_t v22 = 0;
          uint64_t v24 = 0;
        }
        uint64_t v134 = v22;
        uint64_t v135 = v24;
        __swift_instantiateConcreteTypeFromMangledName(&_sSSSgMD_1);
        uint64_t v55 = String.init<A>(describing:)();
        *(void *)(v19 + 16) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v55, v56, v133);

        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 24) = 2082;
        id v57 = [v16 identifiers];
        id v58 = [v57 description];
        uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v61 = v60;

        *(void *)(v19 + 26) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v59, v61, v133);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Loader supportsLyrics=false [no lyrics found] lyrics.hasLibraryLyrics=%{BOOL,public}d lyrics.hasStoreLyrics=%{BOOL,public}d song.title=%{public}s song.identifiers=%{public}s", (uint8_t *)v19, 0x22u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return 0;
      }

      goto LABEL_27;
    }
    BagProvider.shared.unsafeMutableAddressor();
    swift_retain();
    id v25 = (id)BagProvider.bag.getter();
    swift_release();
    if (v25)
    {
      if (([self supportsLyricsForURLBag:v25] & 1) == 0)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v26 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v27 = [v25 dictionaryForBagKey:v26];

        if (v27)
        {

          if (one-time initialization token for lyrics != -1) {
            swift_once();
          }
          uint64_t v28 = type metadata accessor for Logger();
          __swift_project_value_buffer(v28, (uint64_t)static Logger.lyrics);
          id v29 = a1;
          unint64_t v30 = Logger.logObject.getter();
          os_log_type_t v31 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v30, v31))
          {

            return (uint64_t)v14;
          }
          os_log_type_t v129 = v31;
          uint64_t v32 = swift_slowAlloc();
          v133[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v32 = 67240706;
          *(_DWORD *)(v32 + 4) = v14;
          *(_WORD *)(v32 + 8) = 2082;
          id v33 = [v29 title];
          if (v33)
          {
            uint64_t v34 = v33;
            uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v37 = v36;
          }
          else
          {
            uint64_t v35 = 0;
            uint64_t v37 = 0;
          }
          uint64_t v134 = v35;
          uint64_t v135 = v37;
          __swift_instantiateConcreteTypeFromMangledName(&_sSSSgMD_1);
          uint64_t v106 = String.init<A>(describing:)();
          *(void *)(v32 + 10) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v106, v107, v133);

          swift_bridgeObjectRelease();
          *(_WORD *)(v32 + 18) = 2082;
          id v108 = [v29 identifiers];
          id v109 = [v108 description];
          uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v112 = v111;

          *(void *)(v32 + 20) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v110, v112, v133);
          swift_bridgeObjectRelease();
          os_log_type_t v113 = v129;
          unint64_t v114 = "Loader supportsLyrics=%{BOOL,public}d [no lyrics keys in bag] song.title=%{public}s song.identifiers=%{public}s";
        }
        else
        {
          if (one-time initialization token for lyrics != -1) {
            swift_once();
          }
          uint64_t v62 = type metadata accessor for Logger();
          __swift_project_value_buffer(v62, (uint64_t)static Logger.lyrics);
          id v63 = a1;
          unint64_t v30 = Logger.logObject.getter();
          os_log_type_t v64 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v30, v64))
          {

            return (uint64_t)v14;
          }
          os_log_type_t v131 = v64;
          uint64_t v32 = swift_slowAlloc();
          v133[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v32 = 67240706;
          *(_DWORD *)(v32 + 4) = v14;
          *(_WORD *)(v32 + 8) = 2082;
          id v65 = [v63 title];
          if (v65)
          {
            uint64_t v66 = v65;
            uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v69 = v68;
          }
          else
          {
            uint64_t v67 = 0;
            uint64_t v69 = 0;
          }
          uint64_t v134 = v67;
          uint64_t v135 = v69;
          __swift_instantiateConcreteTypeFromMangledName(&_sSSSgMD_1);
          uint64_t v115 = String.init<A>(describing:)();
          *(void *)(v32 + 10) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v115, v116, v133);

          swift_bridgeObjectRelease();
          *(_WORD *)(v32 + 18) = 2082;
          id v117 = [v63 identifiers];
          id v118 = [v117 description];
          uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v121 = v120;

          *(void *)(v32 + 20) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v119, v121, v133);
          swift_bridgeObjectRelease();
          os_log_type_t v113 = v131;
          unint64_t v114 = "Loader supportsLyrics=%{BOOL,public}d [no musicSubscription key in bag] song.title=%{public}s song.iden"
                 "tifiers=%{public}s";
        }
        _os_log_impl((void *)&_mh_execute_header, v30, v113, v114, (uint8_t *)v32, 0x1Cu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return (uint64_t)v14;
      }
    }
    else
    {
      if (one-time initialization token for lyrics != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      __swift_project_value_buffer(v46, (uint64_t)static Logger.lyrics);
      id v25 = a1;
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v47, v48))
      {
        os_log_type_t v130 = v48;
        uint64_t v49 = swift_slowAlloc();
        v133[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v49 = 67240706;
        *(_DWORD *)(v49 + 4) = v14;
        *(_WORD *)(v49 + 8) = 2082;
        id v50 = [v25 title];
        if (v50)
        {
          unint64_t v51 = v50;
          uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v54 = v53;
        }
        else
        {
          uint64_t v52 = 0;
          uint64_t v54 = 0;
        }
        uint64_t v134 = v52;
        uint64_t v135 = v54;
        __swift_instantiateConcreteTypeFromMangledName(&_sSSSgMD_1);
        uint64_t v70 = String.init<A>(describing:)();
        *(void *)(v49 + 10) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v70, v71, v133);

        swift_bridgeObjectRelease();
        *(_WORD *)(v49 + 18) = 2082;
        id v72 = [v25 identifiers];
        id v73 = [v72 description];
        uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v76 = v75;

        *(void *)(v49 + 20) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v74, v76, v133);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v47, v130, "Loader supportsLyrics=%{BOOL,public}d [bag is nil] song.title=%{public}s song.identifiers=%{public}s", (uint8_t *)v49, 0x1Cu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

LABEL_48:
        if ([v3 hasStoreLyrics]
          && (static ApplicationCapabilities.shared.getter((uint64_t)v133),
              uint64_t v77 = v133[3],
              swift_bridgeObjectRetain(),
              outlined release of ApplicationCapabilities((uint64_t)v133),
              char v78 = _sSh8containsySbxF9MusicCore23ApplicationCapabilitiesV7ServiceO_Tg5_0(2u, v77),
              swift_bridgeObjectRelease(),
              (v78 & 1) != 0))
        {
          static ApplicationCapabilities.shared.getter((uint64_t)&v134);
          outlined release of ApplicationCapabilities((uint64_t)&v134);
          if ((v135 & 0x10000) != 0)
          {

            return 1;
          }
          if (one-time initialization token for lyrics != -1) {
            swift_once();
          }
          uint64_t v79 = type metadata accessor for Logger();
          __swift_project_value_buffer(v79, (uint64_t)static Logger.lyrics);
          id v80 = a1;
          id v81 = Logger.logObject.getter();
          os_log_type_t v82 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v81, v82))
          {

            return (uint64_t)v14;
          }
          uint64_t v83 = swift_slowAlloc();
          uint64_t v132 = swift_slowAlloc();
          *(_DWORD *)uint64_t v83 = 67240706;
          *(_DWORD *)(v83 + 4) = v14;
          *(_WORD *)(v83 + 8) = 2082;
          id v84 = [v80 title];
          if (v84)
          {
            uint64_t v85 = v84;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
          }
          __swift_instantiateConcreteTypeFromMangledName(&_sSSSgMD_1);
          uint64_t v122 = String.init<A>(describing:)();
          *(void *)(v83 + 10) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v122, v123, &v132);

          swift_bridgeObjectRelease();
          *(_WORD *)(v83 + 18) = 2082;
          id v124 = [v80 identifiers];
          id v125 = [v124 description];
          uint64_t v126 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v128 = v127;

          *(void *)(v83 + 20) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v126, v128, &v132);
          swift_bridgeObjectRelease();
          os_log_type_t v101 = v82;
          unint64_t v102 = "Loader supportsLyrics=%{BOOL,public}d [not supported by subscription] subscriptionCapabilities.contains"
                 "(.catalogLyricsViewing)=false song.title=%{public}s song.identifiers=%{public}s";
          unint64_t v103 = v81;
          uint64_t v104 = (uint8_t *)v83;
          uint32_t v105 = 28;
        }
        else
        {
          if (one-time initialization token for lyrics != -1) {
            swift_once();
          }
          uint64_t v86 = type metadata accessor for Logger();
          __swift_project_value_buffer(v86, (uint64_t)static Logger.lyrics);
          id v87 = a1;
          id v3 = v3;
          id v81 = Logger.logObject.getter();
          os_log_type_t v88 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v81, v88))
          {

            return (uint64_t)v14;
          }
          uint64_t v89 = swift_slowAlloc();
          uint64_t v132 = swift_slowAlloc();
          *(_DWORD *)uint64_t v89 = 67241218;
          *(_DWORD *)(v89 + 4) = v14;
          *(_WORD *)(v89 + 8) = 1026;
          *(_DWORD *)(v89 + 10) = [v3 hasStoreLyrics];

          *(_WORD *)(v89 + 14) = 1026;
          static ApplicationCapabilities.shared.getter((uint64_t)&v134);
          uint64_t v90 = v136;
          swift_bridgeObjectRetain();
          outlined release of ApplicationCapabilities((uint64_t)&v134);
          char v91 = _sSh8containsySbxF9MusicCore23ApplicationCapabilitiesV7ServiceO_Tg5_0(2u, v90);
          swift_bridgeObjectRelease();
          *(_DWORD *)(v89 + 16) = v91 & 1;
          *(_WORD *)(v89 + 20) = 2082;
          id v92 = [v87 title];
          if (v92)
          {
            uint64_t v93 = v92;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
          }
          __swift_instantiateConcreteTypeFromMangledName(&_sSSSgMD_1);
          uint64_t v94 = String.init<A>(describing:)();
          *(void *)(v89 + 22) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v94, v95, &v132);

          swift_bridgeObjectRelease();
          *(_WORD *)(v89 + 30) = 2082;
          id v96 = [v87 identifiers];
          id v97 = [v96 description];
          uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v100 = v99;

          *(void *)(v89 + 32) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v98, v100, &v132);
          swift_bridgeObjectRelease();
          os_log_type_t v101 = v88;
          unint64_t v102 = "Loader supportsLyrics=%{BOOL,public}d [can't support store lyrics] lyrics.hasStoreLyrics=%{BOOL,public}"
                 "d allowsSubscriptionContent=%{BOOL,public}d song.title=%{public}s song.identifiers=%{public}s";
          unint64_t v103 = v81;
          uint64_t v104 = (uint8_t *)v89;
          uint32_t v105 = 40;
        }
        _os_log_impl((void *)&_mh_execute_header, v103, v101, v102, v104, v105);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return (uint64_t)v14;
      }
    }
    goto LABEL_48;
  }
LABEL_4:
  if (one-time initialization token for lyrics != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.lyrics);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    v133[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446466;
    id v9 = [v5 title];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v13 = 0;
    }
    uint64_t v134 = v11;
    uint64_t v135 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&_sSSSgMD_1);
    uint64_t v38 = String.init<A>(describing:)();
    *(void *)(v8 + 4) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v38, v39, v133);

    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2082;
    id v40 = [v5 identifiers];
    id v41 = [v40 description];
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v44 = v43;

    *(void *)(v8 + 14) = _s2os32getNullTerminatedUTF8PointerImpl_21storingStringOwnersInSVSS_SpyypGSgztF_2(v42, v44, v133);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Loader supportsLyrics=false [MPModelLyrics was nil] song.title=%{public}s song.identifiers=%{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_27:

    return 0;
  }

  return 0;
}

uint64_t sub_100319038()
{
  return swift_deallocObject();
}

uint64_t sub_100319048()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LyricsLoader.loadLyrics(for:completion:)(void *a1, uint64_t a2)
{
  return closure #1 in LyricsLoader.loadLyrics(for:completion:)(a1, a2, *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_10031908C()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for LyricsLoader()
{
  return self;
}

uint64_t type metadata accessor for LyricsLoader.Song()
{
  uint64_t result = type metadata singleton initialization cache for LyricsLoader.Song;
  if (!type metadata singleton initialization cache for LyricsLoader.Song) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined init with copy of LyricsLoader.Song(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LyricsLoader.Song();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in LyricsLoader.Song.modelObjectSong.getter(uint64_t a1)
{
  closure #1 in LyricsLoader.Song.modelObjectSong.getter(a1, *(void *)(v1 + 16));
}

void partial apply for closure #2 in LyricsLoader.Song.modelObjectSong.getter(void *a1)
{
  closure #2 in LyricsLoader.Song.modelObjectSong.getter(a1, *(void *)(v1 + 16));
}

uint64_t sub_100319180()
{
  return swift_deallocObject();
}

uint64_t destroy for LyricsLoader.Result(uint64_t a1)
{
  return outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for LyricsLoader.Result(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for LyricsLoader.Result(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Text.Storage(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8_1(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for LyricsLoader.Result(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of Text.Storage(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for LyricsLoader.Result()
{
  return &type metadata for LyricsLoader.Result;
}

unsigned char *storeEnumTagSinglePayload for LyricsLoader.LyricsError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003193D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LyricsLoader.LyricsError()
{
  return &type metadata for LyricsLoader.LyricsError;
}

char *initializeBufferWithCopyOfBuffer for LyricsLoader.Song(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    a1 = &v10[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      unsigned int v6 = *a2;
      uint64_t v7 = a2[1];
      *(void *)a1 = v6;
      *((void *)a1 + 1) = v7;
      char v8 = v6;
      id v9 = v7;
    }
    else
    {
      uint64_t v11 = type metadata accessor for Song();
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for LyricsLoader.Song(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {

    uint64_t v2 = *(void **)(a1 + 8);
  }
  else
  {
    uint64_t v3 = type metadata accessor for Song();
    unsigned int v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    v4(a1, v3);
  }
}

void *initializeWithCopy for LyricsLoader.Song(void *a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    unsigned int v4 = *(void **)a2;
    int v5 = *(void **)(a2 + 8);
    *a1 = v4;
    a1[1] = v5;
    id v6 = v4;
    id v7 = v5;
  }
  else
  {
    uint64_t v8 = type metadata accessor for Song();
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for LyricsLoader.Song(void **a1, void **a2)
{
  if (a1 != a2)
  {
    outlined destroy of LyricsLoader.Song((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      unsigned int v4 = *a2;
      *a1 = *a2;
      int v5 = a2[1];
      a1[1] = v5;
      id v6 = v4;
      id v7 = v5;
    }
    else
    {
      uint64_t v8 = type metadata accessor for Song();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of LyricsLoader.Song(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LyricsLoader.Song();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for LyricsLoader.Song(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for Song();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for LyricsLoader.Song(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of LyricsLoader.Song((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for Song();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for LyricsLoader.Song()
{
  uint64_t result = type metadata accessor for Song();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t _s8MusicKit4SongVACSeAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of (LyricsLoader.Song, LyricsLoader.Song)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (LyricsLoader.Song, LyricsLoader.Song));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void partial apply for closure #1 in closure #2 in LyricsLoader.Song.modelObjectSong.getter(void *a1)
{
}

uint64_t sub_100319A40()
{
  return swift_deallocObject();
}

uint64_t sub_100319A50()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in closure #1 in LyricsLoader.Song.modelObjectSong.getter(uint64_t a1)
{
  return partial apply for closure #3 in closure #1 in LyricsLoader.Song.modelObjectSong.getter(a1, (uint64_t (*)(uint64_t, uint64_t))closure #3 in closure #1 in LyricsLoader.Song.modelObjectSong.getter);
}

uint64_t sub_100319A7C()
{
  return swift_deallocObject();
}

uint64_t objectdestroy_86Tm()
{
  uint64_t v1 = type metadata accessor for Song();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in LyricsLoader.Song.modelObjectSong.getter(uint64_t a1)
{
  return partial apply for closure #3 in closure #1 in LyricsLoader.Song.modelObjectSong.getter(a1, (uint64_t (*)(uint64_t, uint64_t))closure #2 in closure #1 in LyricsLoader.Song.modelObjectSong.getter);
}

uint64_t partial apply for closure #3 in closure #1 in LyricsLoader.Song.modelObjectSong.getter(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for Song() - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a2(a1, v5);
}

uint64_t sub_100319BBC()
{
  return swift_deallocObject();
}

uint64_t sub_100319BCC()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

id partial apply for closure #1 in closure #1 in LyricsLoader.Song.modelObjectSong.getter(void *a1)
{
  return closure #1 in closure #1 in LyricsLoader.Song.modelObjectSong.getter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100319C0C()
{
  return swift_deallocObject();
}

uint64_t sub_100319C1C()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LyricsLoader.performStoreLyricsRequest(request:song:completion:)(void *a1, uint64_t a2)
{
  return closure #1 in LyricsLoader.performStoreLyricsRequest(request:song:completion:)(a1, a2, *(void *)(v2 + 16), (void *)(v2 + 24), *(void (**)(void, void, void, void))(v2 + 64), *(void *)(v2 + 72));
}

uint64_t partial apply for closure #2 in LyricsLoader.performStoreLyricsRequest(request:song:completion:)()
{
  return closure #2 in LyricsLoader.performStoreLyricsRequest(request:song:completion:)(*(void *)(v0 + 16), (void *)(v0 + 24), *(void **)(v0 + 64));
}

uint64_t sub_100319C7C()
{
  return swift_deallocObject();
}

uint64_t sub_100319C8C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in LyricsLoader.performStoreLyricsRequest(request:song:completion:)(void *a1, uint64_t a2)
{
  return closure #2 in closure #1 in LyricsLoader.performStoreLyricsRequest(request:song:completion:)(a1, a2, *(void **)(v2 + 16), *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48));
}

uint64_t sub_100319CE4()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 24);

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in LyricsLoader.performStoreLyricsRequest(request:song:completion:)()
{
  closure #1 in closure #1 in LyricsLoader.performStoreLyricsRequest(request:song:completion:)(*(void *)(v0 + 16), (void *)(v0 + 24));
}

uint64_t sub_100319D30()
{
  return swift_deallocObject();
}

uint64_t objectdestroyTm_8()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #1 in LyricsLoader.cancelRequest(with:)()
{
  closure #1 in LyricsLoader.cancelRequest(with:)(*(void ***)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100319D98()
{
  return swift_deallocObject();
}

uint64_t objectdestroy_149Tm()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<LyricsLoader.Result, Error>);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in LyricsLoader.loadLyrics(for:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  return closure #1 in closure #1 in LyricsLoader.loadLyrics(for:)(a1, a2, a3, a4);
}

uint64_t objectdestroy_117Tm_0()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 24);
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroy_123Tm()
{
  __swift_destroy_boxed_opaque_existential_0Tm(v0 + 24);

  return swift_deallocObject();
}

uint64_t sub_100319F68()
{
  return swift_deallocObject();
}

void SyncedLyricsLineView.SBS_TextContentView.TextView.specs.didset(uint64_t a1)
{
  uint64_t v2 = v1;
  memcpy(v7, &v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs], 0x219uLL);
  outlined retain of SyncedLyricsViewController.Specs((uint64_t)v7);
  LOBYTE(a1) = specialized static SyncedLyricsViewController.Specs.__derived_struct_equals(_:_:)((uint64_t)v7, a1);
  outlined release of SyncedLyricsViewController.Specs((uint64_t)v7);
  if ((a1 & 1) == 0)
  {
    SyncedLyricsLineView.SBS_TextContentView.TextView.invalidateVisualRepresentations(reason:)(0);
    [v2 bounds];
    SyncedLyricsLineView.SBS_TextContentView.TextView.prepareVisualRepresentations(size:)(v4);
    if (v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isSelected] == 1)
    {
      SyncedLyricsLineView.SBS_TextContentView.TextView.generateViewsFromVisualRepresentations()();
      uint64_t v5 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView;
      [*(id *)&v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView] removeFromSuperview];
      uint64_t v6 = *(void **)&v2[v5];
      *(void *)&v2[v5] = 0;
    }
    else
    {
      SyncedLyricsLineView.SBS_TextContentView.TextView.generateBasicView()();
      if (*(void *)&v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation])
      {
        swift_retain();
        SyncedLyricsLineView.Frame.destroyViews()();
        swift_release();
      }
    }
    SyncedLyricsLineView.SBS_TextContentView.TextView.setProgress(_:animated:)(*(Swift::Double *)&v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_progress], 0);
  }
}

Swift::Void __swiftcall SyncedLyricsLineView.SBS_TextContentView.TextView.setSelected(_:animated:)(Swift::Bool _, Swift::Bool animated)
{
  Swift::Bool v50 = _;
  if (v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isSelected] == _) {
    return;
  }
  uint64_t v3 = v2;
  v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isSelected] = v50;
  if (_)
  {
    SyncedLyricsLineView.SBS_TextContentView.TextView.generateViewsFromVisualRepresentations()();
    uint64_t v6 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView;
    [*(id *)&v3[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView] removeFromSuperview];
    id v7 = *(void **)&v3[v6];
    *(void *)&v3[v6] = 0;

    if (!animated) {
      return;
    }
  }
  else
  {
    if (!animated)
    {
      SyncedLyricsLineView.SBS_TextContentView.TextView.generateBasicView()();
      if (*(void *)&v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation])
      {
        swift_retain();
        SyncedLyricsLineView.Frame.destroyViews()();
        swift_release();
      }
      return;
    }
    type metadata accessor for UIMenu(0, (unint64_t *)&_sSo17OS_dispatch_queueCML_1);
    uint64_t v8 = (void *)static OS_dispatch_queue.main.getter();
    id v9 = objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", 1.0, 100.0, 18.0, 0.0, 0.0);
    [v9 settlingDuration];

    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v3;
    uint64_t v11 = v3;
    OS_dispatch_queue.asyncAfter(_:block:)((uint64_t)partial apply for closure #1 in SyncedLyricsLineView.SBS_TextContentView.TextView.setSelected(_:animated:), v10);

    swift_release();
  }
  if (!*(void *)&v3[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation]) {
    return;
  }
  uint64_t v12 = 240;
  if (v3[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_kind]) {
    uint64_t v12 = 264;
  }
  uint64_t v13 = *(void **)&v3[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs + v12];
  swift_retain();
  id v14 = [v13 CGColor];
  uint64_t v47 = &v3[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs];
  id v15 = [*(id *)&v3[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs + 248] CGColor];
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [self animationWithKeyPath:v16];

  CASpringAnimation.springParameters.setter(objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", 1.0, 100.0, 18.0, 0.0, 0.0));
  if (_) {
    id v18 = v15;
  }
  else {
    id v18 = v14;
  }
  uint64_t v46 = v14;
  if (_) {
    id v19 = v14;
  }
  else {
    id v19 = v15;
  }
  [v17 setFromValue:v18];
  id v48 = v19;
  uint64_t v49 = v17;
  [v17 setToValue:v19];
  unint64_t v20 = swift_bridgeObjectRetain();
  unint64_t v21 = (unint64_t)specialized Sequence.compactMap<A>(_:)(v20);
  swift_bridgeObjectRelease();
  id v45 = v15;
  if (v21 >> 62) {
    goto LABEL_40;
  }
  uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v22)
  {
    uint64_t v23 = 4;
    while (1)
    {
      uint64_t v24 = (v21 & 0xC000000000000001) != 0
          ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : (char *)*(id *)(v21 + 8 * v23);
      id v25 = v24;
      uint64_t v26 = v23 - 3;
      if (__OFADD__(v23 - 4, 1)) {
        break;
      }
      uint64_t v27 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_backgroundColorLayer;
      uint64_t v28 = *(void **)&v24[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_backgroundColorLayer];
      if (!v28) {
        goto LABEL_56;
      }
      id v29 = v28;
      NSString v30 = String._bridgeToObjectiveC()();
      objc_msgSend(v29, "addAnimation:forKey:", v49, v30, v45, v46);

      os_log_type_t v31 = *(void **)&v25[v27];
      if (!v31) {
        goto LABEL_57;
      }
      [v31 setBackgroundColor:v48];
      type metadata accessor for UIMenu(0, (unint64_t *)&_sSo6UIViewCML_0);
      id v32 = objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", 1.0, 100.0, 18.0, 0.0, 0.0);
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = v25;
      *(unsigned char *)(v33 + 24) = v50;
      uint64_t v34 = v25;
      static UIView.animate(withSpringTimingParameters:delay:options:animations:completion:)(v32, 0, partial apply for closure #2 in SyncedLyricsLineView.SBS_TextContentView.TextView.setSelected(_:animated:), v33, 0, 0, 0.0);

      swift_release();
      ++v23;
      if (v26 == v22) {
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_40:
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_26:
  swift_bridgeObjectRelease();
  unint64_t v35 = swift_bridgeObjectRetain();
  uint64_t v36 = specialized Sequence.flatMap<A>(_:)(v35);
  swift_bridgeObjectRelease();
  unint64_t v37 = (unint64_t)specialized Sequence.flatMap<A>(_:)((unint64_t)v36);
  swift_bridgeObjectRelease();
  if (v37 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v39 = v47;
    if (!v38) {
      goto LABEL_43;
    }
  }
  else
  {
    uint64_t v38 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t v39 = v47;
    if (!v38) {
      goto LABEL_43;
    }
  }
  if (v38 >= 1)
  {
    uint64_t v40 = 0;
    if ((v37 & 0xC000000000000001) == 0) {
      goto LABEL_31;
    }
LABEL_30:
    specialized _ArrayBuffer._getElementSlowPath(_:)();
    while (1)
    {
      memcpy(__dst, v39, 0x219uLL);
      outlined retain of SyncedLyricsViewController.Specs((uint64_t)__dst);
      specialized SyncedLyricsLineView.Syllable.resetLift(specs:)();
      outlined release of SyncedLyricsViewController.Specs((uint64_t)__dst);
      swift_release();
      if (v38 - 1 == v40) {
        break;
      }
      ++v40;
      if ((v37 & 0xC000000000000001) != 0) {
        goto LABEL_30;
      }
LABEL_31:
      swift_retain();
    }
LABEL_43:
    swift_bridgeObjectRelease();
    unint64_t v41 = swift_bridgeObjectRetain();
    unint64_t v42 = (unint64_t)specialized Sequence.flatMap<A>(_:)(v41);
    swift_bridgeObjectRelease();
    if (v42 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v43)
      {
LABEL_45:
        if (v43 >= 1)
        {
          for (uint64_t i = 0; i != v43; ++i)
          {
            if ((v42 & 0xC000000000000001) != 0) {
              specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              swift_retain();
            }
            SyncedLyricsLineView.Word.resetAnimation()();
            swift_release();
          }
          goto LABEL_52;
        }
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v43 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v43) {
        goto LABEL_45;
      }
    }
LABEL_52:

    swift_bridgeObjectRelease();
    swift_release();

    return;
  }
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
}

void closure #1 in SyncedLyricsLineView.SBS_TextContentView.TextView.setSelected(_:animated:)(uint64_t a1)
{
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isSelected) == 1)
  {
    SyncedLyricsLineView.SBS_TextContentView.TextView.generateViewsFromVisualRepresentations()();
    uint64_t v2 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView;
    [*(id *)(a1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView) removeFromSuperview];
    uint64_t v3 = *(void **)(a1 + v2);
    *(void *)(a1 + v2) = 0;
  }
  else
  {
    SyncedLyricsLineView.SBS_TextContentView.TextView.generateBasicView()();
    if (*(void *)(a1
                   + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation))
    {
      swift_retain();
      SyncedLyricsLineView.Frame.destroyViews()();
      swift_release();
    }
  }
}

void *specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  if (a1 >> 62)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      uint64_t v3 = 4;
      do
      {
        uint64_t v4 = v3 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v6 = v3 - 3;
          if (__OFADD__(v4, 1)) {
            goto LABEL_15;
          }
        }
        else
        {
          uint64_t v5 = *(void *)(a1 + 8 * v3);
          swift_retain();
          uint64_t v6 = v3 - 3;
          if (__OFADD__(v4, 1))
          {
LABEL_15:
            __break(1u);
            goto LABEL_16;
          }
        }
        id v7 = *(void **)(v5 + 72);
        id v8 = v7;
        swift_release();
        if (v7)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        ++v3;
      }
      while (v6 != v2);
    }
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *specialized Sequence.flatMap<A>(_:)(unint64_t a1)
{
  if (a1 >> 62)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      uint64_t v3 = 4;
      do
      {
        uint64_t v4 = v3 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v6 = v3 - 3;
          if (__OFADD__(v4, 1)) {
            goto LABEL_11;
          }
        }
        else
        {
          uint64_t v5 = *(void *)(a1 + 8 * v3);
          swift_retain();
          uint64_t v6 = v3 - 3;
          if (__OFADD__(v4, 1))
          {
LABEL_11:
            __break(1u);
            goto LABEL_12;
          }
        }
        unint64_t v7 = *(void *)(v5 + 72);
        swift_bridgeObjectRetain();
        swift_release();
        specialized Array.append<A>(contentsOf:)(v7);
        ++v3;
      }
      while (v6 != v2);
    }
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (a1 >> 62)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      uint64_t v3 = 4;
      do
      {
        uint64_t v4 = v3 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v6 = v3 - 3;
          if (__OFADD__(v4, 1)) {
            goto LABEL_11;
          }
        }
        else
        {
          uint64_t v5 = *(void *)(a1 + 8 * v3);
          swift_retain();
          uint64_t v6 = v3 - 3;
          if (__OFADD__(v4, 1))
          {
LABEL_11:
            __break(1u);
            goto LABEL_12;
          }
        }
        unint64_t v7 = *(void *)(v5 + 16);
        swift_bridgeObjectRetain();
        swift_release();
        specialized Array.append<A>(contentsOf:)(v7);
        ++v3;
      }
      while (v6 != v2);
    }
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (a1 >> 62)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      uint64_t v3 = 4;
      do
      {
        uint64_t v4 = v3 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v6 = v3 - 3;
          if (__OFADD__(v4, 1)) {
            goto LABEL_11;
          }
        }
        else
        {
          uint64_t v5 = *(void *)(a1 + 8 * v3);
          swift_retain();
          uint64_t v6 = v3 - 3;
          if (__OFADD__(v4, 1))
          {
LABEL_11:
            __break(1u);
            goto LABEL_12;
          }
        }
        unint64_t v7 = *(void *)(v5 + 88);
        swift_bridgeObjectRetain();
        swift_release();
        specialized Array.append<A>(contentsOf:)(v7);
        ++v3;
      }
      while (v6 != v2);
    }
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

Swift::Void __swiftcall SyncedLyricsLineView.SBS_TextContentView.TextView.setProgress(_:animated:)(Swift::Double _, Swift::Bool animated)
{
  uint64_t v3 = &v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs];
  double v4 = *(double *)&v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs + 336];
  double v5 = v4 + _;
  if (*(double *)&v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_progress] != v4 + _)
  {
    *(double *)&v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_progress] = v5;
    if (v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isSelected] == 1)
    {
      if (animated)
      {
        uint64_t v6 = *(void *)&v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation];
        if (!v6) {
          return;
        }
        char v7 = v3[40];
        uint64_t v8 = *((void *)v3 + 6);
        char v9 = v3[56];
        uint64_t v10 = *((void *)v3 + 8);
        char v11 = v3[72];
        uint64_t v12 = *((void *)v3 + 22);
        char v13 = v3[184];
        uint64_t v14 = *((void *)v3 + 26);
        uint64_t v15 = *((void *)v3 + 33);
        uint64_t v16 = *((void *)v3 + 34);
        uint64_t v17 = *((void *)v3 + 35);
        uint64_t v18 = *((void *)v3 + 40);
        uint64_t v19 = *((void *)v3 + 41);
        uint64_t v20 = *((void *)v3 + 43);
        uint64_t v21 = *((void *)v3 + 46);
        uint64_t v22 = *((void *)v3 + 47);
        uint64_t v23 = *((void *)v3 + 48);
        uint64_t v24 = *((void *)v3 + 49);
        uint64_t v25 = *((void *)v3 + 56);
        uint64_t v26 = *((void *)v3 + 57);
        uint64_t v27 = *((void *)v3 + 60);
        uint64_t v28 = *((void *)v3 + 61);
        uint64_t v29 = *((void *)v3 + 66);
        char v30 = v3[536];
        *(void *)&v45[0] = *(void *)v3;
        *(_OWORD *)((char *)v45 + 8) = *(_OWORD *)(v3 + 8);
        *(_OWORD *)((char *)&v45[1] + 8) = *(_OWORD *)(v3 + 24);
        BYTE8(v45[2]) = v7;
        *(void *)&v45[3] = v8;
        BYTE8(v45[3]) = v9;
        *(void *)&v45[4] = v10;
        BYTE8(v45[4]) = v11;
        long long v31 = *((_OWORD *)v3 + 6);
        v45[5] = *((_OWORD *)v3 + 5);
        v45[6] = v31;
        long long v32 = *((_OWORD *)v3 + 8);
        v45[7] = *((_OWORD *)v3 + 7);
        v45[8] = v32;
        long long v33 = *((_OWORD *)v3 + 10);
        v45[9] = *((_OWORD *)v3 + 9);
        v45[10] = v33;
        *(void *)&v45[11] = v12;
        BYTE8(v45[11]) = v13;
        v45[12] = *((_OWORD *)v3 + 12);
        *(_OWORD *)((char *)&v45[13] + 8) = *(_OWORD *)(v3 + 216);
        *(_OWORD *)((char *)&v45[14] + 8) = *(_OWORD *)(v3 + 232);
        *(_OWORD *)((char *)&v45[15] + 8) = *(_OWORD *)(v3 + 248);
        *(void *)&v45[13] = v14;
        *((void *)&v45[16] + 1) = v15;
        *(void *)&v45[17] = v16;
        *((void *)&v45[17] + 1) = v17;
        long long v34 = *((_OWORD *)v3 + 19);
        v45[18] = *((_OWORD *)v3 + 18);
        v45[19] = v34;
        *(void *)&v45[20] = v18;
        *((void *)&v45[20] + 1) = v19;
        *(double *)&v45[21] = v4;
        *((void *)&v45[21] + 1) = v20;
        v45[22] = *((_OWORD *)v3 + 22);
        *(void *)&v45[23] = v21;
        *((void *)&v45[23] + 1) = v22;
        *(void *)&v45[24] = v23;
        *((void *)&v45[24] + 1) = v24;
        long long v35 = *((_OWORD *)v3 + 26);
        v45[25] = *((_OWORD *)v3 + 25);
        v45[26] = v35;
        v45[27] = *((_OWORD *)v3 + 27);
        *(void *)&v45[28] = v25;
        *((void *)&v45[28] + 1) = v26;
        v45[29] = *((_OWORD *)v3 + 29);
        *(void *)&v45[30] = v27;
        *((void *)&v45[30] + 1) = v28;
        long long v36 = *((_OWORD *)v3 + 32);
        v45[31] = *((_OWORD *)v3 + 31);
        v45[32] = v36;
        *(void *)&v45[33] = v29;
        BYTE8(v45[33]) = v30;
        memcpy(__dst, v45, 0x219uLL);
        uint64_t v37 = v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_direction];
        unint64_t v38 = *(void *)(v6 + 24);
        if (!(v38 >> 62))
        {
          uint64_t v39 = *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_retain();
          outlined retain of SyncedLyricsViewController.Specs((uint64_t)v45);
          swift_bridgeObjectRetain();
          if (v39)
          {
LABEL_7:
            if (v39 < 1)
            {
              __break(1u);
              return;
            }
            for (uint64_t i = 0; i != v39; ++i)
            {
              if ((v38 & 0xC000000000000001) != 0) {
                specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                swift_retain();
              }
              SyncedLyricsLineView.Line.animate(progress:specs:direction:)((uint64_t)__dst, v37, v5);
              swift_release();
            }
          }
LABEL_16:
          swift_bridgeObjectRelease();
          outlined release of SyncedLyricsViewController.Specs((uint64_t)v45);
          swift_release();
          return;
        }
      }
      else
      {
        uint64_t v37 = self;
        uint64_t v41 = swift_allocObject();
        *(void *)(v41 + 16) = v2;
        *(double *)(v41 + 24) = v5;
        unint64_t v38 = swift_allocObject();
        *(void *)(v38 + 16) = partial apply for closure #1 in SyncedLyricsLineView.SBS_TextContentView.TextView.setProgress(_:animated:);
        *(void *)(v38 + 24) = v41;
        __dst[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
        __dst[5] = v38;
        __dst[0] = _NSConcreteStackBlock;
        __dst[1] = 1107296256;
        __dst[2] = thunk for @escaping @callee_guaranteed () -> ();
        __dst[3] = &block_descriptor_52;
        unint64_t v42 = _Block_copy(__dst);
        uint64_t v43 = v2;
        swift_retain();
        swift_release();
        [(id)v37 performWithoutAnimation:v42];
        _Block_release(v42);
        char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
        swift_release();
        swift_release();
        if ((isEscapingClosureAtFileLocation & 1) == 0) {
          return;
        }
        __break(1u);
      }
      swift_retain();
      outlined retain of SyncedLyricsViewController.Specs((uint64_t)v45);
      swift_bridgeObjectRetain();
      uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
      if (v39) {
        goto LABEL_7;
      }
      goto LABEL_16;
    }
  }
}

uint64_t closure #1 in SyncedLyricsLineView.SBS_TextContentView.TextView.setProgress(_:animated:)(uint64_t result, double a2)
{
  uint64_t v2 = *(void *)(result
                 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation);
  if (v2)
  {
    uint64_t v4 = result;
    memcpy(v9, (const void *)(result + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs), 0x219uLL);
    uint64_t v5 = *(unsigned __int8 *)(v4
                            + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_direction);
    unint64_t v6 = *(void *)(v2 + 24);
    if (v6 >> 62)
    {
      swift_retain();
      outlined retain of SyncedLyricsViewController.Specs((uint64_t)v9);
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v7 = result;
      if (result) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
      outlined retain of SyncedLyricsViewController.Specs((uint64_t)v9);
      uint64_t result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_4:
        if (v7 < 1)
        {
          __break(1u);
          return result;
        }
        for (uint64_t i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0) {
            specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            swift_retain();
          }
          SyncedLyricsLineView.Line.animate(progress:specs:direction:)((uint64_t)v9, v5, a2);
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    outlined release of SyncedLyricsViewController.Specs((uint64_t)v9);
    return swift_release();
  }
  return result;
}

id SyncedLyricsLineView.SBS_TextContentView.TextView.update(text:words:alignment:direction:capabilities:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v7 = v6;
  char v11 = &v7[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_text];
  char v12 = a5 & 1;
  *char v11 = a1;
  v11[1] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_words] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v7[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_alignment] = a4;
  v7[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_direction] = v12;
  *(void *)&v7[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_capabilities] = a6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  SyncedLyricsLineView.SBS_TextContentView.TextView.invalidateVisualRepresentations(reason:)(0);
  [v7 bounds];
  SyncedLyricsLineView.SBS_TextContentView.TextView.prepareVisualRepresentations(size:)(v13);
  if (v7[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isSelected] == 1)
  {
    SyncedLyricsLineView.SBS_TextContentView.TextView.generateViewsFromVisualRepresentations()();
    uint64_t v14 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView;
    [*(id *)&v7[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView] removeFromSuperview];
    uint64_t v15 = *(void **)&v7[v14];
    *(void *)&v7[v14] = 0;
  }
  else
  {
    SyncedLyricsLineView.SBS_TextContentView.TextView.generateBasicView()();
    if (*(void *)&v7[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation])
    {
      swift_retain();
      SyncedLyricsLineView.Frame.destroyViews()();
      swift_release();
    }
  }
  [v7 setNeedsLayout];

  return [v7 layoutIfNeeded];
}

id SyncedLyricsLineView.SBS_TextContentView.TextView.init(text:words:specs:kind:alignment:direction:capabilities:)(uint64_t a1, uint64_t a2, uint64_t a3, void *__src, char a5, uint64_t a6, char a7, uint64_t a8)
{
  char v14 = a5 & 1;
  v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isScrolling] = 1;
  v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isSelected] = 0;
  uint64_t v15 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_progress;
  *(void *)&v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_progress] = 0;
  *(void *)&v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_framesetter] = 0;
  char v16 = a7 & 1;
  *(void *)&v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation] = 0;
  *(void *)&v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView] = 0;
  memcpy(&v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs], __src, 0x219uLL);
  *(void *)&v8[v15] = 0;
  uint64_t v17 = &v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_text];
  void *v17 = a1;
  v17[1] = a2;
  *(void *)&v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_words] = a3;
  v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_kind] = v14;
  *(void *)&v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_alignment] = a6;
  v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_direction] = v16;
  *(void *)&v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_capabilities] = a8;
  v19.receiver = v8;
  v19.super_class = (Class)type metadata accessor for SyncedLyricsLineView.SBS_TextContentView.TextView();
  return objc_msgSendSuper2(&v19, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

Swift::Void __swiftcall SyncedLyricsLineView.SBS_TextContentView.TextView.layoutSubviews()()
{
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for SyncedLyricsLineView.SBS_TextContentView.TextView();
  objc_msgSendSuper2(&v6, "layoutSubviews");
  uint64_t v1 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation;
  if (*(void *)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation])
  {
    swift_retain();
    SyncedLyricsLineView.Frame.destroyViews()();
    swift_release();
  }
  *(void *)&v0[v1] = 0;
  swift_release();
  uint64_t v2 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView;
  [*(id *)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView] removeFromSuperview];
  uint64_t v3 = *(void **)&v0[v2];
  *(void *)&v0[v2] = 0;

  [v0 bounds];
  SyncedLyricsLineView.SBS_TextContentView.TextView.prepareVisualRepresentations(size:)(v4);
  if (v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isSelected] == 1)
  {
    SyncedLyricsLineView.SBS_TextContentView.TextView.generateViewsFromVisualRepresentations()();
    [*(id *)&v0[v2] removeFromSuperview];
    uint64_t v5 = *(void **)&v0[v2];
    *(void *)&v0[v2] = 0;
  }
  else
  {
    SyncedLyricsLineView.SBS_TextContentView.TextView.generateBasicView()();
    if (*(void *)&v0[v1])
    {
      swift_retain();
      SyncedLyricsLineView.Frame.destroyViews()();
      swift_release();
    }
  }
  SyncedLyricsLineView.SBS_TextContentView.TextView.setProgress(_:animated:)(*(Swift::Double *)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_progress], 0);
}

double SyncedLyricsLineView.SBS_TextContentView.TextView.frameAndSizeThatFits(_:)(double a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_text);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_text + 8);
  swift_bridgeObjectRetain();
  LOBYTE(v3) = String.containsExcessiveHeightCharacters.getter(v3, v4);
  swift_bridgeObjectRelease();
  if (v3)
  {
    uint64_t v36 = 32;
    char v35 = NSTextAlignment.ctTextAlignment.getter(*(void *)(v1
                                                           + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_alignment));
    v37.spec = kCTParagraphStyleSpecifierLineBoundsOptions;
    v37.valueSize = 8;
    v37.Swift::Int value = &v36;
    int v38 = 0;
    uint64_t v39 = 1;
    uint64_t v40 = &v35;
    CTParagraphStyleRef v5 = CTParagraphStyleCreate(&v37, 2uLL);
    type metadata accessor for CTParagraphStyleRef(0);
  }
  else
  {
    CTParagraphStyleRef v5 = (CTParagraphStyleRef)[objc_allocWithZone((Class)NSMutableParagraphStyle) init];
    [(__CTParagraphStyle *)v5 setAlignment:*(void *)(v1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_alignment)];
    uint64_t v7 = v1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs;
    if ((*(unsigned char *)(v1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs + 184) & 1) == 0)
    {
      double v8 = *(double *)(v7 + 176);
      uint64_t v9 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_kind;
      if (*(unsigned char *)(v1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_kind)) {
        uint64_t v10 = 192;
      }
      else {
        uint64_t v10 = 168;
      }
      [*(id *)(v7 + v10) ascender];
      if (*(unsigned char *)(v1 + v9)) {
        uint64_t v12 = 192;
      }
      else {
        uint64_t v12 = 168;
      }
      double v13 = v8 - v11;
      [*(id *)(v7 + v12) descender];
      [(__CTParagraphStyle *)v5 setLineSpacing:v13 + v14];
    }
    uint64_t v6 = type metadata accessor for UIMenu(0, &_sSo23NSMutableParagraphStyleCML_0);
  }
  v41[3] = v6;
  v41[0] = v5;
  __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCySo21NSAttributedStringKeya_yptGMD_0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100493D00;
  *(void *)(inited + 32) = NSFontAttributeName;
  uint64_t v16 = 168;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_kind)) {
    uint64_t v16 = 192;
  }
  uint64_t v17 = *(void **)(v1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs + v16);
  uint64_t v18 = type metadata accessor for UIMenu(0, (unint64_t *)&_sSo6UIFontCML_0);
  *(void *)(inited + 40) = v17;
  *(void *)(inited + 64) = v18;
  *(void *)(inited + 72) = NSParagraphStyleAttributeName;
  outlined init with copy of Any((uint64_t)v41, inited + 80);
  swift_bridgeObjectRetain();
  objc_super v19 = NSFontAttributeName;
  id v20 = v17;
  uint64_t v21 = NSParagraphStyleAttributeName;
  _sSD17dictionaryLiteralSDyxq_Gx_q_td_tcfCSo21NSAttributedStringKeya_ypTgm5_0(inited);
  id v22 = objc_allocWithZone((Class)NSAttributedString);
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  _sSo21NSAttributedStringKeyaMa_1(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CFAttributedStringRef v25 = (const __CFAttributedString *)[v22 initWithString:v23 attributes:isa];

  uint64_t v26 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_framesetter;
  uint64_t v27 = *(void **)(v1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_framesetter);
  if (v27)
  {
    uint64_t v28 = *(const __CTFramesetter **)(v1
                                    + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_framesetter);
  }
  else
  {
    CTFramesetterRef v29 = CTFramesetterCreateWithAttributedString(v25);
    char v30 = *(void **)(v1 + v26);
    *(void *)(v1 + v26) = v29;
    uint64_t v28 = v29;

    uint64_t v27 = 0;
  }
  id v31 = v27;
  double v32 = CTFramesetterRef.suggestedFrameSize(constraints:)(a1, INFINITY);
  CTFramesetterRef.createFrame(_:)(0.0, 0.0, v32, v33);

  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v41);
  return v32;
}

void SyncedLyricsLineView.SBS_TextContentView.TextView.prepareVisualRepresentations(size:)(double a1)
{
  uint64_t v2 = v1;
  [v1 bounds];
  if (CGRectGetHeight(v16) != 0.0)
  {
    uint64_t v4 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation;
    if (!*(void *)&v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation])
    {
      double v5 = SyncedLyricsLineView.SBS_TextContentView.TextView.frameAndSizeThatFits(_:)(a1);
      uint64_t v7 = v6;
      double v8 = v5;
      uint64_t v10 = v9;
      char v12 = v11;
      swift_bridgeObjectRetain();
      CTFrameRef.linesWithFrames(flippedCoordinates:useExtendedLineBounds:)(1, v12 & 1);
      uint64_t v13 = __chkstk_darwin();
      double v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo9CTLineRefa4line_So6CGRectV5frametG_11MusicCoreUI20SyncedLyricsLineViewC0N0Cs5NeverOTg505_sSo9d7RefaSo6g3V11ij4UI20lmno32C0I0CIggyo_AB4line_AD5frametAIs5P11OIegnrzr_TRAgjQIggyo_Tf1cn_nTf4ng_n(v13, (void (*)(double, double, double, double))partial apply for closure #1 in SyncedLyricsLineView.SBS_TextContentView.TextView.prepareVisualRepresentations(size:));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for SyncedLyricsLineView.Frame();
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 64) = 0;
      *(unsigned char *)(v15 + 72) = 2;
      *(void *)(v15 + 80) = 0;
      *(void *)(v15 + 16) = v7;
      *(void *)(v15 + 24) = v14;
      *(void *)(v15 + 32) = 0;
      *(void *)(v15 + 40) = 0;
      *(double *)(v15 + 48) = v8;
      *(void *)(v15 + 56) = v10;
      *(void *)&v2[v4] = v15;
      swift_release();
    }
  }
}

uint64_t closure #1 in SyncedLyricsLineView.SBS_TextContentView.TextView.prepareVisualRepresentations(size:)(void *a1, void *a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, char a9)
{
  CGRect v16 = CTLineRef.glyphRuns.getter();
  id v17 = a2;
  uint64_t v18 = specialized Sequence.flatMap<A>(_:)((unint64_t)v16, (uint64_t)v17);
  swift_bridgeObjectRelease();

  objc_super v19 = specialized Sequence.compactMap<A>(_:)((uint64_t)v18, (uint64_t (*)(void *, id, uint64_t, uint64_t))partial apply for closure #2 in closure #1 in SyncedLyricsLineView.SBS_TextContentView.TextView.prepareVisualRepresentations(size:));
  swift_bridgeObjectRelease();
  type metadata accessor for SyncedLyricsLineView.Line();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 72) = 0;
  *(unsigned char *)(v20 + 80) = 0;
  *(void *)(v20 + 88) = 0;
  *(void *)(v20 + 16) = v19;
  *(void *)(v20 + 24) = a1;
  *(double *)(v20 + 40) = a3;
  *(double *)(v20 + 48) = a4;
  *(double *)(v20 + 56) = a5;
  *(double *)(v20 + 64) = a6;
  *(unsigned char *)(v20 + 32) = a9;
  id v21 = a1;
  return v20;
}

Swift::Int closure #2 in closure #1 in SyncedLyricsLineView.SBS_TextContentView.TextView.prepareVisualRepresentations(size:)(long long *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  CTRunRef.cfStringRange.getter();
  v20.Swift::Int location = specialized Lyrics.Word.range.getter(*((void *)a1 + 2));
  __C::_NSRange_optional v22 = _NSRange.intersection(_:)(v20);
  Swift::Int location = v22.value.location;
  v22.value.Swift::Int location = 0;
  if (!v22.is_nil)
  {
    Swift::Int length = v22.value.length;
    if (v22.value.length >= 1)
    {
      Range<>.init(_:in:)();
      if ((v24 & 1) == 0)
      {
        char v25 = CTRunRef.status.getter();
        v22.value.Swift::Int location = location;
        if (v25)
        {
          Swift::Int v26 = location + length;
          if (__OFADD__(location, length))
          {
LABEL_23:
            __break(1u);
            goto LABEL_24;
          }
          v22.value.Swift::Int location = v26 - 1;
          if (__OFSUB__(v26, 1))
          {
LABEL_24:
            __break(1u);
            goto LABEL_25;
          }
        }
        uint64_t v27 = specialized Collection<>.firstIndex(of:)(v22.value.location, a4);
        if ((v28 & 1) == 0) {
          goto LABEL_16;
        }
        char v29 = CTRunRef.status.getter();
        v22.value.Swift::Int location = location;
        if (v29)
        {
          Swift::Int v30 = location + length;
          if (__OFADD__(location, length))
          {
LABEL_25:
            __break(1u);
            goto LABEL_26;
          }
          v22.value.Swift::Int location = v30 - 2;
          if (__OFSUB__(v30, 2))
          {
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        uint64_t v27 = specialized Collection<>.firstIndex(of:)(v22.value.location, a4);
        if ((v31 & 1) == 0) {
          goto LABEL_16;
        }
        char v32 = CTRunRef.status.getter();
        v22.value.Swift::Int location = location;
        if (v32)
        {
          Swift::Int v33 = location + length;
          if (__OFADD__(location, length))
          {
LABEL_27:
            __break(1u);
            goto LABEL_28;
          }
          v22.value.Swift::Int location = v33 - 3;
          if (__OFSUB__(v33, 3))
          {
LABEL_28:
            __break(1u);
            return v22.value.location;
          }
        }
        uint64_t v27 = specialized Collection<>.firstIndex(of:)(v22.value.location, a4);
        if ((v34 & 1) == 0)
        {
LABEL_16:
          unint64_t v35 = v27;
          v22.value.Swift::Int location = String.subscript.getter();
          if ((v35 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v35 < *(void *)(a3 + 16))
          {
            double v36 = *(double *)(a3 + 16 * v35 + 32);
            v37.Swift::Int location = location;
            v37.Swift::Int length = length;
            __C::_NSRange v49 = CTRunRef.convertToGlyphRange(textRange:)(v37);
            double v38 = CTRunRef.typographicBounds(range:)((CFRange)v49);
            v50.origin.CGFloat x = a7;
            v50.origin.CGFloat y = a8;
            v50.size.CGFloat width = a9;
            v50.size.height = a10;
            CGFloat Height = CGRectGetHeight(v50);
            id v40 = a2;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v41 = swift_bridgeObjectRetain();
            unint64_t v42 = specialized Sequence.compactMap<A>(_:)(v41, v40, a5, a6, a4, a3, v36, a7, a8, a9, a10);
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            long long v48 = *a1;
            swift_bridgeObjectRetain();
            outlined retain of String?((uint64_t)&v48);
            uint64_t v43 = static String._fromSubstring(_:)();
            uint64_t v45 = v44;
            swift_bridgeObjectRelease();
            type metadata accessor for SyncedLyricsLineView.Word();
            v22.value.Swift::Int location = swift_allocObject();
            *(unsigned char *)(v22.value.location + 88) = 2;
            *(void *)(v22.value.location + 128) = 0;
            *(void *)(v22.value.location + 136) = 0;
            long long v46 = a1[1];
            *(_OWORD *)(v22.value.location + 16) = *a1;
            *(_OWORD *)(v22.value.location + 32) = v46;
            *(unsigned char *)(v22.value.location + 48) = *((unsigned char *)a1 + 32);
            *(void *)(v22.value.location + 56) = v43;
            *(void *)(v22.value.location + 64) = v45;
            *(void *)(v22.value.location + 72) = v42;
            *(void *)(v22.value.location + 80) = 0;
            *(double *)(v22.value.location + 96) = v36;
            *(void *)(v22.value.location + 104) = 0;
            *(double *)(v22.value.location + 112) = v38;
            *(CGFloat *)(v22.value.location + 120) = Height;
            return v22.value.location;
          }
          __break(1u);
          goto LABEL_23;
        }
      }
      v22.value.Swift::Int location = 0;
    }
  }
  return v22.value.location;
}

Swift::Int closure #1 in closure #2 in closure #1 in SyncedLyricsLineView.SBS_TextContentView.TextView.prepareVisualRepresentations(size:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, Swift::Int *a7@<X8>, double a8@<D0>, CGFloat a9@<D1>, CGFloat a10@<D2>, CGFloat a11@<D3>, CGFloat a12@<D4>)
{
  uint64_t v23 = *a1;
  uint64_t v22 = a1[1];
  Swift::Int v24 = a1[4];
  uint64_t v58 = a1[3];
  uint64_t v59 = a1[2];
  Swift::Int v25 = a1[5];
  uint64_t v56 = a1[6];
  CTRunRef.cfStringRange.getter();
  Swift::Int v57 = v24;
  v26.Swift::Int location = v24;
  v26.Swift::Int length = v25;
  __C::_NSRange_optional v28 = _NSRange.intersection(_:)(v26);
  Swift::Int location = v28.value.location;
  v28.value.Swift::Int location = 0;
  if (v28.is_nil) {
    goto LABEL_20;
  }
  Swift::Int length = v28.value.length;
  if (v28.value.length < 1) {
    goto LABEL_20;
  }
  Range<>.init(_:in:)();
  if (v30)
  {
    v28.value.Swift::Int location = 0;
    goto LABEL_20;
  }
  char v31 = CTRunRef.status.getter();
  v28.value.Swift::Int location = location;
  if (v31)
  {
    Swift::Int v32 = location + length;
    if (__OFADD__(location, length))
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v28.value.Swift::Int location = v32 - 1;
    if (__OFSUB__(v32, 1))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
  }
  uint64_t v33 = specialized Collection<>.firstIndex(of:)(v28.value.location, a5);
  if (v34)
  {
    char v35 = CTRunRef.status.getter();
    v28.value.Swift::Int location = location;
    if (v35)
    {
      Swift::Int v36 = location + length;
      if (__OFADD__(location, length))
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      v28.value.Swift::Int location = v36 - 2;
      if (__OFSUB__(v36, 2))
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    uint64_t v33 = specialized Collection<>.firstIndex(of:)(v28.value.location, a5);
    if (v37)
    {
      char v38 = CTRunRef.status.getter();
      v28.value.Swift::Int location = location;
      if (v38)
      {
        Swift::Int v39 = location + length;
        if (__OFADD__(location, length))
        {
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        v28.value.Swift::Int location = v39 - 3;
        if (__OFSUB__(v39, 3))
        {
LABEL_29:
          __break(1u);
          return v28.value.location;
        }
      }
      uint64_t v33 = specialized Collection<>.firstIndex(of:)(v28.value.location, a5);
      if (v40)
      {
        v28.value.Swift::Int location = 0;
        goto LABEL_20;
      }
    }
  }
  unint64_t v41 = v33;
  v28.value.Swift::Int location = String.subscript.getter();
  if ((v41 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v41 >= *(void *)(a6 + 16))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  double v42 = *(double *)(a6 + 16 * v41 + 32);
  v43.Swift::Int location = location;
  v43.Swift::Int length = length;
  __C::_NSRange v61 = CTRunRef.convertToGlyphRange(textRange:)(v43);
  double v55 = CTRunRef.typographicBounds(range:)((CFRange)v61);
  double v54 = v42 - a8;
  v62.origin.CGFloat x = a9;
  v62.origin.CGFloat y = a10;
  v62.size.CGFloat width = a11;
  v62.size.height = a12;
  CGFloat Height = CGRectGetHeight(v62);
  v45.Swift::Int location = location;
  v45.Swift::Int length = length;
  __C::_NSRange v46 = CTRunRef.convertToGlyphRange(textRange:)(v45);
  swift_bridgeObjectRetain();
  id v47 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSo8_NSRangeV_11MusicCoreUI20SyncedLyricsLineViewC5GlyphCs5NeverOTg504_s11ef4UI20hijk24C015SBS_TextContentG0C0it211C28prepareVisualRepresentations33_64DA36602EA3665D89B33D572EA4B8F04sizeySo6CGSizeV_tFAC0F0CSo9CTLineRefa_So6CGRectVtXEfU_AC4WordCSgAA0E0CASV_So05CTRunY0aSaySo7CGPointVGSaySiGtXEfU0_AC8SyllableCSgAWA3_VXEfU_AC5L8CSiXEfU_SaySo7CGPointVGSo8CTRunRefa0F8Graphics7CGFloatVSo6CGRectVSSSaySiGTf1cn_nTf4nggnngg_n(a8, a9, a10, a11, a12, v46.location, v46.length, a6, (uint64_t)v47, a3, a4, a5);
  uint64_t v49 = v48;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v50 = static String._fromSubstring(_:)();
  uint64_t v52 = v51;
  swift_bridgeObjectRelease();
  type metadata accessor for SyncedLyricsLineView.Syllable();
  v28.value.Swift::Int location = swift_allocObject();
  *(void *)(v28.value.location + 88) = v49;
  *(void *)(v28.value.location + 96) = 0;
  *(unsigned char *)(v28.value.location + 104) = 2;
  *(void *)(v28.value.location + 144) = 0;
  *(void *)(v28.value.location + 16) = v23;
  *(void *)(v28.value.location + 24) = v22;
  *(void *)(v28.value.location + 32) = v59;
  *(void *)(v28.value.location + 40) = v58;
  *(void *)(v28.value.location + 48) = v57;
  *(void *)(v28.value.location + 56) = v25;
  *(void *)(v28.value.location + 64) = v56;
  *(void *)(v28.value.location + 72) = v50;
  *(void *)(v28.value.location + 80) = v52;
  *(double *)(v28.value.location + 112) = v54;
  *(void *)(v28.value.location + 120) = 0;
  *(double *)(v28.value.location + 128) = v55;
  *(CGFloat *)(v28.value.location + 136) = Height;
LABEL_20:
  *a7 = v28.value.location;
  return v28.value.location;
}

void SyncedLyricsLineView.SBS_TextContentView.TextView.invalidateVisualRepresentations(reason:)(char a1)
{
  uint64_t v2 = v1;
  if ((a1 & 1) == 0)
  {
    uint64_t v3 = *(void **)(v1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_framesetter);
    *(void *)(v1 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_framesetter) = 0;
  }
  uint64_t v4 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation;
  if (*(void *)(v1
                 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation))
  {
    swift_retain();
    SyncedLyricsLineView.Frame.destroyViews()();
    swift_release();
  }
  *(void *)(v1 + v4) = 0;
  swift_release();
  uint64_t v5 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView;
  [*(id *)(v2 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView) removeFromSuperview];
  uint64_t v6 = *(void **)(v2 + v5);
  *(void *)(v2 + v5) = 0;
}

void SyncedLyricsLineView.SBS_TextContentView.TextView.generateBasicView()()
{
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation];
  if (v1)
  {
    uint64_t v2 = v0;
    uint64_t v3 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView;
    if (!*(void *)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView])
    {
      uint64_t v4 = *(void **)(v1 + 16);
      double v5 = *(double *)(v1 + 48);
      double v6 = *(double *)(v1 + 56);
      id v7 = objc_allocWithZone((Class)type metadata accessor for CTLabel.Frame());
      id v8 = v4;
      swift_retain();
      id v9 = CTLabel.Frame.init(ctFrame:suggestedSize:colorOverride:)(v8, 0, v5, v6);
      [v9 setOpaque:0];
      uint64_t v10 = *(void *)&v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_alignment];
      if (v10 == 1)
      {
        id v15 = v9;
        [v2 bounds];
        double v13 = (v16 - v5) * 0.5;
        double v14 = 0.0;
      }
      else if (v10 == 2)
      {
        id v11 = v9;
        [v2 bounds];
        double v13 = v12 - v5;
        double v14 = 0.0;
      }
      else
      {
        id v17 = v9;
        [v2 bounds];
        objc_msgSend(v17, "setFrame:");

        [v17 frame];
        double v5 = v18;
        double v6 = v19 + 20.0;
      }
      objc_msgSend(v9, "setFrame:", v13, v14, v5, v6);

      [v2 bounds];
      id v24 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", v20, v21, v22, v23);
      [v24 frame];
      objc_msgSend(v24, "setFrame:");
      [v24 setBackgroundColor:*(void *)&v2[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs + 248]];
      [v24 setMaskView:v9];
      [v2 addSubview:v24];
      id v25 = *(id *)&v2[v3];
      *(void *)&v2[v3] = v24;
      swift_release();
    }
  }
}

void SyncedLyricsLineView.SBS_TextContentView.TextView.generateViewsFromVisualRepresentations()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation];
  if (v2 && !*(void *)(v2 + 80))
  {
    char v3 = v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_kind];
    uint64_t v4 = (void **)&v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs];
    uint64_t v5 = 21;
    if (v3) {
      uint64_t v5 = 24;
    }
    double v6 = v4[v5];
    id v7 = v4 + 33;
    if ((v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_kind] & 1) == 0) {
      id v7 = v4 + 30;
    }
    if (v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isSelected] == 1) {
      id v8 = v7;
    }
    else {
      id v8 = v4 + 31;
    }
    id v9 = *v8;
    memcpy(v26, v4, 0x219uLL);
    uint64_t v10 = *(void *)&v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_capabilities];
    BOOL v11 = !specialized Sequence<>.contains(_:)(1, v10) && !specialized Sequence<>.contains(_:)(2, v10);
    char v12 = v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_direction];
    swift_retain();
    id v13 = v6;
    id v14 = v9;
    outlined retain of SyncedLyricsViewController.Specs((uint64_t)v26);
    id v15 = (void *)SyncedLyricsLineView.Frame.createView(font:color:kind:specs:lineSimpleRender:lineDirection:)(v13, v14, v3, v26, v11, v12);
    outlined release of SyncedLyricsViewController.Specs((uint64_t)v26);
    swift_release();

    uint64_t v16 = *(void *)&v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_alignment];
    if (v16 == 1)
    {
      id v22 = v15;
      [v1 bounds];
      double v24 = v23;
      [v22 bounds];
      double v21 = (v24 - v25) * 0.5;
    }
    else
    {
      if (v16 != 2)
      {
LABEL_18:
        [v1 addSubview:v15];

        return;
      }
      id v17 = v15;
      [v1 bounds];
      double v19 = v18;
      [v17 bounds];
      double v21 = v19 - v20;
    }
    [v15 frame];
    [v15 setFrame:v21];

    goto LABEL_18;
  }
}

id SyncedLyricsLineView.SBS_TextContentView.TextView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SyncedLyricsLineView.SBS_TextContentView.TextView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SyncedLyricsLineView.SBS_TextContentView.TextView()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for SyncedLyricsLineView.SBS_TextContentView.TextView.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10031CA50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SyncedLyricsLineView.SBS_TextContentView.TextView.Kind()
{
  return &type metadata for SyncedLyricsLineView.SBS_TextContentView.TextView.Kind;
}

unint64_t lazy protocol witness table accessor for type SyncedLyricsLineView.SBS_TextContentView.TextView.Kind and conformance SyncedLyricsLineView.SBS_TextContentView.TextView.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type SyncedLyricsLineView.SBS_TextContentView.TextView.Kind and conformance SyncedLyricsLineView.SBS_TextContentView.TextView.Kind;
  if (!lazy protocol witness table cache variable for type SyncedLyricsLineView.SBS_TextContentView.TextView.Kind and conformance SyncedLyricsLineView.SBS_TextContentView.TextView.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SyncedLyricsLineView.SBS_TextContentView.TextView.Kind and conformance SyncedLyricsLineView.SBS_TextContentView.TextView.Kind);
  }
  return result;
}

uint64_t outlined retain of SyncedLyricsViewController.Specs(uint64_t a1)
{
  objc_super v2 = *(void **)(a1 + 192);
  int v3 = *(void **)(a1 + 200);
  unsigned int v4 = *(void **)(a1 + 208);
  uint64_t v5 = *(void **)(a1 + 232);
  unsigned int v6 = *(void **)(a1 + 240);
  id v8 = *(void **)(a1 + 248);
  id v7 = *(void **)(a1 + 256);
  id v9 = *(void **)(a1 + 264);
  uint64_t v10 = *(void **)(a1 + 272);
  uint64_t v27 = *(void **)(a1 + 328);
  __C::_NSRange_optional v28 = *(void **)(a1 + 344);
  char v29 = *(void **)(a1 + 376);
  char v30 = *(void **)(a1 + 384);
  char v31 = *(void **)(a1 + 456);
  id v11 = *(id *)(a1 + 168);
  id v12 = v2;
  id v13 = v3;
  id v14 = v4;
  id v15 = v5;
  id v16 = v6;
  id v17 = v8;
  id v18 = v7;
  id v19 = v9;
  id v20 = v10;
  id v21 = v27;
  id v22 = v28;
  id v23 = v29;
  id v24 = v30;
  id v25 = v31;
  return a1;
}

uint64_t outlined release of SyncedLyricsViewController.Specs(uint64_t a1)
{
  id v15 = *(void **)(a1 + 192);
  id v16 = *(void **)(a1 + 168);
  id v13 = *(void **)(a1 + 208);
  id v14 = *(void **)(a1 + 200);
  objc_super v2 = *(void **)(a1 + 240);
  id v12 = *(void **)(a1 + 232);
  int v3 = *(void **)(a1 + 248);
  unsigned int v4 = *(void **)(a1 + 256);
  unsigned int v6 = *(void **)(a1 + 264);
  uint64_t v5 = *(void **)(a1 + 272);
  id v7 = *(void **)(a1 + 328);
  id v8 = *(void **)(a1 + 344);
  id v9 = *(void **)(a1 + 376);
  uint64_t v10 = *(void **)(a1 + 384);

  return a1;
}

uint64_t partial apply for closure #1 in SyncedLyricsLineView.SBS_TextContentView.TextView.prepareVisualRepresentations(size:)(void *a1, double a2, double a3, double a4, double a5)
{
  return closure #1 in SyncedLyricsLineView.SBS_TextContentView.TextView.prepareVisualRepresentations(size:)(a1, *(void **)(v5 + 16), a2, a3, a4, a5, *(void *)(v5 + 24), *(void *)(v5 + 32), *(unsigned char *)(v5 + 40));
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo9CTLineRefa4line_So6CGRectV5frametG_11MusicCoreUI20SyncedLyricsLineViewC0N0Cs5NeverOTg505_sSo9d7RefaSo6g3V11ij4UI20lmno32C0I0CIggyo_AB4line_AD5frametAIs5P11OIegnrzr_TRAgjQIggyo_Tf1cn_nTf4ng_n(uint64_t a1, void (*a2)(double, double, double, double))
{
  uint64_t v3 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    unsigned int v6 = (double *)(a1 + 64);
    do
    {
      double v7 = *(v6 - 3);
      double v8 = *(v6 - 2);
      double v9 = *(v6 - 1);
      double v10 = *v6;
      id v11 = *((id *)v6 - 4);
      a2(v7, v8, v9, v10);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v6 += 5;
      --v3;
    }
    while (v3);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t (*a2)(void *, id, uint64_t, uint64_t))
{
  unint64_t result = _swiftEmptyArrayStorage;
  unint64_t v18 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v6 = *(v5 - 1);
      uint64_t v8 = *v5;
      uint64_t v7 = v5[1];
      char v9 = *((unsigned char *)v5 + 16);
      double v10 = (void *)v5[3];
      uint64_t v11 = v5[4];
      uint64_t v12 = v5[5];
      v16[0] = *(v5 - 2);
      v16[1] = v6;
      _OWORD v16[2] = v8;
      v16[3] = v7;
      char v17 = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v13 = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v14 = a2(v16, v13, v11, v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v14)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v5 += 8;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return (void *)v18;
  }
  return result;
}

void _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSo8_NSRangeV_11MusicCoreUI20SyncedLyricsLineViewC5GlyphCs5NeverOTg504_s11ef4UI20hijk24C015SBS_TextContentG0C0it211C28prepareVisualRepresentations33_64DA36602EA3665D89B33D572EA4B8F0LL4sizeySo6CGSizeV_tFAC0F0CSo9CTLineRefa_So6CGRectVtXEfU_AC4WordCSgAA0E0CASV_So05CTRunY0aSaySo7CGPointVGSaySiGtXEfU0_AC8SyllableCSgAWA3_VXEfU_AC5L8CSiXEfU_SaySo7CGPointVGSo8CTRunRefa0F8Graphics7CGFloatVSo6CGRectVSSSaySiGTf1cn_nTf4nggnngg_n(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  specialized ContiguousArray.reserveCapacity(_:)();
  _NSRange.makeIterator()();
  *(Swift::Int_optional *)&v19.unint64_t location = _NSRange.NSRangeIterator.next()();
  if ((v19.length & 1) == 0)
  {
    unint64_t location = v19.location;
    while ((location & 0x8000000000000000) == 0)
    {
      if (location >= *(void *)(a8 + 16)) {
        goto LABEL_9;
      }
      double v21 = *(double *)(a8 + 32 + 16 * location);
      v19.unint64_t location = location;
      double v22 = CTRunRef.typographicBounds(forGlyphAtIndex:)(v19);
      v29.origin.CGFloat x = a2;
      v29.origin.CGFloat y = a3;
      v29.size.CGFloat width = a4;
      v29.size.height = a5;
      double Height = CGRectGetHeight(v29);
      if (location >= *(void *)(a12 + 16)) {
        goto LABEL_10;
      }
      double v24 = Height;
      _sS2SSysWl_1();
      swift_bridgeObjectRetain();
      String.Index.init<A>(utf16Offset:in:)();
      uint64_t v25 = String.subscript.getter();
      uint64_t v27 = v26;
      type metadata accessor for SyncedLyricsLineView.Glyph();
      uint64_t v28 = swift_allocObject();
      *(void *)(v28 + 64) = 0;
      *(void *)(v28 + 16) = v25;
      *(void *)(v28 + 24) = v27;
      *(double *)(v28 + 32) = v21 - a1;
      *(void *)(v28 + 40) = 0;
      *(double *)(v28 + 48) = v22;
      *(double *)(v28 + 56) = v24;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      *(Swift::Int_optional *)&v19.unint64_t location = _NSRange.NSRangeIterator.next()();
      unint64_t location = v19.location;
      if (v19.length) {
        return;
      }
    }
    __break(1u);
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
  }
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11)
{
  uint64_t v12 = v11;
  unint64_t result = _swiftEmptyArrayStorage;
  unint64_t v36 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    swift_bridgeObjectRetain();
    double v24 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v25 = v24[4];
      uint64_t v26 = *v24;
      uint64_t v27 = v24[1];
      long long v31 = *((_OWORD *)v24 - 1);
      uint64_t v32 = v26;
      uint64_t v33 = v27;
      long long v34 = *((_OWORD *)v24 + 1);
      uint64_t v35 = v25;
      swift_bridgeObjectRetain();
      closure #1 in closure #2 in closure #1 in SyncedLyricsLineView.SBS_TextContentView.TextView.prepareVisualRepresentations(size:)((uint64_t *)&v31, a2, a3, a4, a5, a6, &v30, a7, a8, a9, a10, a11);
      if (v12)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (void *)swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      if (v30)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v24 += 7;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    return (void *)v36;
  }
  return result;
}

void *specialized Sequence.flatMap<A>(_:)(unint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_39;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_3:
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v32 = OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_words;
    unint64_t v33 = v2 & 0xC000000000000001;
    unint64_t v29 = v2 + 32;
    uint64_t v30 = v3;
    uint64_t v5 = _swiftEmptyArrayStorage;
    unint64_t v31 = v2;
    while (1)
    {
      if (v33)
      {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v7 = __OFADD__(v4++, 1);
        if (v7) {
          goto LABEL_35;
        }
      }
      else
      {
        id v6 = *(id *)(v29 + 8 * v4);
        BOOL v7 = __OFADD__(v4++, 1);
        if (v7) {
          goto LABEL_35;
        }
      }
      uint64_t v8 = *(void *)(a2 + v32);
      int64_t v9 = *(void *)(v8 + 16);
      if (v9)
      {
        uint64_t v35 = v5;
        uint64_t v36 = v4;
        id v37 = v6;
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
        double v10 = _swiftEmptyArrayStorage;
        uint64_t v11 = (unsigned char *)(v8 + 64);
        do
        {
          uint64_t v12 = *((void *)v11 - 3);
          uint64_t v13 = *((void *)v11 - 2);
          uint64_t v40 = *((void *)v11 - 1);
          uint64_t v41 = *((void *)v11 - 4);
          char v39 = *v11;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          id v14 = v37;
          CFIndex v38 = CTRunRef.positions.getter();
          CFIndex v15 = CTRunRef.stringIndices.getter();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v17 = v10[2];
          unint64_t v16 = v10[3];
          unint64_t v18 = v10;
          if (v17 >= v16 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1);
            unint64_t v18 = v10;
          }
          v18[2] = v17 + 1;
          CFRange v19 = &v18[8 * v17];
          void v19[4] = v41;
          v19[5] = v12;
          v19[6] = v13;
          v19[7] = v40;
          *((unsigned char *)v19 + 64) = v39;
          v19[9] = v14;
          v19[10] = v38;
          v11 += 40;
          v19[11] = v15;
          --v9;
          double v10 = v18;
        }
        while (v9);
        swift_bridgeObjectRelease();

        uint64_t v3 = v30;
        unint64_t v2 = v31;
        uint64_t v5 = v35;
        uint64_t v4 = v36;
      }
      else
      {

        double v10 = _swiftEmptyArrayStorage;
      }
      id v20 = v10;
      uint64_t v21 = v10[2];
      int64_t v22 = v5[2];
      int64_t v23 = v22 + v21;
      if (__OFADD__(v22, v21)) {
        goto LABEL_36;
      }
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v23 <= v5[3] >> 1)
      {
        if (v20[2]) {
          goto LABEL_28;
        }
      }
      else
      {
        if (v22 <= v23) {
          int64_t v25 = v22 + v21;
        }
        else {
          int64_t v25 = v22;
        }
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)isUniquelyReferenced_nonNull_native, v25, 1, v5);
        if (v20[2])
        {
LABEL_28:
          if ((v5[3] >> 1) - v5[2] < v21) {
            goto LABEL_37;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Lyrics.Word, CTRunRef, [CGPoint], [Int]));
          swift_arrayInitWithCopy();
          if (v21)
          {
            uint64_t v26 = v5[2];
            BOOL v7 = __OFADD__(v26, v21);
            uint64_t v27 = v26 + v21;
            if (v7) {
              goto LABEL_38;
            }
            _OWORD v5[2] = v27;
          }
          goto LABEL_6;
        }
      }
      if (v21)
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
        goto LABEL_3;
      }
LABEL_6:
      swift_bridgeObjectRelease();
      if (v4 == v3) {
        goto LABEL_33;
      }
    }
  }
  uint64_t v5 = _swiftEmptyArrayStorage;
LABEL_33:
  swift_bridgeObjectRelease();
  return v5;
}

Swift::Int partial apply for closure #2 in closure #1 in SyncedLyricsLineView.SBS_TextContentView.TextView.prepareVisualRepresentations(size:)(long long *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return closure #2 in closure #1 in SyncedLyricsLineView.SBS_TextContentView.TextView.prepareVisualRepresentations(size:)(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24), *(CGFloat *)(v4 + 32), *(CGFloat *)(v4 + 40), *(CGFloat *)(v4 + 48), *(CGFloat *)(v4 + 56));
}

unint64_t lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey()
{
  unint64_t result = _sSo21NSAttributedStringKeyaABSHSCWL_1;
  if (!_sSo21NSAttributedStringKeyaABSHSCWL_1)
  {
    _sSo21NSAttributedStringKeyaMa_1(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&_sSo21NSAttributedStringKeyaABSHSCWL_1);
  }
  return result;
}

uint64_t sub_10031D638()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SyncedLyricsLineView.SBS_TextContentView.TextView.setProgress(_:animated:)()
{
  return closure #1 in SyncedLyricsLineView.SBS_TextContentView.TextView.setProgress(_:animated:)(*(void *)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_10031D67C()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_50()
{
  return swift_release();
}

uint64_t sub_10031D6A4()
{
  return swift_deallocObject();
}

id partial apply for closure #2 in SyncedLyricsLineView.SBS_TextContentView.TextView.setSelected(_:animated:)()
{
  id result = *(id *)(*(void *)(v0 + 16)
                 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_gradientView);
  if (result)
  {
    double v2 = 0.0;
    if (*(unsigned char *)(v0 + 24)) {
      double v2 = 1.0;
    }
    return [result setAlpha:v2];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10031D718()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in SyncedLyricsLineView.SBS_TextContentView.TextView.setSelected(_:animated:)()
{
  closure #1 in SyncedLyricsLineView.SBS_TextContentView.TextView.setSelected(_:animated:)(*(void *)(v0 + 16));
}

void specialized SyncedLyricsLineView.SBS_TextContentView.TextView.init(coder:)()
{
  v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isScrolling] = 1;
  v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isSelected] = 0;
  *(void *)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_progress] = 0;
  *(void *)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_framesetter] = 0;
  *(void *)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_frameVisualRepresentation] = 0;
  *(void *)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_basicView] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t initializeBufferWithCopyOfBuffer for AnimationStatus(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  outlined copy of AnimationStatus(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

id outlined copy of AnimationStatus(id result, unsigned __int8 a2)
{
  if (a2 <= 1u) {
    return result;
  }
  return result;
}

void destroy for AnimationStatus(uint64_t a1)
{
}

void outlined consume of AnimationStatus(id a1, unsigned __int8 a2)
{
  if (a2 <= 1u) {
}
  }

uint64_t assignWithCopy for AnimationStatus(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  outlined copy of AnimationStatus(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of AnimationStatus(v5, v6);
  return a1;
}

uint64_t assignWithTake for AnimationStatus(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  unsigned __int8 v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of AnimationStatus(v4, v5);
  return a1;
}

ValueMetadata *type metadata accessor for AnimationStatus()
{
  return &type metadata for AnimationStatus;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimationStatus(uint64_t a1, uint64_t *a2)
{
  int v2 = *((unsigned __int8 *)a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a1 + 8) == 1)
    {
      if (v2 == 1) {
        return 1;
      }
    }
    else
    {
      uint64_t v4 = *a2;
      if (*(void *)a1)
      {
        if (v2 == 2 && v4 == 1) {
          return 1;
        }
      }
      else if (v2 == 2 && v4 == 0)
      {
        return 1;
      }
    }
  }
  else if (!*((unsigned char *)a2 + 8))
  {
    return 1;
  }
  return 0;
}

Swift::Void __swiftcall SyncedLyricsLineView.Frame.destroyViews()()
{
  unint64_t v1 = *(void *)(v0 + 24);
  unint64_t v43 = v1;
  if (v1 >> 62) {
    goto LABEL_68;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v42 = v2;
  if (v2)
  {
LABEL_3:
    unint64_t v3 = 0;
    do
    {
      if ((v43 & 0xC000000000000001) != 0)
      {
        uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v5 = __OFADD__(v3, 1);
        unint64_t v6 = v3 + 1;
        if (v5) {
          goto LABEL_67;
        }
      }
      else
      {
        if (v3 >= *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        uint64_t v4 = swift_retain();
        BOOL v5 = __OFADD__(v3, 1);
        unint64_t v6 = v3 + 1;
        if (v5) {
          goto LABEL_67;
        }
      }
      unint64_t v44 = v6;
      uint64_t v45 = v4;
      unint64_t v7 = *(void *)(v4 + 16);
      if (!(v7 >> 62))
      {
        uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v8) {
          goto LABEL_12;
        }
        goto LABEL_52;
      }
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      if (v8)
      {
LABEL_12:
        unint64_t v9 = 0;
        unint64_t v48 = v7 & 0xC000000000000001;
        uint64_t v46 = v7 & 0xFFFFFFFFFFFFFF8;
        uint64_t v47 = v8;
        while (1)
        {
          if (v48)
          {
            uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            BOOL v5 = __OFADD__(v9, 1);
            unint64_t v13 = v9 + 1;
            if (v5) {
              goto LABEL_65;
            }
          }
          else
          {
            if (v9 >= *(void *)(v46 + 16)) {
              goto LABEL_66;
            }
            uint64_t v12 = swift_retain();
            BOOL v5 = __OFADD__(v9, 1);
            unint64_t v13 = v9 + 1;
            if (v5) {
              goto LABEL_65;
            }
          }
          unint64_t v49 = v13;
          uint64_t v50 = v12;
          unint64_t v14 = *(void *)(v12 + 72);
          unint64_t v51 = v14;
          if (!(v14 >> 62))
          {
            uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (v15) {
              break;
            }
            goto LABEL_46;
          }
          swift_bridgeObjectRetain();
          uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
          if (v15) {
            break;
          }
LABEL_46:
          swift_bridgeObjectRelease();
          uint64_t v28 = v50;
          unint64_t v29 = *(void **)(v50 + 128);
          if (v29)
          {
            [v29 removeFromSuperview];
            uint64_t v28 = v50;
            uint64_t v30 = *(void **)(v50 + 128);
          }
          else
          {
            uint64_t v30 = 0;
          }
          unint64_t v9 = v49;
          *(void *)(v28 + 128) = 0;

          uint64_t v31 = v50;
          if (!*(void *)(v50 + 128))
          {
            uint64_t v32 = *(void **)(v50 + 80);
            *(void *)(v50 + 80) = 0;
            unsigned __int8 v33 = *(unsigned char *)(v50 + 88);
            *(unsigned char *)(v50 + 88) = 2;
            outlined consume of AnimationStatus(v32, v33);
            uint64_t v31 = v50;
          }
          double v10 = *(void **)(v31 + 80);
          *(void *)(v31 + 80) = 0;
          unsigned __int8 v11 = *(unsigned char *)(v31 + 88);
          *(unsigned char *)(v31 + 88) = 2;
          outlined consume of AnimationStatus(v10, v11);
          swift_release();
          if (v49 == v47) {
            goto LABEL_52;
          }
        }
        unint64_t v16 = 0;
        while (2)
        {
          if ((v51 & 0xC000000000000001) != 0)
          {
            uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            BOOL v5 = __OFADD__(v16++, 1);
            if (v5) {
              goto LABEL_58;
            }
LABEL_31:
            unint64_t v21 = *(void *)(v20 + 88);
            if (!(v21 >> 62))
            {
              uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (v22) {
                goto LABEL_33;
              }
LABEL_43:
              swift_bridgeObjectRelease();
              uint64_t v27 = *(void **)(v20 + 144);
              if (v27)
              {
                [v27 removeFromSuperview];
                unint64_t v17 = *(void **)(v20 + 144);
              }
              else
              {
                unint64_t v17 = 0;
              }
              *(void *)(v20 + 144) = 0;

              unint64_t v18 = *(void **)(v20 + 96);
              *(void *)(v20 + 96) = 0;
              unsigned __int8 v19 = *(unsigned char *)(v20 + 104);
              *(unsigned char *)(v20 + 104) = 2;
              outlined consume of AnimationStatus(v18, v19);
              swift_release();
              if (v16 == v15) {
                goto LABEL_46;
              }
              continue;
            }
            swift_bridgeObjectRetain();
            uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
            if (!v22) {
              goto LABEL_43;
            }
LABEL_33:
            if (v22 >= 1)
            {
              uint64_t v23 = 0;
              while (1)
              {
                if ((v21 & 0xC000000000000001) != 0)
                {
                  uint64_t v25 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                  uint64_t v26 = *(void **)(v25 + 64);
                  if (!v26) {
                    goto LABEL_41;
                  }
                }
                else
                {
                  uint64_t v25 = *(void *)(v21 + 8 * v23 + 32);
                  swift_retain();
                  uint64_t v26 = *(void **)(v25 + 64);
                  if (!v26)
                  {
LABEL_41:
                    double v24 = 0;
                    goto LABEL_36;
                  }
                }
                [v26 removeFromSuperview];
                double v24 = *(void **)(v25 + 64);
LABEL_36:
                ++v23;
                *(void *)(v25 + 64) = 0;
                swift_release();

                if (v22 == v23) {
                  goto LABEL_43;
                }
              }
            }
            goto LABEL_59;
          }
          break;
        }
        if (v16 < *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          uint64_t v20 = *(void *)(v51 + 32 + 8 * v16);
          swift_retain();
          BOOL v5 = __OFADD__(v16++, 1);
          if (!v5) {
            goto LABEL_31;
          }
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        swift_bridgeObjectRetain();
        uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
        if (!v42) {
          break;
        }
        goto LABEL_3;
      }
LABEL_52:
      swift_bridgeObjectRelease();
      uint64_t v34 = v45;
      uint64_t v35 = *(void **)(v45 + 72);
      if (v35)
      {
        [v35 removeFromSuperview];
        uint64_t v34 = v45;
        uint64_t v36 = *(void **)(v45 + 72);
      }
      else
      {
        uint64_t v36 = 0;
      }
      *(void *)(v34 + 72) = 0;
      swift_release();

      unint64_t v3 = v44;
    }
    while (v44 != v42);
  }
  swift_bridgeObjectRelease();
  unint64_t v16 = v41;
  id v37 = *(void **)(v41 + 80);
  if (v37)
  {
    [v37 removeFromSuperview];
    CFIndex v38 = *(void **)(v41 + 80);
  }
  else
  {
LABEL_60:
    CFIndex v38 = 0;
  }
  *(void *)(v16 + 80) = 0;

  char v39 = *(void **)(v16 + 64);
  *(void *)(v16 + 64) = 0;
  unsigned __int8 v40 = *(unsigned char *)(v16 + 72);
  *(unsigned char *)(v16 + 72) = 2;

  outlined consume of AnimationStatus(v39, v40);
}

uint64_t SyncedLyricsLineView.Frame.createView(font:color:kind:specs:lineSimpleRender:lineDirection:)(void *a1, void *a2, char a3, const void *a4, char a5, char a6)
{
  id v10 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SyncedLyricsLineView.Frame.FrameView()), "initWithFrame:", *(double *)(v6 + 32), *(double *)(v6 + 40), *(double *)(v6 + 48), *(double *)(v6 + 56));
  unsigned __int8 v11 = *(void **)(v6 + 80);
  *(void *)(v6 + 80) = v10;
  id v12 = v10;

  unint64_t v13 = *(void *)(v6 + 24);
  if (!(v13 >> 62))
  {
    uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v14 = result;
  if (!result) {
    goto LABEL_10;
  }
LABEL_3:
  if (v14 >= 1)
  {
    uint64_t v16 = 0;
    char v17 = a3 & 1;
    char v18 = a6 & 1;
    char v19 = a5 & 1;
    do
    {
      if ((v13 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      ++v16;
      uint64_t v20 = (void *)SyncedLyricsLineView.Line.createView(font:color:kind:specs:simpleRender:direction:)(a1, a2, v17, a4, v19, v18);
      [v12 addSubview:v20];
      swift_release();
    }
    while (v14 != v16);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t SyncedLyricsLineView.Frame.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined consume of AnimationStatus(*(id *)(v0 + 64), *(unsigned char *)(v0 + 72));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SyncedLyricsLineView.Frame()
{
  return self;
}

uint64_t type metadata accessor for SyncedLyricsLineView.Frame.FrameView()
{
  return self;
}

_UNKNOWN **associated type witness table accessor for ContainerVisualRepresentation.ContainedVisualRepresentationType : VisualRepresentation in SyncedLyricsLineView.Frame()
{
  return &protocol witness table for SyncedLyricsLineView.Line;
}

void SyncedLyricsLineView.Glyph.GlyphView.purgeAnimators()()
{
  unint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView5Glyph9GlyphView_currentAnimators);
  swift_beginAccess();
  uint64_t v2 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    if ((unint64_t)*v1 >> 62) {
      goto LABEL_23;
    }
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
LABEL_15:
      if ((unint64_t)*v1 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v10 >= v4)
        {
LABEL_17:
          specialized Array.replaceSubrange<A>(_:with:)(v4, v10);
          swift_endAccess();
          return;
        }
      }
      else
      {
        uint64_t v10 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v10 >= v4) {
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_23:
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t v4 = 0;
  while (1)
  {
    id v5 = (v2 & 0xC000000000000001) != 0
       ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
       : *(id *)(v2 + 8 * v4 + 32);
    uint64_t v6 = v5;
    unint64_t v7 = (unint64_t)[v5 state];

    if ((v7 | 2) == 2) {
      break;
    }
    uint64_t v8 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_19;
    }
    ++v4;
    if (v8 == v3) {
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9 == v11) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
  if ((unint64_t)*v1 >> 62) {
    goto LABEL_25;
  }
  if (v9 == *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_15;
  }
LABEL_26:
  uint64_t v12 = v4 + 5;
  while (1)
  {
    unint64_t v13 = v12 - 4;
    uint64_t v14 = *v1;
    if ((*v1 & 0xC000000000000001) != 0)
    {
      id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_31;
    }
    if ((v13 & 0x8000000000000000) != 0) {
      break;
    }
    if (v13 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_62;
    }
    id v15 = *(id *)(v14 + 8 * v12);
LABEL_31:
    uint64_t v16 = v15;
    unint64_t v17 = (unint64_t)[v15 state];

    if ((v17 | 2) == 2) {
      goto LABEL_52;
    }
    if (v13 != v4)
    {
      uint64_t v18 = *v1;
      if ((*v1 & 0xC000000000000001) != 0)
      {
        id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v18 = *v1;
        if ((*v1 & 0xC000000000000001) == 0) {
          goto LABEL_37;
        }
      }
      else
      {
        if (v4 < 0) {
          goto LABEL_65;
        }
        if ((unint64_t)v4 >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_66;
        }
        id v19 = *(id *)(v18 + 8 * v4 + 32);
        if ((v18 & 0xC000000000000001) == 0)
        {
LABEL_37:
          if ((v13 & 0x8000000000000000) != 0) {
            goto LABEL_67;
          }
          if (v13 >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_68;
          }
          id v20 = *(id *)(v18 + 8 * v12);
          goto LABEL_40;
        }
      }
      id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v18 = *v1;
LABEL_40:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *unint64_t v1 = v18;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v18 < 0 || (v18 & 0x4000000000000000) != 0)
      {
        uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew()(v18);
        *unint64_t v1 = v18;
      }
      uint64_t v22 = *(void **)((v18 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x20);
      *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x20) = v20;

      specialized Array._endMutation()();
      uint64_t v23 = *v1;
      int v24 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *unint64_t v1 = v23;
      if (!v24 || v23 < 0 || (v23 & 0x4000000000000000) != 0)
      {
        uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew()(v23);
        *unint64_t v1 = v23;
      }
      if ((v13 & 0x8000000000000000) != 0) {
        goto LABEL_69;
      }
      uint64_t v25 = v23 & 0xFFFFFFFFFFFFFF8;
      if (v13 >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_70;
      }
      uint64_t v26 = *(void **)(v25 + 8 * v12);
      *(void *)(v25 + 8 * v12) = v19;

      specialized Array._endMutation()();
    }
    if (__OFADD__(v4++, 1)) {
      goto LABEL_64;
    }
LABEL_52:
    uint64_t v28 = v12 - 3;
    if (__OFADD__(v13, 1)) {
      goto LABEL_63;
    }
    if ((unint64_t)*v1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v29 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    ++v12;
    if (v28 == v29) {
      goto LABEL_15;
    }
  }
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
}

id closure #1 in SyncedLyricsLineView.Glyph.GlyphView.reset(frame:)(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  v10[0] = 0x3FF0000000000000;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = 0x3FF0000000000000;
  v10[4] = 0;
  _OWORD v10[5] = 0;
  [a1 setTransform:v10];
  return UIView.untransformedFrame.setter(a2, a3, a4, a5);
}

void SyncedLyricsLineView.Glyph.GlyphView.grow(springTimingParameters:position:factor:delay:)(void *a1, double a2, double a3, double a4, double a5)
{
  type metadata accessor for UIViewPropertyAnimator();
  Class isa = UIViewPropertyAnimator.init(springTimingParameters:)((UISpringTimingParameters)a1).super.isa;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v5;
  *(double *)(v12 + 24) = a2;
  *(double *)(v12 + 32) = a3;
  *(double *)(v12 + 40) = a4;
  uint64_t v23 = partial apply for closure #1 in SyncedLyricsLineView.Glyph.GlyphView.grow(springTimingParameters:position:factor:delay:);
  uint64_t v24 = v12;
  id v19 = _NSConcreteStackBlock;
  uint64_t v20 = 1107296256;
  unint64_t v21 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  uint64_t v22 = &block_descriptor_27;
  unint64_t v13 = _Block_copy(&v19);
  uint64_t v14 = v5;
  swift_release();
  [(objc_class *)isa addAnimations:v13];
  _Block_release(v13);
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v23 = partial apply for closure #2 in SyncedLyricsLineView.Glyph.GlyphView.degrow(springTimingParameters:position:delay:);
  uint64_t v24 = v15;
  id v19 = _NSConcreteStackBlock;
  uint64_t v20 = 1107296256;
  unint64_t v21 = thunk for @escaping @callee_guaranteed (@unowned UIViewAnimatingPosition) -> ();
  uint64_t v22 = &block_descriptor_31_1;
  uint64_t v16 = _Block_copy(&v19);
  swift_release();
  [(objc_class *)isa addCompletion:v16];
  _Block_release(v16);
  [(objc_class *)isa startAnimationAfterDelay:a5];
  unint64_t v17 = &v14[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView5Glyph9GlyphView_currentAnimators];
  swift_beginAccess();
  uint64_t v18 = isa;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v17 & 0xFFFFFFFFFFFFFF8)
                                                                               + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
}

uint64_t closure #1 in SyncedLyricsLineView.Glyph.GlyphView.grow(springTimingParameters:position:factor:delay:)(void *a1, double a2, double a3, CGFloat a4)
{
  uint64_t v8 = self;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = partial apply for closure #1 in closure #1 in SyncedLyricsLineView.Glyph.GlyphView.grow(springTimingParameters:position:factor:delay:);
  *(void *)(v10 + 24) = v9;
  *(void *)&v14.tCGFloat x = thunk for @escaping @callee_guaranteed () -> ()partial apply;
  *(void *)&v14.tCGFloat y = v10;
  *(void *)&v14.a = _NSConcreteStackBlock;
  *(void *)&v14.b = 1107296256;
  *(void *)&v14.c = thunk for @escaping @callee_guaranteed () -> ();
  *(void *)&v14.d = &block_descriptor_41_2;
  uint64_t v11 = _Block_copy(&v14);
  id v12 = a1;
  swift_retain();
  swift_release();
  [(id)v8 performWithoutAnimation:v11];
  _Block_release(v11);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    [v12 frame];
    objc_msgSend(v12, "setFrame:", a2, a3);
    CGAffineTransformMakeScale(&v14, a4, a4);
    [v12 setTransform:&v14];
    return swift_release();
  }
  return result;
}

void SyncedLyricsLineView.Glyph.GlyphView.degrow(springTimingParameters:position:delay:)(void *a1, double a2, double a3, double a4)
{
  type metadata accessor for UIViewPropertyAnimator();
  Class isa = UIViewPropertyAnimator.init(springTimingParameters:)((UISpringTimingParameters)a1).super.isa;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v4;
  *(double *)(v10 + 24) = a2;
  *(double *)(v10 + 32) = a3;
  unint64_t v21 = partial apply for closure #1 in SyncedLyricsLineView.Glyph.GlyphView.degrow(springTimingParameters:position:delay:);
  uint64_t v22 = v10;
  unint64_t v17 = _NSConcreteStackBlock;
  uint64_t v18 = 1107296256;
  id v19 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  uint64_t v20 = &block_descriptor_53;
  uint64_t v11 = _Block_copy(&v17);
  id v12 = v4;
  swift_release();
  [(objc_class *)isa addAnimations:v11];
  _Block_release(v11);
  uint64_t v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  unint64_t v21 = partial apply for closure #2 in SyncedLyricsLineView.Glyph.GlyphView.degrow(springTimingParameters:position:delay:);
  uint64_t v22 = v13;
  unint64_t v17 = _NSConcreteStackBlock;
  uint64_t v18 = 1107296256;
  id v19 = thunk for @escaping @callee_guaranteed (@unowned UIViewAnimatingPosition) -> ();
  uint64_t v20 = &block_descriptor_12_2;
  CGAffineTransform v14 = _Block_copy(&v17);
  swift_release();
  [(objc_class *)isa addCompletion:v14];
  _Block_release(v14);
  [(objc_class *)isa startAnimationAfterDelay:a4];
  uint64_t v15 = &v12[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView5Glyph9GlyphView_currentAnimators];
  swift_beginAccess();
  uint64_t v16 = isa;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v15 & 0xFFFFFFFFFFFFFF8)
                                                                               + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
}

uint64_t closure #1 in SyncedLyricsLineView.Glyph.GlyphView.degrow(springTimingParameters:position:delay:)(void *a1, double a2, double a3)
{
  uint64_t v6 = self;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = partial apply for closure #1 in closure #1 in SyncedLyricsLineView.Glyph.GlyphView.degrow(springTimingParameters:position:delay:);
  *(void *)(v8 + 24) = v7;
  uint64_t v16 = partial apply for thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v17 = v8;
  uint64_t v12 = (uint64_t)_NSConcreteStackBlock;
  uint64_t v13 = 1107296256;
  CGAffineTransform v14 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v15 = (uint64_t)&block_descriptor_21_1;
  uint64_t v9 = _Block_copy(&v12);
  id v10 = a1;
  swift_retain();
  swift_release();
  [(id)v6 performWithoutAnimation:v9];
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v6)
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = 0x3FF0000000000000;
    uint64_t v13 = 0;
    CGAffineTransform v14 = 0;
    uint64_t v15 = 0x3FF0000000000000;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    [v10 setTransform:&v12];
    [v10 frame];
    objc_msgSend(v10, "setFrame:", a2, a3);
    return swift_release();
  }
  return result;
}

id closure #1 in closure #1 in SyncedLyricsLineView.Glyph.GlyphView.grow(springTimingParameters:position:factor:delay:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = (double *)a2();
  swift_beginAccess();
  return UIView.setAnchorPoint(_:preserveFrame:)(1, *v2, v2[1]);
}

void closure #2 in SyncedLyricsLineView.Glyph.GlyphView.grow(springTimingParameters:position:factor:delay:)()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    unint64_t v1 = (void *)Strong;
    SyncedLyricsLineView.Glyph.GlyphView.purgeAnimators()();
  }
}

uint64_t SyncedLyricsLineView.Glyph.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SyncedLyricsLineView.Glyph()
{
  return self;
}

uint64_t type metadata accessor for SyncedLyricsLineView.Glyph.GlyphView()
{
  return self;
}

unint64_t type metadata accessor for UIViewPropertyAnimator()
{
  unint64_t result = lazy cache variable for type metadata for UIViewPropertyAnimator;
  if (!lazy cache variable for type metadata for UIViewPropertyAnimator)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIViewPropertyAnimator);
  }
  return result;
}

uint64_t sub_10031F12C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SyncedLyricsLineView.Glyph.GlyphView.degrow(springTimingParameters:position:delay:)()
{
  return closure #1 in SyncedLyricsLineView.Glyph.GlyphView.degrow(springTimingParameters:position:delay:)(*(void **)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t block_copy_helper_51(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_51()
{
  return swift_release();
}

uint64_t sub_10031F188()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void partial apply for closure #2 in SyncedLyricsLineView.Glyph.GlyphView.degrow(springTimingParameters:position:delay:)()
{
}

uint64_t sub_10031F1DC()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in closure #1 in SyncedLyricsLineView.Glyph.GlyphView.degrow(springTimingParameters:position:delay:)()
{
  return closure #1 in closure #1 in SyncedLyricsLineView.Glyph.GlyphView.grow(springTimingParameters:position:factor:delay:)(*(void *)(v0 + 16), (uint64_t (*)(void))CGPoint.center.unsafeMutableAddressor);
}

uint64_t sub_10031F244()
{
  return swift_deallocObject();
}

uint64_t sub_10031F254()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SyncedLyricsLineView.Glyph.GlyphView.grow(springTimingParameters:position:factor:delay:)()
{
  return closure #1 in SyncedLyricsLineView.Glyph.GlyphView.grow(springTimingParameters:position:factor:delay:)(*(void **)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32), *(CGFloat *)(v0 + 40));
}

id partial apply for closure #1 in closure #1 in SyncedLyricsLineView.Glyph.GlyphView.grow(springTimingParameters:position:factor:delay:)()
{
  return closure #1 in closure #1 in SyncedLyricsLineView.Glyph.GlyphView.grow(springTimingParameters:position:factor:delay:)(*(void *)(v0 + 16), (uint64_t (*)(void))CGPoint.bottomCenter.unsafeMutableAddressor);
}

uint64_t sub_10031F2CC()
{
  return swift_deallocObject();
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11MusicCoreUI20SyncedLyricsLineViewC4WordCG_Sds5NeverOTg504_s11de4UI20ghij22C0F0C7endTimeSdvgSdAC4K53Ccfu_32fac27a54bb52df9be2bed939b8ef4e59AHSdTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v2) {
      return (char *)_swiftEmptyArrayStorage;
    }
    unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v5 = swift_retain();
      }
      uint64_t v6 = *(void *)(v5 + 32);
      uint64_t v7 = *(void *)(v6 + 16);
      if (v7) {
        uint64_t v8 = *(void *)(v6 + 56 * v7 - 16);
      }
      else {
        uint64_t v8 = 0;
      }
      swift_release();
      unint64_t v10 = _swiftEmptyArrayStorage[2];
      unint64_t v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1);
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v10 + 1;
      _swiftEmptyArrayStorage[v10 + 4] = v8;
      if (v2 == v4) {
        return (char *)_swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11MusicCoreUI20SyncedLyricsLineViewC4WordCG_Sds5NeverOTg504_s11de4UI20ghij24C0F0C9startTimeSdvgSdAC4K53Ccfu_32b380ca74e4ce11407eb7d686de6a427bAHSdTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v2) {
      return (char *)_swiftEmptyArrayStorage;
    }
    unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v5 = swift_retain();
      }
      uint64_t v6 = *(void *)(v5 + 32);
      if (*(void *)(v6 + 16)) {
        uint64_t v7 = *(void *)(v6 + 32);
      }
      else {
        uint64_t v7 = 0;
      }
      swift_release();
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1);
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v9 + 1;
      _swiftEmptyArrayStorage[v9 + 4] = v7;
      if (v2 == v4) {
        return (char *)_swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void SyncedLyricsLineView.Line.animate(progress:specs:direction:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v11 = v3;
  unint64_t v15 = *(void *)(v3 + 16);
  unint64_t v16 = v15 >> 62;
  if (v15 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    if (!v17) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v17) {
      goto LABEL_10;
    }
  }
  if (v17 < 1)
  {
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v18 = 0;
  unint64_t v4 = v15 & 0xC000000000000001;
  do
  {
    if (v4) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    ++v18;
    SyncedLyricsLineView.Word.animate(progress:specs:)(a1, a3);
    swift_release();
  }
  while (v17 != v18);
LABEL_10:
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v3 + 80)) {
    return;
  }
  uint64_t v19 = *(void *)(v3 + 72);
  if (!v19) {
    return;
  }
  uint64_t v20 = *(void **)(v19 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_gradientView);
  if (!v20) {
    return;
  }
  unint64_t v21 = *(void **)(a1 + 168);
  uint64_t v17 = v20;
  [v21 lineHeight];
  double v23 = v22 * *(double *)(a1 + 224) + *(double *)(a1 + 352) + *(double *)(a1 + 352);
  CGFloat v9 = *(double *)(v11 + 40);
  CGFloat v8 = *(double *)(v11 + 48);
  double v7 = *(double *)(v11 + 56);
  double v6 = *(double *)(v11 + 64);
  v95.origin.CGFloat x = v9;
  v95.origin.CGFloat y = v8;
  v95.size.CGFloat width = v7;
  v95.size.height = v6;
  double v5 = (v23 - CGRectGetHeight(v95)) * 0.5;
  double v10 = *(double *)(a1 + 392);
  if (SyncedLyricsLineView.Line.endTime.getter() <= a3)
  {
    if (v16)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      unint64_t v25 = v15;
      if (!v24)
      {
LABEL_40:
        swift_bridgeObjectRelease();
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v24 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      unint64_t v25 = v15;
      if (!v24) {
        goto LABEL_40;
      }
    }
    unint64_t v26 = v24 - 1;
    if (!__OFSUB__(v24, 1))
    {
      if ((v15 & 0xC000000000000001) == 0)
      {
        if ((v26 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v26 < *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          uint64_t v24 = *(void *)(v15 + 8 * v26 + 32);
          swift_retain();
          goto LABEL_23;
        }
        __break(1u);
        goto LABEL_38;
      }
LABEL_35:
      uint64_t v24 = specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_23:
      swift_bridgeObjectRelease();
      unint64_t v25 = *(void *)(v24 + 72);
      if (!(v25 >> 62))
      {
        uint64_t v27 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v27) {
          goto LABEL_25;
        }
LABEL_39:
        swift_release();
        goto LABEL_40;
      }
LABEL_38:
      swift_bridgeObjectRetain();
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
      if (v27)
      {
LABEL_25:
        unint64_t v28 = v27 - 1;
        if (__OFSUB__(v27, 1))
        {
          __break(1u);
        }
        else if ((v25 & 0xC000000000000001) == 0)
        {
          if ((v28 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v28 < *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            uint64_t v29 = *(double **)(v25 + 8 * v28 + 32);
            swift_retain();
LABEL_30:
            swift_bridgeObjectRelease();
            if ((a2 & 1) == 0)
            {
              CGFloat v30 = v29[14];
              CGFloat v31 = v29[15];
              CGFloat v32 = v29[16];
              CGFloat v33 = v29[17];
              id v34 = (id)v17;
              v96.origin.CGFloat x = v30;
              v96.origin.CGFloat y = v31;
              v96.size.CGFloat width = v32;
              v96.size.height = v33;
              CGRectGetWidth(v96);
              [v34 frame];
              objc_msgSend(v34, "setFrame:");
            }
            swift_release();
            goto LABEL_132;
          }
          __break(1u);
          goto LABEL_89;
        }
        uint64_t v29 = (double *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_30;
      }
      goto LABEL_39;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
LABEL_41:
  if (SyncedLyricsLineView.Line.startTime.getter() > a3)
  {
    *(void *)(v11 + 88) = 0;
    swift_release();
    id v35 = (id)v17;
    id v36 = v35;
    if (a2)
    {
      v97.origin.CGFloat x = v9;
      v97.origin.CGFloat y = v8;
      v97.size.CGFloat width = v7;
      v97.size.height = v6;
      double v41 = v5 * 0.5 + CGRectGetWidth(v97);
      [v36 frame];
      [v36 setFrame:v41];

      id v36 = v36;
      [v36 frame];
    }
    else
    {
      [v35 frame];
    }
    objc_msgSend(v36, "setFrame:");

    goto LABEL_133;
  }
  unint64_t v4 = SyncedLyricsLineView.Line.currentWord(for:)(a3);
  unint64_t v25 = v37;
  uint64_t v38 = SyncedLyricsLineView.Line.currentSyllable(for:)(a3);
  uint64_t v27 = v38;
  uint64_t v24 = v39;
  if (!v4 || !v38)
  {
    swift_release();
    swift_release();
    goto LABEL_132;
  }
  uint64_t v40 = *(void *)(v11 + 88);
  if (v40 && v38 == v40)
  {

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return;
  }
  if ((a2 & 1) == 0)
  {
    if (v16)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v42 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
    if (!v42) {
      goto LABEL_99;
    }
    unint64_t v44 = v42 - 1;
    if (!__OFSUB__(v42, 1))
    {
      if ((v15 & 0xC000000000000001) == 0)
      {
        if ((v44 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v44 < *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          uint64_t v45 = *(void *)(v15 + 8 * v44 + 32);
          swift_retain();
          swift_bridgeObjectRelease();
          uint64_t v46 = *(void *)(v45 + 72);
          swift_bridgeObjectRetain();
          swift_release();
          if ((v46 & 0x8000000000000000) == 0 && (v46 & 0x4000000000000000) == 0) {
            goto LABEL_67;
          }
          goto LABEL_92;
        }
        __break(1u);
        goto LABEL_96;
      }
LABEL_90:
      uint64_t v52 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_bridgeObjectRelease();
      uint64_t v46 = *(void *)(v52 + 72);
      swift_bridgeObjectRetain();
      swift_unknownObjectRelease();
      if ((v46 & 0x8000000000000000) == 0 && (v46 & 0x4000000000000000) == 0)
      {
LABEL_67:
        uint64_t v47 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v47) {
          goto LABEL_68;
        }
        goto LABEL_99;
      }
LABEL_92:
      swift_bridgeObjectRetain();
      uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v47)
      {
LABEL_68:
        unint64_t v48 = v47 - 1;
        if (__OFSUB__(v47, 1)) {
          goto LABEL_141;
        }
        if ((v46 & 0xC000000000000001) != 0) {
          goto LABEL_143;
        }
        if ((v48 & 0x8000000000000000) != 0) {
          goto LABEL_142;
        }
        if (v48 < *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          uint64_t v49 = *(void *)(v46 + 8 * v48 + 32);
          goto LABEL_83;
        }
        goto LABEL_145;
      }
LABEL_99:
      swift_bridgeObjectRelease();
      goto LABEL_100;
    }
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  if (v16)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v43 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  if (!v43) {
    goto LABEL_99;
  }
  if ((v15 & 0xC000000000000001) == 0)
  {
    if (!*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      uint64_t v84 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_bridgeObjectRelease();
      double v85 = *(double *)(v84 + 16);
      double v62 = *(double *)(v84 + 24);
      uint64_t v65 = *(void *)(v84 + 32);
      uint64_t v64 = *(void *)(v84 + 40);
      uint64_t v88 = *(void *)(v84 + 56);
      uint64_t v89 = *(void *)(v84 + 48);
      uint64_t v86 = *(void *)(v84 + 64);
      swift_bridgeObjectRetain();
      swift_unknownObjectRelease();
      if (v7 == v85) {
        goto LABEL_113;
      }
LABEL_126:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_127:
      double v71 = a3;
      CGRect v99 = *(CGRect *)(v27 + 112);
      double v73 = *(double *)(v4 + 96) + v99.origin.x;
      double v72 = v73 + CGRectGetWidth(v99);
      goto LABEL_128;
    }
    uint64_t v50 = *(void *)(v15 + 32);
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v51 = *(void *)(v50 + 72);
    swift_bridgeObjectRetain();
    swift_release();
    if (v51 < 0 || (v51 & 0x4000000000000000) != 0) {
      goto LABEL_98;
    }
LABEL_79:
    if (!*(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_99;
    }
    goto LABEL_80;
  }
LABEL_96:
  uint64_t v53 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  swift_bridgeObjectRelease();
  uint64_t v51 = *(void *)(v53 + 72);
  swift_bridgeObjectRetain();
  swift_unknownObjectRelease();
  if ((v51 & 0x8000000000000000) == 0 && (v51 & 0x4000000000000000) == 0) {
    goto LABEL_79;
  }
LABEL_98:
  swift_bridgeObjectRetain();
  uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v54) {
    goto LABEL_99;
  }
LABEL_80:
  if ((v51 & 0xC000000000000001) != 0) {
    goto LABEL_143;
  }
  if (!*(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_145:
    __break(1u);
    return;
  }
  uint64_t v49 = *(void *)(v51 + 32);
  while (1)
  {
LABEL_83:
    swift_bridgeObjectRelease();
    if (v49 == v27)
    {
      a3 = 1.0;
    }
    else
    {
LABEL_100:
      uint64_t v55 = *(void *)(v27 + 64);
      if (!v55 || (a3 = 0.5, v55 >= 3))
      {
        if (!v24
          || (swift_bridgeObjectRetain(), uint64_t v56 = String.count.getter(), swift_bridgeObjectRelease(), a3 = 0.25, v56 >= 3))
        {
          a3 = 0.12;
        }
      }
    }
    if (a2)
    {
      double v66 = *(double *)(v4 + 96) + *(double *)(v27 + 112) - v10 * a3 - v5;
      [(id)v17 frame];
      uint64_t v68 = v67;
      v98.origin.CGFloat x = v9;
      v98.origin.CGFloat y = v8;
      v98.size.CGFloat width = v7;
      v98.size.height = v6;
      double v69 = CGRectGetWidth(v98) - v66;
      goto LABEL_129;
    }
    double v7 = *(double *)(v27 + 16);
    double v6 = *(double *)(v27 + 24);
    a2 = *(void *)(v27 + 40);
    uint64_t v91 = *(void *)(v27 + 48);
    uint64_t v92 = *(void *)(v27 + 32);
    uint64_t v57 = *(void *)(v27 + 64);
    uint64_t v90 = *(void *)(v27 + 56);
    unint64_t v58 = *(void *)(v4 + 72);
    if (v58 >> 62)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
      if (!v59)
      {
LABEL_125:
        swift_bridgeObjectRelease();
        goto LABEL_126;
      }
    }
    else
    {
      uint64_t v59 = *(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v59) {
        goto LABEL_125;
      }
    }
    unint64_t v60 = v59 - 1;
    if (__OFSUB__(v59, 1)) {
      goto LABEL_136;
    }
    uint64_t v87 = v57;
    if ((v58 & 0xC000000000000001) != 0) {
      goto LABEL_137;
    }
    if ((v60 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_140;
    }
    if (v60 < *(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      break;
    }
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    uint64_t v49 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_unknownObjectRelease();
  }
  uint64_t v61 = *(void *)(v58 + 8 * v60 + 32);
  swift_retain();
  swift_bridgeObjectRelease();
  double v63 = *(double *)(v61 + 16);
  double v62 = *(double *)(v61 + 24);
  uint64_t v65 = *(void *)(v61 + 32);
  uint64_t v64 = *(void *)(v61 + 40);
  uint64_t v88 = *(void *)(v61 + 56);
  uint64_t v89 = *(void *)(v61 + 48);
  uint64_t v86 = *(void *)(v61 + 64);
  swift_bridgeObjectRetain();
  swift_release();
  if (v7 != v63) {
    goto LABEL_126;
  }
LABEL_113:
  if (v6 != v62) {
    goto LABEL_126;
  }
  if (v92 != v65 || a2 != v64)
  {
    char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v70) {
      goto LABEL_119;
    }
    goto LABEL_127;
  }
  swift_bridgeObjectRelease_n();
LABEL_119:
  if (v91 != v89 || v90 != v88 || v87 != v86 || !v25) {
    goto LABEL_127;
  }
  double v71 = a3;
  double v72 = *(double *)(v25 + 96);
LABEL_128:
  objc_msgSend((id)v17, "frame", v86);
  double v66 = v74;
  uint64_t v68 = v75;
  double v69 = v5 + v10 * v71 + v72;
LABEL_129:
  [(id)v17 frame];
  uint64_t v77 = *(void **)(v11 + 72);
  if (v77)
  {
    uint64_t v78 = v76;
    double v79 = *(double *)(v27 + 24) - *(double *)(v27 + 16);
    id v80 = self;
    uint64_t v81 = swift_allocObject();
    *(void *)(v81 + 16) = v77;
    *(double *)(v81 + 24) = v66;
    *(void *)(v81 + 32) = v68;
    *(double *)(v81 + 40) = v69;
    *(void *)(v81 + 48) = v78;
    aBlock[4] = partial apply for closure #1 in SyncedLyricsLineView.Line.LineView.animateGradient(frame:duration:);
    uint64_t aBlock[5] = v81;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_54;
    os_log_type_t v82 = _Block_copy(aBlock);
    id v83 = v77;
    swift_release();
    [v80 animateWithDuration:196609 delay:v82 options:0 animations:v79 completion:0.0];
    _Block_release(v82);
  }
  swift_release();
  swift_release_n();
  swift_release();
  swift_release();
  *(void *)(v11 + 88) = v27;
LABEL_132:
  swift_release();
LABEL_133:
  [(id)v17 setNeedsDisplay];
}

uint64_t SyncedLyricsLineView.Line.createView(font:color:kind:specs:simpleRender:direction:)(void *a1, void *a2, char a3, const void *a4, char a5, char a6)
{
  uint64_t v7 = v6;
  char v12 = a3 & 1;
  double v13 = *(double *)(v7 + 40);
  double v14 = *(double *)(v7 + 48);
  double v15 = *(double *)(v7 + 56);
  double v16 = *(double *)(v7 + 64);
  char v17 = a6 & 1;
  id v18 = objc_allocWithZone((Class)type metadata accessor for SyncedLyricsLineView.Line.LineView());
  id v19 = a2;
  outlined retain of SyncedLyricsViewController.Specs((uint64_t)a4);
  uint64_t v20 = SyncedLyricsLineView.Line.LineView.init(color:frame:kind:specs:direction:)(v19, v12, a4, v17, v13, v14, v15, v16);
  unint64_t v21 = *(void **)(v7 + 72);
  *(void *)(v7 + 72) = v20;
  double v22 = v20;

  id v23 = objc_msgSend(objc_allocWithZone((Class)UIView), "initWithFrame:", 0.0, 0.0, v15, v16);
  if (a5)
  {
    uint64_t v24 = *(void **)(v7 + 24);
    char v25 = *(unsigned char *)(v7 + 32);
    objc_allocWithZone((Class)type metadata accessor for CTLabel.Line());
    id v26 = CTLabel.Line.init(ctLine:size:useExtendedLineBounds:)(v24, v25, v15, v16);
    [v23 addSubview:v26];

LABEL_14:
    [v22 setMaskView:v23];

    return (uint64_t)v22;
  }
  unint64_t v27 = *(void *)(v7 + 16);
  if (!(v27 >> 62))
  {
    uint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v28) {
      goto LABEL_5;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v28 = result;
  if (!result) {
    goto LABEL_13;
  }
LABEL_5:
  if (v28 >= 1)
  {
    CGFloat v32 = v22;
    uint64_t v30 = 0;
    do
    {
      if ((v27 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      ++v30;
      CGFloat v31 = (void *)SyncedLyricsLineView.Word.createView(font:specs:)(a1, (uint64_t)a4);
      [v23 addSubview:v31];
      swift_release();
    }
    while (v28 != v30);
    swift_bridgeObjectRelease();
    double v22 = v32;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

double SyncedLyricsLineView.Line.startTime.getter()
{
  unint64_t v0 = swift_bridgeObjectRetain();
  unint64_t v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11MusicCoreUI20SyncedLyricsLineViewC4WordCG_Sds5NeverOTg504_s11de4UI20ghij24C0F0C9startTimeSdvgSdAC4K53Ccfu_32b380ca74e4ce11407eb7d686de6a427bAHSdTf3nnnpk_nTf1cn_n(v0);
  swift_bridgeObjectRelease();
  unint64_t v4 = (double *)v1;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)((char **)&v4);
  swift_bridgeObjectRelease();
  if (*((void *)v4 + 2)) {
    double v2 = v4[4];
  }
  else {
    double v2 = 0.0;
  }
  swift_release();
  return v2;
}

double SyncedLyricsLineView.Line.endTime.getter()
{
  unint64_t v0 = swift_bridgeObjectRetain();
  unint64_t v1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11MusicCoreUI20SyncedLyricsLineViewC4WordCG_Sds5NeverOTg504_s11de4UI20ghij22C0F0C7endTimeSdvgSdAC4K53Ccfu_32fac27a54bb52df9be2bed939b8ef4e59AHSdTf3nnnpk_nTf1cn_n(v0);
  swift_bridgeObjectRelease();
  double v5 = v1;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v5);
  swift_bridgeObjectRelease();
  uint64_t v2 = *((void *)v5 + 2);
  if (v2) {
    double v3 = *(double *)&v5[8 * v2 + 24];
  }
  else {
    double v3 = 0.0;
  }
  swift_release();
  return v3;
}

unint64_t SyncedLyricsLineView.Line.finishGradient(specs:direction:)(unint64_t result, char a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = *(void *)(v2 + 72);
  if (!v5) {
    return result;
  }
  uint64_t v6 = *(void **)(v5 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_gradientView);
  if (!v6) {
    return result;
  }
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(v4 + 16);
  if (v9 >> 62)
  {
    id v26 = v6;
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    if (v10)
    {
LABEL_5:
      unint64_t v12 = v10 - 1;
      if (__OFSUB__(v10, 1))
      {
        __break(1u);
      }
      else if ((v9 & 0xC000000000000001) == 0)
      {
        if ((v12 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v12 < *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          uint64_t v10 = *(void *)(v9 + 8 * v12 + 32);
          swift_retain();
          goto LABEL_10;
        }
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_10:
      swift_bridgeObjectRelease();
      unint64_t v3 = *(void *)(v10 + 72);
      if (!(v3 >> 62))
      {
        uint64_t v13 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v13) {
          goto LABEL_12;
        }
LABEL_30:

        swift_release();
        goto LABEL_31;
      }
LABEL_29:
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      if (v13)
      {
LABEL_12:
        uint64_t result = v13 - 1;
        if (__OFSUB__(v13, 1))
        {
          __break(1u);
        }
        else if ((v3 & 0xC000000000000001) == 0)
        {
          if ((result & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (result < *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            uint64_t v14 = *(void *)(v3 + 8 * result + 32);
            swift_retain();
            goto LABEL_17;
          }
          __break(1u);
          return result;
        }
        uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_17:
        swift_bridgeObjectRelease();
        if (*(unsigned char *)(v4 + 80))
        {

          swift_release();
          return swift_release();
        }
        else
        {
          char v15 = a2 & 1;
          [*(id *)(v8 + 168) lineHeight];
          double v17 = v16 * *(double *)(v8 + 224) + *(double *)(v8 + 352) + *(double *)(v8 + 352);
          double v18 = (v17 - CGRectGetHeight(*(CGRect *)(v4 + 40))) * 0.5;
          *(unsigned char *)(v4 + 80) = 1;
          id v19 = self;
          double v20 = *(double *)(v8 + 528);
          uint64_t v21 = swift_allocObject();
          *(unsigned char *)(v21 + 16) = v15;
          *(void *)(v21 + 24) = v6;
          *(double *)(v21 + 32) = v18;
          *(void *)(v21 + 40) = v10;
          *(void *)(v21 + 48) = v14;
          memcpy((void *)(v21 + 56), (const void *)v8, 0x219uLL);
          v27[4] = partial apply for closure #1 in SyncedLyricsLineView.Line.finishGradient(specs:direction:);
          v27[5] = v21;
          v27[0] = _NSConcreteStackBlock;
          v27[1] = 1107296256;
          v27[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
          void v27[3] = &block_descriptor_13_2;
          double v22 = _Block_copy(v27);
          id v23 = v6;
          swift_retain();
          swift_retain();
          outlined retain of SyncedLyricsViewController.Specs(v8);
          swift_release();
          [v19 animateWithDuration:196609 delay:v22 options:0 animations:v20 completion:0.0];
          _Block_release(v22);
          type metadata accessor for UIMenu(0, (unint64_t *)&_sSo17OS_dispatch_queueCML_1);
          uint64_t v24 = (void *)static OS_dispatch_queue.main.getter();
          uint64_t v25 = swift_allocObject();
          swift_weakInit();
          swift_retain();
          OS_dispatch_queue.asyncAfter(_:block:)((uint64_t)partial apply for closure #2 in SyncedLyricsLineView.Line.finishGradient(specs:direction:), v25);

          swift_release();
          swift_release();

          return swift_release_n();
        }
      }
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v11 = v6;
    swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_5;
    }
  }

LABEL_31:

  return swift_bridgeObjectRelease();
}

id closure #1 in SyncedLyricsLineView.Line.finishGradient(specs:direction:)(char a1, id a2, double a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    [a2 frame];
    [a2 setFrame:-a3];
  }
  CGRectGetMaxX(*(CGRect *)(a5 + 112));
  [a2 frame];

  return objc_msgSend(a2, "setFrame:");
}

uint64_t closure #1 in SyncedLyricsLineView.Line.resetGradient(specs:direction:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    *(unsigned char *)(result + 80) = 0;
    return swift_release();
  }
  return result;
}

uint64_t SyncedLyricsLineView.Line.currentWord(for:)(double a1)
{
  unint64_t v3 = *(void *)(v1 + 16);
  if (v3 >> 62) {
    goto LABEL_28;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v5 = 0;
    unint64_t v6 = v3 & 0xC000000000000001;
    while (1)
    {
      uint64_t v7 = v6 ? specialized _ArrayBuffer._getElementSlowPath(_:)() : swift_retain();
      uint64_t v8 = *(void *)(v7 + 32);
      uint64_t v9 = *(void *)(v8 + 16);
      if (v9)
      {
        double v10 = *(double *)(v8 + 32);
        double v11 = *(double *)(v8 + 32 + 56 * v9 - 48);
        swift_release();
        if (v10 > v11) {
          goto LABEL_26;
        }
      }
      else
      {
        swift_release();
        double v10 = 0.0;
        double v11 = 0.0;
      }
      if (v10 <= a1 && v11 > a1) {
        break;
      }
      unint64_t v13 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        goto LABEL_27;
      }
      ++v5;
      if (v13 == v4)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v6)
    {
      uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      if (!__OFADD__(v5, 1)) {
        goto LABEL_21;
      }
    }
    else
    {
      if (v5 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return result;
      }
      uint64_t v4 = *(void *)(v3 + 8 * v5 + 32);
      swift_retain();
      if (!__OFADD__(v5, 1))
      {
LABEL_21:
        uint64_t v15 = type metadata accessor for SyncedLyricsLineView.Word();
        Array.subscript.getter(v15, (uint64_t)&v16);
        return v4;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t SyncedLyricsLineView.Line.currentSyllable(for:)(double a1)
{
  unint64_t v2 = swift_bridgeObjectRetain();
  unint64_t v3 = (unint64_t)specialized Sequence.flatMap<A>(_:)(v2);
  swift_bridgeObjectRelease();
  if (v3 >> 62) {
    goto LABEL_24;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    unint64_t v5 = v3 & 0xC000000000000001;
    for (uint64_t i = 4; ; ++i)
    {
      uint64_t v7 = i - 4;
      if (v5) {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v8 = swift_retain();
      }
      double v9 = *(double *)(v8 + 16);
      double v10 = *(double *)(v8 + 24);
      swift_release();
      if (v9 > v10) {
        goto LABEL_22;
      }
      if (v9 <= a1 && v10 > a1) {
        break;
      }
      uint64_t v12 = i - 3;
      if (__OFADD__(v7, 1)) {
        goto LABEL_23;
      }
      if (v12 == v4)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    if (v5)
    {
      uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      if (!__OFADD__(v7, 1)) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v4 = *(void *)(v3 + 8 * i);
      swift_retain();
      if (!__OFADD__(v7, 1))
      {
LABEL_18:
        uint64_t v13 = type metadata accessor for SyncedLyricsLineView.Syllable();
        Array.subscript.getter(v13, (uint64_t)&v15);
        swift_bridgeObjectRelease();
        return v4;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v4;
}

char *SyncedLyricsLineView.Line.LineView.init(color:frame:kind:specs:direction:)(void *a1, char a2, const void *a3, char a4, double a5, double a6, double a7, double a8)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  a2 &= 1u;
  *(void *)&v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_backgroundColorLayer] = 0;
  *(void *)&v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_gradientView] = 0;
  v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_kind] = a2;
  memcpy(&v8[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_specs], a3, 0x219uLL);
  outlined retain of SyncedLyricsViewController.Specs((uint64_t)a3);
  v25.receiver = v8;
  v25.super_class = ObjectType;
  double v18 = (char *)objc_msgSendSuper2(&v25, "initWithFrame:", a5, a6, a7, a8);
  id v19 = [a1 CGColor];
  id v20 = SyncedLyricsLineView.Line.LineView.createBackgroundColorLayer(color:specs:)((uint64_t)v19, (uint64_t)a3);

  uint64_t v21 = *(void **)&v18[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_backgroundColorLayer];
  *(void *)&v18[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_backgroundColorLayer] = v20;

  double v22 = SyncedLyricsLineView.Line.LineView.createGradientView(kind:specs:direction:)(a2, (uint64_t)a3, a4 & 1);
  outlined release of SyncedLyricsViewController.Specs((uint64_t)a3);

  id v23 = *(void **)&v18[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_gradientView];
  *(void *)&v18[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_gradientView] = v22;

  return v18;
}

id SyncedLyricsLineView.Line.LineView.createBackgroundColorLayer(color:specs:)(uint64_t a1, uint64_t a2)
{
  id v5 = [objc_allocWithZone((Class)CALayer) init];
  [v5 setBackgroundColor:a1];
  [*(id *)(a2 + 168) lineHeight];
  double v7 = v6 * *(double *)(a2 + 224) + *(double *)(a2 + 352) + *(double *)(a2 + 352);
  [v2 frame];
  double v8 = (v7 - CGRectGetHeight(v14)) * 0.5;
  double v9 = -v8;
  [v2 frame];
  double v10 = v8 + v8;
  CGFloat v11 = CGRectGetWidth(v15) + v8 + v8;
  [v2 frame];
  objc_msgSend(v5, "setFrame:", v9, v9, v11, v10 + CGRectGetHeight(v16));
  id v12 = [v2 layer];
  [v12 addSublayer:v5];

  return v5;
}

char *SyncedLyricsLineView.Line.LineView.createGradientView(kind:specs:direction:)(char a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  [*(id *)(a2 + 168) lineHeight];
  double v9 = v8;
  double v10 = *(double *)(a2 + 224);
  double v11 = *(double *)(a2 + 352);
  [v4 frame];
  double Height = CGRectGetHeight(v21);
  uint64_t v13 = 384;
  if ((a1 & 1) == 0) {
    uint64_t v13 = 376;
  }
  double v14 = (v9 * v10 + v11 + v11 - Height) * 0.5;
  double v15 = *(double *)(a2 + 392);
  id v16 = *(id *)(a2 + v13);
  [v4 frame];
  double v17 = v14 + v14 + CGRectGetHeight(v22);
  id v18 = objc_allocWithZone((Class)type metadata accessor for LineProgressGradientView());
  id v19 = LineProgressGradientView.init(color:featherWidth:direction:frame:)(v16, a3 & 1, v15, -v14, -v14, v14, v17);
  [v4 addSubview:v19];
  return v19;
}

Swift::Void __swiftcall SyncedLyricsLineView.Line.LineView.tintColorDidChange()()
{
  v8.receiver = v0;
  v8.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v8, "tintColorDidChange");
  uint64_t v1 = *(char **)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_gradientView];
  if (v1)
  {
    if (v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_kind]) {
      unint64_t v2 = (void **)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_specs + 384];
    }
    else {
      unint64_t v2 = (void **)&v0[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_specs + 376];
    }
    unint64_t v3 = *v2;
    uint64_t v4 = *(void **)&v1[OBJC_IVAR____TtC11MusicCoreUI24LineProgressGradientView_color];
    *(void *)&v1[OBJC_IVAR____TtC11MusicCoreUI24LineProgressGradientView_color] = v3;
    id v5 = v3;
    double v6 = v1;
    type metadata accessor for UIMenu(0, (unint64_t *)&_sSo7UIColorCML_0);
    id v7 = v5;
    LOBYTE(v5) = static NSObject.== infix(_:_:)();

    if ((v5 & 1) == 0) {
      LineProgressGradientView.updateColors()();
    }
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall SyncedLyricsLineView.Line.LineView.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  Class isa = a1.value.super.isa;
  v10.receiver = v1;
  v10.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v10, "traitCollectionDidChange:", isa);
  unint64_t v3 = *(char **)&v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_gradientView];
  if (v3)
  {
    if (v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_kind]) {
      uint64_t v4 = (void **)&v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_specs + 384];
    }
    else {
      uint64_t v4 = (void **)&v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_specs + 376];
    }
    id v5 = *v4;
    double v6 = *(void **)&v3[OBJC_IVAR____TtC11MusicCoreUI24LineProgressGradientView_color];
    *(void *)&v3[OBJC_IVAR____TtC11MusicCoreUI24LineProgressGradientView_color] = v5;
    id v7 = v5;
    objc_super v8 = v3;
    type metadata accessor for UIMenu(0, (unint64_t *)&_sSo7UIColorCML_0);
    id v9 = v7;
    LOBYTE(v7) = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0) {
      LineProgressGradientView.updateColors()();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t SyncedLyricsLineView.Line.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SyncedLyricsLineView.Line()
{
  return self;
}

uint64_t type metadata accessor for SyncedLyricsLineView.Line.LineView()
{
  return self;
}

_UNKNOWN **associated type witness table accessor for ContainerVisualRepresentation.ContainedVisualRepresentationType : VisualRepresentation in SyncedLyricsLineView.Line()
{
  return &protocol witness table for SyncedLyricsLineView.Word;
}

char *_ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSnySiG_Tgq5_1(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&_ss23_ContiguousArrayStorageCySnySiGGMD_1);
    objc_super v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    objc_super v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  double v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *_ss12_ArrayBufferV20_consumeAndCreateNewAByxGyFSnySiG_Tgq5_1(uint64_t a1)
{
  return _ss12_ArrayBufferV20_consumeAndCreateNew14bufferIsUnique15minimumCapacity13growForAppendAByxGSb_SiSbtFSnySiG_Tgq5_1(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100321F98()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in SyncedLyricsLineView.Line.LineView.animateGradient(frame:duration:)()
{
  id result = *(id *)(*(void *)(v0 + 16)
                 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView4Line8LineView_gradientView);
  if (result) {
    return objc_msgSend(result, "setFrame:", *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
  }
  __break(1u);
  return result;
}

uint64_t block_copy_helper_52(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_52()
{
  return swift_release();
}

uint64_t sub_10032203C()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

id partial apply for closure #1 in SyncedLyricsLineView.Line.finishGradient(specs:direction:)()
{
  return closure #1 in SyncedLyricsLineView.Line.finishGradient(specs:direction:)(*(unsigned char *)(v0 + 16), *(id *)(v0 + 24), *(double *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_100322114()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in SyncedLyricsLineView.Line.finishGradient(specs:direction:)()
{
  return closure #1 in SyncedLyricsLineView.Line.resetGradient(specs:direction:)();
}

void *closure #1 in SyncedLyricsLineView.Syllable.animate(reversed:specs:)(void *result, char a2, uint64_t a3)
{
  unint64_t v3 = (void *)result[18];
  if (v3)
  {
    if (a2)
    {
      long long v4 = xmmword_100493E70;
      long long v5 = xmmword_1004A3B00;
      long long v6 = 0uLL;
    }
    else
    {
      CGAffineTransformMakeTranslation(&v7, 0.0, -*(double *)(a3 + 504));
      long long v5 = *(_OWORD *)&v7.a;
      long long v4 = *(_OWORD *)&v7.c;
      long long v6 = *(_OWORD *)&v7.tx;
    }
    *(_OWORD *)&v7.a = v5;
    *(_OWORD *)&v7.c = v4;
    *(_OWORD *)&v7.tCGFloat x = v6;
    return [v3 setTransform:&v7];
  }
  return result;
}

void closure #2 in SyncedLyricsLineView.Syllable.animate(reversed:specs:)(uint64_t a1, uint64_t a2, char a3)
{
  if (!a1)
  {
    unint64_t v3 = *(void **)(a2 + 96);
    *(void *)(a2 + 96) = (a3 & 1) == 0;
    unsigned __int8 v4 = *(unsigned char *)(a2 + 104);
    *(unsigned char *)(a2 + 104) = 2;
    outlined consume of AnimationStatus(v3, v4);
  }
}

id SyncedLyricsLineView.Syllable.SyllableView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SyncedLyricsLineView.Syllable.SyllableView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t SyncedLyricsLineView.Syllable.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of AnimationStatus(*(id *)(v0 + 96), *(unsigned char *)(v0 + 104));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SyncedLyricsLineView.Syllable()
{
  return self;
}

uint64_t type metadata accessor for SyncedLyricsLineView.Syllable.SyllableView()
{
  return self;
}

_UNKNOWN **associated type witness table accessor for ContainerVisualRepresentation.ContainedVisualRepresentationType : VisualRepresentation in SyncedLyricsLineView.Syllable()
{
  return &protocol witness table for SyncedLyricsLineView.Glyph;
}

void specialized SyncedLyricsLineView.Syllable.resetLift(specs:)()
{
  uint64_t v1 = v0;
  Class isa = *(Class *)(v0 + 96);
  int v3 = *(unsigned __int8 *)(v1 + 104);
  if (v3 == 1)
  {
    if (isa)
    {
LABEL_9:
      outlined copy of AnimationStatus(isa, v3);
      [(objc_class *)isa stopAnimation:1];
      goto LABEL_10;
    }
  }
  else
  {
    if (*(unsigned char *)(v1 + 104)) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = isa == 0;
    }
    if (!v4) {
      goto LABEL_9;
    }
  }
  type metadata accessor for UIViewPropertyAnimator();
  Class isa = UIViewPropertyAnimator.init(springTimingParameters:)((UISpringTimingParameters)objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", 1.0, 14.0, 7.0, 0.0, 0.0)).super.isa;
LABEL_10:
  double v14 = partial apply for closure #1 in SyncedLyricsLineView.Syllable.resetLift(specs:);
  uint64_t v15 = v1;
  objc_super v10 = _NSConcreteStackBlock;
  uint64_t v11 = 1107296256;
  uint64_t v12 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  uint64_t v13 = &block_descriptor_55;
  long long v5 = _Block_copy(&v10);
  swift_retain();
  swift_release();
  [(objc_class *)isa addAnimations:v5];
  _Block_release(v5);
  double v14 = partial apply for closure #2 in SyncedLyricsLineView.Syllable.resetLift(specs:);
  uint64_t v15 = v1;
  objc_super v10 = _NSConcreteStackBlock;
  uint64_t v11 = 1107296256;
  uint64_t v12 = thunk for @escaping @callee_guaranteed (@unowned UIViewAnimatingPosition) -> ();
  uint64_t v13 = &block_descriptor_10_1;
  long long v6 = _Block_copy(&v10);
  swift_retain();
  swift_release();
  [(objc_class *)isa addCompletion:v6];
  _Block_release(v6);
  CGAffineTransform v7 = *(void **)(v1 + 96);
  *(void *)(v1 + 96) = isa;
  unsigned __int8 v8 = *(unsigned char *)(v1 + 104);
  *(unsigned char *)(v1 + 104) = 1;
  uint64_t v9 = isa;
  outlined consume of AnimationStatus(v7, v8);
  [(objc_class *)v9 startAnimation];
}

id partial apply for closure #1 in SyncedLyricsLineView.Syllable.resetLift(specs:)()
{
  id result = *(id *)(v0 + 144);
  if (result)
  {
    v2[0] = 0x3FF0000000000000;
    v2[1] = 0;
    _OWORD v2[2] = 0;
    _OWORD v2[3] = 0x3FF0000000000000;
    v2[4] = 0;
    v2[5] = 0;
    return [result setTransform:v2];
  }
  return result;
}

uint64_t block_copy_helper_53(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_53()
{
  return swift_release();
}

void partial apply for closure #2 in SyncedLyricsLineView.Syllable.resetLift(specs:)(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = *(void **)(v1 + 96);
    *(void *)(v1 + 96) = 0;
    unsigned __int8 v3 = *(unsigned char *)(v1 + 104);
    *(unsigned char *)(v1 + 104) = 2;
    outlined consume of AnimationStatus(v2, v3);
  }
}

Swift::Void __swiftcall SyncedLyricsLineView.Word.resetAnimation()()
{
  unint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 128);
  if (v2)
  {
    id v3 = [v2 layer];
    [v3 removeAllAnimations];
  }
  if (*(void *)(v1 + 136))
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  *(void *)(v1 + 136) = 0;
  swift_release();
  BOOL v4 = *(void **)(v1 + 128);
  if (v4)
  {
    id v5 = v4;
    SyncedLyricsLineView.Word.WordView.resetGlow()();
  }
  unint64_t v6 = swift_bridgeObjectRetain();
  unint64_t v7 = (unint64_t)specialized Sequence.flatMap<A>(_:)(v6);
  swift_bridgeObjectRelease();
  if (v7 >> 62) {
    goto LABEL_34;
  }
  uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v8)
  {
    unint64_t v9 = 0;
    uint64_t v32 = v8;
    unint64_t v31 = v1;
    while (1)
    {
      if ((v7 & 0xC000000000000001) != 0)
      {
        double v14 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v15 = __OFADD__(v9++, 1);
        if (v15) {
          break;
        }
        goto LABEL_17;
      }
      if (v9 >= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_33;
      }
      double v14 = *(void **)(v7 + 32 + 8 * v9);
      swift_retain();
      BOOL v15 = __OFADD__(v9++, 1);
      if (v15) {
        break;
      }
LABEL_17:
      id v16 = (char *)v14[8];
      if (v16)
      {
        uint64_t v17 = v14[4];
        uint64_t v18 = v14[5];
        uint64_t v19 = v14[6];
        uint64_t v20 = v14[7];
        CGRect v21 = &v16[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView5Glyph9GlyphView_currentAnimators];
        swift_beginAccess();
        unint64_t v22 = *(void *)v21;
        if (v22 >> 62)
        {
          uint64_t v28 = v16;
          swift_bridgeObjectRetain();
          uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
          if (!v23) {
            goto LABEL_10;
          }
        }
        else
        {
          uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v24 = v16;
          swift_bridgeObjectRetain();
          if (!v23) {
            goto LABEL_10;
          }
        }
        if (v23 < 1) {
          goto LABEL_32;
        }
        uint64_t v25 = 0;
        unint64_t v1 = v22 & 0xC000000000000001;
        do
        {
          if (v1) {
            id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v26 = *(id *)(v22 + 8 * v25 + 32);
          }
          unint64_t v27 = v26;
          ++v25;
          objc_msgSend(v26, "stopAnimation:", 0, v31);
        }
        while (v23 != v25);
LABEL_10:
        swift_bridgeObjectRelease();
        SyncedLyricsLineView.Glyph.GlyphView.purgeAnimators()();
        objc_super v10 = (double *)CGPoint.center.unsafeMutableAddressor();
        swift_beginAccess();
        UIView.setAnchorPoint(_:preserveFrame:)(1, *v10, v10[1]);
        type metadata accessor for UIMenu(0, (unint64_t *)&_sSo6UIViewCML_0);
        type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for UISpringTimingParameters);
        id v11 = UISpringTimingParameters.init(dampingRatio:response:)(1.0, 1.5);
        uint64_t v12 = (void *)swift_allocObject();
        void v12[2] = v16;
        unint64_t v12[3] = v17;
        void v12[4] = v18;
        v12[5] = v19;
        void v12[6] = v20;
        uint64_t v13 = v16;
        static UIView.animate(withSpringTimingParameters:delay:options:animations:completion:)(v11, 0, partial apply for closure #1 in SyncedLyricsLineView.Glyph.GlyphView.reset(frame:), (uint64_t)v12, 0, 0, 0.0);

        swift_release();
        [v13 sizeToFit];
        swift_release();

        uint64_t v8 = v32;
        if (v9 == v32) {
          goto LABEL_30;
        }
      }
      else
      {
        swift_release();
        if (v9 == v8)
        {
LABEL_30:
          swift_bridgeObjectRelease();
          unint64_t v1 = v31;
          goto LABEL_36;
        }
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
LABEL_36:
  uint64_t v29 = *(void **)(v1 + 80);
  *(void *)(v1 + 80) = 0;
  unsigned __int8 v30 = *(unsigned char *)(v1 + 88);
  *(unsigned char *)(v1 + 88) = 2;
  outlined consume of AnimationStatus(v29, v30);
}

void SyncedLyricsLineView.Word.animate(progress:specs:)(uint64_t a1, double a2)
{
  uint64_t v4 = v2;
  double v104 = *(double *)&a1;
  __swift_instantiateConcreteTypeFromMangledName(&_sScPSgMD_2);
  __chkstk_darwin();
  CGRect v99 = (char *)v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v105 = *(double *)(v2 + 72);
  if (*(void *)&v105 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((*(void *)&v105 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_3:
      *(void *)&double v106 = v7 - 1;
      if (v7 < 1) {
        goto LABEL_69;
      }
      uint64_t v100 = v4;
      uint64_t v8 = 0;
      double v10 = v104;
      double v9 = v105;
      unint64_t v11 = *(void *)&v105 & 0xC000000000000001;
      while (1)
      {
        if (v11)
        {
          uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v12 = *(void *)(*(void *)&v9 + 8 * v8 + 32);
          swift_retain();
        }
        double v13 = *(double *)(v12 + 16);
        BOOL v14 = v13 <= a2;
        if (*(unsigned __int8 *)(v12 + 104) >= 2u)
        {
          if (*(void *)(v12 + 96))
          {
            if (v13 <= a2) {
              goto LABEL_5;
            }
            BOOL v14 = 0;
          }
          else if (v13 > a2)
          {
LABEL_5:
            swift_release();
            if (*(void *)&v106 == v8) {
              goto LABEL_25;
            }
            goto LABEL_6;
          }
        }
        outlined consume of AnimationStatus((id)v14, 2u);
        Class isa = *(Class *)(v12 + 96);
        int v16 = *(unsigned __int8 *)(v12 + 104);
        if (v16 == 1)
        {
          if (isa && v13 <= a2)
          {
LABEL_22:
            outlined copy of AnimationStatus(*(id *)(v12 + 96), v16);
            [(objc_class *)isa stopAnimation:1];
            goto LABEL_24;
          }
        }
        else if (!*(unsigned char *)(v12 + 104) && isa && v13 > a2)
        {
          goto LABEL_22;
        }
        type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for UIViewPropertyAnimator);
        Class isa = UIViewPropertyAnimator.init(springTimingParameters:)((UISpringTimingParameters)objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", 1.0, 14.0, 7.0, 0.0, 0.0)).super.isa;
LABEL_24:
        uint64_t v17 = swift_allocObject();
        *(void *)(v17 + 16) = v12;
        *(unsigned char *)(v17 + 24) = v13 > a2;
        memcpy((void *)(v17 + 32), *(const void **)&v10, 0x219uLL);
        unint64_t v111 = partial apply for closure #1 in SyncedLyricsLineView.Syllable.animate(reversed:specs:);
        uint64_t v112 = v17;
        uint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v108 = 1107296256;
        id v109 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
        uint64_t v110 = &block_descriptor_56;
        uint64_t v18 = _Block_copy(&aBlock);
        swift_retain();
        outlined retain of SyncedLyricsViewController.Specs(*(uint64_t *)&v10);
        swift_release();
        [(objc_class *)isa addAnimations:v18];
        _Block_release(v18);
        uint64_t v19 = swift_allocObject();
        *(void *)(v19 + 16) = v12;
        *(unsigned char *)(v19 + 24) = v13 > a2;
        unint64_t v111 = partial apply for closure #2 in SyncedLyricsLineView.Syllable.animate(reversed:specs:);
        uint64_t v112 = v19;
        uint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v108 = 1107296256;
        id v109 = thunk for @escaping @callee_guaranteed (@unowned UIViewAnimatingPosition) -> ();
        uint64_t v110 = &block_descriptor_12_3;
        uint64_t v20 = _Block_copy(&aBlock);
        swift_retain();
        swift_release();
        [(objc_class *)isa addCompletion:v20];
        _Block_release(v20);
        CGRect v21 = *(void **)(v12 + 96);
        *(void *)(v12 + 96) = isa;
        unsigned __int8 v22 = *(unsigned char *)(v12 + 104);
        *(unsigned char *)(v12 + 104) = v13 > a2;
        uint64_t v23 = isa;
        outlined consume of AnimationStatus(v21, v22);
        [(objc_class *)v23 startAnimation];
        swift_release();

        double v9 = v105;
        if (*(void *)&v106 == v8)
        {
LABEL_25:
          swift_bridgeObjectRelease();
          uint64_t v4 = v100;
          goto LABEL_28;
        }
LABEL_6:
        ++v8;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_28:
  uint64_t v24 = *(void *)(v4 + 32);
  uint64_t v25 = *(void *)(v24 + 16);
  if (v25)
  {
    if (*(double *)(v24 + 32) <= a2)
    {
LABEL_72:
      if (*(double *)(v24 + 32) > a2) {
        return;
      }
      goto LABEL_75;
    }
  }
  else if (a2 >= 0.0)
  {
    goto LABEL_74;
  }
  if (*(unsigned char *)(v4 + 88) == 2 && !*(void *)(v4 + 80))
  {
    if (v25) {
      goto LABEL_72;
    }
    goto LABEL_74;
  }
  id v26 = *(void **)(v4 + 128);
  if (v26)
  {
    id v27 = [v26 layer];
    [v27 removeAllAnimations];
  }
  if (*(void *)(v4 + 136))
  {
    swift_retain();
    Task.cancel()();
    swift_release();
  }
  *(void *)(v4 + 136) = 0;
  swift_release();
  uint64_t v28 = *(void **)(v4 + 128);
  if (v28)
  {
    id v29 = v28;
    SyncedLyricsLineView.Word.WordView.resetGlow()();
  }
  uint64_t v98 = v24;
  unint64_t v30 = swift_bridgeObjectRetain();
  unint64_t v3 = (unint64_t)specialized Sequence.flatMap<A>(_:)(v30);
  v97[1] = 0;
  swift_bridgeObjectRelease();
  uint64_t v100 = v4;
  if (v3 >> 62) {
    goto LABEL_70;
  }
  uint64_t v31 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v31)
  {
LABEL_45:
    unint64_t v32 = 0;
    *(void *)&double v106 = v3 & 0xC000000000000001;
    uint64_t v102 = v3 & 0xFFFFFFFFFFFFFF8;
    os_log_type_t v101 = (void *)(v3 + 32);
    for (i = v31; i != v32; uint64_t v31 = i)
    {
      while (1)
      {
        if (v106 == 0.0)
        {
          if (v32 >= *(void *)(v102 + 16)) {
            goto LABEL_68;
          }
          unint64_t v37 = (void *)v101[v32];
          swift_retain();
          BOOL v38 = __OFADD__(v32++, 1);
          if (v38)
          {
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            swift_bridgeObjectRetain();
            uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v31) {
              goto LABEL_71;
            }
            goto LABEL_45;
          }
        }
        else
        {
          unint64_t v37 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v38 = __OFADD__(v32++, 1);
          if (v38) {
            goto LABEL_66;
          }
        }
        uint64_t v39 = (char *)v37[8];
        if (v39) {
          break;
        }
        swift_release();
        if (v32 == v31) {
          goto LABEL_71;
        }
      }
      uint64_t v40 = v37[4];
      uint64_t v41 = v37[5];
      uint64_t v42 = v37[6];
      uint64_t v43 = v37[7];
      unint64_t v44 = &v39[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView5Glyph9GlyphView_currentAnimators];
      swift_beginAccess();
      unint64_t v45 = *(void *)v44;
      if (v45 >> 62)
      {
        uint64_t v51 = v39;
        swift_bridgeObjectRetain();
        uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
        if (!v46) {
          goto LABEL_46;
        }
      }
      else
      {
        uint64_t v46 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v47 = v39;
        swift_bridgeObjectRetain();
        if (!v46) {
          goto LABEL_46;
        }
      }
      if (v46 < 1) {
        goto LABEL_67;
      }
      for (uint64_t j = 0; j != v46; ++j)
      {
        if ((v45 & 0xC000000000000001) != 0) {
          id v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v49 = *(id *)(v45 + 8 * j + 32);
        }
        uint64_t v50 = v49;
        [v49 stopAnimation:0];
      }
LABEL_46:
      swift_bridgeObjectRelease();
      SyncedLyricsLineView.Glyph.GlyphView.purgeAnimators()();
      CGFloat v33 = (double *)CGPoint.center.unsafeMutableAddressor();
      swift_beginAccess();
      UIView.setAnchorPoint(_:preserveFrame:)(1, *v33, v33[1]);
      type metadata accessor for UIMenu(0, (unint64_t *)&_sSo6UIViewCML_0);
      type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for UISpringTimingParameters);
      id v34 = UISpringTimingParameters.init(dampingRatio:response:)(1.0, 1.5);
      id v35 = (void *)swift_allocObject();
      v35[2] = v39;
      v35[3] = v40;
      v35[4] = v41;
      v35[5] = v42;
      v35[6] = v43;
      id v36 = v39;
      static UIView.animate(withSpringTimingParameters:delay:options:animations:completion:)(v34, 0, partial apply for closure #1 in SyncedLyricsLineView.Glyph.GlyphView.reset(frame:), (uint64_t)v35, 0, 0, 0.0);

      swift_release();
      [v36 sizeToFit];
      swift_release();
    }
  }
LABEL_71:
  swift_bridgeObjectRelease();
  uint64_t v4 = v100;
  uint64_t v52 = *(void **)(v100 + 80);
  *(void *)(v100 + 80) = 0;
  unsigned __int8 v53 = *(unsigned char *)(v4 + 88);
  *(unsigned char *)(v4 + 88) = 2;
  outlined consume of AnimationStatus(v52, v53);
  uint64_t v24 = v98;
  if (*(void *)(v98 + 16)) {
    goto LABEL_72;
  }
LABEL_74:
  if (a2 < 0.0) {
    return;
  }
LABEL_75:
  if (*(unsigned char *)(v4 + 88) == 2 && !*(void *)(v4 + 80) && (*(unsigned char *)(v4 + 48) & 1) == 0)
  {
    double v54 = *(double *)(v4 + 40);
    unint64_t v55 = swift_bridgeObjectRetain();
    unint64_t v56 = (unint64_t)specialized Sequence.flatMap<A>(_:)(v55);
    swift_bridgeObjectRelease();
    uint64_t v57 = *(void *)(v24 + 16);
    if (v57) {
      double v58 = *(double *)(v24 + 32 + 56 * v57 - 48) - *(double *)(v24 + 32);
    }
    else {
      double v58 = 0.0;
    }
    if (v56 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v59 < 1) {
        goto LABEL_105;
      }
    }
    else
    {
      uint64_t v59 = *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v59 < 1) {
        goto LABEL_105;
      }
    }
    if (v58 > 0.0)
    {
      unint64_t v60 = *(void **)(v4 + 80);
      *(void *)(v4 + 80) = 0;
      unsigned __int8 v61 = *(unsigned char *)(v4 + 88);
      *(unsigned char *)(v4 + 88) = 0;
      outlined consume of AnimationStatus(v60, v61);
      double v62 = *(void **)(v4 + 128);
      uint64_t v63 = *(void *)&v104;
      if (v62)
      {
        id v64 = v62;
        SyncedLyricsLineView.Word.WordView.glow(factor:duration:specs:)(v63, v54, v58);
      }
      uint64_t v65 = type metadata accessor for TaskPriority();
      uint64_t v66 = (uint64_t)v99;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v99, 1, 1, v65);
      uint64_t v67 = swift_allocObject();
      swift_weakInit();
      uint64_t v68 = swift_allocObject();
      *(void *)(v68 + 16) = 0;
      *(void *)(v68 + 24) = 0;
      *(void *)(v68 + 32) = v67;
      *(double *)(v68 + 40) = v58;
      *(void *)(v4 + 136) = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5_1(v66, (uint64_t)&async function pointer to partial apply for closure #1 in SyncedLyricsLineView.Word.animate(progress:specs:), v68);
      swift_release();
      double v69 = (double)v59;
      double v70 = v58 / (double)v59 * 0.4;
      if (v70 > 0.4) {
        double v70 = 0.4;
      }
      double v106 = v70;
      double v71 = *(double *)(v63 + 216) + v54 * (*(double *)(v63 + 224) - *(double *)(v63 + 216));
      if (v58 <= 3.0) {
        double v72 = v58;
      }
      else {
        double v72 = 3.0;
      }
      type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for UISpringTimingParameters);
      id v73 = UISpringTimingParameters.init(dampingRatio:response:)(1.0, v72);
      double v75 = *(double *)(v4 + 112);
      double v74 = *(double *)(v4 + 120);
      CGSize.scaled(_:)();
      double v77 = v76;
      double v79 = v78;
      if (v56 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v80 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        double v81 = v104;
        if (!v80)
        {
LABEL_104:

          goto LABEL_105;
        }
      }
      else
      {
        uint64_t v80 = *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
        double v81 = v104;
        if (!v80) {
          goto LABEL_104;
        }
      }
      if (v80 < 1)
      {
        __break(1u);
        return;
      }
      uint64_t v82 = 0;
      double v83 = v69 * 0.5;
      double v84 = (v75 - v77) * 0.5;
      double v85 = v74 - v79;
      double v86 = *(double *)(*(void *)&v81 + 504);
      double v104 = v58 / v83;
      double v105 = v84;
      do
      {
        while (1)
        {
          if ((v56 & 0xC000000000000001) != 0)
          {
            uint64_t v87 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v87 = *(void *)(v56 + 8 * v82 + 32);
            swift_retain();
          }
          ++v82;
          uint64_t v88 = *(void **)(v87 + 64);
          if (v88)
          {
            double v89 = *(double *)(v87 + 32);
            double v90 = *(double *)(v87 + 40);
            double v91 = (v89 + v105 + v71 * v89) * 0.5;
            double v92 = v106 * (double)v82;
            id v93 = v88;
            SyncedLyricsLineView.Glyph.GlyphView.grow(springTimingParameters:position:factor:delay:)(v73, v91, (v90 + v85 + v71 * v90) * 0.25 - v86, v71, v92);

            uint64_t v94 = *(void **)(v87 + 64);
            if (v94) {
              break;
            }
          }
          swift_release();
          if (v80 == v82) {
            goto LABEL_104;
          }
        }
        double v95 = v104 + v92;
        id v96 = v94;
        SyncedLyricsLineView.Glyph.GlyphView.degrow(springTimingParameters:position:delay:)(v73, v89, v90 - v86, v95);
        swift_release();
      }
      while (v80 != v82);
      goto LABEL_104;
    }
LABEL_105:
    swift_bridgeObjectRelease();
  }
}

uint64_t SyncedLyricsLineView.Word.createView(font:specs:)(void *a1, uint64_t a2)
{
  unint64_t v3 = v2;
  id v5 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SyncedLyricsLineView.Word.WordView()), "initWithFrame:", v2[12], v2[13], v2[14], v2[15]);
  uint64_t v6 = *(void **)(a2 + 344);
  UIView.Shadow.init(color:opacity:radius:offset:)((uint64_t)v6, (uint64_t)v53, 0.0, *(double *)(a2 + 352), 0.0, 0.0);
  id v7 = v6;
  id v8 = [v5 layer];
  id v9 = [v5 traitCollection];
  [v9 displayScale];
  double v11 = v10;

  [v8 setRasterizationScale:v11];
  id v12 = [v5 layer];
  [v12 setShouldRasterize:1];

  id v13 = v5;
  outlined retain of ICMusicSubscriptionStatus?(v53);
  UIView.shadow.setter((uint64_t)v53);

  BOOL v14 = (void *)*((void *)v3 + 16);
  *((void *)v3 + 16) = v13;
  id v15 = v13;

  if (!*((void *)v3 + 16))
  {
    int v16 = (void *)*((void *)v3 + 10);
    v3[10] = 0.0;
    unsigned __int8 v17 = *((unsigned char *)v3 + 88);
    *((unsigned char *)v3 + 88) = 2;
    outlined consume of AnimationStatus(v16, v17);
  }

  unint64_t v18 = *((void *)v3 + 9);
  if (((_BYTE)v3[6] & 1) == 0)
  {
    unint64_t v33 = swift_bridgeObjectRetain();
    unint64_t v34 = (unint64_t)specialized Sequence.flatMap<A>(_:)(v33);
    uint64_t result = swift_bridgeObjectRelease();
    if (v34 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v35) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v35 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v35) {
        goto LABEL_21;
      }
    }
    if (v35 >= 1)
    {
      uint64_t v36 = 0;
      do
      {
        if ((v34 & 0xC000000000000001) != 0)
        {
          unint64_t v37 = (double *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          unint64_t v37 = *(double **)(v34 + 8 * v36 + 32);
          swift_retain();
        }
        ++v36;
        double v38 = v37[4];
        double v39 = v37[5];
        double v40 = v37[6];
        double v41 = v37[7];
        uint64_t v42 = (objc_class *)type metadata accessor for SyncedLyricsLineView.Glyph.GlyphView();
        uint64_t v43 = (char *)objc_allocWithZone(v42);
        *(void *)&v43[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView5Glyph9GlyphView_currentAnimators] = _swiftEmptyArrayStorage;
        v52.receiver = v43;
        v52.super_class = v42;
        id v44 = a1;
        swift_bridgeObjectRetain();
        id v45 = objc_msgSendSuper2(&v52, "initWithFrame:", v38, v39, v40, v41);
        NSString v46 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v45 setText:v46];

        [v45 setFont:v44];
        [v45 setTextAlignment:0];
        id v47 = v45;
        [v47 sizeToFit];

        unint64_t v48 = (void *)*((void *)v37 + 8);
        *((void *)v37 + 8) = v47;
        id v49 = v47;

        [v15 addSubview:v49];
        swift_release();
      }
      while (v35 != v36);
      goto LABEL_21;
    }
    goto LABEL_25;
  }
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v19 = result;
    if (result) {
      goto LABEL_6;
    }
LABEL_21:
    swift_bridgeObjectRelease();
    outlined release of UIView.Shadow(v53);
    return (uint64_t)v15;
  }
  uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v19) {
    goto LABEL_21;
  }
LABEL_6:
  if (v19 >= 1)
  {
    uint64_t v21 = 0;
    do
    {
      if ((v18 & 0xC000000000000001) != 0)
      {
        uint64_t v22 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v22 = *(void *)(v18 + 8 * v21 + 32);
        swift_retain();
      }
      ++v21;
      double v23 = *(double *)(v22 + 112);
      double v24 = *(double *)(v22 + 120);
      double v25 = *(double *)(v22 + 136);
      double v26 = *(double *)(v22 + 128) + 50.0;
      id v27 = (objc_class *)type metadata accessor for SyncedLyricsLineView.Syllable.SyllableView();
      v51.receiver = objc_allocWithZone(v27);
      v51.super_class = v27;
      swift_bridgeObjectRetain();
      id v28 = a1;
      id v29 = objc_msgSendSuper2(&v51, "initWithFrame:", v23, v24, v26, v25);
      NSString v30 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v29 setText:v30];

      [v29 setFont:v28];
      [v29 setTextAlignment:0];

      uint64_t v31 = *(void **)(v22 + 144);
      *(void *)(v22 + 144) = v29;
      id v32 = v29;

      [v15 addSubview:v32];
      swift_release();
    }
    while (v19 != v21);
    goto LABEL_21;
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

Swift::Void __swiftcall SyncedLyricsLineView.Word.WordView.resetGlow()()
{
  unint64_t v1 = v0;
  type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for UISpringTimingParameters);
  id v2 = UISpringTimingParameters.init(dampingRatio:response:)(1.0, 1.5);
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [self animationWithKeyPath:v3];

  id v5 = v4;
  [v2 settlingDuration];
  objc_msgSend(v5, "setDuration:");

  id v6 = v2;
  CASpringAnimation.springParameters.setter(v6);
  id v7 = v5;
  id v8 = [v1 layer];
  [v8 shadowOpacity];

  Class isa = Float._bridgeToObjectiveC()().super.super.isa;
  [v7 setFromValue:isa];

  id v10 = v7;
  Class v11 = Int._bridgeToObjectiveC()().super.super.isa;
  [v10 setToValue:v11];

  id v12 = [v1 layer];
  id v13 = [v10 keyPath];
  [v12 addAnimation:v10 forKey:v13];

  id v14 = [v1 layer];
  [v14 setShadowOpacity:0.0];
}

void SyncedLyricsLineView.Word.WordView.glow(factor:duration:specs:)(uint64_t a1, double a2, double a3)
{
  id v4 = v3;
  float v5 = *(double *)(a1 + 360) + (*(double *)(a1 + 368) - *(double *)(a1 + 360)) * a2;
  if (a3 <= 3.0) {
    double v6 = a3;
  }
  else {
    double v6 = 3.0;
  }
  type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for UISpringTimingParameters);
  id v7 = UISpringTimingParameters.init(dampingRatio:response:)(1.0, v6);
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [self animationWithKeyPath:v8];

  id v10 = v9;
  [v7 settlingDuration];
  objc_msgSend(v10, "setDuration:");

  id v11 = v7;
  CASpringAnimation.springParameters.setter(v11);
  id v12 = v10;
  id v13 = [v4 layer];
  [v13 shadowOpacity];

  Class isa = Float._bridgeToObjectiveC()().super.super.isa;
  [v12 setFromValue:isa];

  Class v15 = Float._bridgeToObjectiveC()().super.super.isa;
  [v12 setToValue:v15];

  id v16 = [v4 layer];
  id v17 = [v12 keyPath];
  [v16 addAnimation:v12 forKey:v17];

  id v19 = [v4 layer];
  *(float *)&double v18 = v5;
  [v19 setShadowOpacity:v18];
}

uint64_t closure #1 in SyncedLyricsLineView.Word.animate(progress:specs:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(double *)(v5 + 96) = a1;
  *(void *)(v5 + 88) = a5;
  return _swift_task_switch(closure #1 in SyncedLyricsLineView.Word.animate(progress:specs:), 0, 0);
}

uint64_t closure #1 in SyncedLyricsLineView.Word.animate(progress:specs:)()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    id v2 = *(void **)(Strong + 128);
    v0[13] = v2;
    if (v2)
    {
      v2;
      swift_release();
      Class v15 = (uint64_t (*)(__n128))((char *)&async function pointer to specialized SyncedLyricsLineView.Word.WordView.deglow(duration:after:)
                                           + async function pointer to specialized SyncedLyricsLineView.Word.WordView.deglow(duration:after:));
      NSString v3 = (void *)swift_task_alloc();
      v0[14] = v3;
      *NSString v3 = v0;
      v3[1] = closure #1 in SyncedLyricsLineView.Word.animate(progress:specs:);
      v4.n128_u64[0] = v0[12];
      return v15(v4);
    }
    swift_release();
  }
  swift_beginAccess();
  uint64_t v6 = swift_weakLoadStrong();
  if (!v6
    || ((v7 = *(void *)(v6 + 80), int v8 = *(unsigned __int8 *)(v6 + 88), swift_release(), v8 == 2)
      ? (BOOL v9 = v7 == 0)
      : (BOOL v9 = 0),
        !v9))
  {
    swift_beginAccess();
    uint64_t v10 = swift_weakLoadStrong();
    if (v10)
    {
      uint64_t v11 = v10;
      id v12 = *(void **)(v10 + 80);
      *(void *)(v11 + 80) = 1;
      unsigned __int8 v13 = *(unsigned char *)(v11 + 88);
      *(unsigned char *)(v11 + 88) = 2;
      outlined consume of AnimationStatus(v12, v13);
      swift_release();
    }
  }
  id v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  unint64_t v1 = *(void **)(*(void *)v0 + 104);
  swift_task_dealloc();

  return _swift_task_switch(closure #1 in SyncedLyricsLineView.Word.animate(progress:specs:), 0, 0);
}

{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong
    || ((v2 = *(void *)(Strong + 80), NSString v3 = *(unsigned __int8 *)(Strong + 88), swift_release(), v3 == 2)
      ? (__n128 v4 = v2 == 0)
      : (__n128 v4 = 0),
        !v4))
  {
    swift_beginAccess();
    uint64_t v5 = swift_weakLoadStrong();
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void **)(v5 + 80);
      *(void *)(v6 + 80) = 1;
      int v8 = *(unsigned char *)(v6 + 88);
      *(unsigned char *)(v6 + 88) = 2;
      outlined consume of AnimationStatus(v7, v8);
      swift_release();
    }
  }
  BOOL v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t SyncedLyricsLineView.Word.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of AnimationStatus(*(id *)(v0 + 80), *(unsigned char *)(v0 + 88));

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SyncedLyricsLineView.Word()
{
  return self;
}

uint64_t type metadata accessor for SyncedLyricsLineView.Word.WordView()
{
  return self;
}

_UNKNOWN **associated type witness table accessor for ContainerVisualRepresentation.ContainedVisualRepresentationType : VisualRepresentation in SyncedLyricsLineView.Word()
{
  return &protocol witness table for SyncedLyricsLineView.Syllable;
}

uint64_t sub_100324630()
{
  swift_release();

  return swift_deallocObject();
}

void *partial apply for closure #1 in SyncedLyricsLineView.Syllable.animate(reversed:specs:)()
{
  return closure #1 in SyncedLyricsLineView.Syllable.animate(reversed:specs:)(*(void **)(v0 + 16), *(unsigned char *)(v0 + 24), v0 + 32);
}

uint64_t block_copy_helper_54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_54()
{
  return swift_release();
}

uint64_t sub_100324708()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #2 in SyncedLyricsLineView.Syllable.animate(reversed:specs:)(uint64_t a1)
{
  closure #2 in SyncedLyricsLineView.Syllable.animate(reversed:specs:)(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_10032474C()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100324784()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SyncedLyricsLineView.Word.animate(progress:specs:)()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  __n128 v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *__n128 v4 = v1;
  v4[1] = partial apply for closure #1 in static MusicEngagementExtension.performRequest(with:completion:);
  v4[12] = v3;
  v4[11] = v2;
  return _swift_task_switch(closure #1 in SyncedLyricsLineView.Word.animate(progress:specs:), 0, 0);
}

uint64_t sub_100324880()
{
  return swift_deallocObject();
}

uint64_t specialized SyncedLyricsLineView.Word.WordView.deglow(duration:after:)(double a1)
{
  *(void *)(v2 + 24) = v1;
  *(double *)(v2 + 16) = a1;
  type metadata accessor for MainActor();
  *(void *)(v2 + 32) = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  *(void *)(v2 + 40) = v4;
  *(void *)(v2 + 48) = v3;
  return _swift_task_switch(specialized SyncedLyricsLineView.Word.WordView.deglow(duration:after:), v4, v3);
}

uint64_t specialized SyncedLyricsLineView.Word.WordView.deglow(duration:after:)()
{
  if (v0[2] <= 0.0)
  {
    uint64_t v4 = (void *)*((void *)v0 + 3);
    id v5 = objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", 1.0, 14.0, 7.0, 0.0, 0.0);
    *((void *)v0 + 9) = v5;
    NSString v6 = String._bridgeToObjectiveC()();
    id v7 = [self animationWithKeyPath:v6];
    *((void *)v0 + 10) = v7;

    id v8 = v7;
    [v5 settlingDuration];
    objc_msgSend(v8, "setDuration:");

    CASpringAnimation.springParameters.setter(v5);
    id v9 = v8;
    id v10 = [v4 layer];
    [v10 shadowOpacity];

    Class isa = Float._bridgeToObjectiveC()().super.super.isa;
    [v9 setFromValue:isa];

    id v12 = v9;
    Class v13 = Int._bridgeToObjectiveC()().super.super.isa;
    [v12 setToValue:v13];

    *((void *)v0 + 11) = [v4 layer];
    id v14 = [v12 keyPath];
    if (v14)
    {
      Class v15 = v14;
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v18 = 0;
    }
    *((void *)v0 + 12) = v18;
    id v19 = (void *)swift_task_alloc();
    *((void *)v0 + 13) = v19;
    *id v19 = v0;
    v19[1] = specialized SyncedLyricsLineView.Word.WordView.deglow(duration:after:);
    return CALayer.addAsyncAnimation(_:forKey:)((uint64_t)v12, v16, v18);
  }
  else
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *((void *)v0 + 7) = v1;
    *uint64_t v1 = v0;
    v1[1] = specialized SyncedLyricsLineView.Word.WordView.deglow(duration:after:);
    double v2 = v0[2];
    return static Task<>.sleep(for:)(v2);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  double v2 = *v1;
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v4 = *(void *)(v2 + 40);
  if (v0) {
    id v5 = specialized SyncedLyricsLineView.Word.WordView.deglow(duration:after:);
  }
  else {
    id v5 = specialized SyncedLyricsLineView.Word.WordView.deglow(duration:after:);
  }
  return _swift_task_switch(v5, v4, v3);
}

{
  void *v0;
  void *v1;
  id v2;
  NSString v3;
  id v4;
  id v5;
  id v6;
  id v7;
  Class isa;
  id v9;
  Class v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;

  uint64_t v1 = (void *)v0[3];
  double v2 = objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", 1.0, 14.0, 7.0, 0.0, 0.0);
  v0[9] = v2;
  uint64_t v3 = String._bridgeToObjectiveC()();
  uint64_t v4 = [self animationWithKeyPath:v3];
  v0[10] = v4;

  id v5 = v4;
  [v2 settlingDuration];
  objc_msgSend(v5, "setDuration:");

  CASpringAnimation.springParameters.setter(v2);
  NSString v6 = v5;
  id v7 = [v1 layer];
  [v7 shadowOpacity];

  Class isa = Float._bridgeToObjectiveC()().super.super.isa;
  [v6 setFromValue:isa];

  id v9 = v6;
  id v10 = Int._bridgeToObjectiveC()().super.super.isa;
  [v9 setToValue:v10];

  v0[11] = [v1 layer];
  uint64_t v11 = [v9 keyPath];
  if (v11)
  {
    id v12 = v11;
    Class v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Class v15 = v14;
  }
  else
  {
    Class v13 = 0;
    Class v15 = 0;
  }
  v0[12] = v15;
  uint64_t v16 = (void *)swift_task_alloc();
  v0[13] = v16;
  *uint64_t v16 = v0;
  v16[1] = specialized SyncedLyricsLineView.Word.WordView.deglow(duration:after:);
  return CALayer.addAsyncAnimation(_:forKey:)((uint64_t)v9, v13, v15);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *v0;
  double v2 = *(void **)(*v0 + 88);
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v4 = *(void *)(v1 + 40);
  return _swift_task_switch(specialized SyncedLyricsLineView.Word.WordView.deglow(duration:after:), v4, v3);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = (void *)v0[9];
  double v2 = (void *)v0[10];
  swift_release();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_errorRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id partial apply for closure #1 in SyncedLyricsLineView.Glyph.GlyphView.reset(frame:)()
{
  return closure #1 in SyncedLyricsLineView.Glyph.GlyphView.reset(frame:)(*(void **)(v0 + 16), *(CGFloat *)(v0 + 24), *(CGFloat *)(v0 + 32), *(CGFloat *)(v0 + 40), *(CGFloat *)(v0 + 48));
}

void SyncedLyricsLineView.SBS_TextContentView.specs.didset()
{
  uint64_t v1 = *(char **)(v0 + OBJC_IVAR___MusicSBS_TextContentView_textView);
  if (v1)
  {
    uint64_t v2 = v0;
    uint64_t v3 = (const void *)(v0 + OBJC_IVAR___MusicSBS_TextContentView_specs);
    memcpy(__dst, (const void *)(v0 + OBJC_IVAR___MusicSBS_TextContentView_specs), 0x219uLL);
    memcpy(v12, &v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs], 0x219uLL);
    memcpy(v10, &v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs], 0x219uLL);
    memmove(&v1[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs], (const void *)(v0 + OBJC_IVAR___MusicSBS_TextContentView_specs), 0x219uLL);
    outlined retain of SyncedLyricsViewController.Specs((uint64_t)__dst);
    outlined retain of SyncedLyricsViewController.Specs((uint64_t)__dst);
    uint64_t v4 = v1;
    outlined retain of SyncedLyricsViewController.Specs((uint64_t)v12);
    outlined release of SyncedLyricsViewController.Specs((uint64_t)v10);
    SyncedLyricsLineView.SBS_TextContentView.TextView.specs.didset((uint64_t)v12);
    outlined release of SyncedLyricsViewController.Specs((uint64_t)__dst);
    outlined release of SyncedLyricsViewController.Specs((uint64_t)v12);

    id v5 = *(char **)(v2 + OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView);
    if (v5)
    {
      memcpy(v7, v3, 0x219uLL);
      memcpy(v11, &v5[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs], 0x219uLL);
      memcpy(v8, &v5[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs], 0x219uLL);
      memmove(&v5[OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_specs], v3, 0x219uLL);
      outlined retain of SyncedLyricsViewController.Specs((uint64_t)v7);
      outlined retain of SyncedLyricsViewController.Specs((uint64_t)v7);
      NSString v6 = v5;
      outlined retain of SyncedLyricsViewController.Specs((uint64_t)v11);
      outlined release of SyncedLyricsViewController.Specs((uint64_t)v8);
      SyncedLyricsLineView.SBS_TextContentView.TextView.specs.didset((uint64_t)v11);
      outlined release of SyncedLyricsViewController.Specs((uint64_t)v7);
      outlined release of SyncedLyricsViewController.Specs((uint64_t)v11);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t SyncedLyricsLineView.SBS_TextContentView.isScrolling.setter(uint64_t result)
{
  uint64_t v2 = OBJC_IVAR___MusicSBS_TextContentView_isScrolling;
  int v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR___MusicSBS_TextContentView_isScrolling);
  *(unsigned char *)(v1 + OBJC_IVAR___MusicSBS_TextContentView_isScrolling) = result;
  if (v3 != (result & 1))
  {
    uint64_t v4 = *(void *)(v1 + OBJC_IVAR___MusicSBS_TextContentView_textView);
    if (v4)
    {
      *(unsigned char *)(v4 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isScrolling) = result & 1;
      uint64_t v5 = *(void *)(v1 + OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView);
      if (v5) {
        *(unsigned char *)(v5 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_isScrolling) = *(unsigned char *)(v1 + v2);
      }
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

Swift::Void __swiftcall SyncedLyricsLineView.SBS_TextContentView.setSelected(_:animated:)(Swift::Bool _, Swift::Bool animated)
{
  Swift::Bool v3 = _;
  if (*(unsigned char *)(v2 + OBJC_IVAR___MusicSBS_TextContentView_isSelected) != _)
  {
    uint64_t v4 = v2;
    *(unsigned char *)(v2 + OBJC_IVAR___MusicSBS_TextContentView_isSelected) = v3;
    uint64_t v5 = *(void **)(v2 + OBJC_IVAR___MusicSBS_TextContentView_textView);
    if (v5)
    {
      id v8 = v5;
      SyncedLyricsLineView.SBS_TextContentView.TextView.setSelected(_:animated:)(_, animated);

      id v9 = *(void **)(v4 + OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView);
      if (v9)
      {
        id v10 = v9;
        SyncedLyricsLineView.SBS_TextContentView.TextView.setSelected(_:animated:)(_, animated);
      }
      uint64_t v11 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = v11;
      *(unsigned char *)(v12 + 24) = v3;
      if (animated)
      {
        if (_)
        {
          Class v13 = (objc_class *)objc_msgSend(objc_allocWithZone((Class)UISpringTimingParameters), "initWithMass:stiffness:damping:initialVelocity:", 1.0, 30.0, 9.0, 0.0, 0.0);
        }
        else
        {
          type metadata accessor for UIMenu(0, &lazy cache variable for type metadata for UISpringTimingParameters);
          Class v13 = (objc_class *)UISpringTimingParameters.init(dampingRatio:response:)(1.0, 0.2);
        }
        v15.super.Class isa = v13;
        type metadata accessor for UIMenu(0, (unint64_t *)&lazy cache variable for type metadata for UIViewPropertyAnimator);
        Class isa = UIViewPropertyAnimator.init(springTimingParameters:)(v15).super.isa;
        void v18[4] = partial apply for closure #1 in SyncedLyricsLineView.SBS_TextContentView.setSelected(_:animated:);
        v18[5] = v12;
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 1107296256;
        v18[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
        v18[3] = &block_descriptor_57;
        uint64_t v17 = _Block_copy(v18);
        swift_retain();
        swift_release();
        [(objc_class *)isa addAnimations:v17];
        _Block_release(v17);
        [(objc_class *)isa startAnimation];

        swift_release();
      }
      else
      {
        uint64_t v14 = swift_retain();
        closure #1 in SyncedLyricsLineView.SBS_TextContentView.setSelected(_:animated:)(v14, _);
        swift_release();
        swift_release();
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void closure #1 in SyncedLyricsLineView.SBS_TextContentView.setSelected(_:animated:)(uint64_t a1, char a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (char *)Strong;
    uint64_t v5 = OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView;
    NSString v6 = *(void **)(Strong + OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView);
    if (v6)
    {
      if (a2)
      {
        long long v7 = xmmword_100493E70;
        long long v8 = xmmword_1004A3B00;
        long long v9 = 0uLL;
      }
      else
      {
        long long v8 = *(_OWORD *)&v4[OBJC_IVAR___MusicSBS_TextContentView_specs + 96];
        long long v7 = *(_OWORD *)&v4[OBJC_IVAR___MusicSBS_TextContentView_specs + 112];
        long long v9 = *(_OWORD *)&v4[OBJC_IVAR___MusicSBS_TextContentView_specs + 128];
      }
      v13[0] = v8;
      v13[1] = v7;
      _OWORD v13[2] = v9;
      [v6 setTransform:v13];
      id v10 = *(void **)&v4[v5];
      if (v10)
      {
        if (a2) {
          double v11 = 1.0;
        }
        else {
          double v11 = 0.0;
        }
        id v12 = v10;
        [v12 setAlpha:v11];
      }
    }
  }
}

id SyncedLyricsLineView.SBS_TextContentView.update(text:words:alignment:direction:capabilities:backgroundText:backgroundWords:backgroundDirection:)(id result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  double v11 = *(void **)&v10[OBJC_IVAR___MusicSBS_TextContentView_textView];
  if (v11)
  {
    id v12 = v10;
    uint64_t v18 = (uint64_t)result;
    char v19 = a10 & 1;
    char v20 = a5 & 1;
    id v21 = v11;
    SyncedLyricsLineView.SBS_TextContentView.TextView.update(text:words:alignment:direction:capabilities:)(v18, a2, a3, a4, v20, a6);

    *(void *)&v12[OBJC_IVAR___MusicSBS_TextContentView_alignment] = a4;
    v12[OBJC_IVAR___MusicSBS_TextContentView_direction] = v20;
    *(void *)&v12[OBJC_IVAR___MusicSBS_TextContentView_capabilities] = a6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v12[OBJC_IVAR___MusicSBS_TextContentView_backgroundDirection] = a10 & 1;
    uint64_t v22 = OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView;
    double v23 = *(void **)&v12[OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView];
    if (v23)
    {
      if (a8)
      {
        id v24 = v23;
        SyncedLyricsLineView.SBS_TextContentView.TextView.update(text:words:alignment:direction:capabilities:)(a7, a8, a9, a4, v19, a6);

LABEL_11:
        objc_msgSend(v12, "setNeedsLayout", a9);
        return [v12 layoutIfNeeded];
      }
      [v23 removeFromSuperview];
      uint64_t v31 = *(void **)&v12[v22];
    }
    else
    {
      if (a8)
      {
        double v25 = &v12[OBJC_IVAR___MusicSBS_TextContentView_specs];
        memcpy(__dst, &v12[OBJC_IVAR___MusicSBS_TextContentView_specs], 0x219uLL);
        id v26 = objc_allocWithZone((Class)type metadata accessor for SyncedLyricsLineView.SBS_TextContentView.TextView());
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined retain of SyncedLyricsViewController.Specs((uint64_t)__dst);
        id v27 = SyncedLyricsLineView.SBS_TextContentView.TextView.init(text:words:specs:kind:alignment:direction:capabilities:)(a7, a8, a9, __dst, 1, a4, v19, a6);
        double v28 = specialized static SyncedLyricsLineView.SBS_TextContentView.anchorPoint(for:)(a4);
        UIView.setAnchorPoint(_:preserveFrame:)(1, v28, v29);
        [v27 setAlpha:0.0];
        long long v30 = v25[7];
        v33[0] = v25[6];
        v33[1] = v30;
        void v33[2] = v25[8];
        [v27 setTransform:v33];
        [v12 addSubview:v27];
        uint64_t v31 = *(void **)&v12[v22];
        *(void *)&v12[v22] = v27;
LABEL_10:

        goto LABEL_11;
      }
      uint64_t v31 = 0;
    }
    *(void *)&v12[v22] = 0;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

char *SyncedLyricsLineView.SBS_TextContentView.init(text:words:alignment:direction:capabilities:backgroundText:backgroundWords:backgroundDirection:specs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _OWORD *a11)
{
  id v12 = v11;
  v11[OBJC_IVAR___MusicSBS_TextContentView_isScrolling] = 1;
  uint64_t v16 = (uint64_t *)&v11[OBJC_IVAR___MusicSBS_TextContentView_text];
  *uint64_t v16 = 0;
  v16[1] = 0;
  *(void *)&v11[OBJC_IVAR___MusicSBS_TextContentView_attributedText] = 0;
  v11[OBJC_IVAR___MusicSBS_TextContentView_isSelected] = 0;
  *(void *)&v11[OBJC_IVAR___MusicSBS_TextContentView_progress] = 0;
  uint64_t v49 = OBJC_IVAR___MusicSBS_TextContentView_backgroundDirection;
  v11[OBJC_IVAR___MusicSBS_TextContentView_backgroundDirection] = 2;
  char v17 = a5 & 1;
  uint64_t v18 = OBJC_IVAR___MusicSBS_TextContentView_textView;
  *(void *)&v11[OBJC_IVAR___MusicSBS_TextContentView_textView] = 0;
  uint64_t v44 = OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView;
  *(void *)&v11[OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView] = 0;
  *uint64_t v16 = a1;
  v16[1] = a2;
  char v19 = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  memcpy(&v19[OBJC_IVAR___MusicSBS_TextContentView_specs], a11, 0x219uLL);
  *(void *)&v19[OBJC_IVAR___MusicSBS_TextContentView_alignment] = a4;
  v19[OBJC_IVAR___MusicSBS_TextContentView_direction] = v17;
  *(void *)&v19[OBJC_IVAR___MusicSBS_TextContentView_capabilities] = a6;
  char v20 = (objc_class *)type metadata accessor for SyncedLyricsLineView.SBS_TextContentView.TextView();
  id v21 = objc_allocWithZone(v20);
  swift_bridgeObjectRetain();
  outlined retain of SyncedLyricsViewController.Specs((uint64_t)a11);
  swift_bridgeObjectRetain();
  outlined retain of SyncedLyricsViewController.Specs((uint64_t)a11);
  id v22 = SyncedLyricsLineView.SBS_TextContentView.TextView.init(text:words:specs:kind:alignment:direction:capabilities:)(a1, a2, a3, a11, 0, a4, v17, a6);
  double v23 = *(void **)&v11[v18];
  *(void *)&v11[v18] = v22;

  if (a8)
  {
    char v24 = a10;
    objc_allocWithZone(v20);
    outlined retain of SyncedLyricsViewController.Specs((uint64_t)a11);
    id v25 = SyncedLyricsLineView.SBS_TextContentView.TextView.init(text:words:specs:kind:alignment:direction:capabilities:)(a7, a8, a9, a11, 1, a4, a10 & 1, a6);
    id v26 = *(void **)&v11[v44];
    *(void *)&v11[v44] = v25;

    id v27 = *(void **)&v11[v44];
    if (v27)
    {
      id v28 = v27;
      double v29 = specialized static SyncedLyricsLineView.SBS_TextContentView.anchorPoint(for:)(a4);
      UIView.setAnchorPoint(_:preserveFrame:)(1, v29, v30);

      uint64_t v31 = *(void **)&v12[v44];
      if (v31)
      {
        [v31 setAlpha:0.0];
        id v32 = *(void **)&v12[v44];
        if (v32)
        {
          long long v33 = a11[7];
          v50[0] = a11[6];
          v50[1] = v33;
          v50[2] = a11[8];
          [v32 setTransform:v50];
        }
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v24 = a10;
  }
  v12[v49] = v24;

  unint64_t v34 = (objc_class *)type metadata accessor for SyncedLyricsLineView.SBS_TextContentView();
  v51.receiver = v19;
  v51.super_class = v34;
  uint64_t result = (char *)objc_msgSendSuper2(&v51, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  uint64_t v36 = OBJC_IVAR___MusicSBS_TextContentView_textView;
  uint64_t v37 = *(void *)&result[OBJC_IVAR___MusicSBS_TextContentView_textView];
  if (!v37)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  double v38 = result;
  double v39 = result;
  uint64_t result = (char *)[v39 addSubview:v37];
  double v40 = *(void **)&v39[OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView];
  if (!v40)
  {
    outlined release of SyncedLyricsViewController.Specs((uint64_t)a11);
    goto LABEL_13;
  }
  double v41 = *(void **)&v38[v36];
  if (!v41) {
    goto LABEL_15;
  }
  id v42 = v40;
  [v41 frame];
  uint64_t result = *(char **)&v38[v36];
  if (result)
  {
    [result frame];
    [v42 frame];
    objc_msgSend(v42, "setFrame:");
    uint64_t v43 = v39;
    [v43 addSubview:v42];
    outlined release of SyncedLyricsViewController.Specs((uint64_t)a11);

LABEL_13:
    return v39;
  }
LABEL_16:
  __break(1u);
  return result;
}

void SyncedLyricsLineView.SBS_TextContentView.copy()(char **a1@<X8>)
{
  uint64_t v2 = *(void *)&v1[OBJC_IVAR___MusicSBS_TextContentView_textView];
  if (v2)
  {
    Swift::Bool v3 = v1;
    uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_text);
    uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_text + 8);
    uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_words);
    uint64_t v7 = *(void *)&v1[OBJC_IVAR___MusicSBS_TextContentView_capabilities];
    uint64_t v8 = *(void *)&v1[OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView];
    uint64_t v25 = *(void *)&v1[OBJC_IVAR___MusicSBS_TextContentView_alignment];
    char v24 = v1[OBJC_IVAR___MusicSBS_TextContentView_direction];
    if (v8)
    {
      uint64_t v10 = *(void *)(v8 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_text);
      uint64_t v9 = *(void *)(v8 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_text + 8);
      double v11 = *(void **)(v8 + OBJC_IVAR____TtCCC11MusicCoreUI20SyncedLyricsLineView19SBS_TextContentView8TextView_words);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v9 = 0;
      double v11 = _swiftEmptyArrayStorage;
    }
    char v12 = v1[OBJC_IVAR___MusicSBS_TextContentView_backgroundDirection];
    memcpy(__dst, &v1[OBJC_IVAR___MusicSBS_TextContentView_specs], 0x219uLL);
    id v22 = (objc_class *)type metadata accessor for SyncedLyricsLineView.SBS_TextContentView();
    id v13 = objc_allocWithZone(v22);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of SyncedLyricsViewController.Specs((uint64_t)__dst);
    uint64_t v14 = SyncedLyricsLineView.SBS_TextContentView.init(text:words:alignment:direction:capabilities:backgroundText:backgroundWords:backgroundDirection:specs:)(v4, v5, v6, v25, v24, v7, v10, v9, (uint64_t)v11, v12, __dst);
    UISpringTimingParameters v15 = self;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v14;
    *(void *)(v16 + 24) = v3;
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = partial apply for closure #1 in SyncedLyricsLineView.SBS_TextContentView.copy();
    *(void *)(v17 + 24) = v16;
    aBlock[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
    uint64_t aBlock[5] = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_60_0;
    uint64_t v18 = _Block_copy(aBlock);
    char v19 = v14;
    id v20 = v3;
    swift_retain();
    swift_release();
    [v15 performWithoutAnimation:v18];
    _Block_release(v18);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      a1[3] = (char *)v22;
      swift_release();
      *a1 = v19;
      return;
    }
    __break(1u);
  }
  __break(1u);
}

void closure #1 in SyncedLyricsLineView.SBS_TextContentView.copy()(char *a1, char *a2)
{
  [a2 bounds];
  objc_msgSend(a1, "setFrame:");
  [a1 layoutIfNeeded];
  SyncedLyricsLineView.SBS_TextContentView.setSelected(_:animated:)(a2[OBJC_IVAR___MusicSBS_TextContentView_isSelected], 0);
  double v4 = *(double *)&a2[OBJC_IVAR___MusicSBS_TextContentView_progress];
  if (v4 != *(double *)&a1[OBJC_IVAR___MusicSBS_TextContentView_progress])
  {
    *(double *)&a1[OBJC_IVAR___MusicSBS_TextContentView_progress] = v4;
    uint64_t v5 = *(void **)&a1[OBJC_IVAR___MusicSBS_TextContentView_textView];
    if (v5)
    {
      id v6 = v5;
      SyncedLyricsLineView.SBS_TextContentView.TextView.setProgress(_:animated:)(v4, 0);

      uint64_t v7 = *(void **)&a1[OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView];
      if (v7)
      {
        id v8 = v7;
        SyncedLyricsLineView.SBS_TextContentView.TextView.setProgress(_:animated:)(v4, 0);
      }
    }
    else
    {
      __break(1u);
    }
  }
}

id SyncedLyricsLineView.SBS_TextContentView.sizeThatFits(_:selected:)(char a1, double a2, double a3)
{
  id result = *(id *)(v3 + OBJC_IVAR___MusicSBS_TextContentView_textView);
  if (result)
  {
    id result = objc_msgSend(result, "sizeThatFits:");
    if (a1)
    {
      id result = *(id *)(v3 + OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView);
      if (result) {
        return objc_msgSend(result, "sizeThatFits:", a2, a3);
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id SyncedLyricsLineView.SBS_TextContentView.sizeThatFits(_:)(double a1, double a2)
{
  id result = *(id *)(v2 + OBJC_IVAR___MusicSBS_TextContentView_textView);
  if (result)
  {
    int v6 = *(unsigned __int8 *)(v2 + OBJC_IVAR___MusicSBS_TextContentView_isSelected);
    id result = objc_msgSend(result, "sizeThatFits:");
    if (v6 == 1)
    {
      id result = *(id *)(v2 + OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView);
      if (result) {
        return objc_msgSend(result, "sizeThatFits:", a1, a2);
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall SyncedLyricsLineView.SBS_TextContentView.layoutSubviews()()
{
  uint64_t v1 = v0;
  v71.receiver = v0;
  v71.super_class = (Class)type metadata accessor for SyncedLyricsLineView.SBS_TextContentView();
  objc_msgSendSuper2(&v71, "layoutSubviews");
  uint64_t v2 = OBJC_IVAR___MusicSBS_TextContentView_textView;
  uint64_t v3 = *(void **)&v0[OBJC_IVAR___MusicSBS_TextContentView_textView];
  if (!v3)
  {
    __break(1u);
    goto LABEL_34;
  }
  id v4 = v3;
  [v1 bounds];
  objc_msgSend(v4, "sizeThatFits:", v5, v6);
  [v4 frame];
  objc_msgSend(v4, "setFrame:");

  uint64_t v7 = *(void **)&v1[v2];
  if (!v7)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  [v7 layoutSubviews];
  uint64_t v8 = OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView;
  uint64_t v9 = *(void **)&v1[OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView];
  if (v9)
  {
    id v10 = v9;
    [v1 bounds];
    objc_msgSend(v10, "sizeThatFits:", v11, v12);
    CGFloat v14 = v13;
    CGFloat v16 = v15;
    double v17 = UIView.untransformedFrame.getter();
    UIView.untransformedFrame.setter(v17, v18, v14, v16);

    char v19 = *(void **)&v1[v8];
    if (v19)
    {
      id v20 = v19;
      UIView.untransformedFrame.getter();
      UIView.untransformedFrame.setter(0.0, v21, v22, v23);

      char v24 = *(void **)&v1[v8];
      if (v24)
      {
        uint64_t v25 = *(void **)&v1[v2];
        if (v25)
        {
          id v26 = v24;
          id v27 = v25;
          UIView.untransformedFrame.getter();
          double v29 = v28;

          double v30 = *(void **)&v1[v2];
          if (v30)
          {
            id v31 = v30;
            UIView.untransformedFrame.getter();
            double v33 = v32;

            CGFloat v34 = v29 + v33 + *(double *)&v1[OBJC_IVAR___MusicSBS_TextContentView_specs + 88];
            double v35 = UIView.untransformedFrame.getter();
            UIView.untransformedFrame.setter(v35, v34, v36, v37);

            double v38 = *(void **)&v1[v8];
            goto LABEL_10;
          }
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          goto LABEL_38;
        }
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
    }
  }
  double v38 = 0;
LABEL_10:
  [v38 layoutSubviews];
  uint64_t v39 = *(void *)&v1[OBJC_IVAR___MusicSBS_TextContentView_alignment];
  if (!v39)
  {
    objc_super v52 = *(void **)&v1[v2];
    if (v52)
    {
      id v53 = v52;
      [v53 frame];
      [v53 setFrame:0.0];

      double v54 = *(void **)&v1[v8];
      if (!v54) {
        return;
      }
      id v48 = v54;
      UIView.untransformedFrame.getter();
      CGFloat v58 = 0.0;
      goto LABEL_31;
    }
    goto LABEL_39;
  }
  if (v39 == 1)
  {
    uint64_t v59 = *(void **)&v1[v2];
    if (v59)
    {
      id v60 = v59;
      [v1 bounds];
      double Width = CGRectGetWidth(v74);
      double v62 = *(void **)&v1[v2];
      if (v62)
      {
        double v63 = Width;
        [v62 bounds];
        double v65 = (v63 - v64) * 0.5;
        [v60 frame];
        [v60 setFrame:v65];

        uint64_t v66 = *(void **)&v1[v8];
        if (!v66) {
          return;
        }
        id v48 = v66;
        [v1 bounds];
        double v67 = CGRectGetWidth(v75);
        uint64_t v68 = *(void **)&v1[v8];
        if (v68) {
          [v68 bounds];
        }
        else {
          double v69 = 0.0;
        }
        double v70 = (v67 - v69) * 0.5;
        goto LABEL_30;
      }
LABEL_41:
      __break(1u);
      return;
    }
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v39 != 2) {
    return;
  }
  double v40 = *(void **)&v1[v2];
  if (!v40) {
    goto LABEL_37;
  }
  id v41 = v40;
  [v1 bounds];
  double v42 = CGRectGetWidth(v72);
  uint64_t v43 = *(void **)&v1[v2];
  if (!v43)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  double v44 = v42;
  [v43 bounds];
  double v46 = v44 - v45;
  [v41 frame];
  [v41 setFrame:v46];

  id v47 = *(void **)&v1[v8];
  if (!v47) {
    return;
  }
  id v48 = v47;
  [v1 bounds];
  double v49 = CGRectGetWidth(v73);
  uint64_t v50 = *(void **)&v1[v8];
  if (v50) {
    [v50 bounds];
  }
  else {
    double v51 = 0.0;
  }
  double v70 = v49 - v51;
LABEL_30:
  UIView.untransformedFrame.getter();
  CGFloat v58 = v70;
LABEL_31:
  UIView.untransformedFrame.setter(v58, v55, v56, v57);
}

id SyncedLyricsLineView.SBS_TextContentView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SyncedLyricsLineView.SBS_TextContentView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SyncedLyricsLineView.SBS_TextContentView()
{
  return self;
}

uint64_t protocol witness for SyncedLyricsLineContentView.specs.setter in conformance SyncedLyricsLineView.SBS_TextContentView(const void *a1)
{
  uint64_t v3 = (void *)(*v1 + OBJC_IVAR___MusicSBS_TextContentView_specs);
  memcpy(v5, v3, 0x219uLL);
  memcpy(v3, a1, 0x219uLL);
  outlined retain of SyncedLyricsViewController.Specs((uint64_t)a1);
  outlined release of SyncedLyricsViewController.Specs((uint64_t)v5);
  SyncedLyricsLineView.SBS_TextContentView.specs.didset();
  return outlined release of SyncedLyricsViewController.Specs((uint64_t)a1);
}

uint64_t protocol witness for SyncedLyricsLineContentView.isScrolling.setter in conformance SyncedLyricsLineView.SBS_TextContentView(uint64_t a1)
{
  return SyncedLyricsLineView.SBS_TextContentView.isScrolling.setter(a1);
}

void protocol witness for SyncedLyricsLineContentView.setSelected(_:animated:) in conformance SyncedLyricsLineView.SBS_TextContentView(Swift::Bool a1, Swift::Bool a2)
{
}

id protocol witness for SyncedLyricsLineContentView.sizeThatFits(_:selected:) in conformance SyncedLyricsLineView.SBS_TextContentView(char a1, double a2, double a3)
{
  return SyncedLyricsLineView.SBS_TextContentView.sizeThatFits(_:selected:)(a1, a2, a3);
}

double specialized static SyncedLyricsLineView.SBS_TextContentView.anchorPoint(for:)(uint64_t a1)
{
  switch(a1)
  {
    case 1:
    case 3:
      uint64_t v1 = CGPoint.center.unsafeMutableAddressor();
      break;
    case 2:
      uint64_t v1 = CGPoint.centerRight.unsafeMutableAddressor();
      break;
    default:
      uint64_t v1 = CGPoint.centerLeft.unsafeMutableAddressor();
      break;
  }
  objc_super v2 = v1;
  swift_beginAccess();
  return *(double *)v2;
}

uint64_t sub_100326A4C()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_100326A84()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in SyncedLyricsLineView.SBS_TextContentView.setSelected(_:animated:)()
{
  closure #1 in SyncedLyricsLineView.SBS_TextContentView.setSelected(_:animated:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t block_copy_helper_55(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_55()
{
  return swift_release();
}

uint64_t sub_100326AE0()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in SyncedLyricsLineView.SBS_TextContentView.copy()()
{
  closure #1 in SyncedLyricsLineView.SBS_TextContentView.copy()(*(char **)(v0 + 16), *(char **)(v0 + 24));
}

uint64_t sub_100326B28()
{
  return swift_deallocObject();
}

void specialized SyncedLyricsLineView.SBS_TextContentView.init(coder:)()
{
  v0[OBJC_IVAR___MusicSBS_TextContentView_isScrolling] = 1;
  uint64_t v1 = &v0[OBJC_IVAR___MusicSBS_TextContentView_text];
  *uint64_t v1 = 0;
  v1[1] = 0;
  *(void *)&v0[OBJC_IVAR___MusicSBS_TextContentView_attributedText] = 0;
  v0[OBJC_IVAR___MusicSBS_TextContentView_isSelected] = 0;
  *(void *)&v0[OBJC_IVAR___MusicSBS_TextContentView_progress] = 0;
  v0[OBJC_IVAR___MusicSBS_TextContentView_backgroundDirection] = 2;
  *(void *)&v0[OBJC_IVAR___MusicSBS_TextContentView_textView] = 0;
  *(void *)&v0[OBJC_IVAR___MusicSBS_TextContentView_backgroundTextView] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void one-time initialization function for dotCornerRadius()
{
  static SyncedLyricsLineView.InstrumentalContentView.Specs.dotCornerRadius = Int.seconds.getter(6);
}

void one-time initialization function for dotMargin()
{
  static SyncedLyricsLineView.InstrumentalContentView.Specs.dotMargin = Int.seconds.getter(8);
}

CFIndex one-time initialization function for dotInitialAlpha(uint64_t a1, uint64_t a2)
{
  CFIndex result = CFRange.init(_:)(*(__C::_NSRange *)&a1).location;
  static SyncedLyricsLineView.InstrumentalContentView.Specs.dotInitialAlpha = v3;
  return result;
}

CGFloat one-time initialization function for breathOutTransform(uint64_t a1)
{
  return one-time initialization function for breathOutTransform(0.9, a1, &static SyncedLyricsLineView.InstrumentalContentView.Specs.breathOutTransform, &xmmword_1005ADF80, &xmmword_1005ADF90);
}

CGFloat one-time initialization function for breathInTransform(uint64_t a1)
{
  return one-time initialization function for breathOutTransform(1.2, a1, &static SyncedLyricsLineView.InstrumentalContentView.Specs.breathInTransform, algn_1005ADFB0, &xmmword_1005ADFC0);
}

CGFloat one-time initialization function for fadeOutZoomInTransform(uint64_t a1)
{
  return one-time initialization function for breathOutTransform(1.2, a1, &static SyncedLyricsLineView.InstrumentalContentView.Specs.fadeOutZoomInTransform, &xmmword_1005ADFE0, &xmmword_1005ADFF0);
}

CGFloat one-time initialization function for fadeOutZoomOutTransform(uint64_t a1)
{
  return one-time initialization function for breathOutTransform(0.2, a1, &static SyncedLyricsLineView.InstrumentalContentView.Specs.fadeOutZoomOutTransform, algn_1005AE010, &xmmword_1005AE020);
}

CGFloat one-time initialization function for breathOutTransform(CGFloat a1, uint64_t a2, _OWORD *a3, _OWORD *a4, _OWORD *a5)
{
  CGAffineTransformMakeScale(&v11, a1, a1);
  CGFloat result = v11.a;
  long long v9 = *(_OWORD *)&v11.c;
  long long v10 = *(_OWORD *)&v11.tx;
  *a3 = *(_OWORD *)&v11.a;
  *a4 = v9;
  *a5 = v10;
  return result;
}

id SyncedLyricsLineView.InstrumentalContentView.init(line:specs:)(uint64_t a1, char a2, void *__src, double a4, double a5)
{
  v5[OBJC_IVAR___MusicInstrumentalContentView_isScrolling] = 0;
  *(void *)&v5[OBJC_IVAR___MusicInstrumentalContentView_alignment] = 0;
  double v6 = &v5[OBJC_IVAR___MusicInstrumentalContentView_lastSeenBounds];
  *double v6 = 0u;
  v6[1] = 0u;
  v5[OBJC_IVAR___MusicInstrumentalContentView_isSelected] = 0;
  *(void *)&v5[OBJC_IVAR___MusicInstrumentalContentView_dots] = _swiftEmptyArrayStorage;
  v5[OBJC_IVAR___MusicInstrumentalContentView_fadeOutCued] = 0;
  *(void *)&v5[OBJC_IVAR___MusicInstrumentalContentView_dotFadeInDuration] = 0;
  uint64_t v7 = &v5[OBJC_IVAR___MusicInstrumentalContentView_totalDotsFadedIn];
  *(void *)uint64_t v7 = 0;
  v7[8] = 1;
  *(void *)&v5[OBJC_IVAR___MusicInstrumentalContentView_totalDotsCompleted] = 0;
  *(void *)&v5[OBJC_IVAR___MusicInstrumentalContentView_breathDuration] = 0;
  *(void *)&v5[OBJC_IVAR___MusicInstrumentalContentView_totalBreathsCompleted] = 0;
  uint64_t v8 = (double *)&v5[OBJC_IVAR___MusicInstrumentalContentView_line];
  *(void *)uint64_t v8 = a1;
  v8[1] = a4;
  uint64_t v8[2] = a5;
  *((unsigned char *)v8 + 24) = a2 & 1;
  memcpy(&v5[OBJC_IVAR___MusicInstrumentalContentView_specs], __src, 0x219uLL);
  v10.receiver = v5;
  v10.super_class = (Class)type metadata accessor for SyncedLyricsLineView.InstrumentalContentView();
  return objc_msgSendSuper2(&v10, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

Swift::Void __swiftcall SyncedLyricsLineView.InstrumentalContentView.reset()()
{
  double v1 = *(double *)(v0 + OBJC_IVAR___MusicInstrumentalContentView_line + 8);
  double v2 = *(double *)(v0 + OBJC_IVAR___MusicInstrumentalContentView_line + 16) + -1.8;
  *(double *)(v0 + OBJC_IVAR___MusicInstrumentalContentView_breathDuration) = (v2 - v1) / floor((v2 - v1) * 0.25) * 0.5;
  *(double *)(v0 + OBJC_IVAR___MusicInstrumentalContentView_dotFadeInDuration) = (v2 - (v1 + 1.0))
                                                                               / (double)*(uint64_t *)(v0 + OBJC_IVAR___MusicInstrumentalContentView_specs + 488);
  *(void *)(v0 + OBJC_IVAR___MusicInstrumentalContentView_totalDotsCompleted) = 0;
  *(void *)(v0 + OBJC_IVAR___MusicInstrumentalContentView_totalBreathsCompleted) = 0;
  uint64_t v3 = v0 + OBJC_IVAR___MusicInstrumentalContentView_totalDotsFadedIn;
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  *(unsigned char *)(v0 + OBJC_IVAR___MusicInstrumentalContentView_fadeOutCued) = 0;
  id v4 = (unint64_t *)(v0 + OBJC_IVAR___MusicInstrumentalContentView_dots);
  swift_beginAccess();
  unint64_t v5 = *v4;
  if (!(v5 >> 62))
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  if (!v6) {
    goto LABEL_10;
  }
LABEL_3:
  if (v6 >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      if ((v5 & 0xC000000000000001) != 0) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v8 = *(id *)(v5 + 8 * v7 + 32);
      }
      long long v9 = v8;
      ++v7;
      id v10 = [v8 layer];
      [v10 removeAllAnimations];

      [v9 setAlpha:0.0];
      v11[1] = 0;
      _OWORD v11[2] = 0;
      v11[0] = 0x3FF0000000000000;
      void v11[3] = 0x3FF0000000000000;
      v11[4] = 0;
      v11[5] = 0;
      [v9 setTransform:v11];
    }
    while (v6 != v7);
    goto LABEL_10;
  }
  __break(1u);
}

Swift::Void __swiftcall SyncedLyricsLineView.InstrumentalContentView.setSelected(_:animated:)(Swift::Bool _, Swift::Bool animated)
{
  v2[OBJC_IVAR___MusicInstrumentalContentView_isSelected] = _;
  if (!_)
  {
    if (animated)
    {
      id v3 = objc_msgSend(objc_allocWithZone((Class)UIViewPropertyAnimator), "initWithDuration:controlPoint1:controlPoint2:animations:", 0, 0.12, 0.33, 0.0, 0.2, 0.1);
      uint64_t v4 = swift_allocObject();
      *(void *)(v4 + 16) = v2;
      v7[4] = partial apply for closure #1 in SyncedLyricsLineView.InstrumentalContentView.setSelected(_:animated:);
      v7[5] = v4;
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 1107296256;
      _OWORD v7[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      _OWORD v7[3] = &block_descriptor_96;
      unint64_t v5 = _Block_copy(v7);
      uint64_t v6 = v2;
      swift_release();
      [v3 addAnimations:v5];
      _Block_release(v5);
      [v3 startAnimation];
    }
    else
    {
      SyncedLyricsLineView.InstrumentalContentView.reset()();
    }
  }
}

Swift::Void __swiftcall SyncedLyricsLineView.InstrumentalContentView.fadeIn(elapsedTime:)(Swift::Double elapsedTime)
{
  double v2 = &v1[OBJC_IVAR___MusicInstrumentalContentView_totalDotsFadedIn];
  if (v1[OBJC_IVAR___MusicInstrumentalContentView_totalDotsFadedIn + 8] == 1)
  {
    uint64_t v4 = &v1[OBJC_IVAR___MusicInstrumentalContentView_dots];
    swift_beginAccess();
    unint64_t v5 = *(void *)v4;
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v26)
      {
LABEL_5:
        uint64_t v6 = 0;
        *(void *)double v2 = 0;
        v2[8] = 0;
        double v7 = *(double *)&v1[OBJC_IVAR___MusicInstrumentalContentView_line + 8] + 1.0;
        if (v7 <= elapsedTime)
        {
          double v8 = (elapsedTime - v7) / *(double *)&v1[OBJC_IVAR___MusicInstrumentalContentView_dotFadeInDuration];
          if ((~*(void *)&v8 & 0x7FF0000000000000) == 0)
          {
LABEL_24:
            __break(1u);
            goto LABEL_25;
          }
          if (v8 <= -9.22337204e18)
          {
LABEL_25:
            __break(1u);
            goto LABEL_26;
          }
          if (v8 >= 9.22337204e18)
          {
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
          if (__OFADD__((uint64_t)v8, 1))
          {
LABEL_27:
            __break(1u);
            return;
          }
          if ((uint64_t)v8 + 1 >= 3) {
            uint64_t v6 = 3;
          }
          else {
            uint64_t v6 = (uint64_t)v8 + 1;
          }
        }
        uint64_t v9 = *(void *)&v1[OBJC_IVAR___MusicInstrumentalContentView_specs + 488];
        if (v9 < 0)
        {
          __break(1u);
        }
        else
        {
          if (v9)
          {
            for (uint64_t i = 0; i != v9; ++i)
            {
              id v11 = [objc_allocWithZone((Class)UIViewPropertyAnimator) initWithDuration:3 curve:0 animations:0.8];
              double v12 = (void *)swift_allocObject();
              void v12[2] = v6;
              unint64_t v12[3] = i;
              void v12[4] = v1;
              id v31 = partial apply for closure #1 in SyncedLyricsLineView.InstrumentalContentView.fadeIn(elapsedTime:);
              double v32 = v12;
              uint64_t aBlock = _NSConcreteStackBlock;
              uint64_t v28 = 1107296256;
              double v29 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
              double v30 = &block_descriptor_78_1;
              double v13 = _Block_copy(&aBlock);
              CGFloat v14 = v1;
              swift_release();
              [v11 addAnimations:v13];
              _Block_release(v13);
              uint64_t v15 = swift_allocObject();
              *(void *)(v15 + 16) = v14;
              *(void *)(v15 + 24) = i;
              id v31 = partial apply for closure #2 in SyncedLyricsLineView.InstrumentalContentView.fadeIn(elapsedTime:);
              double v32 = (void *)v15;
              uint64_t aBlock = _NSConcreteStackBlock;
              uint64_t v28 = 1107296256;
              double v29 = thunk for @escaping @callee_guaranteed (@unowned UIViewAnimatingPosition) -> ();
              double v30 = &block_descriptor_84_0;
              CGFloat v16 = _Block_copy(&aBlock);
              double v17 = v14;
              swift_release();
              [v11 addCompletion:v16];
              _Block_release(v16);
              [v11 startAnimationAfterDelay:(double)i * 0.06];
            }
          }
          CGFloat v18 = self;
          double v19 = *(double *)&v1[OBJC_IVAR___MusicInstrumentalContentView_breathDuration] + -0.4;
          uint64_t v20 = swift_allocObject();
          *(void *)(v20 + 16) = v1;
          id v31 = partial apply for closure #3 in SyncedLyricsLineView.InstrumentalContentView.fadeIn(elapsedTime:);
          double v32 = (void *)v20;
          uint64_t aBlock = _NSConcreteStackBlock;
          uint64_t v28 = 1107296256;
          double v29 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
          double v30 = &block_descriptor_90;
          CGFloat v21 = _Block_copy(&aBlock);
          CGFloat v22 = v1;
          swift_release();
          [v18 animateWithDuration:0x20000 delay:v21 options:0 animations:v19 completion:0.2];
          _Block_release(v21);
          uint64_t v23 = *(void *)&v22[OBJC_IVAR___MusicInstrumentalContentView_totalBreathsCompleted];
          BOOL v24 = __OFADD__(v23, 1);
          uint64_t v25 = v23 + 1;
          if (!v24)
          {
            *(void *)&v22[OBJC_IVAR___MusicInstrumentalContentView_totalBreathsCompleted] = v25;
            return;
          }
        }
        __break(1u);
        goto LABEL_24;
      }
    }
    else if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_5;
    }
    SyncedLyricsLineView.InstrumentalContentView.layoutDots()();
    goto LABEL_5;
  }
}

void closure #1 in SyncedLyricsLineView.InstrumentalContentView.fadeIn(elapsedTime:)(int64_t a1, int64_t a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = (uint64_t *)(a3 + OBJC_IVAR___MusicInstrumentalContentView_dots);
  if (a2 >= a1)
  {
    swift_beginAccess();
    uint64_t v6 = *v4;
    if ((v6 & 0xC000000000000001) == 0)
    {
      if ((v3 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10) > v3)
      {
        unint64_t v3 = (unint64_t)*(id *)(v6 + 8 * v3 + 32);
        goto LABEL_11;
      }
      __break(1u);
      goto LABEL_20;
    }
LABEL_17:
    swift_bridgeObjectRetain();
    unint64_t v3 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
LABEL_11:
    if (one-time initialization token for dotInitialAlpha == -1)
    {
LABEL_12:
      [(id)v3 setAlpha:*(double *)&static SyncedLyricsLineView.InstrumentalContentView.Specs.dotInitialAlpha];
      goto LABEL_13;
    }
LABEL_20:
    swift_once();
    goto LABEL_12;
  }
  swift_beginAccess();
  uint64_t v5 = *v4;
  if ((v5 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    unint64_t v3 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) <= v3)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v3 = (unint64_t)*(id *)(v5 + 8 * v3 + 32);
LABEL_6:
  [(id)v3 setAlpha:1.0];
LABEL_13:
}

uint64_t closure #3 in SyncedLyricsLineView.InstrumentalContentView.fadeIn(elapsedTime:)(uint64_t a1)
{
  double v1 = (unint64_t *)(a1 + OBJC_IVAR___MusicInstrumentalContentView_dots);
  swift_beginAccess();
  unint64_t v2 = *v1;
  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v3 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  if (v3 >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(v2 + 8 * v5 + 32);
      }
      double v7 = v6;
      if (one-time initialization token for breathInTransform != -1) {
        swift_once();
      }
      ++v5;
      v8[0] = static SyncedLyricsLineView.InstrumentalContentView.Specs.breathInTransform;
      v8[1] = *(_OWORD *)algn_1005ADFB0;
      uint64_t v8[2] = xmmword_1005ADFC0;
      [v7 setTransform:v8];
    }
    while (v3 != v5);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall SyncedLyricsLineView.InstrumentalContentView.update(elapsedTime:)(Swift::Double elapsedTime)
{
  uint64_t v4 = (double *)((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_line);
  double v5 = *(double *)((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_line + 8);
  uint64_t v6 = OBJC_IVAR___MusicInstrumentalContentView_dotFadeInDuration;
  double v7 = (elapsedTime - (v5 + 1.0)) / *(double *)((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_dotFadeInDuration);
  if ((~*(void *)&v7 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_61;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (__OFADD__((uint64_t)v7, 1))
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  uint64_t v8 = *(uint64_t *)((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_specs + 488);
  if ((uint64_t)v7 + 1 >= v8) {
    uint64_t v9 = *(uint64_t *)((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_specs + 488);
  }
  else {
    uint64_t v9 = (uint64_t)v7 + 1;
  }
  uint64_t v10 = OBJC_IVAR___MusicInstrumentalContentView_totalDotsCompleted;
  uint64_t v11 = *(uint64_t *)((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_totalDotsCompleted);
  if (v9 < v11)
  {
    SyncedLyricsLineView.InstrumentalContentView.reset()();
    double v12 = (unint64_t *)((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_dots);
    swift_beginAccess();
    unint64_t v1 = *v12;
    double v45 = v2;
    if (!(v1 >> 62))
    {
      uint64_t v13 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v13)
      {
LABEL_11:
        if (v13 >= 1)
        {
          uint64_t v14 = 0;
          do
          {
            if ((v1 & 0xC000000000000001) != 0) {
              id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v15 = *(id *)(v1 + 8 * v14 + 32);
            }
            CGFloat v16 = v15;
            id v17 = [v15 layer];
            [v17 removeAllAnimations];

            if (one-time initialization token for dotInitialAlpha != -1) {
              swift_once();
            }
            ++v14;
            [v16 setAlpha:*(double *)&static SyncedLyricsLineView.InstrumentalContentView.Specs.dotInitialAlpha];
            uint64_t v47 = 0;
            id v48 = 0;
            uint64_t aBlock = 0x3FF0000000000000;
            uint64_t v49 = 0x3FF0000000000000;
            uint64_t v50 = 0;
            uint64_t v51 = 0;
            [v16 setTransform:&aBlock];
          }
          while (v13 != v14);
          goto LABEL_65;
        }
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
        do
        {
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          swift_bridgeObjectRetain();
          id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          swift_bridgeObjectRelease();
LABEL_36:
          double v23 = *(double *)((char *)v2 + v6) + -0.1;
          uint64_t v24 = swift_allocObject();
          *(void *)(v24 + 16) = v22;
          id v25 = objc_allocWithZone((Class)UIViewPropertyAnimator);
          uint64_t v50 = partial apply for closure #1 in SyncedLyricsLineView.InstrumentalContentView.update(elapsedTime:);
          uint64_t v51 = v24;
          uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
          uint64_t v47 = 1107296256;
          id v48 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
          uint64_t v49 = (uint64_t)&block_descriptor_72_0;
          uint64_t v26 = _Block_copy(&aBlock);
          id v27 = v22;
          unint64_t v2 = v45;
          swift_release();
          id v28 = [v25 initWithDuration:3 curve:v26 animations:v23];
          _Block_release(v26);
          [v28 startAnimation];

          double v5 = v4[1];
LABEL_37:
          double v29 = *(double *)((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_breathDuration);
          double v30 = (elapsedTime - v5) / v29;
          if ((~*(void *)&v30 & 0x7FF0000000000000) == 0) {
            goto LABEL_70;
          }
          if (v30 <= -9.22337204e18) {
            goto LABEL_71;
          }
          if (v30 >= 9.22337204e18) {
            goto LABEL_72;
          }
          uint64_t v31 = (uint64_t)v30 + 1;
          if (__OFADD__((uint64_t)v30, 1)) {
            goto LABEL_73;
          }
          uint64_t v32 = OBJC_IVAR___MusicInstrumentalContentView_totalBreathsCompleted;
          if (*(uint64_t *)((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_totalBreathsCompleted) >= v31) {
            goto LABEL_44;
          }
          double v33 = self;
          uint64_t v34 = swift_allocObject();
          *(void *)(v34 + 16) = v2;
          *(void *)(v34 + 24) = v31;
          uint64_t v50 = partial apply for closure #2 in SyncedLyricsLineView.InstrumentalContentView.update(elapsedTime:);
          uint64_t v51 = v34;
          uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
          uint64_t v47 = 1107296256;
          id v48 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
          uint64_t v49 = (uint64_t)&block_descriptor_66;
          double v35 = _Block_copy(&aBlock);
          CGFloat v36 = v2;
          swift_release();
          [v33 animateWithDuration:0x20000 delay:v35 options:0 animations:v29 + -0.4 completion:0.2];
          _Block_release(v35);
          uint64_t v37 = *(uint64_t *)((char *)v2 + v32);
          BOOL v38 = __OFADD__(v37, 1);
          uint64_t v39 = (char *)(v37 + 1);
        }
        while (v38);
        *(char **)((char *)v2 + v32) = v39;
        goto LABEL_44;
      }
LABEL_65:
      swift_bridgeObjectRelease();
      SyncedLyricsLineView.InstrumentalContentView.fadeIn(elapsedTime:)(elapsedTime);
      return;
    }
LABEL_64:
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    if (v13) {
      goto LABEL_11;
    }
    goto LABEL_65;
  }
  if ((*((unsigned char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_totalDotsFadedIn + 8) & 1) != 0
    || (v5 + 1.0 < elapsedTime
      ? (BOOL v18 = *(char **)((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_totalDotsFadedIn) == (char *)v8)
      : (BOOL v18 = 0),
        !v18 || v4[2] + -1.8 <= elapsedTime))
  {
LABEL_44:
    double v40 = v4[2];
    BOOL v41 = v40 > elapsedTime && v40 + -1.8 < elapsedTime;
    if (v41 && (*((unsigned char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_fadeOutCued) & 1) == 0) {
      SyncedLyricsLineView.InstrumentalContentView.fadeOut()();
    }
    return;
  }
  if (v9 == v11 || *((unsigned char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_isSelected) != 1) {
    goto LABEL_37;
  }
  uint64_t v19 = v9 - 1;
  if (__OFSUB__(v9, 1)) {
    goto LABEL_75;
  }
  double v45 = v2;
  if (v19 < v11) {
    goto LABEL_76;
  }
  if (v11 == v19)
  {
LABEL_32:
    unint64_t v2 = v45;
    *(char **)((char *)v45 + v10) = (char *)v9;
    uint64_t v20 = (uint64_t *)((char *)v45 + OBJC_IVAR___MusicInstrumentalContentView_dots);
    swift_beginAccess();
    uint64_t v21 = *v20;
    if ((*v20 & 0xC000000000000001) != 0) {
      goto LABEL_77;
    }
    if (v19 < 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v19 < *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v22 = *(id *)(v21 + 8 * v19 + 32);
      goto LABEL_36;
    }
    __break(1u);
  }
  else if (v11 < v19)
  {
    double v42 = (uint64_t *)((char *)v2 + OBJC_IVAR___MusicInstrumentalContentView_dots);
    swift_beginAccess();
    unint64_t v2 = &selRef_shadowColor;
    while (1)
    {
      uint64_t v43 = *v42;
      if ((*v42 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        id v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        if (v11 < 0) {
          goto LABEL_68;
        }
        if ((unint64_t)v11 >= *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_69;
        }
        id v44 = *(id *)(v43 + 8 * v11 + 32);
      }
      ++v11;
      [v44 setAlpha:1.0];

      if (v19 == v11) {
        goto LABEL_32;
      }
    }
  }
  __break(1u);
}

uint64_t closure #2 in SyncedLyricsLineView.InstrumentalContentView.update(elapsedTime:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (unint64_t *)(a1 + OBJC_IVAR___MusicInstrumentalContentView_dots);
  swift_beginAccess();
  unint64_t v4 = *v3;
  if (!(v4 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v5) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v5 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  if (v5 >= 1)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v9 = *(id *)(v4 + 8 * i + 32);
      }
      uint64_t v10 = v9;
      if ((a2 & 0x8000000000000001) == 1)
      {
        if (one-time initialization token for breathInTransform != -1) {
          swift_once();
        }
        long long v11 = static SyncedLyricsLineView.InstrumentalContentView.Specs.breathInTransform;
        long long v12 = *(_OWORD *)algn_1005ADFB0;
        long long v8 = xmmword_1005ADFC0;
      }
      else
      {
        if (one-time initialization token for breathOutTransform != -1) {
          swift_once();
        }
        long long v11 = static SyncedLyricsLineView.InstrumentalContentView.Specs.breathOutTransform;
        long long v12 = xmmword_1005ADF80;
        long long v8 = xmmword_1005ADF90;
      }
      long long v13 = v8;
      [v10 setTransform:&v11];
    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void SyncedLyricsLineView.InstrumentalContentView.fadeOut()()
{
  if ((v0[OBJC_IVAR___MusicInstrumentalContentView_fadeOutCued] & 1) == 0)
  {
    v0[OBJC_IVAR___MusicInstrumentalContentView_fadeOutCued] = 1;
    id v1 = objc_msgSend(objc_allocWithZone((Class)UIViewPropertyAnimator), "initWithDuration:controlPoint1:controlPoint2:animations:", 0, 1.0, 0.25, 0.1, 0.25, 1.0);
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = v0;
    id v17 = partial apply for closure #1 in SyncedLyricsLineView.InstrumentalContentView.fadeOut();
    uint64_t v18 = v2;
    long long v13 = _NSConcreteStackBlock;
    uint64_t v14 = 1107296256;
    id v15 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    CGFloat v16 = &block_descriptor_58;
    uint64_t v3 = _Block_copy(&v13);
    unint64_t v4 = v0;
    swift_release();
    [v1 addAnimations:v3];
    _Block_release(v3);
    [v1 startAnimation];
    id v5 = [objc_allocWithZone((Class)UIViewPropertyAnimator) initWithDuration:1 curve:0 animations:0.3];
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    id v17 = partial apply for closure #2 in SyncedLyricsLineView.InstrumentalContentView.fadeOut();
    uint64_t v18 = v6;
    long long v13 = _NSConcreteStackBlock;
    uint64_t v14 = 1107296256;
    id v15 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    CGFloat v16 = &block_descriptor_54_0;
    double v7 = _Block_copy(&v13);
    long long v8 = v4;
    swift_release();
    [v5 addAnimations:v7];
    _Block_release(v7);
    [v5 startAnimationAfterDelay:1.0];
    id v9 = [objc_allocWithZone((Class)UIViewPropertyAnimator) initWithDuration:1 curve:0 animations:0.5];
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v8;
    id v17 = partial apply for closure #3 in SyncedLyricsLineView.InstrumentalContentView.fadeOut();
    uint64_t v18 = v10;
    long long v13 = _NSConcreteStackBlock;
    uint64_t v14 = 1107296256;
    id v15 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    CGFloat v16 = &block_descriptor_60_1;
    long long v11 = _Block_copy(&v13);
    long long v12 = v8;
    swift_release();
    [v9 addAnimations:v11];
    _Block_release(v11);
    [v9 startAnimationAfterDelay:1.0];
  }
}

uint64_t closure #1 in SyncedLyricsLineView.InstrumentalContentView.fadeOut()(uint64_t a1)
{
  id v1 = (unint64_t *)(a1 + OBJC_IVAR___MusicInstrumentalContentView_dots);
  swift_beginAccess();
  unint64_t v2 = *v1;
  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v3 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  if (v3 >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(v2 + 8 * v5 + 32);
      }
      double v7 = v6;
      if (one-time initialization token for fadeOutZoomInTransform != -1) {
        swift_once();
      }
      ++v5;
      v8[0] = static SyncedLyricsLineView.InstrumentalContentView.Specs.fadeOutZoomInTransform;
      v8[1] = xmmword_1005ADFE0;
      uint64_t v8[2] = xmmword_1005ADFF0;
      [v7 setTransform:v8];
    }
    while (v3 != v5);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t closure #2 in SyncedLyricsLineView.InstrumentalContentView.fadeOut()(uint64_t a1)
{
  id v1 = (unint64_t *)(a1 + OBJC_IVAR___MusicInstrumentalContentView_dots);
  swift_beginAccess();
  unint64_t v2 = *v1;
  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v3 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(v2 + 8 * i + 32);
      }
      double v7 = v6;
      [v6 setAlpha:0.0];
    }
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t closure #3 in SyncedLyricsLineView.InstrumentalContentView.fadeOut()(uint64_t a1)
{
  id v1 = (unint64_t *)(a1 + OBJC_IVAR___MusicInstrumentalContentView_dots);
  swift_beginAccess();
  unint64_t v2 = *v1;
  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v3 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  if (v3 >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(v2 + 8 * v5 + 32);
      }
      double v7 = v6;
      if (one-time initialization token for fadeOutZoomOutTransform != -1) {
        swift_once();
      }
      ++v5;
      v8[0] = static SyncedLyricsLineView.InstrumentalContentView.Specs.fadeOutZoomOutTransform;
      v8[1] = *(_OWORD *)algn_1005AE010;
      uint64_t v8[2] = xmmword_1005AE020;
      [v7 setTransform:v8];
    }
    while (v3 != v5);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void SyncedLyricsLineView.InstrumentalContentView.createDots()()
{
  id v1 = &v0[OBJC_IVAR___MusicInstrumentalContentView_specs];
  uint64_t v2 = *(void *)&v0[OBJC_IVAR___MusicInstrumentalContentView_specs + 488];
  if (v2 < 0)
  {
LABEL_16:
    __break(1u);
  }
  else if (v2)
  {
    uint64_t v3 = v0;
    uint64_t v4 = 0;
    uint64_t v5 = &v0[OBJC_IVAR___MusicInstrumentalContentView_dots];
    do
    {
      id v6 = [objc_allocWithZone((Class)UIView) init];
      double v7 = v6;
      double v8 = 1.3;
      if (!v4) {
        goto LABEL_7;
      }
      uint64_t v9 = *((void *)v1 + 61);
      BOOL v10 = __OFSUB__(v9, 1);
      uint64_t v11 = v9 - 1;
      if (v10)
      {
        __break(1u);
        goto LABEL_16;
      }
      double v8 = -1.3;
      if (v4 == v11)
      {
LABEL_7:
        id v12 = [v6 layer];
        [v12 anchorPoint];
        [v12 setAnchorPoint:v13 + v8];
      }
      [v7 setBackgroundColor:*((void *)v1 + 29)];
      [v7 setAlpha:0.0];
      [v7 setAutoresizingMask:40];
      id v14 = [v7 layer];
      if (one-time initialization token for dotCornerRadius != -1) {
        swift_once();
      }
      [v14 setCornerRadius:*(double *)&static SyncedLyricsLineView.InstrumentalContentView.Specs.dotCornerRadius];

      swift_beginAccess();
      id v15 = v7;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*(void *)v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v5 & 0xFFFFFFFFFFFFFF8)
                                                                                  + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      ++v4;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      [v3 addSubview:v15];
    }
    while (v2 != v4);
  }
}

uint64_t SyncedLyricsLineView.InstrumentalContentView.layoutDots()()
{
  id v1 = v0;
  uint64_t v2 = &v0[OBJC_IVAR___MusicInstrumentalContentView_dots];
  swift_beginAccess();
  if (!(*(void *)v2 >> 62))
  {
    if (*(void *)((*(void *)v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v19) {
LABEL_3:
  }
    SyncedLyricsLineView.InstrumentalContentView.createDots()();
LABEL_4:
  double v3 = (double)*(uint64_t *)&v0[OBJC_IVAR___MusicInstrumentalContentView_specs + 488];
  if (one-time initialization token for dotCornerRadius != -1) {
    swift_once();
  }
  double v4 = *(double *)&static SyncedLyricsLineView.InstrumentalContentView.Specs.dotCornerRadius
     + *(double *)&static SyncedLyricsLineView.InstrumentalContentView.Specs.dotCornerRadius;
  double v5 = (*(double *)&static SyncedLyricsLineView.InstrumentalContentView.Specs.dotCornerRadius
      + *(double *)&static SyncedLyricsLineView.InstrumentalContentView.Specs.dotCornerRadius)
     * v3;
  double v6 = v3 + -1.0;
  if (one-time initialization token for dotMargin != -1) {
    swift_once();
  }
  double v7 = v5 + v6 * *(double *)&static SyncedLyricsLineView.InstrumentalContentView.Specs.dotMargin;
  double v8 = Int.seconds.getter(0);
  uint64_t v9 = *(void *)&v0[OBJC_IVAR___MusicInstrumentalContentView_alignment];
  if (v9 == 1)
  {
    objc_msgSend(v0, "bounds", v8);
    double v10 = (CGRectGetWidth(v21) - v7) * 0.5;
  }
  else
  {
    double v10 = v8;
    if (v9 == 2)
    {
      [v0 bounds];
      double v10 = CGRectGetWidth(v20) - v7;
    }
  }
  unint64_t v11 = *(void *)v2;
  if (!(v11 >> 62))
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v12) {
      goto LABEL_14;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v12 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_14:
  if (v12 >= 1)
  {
    uint64_t v14 = 0;
    do
    {
      if ((v11 & 0xC000000000000001) != 0) {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v15 = *(id *)(v11 + 8 * v14 + 32);
      }
      CGFloat v16 = v15;
      ++v14;
      [v1 bounds];
      UIView.untransformedFrame.setter(v10, v17 * 0.5 - v4 * 0.5, v4, v4);
      double v18 = *(double *)&static SyncedLyricsLineView.InstrumentalContentView.Specs.dotMargin;

      double v10 = v10 + v4 + v18;
    }
    while (v12 != v14);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}