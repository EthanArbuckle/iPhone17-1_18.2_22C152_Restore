uint64_t sub_100004BB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  v0 = sub_10005DCD8();
  sub_100008EE8(v0, qword_100097798);
  v1 = sub_100008DB0(v0, (uint64_t)qword_100097798);
  if (qword_1000978A0 != -1) {
    swift_once();
  }
  v2 = sub_100008DB0(v0, (uint64_t)qword_10009FA90);
  v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_100004C80(void *a1, id a2)
{
  id v3 = a2;
  id v5 = objc_msgSend(objc_msgSend(a2, "sourceContents"), "descriptorIdentifier");
  swift_unknownObjectRelease();
  if (v5)
  {
    uint64_t v6 = sub_10005DE68();
    unint64_t v8 = v7;

    swift_bridgeObjectRetain();
    char v9 = sub_100033BEC();
    switch(v9)
    {
      case 5:
        uint64_t v61 = v6;
        uint64_t v55 = type metadata accessor for Pro24WallpaperRenderer();
        v10 = (uint64_t (**)(uint64_t, uint64_t))&off_100081068;
        break;
      case 6:
        uint64_t v61 = v6;
        uint64_t v55 = type metadata accessor for ShippouRenderer();
        v10 = (uint64_t (**)(uint64_t, uint64_t))&off_100082158;
        break;
      case 7:
        uint64_t v61 = v6;
        uint64_t v55 = type metadata accessor for ToriRenderer();
        v10 = (uint64_t (**)(uint64_t, uint64_t))&off_100081E48;
        break;
      case 8:
        swift_bridgeObjectRelease();
        goto LABEL_31;
      default:
        uint64_t v61 = v6;
        uint64_t v55 = type metadata accessor for FluidityWallpaperRenderer(0);
        v10 = (uint64_t (**)(uint64_t, uint64_t))&off_10007FF88;
        break;
    }
    v54 = v10;
    unint64_t v58 = v8;
    uint64_t v59 = v2;
    v60 = a1;
    uint64_t v56 = sub_1000058BC(a1, v9);
    unint64_t v57 = v11;
    v12 = sub_100033FD0(v9);
    v66[0] = (uint64_t)_swiftEmptyArrayStorage;
    v13 = (char *)v12[2];
    id v62 = v3;
    char v63 = v9;
    if (v13)
    {
      v14 = (unint64_t *)(v12 + 10);
      do
      {
        uint64_t v15 = *(v14 - 6);
        uint64_t v16 = *(v14 - 5);
        uint64_t v17 = *(v14 - 4);
        uint64_t v18 = *(v14 - 3);
        uint64_t v19 = *((unsigned int *)v14 - 4);
        char v20 = *((unsigned char *)v14 - 12);
        uint64_t v22 = *(v14 - 1);
        unint64_t v21 = *v14;
        v67[0] = v15;
        v67[1] = v16;
        v67[2] = v17;
        v67[3] = v18;
        int v68 = v19;
        char v69 = v20;
        sub_1000093E0(v15, v16, v17, v18, v19, v20);
        swift_bridgeObjectRetain();
        sub_100008FE4((uint64_t)v67, v22, v21, v63, v66);
        sub_100009420(v15, v16, v17, v18, v19, v20);
        swift_bridgeObjectRelease();
        v14 += 7;
        --v13;
      }
      while (v13);
      swift_bridgeObjectRelease();
      uint64_t v23 = v66[0];
      id v3 = v62;
      if (!((unint64_t)v66[0] >> 62))
      {
LABEL_11:
        uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v24)
        {
LABEL_12:
          v66[0] = (uint64_t)_swiftEmptyArrayStorage;
          sub_10004FC9C(0, v24 & ~(v24 >> 63), 0);
          if (v24 < 0)
          {
            __break(1u);
            JUMPOUT(0x100005458);
          }
          uint64_t v25 = 0;
          v26 = (void *)v66[0];
          do
          {
            if ((v23 & 0xC000000000000001) != 0) {
              id v27 = (id)sub_10005E218();
            }
            else {
              id v27 = *(id *)(v23 + 8 * v25 + 32);
            }
            v28 = v27;
            id v29 = [v27 identifier];
            uint64_t v30 = sub_10005DE68();
            uint64_t v32 = v31;

            v66[0] = (uint64_t)v26;
            unint64_t v34 = v26[2];
            unint64_t v33 = v26[3];
            if (v34 >= v33 >> 1)
            {
              sub_10004FC9C(v33 > 1, v34 + 1, 1);
              v26 = (void *)v66[0];
            }
            ++v25;
            v26[2] = v34 + 1;
            v35 = &v26[2 * v34];
            v35[4] = v30;
            v35[5] = v32;
          }
          while (v24 != v25);
          swift_bridgeObjectRelease();
          id v3 = v62;
          goto LABEL_24;
        }
LABEL_23:
        swift_bridgeObjectRelease();
        v26 = _swiftEmptyArrayStorage;
LABEL_24:
        char v36 = sub_100009620(v3);
        if (qword_100097790 != -1) {
          swift_once();
        }
        uint64_t v37 = sub_10005DCD8();
        sub_100008DB0(v37, (uint64_t)qword_100097798);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v38 = sub_10005DCB8();
        os_log_type_t v39 = sub_10005E068();
        if (os_log_type_enabled(v38, v39))
        {
          char v53 = v36;
          uint64_t v40 = swift_slowAlloc();
          v66[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v40 = 136446466;
          swift_bridgeObjectRetain();
          sub_100044640(v61, v58, v66);
          sub_10005E138();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v40 + 12) = 2082;
          swift_bridgeObjectRetain();
          uint64_t v41 = v56;
          sub_100044640(v56, v57, v66);
          id v3 = v62;
          sub_10005E138();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v38, v39, "creating editing coordinator for descriptor “%{public}s” look “%{public}s”", (uint8_t *)v40, 0x16u);
          swift_arrayDestroy();
          uint64_t v42 = v61;
          swift_slowDealloc();
          char v36 = v53;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          uint64_t v42 = v61;
          uint64_t v41 = v56;
        }
        type metadata accessor for WallpaperEditingCoordinator();
        swift_allocObject();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        uint64_t v43 = sub_10003E10C(v42, v58, v55, v54, v3, v41, v57, (uint64_t)v26, v36);
        v44 = (uint64_t *)(v59 + OBJC_IVAR____TtC22MercuryPosterExtension17EditingController_resources);
        swift_beginAccess();
        swift_retain_n();
        swift_bridgeObjectRetain();
        id v45 = v60;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v65 = *v44;
        uint64_t *v44 = 0x8000000000000000;
        sub_10004707C(v63, v43, v41, v57, v45, isUniquelyReferenced_nonNull_native);
        uint64_t *v44 = v65;

        swift_bridgeObjectRelease();
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_release_n();
        return;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v23 = (uint64_t)_swiftEmptyArrayStorage;
      if (!((unint64_t)_swiftEmptyArrayStorage >> 62)) {
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_10005E328();
    swift_bridgeObjectRelease();
    if (v24) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_31:
  if (qword_100097790 != -1) {
    swift_once();
  }
  uint64_t v47 = sub_10005DCD8();
  sub_100008DB0(v47, (uint64_t)qword_100097798);
  v48 = sub_10005DCB8();
  os_log_type_t v49 = sub_10005E078();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v50 = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "couldn’t set up editing, no descriptor identifier!", v50, 2u);
    swift_slowDealloc();
  }

  id v51 = [a1 contentOverlayView];
  id v52 = [self systemGrayColor];
  id v64 = [v52 colorWithAlphaComponent:0.5];

  [v51 setBackgroundColor:v64];
}

void sub_1000054E8(void *a1, void *a2, void *a3)
{
  unint64_t v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC22MercuryPosterExtension17EditingController_resources);
  swift_beginAccess();
  uint64_t v8 = *v7;
  if (*(void *)(v8 + 16))
  {
    id v9 = a1;
    swift_bridgeObjectRetain();
    unint64_t v10 = sub_1000121A8((uint64_t)v9);
    if (v11)
    {
      v12 = (unsigned __int8 *)(*(void *)(v8 + 56) + 32 * v10);
      uint64_t v13 = *v12;
      uint64_t v14 = *((void *)v12 + 1);
      swift_retain_n();
      swift_bridgeObjectRetain();

      swift_bridgeObjectRelease();
      sub_100008EA4(v13, v14);
      id v15 = [a3 animationSettings];
      sub_10003F4F0(a2, v15);
      swift_release();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_1000056A4(void *a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC22MercuryPosterExtension17EditingController_resources);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (*(void *)(v4 + 16))
  {
    id v5 = a1;
    swift_bridgeObjectRetain();
    unint64_t v6 = sub_1000121A8((uint64_t)v5);
    if (v7)
    {
      uint64_t v8 = (unsigned __int8 *)(*(void *)(v4 + 56) + 32 * v6);
      uint64_t v9 = *v8;
      uint64_t v11 = *((void *)v8 + 1);
      uint64_t v10 = *((void *)v8 + 2);
      swift_retain();
      swift_bridgeObjectRetain_n();

      swift_bridgeObjectRelease();
      sub_100008EA4(v9, v11);
      return v10;
    }

    swift_bridgeObjectRelease();
  }
  if (qword_100097790 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_10005DCD8();
  sub_100008DB0(v12, (uint64_t)qword_100097798);
  uint64_t v13 = sub_10005DCB8();
  os_log_type_t v14 = sub_10005E078();
  if (os_log_type_enabled(v13, v14))
  {
    id v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "We don't know our initial look identifier. This will crash the editor.", v15, 2u);
    swift_slowDealloc();
  }

  return 0;
}

uint64_t sub_1000058BC(void *a1, char a2)
{
  id v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC22MercuryPosterExtension17EditingController_resources);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(v6 + 16))
  {
LABEL_5:
    id v14 = objc_msgSend(objc_msgSend(a1, "environment"), "sourceContents");
    swift_unknownObjectRelease();
    v28[0] = 0;
    id v15 = [v14 loadUserInfoWithError:v28];
    swift_unknownObjectRelease();
    id v16 = v28[0];
    if (v15)
    {
      uint64_t v17 = sub_10005DDF8();
      id v18 = v16;

      strcpy(v27, "lookIdentifier");
      v27[15] = -18;
      sub_10005E1C8();
      if (*(void *)(v17 + 16) && (unint64_t v19 = sub_100012164((uint64_t)v28), (v20 & 1) != 0))
      {
        sub_1000095C4(*(void *)(v17 + 56) + 32 * v19, (uint64_t)&v29);
      }
      else
      {
        long long v29 = 0u;
        long long v30 = 0u;
      }
      swift_bridgeObjectRelease();
      sub_100009510((uint64_t)v28);
      if (*((void *)&v30 + 1))
      {
        if (swift_dynamicCast()) {
          return *(void *)v27;
        }
      }
      else
      {
        sub_100009564((uint64_t)&v29);
      }
    }
    else
    {
      id v21 = v28[0];
      sub_10005D978();

      swift_willThrow();
      if (qword_100097790 != -1) {
        swift_once();
      }
      uint64_t v22 = sub_10005DCD8();
      sub_100008DB0(v22, (uint64_t)qword_100097798);
      uint64_t v23 = sub_10005DCB8();
      os_log_type_t v24 = sub_10005E068();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "no stored look identifier, using fallback", v25, 2u);
        swift_slowDealloc();
      }
      swift_errorRelease();
    }
    return sub_100033E0C(a2);
  }
  id v7 = a1;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1000121A8((uint64_t)v7);
  if ((v9 & 1) == 0)
  {

    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  uint64_t v10 = (unsigned __int8 *)(*(void *)(v6 + 56) + 32 * v8);
  uint64_t v11 = *v10;
  uint64_t v13 = *((void *)v10 + 1);
  uint64_t v12 = *((void *)v10 + 2);
  swift_retain();
  swift_bridgeObjectRetain_n();

  swift_bridgeObjectRelease();
  sub_100008EA4(v11, v13);
  return v12;
}

void *sub_100005C14(void *a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC22MercuryPosterExtension17EditingController_resources);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (!*(void *)(v4 + 16)) {
    goto LABEL_8;
  }
  id v5 = a1;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1000121A8((uint64_t)v5);
  if ((v7 & 1) == 0)
  {

    swift_bridgeObjectRelease();
LABEL_8:
    sub_100008F4C(&qword_1000985E0);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_10005F190;
    id v24 = objc_allocWithZone((Class)PREditingLook);
    NSString v25 = sub_10005DE38();
    NSString v26 = sub_10005DE38();
    id v27 = [v24 initWithIdentifier:v25 displayName:v26];

    *(void *)(v23 + 32) = v27;
    sub_10005DFB8();
    return (void *)v23;
  }
  unint64_t v8 = (unsigned __int8 *)(*(void *)(v4 + 56) + 32 * v6);
  uint64_t v9 = *v8;
  uint64_t v10 = *((void *)v8 + 1);
  swift_retain();
  swift_bridgeObjectRetain();

  swift_bridgeObjectRelease();
  sub_100008EA4(v9, v10);
  uint64_t v11 = sub_100033FD0(v9);
  long long v29 = _swiftEmptyArrayStorage;
  uint64_t v12 = (char *)v11[2];
  if (v12)
  {
    unsigned __int8 v28 = v9;
    uint64_t v13 = (unint64_t *)(v11 + 10);
    do
    {
      uint64_t v14 = *(v13 - 6);
      uint64_t v15 = *(v13 - 5);
      uint64_t v16 = *(v13 - 4);
      uint64_t v17 = *(v13 - 3);
      uint64_t v18 = *((unsigned int *)v13 - 4);
      char v19 = *((unsigned char *)v13 - 12);
      uint64_t v20 = *(v13 - 1);
      unint64_t v21 = *v13;
      v30[0] = v14;
      v30[1] = v15;
      v30[2] = v16;
      v30[3] = v17;
      int v31 = v18;
      char v32 = v19;
      sub_1000093E0(v14, v15, v16, v17, v18, v19);
      swift_bridgeObjectRetain();
      sub_100008FE4((uint64_t)v30, v20, v21, v28, &v29);
      sub_100009420(v14, v15, v16, v17, v18, v19);
      swift_bridgeObjectRelease();
      v13 += 7;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    return v29;
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
}

void *sub_100005EF8(void *a1)
{
  return sub_100005F38(a1, (SEL *)&selRef_depthEffectMenu, "Don't know our identifier for leadingMenuElements.");
}

void *sub_100005F24(void *a1)
{
  return sub_100005F38(a1, (SEL *)&selRef_appearanceMenu, "Don't know our identifier for trailingMenuElements.");
}

void *sub_100005F38(void *a1, SEL *a2, const char *a3)
{
  char v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC22MercuryPosterExtension17EditingController_resources);
  swift_beginAccess();
  uint64_t v8 = *v7;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_6;
  }
  id v9 = a1;
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_1000121A8((uint64_t)v9);
  if ((v11 & 1) == 0)
  {

    swift_bridgeObjectRelease();
LABEL_6:
    if (qword_100097790 != -1) {
      swift_once();
    }
    uint64_t v17 = sub_10005DCD8();
    sub_100008DB0(v17, (uint64_t)qword_100097798);
    uint64_t v18 = sub_10005DCB8();
    os_log_type_t v19 = sub_10005E068();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, a3, v20, 2u);
      swift_slowDealloc();
    }

    return _swiftEmptyArrayStorage;
  }
  uint64_t v12 = (unsigned __int8 *)(*(void *)(v8 + 56) + 32 * v10);
  uint64_t v13 = *v12;
  uint64_t v14 = *((void *)v12 + 1);
  swift_retain();
  swift_bridgeObjectRetain();

  swift_bridgeObjectRelease();
  sub_100008EA4(v13, v14);
  if ((v13 - 5) >= 3)
  {
    sub_100008F4C(&qword_1000985E0);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_10005F190;
    *(void *)(v15 + 32) = [v9 *a2];
    sub_10005DFB8();
    return (void *)v15;
  }
  return _swiftEmptyArrayStorage;
}

Class sub_100006148(void *a1, uint64_t a2, void *a3, uint64_t (*a4)(id))
{
  id v6 = a3;
  id v7 = a1;
  uint64_t v8 = a4(v6);

  if (v8)
  {
    sub_10000991C(0, &qword_100097D78);
    v9.super.isa = sub_10005DF98().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v9.super.isa = 0;
  }

  return v9.super.isa;
}

uint64_t sub_1000061EC(void *a1)
{
  uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC22MercuryPosterExtension17EditingController_resources);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (*(void *)(v4 + 16))
  {
    id v5 = a1;
    swift_bridgeObjectRetain();
    unint64_t v6 = sub_1000121A8((uint64_t)v5);
    if (v7)
    {
      uint64_t v8 = (unsigned __int8 *)(*(void *)(v4 + 56) + 32 * v6);
      uint64_t v9 = *v8;
      uint64_t v10 = *((void *)v8 + 1);
      swift_retain_n();
      swift_bridgeObjectRetain();

      swift_bridgeObjectRelease();
      sub_100008EA4(v9, v10);
      uint64_t v11 = *(char *)(v10 + 408);
      swift_release();
      return qword_10005FA80[v11];
    }

    swift_bridgeObjectRelease();
  }
  if (qword_100097790 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_10005DCD8();
  sub_100008DB0(v13, (uint64_t)qword_100097798);
  uint64_t v14 = sub_10005DCB8();
  os_log_type_t v15 = sub_10005E078();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Trying to read active appearance but no editing coordinator.", v16, 2u);
    swift_slowDealloc();
  }

  return 0;
}

void sub_1000063E4(void *a1, uint64_t a2)
{
  id v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC22MercuryPosterExtension17EditingController_resources);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (*(void *)(v6 + 16))
  {
    id v7 = a1;
    swift_bridgeObjectRetain();
    unint64_t v8 = sub_1000121A8((uint64_t)v7);
    if (v9)
    {
      uint64_t v10 = (unsigned __int8 *)(*(void *)(v6 + 56) + 32 * v8);
      uint64_t v11 = *v10;
      uint64_t v12 = *((void *)v10 + 1);
      swift_retain_n();
      swift_bridgeObjectRetain();

      swift_bridgeObjectRelease();
      sub_100008EA4(v11, v12);
      char v13 = 2 * (a2 != 1);
      if (a2 == 2) {
        char v13 = 1;
      }
      *(unsigned char *)(v12 + 408) = v13;
      sub_100041064();
      [*(id *)(v12 + 56) setNeedsDisplay];
      swift_release();
      return;
    }

    swift_bridgeObjectRelease();
  }
  if (qword_100097790 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_10005DCD8();
  sub_100008DB0(v14, (uint64_t)qword_100097798);
  os_log_type_t v15 = sub_10005DCB8();
  os_log_type_t v16 = sub_10005E078();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Trying to update appearance but no editing coordinator.", v17, 2u);
    swift_slowDealloc();
  }
}

void sub_100006624(void *a1, void *a2, double a3)
{
  id v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC22MercuryPosterExtension17EditingController_resources);
  swift_beginAccess();
  uint64_t v8 = *v7;
  if (*(void *)(v8 + 16))
  {
    id v9 = a1;
    swift_bridgeObjectRetain();
    unint64_t v10 = sub_1000121A8((uint64_t)v9);
    if (v11)
    {
      uint64_t v12 = (unsigned __int8 *)(*(void *)(v8 + 56) + 32 * v10);
      uint64_t v13 = *v12;
      uint64_t v14 = *((void *)v12 + 1);
      swift_retain_n();
      swift_bridgeObjectRetain();

      swift_bridgeObjectRelease();
      sub_100008EA4(v13, v14);
      if (qword_100097790 != -1) {
        swift_once();
      }
      uint64_t v15 = sub_10005DCD8();
      sub_100008DB0(v15, (uint64_t)qword_100097798);
      id v16 = a2;
      uint64_t v17 = sub_10005DCB8();
      os_log_type_t v18 = sub_10005E068();
      p_name = &stru_100095FF8.name;
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v20 = swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 136315394;
        id v21 = [v16 identifier];
        uint64_t v22 = sub_10005DE68();
        unint64_t v24 = v23;

        sub_100044640(v22, v24, &v36);
        sub_10005E138();

        swift_bridgeObjectRelease();
        *(_WORD *)(v20 + 12) = 2080;
        sub_100008F4C(&qword_100097D58);
        uint64_t v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = xmmword_10005F1A0;
        *(void *)(v25 + 56) = &type metadata for CGFloat;
        *(void *)(v25 + 64) = sub_100008F90();
        *(double *)(v25 + 32) = a3;
        uint64_t v26 = sub_10005DE78();
        sub_100044640(v26, v27, &v36);
        p_name = (char **)(&stru_100095FF8 + 8);
        sub_10005E138();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "transitioning to %s progress %s", (uint8_t *)v20, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v32 = objc_msgSend(v16, p_name[285]);
      uint64_t v33 = sub_10005DE68();
      uint64_t v35 = v34;

      sub_10003FE50(v33, v35, a3);
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }

    swift_bridgeObjectRelease();
  }
  if (qword_100097790 != -1) {
    swift_once();
  }
  uint64_t v28 = sub_10005DCD8();
  sub_100008DB0(v28, (uint64_t)qword_100097798);
  long long v29 = sub_10005DCB8();
  os_log_type_t v30 = sub_10005E078();
  if (os_log_type_enabled(v29, v30))
  {
    int v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "no editing coordinator available to transition", v31, 2u);
    swift_slowDealloc();
  }
}

void sub_100006ABC(void *a1, void *a2)
{
  id v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC22MercuryPosterExtension17EditingController_resources);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (*(void *)(v6 + 16))
  {
    id v7 = a1;
    swift_bridgeObjectRetain();
    unint64_t v8 = sub_1000121A8((uint64_t)v7);
    if (v9)
    {
      unint64_t v10 = (unsigned __int8 *)(*(void *)(v6 + 56) + 32 * v8);
      uint64_t v11 = *v10;
      uint64_t v12 = *((void *)v10 + 1);
      swift_retain_n();
      swift_bridgeObjectRetain();

      swift_bridgeObjectRelease();
      sub_100008EA4(v11, v12);
      if (qword_100097790 != -1) {
        swift_once();
      }
      uint64_t v13 = sub_10005DCD8();
      sub_100008DB0(v13, (uint64_t)qword_100097798);
      id v14 = a2;
      uint64_t v15 = sub_10005DCB8();
      os_log_type_t v16 = sub_10005E068();
      p_name = &stru_100095FF8.name;
      if (os_log_type_enabled(v15, v16))
      {
        os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v18 = 136315138;
        id v19 = [v14 identifier];
        uint64_t v20 = sub_10005DE68();
        unint64_t v22 = v21;

        p_name = (char **)(&stru_100095FF8 + 8);
        sub_100044640(v20, v22, &v31);
        sub_10005E138();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "finalizing transition to %s", v18, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v27 = objc_msgSend(v14, p_name[285]);
      unint64_t v28 = sub_10005DE68();
      unint64_t v30 = v29;

      sub_100040030(v28, v30);
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }

    swift_bridgeObjectRelease();
  }
  if (qword_100097790 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_10005DCD8();
  sub_100008DB0(v23, (uint64_t)qword_100097798);
  unint64_t v24 = sub_10005DCB8();
  os_log_type_t v25 = sub_10005E078();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "no editing coordinator available to finish transition", v26, 2u);
    swift_slowDealloc();
  }
}

void sub_100006EB0(void *a1, id a2, void *a3)
{
  id v7 = [a2 backgroundView];
  id v8 = [self blackColor];
  [v7 setBackgroundColor:v8];

  char v9 = (uint64_t *)(v3 + OBJC_IVAR____TtC22MercuryPosterExtension17EditingController_resources);
  swift_beginAccess();
  uint64_t v10 = *v9;
  if (*(void *)(v10 + 16))
  {
    id v11 = a1;
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_1000121A8((uint64_t)v11);
    if (v13)
    {
      id v14 = (unsigned __int8 *)(*(void *)(v10 + 56) + 32 * v12);
      uint64_t v15 = *v14;
      uint64_t v16 = *((void *)v14 + 1);
      swift_retain_n();
      swift_bridgeObjectRetain();

      swift_bridgeObjectRelease();
      sub_100008EA4(v15, v16);
      id v17 = [a2 backgroundView];
      id v18 = [a2 floatingView];
      id v19 = [a3 identifier];
      unint64_t v20 = sub_10005DE68();
      unint64_t v22 = v21;

      sub_10003E794(v17, v18, v20, v22);
      swift_bridgeObjectRelease();
      if (*(void *)(v16 + 80))
      {
        uint64_t v27 = *(void *)(v16 + 88);
        uint64_t ObjectType = swift_getObjectType();
        unint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 88);
        swift_unknownObjectRetain();
        v29(1, ObjectType, v27);
        swift_unknownObjectRelease();
      }
      swift_release();
      return;
    }

    swift_bridgeObjectRelease();
  }
  if (qword_100097790 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_10005DCD8();
  sub_100008DB0(v23, (uint64_t)qword_100097798);
  unint64_t v24 = sub_10005DCB8();
  os_log_type_t v25 = sub_10005E078();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "no editing coordinator available to populate views", v26, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1000073C8(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = (uint64_t *)(v3 + OBJC_IVAR____TtC22MercuryPosterExtension17EditingController_resources);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (*(void *)(v6 + 16))
  {
    id v7 = a1;
    swift_bridgeObjectRetain();
    unint64_t v8 = sub_1000121A8((uint64_t)v7);
    if (v9)
    {
      uint64_t v10 = (unsigned __int8 *)(*(void *)(v6 + 56) + 32 * v8);
      uint64_t v11 = *v10;
      uint64_t v12 = *((void *)v10 + 1);
      swift_retain_n();
      swift_bridgeObjectRetain();

      swift_bridgeObjectRelease();
      sub_100008EA4(v11, v12);
      int v13 = *(unsigned __int8 *)(v12 + 408);
      goto LABEL_10;
    }

    swift_bridgeObjectRelease();
  }
  if (qword_100097790 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_10005DCD8();
  sub_100008DB0(v14, (uint64_t)qword_100097798);
  uint64_t v15 = sub_10005DCB8();
  os_log_type_t v16 = sub_10005E078();
  if (os_log_type_enabled(v15, v16))
  {
    int v13 = 2;
    id v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "no editing coordinator available to provide an appearance mode in finalization", v17, 2u);
    swift_slowDealloc();

    uint64_t v12 = 0;
  }
  else
  {

    uint64_t v12 = 0;
    int v13 = 2;
  }
LABEL_10:
  id v18 = objc_msgSend(objc_msgSend(a1, "environment", a3, a2), "targetConfiguration");
  swift_unknownObjectRelease();
  sub_100008F4C(&qword_100097D48);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10005F1B0;
  strcpy((char *)v41, "lookIdentifier");
  sub_10005E1C8();
  id v20 = [a1 currentLook];
  id v21 = [v20 identifier];

  uint64_t v22 = sub_10005DE68();
  uint64_t v24 = v23;

  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = v22;
  *(void *)(inited + 80) = v24;
  strcpy((char *)v41, "appearanceMode");
  HIBYTE(v41[1]) = -18;
  sub_10005E1C8();
  if (v13)
  {
    if (v13 == 1)
    {
      unint64_t v25 = 0xE400000000000000;
      uint64_t v26 = 1802658116;
    }
    else
    {
      unint64_t v25 = 0xE900000000000063;
      uint64_t v26 = 0x6974616D6F747541;
    }
  }
  else
  {
    unint64_t v25 = 0xE500000000000000;
    uint64_t v26 = 0x746867694CLL;
  }
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 144) = v26;
  *(void *)(inited + 152) = v25;
  sub_10000A62C(inited);
  Class isa = sub_10005DDE8().super.isa;
  swift_bridgeObjectRelease();
  v41[0] = 0;
  unsigned int v28 = [v18 storeUserInfo:isa error:v41];

  if (v28)
  {
    id v29 = v41[0];
    if (!v12) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  id v30 = v41[0];
  sub_10005D978();

  swift_willThrow();
  if (qword_100097790 != -1) {
    swift_once();
  }
  uint64_t v31 = sub_10005DCD8();
  sub_100008DB0(v31, (uint64_t)qword_100097798);
  swift_errorRetain();
  swift_errorRetain();
  id v32 = sub_10005DCB8();
  os_log_type_t v33 = sub_10005E078();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v35 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 138543362;
    swift_errorRetain();
    uint64_t v36 = (void *)_swift_stdlib_bridgeErrorToNSError();
    v41[0] = v36;
    sub_10005E138();
    void *v35 = v36;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "couldn’t store user info: %{public}@", v34, 0xCu);
    sub_100008F4C(&qword_100097D50);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v29 = (id)swift_errorRelease();
    if (!v12) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();

  if (v12)
  {
LABEL_24:
    swift_retain();
    sub_100036728();
    id v29 = (id)swift_release();
  }
LABEL_25:
  v40(v29);
  return swift_release();
}

uint64_t sub_100007A20(uint64_t a1)
{
  if (qword_100097790 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10005DCD8();
  sub_100008DB0(v2, (uint64_t)qword_100097798);
  uint64_t v3 = sub_10005DCB8();
  os_log_type_t v4 = sub_10005E068();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "editor invalidated, cleaning up coordinator", v5, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t v6 = sub_10003176C(a1);
  uint64_t v8 = v7;
  swift_endAccess();
  return sub_100008EA4(v6, v8);
}

id sub_100007C40()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EditingController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t variable initialization expression of ToriScene.wasAwake()
{
  return 0;
}

double variable initialization expression of ToriScene.lastUpdateTime()
{
  return 0.0;
}

double variable initialization expression of FluidityParameters.State.front()
{
  return 0.0;
}

float variable initialization expression of FluidityParameters.Device.intersectionFactor()
{
  return 1.0;
}

double variable initialization expression of FluidityParameters.Device.lock()
{
  return 0.0;
}

double variable initialization expression of FluidityParameters.Device.frontOuterShapeMask()
{
  return 0.0;
}

double sub_100007CD0@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 52) = xmmword_10005F1C0;
  *(_OWORD *)(a1 + 68) = xmmword_10005F1D0;
  *(_OWORD *)(a1 + 84) = xmmword_10005F1E0;
  *(_OWORD *)(a1 + 100) = xmmword_10005F1C0;
  *(_OWORD *)(a1 + 116) = xmmword_10005F1F0;
  *(_OWORD *)(a1 + 132) = xmmword_10005F200;
  *(void *)&double result = 1065353216;
  *(void *)(a1 + 148) = 1065353216;
  return result;
}

float variable initialization expression of ColorOptions.noiseBlendFactor()
{
  return 0.04;
}

uint64_t variable initialization expression of ContinuousRenderingToken.coordinator()
{
  return 0;
}

uint64_t variable initialization expression of ToriScene.uniformBufferOffset()
{
  return 0;
}

void *variable initialization expression of ToriScene.lights()
{
  return &_swiftEmptyArrayStorage;
}

__n128 variable initialization expression of ShippouScene.cameraHolder()
{
  return (__n128)matrix_identity_float4x4.columns[0];
}

__n128 variable initialization expression of ShippouScene.camera()
{
  type metadata accessor for ShippouCamera();
  uint64_t v0 = swift_allocObject();
  *(_DWORD *)(v0 + 16) = 1109288550;
  __n128 result = (__n128)matrix_identity_float4x4.columns[0];
  simd_float4 v2 = matrix_identity_float4x4.columns[1];
  simd_float4 v3 = matrix_identity_float4x4.columns[2];
  simd_float4 v4 = matrix_identity_float4x4.columns[3];
  *(simd_float4 *)(v0 + 32) = matrix_identity_float4x4.columns[0];
  *(simd_float4 *)(v0 + 48) = v2;
  *(simd_float4 *)(v0 + 64) = v3;
  *(simd_float4 *)(v0 + 80) = v4;
  return result;
}

double variable initialization expression of ToriScene.tapTarget()
{
  return 0.0;
}

double variable initialization expression of ShippouScene.tapEulerMultiplier()
{
  return 0.00000000435898515;
}

double variable initialization expression of ToriScene.tapTimeMultiplier()
{
  return 1.0;
}

id variable initialization expression of ShippouScene.undimTiming()
{
  id v0 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v1) = 0.5;
  LODWORD(v2) = 1.0;

  return [v0 initWithControlPoints:v1 :0.0 :0.0 :v2];
}

id variable initialization expression of ShippouScene.unlockTiming()
{
  id v0 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v1) = 1059481190;
  LODWORD(v2) = 1051931443;
  LODWORD(v3) = 1.0;

  return [v0 initWithControlPoints:v1 :0.0 :v2 :v3];
}

uint64_t variable initialization expression of ToriRenderer.look()
{
  return 5;
}

uint64_t variable initialization expression of ShippouRenderer.look()
{
  return 4;
}

double variable initialization expression of LightData.color()
{
  return 0.00781250185;
}

uint64_t variable initialization expression of ToriLight.softFalloff()
{
  return 1;
}

double variable initialization expression of LightData.rightvec()
{
  *(void *)&double result = 1065353216;
  return result;
}

double variable initialization expression of LightData.upvec()
{
  return 0.0078125;
}

double variable initialization expression of LightData.forwardvec()
{
  return 0.0;
}

float variable initialization expression of ToriLightKey.power()
{
  return 100.0;
}

float variable initialization expression of ToriLightKey.spotAngle()
{
  return 1.5708;
}

double variable initialization expression of ToriScene.camera()
{
  type metadata accessor for ToriCamera();
  id v0 = (_OWORD *)swift_allocObject();
  double result = 0.00781250195;
  simd_float4 v2 = matrix_identity_float4x4.columns[0];
  simd_float4 v3 = matrix_identity_float4x4.columns[1];
  simd_float4 v4 = matrix_identity_float4x4.columns[2];
  simd_float4 v5 = matrix_identity_float4x4.columns[3];
  v0[1] = xmmword_10005F250;
  v0[2] = v2;
  v0[3] = v3;
  v0[4] = v4;
  v0[5] = v5;
  return result;
}

id variable initialization expression of ToriScene.undimTiming()
{
  id v0 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v1) = 0.5;
  LODWORD(v2) = 1.0;
  LODWORD(v3) = 0.5;

  return [v0 initWithControlPoints:v1 :0.0 :v2 :v3];
}

id variable initialization expression of ToriScene.unlockTiming()
{
  id v0 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v1) = 1055119114;
  LODWORD(v2) = 1028443341;
  LODWORD(v3) = 1057803469;
  LODWORD(v4) = 1064514355;

  return [v0 initWithControlPoints:v1 :v2 :v3 :v4];
}

uint64_t type metadata accessor for EditingController()
{
  return self;
}

__n128 sub_100008008(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10000801C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000803C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for simd_float3x3(uint64_t a1)
{
}

void type metadata accessor for UIUserInterfaceStyle(uint64_t a1)
{
}

__n128 initializeBufferWithCopyOfBuffer for FluidityWallpaperRenderer.MeshResource.MeshVertex(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

__n128 initializeWithTake for EditingController.EditingResources(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000080C8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

void type metadata accessor for Option(uint64_t a1)
{
}

__n128 sub_10000811C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_100008130(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100008150(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

void type metadata accessor for simd_float4x4(uint64_t a1)
{
}

__n128 sub_1000081A0(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  long long v8 = a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  __n128 result = (__n128)a2[12];
  long long v12 = a2[13];
  long long v13 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v13;
  *(__n128 *)(a1 + 192) = result;
  *(_OWORD *)(a1 + 208) = v12;
  return result;
}

uint64_t sub_1000081E4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 256)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100008204(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 248) = 0;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 256) = v3;
  return result;
}

void type metadata accessor for FluidityRenderUniforms(uint64_t a1)
{
}

__n128 sub_100008284(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100008298(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_1000082EC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 28) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for FluiditySDFUniforms(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for WallpaperEditingCoordinator.EditingLookResources.Contents(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for EditingController.EditingResources()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EditingController.EditingResources(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for EditingController.EditingResources(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for EditingController.EditingResources(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EditingController.EditingResources(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EditingController.EditingResources(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EditingController.EditingResources()
{
  return &type metadata for EditingController.EditingResources;
}

void *sub_100008558@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_100008568(uint64_t a1, uint64_t a2)
{
  return sub_10000893C(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

void sub_100008588(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_10000859C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

BOOL sub_1000085B0(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1000085E0(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_1000085F4(void *result)
{
  *v1 &= *result;
  return result;
}

void sub_10000860C()
{
  sub_10005E508(*v0);
}

BOOL sub_10000863C(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100008650()
{
  return sub_10005DC38();
}

uint64_t sub_10000869C()
{
  return sub_10005DC28();
}

Swift::Int sub_1000086F4()
{
  return sub_10005E528();
}

Swift::Int sub_10000875C()
{
  Swift::UInt v1 = *v0;
  sub_10005E4F8();
  sub_10005E508(v1);
  return sub_10005E528();
}

Swift::Int sub_1000087A4()
{
  Swift::UInt v1 = *v0;
  sub_10005E4F8();
  sub_10005E508(v1);
  return sub_10005E528();
}

uint64_t sub_1000087E8(uint64_t a1, uint64_t a2)
{
  return sub_10000893C(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100008800(uint64_t a1, id *a2)
{
  uint64_t result = sub_10005DE48();
  *a2 = 0;
  return result;
}

uint64_t sub_100008878(uint64_t a1, id *a2)
{
  char v3 = sub_10005DE58();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1000088F8@<X0>(void *a1@<X8>)
{
  sub_10005DE68();
  NSString v2 = sub_10005DE38();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10000893C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_10005DE68();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100008980()
{
  sub_10005DE68();
  sub_10005DEB8();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000089D4()
{
  sub_10005DE68();
  sub_10005E4F8();
  sub_10005DEB8();
  Swift::Int v0 = sub_10005E528();
  swift_bridgeObjectRelease();
  return v0;
}

void *sub_100008A4C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_100008A58(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100008A64()
{
  swift_getWitnessTable();

  return sub_10005DC18();
}

uint64_t sub_100008AD0()
{
  uint64_t v0 = sub_10005DE68();
  uint64_t v2 = v1;
  if (v0 == sub_10005DE68() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_10005E448();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_100008B60(uint64_t a1)
{
  uint64_t v2 = sub_100008CAC(&qword_1000985F0, type metadata accessor for Option);
  uint64_t v3 = sub_100008CAC(&qword_100097D40, type metadata accessor for Option);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100008C1C()
{
  return sub_100008CAC(&qword_100097D20, type metadata accessor for Option);
}

uint64_t sub_100008C64()
{
  return sub_100008CAC(&qword_100097D28, type metadata accessor for Option);
}

uint64_t sub_100008CAC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100008CF4()
{
  return sub_100008CAC((unint64_t *)&unk_100097D30, type metadata accessor for Option);
}

uint64_t sub_100008D3C@<X0>(void *a1@<X8>)
{
  NSString v2 = sub_10005DE38();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100008D84@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10005DE68();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100008DB0(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_100008DE8(uint64_t a1)
{
  uint64_t v2 = sub_100008CAC(&qword_100099AF0, type metadata accessor for IOSurfacePropertyKey);
  uint64_t v3 = sub_100008CAC(&qword_100097E40, type metadata accessor for IOSurfacePropertyKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100008EA4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *sub_100008EE8(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_100008F4C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_100008F90()
{
  unint64_t result = qword_100097D60;
  if (!qword_100097D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100097D60);
  }
  return result;
}

uint64_t sub_100008FE4(uint64_t a1, uint64_t a2, unint64_t a3, unsigned __int8 a4, void *a5)
{
  sub_100009470(a1, (uint64_t)v26);
  sub_100009470(a1, (uint64_t)v27);
  if (v28 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v24 = a5;
    uint64_t v12 = v27[0];
    unint64_t v11 = v27[1];
    uint64_t v13 = qword_100097790;
    swift_bridgeObjectRetain();
    if (v13 != -1) {
      swift_once();
    }
    uint64_t v14 = sub_10005DCD8();
    sub_100008DB0(v14, (uint64_t)qword_100097798);
    sub_1000094CC(a1, (void (*)(void, void, void, void, void, void))sub_1000093E0);
    swift_bridgeObjectRetain();
    sub_1000094CC(a1, (void (*)(void, void, void, void, void, void))sub_1000093E0);
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_10005DCB8();
    os_log_type_t v16 = sub_10005E068();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v23 = v12;
      uint64_t v17 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315650;
      uint64_t v18 = sub_1000324B8(a4);
      sub_100044640(v18, v19, &v25);
      sub_10005E138();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_100044640(v23, v11, &v25);
      sub_10005E138();
      sub_1000094CC(a1, (void (*)(void, void, void, void, void, void))sub_100009420);
      sub_1000094CC(a1, (void (*)(void, void, void, void, void, void))sub_100009420);
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 22) = 2080;
      swift_bridgeObjectRetain();
      sub_100044640(a2, a3, &v25);
      sub_10005E138();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Look - renderer: %s value: %s name: %s", (uint8_t *)v17, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000094CC(a1, (void (*)(void, void, void, void, void, void))sub_100009420);
      sub_1000094CC(a1, (void (*)(void, void, void, void, void, void))sub_100009420);

      swift_bridgeObjectRelease_n();
    }
    id v20 = objc_allocWithZone((Class)PREditingLook);
    swift_bridgeObjectRetain();
    NSString v21 = sub_10005DE38();
    sub_1000094CC(a1, (void (*)(void, void, void, void, void, void))sub_100009420);
    NSString v22 = sub_10005DE38();
    swift_bridgeObjectRelease();
    [v20 initWithIdentifier:v21 displayName:v22];

    sub_10005DF88();
    if (*(void *)((*v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_10005DFC8();
    }
    sub_10005DFE8();
    return sub_10005DFB8();
  }
}

uint64_t sub_1000093E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = vars8;
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_100009420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (a6)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100009470(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000094CC(uint64_t a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_100009510(uint64_t a1)
{
  return a1;
}

uint64_t sub_100009564(uint64_t a1)
{
  uint64_t v2 = sub_100008F4C(&qword_100097D70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000095C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100009620(void *a1)
{
  v16[0] = 0;
  id v1 = objc_msgSend(objc_msgSend(a1, "sourceContents"), "loadUserInfoWithError:", v16);
  swift_unknownObjectRelease();
  id v2 = v16[0];
  if (!v1)
  {
    id v9 = v16[0];
    sub_10005D978();

    swift_willThrow();
    if (qword_100097790 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_10005DCD8();
    sub_100008DB0(v10, (uint64_t)qword_100097798);
    unint64_t v11 = sub_10005DCB8();
    os_log_type_t v12 = sub_10005E068();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v8 = 2;
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "no stored appearance mode, using fallback", v13, 2u);
      swift_slowDealloc();
      swift_errorRelease();

      return v8;
    }
    swift_errorRelease();

    return 2;
  }
  uint64_t v3 = sub_10005DDF8();
  id v4 = v2;

  strcpy((char *)&v15, "appearanceMode");
  HIBYTE(v15._object) = -18;
  sub_10005E1C8();
  if (*(void *)(v3 + 16) && (unint64_t v5 = sub_100012164((uint64_t)v16), (v6 & 1) != 0))
  {
    sub_1000095C4(*(void *)(v3 + 56) + 32 * v5, (uint64_t)&v17);
  }
  else
  {
    long long v17 = 0u;
    long long v18 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100009510((uint64_t)v16);
  if (!*((void *)&v18 + 1))
  {
    sub_100009564((uint64_t)&v17);
    return 2;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    return 2;
  }
  v7._rawValue = &off_1000798B8;
  unint64_t v8 = sub_10005E398(v7, v15);
  swift_bridgeObjectRelease();
  if (v8 >= 3) {
    return 2;
  }
  else {
    return v8;
  }
}

uint64_t sub_1000098D4()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000990C()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_10000991C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void type metadata accessor for CGColor(uint64_t a1)
{
}

__n128 sub_10000996C(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100009978(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for CAMeshFace(uint64_t a1)
{
}

__n128 sub_1000099AC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1000099C0(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000099E0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 40) = v3;
  return result;
}

void type metadata accessor for CAMeshVertex(uint64_t a1)
{
}

uint64_t storeEnumTagSinglePayload for FluidityParameters.State(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for IOSurfaceRef(uint64_t a1)
{
}

void type metadata accessor for IOSurfacePropertyKey(uint64_t a1)
{
}

void type metadata accessor for CGImage(uint64_t a1)
{
}

void type metadata accessor for CGColorSpace(uint64_t a1)
{
}

void type metadata accessor for MTLPixelFormat(uint64_t a1)
{
}

__n128 initializeBufferWithCopyOfBuffer for FluidityParameters.State(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FluidityParameters.State(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for Pro24CropRectangle(uint64_t a1)
{
}

void type metadata accessor for Pro24TextureIndex(uint64_t a1)
{
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for FluidityParameters.Mask(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for FluidityParameters.Mask(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FluidityParameters.Mask(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 12) = v3;
  return result;
}

void type metadata accessor for FluidityMask(uint64_t a1)
{
}

void type metadata accessor for UIInterfaceOrientation(uint64_t a1)
{
}

uint64_t sub_100009BCC()
{
  return sub_100008CAC(&qword_100097E00, type metadata accessor for UIInterfaceOrientation);
}

uint64_t sub_100009C14()
{
  return sub_100008CAC(&qword_100097E08, type metadata accessor for Pro24TextureIndex);
}

uint64_t sub_100009C5C()
{
  return sub_100008CAC(&qword_100097E10, type metadata accessor for IOSurfacePropertyKey);
}

uint64_t sub_100009CA4()
{
  return sub_100008CAC(&qword_100097E18, type metadata accessor for IOSurfacePropertyKey);
}

uint64_t sub_100009CEC()
{
  return sub_100008CAC(&qword_100097E20, type metadata accessor for CFString);
}

uint64_t sub_100009D34()
{
  return sub_100008CAC(&qword_100097E28, type metadata accessor for CFString);
}

uint64_t sub_100009D7C()
{
  return sub_100008CAC((unint64_t *)&unk_100097E30, type metadata accessor for IOSurfacePropertyKey);
}

__n128 initializeWithTake for DrawingController.TransitionSessionInfo(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t sub_100009DD8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100009DF8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void type metadata accessor for CAPoint3D(uint64_t a1)
{
}

void sub_100009E38(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

__n128 sub_100009EB0@<Q0>(_OWORD *a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, __n128 a4@<Q2>)
{
  sub_100008F4C(&qword_100099BD0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10005FAA0;
  *(void *)(inited + 32) = a2.n128_u64[0];
  *(_DWORD *)(inited + 40) = a2.n128_u32[2];
  sub_100050AD0(inited);
  long long v15 = v6;
  swift_setDeallocating();
  uint64_t v7 = swift_initStackObject();
  *(_OWORD *)(v7 + 16) = xmmword_10005FAA0;
  *(void *)(v7 + 32) = a3.n128_u64[0];
  *(_DWORD *)(v7 + 40) = a3.n128_u32[2];
  sub_100050AD0(v7);
  long long v13 = v8;
  swift_setDeallocating();
  uint64_t v9 = swift_initStackObject();
  *(_OWORD *)(v9 + 16) = xmmword_10005FAA0;
  *(void *)(v9 + 32) = a4.n128_u64[0];
  *(_DWORD *)(v9 + 40) = a4.n128_u32[2];
  sub_100050AD0(v9);
  __n128 v17 = v10;
  swift_setDeallocating();
  *a1 = v15;
  a1[1] = v13;
  __n128 result = v17;
  a1[2] = v17;
  return result;
}

uint64_t sub_100009FB8(uint64_t a1)
{
  if ((unint64_t)(a1 - 70) > 0x2D) {
    goto LABEL_6;
  }
  if (((1 << (a1 - 70)) & 0xC03) != 0) {
    return 4;
  }
  if (a1 == 115) {
    return 8;
  }
LABEL_6:
  sub_10005E1F8(26);
  v2._object = (void *)0x8000000100063F00;
  v2._countAndFlagsBits = 0xD000000000000018;
  sub_10005DEE8(v2);
  type metadata accessor for MTLPixelFormat(0);
  sub_10005E2A8();
  uint64_t result = sub_10005E308();
  __break(1u);
  return result;
}

uint64_t sub_10000A0A8()
{
  uint64_t v0 = sub_10005DCA8();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v2 = sub_100008F4C(&qword_100097FD0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008EE8(v0, qword_10009F9E0);
  uint64_t v5 = sub_100008DB0(v0, (uint64_t)qword_10009F9E0);
  sub_10005DC98();
  sub_10005DC78();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 48))(v4, 1, v0);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v1 + 32))(v5, v4, v0);
  }
  __break(1u);
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for DescriptorManager.FluidityLook(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for WallpaperMetalRenderingFloatingLayerStyle(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for WallpaperMetalRenderingFloatingLayerStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10000A38CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_10000A3B4(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10000A3C0(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for WallpaperMetalRenderingFloatingLayerStyle()
{
  return &type metadata for WallpaperMetalRenderingFloatingLayerStyle;
}

unint64_t sub_10000A3DC()
{
  unint64_t result = qword_100097FD8;
  if (!qword_100097FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100097FD8);
  }
  return result;
}

BOOL sub_10000A430(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10000A444()
{
  Swift::UInt v1 = *v0;
  sub_10005E4F8();
  sub_10005E508(v1);
  return sub_10005E528();
}

void sub_10000A48C()
{
  sub_10005E508(*v0);
}

Swift::Int sub_10000A4B8()
{
  Swift::UInt v1 = *v0;
  sub_10005E4F8();
  sub_10005E508(v1);
  return sub_10005E528();
}

unint64_t sub_10000A4FC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008F4C(&qword_100098590);
  int v2 = (void *)sub_10005E368();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned int v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    unint64_t result = sub_1000121F8(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    __n128 v10 = (uint64_t *)(v2[6] + 16 * result);
    *__n128 v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10000A618(uint64_t a1)
{
  return sub_10000AC4C(a1, &qword_1000984E8, &qword_1000984F0);
}

unint64_t sub_10000A62C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008F4C(&qword_1000985B0);
  uint64_t v2 = sub_10005E368();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100014C5C(v6, (uint64_t)v15, &qword_1000985B8);
    unint64_t result = sub_100012164((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_100014878(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10000A770(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008F4C((uint64_t *)&unk_100099B50);
  uint64_t v2 = (void *)sub_10005E368();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void *)(a1 + 64);
  while (1)
  {
    char v5 = *((unsigned char *)v4 - 24);
    uint64_t v7 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v8 = *v4;
    id v9 = (id)*(v4 - 4);
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000121A8((uint64_t)v9);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v9;
    uint64_t v12 = v2[7] + 32 * result;
    *(unsigned char *)uint64_t v12 = v5;
    *(void *)(v12 + 8) = v7;
    *(void *)(v12 + 16) = v6;
    *(void *)(v12 + 24) = v8;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v2[2] = v15;
    v4 += 5;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10000A8B0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008F4C(&qword_100098510);
  uint64_t v2 = sub_10005E368();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100014C5C(v6, (uint64_t)&v13, &qword_100098518);
    uint64_t v7 = v13;
    unint64_t result = sub_10001232C(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_100014878(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10000A9E0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008F4C(&qword_1000985A0);
  uint64_t v2 = (void *)sub_10005E368();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    swift_retain();
    unint64_t result = sub_1000122DC((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10000AAEC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008F4C(&qword_100098598);
  uint64_t v2 = (void *)sub_10005E368();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = (void *)*(v4 - 3);
    long long v16 = *((_OWORD *)v4 - 1);
    uint64_t v6 = *v4;
    swift_retain();
    id v7 = v5;
    id v8 = (id)v16;
    id v9 = *((id *)&v16 + 1);
    unint64_t result = sub_1000122DC((uint64_t)v7);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v7;
    uint64_t v12 = v2[7] + 24 * result;
    *(_OWORD *)uint64_t v12 = v16;
    *(void *)(v12 + 16) = v6;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10000AC38(uint64_t a1)
{
  return sub_10000AC4C(a1, &qword_100098500, &qword_100098508);
}

unint64_t sub_10000AC4C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v6 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008F4C(a2);
  uint64_t v5 = sub_10005E368();
  uint64_t v6 = (void *)v5;
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v6;
  }
  uint64_t v8 = v5 + 64;
  uint64_t v9 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100014C5C(v9, (uint64_t)&v16, a3);
    uint64_t v10 = v16;
    unint64_t result = sub_1000123E0(v16);
    if (v12) {
      break;
    }
    *(void *)(v8 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v6[6] + 8 * result) = v10;
    unint64_t result = (unint64_t)sub_100014878(&v17, (_OWORD *)(v6[7] + 32 * result));
    uint64_t v13 = v6[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v6[2] = v15;
    v9 += 40;
    if (!--v7)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

CGColorSpaceRef sub_10000AD74()
{
  CGColorSpaceRef result = CGColorSpaceCreateWithName(kCGColorSpaceExtendedSRGB);
  qword_10009F9F8 = (uint64_t)result;
  return result;
}

void sub_10000ADA0()
{
  id v0 = [self currentDevice];
  id v1 = [v0 userInterfaceIdiom];

  byte_100097FE0 = v1 != (id)1;
}

BOOL sub_10000AE04(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void *sub_10000AE2C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  swift_unknownObjectRetain();
  id v8 = [a3 contents];
  size_t v9 = (size_t)[a3 length];
  if ((v9 & 0x8000000000000000) != 0
    || (memmove(v8, (const void *)(a2 + 32), v9),
        id v10 = [(id)swift_unknownObjectRetain() contents],
        size_t v11 = (size_t)[a4 length],
        (v11 & 0x8000000000000000) != 0))
  {
    CGColorSpaceRef result = (void *)sub_10005E378();
    __break(1u);
  }
  else
  {
    return memmove(v10, (const void *)(a1 + 32), v11);
  }
  return result;
}

uint64_t sub_10000AF40()
{
  if (qword_1000977C0 != -1) {
    uint64_t result = swift_once();
  }
  if (byte_100097FE0) {
    int v0 = 4;
  }
  else {
    int v0 = 5;
  }
  dword_100097FE4 = v0;
  return result;
}

uint64_t sub_10000AFA0()
{
  if (qword_1000977C0 != -1) {
    uint64_t result = swift_once();
  }
  if (byte_100097FE0) {
    __int16 v0 = 0;
  }
  else {
    __int16 v0 = 8;
  }
  word_100097FE8 = v0;
  return result;
}

uint64_t sub_10000B000()
{
  if (qword_1000977D0 != -1) {
    uint64_t result = swift_once();
  }
  if ((__int16)(word_100097FE8 + 3) == word_100097FE8 + 3) {
    word_100097FEA = word_100097FE8 + 3;
  }
  else {
    __break(1u);
  }
  return result;
}

id sub_10000B068(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = sub_100008F4C(&qword_1000984A0);
  __chkstk_darwin(v9 - 8);
  size_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10005DA28();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v56 = (char *)&v51 - v17;
  long long v18 = *(void **)(v4 + OBJC_IVAR____TtC22MercuryPosterExtension25FluidityWallpaperRenderer_loader);
  if (!v18)
  {
    if (qword_1000978D8 != -1) {
      swift_once();
    }
    uint64_t v38 = sub_10005DCD8();
    sub_100008DB0(v38, (uint64_t)qword_10009FB38);
    os_log_type_t v39 = sub_10005DCB8();
    os_log_type_t v40 = sub_10005E078();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Couldn't find metal texture loader", v41, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  uint64_t v51 = v4;
  uint64_t v57 = v16;
  uint64_t v19 = a1;
  id v20 = self;
  id v58 = v18;
  id v21 = [v20 mainBundle];
  uint64_t v52 = v19;
  unint64_t v54 = a2;
  NSString v22 = sub_10005DE38();
  unint64_t v23 = a4;
  uint64_t v24 = v22;
  uint64_t v53 = a3;
  unint64_t v55 = v23;
  NSString v25 = sub_10005DE38();
  id v26 = [v21 URLForResource:v24 withExtension:v25];

  if (!v26)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56))(v11, 1, 1, v12);
    goto LABEL_12;
  }
  sub_10005D9D8();

  uint64_t v27 = v57;
  char v28 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
  v28(v11, v15, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v11, 0, 1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v11, 1, v12) == 1)
  {
LABEL_12:
    sub_100014D24((uint64_t)v11, &qword_1000984A0);
    id v42 = v58;
    if (qword_1000978D8 != -1) {
      swift_once();
    }
    uint64_t v43 = sub_10005DCD8();
    sub_100008DB0(v43, (uint64_t)qword_10009FB38);
    unint64_t v44 = v54;
    swift_bridgeObjectRetain_n();
    unint64_t v45 = v55;
    swift_bridgeObjectRetain_n();
    v46 = sub_10005DCB8();
    os_log_type_t v47 = sub_10005E078();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc();
      id v60 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v59 = sub_100044640(v52, v44, (uint64_t *)&v60);
      sub_10005E138();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v48 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v59 = sub_100044640(v53, v45, (uint64_t *)&v60);
      sub_10005E138();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Couldn't find url for texture: %s.%s", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    return 0;
  }
  id v29 = v56;
  v28(v56, v11, v12);
  sub_10005D9B8(v30);
  id v32 = v31;
  type metadata accessor for Option(0);
  sub_100014F00(&qword_1000985F0, type metadata accessor for Option);
  Class isa = sub_10005DDE8().super.isa;
  id v60 = 0;
  id v34 = v58;
  id v35 = [v58 newTextureWithContentsOfURL:v32 options:isa error:&v60];

  if (!v35)
  {
    id v49 = v60;
    sub_10005D978();

    swift_willThrow();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v12);
    return 0;
  }
  uint64_t v36 = *(void (**)(char *, uint64_t))(v27 + 8);
  id v37 = v60;
  v36(v29, v12);

  return v35;
}

void sub_10000B700(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = v6;
  uint64_t v201 = a6;
  uint64_t v194 = a4;
  uint64_t v195 = a5;
  id v204 = a1;
  uint64_t v9 = sub_100008F4C(&qword_1000984A0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  v193 = (char *)&v179 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v179 - v12;
  uint64_t v14 = sub_10005DA28();
  uint64_t v202 = *(void *)(v14 - 8);
  uint64_t v203 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  v191 = (char *)&v179 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  v197 = (char *)&v179 - v18;
  __chkstk_darwin(v17);
  v196 = (char *)&v179 - v19;
  swift_bridgeObjectRelease();
  *(_WORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(unsigned char *)(v6 + 72) = 0;
  *(_OWORD *)(v6 + 76) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 204) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_OWORD *)(v6 + 288) = 0u;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_OWORD *)(v6 + 320) = 0u;
  *(_OWORD *)(v6 + 336) = 0u;
  v190 = (void *)(v6 + 392);
  *(_OWORD *)(v6 + 392) = 0u;
  *(_OWORD *)(v6 + 432) = xmmword_10005F200;
  *(_OWORD *)(v6 + 448) = xmmword_10005F230;
  *(_OWORD *)(v6 + 464) = xmmword_10005F240;
  *(_OWORD *)(v6 + 480) = xmmword_10005FBB0;
  id v20 = self;
  *(void *)(v6 + 496) = [v20 functionWithName:kCAMediaTimingFunctionEaseInEaseOut];
  *(void *)(v6 + 504) = [v20 functionWithName:kCAMediaTimingFunctionEaseOut];
  *(void *)(v6 + 512) = _swiftEmptyArrayStorage;
  *(void *)(v6 + 520) = 0;
  id v21 = (_OWORD *)(v6 + 1000);
  char v206 = 0;
  char v205 = 0;
  *(void *)(v6 + 1000) = 0;
  *(_DWORD *)(v6 + 1007) = 0;
  *(void *)(v6 + 1016) = 0;
  *(void *)(v6 + 1024) = 0xE000000000000000;
  *(_OWORD *)(v6 + 1032) = 0u;
  *(_DWORD *)(v6 + 1048) = 0;
  *(unsigned char *)(v6 + 1052) = 0;
  *(void *)(v6 + 1056) = 1;
  *(_OWORD *)(v6 + 1064) = 0u;
  *(_OWORD *)(v6 + 1080) = 0u;
  *(unsigned char *)(v6 + 1096) = 0;
  *(_DWORD *)(v6 + 1136) = 0;
  *(_OWORD *)(v6 + 1120) = 0u;
  *(_OWORD *)(v6 + 1104) = 0u;
  *(_OWORD *)(v6 + 1144) = 0u;
  uint64_t v22 = v6 + OBJC_IVAR____TtC22MercuryPosterExtension25FluidityWallpaperRenderer_lastRenderingState;
  *(void *)(v8 + 1160) = 0;
  uint64_t v23 = type metadata accessor for FluidityWallpaperRenderer.RenderingState(0);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
  uint64_t v200 = v22;
  v24(v22, 1, 1, v23);
  uint64_t v25 = OBJC_IVAR____TtC22MercuryPosterExtension25FluidityWallpaperRenderer_loaderOptions;
  sub_100008F4C(&qword_1000984A8);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_10005F1A0;
  MTKTextureLoaderOption v27 = MTKTextureLoaderOptionTextureStorageMode;
  *(void *)(v26 + 64) = &type metadata for UInt;
  *(void *)(v26 + 32) = v27;
  *(void *)(v26 + 40) = 2;
  char v28 = v27;
  unint64_t v29 = sub_10000AC4C(v26, &qword_1000984E8, &qword_1000984F0);
  uint64_t v199 = v25;
  *(void *)(v8 + v25) = v29;
  if (qword_1000978D8 != -1) {
    swift_once();
  }
  uint64_t v30 = sub_10005DCD8();
  v198 = (void *)sub_100008DB0(v30, (uint64_t)qword_10009FB38);
  uint64_t v31 = sub_10005DCB8();
  os_log_type_t v32 = sub_10005E088();
  if (os_log_type_enabled(v31, v32))
  {
    os_log_type_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Initializing Fluidity Wallpaper", v33, 2u);
    swift_slowDealloc();
  }

  id v192 = self;
  id v34 = [v192 mainBundle];
  NSString v35 = sub_10005DE38();
  NSString v36 = sub_10005DE38();
  id v37 = [v34 URLForResource:v35 withExtension:v36];

  if (!v37)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v202 + 56))(v13, 1, 1, v203);
    goto LABEL_10;
  }
  uint64_t v38 = v197;
  sub_10005D9D8();

  uint64_t v39 = v202;
  os_log_type_t v40 = *(void (**)(void))(v202 + 32);
  uint64_t v41 = v38;
  uint64_t v42 = v203;
  ((void (*)(char *, char *, uint64_t))v40)(v13, v41, v203);
  v188 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56);
  uint64_t v189 = v39 + 56;
  v188(v13, 0, 1, v42);
  v186 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
  uint64_t v187 = v39 + 48;
  if (v186(v13, 1, v42) == 1)
  {
LABEL_10:
    sub_100014D24((uint64_t)v13, &qword_1000984A0);
    unint64_t v44 = sub_10005DCB8();
    os_log_type_t v45 = sub_10005E078();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Error: Could not find the configuration file.", v46, 2u);
      swift_slowDealloc();
    }

    sub_100011FDC();
    swift_allocError();
    *os_log_type_t v47 = 0;
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_13;
  }
  uint64_t v43 = (uint64_t)v196;
  v40();
  sub_1000141B0(v43, v210);
  if (v7)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v43, v42);
LABEL_13:
    int v48 = 0;
    int v49 = 0;
    int v50 = 0;
    int v51 = 0;
    goto LABEL_14;
  }
  v181 = v40;
  memcpy((void *)(v8 + 528), v210, 0x1D4uLL);
  *(void *)(v8 + 360) = v204;
  uint64_t v56 = v195;
  *(void *)(v8 + 408) = v194;
  *(void *)(v8 + 416) = v56;
  id v57 = [(id)swift_unknownObjectRetain() newDefaultLibrary];
  if (!v57)
  {
    v141 = sub_10005DCB8();
    os_log_type_t v142 = sub_10005E078();
    if (os_log_type_enabled(v141, v142))
    {
      v143 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v143 = 0;
      _os_log_impl((void *)&_mh_execute_header, v141, v142, "Error: Failed to load Metal libary.", v143, 2u);
      swift_slowDealloc();
    }

    sub_100011FDC();
    swift_allocError();
    unsigned char *v144 = 0;
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v196, v203);
    goto LABEL_64;
  }
  id v58 = v57;
  uint64_t v180 = 0;
  id v59 = [objc_allocWithZone((Class)MTLRenderPipelineDescriptor) init];
  NSString v60 = sub_10005DE38();
  uint64_t v61 = v58;
  id v62 = [v58 newFunctionWithName:v60];

  [v59 setVertexFunction:v62];
  swift_unknownObjectRelease();
  NSString v63 = sub_10005DE38();
  id v185 = v61;
  id v64 = [v61 newFunctionWithName:v63];

  [v59 setFragmentFunction:v64];
  swift_unknownObjectRelease();
  id v65 = [v59 colorAttachments];
  id v66 = [v65 objectAtIndexedSubscript:0];

  if (!v66)
  {
    __break(1u);
    goto LABEL_80;
  }
  [v66 setWriteMask:0];

  id v67 = [v59 colorAttachments];
  id v68 = [v67 objectAtIndexedSubscript:0];

  if (!v68)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  [v68 setPixelFormat:80];

  id v69 = [v59 colorAttachments];
  id v70 = [v69 objectAtIndexedSubscript:1];

  if (!v70)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  [v70 setWriteMask:15];

  id v71 = [v59 colorAttachments];
  id v72 = [v71 objectAtIndexedSubscript:1];

  if (!v72)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  [v72 setPixelFormat:105];

  id v73 = [v59 colorAttachments];
  id v74 = [v73 objectAtIndexedSubscript:1];

  if (!v74)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  [v74 setBlendingEnabled:1];

  id v75 = [v59 colorAttachments];
  id v76 = [v75 objectAtIndexedSubscript:1];

  if (!v76)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  [v76 setRgbBlendOperation:0];

  id v77 = [v59 colorAttachments];
  id v78 = [v77 objectAtIndexedSubscript:1];

  if (!v78)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  [v78 setAlphaBlendOperation:0];

  id v79 = [v59 colorAttachments];
  id v80 = [v79 objectAtIndexedSubscript:1];

  if (!v80)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  [v80 setSourceRGBBlendFactor:4];

  id v81 = [v59 colorAttachments];
  id v82 = [v81 objectAtIndexedSubscript:1];

  if (!v82)
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  [v82 setSourceAlphaBlendFactor:4];

  id v83 = [v59 colorAttachments];
  id v84 = [v83 objectAtIndexedSubscript:1];

  if (!v84)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  [v84 setDestinationRGBBlendFactor:1];

  id v85 = [v59 colorAttachments];
  id v86 = [v85 objectAtIndexedSubscript:1];

  if (!v86)
  {
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  [v86 setDestinationAlphaBlendFactor:8];

  *(void *)&v211[0] = 0;
  id v183 = v59;
  id v87 = [v204 newRenderPipelineStateWithDescriptor:v59 error:v211];
  v88 = *(void **)&v211[0];
  if (!v87)
  {
    id v150 = *(id *)&v211[0];
    sub_10005D978();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    v151 = sub_10005DCB8();
    os_log_type_t v152 = sub_10005E078();
    if (os_log_type_enabled(v151, v152))
    {
      v153 = (uint8_t *)swift_slowAlloc();
      v198 = (void *)swift_slowAlloc();
      *(_DWORD *)v153 = 138543362;
      v197 = (char *)(v153 + 4);
      swift_errorRetain();
      uint64_t v154 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)&v211[0] = v154;
      sub_10005E138();
      void *v198 = v154;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v151, v152, "Error: Failed to create SDF pipeline state. %{public}@", v153, 0xCu);
      sub_100008F4C(&qword_100097D50);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_100011FDC();
    swift_allocError();
    unsigned char *v156 = 0;
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v202 + 8))(v196, v203);
LABEL_64:
    int v49 = 0;
    int v50 = 0;
    int v51 = 0;
    int v48 = 1;
    goto LABEL_14;
  }
  *(void *)(v8 + 368) = v87;
  id v89 = objc_allocWithZone((Class)MTLFunctionConstantValues);
  id v90 = v88;
  id v91 = [v89 init];
  if (qword_1000977C0 != -1) {
    swift_once();
  }
  char v209 = byte_100097FE0;
  [v91 setConstantValue:&v209 type:53 atIndex:0];
  char v208 = 0;
  id v184 = v91;
  [v91 setConstantValue:&v208 type:53 atIndex:2];
  char v207 = 0;
  id v92 = [objc_allocWithZone((Class)MTLRenderPipelineDescriptor) init];
  NSString v93 = sub_10005DE38();
  id v94 = [v185 newFunctionWithName:v93];

  [v92 setVertexFunction:v94];
  swift_unknownObjectRelease();
  id v95 = [v92 colorAttachments];
  id v96 = [v95 objectAtIndexedSubscript:0];

  if (!v96) {
    goto LABEL_90;
  }
  [v96 setPixelFormat:80];

  id v97 = [v92 colorAttachments];
  id v98 = [v97 objectAtIndexedSubscript:1];

  if (!v98)
  {
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  [v98 setPixelFormat:105];

  id v182 = v92;
  id v99 = [v92 colorAttachments];
  id v100 = [v99 objectAtIndexedSubscript:1];

  if (!v100)
  {
LABEL_92:
    __break(1u);
    return;
  }
  [v100 setWriteMask:0];

  id v101 = v184;
  [v184 setConstantValue:&v207 type:53 atIndex:1];
  NSString v102 = sub_10005DE38();
  *(void *)&v211[0] = 0;
  id v103 = [v185 newFunctionWithName:v102 constantValues:v101 error:v211];

  v104 = *(void **)&v211[0];
  if (!v103
    || (id v105 = *(id *)&v211[0],
        id v106 = v182,
        [v182 setFragmentFunction:v103],
        swift_unknownObjectRelease(),
        *(void *)&v211[0] = 0,
        id v107 = [v204 newRenderPipelineStateWithDescriptor:v106 error:v211],
        v104 = *(void **)&v211[0],
        !v107))
  {
    id v145 = v104;
    sub_10005D978();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    v146 = sub_10005DCB8();
    os_log_type_t v147 = sub_10005E078();
    if (os_log_type_enabled(v146, v147))
    {
      v148 = (uint8_t *)swift_slowAlloc();
      v198 = (void *)swift_slowAlloc();
      *(_DWORD *)v148 = 138543362;
      v197 = (char *)(v148 + 4);
      swift_errorRetain();
      uint64_t v149 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)&v211[0] = v149;
      sub_10005E138();
      void *v198 = v149;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v146, v147, "Error: Failed to create static render pipeline state. %{public}@", v148, 0xCu);
      sub_100008F4C(&qword_100097D50);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_100011FDC();
    swift_allocError();
    unsigned char *v155 = 0;
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v202 + 8))(v196, v203);
    int v50 = 0;
    int v51 = 0;
    int v48 = 1;
    int v49 = 1;
    goto LABEL_14;
  }
  *(void *)(v8 + 376) = v107;
  char v207 = 1;
  id v108 = v104;
  id v109 = v184;
  [v184 setConstantValue:&v207 type:53 atIndex:1];
  NSString v110 = sub_10005DE38();
  *(void *)&v211[0] = 0;
  id v111 = [v185 newFunctionWithName:v110 constantValues:v109 error:v211];

  v112 = *(void **)&v211[0];
  if (!v111
    || (id v113 = *(id *)&v211[0],
        id v114 = v182,
        [v182 setFragmentFunction:v111],
        swift_unknownObjectRelease(),
        *(void *)&v211[0] = 0,
        id v115 = [v204 newRenderPipelineStateWithDescriptor:v114 error:v211],
        v112 = *(void **)&v211[0],
        !v115))
  {
    id v157 = v112;
    sub_10005D978();

    swift_willThrow();
    v158 = sub_10005DCB8();
    os_log_type_t v159 = sub_10005E078();
    BOOL v160 = os_log_type_enabled(v158, v159);
    uint64_t v161 = v202;
    if (v160)
    {
      v162 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v162 = 0;
      _os_log_impl((void *)&_mh_execute_header, v158, v159, "Error: Failed to create blending render pipeline state.", v162, 2u);
      swift_slowDealloc();
    }

    sub_100011FDC();
    swift_allocError();
    unsigned char *v163 = 0;
    swift_willThrow();

    swift_errorRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v161 + 8))(v196, v203);
    int v51 = 0;
    int v48 = 1;
    int v49 = 1;
    int v50 = 1;
LABEL_14:
    sub_100012030(*(void *)(v8 + 24));
    sub_100012030(*(void *)(v8 + 40));
    swift_release();
    if (v48)
    {
      swift_unknownObjectRelease();
      if (!v49)
      {
LABEL_16:
        if (!v50) {
          goto LABEL_17;
        }
        goto LABEL_22;
      }
    }
    else if (!v49)
    {
      goto LABEL_16;
    }
    swift_unknownObjectRelease();
    if (!v50)
    {
LABEL_17:
      if (!v51)
      {
LABEL_19:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        swift_bridgeObjectRelease();
        long long v52 = *(_OWORD *)(v8 + 1112);
        v211[6] = *(_OWORD *)(v8 + 1096);
        v211[7] = v52;
        uint64_t v212 = *(void *)(v8 + 1128);
        long long v53 = *(_OWORD *)(v8 + 1048);
        v211[2] = *(_OWORD *)(v8 + 1032);
        v211[3] = v53;
        long long v54 = *(_OWORD *)(v8 + 1080);
        v211[4] = *(_OWORD *)(v8 + 1064);
        v211[5] = v54;
        long long v55 = *(_OWORD *)(v8 + 1016);
        v211[0] = *v21;
        v211[1] = v55;
        sub_1000148F4((uint64_t)v211, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);

        sub_100014D24(v200, (uint64_t *)&unk_1000984B8);
        swift_bridgeObjectRelease();
        type metadata accessor for FluidityWallpaperRenderer(0);
        swift_deallocPartialClassInstance();
        return;
      }
LABEL_18:
      swift_unknownObjectRelease();
      goto LABEL_19;
    }
LABEL_22:
    swift_unknownObjectRelease();
    if (!v51) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  *(void *)(v8 + 384) = v115;
  id v116 = v112;
  id v117 = [v192 mainBundle];
  NSString v118 = sub_10005DE38();
  NSString v119 = sub_10005DE38();
  id v120 = [v117 URLForResource:v118 withExtension:v119];

  if (!v120)
  {
    uint64_t v122 = (uint64_t)v193;
    v188(v193, 1, 1, v203);
    uint64_t v126 = v202;
    id v127 = v183;
    goto LABEL_69;
  }
  v121 = v197;
  sub_10005D9D8();

  uint64_t v122 = (uint64_t)v193;
  uint64_t v123 = v203;
  v124 = v181;
  ((void (*)(char *, char *, uint64_t))v181)(v193, v121, v203);
  v188((char *)v122, 0, 1, v123);
  unsigned int v125 = v186((char *)v122, 1, v123);
  uint64_t v126 = v202;
  id v127 = v183;
  if (v125 == 1)
  {
LABEL_69:
    sub_100014D24(v122, &qword_1000984A0);
    v164 = sub_10005DCB8();
    os_log_type_t v165 = sub_10005E078();
    if (os_log_type_enabled(v164, v165))
    {
      v166 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v166 = 0;
      _os_log_impl((void *)&_mh_execute_header, v164, v165, "Could not find color configuration.", v166, 2u);
      swift_slowDealloc();
    }

    sub_100011FDC();
    swift_allocError();
    unsigned char *v167 = 0;
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v126 + 8))(v196, v203);
    goto LABEL_72;
  }
  ((void (*)(char *, uint64_t, uint64_t))v124)(v191, v122, v123);
  uint64_t v128 = v180;
  uint64_t v129 = sub_10005DA48();
  if (v128)
  {
    v133 = sub_10005DCB8();
    os_log_type_t v134 = sub_10005E078();
    BOOL v135 = os_log_type_enabled(v133, v134);
    uint64_t v136 = v202;
    if (v135)
    {
      v137 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v137 = 0;
      _os_log_impl((void *)&_mh_execute_header, v133, v134, "Could not decode color configuration.", v137, 2u);
      swift_slowDealloc();
    }

    sub_100011FDC();
    swift_allocError();
    unsigned char *v138 = 0;
    swift_willThrow();

    swift_errorRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v139 = *(void (**)(char *, uint64_t))(v136 + 8);
    uint64_t v140 = v203;
    v139(v191, v203);
    v139(v196, v140);
LABEL_72:
    int v48 = 1;
    int v49 = 1;
    int v50 = 1;
    int v51 = 1;
    goto LABEL_14;
  }
  uint64_t v131 = v129;
  unint64_t v132 = v130;
  sub_10005D808();
  swift_allocObject();
  sub_10005D7F8();
  sub_100008F4C(&qword_1000984C8);
  sub_1000146F4();
  sub_10005D7E8();
  v168 = *(void (**)(char *, uint64_t))(v202 + 8);
  v202 += 8;
  v168(v191, v203);
  swift_release();
  sub_100014804(v131, v132);
  *(void *)(v8 + 352) = *(void *)&v211[0];
  id v169 = objc_allocWithZone((Class)MTKTextureLoader);
  id v170 = v204;
  id v171 = [v169 initWithDevice:v204];
  *(void *)(v8 + OBJC_IVAR____TtC22MercuryPosterExtension25FluidityWallpaperRenderer_loader) = v171;
  *(void *)(v8 + 400) = sub_10000B068(1936744813, 0xE400000000000000, 6711668, 0xE300000000000000);
  swift_unknownObjectRelease();
  if (*(void *)(v8 + 392)) {
    goto LABEL_75;
  }
  id v172 = [self texture2DDescriptorWithPixelFormat:105 width:v194 height:v195 mipmapped:0];
  [v172 setTextureType:2];
  [v172 setStorageMode:3];
  [v172 setUsage:5];
  id v173 = [v170 newTextureWithDescriptor:v172];

  v174 = v190;
  void *v190 = v173;
  swift_unknownObjectRelease();
  if (*v174)
  {
LABEL_75:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    v168(v196, v203);
  }
  else
  {
    v175 = sub_10005DCB8();
    os_log_type_t v176 = sub_10005E078();
    if (os_log_type_enabled(v175, v176))
    {
      v177 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v177 = 0;
      _os_log_impl((void *)&_mh_execute_header, v175, v176, "Failed to create SDF render texture.", v177, 2u);
      swift_slowDealloc();
    }

    sub_100011FDC();
    swift_allocError();
    unsigned char *v178 = 0;
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    v168(v196, v203);
    swift_release();
  }
}

uint64_t sub_10000D3C8()
{
  if (*(void *)(v0 + 56))
  {
    swift_retain();
    ContinuousRenderingToken.invalidate()();
    swift_release();
  }
  sub_100012030(*(void *)(v0 + 24));
  sub_100012030(*(void *)(v0 + 40));
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  long long v1 = *(_OWORD *)(v0 + 1112);
  v6[6] = *(_OWORD *)(v0 + 1096);
  v6[7] = v1;
  uint64_t v7 = *(void *)(v0 + 1128);
  long long v2 = *(_OWORD *)(v0 + 1048);
  v6[2] = *(_OWORD *)(v0 + 1032);
  v6[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 1080);
  v6[4] = *(_OWORD *)(v0 + 1064);
  v6[5] = v3;
  long long v4 = *(_OWORD *)(v0 + 1016);
  v6[0] = *(_OWORD *)(v0 + 1000);
  v6[1] = v4;
  sub_1000148F4((uint64_t)v6, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);

  sub_100014D24(v0 + OBJC_IVAR____TtC22MercuryPosterExtension25FluidityWallpaperRenderer_lastRenderingState, (uint64_t *)&unk_1000984B8);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10000D524()
{
  sub_10000D3C8();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_10000D57C()
{
  return type metadata accessor for FluidityWallpaperRenderer(0);
}

uint64_t type metadata accessor for FluidityWallpaperRenderer(uint64_t a1)
{
  return sub_100010F50(a1, (uint64_t *)&unk_100098030);
}

void sub_10000D5A4()
{
  sub_100010ED8();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10000D6EC(char **a1, float *a2)
{
  uint64_t v12 = v2;
  p_name = a1;
  [a1 setSublayers:0];
  uint64_t v15 = *(__int16 *)a2;
  if (v15 < 0)
  {
    __break(1u);
    goto LABEL_64;
  }
  uint64_t v16 = *(void *)(v12 + 352);
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17 <= v15)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  uint64_t v18 = v16 + 32;
  uint64_t v19 = v18 + 248 * *(__int16 *)a2;
  long long v20 = *(_OWORD *)v19;
  long long v21 = *(_OWORD *)(v19 + 16);
  long long v22 = *(_OWORD *)(v19 + 32);
  long long v277 = *(_OWORD *)(v19 + 48);
  long long v276 = v22;
  long long v275 = v21;
  long long v274 = v20;
  long long v23 = *(_OWORD *)(v19 + 64);
  long long v24 = *(_OWORD *)(v19 + 80);
  long long v25 = *(_OWORD *)(v19 + 96);
  long long v281 = *(_OWORD *)(v19 + 112);
  long long v280 = v25;
  long long v279 = v24;
  long long v278 = v23;
  long long v26 = *(_OWORD *)(v19 + 128);
  long long v27 = *(_OWORD *)(v19 + 144);
  long long v28 = *(_OWORD *)(v19 + 160);
  *(_OWORD *)v285 = *(_OWORD *)(v19 + 176);
  long long v284 = v28;
  long long v283 = v27;
  long long v282 = v26;
  long long v29 = *(_OWORD *)(v19 + 192);
  long long v30 = *(_OWORD *)(v19 + 208);
  long long v31 = *(_OWORD *)(v19 + 224);
  *(_DWORD *)&v286[32] = *(_DWORD *)(v19 + 240);
  *(_OWORD *)&v286[16] = v31;
  *(_OWORD *)v286 = v30;
  *(_OWORD *)&v285[16] = v29;
  int v32 = *((unsigned __int16 *)a2 + 1);
  rect_16 = p_name;
  if (v32 == (unsigned __int16)v15)
  {
    long long v176 = *(_OWORD *)&v286[4];
    long long v179 = *(_OWORD *)&v286[20];
    uint64_t recta = v12;
    char v183 = v286[0];
    uint64_t v181 = *(void *)&v285[24];
    char v174 = v282;
    double rect_24a = *((double *)&v282 + 1);
    double rect_8a = *(double *)&v283;
    uint64_t v171 = v284;
    uint64_t v173 = *((void *)&v283 + 1);
    uint64_t v33 = *((void *)&v284 + 1);
    uint64_t v5 = *(void *)v285;
    long long v169 = *(_OWORD *)&v285[8];
    char v34 = v278;
    double v35 = *((double *)&v278 + 1);
    uint64_t v36 = *((void *)&v279 + 1);
    double v37 = *(double *)&v279;
    uint64_t v38 = *((void *)&v280 + 1);
    uint64_t v39 = v280;
    uint64_t v40 = *((void *)&v281 + 1);
    uint64_t v4 = v281;
    char v41 = v274;
    uint64_t v42 = *((void *)&v274 + 1);
    double v43 = *((double *)&v275 + 1);
    uint64_t v44 = v275;
    uint64_t v45 = *((void *)&v276 + 1);
    uint64_t v46 = v276;
    uint64_t v48 = *((void *)&v277 + 1);
    uint64_t v47 = v277;
    sub_100014D80((uint64_t)&v274);
    uint64_t v49 = v40;
    char v50 = v174;
    double v51 = rect_24a;
    long long v52 = v169;
    uint64_t v54 = v171;
    uint64_t v53 = v173;
    uint64_t v55 = v181;
    char v56 = v183;
    uint64_t v12 = recta;
    long long v58 = v176;
    long long v57 = v179;
    uint64_t v59 = v47;
    uint64_t v3 = v45;
    double v60 = rect_8a;
    goto LABEL_8;
  }
  if ((__int16)v32 < 0 || v17 <= (__int16)v32)
  {
LABEL_65:
    __break(1u);
LABEL_66:
    swift_once();
    goto LABEL_14;
  }
  uint64_t v61 = (long long *)(v18 + 248 * (__int16)v32);
  long long v62 = *v61;
  long long v63 = v61[1];
  long long v64 = v61[3];
  v272[2] = v61[2];
  v272[3] = v64;
  v272[0] = v62;
  v272[1] = v63;
  long long v65 = v61[4];
  long long v66 = v61[5];
  long long v67 = v61[6];
  v272[7] = v61[7];
  v272[6] = v67;
  v272[4] = v65;
  v272[5] = v66;
  long long v68 = v61[8];
  long long v69 = v61[9];
  long long v70 = v61[10];
  v272[11] = v61[11];
  v272[10] = v70;
  v272[9] = v69;
  v272[8] = v68;
  long long v71 = v61[12];
  long long v72 = v61[13];
  long long v73 = v61[14];
  int v273 = *((_DWORD *)v61 + 60);
  v272[14] = v73;
  v272[13] = v72;
  v272[12] = v71;
  float v74 = a2[1];
  sub_100014D80((uint64_t)&v274);
  sub_100014D80((uint64_t)v272);
  sub_10001B364((uint64_t)v272, &v274, (uint64_t)v220, v74);
  sub_100014E40((uint64_t)v272);
  sub_100014E40((uint64_t)&v274);
  long long v57 = v247;
  long long v58 = v246;
  char v56 = v245;
  uint64_t v55 = v244;
  char v50 = v236;
  double v51 = v237;
  double v60 = v238;
  uint64_t v53 = v239;
  uint64_t v54 = v240;
  uint64_t v33 = v241;
  uint64_t v5 = v242;
  long long v52 = v243;
  char v34 = v228;
  double v35 = v229;
  double v37 = v230;
  uint64_t v36 = v231;
  uint64_t v39 = v232;
  uint64_t v38 = v233;
  uint64_t v4 = v234;
  uint64_t v49 = v235;
  char v41 = v220[0];
  uint64_t v42 = v221;
  uint64_t v44 = v222;
  double v43 = v223;
  uint64_t v46 = v224;
  uint64_t v3 = v225;
  uint64_t v59 = v226;
  uint64_t v48 = v227;
LABEL_8:
  char v248 = v50 & 1;
  double v249 = v51;
  double v250 = v60;
  uint64_t v251 = v53;
  uint64_t v252 = v54;
  uint64_t v253 = v33;
  uint64_t v254 = v5;
  uint64_t v255 = v52;
  char v256 = v34 & 1;
  double v257 = v35;
  double v258 = v37;
  uint64_t v259 = v36;
  uint64_t v260 = v39;
  uint64_t v261 = v38;
  uint64_t v262 = v4;
  uint64_t v263 = v49;
  char v264 = v41 & 1;
  uint64_t v265 = v42;
  uint64_t v266 = v44;
  double v267 = v43;
  uint64_t v268 = v46;
  uint64_t v269 = v3;
  uint64_t v270 = v59;
  uint64_t v271 = v48;
  v192[0] = v41 & 1;
  uint64_t v193 = v42;
  uint64_t v194 = v44;
  double v172 = v43;
  double v195 = v43;
  uint64_t v196 = v46;
  uint64_t v197 = v3;
  uint64_t v198 = v59;
  uint64_t v6 = v59;
  uint64_t v199 = v48;
  char v200 = v256;
  double v180 = v35;
  double v201 = v35;
  double v202 = v37;
  double v178 = v37;
  uint64_t v203 = v36;
  uint64_t v204 = v39;
  uint64_t v170 = v38;
  uint64_t v205 = v38;
  uint64_t v206 = v4;
  uint64_t v207 = v49;
  char v208 = v50 & 1;
  double rect_24 = v51;
  double v209 = v51;
  double v210 = v60;
  double rect_8 = v60;
  uint64_t v211 = v53;
  uint64_t v212 = v54;
  uint64_t v213 = v33;
  uint64_t v214 = v5;
  long long v215 = v52;
  uint64_t v216 = v55;
  char v217 = v56;
  long long v218 = v58;
  long long v219 = v57;
  objc_msgSend(rect_16, "bounds", v33);
  CGFloat v79 = v78;
  CGFloat v9 = v75;
  CGFloat v10 = v76;
  CGFloat v11 = v77;
  double v80 = 1300.0;
  if (*(__int16 *)(v12 + 136) > 7) {
    double v80 = 1000.0;
  }
  double v182 = v80;
  CGFloat v81 = v79;
  CGRectGetWidth(*(CGRect *)(&v75 - 1));
  v287.origin.x = v79;
  v287.origin.y = v9;
  v287.size.width = v10;
  v287.size.height = v11;
  double Height = CGRectGetHeight(v287);
  v288.origin.x = v79;
  v288.origin.y = v9;
  v288.size.width = v10;
  v288.size.height = v11;
  double Width = CGRectGetWidth(v288);
  v289.origin.x = v79;
  v289.origin.y = v9;
  v289.size.width = v10;
  v289.size.height = v11;
  double v83 = CGRectGetWidth(v289);
  v290.origin.x = v79;
  v290.origin.y = v9;
  v290.size.width = v10;
  v290.size.height = v11;
  double v84 = CGRectGetHeight(v290);
  CGFloat rect = v79;
  v291.origin.x = v79;
  v291.origin.y = v9;
  v291.size.width = v10;
  v291.size.height = v11;
  double v85 = CGRectGetHeight(v291);
  uint64_t v7 = &_s10Foundation11FormatStylePA2A09ByteCountbC0VRszrlE04byteE05style12allowedUnits13spellsOutZero014includesActualdE0A2E0C0O_AE0I0VS2btFZ_ptr;
  p_name = &stru_100095FF8.name;
  id v86 = [objc_allocWithZone((Class)CAGradientLayer) init];
  id v87 = *(void **)(v12 + 1144);
  *(void *)(v12 + 1144) = v86;

  v88 = *(void **)(v12 + 1144);
  id v89 = &stru_100095FF8.name;
  if (!v88) {
    goto LABEL_26;
  }
  id v90 = v88;
  v292.origin.x = rect;
  v292.origin.y = v9;
  v292.size.width = v10;
  v292.size.height = v11;
  CGFloat v175 = CGRectGetWidth(v292) * 0.5;
  v293.origin.x = rect;
  v293.origin.y = v9;
  v293.size.width = v10;
  v293.size.height = v11;
  objc_msgSend(v90, "setPosition:", v175, CGRectGetHeight(v293) * 0.5);

  id v91 = *(void **)(v12 + 1144);
  if (!v91) {
    goto LABEL_26;
  }
  float v92 = Width * v83 + v84 * v85;
  double v93 = sqrtf(v92);
  objc_msgSend(v91, "setBounds:", 0.0, 0.0, v93, v93);
  id v94 = *(void **)(v12 + 1144);
  if (!v94) {
    goto LABEL_26;
  }
  uint64_t v95 = qword_100097830;
  a2 = v94;
  if (v95 != -1) {
    goto LABEL_66;
  }
LABEL_14:
  sub_100008F4C((uint64_t *)&unk_1000992C0);
  Class isa = sub_10005DDE8().super.isa;
  [a2 setActions:isa];

  id v97 = *(void **)(v12 + 1144);
  id v89 = (char **)(&stru_100095FF8 + 8);
  if (!v97) {
    goto LABEL_26;
  }
  objc_msgSend(v97, "setAnchorPoint:", 0.5, 0.5);
  id v98 = *(void **)(v12 + 1144);
  if (!v98) {
    goto LABEL_26;
  }
  id v99 = v98;
  CATransform3DMakeRotation(&v191, -v172, 0.0, 0.0, 1.0);
  [v99 setTransform:&v191];

  id v100 = *(void **)(v12 + 1144);
  if (!v100) {
    goto LABEL_26;
  }
  id v101 = v100;
  NSString v102 = sub_10001802C();
  sub_10000E558((unint64_t)v102);
  swift_bridgeObjectRelease();
  Class v103 = sub_10005DF98().super.isa;
  swift_bridgeObjectRelease();
  [v101 setColors:v103];

  id v89 = (char **)(&stru_100095FF8 + 8);
  v104 = *(void **)(v12 + 1144);
  if (!v104) {
    goto LABEL_26;
  }
  uint64_t v105 = *(void *)(v3 + 16);
  if (!v105)
  {
    __break(1u);
    goto LABEL_68;
  }
  if (v105 == 1)
  {
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  objc_msgSend(v104, "setStartPoint:", *(double *)(v3 + 32), 1.0 - *(double *)(v3 + 40));
  id v106 = *(void **)(v12 + 1144);
  if (v106)
  {
    uint64_t v107 = *(void *)(v6 + 16);
    if (!v107)
    {
LABEL_73:
      __break(1u);
      goto LABEL_74;
    }
    if (v107 == 1)
    {
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    objc_msgSend(v106, "setEndPoint:", *(double *)(v6 + 32), 1.0 - *(double *)(v6 + 40));
    id v108 = *(void **)(v12 + 1144);
    if (v108)
    {
      sub_100008F4C(&qword_1000985E0);
      uint64_t v109 = swift_allocObject();
      *(_OWORD *)(v109 + 16) = xmmword_10005F190;
      uint64_t v177 = v4;
      NSString v110 = *(void **)(v12 + 496);
      *(void *)(v109 + 32) = v110;
      *(void *)&v191.m11 = v109;
      sub_10005DFB8();
      sub_10000991C(0, &qword_1000985E8);
      id v111 = v108;
      id v112 = v110;
      uint64_t v4 = v177;
      Class v113 = sub_10005DF98().super.isa;
      swift_bridgeObjectRelease();
      [v111 setInterpolations:v113];

      id v89 = &stru_100095FF8.name;
      if (*(void *)(v12 + 1144)) {
        objc_msgSend(rect_16, "addSublayer:");
      }
    }
  }
LABEL_26:
  double v114 = Height / v182;
  id v115 = objc_msgSend(objc_allocWithZone((Class)v7[461]), p_name[302]);
  id v116 = *(void **)(v12 + 1152);
  *(void *)(v12 + 1152) = v115;

  id v117 = *(void **)(v12 + 1152);
  if (!v117) {
    goto LABEL_43;
  }
  objc_msgSend(v117, v89[363], 0.0, 0.0);
  NSString v118 = *(void **)(v12 + 1152);
  if (!v118) {
    goto LABEL_43;
  }
  objc_msgSend(v118, "setBounds:", 0.0, 0.0, v180 * v182 * v114, v178 * v182 * v114);
  NSString v119 = *(void **)(v12 + 1152);
  if (!v119) {
    goto LABEL_43;
  }
  id v120 = v89;
  uint64_t v121 = qword_100097830;
  id v122 = v119;
  if (v121 != -1) {
    swift_once();
  }
  sub_100008F4C((uint64_t *)&unk_1000992C0);
  Class v123 = sub_10005DDE8().super.isa;
  [v122 setActions:v123];

  v124 = *(void **)(v12 + 1152);
  id v89 = v120;
  if (!v124) {
    goto LABEL_43;
  }
  objc_msgSend(v124, "setAnchorPoint:", 0.5, 0.5);
  unsigned int v125 = *(void **)(v12 + 1152);
  if (!v125) {
    goto LABEL_43;
  }
  id v126 = v125;
  id v127 = sub_10001802C();
  sub_10000E558((unint64_t)v127);
  swift_bridgeObjectRelease();
  Class v128 = sub_10005DF98().super.isa;
  swift_bridgeObjectRelease();
  [v126 setColors:v128];

  id v89 = v120;
  uint64_t v129 = *(void **)(v12 + 1152);
  if (!v129) {
    goto LABEL_43;
  }
  [v129 setType:kCAGradientLayerRadial];
  unint64_t v130 = *(void **)(v12 + 1152);
  if (!v130) {
    goto LABEL_43;
  }
  uint64_t v131 = *(void *)(v170 + 16);
  if (!v131) {
    goto LABEL_69;
  }
  if (v131 == 1)
  {
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  objc_msgSend(v130, "setStartPoint:", *(double *)(v170 + 32), 1.0 - *(double *)(v170 + 40));
  unint64_t v132 = *(void **)(v12 + 1152);
  if (v132)
  {
    uint64_t v133 = *(void *)(v4 + 16);
    if (!v133)
    {
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
    if (v133 == 1)
    {
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }
    objc_msgSend(v132, "setEndPoint:", *(double *)(v4 + 32), 1.0 - *(double *)(v4 + 40));
    os_log_type_t v134 = *(void **)(v12 + 1152);
    if (v134)
    {
      sub_100008F4C(&qword_1000985E0);
      uint64_t v135 = swift_allocObject();
      *(_OWORD *)(v135 + 16) = xmmword_10005F190;
      uint64_t v136 = *(void **)(v12 + 496);
      *(void *)(v135 + 32) = v136;
      *(void *)&v191.m11 = v135;
      sub_10005DFB8();
      sub_10000991C(0, &qword_1000985E8);
      id v137 = v134;
      id v138 = v136;
      Class v139 = sub_10005DF98().super.isa;
      swift_bridgeObjectRelease();
      [v137 setInterpolations:v139];

      id v89 = v120;
      if (*(void *)(v12 + 1152)) {
        objc_msgSend(rect_16, "addSublayer:");
      }
    }
  }
LABEL_43:
  id v140 = objc_msgSend(objc_allocWithZone((Class)v7[461]), p_name[302]);
  v141 = *(void **)(v12 + 1160);
  *(void *)(v12 + 1160) = v140;

  os_log_type_t v142 = *(void **)(v12 + 1160);
  if (!v142) {
    goto LABEL_58;
  }
  id v143 = v142;
  v294.origin.x = rect;
  v294.origin.y = v9;
  v294.size.width = v10;
  v294.size.height = v11;
  objc_msgSend(v143, v89[363], CGRectGetWidth(v294), 0.0);

  v144 = *(void **)(v12 + 1160);
  if (!v144) {
    goto LABEL_58;
  }
  objc_msgSend(v144, "setBounds:", 0.0, 0.0, rect_24 * v182 * v114, rect_8 * v182 * v114);
  id v145 = *(void **)(v12 + 1160);
  if (!v145) {
    goto LABEL_58;
  }
  uint64_t v146 = qword_100097830;
  id v147 = v145;
  if (v146 != -1) {
    swift_once();
  }
  sub_100008F4C((uint64_t *)&unk_1000992C0);
  Class v148 = sub_10005DDE8().super.isa;
  [v147 setActions:v148];

  uint64_t v149 = *(void **)(v12 + 1160);
  if (!v149) {
    goto LABEL_58;
  }
  objc_msgSend(v149, "setAnchorPoint:", 0.5, 0.5);
  id v150 = *(void **)(v12 + 1160);
  if (!v150) {
    goto LABEL_58;
  }
  id v151 = v150;
  os_log_type_t v152 = sub_10001802C();
  sub_10000E558((unint64_t)v152);
  swift_bridgeObjectRelease();
  Class v153 = sub_10005DF98().super.isa;
  swift_bridgeObjectRelease();
  [v151 setColors:v153];

  uint64_t v154 = *(void **)(v12 + 1160);
  if (!v154) {
    goto LABEL_58;
  }
  [v154 setType:kCAGradientLayerRadial];
  v155 = *(void **)(v12 + 1160);
  if (!v155) {
    goto LABEL_58;
  }
  uint64_t v156 = *(void *)(v168 + 16);
  if (!v156) {
    goto LABEL_71;
  }
  if (v156 == 1)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  objc_msgSend(v155, "setStartPoint:", *(double *)(v168 + 32), 1.0 - *(double *)(v168 + 40));
  id v157 = *(void **)(v12 + 1160);
  if (v157)
  {
    uint64_t v158 = *(void *)(v5 + 16);
    if (v158)
    {
      if (v158 != 1)
      {
        double v159 = *(double *)(v5 + 32);
        double v160 = *(double *)(v5 + 40);
        id v161 = v157;
        sub_100014E40((uint64_t)v192);
        objc_msgSend(v161, "setEndPoint:", v159, 1.0 - v160);

        goto LABEL_59;
      }
LABEL_78:
      __break(1u);
      return;
    }
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
LABEL_58:
  sub_100014E40((uint64_t)v192);
LABEL_59:
  v162 = *(void **)(v12 + 1160);
  if (v162)
  {
    sub_100008F4C(&qword_1000985E0);
    uint64_t v163 = swift_allocObject();
    *(_OWORD *)(v163 + 16) = xmmword_10005F190;
    v164 = *(void **)(v12 + 496);
    *(void *)(v163 + 32) = v164;
    *(void *)&v191.m11 = v163;
    sub_10005DFB8();
    sub_10000991C(0, &qword_1000985E8);
    id v165 = v162;
    id v166 = v164;
    Class v167 = sub_10005DF98().super.isa;
    swift_bridgeObjectRelease();
    [v165 setInterpolations:v167];

    if (*(void *)(v12 + 1160)) {
      objc_msgSend(rect_16, "addSublayer:");
    }
  }
}

uint64_t sub_10000E558(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_10005E328();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t result = sub_10004FD1C(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        sub_10005E218();
        type metadata accessor for CGColor(0);
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10004FD1C(0, v3[2] + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v7 = v3[2];
        unint64_t v6 = v3[3];
        if (v7 >= v6 >> 1)
        {
          sub_10004FD1C(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v13;
        }
        v3[2] = v7 + 1;
        sub_100014878(v12, &v3[4 * v7 + 4]);
      }
    }
    else
    {
      uint64_t v8 = (id *)(a1 + 32);
      type metadata accessor for CGColor(0);
      do
      {
        id v9 = *v8;
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10004FD1C(0, v3[2] + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v11 = v3[2];
        unint64_t v10 = v3[3];
        if (v11 >= v10 >> 1)
        {
          sub_10004FD1C(v10 > 1, v11 + 1, 1);
          uint64_t v3 = v13;
        }
        v3[2] = v11 + 1;
        sub_100014878(v12, &v3[4 * v11 + 4]);
        ++v8;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

void sub_10000E78C(void *a1, float a2)
{
  [a1 bounds];
  CGFloat x = v39.origin.x;
  CGFloat y = v39.origin.y;
  CGFloat width = v39.size.width;
  CGFloat height = v39.size.height;
  long long v32 = *(_OWORD *)&CATransform3DIdentity.m13;
  long long v34 = *(_OWORD *)&CATransform3DIdentity.m11;
  long long v28 = *(_OWORD *)&CATransform3DIdentity.m23;
  long long v30 = *(_OWORD *)&CATransform3DIdentity.m21;
  long long v24 = *(_OWORD *)&CATransform3DIdentity.m33;
  long long v26 = *(_OWORD *)&CATransform3DIdentity.m31;
  long long v22 = *(_OWORD *)&CATransform3DIdentity.m41;
  CGFloat m43 = CATransform3DIdentity.m43;
  CGFloat m44 = CATransform3DIdentity.m44;
  CGFloat v10 = CGRectGetWidth(v39) * 0.5;
  v40.origin.CGFloat x = x;
  v40.origin.CGFloat y = y;
  v40.size.CGFloat width = width;
  v40.size.CGFloat height = height;
  CGFloat v11 = CGRectGetHeight(v40);
  *(_OWORD *)&v38.m11 = v34;
  *(_OWORD *)&v38.m13 = v32;
  *(_OWORD *)&v38.m21 = v30;
  *(_OWORD *)&v38.m23 = v28;
  *(_OWORD *)&v38.m31 = v26;
  *(_OWORD *)&v38.m33 = v24;
  *(_OWORD *)&v38.m41 = v22;
  v38.CGFloat m43 = m43;
  v38.CGFloat m44 = m44;
  CATransform3DTranslate(&v37, &v38, v10, v11 * 0.5, 0.0);
  CGFloat v12 = *(float *)(v2 + 1136);
  CATransform3D v38 = v37;
  CATransform3DRotate(&v37, &v38, v12, 0.0, 0.0, 1.0);
  long long v35 = *(_OWORD *)&v37.m11;
  long long v33 = *(_OWORD *)&v37.m13;
  long long v31 = *(_OWORD *)&v37.m21;
  long long v29 = *(_OWORD *)&v37.m23;
  long long v27 = *(_OWORD *)&v37.m31;
  long long v25 = *(_OWORD *)&v37.m33;
  long long v23 = *(_OWORD *)&v37.m41;
  CGFloat v13 = v37.m43;
  CGFloat v14 = v37.m44;
  v41.origin.CGFloat x = x;
  v41.origin.CGFloat y = y;
  v41.size.CGFloat width = width;
  v41.size.CGFloat height = height;
  CGFloat v15 = CGRectGetWidth(v41) * -0.5;
  v42.origin.CGFloat x = x;
  v42.origin.CGFloat y = y;
  v42.size.CGFloat width = width;
  v42.size.CGFloat height = height;
  CGFloat v16 = CGRectGetHeight(v42);
  *(_OWORD *)&v38.m11 = v35;
  *(_OWORD *)&v38.m13 = v33;
  *(_OWORD *)&v38.m21 = v31;
  *(_OWORD *)&v38.m23 = v29;
  *(_OWORD *)&v38.m31 = v27;
  *(_OWORD *)&v38.m33 = v25;
  *(_OWORD *)&v38.m41 = v23;
  v38.CGFloat m43 = v13;
  v38.CGFloat m44 = v14;
  CATransform3DTranslate(&v37, &v38, v15, v16 * -0.5, 0.0);
  CATransform3D v38 = v37;
  [a1 setTransform:&v38];
  v43.origin.CGFloat x = x;
  v43.origin.CGFloat y = y;
  v43.size.CGFloat width = width;
  v43.size.CGFloat height = height;
  double v17 = CGRectGetHeight(v43);
  v44.origin.CGFloat x = x;
  v44.origin.CGFloat y = y;
  v44.size.CGFloat width = width;
  v44.size.CGFloat height = height;
  double v18 = (v17 - CGRectGetWidth(v44)) * 0.5 * a2 + 0.0;
  uint64_t v19 = *(void **)(v2 + 1152);
  if (v19) {
    objc_msgSend(v19, "setPosition:", -v18, v18);
  }
  long long v20 = *(void **)(v2 + 1160);
  if (v20)
  {
    id v21 = v20;
    v45.origin.CGFloat x = x;
    v45.origin.CGFloat y = y;
    v45.size.CGFloat width = width;
    v45.size.CGFloat height = height;
    objc_msgSend(v21, "setPosition:", v18 + CGRectGetWidth(v45), v18);
  }
}

void sub_10000EA78(uint64_t a1@<X8>, float a2@<S0>)
{
  if (qword_1000977C0 != -1) {
    swift_once();
  }
  int v5 = byte_100097FE0;
  sub_10000991C(0, (unint64_t *)&unk_1000985D0);
  if (v5 == 1)
  {
    unint64_t v6 = (void *)sub_10001693C();
    uint64_t v7 = sub_100016B90();
  }
  else
  {
    unint64_t v6 = (void *)sub_100016974(a2);
    uint64_t v7 = sub_100016CB4(a2);
  }
  uint64_t v8 = (void *)v7;
  id v9 = *(void **)(v2 + 360);
  uint64_t v10 = qword_1000977C8;
  swift_unknownObjectRetain();
  if (v10 != -1) {
    swift_once();
  }
  long long v32 = v6;
  id v11 = [v6 subdividedMesh:dword_100097FE4];
  uint64_t v12 = sub_1000138C0(v11);
  id v31 = sub_100013AB0(v9, v12, v13);
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;

  uint64_t v20 = dword_100097FE4;
  swift_unknownObjectRetain();
  id v21 = [v8 subdividedMesh:v20];
  uint64_t v22 = sub_1000138C0(v21);
  id v24 = sub_100013AB0(v9, v22, v23);
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;

  *(void *)a1 = v31;
  *(void *)(a1 + 8) = v15;
  *(void *)(a1 + 16) = v17;
  *(void *)(a1 + 24) = v19;
  *(void *)(a1 + 32) = v24;
  *(void *)(a1 + 40) = v26;
  *(void *)(a1 + 48) = v28;
  *(void *)(a1 + 56) = v30;
  *(float *)(a1 + 64) = a2;
}

float *sub_10000EC64(float *result)
{
  float v2 = 1.0 / (float)((float)*(uint64_t *)(v1 + 408) / (float)*(uint64_t *)(v1 + 416));
  *(float *)&unsigned int v3 = v2 + 0.0;
  *(float *)&long long v4 = (float)(v2 * 0.0) + 0.0;
  DWORD1(v4) = 0;
  *(void *)&long long v5 = v4;
  *((void *)&v5 + 1) = COERCE_UNSIGNED_INT(1.0);
  DWORD2(v4) = 0;
  HIDWORD(v4) = 1.0;
  *(_OWORD *)(v1 + 432) = v3;
  *(_OWORD *)(v1 + 448) = __PAIR64__(1.0, v4);
  *(_OWORD *)(v1 + 464) = v5;
  *(_OWORD *)(v1 + 480) = v4;
  uint64_t v6 = *(__int16 *)result;
  if (v6 < 0)
  {
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v7 = *(void *)(v1 + 352);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8 <= v6)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v9 = v7 + 32;
  uint64_t v10 = v9 + 248 * *(__int16 *)result;
  long long v11 = *(_OWORD *)v10;
  long long v12 = *(_OWORD *)(v10 + 16);
  long long v13 = *(_OWORD *)(v10 + 48);
  *(_OWORD *)id v166 = *(_OWORD *)(v10 + 32);
  *(_OWORD *)&v166[16] = v13;
  long long v164 = v11;
  long long v165 = v12;
  long long v14 = *(_OWORD *)(v10 + 64);
  long long v15 = *(_OWORD *)(v10 + 80);
  long long v16 = *(_OWORD *)(v10 + 112);
  *(_OWORD *)long long v169 = *(_OWORD *)(v10 + 96);
  *(_OWORD *)&v169[16] = v16;
  long long v167 = v14;
  long long v168 = v15;
  long long v17 = *(_OWORD *)(v10 + 128);
  long long v18 = *(_OWORD *)(v10 + 144);
  long long v19 = *(_OWORD *)(v10 + 160);
  *(_OWORD *)&v172[16] = *(_OWORD *)(v10 + 176);
  long long v171 = v18;
  *(_OWORD *)double v172 = v19;
  long long v170 = v17;
  long long v20 = *(_OWORD *)(v10 + 192);
  long long v21 = *(_OWORD *)(v10 + 208);
  long long v22 = *(_OWORD *)(v10 + 224);
  int v176 = *(_DWORD *)(v10 + 240);
  long long v175 = v22;
  long long v174 = v21;
  long long v173 = v20;
  uint64_t v23 = *((__int16 *)result + 1);
  if (v23 < 0 || v8 <= v23) {
    goto LABEL_39;
  }
  char v24 = v174;
  uint64_t v25 = (long long *)(v9 + 248 * *((__int16 *)result + 1));
  long long v26 = *v25;
  long long v27 = v25[1];
  long long v28 = v25[3];
  v162[2] = v25[2];
  v162[3] = v28;
  v162[0] = v26;
  v162[1] = v27;
  long long v29 = v25[4];
  long long v30 = v25[5];
  long long v31 = v25[7];
  v162[6] = v25[6];
  v162[7] = v31;
  v162[4] = v29;
  v162[5] = v30;
  long long v32 = v25[8];
  long long v33 = v25[9];
  long long v34 = v25[11];
  v162[10] = v25[10];
  v162[11] = v34;
  v162[8] = v32;
  v162[9] = v33;
  long long v35 = v25[12];
  long long v36 = v25[13];
  long long v37 = v25[14];
  int v163 = *((_DWORD *)v25 + 60);
  v162[13] = v36;
  v162[14] = v37;
  v162[12] = v35;
  *(_WORD *)(v1 + 216) = v174;
  *(_WORD *)(v1 + 218) = v36;
  if (v6 == v23)
  {
    int v97 = HIDWORD(v175);
    int v95 = v176;
    uint64_t v96 = *(void *)((char *)&v175 + 4);
    int v94 = v175;
    int v92 = DWORD1(v174);
    uint64_t v93 = *((void *)&v174 + 1);
    uint64_t v38 = *((void *)&v173 + 1);
    char v39 = v170;
    uint64_t v90 = v171;
    uint64_t v91 = *((void *)&v170 + 1);
    uint64_t v88 = *(void *)v172;
    uint64_t v89 = *((void *)&v171 + 1);
    CGRect v40 = (void *)v173;
    uint64_t v41 = *(void *)&v172[24];
    char v42 = v167;
    uint64_t v43 = *((void *)&v167 + 1);
    uint64_t v45 = *((void *)&v168 + 1);
    uint64_t v44 = v168;
    uint64_t v46 = *(void *)v169;
    long long v86 = *(_OWORD *)&v169[8];
    long long v87 = *(_OWORD *)&v172[8];
    uint64_t v47 = *(void *)&v169[24];
    char v48 = v164;
    uint64_t v49 = *((void *)&v164 + 1);
    uint64_t v51 = *((void *)&v165 + 1);
    uint64_t v50 = v165;
    uint64_t v52 = *(void *)v166;
    long long v85 = *(_OWORD *)&v166[8];
    uint64_t v53 = *(void *)&v166[24];
    uint64_t result = (float *)sub_100014D80((uint64_t)&v164);
    long long v55 = v85;
    long long v54 = v86;
    uint64_t v56 = v44;
    long long v57 = v87;
    uint64_t v59 = v88;
    uint64_t v58 = v89;
    uint64_t v61 = v90;
    uint64_t v60 = v91;
    int v62 = v92;
    int v64 = HIDWORD(v93);
    int v65 = v93;
    int v63 = v94;
    int v66 = v95;
    int v68 = HIDWORD(v96);
    int v69 = v96;
    int v67 = v97;
  }
  else
  {
    float v70 = result[1];
    sub_100014D80((uint64_t)&v164);
    sub_100014D80((uint64_t)v162);
    sub_10001B364((uint64_t)v162, &v164, (uint64_t)v130, v70);
    sub_100014E40((uint64_t)v162);
    uint64_t result = (float *)sub_100014E40((uint64_t)&v164);
    int v66 = v161;
    int v67 = v160;
    int v68 = v159;
    int v69 = v158;
    int v63 = v157;
    int v64 = v156;
    int v65 = v155;
    int v62 = v154;
    char v24 = v153;
    uint64_t v38 = v152;
    char v39 = v144;
    uint64_t v60 = v145;
    uint64_t v61 = v146;
    uint64_t v58 = v147;
    uint64_t v59 = v148;
    long long v57 = v149;
    CGRect v40 = v151;
    uint64_t v41 = v150;
    char v42 = v137;
    uint64_t v43 = v138;
    uint64_t v56 = v139;
    uint64_t v45 = v140;
    uint64_t v46 = v141;
    long long v54 = v142;
    uint64_t v47 = v143;
    char v48 = v130[0];
    uint64_t v49 = v131;
    uint64_t v50 = v132;
    uint64_t v51 = v133;
    uint64_t v52 = v134;
    long long v55 = v135;
    uint64_t v53 = v136;
  }
  v98[0] = v48 & 1;
  uint64_t v99 = v49;
  uint64_t v100 = v50;
  uint64_t v101 = v51;
  uint64_t v102 = v52;
  long long v103 = v55;
  uint64_t v104 = v53;
  char v105 = v42 & 1;
  uint64_t v106 = v43;
  uint64_t v107 = v56;
  uint64_t v108 = v45;
  uint64_t v109 = v46;
  long long v110 = v54;
  uint64_t v111 = v47;
  char v112 = v39 & 1;
  uint64_t v113 = v60;
  uint64_t v114 = v61;
  uint64_t v115 = v58;
  uint64_t v116 = v59;
  long long v117 = v57;
  uint64_t v118 = v41;
  NSString v119 = v40;
  uint64_t v120 = v38;
  char v121 = v24;
  int v122 = v62;
  int v123 = v65;
  int v124 = v64;
  int v125 = v63;
  int v126 = v69;
  int v127 = v68;
  int v128 = v67;
  int v129 = v66;
  unint64_t v71 = *(void *)(v38 + 16);
  if (!v71) {
    goto LABEL_40;
  }
  if (v71 == 1)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v71 < 3)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v71 == 3)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  *(_OWORD *)(v1 + 224) = *(_OWORD *)(v38 + 32);
  if (!v40[2])
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v72 = v40[4];
  unint64_t v73 = *(void *)(v72 + 16);
  if (!v73)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v73 == 1)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v73 < 3)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v73 == 3)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  *(_OWORD *)(v1 + 240) = *(_OWORD *)(v72 + 32);
  if (v40[2] < 2uLL)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v74 = v40[5];
  unint64_t v75 = *(void *)(v74 + 16);
  if (!v75)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v75 == 1)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (v75 < 3)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v75 == 3)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  *(_OWORD *)(v1 + 256) = *(_OWORD *)(v74 + 32);
  if (v40[2] < 3uLL)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v76 = v40[6];
  unint64_t v77 = *(void *)(v76 + 16);
  if (!v77)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (v77 == 1)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (v77 < 3)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (v77 == 3)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  *(_OWORD *)(v1 + 272) = *(_OWORD *)(v76 + 32);
  if (v40[2] < 4uLL)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  uint64_t v78 = v40[7];
  unint64_t v79 = *(void *)(v78 + 16);
  if (!v79)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  if (v79 == 1)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (v79 < 3)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v79 == 3)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  *(_OWORD *)(v1 + 288) = *(_OWORD *)(v78 + 32);
  uint64_t v80 = v40[4];
  if (*(void *)(v80 + 16) < 5uLL)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  uint64_t v81 = v40[5];
  if (*(void *)(v81 + 16) < 5uLL)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  uint64_t v82 = v40[6];
  if (*(void *)(v82 + 16) < 5uLL)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  uint64_t v83 = v40[7];
  if (*(void *)(v83 + 16) >= 5uLL)
  {
    LODWORD(v84) = *(_DWORD *)(v80 + 48);
    DWORD1(v84) = *(_DWORD *)(v81 + 48);
    DWORD2(v84) = *(_DWORD *)(v82 + 48);
    HIDWORD(v84) = *(_DWORD *)(v83 + 48);
    *(_OWORD *)(v1 + 304) = v84;
    *(_DWORD *)(v1 + 320) = v62;
    *(_DWORD *)(v1 + 324) = v65;
    *(_DWORD *)(v1 + 328) = v64;
    *(_DWORD *)(v1 + 332) = v63;
    *(_DWORD *)(v1 + 336) = v69;
    *(_DWORD *)(v1 + 340) = v68;
    *(_DWORD *)(v1 + 344) = v67;
    uint64_t result = (float *)sub_100014E40((uint64_t)v98);
    *(_DWORD *)(v1 + 348) = v66;
    return result;
  }
LABEL_67:
  __break(1u);
  return result;
}

uint64_t sub_10000F230(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v33 = a1;
  uint64_t v3 = sub_100008F4C((uint64_t *)&unk_1000984B8);
  __chkstk_darwin(v3 - 8);
  long long v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v32 - v7;
  uint64_t v9 = type metadata accessor for FluidityWallpaperRenderer.RenderingState(0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  long long v32 = (__int16 *)((char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12);
  long long v14 = (float *)((char *)&v32 - v13);
  __chkstk_darwin(v15);
  long long v17 = (unsigned __int16 *)((char *)&v32 - v16);
  if (qword_100097818 != -1) {
    swift_once();
  }
  swift_retain();
  int v18 = sub_100023340();
  swift_release();
  if (v18 != 8)
  {
    if (qword_1000977D0 != -1) {
      swift_once();
    }
    uint64_t v21 = (v18 + word_100097FE8);
    if ((__int16)(v18 + word_100097FE8) == v21) {
      goto LABEL_15;
    }
    __break(1u);
LABEL_11:
    sub_100014BF8((uint64_t)v8, (uint64_t)v17);
    uint64_t v21 = *v17;
    sub_100014A50((uint64_t)v17);
    goto LABEL_15;
  }
  uint64_t v19 = v1 + OBJC_IVAR____TtC22MercuryPosterExtension25FluidityWallpaperRenderer_lastRenderingState;
  swift_beginAccess();
  sub_100014C5C(v19, (uint64_t)v8, (uint64_t *)&unk_1000984B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1) {
    goto LABEL_11;
  }
  sub_100014D24((uint64_t)v8, (uint64_t *)&unk_1000984B8);
  uint64_t v20 = sub_100012F80();
  if ((v20 & 0x10000) != 0)
  {
    int v22 = sub_100024EB0();
    if (qword_1000977D0 != -1) {
      swift_once();
    }
    uint64_t v21 = (v22 + word_100097FE8);
    if ((__int16)v21 != v21)
    {
      __break(1u);
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v21 = v20;
  }
LABEL_15:
  unsigned __int16 v35 = v21;
  uint64_t v23 = v2 + OBJC_IVAR____TtC22MercuryPosterExtension25FluidityWallpaperRenderer_lastRenderingState;
  swift_beginAccess();
  sub_100014C5C(v23, (uint64_t)v5, (uint64_t *)&unk_1000984B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) != 1)
  {
    sub_100014BF8((uint64_t)v5, (uint64_t)v14);
    if (v14[1] < 1.0 || *(float *)((char *)v14 + *(int *)(v9 + 32)) != 1.0 || *(float *)(v33 + 4) == 1.0)
    {
      uint64_t v21 = *(unsigned __int16 *)v14;
      sub_100014A50((uint64_t)v14);
      return v21;
    }
    if (*(unsigned __int16 *)v14 == (unsigned __int16)v21)
    {
LABEL_28:
      sub_100014A50((uint64_t)v14);
      swift_beginAccess();
      return v35;
    }
    if (qword_1000978D8 == -1)
    {
LABEL_24:
      uint64_t v25 = sub_10005DCD8();
      sub_100008DB0(v25, (uint64_t)qword_10009FB38);
      long long v26 = v32;
      sub_1000149EC((uint64_t)v14, (uint64_t)v32);
      unsigned __int16 v27 = v35;
      long long v28 = sub_10005DCB8();
      os_log_type_t v29 = sub_10005E088();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 33686016;
        unsigned __int16 v31 = *v26;
        sub_100014A50((uint64_t)v26);
        unsigned __int16 v34 = v31;
        sub_10005E138();
        *(_WORD *)(v30 + 6) = 514;
        unsigned __int16 v34 = v27;
        sub_10005E138();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Waking up at %{public}hd, and the sun says we should be at %{public}hd.", (uint8_t *)v30, 0xAu);
        swift_slowDealloc();
      }
      else
      {
        sub_100014A50((uint64_t)v26);
      }

      goto LABEL_28;
    }
LABEL_30:
    swift_once();
    goto LABEL_24;
  }
  sub_100014D24((uint64_t)v5, (uint64_t *)&unk_1000984B8);
  return v21;
}

int *sub_10000F748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = (float32x2_t *)(a2 + 964);
  switch(a1)
  {
    case 2:
      long long v57 = (int *)(a2 + 688);
      uint64_t v58 = (_DWORD *)(a2 + 684);
      long long v55 = (int *)(a2 + 696);
      uint64_t v56 = (_DWORD *)(a2 + 692);
      long long v54 = (_DWORD *)(a2 + 700);
      uint64_t v4 = (int *)(a2 + 704);
      long long v5 = (_DWORD *)(a2 + 708);
      uint64_t v6 = (int *)(a2 + 712);
      uint64_t v7 = (_DWORD *)(a2 + 716);
      uint64_t result = (int *)(a2 + 720);
      uint64_t v9 = (_DWORD *)(a2 + 724);
      uint64_t v10 = (int *)(a2 + 728);
      uint64_t v11 = (_DWORD *)(a2 + 732);
      uint64_t v12 = (int *)(a2 + 736);
      uint64_t v13 = (_DWORD *)(a2 + 740);
      long long v14 = (int *)(a2 + 744);
      uint64_t v15 = (_DWORD *)(a2 + 748);
      uint64_t v16 = (int *)(a2 + 752);
      long long v17 = (_DWORD *)(a2 + 756);
      int v18 = (int *)(a2 + 760);
      uint64_t v19 = (_DWORD *)(a2 + 764);
      uint64_t v20 = (int *)(a2 + 768);
      uint64_t v21 = (_DWORD *)(a2 + 772);
      int v22 = (int *)(a2 + 776);
      uint64_t v23 = (_DWORD *)(a2 + 780);
      char v24 = (int *)(a2 + 784);
      long long v26 = (_DWORD *)(a2 + 788);
      unsigned __int16 v27 = (int *)(a2 + 792);
      os_log_type_t v29 = (_DWORD *)(a2 + 796);
      float32x2_t v25 = vneg_f32(*(float32x2_t *)(a2 + 808));
      uint64_t v30 = (int *)(a2 + 800);
      float v28 = *(float *)(a2 + 820) + 3.1416;
      float32x2_t v31 = vneg_f32(*(float32x2_t *)(a2 + 824));
      float v32 = *(float *)(a2 + 836) + 3.1416;
      goto LABEL_4;
    case 3:
      long long v57 = (int *)(a2 + 844);
      uint64_t v58 = (_DWORD *)(a2 + 840);
      long long v55 = (int *)(a2 + 852);
      uint64_t v56 = (_DWORD *)(a2 + 848);
      long long v54 = (_DWORD *)(a2 + 856);
      uint64_t v4 = (int *)(a2 + 860);
      long long v5 = (_DWORD *)(a2 + 864);
      uint64_t v6 = (int *)(a2 + 868);
      uint64_t v7 = (_DWORD *)(a2 + 872);
      uint64_t result = (int *)(a2 + 876);
      uint64_t v9 = (_DWORD *)(a2 + 880);
      uint64_t v10 = (int *)(a2 + 884);
      uint64_t v11 = (_DWORD *)(a2 + 888);
      uint64_t v12 = (int *)(a2 + 892);
      uint64_t v13 = (_DWORD *)(a2 + 896);
      long long v14 = (int *)(a2 + 900);
      uint64_t v15 = (_DWORD *)(a2 + 904);
      uint64_t v16 = (int *)(a2 + 908);
      long long v17 = (_DWORD *)(a2 + 912);
      int v18 = (int *)(a2 + 916);
      uint64_t v19 = (_DWORD *)(a2 + 920);
      uint64_t v20 = (int *)(a2 + 924);
      uint64_t v21 = (_DWORD *)(a2 + 928);
      int v22 = (int *)(a2 + 932);
      uint64_t v23 = (_DWORD *)(a2 + 936);
      char v24 = (int *)(a2 + 940);
      float32x2_t v25 = *v3;
      long long v26 = (_DWORD *)(a2 + 944);
      unsigned __int16 v27 = (int *)(a2 + 948);
      float32x2_t v31 = *(float32x2_t *)(a2 + 980);
      os_log_type_t v29 = (_DWORD *)(a2 + 952);
      uint64_t v30 = (int *)(a2 + 956);
      float v28 = *(float *)(a2 + 976);
      float v32 = *(float *)(a2 + 992);
      goto LABEL_7;
    case 4:
      long long v57 = (int *)(a2 + 844);
      uint64_t v58 = (_DWORD *)(a2 + 840);
      long long v55 = (int *)(a2 + 852);
      uint64_t v56 = (_DWORD *)(a2 + 848);
      long long v54 = (_DWORD *)(a2 + 856);
      uint64_t v4 = (int *)(a2 + 860);
      long long v5 = (_DWORD *)(a2 + 864);
      uint64_t v6 = (int *)(a2 + 868);
      uint64_t v7 = (_DWORD *)(a2 + 872);
      uint64_t result = (int *)(a2 + 876);
      uint64_t v9 = (_DWORD *)(a2 + 880);
      uint64_t v10 = (int *)(a2 + 884);
      uint64_t v11 = (_DWORD *)(a2 + 888);
      uint64_t v12 = (int *)(a2 + 892);
      uint64_t v13 = (_DWORD *)(a2 + 896);
      long long v14 = (int *)(a2 + 900);
      uint64_t v15 = (_DWORD *)(a2 + 904);
      uint64_t v16 = (int *)(a2 + 908);
      long long v17 = (_DWORD *)(a2 + 912);
      int v18 = (int *)(a2 + 916);
      uint64_t v19 = (_DWORD *)(a2 + 920);
      uint64_t v20 = (int *)(a2 + 924);
      uint64_t v21 = (_DWORD *)(a2 + 928);
      int v22 = (int *)(a2 + 932);
      uint64_t v23 = (_DWORD *)(a2 + 936);
      char v24 = (int *)(a2 + 940);
      long long v26 = (_DWORD *)(a2 + 944);
      unsigned __int16 v27 = (int *)(a2 + 948);
      os_log_type_t v29 = (_DWORD *)(a2 + 952);
      float32x2_t v25 = vneg_f32(*v3);
      uint64_t v30 = (int *)(a2 + 956);
      float v28 = *(float *)(a2 + 976) + 3.1416;
      float32x2_t v31 = vneg_f32(*(float32x2_t *)(a2 + 980));
      float v32 = *(float *)(a2 + 992) + 3.1416;
LABEL_7:
      uint64_t v33 = (int *)(a2 + 960);
      unsigned __int16 v34 = (int *)(a2 + 972);
      unsigned __int16 v35 = (int *)(a2 + 988);
      break;
    default:
      long long v57 = (int *)(a2 + 688);
      uint64_t v58 = (_DWORD *)(a2 + 684);
      long long v55 = (int *)(a2 + 696);
      uint64_t v56 = (_DWORD *)(a2 + 692);
      long long v54 = (_DWORD *)(a2 + 700);
      uint64_t v4 = (int *)(a2 + 704);
      long long v5 = (_DWORD *)(a2 + 708);
      uint64_t v6 = (int *)(a2 + 712);
      uint64_t v7 = (_DWORD *)(a2 + 716);
      uint64_t result = (int *)(a2 + 720);
      uint64_t v9 = (_DWORD *)(a2 + 724);
      uint64_t v10 = (int *)(a2 + 728);
      uint64_t v11 = (_DWORD *)(a2 + 732);
      uint64_t v12 = (int *)(a2 + 736);
      uint64_t v13 = (_DWORD *)(a2 + 740);
      long long v14 = (int *)(a2 + 744);
      uint64_t v15 = (_DWORD *)(a2 + 748);
      uint64_t v16 = (int *)(a2 + 752);
      long long v17 = (_DWORD *)(a2 + 756);
      int v18 = (int *)(a2 + 760);
      uint64_t v19 = (_DWORD *)(a2 + 764);
      uint64_t v20 = (int *)(a2 + 768);
      uint64_t v21 = (_DWORD *)(a2 + 772);
      int v22 = (int *)(a2 + 776);
      uint64_t v23 = (_DWORD *)(a2 + 780);
      char v24 = (int *)(a2 + 784);
      float32x2_t v25 = *(float32x2_t *)(a2 + 808);
      long long v26 = (_DWORD *)(a2 + 788);
      unsigned __int16 v27 = (int *)(a2 + 792);
      float v28 = *(float *)(a2 + 820);
      os_log_type_t v29 = (_DWORD *)(a2 + 796);
      uint64_t v30 = (int *)(a2 + 800);
      float32x2_t v31 = *(float32x2_t *)(a2 + 824);
      float v32 = *(float *)(a2 + 836);
LABEL_4:
      uint64_t v33 = (int *)(a2 + 804);
      unsigned __int16 v34 = (int *)(a2 + 816);
      unsigned __int16 v35 = (int *)(a2 + 832);
      break;
  }
  int v36 = *v35;
  int v37 = *v34;
  int v38 = *v33;
  int v39 = *v57;
  *(_DWORD *)a3 = *v58;
  *(_DWORD *)(a3 + 4) = v39;
  int v40 = *v55;
  *(_DWORD *)(a3 + 8) = *v56;
  *(_DWORD *)(a3 + 12) = v40;
  int v41 = *v4;
  *(_DWORD *)(a3 + 16) = *v54;
  *(_DWORD *)(a3 + 20) = v41;
  int v42 = *v6;
  *(_DWORD *)(a3 + 24) = *v5;
  *(_DWORD *)(a3 + 28) = v42;
  int v43 = *result;
  *(_DWORD *)(a3 + 32) = *v7;
  *(_DWORD *)(a3 + 36) = v43;
  int v44 = *v10;
  *(_DWORD *)(a3 + 40) = *v9;
  *(_DWORD *)(a3 + 44) = v44;
  int v45 = *v12;
  *(_DWORD *)(a3 + 48) = *v11;
  *(_DWORD *)(a3 + 52) = v45;
  int v46 = *v14;
  *(_DWORD *)(a3 + 56) = *v13;
  *(_DWORD *)(a3 + 60) = v46;
  int v47 = *v16;
  *(_DWORD *)(a3 + 64) = *v15;
  *(_DWORD *)(a3 + 68) = v47;
  int v48 = *v18;
  *(_DWORD *)(a3 + 72) = *v17;
  *(_DWORD *)(a3 + 76) = v48;
  int v49 = *v20;
  *(_DWORD *)(a3 + 80) = *v19;
  *(_DWORD *)(a3 + 84) = v49;
  int v50 = *v22;
  *(_DWORD *)(a3 + 88) = *v21;
  *(_DWORD *)(a3 + 92) = v50;
  int v51 = *v24;
  *(_DWORD *)(a3 + 96) = *v23;
  *(_DWORD *)(a3 + 100) = v51;
  int v52 = *v27;
  *(_DWORD *)(a3 + 104) = *v26;
  *(_DWORD *)(a3 + 108) = v52;
  int v53 = *v30;
  *(_DWORD *)(a3 + 112) = *v29;
  *(_DWORD *)(a3 + 116) = v53;
  *(_DWORD *)(a3 + 120) = v38;
  *(float32x2_t *)(a3 + 124) = v25;
  *(_DWORD *)(a3 + 132) = v37;
  *(float *)(a3 + 136) = v28;
  *(float32x2_t *)(a3 + 140) = v31;
  *(_DWORD *)(a3 + 148) = v36;
  *(float *)(a3 + 152) = v32;
  return result;
}

BOOL sub_10000FB60(unsigned __int16 *a1)
{
  uint64_t v30 = a1;
  uint64_t v2 = sub_100008F4C((uint64_t *)&unk_1000984B8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for FluidityWallpaperRenderer.RenderingState(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (float *)((char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (float *)((char *)&v30 - v11);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v30 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  int v18 = (char *)&v30 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (unsigned __int16 *)((char *)&v30 - v19);
  uint64_t v21 = v1 + OBJC_IVAR____TtC22MercuryPosterExtension25FluidityWallpaperRenderer_lastRenderingState;
  swift_beginAccess();
  sub_100014C5C(v21, (uint64_t)v4, (uint64_t *)&unk_1000984B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100014D24((uint64_t)v4, (uint64_t *)&unk_1000984B8);
  }
  else
  {
    sub_100014BF8((uint64_t)v4, (uint64_t)v20);
    int v22 = *v20;
    uint64_t v23 = (uint64_t)v30;
    int v24 = *v30;
    sub_1000149EC((uint64_t)v20, (uint64_t)v18);
    sub_1000149EC(v23, (uint64_t)v15);
    if (v22 == v24)
    {
      int v25 = *((unsigned __int16 *)v18 + 1);
      sub_100014A50((uint64_t)v18);
      int v26 = *((unsigned __int16 *)v15 + 1);
      sub_100014A50((uint64_t)v15);
      sub_100014BF8((uint64_t)v20, (uint64_t)v12);
      sub_1000149EC(v23, (uint64_t)v9);
      if (v25 == v26)
      {
        float v27 = v12[1];
        sub_100014A50((uint64_t)v12);
        float v28 = v9[1];
        sub_100014A50((uint64_t)v9);
        return v27 != v28;
      }
    }
    else
    {
      sub_100014A50((uint64_t)v15);
      sub_100014A50((uint64_t)v18);
      sub_100014BF8((uint64_t)v20, (uint64_t)v12);
      sub_1000149EC(v23, (uint64_t)v9);
    }
    sub_100014A50((uint64_t)v9);
    sub_100014A50((uint64_t)v12);
  }
  return 1;
}

uint64_t sub_10000FE2C(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 a4, void *a5)
{
  id v133 = a3;
  uint64_t v6 = v5;
  id v134 = a5;
  uint64_t v135 = a2;
  uint64_t v9 = sub_100008F4C((uint64_t *)&unk_1000984B8);
  __chkstk_darwin(v9 - 8);
  uint64_t v139 = (uint64_t)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v132 - v12;
  uint64_t v14 = type metadata accessor for FluidityWallpaperRenderer.RenderingState(0);
  char v137 = *(void (***)(char *, void, uint64_t, uint64_t))(v14 - 8);
  uint64_t v138 = v14;
  __chkstk_darwin(v14);
  uint64_t v136 = (unsigned __int16 *)((char *)&v132 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  int v18 = (float *)((char *)&v132 - v17);
  __chkstk_darwin(v19);
  uint64_t v141 = (uint64_t)&v132 - v20;
  if ((*(unsigned char *)(v5 + 17) & 1) == 0 && (*(unsigned char *)(a1 + 8) & 1) != *(unsigned char *)(v5 + 1008))
  {
    uint64_t v21 = *(void (**)(uint64_t))(v5 + 24);
    if (v21)
    {
      uint64_t v22 = swift_retain();
      v21(v22);
      sub_100012030((uint64_t)v21);
    }
  }
  uint64_t v163 = *(void *)(v5 + 1128);
  long long v23 = *(_OWORD *)(v5 + 1112);
  v162[6] = *(_OWORD *)(v5 + 1096);
  v162[7] = v23;
  long long v24 = *(_OWORD *)(v5 + 1048);
  v162[2] = *(_OWORD *)(v5 + 1032);
  v162[3] = v24;
  long long v25 = *(_OWORD *)(v5 + 1080);
  v162[4] = *(_OWORD *)(v5 + 1064);
  v162[5] = v25;
  long long v26 = *(_OWORD *)(v5 + 1016);
  v162[0] = *(_OWORD *)(v5 + 1000);
  v162[1] = v26;
  long long v27 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v5 + 1064) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v5 + 1080) = v27;
  long long v28 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v5 + 1096) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v5 + 1112) = v28;
  *(void *)(v5 + 1128) = *(void *)(a1 + 128);
  long long v29 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v5 + 1032) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v5 + 1048) = v29;
  long long v30 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v5 + 1000) = *(_OWORD *)a1;
  *(_OWORD *)(v5 + 1016) = v30;
  sub_1000148F4(a1, (void (*)(void, void, void, void, void, void))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100014984);
  sub_1000148F4((uint64_t)v162, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
  if (*(unsigned char *)(a1 + 52))
  {
LABEL_6:
    int v31 = 0;
  }
  else
  {
    uint64_t v33 = *(void *)(a1 + 16);
    float v32 = *(void **)(a1 + 24);
    if ((v33 || v32 != (void *)0xE000000000000000) && (sub_10005E448() & 1) == 0)
    {
      swift_bridgeObjectRetain();
      switch(sub_100033BA0(v33, v32))
      {
        case 1u:
        case 2u:
        case 3u:
        case 4u:
          char v34 = sub_10005E448();
          swift_bridgeObjectRelease();
          if (v34) {
            break;
          }
          goto LABEL_6;
        case 5u:
          goto LABEL_6;
        default:
          swift_bridgeObjectRelease();
          break;
      }
    }
    int v31 = 1;
  }
  uint64_t v35 = v141;
  int v140 = v31;
  BOOL v36 = sub_1000117BC(v141, v31, v6, a1);
  uint64_t v37 = *(void *)(v6 + 56);
  if (v36)
  {
    if (v37) {
      goto LABEL_22;
    }
    int v38 = *(uint64_t (**)(unint64_t, unint64_t))(v6 + 40);
    if (v38)
    {
      swift_retain();
      uint64_t v37 = v38(0xD00000000000002FLL, 0x8000000100064250);
      uint64_t v35 = v141;
      sub_100012030((uint64_t)v38);
    }
    else
    {
      uint64_t v37 = 0;
    }
  }
  else if (v37)
  {
    swift_retain();
    ContinuousRenderingToken.invalidate()();
    swift_release();
    uint64_t v37 = 0;
  }
  *(void *)(v6 + 56) = v37;
  swift_release();
LABEL_22:
  float v39 = WallpaperState.rotationLandscapeAmount.getter();
  sub_100014990(a1 + 56, (uint64_t)v164);
  unsigned __int8 v40 = a4;
  uint64_t v41 = *(void *)(a1 + 56);
  uint64_t v42 = *(void *)(a1 + 64);
  sub_100014990((uint64_t)v164, (uint64_t)v165);
  if (v166) {
    uint64_t v43 = v42;
  }
  else {
    uint64_t v43 = v41;
  }
  unsigned __int8 v44 = v40;
  sub_100013548(v165[0], v43, (uint64_t)v142, v39);
  if (v40 != 0xFF)
  {
    uint64_t v132 = v13;
    if (v40)
    {
      id v49 = v133;
      sub_100014B64(v133, 1);
      sub_100014B64(v49, 1);
      if (sub_10000FB60((unsigned __int16 *)v35)) {
        goto LABEL_38;
      }
      id v50 = [v49 sublayers];
      if (!v50) {
        goto LABEL_38;
      }

      id v51 = [v49 sublayers];
      if (v51)
      {
        int v52 = v51;
        sub_10000991C(0, (unint64_t *)&unk_1000985C0);
        unint64_t v53 = sub_10005DFA8();

        if (v53 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v54 = sub_10005E328();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v54 = *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        id v49 = v133;
        if (!v54) {
LABEL_38:
        }
          sub_10000D6EC((char **)v49, (float *)v35);
      }
      objc_msgSend(v49, "setHidden:", 0, v132);
      float v55 = -sub_100015590();
      if (*(float *)(v6 + 1136) != v55)
      {
        *(float *)(v6 + 1136) = v55;
        float v56 = WallpaperState.rotationLandscapeAmount.getter();
        sub_10000E78C(v49, v56);
      }
      sub_100014B70(v49, v44);
    }
    else
    {
      sub_100014B64(v133, 0);
      if (qword_1000978D8 != -1) {
        swift_once();
      }
      uint64_t v45 = sub_10005DCD8();
      sub_100008DB0(v45, (uint64_t)qword_10009FB38);
      int v46 = sub_10005DCB8();
      os_log_type_t v47 = sub_10005E078();
      if (os_log_type_enabled(v46, v47))
      {
        int v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Floating layer resource had an unexpected texture attachment.", v48, 2u);
        uint64_t v35 = v141;
        swift_slowDealloc();
      }

      id v49 = v133;
    }
    sub_100014B70(v49, v44);
    uint64_t v13 = v132;
  }
  if (sub_10000FB60((unsigned __int16 *)v35)) {
    sub_10000EC64((float *)v35);
  }
  long long v57 = v142[4];
  *(_OWORD *)(v6 + 144) = v142[3];
  *(_OWORD *)(v6 + 160) = v57;
  *(void *)(v6 + 208) = v143;
  long long v58 = v142[6];
  *(_OWORD *)(v6 + 176) = v142[5];
  *(_OWORD *)(v6 + 192) = v58;
  *(_OWORD *)(v6 + 104) = v144;
  double v59 = *(double *)&v145;
  *(_OWORD *)(v6 + 120) = v145;
  sub_1000137E0(a1, v6, v59);
  float v61 = v60;
  *(float *)(v6 + 96) = 1.0 - v60;
  int v62 = (_OWORD *)(v6 + 96);
  LODWORD(v63) = *(_DWORD *)a1;
  [*(id *)(v6 + 504) _solveForInput:v63];
  double v65 = sub_100018134(v61, v64);
  *(_DWORD *)(v6 + 76) = v66;
  *(_DWORD *)(v6 + 80) = v67;
  *(_DWORD *)(v6 + 84) = LODWORD(v65);
  *(_DWORD *)(v6 + 88) = v68;
  if (qword_1000977C0 != -1) {
    swift_once();
  }
  if (byte_100097FE0 == 1)
  {
    float v69 = *(double *)(a1 + 112) + -0.18419;
    *(float *)(v6 + 64) = v69;
  }
  sub_100013BB0(v6, (uint64_t)v146, v39);
  float v70 = sub_100015590();
  float v71 = fmodf(6.2832 - v70, 6.2832);
  *(float *)(v6 + 68) = v71;
  *(float *)(v6 + 100) = v71;
  *(_DWORD *)(v6 + 136) = *(_DWORD *)v35;
  *(_DWORD *)(v6 + 140) = *(_DWORD *)(v35 + 4);
  sub_1000149EC(v35, (uint64_t)v18);
  if (!v140)
  {
    sub_100014A50((uint64_t)v18);
    unint64_t v73 = v136;
    sub_1000149EC(v35, (uint64_t)v136);
    goto LABEL_56;
  }
  float v72 = v18[1];
  sub_100014A50((uint64_t)v18);
  unint64_t v73 = v136;
  sub_1000149EC(v35, (uint64_t)v136);
  if (v72 != 1.0)
  {
LABEL_56:
    sub_100014A50((uint64_t)v73);
    goto LABEL_57;
  }
  BOOL v74 = sub_10000FB60(v73);
  sub_100014A50((uint64_t)v73);
  if (v74 && (*(unsigned char *)(a1 + 10) & 1) == 0 && (*(unsigned char *)(a1 + 9) & 1) == 0) {
    sub_100014020();
  }
LABEL_57:
  sub_1000149EC(v35, (uint64_t)v13);
  v137[7](v13, 0, 1, v138);
  uint64_t v75 = v139;
  sub_100014CC0((uint64_t)v13, v139, (uint64_t *)&unk_1000984B8);
  uint64_t v76 = v6 + OBJC_IVAR____TtC22MercuryPosterExtension25FluidityWallpaperRenderer_lastRenderingState;
  swift_beginAccess();
  sub_100014AAC(v75, v76);
  swift_endAccess();
  id v77 = [objc_allocWithZone((Class)MTLRenderPassDescriptor) init];
  id v78 = [v77 colorAttachments];
  id v79 = [v78 objectAtIndexedSubscript:0];

  if (!v79)
  {
    __break(1u);
    goto LABEL_79;
  }
  [v79 setTexture:v135];

  id v80 = [v77 colorAttachments];
  id v81 = [v80 objectAtIndexedSubscript:0];

  if (!v81)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  [v81 setLoadAction:2];

  id v82 = [v77 colorAttachments];
  id v83 = [v82 objectAtIndexedSubscript:0];

  if (!v83)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  objc_msgSend(v83, "setClearColor:", 0.0, 0.0, 0.0, 1.0);

  id v84 = [v77 colorAttachments];
  id v85 = [v84 objectAtIndexedSubscript:0];

  if (!v85)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  [v85 setStoreAction:1];

  id v86 = [v77 colorAttachments];
  id v87 = [v86 objectAtIndexedSubscript:1];

  if (!v87)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  uint64_t v88 = *(void *)(v6 + 392);
  swift_unknownObjectRetain();
  [v87 setTexture:v88];
  swift_unknownObjectRelease();

  id v89 = [v77 colorAttachments];
  id v90 = [v89 objectAtIndexedSubscript:1];

  if (!v90)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  [v90 setLoadAction:2];

  id v91 = [v77 colorAttachments];
  id v92 = [v91 objectAtIndexedSubscript:1];

  if (!v92)
  {
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
  }
  objc_msgSend(v92, "setClearColor:", 0.0, 0.0, 0.0, 1.0);

  id v93 = [v77 colorAttachments];
  id v94 = [v93 objectAtIndexedSubscript:1];

  if (!v94) {
    goto LABEL_85;
  }
  [v94 setStoreAction:0];

  id v95 = [v134 renderCommandEncoderWithDescriptor:v77];
  if (v95)
  {
    uint64_t v96 = v95;
    char v137 = (void (**)(char *, void, uint64_t, uint64_t))v77;
    long long v97 = *(_OWORD *)(v6 + 448);
    long long v98 = *(_OWORD *)(v6 + 464);
    long long v99 = *(_OWORD *)(v6 + 480);
    v147[0] = *(_OWORD *)(v6 + 432);
    v147[1] = v97;
    long long v148 = v98;
    long long v149 = v99;
    [v95 setVertexBytes:v147 length:64 atIndex:1];
    uint64_t v100 = v146[0];
    uint64_t v101 = v146[1];
    uint64_t v139 = v146[2];
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v138 = v101;
    [v96 setVertexBuffer:v101 offset:0 atIndex:0];
    *(unsigned char *)(v6 + 72) = 1;
    *(void *)&v147[0] = *(void *)(v6 + 64);
    BYTE8(v147[0]) = 1;
    *(_OWORD *)((char *)v147 + 12) = *(_OWORD *)(v6 + 76);
    [v96 setVertexBytes:v147 length:28 atIndex:2];
    char v102 = *(unsigned char *)(v6 + 72);
    *(void *)&v147[0] = *(void *)(v6 + 64);
    BYTE8(v147[0]) = v102;
    *(_OWORD *)((char *)v147 + 12) = *(_OWORD *)(v6 + 76);
    [v96 setFragmentBytes:v147 length:28 atIndex:0];
    [v96 setRenderPipelineState:*(void *)(v6 + 368)];
    uint64_t v103 = v139;
    uint64_t v139 = v100;
    [v96 drawIndexedPrimitives:3 indexCount:v103 indexType:1 indexBuffer:v100 indexBufferOffset:0];
    uint64_t v104 = v146[4];
    uint64_t v105 = v146[5];
    uint64_t v106 = v146[6];
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    [v96 setVertexBuffer:v105 offset:0 atIndex:0];
    *(unsigned char *)(v6 + 72) = 0;
    *(void *)&v147[0] = *(void *)(v6 + 64);
    BYTE8(v147[0]) = 0;
    *(_OWORD *)((char *)v147 + 12) = *(_OWORD *)(v6 + 76);
    [v96 setVertexBytes:v147 length:28 atIndex:2];
    char v107 = *(unsigned char *)(v6 + 72);
    *(void *)&v147[0] = *(void *)(v6 + 64);
    BYTE8(v147[0]) = v107;
    *(_OWORD *)((char *)v147 + 12) = *(_OWORD *)(v6 + 76);
    [v96 setFragmentBytes:v147 length:28 atIndex:0];
    [v96 drawIndexedPrimitives:3 indexCount:v106 indexType:1 indexBuffer:v104 indexBufferOffset:0];
    long long v108 = *(_OWORD *)(v6 + 304);
    long long v158 = *(_OWORD *)(v6 + 288);
    long long v159 = v108;
    long long v109 = *(_OWORD *)(v6 + 336);
    long long v160 = *(_OWORD *)(v6 + 320);
    long long v161 = v109;
    long long v110 = *(_OWORD *)(v6 + 240);
    long long v154 = *(_OWORD *)(v6 + 224);
    long long v155 = v110;
    long long v111 = *(_OWORD *)(v6 + 272);
    long long v156 = *(_OWORD *)(v6 + 256);
    long long v157 = v111;
    long long v112 = *(_OWORD *)(v6 + 176);
    long long v150 = *(_OWORD *)(v6 + 160);
    long long v151 = v112;
    long long v113 = *(_OWORD *)(v6 + 208);
    long long v152 = *(_OWORD *)(v6 + 192);
    long long v153 = v113;
    long long v114 = *(_OWORD *)(v6 + 112);
    v147[0] = *v62;
    v147[1] = v114;
    long long v115 = *(_OWORD *)(v6 + 144);
    long long v148 = *(_OWORD *)(v6 + 128);
    long long v149 = v115;
    [v96 setVertexBytes:v147 length:256 atIndex:0];
    long long v116 = *(_OWORD *)(v6 + 304);
    long long v158 = *(_OWORD *)(v6 + 288);
    long long v159 = v116;
    long long v117 = *(_OWORD *)(v6 + 336);
    long long v160 = *(_OWORD *)(v6 + 320);
    long long v161 = v117;
    long long v118 = *(_OWORD *)(v6 + 240);
    long long v154 = *(_OWORD *)(v6 + 224);
    long long v155 = v118;
    long long v119 = *(_OWORD *)(v6 + 272);
    long long v156 = *(_OWORD *)(v6 + 256);
    long long v157 = v119;
    long long v120 = *(_OWORD *)(v6 + 176);
    long long v150 = *(_OWORD *)(v6 + 160);
    long long v151 = v120;
    long long v121 = *(_OWORD *)(v6 + 208);
    long long v152 = *(_OWORD *)(v6 + 192);
    long long v153 = v121;
    long long v122 = *(_OWORD *)(v6 + 112);
    v147[0] = *v62;
    v147[1] = v122;
    long long v123 = *(_OWORD *)(v6 + 144);
    long long v148 = *(_OWORD *)(v6 + 128);
    long long v149 = v123;
    [v96 setFragmentBytes:v147 length:256 atIndex:0];
    [v96 setFragmentTexture:*(void *)(v6 + 400) atIndex:0];
    if (v140 && *(float *)(v6 + 140) < 1.0) {
      int v124 = (void *)(v6 + 384);
    }
    else {
      int v124 = (void *)(v6 + 376);
    }
    int v125 = v137;
    objc_msgSend(v96, "setRenderPipelineState:", *v124, v132);
    [v96 drawPrimitives:3 vertexStart:0 vertexCount:6];
    [v96 endEncoding];
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_1000978D8 != -1) {
      swift_once();
    }
    uint64_t v126 = sub_10005DCD8();
    sub_100008DB0(v126, (uint64_t)qword_10009FB38);
    int v127 = sub_10005DCB8();
    os_log_type_t v128 = sub_10005E078();
    if (os_log_type_enabled(v127, v128))
    {
      int v129 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v129 = 0;
      _os_log_impl((void *)&_mh_execute_header, v127, v128, "Unable to make render encoder", v129, 2u);
      swift_slowDealloc();
    }

    sub_100011FDC();
    swift_allocError();
    *unint64_t v130 = 1;
    swift_willThrow();
  }
  sub_100014B14((uint64_t)v146);
  return sub_100014A50(v141);
}

void sub_100010ED8()
{
  if (!qword_100098040)
  {
    type metadata accessor for FluidityWallpaperRenderer.RenderingState(255);
    unint64_t v0 = sub_10005E128();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100098040);
    }
  }
}

uint64_t type metadata accessor for FluidityWallpaperRenderer.RenderingState(uint64_t a1)
{
  return sub_100010F50(a1, qword_100098458);
}

uint64_t sub_100010F50(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t destroy for FluidityWallpaperRenderer.MeshResourcesData()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for FluidityWallpaperRenderer.MeshResourcesData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FluidityWallpaperRenderer.MeshResourcesData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return a1;
}

__n128 initializeWithTake for FluidityWallpaperRenderer.MeshResourcesData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for FluidityWallpaperRenderer.MeshResourcesData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for FluidityWallpaperRenderer.MeshResourcesData(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 68)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FluidityWallpaperRenderer.MeshResourcesData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 68) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 68) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FluidityWallpaperRenderer.MeshResourcesData()
{
  return &type metadata for FluidityWallpaperRenderer.MeshResourcesData;
}

void *sub_10001123C(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *long long v4 = *a2;
    long long v4 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int v7 = *((_DWORD *)a2 + 1);
    *a1 = *(_DWORD *)a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = sub_10005DB38();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    *(_DWORD *)((char *)v4 + *(int *)(a3 + 32)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 32));
  }
  return v4;
}

uint64_t sub_100011324(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 28);
  uint64_t v3 = sub_10005DB38();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

_DWORD *sub_10001138C(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  int v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_10005DB38();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 32)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_100011424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_10005DB38();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(_DWORD *)(a1 + *(int *)(a3 + 32)) = *(_DWORD *)(a2 + *(int *)(a3 + 32));
  return a1;
}

_DWORD *sub_1000114CC(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  int v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_10005DB38();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 32)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 32));
  return a1;
}

_DWORD *sub_100011564(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_10005DB38();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 32)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_100011604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100011618);
}

uint64_t sub_100011618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 28);
  uint64_t v5 = sub_10005DB38();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_100011688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10001169C);
}

uint64_t sub_10001169C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 28);
  uint64_t v6 = sub_10005DB38();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t sub_100011710()
{
  uint64_t result = sub_10005DB38();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

BOOL sub_1000117BC(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = a1;
  uint64_t v7 = sub_10005DB38();
  uint64_t v51 = *(void *)(v7 - 8);
  uint64_t v52 = v7;
  __chkstk_darwin(v7);
  id v50 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100008F4C((uint64_t *)&unk_1000984B8);
  __chkstk_darwin(v9 - 8);
  uint64_t v48 = (uint64_t)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v47 - v12;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v47 - v15;
  uint64_t v17 = type metadata accessor for FluidityWallpaperRenderer.RenderingState(0);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (unsigned __int16 *)((char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  long long v23 = (__int16 *)((char *)&v47 - v22);
  __chkstk_darwin(v24);
  long long v26 = (char *)&v47 - v25;
  *(uint64_t *)((char *)&v47 - v25) = 0;
  id v49 = (char *)&v47 + *(int *)(v27 + 28) - v25;
  sub_10005DB28();
  uint64_t v54 = *(int *)(v17 + 32);
  *(_DWORD *)&v26[v54] = 0;
  if (a2)
  {
    uint64_t v53 = a4;
    if (*(unsigned char *)(a3 + 17) == 1)
    {
      uint64_t v28 = a3 + OBJC_IVAR____TtC22MercuryPosterExtension25FluidityWallpaperRenderer_lastRenderingState;
      swift_beginAccess();
      sub_100014C5C(v28, (uint64_t)v16, (uint64_t *)&unk_1000984B8);
      int v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17);
      a4 = v53;
      if (v29 == 1)
      {
        sub_100014D24((uint64_t)v16, (uint64_t *)&unk_1000984B8);
        if (qword_1000977D8 != -1) {
          swift_once();
        }
        __int16 v30 = word_100097FEA;
      }
      else
      {
        sub_100014BF8((uint64_t)v16, (uint64_t)v23);
        __int16 v30 = *v23;
        sub_100014A50((uint64_t)v23);
      }
      goto LABEL_12;
    }
    unsigned __int16 v31 = sub_100013248(v53, a3);
    uint64_t v32 = a3 + OBJC_IVAR____TtC22MercuryPosterExtension25FluidityWallpaperRenderer_lastRenderingState;
    swift_beginAccess();
    sub_100014C5C(v32, (uint64_t)v13, (uint64_t *)&unk_1000984B8);
    uint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
    int v34 = v33(v13, 1, v17);
    sub_100014D24((uint64_t)v13, (uint64_t *)&unk_1000984B8);
    if (v34 == 1)
    {
      *(_WORD *)long long v26 = v31;
      uint64_t v35 = sub_100012F80();
      if ((v35 & 0x10000) != 0)
      {
        *((_WORD *)v26 + 1) = v31;
        *((_DWORD *)v26 + 1) = 1065353216;
      }
      else
      {
        *((_WORD *)v26 + 1) = v35;
        *((_DWORD *)v26 + 1) = 0;
      }
      float v39 = v50;
      sub_10005DB18();
    }
    else
    {
      uint64_t v38 = v48;
      sub_100014C5C(v32, v48, (uint64_t *)&unk_1000984B8);
      if (v33((char *)v38, 1, v17) == 1)
      {
        sub_100014D24(v38, (uint64_t *)&unk_1000984B8);
        BOOL v36 = 0;
        goto LABEL_14;
      }
      sub_100014BF8(v38, (uint64_t)v20);
      int v40 = *v20;
      if (v40 == v31)
      {
        *(_WORD *)long long v26 = v31;
        *((_WORD *)v26 + 1) = v20[1];
        *((_DWORD *)v26 + 1) = *((_DWORD *)v20 + 1);
        uint64_t v41 = (char *)v20 + *(int *)(v17 + 28);
        uint64_t v42 = v52;
        a4 = v53;
        float v39 = v50;
        uint64_t v43 = v51;
LABEL_23:
        (*(void (**)(char *, char *, uint64_t))(v43 + 40))(v49, v41, v42);
        if (*((float *)v26 + 1) < 1.0)
        {
          sub_10005DB18();
          sub_10005DAB8();
          double v45 = v44;
          (*(void (**)(char *, uint64_t))(v43 + 8))(v39, v42);
          float v46 = fmin(v45, 1.0);
          *((float *)v26 + 1) = v46;
        }
        BOOL v36 = (*(unsigned char *)(a4 + 10) & 1) != 0 || (*(unsigned char *)(a4 + 9) & 1) != 0;
        goto LABEL_13;
      }
      *((_WORD *)v26 + 1) = v40;
      *(_WORD *)long long v26 = v31;
      *((_DWORD *)v26 + 1) = 0;
      float v39 = v50;
      sub_10005DB18();
      sub_100014A50((uint64_t)v20);
    }
    uint64_t v41 = v39;
    uint64_t v42 = v52;
    a4 = v53;
    uint64_t v43 = v51;
    goto LABEL_23;
  }
  sub_100009470(a4 + 16, (uint64_t)v56);
  __int16 v30 = sub_100012D78((uint64_t)v56, *(unsigned char *)(a4 + 8));
LABEL_12:
  BOOL v36 = 0;
  *(_WORD *)long long v26 = v30;
  *((_WORD *)v26 + 1) = v30;
  *((_DWORD *)v26 + 1) = 1065353216;
LABEL_13:
  *(_DWORD *)&v26[v54] = *(_DWORD *)(a4 + 4);
LABEL_14:
  sub_100014BF8((uint64_t)v26, v55);
  return v36;
}

uint64_t sub_100011D10()
{
  return 80;
}

uint64_t sub_100011D18()
{
  if (qword_1000977B8 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_10009F9F8;
  id v1 = (id)qword_10009F9F8;
  return v0;
}

uint64_t static WallpaperAppearanceMode.default.getter()
{
  return 2;
}

uint64_t sub_100011D7C(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t sub_100011D84(uint64_t result)
{
  *(unsigned char *)(v1 + 17) = result;
  return result;
}

uint64_t sub_100011D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 24);
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return sub_100012030(v3);
}

uint64_t sub_100011DA0()
{
  uint64_t v1 = *(void *)(v0 + 40);
  sub_100014888(v1);
  return v1;
}

uint64_t sub_100011DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 40);
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return sub_100012030(v3);
}

uint64_t sub_100011DE8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for FluidityWallpaperRenderer(0);
  uint64_t v11 = swift_allocObject();
  sub_10000B700(a1, v12, a3, a4, a5, a6);
  return v11;
}

uint64_t sub_100011E70(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 a4, void *a5)
{
  return sub_10000FE2C(a1, a2, a3, a4, a5);
}

id sub_100011E88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_10005D9B8(__stack_chk_guard);
  uint64_t v7 = v6;
  id v16 = 0;
  id v8 = [v3 initWithURL:v6 options:a2 error:&v16];

  id v9 = v16;
  if (v8)
  {
    uint64_t v10 = sub_10005DA28();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
    id v12 = v9;
    v11(a1, v10);
  }
  else
  {
    id v13 = v16;
    sub_10005D978();

    swift_willThrow();
    uint64_t v14 = sub_10005DA28();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
  }
  return v8;
}

unint64_t sub_100011FDC()
{
  unint64_t result = qword_1000984B0;
  if (!qword_1000984B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000984B0);
  }
  return result;
}

uint64_t sub_100012030(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100012040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6) {
    return _objc_release_x2();
  }
  return result;
}

uint64_t sub_10001204C(void (*a1)(void))
{
  a1();

  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t sub_100012084(uint64_t (*a1)(void))
{
  return a1();
}

void sub_1000120AC(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  sub_10005E138();
  *a1 = v7;
  id v8 = *a2;
  if (*a2)
  {
    *id v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

unint64_t sub_100012164(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = sub_10005E1A8(*(void *)(v2 + 40));

  return sub_100012470(a1, v4);
}

unint64_t sub_1000121A8(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = sub_10005E108(*(void *)(v2 + 40));
  return sub_1000126B8(a1, v4, &qword_1000985F8);
}

unint64_t sub_1000121F8(uint64_t a1, uint64_t a2)
{
  sub_10005E4F8();
  sub_10005DEB8();
  Swift::Int v4 = sub_10005E528();

  return sub_100012538(a1, a2, v4);
}

unint64_t sub_100012274(Swift::UInt a1)
{
  sub_10005E4F8();
  sub_10005E508(a1);
  Swift::Int v2 = sub_10005E528();
  return sub_10001261C(a1, v2);
}

unint64_t sub_1000122DC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = sub_10005E108(*(void *)(v2 + 40));
  return sub_1000126B8(a1, v4, (unint64_t *)&qword_100098528);
}

unint64_t sub_10001232C(uint64_t a1)
{
  sub_10005E4F8();
  type metadata accessor for CFString(0);
  sub_100014F00(&qword_100098520, type metadata accessor for CFString);
  sub_10005DC28();
  Swift::Int v2 = sub_10005E528();

  return sub_1000127CC(a1, v2);
}

unint64_t sub_1000123E0(uint64_t a1)
{
  sub_10005DE68();
  sub_10005E4F8();
  sub_10005DEB8();
  Swift::Int v2 = sub_10005E528();
  swift_bridgeObjectRelease();
  return sub_100012928(a1, v2);
}

unint64_t sub_100012470(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_100014898(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = sub_10005E1B8();
      sub_100009510((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100012538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_10005E448() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        id v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_10005E448() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10001261C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1000126B8(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a2 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_10000991C(0, a3);
    id v7 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    char v8 = sub_10005E118();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v5;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * i);
        char v11 = sub_10005E118();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1000127CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString(0);
    unint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_100014F00(&qword_100098520, type metadata accessor for CFString);
    id v7 = v6;
    char v8 = sub_10005DC18();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = sub_10005DC18();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_100012928(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = sub_10005DE68();
    uint64_t v8 = v7;
    if (v6 == sub_10005DE68() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = sub_10005E448();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = sub_10005DE68();
          uint64_t v15 = v14;
          if (v13 == sub_10005DE68() && v15 == v16) {
            break;
          }
          char v18 = sub_10005E448();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_100012AA0(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_100008F4C((uint64_t *)&unk_100098600);
  uint64_t v3 = (void *)sub_10005E368();
  Swift::UInt v4 = a1[4];
  unint64_t v5 = (void *)a1[5];
  unint64_t result = sub_100012274(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    id v17 = v5;
    return (unint64_t)v3;
  }
  uint64_t v8 = (void **)(a1 + 7);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v4;
    *(void *)(v3[7] + v9) = v5;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v13 = v8 + 2;
    Swift::UInt v4 = (Swift::UInt)*(v8 - 1);
    uint64_t v14 = *v8;
    id v15 = v5;
    unint64_t result = sub_100012274(v4);
    uint64_t v8 = v13;
    unint64_t v5 = v14;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_100012B98(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_100008F4C(&qword_1000985A8);
  uint64_t v3 = (void *)sub_10005E368();
  Swift::UInt v5 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t result = sub_100012274(v5);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  uint64_t v8 = a1 + 7;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v5;
    *(void *)(v3[7] + v9) = v4;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v13 = v8 + 2;
    Swift::UInt v5 = *(v8 - 1);
    uint64_t v14 = *v8;
    swift_retain();
    unint64_t result = sub_100012274(v5);
    uint64_t v8 = v13;
    uint64_t v4 = v14;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_100012C98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100008F4C(&qword_1000984F8);
    uint64_t v3 = (void *)sub_10005E368();
    for (unint64_t i = (_OWORD *)(a1 + 40); ; unint64_t i = (_OWORD *)((char *)i + 24))
    {
      Swift::UInt v5 = *((void *)i - 1);
      long long v11 = *i;
      unint64_t result = sub_100012274(v5);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      *(_OWORD *)(v3[7] + 16 * result) = v11;
      uint64_t v8 = v3[2];
      BOOL v9 = __OFADD__(v8, 1);
      uint64_t v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t sub_100012D78(uint64_t a1, char a2)
{
  sub_100009470(a1, (uint64_t)&v16);
  sub_100009470(a1, (uint64_t)v17);
  if (v18)
  {
    if (qword_1000978D8 != -1) {
      swift_once();
    }
    uint64_t v4 = sub_10005DCD8();
    sub_100008DB0(v4, (uint64_t)qword_10009FB38);
    Swift::UInt v5 = sub_10005DCB8();
    os_log_type_t v6 = sub_10005E078();
    if (os_log_type_enabled(v5, v6))
    {
      char v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unexpectedly transitioning in render.", v7, 2u);
      swift_slowDealloc();
    }

    goto LABEL_8;
  }
  uint64_t v8 = v17[0];
  BOOL v9 = (void *)v17[1];
  swift_bridgeObjectRetain();
  char v10 = sub_100033BA0(v8, v9);
  if (v10 == 5)
  {
LABEL_8:
    if (qword_1000977D8 != -1) {
      swift_once();
    }
    return (unsigned __int16)word_100097FEA;
  }
  unsigned int v12 = (v10 - 2);
  if (v12 >= 3) {
    __int16 v13 = 3;
  }
  else {
    __int16 v13 = 0x500040002uLL >> (16 * (v10 - 2));
  }
  unint64_t v14 = 0x600000001uLL >> (16 * (v10 - 2));
  if (v12 >= 3) {
    LOWORD(v14) = 7;
  }
  if (a2) {
    __int16 v15 = v14;
  }
  else {
    __int16 v15 = v13;
  }
  if (qword_1000977D0 != -1) {
    swift_once();
  }
  uint64_t result = (word_100097FE8 + v15);
  if (result != (__int16)(word_100097FE8 + v15)) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100012F80()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = sub_10005DE38();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    sub_10005E178();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  sub_100014CC0((uint64_t)v14, (uint64_t)v15, &qword_100097D70);
  if (v16)
  {
    if (swift_dynamicCast())
    {
      int v3 = v13;
      if (qword_1000978D8 != -1) {
        swift_once();
      }
      uint64_t v4 = sub_10005DCD8();
      sub_100008DB0(v4, (uint64_t)qword_10009FB38);
      Swift::UInt v5 = sub_10005DCB8();
      os_log_type_t v6 = sub_10005E088();
      if (!os_log_type_enabled(v5, v6))
      {
        int v8 = 0;
        goto LABEL_18;
      }
      char v7 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)char v7 = 33685760;
      v15[0] = v13;
      sub_10005E138();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "The last saved scheme from UserDefaults was %{public}hd.", v7, 6u);
      int v8 = 0;
      goto LABEL_15;
    }
  }
  else
  {
    sub_100014D24((uint64_t)v15, &qword_100097D70);
  }
  if (qword_1000978D8 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_10005DCD8();
  sub_100008DB0(v9, (uint64_t)qword_10009FB38);
  Swift::UInt v5 = sub_10005DCB8();
  os_log_type_t v10 = sub_10005E088();
  if (!os_log_type_enabled(v5, v10))
  {
    int v3 = 0;
    int v8 = 1;
    goto LABEL_18;
  }
  long long v11 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)long long v11 = 0;
  _os_log_impl((void *)&_mh_execute_header, v5, v10, "No existing scheme found in UserDefaults.", v11, 2u);
  int v3 = 0;
  int v8 = 1;
LABEL_15:
  swift_slowDealloc();
LABEL_18:

  return v3 | (v8 << 16);
}

uint64_t sub_100013248(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10005DB38();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  char v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100008F4C((uint64_t *)&unk_1000984B8);
  __chkstk_darwin(v8 - 8);
  os_log_type_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for FluidityWallpaperRenderer.RenderingState(0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (__int16 *)((char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((*(unsigned char *)(a1 + 10) & 1) == 0 && (*(unsigned char *)(a1 + 9) & 1) == 0) {
    return sub_10000F230(a1);
  }
  uint64_t v16 = a2 + OBJC_IVAR____TtC22MercuryPosterExtension25FluidityWallpaperRenderer_lastRenderingState;
  swift_beginAccess();
  sub_100014C5C(v16, (uint64_t)v10, (uint64_t *)&unk_1000984B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_100014D24((uint64_t)v10, (uint64_t *)&unk_1000984B8);
    if (qword_1000977D8 != -1) {
      swift_once();
    }
    return (unsigned __int16)word_100097FEA;
  }
  else
  {
    sub_100014BF8((uint64_t)v10, (uint64_t)v14);
    sub_10005DB18();
    sub_10005DAB8();
    double v19 = v18;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v17 = *v14;
    if (v19 > 2.0)
    {
      if (qword_1000977C0 != -1) {
        swift_once();
      }
      if (byte_100097FE0) {
        int v20 = 7;
      }
      else {
        int v20 = 15;
      }
      if (byte_100097FE0) {
        unsigned int v21 = 0;
      }
      else {
        unsigned int v21 = 8;
      }
      if ((int)v17 < v20) {
        uint64_t v17 = (v17 + 1);
      }
      else {
        uint64_t v17 = v21;
      }
    }
    sub_100014A50((uint64_t)v14);
  }
  return v17;
}

void sub_100013548(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  id v9 = [self currentDevice];
  id v10 = [v9 userInterfaceIdiom];

  if (v10 == (id)1)
  {
    if (a4 == 0.0)
    {
      uint64_t v11 = (_DWORD *)(v4 + 684);
      long long v12 = *(_OWORD *)(v4 + 688);
      long long v13 = *(_OWORD *)(v4 + 704);
      long long v14 = *(_OWORD *)(v4 + 720);
      long long v15 = *(_OWORD *)(v4 + 736);
      long long v16 = *(_OWORD *)(v4 + 752);
      long long v17 = *(_OWORD *)(v4 + 768);
      long long v18 = *(_OWORD *)(v4 + 784);
      uint64_t v19 = *(void *)(v4 + 800);
      float32x2_t v20 = *(float32x2_t *)(v4 + 808);
      int v21 = *(_DWORD *)(v4 + 816);
      float v22 = *(float *)(v4 + 820);
      float32x2_t v23 = *(float32x2_t *)(v4 + 824);
      int v24 = *(_DWORD *)(v4 + 832);
      float v25 = *(float *)(v4 + 836);
      if (a2 != 1)
      {
        float32x2_t v20 = vneg_f32(v20);
        float v22 = v22 + 3.1416;
        float32x2_t v23 = vneg_f32(v23);
        float v25 = v25 + 3.1416;
      }
    }
    else if (a4 == 1.0)
    {
      long long v12 = *(_OWORD *)(v4 + 844);
      uint64_t v11 = (_DWORD *)(v4 + 840);
      long long v13 = *(_OWORD *)(v4 + 860);
      long long v14 = *(_OWORD *)(v4 + 876);
      *(void *)&long long v15 = *(void *)(v4 + 892);
      long long v16 = *(_OWORD *)(v4 + 908);
      LODWORD(v17) = *(_DWORD *)(v4 + 924);
      *(void *)&long long v18 = *(void *)(v4 + 940);
      uint64_t v19 = *(void *)(v4 + 956);
      float32x2_t v20 = *(float32x2_t *)(v4 + 964);
      int v21 = *(_DWORD *)(v4 + 972);
      float v22 = *(float *)(v4 + 976);
      float32x2_t v23 = *(float32x2_t *)(v4 + 980);
      int v24 = *(_DWORD *)(v4 + 988);
      float v25 = *(float *)(v4 + 992);
      if (a2 == 4)
      {
        float32x2_t v20 = vneg_f32(v20);
        float v22 = v22 + 3.1416;
        float32x2_t v23 = vneg_f32(v23);
        float v25 = v25 + 3.1416;
      }
      *((void *)&v15 + 1) = *(void *)(v4 + 900);
      DWORD1(v17) = *(_DWORD *)(v4 + 928);
      *((void *)&v17 + 1) = *(void *)(v4 + 932);
      *((void *)&v18 + 1) = *(void *)(v4 + 948);
    }
    else
    {
      sub_10000F748(a1, v4, (uint64_t)v26);
      sub_10000F748(a2, v4, (uint64_t)v27);
      if ((unint64_t)(a1 - 3) <= 1 && sub_100014BE8(a2)) {
        a4 = 1.0 - a4;
      }
      uint64_t v11 = v28;
      sub_10001AFD8((uint64_t)v26, (uint64_t)v27, (uint64_t)v28, a4);
      long long v12 = v29;
      long long v13 = v30;
      long long v14 = v31;
      long long v15 = v32;
      long long v16 = v33;
      long long v17 = v34;
      long long v18 = v35;
      uint64_t v19 = v36;
      float32x2_t v20 = v37;
      int v21 = v38;
      float v22 = v39;
      float32x2_t v23 = v40;
      int v24 = v41;
      float v25 = v42;
    }
  }
  else
  {
    uint64_t v11 = (_DWORD *)(v4 + 528);
    long long v12 = *(_OWORD *)(v4 + 532);
    long long v13 = *(_OWORD *)(v4 + 548);
    long long v14 = *(_OWORD *)(v4 + 564);
    long long v15 = *(_OWORD *)(v4 + 580);
    long long v16 = *(_OWORD *)(v4 + 596);
    long long v17 = *(_OWORD *)(v4 + 612);
    long long v18 = *(_OWORD *)(v4 + 628);
    uint64_t v19 = *(void *)(v4 + 644);
    float32x2_t v20 = *(float32x2_t *)(v4 + 652);
    int v21 = *(_DWORD *)(v4 + 660);
    float v22 = *(float *)(v4 + 664);
    float32x2_t v23 = *(float32x2_t *)(v4 + 668);
    int v24 = *(_DWORD *)(v4 + 676);
    float v25 = *(float *)(v4 + 680);
  }
  *(_DWORD *)a3 = *v11;
  *(_OWORD *)(a3 + 4) = v12;
  *(_OWORD *)(a3 + 20) = v13;
  *(_OWORD *)(a3 + 36) = v14;
  *(_OWORD *)(a3 + 52) = v15;
  *(_OWORD *)(a3 + 68) = v16;
  *(_OWORD *)(a3 + 84) = v17;
  *(_OWORD *)(a3 + 100) = v18;
  *(void *)(a3 + 116) = v19;
  *(float32x2_t *)(a3 + 124) = v20;
  *(_DWORD *)(a3 + 132) = v21;
  *(float *)(a3 + 136) = v22;
  *(float32x2_t *)(a3 + 140) = v23;
  *(_DWORD *)(a3 + 148) = v24;
  *(float *)(a3 + 152) = v25;
}

id sub_1000137E0(uint64_t a1, uint64_t a2, double a3)
{
  if (qword_1000977C0 != -1) {
    swift_once();
  }
  if ((byte_100097FE0 & 1) != 0 || WallpaperState.rotationLandscapeAmount.getter() != 1.0)
  {
    char v7 = *(void **)(a2 + 496);
    *(float *)&a3 = 1.0 - *(float *)(a1 + 4);
  }
  else
  {
    float v5 = (float)(*(float *)(a1 + 4) + -0.3) / 0.7;
    float v6 = 0.0;
    if (v5 < 1.0) {
      float v6 = 1.0 - (float)(v5 + 0.0);
    }
    char v7 = *(void **)(a2 + 496);
    if (v5 < 0.0) {
      *(float *)&a3 = 1.0;
    }
    else {
      *(float *)&a3 = v6;
    }
  }

  return [v7 _solveForInput:a3];
}

uint64_t sub_1000138C0(void *a1)
{
  int64_t v2 = (int64_t)[a1 faceCount];
  if (v2 + 0x4000000000000000 < 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  unint64_t v3 = v2;
  uint64_t v4 = 6 * v2;
  if ((unsigned __int128)(2 * v2 * (__int128)3) >> 64 != (6 * v2) >> 63)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v4 < 0) {
    goto LABEL_22;
  }
  if (v4)
  {
    float v5 = (void *)sub_10005DFD8();
    v5[2] = v4;
    if ((v3 & 0x8000000000000000) == 0) {
      goto LABEL_6;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  float v5 = _swiftEmptyArrayStorage;
  if (v2 < 0) {
    goto LABEL_16;
  }
LABEL_6:
  if (v3)
  {
    uint64_t v6 = 0;
    char v7 = v5 + 5;
    while (1)
    {
      [a1 faceAtIndex:v6];
      v8.i64[0] = *(void *)v16;
      *((void *)v7 - 1) = *(void *)v16;
      if (v6 == 0x1555555555555555) {
        break;
      }
      *(void *)&long long v9 = vzip1q_s32(*(int32x4_t *)&v16[8], v8).u64[0];
      *((void *)&v9 + 1) = __PAIR64__(*(unsigned int *)&v16[12], v9);
      ++v6;
      *char v7 = v9;
      char v7 = (_OWORD *)((char *)v7 + 24);
      if (v3 == v6) {
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_10:
  v5[2] = v4;
  unint64_t v10 = (unint64_t)[a1 vertexCount];
  if ((v10 & 0x8000000000000000) == 0)
  {
    unint64_t v3 = v10;
    if (v10)
    {
      uint64_t v11 = (float32x2_t *)sub_10005DFD8();
      uint64_t v12 = 0;
      v11[2] = (float32x2_t)v3;
      long long v13 = v11 + 5;
      do
      {
        uint64_t v14 = v12 + 1;
        objc_msgSend(a1, "vertexAtIndex:");
        v13[-1] = vcvt_f32_f64(*(float64x2_t *)&v16[16]);
        float32x2_t *v13 = vcvt_f32_f64(*(float64x2_t *)v16);
        v13 += 2;
        uint64_t v12 = v14;
      }
      while (v3 != v14);
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v11 = (float32x2_t *)_swiftEmptyArrayStorage;
LABEL_18:
    v11[2] = (float32x2_t)v3;
    return (uint64_t)v11;
  }
LABEL_22:
  uint64_t result = sub_10005E2F8();
  __break(1u);
  return result;
}

id sub_100013AB0(id result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(a3 + 16);
  if (v3 >> 61)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v6 = result;
  uint64_t result = [result newBufferWithLength:4 * v3 options:0];
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v7 = *(void *)(a2 + 16);
  if (v7 >> 59)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  int32x4_t v8 = result;
  swift_unknownObjectRetain();
  uint64_t result = [v6 newBufferWithLength:16 * v7 options:0];
  if (result)
  {
    long long v9 = result;
    swift_unknownObjectRetain();
    sub_10000AE2C(a2, a3, v8, v9);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    return v8;
  }
LABEL_9:
  __break(1u);
  return result;
}

void sub_100013BB0(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  uint64_t v6 = (void *)(a1 + 512);
  swift_beginAccess();
  uint64_t v7 = *(void *)(a1 + 512);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(a1 + 520);
  if (v8 == v9)
  {
    sub_10000EA78((uint64_t)&v44, a3);
    swift_beginAccess();
    unint64_t v10 = *(void **)(a1 + 512);
    sub_100014B94((uint64_t)&v44);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a1 + 512) = v10;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v10 = sub_10002AF4C(0, v10[2] + 1, 1, v10);
      *uint64_t v6 = v10;
    }
    unint64_t v13 = v10[2];
    unint64_t v12 = v10[3];
    if (v13 >= v12 >> 1)
    {
      unint64_t v10 = sub_10002AF4C((void *)(v12 > 1), v13 + 1, 1, v10);
      *uint64_t v6 = v10;
    }
    v10[2] = v13 + 1;
    uint64_t v14 = &v10[9 * v13];
    *((_OWORD *)v14 + 2) = v44;
    long long v15 = v45;
    long long v16 = v46;
    long long v17 = v47;
    *((float *)v14 + 24) = v48;
    *((_OWORD *)v14 + 4) = v16;
    *((_OWORD *)v14 + 5) = v17;
    *((_OWORD *)v14 + 3) = v15;
    swift_endAccess();
    goto LABEL_21;
  }
  if (v9 >= v8)
  {
    if (qword_1000978D8 == -1)
    {
LABEL_12:
      uint64_t v26 = sub_10005DCD8();
      sub_100008DB0(v26, (uint64_t)qword_10009FB38);
      swift_retain();
      uint64_t v27 = sub_10005DCB8();
      os_log_type_t v28 = sub_10005E078();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 134218240;
        *(void *)&long long v44 = *(void *)(*(void *)(a1 + 512) + 16);
        sub_10005E138();
        *(_WORD *)(v29 + 12) = 2048;
        *(void *)&long long v44 = *(void *)(a1 + 520);
        sub_10005E138();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Mesh indicies are out of sync. We have %ld meshes, but are looking for index %ld", (uint8_t *)v29, 0x16u);
        swift_slowDealloc();
      }
      else
      {

        swift_release();
      }
      sub_10000EA78((uint64_t)&v44, 0.0);
      goto LABEL_21;
    }
LABEL_24:
    swift_once();
    goto LABEL_12;
  }
  if (v9 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v18 = v7 + 72 * v9;
  long long v20 = *(_OWORD *)(v18 + 32);
  uint64_t v19 = v18 + 32;
  long long v42 = v20;
  long long v43 = *(_OWORD *)(v19 + 32);
  float v21 = *(float *)(v19 + 64);
  if (v21 == a3)
  {
    long long v40 = *(_OWORD *)(v19 + 16);
    long long v41 = *(_OWORD *)(v19 + 48);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    long long v23 = v40;
    long long v22 = v41;
    long long v25 = v42;
    long long v24 = v43;
LABEL_22:
    *(_OWORD *)a2 = v25;
    *(_OWORD *)(a2 + 16) = v23;
    *(_OWORD *)(a2 + 32) = v24;
    *(_OWORD *)(a2 + 48) = v22;
    *(float *)(a2 + 64) = v21;
    return;
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  sub_10000EA78((uint64_t)&v44, a3);
  unint64_t v30 = *(void *)(a1 + 520);
  swift_beginAccess();
  long long v31 = *(void **)(a1 + 512);
  sub_100014B94((uint64_t)&v44);
  char v32 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a1 + 512) = v31;
  if (v32)
  {
    if ((v30 & 0x8000000000000000) == 0) {
      goto LABEL_18;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  long long v31 = sub_10002B198(v31);
  *uint64_t v6 = v31;
  if ((v30 & 0x8000000000000000) != 0) {
    goto LABEL_26;
  }
LABEL_18:
  if (v30 >= v31[2])
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  long long v33 = &v31[9 * v30];
  long long v35 = v46;
  long long v34 = v47;
  float v36 = v48;
  *((_OWORD *)v33 + 3) = v45;
  *((float *)v33 + 24) = v36;
  *((_OWORD *)v33 + 5) = v34;
  *((_OWORD *)v33 + 2) = v44;
  *((_OWORD *)v33 + 4) = v35;
  swift_endAccess();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v37 = *(void *)(a1 + 520);
  BOOL v38 = __OFADD__(v37, 1);
  uint64_t v39 = v37 + 1;
  if (!v38)
  {
    *(void *)(a1 + 520) = v39 % 3;
LABEL_21:
    float v21 = v48;
    long long v24 = v46;
    long long v22 = v47;
    long long v25 = v44;
    long long v23 = v45;
    goto LABEL_22;
  }
LABEL_28:
  __break(1u);
}

void sub_100014020()
{
  if (qword_1000978D8 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_10005DCD8();
  sub_100008DB0(v0, (uint64_t)qword_10009FB38);
  NSString v1 = sub_10005DCB8();
  os_log_type_t v2 = sub_10005E088();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v3 = 33685760;
    sub_10005E138();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Save scheme %{public}hd into UserDefaults.", v3, 6u);
    swift_slowDealloc();
  }

  id v4 = [self standardUserDefaults];
  Class isa = sub_10005E4D8().super.super.isa;
  NSString v6 = sub_10005DE38();
  [v4 setObject:isa forKey:v6];
}

void sub_1000141B0(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_10005DA28();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  unint64_t v12 = (char *)&v38 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v38 - v13;
  uint64_t v40 = v6;
  uint64_t v41 = v15;
  long long v16 = *(void (**)(char *, uint64_t))(v6 + 16);
  v16((char *)&v38 - v13, a1);
  id v17 = objc_allocWithZone((Class)NSFileWrapper);
  id v18 = sub_100011E88((uint64_t)v14, 0);
  if (v2)
  {
    swift_errorRelease();
LABEL_3:
    if (qword_1000978D8 != -1) {
      swift_once();
    }
    uint64_t v19 = sub_10005DCD8();
    sub_100008DB0(v19, (uint64_t)qword_10009FB38);
    uint64_t v20 = a1;
    uint64_t v21 = v41;
    ((void (*)(char *, uint64_t, uint64_t))v16)(v9, v20, v41);
    long long v22 = sub_10005DCB8();
    os_log_type_t v23 = sub_10005E088();
    if (os_log_type_enabled(v22, v23))
    {
      long long v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)long long v24 = 136315138;
      uint64_t v25 = sub_10005D998();
      uint64_t v42 = sub_100044640(v25, v26, &v45);
      sub_10005E138();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v41);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Error: Couldn't create wrapper for %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v21);
    }

    sub_100011FDC();
    swift_allocError();
    *uint64_t v27 = 0;
    swift_willThrow();
    return;
  }
  if (!v18) {
    goto LABEL_3;
  }
  id v28 = v18;
  sub_10002D99C(v28, (uint64_t)v43);
  sub_100014CC0((uint64_t)v43, (uint64_t)v44, &qword_1000984E0);
  if (sub_10001485C((uint64_t)v44) == 1)
  {
    id v39 = v28;
    if (qword_1000978D8 != -1) {
      swift_once();
    }
    uint64_t v29 = sub_10005DCD8();
    sub_100008DB0(v29, (uint64_t)qword_10009FB38);
    unint64_t v30 = v12;
    uint64_t v31 = v41;
    ((void (*)(char *, uint64_t, uint64_t))v16)(v12, a1, v41);
    char v32 = sub_10005DCB8();
    os_log_type_t v33 = sub_10005E088();
    if (os_log_type_enabled(v32, v33))
    {
      long long v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)long long v34 = 136315138;
      BOOL v38 = v34 + 4;
      uint64_t v35 = sub_10005D998();
      uint64_t v42 = sub_100044640(v35, v36, &v45);
      sub_10005E138();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v30, v31);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Error: Couldn't load document from %s", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v30, v31);
    }

    sub_100011FDC();
    swift_allocError();
    *uint64_t v37 = 0;
    swift_willThrow();
  }
  else
  {
    memcpy(a2, v44, 0x1D4uLL);
  }
}

unint64_t sub_1000146F4()
{
  unint64_t result = qword_1000984D0;
  if (!qword_1000984D0)
  {
    sub_100014768(&qword_1000984C8);
    sub_1000147B0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000984D0);
  }
  return result;
}

uint64_t sub_100014768(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_1000147B0()
{
  unint64_t result = qword_1000984D8;
  if (!qword_1000984D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000984D8);
  }
  return result;
}

uint64_t sub_100014804(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_10001485C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 468)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

_OWORD *sub_100014878(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100014888(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_100014898(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000148F4(uint64_t a1, void (*a2)(void, void, void, void, void, void), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 96);
  a2(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 52));
  a3(v5, v6, v7, v8, v9, v10);
  return a1;
}

id sub_100014984(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6) {
    return a3;
  }
  return result;
}

uint64_t sub_100014990(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000149EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FluidityWallpaperRenderer.RenderingState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100014A50(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FluidityWallpaperRenderer.RenderingState(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100014AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008F4C((uint64_t *)&unk_1000984B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100014B14(uint64_t a1)
{
  return a1;
}

id sub_100014B64(id a1, char a2)
{
  if (a2) {
    return a1;
  }
  else {
    return (id)swift_unknownObjectRetain();
  }
}

void sub_100014B70(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    sub_100014B88(a1, a2 & 1);
  }
}

void sub_100014B88(id a1, char a2)
{
  if (a2) {

  }
  else {
    swift_unknownObjectRelease();
  }
}

uint64_t sub_100014B94(uint64_t a1)
{
  return a1;
}

BOOL sub_100014BE8(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

uint64_t sub_100014BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FluidityWallpaperRenderer.RenderingState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100014C5C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100008F4C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100014CC0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100008F4C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100014D24(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100008F4C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100014D80(uint64_t a1)
{
  return a1;
}

uint64_t sub_100014E40(uint64_t a1)
{
  return a1;
}

uint64_t sub_100014F00(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for FluidityWallpaperRenderer.MeshResource.MeshVertex()
{
  return &type metadata for FluidityWallpaperRenderer.MeshResource.MeshVertex;
}

uint64_t getEnumTagSinglePayload for FluidityWallpaperRenderer.Error(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FluidityWallpaperRenderer.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000150B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_1000150DC(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for FluidityWallpaperRenderer.Error()
{
  return &type metadata for FluidityWallpaperRenderer.Error;
}

uint64_t destroy for FluidityWallpaperRenderer.MeshResource()
{
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for FluidityWallpaperRenderer.MeshResource(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for FluidityWallpaperRenderer.MeshResource(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

_OWORD *assignWithTake for FluidityWallpaperRenderer.MeshResource(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for FluidityWallpaperRenderer.MeshResource(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FluidityWallpaperRenderer.MeshResource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FluidityWallpaperRenderer.MeshResource()
{
  return &type metadata for FluidityWallpaperRenderer.MeshResource;
}

unint64_t sub_1000152C8()
{
  unint64_t result = qword_100098610;
  if (!qword_100098610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098610);
  }
  return result;
}

double WallpaperState.init()@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 7) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_10005FEF0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 52) = 0;
  *(void *)(a1 + 56) = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(unsigned char *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  return result;
}

float WallpaperState.rotationLandscapeAmount.getter()
{
  sub_100014990(v0 + 56, (uint64_t)v4);
  sub_100014990((uint64_t)v4, (uint64_t)&v5);
  if ((v7 & 1) == 0)
  {
    float result = 1.0;
    if ((unint64_t)(v5 - 3) < 2) {
      return result;
    }
    return 0.0;
  }
  if (v5 == 4)
  {
    float result = 1.0;
    if (v6 == 3) {
      return result;
    }
LABEL_14:
    float v2 = sub_100015590() / 3.1416;
    float v3 = floorf(v2);
    return vabds_f32(1.0, fabsf((float)((float)(v2 - v3) + (float)(v2 - v3)) + -1.0));
  }
  if (v6 != 4)
  {
    if (v5 == v6 || (v5 == 3) != (v6 == 3)) {
      goto LABEL_14;
    }
    float result = 1.0;
    if (v5 == 3) {
      return result;
    }
    return 0.0;
  }
  float result = 1.0;
  if (v5 != 3) {
    goto LABEL_14;
  }
  return result;
}

float WallpaperState.rotationRadians.getter()
{
  sub_100014990(v0 + 56, (uint64_t)&v2);
  return sub_100015590();
}

float WallpaperState.unlockProgress.getter()
{
  return *(float *)v0;
}

void WallpaperState.unlockProgress.setter(float a1)
{
  *NSString v1 = a1;
}

uint64_t (*WallpaperState.unlockProgress.modify())()
{
  return nullsub_1;
}

float WallpaperState.dimmingAmount.getter()
{
  return *(float *)(v0 + 4);
}

void WallpaperState.dimmingAmount.setter(float a1)
{
  *(float *)(v1 + 4) = a1;
}

uint64_t (*WallpaperState.dimmingAmount.modify())()
{
  return nullsub_1;
}

uint64_t WallpaperState.isDarkMode.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t WallpaperState.isDarkMode.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*WallpaperState.isDarkMode.modify())()
{
  return nullsub_1;
}

uint64_t WallpaperState.isPreview.getter()
{
  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t WallpaperState.isPreview.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 9) = result;
  return result;
}

uint64_t (*WallpaperState.isPreview.modify())()
{
  return nullsub_1;
}

uint64_t WallpaperState.isEditing.getter()
{
  return *(unsigned __int8 *)(v0 + 10);
}

uint64_t WallpaperState.isEditing.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 10) = result;
  return result;
}

uint64_t (*WallpaperState.isEditing.modify())()
{
  return nullsub_1;
}

float sub_100015590()
{
  sub_100014990(v0, (uint64_t)v15);
  uint64_t v1 = (void *)v15[2];
  sub_100014990(v0, (uint64_t)&v16);
  if (v21)
  {
    float v2 = 0.0;
    float v3 = 0.0;
    if ((unint64_t)(v16 - 2) <= 2) {
      float v3 = flt_10005FFE4[v16 - 2];
    }
    double v4 = v19;
    double v5 = v20;
    if ((unint64_t)(v17 - 2) <= 2) {
      float v2 = flt_10005FFE4[v17 - 2];
    }
    uint64_t v6 = v18;
    id v7 = v1;
    CFAbsoluteTime v8 = (CFAbsoluteTimeGetCurrent() - v4) / v5;
    *(float *)&CFAbsoluteTime v8 = v8;
    if (*(float *)&v8 >= 1.0)
    {
      sub_1000168FC(v0, (void (*)(void, void, void, void, void, void))sub_100012040);
    }
    else
    {
      if (*(float *)&v8 > 1.0) {
        *(float *)&CFAbsoluteTime v8 = 1.0;
      }
      [v6 _solveForInput:v8];
      float v10 = v9;
      sub_1000168FC(v0, (void (*)(void, void, void, void, void, void))sub_100012040);
      float v11 = fabsf(vabds_f32(v2, v3) + -3.1416);
      float v12 = (float)(v2 - v3) + 6.2832;
      if ((float)(v2 - v3) >= -3.1416) {
        float v12 = v2 - v3;
      }
      if ((float)(v2 - v3) <= 3.1416) {
        float v13 = v12;
      }
      else {
        float v13 = (float)(v2 - v3) + -6.2832;
      }
      if (v11 < 0.1) {
        float v13 = -3.1416;
      }
      return v3 + (float)(v10 * v13);
    }
  }
  else
  {
    float v2 = 0.0;
    if ((unint64_t)(v16 - 2) < 3) {
      return flt_10005FFE4[v16 - 2];
    }
  }
  return v2;
}

uint64_t WallpaperState.look.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100015A28(v1 + 16, a1);
}

uint64_t WallpaperState.look.setter(uint64_t a1)
{
  return sub_100015A60(a1, v1 + 16);
}

uint64_t (*WallpaperState.look.modify())()
{
  return nullsub_1;
}

uint64_t sub_100015788(uint64_t a1, uint64_t a2)
{
  sub_100009470(a1, (uint64_t)v4);
  sub_100009470(a2, (uint64_t)v5);
  return _s22MercuryPosterExtension14WallpaperStateV4LookO21__derived_enum_equalsySbAE_AEtFZ_0((uint64_t)v4, (uint64_t)v5) & 1;
}

BOOL sub_1000157D4(uint64_t a1, uint64_t a2)
{
  sub_100014990(a1, (uint64_t)v4);
  sub_100014990(a2, (uint64_t)v5);
  return sub_100015A98((uint64_t)v4, (uint64_t)v5);
}

BOOL sub_100015824(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 112);
  v11[6] = *(_OWORD *)(a1 + 96);
  v11[7] = v2;
  uint64_t v12 = *(void *)(a1 + 128);
  long long v3 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v3;
  long long v4 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v4;
  long long v5 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v5;
  long long v6 = *(_OWORD *)(a2 + 112);
  v13[6] = *(_OWORD *)(a2 + 96);
  v13[7] = v6;
  uint64_t v14 = *(void *)(a2 + 128);
  long long v7 = *(_OWORD *)(a2 + 48);
  v13[2] = *(_OWORD *)(a2 + 32);
  v13[3] = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  v13[4] = *(_OWORD *)(a2 + 64);
  v13[5] = v8;
  long long v9 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v9;
  return _s22MercuryPosterExtension14WallpaperStateV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v11, (uint64_t)v13);
}

uint64_t WallpaperState.description.getter()
{
  sub_10005E1F8(16);
  v1._countAndFlagsBits = 0x2093949FF0;
  v1._object = (void *)0xA500000000000000;
  sub_10005DEE8(v1);
  sub_10005E048();
  v2._countAndFlagsBits = 0x2085949FF0202CLL;
  v2._object = (void *)0xA700000000000000;
  sub_10005DEE8(v2);
  sub_10005E048();
  return 0;
}

uint64_t sub_100015964()
{
  sub_10005E1F8(16);
  v1._countAndFlagsBits = 0x2093949FF0;
  v1._object = (void *)0xA500000000000000;
  sub_10005DEE8(v1);
  sub_10005E048();
  v2._countAndFlagsBits = 0x2085949FF0202CLL;
  v2._object = (void *)0xA700000000000000;
  sub_10005DEE8(v2);
  sub_10005E048();
  return 0;
}

uint64_t sub_100015A28(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100015A60(uint64_t a1, uint64_t a2)
{
  return a2;
}

BOOL sub_100015A98(uint64_t a1, uint64_t a2)
{
  sub_100014990(a1, (uint64_t)v15);
  uint64_t v4 = v15[0];
  if (v16)
  {
    uint64_t v5 = v15[1];
    double v7 = *(double *)&v15[3];
    double v6 = *(double *)&v15[4];
    sub_100014990(a2, (uint64_t)v13);
    if (v14 != 1) {
      return 0;
    }
    if (v4 != v13[0] || v5 != v13[1]) {
      return 0;
    }
    double v10 = *(double *)&v13[3];
    double v9 = *(double *)&v13[4];
    sub_1000168BC();
    sub_1000168FC(a1, (void (*)(void, void, void, void, void, void))sub_100014984);
    sub_1000168FC(a2, (void (*)(void, void, void, void, void, void))sub_100014984);
    char v11 = sub_10005E118();
    sub_1000168FC(a2, (void (*)(void, void, void, void, void, void))sub_100012040);
    sub_1000168FC(a1, (void (*)(void, void, void, void, void, void))sub_100012040);
    if (v6 == v9) {
      return v11 & (v7 == v10);
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_100014990(a2, (uint64_t)v13);
    if (v14) {
      return 0;
    }
    return v4 == v13[0];
  }
}

uint64_t _s22MercuryPosterExtension14WallpaperStateV4LookO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  sub_100009470(a1, (uint64_t)v22);
  uint64_t v3 = v22[0];
  uint64_t v4 = v22[1];
  if ((v24 & 1) == 0)
  {
    sub_100009470(a2, (uint64_t)&v16);
    if ((v21 & 1) == 0)
    {
      if (v3 == v16 && v4 == v17) {
        char v12 = 1;
      }
      else {
        char v12 = sub_10005E448();
      }
      return v12 & 1;
    }
LABEL_11:
    char v12 = 0;
    return v12 & 1;
  }
  uint64_t v5 = v22[2];
  uint64_t v6 = v22[3];
  float v7 = v23;
  sub_100009470(a2, (uint64_t)&v16);
  if (v21 != 1) {
    goto LABEL_11;
  }
  uint64_t v8 = v18;
  uint64_t v9 = v19;
  float v10 = v20;
  if (v3 == v16 && v4 == v17 || (char v11 = sub_10005E448(), v12 = 0, (v11 & 1) != 0))
  {
    if (v5 == v8 && v6 == v9 || (char v13 = sub_10005E448(), v12 = 0, (v13 & 1) != 0)) {
      char v12 = v7 == v10;
    }
  }
  return v12 & 1;
}

BOOL _s22MercuryPosterExtension14WallpaperStateV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(float *)a1 != *(float *)a2
    || *(float *)(a1 + 4) != *(float *)(a2 + 4)
    || ((*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 9) ^ *(unsigned __int8 *)(a2 + 9)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 10) ^ *(unsigned __int8 *)(a2 + 10)) & 1) != 0)
  {
    return 0;
  }
  sub_100009470(a1 + 16, (uint64_t)v26);
  sub_100009470(a2 + 16, (uint64_t)v25);
  sub_100009470((uint64_t)v26, (uint64_t)v27);
  uint64_t v5 = v27[0];
  uint64_t v6 = v27[1];
  if (v29)
  {
    uint64_t v7 = v27[2];
    uint64_t v8 = v27[3];
    float v9 = v28;
    sub_100009470((uint64_t)v25, (uint64_t)&v30);
    if ((v35 & 1) == 0) {
      return 0;
    }
    uint64_t v10 = v32;
    uint64_t v11 = v33;
    float v12 = v34;
    if (v5 != v30 || v6 != v31)
    {
      char v13 = sub_10005E448();
      BOOL result = 0;
      if ((v13 & 1) == 0) {
        return result;
      }
    }
    if (v7 == v10 && v8 == v11)
    {
      if (v9 != v12) {
        return 0;
      }
    }
    else
    {
      char v15 = sub_10005E448();
      BOOL result = 0;
      if ((v15 & 1) == 0 || v9 != v12) {
        return result;
      }
    }
  }
  else
  {
    sub_100009470((uint64_t)v25, (uint64_t)&v30);
    if (v35) {
      return 0;
    }
    if (v5 != v30 || v6 != v31)
    {
      char v14 = sub_10005E448();
      BOOL result = 0;
      if ((v14 & 1) == 0) {
        return result;
      }
    }
  }
  sub_100014990(a1 + 56, (uint64_t)v24);
  sub_100014990(a2 + 56, (uint64_t)v23);
  sub_100014990((uint64_t)v24, (uint64_t)v36);
  uint64_t v16 = v36[0];
  if (v37)
  {
    uint64_t v17 = v36[1];
    double v19 = *(double *)&v36[3];
    double v18 = *(double *)&v36[4];
    sub_100014990((uint64_t)v23, (uint64_t)v38);
    if (v39 == 1)
    {
      BOOL result = 0;
      if (v16 != v38[0]) {
        return result;
      }
      if (v17 != v38[1]) {
        return result;
      }
      double v21 = *(double *)&v38[3];
      double v20 = *(double *)&v38[4];
      sub_1000168BC();
      sub_1000168FC((uint64_t)v24, (void (*)(void, void, void, void, void, void))sub_100014984);
      sub_1000168FC((uint64_t)v23, (void (*)(void, void, void, void, void, void))sub_100014984);
      char v22 = sub_10005E118();
      sub_1000168FC((uint64_t)v23, (void (*)(void, void, void, void, void, void))sub_100012040);
      sub_1000168FC((uint64_t)v24, (void (*)(void, void, void, void, void, void))sub_100012040);
      BOOL result = 0;
      if ((v22 & 1) == 0 || v19 != v21 || v18 != v20) {
        return result;
      }
      return CGRectEqualToRect(*(CGRect *)(a1 + 104), *(CGRect *)(a2 + 104));
    }
    return 0;
  }
  sub_100014990((uint64_t)v23, (uint64_t)v38);
  BOOL result = 0;
  if ((v39 & 1) == 0 && v16 == v38[0]) {
    return CGRectEqualToRect(*(CGRect *)(a1 + 104), *(CGRect *)(a2 + 104));
  }
  return result;
}

uint64_t destroy for WallpaperState(uint64_t a1)
{
  sub_100009420(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned char *)(a1 + 52));
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 88);
  char v7 = *(unsigned char *)(a1 + 96);

  return sub_100012040(v2, v3, v4, v5, v6, v7);
}

uint64_t initializeWithCopy for WallpaperState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(unsigned int *)(a2 + 48);
  char v9 = *(unsigned char *)(a2 + 52);
  sub_1000093E0(v4, v5, v6, v7, v8, v9);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(_DWORD *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 52) = v9;
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  float v12 = *(void **)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 88);
  char v15 = *(unsigned char *)(a2 + 96);
  sub_100014984(v10, v11, v12, v13, v14, v15);
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v12;
  *(void *)(a1 + 80) = v13;
  *(void *)(a1 + 88) = v14;
  *(unsigned char *)(a1 + 96) = v15;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  return a1;
}

uint64_t assignWithCopy for WallpaperState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(unsigned int *)(a2 + 48);
  char v9 = *(unsigned char *)(a2 + 52);
  sub_1000093E0(v4, v5, v6, v7, v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(unsigned int *)(a1 + 48);
  char v15 = *(unsigned char *)(a1 + 52);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(_DWORD *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 52) = v9;
  sub_100009420(v10, v11, v12, v13, v14, v15);
  uint64_t v16 = *(void *)(a2 + 56);
  uint64_t v17 = *(void *)(a2 + 64);
  double v18 = *(void **)(a2 + 72);
  uint64_t v19 = *(void *)(a2 + 80);
  uint64_t v20 = *(void *)(a2 + 88);
  char v21 = *(unsigned char *)(a2 + 96);
  sub_100014984(v16, v17, v18, v19, v20, v21);
  uint64_t v22 = *(void *)(a1 + 56);
  uint64_t v23 = *(void *)(a1 + 64);
  uint64_t v24 = *(void *)(a1 + 72);
  uint64_t v25 = *(void *)(a1 + 80);
  uint64_t v26 = *(void *)(a1 + 88);
  char v27 = *(unsigned char *)(a1 + 96);
  *(void *)(a1 + 56) = v16;
  *(void *)(a1 + 64) = v17;
  *(void *)(a1 + 72) = v18;
  *(void *)(a1 + 80) = v19;
  *(void *)(a1 + 88) = v20;
  *(unsigned char *)(a1 + 96) = v21;
  sub_100012040(v22, v23, v24, v25, v26, v27);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

__n128 initializeWithTake for WallpaperState(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for WallpaperState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  int v4 = *(_DWORD *)(a2 + 48);
  char v5 = *(unsigned char *)(a2 + 52);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(unsigned int *)(a1 + 48);
  char v11 = *(unsigned char *)(a1 + 52);
  long long v12 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v12;
  *(_DWORD *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 52) = v5;
  sub_100009420(v6, v7, v8, v9, v10, v11);
  uint64_t v13 = *(void *)(a2 + 88);
  char v14 = *(unsigned char *)(a2 + 96);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v17 = *(void *)(a1 + 72);
  uint64_t v18 = *(void *)(a1 + 80);
  uint64_t v19 = *(void *)(a1 + 88);
  char v20 = *(unsigned char *)(a1 + 96);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = v13;
  *(unsigned char *)(a1 + 96) = v14;
  sub_100012040(v15, v16, v17, v18, v19, v20);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for WallpaperState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 136)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for WallpaperState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 136) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WallpaperState()
{
  return &type metadata for WallpaperState;
}

uint64_t destroy for WallpaperState.Look(uint64_t a1)
{
  return sub_100009420(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned int *)(a1 + 32), *(unsigned char *)(a1 + 36));
}

uint64_t initializeWithCopy for WallpaperState.Look(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(unsigned int *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 36);
  sub_1000093E0(*(void *)a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 36) = v8;
  return a1;
}

uint64_t assignWithCopy for WallpaperState.Look(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(unsigned int *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 36);
  sub_1000093E0(*(void *)a2, v4, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(unsigned int *)(a1 + 32);
  char v14 = *(unsigned char *)(a1 + 36);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 36) = v8;
  sub_100009420(v9, v10, v11, v12, v13, v14);
  return a1;
}

__n128 initializeWithTake for WallpaperState.Look(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 29) = *(void *)(a2 + 29);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for WallpaperState.Look(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 36);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(unsigned int *)(a1 + 32);
  char v10 = *(unsigned char *)(a1 + 36);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  *(_DWORD *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 36) = v4;
  sub_100009420(v5, v7, v6, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for WallpaperState.Look(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 37)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 36);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WallpaperState.Look(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 36) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 37) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 37) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 36) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100016658(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 36);
}

uint64_t sub_100016660(uint64_t result, char a2)
{
  *(unsigned char *)(result + 36) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for WallpaperState.Look()
{
  return &type metadata for WallpaperState.Look;
}

uint64_t destroy for WallpaperState.RotationInfo(uint64_t a1)
{
  return sub_100012040(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
}

uint64_t initializeWithCopy for WallpaperState.RotationInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void **)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  sub_100014984(*(void *)a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for WallpaperState.RotationInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void **)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  sub_100014984(*(void *)a2, v4, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  char v14 = *(unsigned char *)(a1 + 40);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  sub_100012040(v9, v10, v11, v12, v13, v14);
  return a1;
}

__n128 initializeWithTake for WallpaperEditingCoordinator.EditingLookResources.Contents(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for WallpaperState.RotationInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  char v10 = *(unsigned char *)(a1 + 40);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  *(void *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 40) = v4;
  sub_100012040(v5, v7, v6, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for WallpaperState.RotationInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WallpaperState.RotationInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100016898(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t sub_1000168A0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 40) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for WallpaperState.RotationInfo()
{
  return &type metadata for WallpaperState.RotationInfo;
}

unint64_t sub_1000168BC()
{
  unint64_t result = qword_100098620;
  if (!qword_100098620)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100098620);
  }
  return result;
}

uint64_t sub_1000168FC(uint64_t a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_10001693C()
{
  return sub_100016BC8(&qword_1000977E8);
}

uint64_t sub_100016974(float a1)
{
  if (qword_1000977F8 != -1) {
    swift_once();
  }
  long long v2 = off_100098640;
  if (qword_100097808 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_100098650;
  if (qword_1000977E0 != -1) {
    swift_once();
  }
  uint64_t v4 = v2[2];
  if (v4)
  {
    type metadata accessor for CAMeshVertex(0);
    swift_retain();
    swift_retain();
    uint64_t v5 = (void *)sub_10005DFD8();
    v5[2] = v4;
  }
  else
  {
    swift_retain();
    swift_retain();
    uint64_t v5 = _swiftEmptyArrayStorage;
  }
  v9[1] = v4;
  uint64_t v10 = 0;
  v9[0] = (uint64_t)(v5 + 4);
  sub_100017E74(v9, &v10, (uint64_t)v2, v3, a1);
  uint64_t v6 = v10;
  if (v4 < v10)
  {
    __break(1u);
    __break(1u);
    v5[2] = v6;
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    v5[2] = v10;
    swift_release();
    uint64_t v7 = swift_release();
    __chkstk_darwin(v7);
    type metadata accessor for CAMeshVertex(0);
    sub_10005E278();
    swift_bridgeObjectRelease();
    return v9[0];
  }
  return result;
}

uint64_t sub_100016B90()
{
  return sub_100016BC8(&qword_1000977F0);
}

uint64_t sub_100016BC8(void *a1)
{
  if (*a1 != -1) {
    a1 = (void *)swift_once();
  }
  if (qword_1000977E0 != -1) {
    a1 = (void *)swift_once();
  }
  __chkstk_darwin(a1);
  type metadata accessor for CAMeshVertex(0);
  sub_10005E278();
  return v2;
}

uint64_t sub_100016CB4(float a1)
{
  if (qword_100097800 != -1) {
    swift_once();
  }
  uint64_t v2 = off_100098648;
  if (qword_100097810 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_100098658;
  if (qword_1000977E0 != -1) {
    swift_once();
  }
  uint64_t v4 = v2[2];
  if (v4)
  {
    type metadata accessor for CAMeshVertex(0);
    swift_retain();
    swift_retain();
    uint64_t v5 = (void *)sub_10005DFD8();
    v5[2] = v4;
  }
  else
  {
    swift_retain();
    swift_retain();
    uint64_t v5 = _swiftEmptyArrayStorage;
  }
  v9[1] = v4;
  uint64_t v10 = 0;
  v9[0] = (uint64_t)(v5 + 4);
  sub_100017E74(v9, &v10, (uint64_t)v2, v3, a1);
  uint64_t v6 = v10;
  if (v4 < v10)
  {
    __break(1u);
    __break(1u);
    v5[2] = v6;
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    v5[2] = v10;
    swift_release();
    uint64_t v7 = swift_release();
    __chkstk_darwin(v7);
    type metadata accessor for CAMeshVertex(0);
    sub_10005E278();
    swift_bridgeObjectRelease();
    return v9[0];
  }
  return result;
}

void sub_100016ED0()
{
  qword_100098628 = (uint64_t)&off_10007EB58;
}

double sub_100016EE4()
{
  sub_100008F4C(&qword_100098660);
  uint64_t v0 = (_OWORD *)swift_allocObject();
  v0[1] = xmmword_10005FFF0;
  v0[2] = xmmword_100060000;
  v0[3] = xmmword_100060010;
  v0[4] = xmmword_100060020;
  v0[5] = xmmword_100060030;
  v0[6] = xmmword_100060040;
  v0[7] = xmmword_100060050;
  v0[8] = xmmword_100060060;
  v0[9] = xmmword_100060070;
  v0[10] = xmmword_100060080;
  v0[11] = xmmword_100060090;
  v0[12] = xmmword_1000600A0;
  v0[13] = xmmword_1000600B0;
  v0[14] = xmmword_1000600C0;
  v0[15] = xmmword_1000600D0;
  v0[16] = xmmword_1000600E0;
  v0[17] = xmmword_1000600F0;
  v0[18] = xmmword_100060100;
  v0[19] = xmmword_100060110;
  v0[20] = xmmword_100060120;
  v0[21] = xmmword_100060130;
  v0[22] = xmmword_100060140;
  v0[23] = xmmword_100060150;
  v0[24] = xmmword_100060160;
  v0[25] = xmmword_100060170;
  v0[26] = xmmword_100060180;
  v0[27] = xmmword_100060190;
  v0[28] = xmmword_1000601A0;
  v0[29] = xmmword_1000601B0;
  v0[30] = xmmword_1000601C0;
  v0[31] = xmmword_1000601D0;
  v0[32] = xmmword_1000601E0;
  v0[33] = xmmword_1000601F0;
  v0[34] = xmmword_100060200;
  v0[35] = xmmword_100060210;
  v0[36] = xmmword_100060220;
  v0[37] = xmmword_100060230;
  v0[38] = xmmword_100060240;
  v0[39] = xmmword_100060250;
  v0[40] = xmmword_100060260;
  v0[41] = xmmword_100060270;
  v0[42] = xmmword_100060280;
  v0[43] = xmmword_100060290;
  v0[44] = xmmword_1000602A0;
  v0[45] = xmmword_1000602B0;
  v0[46] = xmmword_1000602C0;
  v0[47] = xmmword_1000602D0;
  v0[48] = xmmword_1000602E0;
  v0[49] = xmmword_1000602F0;
  v0[50] = xmmword_100060300;
  v0[51] = xmmword_100060310;
  v0[52] = xmmword_100060320;
  v0[53] = xmmword_100060330;
  v0[54] = xmmword_100060340;
  v0[55] = xmmword_100060350;
  v0[56] = xmmword_100060360;
  v0[57] = xmmword_100060370;
  v0[58] = xmmword_100060380;
  v0[59] = xmmword_100060390;
  v0[60] = xmmword_1000603A0;
  double result = 0.21966419;
  v0[61] = xmmword_1000603B0;
  qword_100098630 = (uint64_t)v0;
  return result;
}

double sub_10001717C()
{
  sub_100008F4C(&qword_100098660);
  uint64_t v0 = (_OWORD *)swift_allocObject();
  v0[1] = xmmword_10005FFF0;
  v0[2] = xmmword_100060000;
  v0[3] = xmmword_1000603C0;
  v0[4] = xmmword_100060020;
  v0[5] = xmmword_1000603D0;
  v0[6] = xmmword_1000603E0;
  v0[7] = xmmword_100060050;
  v0[8] = xmmword_1000603F0;
  v0[9] = xmmword_100060070;
  v0[10] = xmmword_100060400;
  v0[11] = xmmword_100060410;
  v0[12] = xmmword_1000600A0;
  v0[13] = xmmword_100060420;
  v0[14] = xmmword_1000600C0;
  v0[15] = xmmword_100060430;
  v0[16] = xmmword_100060440;
  v0[17] = xmmword_1000600F0;
  v0[18] = xmmword_100060450;
  v0[19] = xmmword_100060110;
  v0[20] = xmmword_100060460;
  v0[21] = xmmword_100060470;
  v0[22] = xmmword_100060140;
  v0[23] = xmmword_100060480;
  v0[24] = xmmword_100060160;
  v0[25] = xmmword_100060490;
  v0[26] = xmmword_1000604A0;
  v0[27] = xmmword_100060190;
  v0[28] = xmmword_1000604B0;
  v0[29] = xmmword_1000601B0;
  v0[30] = xmmword_1000604C0;
  v0[31] = xmmword_1000604D0;
  v0[32] = xmmword_1000601E0;
  v0[33] = xmmword_1000604E0;
  v0[34] = xmmword_100060200;
  v0[35] = xmmword_1000604F0;
  v0[36] = xmmword_100060500;
  v0[37] = xmmword_100060230;
  v0[38] = xmmword_100060510;
  v0[39] = xmmword_100060250;
  v0[40] = xmmword_100060520;
  v0[41] = xmmword_100060530;
  v0[42] = xmmword_100060280;
  v0[43] = xmmword_100060540;
  v0[44] = xmmword_1000602A0;
  v0[45] = xmmword_100060550;
  v0[46] = xmmword_100060560;
  v0[47] = xmmword_1000602D0;
  v0[48] = xmmword_100060570;
  v0[49] = xmmword_1000602F0;
  v0[50] = xmmword_100060580;
  v0[51] = xmmword_100060590;
  v0[52] = xmmword_100060320;
  v0[53] = xmmword_1000605A0;
  v0[54] = xmmword_100060340;
  v0[55] = xmmword_1000605B0;
  v0[56] = xmmword_1000605C0;
  v0[57] = xmmword_100060370;
  v0[58] = xmmword_1000605D0;
  v0[59] = xmmword_100060390;
  v0[60] = xmmword_1000605E0;
  double result = 0.14808188;
  v0[61] = xmmword_1000605F0;
  qword_100098638 = (uint64_t)v0;
  return result;
}

double sub_100017414()
{
  sub_100008F4C(&qword_100098660);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10005FFF0;
  *(_OWORD *)(v0 + 32) = xmmword_100060000;
  *(_OWORD *)(v0 + 48) = xmmword_100060600;
  *(_OWORD *)(v0 + 64) = xmmword_100060020;
  *(_OWORD *)(v0 + 80) = xmmword_100060610;
  *(_OWORD *)(v0 + 96) = xmmword_100060620;
  *(_OWORD *)(v0 + 112) = xmmword_100060050;
  *(_OWORD *)(v0 + 128) = xmmword_100060630;
  *(_OWORD *)(v0 + 144) = xmmword_100060070;
  *(_OWORD *)(v0 + 160) = xmmword_100060640;
  *(_OWORD *)(v0 + 176) = xmmword_100060650;
  *(_OWORD *)(v0 + 192) = xmmword_1000600A0;
  *(_OWORD *)(v0 + 208) = xmmword_100060660;
  *(_OWORD *)(v0 + 224) = xmmword_1000600C0;
  *(_OWORD *)(v0 + 240) = xmmword_100060670;
  *(_OWORD *)(v0 + 256) = xmmword_100060680;
  *(_OWORD *)(v0 + 272) = xmmword_1000600F0;
  *(_OWORD *)(v0 + 288) = xmmword_100060690;
  *(_OWORD *)(v0 + 304) = xmmword_100060110;
  *(_OWORD *)(v0 + 320) = xmmword_1000606A0;
  *(_OWORD *)(v0 + 336) = xmmword_1000606B0;
  *(_OWORD *)(v0 + 352) = xmmword_100060140;
  *(_OWORD *)(v0 + 368) = xmmword_1000606C0;
  *(_OWORD *)(v0 + 384) = xmmword_100060160;
  *(_OWORD *)(v0 + 400) = xmmword_1000606D0;
  *(_OWORD *)(v0 + 416) = xmmword_1000606E0;
  *(_OWORD *)(v0 + 432) = xmmword_100060190;
  *(_OWORD *)(v0 + 448) = xmmword_1000606F0;
  *(_OWORD *)(v0 + 464) = xmmword_1000601B0;
  *(_OWORD *)(v0 + 480) = xmmword_100060700;
  *(_OWORD *)(v0 + 496) = xmmword_100060710;
  *(_OWORD *)(v0 + 512) = xmmword_1000601E0;
  *(_OWORD *)(v0 + 528) = xmmword_100060720;
  *(_OWORD *)(v0 + 544) = xmmword_100060200;
  *(_OWORD *)(v0 + 560) = xmmword_100060730;
  *(_OWORD *)(v0 + 576) = xmmword_100060740;
  *(_OWORD *)(v0 + 592) = xmmword_100060230;
  *(_OWORD *)(v0 + 608) = xmmword_100060750;
  *(_OWORD *)(v0 + 624) = xmmword_100060250;
  *(_OWORD *)(v0 + 640) = xmmword_100060760;
  *(_OWORD *)(v0 + 656) = xmmword_100060770;
  *(_OWORD *)(v0 + 672) = xmmword_100060280;
  *(_OWORD *)(v0 + 688) = xmmword_100060780;
  *(_OWORD *)(v0 + 704) = xmmword_1000602A0;
  *(_OWORD *)(v0 + 720) = xmmword_100060790;
  *(_OWORD *)(v0 + 736) = xmmword_1000607A0;
  *(_OWORD *)(v0 + 752) = xmmword_1000602D0;
  *(_OWORD *)(v0 + 768) = xmmword_1000607B0;
  *(_OWORD *)(v0 + 784) = xmmword_1000602F0;
  *(_OWORD *)(v0 + 800) = xmmword_1000607C0;
  *(_OWORD *)(v0 + 816) = xmmword_1000607D0;
  *(_OWORD *)(v0 + 832) = xmmword_100060320;
  *(_OWORD *)(v0 + 848) = xmmword_1000607E0;
  *(_OWORD *)(v0 + 864) = xmmword_100060340;
  *(_OWORD *)(v0 + 880) = xmmword_1000607F0;
  *(_OWORD *)(v0 + 896) = xmmword_100060800;
  *(_OWORD *)(v0 + 912) = xmmword_100060370;
  *(_OWORD *)(v0 + 928) = xmmword_100060810;
  *(_OWORD *)(v0 + 944) = xmmword_100060390;
  *(_OWORD *)(v0 + 960) = xmmword_100060820;
  double result = -0.20329942;
  *(_OWORD *)(v0 + 976) = xmmword_100060830;
  off_100098640 = (_UNKNOWN *)v0;
  return result;
}

double sub_1000176AC()
{
  sub_100008F4C(&qword_100098660);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10005FFF0;
  *(_OWORD *)(v0 + 32) = xmmword_100060000;
  *(_OWORD *)(v0 + 48) = xmmword_100060840;
  *(_OWORD *)(v0 + 64) = xmmword_100060020;
  *(_OWORD *)(v0 + 80) = xmmword_100060850;
  *(_OWORD *)(v0 + 96) = xmmword_100060860;
  *(_OWORD *)(v0 + 112) = xmmword_100060050;
  *(_OWORD *)(v0 + 128) = xmmword_100060870;
  *(_OWORD *)(v0 + 144) = xmmword_100060070;
  *(_OWORD *)(v0 + 160) = xmmword_100060880;
  *(_OWORD *)(v0 + 176) = xmmword_100060890;
  *(_OWORD *)(v0 + 192) = xmmword_1000600A0;
  *(_OWORD *)(v0 + 208) = xmmword_1000608A0;
  *(_OWORD *)(v0 + 224) = xmmword_1000600C0;
  *(_OWORD *)(v0 + 240) = xmmword_1000608B0;
  *(_OWORD *)(v0 + 256) = xmmword_1000608C0;
  *(_OWORD *)(v0 + 272) = xmmword_1000600F0;
  *(_OWORD *)(v0 + 288) = xmmword_1000608D0;
  *(_OWORD *)(v0 + 304) = xmmword_100060110;
  *(_OWORD *)(v0 + 320) = xmmword_1000608E0;
  *(_OWORD *)(v0 + 336) = xmmword_1000608F0;
  *(_OWORD *)(v0 + 352) = xmmword_100060140;
  *(_OWORD *)(v0 + 368) = xmmword_100060900;
  *(_OWORD *)(v0 + 384) = xmmword_100060160;
  *(_OWORD *)(v0 + 400) = xmmword_100060910;
  *(_OWORD *)(v0 + 416) = xmmword_100060920;
  *(_OWORD *)(v0 + 432) = xmmword_100060190;
  *(_OWORD *)(v0 + 448) = xmmword_100060930;
  *(_OWORD *)(v0 + 464) = xmmword_1000601B0;
  *(_OWORD *)(v0 + 480) = xmmword_100060940;
  *(_OWORD *)(v0 + 496) = xmmword_100060950;
  *(_OWORD *)(v0 + 512) = xmmword_1000601E0;
  *(_OWORD *)(v0 + 528) = xmmword_100060960;
  *(_OWORD *)(v0 + 544) = xmmword_100060200;
  *(_OWORD *)(v0 + 560) = xmmword_100060970;
  *(_OWORD *)(v0 + 576) = xmmword_100060980;
  *(_OWORD *)(v0 + 592) = xmmword_100060230;
  *(_OWORD *)(v0 + 608) = xmmword_100060990;
  *(_OWORD *)(v0 + 624) = xmmword_100060250;
  *(_OWORD *)(v0 + 640) = xmmword_1000609A0;
  *(_OWORD *)(v0 + 656) = xmmword_1000609B0;
  *(_OWORD *)(v0 + 672) = xmmword_100060280;
  *(_OWORD *)(v0 + 688) = xmmword_1000609C0;
  *(_OWORD *)(v0 + 704) = xmmword_1000602A0;
  *(_OWORD *)(v0 + 720) = xmmword_1000609D0;
  *(_OWORD *)(v0 + 736) = xmmword_1000609E0;
  *(_OWORD *)(v0 + 752) = xmmword_1000602D0;
  *(_OWORD *)(v0 + 768) = xmmword_1000609F0;
  *(_OWORD *)(v0 + 784) = xmmword_1000602F0;
  *(_OWORD *)(v0 + 800) = xmmword_100060A00;
  *(_OWORD *)(v0 + 816) = xmmword_100060A10;
  *(_OWORD *)(v0 + 832) = xmmword_100060320;
  *(_OWORD *)(v0 + 848) = xmmword_100060A20;
  *(_OWORD *)(v0 + 864) = xmmword_100060340;
  *(_OWORD *)(v0 + 880) = xmmword_100060A30;
  *(_OWORD *)(v0 + 896) = xmmword_100060A40;
  *(_OWORD *)(v0 + 912) = xmmword_100060370;
  *(_OWORD *)(v0 + 928) = xmmword_100060A50;
  *(_OWORD *)(v0 + 944) = xmmword_100060390;
  *(_OWORD *)(v0 + 960) = xmmword_100060A60;
  double result = 0.11332313;
  *(_OWORD *)(v0 + 976) = xmmword_100060A70;
  off_100098648 = (_UNKNOWN *)v0;
  return result;
}

double sub_100017944()
{
  sub_100008F4C(&qword_100098660);
  uint64_t v0 = (_OWORD *)swift_allocObject();
  v0[1] = xmmword_10005FFF0;
  v0[2] = xmmword_100060000;
  v0[3] = xmmword_100060A80;
  v0[4] = xmmword_100060020;
  v0[5] = xmmword_100060A90;
  v0[6] = xmmword_100060AA0;
  v0[7] = xmmword_100060050;
  v0[8] = xmmword_100060AB0;
  v0[9] = xmmword_100060070;
  v0[10] = xmmword_100060AC0;
  v0[11] = xmmword_100060AD0;
  v0[12] = xmmword_1000600A0;
  v0[13] = xmmword_100060AE0;
  v0[14] = xmmword_1000600C0;
  v0[15] = xmmword_100060AF0;
  v0[16] = xmmword_100060B00;
  v0[17] = xmmword_1000600F0;
  v0[18] = xmmword_100060B10;
  v0[19] = xmmword_100060110;
  v0[20] = xmmword_100060B20;
  v0[21] = xmmword_100060B30;
  v0[22] = xmmword_100060140;
  v0[23] = xmmword_100060B40;
  v0[24] = xmmword_100060160;
  v0[25] = xmmword_100060B50;
  v0[26] = xmmword_100060B60;
  v0[27] = xmmword_100060190;
  v0[28] = xmmword_100060B70;
  v0[29] = xmmword_1000601B0;
  v0[30] = xmmword_100060B80;
  v0[31] = xmmword_100060B90;
  v0[32] = xmmword_1000601E0;
  v0[33] = xmmword_100060BA0;
  v0[34] = xmmword_100060200;
  v0[35] = xmmword_100060BB0;
  v0[36] = xmmword_100060BC0;
  v0[37] = xmmword_100060230;
  v0[38] = xmmword_100060BD0;
  v0[39] = xmmword_100060250;
  v0[40] = xmmword_100060BE0;
  v0[41] = xmmword_100060BF0;
  v0[42] = xmmword_100060280;
  v0[43] = xmmword_100060C00;
  v0[44] = xmmword_1000602A0;
  v0[45] = xmmword_100060C10;
  v0[46] = xmmword_100060C20;
  v0[47] = xmmword_1000602D0;
  v0[48] = xmmword_100060C30;
  v0[49] = xmmword_1000602F0;
  v0[50] = xmmword_100060C40;
  v0[51] = xmmword_100060C50;
  v0[52] = xmmword_100060320;
  v0[53] = xmmword_100060C60;
  v0[54] = xmmword_100060340;
  v0[55] = xmmword_100060C70;
  v0[56] = xmmword_100060C80;
  v0[57] = xmmword_100060370;
  v0[58] = xmmword_100060C90;
  v0[59] = xmmword_100060390;
  v0[60] = xmmword_100060CA0;
  double result = -0.33851722;
  v0[61] = xmmword_100060CB0;
  qword_100098650 = (uint64_t)v0;
  return result;
}

double sub_100017BDC()
{
  sub_100008F4C(&qword_100098660);
  uint64_t v0 = (_OWORD *)swift_allocObject();
  v0[1] = xmmword_10005FFF0;
  v0[2] = xmmword_100060000;
  v0[3] = xmmword_100060CC0;
  v0[4] = xmmword_100060020;
  v0[5] = xmmword_100060CD0;
  v0[6] = xmmword_100060CE0;
  v0[7] = xmmword_100060050;
  v0[8] = xmmword_100060CF0;
  v0[9] = xmmword_100060070;
  v0[10] = xmmword_100060D00;
  v0[11] = xmmword_100060D10;
  v0[12] = xmmword_1000600A0;
  v0[13] = xmmword_100060D20;
  v0[14] = xmmword_1000600C0;
  v0[15] = xmmword_100060D30;
  v0[16] = xmmword_100060D40;
  v0[17] = xmmword_1000600F0;
  v0[18] = xmmword_100060D50;
  v0[19] = xmmword_100060110;
  v0[20] = xmmword_100060D60;
  v0[21] = xmmword_100060D70;
  v0[22] = xmmword_100060140;
  v0[23] = xmmword_100060D80;
  v0[24] = xmmword_100060160;
  v0[25] = xmmword_100060D90;
  v0[26] = xmmword_100060DA0;
  v0[27] = xmmword_100060190;
  v0[28] = xmmword_100060DB0;
  v0[29] = xmmword_1000601B0;
  v0[30] = xmmword_100060DC0;
  v0[31] = xmmword_100060DD0;
  v0[32] = xmmword_1000601E0;
  v0[33] = xmmword_100060DE0;
  v0[34] = xmmword_100060200;
  v0[35] = xmmword_100060DF0;
  v0[36] = xmmword_100060E00;
  v0[37] = xmmword_100060230;
  v0[38] = xmmword_100060E10;
  v0[39] = xmmword_100060250;
  v0[40] = xmmword_100060E20;
  v0[41] = xmmword_100060E30;
  v0[42] = xmmword_100060280;
  v0[43] = xmmword_100060E40;
  v0[44] = xmmword_1000602A0;
  v0[45] = xmmword_100060E50;
  v0[46] = xmmword_100060E60;
  v0[47] = xmmword_1000602D0;
  v0[48] = xmmword_100060E70;
  v0[49] = xmmword_1000602F0;
  v0[50] = xmmword_100060E80;
  v0[51] = xmmword_100060E90;
  v0[52] = xmmword_100060320;
  v0[53] = xmmword_100060EA0;
  v0[54] = xmmword_100060340;
  v0[55] = xmmword_100060EB0;
  v0[56] = xmmword_100060EC0;
  v0[57] = xmmword_100060370;
  v0[58] = xmmword_100060ED0;
  v0[59] = xmmword_100060390;
  v0[60] = xmmword_100060EE0;
  double result = 0.05056456;
  v0[61] = xmmword_100060EF0;
  qword_100098658 = (uint64_t)v0;
  return result;
}

uint64_t *sub_100017E74(uint64_t *result, void *a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v5 = *(void *)(a3 + 16);
  *a2 = v5;
  if (v5)
  {
    uint64_t v6 = 0;
    double v7 = a5;
    uint64_t v8 = *result;
    for (uint64_t i = *(void *)(a4 + 16); i; --i)
    {
      double v10 = *(double *)(a3 + v6 + 64) + (*(double *)(a4 + v6 + 64) - *(double *)(a3 + v6 + 64)) * v7;
      float64x2_t v11 = vaddq_f64(*(float64x2_t *)(a3 + v6 + 48), vmulq_n_f64(vsubq_f64(*(float64x2_t *)(a4 + v6 + 48), *(float64x2_t *)(a3 + v6 + 48)), v7));
      uint64_t v12 = v8 + v6;
      *(_OWORD *)uint64_t v12 = *(_OWORD *)(a3 + v6 + 32);
      *(float64x2_t *)(v12 + 16) = v11;
      *(double *)(v12 + 32) = v10;
      v6 += 40;
      if (!--v5) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100017EE8()
{
  return sub_100017FAC();
}

id sub_100017F00@<X0>(id result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, void *a5@<X8>)
{
  if (a3)
  {
    if (result)
    {
      double result = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithVertexCount:*(void *)(a2 + 16) vertices:a3 faceCount:*(void *)(a4 + 16) faces:result depthNormalization:0];
      *a5 = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_100017F88@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100017F00(a1, v2[2], v2[3], v2[5], a2);
}

uint64_t sub_100017FAC()
{
  return sub_10005E278();
}

void *sub_10001802C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  double result = (void *)sub_10005E268();
  for (uint64_t i = v1 + 32; ; i += 8)
  {
    unint64_t v5 = *(void *)(*(void *)i + 16);
    if (!v5) {
      break;
    }
    if (v5 == 1) {
      goto LABEL_11;
    }
    if (v5 < 3) {
      goto LABEL_12;
    }
    if (v5 == 3) {
      goto LABEL_13;
    }
    CGColorCreateSRGB(*(float *)(*(void *)i + 32), *(float *)(*(void *)i + 36), *(float *)(*(void *)i + 40), *(float *)(*(void *)i + 44));
    sub_10005E248();
    sub_10005E288();
    sub_10005E298();
    double result = (void *)sub_10005E258();
    if (!--v2)
    {
      sub_100020F48((uint64_t)&v6);
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
LABEL_12:
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

double sub_100018134(float a1, float a2)
{
  *(void *)&double result = vaddq_f32(*v2, vmulq_n_f32(vsubq_f32(vaddq_f32(v2[1], vmulq_n_f32(vsubq_f32(v2[2], v2[1]), a2)), *v2), a1)).u64[0];
  return result;
}

uint64_t sub_10001816C()
{
  if (*v0) {
    return 0x5974657366666FLL;
  }
  else {
    return 0x5874657366666FLL;
  }
}

uint64_t sub_1000181A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10001B63C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000181C8()
{
  return 0;
}

void sub_1000181D4(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1000181E0(uint64_t a1)
{
  unint64_t v2 = sub_100018404();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001821C(uint64_t a1)
{
  unint64_t v2 = sub_100018404();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FluidityParameters.Offset.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100008F4C(&qword_100098668);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000183C0(a1, a1[3]);
  sub_100018404();
  sub_10005E548();
  char v10 = 0;
  sub_10005E408();
  if (!v1)
  {
    char v9 = 1;
    sub_10005E408();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void *sub_1000183C0(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_100018404()
{
  unint64_t result = qword_100098670;
  if (!qword_100098670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098670);
  }
  return result;
}

float FluidityParameters.Offset.init(from:)(void *a1)
{
  return sub_10001B730(a1);
}

void sub_100018470(void *a1@<X0>, uint64_t a2@<X8>)
{
  float v4 = sub_10001B730(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
  }
}

uint64_t sub_10001849C(void *a1)
{
  return FluidityParameters.Offset.encode(to:)(a1);
}

float static FluidityParameters.State.blend(source:target:progress:)(float a1, double a2, double a3, double a4, float a5, double a6, double a7, double a8, float a9)
{
  return (float)((float)(a5 - a1) * a9) + a1;
}

uint64_t sub_1000184F0()
{
  if (*v0) {
    return 0x746E6F7266;
  }
  else {
    return 1801675106;
  }
}

uint64_t sub_100018520@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10001B984(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100018548(uint64_t a1)
{
  unint64_t v2 = sub_10001B8DC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100018584(uint64_t a1)
{
  unint64_t v2 = sub_10001B8DC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FluidityParameters.State.encode(to:)(void *a1, float a2, float a3, float a4, float a5)
{
  uint64_t v11 = sub_100008F4C(&qword_100098678);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  char v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000183C0(a1, a1[3]);
  sub_10001B8DC();
  sub_10005E548();
  float v18 = a2;
  float v19 = a3;
  char v17 = 0;
  sub_10001B930();
  sub_10005E418();
  if (!v5)
  {
    float v18 = a4;
    float v19 = a5;
    char v17 = 1;
    sub_10005E418();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

float FluidityParameters.State.init(from:)(void *a1)
{
  return sub_10001BA60(a1);
}

void sub_100018790(void *a1@<X0>, uint64_t a2@<X8>)
{
  float v4 = sub_10001BA60(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v6;
    *(_DWORD *)(a2 + 12) = v7;
  }
}

uint64_t sub_1000187C0(void *a1)
{
  return FluidityParameters.State.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

float static FluidityParameters.Mask.blendMask(source:target:progress:)(float a1, double a2, double a3, float a4, double a5, double a6, float a7)
{
  return (float)((float)(a4 - a1) * a7) + a1;
}

uint64_t sub_100018808()
{
  uint64_t v1 = 6581861;
  if (*v0 != 1) {
    uint64_t v1 = 0x726F74636166;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7472617473;
  }
}

uint64_t sub_100018854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10001BCA0(a1, a2);
  *a3 = result;
  return result;
}

void sub_10001887C(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_100018888(uint64_t a1)
{
  unint64_t v2 = sub_10001BC4C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000188C4(uint64_t a1)
{
  unint64_t v2 = sub_10001BC4C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FluidityParameters.Mask.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100008F4C(&qword_100098690);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000183C0(a1, a1[3]);
  sub_10001BC4C();
  sub_10005E548();
  v8[15] = 0;
  sub_10005E408();
  if (!v1)
  {
    v8[14] = 1;
    sub_10005E408();
    v8[13] = 2;
    sub_10005E408();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

float FluidityParameters.Mask.init(from:)(void *a1)
{
  return sub_10001BDD8(a1);
}

void sub_100018AC8(void *a1@<X0>, uint64_t a2@<X8>)
{
  float v4 = sub_10001BDD8(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v6;
  }
}

uint64_t sub_100018AF8(void *a1)
{
  return FluidityParameters.Mask.encode(to:)(a1);
}

unint64_t sub_100018B18(char a1)
{
  unint64_t result = 6582113;
  switch(a1)
  {
    case 1:
      unint64_t result = 1801678700;
      break;
    case 2:
      unint64_t result = 1701670760;
      break;
    case 3:
    case 4:
    case 8:
    case 9:
    case 13:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0xD000000000000013;
      break;
    case 7:
      unint64_t result = 0xD000000000000013;
      break;
    case 10:
      unint64_t result = 0x6B6F6F4C6B636162;
      break;
    case 11:
      unint64_t result = 0x6B6F6F4C6B636162;
      break;
    case 12:
      unint64_t result = 0xD000000000000010;
      break;
    case 14:
    case 15:
      unint64_t result = 0x6F6F4C746E6F7266;
      break;
    case 16:
      unint64_t result = 0xD000000000000011;
      break;
    case 17:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100018D08()
{
  return sub_100018B18(*v0);
}

uint64_t sub_100018D10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10001C0AC(a1, a2);
  *a3 = result;
  return result;
}

void sub_100018D38(unsigned char *a1@<X8>)
{
  *a1 = 18;
}

uint64_t sub_100018D44(uint64_t a1)
{
  unint64_t v2 = sub_10001BFB0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100018D80(uint64_t a1)
{
  unint64_t v2 = sub_10001BFB0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FluidityParameters.Device.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100008F4C(&qword_1000986A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000183C0(a1, a1[3]);
  sub_10001BFB0();
  sub_10005E548();
  long long v12 = *v3;
  char v11 = 0;
  sub_10001C004();
  sub_10005E418();
  if (!v2)
  {
    long long v12 = v3[1];
    char v11 = 1;
    sub_10005E418();
    long long v12 = v3[2];
    char v11 = 2;
    sub_10005E418();
    *(void *)&long long v12 = *((void *)v3 + 6);
    DWORD2(v12) = *((_DWORD *)v3 + 14);
    char v11 = 3;
    sub_10001C058();
    sub_10005E418();
    *(void *)&long long v12 = *(void *)((char *)v3 + 60);
    DWORD2(v12) = *((_DWORD *)v3 + 17);
    char v11 = 4;
    sub_10005E418();
    *(void *)&long long v12 = *((void *)v3 + 9);
    DWORD2(v12) = *((_DWORD *)v3 + 20);
    char v11 = 5;
    sub_10005E418();
    *(void *)&long long v12 = *(void *)((char *)v3 + 84);
    DWORD2(v12) = *((_DWORD *)v3 + 23);
    char v11 = 6;
    sub_10005E418();
    *(void *)&long long v12 = *((void *)v3 + 12);
    DWORD2(v12) = *((_DWORD *)v3 + 26);
    char v11 = 7;
    sub_10005E418();
    *(void *)&long long v12 = *(void *)((char *)v3 + 108);
    DWORD2(v12) = *((_DWORD *)v3 + 29);
    char v11 = 8;
    sub_10005E418();
    LOBYTE(v12) = 9;
    sub_10005E408();
    LOBYTE(v12) = 10;
    sub_10005E408();
    LOBYTE(v12) = 11;
    sub_10005E408();
    LOBYTE(v12) = 12;
    sub_10005E408();
    LOBYTE(v12) = 13;
    sub_10005E408();
    LOBYTE(v12) = 14;
    sub_10005E408();
    LOBYTE(v12) = 15;
    sub_10005E408();
    LOBYTE(v12) = 16;
    sub_10005E408();
    LOBYTE(v12) = 17;
    sub_10005E408();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double FluidityParameters.Device.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10001C74C(a1, (uint64_t)v9);
  if (!v2)
  {
    long long v5 = v9[7];
    a2[6] = v9[6];
    a2[7] = v5;
    a2[8] = *(_OWORD *)v10;
    *(_OWORD *)((char *)a2 + 140) = *(_OWORD *)&v10[12];
    long long v6 = v9[3];
    a2[2] = v9[2];
    a2[3] = v6;
    long long v7 = v9[5];
    a2[4] = v9[4];
    a2[5] = v7;
    double result = *(double *)v9;
    long long v8 = v9[1];
    *a2 = v9[0];
    a2[1] = v8;
  }
  return result;
}

uint64_t sub_100019304(void *a1)
{
  return FluidityParameters.Device.encode(to:)(a1);
}

uint64_t sub_10001931C()
{
  uint64_t v1 = 0x74726F5064615069;
  if (*v0 != 1) {
    uint64_t v1 = 0x646E614C64615069;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656E6F685069;
  }
}

uint64_t sub_100019388@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10001CDF0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000193B0(uint64_t a1)
{
  unint64_t v2 = sub_10001CD48();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000193EC(uint64_t a1)
{
  unint64_t v2 = sub_10001CD48();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FluidityParameters.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100008F4C(&qword_1000986C0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000183C0(a1, a1[3]);
  sub_10001CD48();
  sub_10005E548();
  long long v9 = v3[7];
  long long v31 = v3[6];
  long long v32 = v9;
  v33[0] = v3[8];
  *(_OWORD *)((char *)v33 + 12) = *(long long *)((char *)v3 + 140);
  long long v10 = v3[3];
  long long v27 = v3[2];
  long long v28 = v10;
  long long v11 = v3[5];
  long long v29 = v3[4];
  long long v30 = v11;
  long long v12 = v3[1];
  long long v25 = *v3;
  long long v26 = v12;
  char v24 = 0;
  sub_10001CD9C();
  sub_10005E418();
  if (!v2)
  {
    long long v13 = *(long long *)((char *)v3 + 268);
    long long v14 = *(long long *)((char *)v3 + 284);
    long long v31 = *(long long *)((char *)v3 + 252);
    long long v32 = v13;
    v33[0] = v14;
    *(_OWORD *)((char *)v33 + 12) = *(long long *)((char *)v3 + 296);
    long long v15 = *(long long *)((char *)v3 + 204);
    long long v27 = *(long long *)((char *)v3 + 188);
    long long v28 = v15;
    long long v16 = *(long long *)((char *)v3 + 236);
    long long v29 = *(long long *)((char *)v3 + 220);
    long long v30 = v16;
    long long v17 = *(long long *)((char *)v3 + 172);
    long long v25 = *(long long *)((char *)v3 + 156);
    long long v26 = v17;
    char v24 = 1;
    sub_10005E418();
    long long v18 = *(long long *)((char *)v3 + 424);
    long long v31 = *(long long *)((char *)v3 + 408);
    long long v32 = v18;
    v33[0] = *(long long *)((char *)v3 + 440);
    *(_OWORD *)((char *)v33 + 12) = *(long long *)((char *)v3 + 452);
    long long v19 = *(long long *)((char *)v3 + 360);
    long long v27 = *(long long *)((char *)v3 + 344);
    long long v28 = v19;
    long long v20 = *(long long *)((char *)v3 + 392);
    long long v29 = *(long long *)((char *)v3 + 376);
    long long v30 = v20;
    long long v21 = *(long long *)((char *)v3 + 328);
    long long v25 = *(long long *)((char *)v3 + 312);
    long long v26 = v21;
    char v24 = 2;
    sub_10005E418();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void *FluidityParameters.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10001CF7C(a1, __src);
  if (!v2) {
    return memcpy(a2, __src, 0x1D4uLL);
  }
  return result;
}

uint64_t sub_1000196EC(void *a1)
{
  return FluidityParameters.encode(to:)(a1);
}

_UNKNOWN **sub_100019704(uint64_t a1, uint64_t a2, double a3)
{
  if (*(void *)(a1 + 16) != 2 || *(void *)(a2 + 16) != 2) {
    return &off_10007E9A0;
  }
  sub_100008F4C(&qword_1000987E8);
  uint64_t result = (_UNKNOWN **)swift_allocObject();
  float64x2_t v6 = vaddq_f64(*(float64x2_t *)(a1 + 32), vmulq_n_f64(vsubq_f64(*(float64x2_t *)(a2 + 32), *(float64x2_t *)(a1 + 32)), a3));
  *((_OWORD *)result + 1) = xmmword_10005F1B0;
  *((float64x2_t *)result + 2) = v6;
  return result;
}

_UNKNOWN **sub_100019794(float32x4_t *a1, float32x4_t *a2, float a3)
{
  if (a1[1].i64[0] != 4 || a2[1].i64[0] != 4) {
    return &off_10007E9D0;
  }
  sub_100008F4C(&qword_100099BD0);
  uint64_t result = (_UNKNOWN **)swift_allocObject();
  float32x4_t v6 = vaddq_f32(a1[2], vmulq_n_f32(vsubq_f32(a2[2], a1[2]), a3));
  *((_OWORD *)result + 1) = xmmword_100060F00;
  *((float32x4_t *)result + 2) = v6;
  return result;
}

uint64_t sub_100019824(uint64_t a1, uint64_t a2, float a3)
{
  if (*(void *)(a1 + 16) == 2 && *(void *)(a2 + 16) == 2)
  {
    sub_100008F4C(&qword_1000987E0);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_10005F1B0;
    *(void *)(v6 + 32) = sub_100019794(*(float32x4_t **)(a1 + 32), *(float32x4_t **)(a2 + 32), a3);
    *(void *)(v6 + 40) = sub_100019794(*(float32x4_t **)(a1 + 40), *(float32x4_t **)(a2 + 40), a3);
  }
  else
  {
    sub_100008F4C(&qword_1000987E0);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_10005F1B0;
    *(void *)(v6 + 32) = &off_10007EA00;
    *(void *)(v6 + 40) = &off_10007EA30;
  }
  return v6;
}

_UNKNOWN **sub_100019908(float32x4_t *a1, float32x4_t *a2, float a3)
{
  if (a1[1].i64[0] != 5 || a2[1].i64[0] != 5) {
    return &off_10007EA60;
  }
  sub_100008F4C(&qword_100099BD0);
  uint64_t result = (_UNKNOWN **)swift_allocObject();
  float32x4_t v6 = vaddq_f32(a1[2], vmulq_n_f32(vsubq_f32(a2[2], a1[2]), a3));
  *((_OWORD *)result + 1) = xmmword_100060F10;
  *((float32x4_t *)result + 2) = v6;
  *((float *)result + 12) = a1[3].f32[0] + (float)((float)(a2[3].f32[0] - a1[3].f32[0]) * a3);
  return result;
}

uint64_t sub_1000199B0(uint64_t a1, uint64_t a2, float a3)
{
  if (*(void *)(a1 + 16) == 4 && *(void *)(a2 + 16) == 4)
  {
    sub_100008F4C(&qword_1000987E0);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_100060F00;
    *(void *)(v6 + 32) = sub_100019908(*(float32x4_t **)(a1 + 32), *(float32x4_t **)(a2 + 32), a3);
    *(void *)(v6 + 40) = sub_100019908(*(float32x4_t **)(a1 + 40), *(float32x4_t **)(a2 + 40), a3);
    *(void *)(v6 + 48) = sub_100019908(*(float32x4_t **)(a1 + 48), *(float32x4_t **)(a2 + 48), a3);
    *(void *)(v6 + 56) = sub_100019908(*(float32x4_t **)(a1 + 56), *(float32x4_t **)(a2 + 56), a3);
  }
  else
  {
    sub_100008F4C(&qword_1000987E0);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_100060F00;
    *(void *)(v6 + 32) = &off_10007EA98;
    *(void *)(v6 + 40) = &off_10007EAC8;
    *(void *)(v6 + 48) = &off_10007EAF8;
    *(void *)(v6 + 56) = &off_10007EB28;
  }
  return v6;
}

unint64_t sub_100019AD0(char a1)
{
  unint64_t result = 0xD000000000000018;
  switch(a1)
  {
    case 2:
    case 3:
    case 4:
    case 5:
      unint64_t result = 0xD000000000000019;
      break;
    case 6:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 7:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 8:
      unint64_t result = 0xD000000000000017;
      break;
    case 9:
      unint64_t result = 0xD000000000000010;
      break;
    case 10:
      unint64_t result = 0x6764456775626564;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100019BF0()
{
  return sub_100019AD0(*v0);
}

uint64_t sub_100019BF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10001D328(a1, a2);
  *a3 = result;
  return result;
}

void sub_100019C20(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_100019C2C(uint64_t a1)
{
  unint64_t v2 = sub_10001D2D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100019C68(uint64_t a1)
{
  unint64_t v2 = sub_10001D2D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ColorOptions.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100008F4C(&qword_1000986D8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000183C0(a1, a1[3]);
  sub_10001D2D4();
  sub_10005E548();
  v8[15] = 0;
  sub_10005E408();
  if (!v1)
  {
    v8[14] = 1;
    sub_10005E408();
    v8[13] = 2;
    sub_10005E408();
    v8[12] = 3;
    sub_10005E408();
    v8[11] = 4;
    sub_10005E408();
    v8[10] = 5;
    sub_10005E408();
    v8[9] = 6;
    sub_10005E408();
    v8[8] = 7;
    sub_10005E408();
    v8[7] = 8;
    sub_10005E408();
    v8[6] = 9;
    sub_10005E408();
    v8[5] = 10;
    sub_10005E408();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

double ColorOptions.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10001D720(a1, &v6);
  if (!v2)
  {
    long long v5 = *(_OWORD *)v7;
    *a2 = v6;
    a2[1] = v5;
    double result = *(double *)&v7[12];
    *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)&v7[12];
  }
  return result;
}

uint64_t sub_100019FB4(void *a1)
{
  return ColorOptions.encode(to:)(a1);
}

uint64_t sub_100019FCC(char *a1, char *a2)
{
  return sub_10004BFD8(*a1, *a2);
}

Swift::Int sub_100019FD8()
{
  return sub_10005E528();
}

uint64_t sub_10001A054()
{
  sub_10005DEB8();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10001A0BC()
{
  return sub_10005E528();
}

uint64_t sub_10001A134@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v8._countAndFlagsBits = *a1;
  uint64_t v3 = (void *)a1[1];
  v4._rawValue = &off_10007F258;
  v8._object = v3;
  Swift::Int v5 = sub_10005E398(v4, v8);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_10001A194(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6C6169646172;
  if (*v1) {
    uint64_t v2 = 0x6C61697861;
  }
  unint64_t v3 = 0xE600000000000000;
  if (*v1) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10001A1CC()
{
  return sub_10005DF68();
}

uint64_t sub_10001A22C()
{
  return sub_10005DF48();
}

uint64_t sub_10001A27C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100008F4C(&qword_100098890);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000183C0(a1, a1[3]);
  sub_1000217BC();
  sub_10005E548();
  LOBYTE(v10) = *(unsigned char *)v3;
  char v11 = 0;
  sub_1000218B8();
  sub_10005E418();
  if (!v2)
  {
    LOBYTE(v10) = 1;
    sub_10005E3F8();
    LOBYTE(v10) = 2;
    sub_10005E3F8();
    LOBYTE(v10) = 3;
    sub_10005E3F8();
    LOBYTE(v10) = 4;
    sub_10005E3F8();
    uint64_t v10 = *(void *)(v3 + 40);
    char v11 = 5;
    sub_100008F4C(&qword_100098878);
    sub_10002190C(&qword_1000988A0, &qword_100098878);
    sub_10005E418();
    uint64_t v10 = *(void *)(v3 + 48);
    char v11 = 6;
    sub_10005E418();
    uint64_t v10 = *(void *)(v3 + 56);
    char v11 = 7;
    sub_100008F4C(&qword_100098790);
    sub_100020DD8(&qword_1000987C8, &qword_1000987D0);
    sub_10005E418();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10001A598()
{
  uint64_t result = 1701869940;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6874646977;
      break;
    case 2:
      uint64_t result = 0x746867696568;
      break;
    case 3:
      uint64_t result = 0x6E6F697461746F72;
      break;
    case 4:
      uint64_t result = 0x6163536465656C62;
      break;
    case 5:
      uint64_t result = 0x696F507472617473;
      break;
    case 6:
      uint64_t result = 0x746E696F50646E65;
      break;
    case 7:
      uint64_t result = 0x73726F6C6F63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10001A690@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10001ED98(a1, a2);
  *a3 = result;
  return result;
}

void sub_10001A6B8(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_10001A6C4(uint64_t a1)
{
  unint64_t v2 = sub_1000217BC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001A700(uint64_t a1)
{
  unint64_t v2 = sub_1000217BC();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10001A73C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10001F0CC(a1, (uint64_t)v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_10001A780(void *a1)
{
  return sub_10001A27C(a1);
}

unint64_t sub_10001A798@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10001F500(*a1);
  *a2 = result;
  return result;
}

void sub_10001A7C4(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10001A7D0()
{
  return sub_10005DF78();
}

uint64_t sub_10001A830()
{
  return sub_10005DF58();
}

unint64_t sub_10001A880(char a1)
{
  unint64_t result = 0x6461724765736162;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0x6C6F436E776F7263;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0xD000000000000014;
      break;
    case 7:
      unint64_t result = 0xD000000000000014;
      break;
    case 8:
    case 9:
    case 10:
    case 11:
      unint64_t result = 0xD000000000000015;
      break;
    case 12:
      unint64_t result = 0xD000000000000016;
      break;
    case 13:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10001AA20(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100008F4C(&qword_1000987B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000183C0(a1, a1[3]);
  sub_100020C38();
  sub_10005E548();
  long long v9 = v3[1];
  long long v18 = *v3;
  long long v19 = v9;
  long long v10 = v3[3];
  long long v20 = v3[2];
  long long v21 = v10;
  char v17 = 0;
  sub_100020D84();
  sub_10005E418();
  if (!v2)
  {
    long long v11 = v3[5];
    long long v18 = v3[4];
    long long v19 = v11;
    long long v12 = v3[7];
    long long v20 = v3[6];
    long long v21 = v12;
    char v17 = 1;
    sub_10005E418();
    long long v13 = v3[9];
    long long v18 = v3[8];
    long long v19 = v13;
    long long v14 = v3[11];
    long long v20 = v3[10];
    long long v21 = v14;
    char v17 = 2;
    sub_10005E418();
    *(void *)&long long v18 = *((void *)v3 + 24);
    char v17 = 3;
    sub_100008F4C(&qword_100098790);
    sub_100020DD8(&qword_1000987C8, &qword_1000987D0);
    sub_10005E418();
    *(void *)&long long v18 = *((void *)v3 + 25);
    char v17 = 4;
    sub_100008F4C(&qword_1000987A8);
    sub_10002190C(&qword_1000987D0, &qword_1000987A8);
    sub_10005E418();
    LOBYTE(v18) = *((unsigned char *)v3 + 208);
    char v17 = 5;
    sub_100020E64();
    sub_10005E418();
    LOBYTE(v18) = 6;
    sub_10005E408();
    LOBYTE(v18) = 7;
    sub_10005E408();
    LOBYTE(v18) = 8;
    sub_10005E408();
    LOBYTE(v18) = 9;
    sub_10005E408();
    LOBYTE(v18) = 10;
    sub_10005E408();
    LOBYTE(v18) = 11;
    sub_10005E408();
    LOBYTE(v18) = 12;
    sub_10005E408();
    LOBYTE(v18) = 13;
    sub_10005E408();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10001AE74()
{
  return sub_10001A880(*v0);
}

uint64_t sub_10001AE7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10001F510(a1, a2);
  *a3 = result;
  return result;
}

void sub_10001AEA4(unsigned char *a1@<X8>)
{
  *a1 = 14;
}

uint64_t sub_10001AEB0(uint64_t a1)
{
  unint64_t v2 = sub_100020C38();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10001AEEC(uint64_t a1)
{
  unint64_t v2 = sub_100020C38();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10001AF28@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10001FA24(a1, (uint64_t)v12);
  if (!v2)
  {
    long long v5 = v24;
    *(_OWORD *)(a2 + 192) = v23;
    *(_OWORD *)(a2 + 208) = v5;
    *(_OWORD *)(a2 + 224) = v25;
    *(_DWORD *)(a2 + 240) = v26;
    long long v6 = v20;
    *(_OWORD *)(a2 + 128) = v19;
    *(_OWORD *)(a2 + 144) = v6;
    long long v7 = v22;
    *(_OWORD *)(a2 + 160) = v21;
    *(_OWORD *)(a2 + 176) = v7;
    long long v8 = v16;
    *(_OWORD *)(a2 + 64) = v15;
    *(_OWORD *)(a2 + 80) = v8;
    long long v9 = v18;
    *(_OWORD *)(a2 + 96) = v17;
    *(_OWORD *)(a2 + 112) = v9;
    long long v10 = v12[1];
    *(_OWORD *)a2 = v12[0];
    *(_OWORD *)(a2 + 16) = v10;
    double result = *(double *)&v13;
    long long v11 = v14;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v11;
  }
  return result;
}

uint64_t sub_10001AFC0(void *a1)
{
  return sub_10001AA20(a1);
}

float sub_10001AFD8@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  float v4 = *(float *)(a2 + 136);
  v5.i64[0] = *(void *)(a1 + 132);
  if ((float)(v4 - v5.f32[1]) <= 3.1416)
  {
    if ((float)(v4 - v5.f32[1]) >= -3.1416) {
      goto LABEL_6;
    }
    float v6 = 6.2832;
  }
  else
  {
    float v6 = -6.2832;
  }
  float v4 = v4 + v6;
LABEL_6:
  float32x4_t v8 = *(float32x4_t *)(a1 + 32);
  float32x4_t v7 = *(float32x4_t *)(a1 + 48);
  float32x4_t v10 = *(float32x4_t *)(a1 + 64);
  float32x4_t v9 = *(float32x4_t *)(a1 + 80);
  float32x4_t v12 = *(float32x4_t *)(a1 + 96);
  float32x4_t v11 = *(float32x4_t *)(a1 + 112);
  float32x4_t v13 = *(float32x4_t *)(a2 + 132);
  float v14 = *(float *)(a2 + 152);
  float v15 = *(float *)(a1 + 152);
  float v16 = v14 - v15;
  float v17 = v14 + -6.2832;
  if ((float)(v14 - v15) < -3.1416) {
    float v14 = v14 + 6.2832;
  }
  if (v16 > 3.1416) {
    float v14 = v17;
  }
  v13.f32[1] = v4;
  v13.i64[1] = *(void *)(a2 + 140);
  float v18 = *(float *)(a1 + 148) + (float)((float)(*(float *)(a2 + 148) - *(float *)(a1 + 148)) * a4);
  v5.i64[1] = *(void *)(a1 + 140);
  float v19 = *(float *)(a1 + 128) + (float)((float)(*(float *)(a2 + 128) - *(float *)(a1 + 128)) * a4);
  float32x4_t v20 = vsubq_f32(*(float32x4_t *)(a2 + 112), v11);
  float32x4_t v21 = vsubq_f32(*(float32x4_t *)(a2 + 96), v12);
  float32x4_t v22 = vsubq_f32(*(float32x4_t *)(a2 + 80), v9);
  float32x4_t v23 = vsubq_f32(*(float32x4_t *)(a2 + 64), v10);
  float32x4_t v24 = vsubq_f32(*(float32x4_t *)(a2 + 48), v7);
  float32x4_t v25 = vsubq_f32(*(float32x4_t *)(a2 + 32), v8);
  float32x4_t v26 = vaddq_f32(*(float32x4_t *)(a1 + 16), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(a2 + 16), *(float32x4_t *)(a1 + 16)), a4));
  *(float32x4_t *)a3 = vaddq_f32(*(float32x4_t *)a1, vmulq_n_f32(vsubq_f32(*(float32x4_t *)a2, *(float32x4_t *)a1), a4));
  *(float32x4_t *)(a3 + 16) = v26;
  *(float32x4_t *)(a3 + 32) = vaddq_f32(v8, vmulq_n_f32(v25, a4));
  *(float32x4_t *)(a3 + 48) = vaddq_f32(v7, vmulq_n_f32(v24, a4));
  *(float32x4_t *)(a3 + 64) = vaddq_f32(v10, vmulq_n_f32(v23, a4));
  *(float32x4_t *)(a3 + 80) = vaddq_f32(v9, vmulq_n_f32(v22, a4));
  *(float32x4_t *)(a3 + 96) = vaddq_f32(v12, vmulq_n_f32(v21, a4));
  *(float32x4_t *)(a3 + 112) = vaddq_f32(v11, vmulq_n_f32(v20, a4));
  *(float *)(a3 + 128) = v19;
  *(float32x4_t *)(a3 + 132) = vaddq_f32(v5, vmulq_n_f32(vsubq_f32(v13, v5), a4));
  float result = v15 + (float)((float)(v14 - v15) * a4);
  *(float *)(a3 + 148) = v18;
  *(float *)(a3 + 152) = result;
  return result;
}

__n128 sub_10001B190@<Q0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  int v8 = *a1;
  if (*a1) {
    uint64_t v9 = 0x6C61697861;
  }
  else {
    uint64_t v9 = 0x6C6169646172;
  }
  if (v8) {
    unint64_t v10 = 0xE500000000000000;
  }
  else {
    unint64_t v10 = 0xE600000000000000;
  }
  char v11 = *(unsigned char *)a2;
  if (*(unsigned char *)a2) {
    uint64_t v12 = 0x6C61697861;
  }
  else {
    uint64_t v12 = 0x6C6169646172;
  }
  if (*(unsigned char *)a2) {
    unint64_t v13 = 0xE500000000000000;
  }
  else {
    unint64_t v13 = 0xE600000000000000;
  }
  if (v9 == v12 && v10 == v13)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v15 = sub_10005E448();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      float v16 = *(_UNKNOWN ***)(a2 + 40);
LABEL_24:
      float32x4_t v22 = *(_UNKNOWN ***)(a2 + 48);
      uint64_t v23 = *(void *)(a2 + 56);
      float64x2_t v25 = *(float64x2_t *)(a2 + 8);
      float64x2_t v26 = *(float64x2_t *)(a2 + 24);
      sub_100020EB8(a2);
      goto LABEL_25;
    }
  }
  uint64_t v17 = *((void *)a1 + 5);
  float v16 = *(_UNKNOWN ***)(a2 + 40);
  if (*(_UNKNOWN **)(v17 + 16) != v16[2]) {
    goto LABEL_24;
  }
  uint64_t v18 = *((void *)a1 + 6);
  uint64_t v19 = *(void *)(a2 + 48);
  if (*(void *)(v18 + 16) != *(void *)(v19 + 16)) {
    goto LABEL_24;
  }
  uint64_t v20 = *((void *)a1 + 7);
  uint64_t v21 = *(void *)(a2 + 56);
  if (*(void *)(v20 + 16) != *(void *)(v21 + 16)) {
    goto LABEL_24;
  }
  float64x2_t v26 = vaddq_f64(*(float64x2_t *)(a1 + 24), vmulq_n_f64(vsubq_f64(*(float64x2_t *)(a2 + 24), *(float64x2_t *)(a1 + 24)), a4));
  float64x2_t v25 = vaddq_f64(*(float64x2_t *)(a1 + 8), vmulq_n_f64(vsubq_f64(*(float64x2_t *)(a2 + 8), *(float64x2_t *)(a1 + 8)), a4));
  float v16 = sub_100019704(v17, (uint64_t)v16, a4);
  float32x4_t v22 = sub_100019704(v18, v19, a4);
  uint64_t v23 = sub_100019824(v20, v21, a4);
  char v11 = v8;
LABEL_25:
  *(unsigned char *)a3 = v11;
  *(float64x2_t *)(a3 + 8) = v25;
  __n128 result = (__n128)v26;
  *(float64x2_t *)(a3 + 24) = v26;
  *(void *)(a3 + 40) = v16;
  *(void *)(a3 + 48) = v22;
  *(void *)(a3 + 56) = v23;
  return result;
}

double sub_10001B364@<D0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  long long v7 = *(_OWORD *)(a1 + 16);
  v73[0] = *(_OWORD *)a1;
  v73[1] = v7;
  long long v8 = *(_OWORD *)(a1 + 48);
  v73[2] = *(_OWORD *)(a1 + 32);
  v73[3] = v8;
  long long v10 = *a2;
  long long v9 = a2[1];
  long long v11 = a2[3];
  v72[2] = a2[2];
  v72[3] = v11;
  v72[0] = v10;
  v72[1] = v9;
  sub_10001B190((unsigned __int8 *)v73, (uint64_t)v72, (uint64_t)v50, a4);
  char v12 = v50[0];
  uint64_t v13 = v52;
  uint64_t v14 = v53;
  uint64_t v48 = v55;
  long long v46 = v54;
  long long v47 = v51;
  sub_100020EB8((uint64_t)v50);
  swift_bridgeObjectRelease_n();
  long long v15 = *(_OWORD *)(a1 + 80);
  v71[0] = *(_OWORD *)(a1 + 64);
  v71[1] = v15;
  long long v16 = *(_OWORD *)(a1 + 112);
  v71[2] = *(_OWORD *)(a1 + 96);
  v71[3] = v16;
  long long v17 = a2[5];
  v70[0] = a2[4];
  v70[1] = v17;
  long long v18 = a2[7];
  v70[2] = a2[6];
  v70[3] = v18;
  sub_10001B190((unsigned __int8 *)v71, (uint64_t)v70, (uint64_t)v56, a4);
  char v19 = v56[0];
  uint64_t v20 = v58;
  uint64_t v21 = v59;
  uint64_t v22 = v61;
  long long v44 = v60;
  long long v45 = v57;
  sub_100020EB8((uint64_t)v56);
  swift_bridgeObjectRelease_n();
  long long v23 = *(_OWORD *)(a1 + 144);
  v69[0] = *(_OWORD *)(a1 + 128);
  v69[1] = v23;
  long long v24 = *(_OWORD *)(a1 + 176);
  v69[2] = *(_OWORD *)(a1 + 160);
  v69[3] = v24;
  long long v25 = a2[9];
  v68[0] = a2[8];
  v68[1] = v25;
  long long v26 = a2[11];
  v68[2] = a2[10];
  v68[3] = v26;
  sub_10001B190((unsigned __int8 *)v69, (uint64_t)v68, (uint64_t)v62, a4);
  char v27 = v62[0];
  uint64_t v28 = v64;
  uint64_t v29 = v65;
  uint64_t v30 = v67;
  long long v42 = v66;
  long long v43 = v63;
  sub_100020EB8((uint64_t)v62);
  swift_bridgeObjectRelease_n();
  uint64_t v31 = sub_1000199B0(*(void *)(a1 + 192), *((void *)a2 + 24), a4);
  long long v32 = sub_100019794(*(float32x4_t **)(a1 + 200), *((float32x4_t **)a2 + 25), a4);
  char v33 = *((unsigned char *)a2 + 208);
  v74[0] = v12;
  *(_OWORD *)&v74[8] = v47;
  *(void *)&v74[24] = v13;
  *(void *)uint64_t v75 = v14;
  *(_OWORD *)&v75[8] = v46;
  *(void *)&v75[24] = v48;
  v76[0] = v19;
  *(_OWORD *)&v76[8] = v45;
  *(void *)&v76[24] = v20;
  *(void *)id v77 = v21;
  *(_OWORD *)&v77[8] = v44;
  *(void *)&v77[24] = v22;
  v78[0] = v27;
  *(_OWORD *)&v78[8] = v43;
  *(void *)&v78[24] = v28;
  *(void *)id v79 = v29;
  *(_OWORD *)&v79[8] = v42;
  *(void *)&v79[24] = v30;
  *(void *)&long long v80 = v31;
  *((void *)&v80 + 1) = v32;
  v81[0] = v33;
  *(float32x4_t *)&v81[4] = vaddq_f32(*(float32x4_t *)(a1 + 212), vmulq_n_f32(vsubq_f32(*(float32x4_t *)((char *)a2 + 212), *(float32x4_t *)(a1 + 212)), a4));
  *(float32x4_t *)&v81[20] = vaddq_f32(*(float32x4_t *)(a1 + 228), vmulq_n_f32(vsubq_f32(*(float32x4_t *)((char *)a2 + 228), *(float32x4_t *)(a1 + 228)), a4));
  sub_100014D80((uint64_t)v74);
  sub_100020F00((uint64_t)v62);
  sub_100020F00((uint64_t)v56);
  sub_100020F00((uint64_t)v50);
  sub_100014E40((uint64_t)v74);
  long long v34 = *(_OWORD *)v81;
  *(_OWORD *)(a3 + 192) = v80;
  *(_OWORD *)(a3 + 208) = v34;
  *(_OWORD *)(a3 + 224) = *(_OWORD *)&v81[16];
  *(_DWORD *)(a3 + 240) = *(_DWORD *)&v81[32];
  long long v35 = *(_OWORD *)&v78[16];
  *(_OWORD *)(a3 + 128) = *(_OWORD *)v78;
  *(_OWORD *)(a3 + 144) = v35;
  long long v36 = *(_OWORD *)&v79[16];
  *(_OWORD *)(a3 + 160) = *(_OWORD *)v79;
  *(_OWORD *)(a3 + 176) = v36;
  long long v37 = *(_OWORD *)&v76[16];
  *(_OWORD *)(a3 + 64) = *(_OWORD *)v76;
  *(_OWORD *)(a3 + 80) = v37;
  long long v38 = *(_OWORD *)&v77[16];
  *(_OWORD *)(a3 + 96) = *(_OWORD *)v77;
  *(_OWORD *)(a3 + 112) = v38;
  long long v39 = *(_OWORD *)&v74[16];
  *(_OWORD *)a3 = *(_OWORD *)v74;
  *(_OWORD *)(a3 + 16) = v39;
  double result = *(double *)v75;
  long long v41 = *(_OWORD *)&v75[16];
  *(_OWORD *)(a3 + 32) = *(_OWORD *)v75;
  *(_OWORD *)(a3 + 48) = v41;
  return result;
}

uint64_t sub_10001B63C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x5874657366666FLL && a2 == 0xE700000000000000;
  if (v2 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5974657366666FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_10005E448();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

float sub_10001B730(void *a1)
{
  uint64_t v4 = sub_100008F4C(&qword_100098838);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000183C0(a1, a1[3]);
  sub_100018404();
  sub_10005E538();
  if (!v1)
  {
    v10[15] = 0;
    sub_10005E3C8();
    float v2 = v8;
    v10[14] = 1;
    sub_10005E3C8();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  sub_100020C8C((uint64_t)a1);
  return v2;
}

unint64_t sub_10001B8DC()
{
  unint64_t result = qword_100098680;
  if (!qword_100098680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098680);
  }
  return result;
}

unint64_t sub_10001B930()
{
  unint64_t result = qword_100098688;
  if (!qword_100098688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098688);
  }
  return result;
}

uint64_t sub_10001B984(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1801675106 && a2 == 0xE400000000000000;
  if (v2 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E6F7266 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_10005E448();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

float sub_10001BA60(void *a1)
{
  uint64_t v2 = sub_100008F4C(&qword_100098828);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000183C0(a1, a1[3]);
  sub_10001B8DC();
  sub_10005E538();
  HIBYTE(v8) = 0;
  sub_100021070();
  sub_10005E3D8();
  float v6 = v9;
  HIBYTE(v8) = 1;
  sub_10005E3D8();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100020C8C((uint64_t)a1);
  return v6;
}

unint64_t sub_10001BC4C()
{
  unint64_t result = qword_100098698;
  if (!qword_100098698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098698);
  }
  return result;
}

uint64_t sub_10001BCA0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7472617473 && a2 == 0xE500000000000000;
  if (v2 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6581861 && a2 == 0xE300000000000000 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726F74636166 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_10005E448();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

float sub_10001BDD8(void *a1)
{
  uint64_t v2 = sub_100008F4C(&qword_100098820);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000183C0(a1, a1[3]);
  sub_10001BC4C();
  sub_10005E538();
  char v12 = 0;
  sub_10005E3C8();
  float v7 = v6;
  char v11 = 1;
  sub_10005E3C8();
  char v10 = 2;
  sub_10005E3C8();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100020C8C((uint64_t)a1);
  return v7;
}

unint64_t sub_10001BFB0()
{
  unint64_t result = qword_1000986A8;
  if (!qword_1000986A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000986A8);
  }
  return result;
}

unint64_t sub_10001C004()
{
  unint64_t result = qword_1000986B0;
  if (!qword_1000986B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000986B0);
  }
  return result;
}

unint64_t sub_10001C058()
{
  unint64_t result = qword_1000986B8;
  if (!qword_1000986B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000986B8);
  }
  return result;
}

uint64_t sub_10001C0AC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 6582113 && a2 == 0xE300000000000000;
  if (v2 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1801678700 && a2 == 0xE400000000000000 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701670760 && a2 == 0xE400000000000000 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100064330 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100064350 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100064370 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000100064390 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001000643B0 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001000643D0 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001000643F0 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6B6F6F4C6B636162 && a2 == 0xEB00000000587075 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x6B6F6F4C6B636162 && a2 == 0xEB00000000597075 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000100064410 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100064430 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x6F6F4C746E6F7266 && a2 == 0xEC0000005870756BLL || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x6F6F4C746E6F7266 && a2 == 0xEC0000005970756BLL || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100064450 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000100064470)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else
  {
    char v6 = sub_10005E448();
    swift_bridgeObjectRelease();
    if (v6) {
      return 17;
    }
    else {
      return 18;
    }
  }
}

uint64_t sub_10001C74C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100008F4C(&qword_100098808);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000183C0(a1, a1[3]);
  sub_10001BFB0();
  sub_10005E538();
  if (v2) {
    return sub_100020C8C((uint64_t)a1);
  }
  char v46 = 0;
  sub_100020FC8();
  sub_10005E3D8();
  long long v43 = v44;
  char v46 = 1;
  sub_10005E3D8();
  long long v42 = v44;
  char v46 = 2;
  sub_10005E3D8();
  long long v9 = v44;
  char v46 = 3;
  sub_10002101C();
  sub_10005E3D8();
  uint64_t v10 = v44;
  int v11 = DWORD2(v44);
  char v46 = 4;
  sub_10005E3D8();
  uint64_t v12 = v44;
  int v13 = DWORD2(v44);
  char v46 = 5;
  sub_10005E3D8();
  uint64_t v14 = v44;
  int v15 = DWORD2(v44);
  char v46 = 6;
  sub_10005E3D8();
  uint64_t v41 = v44;
  int v45 = DWORD2(v44);
  char v46 = 7;
  sub_10005E3D8();
  uint64_t v40 = v44;
  int v39 = DWORD2(v44);
  char v46 = 8;
  sub_10005E3D8();
  uint64_t v38 = v44;
  int v37 = DWORD2(v44);
  LOBYTE(v44) = 9;
  sub_10005E3C8();
  int v36 = v16;
  LOBYTE(v44) = 10;
  sub_10005E3C8();
  int v35 = v17;
  LOBYTE(v44) = 11;
  sub_10005E3C8();
  int v34 = v18;
  LOBYTE(v44) = 12;
  sub_10005E3C8();
  int v33 = v19;
  LOBYTE(v44) = 13;
  sub_10005E3C8();
  int v32 = v20;
  LOBYTE(v44) = 14;
  sub_10005E3C8();
  int v31 = v21;
  LOBYTE(v44) = 15;
  sub_10005E3C8();
  int v30 = v22;
  LOBYTE(v44) = 16;
  sub_10005E3C8();
  int v29 = v23;
  LOBYTE(v44) = 17;
  sub_10005E3C8();
  int v28 = v24;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_100020C8C((uint64_t)a1);
  long long v26 = v42;
  *(_OWORD *)a2 = v43;
  *(_OWORD *)(a2 + 16) = v26;
  *(_OWORD *)(a2 + 32) = v9;
  *(void *)(a2 + 48) = v10;
  *(_DWORD *)(a2 + 56) = v11;
  *(void *)(a2 + 60) = v12;
  *(_DWORD *)(a2 + 68) = v13;
  *(void *)(a2 + 72) = v14;
  *(_DWORD *)(a2 + 80) = v15;
  *(void *)(a2 + 84) = v41;
  *(_DWORD *)(a2 + 92) = v45;
  *(void *)(a2 + 96) = v40;
  *(_DWORD *)(a2 + 104) = v39;
  *(void *)(a2 + 108) = v38;
  LODWORD(v26) = v36;
  *(_DWORD *)(a2 + 116) = v37;
  *(_DWORD *)(a2 + 120) = v26;
  LODWORD(v26) = v34;
  *(_DWORD *)(a2 + 124) = v35;
  *(_DWORD *)(a2 + 128) = v26;
  LODWORD(v26) = v32;
  *(_DWORD *)(a2 + 132) = v33;
  *(_DWORD *)(a2 + 136) = v26;
  LODWORD(v26) = v30;
  *(_DWORD *)(a2 + 140) = v31;
  *(_DWORD *)(a2 + 144) = v26;
  LODWORD(v26) = v28;
  *(_DWORD *)(a2 + 148) = v29;
  *(_DWORD *)(a2 + 152) = v26;
  return result;
}

unint64_t sub_10001CD48()
{
  unint64_t result = qword_1000986C8;
  if (!qword_1000986C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000986C8);
  }
  return result;
}

unint64_t sub_10001CD9C()
{
  unint64_t result = qword_1000986D0;
  if (!qword_1000986D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000986D0);
  }
  return result;
}

uint64_t sub_10001CDF0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656E6F685069 && a2 == 0xE600000000000000;
  if (v2 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74726F5064615069 && a2 == 0xEC00000074696172 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646E614C64615069 && a2 == 0xED00006570616373)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_10005E448();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *sub_10001CF7C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v60 = sub_100008F4C(&qword_1000987F8);
  uint64_t v5 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000183C0(a1, a1[3]);
  sub_10001CD48();
  sub_10005E538();
  if (v2) {
    return (void *)sub_100020C8C((uint64_t)a1);
  }
  uint64_t v8 = v5;
  char v50 = 0;
  sub_100020F74();
  uint64_t v9 = v60;
  sub_10005E3D8();
  long long v47 = v57;
  long long v48 = v58;
  v49[0] = v59[0];
  *(_OWORD *)((char *)v49 + 12) = *(_OWORD *)((char *)v59 + 12);
  long long v43 = v53;
  long long v44 = v54;
  long long v45 = v55;
  long long v46 = v56;
  long long v41 = v51;
  long long v42 = v52;
  char v31 = 1;
  sub_10005E3D8();
  long long v28 = v38;
  long long v29 = v39;
  v30[0] = *(_OWORD *)v40;
  *(_OWORD *)((char *)v30 + 12) = *(_OWORD *)&v40[12];
  long long v24 = v34;
  long long v25 = v35;
  long long v26 = v36;
  long long v27 = v37;
  long long v22 = v32;
  long long v23 = v33;
  char v12 = 2;
  sub_10005E3D8();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v9);
  *(_OWORD *)((char *)&v11[25] + 8) = v19;
  *(_OWORD *)((char *)&v11[26] + 8) = v20;
  *(_OWORD *)((char *)&v11[27] + 8) = *(_OWORD *)v21;
  *(_OWORD *)((char *)&v11[28] + 4) = *(_OWORD *)&v21[12];
  *(_OWORD *)((char *)&v11[21] + 8) = v15;
  *(_OWORD *)((char *)&v11[22] + 8) = v16;
  *(_OWORD *)((char *)&v11[23] + 8) = v17;
  *(_OWORD *)((char *)&v11[24] + 8) = v18;
  *(_OWORD *)((char *)&v11[19] + 8) = v13;
  *(_OWORD *)((char *)&v11[20] + 8) = v14;
  v11[6] = v47;
  v11[7] = v48;
  _OWORD v11[8] = v49[0];
  *(_OWORD *)((char *)&v11[8] + 12) = *(_OWORD *)((char *)v49 + 12);
  v11[2] = v43;
  v11[3] = v44;
  v11[4] = v45;
  v11[5] = v46;
  v11[0] = v41;
  v11[1] = v42;
  *(_OWORD *)((char *)&v11[16] + 12) = v29;
  *(_OWORD *)((char *)&v11[17] + 12) = v30[0];
  *(_OWORD *)((char *)&v11[18] + 8) = *(_OWORD *)((char *)v30 + 12);
  *(_OWORD *)((char *)&v11[15] + 12) = v28;
  *(_OWORD *)((char *)&v11[11] + 12) = v24;
  *(_OWORD *)((char *)&v11[12] + 12) = v25;
  *(_OWORD *)((char *)&v11[13] + 12) = v26;
  *(_OWORD *)((char *)&v11[14] + 12) = v27;
  *(_OWORD *)((char *)&v11[9] + 12) = v22;
  *(_OWORD *)((char *)&v11[10] + 12) = v23;
  sub_100020C8C((uint64_t)a1);
  return memcpy(a2, v11, 0x1D4uLL);
}

unint64_t sub_10001D2D4()
{
  unint64_t result = qword_1000986E0;
  if (!qword_1000986E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000986E0);
  }
  return result;
}

uint64_t sub_10001D328(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000018 && a2 == 0x8000000100064490 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001000644B0 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000001000644D0 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000001000644F0 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x8000000100064510 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x8000000100064530 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100064550 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100064570 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000100064590 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001000645B0 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6764456775626564 && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    char v5 = sub_10005E448();
    swift_bridgeObjectRelease();
    if (v5) {
      return 10;
    }
    else {
      return 11;
    }
  }
}

uint64_t sub_10001D720@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v5 = sub_100008F4C(&qword_1000987F0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000183C0(a1, a1[3]);
  sub_10001D2D4();
  sub_10005E538();
  if (v2) {
    return sub_100020C8C((uint64_t)a1);
  }
  char v44 = 0;
  sub_10005E3C8();
  int v10 = v9;
  char v43 = 1;
  sub_10005E3C8();
  int v12 = v11;
  char v42 = 2;
  sub_10005E3C8();
  int v14 = v13;
  char v41 = 3;
  sub_10005E3C8();
  int v16 = v15;
  char v40 = 4;
  sub_10005E3C8();
  int v18 = v17;
  char v39 = 5;
  sub_10005E3C8();
  int v20 = v19;
  char v38 = 6;
  sub_10005E3C8();
  int v22 = v21;
  char v37 = 7;
  sub_10005E3C8();
  int v33 = v23;
  char v36 = 8;
  sub_10005E3C8();
  int v25 = v24;
  char v35 = 9;
  sub_10005E3C8();
  int v32 = v26;
  char v34 = 10;
  sub_10005E3C8();
  int v31 = v27;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_100020C8C((uint64_t)a1);
  *a2 = v10;
  a2[1] = v12;
  a2[2] = v14;
  a2[3] = v16;
  a2[4] = v18;
  a2[5] = v20;
  int v29 = v33;
  a2[6] = v22;
  a2[7] = v29;
  int v30 = v32;
  a2[8] = v25;
  a2[9] = v30;
  a2[10] = v31;
  return result;
}

void *initializeWithCopy for FluidityParameters(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1D4uLL);
}

uint64_t getEnumTagSinglePayload for FluidityParameters(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 468)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FluidityParameters(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 456) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 464) = 0;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 468) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FluidityParameters()
{
  return &type metadata for FluidityParameters;
}

void *initializeBufferWithCopyOfBuffer for FluidityParameters.Offset(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FluidityParameters.Offset(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FluidityParameters.Offset(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FluidityParameters.Offset()
{
  return &type metadata for FluidityParameters.Offset;
}

ValueMetadata *type metadata accessor for FluidityParameters.State()
{
  return &type metadata for FluidityParameters.State;
}

ValueMetadata *type metadata accessor for FluidityParameters.Mask()
{
  return &type metadata for FluidityParameters.Mask;
}

__n128 initializeWithCopy for FluidityParameters.Device(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for FluidityParameters.Device(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 156)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FluidityParameters.Device(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 152) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 156) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FluidityParameters.Device()
{
  return &type metadata for FluidityParameters.Device;
}

__n128 initializeWithCopy for ColorOptions(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ColorOptions(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 44)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ColorOptions(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 44) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ColorOptions()
{
  return &type metadata for ColorOptions;
}

uint64_t destroy for ColorData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ColorData(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  uint64_t v4 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v4;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  uint64_t v5 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v5;
  uint64_t v6 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v6;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(_OWORD *)(a1 + 212) = *(_OWORD *)(a2 + 212);
  *(_OWORD *)(a1 + 228) = *(_OWORD *)(a2 + 228);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ColorData(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  return a1;
}

__n128 initializeWithTake for ColorData(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  long long v8 = a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  __n128 result = (__n128)a2[12];
  long long v12 = a2[13];
  long long v13 = a2[14];
  *(_DWORD *)(a1 + 240) = *((_DWORD *)a2 + 60);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t assignWithTake for ColorData(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(_OWORD *)(a1 + 212) = *(_OWORD *)(a2 + 212);
  *(_OWORD *)(a1 + 228) = *(_OWORD *)(a2 + 228);
  return a1;
}

uint64_t getEnumTagSinglePayload for ColorData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 244)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ColorData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 240) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 244) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 244) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ColorData()
{
  return &type metadata for ColorData;
}

uint64_t getEnumTagSinglePayload for ColorOptions.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ColorOptions.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *__n128 result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001E458);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ColorOptions.CodingKeys()
{
  return &type metadata for ColorOptions.CodingKeys;
}

ValueMetadata *type metadata accessor for FluidityParameters.CodingKeys()
{
  return &type metadata for FluidityParameters.CodingKeys;
}

uint64_t getEnumTagSinglePayload for FluidityParameters.Device.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEF) {
    goto LABEL_17;
  }
  if (a2 + 17 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 17) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 17;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x12;
  int v8 = v6 - 18;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FluidityParameters.Device.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *__n128 result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001E604);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 17;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FluidityParameters.Device.CodingKeys()
{
  return &type metadata for FluidityParameters.Device.CodingKeys;
}

unsigned char *_s22MercuryPosterExtension18FluidityParametersV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001E708);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FluidityParameters.Mask.CodingKeys()
{
  return &type metadata for FluidityParameters.Mask.CodingKeys;
}

ValueMetadata *type metadata accessor for FluidityParameters.State.CodingKeys()
{
  return &type metadata for FluidityParameters.State.CodingKeys;
}

ValueMetadata *type metadata accessor for FluidityParameters.Offset.CodingKeys()
{
  return &type metadata for FluidityParameters.Offset.CodingKeys;
}

unint64_t sub_10001E76C()
{
  unint64_t result = qword_1000986E8;
  if (!qword_1000986E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000986E8);
  }
  return result;
}

unint64_t sub_10001E7C4()
{
  unint64_t result = qword_1000986F0;
  if (!qword_1000986F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000986F0);
  }
  return result;
}

unint64_t sub_10001E81C()
{
  unint64_t result = qword_1000986F8;
  if (!qword_1000986F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000986F8);
  }
  return result;
}

unint64_t sub_10001E874()
{
  unint64_t result = qword_100098700;
  if (!qword_100098700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098700);
  }
  return result;
}

unint64_t sub_10001E8CC()
{
  unint64_t result = qword_100098708;
  if (!qword_100098708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098708);
  }
  return result;
}

unint64_t sub_10001E924()
{
  unint64_t result = qword_100098710;
  if (!qword_100098710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098710);
  }
  return result;
}

unint64_t sub_10001E97C()
{
  unint64_t result = qword_100098718;
  if (!qword_100098718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098718);
  }
  return result;
}

unint64_t sub_10001E9D4()
{
  unint64_t result = qword_100098720;
  if (!qword_100098720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098720);
  }
  return result;
}

unint64_t sub_10001EA2C()
{
  unint64_t result = qword_100098728;
  if (!qword_100098728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098728);
  }
  return result;
}

unint64_t sub_10001EA84()
{
  unint64_t result = qword_100098730;
  if (!qword_100098730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098730);
  }
  return result;
}

unint64_t sub_10001EADC()
{
  unint64_t result = qword_100098738;
  if (!qword_100098738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098738);
  }
  return result;
}

unint64_t sub_10001EB34()
{
  unint64_t result = qword_100098740;
  if (!qword_100098740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098740);
  }
  return result;
}

unint64_t sub_10001EB8C()
{
  unint64_t result = qword_100098748;
  if (!qword_100098748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098748);
  }
  return result;
}

unint64_t sub_10001EBE4()
{
  unint64_t result = qword_100098750;
  if (!qword_100098750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098750);
  }
  return result;
}

unint64_t sub_10001EC3C()
{
  unint64_t result = qword_100098758;
  if (!qword_100098758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098758);
  }
  return result;
}

unint64_t sub_10001EC94()
{
  unint64_t result = qword_100098760;
  if (!qword_100098760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098760);
  }
  return result;
}

unint64_t sub_10001ECEC()
{
  unint64_t result = qword_100098768;
  if (!qword_100098768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098768);
  }
  return result;
}

unint64_t sub_10001ED44()
{
  unint64_t result = qword_100098770;
  if (!qword_100098770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098770);
  }
  return result;
}

uint64_t sub_10001ED98(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6874646977 && a2 == 0xE500000000000000 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746867696568 && a2 == 0xE600000000000000 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6F697461746F72 && a2 == 0xE800000000000000 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6163536465656C62 && a2 == 0xEA0000000000656CLL || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x696F507472617473 && a2 == 0xEA0000000000746ELL || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x746E696F50646E65 && a2 == 0xE800000000000000 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x73726F6C6F63 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = sub_10005E448();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t sub_10001F0CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100008F4C(&qword_100098860);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000183C0(a1, a1[3]);
  sub_1000217BC();
  sub_10005E538();
  if (v2)
  {
    sub_100020C8C((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    char v25 = 0;
    sub_100021810();
    sub_10005E3D8();
    int v9 = v23;
    LOBYTE(v23) = 1;
    sub_10005E3B8();
    uint64_t v11 = v10;
    LOBYTE(v23) = 2;
    sub_10005E3B8();
    uint64_t v13 = v12;
    LOBYTE(v23) = 3;
    sub_10005E3B8();
    uint64_t v15 = v14;
    LOBYTE(v23) = 4;
    sub_10005E3B8();
    uint64_t v17 = v16;
    sub_100008F4C(&qword_100098878);
    char v25 = 5;
    uint64_t v22 = sub_10002190C(&qword_100098880, &qword_100098878);
    sub_10005E3D8();
    int v24 = v9;
    uint64_t v18 = v23;
    char v25 = 6;
    swift_bridgeObjectRetain();
    sub_10005E3D8();
    uint64_t v19 = v23;
    sub_100008F4C(&qword_100098790);
    char v25 = 7;
    sub_100020DD8(&qword_100098798, &qword_1000987A0);
    swift_bridgeObjectRetain();
    sub_10005E3D8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v20 = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_100020C8C((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(unsigned char *)a2 = v24;
    *(void *)(a2 + 8) = v11;
    *(void *)(a2 + 16) = v13;
    *(void *)(a2 + 24) = v15;
    *(void *)(a2 + 32) = v17;
    *(void *)(a2 + 40) = v18;
    *(void *)(a2 + 48) = v19;
    *(void *)(a2 + 56) = v20;
  }
  return result;
}

unint64_t sub_10001F500(unint64_t result)
{
  if (result >= 4) {
    return 4;
  }
  return result;
}

uint64_t sub_10001F510(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6461724765736162 && a2 == 0xEC000000746E6569;
  if (v2 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001000645D0 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001000645F0 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000100064610 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6C6F436E776F7263 && a2 == 0xEA0000000000726FLL || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000100064630 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100064650 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100064670 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000100064690 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001000646B0 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001000646D0 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001000646F0 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000100064710 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000100064730)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else
  {
    char v6 = sub_10005E448();
    swift_bridgeObjectRelease();
    if (v6) {
      return 13;
    }
    else {
      return 14;
    }
  }
}

uint64_t sub_10001FA24@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v71 = sub_100008F4C(&qword_100098778);
  uint64_t v5 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000183C0(a1, a1[3]);
  sub_100020C38();
  sub_10005E538();
  id v78 = a1;
  if (v2)
  {
    uint64_t v86 = v2;
    uint64_t v81 = 0;
    double v80 = 1.0;
    float v82 = 1.0;
    float v83 = 1.0;
    float v72 = &off_10007F2A8;
    float v84 = 1.0;
    float v85 = 1.0;
    float v76 = 1.0;
    float v77 = 1.0;
    float v79 = 1.0;
    id v87 = _swiftEmptyArrayStorage;
    uint64_t v88 = _swiftEmptyArrayStorage;
    id v89 = _swiftEmptyArrayStorage;
    long long v153 = _swiftEmptyArrayStorage;
    id v90 = _swiftEmptyArrayStorage;
    id v91 = _swiftEmptyArrayStorage;
    uint64_t v74 = 0;
    double v75 = 1.0;
    unint64_t v73 = _swiftEmptyArrayStorage;
    sub_100020C8C((uint64_t)v78);
    LOBYTE(v109) = 1;
    *(_DWORD *)((char *)&v109 + 1) = v152[0];
    HIDWORD(v109) = *(_DWORD *)((char *)v152 + 3);
    double v110 = 1.0;
    double v111 = 1.0;
    uint64_t v112 = 0;
    double v113 = 1.0;
    long long v114 = _swiftEmptyArrayStorage;
    long long v115 = _swiftEmptyArrayStorage;
    long long v116 = v73;
    char v117 = 1;
    *(_DWORD *)long long v118 = *(_DWORD *)v151;
    *(_DWORD *)&v118[3] = *(_DWORD *)&v151[3];
    double v119 = 1.0;
    double v120 = 1.0;
    uint64_t v121 = v74;
    double v122 = v75;
    long long v123 = v91;
    int v124 = v90;
    int v125 = v153;
    char v126 = 1;
    *(_DWORD *)&v127[3] = *(_DWORD *)&v150[3];
    *(_DWORD *)int v127 = *(_DWORD *)v150;
    double v128 = 1.0;
    double v129 = 1.0;
    uint64_t v130 = v81;
    double v131 = v80;
    uint64_t v132 = v89;
    id v133 = v88;
    id v134 = v87;
    uint64_t v135 = _swiftEmptyArrayStorage;
    uint64_t v136 = v72;
    char v137 = 0;
    __int16 v138 = v148;
    char v139 = v149;
    float v140 = v79;
    float v141 = v77;
    float v142 = v76;
    float v143 = v85;
    float v144 = v84;
    float v145 = v83;
    float v146 = v82;
    int v147 = 1065353216;
    return sub_100014E40((uint64_t)&v109);
  }
  else
  {
    uint64_t v70 = v5;
    LOBYTE(v92) = 0;
    sub_100020CDC();
    sub_10005E3D8();
    uint64_t v68 = a2;
    int v69 = v109;
    double v9 = v110;
    double v10 = v111;
    uint64_t v11 = v112;
    double v12 = v113;
    uint64_t v13 = v114;
    uint64_t v14 = v115;
    uint64_t v15 = v116;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    LOBYTE(v92) = 1;
    sub_10005E3D8();
    unint64_t v73 = v15;
    uint64_t v67 = v13;
    int v65 = v109;
    double v64 = v110;
    double v66 = v111;
    uint64_t v16 = v112;
    double v17 = v113;
    uint64_t v18 = v115;
    uint64_t v19 = v116;
    id v91 = v114;
    swift_bridgeObjectRetain();
    id v90 = v18;
    swift_bridgeObjectRetain();
    long long v153 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    LOBYTE(v92) = 2;
    sub_10005E3D8();
    uint64_t v74 = v16;
    double v75 = v17;
    int v63 = v109;
    double v61 = v110;
    double v62 = v111;
    uint64_t v20 = v112;
    double v21 = v113;
    uint64_t v22 = v115;
    uint64_t v23 = v116;
    id v89 = v114;
    swift_bridgeObjectRetain();
    uint64_t v88 = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    sub_100008F4C(&qword_100098790);
    LOBYTE(v92) = 3;
    sub_100020DD8(&qword_100098798, &qword_1000987A0);
    sub_10005E3D8();
    double v80 = v21;
    uint64_t v81 = v20;
    id v87 = v23;
    int v24 = v109;
    sub_100008F4C(&qword_1000987A8);
    LOBYTE(v92) = 4;
    sub_10002190C(&qword_1000987A0, &qword_1000987A8);
    swift_bridgeObjectRetain();
    sub_10005E3D8();
    char v25 = (_UNKNOWN **)v109;
    LOBYTE(v92) = 5;
    sub_100020D30();
    swift_bridgeObjectRetain();
    sub_10005E3D8();
    float v72 = v25;
    int v60 = v109;
    LOBYTE(v109) = 6;
    sub_10005E3C8();
    float v79 = v26;
    LOBYTE(v109) = 7;
    sub_10005E3C8();
    uint64_t v86 = 0;
    float v77 = v27;
    double v57 = v9;
    *(double *)&long long v58 = v10;
    *((void *)&v58 + 1) = v11;
    double v59 = v12;
    LOBYTE(v109) = 8;
    sub_10005E3C8();
    uint64_t v86 = 0;
    float v76 = v28;
    LOBYTE(v109) = 9;
    sub_10005E3C8();
    float v85 = v29;
    uint64_t v86 = 0;
    LOBYTE(v109) = 10;
    sub_10005E3C8();
    float v84 = v30;
    uint64_t v86 = 0;
    LOBYTE(v109) = 11;
    sub_10005E3C8();
    float v83 = v31;
    uint64_t v86 = 0;
    LOBYTE(v109) = 12;
    sub_10005E3C8();
    float v82 = v32;
    uint64_t v86 = 0;
    char v108 = 13;
    sub_10005E3C8();
    uint64_t v86 = 0;
    LODWORD(v20) = v33;
    (*(void (**)(char *, uint64_t))(v70 + 8))(v7, v71);
    LOBYTE(v92) = v69;
    double v35 = v57;
    double v34 = *(double *)&v58;
    *((double *)&v92 + 1) = v57;
    long long v93 = v58;
    uint64_t v37 = *((void *)&v58 + 1);
    double v36 = v59;
    *(double *)&long long v94 = v59;
    *((void *)&v94 + 1) = v67;
    *(void *)&long long v95 = v14;
    char v38 = v14;
    *((void *)&v95 + 1) = v15;
    LOBYTE(v96) = v65;
    double v39 = v64;
    *((double *)&v96 + 1) = v64;
    *(double *)&long long v97 = v66;
    uint64_t v41 = v74;
    double v40 = v75;
    *((void *)&v97 + 1) = v74;
    *(double *)&long long v98 = v75;
    char v42 = v90;
    *((void *)&v98 + 1) = v91;
    *(void *)&long long v99 = v90;
    *((void *)&v99 + 1) = v153;
    LOBYTE(v100) = v63;
    *((double *)&v100 + 1) = v61;
    *(double *)&long long v101 = v62;
    *((void *)&v101 + 1) = v81;
    *(double *)&long long v102 = v80;
    char v43 = v88;
    *((void *)&v102 + 1) = v89;
    *(void *)&long long v103 = v88;
    *((void *)&v103 + 1) = v87;
    *(void *)&long long v104 = v24;
    *((void *)&v104 + 1) = v25;
    LOBYTE(v105) = v60;
    *(void *)((char *)&v105 + 4) = __PAIR64__(LODWORD(v77), LODWORD(v79));
    *((float *)&v105 + 3) = v76;
    *(void *)&long long v106 = __PAIR64__(LODWORD(v84), LODWORD(v85));
    *((void *)&v106 + 1) = __PAIR64__(LODWORD(v82), LODWORD(v83));
    int v107 = v20;
    sub_100014D80((uint64_t)&v92);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v44 = v67;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v45 = v91;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v46 = v89;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v47 = v72;
    swift_bridgeObjectRelease();
    sub_100020C8C((uint64_t)v78);
    LOBYTE(v109) = v69;
    *(_DWORD *)((char *)&v109 + 1) = v152[0];
    HIDWORD(v109) = *(_DWORD *)((char *)v152 + 3);
    double v110 = v35;
    double v111 = v34;
    uint64_t v112 = v37;
    double v113 = v36;
    long long v114 = v44;
    long long v115 = v38;
    long long v116 = v73;
    char v117 = v65;
    *(_DWORD *)long long v118 = *(_DWORD *)v151;
    *(_DWORD *)&v118[3] = *(_DWORD *)&v151[3];
    double v119 = v39;
    double v120 = v66;
    uint64_t v121 = v41;
    double v122 = v40;
    long long v123 = v45;
    int v124 = v42;
    int v125 = v153;
    char v126 = v63;
    *(_DWORD *)int v127 = *(_DWORD *)v150;
    *(_DWORD *)&v127[3] = *(_DWORD *)&v150[3];
    double v128 = v61;
    double v129 = v62;
    uint64_t v130 = v81;
    double v131 = v80;
    uint64_t v132 = v46;
    id v133 = v43;
    id v134 = v87;
    uint64_t v135 = v24;
    uint64_t v136 = v47;
    char v137 = v60;
    __int16 v138 = v148;
    char v139 = v149;
    float v140 = v79;
    float v141 = v77;
    float v142 = v76;
    float v143 = v85;
    float v144 = v84;
    float v145 = v83;
    float v146 = v82;
    int v147 = v20;
    uint64_t result = sub_100014E40((uint64_t)&v109);
    long long v48 = v105;
    uint64_t v49 = v68;
    *(_OWORD *)(v68 + 192) = v104;
    *(_OWORD *)(v49 + 208) = v48;
    *(_OWORD *)(v49 + 224) = v106;
    *(_DWORD *)(v49 + 240) = v107;
    long long v50 = v101;
    *(_OWORD *)(v49 + 128) = v100;
    *(_OWORD *)(v49 + 144) = v50;
    long long v51 = v103;
    *(_OWORD *)(v49 + 160) = v102;
    *(_OWORD *)(v49 + 176) = v51;
    long long v52 = v97;
    *(_OWORD *)(v49 + 64) = v96;
    *(_OWORD *)(v49 + 80) = v52;
    long long v53 = v99;
    *(_OWORD *)(v49 + 96) = v98;
    *(_OWORD *)(v49 + 112) = v53;
    long long v54 = v93;
    *(_OWORD *)uint64_t v49 = v92;
    *(_OWORD *)(v49 + 16) = v54;
    long long v55 = v95;
    *(_OWORD *)(v49 + 32) = v94;
    *(_OWORD *)(v49 + 48) = v55;
  }
  return result;
}

unint64_t sub_100020C38()
{
  unint64_t result = qword_100098780;
  if (!qword_100098780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098780);
  }
  return result;
}

uint64_t sub_100020C8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t sub_100020CDC()
{
  unint64_t result = qword_100098788;
  if (!qword_100098788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098788);
  }
  return result;
}

unint64_t sub_100020D30()
{
  unint64_t result = qword_1000987B0;
  if (!qword_1000987B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000987B0);
  }
  return result;
}

unint64_t sub_100020D84()
{
  unint64_t result = qword_1000987C0;
  if (!qword_1000987C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000987C0);
  }
  return result;
}

uint64_t sub_100020DD8(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014768(&qword_100098790);
    sub_10002190C(a2, &qword_1000987A8);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100020E64()
{
  unint64_t result = qword_1000987D8;
  if (!qword_1000987D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000987D8);
  }
  return result;
}

uint64_t sub_100020EB8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100020F00(uint64_t a1)
{
  return a1;
}

uint64_t sub_100020F48(uint64_t a1)
{
  return a1;
}

unint64_t sub_100020F74()
{
  unint64_t result = qword_100098800;
  if (!qword_100098800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098800);
  }
  return result;
}

unint64_t sub_100020FC8()
{
  unint64_t result = qword_100098810;
  if (!qword_100098810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098810);
  }
  return result;
}

unint64_t sub_10002101C()
{
  unint64_t result = qword_100098818;
  if (!qword_100098818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098818);
  }
  return result;
}

unint64_t sub_100021070()
{
  unint64_t result = qword_100098830;
  if (!qword_100098830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098830);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ColorData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ColorData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *unint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100021220);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ColorData.CodingKeys()
{
  return &type metadata for ColorData.CodingKeys;
}

uint64_t getEnumTagSinglePayload for CompositingFilter(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CompositingFilter(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000213B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CompositingFilter()
{
  return &type metadata for CompositingFilter;
}

uint64_t destroy for GradientInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GradientInfo(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GradientInfo(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for GradientInfo(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for GradientInfo(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GradientInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GradientInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GradientInfo()
{
  return &type metadata for GradientInfo;
}

unint64_t sub_100021660()
{
  unint64_t result = qword_100098840;
  if (!qword_100098840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098840);
  }
  return result;
}

unint64_t sub_1000216B8()
{
  unint64_t result = qword_100098848;
  if (!qword_100098848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098848);
  }
  return result;
}

unint64_t sub_100021710()
{
  unint64_t result = qword_100098850;
  if (!qword_100098850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098850);
  }
  return result;
}

unint64_t sub_100021768()
{
  unint64_t result = qword_100098858;
  if (!qword_100098858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098858);
  }
  return result;
}

unint64_t sub_1000217BC()
{
  unint64_t result = qword_100098868;
  if (!qword_100098868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098868);
  }
  return result;
}

unint64_t sub_100021810()
{
  unint64_t result = qword_100098870;
  if (!qword_100098870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098870);
  }
  return result;
}

unint64_t sub_100021864()
{
  unint64_t result = qword_100098888;
  if (!qword_100098888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098888);
  }
  return result;
}

unint64_t sub_1000218B8()
{
  unint64_t result = qword_100098898;
  if (!qword_100098898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098898);
  }
  return result;
}

uint64_t sub_10002190C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014768(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for GradientInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for GradientInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100021AC8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GradientInfo.CodingKeys()
{
  return &type metadata for GradientInfo.CodingKeys;
}

unsigned char *_s22MercuryPosterExtension12GradientTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100021BCCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GradientType()
{
  return &type metadata for GradientType;
}

unint64_t sub_100021C08()
{
  unint64_t result = qword_1000988A8;
  if (!qword_1000988A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000988A8);
  }
  return result;
}

unint64_t sub_100021C60()
{
  unint64_t result = qword_1000988B0;
  if (!qword_1000988B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000988B0);
  }
  return result;
}

unint64_t sub_100021CB8()
{
  unint64_t result = qword_1000988B8;
  if (!qword_1000988B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000988B8);
  }
  return result;
}

unint64_t sub_100021D10()
{
  unint64_t result = qword_1000988C0;
  if (!qword_1000988C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000988C0);
  }
  return result;
}

unint64_t sub_100021D64()
{
  unint64_t result = qword_1000988C8;
  if (!qword_1000988C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000988C8);
  }
  return result;
}

id sub_100021E10()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MercuryPosterUpdater();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for MercuryPosterUpdater()
{
  return self;
}

uint64_t sub_100021E68(void *a1)
{
  id v3 = [v1 identifier];
  uint64_t v4 = sub_10005DE68();
  uint64_t v6 = v5;

  id v7 = [a1 identifier];
  uint64_t v8 = sub_10005DE68();
  uint64_t v10 = v9;

  if (v4 == v8 && v6 == v10)
  {
    swift_bridgeObjectRelease_n();
LABEL_8:
    NSString v14 = sub_10005DE38();
    id v15 = [a1 objectForUserInfoKey:v14];

    if (v15)
    {
      sub_10005E178();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v27 = 0u;
      long long v28 = 0u;
    }
    sub_100022DEC((uint64_t)&v27, (uint64_t)v29);
    if (v30)
    {
      int v16 = swift_dynamicCast();
      if (v16) {
        uint64_t v17 = v25;
      }
      else {
        uint64_t v17 = 0;
      }
      if (v16) {
        uint64_t v18 = v26;
      }
      else {
        uint64_t v18 = 0;
      }
    }
    else
    {
      sub_100009564((uint64_t)v29);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
    }
    NSString v19 = sub_10005DE38();
    id v20 = [v1 objectForUserInfoKey:v19];

    if (v20)
    {
      sub_10005E178();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v27 = 0u;
      long long v28 = 0u;
    }
    sub_100022DEC((uint64_t)&v27, (uint64_t)v29);
    if (v30)
    {
      int v21 = swift_dynamicCast();
      if (v21) {
        uint64_t v22 = v25;
      }
      else {
        uint64_t v22 = 0;
      }
      if (v21) {
        uint64_t v23 = v26;
      }
      else {
        uint64_t v23 = 0;
      }
      if (v18)
      {
        if (v23)
        {
          if (v17 == v22 && v18 == v23)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            char v24 = sub_10005E448();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = 0;
            if ((v24 & 1) == 0) {
              return result;
            }
          }
          return 1;
        }
LABEL_37:
        swift_bridgeObjectRelease();
        return 0;
      }
      if (v23) {
        goto LABEL_37;
      }
    }
    else
    {
      sub_100009564((uint64_t)v29);
      if (v18) {
        goto LABEL_37;
      }
    }
    return 1;
  }
  char v12 = sub_10005E448();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = 0;
  if (v12) {
    goto LABEL_8;
  }
  return result;
}

unint64_t sub_100022200()
{
  unint64_t result = qword_100098958;
  if (!qword_100098958)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100098958);
  }
  return result;
}

uint64_t sub_100022240(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_10005E328();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_10005E328();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_10005E228();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_100022630(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    sub_10005E328();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return sub_10005DFB8();
}

void *sub_10002240C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100008F4C(&qword_1000985E0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = (2 * (v5 >> 3)) | 1;
  unint64_t v6 = sub_100022834(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_100022DE0();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void (*sub_1000224F8(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1000225A8(v6, a2, a3);
  return sub_100022560;
}

void sub_100022560(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_1000225A8(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)sub_10005E218();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_100022628;
  }
  __break(1u);
  return result;
}

void sub_100022628(id *a1)
{
}

uint64_t sub_100022630(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_10005E328();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_10005E328();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100022E54();
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100008F4C(&qword_100098960);
          uint64_t v12 = sub_1000224F8(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100022200();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = sub_10005E378();
  __break(1u);
  return result;
}

void *sub_100022834(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    id v20 = *(void **)(*(void *)(a4 + 56) + 8 * v16);
    *uint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_100022A30()
{
  uint64_t v0 = MGGetProductType();
  if (sub_10004E2D0(v0, (uint64_t)&off_10007E918) & 1) != 0 || (sub_10004E2D0(v0, (uint64_t)&off_10007E948))
  {
    if (qword_100097840 != -1) {
      swift_once();
    }
    unint64_t v1 = swift_bridgeObjectRetain();
    sub_100022240(v1);
  }
  uint64_t v2 = MGGetProductType();
  if (sub_10004E2D0(v2, (uint64_t)&off_10007E8C8) & 1) != 0 || (sub_10004E2D0(v2, (uint64_t)&off_10007E8F0))
  {
    if (qword_100097850 != -1) {
      swift_once();
    }
    unint64_t v3 = swift_bridgeObjectRetain();
    sub_100022240(v3);
  }
  uint64_t v4 = MGGetProductType();
  if (sub_10004E2D0(v4, (uint64_t)&off_10007F2D8) & 1) != 0 || (sub_10004E2D0(v4, (uint64_t)&off_10007F300))
  {
    if (qword_100097858 != -1) {
      swift_once();
    }
    unint64_t v5 = swift_bridgeObjectRetain();
    sub_100022240(v5);
  }
  if (qword_100097848 != -1) {
    swift_once();
  }
  unint64_t v6 = swift_bridgeObjectRetain();
  sub_100022240(v6);
  return _swiftEmptyArrayStorage;
}

void sub_100022BF8(uint64_t a1, uint64_t a2)
{
  sub_100022A30();
  unint64_t v3 = (unint64_t)sub_100022A30();
  unint64_t v4 = v3;
  if (v3 >> 62) {
    goto LABEL_19;
  }
  for (uint64_t i = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = sub_10005E328())
  {
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = (v4 & 0xC000000000000001) != 0 ? (id)sub_10005E218() : *(id *)(v4 + 8 * v6);
      uint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      id v10 = [v7 identifier];
      uint64_t v11 = sub_10005DE68();
      uint64_t v13 = v12;

      if (!*(void *)(a1 + 16) || (unint64_t v14 = sub_1000121F8(v11, v13), (v15 & 1) == 0))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_15;
      }
      id v16 = *(id *)(*(void *)(a1 + 56) + 8 * v14);
      swift_bridgeObjectRelease();
      char v17 = sub_100021E68(v8);

      if ((v17 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
      ++v6;
      if (v9 == i) {
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_19:
    ;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = swift_bridgeObjectRetain();
  sub_10002240C(v18);
  swift_bridgeObjectRelease();
LABEL_15:
  sub_100022200();
  Class isa = sub_10005DF98().super.isa;
  (*(void (**)(uint64_t, objc_class *, void))(a2 + 16))(a2, isa, 0);
  swift_bridgeObjectRelease();
}

uint64_t sub_100022DE0()
{
  return swift_release();
}

uint64_t sub_100022DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008F4C(&qword_100097D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100022E54()
{
  unint64_t result = qword_100098968;
  if (!qword_100098968)
  {
    sub_100014768(&qword_100098960);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098968);
  }
  return result;
}

void sub_100022EB0(void *a1@<X8>)
{
  *a1 = &off_10007E978;
}

void *sub_100022EC0()
{
  type metadata accessor for SolarEvent();
  swift_allocObject();
  unint64_t result = sub_100022EFC();
  qword_10009FA00 = (uint64_t)result;
  return result;
}

void *sub_100022EFC()
{
  unint64_t v1 = (void *)v0;
  uint64_t v2 = sub_10005E0A8();
  __chkstk_darwin(v2);
  uint64_t v3 = sub_10005E0B8();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10005DD88();
  __chkstk_darwin(v7 - 8);
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0;
  *(unsigned char *)(v0 + 40) = 8;
  *(void *)(v0 + 48) = 0;
  if (qword_1000978C8 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_10005DCD8();
  sub_100008DB0(v8, (uint64_t)qword_10009FB08);
  uint64_t v9 = sub_10005DCB8();
  os_log_type_t v10 = sub_10005E088();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "SolarEvent calculator created.", v11, 2u);
    swift_slowDealloc();
  }

  sub_10000991C(0, &qword_100098BC0);
  sub_10005DD78();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v3);
  float v31 = _swiftEmptyArrayStorage;
  sub_100026DE0(&qword_100098BC8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100008F4C(&qword_100098BD0);
  sub_100026E28(&qword_100098BD8, &qword_100098BD0);
  sub_10005E188();
  uint64_t v12 = sub_10005E0E8();
  uint64_t v13 = (void *)v1[2];
  v1[2] = v12;

  unint64_t v14 = (objc_class *)type metadata accessor for LocationDelegate();
  id v15 = objc_allocWithZone(v14);
  swift_weakInit();
  swift_weakAssign();
  v30.receiver = v15;
  v30.super_class = v14;
  id v16 = objc_msgSendSuper2(&v30, "init");
  char v17 = (void *)v1[4];
  v1[4] = v16;

  uint64_t v18 = (void *)v1[4];
  int64_t v19 = (void *)v1[2];
  id v20 = objc_allocWithZone((Class)CLLocationManager);
  id v21 = v19;
  id v22 = v18;
  NSString v23 = sub_10005DE38();
  id v24 = [v20 initWithEffectiveBundlePath:v23 delegate:v22 onQueue:v21];

  uint64_t v25 = (void *)v1[3];
  v1[3] = v24;

  uint64_t v26 = (void *)v1[3];
  if (v26)
  {
    [v26 setDesiredAccuracy:kCLLocationAccuracyReduced];
    long long v27 = (void *)v1[3];
    if (v27) {
      [v27 requestWhenInUseAuthorizationWithPrompt];
    }
  }
  return v1;
}

uint64_t sub_100023340()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10005DB38();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v32 - v7;
  uint64_t v9 = *(void **)(v1 + 48);
  if (v9)
  {
    id v10 = v9;
    sub_10005DB18();
    id v11 = [v10 timestamp];
    sub_10005DB08();

    sub_10005DAB8();
    double v13 = v12;
    unint64_t v14 = *(void (**)(char *, uint64_t))(v3 + 8);
    v14(v5, v2);
    v14(v8, v2);
    if (v13 > 1800.0)
    {
      if (qword_1000978C8 != -1) {
        swift_once();
      }
      uint64_t v15 = sub_10005DCD8();
      sub_100008DB0(v15, (uint64_t)qword_10009FB08);
      id v16 = sub_10005DCB8();
      os_log_type_t v17 = sub_10005E088();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "We haven't checked location in a while. Try to update.", v18, 2u);
        swift_slowDealloc();
      }

      int64_t v19 = *(void **)(v1 + 24);
      if (v19)
      {
        id v20 = v19;
        id v21 = sub_10005DCB8();
        os_log_type_t v22 = sub_10005E088();
        if (os_log_type_enabled(v21, v22))
        {
          NSString v23 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)NSString v23 = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "Turn on location updating.", v23, 2u);
          swift_slowDealloc();
        }

        [v20 startUpdatingLocation];
      }
    }
    [v10 coordinate];
    uint64_t v26 = sub_100024CD4(v24, v25);

    *(unsigned char *)(v1 + 40) = v26;
  }
  else
  {
    if (qword_1000978C8 != -1) {
      swift_once();
    }
    uint64_t v27 = sub_10005DCD8();
    sub_100008DB0(v27, (uint64_t)qword_10009FB08);
    long long v28 = sub_10005DCB8();
    os_log_type_t v29 = sub_10005E088();
    if (os_log_type_enabled(v28, v29))
    {
      objc_super v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)objc_super v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "We don't have a location.", v30, 2u);
      swift_slowDealloc();
    }

    return 8;
  }
  return v26;
}

void sub_1000236CC(uint64_t a1, double a2, double a3)
{
  uint64_t v6 = sub_10005DB38();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100008F4C(&qword_100098BB0);
  __chkstk_darwin(v10 - 8);
  double v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = nullsub_1(a2, a3);
  double v15 = v14;
  id v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v16(v12, a1, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) != 1)
  {
    Class isa = sub_10005DAD8().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }
  id v18 = objc_msgSend(objc_allocWithZone((Class)GEOHorizontalCelestialBodyData), "initWithLocation:date:body:", isa, 0, v13, v15);

  if (v18)
  {
    [v18 altitude];
  }
  else
  {
    if (qword_1000978C8 != -1) {
      swift_once();
    }
    uint64_t v19 = sub_10005DCD8();
    sub_100008DB0(v19, (uint64_t)qword_10009FB08);
    v16(v9, a1, v6);
    id v20 = sub_10005DCB8();
    os_log_type_t v21 = sub_10005E078();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 141558531;
      uint64_t v28 = 1752392040;
      sub_10005E138();
      *(_WORD *)(v22 + 12) = 2081;
      uint64_t v28 = *(void *)&a2;
      double v29 = a3;
      type metadata accessor for CLLocationCoordinate2D(0);
      uint64_t v23 = sub_10005DE98();
      uint64_t v28 = sub_100044640(v23, v24, &v30);
      sub_10005E138();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 22) = 2082;
      sub_100026DE0(&qword_100098BB8, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v25 = sub_10005E428();
      uint64_t v28 = sub_100044640(v25, v26, &v30);
      sub_10005E138();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to get elevationDegrees for location:%{private,mask.hash}s, date: %{public}s", (uint8_t *)v22, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
}

uint64_t sub_100023B2C()
{
  return _swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for SolarEvent()
{
  return self;
}

void sub_100023BA0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100008F4C(&qword_100098B70);
  *(void *)&double v5 = __chkstk_darwin(v4 - 8).n128_u64[0];
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(objc_msgSend(a1, "authorizationStatus", v5))
  {
    case 0u:
      if (qword_1000978C8 != -1) {
        swift_once();
      }
      uint64_t v20 = sub_10005DCD8();
      sub_100008DB0(v20, (uint64_t)qword_10009FB08);
      os_log_type_t v21 = sub_10005DCB8();
      os_log_type_t v22 = sub_10005E078();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Location access not determined. Try again.", v23, 2u);
        swift_slowDealloc();
      }

      [a1 requestWhenInUseAuthorizationWithPrompt];
      return;
    case 1u:
      if (qword_1000978C8 != -1) {
        swift_once();
      }
      uint64_t v24 = sub_10005DCD8();
      sub_100008DB0(v24, (uint64_t)qword_10009FB08);
      os_log_t v28 = (os_log_t)sub_10005DCB8();
      os_log_type_t v17 = sub_10005E078();
      if (!os_log_type_enabled(v28, v17)) {
        goto LABEL_27;
      }
      id v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v18 = 0;
      uint64_t v19 = "Location access restricted.";
      break;
    case 2u:
      if (qword_1000978C8 != -1) {
        swift_once();
      }
      uint64_t v25 = sub_10005DCD8();
      sub_100008DB0(v25, (uint64_t)qword_10009FB08);
      os_log_t v28 = (os_log_t)sub_10005DCB8();
      os_log_type_t v17 = sub_10005E078();
      if (!os_log_type_enabled(v28, v17)) {
        goto LABEL_27;
      }
      id v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v18 = 0;
      uint64_t v19 = "Location access denied.";
      break;
    case 3u:
    case 4u:
      if (qword_1000978C8 != -1) {
        swift_once();
      }
      uint64_t v8 = sub_10005DCD8();
      sub_100008DB0(v8, (uint64_t)qword_10009FB08);
      uint64_t v9 = sub_10005DCB8();
      os_log_type_t v10 = sub_10005E088();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Location access authorized.", v11, 2u);
        swift_slowDealloc();
      }

      uint64_t v12 = sub_10005E038();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 1, 1, v12);
      sub_10005E018();
      id v13 = v2;
      uint64_t v14 = sub_10005E008();
      double v15 = (void *)swift_allocObject();
      _OWORD v15[2] = v14;
      v15[3] = &protocol witness table for MainActor;
      v15[4] = v13;
      sub_1000387B0((uint64_t)v7, (uint64_t)&unk_100098B80, (uint64_t)v15);
      swift_release();
      return;
    default:
      if (qword_1000978C8 != -1) {
        swift_once();
      }
      uint64_t v16 = sub_10005DCD8();
      sub_100008DB0(v16, (uint64_t)qword_10009FB08);
      os_log_t v28 = (os_log_t)sub_10005DCB8();
      os_log_type_t v17 = sub_10005E078();
      if (!os_log_type_enabled(v28, v17)) {
        goto LABEL_27;
      }
      id v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v18 = 0;
      uint64_t v19 = "Location access authorization is unknown.";
      break;
  }
  _os_log_impl((void *)&_mh_execute_header, v28, v17, v19, v18, 2u);
  swift_slowDealloc();
LABEL_27:
  os_log_t v26 = v28;
}

uint64_t sub_1000240B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  sub_10005E018();
  v4[4] = sub_10005E008();
  uint64_t v6 = sub_10005DFF8();
  return _swift_task_switch(sub_100024148, v6, v5);
}

uint64_t sub_100024148()
{
  swift_release();
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v2 = Strong;
  if (Strong)
  {
    uint64_t v3 = *(void **)(Strong + 24);
    if (v3)
    {
      uint64_t v4 = qword_1000978C8;
      id v5 = v3;
      if (v4 != -1) {
        swift_once();
      }
      uint64_t v6 = sub_10005DCD8();
      sub_100008DB0(v6, (uint64_t)qword_10009FB08);
      uint64_t v7 = sub_10005DCB8();
      os_log_type_t v8 = sub_10005E088();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Turn on location updating.", v9, 2u);
        swift_slowDealloc();
      }

      [v5 startUpdatingLocation];
    }
    swift_release();
  }
  **(unsigned char **)(v0 + 16) = v2 == 0;
  os_log_type_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_10002444C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  sub_10005E018();
  v5[5] = sub_10005E008();
  uint64_t v7 = sub_10005DFF8();
  return _swift_task_switch(sub_1000244E8, v7, v6);
}

uint64_t sub_1000244E8()
{
  swift_release();
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v2 = Strong;
  if (Strong)
  {
    uint64_t v3 = *(void **)(v0 + 32);
    uint64_t v4 = *(void **)(Strong + 48);
    *(void *)(Strong + 48) = v3;
    id v5 = v3;

    uint64_t v6 = *(void **)(v2 + 24);
    if (v6)
    {
      uint64_t v7 = qword_1000978C8;
      id v8 = v6;
      if (v7 != -1) {
        swift_once();
      }
      uint64_t v9 = sub_10005DCD8();
      sub_100008DB0(v9, (uint64_t)qword_10009FB08);
      os_log_type_t v10 = sub_10005DCB8();
      os_log_type_t v11 = sub_10005E088();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Turn off location updating.", v12, 2u);
        swift_slowDealloc();
      }
      id v13 = *(void **)(v0 + 32);

      [v8 stopUpdatingLocation];
    }
    else
    {
      id v13 = *(void **)(v0 + 32);
    }

    swift_release();
  }
  **(unsigned char **)(v0 + 16) = v2 == 0;
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

id sub_100024748()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LocationDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for LocationDelegate()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for SolarEvent.EventType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100024880);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SolarEvent.EventType()
{
  return &type metadata for SolarEvent.EventType;
}

uint64_t sub_1000248B8()
{
  return sub_100026E28(&qword_100098B58, &qword_100098B60);
}

unint64_t sub_1000248F8()
{
  unint64_t result = qword_100098B68;
  if (!qword_100098B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098B68);
  }
  return result;
}

uint64_t sub_10002494C()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10002498C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100026E6C;
  return sub_1000240B0(a1, v4, v5, v6);
}

uint64_t sub_100024A40(char a1, float a2)
{
  uint64_t v3 = 8;
  sub_10004FCFC(0, 8, 0);
  uint64_t v5 = &byte_10007E998;
  uint64_t v6 = (float *)_swiftEmptyArrayStorage;
  do
  {
    uint64_t v7 = *v5++;
    float v8 = flt_100061DC0[v7];
    uint64_t v24 = v6;
    unint64_t v10 = *((void *)v6 + 2);
    unint64_t v9 = *((void *)v6 + 3);
    unint64_t v11 = v10 + 1;
    if (v10 >= v9 >> 1)
    {
      sub_10004FCFC(v9 > 1, v10 + 1, 1);
      uint64_t v6 = v24;
    }
    *((void *)v6 + 2) = v11;
    v6[v10 + 8] = vabds_f32(v8, a2);
    --v3;
  }
  while (v3);
  unint64_t v18 = 0;
  while (v18 != 7)
  {
    int v19 = *((unsigned __int8 *)&off_10007E978 + v18++ + 33);
    if (v19 == 4) {
      goto LABEL_7;
    }
  }
  unint64_t v18 = 4;
LABEL_7:
  unint64_t v12 = 0;
  unint64_t v13 = 0;
  char v14 = 1;
  float v15 = 3.4028e38;
  do
  {
    float v16 = v6[v13 + 8];
    if (a1)
    {
      if (v18 < v13) {
        goto LABEL_12;
      }
    }
    else if (v13 < v18)
    {
      goto LABEL_12;
    }
    if (v16 < v15) {
      unint64_t v12 = v13;
    }
    v14 &= v16 >= v15;
    if (v16 < v15) {
      float v15 = v6[v13 + 8];
    }
LABEL_12:
    ++v13;
  }
  while (v11 != v13);
  uint64_t result = swift_bridgeObjectRelease();
  if (v14)
  {
    if (qword_1000978C8 != -1) {
      swift_once();
    }
    uint64_t v20 = sub_10005DCD8();
    sub_100008DB0(v20, (uint64_t)qword_10009FB08);
    os_log_type_t v21 = sub_10005DCB8();
    os_log_type_t v22 = sub_10005E078();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "We couldn't find our closest solar event.", v23, 2u);
      swift_slowDealloc();
    }

    return 3;
  }
  else
  {
    if ((v12 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v12 < 8)
    {
      return *((unsigned __int8 *)&off_10007E978 + v12 + 32);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100024CD4(double a1, double a2)
{
  uint64_t v4 = sub_10005DB38();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v22 - v9;
  sub_10005DB18();
  sub_1000236CC((uint64_t)v10, a1, a2);
  float v12 = v11;
  sub_10005DA98();
  double v14 = v13;
  double v15 = nullsub_1(a1, a2);
  id v17 = objc_msgSend(objc_allocWithZone((Class)GEOSolarEventCalculator), "initWithLocation:time:altitudeInDegrees:accuracy:", v15, v16, v14, GEOAlmanacAltitudeSunset, 60.0);
  [v17 nextEventOfType:16];
  sub_10005DA88();
  sub_10005DAB8();
  uint64_t v19 = sub_100024A40(v18 < 43200.0, v12);

  uint64_t v20 = *(void (**)(char *, uint64_t))(v5 + 8);
  v20(v7, v4);
  v20(v10, v4);
  return v19;
}

uint64_t sub_100024EB0()
{
  uint64_t v179 = sub_10005DB78();
  uint64_t v181 = *(void *)(v179 - 8);
  __chkstk_darwin(v179);
  uint64_t v1 = (char *)&v141 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_10005DB88();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  double v178 = (char *)&v141 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v182 = sub_10005DB68();
  uint64_t v5 = *(void *)(v182 - 8);
  __chkstk_darwin(v182);
  int v176 = (char *)&v141 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v175 = sub_10005DBB8();
  uint64_t v180 = *(void *)(v175 - 8);
  __chkstk_darwin(v175);
  long long v174 = (char *)&v141 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100008F4C(&qword_100098BB0);
  __chkstk_darwin(v8 - 8);
  __int16 v148 = (char *)&v141 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  long long v150 = (char *)&v141 - v11;
  __chkstk_darwin(v12);
  long long v152 = (char *)&v141 - v13;
  __chkstk_darwin(v14);
  long long v154 = (char *)&v141 - v15;
  __chkstk_darwin(v16);
  long long v156 = (char *)&v141 - v17;
  __chkstk_darwin(v18);
  long long v158 = (char *)&v141 - v19;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v141 - v21;
  uint64_t v177 = sub_10005DB38();
  uint64_t v173 = *(void *)(v177 - 8);
  __chkstk_darwin(v177);
  int v147 = (char *)&v141 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  char v149 = (char *)&v141 - v25;
  __chkstk_darwin(v26);
  long long v151 = (char *)&v141 - v27;
  __chkstk_darwin(v28);
  long long v153 = (char *)&v141 - v29;
  __chkstk_darwin(v30);
  long long v155 = (char *)&v141 - v31;
  __chkstk_darwin(v32);
  double v34 = (char *)&v141 - v33;
  __chkstk_darwin(v35);
  double v172 = (char *)&v141 - v36;
  __chkstk_darwin(v37);
  double v39 = (char *)&v141 - v38;
  if (qword_1000978C8 != -1) {
    swift_once();
  }
  long long v157 = v34;
  uint64_t v40 = sub_10005DCD8();
  sub_100008DB0(v40, (uint64_t)qword_10009FB08);
  uint64_t v41 = sub_10005DCB8();
  os_log_type_t v42 = sub_10005E088();
  if (os_log_type_enabled(v41, v42))
  {
    char v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Making a guess at solar position based on time.", v43, 2u);
    swift_slowDealloc();
  }

  sub_10005DB18();
  char v44 = v174;
  sub_10005DBA8();
  long long v45 = *(void (**)(void))(v5 + 104);
  long long v46 = v176;
  unsigned int v169 = enum case for Calendar.MatchingPolicy.nextTime(_:);
  uint64_t v183 = v5;
  uint64_t v170 = v5 + 104;
  long long v168 = (void (*)(char *, void, uint64_t))v45;
  v45(v176);
  long long v47 = *(void (**)(void))(v3 + 104);
  long long v48 = v178;
  unsigned int v166 = enum case for Calendar.RepeatedTimePolicy.first(_:);
  uint64_t v167 = v3 + 104;
  long long v165 = (void (*)(char *, void, uint64_t))v47;
  v47(v178);
  uint64_t v49 = v3;
  uint64_t v50 = v181;
  long long v51 = *(void (**)(void))(v181 + 104);
  unsigned int v163 = enum case for Calendar.SearchDirection.forward(_:);
  uint64_t v52 = v2;
  uint64_t v53 = v179;
  uint64_t v164 = v181 + 104;
  v162 = (void (*)(char *, void, uint64_t))v51;
  v51(v1);
  sub_10005DB98();
  long long v54 = *(void (**)(char *, uint64_t))(v50 + 8);
  long long v159 = v1;
  uint64_t v55 = v53;
  uint64_t v56 = v52;
  long long v161 = v54;
  uint64_t v181 = v50 + 8;
  v54(v1, v55);
  double v57 = *(void (**)(char *, uint64_t))(v49 + 8);
  uint64_t v171 = v49 + 8;
  v57(v48, v52);
  long long v58 = *(void (**)(char *, uint64_t))(v183 + 8);
  v183 += 8;
  v58(v46, v182);
  uint64_t v59 = v180 + 8;
  int v60 = *(void (**)(char *, uint64_t))(v180 + 8);
  v60(v44, v175);
  uint64_t v61 = v173;
  double v62 = v39;
  uint64_t v63 = v177;
  long long v160 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v173 + 48);
  if (v160(v22, 1, v177) == 1)
  {
    (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v63);
    uint64_t v64 = (uint64_t)v22;
LABEL_24:
    sub_100014D24(v64, &qword_100098BB0);
    return 3;
  }
  float v145 = v60;
  float v146 = v57;
  int v65 = *(void (**)(char *, char *, uint64_t))(v61 + 32);
  double v66 = v172;
  uint64_t v144 = v61 + 32;
  float v143 = v65;
  v65(v172, v22, v63);
  if (sub_10005DAF8())
  {
    uint64_t v67 = *(void (**)(char *, uint64_t))(v61 + 8);
    v67(v66, v63);
    v67(v62, v63);
    return 0;
  }
  int v69 = v174;
  sub_10005DBA8();
  uint64_t v70 = v176;
  float v142 = v58;
  uint64_t v71 = v182;
  v168(v176, v169, v182);
  uint64_t v180 = v59;
  float v72 = v178;
  v165(v178, v166, v56);
  unint64_t v73 = v159;
  uint64_t v74 = v179;
  v162(v159, v163, v179);
  double v75 = v158;
  sub_10005DB98();
  v161(v73, v74);
  uint64_t v141 = v56;
  v146(v72, v56);
  uint64_t v76 = v177;
  v142(v70, v71);
  v145(v69, v175);
  if (v160(v75, 1, v76) == 1)
  {
    float v77 = *(void (**)(char *, uint64_t))(v173 + 8);
    v77(v172, v76);
    v77(v62, v76);
    uint64_t v64 = (uint64_t)v75;
    goto LABEL_24;
  }
  id v78 = v157;
  v143(v157, v75, v76);
  if (sub_10005DAF8())
  {
    float v79 = *(void (**)(char *, uint64_t))(v173 + 8);
    v79(v78, v76);
    v79(v172, v76);
    v79(v62, v76);
    return 1;
  }
  double v80 = v174;
  sub_10005DBA8();
  uint64_t v81 = v176;
  uint64_t v82 = v182;
  v168(v176, v169, v182);
  float v83 = v178;
  uint64_t v84 = v141;
  v165(v178, v166, v141);
  uint64_t v85 = v179;
  v162(v73, v163, v179);
  uint64_t v86 = v156;
  sub_10005DB98();
  v161(v73, v85);
  v146(v83, v84);
  uint64_t v87 = v177;
  v142(v81, v82);
  v145(v80, v175);
  if (v160(v86, 1, v87) == 1)
  {
    uint64_t v88 = *(void (**)(char *, uint64_t))(v173 + 8);
    v88(v157, v87);
    v88(v172, v87);
    v88(v62, v87);
    uint64_t v64 = (uint64_t)v86;
    goto LABEL_24;
  }
  id v89 = v155;
  v143(v155, v86, v87);
  if (sub_10005DAF8())
  {
    id v90 = *(void (**)(char *, uint64_t))(v173 + 8);
    v90(v89, v87);
    v90(v157, v87);
    v90(v172, v87);
    v90(v62, v87);
    return 2;
  }
  id v91 = v174;
  sub_10005DBA8();
  long long v92 = v176;
  long long v93 = v62;
  uint64_t v94 = v182;
  v168(v176, v169, v182);
  long long v95 = v178;
  v165(v178, v166, v84);
  long long v96 = v159;
  uint64_t v97 = v179;
  v162(v159, v163, v179);
  long long v98 = v154;
  long long v158 = v93;
  sub_10005DB98();
  v161(v96, v97);
  v146(v95, v84);
  v142(v92, v94);
  uint64_t v99 = v177;
  v145(v91, v175);
  if (v160(v98, 1, v99) == 1)
  {
    long long v100 = *(void (**)(char *, uint64_t))(v173 + 8);
    v100(v155, v99);
    v100(v157, v99);
    v100(v172, v99);
    long long v101 = v158;
    uint64_t v102 = v99;
LABEL_23:
    v100(v101, v102);
    uint64_t v64 = (uint64_t)v98;
    goto LABEL_24;
  }
  long long v103 = v153;
  v143(v153, v98, v99);
  long long v104 = v158;
  if (sub_10005DAF8())
  {
    long long v105 = *(void (**)(char *, uint64_t))(v173 + 8);
    v105(v103, v99);
    v105(v155, v99);
    v105(v157, v99);
    v105(v172, v99);
    v105(v104, v99);
    return 3;
  }
  long long v106 = v174;
  sub_10005DBA8();
  int v107 = v176;
  uint64_t v108 = v182;
  v168(v176, v169, v182);
  long long v109 = v178;
  v165(v178, v166, v84);
  double v110 = v159;
  uint64_t v111 = v179;
  v162(v159, v163, v179);
  long long v98 = v152;
  sub_10005DB98();
  v161(v110, v111);
  v146(v109, v84);
  v142(v107, v108);
  uint64_t v112 = v177;
  v145(v106, v175);
  if (v160(v98, 1, v112) == 1)
  {
    long long v100 = *(void (**)(char *, uint64_t))(v173 + 8);
    v100(v153, v112);
    v100(v155, v112);
    v100(v157, v112);
    v100(v172, v112);
    long long v101 = v158;
    uint64_t v102 = v112;
    goto LABEL_23;
  }
  double v113 = v151;
  v143(v151, v98, v112);
  long long v114 = v158;
  if (sub_10005DAF8())
  {
    long long v115 = *(void (**)(char *, uint64_t))(v173 + 8);
    v115(v113, v112);
    v115(v153, v112);
    v115(v155, v112);
    v115(v157, v112);
    v115(v172, v112);
    v115(v114, v112);
    return 4;
  }
  else
  {
    long long v116 = v174;
    sub_10005DBA8();
    char v117 = v176;
    uint64_t v118 = v182;
    v168(v176, v169, v182);
    double v119 = v178;
    v165(v178, v166, v84);
    double v120 = v159;
    uint64_t v121 = v179;
    v162(v159, v163, v179);
    double v122 = v150;
    sub_10005DB98();
    v161(v120, v121);
    v146(v119, v84);
    v142(v117, v118);
    uint64_t v123 = v177;
    v145(v116, v175);
    if (v160(v122, 1, v123) == 1)
    {
      int v124 = *(void (**)(char *, uint64_t))(v173 + 8);
      v124(v151, v123);
      v124(v153, v123);
      v124(v155, v123);
      v124(v157, v123);
      v124(v172, v123);
      v124(v158, v123);
      uint64_t v64 = (uint64_t)v122;
      goto LABEL_24;
    }
    int v125 = v149;
    v143(v149, v122, v123);
    char v126 = v158;
    char v127 = sub_10005DAF8();
    double v128 = v155;
    if (v127)
    {
      double v129 = *(void (**)(char *, uint64_t))(v173 + 8);
      v129(v125, v123);
      v129(v151, v123);
      v129(v153, v123);
      v129(v128, v123);
      v129(v157, v123);
      v129(v172, v123);
      v129(v126, v123);
      return 5;
    }
    else
    {
      uint64_t v130 = v174;
      sub_10005DBA8();
      double v131 = v176;
      v168(v176, v169, v182);
      uint64_t v132 = v178;
      v165(v178, v166, v84);
      id v133 = v159;
      uint64_t v134 = v179;
      v162(v159, v163, v179);
      uint64_t v135 = v148;
      sub_10005DB98();
      v161(v133, v134);
      v146(v132, v84);
      v142(v131, v182);
      uint64_t v136 = v177;
      v145(v130, v175);
      if (v160(v135, 1, v136) == 1)
      {
        long long v98 = v135;
        long long v100 = *(void (**)(char *, uint64_t))(v173 + 8);
        v100(v149, v136);
        v100(v151, v136);
        v100(v153, v136);
        v100(v155, v136);
        v100(v157, v136);
        v100(v172, v136);
        long long v101 = v158;
        uint64_t v102 = v136;
        goto LABEL_23;
      }
      char v137 = v147;
      v143(v147, v135, v136);
      __int16 v138 = v158;
      char v139 = sub_10005DAF8();
      float v140 = *(void (**)(char *, uint64_t))(v173 + 8);
      v140(v137, v136);
      v140(v149, v136);
      v140(v151, v136);
      v140(v153, v136);
      v140(v155, v136);
      v140(v157, v136);
      v140(v172, v136);
      v140(v138, v136);
      if (v139) {
        return 6;
      }
      else {
        return 7;
      }
    }
  }
}

uint64_t sub_1000266D4(unint64_t a1)
{
  uint64_t v2 = sub_100008F4C(&qword_100098B70);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000978C8 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10005DCD8();
  sub_100008DB0(v5, (uint64_t)qword_10009FB08);
  uint64_t v6 = sub_10005DCB8();
  os_log_type_t v7 = sub_10005E088();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "We received an updated location.", v8, 2u);
    swift_slowDealloc();
  }

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_10005E328();
    if (v9) {
      goto LABEL_7;
    }
LABEL_23:
    return swift_bridgeObjectRelease();
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v9) {
    goto LABEL_23;
  }
LABEL_7:
  uint64_t result = sub_10005E018();
  uint64_t v27 = result;
  if (v9 >= 1)
  {
    uint64_t v11 = 0;
    unint64_t v26 = a1 & 0xC000000000000001;
    unint64_t v12 = a1;
    while (1)
    {
      if (v26) {
        id v13 = (id)sub_10005E218();
      }
      else {
        id v13 = *(id *)(a1 + 8 * v11 + 32);
      }
      uint64_t v14 = v13;
      uint64_t v15 = sub_10005E038();
      uint64_t v16 = *(void *)(v15 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
      id v17 = v28;
      id v18 = v14;
      uint64_t v19 = sub_10005E008();
      uint64_t v20 = (void *)swift_allocObject();
      v20[2] = v19;
      v20[3] = &protocol witness table for MainActor;
      v20[4] = v17;
      v20[5] = v18;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v4, 1, v15) == 1)
      {
        sub_100014D24((uint64_t)v4, &qword_100098B70);
        if (!v20[2]) {
          goto LABEL_18;
        }
      }
      else
      {
        sub_10005E028();
        (*(void (**)(char *, uint64_t))(v16 + 8))(v4, v15);
        if (!v20[2])
        {
LABEL_18:
          uint64_t v21 = 0;
          uint64_t v23 = 0;
          goto LABEL_19;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v21 = sub_10005DFF8();
      uint64_t v23 = v22;
      swift_unknownObjectRelease();
LABEL_19:
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = &unk_100098B98;
      *(void *)(v24 + 24) = v20;
      sub_100008F4C((uint64_t *)&unk_100099B40);
      if (v23 | v21)
      {
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = v21;
        uint64_t v32 = v23;
      }
      ++v11;
      swift_task_create();

      swift_release();
      a1 = v12;
      if (v9 == v11) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100026AF4()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100026B3C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100026BFC;
  return sub_10002444C(a1, v4, v5, v7, v6);
}

uint64_t sub_100026BFC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100026CF0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100026D28(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100026BFC;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100099B30 + dword_100099B30);
  return v6(a1, v4);
}

uint64_t sub_100026DE0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100026E28(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014768(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_100026E70(uint64_t a1, uint64_t a2)
{
  if (sub_10005DEC8() == 7
    && (v17._countAndFlagsBits = 35, v17._object = (void *)0xE100000000000000, sub_10005DF18(v17)))
  {
    v15[0] = a1;
    v15[1] = a2;
    uint64_t v4 = sub_10005DF38();
    _OWORD v15[2] = v4;
    v15[3] = v5;
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (!v6) {
      __break(1u);
    }
    id result = (id)sub_1000270DC(v4, v5);
    if (v8)
    {
      sub_100027124(1);
      swift_bridgeObjectRelease();
      id v9 = objc_allocWithZone((Class)NSScanner);
      NSString v10 = sub_10005DE38();
      swift_bridgeObjectRelease();
      id v11 = [v9 initWithString:v10];

      v15[0] = 0;
      if ([v11 scanHexLongLong:v15]) {
        id v12 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithRed:(double)BYTE2(v15[0]) / 255.0 green:(double)BYTE1(v15[0]) / 255.0 blue:(double)LOBYTE(v15[0]) / 255.0 alpha:1.0];
      }
      else {
        id v12 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithRed:1.0 green:1.0 blue:1.0 alpha:1.0];
      }
      id v14 = v12;

      return v14;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    id v13 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    return [v13 initWithRed:1.0 green:1.0 blue:1.0 alpha:1.0];
  }
  return result;
}

uint64_t sub_1000270DC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return sub_10005DF28();
  }
  else {
    return 0;
  }
}

uint64_t sub_100027124(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      id result = sub_10005DED8();
      if ((v1 & 1) == 0)
      {
        uint64_t v2 = result;
        id result = 15;
        uint64_t v1 = v2;
        return String.removeSubrange(_:)(result, v1);
      }
    }
    __break(1u);
    return String.removeSubrange(_:)(result, v1);
  }
  return result;
}

uint64_t sub_1000271AC()
{
  uint64_t v1 = v0;
  uint64_t v19 = sub_100027514(0, 13);
  sub_100008F4C(&qword_100098DF8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100061DE0;
  *(void *)(inited + 32) = 0;
  *(void *)(inited + 40) = swift_getKeyPath();
  *(void *)(inited + 48) = 1;
  *(void *)(inited + 56) = swift_getKeyPath();
  *(void *)(inited + 64) = 2;
  *(void *)(inited + 72) = swift_getKeyPath();
  *(void *)(inited + 80) = 3;
  *(void *)(inited + 88) = swift_getKeyPath();
  *(void *)(inited + 96) = 4;
  *(void *)(inited + 104) = swift_getKeyPath();
  *(void *)(inited + 112) = 5;
  *(void *)(inited + 120) = swift_getKeyPath();
  *(void *)(inited + 128) = 6;
  *(void *)(inited + 136) = swift_getKeyPath();
  *(void *)(inited + 144) = 7;
  *(void *)(inited + 152) = swift_getKeyPath();
  *(void *)(inited + 160) = 8;
  *(void *)(inited + 168) = swift_getKeyPath();
  *(void *)(inited + 176) = 9;
  *(void *)(inited + 184) = swift_getKeyPath();
  *(void *)(inited + 192) = 10;
  *(void *)(inited + 200) = swift_getKeyPath();
  *(void *)(inited + 208) = 11;
  *(void *)(inited + 216) = swift_getKeyPath();
  *(void *)(inited + 224) = 12;
  *(void *)(inited + 232) = swift_getKeyPath();
  unint64_t v3 = sub_100012B98((void *)inited);
  swift_setDeallocating();
  sub_100008F4C(&qword_100098E00);
  uint64_t result = swift_arrayDestroy();
  int64_t v5 = 0;
  unint64_t v6 = v3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(v3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v11 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v5 << 6))
  {
    unint64_t v16 = *(void *)(*(void *)(v3 + 48) + 8 * i);
    swift_retain();
    sub_10002C6BC(v1);
    swift_getAtKeyPath();
    sub_10002C790(v1);
    uint64_t v17 = v19;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      if ((v16 & 0x8000000000000000) != 0) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t result = sub_10002B184();
      uint64_t v17 = result;
      uint64_t v19 = result;
      if ((v16 & 0x8000000000000000) != 0)
      {
LABEL_25:
        __break(1u);
LABEL_26:
        swift_release();
        return v19;
      }
    }
    if (v16 >= *(void *)(v17 + 16))
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    *(void *)(v17 + 8 * v16 + 32) = v18;
    swift_unknownObjectRelease();
    sub_10005DFB8();
    uint64_t result = swift_release();
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_28;
    }
    if (v13 >= v10) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        goto LABEL_26;
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          goto LABEL_26;
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v9 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v10) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100027514(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t result = sub_10005E2F8();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      sub_100008F4C(&qword_100098E08);
      uint64_t v4 = (void *)sub_10005DFD8();
      v4[2] = a2;
      uint64_t v8 = v4;
      v4[4] = a1;
      if (a2 != 1)
      {
        v4[5] = a1;
        uint64_t v5 = a2 - 2;
        if (v5)
        {
          unint64_t v6 = v4 + 6;
          do
          {
            *v6++ = a1;
            swift_unknownObjectRetain();
            --v5;
          }
          while (v5);
        }
        swift_unknownObjectRetain();
      }
    }
    else
    {
      uint64_t v8 = _swiftEmptyArrayStorage;
      swift_unknownObjectRelease();
    }
    sub_10005DFB8();
    return (uint64_t)v8;
  }
  return result;
}

void *sub_100027614(unint64_t a1, int32x2_t a2, int32x2_t a3, int32x2_t a4, int32x2_t a5)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    uint64_t result = (void *)sub_10005E2F8();
    __break(1u);
    return result;
  }
  if (!a1) {
    return _swiftEmptyArrayStorage;
  }
  type metadata accessor for Pro24CropRectangle(0);
  uint64_t result = (void *)sub_10005DFD8();
  result[2] = a1;
  uint64_t v7 = (__int32 *)(result + 4);
  if (a1 < 8)
  {
    unint64_t v8 = 0;
    __int32 v10 = a4.i32[0];
    __int32 v9 = a5.i32[0];
    __int32 v12 = a2.i32[0];
    __int32 v11 = a3.i32[0];
LABEL_9:
    unint64_t v20 = a1 - v8;
    do
    {
      *uint64_t v7 = v12;
      v7[1] = v11;
      _OWORD v7[2] = v10;
      v7[3] = v9;
      v7 += 4;
      --v20;
    }
    while (v20);
    return result;
  }
  unint64_t v8 = a1 & 0xFFFFFFFFFFFFFFF8;
  v7 += 4 * (a1 & 0xFFFFFFFFFFFFFFF8);
  __int32 v12 = a2.i32[0];
  __int32 v11 = a3.i32[0];
  int32x4_t v13 = vdupq_lane_s32(a2, 0);
  int32x4_t v14 = vdupq_lane_s32(a3, 0);
  __int32 v10 = a4.i32[0];
  __int32 v9 = a5.i32[0];
  int32x4_t v15 = vdupq_lane_s32(a4, 0);
  int32x4_t v16 = vdupq_lane_s32(a5, 0);
  uint64_t v17 = (float *)(result + 12);
  unint64_t v18 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    uint64_t v19 = v17 - 16;
    vst4q_f32(v19, *(float32x4x4_t *)v13.i8);
    vst4q_f32(v17, *(float32x4x4_t *)v13.i8);
    v17 += 32;
    v18 -= 8;
  }
  while (v18);
  if (v8 != a1) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_100027734@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100008F4C(&qword_1000984A0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  unint64_t v8 = &v13[-v7];
  uint64_t v9 = v1 + OBJC_IVAR____TtC22MercuryPosterExtension22Pro24WallpaperRenderer____lazy_storage___baseURL;
  swift_beginAccess();
  sub_10002C9A8(v9, (uint64_t)v8);
  uint64_t v10 = sub_10005DA28();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v11 + 32))(a1, v8, v10);
  }
  sub_10002C65C((uint64_t)v8);
  sub_100027904(v1, a1);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v5, a1, v10);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v5, 0, 1, v10);
  swift_beginAccess();
  sub_10002CA10((uint64_t)v5, v9);
  return swift_endAccess();
}

uint64_t sub_100027904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  uint64_t v2 = sub_10005D988();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100008F4C(&qword_1000984A0);
  __chkstk_darwin(v6 - 8);
  unint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10005DA28();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  __int32 v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v29 = (char *)v25 - v14;
  int32x4_t v15 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 2uLL, 1);
  uint64_t v16 = sub_10005DFA8();

  if (*(void *)(v16 + 16))
  {
    uint64_t v28 = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    uint64_t v17 = *(void (**)(char *, void, uint64_t))(v3 + 104);
    v17(v5, enum case for URL.DirectoryHint.inferFromPath(_:), v2);
    uint64_t v27 = v17;
    sub_10005DA08();
    unint64_t v32 = 0xD000000000000032;
    unint64_t v33 = 0x8000000100064C40;
    unsigned int v26 = enum case for URL.DirectoryHint.isDirectory(_:);
    ((void (*)(char *))v17)(v5);
    v25[1] = sub_10002CA78();
    unint64_t v18 = v29;
    sub_10005DA18();
    uint64_t v19 = *(void (**)(char *, uint64_t))(v3 + 8);
    v19(v5, v2);
    swift_bridgeObjectRelease();
    unint64_t v20 = *(void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v21 = v28;
    v20(v12, v28);
    uint64_t v22 = 0x31374A2D3731374ALL;
    if (*(unsigned char *)(v30 + 64)) {
      uint64_t v22 = 0x32374A2D3032374ALL;
    }
    unint64_t v23 = 0xE900000000000031;
    if (!*(unsigned char *)(v30 + 64)) {
      unint64_t v23 = 0xE900000000000038;
    }
    unint64_t v32 = v22;
    unint64_t v33 = v23;
    v27(v5, v26, v2);
    sub_10005DA18();
    v19(v5, v2);
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(char *, uint64_t))v20)(v18, v21);
  }
  else
  {
    swift_bridgeObjectRelease();
    return URL.init(fileURLWithPath:)(0, 0xE000000000000000);
  }
}

uint64_t sub_100027CF8()
{
  uint64_t v1 = sub_10005DCA8();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v41 = v1;
  uint64_t v42 = v2;
  __chkstk_darwin(v1);
  uint64_t v40 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10005DA28();
  char v43 = *(uint64_t (**)(char *, uint64_t))(v4 - 8);
  uint64_t v44 = v4;
  __chkstk_darwin(v4);
  uint64_t v39 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  long long v48 = (char *)&v36 - v7;
  unint64_t v8 = *(void **)(v0 + 328);
  sub_100008F4C((uint64_t *)&unk_100098E30);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100061DF0;
  *(void *)(inited + 32) = 0x73646E756F62;
  *(void *)(inited + 40) = 0xE600000000000000;
  *(void *)(inited + 48) = [objc_allocWithZone((Class)NSNull) init];
  *(void *)(inited + 56) = 0x6E6F697469736F70;
  *(void *)(inited + 64) = 0xE800000000000000;
  *(void *)(inited + 72) = [objc_allocWithZone((Class)NSNull) init];
  *(void *)(inited + 80) = 0x726F66736E617274;
  *(void *)(inited + 88) = 0xE90000000000006DLL;
  *(void *)(inited + 96) = [objc_allocWithZone((Class)NSNull) init];
  *(void *)(inited + 104) = 0xD000000000000014;
  *(void *)(inited + 112) = 0x8000000100064C00;
  *(void *)(inited + 120) = [objc_allocWithZone((Class)NSNull) init];
  *(void *)(inited + 128) = 0x696F507472617473;
  *(void *)(inited + 136) = 0xEA0000000000746ELL;
  *(void *)(inited + 144) = [objc_allocWithZone((Class)NSNull) init];
  *(void *)(inited + 152) = 0x746E696F50646E65;
  *(void *)(inited + 160) = 0xE800000000000000;
  *(void *)(inited + 168) = [objc_allocWithZone((Class)NSNull) init];
  *(void *)(inited + 176) = 0x7974696361706FLL;
  *(void *)(inited + 184) = 0xE700000000000000;
  *(void *)(inited + 192) = [objc_allocWithZone((Class)NSNull) init];
  sub_10000A4FC(inited);
  sub_100008F4C((uint64_t *)&unk_1000992C0);
  Class isa = sub_10005DDE8().super.isa;
  swift_bridgeObjectRelease();
  [v8 setActions:isa];

  uint64_t v11 = *(void **)(v0 + 320);
  id v38 = v8;
  id v12 = [v8 actions];
  if (v12)
  {
    uint64_t v13 = v12;
    sub_10005DDF8();

    v14.super.Class isa = sub_10005DDE8().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v14.super.Class isa = 0;
  }
  id v37 = v11;
  [v11 setActions:v14.super.isa];

  uint64_t v15 = v39;
  sub_100027734(v39);
  uint64_t v16 = v40;
  sub_10005DC88();
  uint64_t v17 = v48;
  sub_10005D9C8();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v41);
  uint64_t v18 = v44;
  uint64_t v19 = (void (*)(uint64_t, uint64_t))*((void *)v43 + 1);
  v19(v15, v44);
  sub_10005D9E8(0);
  id v20 = objc_allocWithZone((Class)UIImage);
  NSString v21 = sub_10005DE38();
  swift_bridgeObjectRelease();
  id v22 = [v20 initWithContentsOfFile:v21];

  if (v22)
  {
    id v23 = [v22 CGImage];
    char v43 = (uint64_t (*)(char *, uint64_t))v19;
    id v24 = v38;
    [v38 setContents:v23];

    objc_msgSend(v24, "setContentsCenter:", 0.0, 1.0, 1.0, 1.0);
    sub_10005DE68();
    id v25 = objc_allocWithZone((Class)CAFilter);
    NSString v26 = sub_10005DE38();
    swift_bridgeObjectRelease();
    id v27 = [v25 initWithType:v26];

    uint64_t v28 = self;
    memset(v45, 0, sizeof(v45));
    long long v46 = xmmword_100061E00;
    int v47 = 1065353216;
    id v29 = [v28 valueWithCAColorMatrix:v45];
    NSString v30 = sub_10005DE38();
    [v27 setValue:v29 forKey:v30];

    sub_100008F4C(&qword_100098E40);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_10005F1A0;
    *(void *)(v31 + 56) = sub_10002C968();
    *(void *)(v31 + 32) = v27;
    id v32 = v27;
    Class v33 = sub_10005DF98().super.isa;
    swift_bridgeObjectRelease();
    [v24 setFilters:v33];

    [v24 setContentsScale:2.0];
    [v24 setContentsGravity:kCAGravityResize];
    [v37 addSublayer:v24];

    return v43(v48, v18);
  }
  else
  {
    sub_10002C52C();
    swift_allocError();
    unsigned char *v35 = 0;
    swift_willThrow();
    return ((uint64_t (*)(char *, uint64_t))v19)(v17, v18);
  }
}

void sub_1000283F4(void *a1@<X8>)
{
  uint64_t v48 = sub_10005D958();
  uint64_t v47 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v44 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_10005D938();
  uint64_t v43 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v42 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10005D968();
  uint64_t v49 = *(void *)(v5 - 8);
  uint64_t v50 = v5;
  __chkstk_darwin(v5);
  long long v46 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10005DCA8();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [objc_allocWithZone((Class)MTKTextureLoader) initWithDevice:*(void *)(v1 + 16)];
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0;
  id v41 = (id)(v12 + 16);
  sub_10005DC88();
  id v62 = sub_100028E24((NSString *)0xD000000000000014, (void *)0x8000000100064AC0, (uint64_t)v10, 1, v11, v1, v12);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v8 + 8);
  v13(v10, v7);
  sub_10005DC88();
  id v61 = sub_100028E24((NSString *)0xD000000000000014, (void *)0x8000000100064AE0, (uint64_t)v10, 1, v11, v1, v12);
  v13(v10, v7);
  sub_10005DC88();
  id v60 = sub_100028E24((NSString *)0xD000000000000015, (void *)0x8000000100064B00, (uint64_t)v10, 1, v11, v1, v12);
  v13(v10, v7);
  sub_10005DC88();
  id v59 = sub_100028E24((NSString *)0xD000000000000015, (void *)0x8000000100064B20, (uint64_t)v10, 1, v11, v1, v12);
  v13(v10, v7);
  if (qword_1000977B0 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_100008DB0(v7, (uint64_t)qword_10009F9E0);
  id v58 = sub_100028E24((NSString *)0xD000000000000014, (void *)0x8000000100064B40, v14, 1, v11, v1, v12);
  sub_10005DC88();
  id v57 = sub_100028E24((NSString *)0xD000000000000014, (void *)0x8000000100064B60, (uint64_t)v10, 1, v11, v1, v12);
  v13(v10, v7);
  id v56 = sub_100028E24((NSString *)0xD000000000000015, (void *)0x8000000100064B80, v14, 1, v11, v1, v12);
  sub_10005DC88();
  id v15 = sub_100028E24((NSString *)0xD000000000000015, (void *)0x8000000100064BA0, (uint64_t)v10, 1, v11, v1, v12);
  v13(v10, v7);
  sub_10005DC88();
  id v55 = sub_100028E24((NSString *)0xD000000000000011, (void *)0x8000000100064BC0, (uint64_t)v10, 0, v11, v1, v12);
  v13(v10, v7);
  sub_10005DC88();
  id v54 = sub_100028E24((NSString *)0x6F69746365726964, (void *)0xEE006B73616D206ELL, (uint64_t)v10, 1, v11, v1, v12);
  v13(v10, v7);
  sub_10005DC88();
  id v53 = sub_100028E24((NSString *)0x726964206B616570, (void *)0xEE006E6F69746365, (uint64_t)v10, 0, v11, v1, v12);
  v13(v10, v7);
  sub_10005DC88();
  id v52 = sub_100028E24((NSString *)0x73616D206B616570, (void *)0xE90000000000006BLL, (uint64_t)v10, 1, v11, v1, v12);
  v13(v10, v7);
  sub_10005DC88();
  id v51 = sub_100028E24((NSString *)0xD000000000000013, (void *)0x8000000100064BE0, (uint64_t)v10, 1, v11, v1, v12);
  v13(v10, v7);
  if (qword_1000978D0 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_10005DCD8();
  sub_100008DB0(v16, (uint64_t)qword_10009FB20);
  uint64_t v17 = sub_10005DCB8();
  os_log_type_t v18 = sub_10005E068();
  int v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    os_log_t v40 = v17;
    id v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    uint64_t v66 = v39;
    id v38 = v20;
    *(_DWORD *)id v20 = 136315138;
    id v37 = v20 + 12;
    uint64_t v35 = v20 + 4;
    swift_beginAccess();
    uint64_t v63 = *(void *)(v12 + 16);
    uint64_t v21 = v43;
    id v22 = *(void (**)(char *, void, uint64_t))(v43 + 104);
    int v36 = v19;
    id v23 = v42;
    uint64_t v24 = v45;
    v22(v42, enum case for ByteCountFormatStyle.Style.memory(_:), v45);
    id v25 = v44;
    sub_10005D948();
    id v41 = v15;
    NSString v26 = v46;
    sub_10005D7D8();
    id v27 = *(void (**)(char *, uint64_t))(v47 + 8);
    swift_retain();
    v27(v25, v48);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v24);
    sub_10002C878();
    sub_10002C920(&qword_100098E18, (void (*)(uint64_t))&type metadata accessor for ByteCountFormatStyle);
    sub_10002C8CC();
    uint64_t v28 = v50;
    sub_10005E168();
    id v29 = v26;
    id v15 = v41;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v29, v28);
    uint64_t v64 = sub_100044640(v64, v65, &v66);
    sub_10005E138();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v17 = v40;
    _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v36, "total texture memory: %s", v38, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  swift_release();

  id v30 = v61;
  *a1 = v62;
  a1[1] = v30;
  id v31 = v59;
  a1[2] = v60;
  a1[3] = v31;
  id v32 = v57;
  a1[4] = v58;
  a1[5] = v32;
  a1[6] = v56;
  a1[7] = v15;
  id v33 = v54;
  a1[8] = v55;
  a1[9] = v33;
  id v34 = v52;
  a1[10] = v53;
  a1[11] = v34;
  a1[12] = v51;
}

id sub_100028E24(NSString *a1, void *a2, uint64_t a3, char a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v42 = a7;
  uint64_t v11 = sub_10005DA28();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v41 - v16;
  sub_100027734((uint64_t)v14);
  sub_10005D9C8();
  os_log_type_t v18 = *(void (**)(char *, uint64_t))(v12 + 8);
  v18(v14, v11);
  sub_10005D9B8(v19);
  uint64_t v21 = v20;
  v18(v17, v11);
  sub_100008F4C(&qword_1000984A8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10005FAA0;
  MTKTextureLoaderOption v23 = MTKTextureLoaderOptionSRGB;
  *(void *)(inited + 32) = MTKTextureLoaderOptionSRGB;
  *(unsigned char *)(inited + 40) = a4;
  MTKTextureLoaderOption v24 = MTKTextureLoaderOptionTextureStorageMode;
  *(void *)(inited + 80) = 2;
  *(void *)(inited + 64) = &type metadata for Bool;
  *(void *)(inited + 72) = v24;
  MTKTextureLoaderOption v25 = MTKTextureLoaderOptionGenerateMipmaps;
  *(void *)(inited + 104) = &type metadata for UInt;
  *(void *)(inited + 112) = v25;
  *(void *)(inited + 144) = &type metadata for Bool;
  *(unsigned char *)(inited + 120) = 0;
  NSString v26 = v23;
  id v27 = v24;
  uint64_t v28 = v25;
  sub_10000A618(inited);
  type metadata accessor for Option(0);
  sub_10002C920(&qword_1000985F0, type metadata accessor for Option);
  Class isa = sub_10005DDE8().super.isa;
  swift_bridgeObjectRelease();
  v44[0] = 0;
  id v30 = [a5 newTextureWithContentsOfURL:v21 options:isa error:v44];

  id v31 = v44[0];
  if (v30)
  {
    a2 = (void *)(v42 + 16);
    id v32 = [v30 allocatedSize];
    swift_beginAccess();
    if (!__OFADD__(*a2, v32))
    {
      *a2 += v32;
      return v30;
    }
    __break(1u);
    goto LABEL_11;
  }
  id v33 = v31;
  MTKTextureLoaderOption v24 = a1;
  sub_10005D978();

  swift_willThrow();
  if (qword_1000978D0 != -1) {
LABEL_11:
  }
    swift_once();
  uint64_t v34 = sub_10005DCD8();
  sub_100008DB0(v34, (uint64_t)qword_10009FB20);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v35 = sub_10005DCB8();
  os_log_type_t v36 = sub_10005E078();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = swift_slowAlloc();
    id v38 = (void *)swift_slowAlloc();
    v44[0] = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v43 = sub_100044640((uint64_t)v24, (unint64_t)a2, (uint64_t *)v44);
    sub_10005E138();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v37 + 12) = 2112;
    swift_errorRetain();
    uint64_t v39 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v43 = v39;
    sub_10005E138();
    void *v38 = v39;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "failed to load texture “%s”: %@", (uint8_t *)v37, 0x16u);
    sub_100008F4C(&qword_100097D50);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  return 0;
}

void sub_10002936C(float *a1, void *a2, void *a3, unsigned __int8 a4, void *a5)
{
  uint64_t v6 = v5;
  id v10 = [objc_allocWithZone((Class)MTLRenderPassDescriptor) init];
  id v11 = [v10 colorAttachments];
  id v12 = [v11 objectAtIndexedSubscript:0];

  if (!v12) {
    __break(1u);
  }
  [v12 setTexture:a2];
  [v12 setLoadAction:2];
  objc_msgSend(v12, "setClearColor:", 0.0, 0.0, 0.0, 1.0);
  [v12 setStoreAction:1];
  id v13 = [a5 renderCommandEncoderWithDescriptor:v10];
  if (!v13)
  {
    sub_10002C52C();
    swift_allocError();
    unsigned char *v35 = 1;
    swift_willThrow();
LABEL_60:

    return;
  }
  uint64_t v14 = v13;
  sub_100014990((uint64_t)(a1 + 14), (uint64_t)v56);
  float v15 = sub_100015590();
  float v17 = *a1;
  float v16 = a1[1];
  *(float *)uint64_t v50 = v15;
  *(float *)&v50[1] = v17;
  *(float *)&v50[2] = v16;
  float v18 = (float)(uint64_t)[a2 width];
  *(float *)&v50[3] = v18 / (float)(uint64_t)[a2 height];
  float v19 = 1.0 - v16;
  float v20 = WallpaperState.rotationLandscapeAmount.getter();
  *(float *)&double v21 = fminf(v19 / 0.6, 1.0);
  if (*(float *)&v21 < 0.0) {
    float v22 = 0.0;
  }
  else {
    float v22 = *(float *)&v21;
  }
  *(float *)&double v21 = v22;
  [*(id *)(v6 + 184) _solveForInput:v21];
  v50[4] = LODWORD(v23);
  *(float *)&double v23 = fminf(v19 / 0.9, 1.0);
  if (*(float *)&v23 < 0.0) {
    *(float *)&double v23 = 0.0;
  }
  [*(id *)(v6 + 200) _solveForInput:v23];
  *(float *)&v50[5] = 1.0 - *(float *)&v24;
  *(float *)&double v24 = fminf(v19 / 0.4, 1.0);
  if (*(float *)&v24 < 0.0) {
    *(float *)&double v24 = 0.0;
  }
  [*(id *)(v6 + 208) _solveForInput:v24];
  *(float *)&v50[6] = 1.0 - *(float *)&v25;
  *(float *)&double v25 = fminf(v19 / 0.7, 1.0);
  if (*(float *)&v25 < 0.0) {
    *(float *)&double v25 = 0.0;
  }
  [*(id *)(v6 + 216) _solveForInput:v25];
  v50[7] = LODWORD(v26);
  *(float *)&double v26 = fminf(v19 / 0.16, 1.0);
  if (*(float *)&v26 < 0.0) {
    *(float *)&double v26 = 0.0;
  }
  [*(id *)(v6 + 224) _solveForInput:v26];
  unsigned char v50[8] = v27;
  *(float *)&double v28 = v22;
  [*(id *)(v6 + 232) _solveForInput:v28];
  *(float *)&v50[9] = 1.0 - *(float *)&v29;
  *(float *)&double v29 = fminf((float)(v19 + -0.2) / 0.8, 1.0);
  if (*(float *)&v29 < 0.0) {
    *(float *)&double v29 = 0.0;
  }
  [*(id *)(v6 + 192) _solveForInput:v29];
  v50[10] = LODWORD(v30);
  *(float *)&double v30 = fminf(v20 / 0.625, 1.0);
  if (*(float *)&v30 < 0.0) {
    *(float *)&double v30 = 0.0;
  }
  [*(id *)(v6 + 240) _solveForInput:v30];
  v50[11] = LODWORD(v31);
  *(float *)&double v31 = fminf((float)(v20 + -0.275) / 0.225, 1.0);
  if (*(float *)&v31 < 0.0) {
    *(float *)&double v31 = 0.0;
  }
  [*(id *)(v6 + 304) _solveForInput:v31];
  int v55 = LODWORD(v32);
  if (v20 <= 0.001 || v20 >= 0.999)
  {
    *(float *)&double v32 = fminf((float)(v19 + -0.6) / 0.4, 1.0);
    if (*(float *)&v32 < 0.0) {
      *(float *)&double v32 = 0.0;
    }
    [*(id *)(v6 + 272) _solveForInput:v32];
    float v34 = v20 * *(float *)&v33;
    if (v20 <= 0.001 && v20 >= 0.875)
    {
      int v51 = 0;
      goto LABEL_39;
    }
  }
  else
  {
    *(float *)&double v32 = fminf((float)(v20 + -0.65) / 0.35, 1.0);
    if (*(float *)&v32 < 0.0) {
      *(float *)&double v32 = 0.0;
    }
    [*(id *)(v6 + 248) _solveForInput:v32];
    float v34 = *(float *)&v33;
  }
  if (v20 >= 0.25)
  {
    *(float *)&double v33 = fminf((float)(v20 + -0.25) / 0.625, 1.0);
    if (*(float *)&v33 < 0.0) {
      *(float *)&double v33 = 0.0;
    }
    [*(id *)(v6 + 264) _solveForInput:v33];
    *(float *)&double v37 = 1.0 - *(float *)&v37;
  }
  else
  {
    *(float *)&double v33 = fminf(v20 * 4.0, 1.0);
    if (*(float *)&v33 < 0.0) {
      *(float *)&double v33 = 0.0;
    }
    [*(id *)(v6 + 256) _solveForInput:v33];
  }
  int v51 = LODWORD(v37);
  if (v20 <= 0.001)
  {
LABEL_39:
    double v37 = 0.0;
    if (v20 >= 0.55) {
      goto LABEL_51;
    }
  }
  if (v20 >= 0.25)
  {
    float v38 = (float)(v20 + -0.25) / 0.3;
    LODWORD(v36) = 1.0;
    float v39 = 1.0 - v38;
    if (v38 < 0.0) {
      float v39 = 1.0;
    }
    BOOL v40 = v38 < 1.0;
    double v37 = 0.0;
    if (v40) {
      *(float *)&double v37 = v39;
    }
  }
  else
  {
    double v36 = 0.0;
    if ((float)(v20 * 4.0) >= 0.0) {
      *(float *)&double v36 = v20 * 4.0;
    }
    if ((float)(v20 * 4.0) >= 1.0) {
      *(float *)&double v37 = 1.0;
    }
    else {
      *(float *)&double v37 = *(float *)&v36;
    }
  }
  objc_msgSend(*(id *)(v6 + 272), "_solveForInput:", v37, v36);
LABEL_51:
  int v52 = LODWORD(v37);
  *(float *)&double v37 = fminf(v17 / 1.25, 1.0);
  if (*(float *)&v37 < 0.0) {
    *(float *)&double v37 = 0.0;
  }
  [*(id *)(v6 + 280) _solveForInput:v37];
  int v53 = LODWORD(v41);
  *(float *)&double v41 = fminf((float)(v17 + -0.75) / 0.20833, 1.0);
  if (*(float *)&v41 < 0.0) {
    *(float *)&double v41 = 0.0;
  }
  [*(id *)(v6 + 288) _solveForInput:v41];
  int v54 = LODWORD(v42);
  *(float *)&double v42 = fminf(v17 / 0.33333, 1.0);
  if (*(float *)&v42 < 0.0) {
    *(float *)&double v42 = 0.0;
  }
  [*(id *)(v6 + 296) _solveForInput:v42];
  *(float *)&v50[12] = v34 * (float)(1.0 - v43);
  swift_getObjectType();
  [v14 setRenderPipelineState:*(void *)(v6 + 72)];
  [v14 setVertexBytes:v50 length:72 atIndex:0];
  [v14 setFragmentBytes:v50 length:72 atIndex:0];
  [v14 setFragmentBuffer:*(void *)(v6 + 312) offset:0 atIndex:1];
  long long v44 = *(_OWORD *)(v6 + 144);
  long long v45 = *(_OWORD *)(v6 + 160);
  long long v46 = *(_OWORD *)(v6 + 112);
  v57[3] = *(_OWORD *)(v6 + 128);
  v57[4] = v44;
  v57[5] = v45;
  uint64_t v58 = *(void *)(v6 + 176);
  long long v47 = *(_OWORD *)(v6 + 96);
  v57[0] = *(_OWORD *)(v6 + 80);
  v57[1] = v47;
  v57[2] = v46;
  sub_10002C6BC((uint64_t)v57);
  sub_1000271AC();
  sub_10002C790((uint64_t)v57);
  sub_10005E0F8();
  swift_bridgeObjectRelease();
  [v14 drawPrimitives:3 vertexStart:0 vertexCount:3];
  [v14 endEncoding];
  if (a4 == 0xFF || (a4 & 1) == 0)
  {
    swift_unknownObjectRelease();
    goto LABEL_60;
  }
  sub_100014B64(a3, 1);
  sub_100029B04((uint64_t)a1, a3);
  swift_unknownObjectRelease();

  sub_100014B70(a3, a4);
}

id sub_100029B04(uint64_t a1, id a2)
{
  uint64_t v3 = v2;
  if (*(unsigned char *)(v2 + 65) == 3)
  {
    if (qword_1000978D0 != -1) {
      swift_once();
    }
    uint64_t v6 = sub_10005DCD8();
    sub_100008DB0(v6, (uint64_t)qword_10009FB20);
    uint64_t v7 = sub_10005DCB8();
    os_log_type_t v8 = sub_10005E078();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "no zoom known", v9, 2u);
      swift_slowDealloc();
    }

    id v10 = [self mainScreen];
    [v10 bounds];
    CGFloat v12 = v11;
    CGFloat v14 = v13;
    CGFloat v16 = v15;
    CGFloat v18 = v17;

    v46.origin.CGFloat x = v12;
    v46.origin.CGFloat y = v14;
    v46.size.CGFloat width = v16;
    v46.size.CGFloat height = v18;
    if (!CGRectIsEmpty(v46)) {
      *(unsigned char *)(v3 + 65) = sub_100034614(v12, v14, v16, v18);
    }
  }
  [a2 bounds];
  CGFloat x = v47.origin.x;
  CGFloat y = v47.origin.y;
  CGFloat width = v47.size.width;
  CGFloat height = v47.size.height;
  double v23 = CGRectGetWidth(v47) * 0.5;
  double v24 = *(void **)(v3 + 320);
  id v25 = [v24 superlayer];
  if (!v25 || (id v26 = v25, v25, v26 != a2))
  {
    [a2 addSublayer:v24];
    v48.origin.CGFloat x = x;
    v48.origin.CGFloat y = y;
    v48.size.CGFloat width = width;
    v48.size.CGFloat height = height;
    objc_msgSend(v24, "setPosition:", v23, CGRectGetHeight(v48) * 0.5);
    int v27 = *(void **)(v3 + 328);
    objc_msgSend(v27, "setAnchorPoint:", 0.5, 0.0);
    v49.origin.CGFloat x = x;
    v49.origin.CGFloat y = y;
    v49.size.CGFloat width = width;
    v49.size.CGFloat height = height;
    CGFloat v28 = CGRectGetHeight(v49);
    CATransform3DMakeTranslation(&v44, 0.0, v28 * -0.5, 0.0);
    [v27 setTransform:&v44];
  }
  sub_100014990(a1 + 56, (uint64_t)v45);
  float v29 = sub_100015590();
  CATransform3DMakeRotation(&v44, (float)-v29, 0.0, 0.0, 1.0);
  [v24 setTransform:&v44];
  char v30 = *(unsigned char *)(v3 + 64);
  double v31 = 292.25;
  if (!*(unsigned char *)(v3 + 65)) {
    double v31 = 357.25;
  }
  double v32 = 146.25;
  if (!*(unsigned char *)(v3 + 65)) {
    double v32 = 187.75;
  }
  double v33 = 280.5;
  if (!*(unsigned char *)(v3 + 65)) {
    double v33 = 341.75;
  }
  double v34 = 131.5;
  if (!*(unsigned char *)(v3 + 65)) {
    double v34 = 168.5;
  }
  if (*(unsigned char *)(v3 + 64)) {
    double v35 = v31;
  }
  else {
    double v35 = v33;
  }
  if (*(unsigned char *)(v3 + 64)) {
    double v36 = v32;
  }
  else {
    double v36 = v34;
  }
  double v37 = *(void **)(v3 + 328);
  objc_msgSend(v37, "setPosition:", 0.0, v36 + (v35 - v36) * WallpaperState.rotationLandscapeAmount.getter());
  if (*(unsigned char *)(v3 + 24) == 1)
  {
    if (v30)
    {
      objc_msgSend(v37, "setBounds:", 0.0, 0.0, 424.0, 120.0);
      goto LABEL_35;
    }
    if (*(unsigned char *)(v3 + 65))
    {
      double v23 = 380.0;
      double v40 = 105.0;
    }
    else
    {
      double v40 = WallpaperState.rotationLandscapeAmount.getter() * 20.0 + 100.0;
      double v23 = 400.0;
    }
  }
  else if (*(unsigned char *)(v3 + 25) == 1)
  {
    v50.origin.CGFloat x = x;
    v50.origin.CGFloat y = y;
    v50.size.CGFloat width = width;
    v50.size.CGFloat height = height;
    double v23 = CGRectGetWidth(v50);
    v51.origin.CGFloat x = x;
    v51.origin.CGFloat y = y;
    v51.size.CGFloat width = width;
    v51.size.CGFloat height = height;
    double v38 = CGRectGetHeight(v51);
    [v37 position];
    double v40 = v38 - v39;
  }
  else
  {
    double v40 = 400.0;
  }
  objc_msgSend(v37, "setBounds:", 0.0, 0.0, v23, v40);
  if (v30)
  {
LABEL_35:
    double v41 = 0.0;
    if ((*(unsigned __int8 *)(v3 + 65) | 2) == 2) {
      return [v37 setOpacity:v41];
    }
    goto LABEL_39;
  }
  if (!*(unsigned char *)(v3 + 65))
  {
LABEL_39:
    LODWORD(v41) = 1.0;
    if (*(unsigned char *)(v3 + 24) != 1) {
      return [v37 setOpacity:v41];
    }
    *(float *)&double v41 = fabsf(WallpaperState.rotationLandscapeAmount.getter() + -0.5) * 8.0;
    float v42 = -3.0;
    goto LABEL_41;
  }
  *(float *)&double v41 = WallpaperState.rotationLandscapeAmount.getter() / -0.2;
  float v42 = 1.0;
LABEL_41:
  *(float *)&double v41 = *(float *)&v41 + v42;
  if (*(float *)&v41 < 0.0) {
    *(float *)&double v41 = 0.0;
  }
  return [v37 setOpacity:v41];
}

uint64_t sub_10002A064()
{
  swift_unknownObjectRelease();
  sub_100012030(*(void *)(v0 + 32));
  sub_100012030(*(void *)(v0 + 48));
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  long long v1 = *(_OWORD *)(v0 + 264);
  long long v2 = *(_OWORD *)(v0 + 280);
  v7[4] = *(_OWORD *)(v0 + 248);
  v7[5] = v1;
  long long v3 = *(_OWORD *)(v0 + 296);
  v7[6] = v2;
  v7[7] = v3;
  long long v4 = *(_OWORD *)(v0 + 200);
  v7[0] = *(_OWORD *)(v0 + 184);
  v7[1] = v4;
  long long v5 = *(_OWORD *)(v0 + 232);
  _OWORD v7[2] = *(_OWORD *)(v0 + 216);
  v7[3] = v5;
  sub_10002C580((uint64_t)v7);
  swift_unknownObjectRelease();

  sub_10002C65C(v0 + OBJC_IVAR____TtC22MercuryPosterExtension22Pro24WallpaperRenderer____lazy_storage___baseURL);
  return v0;
}

uint64_t sub_10002A1B8()
{
  sub_10002A064();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_10002A210()
{
  return type metadata accessor for Pro24WallpaperRenderer();
}

uint64_t type metadata accessor for Pro24WallpaperRenderer()
{
  uint64_t result = qword_100098C10;
  if (!qword_100098C10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10002A264()
{
  sub_10002A34C();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10002A34C()
{
  if (!qword_100098C20)
  {
    sub_10005DA28();
    unint64_t v0 = sub_10005E128();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100098C20);
    }
  }
}

void destroy for Pro24WallpaperRenderer.TimingFunctions(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 120);
}

void *initializeWithCopy for Pro24WallpaperRenderer.TimingFunctions(void *a1, uint64_t a2)
{
  long long v3 = *(void **)a2;
  long long v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  long long v5 = *(void **)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 24);
  a1[2] = v5;
  a1[3] = v6;
  uint64_t v7 = *(void **)(a2 + 32);
  os_log_type_t v8 = *(void **)(a2 + 40);
  a1[4] = v7;
  a1[5] = v8;
  uint64_t v9 = *(void **)(a2 + 48);
  id v10 = *(void **)(a2 + 56);
  a1[6] = v9;
  a1[7] = v10;
  double v11 = *(void **)(a2 + 64);
  CGFloat v12 = *(void **)(a2 + 72);
  a1[8] = v11;
  a1[9] = v12;
  char v30 = *(void **)(a2 + 80);
  double v31 = *(void **)(a2 + 88);
  a1[10] = v30;
  a1[11] = v31;
  double v32 = *(void **)(a2 + 96);
  double v33 = *(void **)(a2 + 104);
  a1[12] = v32;
  a1[13] = v33;
  double v34 = *(void **)(a2 + 112);
  double v35 = *(void **)(a2 + 120);
  a1[14] = v34;
  a1[15] = v35;
  id v13 = v3;
  id v14 = v4;
  id v15 = v5;
  id v16 = v6;
  id v17 = v7;
  id v18 = v8;
  id v19 = v9;
  id v20 = v10;
  id v21 = v11;
  id v22 = v12;
  id v23 = v30;
  id v24 = v31;
  id v25 = v32;
  id v26 = v33;
  id v27 = v34;
  id v28 = v35;
  return a1;
}

uint64_t assignWithCopy for Pro24WallpaperRenderer.TimingFunctions(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a2;
  long long v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  os_log_type_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  id v10 = *(void **)(a2 + 16);
  double v11 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  id v12 = v10;

  id v13 = *(void **)(a2 + 24);
  id v14 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v13;
  id v15 = v13;

  id v16 = *(void **)(a2 + 32);
  id v17 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v16;
  id v18 = v16;

  id v19 = *(void **)(a2 + 40);
  id v20 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v19;
  id v21 = v19;

  id v22 = *(void **)(a2 + 48);
  id v23 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v22;
  id v24 = v22;

  id v25 = *(void **)(a2 + 56);
  id v26 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v25;
  id v27 = v25;

  id v28 = *(void **)(a2 + 64);
  float v29 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v28;
  id v30 = v28;

  double v31 = *(void **)(a2 + 72);
  double v32 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v31;
  id v33 = v31;

  double v34 = *(void **)(a2 + 80);
  double v35 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = v34;
  id v36 = v34;

  double v37 = *(void **)(a2 + 88);
  double v38 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = v37;
  id v39 = v37;

  double v40 = *(void **)(a2 + 96);
  double v41 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v40;
  id v42 = v40;

  float v43 = *(void **)(a2 + 104);
  CATransform3D v44 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = v43;
  id v45 = v43;

  CGRect v46 = *(void **)(a2 + 112);
  CGRect v47 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = v46;
  id v48 = v46;

  CGRect v49 = *(void **)(a2 + 120);
  CGRect v50 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = v49;
  id v51 = v49;

  return a1;
}

__n128 initializeWithTake for Pro24WallpaperRenderer.TimingFunctions(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for Pro24WallpaperRenderer.TimingFunctions(uint64_t a1, _OWORD *a2)
{
  long long v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  long long v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  long long v6 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = a2[2];

  long long v7 = *(void **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = a2[3];

  os_log_type_t v8 = *(void **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = a2[4];

  id v9 = *(void **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = a2[5];

  id v10 = *(void **)(a1 + 104);
  *(_OWORD *)(a1 + 96) = a2[6];

  double v11 = *(void **)(a1 + 120);
  *(_OWORD *)(a1 + 112) = a2[7];

  return a1;
}

uint64_t getEnumTagSinglePayload for Pro24WallpaperRenderer.TimingFunctions(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Pro24WallpaperRenderer.TimingFunctions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Pro24WallpaperRenderer.TimingFunctions()
{
  return &type metadata for Pro24WallpaperRenderer.TimingFunctions;
}

uint64_t destroy for Pro24WallpaperRenderer.Textures()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

void *initializeWithCopy for Pro24WallpaperRenderer.Textures(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  a1[12] = a2[12];
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for Pro24WallpaperRenderer.Textures(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[4] = a2[4];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[5] = a2[5];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[6] = a2[6];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[7] = a2[7];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[8] = a2[8];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[9] = a2[9];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[10] = a2[10];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[11] = a2[11];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[12] = a2[12];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

__n128 initializeWithTake for Pro24WallpaperRenderer.Textures(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Pro24WallpaperRenderer.Textures(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_unknownObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Pro24WallpaperRenderer.Textures(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 104)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Pro24WallpaperRenderer.Textures(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Pro24WallpaperRenderer.Textures()
{
  return &type metadata for Pro24WallpaperRenderer.Textures;
}

uint64_t sub_10002AD2C()
{
  return 81;
}

uint64_t sub_10002AD34(uint64_t result)
{
  *(unsigned char *)(v1 + 24) = result;
  return result;
}

uint64_t sub_10002AD3C(uint64_t result)
{
  *(unsigned char *)(v1 + 25) = result;
  return result;
}

uint64_t sub_10002AD44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 32);
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return sub_100012030(v3);
}

uint64_t sub_10002AD58()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_100014888(v1);
  return v1;
}

uint64_t sub_10002AD8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 48);
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return sub_100012030(v3);
}

void sub_10002ADA0(void *a1)
{
}

void sub_10002AE14(float *a1, void *a2, void *a3, unsigned __int8 a4, void *a5)
{
}

void *sub_10002AE2C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100008F4C(&qword_100098DF0);
      id v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 80);
      id v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[10 * v8 + 4]) {
          memmove(v12, a4 + 4, 80 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      id v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10002B1C0(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10002AF4C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100008F4C(&qword_100098E58);
      id v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      id v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      id v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10002B2B0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10002B074(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100008F4C(&qword_100098DE8);
      id v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      id v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      id v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10002B6F0(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10002B184()
{
  return sub_10005E228();
}

void *sub_10002B198(void *a1)
{
  return sub_10002AF4C(0, a1[2], 0, a1);
}

void *sub_10002B1AC(void *a1)
{
  return sub_10002B074(0, a1[2], 0, a1);
}

char *sub_10002B1C0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    char v5 = (char *)(a4 + 80 * a1 + 32);
    size_t v6 = 80 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  __n128 result = (char *)sub_10005E378();
  __break(1u);
  return result;
}

uint64_t sub_10002B2B0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_10005E378();
  __break(1u);
  return result;
}

id sub_10002B3A8@<X0>(void *a1@<X8>)
{
  id v2 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v3) = 0.5;
  LODWORD(v4) = 1.0;
  LODWORD(v5) = 1051372203;
  id v82 = [v2 initWithControlPoints:v5 :0.0 :v3 :v4];
  id v6 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v7) = 1041865114;
  LODWORD(v8) = 1058642330;
  LODWORD(v9) = 1064094925;
  LODWORD(v10) = 1.0;
  id v81 = [v6 initWithControlPoints:v7 :v8 :v9 :v10];
  id v11 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v12) = 1046711865;
  LODWORD(v13) = 1.0;
  LODWORD(v14) = 1051372203;
  id v80 = [v11 initWithControlPoints:v12 :0.0 :v14 :v13];
  id v15 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v16) = 981668463;
  LODWORD(v17) = 0.25;
  LODWORD(v18) = 1.0;
  id v79 = [v15 initWithControlPoints:v17 :0.0 :v16 :v18];
  id v19 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v20) = 1049774373;
  LODWORD(v21) = 1058162981;
  LODWORD(v22) = 1.0;
  id v78 = [v19 initWithControlPoints:v20 :0.0 :v21 :v22];
  id v23 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v24) = 0.125;
  LODWORD(v25) = 0.5;
  LODWORD(v26) = 1.0;
  id v77 = [v23 initWithControlPoints:v24 :0.0 :v25 :v26];
  id v27 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v28) = 0.5;
  LODWORD(v29) = 1.0;
  LODWORD(v30) = 1051372203;
  id v76 = [v27 initWithControlPoints:v30 :0.0 :v28 :v29];
  id v31 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v32) = 1.0;
  LODWORD(v33) = 1053609165;
  LODWORD(v34) = 1053609165;
  id v75 = [v31 initWithControlPoints:v33 :0.0 :v34 :v32];
  id v35 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v36) = 1.0;
  LODWORD(v37) = 1051372203;
  LODWORD(v38) = 1059760811;
  id v39 = [v35 initWithControlPoints:v37 :0.0 :v38 :v36];
  id v40 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v41) = 1061997773;
  LODWORD(v42) = 1.0;
  LODWORD(v43) = 1053609165;
  id v44 = [v40 initWithControlPoints:v43 :0.0 :v41 :v42];
  id v45 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v46) = 1045220557;
  LODWORD(v47) = 1.0;
  LODWORD(v48) = 1053609165;
  id v49 = [v45 initWithControlPoints:v46 :0.0 :v48 :v47];
  id v50 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v51) = 1.0;
  LODWORD(v52) = 1051372203;
  LODWORD(v53) = 1059760811;
  id v54 = [v50 initWithControlPoints:v52 :0.0 :v53 :v51];
  id v55 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v56) = 1.0;
  LODWORD(v57) = 1051372203;
  LODWORD(v58) = 1051372203;
  id v59 = [v55 initWithControlPoints:v57 :0.0 :v58 :v56];
  id v60 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v61) = 1.0;
  LODWORD(v62) = 1051372203;
  LODWORD(v63) = 1059760811;
  id v64 = [v60 initWithControlPoints:v62 :0.0 :v63 :v61];
  id v65 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v66) = 0.375;
  LODWORD(v67) = 0.625;
  LODWORD(v68) = 1.0;
  id v69 = [v65 initWithControlPoints:v66 :0.0 :v67 :v68];
  id v70 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v71) = 1.0;
  LODWORD(v72) = 1051372203;
  LODWORD(v73) = 1059760811;
  id result = [v70 initWithControlPoints:v72 :0.0 :v73 :v71];
  *a1 = v82;
  a1[1] = v81;
  a1[2] = v80;
  a1[3] = v79;
  a1[4] = v78;
  a1[5] = v77;
  a1[6] = v76;
  a1[7] = v75;
  a1[8] = v39;
  a1[9] = v44;
  a1[10] = v49;
  a1[11] = v54;
  a1[12] = v59;
  a1[13] = v64;
  a1[14] = v69;
  a1[15] = result;
  return result;
}

char *sub_10002B6F0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    double v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    double v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  id result = (char *)sub_10005E378();
  __break(1u);
  return result;
}

uint64_t sub_10002B7DC(unsigned int a1)
{
  sub_100008F4C(&qword_100098DE0);
  int8x16_t v2 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(a1)), 0x1FuLL));
  int8x16_t v41 = vbslq_s8(v2, (int8x16_t)xmmword_100061E20, (int8x16_t)xmmword_100061E10);
  if (a1) {
    float v3 = 0.18205;
  }
  else {
    float v3 = 0.16247;
  }
  float v4 = 1.496;
  if (a1) {
    float v5 = 0.16;
  }
  else {
    float v5 = 0.11273;
  }
  float v40 = v5;
  if (a1) {
    float v4 = 1.5879;
  }
  float v42 = v4;
  float v43 = v3;
  if (a1) {
    float v6 = 1.452;
  }
  else {
    float v6 = 1.2758;
  }
  int8x16_t v39 = vbslq_s8(v2, (int8x16_t)xmmword_100061E40, (int8x16_t)xmmword_100061E30);
  float v7 = 0.098974;
  if ((a1 & 1) == 0) {
    float v7 = 0.048408;
  }
  float v37 = v6;
  float v38 = v7;
  if (a1) {
    float v8 = 0.24564;
  }
  else {
    float v8 = 0.23408;
  }
  if (a1) {
    float v9 = 1.2556;
  }
  else {
    float v9 = 1.1137;
  }
  if (a1) {
    float v10 = 1.5984;
  }
  else {
    float v10 = 1.531;
  }
  int8x16_t v34 = vbslq_s8(v2, (int8x16_t)xmmword_100061E60, (int8x16_t)xmmword_100061E50);
  int8x16_t v35 = vbslq_s8(v2, (int8x16_t)xmmword_100061E80, (int8x16_t)xmmword_100061E70);
  int8x16_t v36 = vbslq_s8(v2, (int8x16_t)xmmword_100061EA0, (int8x16_t)xmmword_100061E90);
  if (a1) {
    float v11 = 0.10154;
  }
  else {
    float v11 = 0.051061;
  }
  if (a1) {
    float v12 = 1.2745;
  }
  else {
    float v12 = 1.1296;
  }
  if (a1) {
    float v13 = 0.17026;
  }
  else {
    float v13 = 0.14854;
  }
  if (a1) {
    float v14 = 1.4531;
  }
  else {
    float v14 = 1.3586;
  }
  if (a1) {
    float v15 = 1.4509;
  }
  else {
    float v15 = 1.2736;
  }
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100061EB0;
  *(void *)(inited + 32) = 0;
  *(int8x16_t *)(inited + 40) = v41;
  *(void *)(inited + 56) = 1;
  *(float *)(inited + 64) = v43;
  *(float *)(inited + 68) = v40;
  *(float *)(inited + 72) = v42;
  *(float *)(inited + 76) = v37;
  *(void *)(inited + 80) = 2;
  *(int8x16_t *)(inited + 88) = v39;
  *(void *)(inited + 104) = 3;
  *(float *)(inited + 112) = v38;
  *(float *)(inited + 116) = v8;
  *(float *)(inited + 120) = v9;
  *(float *)(inited + 124) = v10;
  *(void *)(inited + 128) = 4;
  *(int8x16_t *)(inited + 136) = v34;
  *(void *)(inited + 152) = 5;
  *(int8x16_t *)(inited + 160) = v35;
  *(void *)(inited + 176) = 6;
  *(int8x16_t *)(inited + 184) = v36;
  *(void *)(inited + 200) = 7;
  *(float *)(inited + 208) = v11;
  *(float *)(inited + 212) = v8;
  *(float *)(inited + 216) = v12;
  *(float *)(inited + 220) = v10;
  *(void *)(inited + 224) = 12;
  *(float *)(inited + 232) = v13;
  *(float *)(inited + 236) = v40;
  *(float *)(inited + 240) = v14;
  *(float *)(inited + 244) = v15;
  unint64_t v17 = sub_100012C98(inited);
  swift_setDeallocating();
  v18.i32[0] = 1.0;
  v19.i32[0] = 1.0;
  uint64_t result = (uint64_t)sub_100027614(0xDuLL, 0, 0, v18, v19);
  double v21 = (void *)result;
  int64_t v22 = 0;
  unint64_t v23 = v17 + 64;
  uint64_t v24 = 1 << *(unsigned char *)(v17 + 32);
  uint64_t v25 = -1;
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  unint64_t v26 = v25 & *(void *)(v17 + 64);
  int64_t v27 = (unint64_t)(v24 + 63) >> 6;
  if (!v26) {
    goto LABEL_42;
  }
LABEL_41:
  unint64_t v28 = __clz(__rbit64(v26));
  v26 &= v26 - 1;
  for (unint64_t i = v28 | (v22 << 6); ; unint64_t i = __clz(__rbit64(v31)) + (v22 << 6))
  {
    unint64_t v33 = *(void *)(*(void *)(v17 + 48) + 8 * i);
    long long v44 = *(_OWORD *)(*(void *)(v17 + 56) + 16 * i);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      if ((v33 & 0x8000000000000000) != 0) {
        goto LABEL_62;
      }
    }
    else
    {
      uint64_t result = (uint64_t)sub_10002B1AC(v21);
      double v21 = (void *)result;
      if ((v33 & 0x8000000000000000) != 0)
      {
LABEL_62:
        __break(1u);
LABEL_63:
        swift_release();
        return (uint64_t)v21;
      }
    }
    if (v33 >= v21[2])
    {
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    *(_OWORD *)&v21[2 * v33 + 4] = v44;
    if (v26) {
      goto LABEL_41;
    }
LABEL_42:
    int64_t v30 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      goto LABEL_65;
    }
    if (v30 >= v27) {
      goto LABEL_63;
    }
    unint64_t v31 = *(void *)(v23 + 8 * v30);
    ++v22;
    if (!v31)
    {
      int64_t v22 = v30 + 1;
      if (v30 + 1 >= v27) {
        goto LABEL_63;
      }
      unint64_t v31 = *(void *)(v23 + 8 * v22);
      if (!v31)
      {
        int64_t v22 = v30 + 2;
        if (v30 + 2 >= v27) {
          goto LABEL_63;
        }
        unint64_t v31 = *(void *)(v23 + 8 * v22);
        if (!v31) {
          break;
        }
      }
    }
LABEL_55:
    unint64_t v26 = (v31 - 1) & v31;
  }
  int64_t v32 = v30 + 3;
  if (v32 >= v27) {
    goto LABEL_63;
  }
  unint64_t v31 = *(void *)(v23 + 8 * v32);
  if (v31)
  {
    int64_t v22 = v32;
    goto LABEL_55;
  }
  while (1)
  {
    int64_t v22 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v22 >= v27) {
      goto LABEL_63;
    }
    unint64_t v31 = *(void *)(v23 + 8 * v22);
    ++v32;
    if (v31) {
      goto LABEL_55;
    }
  }
LABEL_66:
  __break(1u);
  return result;
}

void sub_10002BC84(void *a1)
{
  swift_bridgeObjectRelease();
  *(_WORD *)(v1 + 24) = 0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(unsigned char *)(v1 + 65) = 3;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(void *)(v1 + 176) = 0;
  sub_10002B3A8(v61);
  long long v3 = v61[5];
  *(_OWORD *)(v1 + 248) = v61[4];
  long long v4 = v61[6];
  long long v5 = v61[7];
  *(_OWORD *)(v1 + 264) = v3;
  *(_OWORD *)(v1 + 280) = v4;
  *(_OWORD *)(v1 + 296) = v5;
  long long v6 = v61[1];
  *(_OWORD *)(v1 + 184) = v61[0];
  *(_OWORD *)(v1 + 200) = v6;
  long long v7 = v61[3];
  *(_OWORD *)(v1 + 216) = v61[2];
  *(_OWORD *)(v1 + 232) = v7;
  *(void *)(v1 + 320) = [objc_allocWithZone((Class)CATransformLayer) init];
  *(void *)(v1 + 328) = [objc_allocWithZone((Class)CALayer) init];
  uint64_t v8 = v1 + OBJC_IVAR____TtC22MercuryPosterExtension22Pro24WallpaperRenderer____lazy_storage___baseURL;
  uint64_t v9 = sub_10005DA28();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(void *)(v1 + 16) = a1;
  swift_unknownObjectRetain();
  uint64_t v10 = MGGetProductType();
  char v11 = sub_10004E2D0(v10, (uint64_t)&off_10007E918);
  if ((v11 & 1) == 0) {
    sub_10004E2D0(v10, (uint64_t)&off_10007E948);
  }
  *(unsigned char *)(v1 + 64) = v11 & 1;
  id v12 = [self mainScreen];
  [v12 bounds];
  CGFloat v14 = v13;
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  CGFloat v20 = v19;

  v64.origin.CGFloat x = v14;
  v64.origin.CGFloat y = v16;
  v64.size.CGFloat width = v18;
  v64.size.CGFloat height = v20;
  if (!CGRectIsEmpty(v64)) {
    *(unsigned char *)(v1 + 65) = sub_100034614(v14, v16, v18, v20);
  }
  id v21 = [a1 newDefaultLibrary];
  if (!v21)
  {
    sub_10002C52C();
    swift_allocError();
    unsigned char *v46 = 0;
    swift_willThrow();
    swift_unknownObjectRelease();
LABEL_14:
    swift_unknownObjectRelease();
LABEL_17:
    int v49 = 0;
    goto LABEL_18;
  }
  int64_t v22 = v21;
  id v23 = [objc_allocWithZone((Class)MTLFunctionConstantValues) init];
  char v59 = *(unsigned char *)(v1 + 64);
  [v23 setConstantValue:&v59 type:53 atIndex:0];
  id v58 = [objc_allocWithZone((Class)MTLRenderPipelineDescriptor) init];
  id v24 = [v58 colorAttachments];
  id v25 = [v24 objectAtIndexedSubscript:0];

  if (!v25)
  {
    __break(1u);
    return;
  }
  [v25 setPixelFormat:81];
  double v57 = v25;
  [v25 setBlendingEnabled:0];
  NSString v26 = sub_10005DE38();
  *(void *)&v60[0] = 0;
  int64_t v27 = v23;
  id v28 = [v22 newFunctionWithName:v26 constantValues:v23 error:v60];

  double v29 = *(void **)&v60[0];
  if (!v28)
  {
    int64_t v32 = v27;
    goto LABEL_16;
  }
  id v30 = *(id *)&v60[0];
  [v58 setVertexFunction:v28];
  swift_unknownObjectRelease();
  NSString v31 = sub_10005DE38();
  *(void *)&v60[0] = 0;
  int64_t v32 = v27;
  id v33 = [v22 newFunctionWithName:v31 constantValues:v27 error:v60];

  double v29 = *(void **)&v60[0];
  if (!v33)
  {
LABEL_16:
    id v47 = v29;
    sub_10005D978();

    swift_willThrow();
    sub_10002C52C();
    swift_allocError();
    unsigned char *v48 = 0;
    swift_willThrow();
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_errorRelease();

    goto LABEL_17;
  }
  id v34 = *(id *)&v60[0];
  [v58 setFragmentFunction:v33];
  swift_unknownObjectRelease();
  *(void *)&v60[0] = 0;
  id v35 = [a1 newRenderPipelineStateWithDescriptor:v58 error:v60];
  int8x16_t v36 = *(void **)&v60[0];
  if (!v35)
  {
    id v54 = *(id *)&v60[0];
    sub_10005D978();

    swift_willThrow();
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    goto LABEL_14;
  }
  *(void *)(v1 + 72) = v35;
  id v37 = v36;
  id v38 = [a1 newBufferWithLength:208 options:0];
  if (v38)
  {
    int8x16_t v39 = v38;
    *(void *)(v1 + 312) = v38;
    swift_unknownObjectRetain();
    sub_1000283F4(v62);
    long long v40 = v62[5];
    *(_OWORD *)(v1 + 144) = v62[4];
    *(_OWORD *)(v1 + 160) = v40;
    *(void *)(v1 + 176) = v63;
    long long v41 = v62[1];
    *(_OWORD *)(v1 + 80) = v62[0];
    *(_OWORD *)(v1 + 96) = v41;
    long long v42 = v62[3];
    *(_OWORD *)(v1 + 112) = v62[2];
    *(_OWORD *)(v1 + 128) = v42;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v43 = sub_10002B7DC(*(unsigned __int8 *)(v1 + 64));
    id v44 = [(id)swift_unknownObjectRetain() contents];
    id v45 = v39;
    memmove(v44, (const void *)(v43 + 32), 0xD0uLL);
    swift_bridgeObjectRelease();
    sub_100027CF8();
    if (v56)
    {

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
      swift_release();
    }
    else
    {
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();
    return;
  }
  sub_10002C52C();
  swift_allocError();
  *id v55 = 0;
  swift_willThrow();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  int v49 = 1;
LABEL_18:
  swift_unknownObjectRelease();
  sub_100012030(*(void *)(v1 + 32));
  sub_100012030(*(void *)(v1 + 48));
  if (v49) {
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  long long v50 = *(_OWORD *)(v1 + 264);
  v60[4] = *(_OWORD *)(v1 + 248);
  v60[5] = v50;
  long long v51 = *(_OWORD *)(v1 + 296);
  v60[6] = *(_OWORD *)(v1 + 280);
  v60[7] = v51;
  long long v52 = *(_OWORD *)(v1 + 200);
  v60[0] = *(_OWORD *)(v1 + 184);
  v60[1] = v52;
  long long v53 = *(_OWORD *)(v1 + 232);
  v60[2] = *(_OWORD *)(v1 + 216);
  v60[3] = v53;
  sub_10002C580((uint64_t)v60);

  sub_10002C65C(v1 + OBJC_IVAR____TtC22MercuryPosterExtension22Pro24WallpaperRenderer____lazy_storage___baseURL);
  type metadata accessor for Pro24WallpaperRenderer();
  swift_deallocPartialClassInstance();
}

unint64_t sub_10002C52C()
{
  unint64_t result = qword_100098DD0;
  if (!qword_100098DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098DD0);
  }
  return result;
}

uint64_t sub_10002C580(uint64_t a1)
{
  CGFloat v16 = *(void **)(a1 + 8);
  double v17 = *(void **)a1;
  CGFloat v14 = *(void **)(a1 + 24);
  double v15 = *(void **)(a1 + 16);
  int8x16_t v2 = *(void **)(a1 + 48);
  id v12 = *(void **)(a1 + 40);
  double v13 = *(void **)(a1 + 32);
  long long v3 = *(void **)(a1 + 56);
  long long v4 = *(void **)(a1 + 64);
  long long v5 = *(void **)(a1 + 72);
  long long v6 = *(void **)(a1 + 80);
  long long v7 = *(void **)(a1 + 88);
  uint64_t v8 = *(void **)(a1 + 96);
  uint64_t v9 = *(void **)(a1 + 104);
  uint64_t v10 = *(void **)(a1 + 112);

  return a1;
}

uint64_t sub_10002C65C(uint64_t a1)
{
  uint64_t v2 = sub_100008F4C(&qword_1000984A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002C6BC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002C790(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002C868()
{
  return _swift_deallocObject(v0, 24, 7);
}

unint64_t sub_10002C878()
{
  unint64_t result = qword_100098E10;
  if (!qword_100098E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098E10);
  }
  return result;
}

unint64_t sub_10002C8CC()
{
  unint64_t result = qword_100098E20;
  if (!qword_100098E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098E20);
  }
  return result;
}

uint64_t sub_10002C920(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10002C968()
{
  unint64_t result = qword_100098E48;
  if (!qword_100098E48)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100098E48);
  }
  return result;
}

uint64_t sub_10002C9A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008F4C(&qword_1000984A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002CA10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008F4C(&qword_1000984A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_10002CA78()
{
  unint64_t result = qword_100098E50;
  if (!qword_100098E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098E50);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Pro24WallpaperRenderer.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002CB98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Pro24WallpaperRenderer.Error()
{
  return &type metadata for Pro24WallpaperRenderer.Error;
}

unint64_t sub_10002CBD4()
{
  unint64_t result = qword_100098E60;
  if (!qword_100098E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098E60);
  }
  return result;
}

uint64_t sub_10002CC28(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100008F4C(&qword_100098EA0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000183C0(a1, a1[3]);
  sub_10002E694();
  sub_10005E548();
  v10[4] = 0;
  sub_10005E3E8();
  if (!v2)
  {
    memcpy(&v10[4], (const void *)(v3 + 16), 0x1D4uLL);
    v10[495] = 1;
    sub_10002E73C();
    sub_10005E418();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10002CDB4()
{
  if (*v0) {
    return 0x6574656D61726170;
  }
  else {
    return 0x6E6F6973726576;
  }
}

uint64_t sub_10002CDF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10002E340(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10002CE1C(uint64_t a1)
{
  unint64_t v2 = sub_10002E694();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002CE58(uint64_t a1)
{
  unint64_t v2 = sub_10002E694();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10002CE94@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (void *)sub_10002E440(a1, __src);
  if (!v2) {
    return memcpy(a2, __src, 0x1E4uLL);
  }
  return result;
}

uint64_t sub_10002CEE8(void *a1)
{
  return sub_10002CC28(a1);
}

uint64_t sub_10002CF10()
{
  sub_100008F4C(&qword_100098ED8);
  sub_10005DCA8();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10005F1A0;
  uint64_t result = sub_10005DC98();
  qword_10009FA08 = v0;
  return result;
}

void *sub_10002CFC0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10005D838();
  __chkstk_darwin(v2);
  sub_10005D878();
  swift_allocObject();
  sub_10005D868();
  sub_100008F4C(&qword_100098EB0);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10005F1B0;
  sub_10005D828();
  sub_10005D818();
  v16[0] = v3;
  sub_10002E790();
  sub_100008F4C(&qword_100098EC0);
  sub_10002E7E8();
  unsigned int v4 = v16;
  sub_10005E188();
  sub_10005D848();
  memcpy(v17, v1, sizeof(v17));
  v16[0] = 0x2D36302D34323032;
  v16[1] = 0xEA00000000003830;
  sub_10002E844();
  uint64_t v5 = v18;
  uint64_t v6 = sub_10005D858();
  if (!v5)
  {
    uint64_t v8 = v6;
    unint64_t v9 = v7;
    sub_10002E898(v6, v7);
    uint64_t v10 = sub_10002D234(v8, v9);
    unint64_t v12 = v11;
    id v13 = objc_allocWithZone((Class)NSFileWrapper);
    Class isa = sub_10005DA68().super.isa;
    unsigned int v4 = [v13 initRegularFileWithContents:isa];
    sub_100014804(v10, v12);

    sub_100014804(v8, v9);
  }
  swift_release();
  return v4;
}

uint64_t sub_10002D234(uint64_t a1, unint64_t a2)
{
  v28[3] = &type metadata for Data;
  unsigned char v28[4] = &protocol witness table for Data;
  v28[0] = a1;
  v28[1] = a2;
  unsigned int v4 = sub_1000183C0(v28, (uint64_t)&type metadata for Data);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      sub_10002E898(a1, a2);
      sub_10002E898(v5, v6);
      uint64_t v8 = (unsigned char *)sub_10005D8A8();
      if (v8)
      {
        uint64_t v9 = sub_10005D8D8();
        if (!__OFSUB__((int)v5, v9))
        {
          v8 += (int)v5 - v9;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v10 = sub_10005D8C8();
      if (v10 >= (v5 >> 32) - (int)v5) {
        uint64_t v11 = (v5 >> 32) - (int)v5;
      }
      else {
        uint64_t v11 = v10;
      }
      unint64_t v12 = &v8[v11];
      if (v8) {
        id v13 = v12;
      }
      else {
        id v13 = 0;
      }
      sub_10002D658(v8, v13, &v27);
      sub_100014804(v5, v6);
LABEL_27:
      sub_100014804(a1, a2);
      uint64_t v24 = v27;
      sub_100020C8C((uint64_t)v28);
      return v24;
    case 2uLL:
      uint64_t v14 = *(void *)(v5 + 16);
      uint64_t v15 = *(void *)(v5 + 24);
      sub_10002E898(a1, a2);
      swift_retain();
      swift_retain();
      CGFloat v16 = (unsigned char *)sub_10005D8A8();
      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = sub_10005D8D8();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_30;
      }
      v16 += v14 - v17;
LABEL_17:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_29;
      }
      uint64_t v20 = sub_10005D8C8();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      int64_t v22 = &v16[v21];
      if (v16) {
        id v23 = v22;
      }
      else {
        id v23 = 0;
      }
      sub_10002D658(v16, v23, &v27);
      swift_release();
      swift_release();
      goto LABEL_27;
    case 3uLL:
      memset(v26, 0, 14);
      sub_10002E898(a1, a2);
      unint64_t v7 = v26;
      goto LABEL_26;
    default:
      v26[0] = *v4;
      LOWORD(v26[1]) = v6;
      BYTE2(v26[1]) = BYTE2(v6);
      BYTE3(v26[1]) = BYTE3(v6);
      BYTE4(v26[1]) = BYTE4(v6);
      BYTE5(v26[1]) = BYTE5(v6);
      sub_10002E898(a1, a2);
      unint64_t v7 = (char *)v26 + BYTE6(v6);
LABEL_26:
      sub_10002D658(v26, v7, &v27);
      goto LABEL_27;
  }
}

uint64_t sub_10002D4E8()
{
  if (qword_100097820 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

void sub_10002D548(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = (void *)sub_10005DCF8();
  sub_10002D6D0(v5, v7);
  uint64_t v6 = sub_10005DD08();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);

  if (!v2)
  {
    sub_10002DBD0((uint64_t)v7);
    memcpy(a2, v8, 0x1D4uLL);
  }
}

void *sub_10002D640()
{
  return sub_10002CFC0();
}

unsigned char *sub_10002D658@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)sub_10002E8F0(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)sub_10002E9B4((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)sub_10002EA30((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

void *sub_10002D6D0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id v4 = [a1 regularFileContents];
  if (v4)
  {
    unint64_t v5 = v4;
    uint64_t v6 = sub_10005DA78();
    unint64_t v8 = v7;

    sub_10005D808();
    swift_allocObject();
    sub_10005D7F8();
    sub_10002DC58();
    sub_10005D7E8();
    if (v2)
    {
LABEL_3:
      swift_release();
      return (void *)sub_100014804(v6, v8);
    }
    memcpy(__dst, __src, 0x1E4uLL);
    uint64_t v11 = __dst[0];
    unint64_t v12 = (void *)__dst[1];
    if ((__dst[0] != 0x2D36302D34323032 || __dst[1] != 0xEA00000000003830) && (sub_10005E448() & 1) == 0)
    {
      sub_100008F4C(&qword_100098E40);
      uint64_t v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_10005F1A0;
      sub_10005E1F8(42);
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = v11;
      v17._object = v12;
      sub_10005DEE8(v17);
      sub_10002DBD0((uint64_t)__dst);
      v18._countAndFlagsBits = 0x7078652074756220;
      v18._object = (void *)0xEE00206465746365;
      sub_10005DEE8(v18);
      v19._countAndFlagsBits = 0x2D36302D34323032;
      v19._object = (void *)0xEA00000000003830;
      sub_10005DEE8(v19);
      *(void *)(v13 + 56) = &type metadata for String;
      *(void *)(v13 + 32) = 0xD000000000000018;
      *(void *)(v13 + 40) = 0x8000000100064CB0;
      sub_10005E4E8();
      swift_bridgeObjectRelease();
      sub_10002DC04();
      swift_allocError();
      unsigned char *v14 = 0;
      swift_willThrow();
      goto LABEL_3;
    }
    swift_release();
    sub_100014804(v6, v8);
    return memcpy(a2, __dst, 0x1E4uLL);
  }
  else
  {
    sub_10002DC04();
    swift_allocError();
    *uint64_t v10 = 1;
    return (void *)swift_willThrow();
  }
}

uint64_t sub_10002D99C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10002D6D0(a1, v6);

  sub_10002DBD0((uint64_t)v6);
  memcpy(v5, v7, 0x1D4uLL);
  sub_10002DBFC((uint64_t)v5);
  sub_10002DB68((uint64_t)v5, (uint64_t)&v8);
  return sub_10002DB68((uint64_t)&v8, a2);
}

double sub_10002DB18(uint64_t a1)
{
  *(_DWORD *)(a1 + 464) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 468) = 1;
  return result;
}

uint64_t sub_10002DB68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008F4C(&qword_1000984E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002DBD0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002DBFC(uint64_t result)
{
  *(unsigned char *)(result + 468) = 0;
  return result;
}

unint64_t sub_10002DC04()
{
  unint64_t result = qword_100098E70;
  if (!qword_100098E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098E70);
  }
  return result;
}

unint64_t sub_10002DC58()
{
  unint64_t result = qword_100098E78;
  if (!qword_100098E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098E78);
  }
  return result;
}

uint64_t destroy for FluidityDocument.DocumentData()
{
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for FluidityDocument.DocumentData(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  memcpy(a1 + 2, a2 + 2, 0x1D4uLL);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FluidityDocument.DocumentData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 268) = *(_DWORD *)(a2 + 268);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  *(_DWORD *)(a1 + 300) = *(_DWORD *)(a2 + 300);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
  *(_DWORD *)(a1 + 316) = *(_DWORD *)(a2 + 316);
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
  *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 324);
  *(_DWORD *)(a1 + 328) = *(_DWORD *)(a2 + 328);
  *(_DWORD *)(a1 + 332) = *(_DWORD *)(a2 + 332);
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a2 + 336);
  *(_DWORD *)(a1 + 340) = *(_DWORD *)(a2 + 340);
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  *(_DWORD *)(a1 + 348) = *(_DWORD *)(a2 + 348);
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  *(_DWORD *)(a1 + 356) = *(_DWORD *)(a2 + 356);
  *(_DWORD *)(a1 + 360) = *(_DWORD *)(a2 + 360);
  *(_DWORD *)(a1 + 364) = *(_DWORD *)(a2 + 364);
  *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
  *(_DWORD *)(a1 + 372) = *(_DWORD *)(a2 + 372);
  *(_DWORD *)(a1 + 376) = *(_DWORD *)(a2 + 376);
  *(_DWORD *)(a1 + 380) = *(_DWORD *)(a2 + 380);
  *(_DWORD *)(a1 + 384) = *(_DWORD *)(a2 + 384);
  *(_DWORD *)(a1 + 388) = *(_DWORD *)(a2 + 388);
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  *(_DWORD *)(a1 + 396) = *(_DWORD *)(a2 + 396);
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  *(_DWORD *)(a1 + 404) = *(_DWORD *)(a2 + 404);
  *(_DWORD *)(a1 + 408) = *(_DWORD *)(a2 + 408);
  *(_DWORD *)(a1 + 412) = *(_DWORD *)(a2 + 412);
  *(_DWORD *)(a1 + 416) = *(_DWORD *)(a2 + 416);
  *(_DWORD *)(a1 + 420) = *(_DWORD *)(a2 + 420);
  *(_DWORD *)(a1 + 424) = *(_DWORD *)(a2 + 424);
  *(_DWORD *)(a1 + 428) = *(_DWORD *)(a2 + 428);
  *(_DWORD *)(a1 + 432) = *(_DWORD *)(a2 + 432);
  *(_DWORD *)(a1 + 436) = *(_DWORD *)(a2 + 436);
  *(_DWORD *)(a1 + 440) = *(_DWORD *)(a2 + 440);
  *(_DWORD *)(a1 + 444) = *(_DWORD *)(a2 + 444);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 452) = *(_DWORD *)(a2 + 452);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_DWORD *)(a1 + 460) = *(_DWORD *)(a2 + 460);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  *(_DWORD *)(a1 + 468) = *(_DWORD *)(a2 + 468);
  *(_DWORD *)(a1 + 472) = *(_DWORD *)(a2 + 472);
  *(_DWORD *)(a1 + 476) = *(_DWORD *)(a2 + 476);
  *(_DWORD *)(a1 + 480) = *(_DWORD *)(a2 + 480);
  return a1;
}

void *initializeWithTake for FluidityDocument.DocumentData(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1E4uLL);
}

uint64_t assignWithTake for FluidityDocument.DocumentData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  long long v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v8;
  long long v9 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v9;
  long long v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  long long v11 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v11;
  long long v12 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v12;
  long long v13 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v13;
  long long v14 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = v14;
  long long v15 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v15;
  long long v16 = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 384) = v16;
  long long v17 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v17;
  long long v18 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v18;
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a2 + 464);
  *(_DWORD *)(a1 + 480) = *(_DWORD *)(a2 + 480);
  return a1;
}

uint64_t getEnumTagSinglePayload for FluidityDocument.DocumentData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 484)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FluidityDocument.DocumentData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 472) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_DWORD *)(result + 480) = 0;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 484) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 484) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FluidityDocument.DocumentData()
{
  return &type metadata for FluidityDocument.DocumentData;
}

ValueMetadata *type metadata accessor for FluidityDocument.FluidityDocumentError()
{
  return &type metadata for FluidityDocument.FluidityDocumentError;
}

ValueMetadata *type metadata accessor for FluidityDocument()
{
  return &type metadata for FluidityDocument;
}

unint64_t sub_10002E2EC()
{
  unint64_t result = qword_100098E80;
  if (!qword_100098E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098E80);
  }
  return result;
}

uint64_t sub_10002E340(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574656D61726170 && a2 == 0xEA00000000007372)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_10005E448();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10002E440@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  long long v17 = a2;
  uint64_t v4 = sub_100008F4C(&qword_100098E88);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000183C0(a1, a1[3]);
  sub_10002E694();
  sub_10005E538();
  if (v2)
  {
    sub_100020C8C((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = v5;
    long long v9 = v17;
    LOBYTE(v18[0]) = 0;
    uint64_t v10 = sub_10005E3A8();
    uint64_t v12 = v11;
    uint64_t v16 = v10;
    v21[495] = 1;
    sub_10002E6E8();
    swift_bridgeObjectRetain();
    sub_10005E3D8();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v7, v4);
    memcpy(v9 + 2, v20, 0x1D4uLL);
    memcpy(v21, v20, 0x1D4uLL);
    sub_100020C8C((uint64_t)a1);
    uint64_t v13 = v16;
    v18[0] = v16;
    v18[1] = v12;
    memcpy(v19, v21, sizeof(v19));
    uint64_t result = sub_10002DBD0((uint64_t)v18);
    *long long v9 = v13;
    v9[1] = v12;
  }
  return result;
}

unint64_t sub_10002E694()
{
  unint64_t result = qword_100098E90;
  if (!qword_100098E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098E90);
  }
  return result;
}

unint64_t sub_10002E6E8()
{
  unint64_t result = qword_100098E98;
  if (!qword_100098E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098E98);
  }
  return result;
}

unint64_t sub_10002E73C()
{
  unint64_t result = qword_100098EA8;
  if (!qword_100098EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098EA8);
  }
  return result;
}

unint64_t sub_10002E790()
{
  unint64_t result = qword_100098EB8;
  if (!qword_100098EB8)
  {
    sub_10005D838();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098EB8);
  }
  return result;
}

unint64_t sub_10002E7E8()
{
  unint64_t result = qword_100098EC8;
  if (!qword_100098EC8)
  {
    sub_100014768(&qword_100098EC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098EC8);
  }
  return result;
}

unint64_t sub_10002E844()
{
  unint64_t result = qword_100098ED0;
  if (!qword_100098ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098ED0);
  }
  return result;
}

uint64_t sub_10002E898(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_10002E8F0(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_10002E9B4(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_10005D8E8();
  swift_allocObject();
  uint64_t result = sub_10005D898();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_10005DA58();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_10002EA30(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_10005D8E8();
  swift_allocObject();
  uint64_t result = sub_10005D898();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

unsigned char *_s22MercuryPosterExtension16FluidityDocumentV21FluidityDocumentErrorOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002EB80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FluidityDocument.DocumentData.CodingKeys()
{
  return &type metadata for FluidityDocument.DocumentData.CodingKeys;
}

unint64_t sub_10002EBBC()
{
  unint64_t result = qword_100098EE0;
  if (!qword_100098EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098EE0);
  }
  return result;
}

unint64_t sub_10002EC14()
{
  unint64_t result = qword_100098EE8;
  if (!qword_100098EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098EE8);
  }
  return result;
}

unint64_t sub_10002EC6C()
{
  unint64_t result = qword_100098EF0;
  if (!qword_100098EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100098EF0);
  }
  return result;
}

void sub_10002ECC0(uint64_t a1)
{
  *(void *)&long long v54 = 0;
  id v3 = [v1 loadUserInfoWithError:&v54];
  unsigned int v4 = (void *)v54;
  if (v3)
  {
    uint64_t v5 = v3;
    unsigned int v6 = (void *)sub_10005DDF8();
    id v7 = v4;
  }
  else
  {
    id v8 = (id)v54;
    sub_10005D978();

    swift_willThrow();
    swift_errorRelease();
    unsigned int v6 = (void *)sub_10000A62C((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v46 = a1 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(a1 + 64);
  int64_t v47 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v12 << 6);
LABEL_11:
      sub_100014898(*(void *)(a1 + 48) + 40 * v15, (uint64_t)&v50);
      sub_1000095C4(*(void *)(a1 + 56) + 32 * v15, (uint64_t)v52 + 8);
      goto LABEL_21;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_55;
    }
    if (v16 < v47)
    {
      unint64_t v17 = *(void *)(v46 + 8 * v16);
      if (v17) {
        goto LABEL_15;
      }
      v12 += 2;
      if (v16 + 1 >= v47)
      {
        int64_t v12 = v16;
      }
      else
      {
        unint64_t v17 = *(void *)(v46 + 8 * v12);
        if (v17)
        {
          ++v16;
LABEL_15:
          unint64_t v11 = (v17 - 1) & v17;
          unint64_t v15 = __clz(__rbit64(v17)) + (v16 << 6);
          int64_t v12 = v16;
          goto LABEL_11;
        }
        if (v16 + 2 < v47)
        {
          unint64_t v17 = *(void *)(v46 + 8 * (v16 + 2));
          if (v17)
          {
            v16 += 2;
            goto LABEL_15;
          }
          int64_t v30 = v16 + 3;
          if (v16 + 3 >= v47)
          {
            int64_t v12 = v16 + 2;
          }
          else
          {
            unint64_t v17 = *(void *)(v46 + 8 * v30);
            if (v17)
            {
              v16 += 3;
              goto LABEL_15;
            }
            while (1)
            {
              int64_t v16 = v30 + 1;
              if (__OFADD__(v30, 1)) {
                __break(1u);
              }
              if (v16 >= v47) {
                break;
              }
              unint64_t v17 = *(void *)(v46 + 8 * v16);
              ++v30;
              if (v17) {
                goto LABEL_15;
              }
            }
            int64_t v12 = v47 - 1;
          }
        }
      }
    }
    unint64_t v11 = 0;
    uint64_t v53 = 0;
    memset(v52, 0, sizeof(v52));
    long long v50 = 0u;
    long long v51 = 0u;
LABEL_21:
    sub_10002F6C0((uint64_t)&v50, (uint64_t)&v54);
    if (!*((void *)&v55 + 1)) {
      break;
    }
    sub_100014878(&v57, v49);
    long long v50 = v54;
    long long v51 = v55;
    *(void *)&v52[0] = v56;
    sub_1000095C4((uint64_t)v49, (uint64_t)v48);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v20 = sub_100012164((uint64_t)&v50);
    uint64_t v21 = v6[2];
    BOOL v22 = (v19 & 1) == 0;
    uint64_t v23 = v21 + v22;
    if (__OFADD__(v21, v22))
    {
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      swift_once();
LABEL_50:
      uint64_t v36 = sub_10005DCD8();
      sub_100008DB0(v36, (uint64_t)qword_10009FA60);
      swift_bridgeObjectRetain();
      swift_errorRetain();
      swift_bridgeObjectRetain();
      swift_errorRetain();
      id v37 = sub_10005DCB8();
      os_log_type_t v38 = sub_10005E078();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = swift_slowAlloc();
        *(void *)&long long v54 = swift_slowAlloc();
        *(_DWORD *)uint64_t v39 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v40 = sub_10005DE08();
        unint64_t v42 = v41;
        swift_bridgeObjectRelease();
        *(void *)&long long v50 = sub_100044640(v40, v42, (uint64_t *)&v54);
        sub_10005E138();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v39 + 12) = 2080;
        swift_getErrorValue();
        uint64_t v43 = sub_10005E488();
        *(void *)&long long v50 = sub_100044640(v43, v44, (uint64_t *)&v54);
        sub_10005E138();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Error updating descriptor user info with %s. %s", (uint8_t *)v39, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_bridgeObjectRelease_n();
        swift_errorRelease();
        swift_errorRelease();
      }
      return;
    }
    char v24 = v19;
    if (v6[3] >= v23)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v19) {
          goto LABEL_7;
        }
      }
      else
      {
        sub_100047C64();
        if (v24) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      sub_100045D7C(v23, isUniquelyReferenced_nonNull_native);
      unint64_t v25 = sub_100012164((uint64_t)&v50);
      if ((v24 & 1) != (v26 & 1))
      {
        sub_10005E478();
        __break(1u);
        return;
      }
      unint64_t v20 = v25;
      if (v24)
      {
LABEL_7:
        uint64_t v13 = (_OWORD *)(v6[7] + 32 * v20);
        sub_100020C8C((uint64_t)v13);
        sub_100014878(v48, v13);
        goto LABEL_8;
      }
    }
    v6[(v20 >> 6) + 8] |= 1 << v20;
    sub_100014898((uint64_t)&v50, v6[6] + 40 * v20);
    sub_100014878(v48, (_OWORD *)(v6[7] + 32 * v20));
    uint64_t v27 = v6[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_54;
    }
    v6[2] = v29;
LABEL_8:
    swift_bridgeObjectRelease();
    sub_100009510((uint64_t)&v50);
    sub_100020C8C((uint64_t)v49);
  }
  swift_release();
  Class isa = sub_10005DDE8().super.isa;
  swift_bridgeObjectRelease();
  *(void *)&long long v54 = 0;
  unsigned int v32 = [v45 storeUserInfo:isa error:&v54];

  id v33 = (void *)v54;
  if (!v32)
  {
    id v35 = (id)v54;
    sub_10005D978();

    swift_willThrow();
    if (qword_100097890 != -1) {
      goto LABEL_56;
    }
    goto LABEL_50;
  }

  id v34 = v33;
}

void sub_10002F3D4(uint64_t a1)
{
  id v15 = 0;
  id v3 = [v1 loadGalleryOptionsWithError:&v15];
  if (v3)
  {
    id v4 = v3;
    id v5 = v15;
  }
  else
  {
    id v6 = v15;
    sub_10005D978();

    swift_willThrow();
    swift_errorRelease();
    id v4 = [objc_allocWithZone((Class)ATXPosterDescriptorGalleryOptions) init];
  }
  [v4 setFeaturedConfidenceLevel:a1];
  id v15 = 0;
  if ([v1 storeGalleryOptions:v4 error:&v15])
  {
    id v7 = v15;
LABEL_10:

    return;
  }
  id v8 = v15;
  sub_10005D978();

  swift_willThrow();
  if (qword_100097890 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_10005DCD8();
  sub_100008DB0(v9, (uint64_t)qword_10009FA60);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v10 = sub_10005DCB8();
  os_log_type_t v11 = sub_10005E078();
  if (os_log_type_enabled(v10, v11))
  {
    int64_t v12 = (uint8_t *)swift_slowAlloc();
    id v15 = (id)swift_slowAlloc();
    *(_DWORD *)int64_t v12 = 136315138;
    swift_getErrorValue();
    uint64_t v13 = sub_10005E488();
    sub_100044640(v13, v14, (uint64_t *)&v15);
    sub_10005E138();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error setting descriptor as hero. %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    goto LABEL_10;
  }

  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();
}

uint64_t sub_10002F6C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008F4C(&qword_100098EF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002F728()
{
  uint64_t v0 = sub_10005DCD8();
  sub_100008EE8(v0, qword_100098F00);
  uint64_t v1 = sub_100008DB0(v0, (uint64_t)qword_100098F00);
  if (qword_100097898 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100008DB0(v0, (uint64_t)qword_10009FA78);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10002F7F0(void *a1, void *a2)
{
  id v4 = [a1 backgroundView];
  id v5 = [self blackColor];
  [v4 setBackgroundColor:v5];

  id v6 = objc_msgSend(objc_msgSend(a2, "contents"), "descriptorIdentifier");
  swift_unknownObjectRelease();
  if (!v6) {
    goto LABEL_4;
  }
  uint64_t v7 = sub_10005DE68();
  unint64_t v9 = v8;

  swift_bridgeObjectRetain();
  char v10 = sub_100033BEC();
  if (v10 == 8)
  {
    swift_bridgeObjectRelease();
LABEL_4:
    if (qword_100097828 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_10005DCD8();
    sub_100008DB0(v11, (uint64_t)qword_100098F00);
    oslog = sub_10005DCB8();
    os_log_type_t v12 = sub_10005E078();
    if (os_log_type_enabled(oslog, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v12, "couldn’t set up rendering, no descriptor identifier!", v13, 2u);
      swift_slowDealloc();
    }

    return;
  }
  char v14 = v10;
  double v62 = a2;
  os_log_t osloga = (os_log_t)v7;
  aBlock[0] = 0;
  id v15 = objc_msgSend(objc_msgSend(a2, "contents"), "loadUserInfoWithError:", aBlock);
  swift_unknownObjectRelease();
  id v16 = aBlock[0];
  if (!v15)
  {
    id v24 = aBlock[0];
    sub_10005D978();

    swift_willThrow();
    if (qword_100097828 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_10005DCD8();
    sub_100008DB0(v25, (uint64_t)qword_100098F00);
    char v26 = sub_10005DCB8();
    os_log_type_t v27 = sub_10005E078();
    if (os_log_type_enabled(v26, v27))
    {
      BOOL v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "No user info. This is expected if we've never created a wallpaper (such as for the initial gallery snapshot), but otherwise unexpected.", v28, 2u);
      swift_slowDealloc();
      int v61 = 2;
      swift_errorRelease();

      uint64_t countAndFlagsBits = 0;
      unint64_t v29 = 0;
    }
    else
    {
      swift_errorRelease();

      uint64_t countAndFlagsBits = 0;
      unint64_t v29 = 0;
      int v61 = 2;
    }
    goto LABEL_44;
  }
  uint64_t v17 = sub_10005DDF8();
  id v18 = v16;

  strcpy((char *)&v66, "lookIdentifier");
  HIBYTE(v66) = -18;
  sub_10005E1C8();
  if (*(void *)(v17 + 16) && (unint64_t v19 = sub_100012164((uint64_t)aBlock), (v20 & 1) != 0))
  {
    sub_1000095C4(*(void *)(v17 + 56) + 32 * v19, (uint64_t)&v66);
  }
  else
  {
    long long v66 = 0u;
    long long v67 = 0u;
  }
  sub_100009510((uint64_t)aBlock);
  if (*((void *)&v67 + 1))
  {
    int v21 = swift_dynamicCast();
    if (v21) {
      uint64_t countAndFlagsBits = v65._countAndFlagsBits;
    }
    else {
      uint64_t countAndFlagsBits = 0;
    }
    if (v21) {
      object = v65._object;
    }
    else {
      object = 0;
    }
  }
  else
  {
    sub_100009564((uint64_t)&v66);
    uint64_t countAndFlagsBits = 0;
    object = 0;
  }
  strcpy((char *)&v65, "appearanceMode");
  HIBYTE(v65._object) = -18;
  sub_10005E1C8();
  if (*(void *)(v17 + 16) && (unint64_t v30 = sub_100012164((uint64_t)aBlock), (v31 & 1) != 0))
  {
    sub_1000095C4(*(void *)(v17 + 56) + 32 * v30, (uint64_t)&v66);
  }
  else
  {
    long long v66 = 0u;
    long long v67 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100009510((uint64_t)aBlock);
  if (*((void *)&v67 + 1))
  {
    if (swift_dynamicCast())
    {
      v32._rawValue = &off_1000798B8;
      Swift::Int v33 = sub_10005E398(v32, v65);
      swift_bridgeObjectRelease();
      if (!v33)
      {
        int v61 = 0;
        goto LABEL_42;
      }
      if (v33 != 2)
      {
        if (v33 == 1) {
          int v34 = 1;
        }
        else {
          int v34 = 2;
        }
        goto LABEL_41;
      }
    }
  }
  else
  {
    sub_100009564((uint64_t)&v66);
  }
  int v34 = 2;
LABEL_41:
  int v61 = v34;
LABEL_42:
  unint64_t v29 = (unint64_t)object;
LABEL_44:
  switch(v14)
  {
    case 7:
      uint64_t v35 = type metadata accessor for ToriRenderer();
      uint64_t v36 = &off_100081E48;
      break;
    case 6:
      uint64_t v35 = type metadata accessor for ShippouRenderer();
      uint64_t v36 = &off_100082158;
      break;
    case 5:
      uint64_t v35 = type metadata accessor for Pro24WallpaperRenderer();
      uint64_t v36 = &off_100081068;
      break;
    default:
      uint64_t v35 = type metadata accessor for FluidityWallpaperRenderer(0);
      uint64_t v36 = &off_10007FF88;
      break;
  }
  uint64_t v37 = sub_100033E0C(v14);
  unint64_t v39 = v38;
  if (v29)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v58 = countAndFlagsBits;
    unint64_t v39 = v29;
  }
  else
  {
    uint64_t v58 = v37;
  }
  uint64_t v59 = v29;
  if (qword_100097828 != -1) {
    swift_once();
  }
  uint64_t v60 = countAndFlagsBits;
  uint64_t v40 = sub_10005DCD8();
  sub_100008DB0(v40, (uint64_t)qword_100098F00);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v41 = sub_10005DCB8();
  os_log_type_t v42 = sub_10005E068();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = swift_slowAlloc();
    aBlock[0] = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)&long long v66 = sub_100044640(v7, v9, (uint64_t *)aBlock);
    sub_10005E138();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v43 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(void *)&long long v66 = sub_100044640(v58, v39, (uint64_t *)aBlock);
    sub_10005E138();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "creating render coordinator for descriptor “%{public}s” look “%{public}s”", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for WallpaperRenderingCoordinator();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  unint64_t v44 = sub_100038CBC(v7, v9, v35, (uint64_t)v36, v62, v60, v59, v61);
  id v45 = [a1 backgroundView];
  uint64_t v46 = v36;
  uint64_t v47 = v35;
  id v48 = [a1 floatingView];
  sub_100039C8C(v45, v48);

  swift_beginAccess();
  id v49 = a1;
  uint64_t v50 = swift_retain();
  sub_100031AE4(v50, v49);
  swift_endAccess();

  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = v47;
  *(void *)(v51 + 24) = v46;
  *(void *)(v51 + 32) = osloga;
  *(void *)(v51 + 40) = v9;
  *(void *)(v51 + 48) = v58;
  *(void *)(v51 + 56) = v39;
  *(unsigned char *)(v51 + 64) = v61;
  *(void *)(v51 + 72) = v62;
  long long v52 = (void *)swift_allocObject();
  _OWORD v52[2] = sub_100031EE4;
  v52[3] = v51;
  aBlock[4] = sub_100031F30;
  aBlock[5] = v52;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100030624;
  aBlock[3] = &unk_100081578;
  uint64_t v53 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  [v49 updatePreferences:v53];
  _Block_release(v53);
  LOBYTE(v46) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v46) {
    __break(1u);
  }
  if (v44[13])
  {
    uint64_t v54 = v44[14];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v56 = swift_allocObject();
    swift_unknownObjectWeakInit();
    long long v57 = *(void (**)(void (*)(), uint64_t, uint64_t, uint64_t))(v54 + 136);
    swift_unknownObjectRetain();
    swift_retain();
    v57(sub_100031F58, v56, ObjectType, v54);
    swift_release();
    swift_unknownObjectRelease();
  }
  swift_release();
  swift_release();
}

void sub_100030470(void *a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(void, void), uint64_t a5, unint64_t a6, uint64_t a7, void *a8, char a9, void *a10)
{
  objc_msgSend(a1, "setHandlesWakeAnimation:", a4[5](a3, a4) & 1);
  objc_msgSend(a1, "setHideDimmingLayer:", a4[6](a3, a4) & 1);
  if (a4[8](a3, a4))
  {
    [a1 setUserTapEventsRequested:1];
    [a1 setSignificantEventTime:3];
    [a1 setSignificantEventOptions:2];
  }
  id v17 = [a10 traitCollection];
  id v18 = v17;
  if (v17)
  {
    id v19 = [v17 userInterfaceStyle];
  }
  else
  {
    id v19 = 0;
  }
  id v20 = sub_10003474C(a5, a6, a7, a8, a9, (uint64_t)v19, v18 == 0);
  [a1 setPreferredProminentColor:v20];
}

uint64_t sub_100030624(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void (**)(uint64_t, id))(a1 + 32);
  swift_unknownObjectRetain();
  id v6 = a3;
  v5(a2, v6);

  return swift_unknownObjectRelease();
}

void sub_10003068C()
{
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    [Strong noteContentSignificantlyChanged];
  }
}

void sub_100030768(void *a1, void *a2, void *a3)
{
  uint64_t v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC22MercuryPosterExtension17DrawingController_rendererCoordinators);
  swift_beginAccess();
  uint64_t v8 = *v7;
  id v9 = a1;
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_10003811C(v9, v8);

  swift_bridgeObjectRelease();
  if (v10)
  {
    id v11 = [a3 animationSettings];
    sub_10003A700(a2, v11);

    swift_release();
  }
  else
  {
    if (qword_100097828 != -1) {
      swift_once();
    }
    uint64_t v12 = sub_10005DCD8();
    sub_100008DB0(v12, (uint64_t)qword_100098F00);
    uint64_t v13 = sub_10005DCB8();
    os_log_type_t v14 = sub_10005E078();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "trying to update environment for a coordinator that isn’t there", v15, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100030B3C(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  NSString v9 = sub_10005DE38();
  id v37 = [a3 extendRenderingSessionForReason:v9];

  uint64_t v10 = self;
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = v12;
  aBlock[4] = sub_100031E7C;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003552C;
  aBlock[3] = &unk_100081500;
  os_log_type_t v14 = _Block_copy(aBlock);
  swift_release();
  id v15 = [v10 scheduledTimerWithTimeInterval:0 repeats:v14 block:a4];
  _Block_release(v14);
  id v16 = (uint64_t *)(v4 + OBJC_IVAR____TtC22MercuryPosterExtension17DrawingController_transitionSessions);
  swift_beginAccess();
  uint64_t v17 = *v16;
  id v18 = a3;
  swift_bridgeObjectRetain();
  id v19 = sub_1000381E4((uint64_t)v18, v17);
  int v21 = v20;
  uint64_t v23 = v22;

  swift_bridgeObjectRelease();
  if (v19)
  {
    [v21 invalidate];
  }
  else
  {
    id v24 = (uint64_t *)(v4 + OBJC_IVAR____TtC22MercuryPosterExtension17DrawingController_rendererCoordinators);
    swift_beginAccess();
    uint64_t v25 = *v24;
    id v26 = v18;
    swift_bridgeObjectRetain();
    uint64_t v27 = sub_10003811C(v26, v25);

    swift_bridgeObjectRelease();
    if (v27
      && (v28 = *(void *)(v27 + 104), uint64_t v29 = *(void *)(v27 + 112), swift_unknownObjectRetain(), swift_release(), v28)
      && (uint64_t ObjectType = swift_getObjectType(),
          char v31 = (uint64_t (*)(uint64_t, uint64_t))(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 152))(ObjectType, v29), swift_unknownObjectRelease(), v31))
    {
      uint64_t v23 = v31(a1, a2);
      sub_100012030((uint64_t)v31);
    }
    else
    {
      uint64_t v23 = 0;
    }
  }
  swift_beginAccess();
  swift_retain();
  id v32 = v18;
  id v33 = v37;
  id v34 = v15;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v38 = *v16;
  *id v16 = 0x8000000000000000;
  sub_100047374((uint64_t)v33, (uint64_t)v34, v23, v32, isUniquelyReferenced_nonNull_native);
  *id v16 = v38;

  swift_bridgeObjectRelease();
  swift_endAccess();

  return swift_release();
}

void sub_100030EB4()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (char *)Strong;
    swift_beginAccess();
    uint64_t v2 = swift_unknownObjectWeakLoadStrong();
    if (v2)
    {
      uint64_t v3 = (void *)v2;
      uint64_t v4 = (uint64_t *)&v1[OBJC_IVAR____TtC22MercuryPosterExtension17DrawingController_transitionSessions];
      swift_beginAccess();
      uint64_t v5 = *v4;
      swift_bridgeObjectRetain();
      id v6 = v3;
      uint64_t v7 = sub_1000381E4((uint64_t)v6, v5);
      NSString v9 = v8;
      uint64_t v11 = v10;

      swift_bridgeObjectRelease();
      if (v7)
      {
        if (v11)
        {
          swift_retain();
          sub_100031A9C(v7, v9);
          ContinuousRenderingToken.invalidate()();
          swift_release();
        }
        else
        {
          sub_100031A9C(v7, v9);
        }
      }
      swift_beginAccess();
      uint64_t v12 = (char *)v6;
      uint64_t v13 = (void *)sub_1000319B4((uint64_t)v12);
      id v15 = v14;
      swift_endAccess();

      sub_100031A9C(v13, v15);
      uint64_t v1 = v12;
    }
  }
}

void sub_100031030(void *a1)
{
  uint64_t v2 = v1;
  if (qword_100097828 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_10005DCD8();
  sub_100008DB0(v4, (uint64_t)qword_100098F00);
  uint64_t v5 = sub_10005DCB8();
  os_log_type_t v6 = sub_10005E068();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "renderer invalidated, cleaning up coordinator", v7, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  id v8 = a1;
  sub_100031864((unint64_t)v8);
  swift_endAccess();

  swift_release();
  NSString v9 = (uint64_t *)(v2 + OBJC_IVAR____TtC22MercuryPosterExtension17DrawingController_transitionSessions);
  swift_beginAccess();
  uint64_t v10 = *v9;
  id v11 = v8;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_1000381E4((uint64_t)v11, v10);
  os_log_type_t v14 = v13;
  uint64_t v16 = v15;

  swift_bridgeObjectRelease();
  if (v12)
  {
    [v14 invalidate];
    if (v16)
    {
      swift_retain();
      ContinuousRenderingToken.invalidate()();
      swift_release();
    }
    swift_beginAccess();
    id v17 = v11;
    id v18 = (void *)sub_1000319B4((uint64_t)v17);
    id v20 = v19;
    swift_endAccess();

    sub_100031A9C(v18, v20);
    swift_release();
  }
}

uint64_t sub_1000312B8(void *a1, double a2, double a3)
{
  uint64_t v4 = v3;
  id v8 = (uint64_t *)(v4 + OBJC_IVAR____TtC22MercuryPosterExtension17DrawingController_rendererCoordinators);
  swift_beginAccess();
  uint64_t v9 = *v8;
  id v10 = a1;
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_10003811C(v10, v9);

  uint64_t result = swift_bridgeObjectRelease();
  if (v11)
  {
    if (*(void *)(v11 + 104))
    {
      uint64_t v13 = *(void *)(v11 + 112);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v15 = *(void (**)(uint64_t, uint64_t, double, double))(v13 + 72);
      swift_unknownObjectRetain();
      v15(ObjectType, v13, a2, a3);
      swift_unknownObjectRelease();
    }
    sub_100030B3C(0x70615472657355, 0xE700000000000000, v10, 3.0);
    return swift_release();
  }
  return result;
}

id sub_1000314DC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DrawingController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DrawingController()
{
  return self;
}

uint64_t destroy for DrawingController.TransitionSessionInfo(id *a1)
{
  return swift_release();
}

void *_s22MercuryPosterExtension17DrawingControllerC21TransitionSessionInfoVwCP_0(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  id v6 = v4;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DrawingController.TransitionSessionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DrawingController.TransitionSessionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DrawingController.TransitionSessionInfo(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DrawingController.TransitionSessionInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DrawingController.TransitionSessionInfo()
{
  return &type metadata for DrawingController.TransitionSessionInfo;
}

uint64_t sub_10003176C(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1000121A8(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100047A8C();
    uint64_t v7 = v10;
  }

  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v7 + 56) + 32 * v4);
  sub_100046954(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100031864(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((v4 & 0xC000000000000001) == 0)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    a1 = sub_1000122DC(a1);
    char v13 = v12;
    swift_bridgeObjectRelease();
    if (v13)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      Swift::Int v9 = *v2;
      Swift::Int v17 = *v2;
      *uint64_t v2 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_100047E4C();
        Swift::Int v9 = v17;
      }
      goto LABEL_11;
    }
    return 0;
  }
  if (v4 < 0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  id v6 = (id)a1;
  uint64_t v7 = sub_10005E2D8();

  if (!v7)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_unknownObjectRelease();
  uint64_t v8 = sub_10005E2C8();
  Swift::Int v9 = sub_100031B98(v5, v8);
  swift_retain();
  a1 = sub_1000122DC((uint64_t)v6);
  char v11 = v10;
  swift_release();
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_11:

  uint64_t v15 = *(void *)(*(void *)(v9 + 56) + 8 * a1);
  sub_100046B08(a1, v9);
  *uint64_t v2 = v9;
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1000319B4(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1000122DC(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100047FF8();
    uint64_t v7 = v10;
  }

  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 24 * v4);
  sub_100046CBC(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

void *sub_100031A9C(void *result, void *a2)
{
  if (result)
  {

    return (void *)swift_release();
  }
  return result;
}

uint64_t sub_100031AE4(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t result = sub_10005E2C8();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    *uint64_t v3 = sub_100031B98(v7, result + 1);
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  Swift::Int v10 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  sub_100047200(a1, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v10;

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100031B98(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100008F4C(&qword_1000985A0);
    uint64_t v2 = sub_10005E358();
    uint64_t v18 = v2;
    sub_10005E2B8();
    uint64_t v3 = sub_10005E2E8();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_100031DC4();
      do
      {
        swift_dynamicCast();
        type metadata accessor for WallpaperRenderingCoordinator();
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_100046094(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = sub_10005E108(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = sub_10005E2E8();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

unint64_t sub_100031DC4()
{
  unint64_t result = qword_100098528;
  if (!qword_100098528)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100098528);
  }
  return result;
}

uint64_t sub_100031E04()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100031E3C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100031E7C()
{
}

uint64_t sub_100031E84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100031E94()
{
  return swift_release();
}

uint64_t sub_100031E9C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

void sub_100031EE4(void *a1, uint64_t a2)
{
  sub_100030470(a1, a2, *(void *)(v2 + 16), *(uint64_t (***)(void, void))(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void **)(v2 + 56), *(unsigned char *)(v2 + 64), *(void **)(v2 + 72));
}

uint64_t sub_100031F20()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100031F30()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_100031F58()
{
}

uint64_t sub_100031F6C()
{
  unint64_t v12 = _swiftEmptyArrayStorage;
  sub_10004FC5C(0, 14, 0);
  uint64_t v0 = 0;
  uint64_t v1 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v3 = *(uint64_t *)((char *)&off_100079920 + v0 + 32);
    uint64_t v2 = *(uint64_t *)((char *)&off_100079920 + v0 + 40);
    id v4 = objc_allocWithZone((Class)NSNull);
    swift_bridgeObjectRetain_n();
    id v5 = [v4 init];
    swift_bridgeObjectRelease();
    unint64_t v12 = v1;
    unint64_t v7 = v1[2];
    unint64_t v6 = v1[3];
    if (v7 >= v6 >> 1)
    {
      sub_10004FC5C(v6 > 1, v7 + 1, 1);
      uint64_t v1 = v12;
    }
    v1[2] = v7 + 1;
    unint64_t v8 = &v1[3 * v7];
    v8[4] = v3;
    v8[5] = v2;
    v8[6] = v5;
    v0 += 16;
  }
  while (v0 != 224);
  swift_arrayDestroy();
  if (v1[2])
  {
    sub_100008F4C(&qword_100098590);
    unint64_t v9 = (void *)sub_10005E368();
  }
  else
  {
    unint64_t v9 = &_swiftEmptyDictionarySingleton;
  }
  unint64_t v12 = v9;
  unint64_t v10 = (void *)swift_bridgeObjectRetain();
  sub_100032114(v10, 1, &v12);
  uint64_t result = swift_release();
  qword_10009FA10 = (uint64_t)v12;
  return result;
}

uint64_t sub_100032114(void *a1, char a2, void *a3)
{
  if (!a1[2]) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v41 = a1[2];
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v8 = a1[6];
  swift_bridgeObjectRetain();
  unint64_t v9 = (void *)*a3;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  unint64_t v11 = sub_1000121F8(v7, v6);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_1000476C4();
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    id v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    id v20 = (uint64_t *)(v19[6] + 16 * v11);
    *id v20 = v7;
    v20[1] = v6;
    *(void *)(v19[7] + 8 * v11) = v8;
    uint64_t v21 = v19[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v19[2] = v23;
    uint64_t v24 = v41 - 1;
    if (v41 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    for (unint64_t i = a1 + 9; ; i += 3)
    {
      uint64_t v27 = *(i - 2);
      uint64_t v26 = *(i - 1);
      uint64_t v28 = *i;
      uint64_t v29 = (void *)*a3;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      unint64_t v30 = sub_1000121F8(v27, v26);
      uint64_t v32 = v29[2];
      BOOL v33 = (v31 & 1) == 0;
      BOOL v22 = __OFADD__(v32, v33);
      uint64_t v34 = v32 + v33;
      if (v22) {
        break;
      }
      char v35 = v31;
      if (v29[3] < v34)
      {
        sub_1000453F0(v34, 1);
        unint64_t v30 = sub_1000121F8(v27, v26);
        if ((v35 & 1) != (v36 & 1)) {
          goto LABEL_25;
        }
      }
      if (v35) {
        goto LABEL_10;
      }
      id v37 = (void *)*a3;
      *(void *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      uint64_t v38 = (uint64_t *)(v37[6] + 16 * v30);
      uint64_t *v38 = v27;
      v38[1] = v26;
      *(void *)(v37[7] + 8 * v30) = v28;
      uint64_t v39 = v37[2];
      BOOL v22 = __OFADD__(v39, 1);
      uint64_t v40 = v39 + 1;
      if (v22) {
        goto LABEL_24;
      }
      v37[2] = v40;
      if (!--v24) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1000453F0(v14, a2 & 1);
  unint64_t v16 = sub_1000121F8(v7, v6);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    swift_allocError();
    swift_willThrow();
    swift_errorRetain();
    sub_100008F4C(&qword_100099B60);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease_n();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_10005E478();
  __break(1u);
LABEL_26:
  sub_10005E1F8(30);
  v42._object = (void *)0x8000000100064E10;
  v42._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  sub_10005DEE8(v42);
  sub_10005E2A8();
  v43._uint64_t countAndFlagsBits = 39;
  v43._object = (void *)0xE100000000000000;
  sub_10005DEE8(v43);
  uint64_t result = sub_10005E308();
  __break(1u);
  return result;
}

void *WallpaperAppearanceMode.default.unsafeMutableAddressor()
{
  return &static WallpaperAppearanceMode.default;
}

uint64_t sub_1000324B8(unsigned __int8 a1)
{
  int v1 = a1;
  if (a1 == 7) {
    return 7943268;
  }
  if (a1 == 6) {
    return 7879012;
  }
  uint64_t v3 = (void *)0xE700000000000000;
  v4._uint64_t countAndFlagsBits = 0x63696D616E7964;
  switch(v1)
  {
    case 0:
      goto LABEL_12;
    case 1:
      uint64_t v3 = (void *)0xE300000000000000;
      v4._uint64_t countAndFlagsBits = 6647407;
      goto LABEL_12;
    case 2:
      uint64_t v3 = (void *)0xE300000000000000;
      v4._uint64_t countAndFlagsBits = 7305076;
      goto LABEL_12;
    case 3:
      uint64_t v3 = (void *)0xE500000000000000;
      v4._uint64_t countAndFlagsBits = 0x6565726874;
      goto LABEL_12;
    case 4:
      uint64_t v3 = (void *)0xE400000000000000;
      v4._uint64_t countAndFlagsBits = 1920298854;
LABEL_12:
      v4._object = v3;
      sub_10005DEE8(v4);
      swift_bridgeObjectRelease();
      uint64_t result = 0x7974696469756C66;
      break;
    default:
      uint64_t result = 2021144426;
      break;
  }
  return result;
}

uint64_t WallpaperAppearanceMode.uiUserInterfaceStyle.getter(char a1)
{
  return qword_100062880[a1];
}

uint64_t WallpaperAppearanceMode.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x746867694CLL;
  }
  if (a1 == 1) {
    return 1802658116;
  }
  return 0x6974616D6F747541;
}

uint64_t sub_100032654(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10004BD38(*a1, *a2);
}

Swift::Int sub_100032660()
{
  return sub_10005E528();
}

uint64_t sub_1000326FC()
{
  sub_10005DEB8();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100032784()
{
  return sub_10005E528();
}

uint64_t sub_10003281C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = _s22MercuryPosterExtension23WallpaperAppearanceModeO8rawValueACSgSS_tcfC_0(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_10003284C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE500000000000000;
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = 1802658116;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6974616D6F747541;
    unint64_t v4 = 0xE900000000000063;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x746867694CLL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1000328A4()
{
  uint64_t v0 = sub_10005DCD8();
  sub_100008EE8(v0, qword_100099140);
  uint64_t v1 = sub_100008DB0(v0, (uint64_t)qword_100099140);
  if (qword_1000978C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100008DB0(v0, (uint64_t)qword_10009FAF0);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10003296C()
{
  sub_10005DB58();
  __chkstk_darwin();
  sub_10005DE28();
  __chkstk_darwin();
  id v0 = [self currentDevice];
  [v0 userInterfaceIdiom];

  sub_10005DE18();
  sub_10005DB48();
  return sub_10005DE88();
}

uint64_t sub_100032C9C(unsigned __int8 *a1, char *a2)
{
  return sub_10004BE44(*a1, *a2);
}

Swift::Int sub_100032CA8()
{
  return sub_10005E528();
}

uint64_t sub_100032D84()
{
  sub_10005DEB8();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100032E48()
{
  return sub_10005E528();
}

uint64_t sub_100032F20@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100033BA0(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_100032F50(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x63696D616E7964;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE300000000000000;
      uint64_t v3 = 6647407;
      goto LABEL_3;
    case 2:
      *a1 = 7305076;
      a1[1] = 0xE300000000000000;
      break;
    case 3:
      *a1 = 0x6565726874;
      a1[1] = 0xE500000000000000;
      break;
    case 4:
      *a1 = 1920298854;
      a1[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void sub_100032FF0(void *a1@<X8>)
{
  *a1 = &off_10007F460;
}

uint64_t sub_100033000()
{
  uint64_t result = sub_100033960();
  qword_10009FA18 = result;
  return result;
}

uint64_t sub_10003302C()
{
  uint64_t result = sub_10003304C();
  qword_10009FA20 = result;
  return result;
}

uint64_t sub_10003304C()
{
  unint64_t v5 = (unint64_t)_swiftEmptyArrayStorage;
  sub_10005E268();
  unsigned __int8 v3 = 0;
  sub_1000332C0(&v3, &v4);
  sub_10005E248();
  sub_10005E288();
  sub_10005E298();
  sub_10005E258();
  unsigned __int8 v3 = 2;
  sub_1000332C0(&v3, &v4);
  sub_10005E248();
  sub_10005E288();
  sub_10005E298();
  sub_10005E258();
  unsigned __int8 v3 = 1;
  sub_1000332C0(&v3, &v4);
  sub_10005E248();
  sub_10005E288();
  sub_10005E298();
  sub_10005E258();
  unsigned __int8 v3 = 3;
  sub_1000332C0(&v3, &v4);
  sub_10005E248();
  sub_10005E288();
  sub_10005E298();
  sub_10005E258();
  unsigned __int8 v3 = 4;
  sub_1000332C0(&v3, &v4);
  sub_10005E248();
  sub_10005E288();
  sub_10005E298();
  sub_10005E258();
  id v0 = (void *)v5;
  if ((v5 & 0x8000000000000000) != 0 || (v5 & 0x4000000000000000) != 0)
  {
    sub_10000991C(0, (unint64_t *)&qword_100098958);
    swift_bridgeObjectRetain();
    uint64_t v1 = sub_10005E318();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_10005E458();
    sub_10000991C(0, (unint64_t *)&qword_100098958);
    uint64_t v1 = (uint64_t)v0;
  }
  swift_release();
  return v1;
}

void sub_1000332C0(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (void *)0xE700000000000000;
  v5._uint64_t countAndFlagsBits = 0x63696D616E7964;
  switch(v3)
  {
    case 1:
      uint64_t v4 = (void *)0xE300000000000000;
      v5._uint64_t countAndFlagsBits = 6647407;
      break;
    case 2:
      uint64_t v4 = (void *)0xE300000000000000;
      v5._uint64_t countAndFlagsBits = 7305076;
      break;
    case 3:
      uint64_t v4 = (void *)0xE500000000000000;
      v5._uint64_t countAndFlagsBits = 0x6565726874;
      break;
    case 4:
      uint64_t v4 = (void *)0xE400000000000000;
      v5._uint64_t countAndFlagsBits = 1920298854;
      break;
    default:
      break;
  }
  v5._object = v4;
  sub_10005DEE8(v5);
  swift_bridgeObjectRelease();
  NSString v6 = sub_10005DE38();
  swift_bridgeObjectRelease();
  id v7 = [self mutableDescriptorWithIdentifier:v6];

  sub_100008F4C(&qword_1000985E0);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10005F190;
  *(void *)(v8 + 32) = [self vibrantMaterialColor];
  sub_10005DFB8();
  sub_10000991C(0, &qword_100099170);
  Class isa = sub_10005DF98().super.isa;
  swift_bridgeObjectRelease();
  [v7 setPreferredTitleColors:isa];

  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_10005F190;
  id v11 = [self whiteColor];
  id v12 = [objc_allocWithZone((Class)PRPosterColor) initWithColor:v11];

  *(void *)(v10 + 32) = v12;
  sub_10005DFB8();
  id v13 = objc_allocWithZone((Class)PRMutablePosterDescriptorHomeScreenConfiguration);
  Class v14 = sub_10005DF98().super.isa;
  swift_bridgeObjectRelease();
  id v15 = [v13 initWithPreferredSolidColors:v14];

  [v7 setPreferredHomeScreenConfiguration:v15];
  sub_100008F4C(&qword_100097D48);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10005F1A0;
  sub_10005E1C8();
  unint64_t v17 = 0xE700000000000000;
  uint64_t v18 = 0x63696D616E7964;
  switch((int)v3)
  {
    case 0:
      break;
    case 1:
      unint64_t v17 = 0xE300000000000000;
      uint64_t v18 = 6647407;
      break;
    case 2:
      unint64_t v17 = 0xE300000000000000;
      uint64_t v18 = 7305076;
      break;
    case 3:
      unint64_t v17 = 0xE500000000000000;
      uint64_t v18 = 0x6565726874;
      break;
    case 4:
      unint64_t v17 = 0xE400000000000000;
      uint64_t v18 = 1920298854;
      break;
    default:
      JUMPOUT(0);
  }
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = v18;
  *(void *)(inited + 80) = v17;
  unint64_t v19 = sub_10000A62C(inited);
  sub_10002ECC0(v19);
  swift_bridgeObjectRelease();
  id v20 = [self currentDevice];
  [v20 userInterfaceIdiom];

  NSString v21 = sub_10005DE38();
  swift_bridgeObjectRelease();
  [v7 setDisplayNameLocalizationKey:v21];

  switch((int)v3)
  {
    case 1:
    case 2:
    case 3:
    case 4:
      char v23 = sub_10005E448();
      swift_bridgeObjectRelease();
      if (v23) {
        uint64_t v24 = 2;
      }
      else {
        uint64_t v24 = 0;
      }
      sub_10002F3D4(v24);
      char v25 = sub_10005E448();
      swift_bridgeObjectRelease();
      uint64_t v22 = v25 & 1;
      break;
    default:
      swift_bridgeObjectRelease();
      sub_10002F3D4(2);
      swift_bridgeObjectRelease();
      uint64_t v22 = 1;
      break;
  }
  id v26 = [self defaultLookupInfo];
  id v27 = [self galleryOptionsWithAssetLookupInfo:v26 galleryPresentationStyle:0 galleryDisplayStyle:v22];

  [v7 setPreferredGalleryOptions:v27];
  *a2 = v7;
}

uint64_t sub_100033934()
{
  uint64_t result = sub_100033960();
  qword_10009FA28 = result;
  return result;
}

uint64_t sub_100033960()
{
  NSString v0 = sub_10005DE38();
  id v1 = [self mutableDescriptorWithIdentifier:v0];

  sub_100008F4C(&qword_1000985E0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10005F190;
  *(void *)(v2 + 32) = [self vibrantMaterialColor];
  sub_10005DFB8();
  sub_10000991C(0, &qword_100099170);
  Class isa = sub_10005DF98().super.isa;
  swift_bridgeObjectRelease();
  [v1 setPreferredTitleColors:isa];

  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10005F190;
  id v5 = [self whiteColor];
  id v6 = [objc_allocWithZone((Class)PRPosterColor) initWithColor:v5];

  *(void *)(v4 + 32) = v6;
  sub_10005DFB8();
  id v7 = objc_allocWithZone((Class)PRMutablePosterDescriptorHomeScreenConfiguration);
  Class v8 = sub_10005DF98().super.isa;
  swift_bridgeObjectRelease();
  id v9 = [v7 initWithPreferredSolidColors:v8];

  [v1 setPreferredHomeScreenConfiguration:v9];
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_10005F190;
  *(void *)(v10 + 32) = v1;
  uint64_t v12 = v10;
  sub_10005DFB8();
  return v12;
}

uint64_t sub_100033B74()
{
  uint64_t result = sub_100033960();
  qword_10009FA30 = result;
  return result;
}

uint64_t sub_100033BA0(uint64_t a1, void *a2)
{
  v6._uint64_t countAndFlagsBits = a1;
  v3._rawValue = &off_100079750;
  v6._object = a2;
  unint64_t v4 = sub_10005E398(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 5) {
    return 5;
  }
  else {
    return v4;
  }
}

uint64_t sub_100033BEC()
{
  sub_10002CA78();
  NSString v0 = (void *)sub_10005E158();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0[2];
  if (v1)
  {
    uint64_t v3 = v0[4];
    uint64_t v2 = v0[5];
    if (v1 == 2)
    {
      BOOL v5 = v3 == 0x7974696469756C66 && v2 == 0xE800000000000000;
      if (v5 || (sub_10005E448() & 1) != 0)
      {
        uint64_t v6 = v0[6];
        id v7 = (void *)v0[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t result = sub_100033BA0(v6, v7);
        if (result != 5) {
          return result;
        }
        return 8;
      }
    }
    else if (v1 == 1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      BOOL v4 = v3 == 2021144426 && v2 == 0xE400000000000000;
      if (v4 || (sub_10005E448() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 5;
      }
      BOOL v9 = v3 == 7943268 && v2 == 0xE300000000000000;
      if (v9 || (sub_10005E448() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 7;
      }
      if (v3 == 7879012 && v2 == 0xE300000000000000)
      {
        swift_bridgeObjectRelease();
        return 6;
      }
      char v10 = sub_10005E448();
      swift_bridgeObjectRelease();
      if (v10) {
        return 6;
      }
      return 8;
    }
  }
  swift_bridgeObjectRelease();
  return 8;
}

uint64_t sub_100033E0C(char a1)
{
  uint64_t v1 = 0x746C7561666564;
  switch(a1)
  {
    case 1:
      uint64_t v1 = 6647407;
      break;
    case 2:
      uint64_t v1 = 7305076;
      break;
    case 3:
      uint64_t v1 = 0x6565726874;
      break;
    case 4:
      uint64_t v1 = 1920298854;
      break;
    case 5:
      return v1;
    case 6:
      uint64_t v1 = 0x6B63616C62;
      switch(sub_10004C76C())
      {
        case 1u:
          goto LABEL_10;
        case 2u:
          uint64_t v1 = 0x65727574616ELL;
          break;
        case 3u:
          uint64_t v1 = 1702063986;
          break;
        default:
          return v1;
      }
      break;
    case 7:
      uint64_t v1 = 0x6B63616C62;
      switch(sub_10004D0FC())
      {
        case 1u:
LABEL_10:
          uint64_t v1 = 0x6574696877;
          break;
        case 2u:
          uint64_t v1 = 1802398064;
          break;
        case 3u:
          uint64_t v1 = 0x6E65657267;
          break;
        case 4u:
          uint64_t v1 = 1702194274;
          break;
        default:
          return v1;
      }
      break;
    default:
      uint64_t v1 = 0x63696D616E7964;
      break;
  }
  return v1;
}

_UNKNOWN **sub_100033FD0(char a1)
{
  switch(a1)
  {
    case 5:
      return &off_1000797E8;
    case 6:
      sub_10004FC3C(0, 4, 0);
      uint64_t v2 = _swiftEmptyArrayStorage;
      uint64_t v12 = sub_10004C1D8();
      unint64_t v15 = _swiftEmptyArrayStorage[2];
      unint64_t v14 = _swiftEmptyArrayStorage[3];
      if (v15 >= v14 >> 1)
      {
        uint64_t v43 = v12;
        uint64_t v44 = v13;
        sub_10004FC3C(v14 > 1, v15 + 1, 1);
        uint64_t v13 = v44;
        uint64_t v12 = v43;
        uint64_t v2 = _swiftEmptyArrayStorage;
      }
      _swiftEmptyArrayStorage[2] = v15 + 1;
      unint64_t v16 = &_swiftEmptyArrayStorage[7 * v15];
      v16[4] = *(void *)"black";
      id v16[5] = 0xE500000000000000;
      v16[6] = 0;
      v16[7] = 0;
      *(void *)((char *)v16 + 61) = 0;
      v16[9] = v12;
      v16[10] = v13;
      uint64_t v17 = sub_10004C1D8();
      unint64_t v20 = _swiftEmptyArrayStorage[2];
      unint64_t v19 = _swiftEmptyArrayStorage[3];
      if (v20 >= v19 >> 1)
      {
        uint64_t v45 = v17;
        uint64_t v46 = v18;
        sub_10004FC3C(v19 > 1, v20 + 1, 1);
        uint64_t v18 = v46;
        uint64_t v17 = v45;
        uint64_t v2 = _swiftEmptyArrayStorage;
      }
      _swiftEmptyArrayStorage[2] = v20 + 1;
      NSString v21 = &_swiftEmptyArrayStorage[7 * v20];
      v21[4] = *(void *)"white";
      v21[5] = 0xE500000000000000;
      v21[6] = 0;
      v21[7] = 0;
      *(void *)((char *)v21 + 61) = 0;
      v21[9] = v17;
      v21[10] = v18;
      uint64_t v22 = sub_10004C1D8();
      unint64_t v25 = _swiftEmptyArrayStorage[2];
      unint64_t v24 = _swiftEmptyArrayStorage[3];
      if (v25 >= v24 >> 1)
      {
        uint64_t v47 = v22;
        uint64_t v48 = v23;
        sub_10004FC3C(v24 > 1, v25 + 1, 1);
        uint64_t v23 = v48;
        uint64_t v22 = v47;
        uint64_t v2 = _swiftEmptyArrayStorage;
      }
      _swiftEmptyArrayStorage[2] = v25 + 1;
      id v26 = &_swiftEmptyArrayStorage[7 * v25];
      v26[4] = *(void *)"nature";
      v26[5] = 0xE600000000000000;
      v26[6] = 0;
      v26[7] = 0;
      *(void *)((char *)v26 + 61) = 0;
      v26[9] = v22;
      v26[10] = v23;
      uint64_t v27 = sub_10004C1D8();
      unint64_t v30 = _swiftEmptyArrayStorage[2];
      unint64_t v29 = _swiftEmptyArrayStorage[3];
      if (v30 >= v29 >> 1)
      {
        uint64_t v49 = v27;
        uint64_t v50 = v28;
        sub_10004FC3C(v29 > 1, v30 + 1, 1);
        uint64_t v28 = v50;
        uint64_t v27 = v49;
        uint64_t v2 = _swiftEmptyArrayStorage;
      }
      _swiftEmptyArrayStorage[2] = v30 + 1;
      char v31 = &_swiftEmptyArrayStorage[7 * v30];
      v31[4] = *(void *)"rose";
      v31[5] = 0xE400000000000000;
      v31[6] = 0;
      v31[7] = 0;
      *(void *)((char *)v31 + 61) = 0;
      v31[9] = v27;
      v31[10] = v28;
      break;
    case 7:
      sub_10004FC3C(0, 5, 0);
      uint64_t v1 = 0;
      uint64_t v2 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v3 = 8 * *((char *)&off_100079890 + v1 + 32);
        uint64_t v4 = *(void *)&aBlack_2[v3];
        uint64_t v5 = *(void *)((char *)&unk_100062950 + v3);
        uint64_t v6 = sub_10004CA9C();
        uint64_t v8 = v7;
        unint64_t v10 = _swiftEmptyArrayStorage[2];
        unint64_t v9 = _swiftEmptyArrayStorage[3];
        if (v10 >= v9 >> 1) {
          sub_10004FC3C(v9 > 1, v10 + 1, 1);
        }
        ++v1;
        _swiftEmptyArrayStorage[2] = v10 + 1;
        id v11 = &_swiftEmptyArrayStorage[7 * v10];
        v11[4] = v4;
        v11[5] = v5;
        v11[6] = 0;
        v11[7] = 0;
        *(void *)((char *)v11 + 61) = 0;
        v11[9] = v6;
        v11[10] = v8;
      }
      while (v1 != 5);
      break;
    default:
      sub_10004FC3C(0, 5, 0);
      uint64_t v33 = 0;
      uint64_t v2 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v34 = 8 * *((char *)&off_100079840 + v33 + 32);
        uint64_t v35 = *(void *)&aDynamic_1[v34];
        uint64_t v36 = *(void *)((char *)&unk_1000628C0 + v34);
        uint64_t v37 = sub_10003296C();
        uint64_t v39 = v38;
        unint64_t v41 = _swiftEmptyArrayStorage[2];
        unint64_t v40 = _swiftEmptyArrayStorage[3];
        if (v41 >= v40 >> 1) {
          sub_10004FC3C(v40 > 1, v41 + 1, 1);
        }
        ++v33;
        _swiftEmptyArrayStorage[2] = v41 + 1;
        Swift::String v42 = &_swiftEmptyArrayStorage[7 * v41];
        v42[4] = v35;
        v42[5] = v36;
        v42[6] = 0;
        v42[7] = 0;
        *(void *)((char *)v42 + 61) = 0;
        v42[9] = v37;
        v42[10] = v39;
      }
      while (v33 != 5);
      break;
  }
  return (_UNKNOWN **)v2;
}

uint64_t _s22MercuryPosterExtension23WallpaperAppearanceModeO8rawValueACSgSS_tcfC_0(uint64_t a1, void *a2)
{
  v6._uint64_t countAndFlagsBits = a1;
  v3._rawValue = &off_1000798B8;
  v6._object = a2;
  unint64_t v4 = sub_10005E398(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 3) {
    return 3;
  }
  else {
    return v4;
  }
}

unint64_t sub_100034440()
{
  unint64_t result = qword_100099158;
  if (!qword_100099158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100099158);
  }
  return result;
}

ValueMetadata *type metadata accessor for WallpaperAppearanceMode()
{
  return &type metadata for WallpaperAppearanceMode;
}

ValueMetadata *type metadata accessor for DescriptorManager()
{
  return &type metadata for DescriptorManager;
}

unsigned char *_s22MercuryPosterExtension23WallpaperAppearanceModeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100034584);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DescriptorManager.J7xxDisplayZoom()
{
  return &type metadata for DescriptorManager.J7xxDisplayZoom;
}

unint64_t sub_1000345C0()
{
  unint64_t result = qword_100099160;
  if (!qword_100099160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100099160);
  }
  return result;
}

uint64_t sub_100034614(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v8 = MGGetProductType();
  char v9 = sub_10004E2D0(v8, (uint64_t)&off_10007E918);
  if (v9 & 1) != 0 || (sub_10004E2D0(v8, (uint64_t)&off_10007E948))
  {
    v12.origin.CGFloat x = a1;
    v12.origin.CGFloat y = a2;
    v12.size.CGFloat width = a3;
    v12.size.CGFloat height = a4;
    double Width = CGRectGetWidth(v12);
    if (v9)
    {
      if (fabs(Width + -1032.0) >= 1.0)
      {
        if (fabs(Width + -1200.0) >= 1.0)
        {
          if (fabs(Width + -774.0) < 1.0) {
            return 2;
          }
          return 3;
        }
        return 0;
      }
      return 1;
    }
    if (fabs(Width + -834.0) < 1.0) {
      return 1;
    }
    if (fabs(Width + -970.0) < 1.0) {
      return 0;
    }
  }
  return 3;
}

id sub_10003474C(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, char a5, uint64_t a6, char a7)
{
  swift_bridgeObjectRetain();
  char v14 = sub_100033BEC();
  if (v14 == 8)
  {
    if (qword_100097838 != -1) {
      swift_once();
    }
    uint64_t v15 = sub_10005DCD8();
    sub_100008DB0(v15, (uint64_t)qword_100099140);
    swift_bridgeObjectRetain_n();
    unint64_t v16 = sub_10005DCB8();
    os_log_type_t v17 = sub_10005E078();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      swift_bridgeObjectRetain();
      sub_100044640(a1, a2, &v43);
      sub_10005E138();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unknown descriptor: %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
LABEL_10:
    id v21 = [self whiteColor];
LABEL_64:
    return v21;
  }
  char v19 = v14;
  if (a5)
  {
    if (a5 == 1)
    {
      swift_bridgeObjectRelease();
      char v20 = 1;
    }
    else
    {
      char v20 = (a7 & 1) == 0 && a6 == 2;
    }
  }
  else
  {
    char v20 = sub_10005E448();
    swift_bridgeObjectRelease();
  }
  switch(v19)
  {
    case 5:
LABEL_63:
      id v21 = [self whiteColor];
      goto LABEL_64;
    case 6:
      if (a4) {
        uint64_t v26 = a3;
      }
      else {
        uint64_t v26 = 0;
      }
      if (a4) {
        uint64_t v27 = a4;
      }
      else {
        uint64_t v27 = (void *)0xE000000000000000;
      }
      swift_bridgeObjectRetain();
      switch(sub_10004C8EC(v26, v27))
      {
        case 1u:
          sub_10000991C(0, (unint64_t *)&qword_100099168);
          uint64_t v28 = 0x41433243334123;
          return sub_100026E70(v28, 0xE700000000000000);
        case 2u:
          sub_10000991C(0, (unint64_t *)&qword_100099168);
          uint64_t v28 = 0x38383042304423;
          return sub_100026E70(v28, 0xE700000000000000);
        case 3u:
          sub_10000991C(0, (unint64_t *)&qword_100099168);
          uint64_t v28 = 0x44363238464523;
          return sub_100026E70(v28, 0xE700000000000000);
        case 4u:
          goto LABEL_63;
        default:
          sub_10000991C(0, (unint64_t *)&qword_100099168);
          uint64_t v28 = 0x39444239363823;
          return sub_100026E70(v28, 0xE700000000000000);
      }
    case 7:
      if (a4) {
        uint64_t v23 = a3;
      }
      else {
        uint64_t v23 = 0;
      }
      if (a4) {
        unint64_t v24 = a4;
      }
      else {
        unint64_t v24 = (void *)0xE000000000000000;
      }
      swift_bridgeObjectRetain();
      char v25 = sub_10004D370(v23, v24);
      if (v25 == 5) {
        goto LABEL_63;
      }
      return sub_10004CD1C(v25);
    default:
      if (a4) {
        uint64_t v29 = a3;
      }
      else {
        uint64_t v29 = 0;
      }
      if (a4) {
        unint64_t v30 = a4;
      }
      else {
        unint64_t v30 = (void *)0xE000000000000000;
      }
      swift_bridgeObjectRetain();
      char v31 = sub_100033BA0(v29, v30);
      if (v31 == 5)
      {
        if (qword_100097838 != -1) {
          swift_once();
        }
        uint64_t v32 = sub_10005DCD8();
        sub_100008DB0(v32, (uint64_t)qword_100099140);
        swift_bridgeObjectRetain_n();
        uint64_t v33 = sub_10005DCB8();
        os_log_type_t v34 = sub_10005E078();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = (uint8_t *)swift_slowAlloc();
          uint64_t v43 = swift_slowAlloc();
          *(_DWORD *)uint64_t v35 = 136315138;
          if (a4)
          {
            unint64_t v36 = (unint64_t)a4;
          }
          else
          {
            a3 = 0x676E697373696D28;
            unint64_t v36 = 0xE900000000000029;
          }
          swift_bridgeObjectRetain();
          sub_100044640(a3, v36, &v43);
          sub_10005E138();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "Unknown look in Fluidity: %s", v35, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        goto LABEL_10;
      }
      char v38 = v31;
      id v39 = [self currentDevice];
      id v40 = [v39 userInterfaceIdiom];

      if (v40 != (id)1)
      {
        switch(v38)
        {
          case 1:
            sub_10000991C(0, (unint64_t *)&qword_100099168);
            if (v20) {
              uint64_t v28 = 0x44393039394523;
            }
            else {
              uint64_t v28 = 0x32434143464623;
            }
            return sub_100026E70(v28, 0xE700000000000000);
          case 2:
            sub_10000991C(0, (unint64_t *)&qword_100099168);
            if (v20) {
              uint64_t v28 = 0x37384343354523;
            }
            else {
              uint64_t v28 = 0x36393345464623;
            }
            return sub_100026E70(v28, 0xE700000000000000);
          case 3:
            sub_10000991C(0, (unint64_t *)&qword_100099168);
            if (v20) {
              uint64_t v28 = 0x43434642323723;
            }
            else {
              uint64_t v28 = 0x46463744353923;
            }
            return sub_100026E70(v28, 0xE700000000000000);
          case 4:
            sub_10000991C(0, (unint64_t *)&qword_100099168);
            if (v20)
            {
              uint64_t v28 = 0x41424639344423;
            }
            else
            {
              uint64_t v41 = 0x443342454523;
LABEL_92:
              uint64_t v28 = v41 & 0xFFFFFFFFFFFFLL | 0x31000000000000;
            }
            return sub_100026E70(v28, 0xE700000000000000);
          default:
            goto LABEL_63;
        }
      }
      switch(v38)
      {
        case 1:
          sub_10000991C(0, (unint64_t *)&qword_100099168);
          if (v20)
          {
            uint64_t v28 = 0x43464537343823;
            return sub_100026E70(v28, 0xE700000000000000);
          }
          unsigned int v42 = 1094924323;
          goto LABEL_86;
        case 2:
          sub_10000991C(0, (unint64_t *)&qword_100099168);
          if (v20) {
            uint64_t v28 = 0x43443738424223;
          }
          else {
            uint64_t v28 = 0x46464541304423;
          }
          return sub_100026E70(v28, 0xE700000000000000);
        case 3:
          sub_10000991C(0, (unint64_t *)&qword_100099168);
          if (v20)
          {
            uint64_t v41 = 0x453638423523;
            goto LABEL_92;
          }
          unsigned int v42 = 1144010787;
LABEL_86:
          uint64_t v28 = v42 | 0x46463400000000;
          break;
        case 4:
          sub_10000991C(0, (unint64_t *)&qword_100099168);
          if (v20) {
            uint64_t v28 = 0x34394642413623;
          }
          else {
            uint64_t v28 = 0x33423145323723;
          }
          return sub_100026E70(v28, 0xE700000000000000);
        default:
          goto LABEL_63;
      }
      return sub_100026E70(v28, 0xE700000000000000);
  }
}

uint64_t getEnumTagSinglePayload for DescriptorManager.Identifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF9)
  {
    unsigned int v2 = a2 + 7;
    if (a2 + 7 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 7;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 7;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10003519CLL);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 7;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 5) {
    unsigned int v8 = v7 - 4;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 4) {
    return v8 - 3;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for DescriptorManager.Identifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 7;
  if (a3 + 7 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xF9) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v7 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x100035284);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

uint64_t sub_1000352AC(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 5) {
    return v1 - 4;
  }
  else {
    return 0;
  }
}

unsigned char *sub_1000352C0(unsigned char *result, int a2)
{
  if (a2) {
    *unint64_t result = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for DescriptorManager.Identifier()
{
  return &type metadata for DescriptorManager.Identifier;
}

uint64_t getEnumTagSinglePayload for DescriptorManager.FluidityLook(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DescriptorManager.FluidityLook(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10003543CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DescriptorManager.FluidityLook()
{
  return &type metadata for DescriptorManager.FluidityLook;
}

unint64_t sub_100035478()
{
  unint64_t result = qword_100099178;
  if (!qword_100099178)
  {
    sub_100014768(&qword_100099180);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100099178);
  }
  return result;
}

unint64_t sub_1000354D8()
{
  unint64_t result = qword_100099188;
  if (!qword_100099188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100099188);
  }
  return result;
}

void sub_10003552C(uint64_t a1, void *a2)
{
  int v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void sub_100035594(uint64_t a1, uint64_t a2, CGColorSpace *a3)
{
  BOOL v7 = &v3[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_drawingHandler];
  *BOOL v7 = 0;
  v7[1] = 0;
  v3[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_shouldDrawAutomatically] = 1;
  int v8 = &v3[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_log];
  uint64_t v9 = sub_10005DCD8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v3[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_wantsIndefiniteContinuousRendering] = 0;
  *(void *)&v3[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_displayLink] = 0;
  v3[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_linkActive] = 0;
  *(void *)&v3[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_continuousRenderingTimer] = 0;
  unint64_t v10 = &v3[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_timedRenderingInfo];
  uint64_t v11 = type metadata accessor for WallpaperMetalView.TimedContinuousRenderingInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v29.receiver = v3;
  v29.super_class = (Class)type metadata accessor for WallpaperMetalView(0);
  CGRect v12 = (char *)objc_msgSendSuper2(&v29, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  id v13 = [v12 layer];
  self;
  char v14 = (void *)swift_dynamicCastObjCClassUnconditional();
  id v15 = [self displayLinkWithTarget:v12 selector:"displayLinkFired"];
  uint64_t v16 = OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_displayLink;
  os_log_type_t v17 = *(void **)&v12[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_displayLink];
  *(void *)&v12[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_displayLink] = v15;

  uint64_t v18 = *(void **)&v12[v16];
  if (!v18)
  {
    __break(1u);
    goto LABEL_8;
  }
  id v19 = v18;
  *(float *)&double v20 = sub_10005E098(30.0, 120.0, (Swift::Float_optional *)0x42F00000);
  [v19 setPreferredFrameRateRange:v20];

  id v21 = *(void **)&v12[v16];
  if (!v21)
  {
LABEL_8:
    __break(1u);
    return;
  }
  [v21 setPaused:1];
  [v14 setDevice:a1];
  [v14 setPixelFormat:a2];
  id v22 = [v12 layer];
  sub_100008F4C((uint64_t *)&unk_100098E30);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100060F00;
  *(void *)(inited + 32) = 0x73646E756F62;
  *(void *)(inited + 40) = 0xE600000000000000;
  *(void *)(inited + 48) = [objc_allocWithZone((Class)NSNull) init];
  *(void *)(inited + 56) = 0x6E6F697469736F70;
  *(void *)(inited + 64) = 0xE800000000000000;
  *(void *)(inited + 72) = [objc_allocWithZone((Class)NSNull) init];
  *(void *)(inited + 80) = 0x6F50726F68636E61;
  *(void *)(inited + 88) = 0xEB00000000746E69;
  *(void *)(inited + 96) = [objc_allocWithZone((Class)NSNull) init];
  *(void *)(inited + 104) = 0x73746E65746E6F63;
  *(void *)(inited + 112) = 0xE800000000000000;
  *(void *)(inited + 120) = [objc_allocWithZone((Class)NSNull) init];
  sub_10000A4FC(inited);
  sub_100008F4C((uint64_t *)&unk_1000992C0);
  Class isa = sub_10005DDE8().super.isa;
  swift_bridgeObjectRelease();
  [v22 setActions:isa];

  id v25 = [v12 layer];
  objc_msgSend(v25, "setPosition:", 0.0, 0.0);

  id v26 = [v12 layer];
  objc_msgSend(v26, "setAnchorPoint:", 0.0, 0.0);

  if (a3) {
    CGColorSpaceRef v27 = a3;
  }
  else {
    CGColorSpaceRef v27 = CGColorSpaceCreateWithName(kCGColorSpaceDisplayP3);
  }
  uint64_t v28 = a3;
  [v14 setColorspace:v27];

  [v14 setAllowsDisplayCompositing:0];
  [v14 setDelegate:v12];
  [v14 setPresentsWithTransaction:1];

  swift_unknownObjectRelease();
}

id sub_100035A78()
{
  id result = *(id *)&v0[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_displayLink];
  if (result)
  {
    [result invalidate];
    v2.receiver = v0;
    v2.super_class = (Class)type metadata accessor for WallpaperMetalView(0);
    return objc_msgSendSuper2(&v2, "dealloc");
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100035BC0(double a1)
{
  uint64_t v2 = v1;
  uint64_t v82 = sub_10005DCD8();
  uint64_t v84 = *(void *)(v82 - 8);
  uint64_t v4 = __chkstk_darwin(v82);
  uint64_t v74 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  double v73 = (char *)&v71 - v6;
  uint64_t v7 = sub_100008F4C((uint64_t *)&unk_100099B20);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v78 = (uint64_t)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v71 - v10;
  uint64_t v12 = sub_100008F4C((uint64_t *)&unk_1000992A0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  id v76 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  os_log_type_t v17 = (id *)((char *)&v71 - v16);
  __chkstk_darwin(v15);
  id v19 = (char *)&v71 - v18;
  uint64_t v20 = sub_100008F4C(&qword_100098BB0);
  __chkstk_darwin(v20 - 8);
  id v22 = (char *)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10005DB38();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = __chkstk_darwin(v23);
  CGColorSpaceRef v27 = (char *)&v71 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v25);
  unint64_t v30 = (char *)&v71 - v29;
  __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v71 - v31;
  sub_10005DB28();
  float v83 = v32;
  sub_10005DAC8();
  id v80 = *(void (**)(char *, uint64_t))(v24 + 8);
  uint64_t v81 = v24 + 8;
  v80(v30, v23);
  uint64_t v85 = v2;
  uint64_t v33 = v2 + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_timedRenderingInfo;
  swift_beginAccess();
  uint64_t v79 = v33;
  sub_100014C5C(v33, (uint64_t)v19, (uint64_t *)&unk_1000992A0);
  uint64_t v34 = type metadata accessor for WallpaperMetalView.TimedContinuousRenderingInfo(0);
  uint64_t v77 = *(void *)(v34 - 8);
  uint64_t v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v77 + 48);
  int v36 = v35(v19, 1, v34);
  uint64_t v75 = v23;
  if (v36)
  {
    uint64_t v37 = v34;
    sub_100014D24((uint64_t)v19, (uint64_t *)&unk_1000992A0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v22, 1, 1, v23);
LABEL_4:
    sub_100014D24((uint64_t)v22, &qword_100098BB0);
    uint64_t v38 = v84;
    id v39 = v76;
    uint64_t v40 = v79;
LABEL_5:
    sub_100014C5C(v40, (uint64_t)v17, (uint64_t *)&unk_1000992A0);
    if (v35((char *)v17, 1, v37))
    {
      sub_100014D24((uint64_t)v17, (uint64_t *)&unk_1000992A0);
    }
    else
    {
      id v41 = *v17;
      sub_100014D24((uint64_t)v17, (uint64_t *)&unk_1000992A0);
      [v41 invalidate];
    }
    uint64_t v42 = v82;
    uint64_t v43 = self;
    uint64_t v44 = swift_allocObject();
    uint64_t v45 = v85;
    swift_unknownObjectWeakInit();
    aBlock[4] = sub_100037AA8;
    aBlock[5] = v44;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10003552C;
    aBlock[3] = &unk_100081828;
    uint64_t v46 = _Block_copy(aBlock);
    swift_release();
    id v47 = [v43 scheduledTimerWithTimeInterval:0 repeats:v46 block:a1];
    _Block_release(v46);
    uint64_t v48 = v45 + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_log;
    swift_beginAccess();
    uint64_t v49 = v78;
    sub_100014C5C(v48, v78, (uint64_t *)&unk_100099B20);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v49, 1, v42))
    {
      sub_100014D24(v49, (uint64_t *)&unk_100099B20);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v74, v49, v42);
      sub_100014D24(v49, (uint64_t *)&unk_100099B20);
      uint64_t v50 = sub_10005DCB8();
      os_log_type_t v51 = sub_10005E068();
      if (os_log_type_enabled(v50, v51))
      {
        long long v52 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)long long v52 = 134349056;
        uint64_t v42 = v82;
        double v86 = a1;
        sub_10005E138();
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "beginning timed continuous rendering for %{public}f seconds", v52, 0xCu);
        uint64_t v38 = v84;
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v38 + 8))(v74, v42);
    }
    uint64_t v53 = v75;
    uint64_t v54 = v77;
    long long v55 = v83;
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(&v39[*(int *)(v37 + 20)], v83, v75);
    *(void *)id v39 = v47;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v39, 0, 1, v37);
    swift_beginAccess();
    id v56 = v47;
    sub_1000379AC((uint64_t)v39, v40);
    swift_endAccess();
    sub_100036B40();
    sub_100014D24((uint64_t)v39, (uint64_t *)&unk_1000992A0);

    return ((uint64_t (*)(char *, uint64_t))v80)(v55, v53);
  }
  double v72 = v27;
  uint64_t v37 = v34;
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v22, &v19[*(int *)(v34 + 20)], v23);
  sub_100014D24((uint64_t)v19, (uint64_t *)&unk_1000992A0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v22, 0, 1, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1) {
    goto LABEL_4;
  }
  uint64_t v58 = v72;
  (*(void (**)(void))(v24 + 32))();
  char v59 = sub_10005DAE8();
  uint64_t v60 = v23;
  uint64_t v38 = v84;
  uint64_t v40 = v79;
  if ((v59 & 1) == 0)
  {
    v80(v58, v60);
    id v39 = v76;
    goto LABEL_5;
  }
  uint64_t v61 = v60;
  uint64_t v62 = v85 + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_log;
  swift_beginAccess();
  uint64_t v63 = (uint64_t)v11;
  sub_100014C5C(v62, (uint64_t)v11, (uint64_t *)&unk_100099B20);
  uint64_t v64 = v82;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v11, 1, v82))
  {
    Swift::String v65 = v80;
    v80(v72, v61);
    v65(v83, v61);
    return sub_100014D24((uint64_t)v11, (uint64_t *)&unk_100099B20);
  }
  else
  {
    long long v66 = v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v73, v63, v64);
    sub_100014D24(v63, (uint64_t *)&unk_100099B20);
    long long v67 = sub_10005DCB8();
    os_log_type_t v68 = sub_10005E068();
    if (os_log_type_enabled(v67, v68))
    {
      id v69 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v69 = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "display link already running and will stop later than requested: not updating timer", v69, 2u);
      uint64_t v38 = v84;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v38 + 8))(v66, v64);
    id v70 = (uint64_t (*)(char *, uint64_t))v80;
    v80(v72, v61);
    return v70(v83, v61);
  }
}

void sub_1000365FC()
{
  uint64_t v0 = sub_100008F4C((uint64_t *)&unk_1000992A0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = &v7[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    uint64_t v5 = type metadata accessor for WallpaperMetalView.TimedContinuousRenderingInfo(0);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v2, 1, 1, v5);
    uint64_t v6 = (uint64_t)v4 + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_timedRenderingInfo;
    swift_beginAccess();
    sub_1000379AC((uint64_t)v2, v6);
    swift_endAccess();
    sub_100036B40();
    sub_100014D24((uint64_t)v2, (uint64_t *)&unk_1000992A0);
  }
}

uint64_t sub_100036728()
{
  uint64_t v1 = sub_10005DCD8();
  uint64_t v30 = *(void *)(v1 - 8);
  uint64_t v31 = v1;
  __chkstk_darwin(v1);
  int v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100008F4C((uint64_t *)&unk_100099B20);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100008F4C((uint64_t *)&unk_1000992A0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v13 = type metadata accessor for WallpaperMetalView.TimedContinuousRenderingInfo(0);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (id *)((char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = v0 + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_timedRenderingInfo;
  swift_beginAccess();
  sub_100014C5C(v17, (uint64_t)v12, (uint64_t *)&unk_1000992A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1) {
    return sub_100014D24((uint64_t)v12, (uint64_t *)&unk_1000992A0);
  }
  uint64_t v28 = v14;
  uint64_t v29 = v10;
  CGColorSpaceRef v27 = v3;
  sub_100037948((uint64_t)v12, (uint64_t)v16);
  uint64_t v19 = v0 + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_log;
  swift_beginAccess();
  sub_100014C5C(v19, (uint64_t)v6, (uint64_t *)&unk_100099B20);
  uint64_t v21 = v30;
  uint64_t v20 = v31;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v6, 1, v31))
  {
    sub_100014D24((uint64_t)v6, (uint64_t *)&unk_100099B20);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v27, v6, v20);
    sub_100014D24((uint64_t)v6, (uint64_t *)&unk_100099B20);
    id v22 = sub_10005DCB8();
    os_log_type_t v23 = sub_10005E068();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "intentionally stopping existing timed continuous rendering", v24, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v31);
  }
  uint64_t v25 = v28;
  uint64_t v26 = (uint64_t)v29;
  [*v16 invalidate];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v26, 1, 1, v13);
  swift_beginAccess();
  sub_1000379AC(v26, v17);
  swift_endAccess();
  sub_100036B40();
  sub_100014D24(v26, (uint64_t *)&unk_1000992A0);
  return sub_100037A14((uint64_t)v16);
}

void sub_100036B40()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10005DCD8();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v44 - v7;
  uint64_t v9 = sub_100008F4C((uint64_t *)&unk_100099B20);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v44 - v13;
  uint64_t v15 = sub_100008F4C((uint64_t *)&unk_1000992A0);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_wantsIndefiniteContinuousRendering) == 1)
  {
    uint64_t v18 = (unsigned char *)(v1 + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_linkActive);
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_linkActive)) {
      return;
    }
    goto LABEL_6;
  }
  uint64_t v45 = v6;
  uint64_t v19 = v1 + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_timedRenderingInfo;
  swift_beginAccess();
  sub_100014C5C(v19, (uint64_t)v17, (uint64_t *)&unk_1000992A0);
  uint64_t v20 = type metadata accessor for WallpaperMetalView.TimedContinuousRenderingInfo(0);
  int v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v17, 1, v20);
  sub_100014D24((uint64_t)v17, (uint64_t *)&unk_1000992A0);
  uint64_t v18 = (unsigned char *)(v1 + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_linkActive);
  if ((v21 != 1) != *(unsigned char *)(v1 + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_linkActive))
  {
    if (v21 != 1)
    {
LABEL_6:
      uint64_t v22 = v1 + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_log;
      swift_beginAccess();
      sub_100014C5C(v22, (uint64_t)v14, (uint64_t *)&unk_100099B20);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v14, 1, v2))
      {
        sub_100014D24((uint64_t)v14, (uint64_t *)&unk_100099B20);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v8, v14, v2);
        sub_100014D24((uint64_t)v14, (uint64_t *)&unk_100099B20);
        os_log_type_t v23 = sub_10005DCB8();
        os_log_type_t v24 = sub_10005E088();
        if (os_log_type_enabled(v23, v24))
        {
          uint64_t v25 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v25 = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "🟢 starting display link", v25, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      }
      uint64_t v26 = OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_displayLink;
      CGColorSpaceRef v27 = *(void **)(v1 + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_displayLink);
      if (v27)
      {
        [v27 setPaused:0];
        uint64_t v28 = *(void **)(v1 + v26);
        if (v28)
        {
          uint64_t v29 = self;
          id v30 = v28;
          id v31 = [v29 mainRunLoop];
          [v30 addToRunLoop:v31 forMode:NSRunLoopCommonModes];

          *uint64_t v18 = 1;
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_25;
    }
    uint64_t v32 = OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_displayLink;
    uint64_t v33 = *(void **)(v1 + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_displayLink);
    if (!v33)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    uint64_t v34 = self;
    id v35 = v33;
    id v36 = [v34 mainRunLoop];
    [v35 removeFromRunLoop:v36 forMode:NSRunLoopCommonModes];

    uint64_t v37 = *(void **)(v1 + v32);
    if (!v37)
    {
LABEL_26:
      __break(1u);
      return;
    }
    [v37 setPaused:1];
    uint64_t v38 = v1 + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_log;
    swift_beginAccess();
    sub_100014C5C(v38, (uint64_t)v12, (uint64_t *)&unk_100099B20);
    int v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2);
    uint64_t v40 = v45;
    if (v39)
    {
      sub_100014D24((uint64_t)v12, (uint64_t *)&unk_100099B20);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v45, v12, v2);
      sub_100014D24((uint64_t)v12, (uint64_t *)&unk_100099B20);
      id v41 = sub_10005DCB8();
      os_log_type_t v42 = sub_10005E088();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "🛑 stopped display link", v43, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v40, v2);
    }
    *uint64_t v18 = 0;
  }
}

uint64_t sub_100037148()
{
  return type metadata accessor for WallpaperMetalView(0);
}

uint64_t type metadata accessor for WallpaperMetalView(uint64_t a1)
{
  return sub_100010F50(a1, (uint64_t *)&unk_1000991E8);
}

void sub_100037210()
{
  sub_100037334(319, &qword_1000991F8, (void (*)(uint64_t))&type metadata accessor for Logger);
  if (v0 <= 0x3F)
  {
    sub_100037334(319, &qword_100099200, (void (*)(uint64_t))type metadata accessor for WallpaperMetalView.TimedContinuousRenderingInfo);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100037334(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_10005E128();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for WallpaperMetalView.TimedContinuousRenderingInfo(uint64_t a1)
{
  return sub_100010F50(a1, qword_100099260);
}

void **sub_1000373A8(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  unint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_10005DB38();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    uint64_t v11 = v4;
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_100037488(id *a1, uint64_t a2)
{
  unint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_10005DB38();
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void **sub_100037500(void **a1, void **a2, uint64_t a3)
{
  unint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_10005DB38();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  id v10 = v4;
  v9(v6, v7, v8);
  return a1;
}

void **sub_100037594(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 20);
  id v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = sub_10005DB38();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

void *sub_100037624(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_10005DB38();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void **sub_1000376A0(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_10005DB38();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_10003772C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100037740);
}

uint64_t sub_100037740(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10005DB38();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000377F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100037804);
}

void *sub_100037804(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *id result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10005DB38();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000378AC()
{
  uint64_t result = sub_10005DB38();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100037948(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WallpaperMetalView.TimedContinuousRenderingInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000379AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008F4C((uint64_t *)&unk_1000992A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100037A14(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WallpaperMetalView.TimedContinuousRenderingInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100037A70()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100037AA8()
{
}

uint64_t sub_100037AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100037AC0()
{
  return swift_release();
}

void *sub_100037AC8(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)sub_10005E378();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

void sub_100037B6C()
{
  unint64_t v1 = &v0[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_drawingHandler];
  *unint64_t v1 = 0;
  v1[1] = 0;
  v0[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_shouldDrawAutomatically] = 1;
  uint64_t v2 = &v0[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_log];
  uint64_t v3 = sub_10005DCD8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v0[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_wantsIndefiniteContinuousRendering] = 0;
  *(void *)&v0[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_displayLink] = 0;
  v0[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_linkActive] = 0;
  *(void *)&v0[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_continuousRenderingTimer] = 0;
  uint64_t v4 = &v0[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_timedRenderingInfo];
  uint64_t v5 = type metadata accessor for WallpaperMetalView.TimedContinuousRenderingInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);

  sub_10005E308();
  __break(1u);
}

void sub_100037CA8()
{
  unint64_t v1 = v0;
  uint64_t v2 = sub_10005DCD8();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100008F4C((uint64_t *)&unk_100099B20);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_shouldDrawAutomatically;
  if (v1[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_shouldDrawAutomatically] == 1)
  {
    uint64_t v10 = *(void (**)(id))&v1[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_drawingHandler];
    if (v10)
    {
      swift_retain();
      id v20 = [v1 layer];
      self;
      uint64_t v11 = (void *)swift_dynamicCastObjCClass();
      if (v11)
      {
        id v12 = [v11 nextDrawable];

        if (v12)
        {
          v10(v12);
          swift_unknownObjectRelease();
        }
        sub_100012030((uint64_t)v10);
      }
      else
      {
        sub_100012030((uint64_t)v10);
        id v18 = v20;
      }
    }
  }
  else
  {
    uint64_t v13 = (uint64_t)&v1[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_log];
    swift_beginAccess();
    sub_100014C5C(v13, (uint64_t)v8, (uint64_t *)&unk_100099B20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2))
    {
      sub_100014D24((uint64_t)v8, (uint64_t *)&unk_100099B20);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
      sub_100014D24((uint64_t)v8, (uint64_t *)&unk_100099B20);
      uint64_t v14 = v1;
      uint64_t v15 = sub_10005DCB8();
      os_log_type_t v16 = sub_10005E068();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 67109120;
        int v21 = v1[v9];
        sub_10005E138();

        _os_log_impl((void *)&_mh_execute_header, v15, v16, "skipping needs-display render: should auto-draw %{BOOL}d", v17, 8u);
        swift_slowDealloc();
      }
      else
      {

        uint64_t v15 = v14;
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
  }
}

unint64_t sub_100038030()
{
  unint64_t result = qword_1000992B0;
  if (!qword_1000992B0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000992B0);
  }
  return result;
}

unint64_t sub_100038070@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t result = sub_1000121F8(result, a2), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(a3 + 56) + 48 * result;
    uint64_t v8 = *(void **)v7;
    uint64_t v9 = *(void **)(v7 + 8);
    uint64_t v10 = *(void *)(v7 + 16);
    uint64_t v11 = *(void **)(v7 + 24);
    id v12 = *(void **)(v7 + 32);
    char v13 = *(unsigned char *)(v7 + 40);
    id v14 = v12;
    id v15 = v8;
    id v16 = v9;
    swift_bridgeObjectRetain();
    unint64_t result = v11;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    id v12 = 0;
    char v13 = 0;
  }
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(void *)(a4 + 24) = v11;
  *(void *)(a4 + 32) = v12;
  *(unsigned char *)(a4 + 40) = v13;
  return result;
}

uint64_t sub_10003811C(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v6 = sub_1000122DC((uint64_t)a1);
      if (v7)
      {
        uint64_t v5 = *(void *)(*(void *)(a2 + 56) + 8 * v6);
        swift_retain();
        return v5;
      }
    }
    return 0;
  }
  id v3 = a1;
  uint64_t v4 = sub_10005E2D8();

  if (!v4) {
    return 0;
  }
  type metadata accessor for WallpaperRenderingCoordinator();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v5 = v9;
  swift_unknownObjectRelease();
  return v5;
}

void *sub_1000381E4(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  unint64_t v3 = sub_1000122DC(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 56) + 24 * v3;
  unint64_t v6 = *(void **)v5;
  char v7 = *(void **)(v5 + 8);
  swift_retain();
  id v8 = v6;
  id v9 = v7;
  return v6;
}

Swift::Void __swiftcall ContinuousRenderingToken.invalidate()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100008F4C(&qword_100098B70);
  __chkstk_darwin(v2 - 8);
  char v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + 48))
  {
    if (qword_1000978A8 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_10005DCD8();
    sub_100008DB0(v5, (uint64_t)qword_10009FAA8);
    os_log_t v22 = (os_log_t)sub_10005DCB8();
    os_log_type_t v6 = sub_10005E078();
    if (os_log_type_enabled(v22, v6))
    {
      char v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v6, "Already invalidated ContinuousRenderingToken is requesting invalidation", v7, 2u);
      swift_slowDealloc();
    }
    os_log_t v8 = v22;
  }
  else
  {
    if (qword_1000978A8 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_10005DCD8();
    sub_100008DB0(v9, (uint64_t)qword_10009FAA8);
    swift_retain();
    uint64_t v10 = sub_10005DCB8();
    os_log_type_t v11 = sub_10005E088();
    if (os_log_type_enabled(v10, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)id v12 = 136446210;
      uint64_t v13 = *(void *)(v1 + 32);
      unint64_t v14 = *(void *)(v1 + 40);
      swift_bridgeObjectRetain();
      uint64_t v23 = sub_100044640(v13, v14, &v24);
      sub_10005E138();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "ContinuousRenderingToken “%{public}s” invalidate", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    *(unsigned char *)(v1 + 48) = 1;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v16 = Strong;
      uint64_t v17 = *(void *)(v1 + 24);
      uint64_t v18 = sub_10005E038();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v4, 1, 1, v18);
      sub_10005E018();
      swift_retain();
      swift_unknownObjectRetain();
      uint64_t v19 = sub_10005E008();
      id v20 = (void *)swift_allocObject();
      v20[2] = v19;
      v20[3] = &protocol witness table for MainActor;
      v20[4] = v16;
      v20[5] = v17;
      v20[6] = v1;
      sub_100038604((uint64_t)v4, (uint64_t)&unk_100099318, (uint64_t)v20);
      swift_release();
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_100038604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10005E038();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_10005E028();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100014D24(a1, &qword_100098B70);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_10005DFF8();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1000387B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10005E038();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_10005E028();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100014D24(a1, &qword_100098B70);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_10005DFF8();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  sub_100008F4C((uint64_t *)&unk_100099B40);
  return swift_task_create();
}

uint64_t sub_100038964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  sub_10005E018();
  v6[5] = sub_10005E008();
  uint64_t v8 = sub_10005DFF8();
  return _swift_task_switch(sub_100038A00, v8, v7);
}

uint64_t sub_100038A00()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[3];
  swift_release();
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(void, void, uint64_t, uint64_t))(v2 + 8))(*(void *)(v1 + 32), *(void *)(v1 + 40), ObjectType, v2);
  char v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t ContinuousRenderingToken.deinit()
{
  uint64_t v1 = v0;
  if ((*(unsigned char *)(v0 + 48) & 1) == 0)
  {
    if (qword_1000978A8 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_10005DCD8();
    sub_100008DB0(v2, (uint64_t)qword_10009FAA8);
    swift_retain();
    uint64_t v3 = sub_10005DCB8();
    os_log_type_t v4 = sub_10005E078();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      uint64_t v6 = *(void *)(v1 + 32);
      unint64_t v7 = *(void *)(v1 + 40);
      swift_bridgeObjectRetain();
      sub_100044640(v6, v7, &v9);
      sub_10005E138();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "ContinuousRenderingToken “%{public}s” is being destroyed while active.", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
  }
  sub_100044CA8(v1 + 16);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t ContinuousRenderingToken.__deallocating_deinit()
{
  ContinuousRenderingToken.deinit();

  return _swift_deallocClassInstance(v0, 49, 7);
}

uint64_t sub_100038C90(uint64_t a1)
{
  return sub_10003E044(a1, qword_1000992D0, &qword_1000978B0, (uint64_t)qword_10009FAC0);
}

uint64_t *sub_100038CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v9 = v8;
  uint64_t v98 = a7;
  uint64_t v101 = *v9;
  uint64_t v102 = a6;
  uint64_t v16 = sub_100008F4C((uint64_t *)&unk_100099B20);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[10] = 0;
  v9[14] = 0;
  v9[15] = 0;
  v9[13] = 0;
  sub_10004B410((uint64_t)v152);
  uint64_t v99 = v9 + 17;
  sub_100014CC0((uint64_t)v152, (uint64_t)(v9 + 17), (uint64_t *)&unk_100099B10);
  v9[34] = 0;
  v9[35] = 0;
  v9[36] = 0xFFEFFFFFFFFFFFFFLL;
  *((unsigned char *)v9 + 296) = 0;
  v9[38] = (uint64_t)&_swiftEmptySetSingleton;
  *((unsigned char *)v9 + 312) = 0;
  uint64_t v9[2] = a1;
  v9[3] = a2;
  v9[11] = a3;
  v9[12] = a4;
  int v92 = a8;
  *((unsigned char *)v9 + 128) = a8;
  if (qword_100097870 != -1) {
    swift_once();
  }
  uint64_t v19 = qword_100099300;
  uint64_t v20 = *(void *)(qword_100099300
                  + OBJC_IVAR____TtC22MercuryPosterExtensionP33_F62BFB1CA87BCDB560F9BD6D41BC5A8D9Resources_device);
  v9[4] = v20;
  v9[5] = *(void *)(v19
                    + OBJC_IVAR____TtC22MercuryPosterExtensionP33_F62BFB1CA87BCDB560F9BD6D41BC5A8D9Resources_commandQueue);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 8);
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  uint64_t v22 = v21(a3, a4);
  uint64_t v23 = (CGColorSpace *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  id v24 = objc_allocWithZone((Class)type metadata accessor for WallpaperMetalView(0));
  sub_100035594(v20, v22, v23);
  uint64_t v26 = v25;
  v9[6] = v25;
  if (qword_100097860 != -1) {
    swift_once();
  }
  uint64_t v27 = sub_10005DCD8();
  uint64_t v28 = sub_100008DB0(v27, (uint64_t)qword_1000992D0);
  uint64_t v29 = *(void *)(v27 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v18, v28, v27);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v18, 0, 1, v27);
  uint64_t v30 = v26 + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_log;
  swift_beginAccess();
  sub_10004B434((uint64_t)v18, v30);
  swift_endAccess();
  *(unsigned char *)(v9[6] + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_shouldDrawAutomatically) = 0;
  char v31 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
  *((unsigned char *)v9 + 297) = v31 & 1;
  if (v31)
  {
    id v32 = [objc_allocWithZone((Class)CALayer) init];
    uint64_t v33 = v32;
    v9[7] = (uint64_t)v32;
    if (v32)
    {
      uint64_t v34 = qword_100097830;
      id v35 = v32;
      if (v34 != -1) {
        swift_once();
      }
      sub_100008F4C((uint64_t *)&unk_1000992C0);
      Class isa = sub_10005DDE8().super.isa;
      [v35 setActions:isa];

      uint64_t v33 = (void *)v9[7];
    }
    if (v33)
    {
      objc_msgSend(v33, "setPosition:", 0.0, 0.0);
      objc_msgSend(v33, "setAnchorPoint:", 0.0, 0.0);
      id v37 = v33;
      NSString v38 = sub_10005DE38();
      [v37 setName:v38];
    }
  }
  else
  {
    v9[7] = 0;
  }
  unsigned int v39 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  long long v100 = a5;
  if (v39 >= 2)
  {
    if (v39 == 2)
    {
      id v46 = [objc_allocWithZone((Class)CALayer) init];
      v9[9] = (uint64_t)v46;
      uint64_t v44 = v98;
      uint64_t v45 = v102;
      if (v46)
      {
        id v47 = v46;
        objc_msgSend(v46, "setAnchorPoint:", 0.0, 0.0);
        uint64_t v48 = qword_100097830;
        id v49 = v47;
        if (v48 != -1) {
          swift_once();
        }
        sub_100008F4C((uint64_t *)&unk_1000992C0);
        Class v50 = sub_10005DDE8().super.isa;
        [v49 setActions:v50];
      }
    }
    else
    {
      uint64_t v44 = v98;
      uint64_t v45 = v102;
      v9[9] = 0;
    }
    _OWORD v9[8] = 0;
  }
  else
  {
    id v40 = [objc_allocWithZone((Class)CALayer) init];
    objc_msgSend(v40, "setAnchorPoint:", 0.0, 0.0);
    if (qword_100097830 != -1) {
      swift_once();
    }
    sub_100008F4C((uint64_t *)&unk_1000992C0);
    Class v41 = sub_10005DDE8().super.isa;
    [v40 setActions:v41];

    [v40 setHidden:1];
    id v42 = [objc_allocWithZone((Class)CALayer) init];
    objc_msgSend(v42, "setAnchorPoint:", 0.0, 0.0);
    Class v43 = sub_10005DDE8().super.isa;
    [v42 setActions:v43];

    [v40 setMask:v42];
    _OWORD v9[8] = (uint64_t)v40;
    v9[9] = 0;
    a5 = v100;
    uint64_t v44 = v98;
    uint64_t v45 = v102;
  }
  v9[34] = v45;
  v9[35] = v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if ([a5 isSnapshot])
  {
    swift_bridgeObjectRelease();
    uint64_t v51 = (uint64_t)v99;
    sub_100014CC0((uint64_t)v99, (uint64_t)&v134, (uint64_t *)&unk_100099B10);
    sub_100014CC0((uint64_t)v152, v51, (uint64_t *)&unk_100099B10);
    sub_10004B2C0((uint64_t)&v134, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))sub_100012040);
  }
  else
  {
    long long v52 = (void *)swift_unknownObjectRetain();
    sub_10004A66C(v52, (uint64_t)&v134);
    swift_unknownObjectRelease();
    uint64_t v96 = v144;
    uint64_t v97 = v143;
    long long v93 = v145;
    uint64_t v94 = v146;
    uint64_t v98 = v147;
    int v95 = v148;
    uint64_t v53 = v137;
    uint64_t v54 = v138;
    uint64_t v55 = v139;
    uint64_t v56 = v140;
    uint64_t v57 = v141;
    char v58 = v142;
    if (v44)
    {
      sub_100014984(v97, v96, v93, v94, v98, v95);
      sub_100009420(v53, v54, v55, v56, v57, v58);
      id v59 = [a5 traitCollection];
      uint64_t v60 = v59;
      if (v59)
      {
        id v61 = [v59 userInterfaceStyle];
      }
      else
      {
        id v61 = 0;
      }
      uint64_t v53 = v102;
      if ((_BYTE)v92)
      {
        if (v92 == 1)
        {
          swift_bridgeObjectRelease();
          uint64_t v55 = 0;
          uint64_t v56 = 0;
          LODWORD(v57) = 0;
          int v62 = 0;
          char v63 = 1;
        }
        else
        {
          uint64_t v55 = 0;
          uint64_t v56 = 0;
          int v62 = 0;
          if (v60) {
            BOOL v64 = v61 == (id)2;
          }
          else {
            BOOL v64 = 0;
          }
          LODWORD(v57) = 0;
          char v63 = v64;
        }
      }
      else
      {
        char v63 = sub_10005E448();
        swift_bridgeObjectRelease();
        uint64_t v55 = 0;
        uint64_t v56 = 0;
        LODWORD(v57) = 0;
        int v62 = 0;
      }
    }
    else
    {
      int v62 = v142;
      char v63 = v135;
      sub_100014984(v97, v96, v93, v94, v98, v95);
      uint64_t v44 = v54;
    }
    uint64_t v86 = v53;
    uint64_t v87 = v44;
    int v88 = v57;
    uint64_t v89 = v56;
    LODWORD(v102) = v62;
    uint64_t v65 = v134;
    int v91 = HIBYTE(v136);
    int v92 = v136;
    uint64_t v66 = v149;
    long long v67 = v150;
    uint64_t v68 = v151;
    *(void *)&long long v103 = v134;
    int v90 = v63 & 1;
    BYTE8(v103) = v63 & 1;
    *(_WORD *)((char *)&v103 + 9) = v136;
    *(void *)&long long v104 = v53;
    *((void *)&v104 + 1) = v44;
    *(void *)&long long v105 = v55;
    *((void *)&v105 + 1) = v56;
    LODWORD(v106) = v57;
    BYTE4(v106) = v62;
    uint64_t v70 = v96;
    uint64_t v69 = v97;
    *((void *)&v106 + 1) = v97;
    *(void *)&long long v107 = v96;
    uint64_t v71 = (uint64_t)v93;
    uint64_t v72 = v94;
    *((void *)&v107 + 1) = v93;
    *(void *)&long long v108 = v94;
    uint64_t v73 = v98;
    *((void *)&v108 + 1) = v98;
    char v74 = v95;
    LOBYTE(v109) = v95;
    *((void *)&v109 + 1) = v149;
    long long v110 = v150;
    uint64_t v111 = v151;
    sub_10004AE2C((uint64_t)&v103, (void (*)(void, void, void, void, void, void))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100014984);
    sub_100012040(v69, v70, v71, v72, v73, v74);
    v112[6] = v109;
    v112[7] = v110;
    uint64_t v113 = v111;
    v112[2] = v105;
    v112[3] = v106;
    v112[4] = v107;
    v112[5] = v108;
    v112[0] = v103;
    v112[1] = v104;
    nullsub_1(*(double *)&v104, *(double *)&v103);
    uint64_t v75 = v55;
    uint64_t v76 = (uint64_t)v99;
    sub_100014CC0((uint64_t)v99, (uint64_t)v114, (uint64_t *)&unk_100099B10);
    sub_100014CC0((uint64_t)v112, v76, (uint64_t *)&unk_100099B10);
    sub_10004B2C0((uint64_t)v114, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))sub_100012040);
    uint64_t v115 = v65;
    char v116 = v90;
    char v117 = v92;
    char v118 = v91;
    uint64_t v119 = v86;
    uint64_t v120 = v87;
    uint64_t v121 = v75;
    uint64_t v122 = v89;
    int v123 = v88;
    char v124 = v102;
    uint64_t v125 = v69;
    uint64_t v126 = v70;
    uint64_t v127 = v71;
    uint64_t v128 = v72;
    uint64_t v129 = v98;
    char v130 = v74;
    uint64_t v131 = v66;
    long long v132 = v67;
    uint64_t v133 = v68;
    sub_10004AE2C((uint64_t)&v115, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
  }
  uint64_t v77 = (char *)v9[6];
  uint64_t v78 = swift_allocObject();
  swift_weakInit();
  uint64_t v79 = swift_allocObject();
  uint64_t v80 = v101;
  *(void *)(v79 + 16) = v78;
  *(void *)(v79 + 24) = v80;
  uint64_t v81 = (void (**)(void *))&v77[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_drawingHandler];
  uint64_t v82 = *(void *)&v77[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_drawingHandler];
  *uint64_t v81 = sub_10004B4D4;
  v81[1] = (void (*)(void *))v79;
  float v83 = v77;
  swift_retain();
  sub_100012030(v82);

  swift_release();
  swift_unknownObjectRelease();
  return v9;
}

void sub_10003986C(void *a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    sub_100014CC0(Strong + 136, (uint64_t)v8, (uint64_t *)&unk_100099B10);
    sub_100014CC0((uint64_t)v8, (uint64_t)v9, (uint64_t *)&unk_100099B10);
    if (sub_10004B2A4((uint64_t)v9) == 1)
    {
      if (qword_100097860 != -1) {
        swift_once();
      }
      uint64_t v3 = sub_10005DCD8();
      sub_100008DB0(v3, (uint64_t)qword_1000992D0);
      os_log_type_t v4 = sub_10005DCB8();
      os_log_type_t v5 = sub_10005E078();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "got a request to render, but have no non-snapshot state", v6, 2u);
        swift_slowDealloc();
        swift_release();

        return;
      }
    }
    else
    {
      v11[6] = v9[6];
      v11[7] = v9[7];
      uint64_t v12 = v10;
      v11[2] = v9[2];
      v11[3] = v9[3];
      v11[4] = v9[4];
      v11[5] = v9[5];
      v11[0] = v9[0];
      v11[1] = v9[1];
      sub_100014CC0((uint64_t)v8, (uint64_t)v7, (uint64_t *)&unk_100099B10);
      sub_10004AE2C((uint64_t)v7, (void (*)(void, void, void, void, void, void))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100014984);
      sub_10003C44C((uint64_t)v11, 0, a1);
      sub_10004B2C0((uint64_t)v8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))sub_100012040);
    }
    swift_release();
  }
}

uint64_t sub_100039C8C(id a1, void *a2)
{
  uint64_t v4 = v2;
  if (!*(void *)(v2 + 104)) {
    goto LABEL_6;
  }
  if (qword_100097860 != -1) {
    goto LABEL_57;
  }
  while (1)
  {
    uint64_t v6 = sub_10005DCD8();
    sub_100008DB0(v6, (uint64_t)qword_1000992D0);
    unint64_t v7 = sub_10005DCB8();
    os_log_type_t v8 = sub_10005E078();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "renderer should be nil at this point — attaching multiple times?", v9, 2u);
      swift_slowDealloc();
    }

LABEL_6:
    [a1 bounds];
    double v11 = v10;
    double v13 = v12;
    double v15 = v14;
    double v17 = v16;
    id v18 = [a1 window];
    if (!v18
      || (uint64_t v19 = v18, v20 = [v18 screen], v19, !v20))
    {
      id v20 = [self mainScreen];
    }
    [v20 nativeScale];
    double v22 = v21;

    v77.origin.CGFloat x = v11;
    v77.origin.CGFloat y = v13;
    v77.size.CGFloat width = v15;
    v77.size.CGFloat height = v17;
    double v23 = ceil(v22 * CGRectGetWidth(v77));
    if ((~*(void *)&v23 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    if (v23 <= -9.22337204e18) {
      goto LABEL_52;
    }
    if (v23 >= 9.22337204e18) {
      goto LABEL_53;
    }
    v78.origin.CGFloat x = v11;
    v78.origin.CGFloat y = v13;
    v78.size.CGFloat width = v15;
    v78.size.CGFloat height = v17;
    double v24 = ceil(v22 * CGRectGetHeight(v78));
    if ((~*(void *)&v24 & 0x7FF0000000000000) == 0) {
      goto LABEL_54;
    }
    if (v24 <= -9.22337204e18) {
      goto LABEL_55;
    }
    if (v24 < 9.22337204e18) {
      break;
    }
LABEL_56:
    __break(1u);
LABEL_57:
    swift_once();
  }
  uint64_t v25 = *(void **)(v4 + 48);
  uint64_t v73 = (uint64_t)v23;
  id v26 = [v25 layer];
  self;
  objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), "setDrawableSize:", (double)(uint64_t)v23, (double)(uint64_t)v24);

  id v74 = v25;
  objc_msgSend(v25, "setBounds:", v11, v13, v15, v17);
  uint64_t v27 = *(void **)(v4 + 56);
  objc_msgSend(v27, "setBounds:", v11, v13, v15, v17);
  uint64_t v28 = *(void **)(v4 + 72);
  objc_msgSend(v28, "setBounds:", v11, v13, v15, v17);
  if (v28)
  {
    NSString v29 = sub_10005DE38();
    [v28 setName:v29];
  }
  uint64_t v72 = (uint64_t)v24;
  uint64_t v31 = *(void *)(v4 + 88);
  uint64_t v30 = *(void *)(v4 + 96);
  id v32 = *(unsigned __int8 (**)(uint64_t, uint64_t))(v30 + 24);
  if (v32(v31, v30) == 2)
  {
    [v25 setOpaque:0];
    [a2 addSubview:v25];
    if (v27)
    {
      id v33 = v27;
      id v34 = [a2 layer];
      [v34 addSublayer:v33];
    }
    if (v28)
    {
      id v35 = v28;
      id v36 = [a1 layer];
      goto LABEL_24;
    }
  }
  else
  {
    [a1 addSubview:v25];
    if (v27)
    {
      id v35 = v27;
      id v36 = [a1 layer];
LABEL_24:
      id v37 = v36;
      [v37 addSublayer:v35];
    }
  }
  unsigned __int8 v38 = v32(v31, v30);
  if ((v38 & 0xFE) == 2)
  {
    *(void *)(v4 + 80) = 0;
    swift_release();
    uint64_t v39 = v3;
  }
  else
  {
    unsigned __int8 v40 = v38;
    id v41 = [self clearColor];
    id v42 = a2;
    [a2 setBackgroundColor:v41];

    Class v43 = *(void **)(v4 + 32);
    swift_unknownObjectRetain();
    id v44 = [v74 layer];
    type metadata accessor for FloatingLayerMaskManager();
    swift_allocObject();
    uint64_t v45 = sub_100043CE8(v73, v72, v43, v44, v40, v15, v17);
    uint64_t v39 = v3;
    if (v3)
    {
      if (qword_100097860 != -1) {
        swift_once();
      }
      uint64_t v46 = sub_10005DCD8();
      sub_100008DB0(v46, (uint64_t)qword_1000992D0);
      swift_errorRetain();
      swift_errorRetain();
      id v47 = sub_10005DCB8();
      os_log_type_t v48 = sub_10005E078();
      if (os_log_type_enabled(v47, v48))
      {
        id v49 = (uint8_t *)swift_slowAlloc();
        uint64_t v70 = (void *)swift_slowAlloc();
        *(_DWORD *)id v49 = 138543362;
        swift_errorRetain();
        v76[0] = _swift_stdlib_bridgeErrorToNSError();
        sub_10005E138();
        *uint64_t v70 = v76[0];
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "couldn’t set up floating layer: %{public}@", v49, 0xCu);
        sub_100008F4C(&qword_100097D50);
        swift_arrayDestroy();
        swift_slowDealloc();
        id v42 = a2;
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      uint64_t v50 = 0;
      uint64_t v39 = 0;
    }
    else
    {
      uint64_t v50 = v45;
    }
    *(void *)(v4 + 80) = v50;
    swift_retain_n();
    swift_release();
    if (v50)
    {
      id v51 = [v42 layer];
      [v51 addSublayer:*(void *)(v50 + 16)];
      swift_release();
    }
    long long v52 = *(void **)(v4 + 64);
    if (v52)
    {
      id v53 = v52;
      objc_msgSend(v53, "setBounds:", v11, v13, v15, v17);
      id v54 = [v53 mask];
      objc_msgSend(v54, "setBounds:", v11, v13, v15, v17);

      id v55 = [v42 layer];
      [v55 addSublayer:v53];
    }
    swift_release();
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v30 + 32))(v31, v30))
  {
    id v56 = [*(id *)(v4 + 40) commandBuffer];
    if (v56)
    {
      uint64_t v57 = v56;
      NSString v58 = sub_10005DE38();
      [v57 setLabel:v58];

      goto LABEL_44;
    }
    sub_10004B224();
    swift_allocError();
    *uint64_t v69 = 0;
    return swift_willThrow();
  }
  else
  {
    uint64_t v57 = 0;
LABEL_44:
    uint64_t v60 = *(void *)(v4 + 24);
    uint64_t v59 = *(void *)(v4 + 32);
    uint64_t v61 = *(void *)(v4 + 16);
    int v62 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, uint64_t))(v30 + 176);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v63 = v62(v59, v61, v60, v73, v72, v57, v31, v30);
    if (!v39)
    {
      *(void *)(v4 + 104) = v63;
      *(void *)(v4 + 112) = v30;
      swift_unknownObjectRelease();
      if (*(void *)(v4 + 104))
      {
        uint64_t v64 = *(void *)(v4 + 112);
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v66 = swift_allocObject();
        swift_weakInit();
        long long v67 = *(void (**)(uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v64 + 160);
        swift_unknownObjectRetain();
        swift_retain();
        v67(sub_10004B3E0, v66, ObjectType, v64);
        swift_unknownObjectRelease();
        swift_release();
      }
      sub_100014CC0(v4 + 136, (uint64_t)v75, (uint64_t *)&unk_100099B10);
      sub_100014CC0((uint64_t)v75, (uint64_t)v76, (uint64_t *)&unk_100099B10);
      if (sub_10004B2A4((uint64_t)v76) != 1)
      {
        *((unsigned char *)v74 + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_shouldDrawAutomatically) = 1;
        [v74 setNeedsDisplay];
      }
    }
    return swift_unknownObjectRelease();
  }
}

uint64_t sub_10003A700(void *a1, void *a2)
{
  id v2 = [a1 contents];
  NSString v3 = sub_10005DE38();
  id v4 = [v2 objectForUserInfoKey:v3];

  swift_unknownObjectRelease();
  if (v4)
  {
    sub_10005E178();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v226 = 0u;
    long long v227 = 0u;
  }
  sub_100014CC0((uint64_t)&v226, (uint64_t)&v242, &qword_100097D70);
  os_log_type_t v5 = a1;
  if (*((void *)&v243 + 1))
  {
    if (swift_dynamicCast())
    {
      object = v210._object;
      uint64_t countAndFlagsBits = v210._countAndFlagsBits;
      if (!*(void *)(v251 + 280) || *(_OWORD *)(v251 + 272) != v210 && (sub_10005E448() & 1) == 0)
      {
        if (qword_100097860 != -1) {
          swift_once();
        }
        uint64_t v8 = sub_10005DCD8();
        sub_100008DB0(v8, (uint64_t)qword_1000992D0);
        swift_bridgeObjectRetain_n();
        uint64_t v9 = sub_10005DCB8();
        os_log_type_t v10 = sub_10005E068();
        if (os_log_type_enabled(v9, v10))
        {
          uint64_t v11 = v210._countAndFlagsBits;
          double v12 = (uint8_t *)swift_slowAlloc();
          v242._uint64_t countAndFlagsBits = swift_slowAlloc();
          *(_DWORD *)double v12 = 136446210;
          swift_bridgeObjectRetain();
          *(void *)&long long v226 = sub_100044640(v11, (unint64_t)object, &v242._countAndFlagsBits);
          sub_10005E138();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v9, v10, "renderer got an update with a new look identifier %{public}s", v12, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t countAndFlagsBits = v11;
          os_log_type_t v5 = a1;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v13 = v251;
        *(void *)(v251 + 272) = countAndFlagsBits;
        *(void *)(v13 + 280) = object;
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_100014D24((uint64_t)&v242, &qword_100097D70);
  }
  id v14 = [v5 contents];
  NSString v15 = sub_10005DE38();
  id v16 = [v14 objectForUserInfoKey:v15];

  swift_unknownObjectRelease();
  if (v16)
  {
    sub_10005E178();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v226 = 0u;
    long long v227 = 0u;
  }
  uint64_t v17 = v251;
  sub_100014CC0((uint64_t)&v226, (uint64_t)&v242, &qword_100097D70);
  if (!*((void *)&v243 + 1))
  {
    sub_100014D24((uint64_t)&v242, &qword_100097D70);
    goto LABEL_41;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_41;
  }
  Swift::String v18 = v210;
  swift_bridgeObjectRetain();
  v19._rawValue = &off_1000798B8;
  Swift::Int v20 = sub_10005E398(v19, v210);
  swift_bridgeObjectRelease();
  if (v20)
  {
    if (v20 == 1)
    {
      unint64_t v23 = 0xE400000000000000;
      char v22 = 1;
      uint64_t v21 = 1802658116;
      int v24 = *(unsigned __int8 *)(v17 + 128);
      if (!*(unsigned char *)(v17 + 128)) {
        goto LABEL_27;
      }
    }
    else
    {
      if (v20 != 2)
      {
LABEL_40:
        swift_bridgeObjectRelease();
        goto LABEL_41;
      }
      uint64_t v21 = 0x6974616D6F747541;
      char v22 = 2;
      unint64_t v23 = 0xE900000000000063;
      int v24 = *(unsigned __int8 *)(v17 + 128);
      if (!*(unsigned char *)(v17 + 128))
      {
LABEL_27:
        unint64_t v25 = 0xE500000000000000;
        if (v21 != 0x746867694CLL) {
          goto LABEL_39;
        }
        goto LABEL_37;
      }
    }
  }
  else
  {
    char v22 = 0;
    unint64_t v23 = 0xE500000000000000;
    uint64_t v21 = 0x746867694CLL;
    int v24 = *(unsigned __int8 *)(v17 + 128);
    if (!*(unsigned char *)(v17 + 128)) {
      goto LABEL_27;
    }
  }
  if (v24 == 1)
  {
    unint64_t v25 = 0xE400000000000000;
    if (v21 != 1802658116) {
      goto LABEL_39;
    }
  }
  else
  {
    unint64_t v25 = 0xE900000000000063;
    if (v21 != 0x6974616D6F747541) {
      goto LABEL_39;
    }
  }
LABEL_37:
  if (v23 == v25)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    goto LABEL_41;
  }
LABEL_39:
  char v26 = sub_10005E448();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v26) {
    goto LABEL_40;
  }
  if (qword_100097860 != -1) {
    swift_once();
  }
  uint64_t v104 = sub_10005DCD8();
  sub_100008DB0(v104, (uint64_t)qword_1000992D0);
  swift_bridgeObjectRetain();
  long long v105 = sub_10005DCB8();
  os_log_type_t v106 = sub_10005E068();
  if (os_log_type_enabled(v105, v106))
  {
    long long v107 = (uint8_t *)swift_slowAlloc();
    v242._uint64_t countAndFlagsBits = swift_slowAlloc();
    *(_DWORD *)long long v107 = 136446210;
    swift_bridgeObjectRetain();
    *(void *)&long long v226 = sub_100044640(v18._countAndFlagsBits, (unint64_t)v18._object, &v242._countAndFlagsBits);
    sub_10005E138();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v105, v106, "renderer got an update with a new appearance mode %{public}s", v107, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    *(unsigned char *)(v251 + 128) = v22;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    *(unsigned char *)(v17 + 128) = v22;
  }
LABEL_41:
  uint64_t v27 = (void *)swift_unknownObjectRetain();
  sub_10004A66C(v27, (uint64_t)&v226);
  swift_unknownObjectRelease();
  uint64_t v28 = v226;
  uint64_t v29 = v232;
  uint64_t v30 = v233;
  uint64_t v31 = v234;
  uint64_t v32 = v235;
  uint64_t v33 = v236;
  uint64_t v34 = v238;
  double v35 = v239;
  uint64_t v36 = v240;
  uint64_t v37 = v241;
  uint64_t v38 = *((void *)&v227 + 1);
  uint64_t v187 = v228;
  char v39 = v231;
  char v160 = BYTE10(v226);
  char v223 = BYTE10(v226);
  char v222 = v231;
  unsigned __int8 v219 = v237;
  uint64_t v40 = v251;
  uint64_t v41 = *(void *)(v251 + 280);
  uint64_t v178 = v236;
  uint64_t v179 = v235;
  uint64_t v183 = v232;
  unsigned int v174 = v230;
  uint64_t v175 = v229;
  uint64_t v173 = v227;
  int v169 = v237;
  if (v41)
  {
    uint64_t v185 = *((void *)&v227 + 1);
    uint64_t v42 = v236;
    uint64_t v176 = *(void *)(v251 + 272);
    char v43 = v237;
    sub_100014984(v232, v233, v234, v235, v236, v237);
    uint64_t v44 = v29;
    uint64_t v45 = v30;
    uint64_t v46 = v30;
    uint64_t v47 = (uint64_t)v31;
    sub_100014984(v44, v46, v31, v32, v42, v43);
    swift_bridgeObjectRetain();
    sub_100009420(v173, v185, v187, v175, v174, v39);
    uint64_t v48 = 0;
    uint64_t v175 = 0;
    unsigned int v174 = 0;
    char v167 = 0;
    char v222 = 0;
    uint64_t v173 = v176;
    uint64_t v49 = v41;
  }
  else
  {
    char v167 = v231;
    char v50 = v237;
    sub_100014984(v232, v233, v234, v235, v236, v237);
    uint64_t v51 = v29;
    uint64_t v45 = v30;
    uint64_t v52 = v30;
    uint64_t v47 = (uint64_t)v31;
    sub_100014984(v51, v52, v31, v32, v33, v50);
    uint64_t v48 = v187;
    uint64_t v49 = v38;
  }
  int v53 = *(unsigned __int8 *)(v40 + 128);
  id v54 = a1;
  id v55 = [a1 traitCollection];
  id v56 = v55;
  if (v55)
  {
    id v57 = [v55 userInterfaceStyle];
  }
  else
  {
    id v57 = 0;
  }
  uint64_t v58 = v47;
  uint64_t v177 = v45;
  uint64_t v59 = v251;
  uint64_t v186 = v49;
  if (v53)
  {
    uint64_t v60 = v183;
    if (v53 == 1)
    {
      swift_bridgeObjectRelease();
      char v61 = 1;
    }
    else
    {
      if (v56) {
        BOOL v62 = v57 == (id)2;
      }
      else {
        BOOL v62 = 0;
      }
      char v61 = v62;
    }
  }
  else
  {
    char v61 = sub_10005E448();
    swift_bridgeObjectRelease();
    uint64_t v60 = v183;
  }
  uint64_t v63 = (unsigned char *)(v59 + 297);
  char v64 = v61 & 1;
  char v225 = v61 & 1;
  unsigned __int8 v65 = [a1 isPreview];
  unsigned __int8 v224 = v65;
  uint64_t v188 = v48;
  char v165 = v61 & 1;
  unsigned __int8 v159 = v65;
  uint64_t v181 = v58;
  if (a2)
  {
    unsigned __int8 v66 = v65;
    id v67 = a2;
    [v67 duration];
    if (v68 > 0.0)
    {
      id v161 = v67;
      long long v157 = (unsigned char *)(v59 + 297);
      sub_100014CC0(v59 + 136, (uint64_t)&v210, (uint64_t *)&unk_100099B10);
      sub_100014CC0((uint64_t)&v210, (uint64_t)&v242, (uint64_t *)&unk_100099B10);
      if (sub_10004B2A4((uint64_t)&v242) == 1)
      {
        *(void *)&long long v201 = v28;
        BYTE8(v201) = v61 & 1;
        BYTE9(v201) = v66;
        char v69 = v160;
        BYTE10(v201) = v160;
        *(void *)&long long v202 = v173;
        *((void *)&v202 + 1) = v186;
        *(void *)&long long v203 = v48;
        *((void *)&v203 + 1) = v175;
        LODWORD(v204) = v174;
        BYTE4(v204) = v167;
        *((void *)&v204 + 1) = v60;
        *(void *)&long long v205 = v177;
        uint64_t v70 = v60;
        uint64_t v71 = v178;
        *((void *)&v205 + 1) = v58;
        *(void *)&long long v206 = v179;
        *((void *)&v206 + 1) = v178;
        int v72 = v169;
        LOBYTE(v207) = v169;
        *((void *)&v207 + 1) = v34;
        *(double *)&long long v208 = v35;
        *((void *)&v208 + 1) = v36;
        uint64_t v209 = v37;
        sub_10004AE2C((uint64_t)&v201, (void (*)(void, void, void, void, void, void))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100014984);
        sub_100012040(v70, v177, v58, v179, v178, v169);
        char v73 = v167;
        unsigned __int8 v74 = v66;
        char v75 = v165;
        unsigned int v76 = HIDWORD(v28);
        unsigned int v77 = v28;
        uint64_t v78 = v173;
        uint64_t v79 = v186;
        uint64_t v80 = v48;
        uint64_t v81 = v175;
        unsigned int v82 = v174;
        float v83 = (void *)v58;
        uint64_t v84 = v70;
        id v85 = (id)v177;
        uint64_t v86 = v179;
        char v64 = v165;
        uint64_t v87 = v34;
        double v88 = v35;
        uint64_t v89 = v36;
        uint64_t v90 = v37;
      }
      else
      {
        sub_100014CC0((uint64_t)&v210, (uint64_t)&v201, (uint64_t *)&unk_100099B10);
        sub_10004AE2C((uint64_t)&v201, (void (*)(void, void, void, void, void, void))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100014984);
        sub_100012040(v60, v177, v58, v179, v178, v169);
        uint64_t v87 = *((void *)&v207 + 1);
        uint64_t v89 = *((void *)&v208 + 1);
        double v88 = *(double *)&v208;
        uint64_t v90 = v209;
        uint64_t v84 = *((void *)&v204 + 1);
        float v83 = (void *)*((void *)&v205 + 1);
        id v85 = (id)v205;
        uint64_t v71 = *((void *)&v206 + 1);
        uint64_t v86 = v206;
        int v72 = v207;
        uint64_t v79 = *((void *)&v202 + 1);
        uint64_t v78 = v202;
        uint64_t v81 = *((void *)&v203 + 1);
        uint64_t v80 = v203;
        unsigned int v82 = v204;
        char v73 = BYTE4(v204);
        char v69 = BYTE10(v201);
        unsigned __int8 v74 = BYTE9(v201);
        char v75 = BYTE8(v201);
        unsigned int v76 = DWORD1(v201);
        unsigned int v77 = v201;
        char v64 = v165;
      }
      *(void *)&long long v201 = __PAIR64__(v76, v77);
      BYTE8(v201) = v75;
      BYTE9(v201) = v74;
      BYTE10(v201) = v69;
      *(void *)&long long v202 = v78;
      *((void *)&v202 + 1) = v79;
      *(void *)&long long v203 = v80;
      *((void *)&v203 + 1) = v81;
      LODWORD(v204) = v82;
      BYTE4(v204) = v73;
      *((void *)&v204 + 1) = v84;
      *(void *)&long long v205 = v85;
      *((void *)&v205 + 1) = v83;
      *(void *)&long long v206 = v86;
      *((void *)&v206 + 1) = v71;
      LOBYTE(v207) = v72;
      *((void *)&v207 + 1) = v87;
      *(double *)&long long v208 = v88;
      *((void *)&v208 + 1) = v89;
      uint64_t v209 = v90;
      sub_100014984(v84, (uint64_t)v85, v83, v86, v71, v72);
      sub_10004AE2C((uint64_t)&v201, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
      if (v72) {
        sub_100012040(v84, (uint64_t)v85, (uint64_t)v83, v86, v71, 1);
      }
      else {
        id v85 = (id)v84;
      }
      uint64_t v91 = v179;
      uint64_t v63 = v157;
      uint64_t v60 = v183;
      if ([a1 deviceOrientation] == v85)
      {

        id v166 = 0;
        uint64_t v168 = 0;
        id v94 = 0;
        uint64_t v164 = 0;
        uint64_t v171 = 0;
        unsigned __int8 v162 = -1;
        char v97 = 1;
        id v54 = a1;
      }
      else
      {
        uint64_t v168 = (uint64_t)v85;
        if (qword_100097860 != -1) {
          swift_once();
        }
        uint64_t v98 = sub_10005DCD8();
        sub_100008DB0(v98, (uint64_t)qword_1000992D0);
        id v54 = a1;
        swift_unknownObjectRetain_n();
        uint64_t v99 = sub_10005DCB8();
        os_log_type_t v100 = sub_10005E068();
        if (os_log_type_enabled(v99, v100))
        {
          os_log_type_t v172 = v100;
          uint64_t v101 = swift_slowAlloc();
          *(void *)&long long v192 = swift_slowAlloc();
          *(_DWORD *)uint64_t v101 = 136315394;
          unint64_t v102 = 0xE800000000000000;
          uint64_t v103 = 0x7469617274726F70;
          switch(v168)
          {
            case 1:
              break;
            case 2:
              unint64_t v102 = 0x80000001000656B0;
              uint64_t v103 = 0xD000000000000012;
              break;
            case 3:
              uint64_t v103 = 0x70616373646E616CLL;
              unint64_t v102 = 0xEE00746867695265;
              break;
            case 4:
              uint64_t v103 = 0x70616373646E616CLL;
              unint64_t v102 = 0xED00007466654C65;
              break;
            default:
              unint64_t v102 = 0xE700000000000000;
              uint64_t v103 = 0x6E776F6E6B6E75;
              break;
          }
          sub_100044640(v103, v102, (uint64_t *)&v192);
          sub_10005E138();
          swift_bridgeObjectRelease();
          *(_WORD *)(v101 + 12) = 2080;
          long long v108 = (char *)[a1 deviceOrientation] - 1;
          unint64_t v109 = 0xE800000000000000;
          uint64_t v110 = 0x7469617274726F70;
          switch((unint64_t)v108)
          {
            case 0uLL:
              break;
            case 1uLL:
              unint64_t v109 = 0x80000001000656B0;
              uint64_t v110 = 0xD000000000000012;
              break;
            case 2uLL:
              uint64_t v110 = 0x70616373646E616CLL;
              unint64_t v109 = 0xEE00746867695265;
              break;
            case 3uLL:
              uint64_t v110 = 0x70616373646E616CLL;
              unint64_t v109 = 0xED00007466654C65;
              break;
            default:
              unint64_t v109 = 0xE700000000000000;
              uint64_t v110 = 0x6E776F6E6B6E75;
              break;
          }
          uint64_t v191 = sub_100044640(v110, v109, (uint64_t *)&v192);
          sub_10005E138();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v99, v172, "🔄 renderer starting orientation transition %s → %s", (uint8_t *)v101, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v63 = v157;
        }
        else
        {

          swift_unknownObjectRelease_n();
        }
        id v166 = [a1 deviceOrientation];
        id v94 = [v161 timingFunction];
        if (!v94) {
          id v94 = [self functionWithName:kCAMediaTimingFunctionEaseInEaseOut];
        }
        double Current = CFAbsoluteTimeGetCurrent();
        [v161 delay];
        *(double *)&uint64_t v113 = Current + v112;
        [v161 duration];
        uint64_t v164 = v113;
        uint64_t v171 = v114;
        [v161 delay];
        double v116 = v115;
        [v161 duration];
        sub_100035BC0(v116 + v117);

        char v97 = 0;
        unsigned __int8 v162 = 1;
        uint64_t v91 = v179;
      }
      goto LABEL_100;
    }
    uint64_t v91 = v179;
    sub_100012040(v60, v177, v58, v179, v178, v169);

    char v64 = v165;
  }
  else
  {
    uint64_t v91 = v179;
    sub_100012040(v60, v177, v58, v179, v178, v169);
  }
  sub_100014CC0(v59 + 136, (uint64_t)&v210, (uint64_t *)&unk_100099B10);
  sub_100014CC0((uint64_t)&v210, (uint64_t)&v201, (uint64_t *)&unk_100099B10);
  sub_100014CC0((uint64_t)&v210, (uint64_t)&v242, (uint64_t *)&unk_100099B10);
  if (sub_10004B2A4((uint64_t)&v242) != 1)
  {
    long long v158 = (unsigned char *)(v59 + 297);
    uint64_t v92 = *((void *)&v204 + 1);
    id v94 = (id)*((void *)&v205 + 1);
    uint64_t v93 = v205;
    long long v95 = v206;
    int v96 = v207;
    sub_100014CC0((uint64_t)&v201, (uint64_t)&v192, (uint64_t *)&unk_100099B10);
    id v166 = (id)v93;
    uint64_t v168 = v92;
    sub_100014984(v92, v93, v94, v95, *((uint64_t *)&v95 + 1), v96);
    sub_10004B2C0((uint64_t)&v210, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))sub_100014984);
    sub_10004B2C0((uint64_t)&v192, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))sub_100012040);
    if (v96 == 1)
    {
      uint64_t v63 = v158;
      if (CFAbsoluteTimeGetCurrent() <= *(double *)&v95 + *((double *)&v95 + 1))
      {
        uint64_t v164 = v95;
        char v97 = 0;
        unsigned __int8 v162 = 1;
        uint64_t v60 = v183;
        char v64 = v165;
        uint64_t v171 = *((void *)&v95 + 1);
        goto LABEL_100;
      }
      sub_100012040(v168, v93, (uint64_t)v94, v95, *((uint64_t *)&v95 + 1), 1);
    }
    else
    {
      uint64_t v63 = v158;
    }
    char v64 = v165;
    uint64_t v60 = v183;
  }
  id v166 = 0;
  uint64_t v168 = 0;
  id v94 = 0;
  uint64_t v164 = 0;
  uint64_t v171 = 0;
  unsigned __int8 v162 = -1;
  char v97 = 1;
LABEL_100:
  if (v63[15] == 1 && ([v54 isSnapshot] & 1) == 0)
  {
    sub_100012040(v60, v177, v181, v91, v178, v169);
    if (qword_100097860 != -1) {
      swift_once();
    }
    uint64_t v152 = sub_10005DCD8();
    sub_100008DB0(v152, (uint64_t)qword_1000992D0);
    long long v153 = sub_10005DCB8();
    os_log_type_t v154 = sub_10005E068();
    if (os_log_type_enabled(v153, v154))
    {
      long long v155 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v155 = 0;
      _os_log_impl((void *)&_mh_execute_header, v153, v154, "⏭️ got misleading environment update (non-snapshot following snapshot), skipping render", v155, 2u);
      uint64_t v91 = v179;
      swift_slowDealloc();

      sub_10004B180(v168, (uint64_t)v166, (uint64_t)v94, v164, v171, v162);
    }
    else
    {
      sub_10004B180(v168, (uint64_t)v166, (uint64_t)v94, v164, v171, v162);
    }
    v63[15] = 0;
    v242._uint64_t countAndFlagsBits = v28;
    LOBYTE(v242._object) = v225;
    BYTE1(v242._object) = v224;
    BYTE2(v242._object) = v223;
    *(_DWORD *)((char *)&v242._object + 3) = v191;
    HIBYTE(v242._object) = BYTE4(v191);
    *(void *)&long long v243 = v173;
    *((void *)&v243 + 1) = v186;
    *(void *)&long long v244 = v188;
    *((void *)&v244 + 1) = v175;
    LODWORD(v245) = v174;
    BYTE4(v245) = v222;
    *(_WORD *)((char *)&v245 + 5) = v220;
    BYTE7(v245) = v221;
    *((void *)&v245 + 1) = v183;
    *(void *)&long long v246 = v177;
    *((void *)&v246 + 1) = v181;
    *(void *)&long long v247 = v91;
    *((void *)&v247 + 1) = v178;
    LOBYTE(v248) = v219;
    *(_DWORD *)((char *)&v248 + 1) = v192;
    DWORD1(v248) = *(_DWORD *)((char *)&v192 + 3);
    *((void *)&v248 + 1) = v34;
    *(double *)&long long v249 = v35;
    *((void *)&v249 + 1) = v36;
    uint64_t v250 = v37;
    long long v156 = &v242;
    return sub_10004AE2C((uint64_t)v156, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
  }
  v63[15] = [v54 isSnapshot];
  if ([v54 isSnapshot] && *v63 == 1)
  {
    char v118 = v64;
    uint64_t v119 = *(void *)(v251 + 48);
    uint64_t v120 = OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_shouldDrawAutomatically;
    unsigned int v121 = v174;
    uint64_t v122 = v175;
    uint64_t v123 = v181;
    if (*(unsigned char *)(v119 + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_shouldDrawAutomatically) == 1)
    {
      if (qword_100097860 != -1) {
        swift_once();
      }
      uint64_t v124 = sub_10005DCD8();
      sub_100008DB0(v124, (uint64_t)qword_1000992D0);
      uint64_t v125 = sub_10005DCB8();
      os_log_type_t v126 = sub_10005E068();
      if (os_log_type_enabled(v125, v126))
      {
        uint64_t v127 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v127 = 0;
        _os_log_impl((void *)&_mh_execute_header, v125, v126, "⏸️ disabling automatic drawing", v127, 2u);
        uint64_t v91 = v179;
        swift_slowDealloc();
      }

      unsigned int v121 = v174;
      uint64_t v122 = v175;
      uint64_t v123 = v181;
    }
    *(unsigned char *)(v119 + v120) = 0;
    v210._uint64_t countAndFlagsBits = v28;
    LOBYTE(v210._object) = v118;
    BYTE1(v210._object) = v159;
    BYTE2(v210._object) = v160;
    *(void *)&long long v211 = v173;
    *((void *)&v211 + 1) = v186;
    *(void *)&long long v212 = v188;
    *((void *)&v212 + 1) = v122;
    LODWORD(v213) = v121;
    BYTE4(v213) = v222;
    *((void *)&v213 + 1) = v60;
    uint64_t v128 = v178;
    *(void *)&long long v214 = v177;
    *((void *)&v214 + 1) = v123;
    *(void *)&long long v215 = v91;
    *((void *)&v215 + 1) = v178;
    LOBYTE(v216) = v169;
    *((void *)&v216 + 1) = v34;
    *(double *)&long long v217 = v35;
    *((void *)&v217 + 1) = v36;
    uint64_t v218 = v37;
    long long v246 = v214;
    long long v247 = v215;
    long long v244 = v212;
    long long v245 = v213;
    Swift::String v242 = v210;
    long long v243 = v211;
    uint64_t v250 = v37;
    long long v248 = v216;
    long long v249 = v217;
    sub_10004AE2C((uint64_t)&v210, (void (*)(void, void, void, void, void, void))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100014984);
    sub_100012040(v60, v177, v123, v91, v178, v169);
    sub_10003C44C((uint64_t)&v242, 1, 0);
    if (v163)
    {
      sub_10004AE2C((uint64_t)&v210, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
      if (qword_100097860 != -1) {
        swift_once();
      }
      uint64_t v129 = sub_10005DCD8();
      sub_100008DB0(v129, (uint64_t)qword_1000992D0);
      swift_errorRetain();
      swift_errorRetain();
      char v130 = sub_10005DCB8();
      os_log_type_t v131 = sub_10005E078();
      if (os_log_type_enabled(v130, v131))
      {
        long long v132 = (uint8_t *)swift_slowAlloc();
        uint64_t v133 = (void *)swift_slowAlloc();
        *(_DWORD *)long long v132 = 138412290;
        swift_errorRetain();
        uint64_t v134 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)&long long v201 = v134;
        sub_10005E138();
        void *v133 = v134;
        uint64_t v135 = v181;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v130, v131, "failed to render for snapshot: %@", v132, 0xCu);
        sub_100008F4C(&qword_100097D50);
        swift_arrayDestroy();
        uint64_t v128 = v178;
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        sub_10004B180(v168, (uint64_t)v166, (uint64_t)v94, v164, v171, v162);
        uint64_t v91 = v179;
        unsigned int v121 = v174;
        uint64_t v136 = v175;
LABEL_134:
        *(void *)&long long v201 = v28;
        BYTE8(v201) = v225;
        BYTE9(v201) = v224;
        BYTE10(v201) = v223;
        *(_DWORD *)((char *)&v201 + 11) = v191;
        HIBYTE(v201) = BYTE4(v191);
        *(void *)&long long v202 = v173;
        *((void *)&v202 + 1) = v186;
        *(void *)&long long v203 = v188;
        *((void *)&v203 + 1) = v136;
        LODWORD(v204) = v121;
        BYTE4(v204) = v222;
        *(_WORD *)((char *)&v204 + 5) = v220;
        BYTE7(v204) = v221;
        *((void *)&v204 + 1) = v183;
        *(void *)&long long v205 = v177;
        *((void *)&v205 + 1) = v135;
        *(void *)&long long v206 = v91;
        *((void *)&v206 + 1) = v128;
        LOBYTE(v207) = v219;
        *(_DWORD *)((char *)&v207 + 1) = v192;
        DWORD1(v207) = *(_DWORD *)((char *)&v192 + 3);
        *((void *)&v207 + 1) = v34;
        *(double *)&long long v208 = v35;
        *((void *)&v208 + 1) = v36;
        uint64_t v209 = v37;
        long long v156 = (Swift::String *)&v201;
        return sub_10004AE2C((uint64_t)v156, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
      }
      sub_10004B180(v168, (uint64_t)v166, (uint64_t)v94, v164, v171, v162);
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      uint64_t v91 = v179;
      unsigned int v121 = v174;
    }
    else
    {
      sub_10004B180(v168, (uint64_t)v166, (uint64_t)v94, v164, v171, v162);
      sub_10004AE2C((uint64_t)&v210, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
    }
    uint64_t v136 = v175;
    uint64_t v135 = v181;
    goto LABEL_134;
  }
  uint64_t v137 = v94;
  uint64_t v138 = v178;
  sub_100012040(v60, v177, v181, v91, v178, v169);
  uint64_t v139 = OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_shouldDrawAutomatically;
  v190 = *(unsigned char **)(v251 + 48);
  if ((v190[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_shouldDrawAutomatically] & 1) == 0)
  {
    if (qword_100097860 != -1) {
      swift_once();
    }
    uint64_t v140 = sub_10005DCD8();
    sub_100008DB0(v140, (uint64_t)qword_1000992D0);
    unsigned int v141 = sub_10005DCB8();
    os_log_type_t v142 = sub_10005E068();
    if (os_log_type_enabled(v141, v142))
    {
      uint64_t v143 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v143 = 0;
      _os_log_impl((void *)&_mh_execute_header, v141, v142, "▶️ reenabling automatic drawing", v143, 2u);
      uint64_t v138 = v178;
      swift_slowDealloc();
    }

    uint64_t v91 = v179;
  }
  v190[v139] = 1;
  char v144 = v219;
  if (v97)
  {
    uint64_t v145 = v60;
    uint64_t v146 = v177;
    uint64_t v147 = v173;
    uint64_t v148 = v181;
  }
  else
  {
    sub_100014984(v168, (uint64_t)v166, v137, v164, v171, 1);
    sub_100012040(v60, v177, v181, v91, v138, v144);
    char v144 = 1;
    uint64_t v145 = v168;
    uint64_t v146 = (uint64_t)v166;
    uint64_t v148 = (uint64_t)v137;
    uint64_t v91 = v164;
    uint64_t v138 = v171;
    uint64_t v147 = v173;
  }
  uint64_t v182 = v148;
  uint64_t v184 = v145;
  uint64_t v180 = v91;
  char v149 = v222;
  *(void *)&long long v192 = v28;
  BYTE8(v192) = v165;
  BYTE9(v192) = v159;
  BYTE10(v192) = v160;
  *(void *)&long long v193 = v147;
  *((void *)&v193 + 1) = v186;
  *(void *)&long long v194 = v188;
  *((void *)&v194 + 1) = v175;
  LODWORD(v195) = v174;
  BYTE4(v195) = v222;
  *((void *)&v195 + 1) = v145;
  *(void *)&long long v196 = v146;
  *((void *)&v196 + 1) = v148;
  *(void *)&long long v197 = v91;
  *((void *)&v197 + 1) = v138;
  LOBYTE(v198) = v144;
  *((void *)&v198 + 1) = v34;
  *(double *)&long long v199 = v35;
  *((void *)&v199 + 1) = v36;
  uint64_t v200 = v37;
  long long v205 = v196;
  long long v206 = v197;
  long long v203 = v194;
  long long v204 = v195;
  long long v201 = v192;
  long long v202 = v193;
  uint64_t v209 = v37;
  long long v207 = v198;
  long long v208 = v199;
  nullsub_1(*(double *)&v198, v35);
  uint64_t v150 = v251 + 136;
  sub_100014CC0(v251 + 136, (uint64_t)&v210, (uint64_t *)&unk_100099B10);
  sub_100014CC0((uint64_t)&v201, v150, (uint64_t *)&unk_100099B10);
  sub_10004AE2C((uint64_t)&v192, (void (*)(void, void, void, void, void, void))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100014984);
  sub_10004B2C0((uint64_t)&v210, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))sub_100012040);
  [v190 setNeedsDisplay];
  sub_10004B180(v168, (uint64_t)v166, (uint64_t)v137, v164, v171, v162);
  v242._uint64_t countAndFlagsBits = v28;
  LOBYTE(v242._object) = v225;
  BYTE1(v242._object) = v224;
  BYTE2(v242._object) = v223;
  *(void *)&long long v243 = v147;
  *((void *)&v243 + 1) = v186;
  *(void *)&long long v244 = v188;
  *((void *)&v244 + 1) = v175;
  LODWORD(v245) = v174;
  BYTE4(v245) = v149;
  *((void *)&v245 + 1) = v184;
  *(void *)&long long v246 = v146;
  *((void *)&v246 + 1) = v182;
  *(void *)&long long v247 = v180;
  *((void *)&v247 + 1) = v138;
  LOBYTE(v248) = v144;
  *((void *)&v248 + 1) = v34;
  *(double *)&long long v249 = v35;
  *((void *)&v249 + 1) = v36;
  uint64_t v250 = v37;
  return sub_10004AE2C((uint64_t)&v242, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
}

void sub_10003C44C(uint64_t a1, int a2, id a3)
{
  id v4 = *(void **)(v3 + 104);
  if (v4)
  {
    uint64_t v5 = v3;
    uint64_t v108 = *(void *)(v3 + 112);
    uint64_t v9 = qword_100097860;
    swift_unknownObjectRetain();
    if (v9 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_10005DCD8();
    uint64_t v11 = sub_100008DB0(v10, (uint64_t)qword_1000992D0);
    sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100014984);
    sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100014984);
    sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100014984);
    sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100014984);
    sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100014984);
    sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100014984);
    sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100014984);
    sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100014984);
    uint64_t v110 = v11;
    double v12 = sub_10005DCB8();
    os_log_type_t v13 = sub_10005E068();
    int v14 = v13;
    int v112 = a2;
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v15 = swift_slowAlloc();
      id v105 = (id)swift_slowAlloc();
      v114[0] = v105;
      *(_DWORD *)uint64_t v15 = 136447234;
      uint64_t v107 = v3;
      sub_100008F4C(&qword_100097D58);
      uint64_t v16 = swift_allocObject();
      long long v109 = xmmword_10005F1A0;
      *(_OWORD *)(v16 + 16) = xmmword_10005F1A0;
      int v17 = *(_DWORD *)a1;
      *(void *)(v16 + 56) = &type metadata for Float;
      *(void *)(v16 + 64) = &protocol witness table for Float;
      *(_DWORD *)(v16 + 32) = v17;
      uint64_t v18 = sub_10005DE78();
      id v106 = v4;
      *(void *)&v113[0] = sub_100044640(v18, v19, (uint64_t *)v114);
      sub_10005E138();
      swift_bridgeObjectRelease();
      sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
      sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
      *(_WORD *)(v15 + 12) = 2080;
      BOOL v20 = (*(unsigned char *)(a1 + 8) & 1) == 0;
      if (*(unsigned char *)(a1 + 8)) {
        uint64_t v21 = 5457241;
      }
      else {
        uint64_t v21 = 20302;
      }
      int v104 = v14;
      if (v20) {
        unint64_t v22 = 0xE200000000000000;
      }
      else {
        unint64_t v22 = 0xE300000000000000;
      }
      id v111 = a3;
      *(void *)&v113[0] = sub_100044640(v21, v22, (uint64_t *)v114);
      sub_10005E138();
      swift_bridgeObjectRelease();
      sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
      sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
      *(_WORD *)(v15 + 22) = 2082;
      uint64_t v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = v109;
      int v24 = *(_DWORD *)(a1 + 4);
      *(void *)(v23 + 56) = &type metadata for Float;
      uint64_t v103 = v12;
      *(void *)(v23 + 64) = &protocol witness table for Float;
      *(_DWORD *)(v23 + 32) = v24;
      uint64_t v25 = sub_10005DE78();
      sub_100044640(v25, v26, (uint64_t *)v114);
      sub_10005E138();
      swift_bridgeObjectRelease();
      sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
      sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
      *(_WORD *)(v15 + 32) = 2080;
      uint64_t v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = v109;
      float v28 = WallpaperState.rotationLandscapeAmount.getter();
      *(void *)(v27 + 56) = &type metadata for Float;
      *(void *)(v27 + 64) = &protocol witness table for Float;
      *(float *)(v27 + 32) = v28;
      a3 = v111;
      uint64_t v29 = sub_10005DE78();
      *(void *)&v113[0] = sub_100044640(v29, v30, (uint64_t *)v114);
      sub_10005E138();
      swift_bridgeObjectRelease();
      sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
      uint64_t v5 = v107;
      sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
      *(_WORD *)(v15 + 42) = 2082;
      if (v112) {
        uint64_t v31 = 5457241;
      }
      else {
        uint64_t v31 = 20302;
      }
      if (v112) {
        unint64_t v32 = 0xE300000000000000;
      }
      else {
        unint64_t v32 = 0xE200000000000000;
      }
      *(void *)&v113[0] = sub_100044640(v31, v32, (uint64_t *)v114);
      sub_10005E138();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v103, (os_log_type_t)v104, "rendering state [unlock %{public}s, dark %s, dim %{public}s, land %s], is snapshot %{public}s", (uint8_t *)v15, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if ((v112 & 1) == 0) {
        goto LABEL_30;
      }
    }
    else
    {
      sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
      sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
      sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
      sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
      sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
      sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
      sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
      sub_10004AE2C(a1, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);

      if ((a2 & 1) == 0) {
        goto LABEL_30;
      }
    }
    if (*(unsigned char *)(v5 + 297))
    {
      id v37 = *(id *)(v5 + 120);
      if (v37)
      {
        swift_unknownObjectRetain();
        uint64_t v38 = sub_10005DCB8();
        os_log_type_t v39 = sub_10005E068();
        if (os_log_type_enabled(v38, v39))
        {
          uint64_t v40 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v40 = 0;
          _os_log_impl((void *)&_mh_execute_header, v38, v39, "reusing existing snapshot texture", v40, 2u);
          swift_slowDealloc();
        }

        a3 = 0;
        goto LABEL_32;
      }
      uint64_t v51 = sub_10005DCB8();
      os_log_type_t v52 = sub_10005E068();
      if (os_log_type_enabled(v51, v52))
      {
        int v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "making new snapshot texture", v53, 2u);
        swift_slowDealloc();
      }

      id v54 = *(void **)(v5 + 48);
      id v55 = [v54 layer];
      self;
      [(id)swift_dynamicCastObjCClassUnconditional() drawableSize];
      double v57 = v56;

      if ((~*(void *)&v57 & 0x7FF0000000000000) != 0)
      {
        if (v57 > -9.22337204e18)
        {
          if (v57 < 9.22337204e18)
          {
            id v58 = [v54 layer];
            self;
            [(id)swift_dynamicCastObjCClassUnconditional() drawableSize];
            double v60 = v59;

            if ((~*(void *)&v60 & 0x7FF0000000000000) != 0)
            {
              if (v60 > -9.22337204e18)
              {
                if (v60 < 9.22337204e18)
                {
                  char v61 = *(void **)(v5 + 32);
                  uint64_t v62 = (*(uint64_t (**)(void))(*(void *)(v5 + 96) + 8))();
                  uint64_t v63 = v116;
                  char v64 = sub_10004A790((uint64_t)v57, (uint64_t)v60, v61, v62);
                  uint64_t v116 = v63;
                  if (v63) {
                    goto LABEL_106;
                  }
                  id v37 = v64;
                  *(void *)(v5 + 120) = v64;
                  swift_unknownObjectRetain();
                  swift_unknownObjectRelease();
                  a3 = 0;
LABEL_32:
                  id v41 = objc_msgSend(*(id *)(v5 + 40), "commandBuffer", v103);
                  if (!v41)
                  {
                    sub_10004B224();
                    uint64_t v49 = swift_allocError();
                    unsigned char *v50 = 1;
                    uint64_t v116 = v49;
                    swift_willThrow();
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    goto LABEL_106;
                  }
                  uint64_t v42 = *(void *)(v5 + 80);
                  *(void *)&long long v109 = v37;
                  id v106 = v41;
                  id v111 = a3;
                  if (v42)
                  {
                    if (*(unsigned char *)(v42 + 48))
                    {
                      if (*(unsigned char *)(v42 + 48) != 1)
                      {
                        uint64_t v107 = v5;
                        swift_retain();
                        id v67 = sub_10005DCB8();
                        os_log_type_t v68 = sub_10005E078();
                        if (os_log_type_enabled(v67, v68))
                        {
                          char v69 = (uint8_t *)swift_slowAlloc();
                          *(_WORD *)char v69 = 0;
                          uint64_t v70 = "Style is mainRenderTarget but we think we should also be masking";
LABEL_70:
                          _os_log_impl((void *)&_mh_execute_header, v67, v68, v70, v69, 2u);
                          swift_slowDealloc();
                        }
LABEL_71:
                        swift_release();

                        id v105 = 0;
                        uint64_t v45 = 0;
                        uint64_t v66 = 255;
                        uint64_t v5 = v107;
                        goto LABEL_72;
                      }
                      if (v112)
                      {
                        if (*(unsigned char *)(v5 + 297) == 1 && (char v43 = *(void **)(v5 + 64)) != 0)
                        {
                          swift_retain();
                          id v44 = [v43 mask];
                          if (v44)
                          {
                            uint64_t v45 = v44;
                            swift_release();
LABEL_66:
                            id v105 = 0;
                            uint64_t v66 = 1;
                            goto LABEL_72;
                          }
                        }
                        else
                        {
                          swift_retain();
                        }
                        uint64_t v107 = v5;
                        id v67 = sub_10005DCB8();
                        os_log_type_t v68 = sub_10005E078();
                        if (os_log_type_enabled(v67, v68))
                        {
                          char v69 = (uint8_t *)swift_slowAlloc();
                          *(_WORD *)char v69 = 0;
                          uint64_t v70 = "🚨 couldn’t find mask layer when creating snapshot! time occlusion may be wrong";
                          goto LABEL_70;
                        }
                        goto LABEL_71;
                      }
                      uint64_t v45 = *(void **)(v42 + 24);
LABEL_65:
                      id v71 = v45;
                      goto LABEL_66;
                    }
                    uint64_t v45 = (void *)sub_100044098();
                    id v105 = v65;
                    uint64_t v66 = 0;
                  }
                  else
                  {
                    if ((*(unsigned __int8 (**)(void))(*(void *)(v5 + 96) + 24))() == 2)
                    {
                      uint64_t v45 = *(void **)(v5 + 72);
                      if (v45) {
                        goto LABEL_65;
                      }
                      id v105 = 0;
                    }
                    else
                    {
                      id v105 = 0;
                      uint64_t v45 = 0;
                    }
                    uint64_t v66 = 255;
                  }
LABEL_72:
                  uint64_t ObjectType = swift_getObjectType();
                  (*(void (**)(void, uint64_t, uint64_t))(v108 + 112))(v112 & 1, ObjectType, v108);
                  uint64_t v73 = v116;
                  (*(void (**)(uint64_t, void, void *, uint64_t, id, uint64_t, uint64_t))(v108 + 184))(a1, v109, v45, v66, v106, ObjectType, v108);
                  uint64_t v116 = v73;
                  if (v73)
                  {
                    [v106 commit];
                    sub_10004B224();
                    uint64_t v74 = swift_allocError();
                    *char v75 = 1;
                    swift_willThrow();
                    swift_unknownObjectRelease();

                    sub_100014B70(v45, v66);
                    swift_errorRelease();
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    uint64_t v116 = v74;
                    return;
                  }
                  LODWORD(v108) = v66;
                  [v106 commit];
                  if ((v112 & 1) != 0 && *(unsigned char *)(v5 + 297) == 1)
                  {
                    [v106 waitUntilCompleted];
                    unsigned int v76 = *(void **)(v5 + 56);
                    id v77 = v105;
                    if (v76)
                    {
                      uint64_t v78 = *(void **)(v5 + 120);
                      if (v78 && (id v79 = [v78 iosurface]) != 0)
                      {
                        v114[0] = v79;
                        type metadata accessor for IOSurfaceRef(0);
                        uint64_t v80 = sub_10005E438();
                      }
                      else
                      {
                        uint64_t v80 = 0;
                      }
                      [v76 setContents:v80];
                      swift_unknownObjectRelease();
                      [v76 setHidden:0];
                    }
                    p_name = &stru_100095FF8.name;
                    [*(id *)(v5 + 48) setHidden:1];
                    uint64_t v90 = *(void **)(v5 + 64);
                    if (v90)
                    {
                      if (v76)
                      {
                        id v91 = v90;
                        if ([v76 contents])
                        {
                          sub_10005E178();
                          swift_unknownObjectRelease();
                        }
                        else
                        {
                          memset(v113, 0, sizeof(v113));
                        }
                        sub_100014CC0((uint64_t)v113, (uint64_t)v114, &qword_100097D70);
                        uint64_t v93 = v115;
                        if (v115)
                        {
                          id v94 = sub_1000183C0(v114, v115);
                          uint64_t v95 = *(void *)(v93 - 8);
                          __n128 v96 = __chkstk_darwin(v94);
                          uint64_t v98 = (char *)&v103 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
                          (*(void (**)(char *, __n128))(v95 + 16))(v98, v96);
                          uint64_t v99 = sub_10005E438();
                          os_log_type_t v100 = v98;
                          id v77 = v105;
                          (*(void (**)(char *, uint64_t))(v95 + 8))(v100, v93);
                          p_name = (char **)(&stru_100095FF8 + 8);
                          sub_100020C8C((uint64_t)v114);
LABEL_105:
                          [v90 setContents:v99];
                          swift_unknownObjectRelease();
                          objc_msgSend(v90, p_name[349], 0);
                          id v101 = [v90 mask];
                          id v102 = v77;
                          [v101 setContents:v102];

                          swift_unknownObjectRelease();
                          sub_100014B70(v45, v108);
                          swift_unknownObjectRelease();
                          swift_unknownObjectRelease();

                          goto LABEL_106;
                        }
                      }
                      else
                      {
                        id v92 = v90;
                      }
                      uint64_t v99 = 0;
                      goto LABEL_105;
                    }
                    goto LABEL_99;
                  }
                  if (v111) {
                    [v111 present];
                  }
                  id v77 = v105;
                  if (v105)
                  {
                    uint64_t v81 = *(void *)(v5 + 80);
                    if (v81) {
                      [*(id *)(v81 + 24) setContents:v105];
                    }
                  }
                  if (*(void *)(v5 + 120))
                  {
                    unsigned int v82 = sub_10005DCB8();
                    os_log_type_t v83 = sub_10005E068();
                    if (os_log_type_enabled(v82, v83))
                    {
                      uint64_t v84 = (uint8_t *)swift_slowAlloc();
                      *(_WORD *)uint64_t v84 = 0;
                      _os_log_impl((void *)&_mh_execute_header, v82, v83, "discarding snapshot resources", v84, 2u);
                      swift_slowDealloc();
                    }
                  }
                  *(void *)(v5 + 120) = 0;
                  swift_unknownObjectRelease();
                  id v85 = *(void **)(v5 + 56);
                  if (v85)
                  {
                    [v85 setContents:0];
                    [v85 setHidden:1];
                  }
                  [*(id *)(v5 + 48) setHidden:0];
                  uint64_t v86 = *(void **)(v5 + 64);
                  if (!v86)
                  {
LABEL_99:
                    swift_unknownObjectRelease();

                    sub_100014B70(v45, v108);
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    goto LABEL_106;
                  }
                  id v87 = v86;
                  [v87 setContents:0];
                  id v88 = [v87 mask];
                  [v88 setContents:0];

                  [v87 setHidden:1];
                  swift_unknownObjectRelease();

                  sub_100014B70(v45, v108);
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();

LABEL_106:
                  swift_unknownObjectRelease();
                  return;
                }
                goto LABEL_112;
              }
LABEL_111:
              __break(1u);
LABEL_112:
              __break(1u);
              return;
            }
LABEL_110:
            __break(1u);
            goto LABEL_111;
          }
LABEL_109:
          __break(1u);
          goto LABEL_110;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_109;
    }
LABEL_30:
    if (!a3)
    {
      uint64_t v46 = sub_10005DCB8();
      os_log_type_t v47 = sub_10005E078();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "no drawable available", v48, 2u);
        swift_slowDealloc();
      }

      goto LABEL_106;
    }
    id v37 = [(id)swift_unknownObjectRetain() texture];
    goto LABEL_32;
  }
  if (qword_100097860 != -1) {
    swift_once();
  }
  uint64_t v33 = sub_10005DCD8();
  sub_100008DB0(v33, (uint64_t)qword_1000992D0);
  uint64_t v34 = sub_10005DCB8();
  os_log_type_t v35 = sub_10005E078();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "got a rendering environment update before our renderer is set up", v36, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10003D628(uint64_t a1, unint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 304);
  swift_bridgeObjectRetain();
  char v6 = sub_10003D804(a1, a2, v5);
  swift_bridgeObjectRelease();
  if (v6)
  {
    if (qword_100097860 != -1) {
      swift_once();
    }
    uint64_t v7 = sub_10005DCD8();
    sub_100008DB0(v7, (uint64_t)qword_1000992D0);
    uint64_t v8 = sub_10005DCB8();
    os_log_type_t v9 = sub_10005E088();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Request for continuous rendering with a reason that already exists. Don't create a new one. The caller needs to work this out.", v10, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  else
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_100048B1C(&v15, a1, a2);
    swift_endAccess();
    swift_bridgeObjectRelease();
    *(unsigned char *)(*(void *)(v2 + 48)
             + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_wantsIndefiniteContinuousRendering) = 1;
    sub_100036B40();
    type metadata accessor for ContinuousRenderingToken();
    uint64_t v12 = swift_allocObject();
    swift_bridgeObjectRetain();
    uint64_t v13 = swift_retain();
    uint64_t v11 = sub_10004AA28(v13, a1, a2, v12);
    swift_release();
  }
  return v11;
}

uint64_t sub_10003D804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_10005E4F8();
    sub_10005DEB8();
    Swift::Int v6 = sub_10005E528();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_10005E448() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_10005E448() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

void sub_10003D93C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = v2 + 304;
  swift_beginAccess();
  uint64_t v7 = *(void *)(*(void *)(v3 + 304) + 16);
  swift_beginAccess();
  sub_1000495AC(a1, a2);
  swift_endAccess();
  swift_bridgeObjectRelease();
  if (v7)
  {
    if (!*(void *)(*(void *)v6 + 16))
    {
      *(unsigned char *)(*(void *)(v3 + 48)
               + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_wantsIndefiniteContinuousRendering) = 0;
      sub_100036B40();
    }
  }
}

id *sub_10003D9F8()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_100014CC0((uint64_t)(v0 + 17), (uint64_t)v2, (uint64_t *)&unk_100099B10);
  sub_10004B2C0((uint64_t)v2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))sub_100012040);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10003DABC()
{
  sub_10003D9F8();

  return _swift_deallocClassInstance(v0, 313, 7);
}

uint64_t sub_10003DAF4(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = *a2;
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 | v3) == 0;
  }
  else {
    return sub_1000442B8((void *)v2, (void *)v3);
  }
}

void sub_10003DB20(void *a1, void *a2)
{
  sub_100014CC0((uint64_t)(v2 + 5), (uint64_t)&v9, &qword_100099AF8);
  sub_100014CC0((uint64_t)&v9, (uint64_t)&v11, &qword_100099AF8);
  if (v11 != 2)
  {
    [a1 addSubview:v2[1]];
    id v7 = [a1 layer];
    [v7 addSublayer:*v2];

    sub_100014CC0((uint64_t)&v9, (uint64_t)&v10, &qword_100099AF8);
    if (v10 == 3) {
      return;
    }
    id v6 = [a2 layer];
    sub_100014CC0((uint64_t)(v2 + 4), (uint64_t)v8, &qword_100099AD8);
    sub_100014CC0((uint64_t)v8, (uint64_t)&v12, &qword_100099AD8);
    if (v12)
    {
      [v6 addSublayer:v12];
      goto LABEL_7;
    }
LABEL_10:
    __break(1u);
    return;
  }
  id v5 = [a1 layer];
  sub_100014CC0((uint64_t)(v2 + 3), (uint64_t)v8, &qword_100099AD8);
  sub_100014CC0((uint64_t)v8, (uint64_t)&v12, &qword_100099AD8);
  if (!v12)
  {
    __break(1u);
    goto LABEL_10;
  }
  objc_msgSend(v5, "addSublayer:");

  [a2 addSubview:v2[1]];
  id v6 = [a2 layer];
  [v6 addSublayer:*v2];
LABEL_7:
}

void sub_10003DCEC(double a1, double a2)
{
  sub_10004B1C8(v2, v30);
  sub_10004B1C8(v2, &v31);
  uint64_t v5 = v31;
  if ((v35 & 1) == 0)
  {
    unint64_t v22 = (void *)*((void *)&v31 + 1);
    uint64_t v23 = v33;
    int v24 = v34;
    uint64_t v36 = v32;
    id v25 = (id)v31;
    id v26 = v22;
    sub_10004B278((uint64_t)&v36);
    id v27 = v23;
    id v28 = v24;
    objc_msgSend(v26, "setFrame:", 0.0, 0.0, a1, a2);
    objc_msgSend(v25, "setBounds:", 0.0, 0.0, a1, a2);
    objc_msgSend(v28, "setBounds:", 0.0, 0.0, a1, a2);
    objc_msgSend(v27, "setBounds:", 0.0, 0.0, a1, a2);

    sub_100020F48((uint64_t)&v36);
    return;
  }
  uint64_t v29 = (uint64_t)v2;
  uint64_t v6 = v31 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(v31 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(v31 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v11 << 6);
      goto LABEL_6;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v19 >= v10) {
      goto LABEL_27;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v10) {
        goto LABEL_27;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v11);
      if (!v20)
      {
        int64_t v11 = v19 + 2;
        if (v19 + 2 >= v10) {
          goto LABEL_27;
        }
        unint64_t v20 = *(void *)(v6 + 8 * v11);
        if (!v20)
        {
          int64_t v11 = v19 + 3;
          if (v19 + 3 >= v10) {
            goto LABEL_27;
          }
          unint64_t v20 = *(void *)(v6 + 8 * v11);
          if (!v20)
          {
            int64_t v11 = v19 + 4;
            if (v19 + 4 >= v10) {
              goto LABEL_27;
            }
            unint64_t v20 = *(void *)(v6 + 8 * v11);
            if (!v20) {
              break;
            }
          }
        }
      }
    }
LABEL_25:
    unint64_t v9 = (v20 - 1) & v20;
    unint64_t v13 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_6:
    uint64_t v14 = *(void *)(v5 + 56) + 48 * v13;
    unint64_t v15 = *(void **)v14;
    uint64_t v16 = *(void **)(v14 + 8);
    BOOL v17 = *(void **)(v14 + 24);
    id v18 = *(id *)(v14 + 32);
    objc_msgSend(v16, "setFrame:", 0.0, 0.0, a1, a2, v29);
    objc_msgSend(v15, "setBounds:", 0.0, 0.0, a1, a2);
    objc_msgSend(v18, "setBounds:", 0.0, 0.0, a1, a2);
    objc_msgSend(v17, "setBounds:", 0.0, 0.0, a1, a2);
  }
  int64_t v21 = v19 + 5;
  if (v21 >= v10)
  {
LABEL_27:
    swift_release();
    sub_10004B1E0(v29, (void (*)(void, void, void, void, void, void, void))sub_100044F08);
    return;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v11 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v10) {
      goto LABEL_27;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_29:
  __break(1u);
}

uint64_t sub_10003E018(uint64_t a1)
{
  return sub_10003E044(a1, qword_1000992E8, &qword_1000978B8, (uint64_t)qword_10009FAD8);
}

uint64_t sub_10003E044(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = sub_10005DCD8();
  sub_100008EE8(v7, a2);
  uint64_t v8 = sub_100008DB0(v7, (uint64_t)a2);
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100008DB0(v7, a4);
  int64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);

  return v10(v8, v9, v7);
}

uint64_t sub_10003E10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t), void *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10 = v9;
  unint64_t v15 = a4;
  uint64_t v16 = a3;
  *(void *)(v10 + 80) = 0;
  *(void *)(v10 + 88) = 0;
  *(_OWORD *)(v10 + 304) = 0u;
  *(_OWORD *)(v10 + 320) = 0u;
  *(unsigned char *)(v10 + 340) = -1;
  *(_DWORD *)(v10 + 336) = 0;
  *(_OWORD *)(v10 + 344) = 0u;
  *(_OWORD *)(v10 + 360) = 0u;
  *(_OWORD *)(v10 + 376) = 0u;
  *(unsigned char *)(v10 + 392) = 1;
  *(void *)(v10 + 400) = 0x3FF0000000000000;
  *(void *)(v10 + 416) = 0;
  *(unsigned char *)(v10 + 424) = 1;
  *(void *)(v10 + 432) = &_swiftEmptySetSingleton;
  *(void *)(v10 + 24) = a1;
  *(void *)(v10 + 32) = a2;
  *(void *)(v10 + 64) = a3;
  *(void *)(v10 + 72) = a4;
  *(void *)(v10 + 144) = 0;
  *(void *)(v10 + 152) = a6;
  *(void *)(v10 + 160) = a7;
  *(void *)(v10 + 16) = a8;
  *(unsigned char *)(v10 + 408) = a9;
  uint64_t v17 = qword_100097870;
  swift_bridgeObjectRetain();
  uint64_t v70 = a8;
  swift_bridgeObjectRetain();
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v18 = qword_100099300;
  uint64_t v19 = *(void *)(qword_100099300
                  + OBJC_IVAR____TtC22MercuryPosterExtensionP33_F62BFB1CA87BCDB560F9BD6D41BC5A8D9Resources_device);
  *(void *)(v10 + 40) = v19;
  *(void *)(v10 + 48) = *(void *)(v18
                                    + OBJC_IVAR____TtC22MercuryPosterExtensionP33_F62BFB1CA87BCDB560F9BD6D41BC5A8D9Resources_commandQueue);
  unint64_t v20 = v15[1];
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  char v69 = v20;
  uint64_t v21 = v20(v16, (uint64_t)v15);
  unint64_t v22 = (CGColorSpace *)v15[2](v16, (uint64_t)v15);
  id v23 = objc_allocWithZone((Class)type metadata accessor for WallpaperMetalView(0));
  sub_100035594(v19, v21, v22);
  *(void *)(v10 + 56) = v24;
  *(unsigned char *)(v24 + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_shouldDrawAutomatically) = 0;
  id v25 = [(id)swift_unknownObjectRetain() traitCollection];
  if (v25)
  {
    id v26 = v25;
    id v27 = [v25 userInterfaceStyle];

    BOOL v28 = v27 == (id)2;
  }
  else
  {
    BOOL v28 = 0;
  }
  id v29 = [a5 deviceOrientation];
  [a5 floatingObscurableBounds];
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  swift_unknownObjectRelease();
  char v73 = 0;
  char v72 = 0;
  *(void *)(v10 + 168) = 0;
  *(unsigned char *)(v10 + 176) = v28;
  *(_WORD *)(v10 + 177) = 0;
  *(void *)(v10 + 184) = a6;
  *(void *)(v10 + 192) = a7;
  *(void *)(v10 + 200) = 0;
  *(void *)(v10 + 208) = 0;
  *(_DWORD *)(v10 + 216) = 0;
  *(unsigned char *)(v10 + 220) = 0;
  *(void *)(v10 + 224) = v29;
  *(_OWORD *)(v10 + 232) = 0u;
  *(_OWORD *)(v10 + 248) = 0u;
  *(unsigned char *)(v10 + 264) = 0;
  *(void *)(v10 + 272) = v31;
  *(void *)(v10 + 280) = v33;
  *(void *)(v10 + 288) = v35;
  *(void *)(v10 + 296) = v37;
  char v38 = v15[3](v16, (uint64_t)v15);
  char v39 = v38;
  if (!v70)
  {
    sub_100049F54(v38, (uint64_t)&v74);
    uint64_t v53 = v75;
    unsigned __int8 v54 = v77;
    *(_OWORD *)(v10 + 96) = v74;
    *(void *)(v10 + 112) = v53;
    *(_OWORD *)(v10 + 120) = v76;
    *(_WORD *)(v10 + 136) = v54;
LABEL_19:
    double v57 = *(char **)(v10 + 56);
    uint64_t v58 = swift_allocObject();
    swift_weakInit();
    double v59 = (uint64_t (**)(void *))&v57[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_drawingHandler];
    uint64_t v60 = *(void *)&v57[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_drawingHandler];
    *double v59 = sub_10004B5AC;
    v59[1] = (uint64_t (*)(void *))v58;
    char v61 = v57;
    swift_retain();
    sub_100012030(v60);

    swift_release();
    swift_unknownObjectRelease();
    return v10;
  }
  int64_t v40 = *(void *)(v70 + 16);
  id v41 = _swiftEmptyArrayStorage;
  if (v40)
  {
    uint64_t v65 = v16;
    uint64_t v66 = v15;
    uint64_t v67 = v10;
    v71[0] = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    char v68 = v39;
    sub_10004FC7C(0, v40, 0);
    id v41 = _swiftEmptyArrayStorage;
    uint64_t v42 = (uint64_t *)(v70 + 40);
    do
    {
      uint64_t v43 = *(v42 - 1);
      uint64_t v44 = *v42;
      swift_bridgeObjectRetain();
      sub_100049F54(v39, (uint64_t)&v74);
      long long v45 = v74;
      uint64_t v46 = v75;
      long long v47 = v76;
      unsigned __int8 v48 = v77;
      v71[0] = v41;
      unint64_t v50 = v41[2];
      unint64_t v49 = v41[3];
      if (v50 >= v49 >> 1)
      {
        long long v63 = v76;
        long long v64 = v74;
        sub_10004FC7C(v49 > 1, v50 + 1, 1);
        long long v47 = v63;
        long long v45 = v64;
        char v39 = v68;
        id v41 = (void *)v71[0];
      }
      v42 += 2;
      id v41[2] = v50 + 1;
      uint64_t v51 = &v41[8 * v50];
      v51[4] = v43;
      v51[5] = v44;
      *((_OWORD *)v51 + 3) = v45;
      v51[8] = v46;
      *(_OWORD *)(v51 + 9) = v47;
      *((unsigned char *)v51 + 88) = v48;
      --v40;
    }
    while (v40);
    swift_bridgeObjectRelease();
    uint64_t v10 = v67;
    uint64_t v16 = v65;
    unint64_t v15 = v66;
  }
  if (v41[2])
  {
    sub_100008F4C(&qword_100099AC8);
    os_log_type_t v52 = (void *)sub_10005E368();
  }
  else
  {
    os_log_type_t v52 = &_swiftEmptyDictionarySingleton;
  }
  v71[0] = v52;
  uint64_t v55 = swift_bridgeObjectRetain();
  sub_1000487B0(v55, 1, v71);
  swift_bridgeObjectRelease();
  *(void *)(v10 + 96) = v71[0];
  *(_OWORD *)(v10 + 104) = 0u;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_WORD *)(v10 + 136) = 256;
  swift_bridgeObjectRelease();
  uint64_t v56 = v69(v16, (uint64_t)v15);
  if ((unint64_t)(v56 - 70) <= 0x2D && ((1 << (v56 - 70)) & 0x200000000C03) != 0) {
    goto LABEL_19;
  }
  v71[0] = 0;
  v71[1] = 0xE000000000000000;
  sub_10005E1F8(97);
  v78._uint64_t countAndFlagsBits = 0x6F66206C65786970;
  v78._object = (void *)0xED00002074616D72;
  sub_10005DEE8(v78);
  v69(v16, (uint64_t)v15);
  type metadata accessor for MTLPixelFormat(0);
  sub_10005E2A8();
  v79._object = (void *)0x80000001000657B0;
  v79._uint64_t countAndFlagsBits = 0x1000000000000052;
  sub_10005DEE8(v79);
  sub_10005E308();
  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_10003E734(void *a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000404E0(a1);
    return swift_release();
  }
  return result;
}

void sub_10003E794(void *a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  uint64_t v10 = a1;
  [a1 bounds];
  *(void *)(v4 + 344) = v11;
  *(void *)(v4 + 352) = v12;
  *(void *)(v4 + 360) = v13;
  *(void *)(v4 + 368) = v14;
  if (*(unsigned char *)(v4 + 392))
  {
    id v15 = [self mainScreen];
    [v15 nativeScale];
    double v17 = v16;

    double v18 = ceil(v17 * CGRectGetWidth(*(CGRect *)(v4 + 344)));
    double v19 = ceil(v17 * CGRectGetHeight(*(CGRect *)(v4 + 344)));
    *(double *)(v4 + 376) = v18;
    *(double *)(v4 + 384) = v19;
    *(unsigned char *)(v4 + 392) = 0;
  }
  else
  {
    double v18 = *(double *)(v4 + 376);
    double v19 = *(double *)(v4 + 384);
  }
  id v92 = v10;
  id v93 = v5;
  uint64_t v89 = (unsigned char *)(v4 + 264);
  if (!*(void *)(v4 + 80))
  {
    uint64_t v26 = *(void *)(v4 + 72);
    uint64_t v87 = *(void *)(v4 + 64);
    id v88 = (id)a3;
    if ((*(uint64_t (**)(void))(v26 + 32))())
    {
      id v27 = [*(id *)(v4 + 48) commandBuffer];
      if (!v27)
      {
        sub_10004B224();
        swift_allocError();
        *Swift::String v79 = 0;
        swift_willThrow();
        return;
      }
      BOOL v28 = v27;
      NSString v29 = sub_10005DE38();
      [v28 setLabel:v29];
    }
    else
    {
      BOOL v28 = 0;
    }
    if (v18 <= -9.22337204e18) {
      goto LABEL_66;
    }
    if (v18 >= 9.22337204e18)
    {
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if ((~*(void *)&v19 & 0x7FF0000000000000) == 0
      || (*(void *)&v18 & 0x7FF0000000000000) == 0x7FF0000000000000)
    {
      goto LABEL_68;
    }
    if (v19 <= -9.22337204e18)
    {
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
    if (v19 >= 9.22337204e18)
    {
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    id v85 = a4;
    uint64_t v58 = *(void *)(v4 + 32);
    uint64_t v57 = *(void *)(v4 + 40);
    uint64_t v59 = *(void *)(v4 + 24);
    uint64_t v60 = *(uint64_t (**)(void, void, void, void, void, void, void, void))(v26 + 176);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v61 = v58;
    uint64_t v62 = v87;
    uint64_t v63 = v60(v57, v59, v61, (uint64_t)v18, (uint64_t)v19, v28, v87, v26);
    if (v93)
    {
      swift_unknownObjectRelease();
      return;
    }
    *(void *)(v7 + 80) = v63;
    *(void *)(v7 + 88) = v26;
    swift_unknownObjectRelease();
    if (*(void *)(v7 + 80))
    {
      uint64_t v68 = *(void *)(v7 + 88);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v70 = swift_allocObject();
      swift_weakInit();
      id v71 = *(void (**)(void, void, void, void))(v68 + 160);
      swift_unknownObjectRetain();
      swift_retain();
      uint64_t v72 = ObjectType;
      uint64_t v62 = v87;
      v71(sub_10004B198, v70, v72, v68);
      swift_release();
      swift_unknownObjectRelease();
    }
    char v73 = *(void **)(v7 + 56);
    id v74 = [v73 layer];
    self;
    objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(), "setDrawableSize:", v18, v19);

    objc_msgSend(v73, "setBounds:", *(double *)(v7 + 344), *(double *)(v7 + 352), *(double *)(v7 + 360), *(double *)(v7 + 368));
    if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(v26 + 24))(v62, v26) == 2) {
      [v73 setOpaque:0];
    }
    sub_10004B1C8((long long *)(v7 + 96), v106);
    double v75 = *(double *)(v7 + 360);
    double v76 = *(double *)(v7 + 368);
    sub_10004B1E0((uint64_t)v106, (void (*)(void, void, void, void, void, void, void))sub_100044E5C);
    sub_10003DCEC(v75, v76);
    sub_10004B1E0((uint64_t)v106, (void (*)(void, void, void, void, void, void, void))sub_100044F08);
    sub_100041064();
    swift_unknownObjectRelease();
    a4 = v85;
    a3 = (unint64_t)v88;
    uint64_t v10 = v92;
  }
  uint64_t v21 = *(void **)(v7 + 96);
  unint64_t v20 = *(void **)(v7 + 104);
  uint64_t v23 = *(void *)(v7 + 112);
  unint64_t v22 = *(void **)(v7 + 120);
  uint64_t v24 = *(void **)(v7 + 128);
  uint64_t v25 = *(unsigned __int8 *)(v7 + 136);
  if ((*(unsigned char *)(v7 + 137) & 1) == 0)
  {
    uint64_t v86 = *(void **)(v7 + 128);
    id v84 = v24;
    id v81 = v21;
    id v83 = v20;
    swift_bridgeObjectRetain();
    id v82 = v22;
    char v80 = v25;
LABEL_12:
    id v30 = [v10 layer];
    sub_10005E1F8(23);
    swift_bridgeObjectRelease();
    v108._uint64_t countAndFlagsBits = a3;
    v108._object = a4;
    sub_10005DEE8(v108);
    uint64_t v31 = a3;
    NSString v32 = sub_10005DE38();
    swift_bridgeObjectRelease();
    [v30 setName:v32];

    id v33 = [a2 layer];
    sub_10005E1F8(21);
    swift_bridgeObjectRelease();
    v94[0] = 0xD000000000000013;
    v94[1] = 0x80000001000656F0;
    v109._uint64_t countAndFlagsBits = v31;
    v109._object = a4;
    sub_10005DEE8(v109);
    NSString v34 = sub_10005DE38();
    swift_bridgeObjectRelease();
    [v33 setName:v34];

    id v100 = v81;
    id v101 = v83;
    uint64_t v102 = v23;
    uint64_t v103 = v22;
    int v104 = v86;
    char v105 = v80;
    id v35 = v81;
    id v36 = v83;
    swift_bridgeObjectRetain();
    id v37 = v82;
    id v38 = v84;
    sub_10003DB20(v92, a2);
    id v92 = v35;

    swift_bridgeObjectRelease();
    uint64_t v6 = *(unsigned char **)(v7 + 56);
    [v36 addSubview:v6];
    if (*(void *)(v23 + 16))
    {
      if (*v89) {
        char v39 = (void *)(v7 + 232);
      }
      else {
        char v39 = (void *)(v7 + 224);
      }
      uint64_t v40 = sub_100012270(*v39);
      id v41 = v93;
      if (v42) {
        id v43 = *(id *)(*(void *)(v23 + 56) + 8 * v40);
      }
      else {
        id v43 = 0;
      }
    }
    else
    {
      id v43 = 0;
      id v41 = v93;
    }
    [v92 setContents:v43];

    unsigned __int8 v44 = (*(uint64_t (**)(void))(*(void *)(v7 + 72) + 24))();
    if ((v44 & 0xFE) == 2)
    {
      *(void *)(v7 + 144) = 0;
LABEL_54:
      swift_release();
      v6[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_shouldDrawAutomatically] = 1;
      if (*(void *)(v7 + 24) == *(void *)(v7 + 152) && *(void *)(v7 + 32) == *(void *)(v7 + 160)
        || (sub_10005E448() & 1) != 0)
      {
        [v6 setNeedsDisplay];
      }

      swift_bridgeObjectRelease();
      return;
    }
    if (v18 <= -9.22337204e18)
    {
      __break(1u);
    }
    else if (v18 < 9.22337204e18)
    {
      if ((~*(void *)&v19 & 0x7FF0000000000000) != 0
        && (*(void *)&v18 & 0x7FF0000000000000) != 0x7FF0000000000000)
      {
        if (v19 > -9.22337204e18)
        {
          if (v19 < 9.22337204e18)
          {
            unsigned __int8 v45 = v44;
            id v88 = v36;
            uint64_t v89 = v37;
            id v93 = v38;
            uint64_t v46 = (uint64_t)v18;
            uint64_t v47 = (uint64_t)v19;
            double v48 = *(double *)(v7 + 360);
            double v49 = *(double *)(v7 + 368);
            unint64_t v50 = *(void **)(v7 + 40);
            swift_unknownObjectRetain();
            id v51 = [v6 layer];
            type metadata accessor for FloatingLayerMaskManager();
            swift_allocObject();
            uint64_t v52 = sub_100043CE8(v46, v47, v50, v51, v45, v48, v49);
            if (!v41)
            {
              uint64_t v77 = v52;
              swift_retain();
              id v78 = [a2 layer];
              [v78 addSublayer:*(void *)(v77 + 16)];

              swift_release();
LABEL_53:
              id v36 = v88;
              id v38 = v93;
              id v37 = v89;
              *(void *)(v7 + 144) = v77;
              goto LABEL_54;
            }
            if (qword_100097868 == -1)
            {
LABEL_30:
              uint64_t v53 = sub_10005DCD8();
              sub_100008DB0(v53, (uint64_t)qword_1000992E8);
              swift_errorRetain();
              swift_errorRetain();
              unsigned __int8 v54 = sub_10005DCB8();
              os_log_type_t v55 = sub_10005E078();
              if (os_log_type_enabled(v54, v55))
              {
                uint64_t v56 = (uint8_t *)swift_slowAlloc();
                id v91 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v56 = 138543362;
                swift_errorRetain();
                v94[0] = _swift_stdlib_bridgeErrorToNSError();
                sub_10005E138();
                *id v91 = v94[0];
                swift_errorRelease();
                swift_errorRelease();
                _os_log_impl((void *)&_mh_execute_header, v54, v55, "couldn’t set up floating layer: %{public}@", v56, 0xCu);
                sub_100008F4C(&qword_100097D50);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                swift_errorRelease();
              }
              else
              {
                swift_errorRelease();
                swift_errorRelease();
                swift_errorRelease();
              }
              uint64_t v77 = 0;
              goto LABEL_53;
            }
LABEL_71:
            swift_once();
            goto LABEL_30;
          }
          goto LABEL_65;
        }
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    __break(1u);
    goto LABEL_63;
  }
  swift_bridgeObjectRetain();
  sub_100044E5C(v21, v20, v23, v22, v24, v25, 1);
  id v88 = (id)a3;
  sub_100038070(a3, (uint64_t)a4, (uint64_t)v21, (uint64_t)v95);
  sub_100044F08(v21, v20, v23, v22, v24, v25, 1);
  swift_bridgeObjectRelease();
  sub_100014CC0((uint64_t)v95, (uint64_t)v96, &qword_100099AD0);
  if (v96[0])
  {
    uint64_t v23 = v96[2];
    unint64_t v22 = v97;
    char v80 = v99;
    id v83 = (id)v96[1];
    id v84 = v98;
    uint64_t v86 = v98;
    id v81 = (id)v96[0];
    id v82 = v97;
    uint64_t v10 = v92;
    goto LABEL_12;
  }
  if (qword_100097868 != -1) {
    swift_once();
  }
  uint64_t v64 = sub_10005DCD8();
  sub_100008DB0(v64, (uint64_t)qword_1000992E8);
  swift_bridgeObjectRetain_n();
  uint64_t v65 = sub_10005DCB8();
  os_log_type_t v66 = sub_10005E078();
  if (os_log_type_enabled(v65, v66))
  {
    uint64_t v67 = (uint8_t *)swift_slowAlloc();
    v94[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v67 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v107 = sub_100044640(a3, (unint64_t)a4, v94);
    sub_10005E138();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v65, v66, "missing page contents for “%s”!", v67, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_10003F464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  swift_beginAccess();
  if (!swift_weakLoadStrong()) {
    return 0;
  }
  uint64_t v7 = a4(a1, a2);
  swift_release();
  return v7;
}

uint64_t sub_10003F4F0(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (unsigned char *)(v2 + 264);
  uint64_t v7 = *(void *)(v2 + 152);
  uint64_t v8 = *(void *)(v2 + 160);
  *(void *)&long long v76 = v7;
  swift_unknownObjectRetain();
  *((void *)&v76 + 1) = v8;
  swift_bridgeObjectRetain();
  id v9 = [a1 traitCollection];
  uint64_t v10 = v9;
  if (v9)
  {
    id v11 = [v9 userInterfaceStyle];

    LOBYTE(v10) = v11 == (id)2;
  }
  uint64_t v77 = (char *)[a1 deviceOrientation];
  [a1 floatingObscurableBounds];
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  swift_unknownObjectRelease();
  char v109 = 0;
  char v108 = 0;
  char v113 = (char)v10;
  __int16 v112 = 0;
  char v111 = 0;
  char v110 = 0;
  uint64_t v70 = v6;
  char v69 = (char)v10;
  if (!a2)
  {
    if (*v6)
    {
      double v24 = *(double *)(v3 + 248);
      double v23 = *(double *)(v3 + 256);
      swift_bridgeObjectRetain();
      if (CFAbsoluteTimeGetCurrent() <= v23 + v24)
      {
        uint64_t v21 = *(char **)(v3 + 224);
        id v25 = *(id *)(v3 + 232);
        int v26 = *v6;
        uint64_t v74 = *(void *)(v3 + 248);
        id v75 = *(id *)(v3 + 240);
        uint64_t v73 = *(void *)(v3 + 256);
        sub_100014984((uint64_t)v21, (uint64_t)v25, v75, v74, v73, v26);
        goto LABEL_31;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    goto LABEL_17;
  }
  uint64_t v20 = 224;
  if (*v6) {
    uint64_t v20 = 232;
  }
  uint64_t v21 = *(char **)(v3 + v20);
  swift_bridgeObjectRetain();
  id v22 = a2;
  if ([a1 deviceOrientation] == v21)
  {

LABEL_17:
    uint64_t v21 = 0;
    id v25 = 0;
    uint64_t v74 = 0;
    id v75 = 0;
    uint64_t v73 = 0;
    int v26 = 255;
    goto LABEL_31;
  }
  if (qword_100097868 != -1) {
    swift_once();
  }
  uint64_t v27 = sub_10005DCD8();
  sub_100008DB0(v27, (uint64_t)qword_1000992E8);
  swift_unknownObjectRetain_n();
  BOOL v28 = sub_10005DCB8();
  os_log_type_t v29 = sub_10005E068();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc();
    *(void *)&v106[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136315394;
    uint64_t v31 = v21 - 1;
    id v71 = v21;
    unint64_t v32 = 0xE800000000000000;
    uint64_t v33 = 0x7469617274726F70;
    switch((unint64_t)v31)
    {
      case 0uLL:
        break;
      case 1uLL:
        unint64_t v32 = 0x80000001000656B0;
        uint64_t v33 = 0xD000000000000012;
        break;
      case 2uLL:
        uint64_t v33 = 0x70616373646E616CLL;
        unint64_t v32 = 0xEE00746867695265;
        break;
      case 3uLL:
        uint64_t v33 = 0x70616373646E616CLL;
        unint64_t v32 = 0xED00007466654C65;
        break;
      default:
        unint64_t v32 = 0xE700000000000000;
        uint64_t v33 = 0x6E776F6E6B6E75;
        break;
    }
    *(void *)&long long v98 = sub_100044640(v33, v32, (uint64_t *)v106);
    sub_10005E138();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2080;
    NSString v34 = (char *)[a1 deviceOrientation] - 1;
    unint64_t v35 = 0xE800000000000000;
    uint64_t v36 = 0x7469617274726F70;
    switch((unint64_t)v34)
    {
      case 0uLL:
        break;
      case 1uLL:
        unint64_t v35 = 0x80000001000656B0;
        uint64_t v36 = 0xD000000000000012;
        break;
      case 2uLL:
        uint64_t v36 = 0x70616373646E616CLL;
        unint64_t v35 = 0xEE00746867695265;
        break;
      case 3uLL:
        uint64_t v36 = 0x70616373646E616CLL;
        unint64_t v35 = 0xED00007466654C65;
        break;
      default:
        unint64_t v35 = 0xE700000000000000;
        uint64_t v36 = 0x6E776F6E6B6E75;
        break;
    }
    *(void *)&long long v98 = sub_100044640(v36, v35, (uint64_t *)v106);
    sub_10005E138();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "🔄 editor starting orientation transition %s → %s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v21 = v71;
  }
  else
  {
    swift_unknownObjectRelease_n();
  }
  id v25 = [a1 deviceOrientation];
  id v75 = [v22 timingFunction];
  if (!v75) {
    id v75 = [self functionWithName:kCAMediaTimingFunctionEaseInEaseOut];
  }
  double Current = CFAbsoluteTimeGetCurrent();
  [v22 delay];
  *(double *)&uint64_t v39 = Current + v38;
  [v22 duration];
  uint64_t v73 = v40;
  uint64_t v74 = v39;
  [v22 delay];
  double v42 = v41;
  [v22 duration];
  sub_100035BC0(v42 + v43);

  int v26 = 1;
LABEL_31:
  char v44 = 0;
  unsigned __int8 v45 = *(unsigned char **)(v3 + 56);
  uint64_t v46 = OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_shouldDrawAutomatically;
  if ((v45[OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_shouldDrawAutomatically] & 1) == 0)
  {
    if (qword_100097868 != -1) {
      swift_once();
    }
    uint64_t v47 = sub_10005DCD8();
    sub_100008DB0(v47, (uint64_t)qword_1000992E8);
    double v48 = sub_10005DCB8();
    os_log_type_t v49 = sub_10005E068();
    if (os_log_type_enabled(v48, v49))
    {
      unint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "▶️ reenabling automatic drawing", v50, 2u);
      swift_slowDealloc();
    }

    char v44 = v110;
  }
  id v67 = v45;
  v45[v46] = 1;
  uint64_t v72 = (uint64_t)v21;
  uint64_t v68 = (uint64_t)v25;
  if (v26 == 255)
  {
    id v25 = 0;
    id v53 = 0;
    uint64_t v54 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = v77;
  }
  else
  {
    uint64_t v51 = v73;
    sub_100014984((uint64_t)v21, (uint64_t)v25, v75, v74, v73, v26 != 0);
    sub_100012040((uint64_t)v77, 0, 0, 0, 0, v44);
    char v44 = v26 != 0;
    uint64_t v52 = v21;
    id v53 = v75;
    uint64_t v54 = v74;
  }
  *(void *)&long long v98 = 0;
  BYTE8(v98) = v69;
  *(_WORD *)((char *)&v98 + 9) = 0;
  long long v99 = v76;
  *(void *)id v100 = 0;
  *(void *)&v100[8] = 0;
  *(void *)&v100[13] = 0;
  id v78 = v52;
  *(void *)&v100[24] = v52;
  *(void *)&long long v101 = v25;
  *((void *)&v101 + 1) = v53;
  *(void *)&long long v102 = v54;
  *((void *)&v102 + 1) = v51;
  LOBYTE(v103) = v44;
  *((void *)&v103 + 1) = v13;
  *(void *)&long long v104 = v15;
  *((void *)&v104 + 1) = v17;
  uint64_t v105 = v19;
  sub_10004AE2C((uint64_t)&v98, (void (*)(void, void, void, void, void, void))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100014984);
  swift_bridgeObjectRelease();
  long long v55 = *(_OWORD *)(v3 + 248);
  long long v56 = *(_OWORD *)(v3 + 280);
  v106[6] = *(_OWORD *)(v3 + 264);
  v106[7] = v56;
  long long v57 = *(_OWORD *)(v3 + 184);
  long long v58 = *(_OWORD *)(v3 + 216);
  v106[2] = *(_OWORD *)(v3 + 200);
  _OWORD v106[3] = v58;
  v106[4] = *(_OWORD *)(v3 + 232);
  v106[5] = v55;
  v106[0] = *(_OWORD *)(v3 + 168);
  v106[1] = v57;
  long long v59 = v102;
  *(_OWORD *)(v3 + 232) = v101;
  *(_OWORD *)(v3 + 248) = v59;
  long long v60 = v104;
  *(_OWORD *)(v3 + 264) = v103;
  *(_OWORD *)(v3 + 280) = v60;
  long long v61 = v98;
  *(_OWORD *)(v3 + 184) = v99;
  long long v62 = *(_OWORD *)&v100[16];
  *(_OWORD *)(v3 + 200) = *(_OWORD *)v100;
  *(_OWORD *)(v3 + 216) = v62;
  uint64_t v107 = *(void *)(v3 + 296);
  *(void *)(v3 + 296) = v105;
  *(_OWORD *)(v3 + 168) = v61;
  sub_10004AE2C((uint64_t)v106, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
  id v63 = [a1 traitCollection];
  uint64_t v64 = v63;
  if (v63)
  {
    id v65 = [v63 userInterfaceStyle];
  }
  else
  {
    id v65 = 0;
  }
  *(void *)(v3 + 416) = v65;
  v70[160] = v64 == 0;
  [v67 setNeedsDisplay];
  sub_100041064();
  sub_10004B180(v72, v68, (uint64_t)v75, v74, v73, v26);
  uint64_t v79 = 0;
  char v80 = v113;
  char v81 = HIBYTE(v112);
  char v82 = v112;
  long long v83 = v76;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  int v86 = 0;
  char v87 = v111;
  id v88 = v78;
  id v89 = v25;
  id v90 = v53;
  uint64_t v91 = v54;
  uint64_t v92 = v51;
  char v93 = v44;
  uint64_t v94 = v13;
  uint64_t v95 = v15;
  uint64_t v96 = v17;
  uint64_t v97 = v19;
  return sub_10004AE2C((uint64_t)&v79, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
}

void sub_10003FE50(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4 = v3;
  if (!*(void *)(v3 + 16))
  {
    if (*(double *)(v3 + 400) - a3 <= 0.9)
    {
      uint64_t v10 = *(void *)(v3 + 160);
      float v11 = a3;
      uint64_t v12 = *(void *)(v3 + 304);
      uint64_t v13 = *(void *)(v3 + 312);
      uint64_t v14 = *(void *)(v3 + 320);
      uint64_t v15 = *(void *)(v3 + 328);
      unint64_t v16 = *(unsigned int *)(v3 + 336) | ((unint64_t)*(unsigned __int8 *)(v3 + 340) << 32);
      *(void *)(v3 + 304) = *(void *)(v3 + 152);
      *(void *)(v3 + 312) = v10;
      *(void *)(v3 + 320) = a1;
      *(void *)(v3 + 328) = a2;
      *(float *)(v3 + 336) = v11;
      *(unsigned char *)(v3 + 340) = 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10004B13C(v12, v13, v14, v15, v16);
      [*(id *)(v3 + 56) setNeedsDisplay];
    }
    else
    {
      if (qword_100097868 != -1) {
        swift_once();
      }
      uint64_t v6 = sub_10005DCD8();
      sub_100008DB0(v6, (uint64_t)qword_1000992E8);
      uint64_t v7 = sub_10005DCB8();
      os_log_type_t v8 = sub_10005E078();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = swift_slowAlloc();
        *(_DWORD *)uint64_t v9 = 134218240;
        sub_10005E138();
        *(_WORD *)(v9 + 12) = 2048;
        sub_10005E138();
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "got a nonsense transition-progress change (%f → %f), ignoring", (uint8_t *)v9, 0x16u);
        swift_slowDealloc();
      }
    }
    *(double *)(v4 + 400) = a3;
  }
}

id sub_100040030(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_100097868 != -1) {
    goto LABEL_38;
  }
  while (1)
  {
    uint64_t v6 = sub_10005DCD8();
    sub_100008DB0(v6, (uint64_t)qword_1000992E8);
    swift_bridgeObjectRetain_n();
    uint64_t v7 = sub_10005DCB8();
    os_log_type_t v8 = sub_10005E068();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      v47[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v45 = sub_100044640(a1, a2, (uint64_t *)v47);
      sub_10005E138();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "finalized transition to %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    *(void *)(v3 + 152) = a1;
    *(void *)(v3 + 160) = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v10 = *(void *)(v3 + 184);
    uint64_t v11 = *(void *)(v3 + 192);
    uint64_t v12 = *(void *)(v3 + 200);
    uint64_t v13 = *(void *)(v3 + 208);
    uint64_t v14 = *(unsigned int *)(v3 + 216);
    char v15 = *(unsigned char *)(v3 + 220);
    *(void *)(v3 + 184) = a1;
    *(void *)(v3 + 192) = a2;
    *(void *)(v3 + 200) = 0;
    *(void *)(v3 + 208) = 0;
    *(void *)(v3 + 213) = 0;
    swift_bridgeObjectRetain();
    sub_100009420(v10, v11, v12, v13, v14, v15);
    uint64_t v16 = *(void *)(v3 + 304);
    uint64_t v17 = *(void *)(v3 + 312);
    uint64_t v18 = *(void *)(v3 + 320);
    uint64_t v19 = *(void *)(v3 + 328);
    unint64_t v20 = *(unsigned int *)(v3 + 336) | ((unint64_t)*(unsigned __int8 *)(v3 + 340) << 32);
    *(_OWORD *)(v3 + 304) = 0u;
    *(_OWORD *)(v3 + 320) = 0u;
    *(_DWORD *)(v3 + 336) = 0;
    *(unsigned char *)(v3 + 340) = -1;
    sub_10004B13C(v16, v17, v18, v19, v20);
    if (*(unsigned char *)(v3 + 137) != 1) {
      return [*(id *)(v3 + 56) setNeedsDisplay];
    }
    uint64_t v21 = *(void *)(v3 + 96);
    id v22 = *(void **)(v3 + 104);
    uint64_t v23 = *(void *)(v3 + 112);
    double v24 = *(void **)(v3 + 120);
    id v25 = *(void **)(v3 + 128);
    uint64_t v26 = *(unsigned __int8 *)(v3 + 136);
    swift_bridgeObjectRetain();
    sub_100044E5C((void *)v21, v22, v23, v24, v25, v26, 1);
    sub_100038070(a1, a2, v21, (uint64_t)v44);
    swift_bridgeObjectRelease();
    sub_100014CC0((uint64_t)v44, (uint64_t)&v45, &qword_100099AD0);
    if (!(void)v45)
    {
      sub_100044F08((void *)v21, v22, v23, v24, v25, v26, 1);
      return [*(id *)(v3 + 56) setNeedsDisplay];
    }
    *(_OWORD *)uint64_t v47 = v45;
    *(_OWORD *)double v48 = v46[0];
    *(_OWORD *)&v48[9] = *(_OWORD *)((char *)v46 + 9);
    double v43 = (void *)*((void *)&v45 + 1);
    [*((id *)&v45 + 1) addSubview:*(void *)(v3 + 56)];
    int64_t v27 = 0;
    uint64_t v28 = v21 + 64;
    uint64_t v29 = 1 << *(unsigned char *)(v21 + 32);
    uint64_t v30 = -1;
    if (v29 < 64) {
      uint64_t v30 = ~(-1 << v29);
    }
    unint64_t v31 = v30 & *(void *)(v21 + 64);
    int64_t v32 = (unint64_t)(v29 + 63) >> 6;
    while (1)
    {
      if (v31)
      {
        unint64_t v34 = __clz(__rbit64(v31));
        v31 &= v31 - 1;
        unint64_t v35 = v34 | (v27 << 6);
        goto LABEL_28;
      }
      int64_t v36 = v27 + 1;
      if (__OFADD__(v27, 1))
      {
        __break(1u);
        goto LABEL_37;
      }
      if (v36 >= v32) {
        goto LABEL_33;
      }
      unint64_t v37 = *(void *)(v28 + 8 * v36);
      ++v27;
      if (!v37)
      {
        int64_t v27 = v36 + 1;
        if (v36 + 1 >= v32) {
          goto LABEL_33;
        }
        unint64_t v37 = *(void *)(v28 + 8 * v27);
        if (!v37)
        {
          int64_t v27 = v36 + 2;
          if (v36 + 2 >= v32) {
            goto LABEL_33;
          }
          unint64_t v37 = *(void *)(v28 + 8 * v27);
          if (!v37) {
            break;
          }
        }
      }
LABEL_27:
      unint64_t v31 = (v37 - 1) & v37;
      unint64_t v35 = __clz(__rbit64(v37)) + (v27 << 6);
LABEL_28:
      uint64_t v39 = (void *)(*(void *)(v21 + 48) + 16 * v35);
      uint64_t v40 = *(void **)(*(void *)(v21 + 56) + 48 * v35);
      if (*v39 == a1 && v39[1] == a2) {
        char v33 = 1;
      }
      else {
        char v33 = sub_10005E448();
      }
      [v40 setHidden:v33 & 1];
    }
    int64_t v38 = v36 + 3;
    if (v38 >= v32)
    {
LABEL_33:
      swift_release();

      uint64_t v49 = *(void *)v48;
      sub_100020F48((uint64_t)&v49);
      sub_100014CC0((uint64_t)&v48[8], (uint64_t)&v50, &qword_100099AD8);
      sub_10004B154(&v50);
      sub_100014CC0((uint64_t)&v48[16], (uint64_t)v51, &qword_100099AD8);
      sub_10004B154(v51);
      return [*(id *)(v3 + 56) setNeedsDisplay];
    }
    unint64_t v37 = *(void *)(v28 + 8 * v38);
    if (v37)
    {
      int64_t v27 = v38;
      goto LABEL_27;
    }
    while (1)
    {
      int64_t v27 = v38 + 1;
      if (__OFADD__(v38, 1)) {
        break;
      }
      if (v27 >= v32) {
        goto LABEL_33;
      }
      unint64_t v37 = *(void *)(v28 + 8 * v27);
      ++v38;
      if (v37) {
        goto LABEL_27;
      }
    }
LABEL_37:
    __break(1u);
LABEL_38:
    swift_once();
  }
}

void sub_1000404E0(void *a1)
{
  if (*(void *)(v1 + 80))
  {
    uint64_t v2 = v1;
    uint64_t v4 = *(void *)(v1 + 88);
    uint64_t v5 = *(void **)(v1 + 48);
    swift_unknownObjectRetain();
    uint64_t v6 = [v5 commandBuffer];
    if (v6)
    {
      uint64_t v7 = (unsigned int *)(v1 + 336);
      os_log_t oslog = v6;
      if (*(unsigned __int8 *)(v1 + 340) == 255)
      {
        long long v8 = *(_OWORD *)(v1 + 184);
        long long v135 = *(_OWORD *)(v1 + 168);
        long long v136 = v8;
        long long v9 = *(_OWORD *)(v1 + 216);
        long long v137 = *(_OWORD *)(v1 + 200);
        long long v138 = v9;
        long long v10 = *(_OWORD *)(v1 + 248);
        long long v139 = *(_OWORD *)(v1 + 232);
        long long v140 = v10;
        long long v11 = *(_OWORD *)(v1 + 280);
        long long v141 = *(_OWORD *)(v1 + 264);
        long long v142 = v11;
        uint64_t v143 = *(void *)(v1 + 296);
        unsigned int v12 = DWORD1(v135);
        unsigned int v13 = v135;
        char v14 = BYTE9(v135);
        long long v88 = v137;
        uint64_t v86 = *((void *)&v136 + 1);
        LODWORD(v87) = v138;
        LOBYTE(v1) = BYTE4(v138);
        uint64_t v15 = *((void *)&v138 + 1);
        uint64_t v16 = *((void *)&v139 + 1);
        uint64_t v84 = v140;
        uint64_t v85 = v139;
        uint64_t v82 = v136;
        uint64_t v83 = *((void *)&v140 + 1);
        char v17 = v141;
        uint64_t v18 = *((void *)&v141 + 1);
        uint64_t v19 = *((void *)&v11 + 1);
        uint64_t v20 = v11;
        uint64_t v21 = v143;
        sub_10004AE2C((uint64_t)&v135, (void (*)(void, void, void, void, void, void))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100014984);
      }
      else
      {
        uint64_t v25 = *(void *)(v1 + 328);
        *((void *)&v88 + 1) = v25;
        unint64_t v87 = *v7 | ((unint64_t)*(unsigned __int8 *)(v1 + 340) << 32);
        *(void *)&long long v88 = *(void *)(v1 + 320);
        uint64_t v26 = *(void *)(v1 + 304);
        uint64_t v27 = *(void *)(v1 + 312);
        uint64_t v86 = v27;
        long long v28 = *(_OWORD *)(v1 + 168);
        long long v29 = *(_OWORD *)(v1 + 216);
        long long v30 = *(_OWORD *)(v1 + 248);
        long long v139 = *(_OWORD *)(v1 + 232);
        long long v140 = v30;
        long long v31 = *(_OWORD *)(v1 + 280);
        long long v141 = *(_OWORD *)(v1 + 264);
        long long v142 = v31;
        uint64_t v143 = *(void *)(v1 + 296);
        long long v32 = *(_OWORD *)(v1 + 184);
        long long v135 = v28;
        long long v136 = v32;
        long long v137 = *(_OWORD *)(v1 + 200);
        long long v138 = v29;
        unsigned int v12 = DWORD1(v28);
        unsigned int v13 = v28;
        char v72 = BYTE9(v28);
        uint64_t v78 = *((void *)&v139 + 1);
        uint64_t v80 = *((void *)&v29 + 1);
        uint64_t v84 = v140;
        uint64_t v85 = v139;
        uint64_t v82 = v26;
        uint64_t v83 = *((void *)&v140 + 1);
        char v71 = v141;
        uint64_t v18 = *((void *)&v141 + 1);
        uint64_t v19 = *((void *)&v31 + 1);
        uint64_t v20 = v31;
        uint64_t v21 = v143;
        char v33 = (unsigned int *)(v1 + 336);
        uint64_t v35 = *((void *)&v32 + 1);
        uint64_t v34 = v32;
        uint64_t v36 = v137;
        unint64_t v37 = a1;
        uint64_t v38 = *((void *)&v137 + 1);
        uint64_t v75 = v4;
        uint64_t v39 = v29;
        char v40 = BYTE4(v29);
        sub_10004B124(v26, v27, v88, v25, v87);
        sub_10004AE2C((uint64_t)&v135, (void (*)(void, void, void, void, void, void))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100014984);
        uint64_t v41 = v34;
        uint64_t v7 = v33;
        uint64_t v42 = v35;
        uint64_t v1 = HIDWORD(v87) & 1;
        uint64_t v43 = v36;
        char v14 = v72;
        uint64_t v44 = v38;
        a1 = v37;
        uint64_t v16 = v78;
        uint64_t v15 = v80;
        uint64_t v45 = v39;
        uint64_t v4 = v75;
        char v17 = v71;
        sub_100009420(v41, v42, v43, v44, v45, v40);
      }
      char v131 = v14;
      char v128 = v1;
      char v125 = v17;
      if (*(unsigned char *)(v2 + 408))
      {
        if (*(unsigned char *)(v2 + 408) == 1)
        {
          swift_bridgeObjectRelease();
          char v46 = 1;
        }
        else
        {
          char v46 = (*(void *)(v2 + 416) == 2) & ~*((unsigned char *)v7 + 88);
        }
      }
      else
      {
        char v46 = sub_10005E448();
        swift_bridgeObjectRelease();
      }
      char v47 = v46 & 1;
      uint64_t v48 = *(void *)(v2 + 144);
      id v74 = a1;
      if (v48)
      {
        if (!*(unsigned char *)(v48 + 48))
        {
          id v49 = (id)sub_100044098();
          uint64_t v73 = v59;
          uint64_t v51 = 0;
          goto LABEL_40;
        }
        if (*(unsigned char *)(v48 + 48) == 1)
        {
          id v49 = *(id *)(v48 + 24);
          id v50 = v49;
          uint64_t v73 = 0;
          uint64_t v51 = 1;
LABEL_40:
          uint64_t ObjectType = swift_getObjectType();
          *(void *)&long long v115 = __PAIR64__(v12, v13);
          BYTE8(v115) = v47;
          BYTE9(v115) = v131;
          BYTE10(v115) = 1;
          *(void *)&long long v116 = v82;
          *((void *)&v116 + 1) = v86;
          long long v117 = v88;
          LODWORD(v118) = v87;
          BYTE4(v118) = v128;
          *((void *)&v118 + 1) = v15;
          *(void *)&long long v119 = v85;
          *((void *)&v119 + 1) = v16;
          *(void *)&long long v120 = v84;
          *((void *)&v120 + 1) = v83;
          LOBYTE(v121) = v125;
          *((void *)&v121 + 1) = v18;
          *(void *)&long long v122 = v20;
          *((void *)&v122 + 1) = v19;
          uint64_t v123 = v21;
          long long v137 = v88;
          long long v138 = v118;
          long long v135 = v115;
          long long v136 = v116;
          uint64_t v143 = v21;
          long long v141 = v121;
          long long v142 = v122;
          long long v139 = v119;
          long long v140 = v120;
          sub_10004AE2C((uint64_t)&v115, (void (*)(void, void, void, void, void, void))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100014984);
          uint64_t v77 = v49;
          (*(void (**)(long long *, id, id, uint64_t, os_log_t, uint64_t, uint64_t))(v4 + 184))(&v135, [a1 texture], v49, v51, oslog, ObjectType, v4);
          swift_unknownObjectRelease();
          sub_10004AE2C((uint64_t)&v115, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
          id v67 = v73;
          [oslog commit];
          [v74 present];
          if (v73)
          {
            uint64_t v68 = *(void *)(v2 + 144);
            if (v68)
            {
              char v69 = *(void **)(v68 + 24);
              id v67 = v73;
              [v69 setContents:v67];
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
            }
            else
            {
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
            }
          }
          else
          {
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
          }
          sub_100014B70(v77, v51);
          v91[0] = v13;
          v91[1] = v12;
          char v92 = v47;
          char v93 = v131;
          char v94 = 1;
          int v95 = v129;
          char v96 = v130;
          uint64_t v97 = v82;
          uint64_t v98 = v86;
          long long v99 = v88;
          int v100 = v87;
          char v101 = v128;
          char v103 = v127;
          __int16 v102 = v126;
          uint64_t v104 = v15;
          uint64_t v105 = v85;
          uint64_t v106 = v16;
          uint64_t v107 = v84;
          uint64_t v108 = v83;
          char v109 = v125;
          *(_DWORD *)char v110 = *(_DWORD *)v124;
          *(_DWORD *)&v110[3] = *(_DWORD *)&v124[3];
          uint64_t v111 = v18;
          uint64_t v112 = v20;
          uint64_t v113 = v19;
          uint64_t v114 = v21;
          sub_10004AE2C((uint64_t)v91, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
          return;
        }
        uint64_t v60 = qword_100097868;
        swift_retain();
        if (v60 != -1) {
          swift_once();
        }
        uint64_t v61 = sub_10005DCD8();
        sub_100008DB0(v61, (uint64_t)qword_1000992E8);
        long long v62 = sub_10005DCB8();
        os_log_type_t v63 = sub_10005E078();
        if (os_log_type_enabled(v62, v63))
        {
          uint64_t v64 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v64 = 0;
          _os_log_impl((void *)&_mh_execute_header, v62, v63, "Style is mainRenderTarget but we think we should also be masking", v64, 2u);
          swift_slowDealloc();
        }

        swift_release();
      }
      else if ((*(unsigned __int8 (**)(void))(*(void *)(v2 + 72) + 24))() == 2)
      {
        id v49 = *(id *)(v2 + 120);
        if (*(unsigned char *)(v2 + 137))
        {
          uint64_t v79 = v16;
          uint64_t v81 = v15;
          uint64_t v52 = *(void **)(v2 + 96);
          id v53 = *(void **)(v2 + 104);
          uint64_t v54 = *(void *)(v2 + 112);
          long long v55 = *(void **)(v2 + 128);
          uint64_t v56 = *(unsigned __int8 *)(v2 + 136);
          uint64_t v57 = *(void *)(v2 + 160);
          unint64_t v70 = *(void *)(v2 + 152);
          swift_bridgeObjectRetain();
          long long v76 = v49;
          sub_100044E5C(v52, v53, v54, v49, v55, v56, 1);
          sub_100038070(v70, v57, (uint64_t)v52, (uint64_t)v132);
          sub_100014CC0((uint64_t)v132, (uint64_t)v133, &qword_100099AD0);
          if (!v133[0])
          {
            swift_bridgeObjectRelease();
            sub_100044F08(v52, v53, v54, v49, v55, v56, 1);
            uint64_t v73 = 0;
            id v49 = 0;
            uint64_t v51 = 255;
            a1 = v74;
            uint64_t v16 = v79;
            uint64_t v15 = v81;
            goto LABEL_40;
          }
          id v49 = v134;
          id v58 = v134;
          sub_10004B0EC((uint64_t)v132);
          swift_bridgeObjectRelease();
          sub_100044F08(v52, v53, v54, v76, v55, v56, 1);
          a1 = v74;
          uint64_t v16 = v79;
          uint64_t v15 = v81;
        }
        else
        {
          id v65 = v49;
        }
        uint64_t v73 = 0;
        if (v49) {
          uint64_t v51 = 1;
        }
        else {
          uint64_t v51 = 0xFFFFFFFFLL;
        }
        goto LABEL_40;
      }
      uint64_t v73 = 0;
      id v49 = 0;
      uint64_t v51 = 255;
      goto LABEL_40;
    }
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_100097868 != -1) {
      swift_once();
    }
    uint64_t v22 = sub_10005DCD8();
    sub_100008DB0(v22, (uint64_t)qword_1000992E8);
    os_log_t osloga = sub_10005DCB8();
    os_log_type_t v23 = sub_10005E078();
    if (os_log_type_enabled(osloga, v23))
    {
      double v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, osloga, v23, "trying to update layer content with no renderer!", v24, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_100041064()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (!v1) {
    return;
  }
  unint64_t v2 = *(void *)(v1 + 16);
  if (v2 < 2) {
    return;
  }
  uint64_t v3 = v0;
  uint64_t v103 = *(void *)(v0 + 16);
  uint64_t v5 = *(void **)(v0 + 96);
  uint64_t v4 = *(void **)(v0 + 104);
  uint64_t v7 = *(void *)(v0 + 112);
  uint64_t v6 = *(void **)(v0 + 120);
  long long v8 = *(NSObject **)(v0 + 128);
  uint64_t v9 = *(unsigned __int8 *)(v0 + 136);
  if (*(unsigned char *)(v0 + 137) == 1)
  {
    if (*(void *)(v0 + 80))
    {
      uint64_t v89 = v0 + 392;
      if (*(unsigned char *)(v0 + 392))
      {
        uint64_t v10 = qword_100097868;
        swift_unknownObjectRetain();
        if (v10 != -1) {
          swift_once();
        }
        uint64_t v11 = sub_10005DCD8();
        sub_100008DB0(v11, (uint64_t)qword_1000992E8);
        os_log_t oslog = sub_10005DCB8();
        os_log_type_t v12 = sub_10005E078();
        if (os_log_type_enabled(oslog, v12))
        {
          unsigned int v13 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unsigned int v13 = 0;
          _os_log_impl((void *)&_mh_execute_header, oslog, v12, "trying to generate snapshots with no known pixel size", v13, 2u);
          swift_slowDealloc();

          swift_unknownObjectRelease();
          return;
        }
        swift_unknownObjectRelease();
        goto LABEL_13;
      }
      uint64_t v85 = *(void *)v0;
      uint64_t v100 = *(void *)(v0 + 88);
      double v109 = *(double *)(v0 + 376);
      double v111 = *(double *)(v0 + 384);
      double v17 = v109;
      long long v18 = *(_OWORD *)(v0 + 216);
      long long v19 = *(_OWORD *)(v0 + 248);
      long long v150 = *(_OWORD *)(v0 + 232);
      long long v151 = v19;
      uint64_t v154 = *(void *)(v0 + 296);
      long long v20 = *(_OWORD *)(v0 + 184);
      long long v148 = *(_OWORD *)(v0 + 200);
      long long v149 = v18;
      long long v146 = *(_OWORD *)(v0 + 168);
      long long v147 = v20;
      long long v21 = *(_OWORD *)(v0 + 280);
      long long v152 = *(_OWORD *)(v0 + 264);
      long long v153 = v21;
      uint64_t v115 = *((void *)&v150 + 1);
      uint64_t v22 = v150;
      uint64_t v117 = *((void *)&v18 + 1);
      uint64_t v23 = *((void *)&v19 + 1);
      uint64_t v113 = v19;
      int v24 = v152;
      os_log_t osloga = v8;
      swift_bridgeObjectRetain();
      id v90 = v5;
      unsigned int v107 = v9;
      sub_100044E5C(v5, v4, v7, v6, osloga, v9, 1);
      swift_unknownObjectRetain();
      sub_10004AE2C((uint64_t)&v146, (void (*)(void, void, void, void, void, void))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100014984);
      if (v24 == 1)
      {
        sub_100012040(v117, v22, v115, v113, v23, 1);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v23 = 0;
        uint64_t v27 = v22;
        uint64_t v22 = 0;
      }
      else
      {
        uint64_t v25 = (void *)v115;
        uint64_t v27 = v117;
        uint64_t v26 = v113;
      }
      uint64_t v28 = v146;
      uint64_t v29 = *((void *)&v152 + 1);
      long long v30 = v153;
      uint64_t v31 = v154;
      uint64_t v130 = v146;
      __int16 v131 = WORD4(v146);
      char v98 = BYTE10(v146);
      char v99 = BYTE9(v146);
      char v132 = BYTE10(v146);
      uint64_t v96 = *((void *)&v147 + 1);
      uint64_t v97 = v147;
      long long v133 = v147;
      uint64_t v94 = *((void *)&v148 + 1);
      uint64_t v95 = v148;
      long long v134 = v148;
      char v92 = BYTE4(v149);
      unsigned int v93 = v149;
      int v135 = v149;
      char v136 = BYTE4(v149);
      uint64_t v137 = v27;
      uint64_t v138 = v22;
      long long v139 = v25;
      uint64_t v140 = v26;
      uint64_t v106 = v23;
      uint64_t v141 = v23;
      char v142 = 0;
      uint64_t v143 = *((void *)&v152 + 1);
      long long v144 = v153;
      uint64_t v145 = v154;
      if (v109 <= -9.22337204e18)
      {
        __break(1u);
      }
      else
      {
        double v32 = v111;
        if (v109 < 9.22337204e18)
        {
          if ((*(void *)&v109 & 0x7FF0000000000000) != 0x7FF0000000000000
            && (*(void *)&v111 & 0x7FF0000000000000) != 0x7FF0000000000000)
          {
            if (v111 > -9.22337204e18)
            {
              uint64_t v114 = v26;
              long long v116 = v25;
              uint64_t v112 = v22;
              uint64_t v118 = v27;
              if (v32 < 9.22337204e18)
              {
                uint64_t v9 = (uint64_t)v109;
                uint64_t v33 = (uint64_t)v32;
                uint64_t v102 = *(void *)(v3 + 72);
                uint64_t v34 = (*(uint64_t (**)(void))(v102 + 8))();
                uint64_t v88 = v33;
                id v35 = [self texture2DDescriptorWithPixelFormat:v34 width:(uint64_t)v109 height:v33 mipmapped:0];
                [v35 setUsage:4];
                [v35 setStorageMode:0];
                uint64_t v36 = swift_allocObject();
                uint64_t v84 = v34;
                uint64_t v37 = sub_100009FB8(v34);
                uint64_t v38 = (uint64_t)v109 * v37;
                if ((unsigned __int128)(v9 * (__int128)v37) >> 64 == (v9 * v37) >> 63)
                {
                  uint64_t v87 = v36;
                  *(void *)(v36 + 16) = v38;
                  if (v38 <= 0) {
                    uint64_t v39 = -(-v38 & 0xF);
                  }
                  else {
                    uint64_t v39 = v38 & 0xF;
                  }
                  if (v39)
                  {
                    uint64_t v40 = 16 - v39;
                    BOOL v41 = __OFADD__(v38, v40);
                    v38 += v40;
                    if (v41)
                    {
LABEL_88:
                      __break(1u);
                      goto LABEL_89;
                    }
                    *(void *)(v36 + 16) = v38;
                  }
                  uint64_t v83 = v88 * v38;
                  if ((unsigned __int128)(v88 * (__int128)v38) >> 64 == (v88 * v38) >> 63)
                  {
                    swift_retain();
                    uint64_t v9 = (uint64_t)v35;
                    uint64_t v42 = sub_10004A2D0(0, v2, v3, v9);

                    swift_release();
                    id v101 = [*(id *)(v3 + 48) commandBuffer];
                    if (!v101)
                    {
                      swift_bridgeObjectRelease();
                      sub_100044F08(v90, v4, v7, v6, osloga, v107, 1);
                      swift_bridgeObjectRelease();
                      if (qword_100097868 == -1)
                      {
LABEL_74:
                        uint64_t v74 = sub_10005DCD8();
                        sub_100008DB0(v74, (uint64_t)qword_1000992E8);
                        uint64_t v75 = sub_10005DCB8();
                        os_log_type_t v76 = sub_10005E078();
                        if (os_log_type_enabled(v75, v76))
                        {
                          uint64_t v77 = (uint8_t *)swift_slowAlloc();
                          *(_WORD *)uint64_t v77 = 0;
                          _os_log_impl((void *)&_mh_execute_header, v75, v76, "couldn’t make command buffer for look snapshotting", v77, 2u);
                          swift_slowDealloc();

                          swift_unknownObjectRelease();
                          sub_10004AE2C((uint64_t)&v130, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
                        }
                        else
                        {

                          sub_10004AE2C((uint64_t)&v130, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
                          swift_unknownObjectRelease();
                        }
                        swift_release();
                        return;
                      }
LABEL_90:
                      swift_once();
                      goto LABEL_74;
                    }
                    uint64_t v86 = v42;
                    uint64_t v82 = (void *)v9;
                    sub_10005DBE8();
                    uint64_t v81 = swift_allocBox();
                    *(void *)&v155[0] = _swiftEmptyArrayStorage;
                    sub_10004B4DC(&qword_100099A90, (void (*)(uint64_t))&type metadata accessor for IndexSet);
                    uint64_t v9 = (uint64_t)&qword_100099A98;
                    sub_100008F4C(&qword_100099A98);
                    sub_10004B524(&qword_100099AA0, &qword_100099A98);
                    sub_10005E188();
                    uint64_t v43 = v23;
                    unint64_t v105 = *(void *)(v103 + 16);
                    if (!v105)
                    {
LABEL_71:
                      uint64_t v71 = (*(uint64_t (**)(void))(v102 + 16))();
                      if (v71)
                      {
                        CGColorSpaceRef v72 = (CGColorSpaceRef)v71;
                        uint64_t v73 = v103;
                      }
                      else
                      {
                        CGColorSpaceRef v72 = CGColorSpaceCreateWithName(kCGColorSpaceDisplayP3);
                        uint64_t v73 = v103;
                        if (!v72)
                        {
                          __break(1u);
                          return;
                        }
                      }
                      uint64_t v78 = (void *)swift_allocObject();
                      v78[2] = v3;
                      v78[3] = v90;
                      v78[4] = v118;
                      v78[5] = v73;
                      v78[6] = v81;
                      v78[7] = v86;
                      v78[8] = v83;
                      v78[9] = v87;
                      v78[10] = (uint64_t)v17;
                      v78[11] = v88;
                      v78[12] = v84;
                      v78[13] = v72;
                      v78[14] = v85;
                      *(void *)uint64_t v124 = sub_10004AEC0;
                      *(void *)&v124[8] = v78;
                      *(void *)&long long aBlock = _NSConcreteStackBlock;
                      *((void *)&aBlock + 1) = 1107296256;
                      *(void *)&long long v123 = sub_1000433F8;
                      *((void *)&v123 + 1) = &unk_100081A08;
                      uint64_t v79 = _Block_copy(&aBlock);
                      swift_retain();
                      swift_retain();
                      swift_retain();
                      uint64_t v80 = v72;
                      swift_release();
                      [v101 addCompletedHandler:v79];
                      _Block_release(v79);
                      [v101 commit];

                      swift_release();
                      swift_unknownObjectRelease();
                      swift_release();

                      sub_10004AE2C((uint64_t)&v130, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
                      swift_unknownObjectRelease();
                      return;
                    }
                    if (v105 <= v42[2])
                    {
                      Swift::Int v44 = 0;
                      uint64_t v104 = v42 + 4;
                      uint64_t v45 = (unint64_t *)(v103 + 40);
                      uint64_t v91 = v3;
                      while (1)
                      {
                        uint64_t v46 = *(v45 - 1);
                        unint64_t v47 = *v45;
                        uint64_t v48 = v104[v44];
                        if (!v48)
                        {
                          uint64_t v51 = *(v45 - 1);
                          uint64_t v52 = qword_100097868;
                          swift_bridgeObjectRetain();
                          if (v52 != -1) {
                            swift_once();
                          }
                          uint64_t v53 = sub_10005DCD8();
                          sub_100008DB0(v53, (uint64_t)qword_1000992E8);
                          swift_bridgeObjectRetain();
                          uint64_t v54 = sub_10005DCB8();
                          os_log_type_t v55 = sub_10005E078();
                          if (os_log_type_enabled(v54, v55))
                          {
                            uint64_t v56 = swift_slowAlloc();
                            *(void *)&long long aBlock = swift_slowAlloc();
                            *(_DWORD *)uint64_t v56 = 136315138;
                            swift_bridgeObjectRetain();
                            *(void *)(v56 + 4) = sub_100044640(v51, v47, (uint64_t *)&aBlock);
                            swift_bridgeObjectRelease_n();
                            _os_log_impl((void *)&_mh_execute_header, v54, v55, "couldn’t snapshot look %s, didn’t get a texture from the buffer", (uint8_t *)v56, 0xCu);
                            swift_arrayDestroy();
                            swift_slowDealloc();
                            swift_slowDealloc();
                          }
                          else
                          {
                            swift_bridgeObjectRelease_n();
                          }

                          uint64_t v43 = v106;
                          sub_10005DBC8(v44);
                          goto LABEL_42;
                        }
                        swift_bridgeObjectRetain_n();
                        swift_unknownObjectRetain();
                        sub_10004AE2C((uint64_t)&v130, (void (*)(void, void, void, void, void, void))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100014984);
                        sub_100009420(v97, v96, v95, v94, v93, v92);
                        char v110 = v45;
                        if (!*(unsigned char *)(v3 + 408)) {
                          break;
                        }
                        if (*(unsigned char *)(v3 + 408) == 1)
                        {
                          uint64_t v49 = v46;
                          char v50 = 1;
LABEL_52:
                          sub_100014984(v118, v112, v116, v114, v43, 0);
                          swift_bridgeObjectRelease();
                          uint64_t v46 = v49;
                          goto LABEL_53;
                        }
                        if (*(unsigned char *)(v89 + 32))
                        {
                          sub_100014984(v118, v112, v116, v114, v43, 0);
                          char v50 = 0;
                        }
                        else
                        {
                          char v50 = *(void *)(v3 + 416) == 2;
                          sub_100014984(v118, v112, v116, v114, v43, 0);
                        }
LABEL_53:
                        os_log_t oslogb = v48;
                        Swift::Int v108 = v44;
                        if ((*(unsigned __int8 (**)(void))(v102 + 24))() != 2 || !v90[2]) {
                          goto LABEL_67;
                        }
                        swift_bridgeObjectRetain();
                        unint64_t v57 = sub_1000121F8(v46, v47);
                        if ((v58 & 1) == 0)
                        {
                          swift_bridgeObjectRelease();
LABEL_67:
                          uint64_t v61 = 0;
                          goto LABEL_68;
                        }
                        uint64_t v59 = v90[7] + 48 * v57;
                        uint64_t v60 = *(void **)(v59 + 8);
                        uint64_t v61 = *(void **)(v59 + 24);
                        id v62 = *(id *)v59;
                        id v63 = v60;
                        swift_bridgeObjectRetain();
                        id v64 = v61;

                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        if (v61)
                        {
                          if (qword_100097868 != -1) {
                            swift_once();
                          }
                          uint64_t v65 = sub_10005DCD8();
                          sub_100008DB0(v65, (uint64_t)qword_1000992E8);
                          swift_bridgeObjectRetain_n();
                          os_log_type_t v66 = sub_10005DCB8();
                          os_log_type_t v67 = sub_10005E068();
                          if (os_log_type_enabled(v66, v67))
                          {
                            uint64_t v68 = swift_slowAlloc();
                            *(void *)&long long aBlock = swift_slowAlloc();
                            *(_DWORD *)uint64_t v68 = 136315138;
                            swift_bridgeObjectRetain();
                            *(void *)(v68 + 4) = sub_100044640(v46, v47, (uint64_t *)&aBlock);
                            swift_bridgeObjectRelease_n();
                            _os_log_impl((void *)&_mh_execute_header, v66, v67, "setting floating layer resource to background layer %s", (uint8_t *)v68, 0xCu);
                            uint64_t v69 = 1;
                            swift_arrayDestroy();
                            swift_slowDealloc();
                            swift_slowDealloc();
                          }
                          else
                          {
                            swift_bridgeObjectRelease_n();

                            uint64_t v69 = 1;
                          }
                          goto LABEL_69;
                        }
LABEL_68:
                        uint64_t v69 = 255;
LABEL_69:
                        uint64_t ObjectType = swift_getObjectType();
                        *(void *)&long long aBlock = v28;
                        BYTE8(aBlock) = v50 & 1;
                        BYTE9(aBlock) = v99;
                        BYTE10(aBlock) = v98;
                        *(void *)&long long v123 = v46;
                        *((void *)&v123 + 1) = v47;
                        memset(v124, 0, 21);
                        *(void *)&v124[24] = v118;
                        *(void *)&long long v125 = v112;
                        *((void *)&v125 + 1) = v116;
                        *(void *)&long long v126 = v114;
                        uint64_t v43 = v106;
                        *((void *)&v126 + 1) = v106;
                        LOBYTE(v127) = 0;
                        *((void *)&v127 + 1) = v29;
                        long long v128 = v30;
                        uint64_t v129 = v31;
                        v155[2] = 0uLL;
                        v155[3] = *(_OWORD *)&v124[16];
                        v155[6] = v127;
                        v155[7] = v30;
                        v155[4] = v125;
                        v155[5] = v126;
                        v155[0] = aBlock;
                        v155[1] = v123;
                        uint64_t v156 = v31;
                        sub_10004AE2C((uint64_t)&aBlock, (void (*)(void, void, void, void, void, void))sub_1000093E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100014984);
                        sub_100012040(v118, v112, (uint64_t)v116, v114, v106, 0);
                        swift_bridgeObjectRelease();
                        (*(void (**)(_OWORD *, os_log_t, void *, uint64_t, id, uint64_t))(v100 + 184))(v155, oslogb, v61, v69, v101, ObjectType);
                        swift_bridgeObjectRelease();
                        sub_10004AE2C((uint64_t)&aBlock, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
                        sub_100014B70(v61, v69);
                        swift_unknownObjectRelease();
                        sub_10004AE2C((uint64_t)&aBlock, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
                        uint64_t v3 = v91;
                        Swift::Int v44 = v108;
                        uint64_t v45 = v110;
LABEL_42:
                        ++v44;
                        v45 += 2;
                        if (v105 == v44) {
                          goto LABEL_71;
                        }
                      }
                      uint64_t v49 = v46;
                      char v50 = sub_10005E448();
                      goto LABEL_52;
                    }
LABEL_89:
                    __break(1u);
                    goto LABEL_90;
                  }
LABEL_87:
                  __break(1u);
                  goto LABEL_88;
                }
LABEL_86:
                __break(1u);
                goto LABEL_87;
              }
LABEL_85:
              __break(1u);
              goto LABEL_86;
            }
LABEL_84:
            __break(1u);
            goto LABEL_85;
          }
LABEL_83:
          __break(1u);
          goto LABEL_84;
        }
      }
      __break(1u);
      goto LABEL_83;
    }
    if (qword_100097868 != -1) {
      swift_once();
    }
    uint64_t v14 = sub_10005DCD8();
    sub_100008DB0(v14, (uint64_t)qword_1000992E8);
    os_log_t oslog = sub_10005DCB8();
    os_log_type_t v15 = sub_10005E078();
    if (os_log_type_enabled(oslog, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v15, "trying to generate snapshots when there’s no renderer yet", v16, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    os_log_t oslog = *(NSObject **)(v0 + 128);
    swift_bridgeObjectRetain();
    sub_100044E5C(v5, v4, v7, v6, oslog, v9, 0);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_13:
}

void sub_10004240C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  uint64_t v43 = a8;
  uint64_t v44 = a7;
  uint64_t v42 = a14;
  uint64_t v45 = a13;
  uint64_t v40 = a4;
  uint64_t v41 = a12;
  uint64_t v39 = a11;
  uint64_t v18 = sub_10005DD58();
  os_log_t v48 = *(os_log_t *)(v18 - 8);
  __chkstk_darwin(v18);
  long long v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10005DD88();
  uint64_t v46 = *(void *)(v21 - 8);
  uint64_t v47 = v21;
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ([a1 status] == (id)4)
  {
    sub_10000991C(0, &qword_100098BC0);
    uint64_t v38 = sub_10005E0C8();
    uint64_t v24 = swift_allocObject();
    swift_weakInit();
    uint64_t v25 = (void *)swift_allocObject();
    void v25[2] = v24;
    v25[3] = a3;
    v25[4] = v40;
    v25[5] = a5;
    v25[6] = a6;
    uint64_t v40 = v18;
    uint64_t v26 = v43;
    v25[7] = v44;
    v25[8] = v26;
    v25[9] = a9;
    v25[10] = a10;
    uint64_t v27 = v41;
    v25[11] = v39;
    v25[12] = v27;
    uint64_t v28 = v45;
    uint64_t v29 = v42;
    v25[13] = v45;
    v25[14] = v29;
    aBlock[4] = sub_10004AFC0;
    aBlock[5] = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000433B4;
    aBlock[3] = &unk_100081A80;
    long long v30 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    id v31 = v28;
    swift_release();
    sub_10005DD68();
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_10004B4DC(&qword_100099AA8, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100008F4C(&qword_100099AB0);
    sub_10004B524((unint64_t *)&unk_100099AB8, &qword_100099AB0);
    uint64_t v32 = v40;
    sub_10005E188();
    uint64_t v33 = (void *)v38;
    sub_10005E0D8();
    _Block_release(v30);

    ((void (*)(char *, uint64_t))v48[1].isa)(v20, v32);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v23, v47);
  }
  else
  {
    if (qword_100097868 != -1) {
      swift_once();
    }
    uint64_t v34 = sub_10005DCD8();
    sub_100008DB0(v34, (uint64_t)qword_1000992E8);
    os_log_t v48 = (os_log_t)sub_10005DCB8();
    os_log_type_t v35 = sub_10005E078();
    if (os_log_type_enabled(v48, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v35, "look-snapshotting command buffer did not complete successfully", v36, 2u);
      swift_slowDealloc();
    }
    os_log_t v37 = v48;
  }
}

uint64_t sub_100042894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9, size_t a10, uint64_t a11, CGColorSpace *a12)
{
  uint64_t v112 = a7;
  uint64_t v110 = a6;
  uint64_t v16 = sub_10005DBE8();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v87 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = swift_projectBox();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v22 = (void *)result;
  uint64_t v118 = a2;
  uint64_t v23 = (uint64_t *)(result + 224);
  if (*(unsigned char *)(result + 264)) {
    uint64_t v23 = (uint64_t *)(result + 232);
  }
  uint64_t v95 = *v23;
  uint64_t v24 = *(void *)(a4 + 16);
  swift_bridgeObjectRetain();
  uint64_t v103 = v24;
  if (!v24)
  {
LABEL_51:
    uint64_t v79 = (void *)v22[12];
    uint64_t v80 = (void *)v22[13];
    uint64_t v81 = v22;
    uint64_t v82 = v22[14];
    uint64_t v83 = (void *)v22[15];
    uint64_t v84 = (void *)v81[16];
    char v85 = *((unsigned char *)v81 + 137);
    v81[12] = a2;
    *(_OWORD *)(v81 + 13) = 0u;
    *(_OWORD *)(v81 + 15) = 0u;
    uint64_t v86 = *((unsigned __int8 *)v81 + 136);
    *((_WORD *)v81 + 68) = 256;
    swift_bridgeObjectRetain();
    sub_100044F08(v79, v80, v82, v83, v84, v86, v85);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  id v90 = v22;
  uint64_t v94 = a3;
  CGColorSpaceRef v97 = a12;
  uint64_t v98 = a11;
  size_t v108 = a10;
  size_t v107 = a9;
  swift_beginAccess();
  double v109 = (uint64_t *)(a8 + 16);
  swift_beginAccess();
  unint64_t v25 = 0;
  uint64_t v111 = 0;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v27 = v17 + 16;
  uint64_t v26 = v28;
  uint64_t v113 = (void (**)(char *, uint64_t))(v27 - 8);
  uint64_t v106 = v110 + 32;
  unint64_t v92 = (unint64_t)v112 << 48;
  uint64_t v91 = v112 << 32;
  uint64_t v29 = (uint64_t *)(a4 + 40);
  uint64_t v101 = v27;
  uint64_t v30 = v103;
  uint64_t v96 = v16;
  uint64_t v100 = v20;
  unint64_t v105 = v28;
  v28(v19, v20, v16);
  while (1)
  {
    BOOL v31 = sub_10005DBD8(v25);
    (*v113)(v19, v16);
    if (!v31) {
      break;
    }
LABEL_9:
    ++v25;
    v29 += 2;
    if (v30 == v25)
    {
      a2 = v118;
      uint64_t v22 = v90;
      goto LABEL_51;
    }
    v26(v19, v20, v16);
  }
  if (v25 < *(void *)(v110 + 16))
  {
    uint64_t v32 = *(void **)(v106 + 8 * v25);
    if (!v32) {
      goto LABEL_8;
    }
    uint64_t v33 = *v29;
    uint64_t v104 = *(v29 - 1);
    if (v112)
    {
      if (v112 <= 14)
      {
        if (v112 < 0) {
          goto LABEL_54;
        }
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        uint64_t v38 = 0;
        unint64_t v37 = v92;
      }
      else
      {
        sub_10005D8E8();
        swift_allocObject();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        unint64_t v34 = v112;
        uint64_t v35 = sub_10005D8B8();
        uint64_t v36 = v35;
        if (v34 >= 0x7FFFFFFF)
        {
          sub_10005DA58();
          uint64_t v38 = swift_allocObject();
          uint64_t v39 = v112;
          *(void *)(v38 + 16) = 0;
          *(void *)(v38 + 24) = v39;
          unint64_t v37 = v36 | 0x8000000000000000;
        }
        else
        {
          unint64_t v37 = v35 | 0x4000000000000000;
          uint64_t v38 = v91;
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v38 = 0;
      unint64_t v37 = 0xC000000000000000;
    }
    uint64_t v116 = v38;
    unint64_t v117 = v37;
    swift_unknownObjectRetain();
    uint64_t v40 = v111;
    sub_100048380(&v116, v32, v109, v107, v108);
    uint64_t v111 = v40;
    uint64_t v41 = v116;
    unint64_t v42 = v117;
    sub_10002E898(v116, v117);
    CFDataRef isa = sub_10005DA68().super.isa;
    sub_100014804(v41, v42);
    uint64_t v44 = CGDataProviderCreateWithCFData(isa);

    if (!v44)
    {
      swift_bridgeObjectRelease();
      if (qword_100097868 != -1) {
        swift_once();
      }
      uint64_t v46 = sub_10005DCD8();
      sub_100008DB0(v46, (uint64_t)qword_1000992E8);
      uint64_t v47 = sub_10005DCB8();
      os_log_type_t v48 = sub_10005E078();
      BOOL v49 = os_log_type_enabled(v47, v48);
      uint64_t v20 = v100;
      if (v49)
      {
        char v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v50 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "couldn’t create data provider", v50, 2u);
        swift_slowDealloc();
      }

LABEL_7:
      swift_unknownObjectRelease();
      sub_100014804(v116, v117);
      uint64_t v30 = v103;
LABEL_8:
      uint64_t v26 = v105;
      goto LABEL_9;
    }
    if ((unint64_t)(v98 - 70) < 2)
    {
      CGBitmapInfo v45 = 16385;
    }
    else
    {
      if ((unint64_t)(v98 - 80) >= 2)
      {
        if (v98 != 115) {
          goto LABEL_55;
        }
        CGBitmapInfo v45 = 4355;
        size_t v51 = 16;
        size_t v52 = 64;
        goto LABEL_32;
      }
      CGBitmapInfo v45 = 8194;
    }
    size_t v51 = 8;
    size_t v52 = 32;
LABEL_32:
    CGImageRef v102 = CGImageCreate(v107, v108, v51, v52, *v109, v97, v45, v44, 0, 0, kCGRenderingIntentDefault);
    if (v102)
    {
      char v99 = v44;
      swift_bridgeObjectRetain();
      uint64_t v53 = sub_1000432E0(v114, v104, v33);
      if (*v54)
      {
        os_log_type_t v55 = v54;
        unsigned int v93 = (void (*)(void *, void))v53;
        uint64_t v56 = v102;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v115 = v55[2];
        v55[2] = 0x8000000000000000;
        uint64_t v58 = (uint64_t)v56;
        uint64_t v59 = v94;
        sub_1000474E8(v58, v94, isUniquelyReferenced_nonNull_native);
        v55[2] = v115;
        swift_bridgeObjectRelease();
        v93(v114, 0);
      }
      else
      {
        ((void (*)(void *, void))v53)(v114, 0);
        uint64_t v59 = v94;
      }
      uint64_t v30 = v103;
      swift_bridgeObjectRelease();
      if (v95 == v59)
      {
        uint64_t v65 = v118;
        uint64_t v16 = v96;
        if (*(void *)(v118 + 16) && (unint64_t v66 = sub_1000121F8(v104, v33), (v67 & 1) != 0))
        {
          uint64_t v68 = *(void *)(v65 + 56) + 48 * v66;
          uint64_t v69 = *(void **)v68;
          unint64_t v70 = *(void **)(v68 + 8);
          uint64_t v87 = *(void *)(v68 + 16);
          id v89 = *(id *)(v68 + 24);
          unsigned int v93 = *(void (**)(void *, void))(v68 + 32);
          LODWORD(v104) = *(unsigned __int8 *)(v68 + 40);
          uint64_t v71 = v93;
          id v88 = v69;
          id v72 = v70;
          swift_bridgeObjectRetain();
          id v73 = v89;
          id v74 = v89;
          swift_bridgeObjectRelease();
          id v75 = v88;
          os_log_type_t v76 = v70;
          uint64_t v30 = v103;
          uint64_t v77 = v73;
          uint64_t v16 = v96;
          sub_10004B000(v69, v76, v87, v77, v93);
          uint64_t v78 = v102;
          [v75 setContents:v78];

          swift_unknownObjectRelease();
          sub_100014804(v41, v42);
        }
        else
        {
          swift_bridgeObjectRelease();
          sub_100014804(v41, v42);

          swift_unknownObjectRelease();
        }
      }
      else
      {
        sub_100014804(v41, v42);
        swift_bridgeObjectRelease();

        swift_unknownObjectRelease();
        uint64_t v16 = v96;
      }
      uint64_t v20 = v100;
      goto LABEL_8;
    }
    swift_bridgeObjectRelease();
    if (qword_100097868 != -1) {
      swift_once();
    }
    uint64_t v60 = sub_10005DCD8();
    sub_100008DB0(v60, (uint64_t)qword_1000992E8);
    uint64_t v61 = sub_10005DCB8();
    os_log_type_t v62 = sub_10005E078();
    BOOL v63 = os_log_type_enabled(v61, v62);
    uint64_t v20 = v100;
    if (v63)
    {
      id v64 = (uint8_t *)swift_slowAlloc();
      char v99 = v44;
      *(_WORD *)id v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "couldn’t create image from data", v64, 2u);
      uint64_t v44 = v99;
      swift_slowDealloc();
    }

    goto LABEL_7;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  v114[0] = 0;
  v114[1] = 0xE000000000000000;
  sub_10005E1F8(26);
  v119._object = (void *)0x8000000100063F00;
  v119._uint64_t countAndFlagsBits = 0xD000000000000018;
  sub_10005DEE8(v119);
  uint64_t v115 = v98;
  type metadata accessor for MTLPixelFormat(0);
  sub_10005E2A8();
  uint64_t result = sub_10005E308();
  __break(1u);
  return result;
}

void (*sub_1000432E0(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_100049904(v6, a2, a3);
  return sub_100043360;
}

void sub_100043360(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t sub_1000433B4(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_1000433F8(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_100043458(uint64_t a1, unint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 432);
  swift_bridgeObjectRetain();
  char v6 = sub_10003D804(a1, a2, v5);
  swift_bridgeObjectRelease();
  if (v6)
  {
    if (qword_100097868 != -1) {
      swift_once();
    }
    uint64_t v7 = sub_10005DCD8();
    sub_100008DB0(v7, (uint64_t)qword_1000992E8);
    long long v8 = sub_10005DCB8();
    os_log_type_t v9 = sub_10005E088();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Request for continuous rendering with a reason that already exists. Don't create a new one. The caller needs to work this out.", v10, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  else
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_100048B1C(&v15, a1, a2);
    swift_endAccess();
    swift_bridgeObjectRelease();
    *(unsigned char *)(*(void *)(v2 + 56)
             + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_wantsIndefiniteContinuousRendering) = 1;
    sub_100036B40();
    type metadata accessor for ContinuousRenderingToken();
    uint64_t v12 = swift_allocObject();
    swift_bridgeObjectRetain();
    uint64_t v13 = swift_retain();
    uint64_t v11 = sub_10004AC24(v13, a1, a2, v12);
    swift_release();
  }
  return v11;
}

void sub_100043634(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = v2 + 432;
  swift_beginAccess();
  uint64_t v7 = *(void *)(*(void *)(v3 + 432) + 16);
  swift_beginAccess();
  sub_1000495AC(a1, a2);
  swift_endAccess();
  swift_bridgeObjectRelease();
  if (v7)
  {
    if (!*(void *)(*(void *)v6 + 16))
    {
      *(unsigned char *)(*(void *)(v3 + 56)
               + OBJC_IVAR____TtC22MercuryPosterExtension18WallpaperMetalView_wantsIndefiniteContinuousRendering) = 0;
      sub_100036B40();
    }
  }
}

uint64_t sub_1000436F0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();
  sub_100044F08(*(void **)(v0 + 96), *(void **)(v0 + 104), *(void *)(v0 + 112), *(void **)(v0 + 120), *(void **)(v0 + 128), *(unsigned __int8 *)(v0 + 136), *(unsigned char *)(v0 + 137));
  swift_release();
  swift_bridgeObjectRelease();
  long long v1 = *(_OWORD *)(v0 + 248);
  long long v2 = *(_OWORD *)(v0 + 280);
  v6[6] = *(_OWORD *)(v0 + 264);
  v6[7] = v2;
  uint64_t v7 = *(void *)(v0 + 296);
  long long v3 = *(_OWORD *)(v0 + 184);
  long long v4 = *(_OWORD *)(v0 + 216);
  v6[2] = *(_OWORD *)(v0 + 200);
  v6[3] = v4;
  v6[4] = *(_OWORD *)(v0 + 232);
  v6[5] = v1;
  v6[0] = *(_OWORD *)(v0 + 168);
  v6[1] = v3;
  sub_10004AE2C((uint64_t)v6, (void (*)(void, void, void, void, void, void))sub_100009420, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100012040);
  sub_10004B13C(*(void *)(v0 + 304), *(void *)(v0 + 312), *(void *)(v0 + 320), *(void *)(v0 + 328), *(unsigned int *)(v0 + 336) | ((unint64_t)*(unsigned __int8 *)(v0 + 340) << 32));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000437F0()
{
  sub_1000436F0();

  return _swift_deallocClassInstance(v0, 440, 7);
}

id sub_100043828()
{
  type metadata accessor for Resources();
  swift_allocObject();
  id result = sub_100043868();
  qword_100099300 = (uint64_t)result;
  return result;
}

id sub_100043868()
{
  uint64_t v1 = sub_10005E0B8();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  long long v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005E0A8();
  __chkstk_darwin();
  sub_10005DD88();
  __chkstk_darwin();
  uint64_t v5 = sub_10005DCD8();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  long long v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = MTLCreateSystemDefaultDevice();
  if (result)
  {
    uint64_t v12 = v2;
    uint64_t v13 = v4;
    uint64_t v14 = v1;
    *(void *)(v0 + OBJC_IVAR____TtC22MercuryPosterExtensionP33_F62BFB1CA87BCDB560F9BD6D41BC5A8D9Resources_device) = result;
    id result = [result newCommandQueue];
    if (result)
    {
      uint64_t v10 = result;
      *(void *)(v0
                + OBJC_IVAR____TtC22MercuryPosterExtensionP33_F62BFB1CA87BCDB560F9BD6D41BC5A8D9Resources_commandQueue) = result;
      swift_unknownObjectRetain();
      NSString v11 = sub_10005DE38();
      [v10 setLabel:v11];
      swift_unknownObjectRelease();

      sub_10005DCC8();
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v0 + OBJC_IVAR____TtC22MercuryPosterExtensionP33_F62BFB1CA87BCDB560F9BD6D41BC5A8D9Resources_log, v8, v5);
      sub_10000991C(0, &qword_100098BC0);
      sub_10005DD78();
      Swift::Int v15 = _swiftEmptyArrayStorage;
      sub_10004B4DC(&qword_100098BC8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
      sub_100008F4C(&qword_100098BD0);
      sub_10004B524(&qword_100098BD8, &qword_100098BD0);
      sub_10005E188();
      (*(void (**)(char *, void, uint64_t))(v12 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v14);
      *(void *)(v0
                + OBJC_IVAR____TtC22MercuryPosterExtensionP33_F62BFB1CA87BCDB560F9BD6D41BC5A8D9Resources_snapshotQueue) = sub_10005E0E8();
      return (id)v0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100043C18()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC22MercuryPosterExtensionP33_F62BFB1CA87BCDB560F9BD6D41BC5A8D9Resources_log;
  uint64_t v2 = sub_10005DCD8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC22MercuryPosterExtensionP33_F62BFB1CA87BCDB560F9BD6D41BC5A8D9Resources_snapshotQueue));
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t sub_100043CE8(uint64_t a1, uint64_t a2, void *a3, void *a4, unsigned __int8 a5, double a6, double a7)
{
  uint64_t v9 = v7;
  int v17 = a5;
  *(void *)(v7 + 16) = [objc_allocWithZone((Class)CAPortalLayer) init];
  *(void *)(v7 + 24) = [objc_allocWithZone((Class)CALayer) init];
  *(void *)(v7 + 40) = 0;
  *(unsigned char *)(v7 + 48) = a5;
  if (v17)
  {
    uint64_t v18 = 0;
  }
  else
  {
    id v23 = [self texture2DDescriptorWithPixelFormat:10 width:a1 height:a2 mipmapped:0];
    [v23 setUsage:4];
    [v23 setStorageMode:2];
    sub_10004FD3C(0, 3, 0);
    uint64_t v18 = _swiftEmptyArrayStorage;
    uint64_t v24 = sub_10004A3C0(a1, a2, a3);
    if (v8)
    {
      swift_unknownObjectRelease();

      swift_release();
      type metadata accessor for FloatingLayerMaskManager();
      swift_deallocPartialClassInstance();
      return v9;
    }
    unint64_t v26 = _swiftEmptyArrayStorage[2];
    unint64_t v27 = _swiftEmptyArrayStorage[3];
    unint64_t v28 = v26 + 1;
    if (v26 >= v27 >> 1)
    {
      uint64_t v46 = v24;
      unint64_t v49 = _swiftEmptyArrayStorage[2];
      unint64_t v44 = v26 + 1;
      uint64_t v45 = v25;
      sub_10004FD3C(v27 > 1, v26 + 1, 1);
      uint64_t v24 = v46;
      unint64_t v26 = v49;
      unint64_t v28 = v44;
      uint64_t v25 = v45;
      uint64_t v18 = _swiftEmptyArrayStorage;
    }
    _swiftEmptyArrayStorage[2] = v28;
    uint64_t v29 = &_swiftEmptyArrayStorage[2 * v26];
    v29[4] = v24;
    v29[5] = v25;
    uint64_t v30 = sub_10004A3C0(a1, a2, a3);
    unint64_t v32 = _swiftEmptyArrayStorage[2];
    unint64_t v33 = _swiftEmptyArrayStorage[3];
    unint64_t v34 = v32 + 1;
    if (v32 >= v33 >> 1)
    {
      uint64_t v47 = v30;
      unint64_t v50 = _swiftEmptyArrayStorage[2];
      unint64_t v44 = v32 + 1;
      uint64_t v45 = v31;
      sub_10004FD3C(v33 > 1, v32 + 1, 1);
      uint64_t v30 = v47;
      unint64_t v32 = v50;
      unint64_t v34 = v44;
      uint64_t v31 = v45;
    }
    _swiftEmptyArrayStorage[2] = v34;
    uint64_t v35 = &_swiftEmptyArrayStorage[2 * v32];
    v35[4] = v30;
    v35[5] = v31;
    unint64_t v37 = sub_10004A3C0(a1, a2, a3);
    uint64_t v39 = v38;
    unint64_t v40 = _swiftEmptyArrayStorage[2];
    unint64_t v41 = _swiftEmptyArrayStorage[3];
    unint64_t v42 = v40 + 1;
    if (v40 >= v41 >> 1)
    {
      unint64_t v48 = _swiftEmptyArrayStorage[2];
      unint64_t v51 = v40 + 1;
      sub_10004FD3C(v41 > 1, v40 + 1, 1);
      unint64_t v40 = v48;
      unint64_t v42 = v51;
    }
    _swiftEmptyArrayStorage[2] = v42;
    uint64_t v43 = &_swiftEmptyArrayStorage[2 * v40];
    v43[4] = v37;
    v43[5] = v39;
  }
  *(void *)(v9 + 32) = v18;
  uint64_t v19 = *(void **)(v9 + 16);
  objc_msgSend(v19, "setSourceLayer:", a4, v44, v45);
  objc_msgSend(v19, "setPosition:", a6 * 0.5, a7 * 0.5);
  objc_msgSend(v19, "setBounds:", 0.0, 0.0, a6, a7);
  objc_msgSend(v19, "setAnchorPoint:", 0.0, 0.0);
  uint64_t v20 = *(void **)(v9 + 24);
  objc_msgSend(v20, "setPosition:", 0.0, 0.0);
  objc_msgSend(v20, "setBounds:", 0.0, 0.0, a6, a7);
  id v21 = v19;
  id v22 = v20;
  [v21 setMask:v22];

  swift_unknownObjectRelease();
  return v9;
}

uint64_t sub_100044098()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (!v1) {
    goto LABEL_10;
  }
  unint64_t v2 = *(void *)(v0 + 40);
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v3 = *(void *)(v1 + 16);
  if (v2 >= v3)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    uint64_t result = sub_10005E308();
    __break(1u);
    return result;
  }
  uint64_t v4 = v1 + 16 * v2;
  uint64_t v5 = *(void *)(v4 + 32);
  uint64_t v6 = *(void **)(v4 + 40);
  if (v2 + 1 == v3) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = v2 + 1;
  }
  *(void *)(v0 + 40) = v7;
  swift_unknownObjectRetain();
  id v8 = v6;
  return v5;
}

uint64_t sub_100044160()
{
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 49, 7);
}

uint64_t sub_1000441A8()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000441F0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100026BFC;
  return sub_100038964(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1000442B8(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = sub_10005E448(), result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    uint64_t v9 = a1 + 7;
    for (unint64_t i = a2 + 7; ; i += 2)
    {
      BOOL v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (sub_10005E448() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_100044380(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_100044390(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_1000443CC(uint64_t a1, int *a2)
{
  char v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000444A8;
  return v6(a1);
}

uint64_t sub_1000444A8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000445A0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000445C8(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_100044640(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  sub_10005E138();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_100044640(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100044714(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1000095C4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1000095C4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_100020C8C((uint64_t)v12);
  return v7;
}

uint64_t sub_100044714(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_10005E148();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1000448D0(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_10005E238();
  if (!v8)
  {
    sub_10005E2F8();
    __break(1u);
LABEL_17:
    uint64_t result = sub_10005E378();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1000448D0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_100044968(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100044B48(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100044B48(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_100044968(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_100044AE0(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_10005E208();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      sub_10005E2F8();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_10005DF08();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    sub_10005E378();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)sub_10005E2F8();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_100044AE0(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100008F4C(&qword_100099B68);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_100044B48(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100008F4C(&qword_100099B68);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_10005E378();
  __break(1u);
  return result;
}

unsigned char **sub_100044C98(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = *result;
  *unint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t sub_100044CA8(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for ContinuousRenderingToken()
{
  return self;
}

uint64_t type metadata accessor for WallpaperRenderingCoordinator()
{
  return self;
}

uint64_t type metadata accessor for WallpaperEditingCoordinator()
{
  return self;
}

uint64_t sub_100044D3C()
{
  return type metadata accessor for Resources();
}

uint64_t type metadata accessor for Resources()
{
  uint64_t result = qword_1000998F8;
  if (!qword_1000998F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100044D90()
{
  uint64_t result = sub_10005DCD8();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for FloatingLayerMaskManager()
{
  return self;
}

id sub_100044E5C(void *a1, void *a2, uint64_t a3, void *a4, void *a5, uint64_t a6, char a7)
{
  if (a7)
  {
    return (id)swift_bridgeObjectRetain();
  }
  else
  {
    id v10 = a5;
    id v11 = a1;
    id v12 = a2;
    swift_bridgeObjectRetain();
    return a4;
  }
}

void destroy for WallpaperEditingCoordinator.EditingLookResources(uint64_t a1)
{
}

void sub_100044F08(void *a1, void *a2, uint64_t a3, void *a4, void *a5, uint64_t a6, char a7)
{
  if (a7)
  {
    swift_bridgeObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for WallpaperEditingCoordinator.EditingLookResources(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  unint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void **)(a2 + 24);
  uint64_t v7 = *(void **)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 41);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 40);
  sub_100044E5C(*(void **)a2, v4, v5, v6, v7, v9, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 41) = v8;
  return a1;
}

uint64_t assignWithCopy for WallpaperEditingCoordinator.EditingLookResources(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  unint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void **)(a2 + 24);
  uint64_t v7 = *(void **)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 41);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 40);
  sub_100044E5C(*(void **)a2, v4, v5, v6, v7, v9, v8);
  id v10 = *(void **)a1;
  id v11 = *(void **)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void **)(a1 + 24);
  uint64_t v14 = *(void **)(a1 + 32);
  char v15 = *(unsigned char *)(a1 + 41);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  uint64_t v16 = *(unsigned __int8 *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 41) = v8;
  sub_100044F08(v10, v11, v12, v13, v14, v16, v15);
  return a1;
}

__n128 initializeWithTake for WallpaperEditingCoordinator.EditingLookResources(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for WallpaperEditingCoordinator.EditingLookResources(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 40);
  char v5 = *(unsigned char *)(a2 + 41);
  unint64_t v6 = *(void **)a1;
  char v8 = *(void **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v9 = *(void **)(a1 + 24);
  id v10 = *(void **)(a1 + 32);
  char v11 = *(unsigned char *)(a1 + 41);
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(void *)(a1 + 32) = v3;
  uint64_t v13 = *(unsigned __int8 *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 41) = v5;
  sub_100044F08(v6, v8, v7, v9, v10, v13, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for WallpaperEditingCoordinator.EditingLookResources(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 42)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WallpaperEditingCoordinator.EditingLookResources(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 42) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 42) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 41) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000451AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 41);
}

uint64_t sub_1000451B4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 41) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for WallpaperEditingCoordinator.EditingLookResources()
{
  return &type metadata for WallpaperEditingCoordinator.EditingLookResources;
}

void *initializeBufferWithCopyOfBuffer for WallpaperEditingCoordinator.LookSelectionStyle(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for WallpaperEditingCoordinator.LookSelectionStyle()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for WallpaperEditingCoordinator.LookSelectionStyle(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for WallpaperEditingCoordinator.LookSelectionStyle(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void *assignWithTake for WallpaperEditingCoordinator.LookSelectionStyle(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WallpaperEditingCoordinator.LookSelectionStyle(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for WallpaperEditingCoordinator.LookSelectionStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

uint64_t sub_100045328(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_100045340(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *__n128 result = v2;
  return result;
}

ValueMetadata *type metadata accessor for WallpaperEditingCoordinator.LookSelectionStyle()
{
  return &type metadata for WallpaperEditingCoordinator.LookSelectionStyle;
}

uint64_t sub_100045370(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100045398(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  uint64_t v5 = *a1 + 8;
  uint64_t result = sub_10005E138();
  *a1 = v5;
  return result;
}

uint64_t sub_1000453F0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100008F4C(&qword_100098590);
  char v36 = a2;
  uint64_t v6 = sub_10005E348();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    id v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
    sub_10005E4F8();
    sub_10005DEB8();
    uint64_t result = sub_10005E528();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *id v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100045708(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100008F4C(&qword_100099AC8);
  char v47 = a2;
  uint64_t v6 = sub_10005E348();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v43 = v3;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v45 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v44 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v46 = v5;
    while (1)
    {
      if (v10)
      {
        uint64_t v48 = (v10 - 1) & v10;
        int64_t v49 = v13;
        unint64_t v20 = __clz(__rbit64(v10)) | (v13 << 6);
      }
      else
      {
        int64_t v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v21 >= v44) {
          goto LABEL_33;
        }
        unint64_t v22 = v45[v21];
        int64_t v23 = v13 + 1;
        if (!v22)
        {
          int64_t v23 = v13 + 2;
          if (v13 + 2 >= v44) {
            goto LABEL_33;
          }
          unint64_t v22 = v45[v23];
          if (!v22)
          {
            uint64_t v24 = v13 + 3;
            if (v13 + 3 >= v44)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v43;
              if (v47)
              {
                uint64_t v42 = 1 << *(unsigned char *)(v5 + 32);
                if (v42 >= 64) {
                  bzero(v45, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v45 = -1 << v42;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v45[v24];
            if (!v22)
            {
              while (1)
              {
                int64_t v23 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v23 >= v44) {
                  goto LABEL_33;
                }
                unint64_t v22 = v45[v23];
                ++v24;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v23 = v13 + 3;
          }
        }
LABEL_30:
        uint64_t v48 = (v22 - 1) & v22;
        int64_t v49 = v23;
        unint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
      }
      uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
      uint64_t v32 = *(void *)(v5 + 56) + 48 * v20;
      int64_t v34 = *(void **)v32;
      uint64_t v33 = *(void **)(v32 + 8);
      uint64_t v35 = *(void *)(v32 + 16);
      char v36 = *(void **)(v32 + 24);
      unint64_t v37 = *(void **)(v32 + 32);
      char v50 = *(unsigned char *)(v32 + 40);
      if ((v47 & 1) == 0)
      {
        id v38 = v37;
        swift_bridgeObjectRetain();
        id v39 = v34;
        id v40 = v33;
        swift_bridgeObjectRetain();
        id v41 = v36;
      }
      sub_10005E4F8();
      sub_10005DEB8();
      uint64_t result = sub_10005E528();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *uint64_t v18 = v31;
      v18[1] = v30;
      uint64_t v19 = *(void *)(v7 + 56) + 48 * v17;
      *(void *)uint64_t v19 = v34;
      *(void *)(v19 + 8) = v33;
      *(void *)(v19 + 16) = v35;
      *(void *)(v19 + 24) = v36;
      *(void *)(v19 + 32) = v37;
      *(unsigned char *)(v19 + 40) = v50;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v46;
      unint64_t v10 = v48;
      int64_t v13 = v49;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100045A6C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100008F4C((uint64_t *)&unk_100099B50);
  char v40 = a2;
  uint64_t v6 = sub_10005E348();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v39 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v37 = v2;
  int64_t v38 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v38) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v39 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v38) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v39 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v38)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v39 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v38) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v39 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = *(void **)(*(void *)(v5 + 48) + 8 * v20);
    uint64_t v30 = *(void *)(v5 + 56) + 32 * v20;
    char v31 = *(unsigned char *)v30;
    uint64_t v32 = *(void *)(v30 + 8);
    uint64_t v33 = *(void *)(v30 + 16);
    uint64_t v34 = *(void *)(v30 + 24);
    if ((v40 & 1) == 0)
    {
      id v35 = v29;
      swift_retain();
      swift_bridgeObjectRetain();
    }
    uint64_t result = sub_10005E108(*(void *)(v7 + 40));
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(void *)(*(void *)(v7 + 48) + 8 * v17) = v29;
    uint64_t v18 = *(void *)(v7 + 56) + 32 * v17;
    *(unsigned char *)uint64_t v18 = v31;
    *(void *)(v18 + 8) = v32;
    *(void *)(v18 + 16) = v33;
    *(void *)(v18 + 24) = v34;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v37;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v36;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100045D7C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100008F4C(&qword_1000985B0);
  uint64_t v6 = sub_10005E348();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      sub_100014878((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_100014898(v25, (uint64_t)&v38);
      sub_1000095C4(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = sub_10005E1A8(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)sub_100014878(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100046094(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100008F4C(&qword_1000985A0);
  uint64_t v6 = sub_10005E348();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    char v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      swift_retain();
    }
    uint64_t result = sub_10005E108(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10004636C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100008F4C(&qword_100098598);
  char v39 = a2;
  uint64_t v6 = sub_10005E348();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v37 = v2;
  uint64_t v38 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v37;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = *(void **)(*(void *)(v5 + 48) + 8 * v21);
    uint64_t v31 = *(void *)(v5 + 56) + 24 * v21;
    long long v40 = *(_OWORD *)v31;
    uint64_t v32 = *(void *)(v31 + 16);
    if ((v39 & 1) == 0)
    {
      swift_retain();
      id v33 = v30;
      id v34 = (id)v40;
      id v35 = *((id *)&v40 + 1);
    }
    uint64_t result = sub_10005E108(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(void *)(*(void *)(v7 + 48) + 8 * v18) = v30;
    uint64_t v19 = *(void *)(v7 + 56) + 24 * v18;
    *(_OWORD *)uint64_t v19 = v40;
    *(void *)(v19 + 16) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v37;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v36;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100046680(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100008F4C((uint64_t *)&unk_100098600);
  uint64_t result = sub_10005E348();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    id v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v32 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_33;
        }
        unint64_t v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v21 = v33[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *id v33 = -1 << v31;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v32) {
                  goto LABEL_33;
                }
                unint64_t v21 = v33[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = 8 * v19;
      Swift::UInt v28 = *(void *)(*(void *)(v5 + 48) + v27);
      uint64_t v29 = *(void **)(*(void *)(v5 + 56) + v27);
      if ((a2 & 1) == 0) {
        id v30 = v29;
      }
      sub_10005E4F8();
      sub_10005E508(v28);
      uint64_t result = sub_10005E528();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t v17 = 8 * v16;
      *(void *)(*(void *)(v7 + 48) + v17) = v28;
      *(void *)(*(void *)(v7 + 56) + v17) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

void sub_100046954(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = sub_10005E198();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v11 = *(void *)(a2 + 40);
        id v12 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v13 = sub_10005E108(v11);

        Swift::Int v14 = v13 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v3 >= v14)
          {
LABEL_16:
            uint64_t v17 = *(void *)(a2 + 48);
            unint64_t v18 = (void *)(v17 + 8 * v3);
            unint64_t v19 = (void *)(v17 + 8 * v6);
            if (v3 != v6 || v18 >= v19 + 1) {
              *unint64_t v18 = *v19;
            }
            uint64_t v20 = *(void *)(a2 + 56);
            unint64_t v21 = (_OWORD *)(v20 + 32 * v3);
            int64_t v22 = (_OWORD *)(v20 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v21 >= v22 + 2))
            {
              long long v10 = v22[1];
              *unint64_t v21 = *v22;
              v21[1] = v10;
              int64_t v3 = v6;
            }
          }
        }
        else if (v14 >= v9 || v3 >= v14)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    char v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v24 = *v23;
    uint64_t v25 = (-1 << v3) - 1;
  }
  else
  {
    char v23 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v25 = *v23;
    uint64_t v24 = (-1 << a1) - 1;
  }
  *char v23 = v25 & v24;
  uint64_t v26 = *(void *)(a2 + 16);
  BOOL v27 = __OFSUB__(v26, 1);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_100046B08(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = sub_10005E198();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = sub_10005E108(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v3);
            unint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *uint64_t v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (void *)(v19 + 8 * v3);
            unint64_t v21 = (void *)(v19 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *uint64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << a1) - 1;
  }
  *int64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_100046CBC(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = sub_10005E198();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v11 = *(void *)(a2 + 40);
        id v12 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v13 = sub_10005E108(v11);

        Swift::Int v14 = v13 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v14 >= v9 && v3 >= v14)
          {
LABEL_16:
            uint64_t v17 = *(void *)(a2 + 48);
            unint64_t v18 = (void *)(v17 + 8 * v3);
            uint64_t v19 = (void *)(v17 + 8 * v6);
            if (v3 != v6 || v18 >= v19 + 1) {
              *unint64_t v18 = *v19;
            }
            uint64_t v20 = *(void *)(a2 + 56);
            unint64_t v21 = v20 + 24 * v3;
            int64_t v22 = (long long *)(v20 + 24 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v21 >= (unint64_t)v22 + 24))
            {
              long long v10 = *v22;
              *(void *)(v21 + 16) = *((void *)v22 + 2);
              *(_OWORD *)unint64_t v21 = v10;
              int64_t v3 = v6;
            }
          }
        }
        else if (v14 >= v9 || v3 >= v14)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v24 = *v23;
    uint64_t v25 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v23 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v25 = *v23;
    uint64_t v24 = (-1 << a1) - 1;
  }
  *uint64_t v23 = v25 & v24;
  uint64_t v26 = *(void *)(a2 + 16);
  BOOL v27 = __OFSUB__(v26, 1);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_100046E84(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = sub_10005E198();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_10005E4F8();
        swift_bridgeObjectRetain();
        sub_10005DEB8();
        Swift::Int v11 = sub_10005E528();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          Swift::Int v14 = (_OWORD *)(v13 + 16 * v3);
          unint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            _OWORD *v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          uint64_t v17 = (long long *)(v16 + 48 * v3);
          unint64_t v18 = (long long *)(v16 + 48 * v6);
          if (48 * v3 < (uint64_t)(48 * v6) || v17 >= v18 + 3 || (v19 = v3 == v6, int64_t v3 = v6, !v19))
          {
            long long v9 = *v18;
            long long v10 = v18[2];
            v17[1] = v18[1];
            v17[2] = v10;
            *uint64_t v17 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

id sub_10004707C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6)
{
  uint64_t v7 = (void **)v6;
  uint64_t v13 = (void *)*v6;
  unint64_t v15 = sub_1000121A8((uint64_t)a5);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a6 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v7;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = v21[7] + 32 * v15;
      swift_bridgeObjectRelease();
      id result = (id)swift_release();
      *(unsigned char *)uint64_t v22 = a1;
      *(void *)(v22 + 8) = a2;
      *(void *)(v22 + 16) = a3;
      *(void *)(v22 + 24) = a4;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a6 & 1) == 0)
  {
    sub_100047A8C();
    goto LABEL_7;
  }
  sub_100045A6C(v18, a6 & 1);
  unint64_t v24 = sub_1000121A8((uint64_t)a5);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_15:
    sub_10000991C(0, &qword_1000985F8);
    id result = (id)sub_10005E478();
    __break(1u);
    return result;
  }
  unint64_t v15 = v24;
  uint64_t v21 = *v7;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100047624(v15, (uint64_t)a5, a1, a2, a3, a4, v21);

  return a5;
}

id sub_100047200(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_1000122DC((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100047E4C();
LABEL_7:
    unint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];
      id result = (id)swift_release();
      *(void *)(v16 + 8 * v9) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_100046094(v12, a3 & 1);
  unint64_t v18 = sub_1000122DC((uint64_t)a2);
  if ((v13 & 1) != (v19 & 1))
  {
LABEL_17:
    sub_10000991C(0, (unint64_t *)&qword_100098528);
    id result = (id)sub_10005E478();
    __break(1u);
    return result;
  }
  unint64_t v9 = v18;
  unint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v20 = 8 * v9;
  *(void *)(v15[6] + v20) = a2;
  *(void *)(v15[7] + v20) = a1;
  uint64_t v21 = v15[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  _OWORD v15[2] = v23;

  return a2;
}

id sub_100047374(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5)
{
  unint64_t v6 = (void **)v5;
  BOOL v11 = (void *)*v5;
  unint64_t v13 = sub_1000122DC((uint64_t)a4);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v17 = v12;
  uint64_t v18 = v11[3];
  if (v18 >= v16 && (a5 & 1) != 0)
  {
LABEL_7:
    char v19 = *v6;
    if (v17)
    {
LABEL_8:
      uint64_t v20 = v19[7] + 24 * v13;
      uint64_t v21 = *(void **)v20;

      id result = (id)swift_release();
      *(void *)uint64_t v20 = a1;
      *(void *)(v20 + 8) = a2;
      *(void *)(v20 + 16) = a3;
      return result;
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a5 & 1) == 0)
  {
    sub_100047FF8();
    goto LABEL_7;
  }
  sub_10004636C(v16, a5 & 1);
  unint64_t v23 = sub_1000122DC((uint64_t)a4);
  if ((v17 & 1) != (v24 & 1))
  {
LABEL_15:
    sub_10000991C(0, (unint64_t *)&qword_100098528);
    id result = (id)sub_10005E478();
    __break(1u);
    return result;
  }
  unint64_t v13 = v23;
  char v19 = *v6;
  if (v17) {
    goto LABEL_8;
  }
LABEL_11:
  sub_100047674(v13, (uint64_t)a4, a1, a2, a3, v19);

  return a4;
}

void sub_1000474E8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100012270(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1000481DC();
LABEL_7:
    uint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];

      *(void *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v20 = 8 * v10;
    *(void *)(v16[6] + v20) = a2;
    *(void *)(v16[7] + v20) = a1;
    uint64_t v21 = v16[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (!v22)
    {
      void v16[2] = v23;
      return;
    }
    goto LABEL_14;
  }
  sub_100046680(v13, a3 & 1);
  uint64_t v18 = sub_100012270(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    unint64_t v10 = v18;
    uint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for UIInterfaceOrientation(0);
  sub_10005E478();
  __break(1u);
}

unint64_t sub_100047624(unint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1 << result;
  *(void *)(a7[6] + 8 * result) = a2;
  uint64_t v7 = a7[7] + 32 * result;
  *(unsigned char *)uint64_t v7 = a3;
  *(void *)(v7 + 8) = a4;
  *(void *)(v7 + 16) = a5;
  *(void *)(v7 + 24) = a6;
  uint64_t v8 = a7[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a7[2] = v10;
  }
  return result;
}

unint64_t sub_100047674(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  *(void *)(a6[6] + 8 * result) = a2;
  unint64_t v6 = (void *)(a6[7] + 24 * result);
  *unint64_t v6 = a3;
  v6[1] = a4;
  v6[2] = a5;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

void *sub_1000476C4()
{
  uint64_t v1 = v0;
  sub_100008F4C(&qword_100098590);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_10005E338();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_unknownObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10004787C()
{
  sub_100008F4C(&qword_100099AC8);
  id v34 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = sub_10005E338();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v1 + 16);
  if (!v4)
  {
LABEL_26:
    id result = (id)swift_release();
    *id v34 = v3;
    return result;
  }
  id result = (id)(v2 + 64);
  unint64_t v6 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6)
  {
    id result = memmove(result, (const void *)(v1 + 64), 8 * v6);
    uint64_t v4 = *(void *)(v1 + 16);
  }
  uint64_t v35 = v1 + 64;
  int64_t v8 = 0;
  *(void *)(v3 + 16) = v4;
  uint64_t v9 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v1 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    int64_t v31 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v31 >= v12) {
      goto LABEL_26;
    }
    unint64_t v32 = *(void *)(v35 + 8 * v31);
    ++v8;
    if (!v32)
    {
      int64_t v8 = v31 + 1;
      if (v31 + 1 >= v12) {
        goto LABEL_26;
      }
      unint64_t v32 = *(void *)(v35 + 8 * v8);
      if (!v32) {
        break;
      }
    }
LABEL_25:
    unint64_t v11 = (v32 - 1) & v32;
    unint64_t v14 = __clz(__rbit64(v32)) + (v8 << 6);
LABEL_12:
    uint64_t v15 = 16 * v14;
    uint64_t v16 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v14);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = 48 * v14;
    uint64_t v20 = *(void *)(v1 + 56) + v19;
    int64_t v22 = *(void **)v20;
    uint64_t v21 = *(void **)(v20 + 8);
    uint64_t v24 = *(void *)(v20 + 16);
    unint64_t v23 = *(void **)(v20 + 24);
    char v25 = *(void **)(v20 + 32);
    LOBYTE(v20) = *(unsigned char *)(v20 + 40);
    uint64_t v26 = (void *)(*(void *)(v3 + 48) + v15);
    void *v26 = v17;
    v26[1] = v18;
    uint64_t v27 = *(void *)(v3 + 56) + v19;
    *(void *)uint64_t v27 = v22;
    *(void *)(v27 + 8) = v21;
    *(void *)(v27 + 16) = v24;
    *(void *)(v27 + 24) = v23;
    *(void *)(v27 + 32) = v25;
    *(unsigned char *)(v27 + 40) = v20;
    id v28 = v25;
    swift_bridgeObjectRetain();
    id v29 = v22;
    id v30 = v21;
    swift_bridgeObjectRetain();
    id result = v23;
  }
  int64_t v33 = v31 + 2;
  if (v33 >= v12) {
    goto LABEL_26;
  }
  unint64_t v32 = *(void *)(v35 + 8 * v33);
  if (v32)
  {
    int64_t v8 = v33;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v8 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_26;
    }
    unint64_t v32 = *(void *)(v35 + 8 * v8);
    ++v33;
    if (v32) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100047A8C()
{
  uint64_t v1 = v0;
  sub_100008F4C((uint64_t *)&unk_100099B50);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_10005E338();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    char v20 = *(unsigned char *)v19;
    uint64_t v22 = *(void *)(v19 + 8);
    uint64_t v21 = *(void *)(v19 + 16);
    uint64_t v23 = *(void *)(v19 + 24);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v24 = *(void *)(v4 + 56) + v18;
    *(unsigned char *)uint64_t v24 = v20;
    *(void *)(v24 + 8) = v22;
    *(void *)(v24 + 16) = v21;
    *(void *)(v24 + 24) = v23;
    id v25 = v17;
    swift_retain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  unint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100047C64()
{
  uint64_t v1 = v0;
  sub_100008F4C(&qword_1000985B0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_10005E338();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_100014898(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_1000095C4(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    id result = sub_100014878(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100047E4C()
{
  uint64_t v1 = v0;
  sub_100008F4C(&qword_1000985A0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_10005E338();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = (void *)swift_retain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100047FF8()
{
  uint64_t v1 = v0;
  sub_100008F4C(&qword_100098598);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_10005E338();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 24 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    uint64_t v20 = *(void *)(v19 + 16);
    long long v28 = *(_OWORD *)v19;
    long long v21 = *(_OWORD *)v19;
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v22 = *(void *)(v4 + 56) + v18;
    *(_OWORD *)uint64_t v22 = v21;
    *(void *)(v22 + 16) = v20;
    swift_retain();
    id v23 = v17;
    id v24 = (id)v28;
    id result = *((id *)&v28 + 1);
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1000481DC()
{
  uint64_t v1 = v0;
  sub_100008F4C((uint64_t *)&unk_100098600);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_10005E338();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100048380(uint64_t *a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  switch(v5 >> 62)
  {
    case 1uLL:
      uint64_t v15 = v5 & 0x3FFFFFFFFFFFFFFFLL;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v17 = v6 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_13;
      }
      if (v17 < (int)v6) {
        goto LABEL_21;
      }
      if (sub_10005D8A8() && __OFSUB__((int)v6, sub_10005D8D8())) {
        goto LABEL_22;
      }
      sub_10005D8E8();
      swift_allocObject();
      uint64_t v26 = sub_10005D888();
      swift_release();
      uint64_t v15 = v26;
      uint64_t v17 = v6 >> 32;
LABEL_13:
      if (v17 < (int)v6) {
        goto LABEL_19;
      }
      uint64_t v27 = sub_10005D8A8();
      if (!v27) {
        goto LABEL_24;
      }
      uint64_t v28 = v27;
      uint64_t v29 = sub_10005D8D8();
      if (__OFSUB__((int)v6, v29)) {
        goto LABEL_20;
      }
      uint64_t v30 = v28 + (int)v6 - v29;
      sub_10005D8C8();
      swift_beginAccess();
      uint64_t v31 = *a3;
      sub_10004B0D8(a4, a5, &v34);
      [a2 getBytes:v30 bytesPerRow:v31 fromRegion:&v34 mipmapLevel:0];
      uint64_t result = swift_unknownObjectRelease();
      *a1 = v6;
      a1[1] = v15 | 0x4000000000000000;
      break;
    case 2uLL:
      *(void *)&long long v35 = *a1;
      *((void *)&v35 + 1) = v5 & 0x3FFFFFFFFFFFFFFFLL;
      sub_10005DA38();
      uint64_t v18 = *((void *)&v35 + 1);
      uint64_t v19 = *(void *)(v6 + 16);
      uint64_t v20 = sub_10005D8A8();
      if (!v20)
      {
        __break(1u);
LABEL_24:
        __break(1u);
        JUMPOUT(0x1000487A0);
      }
      uint64_t v21 = v20;
      uint64_t v22 = sub_10005D8D8();
      if (__OFSUB__(v19, v22))
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
      }
      uint64_t v23 = v21 + v19 - v22;
      sub_10005D8C8();
      swift_beginAccess();
      uint64_t v24 = *a3;
      sub_10004B0D8(a4, a5, &v34);
      [a2 getBytes:v23 bytesPerRow:v24 fromRegion:&v34 mipmapLevel:0];
      uint64_t result = swift_unknownObjectRelease();
      *a1 = v6;
      a1[1] = v18 | 0x8000000000000000;
      break;
    case 3uLL:
      *(void *)((char *)&v35 + 7) = 0;
      *(void *)&long long v35 = 0;
      swift_beginAccess();
      uint64_t v25 = *a3;
      sub_10004B0D8(a4, a5, &v34);
      [a2 getBytes:&v35 bytesPerRow:v25 fromRegion:&v34 mipmapLevel:0];
      return swift_unknownObjectRelease();
    default:
      *(void *)&long long v35 = *a1;
      WORD4(v35) = v5;
      BYTE10(v35) = BYTE2(v5);
      BYTE11(v35) = BYTE3(v5);
      BYTE12(v35) = BYTE4(v5);
      BYTE13(v35) = BYTE5(v5);
      BYTE14(v35) = BYTE6(v5);
      swift_beginAccess();
      uint64_t v12 = *a3;
      sub_10004B0D8(a4, a5, &v34);
      [a2 getBytes:&v35 bytesPerRow:v12 fromRegion:&v34 mipmapLevel:0];
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v14 = DWORD2(v35) | ((unint64_t)BYTE12(v35) << 32) | ((unint64_t)BYTE13(v35) << 40) | ((unint64_t)BYTE14(v35) << 48);
      *a1 = v35;
      a1[1] = v14;
      return result;
  }
  return result;
}

uint64_t sub_1000487B0(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v34 = v3;
  if (!v3) {
    return swift_bridgeObjectRelease_n();
  }
  unint64_t v4 = 0;
  for (uint64_t i = a1 + 48; ; i += 64)
  {
    if (v4 >= *(void *)(a1 + 16))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      sub_10005E478();
      __break(1u);
      goto LABEL_24;
    }
    unint64_t v7 = *(void **)i;
    uint64_t v6 = *(void **)(i + 8);
    char v38 = *(unsigned char *)(i + 40);
    int64_t v8 = *(void **)(i + 24);
    int64_t v9 = *(void **)(i + 32);
    uint64_t v10 = *(void *)(i + 16);
    uint64_t v11 = *(void *)(i - 16);
    uint64_t v12 = *(void *)(i - 8);
    swift_bridgeObjectRetain();
    id v13 = v7;
    id v39 = v6;
    swift_bridgeObjectRetain();
    id v14 = v8;
    id v15 = v9;
    if (!v12) {
      return swift_bridgeObjectRelease_n();
    }
    unint64_t v32 = v15;
    int64_t v33 = v14;
    uint64_t v36 = v13;
    uint64_t v37 = v10;
    uint64_t v16 = (void *)*a3;
    unint64_t v18 = sub_1000121F8(v11, v12);
    uint64_t v19 = v16[2];
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      goto LABEL_21;
    }
    char v22 = v17;
    if (v16[3] < v21) {
      break;
    }
    if (a2)
    {
      if (v17) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_10004787C();
      if (v22) {
        goto LABEL_16;
      }
    }
LABEL_12:
    uint64_t v25 = (void *)*a3;
    *(void *)(*a3 + 8 * (v18 >> 6) + 64) |= 1 << v18;
    uint64_t v26 = (uint64_t *)(v25[6] + 16 * v18);
    uint64_t *v26 = v11;
    v26[1] = v12;
    uint64_t v27 = v25[7] + 48 * v18;
    *(void *)uint64_t v27 = v36;
    *(void *)(v27 + 8) = v39;
    *(void *)(v27 + 16) = v37;
    *(void *)(v27 + 24) = v8;
    *(void *)(v27 + 32) = v9;
    *(unsigned char *)(v27 + 40) = v38;
    uint64_t v28 = v25[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_22;
    }
    ++v4;
    _OWORD v25[2] = v30;
    a2 = 1;
    if (v34 == v4) {
      return swift_bridgeObjectRelease_n();
    }
  }
  sub_100045708(v21, a2 & 1);
  unint64_t v23 = sub_1000121F8(v11, v12);
  if ((v22 & 1) != (v24 & 1)) {
    goto LABEL_23;
  }
  unint64_t v18 = v23;
  if ((v22 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_16:
  swift_allocError();
  swift_willThrow();
  swift_errorRetain();
  sub_100008F4C(&qword_100099B60);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return swift_errorRelease();
  }
LABEL_24:
  sub_10005E1F8(30);
  v42._object = (void *)0x8000000100064E10;
  v42._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  sub_10005DEE8(v42);
  sub_10005E2A8();
  v43._uint64_t countAndFlagsBits = 39;
  v43._object = (void *)0xE100000000000000;
  sub_10005DEE8(v43);
  uint64_t result = sub_10005E308();
  __break(1u);
  return result;
}

uint64_t sub_100048B1C(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  sub_10005E4F8();
  swift_bridgeObjectRetain();
  sub_10005DEB8();
  Swift::Int v8 = sub_10005E528();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_10005E448() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      unint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_10005E448() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100048FAC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100048CCC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100008F4C(&qword_100099A88);
  uint64_t v3 = sub_10005E1E8();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      sub_10005E4F8();
      sub_10005DEB8();
      uint64_t result = sub_10005E528();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

Swift::Int sub_100048FAC(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100048CCC();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_100049148();
      goto LABEL_22;
    }
    sub_1000492FC();
  }
  uint64_t v11 = *v4;
  sub_10005E4F8();
  sub_10005DEB8();
  uint64_t result = sub_10005E528();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_10005E448(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_10005E468();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_10005E448();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *sub_100049148()
{
  uint64_t v1 = v0;
  sub_100008F4C(&qword_100099A88);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_10005E1D8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    BOOL v19 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000492FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100008F4C(&qword_100099A88);
  uint64_t v3 = sub_10005E1E8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    sub_10005E4F8();
    swift_bridgeObjectRetain();
    sub_10005DEB8();
    uint64_t result = sub_10005E528();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000495AC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  sub_10005E4F8();
  swift_bridgeObjectRetain();
  sub_10005DEB8();
  Swift::Int v6 = sub_10005E528();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (sub_10005E448() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      int64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (sub_10005E448() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100049148();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_10004973C(v8);
  *uint64_t v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t sub_10004973C(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = sub_10005E198();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        sub_10005E4F8();
        swift_bridgeObjectRetain();
        sub_10005DEB8();
        Swift::Int v10 = sub_10005E528();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v2);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            _OWORD *v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void (*sub_100049904(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  unint64_t v6 = malloc(0x58uLL);
  *a1 = v6;
  _OWORD v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_100049BF4(v6);
  v6[10] = sub_100049A24(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_1000499B0;
}

void sub_1000499B0(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  int64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 80))();
  swift_bridgeObjectRelease();
  v2(v1, 0);

  free(v1);
}

void (*sub_100049A24(void *a1, uint64_t a2, uint64_t a3, char a4))(void **a1)
{
  uint64_t v5 = v4;
  Swift::Int v10 = (char *)malloc(0x50uLL);
  *a1 = v10;
  *((void *)v10 + 7) = a3;
  *((void *)v10 + 8) = v4;
  *((void *)v10 + 6) = a2;
  uint64_t v11 = *v4;
  unint64_t v13 = sub_1000121F8(a2, a3);
  v10[41] = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      *((void *)v10 + 9) = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*v5 + 56) + 48 * v13;
        long long v20 = *(_OWORD *)v19;
        uint64_t v21 = *(void *)(v19 + 16);
        long long v22 = *(_OWORD *)(v19 + 24);
        char v23 = *(unsigned char *)(v19 + 40);
LABEL_12:
        *(_OWORD *)Swift::Int v10 = v20;
        *((void *)v10 + 2) = v21;
        *(_OWORD *)(v10 + 24) = v22;
        v10[40] = v23;
        return sub_100049B98;
      }
LABEL_11:
      uint64_t v21 = 0;
      char v23 = 0;
      long long v20 = 0uLL;
      long long v22 = 0uLL;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_10004787C();
      goto LABEL_7;
    }
    sub_100045708(v16, a4 & 1);
    unint64_t v24 = sub_1000121F8(a2, a3);
    if ((v17 & 1) == (v25 & 1))
    {
      unint64_t v13 = v24;
      *((void *)v10 + 9) = v24;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(void **))sub_10005E478();
  __break(1u);
  return result;
}

void sub_100049B98(void **a1)
{
  uint64_t v1 = (uint64_t)*a1;
  sub_100049C30(*a1, *((unsigned char *)*a1 + 41), (uint64_t *)(*a1)[8], (*a1)[9], (*a1)[6], (*a1)[7]);
  sub_10004B000(*(void **)v1, *(void **)(v1 + 8), *(void *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32));

  free((void *)v1);
}

uint64_t (*sub_100049BF4(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return sub_100049C24;
}

uint64_t sub_100049C24(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

void *sub_100049C30(void *result, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = (void *)*result;
  unint64_t v9 = (void *)result[1];
  uint64_t v10 = result[2];
  uint64_t v11 = (void *)result[3];
  char v12 = (void *)result[4];
  char v13 = *((unsigned char *)result + 40);
  if (*result)
  {
    uint64_t v14 = (void *)*a3;
    if (a2)
    {
      uint64_t v15 = v14[7] + 48 * a4;
      *(void *)uint64_t v15 = v8;
      *(void *)(v15 + 8) = v9;
      *(void *)(v15 + 16) = v10;
      *(void *)(v15 + 24) = v11;
      *(void *)(v15 + 32) = v12;
      *(unsigned char *)(v15 + 40) = v13;
    }
    else
    {
      v14[(a4 >> 6) + 8] |= 1 << a4;
      uint64_t v16 = (void *)(v14[6] + 16 * a4);
      *uint64_t v16 = a5;
      v16[1] = a6;
      uint64_t v17 = v14[7] + 48 * a4;
      *(void *)uint64_t v17 = v8;
      *(void *)(v17 + 8) = v9;
      *(void *)(v17 + 16) = v10;
      *(void *)(v17 + 24) = v11;
      *(void *)(v17 + 32) = v12;
      *(unsigned char *)(v17 + 40) = v13;
      uint64_t v18 = v14[2];
      BOOL v19 = __OFADD__(v18, 1);
      uint64_t v20 = v18 + 1;
      if (v19)
      {
        __break(1u);
        return result;
      }
      _OWORD v14[2] = v20;
      swift_bridgeObjectRetain();
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    sub_100046E84(a4, *a3);
  }

  return sub_10004B06C(v8, v9, v10, v11, v12);
}

uint64_t sub_100049D60(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100049E40;
  return v5(v2 + 32);
}

uint64_t sub_100049E40()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(unsigned char **)(*v0 + 16);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  *uint64_t v2 = *(unsigned char *)(v1 + 32);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

unint64_t sub_100049F54@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  if (a1 == 3)
  {
    id v7 = 0;
LABEL_10:
    id v3 = 0;
    goto LABEL_11;
  }
  if (a1 != 2)
  {
    id v7 = [objc_allocWithZone((Class)CALayer) init];
    objc_msgSend(v7, "setAnchorPoint:", 0.0, 0.0);
    if (qword_100097830 != -1) {
      swift_once();
    }
    sub_100008F4C((uint64_t *)&unk_1000992C0);
    Class isa = sub_10005DDE8().super.isa;
    [v7 setActions:isa];

    goto LABEL_10;
  }
  id v3 = [objc_allocWithZone((Class)CALayer) init];
  objc_msgSend(v3, "setAnchorPoint:", 0.0, 0.0);
  if (qword_100097830 != -1) {
    swift_once();
  }
  sub_100008F4C((uint64_t *)&unk_1000992C0);
  Class v4 = sub_10005DDE8().super.isa;
  [v3 setActions:v4];

  id v5 = v3;
  NSString v6 = sub_10005DE38();
  [v5 setName:v6];

  id v7 = 0;
LABEL_11:
  id v9 = [objc_allocWithZone((Class)UIView) init];
  id v10 = [v9 layer];
  NSString v11 = sub_10005DE38();
  [v10 setName:v11];

  id v12 = [objc_allocWithZone((Class)CALayer) init];
  NSString v13 = sub_10005DE38();
  [v12 setName:v13];

  objc_msgSend(v12, "setAnchorPoint:", 0.0, 0.0);
  if (qword_100097830 != -1) {
    swift_once();
  }
  sub_100008F4C((uint64_t *)&unk_1000992C0);
  Class v14 = sub_10005DDE8().super.isa;
  [v12 setActions:v14];

  unint64_t result = sub_100012AA0(_swiftEmptyArrayStorage);
  *(void *)a2 = v12;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = result;
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = v7;
  *(unsigned char *)(a2 + 40) = a1;
  return result;
}

void *sub_10004A2D0(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - (void)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_10;
  }
  id v5 = result;
  unint64_t result = _swiftEmptyArrayStorage;
  if (!v4) {
    return result;
  }
  unint64_t result = (void *)sub_10005E268();
  if (a2 < (uint64_t)v5 || v4 < 0)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  id v9 = *(void **)(a3 + 40);
  do
  {
    [v9 newTextureWithDescriptor:a4];
    sub_10005E248();
    sub_10005E288();
    sub_10005E298();
    sub_10005E258();
    --v4;
  }
  while (v4);
  return _swiftEmptyArrayStorage;
}

void *sub_10004A3C0(uint64_t a1, uint64_t a2, void *a3)
{
  sub_100008F4C(&qword_100099AE8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100060F00;
  IOSurfacePropertyKey v7 = IOSurfacePropertyKeyWidth;
  *(void *)(inited + 32) = IOSurfacePropertyKeyWidth;
  *(void *)(inited + 40) = a1;
  IOSurfacePropertyKey v8 = IOSurfacePropertyKeyHeight;
  *(void *)(inited + 64) = &type metadata for Int;
  *(void *)(inited + 72) = v8;
  *(void *)(inited + 80) = a2;
  IOSurfacePropertyKey v9 = IOSurfacePropertyKeyBytesPerElement;
  *(void *)(inited + 104) = &type metadata for Int;
  *(void *)(inited + 112) = v9;
  *(void *)(inited + 120) = 1;
  IOSurfacePropertyKey v10 = IOSurfacePropertyKeyPixelFormat;
  *(void *)(inited + 144) = &type metadata for Int;
  *(void *)(inited + 152) = v10;
  *(void *)(inited + 184) = &type metadata for UInt32;
  *(_DWORD *)(inited + 160) = 1093677112;
  NSString v11 = v7;
  id v12 = v8;
  NSString v13 = v9;
  Class v14 = v10;
  sub_10000AC38(inited);
  id v15 = objc_allocWithZone((Class)IOSurface);
  type metadata accessor for IOSurfacePropertyKey(0);
  sub_10004B4DC(&qword_100099AF0, type metadata accessor for IOSurfacePropertyKey);
  Class isa = sub_10005DDE8().super.isa;
  swift_bridgeObjectRelease();
  id v17 = [v15 initWithProperties:isa];

  if (v17)
  {
    uint64_t v18 = self;
    id v19 = v17;
    id v20 = [v18 texture2DDescriptorWithPixelFormat:10 width:a1 height:a2 mipmapped:0];
    [v20 setUsage:4];
    [v20 setStorageMode:2];
    id v21 = [a3 newTextureWithDescriptor:v20 iosurface:v19 plane:0];
    if (v21)
    {
      a3 = v21;
    }
    else
    {
      sub_10004B224();
      swift_allocError();
      *char v23 = 3;
      swift_willThrow();
    }
  }
  else
  {
    sub_10004B224();
    swift_allocError();
    *long long v22 = 3;
    swift_willThrow();
  }
  return a3;
}

id sub_10004A66C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  [a1 linearBacklightProgress];
  double v5 = v4;
  [a1 unlockProgress];
  double v7 = v6;
  id v8 = [a1 traitCollection];
  if (v8)
  {
    IOSurfacePropertyKey v9 = v8;
    id v10 = [v8 userInterfaceStyle];

    BOOL v11 = v10 == (id)2;
  }
  else
  {
    BOOL v11 = 0;
  }
  float v12 = v7;
  if (v12 < 0.0) {
    float v13 = 0.0;
  }
  else {
    float v13 = v7;
  }
  id v15 = [a1 deviceOrientation];
  id result = [a1 floatingObscurableBounds];
  *(float *)a2 = v13;
  float v14 = 1.0 - v5;
  *(float *)(a2 + 4) = v14;
  *(unsigned char *)(a2 + 8) = v11;
  *(_WORD *)(a2 + 9) = 0;
  *(_OWORD *)(a2 + 16) = xmmword_10005FEF0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 52) = 0;
  *(void *)(a2 + 56) = v15;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(unsigned char *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = v17;
  *(void *)(a2 + 112) = v18;
  *(void *)(a2 + 120) = v19;
  *(void *)(a2 + 128) = v20;
  return result;
}

void *sub_10004A790(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  sub_100008F4C((uint64_t *)&unk_100099B00);
  uint64_t inited = swift_initStackObject();
  uint64_t v9 = inited;
  *(_OWORD *)(inited + 16) = xmmword_100060F00;
  *(void *)(inited + 32) = kIOSurfaceWidth;
  *(void *)(inited + 40) = a1;
  *(void *)(inited + 64) = &type metadata for Int;
  *(void *)(inited + 72) = kIOSurfaceHeight;
  *(void *)(inited + 80) = a2;
  *(void *)(inited + 104) = &type metadata for Int;
  *(void *)(inited + 112) = kIOSurfaceBytesPerElement;
  uint64_t v10 = 4;
  if (a4 == 115) {
    uint64_t v10 = 8;
  }
  *(void *)(inited + 120) = v10;
  *(void *)(inited + 144) = &type metadata for Int;
  *(void *)(inited + 152) = kIOSurfacePixelFormat;
  if (a4 == 115) {
    int v11 = 1380411457;
  }
  else {
    int v11 = 1111970369;
  }
  *(void *)(inited + 184) = &type metadata for UInt32;
  *(_DWORD *)(inited + 160) = v11;
  CFStringRef v12 = (id)kIOSurfaceWidth;
  CFStringRef v13 = (id)kIOSurfaceHeight;
  CFStringRef v14 = (id)kIOSurfaceBytesPerElement;
  CFStringRef v15 = (id)kIOSurfacePixelFormat;
  sub_10000A8B0(v9);
  type metadata accessor for CFString(0);
  sub_10004B4DC(&qword_100097E20, type metadata accessor for CFString);
  CFDictionaryRef isa = sub_10005DDE8().super.isa;
  swift_bridgeObjectRelease();
  IOSurfaceRef v17 = IOSurfaceCreate(isa);

  if (v17)
  {
    uint64_t v18 = self;
    uint64_t v19 = v17;
    id v20 = [v18 texture2DDescriptorWithPixelFormat:a4 width:a1 height:a2 mipmapped:0];
    [v20 setUsage:4];
    id v21 = [a3 newTextureWithDescriptor:v20 iosurface:v19 plane:0];
    if (v21)
    {
      a3 = v21;
    }
    else
    {
      sub_10004B224();
      swift_allocError();
      *char v23 = 2;
      swift_willThrow();
    }
  }
  else
  {
    sub_10004B224();
    swift_allocError();
    *long long v22 = 2;
    swift_willThrow();
  }
  return a3;
}

uint64_t sub_10004AA28(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  *(void *)(a4 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(a4 + 48) = 0;
  if (qword_1000978A8 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_10005DCD8();
  sub_100008DB0(v7, (uint64_t)qword_10009FAA8);
  swift_bridgeObjectRetain_n();
  id v8 = sub_10005DCB8();
  os_log_type_t v9 = sub_10005E088();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446210;
    swift_bridgeObjectRetain();
    sub_100044640(a2, a3, &v12);
    sub_10005E138();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "ContinuousRenderingToken “%{public}s“ init", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *(void *)(a4 + 32) = a2;
  *(void *)(a4 + 40) = a3;
  *(void *)(a4 + 24) = &off_1000819A8;
  swift_unknownObjectWeakAssign();
  *(unsigned char *)(a4 + 48) = 0;
  return a4;
}

uint64_t sub_10004AC24(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  *(void *)(a4 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(a4 + 48) = 0;
  if (qword_1000978A8 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_10005DCD8();
  sub_100008DB0(v7, (uint64_t)qword_10009FAA8);
  swift_bridgeObjectRetain_n();
  id v8 = sub_10005DCB8();
  os_log_type_t v9 = sub_10005E088();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446210;
    swift_bridgeObjectRetain();
    sub_100044640(a2, a3, &v12);
    sub_10005E138();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "ContinuousRenderingToken “%{public}s“ init", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  *(void *)(a4 + 32) = a2;
  *(void *)(a4 + 40) = a3;
  *(void *)(a4 + 24) = &off_100081998;
  swift_unknownObjectWeakAssign();
  *(unsigned char *)(a4 + 48) = 0;
  return a4;
}

uint64_t sub_10004AE1C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004AE2C(uint64_t a1, void (*a2)(void, void, void, void, void, void), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 96);
  a2(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 52));
  a3(v5, v6, v7, v8, v9, v10);
  return a1;
}

void sub_10004AEC0(void *a1)
{
  sub_10004240C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 88), *(void *)(v1 + 96), *(void **)(v1 + 104), *(void *)(v1 + 112));
}

uint64_t sub_10004AF04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10004AF14()
{
  return swift_release();
}

uint64_t sub_10004AF1C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004AF58()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_10004AFC0()
{
  return sub_100042894(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(CGColorSpace **)(v0 + 104));
}

void sub_10004B000(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  if (a1)
  {

    swift_bridgeObjectRelease();
  }
}

id sub_10004B06C(id result, void *a2, uint64_t a3, void *a4, void *a5)
{
  if (result)
  {
    uint64_t v6 = result;
    id v7 = a5;
    id v8 = v6;
    id v9 = a2;
    swift_bridgeObjectRetain();
    return a4;
  }
  return result;
}

uint64_t sub_10004B0D8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = result;
  a3[4] = a2;
  a3[5] = 1;
  return result;
}

uint64_t sub_10004B0EC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10004B124(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (BYTE4(a5) != 255) {
    return sub_1000093E0(result, a2, a3, a4, a5, BYTE4(a5) & 1);
  }
  return result;
}

uint64_t sub_10004B13C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (BYTE4(a5) != 255) {
    return sub_100009420(result, a2, a3, a4, a5, BYTE4(a5) & 1);
  }
  return result;
}

id *sub_10004B154(id *a1)
{
  return a1;
}

uint64_t sub_10004B180(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if (a6 != 255) {
    return sub_100012040(result, a2, a3, a4, a5, a6 & 1);
  }
  return result;
}

uint64_t sub_10004B198(uint64_t a1, uint64_t a2)
{
  return sub_10003F464(a1, a2, v2, (uint64_t (*)(uint64_t, uint64_t))sub_100043458);
}

_OWORD *sub_10004B1C8(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_OWORD *)((char *)a2 + 26) = *(long long *)((char *)a1 + 26);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t sub_10004B1E0(uint64_t a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

unint64_t sub_10004B224()
{
  unint64_t result = qword_100099AE0;
  if (!qword_100099AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100099AE0);
  }
  return result;
}

uint64_t sub_10004B278(uint64_t a1)
{
  return a1;
}

uint64_t sub_10004B2A4(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 8);
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10004B2C0(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))
{
  return a1;
}

void sub_10004B328(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void (*a18)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t), void (*a19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))
{
  if (a2 != 2)
  {
    a18(a3, a4, a5, a6, a7, HIDWORD(a7) & 1);
    a19(a8, a9, a10, a11, a12, a13 & 1);
  }
}

uint64_t sub_10004B3E0(uint64_t a1, uint64_t a2)
{
  return sub_10003F464(a1, a2, v2, (uint64_t (*)(uint64_t, uint64_t))sub_10003D628);
}

double sub_10004B410(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_100062A60;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  return result;
}

uint64_t sub_10004B434(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008F4C((uint64_t *)&unk_100099B20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10004B49C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10004B4D4(void *a1)
{
}

uint64_t sub_10004B4DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004B524(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014768(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004B574()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004B5AC(void *a1)
{
  return sub_10003E734(a1);
}

uint64_t sub_10004B5B4(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100026E6C;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100099B70 + dword_100099B70);
  return v6(a1, v4);
}

unsigned char *storeEnumTagSinglePayload for WallpaperCoordinatorError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10004B738);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WallpaperCoordinatorError()
{
  return &type metadata for WallpaperCoordinatorError;
}

void destroy for WallpaperEditingCoordinator.EditingLookResources.Contents(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 32);
}

uint64_t initializeWithCopy for WallpaperEditingCoordinator.EditingLookResources.Contents(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  unsigned int v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  unsigned int v6 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  id v7 = v3;
  id v8 = v4;
  swift_bridgeObjectRetain();
  id v9 = v5;
  id v10 = v6;
  return a1;
}

uint64_t assignWithCopy for WallpaperEditingCoordinator.EditingLookResources.Contents(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v10 = *(void **)(a1 + 24);
  int v11 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v11;
  id v12 = v11;

  CFStringRef v13 = *(void **)(a1 + 32);
  CFStringRef v14 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v14;
  id v15 = v14;

  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for WallpaperEditingCoordinator.EditingLookResources.Contents(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  id v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for WallpaperEditingCoordinator.EditingLookResources.Contents(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WallpaperEditingCoordinator.EditingLookResources.Contents(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WallpaperEditingCoordinator.EditingLookResources.Contents()
{
  return &type metadata for WallpaperEditingCoordinator.EditingLookResources.Contents;
}

unint64_t sub_10004B9E8()
{
  unint64_t result = qword_100099B80;
  if (!qword_100099B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100099B80);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ShippouLook(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10004BB1CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShippouLook()
{
  return &type metadata for ShippouLook;
}

unint64_t sub_10004BB58()
{
  unint64_t result = qword_100099B90;
  if (!qword_100099B90)
  {
    sub_100014768(&qword_100099B98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100099B90);
  }
  return result;
}

uint64_t sub_10004BBB4(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x6B63616C62;
  unint64_t v3 = 0xE500000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6B63616C62;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x6574696877;
      break;
    case 2:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1802398064;
      break;
    case 3:
      uint64_t v5 = 0x6E65657267;
      break;
    case 4:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1702194274;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE500000000000000;
  switch(a2)
  {
    case 1:
      if (v5 == 0x6574696877) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1802398064) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      uint64_t v2 = 0x6E65657267;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1702194274) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = sub_10005E448();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10004BD38(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 1802658116;
    }
    else {
      uint64_t v3 = 0x6974616D6F747541;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE400000000000000;
    }
    else {
      unint64_t v4 = 0xE900000000000063;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 1802658116;
      }
      else {
        uint64_t v6 = 0x6974616D6F747541;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE400000000000000;
      }
      else {
        unint64_t v7 = 0xE900000000000063;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE500000000000000;
    uint64_t v3 = 0x746867694CLL;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE500000000000000;
  if (v3 != 0x746867694CLL)
  {
LABEL_21:
    char v8 = sub_10005E448();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10004BE44(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x63696D616E7964;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x63696D616E7964;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v5 = 6647407;
      break;
    case 2:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v5 = 7305076;
      break;
    case 3:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x6565726874;
      break;
    case 4:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1920298854;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE300000000000000;
      if (v5 == 6647407) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE300000000000000;
      if (v5 != 7305076) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v2 = 0x6565726874;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1920298854) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = sub_10005E448();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10004BFD8(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6C61697861;
  }
  else {
    uint64_t v3 = 0x6C6169646172;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x6C61697861;
  }
  else {
    uint64_t v5 = 0x6C6169646172;
  }
  if (a2) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xE600000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_10005E448();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10004C078(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x6B63616C62;
  unint64_t v3 = 0xE500000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6B63616C62;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x6574696877;
      break;
    case 2:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x65727574616ELL;
      break;
    case 3:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1702063986;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE500000000000000;
  switch(a2)
  {
    case 1:
      if (v5 == 0x6574696877) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x65727574616ELL;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xE400000000000000;
      if (v5 == 1702063986) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = sub_10005E448();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10004C1D8()
{
  return sub_10005DE88();
}

uint64_t sub_10004C414(unsigned __int8 *a1, char *a2)
{
  return sub_10004C078(*a1, *a2);
}

Swift::Int sub_10004C420()
{
  return sub_10005E528();
}

uint64_t sub_10004C4E4()
{
  sub_10005DEB8();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10004C590()
{
  return sub_10005E528();
}

uint64_t sub_10004C650@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10004C8EC(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_10004C680(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6B63616C62;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 0x6574696877;
      goto LABEL_3;
    case 2:
      *a1 = 0x65727574616ELL;
      a1[1] = 0xE600000000000000;
      break;
    case 3:
      *a1 = 1702063986;
      a1[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE500000000000000;
      break;
  }
}

void sub_10004C704(void *a1@<X8>)
{
  *a1 = &off_10007F488;
}

unint64_t sub_10004C718()
{
  unint64_t result = qword_100099BA0;
  if (!qword_100099BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100099BA0);
  }
  return result;
}

uint64_t sub_10004C76C()
{
  id v0 = (id)MobileGestalt_get_current_device();
  uint64_t v1 = MobileGestalt_copy_deviceEnclosureColor();

  if (!v1) {
    return 3;
  }
  uint64_t v3 = sub_10005DEF8();
  uint64_t v4 = v2;
  if (v3 == 49 && v2 == 0xE100000000000000 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (v3 == 50 && v4 == 0xE100000000000000 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (v3 == 52 && v4 == 0xE100000000000000 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (v3 == 53 && v4 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_10005E448();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10004C8EC(uint64_t a1, void *a2)
{
  v6._uint64_t countAndFlagsBits = a1;
  v3._rawValue = &off_10007E848;
  v6._object = a2;
  unint64_t v4 = sub_10005E398(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 4) {
    return 4;
  }
  else {
    return v4;
  }
}

unsigned char *storeEnumTagSinglePayload for ToriLook(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10004CA04);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ToriLook()
{
  return &type metadata for ToriLook;
}

unint64_t sub_10004CA40()
{
  unint64_t result = qword_100099BA8;
  if (!qword_100099BA8)
  {
    sub_100014768(&qword_100099BB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100099BA8);
  }
  return result;
}

uint64_t sub_10004CA9C()
{
  return sub_10005DE88();
}

id sub_10004CD1C(char a1)
{
  uint64_t v1 = *(void *)&a9ca3bb[8 * a1];
  sub_10004D3BC();
  return sub_100026E70(v1, 0xE700000000000000);
}

uint64_t sub_10004CD60(unsigned __int8 *a1, char *a2)
{
  return sub_10004BBB4(*a1, *a2);
}

Swift::Int sub_10004CD6C()
{
  return sub_10005E528();
}

uint64_t sub_10004CE40()
{
  sub_10005DEB8();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10004CEFC()
{
  return sub_10005E528();
}

uint64_t sub_10004CFCC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10004D370(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_10004CFFC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6B63616C62;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 0x6574696877;
      goto LABEL_3;
    case 2:
      *a1 = 1802398064;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 0x6E65657267;
      a1[1] = 0xE500000000000000;
      break;
    case 4:
      *a1 = 1702194274;
      a1[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE500000000000000;
      break;
  }
}

void sub_10004D094(void *a1@<X8>)
{
  *a1 = &off_10007F4B0;
}

unint64_t sub_10004D0A8()
{
  unint64_t result = qword_100099BB8;
  if (!qword_100099BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100099BB8);
  }
  return result;
}

uint64_t sub_10004D0FC()
{
  id v0 = (id)MobileGestalt_get_current_device();
  uint64_t v1 = MobileGestalt_copy_deviceEnclosureColor();

  if (!v1)
  {
    if (qword_1000978E8 != -1) {
      swift_once();
    }
    uint64_t v5 = sub_10005DCD8();
    sub_100008DB0(v5, (uint64_t)qword_10009FB68);
    unsigned int v6 = sub_10005DCB8();
    os_log_type_t v7 = sub_10005E068();
    if (os_log_type_enabled(v6, v7))
    {
      char v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No enclosure color found for current MobileGestalt", v8, 2u);
      swift_slowDealloc();
    }

    return 4;
  }
  uint64_t v3 = sub_10005DEF8();
  uint64_t v4 = v2;
  if (v3 == 49 && v2 == 0xE100000000000000 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v3 == 50 && v4 == 0xE100000000000000 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  if (v3 == 52 && v4 == 0xE100000000000000 || (sub_10005E448() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  if ((v3 != 14385 || v4 != 0xE200000000000000) && (sub_10005E448() & 1) == 0)
  {
    if (v3 == 57 && v4 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10005E448();
      swift_bridgeObjectRelease();
    }
    return 4;
  }
  swift_bridgeObjectRelease();
  return 3;
}

uint64_t sub_10004D370(uint64_t a1, void *a2)
{
  v6._uint64_t countAndFlagsBits = a1;
  v3._rawValue = &off_100079A20;
  v6._object = a2;
  unint64_t v4 = sub_10005E398(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 5) {
    return 5;
  }
  else {
    return v4;
  }
}

unint64_t sub_10004D3BC()
{
  unint64_t result = qword_100099168;
  if (!qword_100099168)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100099168);
  }
  return result;
}

uint64_t sub_10004D3FC()
{
  sub_100050AD0((uint64_t)&off_10007ACA8);
  __n128 v122 = v0;
  type metadata accessor for ToriLight();
  swift_allocObject();
  uint64_t v1 = sub_1000564D4(1u, 0, 1u, v122, 1.0);
  sub_100050AD0((uint64_t)&off_10007ACD8);
  __n128 v123 = v2;
  swift_allocObject();
  Swift::OpaquePointer v3 = sub_1000564D4(1u, 0, 1u, v123, 1.0);
  sub_100050AD0((uint64_t)&off_10007AD08);
  __n128 v124 = v4;
  swift_allocObject();
  uint64_t v5 = sub_1000564D4(1u, 1u, 1u, v124, 1.0);
  sub_100050AD0((uint64_t)&off_10007AD38);
  __n128 v125 = v6;
  swift_allocObject();
  os_log_type_t v7 = sub_1000564D4(1u, 1u, 1u, v125, 1.0);
  sub_100050AD0((uint64_t)&off_10007AD68);
  __n128 v126 = v8;
  swift_allocObject();
  uint64_t v115 = sub_1000564D4(1u, 0, 1u, v126, 1.0);
  sub_100050AD0((uint64_t)&off_10007AD98);
  __n128 v127 = v9;
  swift_allocObject();
  id v10 = sub_1000564D4(1u, 1u, 1u, v127, 1.0);
  sub_100050AD0((uint64_t)&off_10007ADC8);
  __n128 v128 = v11;
  swift_allocObject();
  id v12 = sub_1000564D4(1u, 1u, 1u, v128, 1.0);
  sub_100050AD0((uint64_t)&off_10007ADF8);
  __n128 v129 = v13;
  swift_allocObject();
  CFStringRef v14 = sub_1000564D4(1u, 1u, 1u, v129, 1.0);
  sub_100050AD0((uint64_t)&off_10007AE28);
  __n128 v130 = v15;
  swift_allocObject();
  uint64_t v112 = sub_1000564D4(1u, 1u, 1u, v130, 1.0);
  sub_100050AD0((uint64_t)&off_10007AE58);
  __n128 v131 = v16;
  swift_allocObject();
  unint64_t v105 = sub_1000564D4(1u, 1u, 1u, v131, 1.0);
  sub_100050AD0((uint64_t)&off_10007AE88);
  __n128 v132 = v17;
  swift_allocObject();
  uint64_t v113 = sub_1000564D4(0, 1u, 1u, v132, 1.0);
  sub_100050AD0((uint64_t)&off_10007AEB8);
  __n128 v133 = v18;
  sub_100050AD0((uint64_t)&off_10007AEE8);
  sub_1000565C4(0.0, 3.1416, v133, v19, 12.0, 0.2, 1.09);
  sub_100050AD0((uint64_t)&off_10007AF18);
  __n128 v134 = v20;
  sub_100050AD0((uint64_t)&off_10007AF48);
  sub_1000565C4(0.0, 3.0439, v134, v21, 186.81, 1.3, 1.31);
  sub_100050AD0((uint64_t)&off_10007AF78);
  __n128 v135 = v22;
  sub_100050AD0((uint64_t)&off_10007AFA8);
  sub_1000565C4(0.0, 3.0299, v135, v23, 149.33, 0.0, 5.27);
  sub_100050AD0((uint64_t)&off_10007AFD8);
  __n128 v136 = v24;
  sub_100050AD0((uint64_t)&off_10007B008);
  sub_1000565C4(0.0, 3.1346, v136, v25, 91.631, 0.0, 0.73);
  sub_100050AD0((uint64_t)&off_10007B038);
  __n128 v137 = v26;
  sub_100050AD0((uint64_t)&off_10007B068);
  sub_1000565C4(0.0, 2.3981, v137, v27, 83.134, 0.366, 0.838);
  sub_100050AD0((uint64_t)&off_10007B098);
  __n128 v114 = v28;
  sub_100050AD0((uint64_t)&off_10007B0C8);
  sub_1000565C4(0.0, 2.0769, v114, v29, 211.94, 0.38, 1.85);
  sub_100050AD0((uint64_t)&off_10007B0F8);
  __n128 v109 = v30;
  sub_100050AD0((uint64_t)&off_10007B128);
  sub_1000565C4(0.0, 2.3981, v109, v31, 43.319, 0.366, 0.79);
  sub_100050AD0((uint64_t)&off_10007B158);
  __n128 v110 = v32;
  sub_100050AD0((uint64_t)&off_10007B188);
  sub_1000565C4(0.0, 2.5272, v110, v33, 196.54, 0.38, 1.85);
  sub_100050AD0((uint64_t)&off_10007B1B8);
  __n128 v100 = v34;
  sub_100050AD0((uint64_t)&off_10007B1E8);
  sub_1000565C4(500.0, 0.0, v100, v35, 82.261, 0.32, 0.898);
  sub_100050AD0((uint64_t)&off_10007B218);
  __n128 v101 = v36;
  sub_100050AD0((uint64_t)&off_10007B248);
  sub_1000565C4(25915.0, 2.7786, v101, v37, 110.0, 1.338, 1.15);
  sub_100050AD0((uint64_t)&off_10007B278);
  __n128 v102 = v38;
  sub_100050AD0((uint64_t)&off_10007B2A8);
  sub_1000565C4(640.0, 0.0, v102, v39, 71.932, 0.2, 1.0);
  sub_100050AD0((uint64_t)&off_10007B2D8);
  __n128 v103 = v40;
  sub_100050AD0((uint64_t)&off_10007B308);
  sub_1000565C4(3500.0, 3.1416, v103, v41, 0.0, 0.2, 1.09);
  sub_100050AD0((uint64_t)&off_10007B338);
  __n128 v104 = v42;
  sub_100050AD0((uint64_t)&off_10007B368);
  sub_1000565C4(4500.0, 3.0439, v104, v43, 186.81, 1.3, 1.31);
  sub_100050AD0((uint64_t)&off_10007B398);
  __n128 v107 = v44;
  sub_100050AD0((uint64_t)&off_10007B3C8);
  sub_1000565C4(968.8, 3.0299, v107, v45, 181.33, 0.0, 5.27);
  sub_100050AD0((uint64_t)&off_10007B3F8);
  __n128 v108 = v46;
  sub_100050AD0((uint64_t)&off_10007B428);
  sub_1000565C4(300.0, 3.1346, v108, v47, 105.63, 0.0, 0.73);
  sub_100050AD0((uint64_t)&off_10007B458);
  __n128 v106 = v48;
  sub_100050AD0((uint64_t)&off_10007B488);
  sub_1000565C4(1300.0, 2.3981, v106, v49, 32.334, 0.366, 0.888);
  sub_100050AD0((uint64_t)&off_10007B4B8);
  __n128 v90 = v50;
  sub_100050AD0((uint64_t)&off_10007B4E8);
  sub_1000565C4(1600.0, 2.0769, v90, v51, 144.34, 0.38, 1.85);
  sub_100050AD0((uint64_t)&off_10007B518);
  __n128 v91 = v52;
  sub_100050AD0((uint64_t)&off_10007B548);
  sub_1000565C4(0.0, 2.3981, v91, v53, 43.319, 0.366, 0.79);
  sub_100050AD0((uint64_t)&off_10007B578);
  __n128 v92 = v54;
  sub_100050AD0((uint64_t)&off_10007B5A8);
  sub_1000565C4(0.0, 2.5272, v92, v55, 196.54, 0.38, 1.85);
  sub_100050AD0((uint64_t)&off_10007B5D8);
  float32x4_t v93 = v56;
  sub_100050AD0((uint64_t)&off_10007B608);
  float32x4_t v58 = vaddq_f32(v93, v57);
  v58.i32[3] = 0;
  __n128 v94 = (__n128)v58;
  sub_100050AD0((uint64_t)&off_10007B638);
  sub_1000565C4(500.0, 3.1416, v94, v59, 51.869, 0.32, 0.898);
  sub_100050AD0((uint64_t)&off_10007B668);
  __n128 v95 = v60;
  sub_100050AD0((uint64_t)&off_10007B698);
  sub_1000565C4(25915.0, 3.1416, v95, v61, 55.945, 1.338, 1.15);
  sub_100050AD0((uint64_t)&off_10007B6C8);
  float32x4_t v96 = v62;
  sub_100050AD0((uint64_t)&off_10007B6F8);
  float32x4_t v64 = vaddq_f32(v96, v63);
  v64.i32[3] = 0;
  __n128 v97 = (__n128)v64;
  sub_100050AD0((uint64_t)&off_10007B728);
  sub_1000565C4(-420.0, 1.9408, v97, v65, 71.932, 0.2, 1.0);
  sub_100050AD0((uint64_t)&off_10007B758);
  __n128 v98 = v66;
  sub_100050AD0((uint64_t)&off_10007B788);
  sub_1000565C4(2000.0, 3.1416, v98, v67, 0.0, 0.48, 1.1);
  sub_100050AD0((uint64_t)&off_10007B7B8);
  __n128 v99 = v68;
  sub_100050AD0((uint64_t)&off_10007B7E8);
  sub_1000565C4(900.0, 3.0439, v99, v69, 186.81, 0.2, 1.008);
  sub_100050AD0((uint64_t)&off_10007B818);
  __n128 v116 = v70;
  sub_100050AD0((uint64_t)&off_10007B848);
  sub_1000565C4(400.0, 3.0299, v116, v71, 181.33, 0.0, 5.27);
  sub_100050AD0((uint64_t)&off_10007B878);
  __n128 v117 = v72;
  sub_100050AD0((uint64_t)&off_10007B8A8);
  sub_1000565C4(100.0, 3.1346, v117, v73, 105.63, 0.0, 0.73);
  sub_100050AD0((uint64_t)&off_10007B8D8);
  __n128 v118 = v74;
  sub_100050AD0((uint64_t)&off_10007B908);
  sub_1000565C4(0.0, 3.1416, v118, v75, -71.779, 0.5, 0.838);
  sub_100050AD0((uint64_t)&off_10007B938);
  __n128 v119 = v76;
  sub_100050AD0((uint64_t)&off_10007B968);
  sub_1000565C4(0.0, 1.975, v119, v77, 103.95, 10.0, 1.85);
  sub_100050AD0((uint64_t)&off_10007B998);
  __n128 v120 = v78;
  sub_100050AD0((uint64_t)&off_10007B9C8);
  sub_1000565C4(270.0, 2.3981, v120, v79, 32.334, 0.366, 0.79);
  sub_100050AD0((uint64_t)&off_10007B9F8);
  __n128 v121 = v80;
  sub_100050AD0((uint64_t)&off_10007BA28);
  sub_1000565C4(600.0, 2.0769, v121, v81, 144.34, 0.38, 1.85);
  sub_100050AD0((uint64_t)&off_10007BA58);
  __n128 v138 = v82;
  sub_100050AD0((uint64_t)&off_10007BA88);
  sub_1000565C4(800.0, 3.1416, v138, v83, 51.869, 0.0, 0.898);
  sub_100050AD0((uint64_t)&off_10007BAB8);
  __n128 v139 = v84;
  sub_100050AD0((uint64_t)&off_10007BAE8);
  sub_1000565C4(8000.0, 3.1416, v139, v85, 55.945, 1.338, 1.02);
  sub_100050AD0((uint64_t)&off_10007BB18);
  __n128 v140 = v86;
  sub_100050AD0((uint64_t)&off_10007BB48);
  sub_1000565C4(-200.0, 1.9408, v140, v87, 71.932, 0.0, 27.61);
  sub_100008F4C(&qword_1000985E0);
  uint64_t v88 = swift_allocObject();
  *(_OWORD *)(v88 + 16) = xmmword_100063060;
  *(void *)(v88 + 32) = v7;
  *(void *)(v88 + 40) = v12;
  *(void *)(v88 + 48) = v112;
  *(void *)(v88 + 56) = v105;
  *(void *)(v88 + 64) = v115;
  *(void *)(v88 + 72) = v113;
  *(void *)(v88 + 80) = v10;
  *(void *)(v88 + 88) = v14;
  *(void *)(v88 + 96) = v1;
  *(void *)(v88 + 104) = v5;
  *(void *)(v88 + 112) = v3;
  uint64_t v141 = v88;
  sub_10005DFB8();
  swift_beginAccess();
  *(void *)(v111 + 144) = v141;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10004E2D0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10004E334()
{
  return _swift_deallocClassInstance(v0, 96, 15);
}

Swift::Int sub_10004E344()
{
  return sub_10005E528();
}

void sub_10004E388()
{
}

Swift::Int sub_10004E3B0()
{
  return sub_10005E528();
}

uint64_t ShippouScene.lensBuffer.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ShippouScene.lensBuffer.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_unknownObjectRelease();
}

uint64_t (*Lens.translation.modify())()
{
  return j__swift_endAccess;
}

uint64_t ShippouScene.uniformBuffer.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ShippouScene.uniformBufferOffset.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 32);
}

uint64_t ToriScene.uniformBufferOffset.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 40);
}

uint64_t sub_10004E538(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 48) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t ShippouScene.lenses.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 ShippouScene.cameraHolder.getter()
{
  swift_beginAccess();
  return v0[4];
}

__n128 ShippouScene.cameraHolder.setter(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  swift_beginAccess();
  v4[4] = a1;
  v4[5] = a2;
  __n128 result = a4;
  v4[6] = a3;
  v4[7] = a4;
  return result;
}

uint64_t (*ToriLight.animationKeys.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t ShippouScene.__allocating_init(device:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  ShippouScene.init(device:)(a1);
  return v2;
}

void *ShippouScene.init(device:)(void *a1)
{
  uint64_t v2 = (void *)v1;
  *(void *)(v1 + 48) = _swiftEmptyArrayStorage;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0;
  simd_float4 v63 = matrix_identity_float4x4.columns[1];
  simd_float4 v69 = matrix_identity_float4x4.columns[0];
  simd_float4 v51 = matrix_identity_float4x4.columns[3];
  simd_float4 v57 = matrix_identity_float4x4.columns[2];
  *(simd_float4 *)(v1 + 64) = matrix_identity_float4x4.columns[0];
  *(simd_float4 *)(v1 + 80) = v63;
  *(simd_float4 *)(v1 + 96) = v57;
  *(simd_float4 *)(v1 + 112) = v51;
  type metadata accessor for ShippouCamera();
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 16) = 1109288550;
  *(simd_float4 *)(v4 + 32) = v69;
  *(simd_float4 *)(v4 + 48) = v63;
  *(simd_float4 *)(v4 + 64) = v57;
  *(simd_float4 *)(v4 + 80) = v51;
  *(void *)(v1 + 128) = v4;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  sub_100050AD0((uint64_t)&off_10007EE38);
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(v1 + 240) = v10;
  *(_OWORD *)(v1 + 256) = _Q1;
  id v11 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v12) = 0.5;
  LODWORD(v13) = 1.0;
  *(void *)(v1 + 272) = [v11 initWithControlPoints:v12 :0.0 :0.0 :v13];
  id v14 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v15) = 1059481190;
  LODWORD(v16) = 1051931443;
  LODWORD(v17) = 1.0;
  *(void *)(v1 + 280) = [v14 initWithControlPoints:v15 :0.0 :v16 :v17];
  *(unsigned char *)(v1 + 288) = 0;
  id v18 = [a1 newBufferWithLength:768 options:0];
  if (!v18)
  {
    sub_100050B40();
    swift_allocError();
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    type metadata accessor for ShippouScene();
    swift_deallocPartialClassInstance();
    return v2;
  }
  *(void *)(v1 + 24) = v18;
  sub_100008F4C(&qword_1000985E0);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_100063070;
  sub_100050AD0((uint64_t)&off_10007EE68);
  long long v70 = v20;
  sub_100050AD0((uint64_t)&off_10007EE98);
  long long v64 = v21;
  sub_100050AD0((uint64_t)&off_10007EEC8);
  long long v58 = v22;
  sub_100050AD0((uint64_t)&off_10007EEF8);
  long long v52 = v23;
  type metadata accessor for Lens();
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = v70;
  *(_OWORD *)(v24 + 32) = v58;
  *(_OWORD *)(v24 + 48) = v52;
  *(_OWORD *)(v24 + 64) = v64;
  *(_DWORD *)(v24 + 80) = 1069128090;
  *(unsigned char *)(v24 + 84) = 0;
  *(void *)(v19 + 32) = v24;
  sub_100050AD0((uint64_t)&off_10007EF28);
  long long v71 = v25;
  sub_100050AD0((uint64_t)&off_10007EF58);
  long long v65 = v26;
  sub_100050AD0((uint64_t)&off_10007EF88);
  long long v59 = v27;
  sub_100050AD0((uint64_t)&off_10007EFB8);
  long long v53 = v28;
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = v71;
  *(_OWORD *)(v29 + 32) = v59;
  *(_OWORD *)(v29 + 48) = v53;
  *(_OWORD *)(v29 + 64) = v65;
  *(_DWORD *)(v29 + 80) = 1069128090;
  *(unsigned char *)(v29 + 84) = 1;
  *(void *)(v19 + 40) = v29;
  sub_100050AD0((uint64_t)&off_10007EFE8);
  long long v72 = v30;
  sub_100050AD0((uint64_t)&off_10007F018);
  long long v66 = v31;
  sub_100050AD0((uint64_t)&off_10007F048);
  long long v60 = v32;
  sub_100050AD0((uint64_t)&off_10007F078);
  long long v54 = v33;
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = v72;
  *(_OWORD *)(v34 + 32) = v60;
  *(_OWORD *)(v34 + 48) = v54;
  *(_OWORD *)(v34 + 64) = v66;
  *(_DWORD *)(v34 + 80) = 1069128090;
  *(unsigned char *)(v34 + 84) = 2;
  *(void *)(v19 + 48) = v34;
  sub_100050AD0((uint64_t)&off_10007F0A8);
  long long v73 = v35;
  sub_100050AD0((uint64_t)&off_10007F0D8);
  long long v67 = v36;
  sub_100050AD0((uint64_t)&off_10007F108);
  long long v61 = v37;
  sub_100050AD0((uint64_t)&off_10007F138);
  long long v55 = v38;
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = v73;
  *(_OWORD *)(v39 + 32) = v61;
  *(_OWORD *)(v39 + 48) = v55;
  *(_OWORD *)(v39 + 64) = v67;
  *(_DWORD *)(v39 + 80) = 1069128090;
  *(unsigned char *)(v39 + 84) = 3;
  *(void *)(v19 + 56) = v39;
  sub_100050AD0((uint64_t)&off_10007F168);
  long long v74 = v40;
  sub_100050AD0((uint64_t)&off_10007F198);
  long long v68 = v41;
  sub_100050AD0((uint64_t)&off_10007F1C8);
  long long v62 = v42;
  sub_100050AD0((uint64_t)&off_10007F1F8);
  long long v56 = v43;
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = v74;
  *(_OWORD *)(v44 + 32) = v62;
  *(_OWORD *)(v44 + 48) = v56;
  *(_OWORD *)(v44 + 64) = v68;
  *(_DWORD *)(v44 + 80) = 1069128090;
  *(unsigned char *)(v44 + 84) = 4;
  *(void *)(v19 + 64) = v44;
  swift_unknownObjectRetain();
  sub_10005DFB8();
  swift_beginAccess();
  v2[6] = v19;
  __n128 result = (void *)swift_bridgeObjectRelease();
  unint64_t v46 = v2[6];
  if (v46 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v47 = sub_10005E328();
    __n128 result = (void *)swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v47 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unsigned __int128)(v47 * (__int128)48) >> 64 == (48 * v47) >> 63)
  {
    __n128 result = objc_msgSend(a1, "newBufferWithLength:options:");
    if (result)
    {
      v2[2] = result;
      uint64_t v48 = v2[16];
      *(_DWORD *)(v48 + 16) = 1108559790;
      sub_100050AD0((uint64_t)&off_10007F228);
      long long v75 = v49;
      swift_retain();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      long long v50 = v75;
      HIDWORD(v50) = 1.0;
      *(_OWORD *)(v48 + 32) = xmmword_10005F200;
      *(_OWORD *)(v48 + 48) = xmmword_10005F230;
      *(_OWORD *)(v48 + 64) = xmmword_10005F240;
      *(_OWORD *)(v48 + 80) = v50;
      swift_release();
      return v2;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ShippouCamera()
{
  return self;
}

void ShippouScene.update(state:size:isSnapshotting:)(float *a1, char a2, double a3, double a4)
{
  uint64_t v5 = v4;
  float v10 = a1[1];
  uint64_t v11 = MGGetProductType();
  if (sub_10004E2D0(v11, (uint64_t)&off_10007E8C8))
  {
    *(_DWORD *)(*(void *)(v5 + 128) + 16) = 1108410368;
    float v13 = 1.0 - v10;
    if ((a2 & 1) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_10004E2D0(v11, (uint64_t)&off_10007E8F0);
    float v13 = 1.0 - v10;
    if ((a2 & 1) == 0)
    {
LABEL_3:
      id v14 = (unsigned char *)(v5 + 288);
      if (*(unsigned char *)(v5 + 288) == 1)
      {
        if (v13 < 1.0)
        {
          float v15 = *a1;
          float v16 = 0.0;
          if (*a1 >= 1.0)
          {
LABEL_6:
            unsigned char *v14 = 1;
            goto LABEL_19;
          }
          goto LABEL_17;
        }
        float v15 = *a1;
        *(float *)&double v12 = 1.0 - *a1;
        [*(id *)(v5 + 280) _solveForInput:v12];
        float v16 = v20;
      }
      else
      {
        *(float *)&double v12 = v13;
        [*(id *)(v5 + 272) _solveForInput:v12];
        float v16 = *(float *)&v18;
        float v15 = *a1;
        if (*a1 > 0.0)
        {
          *(float *)&double v18 = 1.0 - v15;
          [*(id *)(v5 + 280) _solveForInput:v18];
          float v16 = v16 * v19;
        }
      }
      if (v15 >= 1.0) {
        goto LABEL_6;
      }
LABEL_17:
      if (v15 <= 0.0) {
        unsigned char *v14 = 0;
      }
      goto LABEL_19;
    }
  }
  float v15 = *a1;
  float v17 = 1.0;
  if (v13 != 1.0) {
    float v17 = 0.0;
  }
  if (v15 == 0.0) {
    float v16 = v17;
  }
  else {
    float v16 = 0.0;
  }
LABEL_19:
  __n128 v82 = a1;
  if (sub_10004F4B4())
  {
    if ((float)(1.0 - v15) < v13) {
      float v13 = 1.0 - v15;
    }
    long long v76 = *(_OWORD *)(v5 + 176);
    long long v75 = *(_OWORD *)(v5 + 240);
    float32x4_t v83 = (float32x4_t)matrix_identity_float4x4.columns[0];
    float32x4_t v88 = (float32x4_t)matrix_identity_float4x4.columns[2];
    float32x4_t v77 = (float32x4_t)matrix_identity_float4x4.columns[1];
    float32x4_t v79 = (float32x4_t)matrix_identity_float4x4.columns[3];
    __float2 v21 = __sincosf_stret((float)-(float)(*(float *)&v76 * v13) * *(float *)&v75);
    float32x4_t v22 = v83;
    v22.i32[0] = LODWORD(v21.__cosval);
    v22.f32[2] = -v21.__sinval;
    float32x4_t v23 = v88;
    v23.i32[2] = LODWORD(v21.__cosval);
    v23.i32[0] = LODWORD(v21.__sinval);
    float32x4_t v73 = v23;
    float32x4_t v74 = v22;
    __float2 v25 = __sincosf_stret(vmuls_lane_f32(-(float)(*((float *)&v76 + 1) * v13), *(float32x2_t *)&v75, 1));
    v24.f32[0] = v25.__sinval;
    float32x4_t v89 = vmlaq_laneq_f32(vmlaq_n_f32(vmlsq_lane_f32(vmulq_n_f32(v74, v88.f32[0]), v77, v24, 0), v73, v25.__cosval), v79, v88, 3);
    swift_beginAccess();
    *(float32x4_t *)(v5 + 64) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v74, v83.f32[0]), v77, *(float32x2_t *)v83.f32, 1), v73, v83, 2), v79, v83, 3);
    *(float32x4_t *)(v5 + 80) = vmlaq_laneq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v74, v77.f32[0]), v77, v25.__cosval), v73, v25.__sinval), v79, v77, 3);
    *(float32x4_t *)(v5 + 96) = v89;
    *(float32x4_t *)(v5 + 112) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v74, v79.f32[0]), v77, *(float32x2_t *)v79.f32, 1), v73, v79, 2), v79, v79, 3);
    swift_beginAccess();
    unint64_t v26 = *(void *)(v5 + 48);
    if (v26 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = sub_10005E328();
      if (v27) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v27)
      {
LABEL_24:
        sub_10004FCDC(0, v27 & ~(v27 >> 63), 0);
        if (v27 < 0)
        {
LABEL_65:
          __break(1u);
          goto LABEL_66;
        }
        char v80 = a2;
        uint64_t v28 = 0;
        do
        {
          if ((v26 & 0xC000000000000001) != 0) {
            sub_10005E218();
          }
          else {
            swift_retain();
          }
          __n128 v29 = Lens.getEllipsoid(progress:scaleBy:)(v16);
          __n128 v84 = v30;
          __n128 v90 = v29;
          unsigned __int8 v32 = v31;
          swift_release();
          unint64_t v34 = _swiftEmptyArrayStorage[2];
          unint64_t v33 = _swiftEmptyArrayStorage[3];
          if (v34 >= v33 >> 1) {
            sub_10004FCDC(v33 > 1, v34 + 1, 1);
          }
          ++v28;
          _swiftEmptyArrayStorage[2] = v34 + 1;
          long long v35 = (__n128 *)&_swiftEmptyArrayStorage[6 * v34];
          v35[2] = v90;
          v35[3] = v84;
          v35[4].n128_u8[0] = v32;
        }
        while (v27 != v28);
        goto LABEL_43;
      }
    }
LABEL_47:
    swift_bridgeObjectRelease();
LABEL_48:
    swift_beginAccess();
    unint64_t v46 = *(void **)(v5 + 16);
    id v47 = [(id)swift_unknownObjectRetain() contents];
    id v48 = v46;
    memcpy(v47, &_swiftEmptyArrayStorage[4], (size_t)[*(id *)(v5 + 16) length]);
    swift_bridgeObjectRelease();
    long long v49 = (uint64_t *)(v5 + 40);
    swift_beginAccess();
    uint64_t v50 = *(void *)(v5 + 40);
    if ((unint64_t)(v50 - 0x80000000000000) >> 56 == 255)
    {
      uint64_t v51 = v50 << 8;
      swift_beginAccess();
      *(void *)(v5 + 32) = v51;
      long long v52 = *(void **)(v5 + 24);
      long long v53 = (char *)[(id)swift_unknownObjectRetain() contents];
      id v54 = v52;
      uint64_t v55 = *(void *)(v5 + 32);
      swift_beginAccess();
      if ((~*(void *)&a3 & 0x7FF0000000000000) != 0)
      {
        if (a3 > -1.0)
        {
          if (a3 < 4294967300.0)
          {
            float32x4_t v57 = *(float32x4_t *)(v5 + 64);
            float32x4_t v56 = *(float32x4_t *)(v5 + 80);
            float32x4_t v59 = *(float32x4_t *)(v5 + 96);
            float32x4_t v58 = *(float32x4_t *)(v5 + 112);
            long long v60 = *(float32x4_t **)(v5 + 128);
            float32x4_t v62 = v60[2];
            float32x4_t v61 = v60[3];
            float32x4_t v64 = v60[4];
            float32x4_t v63 = v60[5];
            long long v65 = (float32x4_t *)&v53[v55];
            *(_DWORD *)&v53[v55] = a3;
            if ((~*(void *)&a4 & 0x7FF0000000000000) != 0)
            {
              if (a4 > -1.0)
              {
                if (a4 < 4294967300.0)
                {
                  float32x4_t v87 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v62.f32[0]), v56, *(float32x2_t *)v62.f32, 1), v59, v62, 2), v58, v62, 3);
                  float32x4_t v93 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v61.f32[0]), v56, *(float32x2_t *)v61.f32, 1), v59, v61, 2), v58, v61, 3);
                  float32x4_t v66 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v64.f32[0]), v56, *(float32x2_t *)v64.f32, 1), v59, v64, 2), v58, v64, 3);
                  float32x4_t v67 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v63.f32[0]), v56, *(float32x2_t *)v63.f32, 1), v59, v63, 2), v58, v63, 3);
                  v65->i32[1] = a4;
                  v67.i32[3] = 0;
                  float32x4_t v68 = vnegq_f32(v66);
                  v68.i32[3] = 0;
                  v65[1] = v67;
                  v65[2] = v68;
                  float v69 = a3 / a4;
                  float v70 = tanf((float)((float)(v60[1].f32[0] / 180.0) * 3.1416) * 0.5);
                  *(float32x2_t *)v71.f32 = vmul_n_f32(*(float32x2_t *)v87.f32, v70 * v69);
                  v71.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(v70 * v69, v87, 2));
                  *(float32x2_t *)v72.f32 = vmul_n_f32(*(float32x2_t *)v93.f32, v70);
                  v72.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(v70, v93, 2));
                  v65[3] = v71;
                  v65[4] = v72;
                  v65[5].i8[0] = a2 & 1;
                  v65[5].f32[1] = *v82;
                  v65[5].f32[2] = v16;
                  if (!__OFADD__(*v49, 1))
                  {
                    *long long v49 = (*v49 + 1) % 3;
                    return;
                  }
                  goto LABEL_64;
                }
LABEL_63:
                __break(1u);
LABEL_64:
                __break(1u);
                goto LABEL_65;
              }
LABEL_62:
              __break(1u);
              goto LABEL_63;
            }
LABEL_61:
            __break(1u);
            goto LABEL_62;
          }
LABEL_60:
          __break(1u);
          goto LABEL_61;
        }
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_59;
  }
  simd_float4 v78 = matrix_identity_float4x4.columns[1];
  simd_float4 v81 = matrix_identity_float4x4.columns[0];
  simd_float4 v85 = matrix_identity_float4x4.columns[3];
  simd_float4 v91 = matrix_identity_float4x4.columns[2];
  swift_beginAccess();
  *(simd_float4 *)(v5 + 64) = v81;
  *(simd_float4 *)(v5 + 80) = v78;
  *(simd_float4 *)(v5 + 96) = v91;
  *(simd_float4 *)(v5 + 112) = v85;
  swift_beginAccess();
  unint64_t v36 = *(void *)(v5 + 48);
  if (v36 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_10005E328();
    if (!v37) {
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v37) {
      goto LABEL_47;
    }
  }
  sub_10004FCDC(0, v37 & ~(v37 >> 63), 0);
  if ((v37 & 0x8000000000000000) == 0)
  {
    char v80 = a2;
    uint64_t v38 = 0;
    do
    {
      if ((v36 & 0xC000000000000001) != 0) {
        sub_10005E218();
      }
      else {
        swift_retain();
      }
      __n128 v39 = Lens.getEllipsoid(progress:scaleBy:)(v16);
      __n128 v86 = v40;
      __n128 v92 = v39;
      unsigned __int8 v42 = v41;
      swift_release();
      unint64_t v44 = _swiftEmptyArrayStorage[2];
      unint64_t v43 = _swiftEmptyArrayStorage[3];
      if (v44 >= v43 >> 1) {
        sub_10004FCDC(v43 > 1, v44 + 1, 1);
      }
      ++v38;
      _swiftEmptyArrayStorage[2] = v44 + 1;
      __n128 v45 = (__n128 *)&_swiftEmptyArrayStorage[6 * v44];
      v45[2] = v92;
      v45[3] = v86;
      v45[4].n128_u8[0] = v42;
    }
    while (v37 != v38);
LABEL_43:
    swift_bridgeObjectRelease();
    a2 = v80;
    goto LABEL_48;
  }
LABEL_66:
  __break(1u);
}

uint64_t sub_10004F4B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10005DD48();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s22MercuryPosterExtension9ToriSceneC9startTimeSdvpfi_0();
  double v7 = *(double *)(v1 + 136);
  if (v7 <= 0.0 || (double v8 = v6 - v7, v9 = *(double *)(v1 + 256) * 0.17 * 2.8, v10 = v9 + 2.8 - v9, v6 - v7 >= v10))
  {
    uint64_t result = 0;
    *(_OWORD *)(v1 + 176) = 0u;
    *(_OWORD *)(v1 + 192) = 0u;
    *(_OWORD *)(v1 + 160) = 0u;
    *(double *)(v1 + 224) = v6;
  }
  else
  {
    long long v27 = *(_OWORD *)(v1 + 176);
    sub_10005DD38();
    if (v8 <= v9)
    {
      float v15 = *(float *)(v1 + 144);
      float v16 = *(float *)(v1 + 160);
      int v29 = 1065353216;
      int v28 = *(_DWORD *)(v1 + 208);
      sub_10005DD28();
      *(float *)(v1 + 176) = v15 + (float)(v16 * v30);
      float v17 = *(float *)(v1 + 148);
      float v18 = *(float *)(v1 + 164);
      int v29 = 1065353216;
      int v28 = *(_DWORD *)(v1 + 212);
      sub_10005DD28();
      double v12 = *(void (**)(char *, uint64_t))(v3 + 8);
      v12(v5, v2);
      float v13 = v17 + (float)(v18 * v30);
    }
    else
    {
      float32x4_t v26 = vaddq_f32(*(float32x4_t *)(v1 + 144), *(float32x4_t *)(v1 + 160));
      float v11 = v26.f32[1];
      int v29 = 1065353216;
      int v28 = *(_DWORD *)(v1 + 192);
      sub_10005DD28();
      *(float *)(v1 + 176) = v26.f32[0] - (float)(v30 * v26.f32[0]);
      int v29 = 1065353216;
      int v28 = *(_DWORD *)(v1 + 196);
      sub_10005DD28();
      double v12 = *(void (**)(char *, uint64_t))(v3 + 8);
      v12(v5, v2);
      float v13 = v11 - vmuls_lane_f32(v30, *(float32x2_t *)v26.f32, 1);
    }
    *(float *)(v1 + 180) = v13;
    double v19 = *(double *)(v1 + 264);
    if (v8 >= v9 * 0.5 * v19)
    {
      sub_10005DD18();
      float v23 = *(float *)(v1 + 152) + *(float *)(v1 + 168);
      int v29 = 1065353216;
      int v28 = *(_DWORD *)(v1 + 200);
      sub_10005DD28();
      v12(v5, v2);
      float v22 = v23 - (float)(v23 * v30);
    }
    else
    {
      sub_10005DD38();
      float v20 = *(float *)(v1 + 152);
      float v21 = *(float *)(v1 + 168);
      int v29 = 1065353216;
      int v28 = *(_DWORD *)(v1 + 216);
      sub_10005DD28();
      v12(v5, v2);
      float v22 = v20 + (float)(v21 * v30);
    }
    long long v24 = *(_OWORD *)(v1 + 176);
    *(float *)(v1 + 184) = v22;
    float v25 = 1.0 / v8;
    *(float32x2_t *)&long long v24 = vmul_n_f32(vsub_f32(*(float32x2_t *)&v24, *(float32x2_t *)&v27), v25);
    *((void *)&v24 + 1) = COERCE_UNSIGNED_INT((float)(v22 - *((float *)&v27 + 2)) * v25);
    *(_OWORD *)(v1 + 192) = v24;
    return 1;
  }
  return result;
}

uint64_t ShippouScene.tap(at:)(float32x2_t a1)
{
  long long v3 = *(_OWORD *)(v1 + 176);
  *(_OWORD *)(v1 + 208) = *(_OWORD *)(v1 + 192);
  *(_OWORD *)(v1 + 144) = v3;
  sub_100050C28((uint64_t)&off_10007F3B0);
  float32x2_t v5 = v4;
  sub_100008F4C(&qword_100099BD0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10005FAA0;
  *(float32x2_t *)(inited + 32) = vmul_f32(v5, a1);
  *(_DWORD *)(inited + 40) = 0;
  sub_100050AD0(inited);
  long long v35 = v7;
  swift_setDeallocating();
  float32x2_t v8 = *(float32x2_t *)(v1 + 144);
  float v9 = sqrtf(vmul_f32(v8, v8).f32[0] + vmuls_lane_f32(v8.f32[1], v8, 1));
  float v10 = sqrtf((float)((float)(*(float *)&v35 + v8.f32[0]) * (float)(*(float *)&v35 + v8.f32[0]))+ (float)((float)(*((float *)&v35 + 1) + v8.f32[1]) * (float)(*((float *)&v35 + 1) + v8.f32[1])));
  *(float32x2_t *)v12.i8 = vsub_f32(*(float32x2_t *)&v35, v8);
  float v11 = *(float *)(v1 + 152);
  *(float *)&v12.i32[2] = *((float *)&v35 + 2) - v11;
  v12.i32[3] = 0;
  if (v9 >= v10)
  {
    *(double *)(v1 + 256) = fmin((float)(v9 / v10), 3.0);
LABEL_7:
    float v17 = 0.35;
    goto LABEL_8;
  }
  if (v9 <= 0.5)
  {
    float v26 = sqrtf(vaddv_f32(vmul_f32(a1, a1)));
    *(void *)(v1 + 256) = 0x3FF0000000000000;
    if (v26 < 0.41)
    {
      float v27 = (float)(v26 / -0.41) + 1.0;
      double v28 = (float)((float)(v27 * -0.5) + 1.0);
      *(double *)(v1 + 264) = v28;
      float v29 = (float)(v11 * -20.0) + 1.0;
      if (v29 >= 0.1) {
        float v30 = v29 * 0.01;
      }
      else {
        float v30 = 0.001;
      }
      if (v11 > 0.012)
      {
        float v31 = v11 + -0.012;
        double v32 = v28 - v31;
        if (v32 <= 0.1) {
          double v32 = 0.1;
        }
        *(double *)(v1 + 264) = v32;
        float v33 = (float)(v31 * -20.0) + 1.0;
        if (v33 < 0.0) {
          float v33 = 0.0;
        }
        float v30 = v33 * v30;
      }
      *(float *)&v12.i32[2] = v27 * v30;
    }
    goto LABEL_7;
  }
  double v13 = (float)(v9 + -0.5);
  double v14 = 1.0 - v13;
  BOOL v15 = v13 < 0.9;
  double v16 = 0.1;
  if (v15) {
    double v16 = v14;
  }
  *(double *)(v1 + 256) = v16;
  float v17 = 0.6;
LABEL_8:
  *(float32x2_t *)v18.f32 = vadd_f32(vmul_n_f32(v8, v17), *(float32x2_t *)v12.i8);
  v18.i64[1] = vextq_s8(v12, v12, 8uLL).u64[0];
  float32x4_t v36 = v18;
  *(float32x4_t *)(v1 + 160) = v18;
  sub_100050AD0((uint64_t)&off_10007F3D8);
  float32x4_t v34 = v19;
  sub_100050AD0((uint64_t)&off_10007F408);
  float32x4_t v21 = v34;
  float32x4_t v20 = v36;
  v20.i32[3] = 0;
  v21.i32[3] = 0;
  float32x4_t v22 = vmaxnmq_f32(v20, v21);
  v22.i32[3] = 0;
  v23.i32[3] = 0;
  *(float32x4_t *)(v1 + 160) = vminnmq_f32(v22, v23);
  uint64_t result = _s22MercuryPosterExtension9ToriSceneC9startTimeSdvpfi_0();
  *(void *)(v1 + 136) = v25;
  return result;
}

uint64_t ShippouScene.deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return v0;
}

uint64_t ShippouScene.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocClassInstance(v0, 289, 15);
}

uint64_t sub_10004FC3C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10004FD5C(a1, a2, a3, (void *)*v3);
  *long long v3 = result;
  return result;
}

uint64_t sub_10004FC5C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10004FF08(a1, a2, a3, (void *)*v3);
  *long long v3 = result;
  return result;
}

uint64_t sub_10004FC7C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000500B0(a1, a2, a3, (void *)*v3);
  *long long v3 = result;
  return result;
}

uint64_t sub_10004FC9C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100050238(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_10004FCBC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000503A4(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_10004FCDC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100050504(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_10004FCFC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100050674(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_10004FD1C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000507D4(a1, a2, a3, *v3);
  *long long v3 = (char *)result;
  return result;
}

uint64_t sub_10004FD3C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100050944(a1, a2, a3, (void *)*v3);
  *long long v3 = result;
  return result;
}

uint64_t sub_10004FD5C(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100008F4C(&qword_100099FA0);
    float v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    float v10 = &_swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 56 * v8) {
      memmove(v10 + 4, a4 + 4, 56 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 56 * v8 || v12 >= v13 + 56 * v8)
  {
    sub_100008F4C(&qword_100099FA8);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_10005E378();
  __break(1u);
  return result;
}

uint64_t sub_10004FF08(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100008F4C((uint64_t *)&unk_100098E30);
    float v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    float v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    sub_100008F4C((uint64_t *)&unk_100099F90);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_10005E378();
  __break(1u);
  return result;
}

uint64_t sub_1000500B0(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100008F4C(&qword_100099FB0);
    float v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 6);
  }
  else
  {
    float v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 4;
  double v14 = a4 + 4;
  size_t v15 = v8 << 6;
  if (a1)
  {
    if (v10 != a4 || v13 >= (void *)((char *)v14 + v15)) {
      memmove(v10 + 4, a4 + 4, v15);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= (void *)((char *)v13 + v15) || v13 >= (void *)((char *)v14 + v15))
  {
    sub_100008F4C(&qword_100099FB8);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_10005E378();
  __break(1u);
  return result;
}

uint64_t sub_100050238(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100008F4C(&qword_100099FC0);
    float v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    float v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  double v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_10005E378();
  __break(1u);
  return result;
}

uint64_t sub_1000503A4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100008F4C(&qword_100099FC8);
    float v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 95;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 7);
  }
  else
  {
    float v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  double v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[128 * v8]) {
      memmove(v13, v14, v8 << 7);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[128 * v8] || v13 >= &v14[128 * v8])
  {
    memcpy(v13, v14, v8 << 7);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_10005E378();
  __break(1u);
  return result;
}

uint64_t sub_100050504(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100008F4C((uint64_t *)&unk_100099FD0);
    float v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    float v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  size_t v14 = 48 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_10005E378();
  __break(1u);
  return result;
}

uint64_t sub_100050674(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100008F4C(&qword_100099BD0);
    float v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    float v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_10005E378();
  __break(1u);
  return result;
}

uint64_t sub_1000507D4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100008F4C(&qword_100098E40);
    float v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    float v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_10005E378();
  __break(1u);
  return result;
}

uint64_t sub_100050944(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100008F4C(&qword_100099F78);
    float v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    float v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_100008F4C((uint64_t *)&unk_100099F80);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_10005E378();
  __break(1u);
  return result;
}

uint64_t sub_100050AD0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    unint64_t v3 = 3;
    if ((unint64_t)(v1 - 1) < 3) {
      unint64_t v3 = v1 - 1;
    }
    long long v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 2)
      {
        __break(1u);
        goto LABEL_10;
      }
      int v5 = *(_DWORD *)(result + 32 + 4 * v2);
      long long v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      long long v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 2) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

unint64_t sub_100050B40()
{
  unint64_t result = qword_100099BC0;
  if (!qword_100099BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100099BC0);
  }
  return result;
}

uint64_t type metadata accessor for ShippouScene()
{
  return self;
}

uint64_t sub_100050BB8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    unint64_t v3 = 4;
    if ((unint64_t)(v1 - 1) < 4) {
      unint64_t v3 = v1 - 1;
    }
    long long v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 3)
      {
        __break(1u);
        goto LABEL_10;
      }
      int v5 = *(_DWORD *)(result + 32 + 4 * v2);
      long long v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      long long v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 3) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

uint64_t sub_100050C28(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = 2;
    if ((unint64_t)(v1 - 1) < 2) {
      uint64_t v3 = v1 - 1;
    }
    uint64_t v4 = 0;
    do
    {
      if ((unint64_t)(v1 - 1) > 1)
      {
        __break(1u);
        goto LABEL_10;
      }
      int v5 = *(_DWORD *)(result + 32 + 4 * v2);
      uint64_t v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v2 & 1))) = v5;
      uint64_t v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (!v3) {
      goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

uint64_t sub_100050C94@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(void *)(v3 + 32);
  return result;
}

uint64_t sub_100050CDC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 32) = v2;
  return result;
}

uint64_t sub_100050D20@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(void *)(v3 + 40);
  return result;
}

uint64_t sub_100050D68(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 40) = v2;
  return result;
}

uint64_t sub_100050DAC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 48);
  return swift_bridgeObjectRetain();
}

uint64_t getEnumTagSinglePayload for ShippouScene.Error(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for ShippouScene.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100050EECLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShippouScene.Error()
{
  return &type metadata for ShippouScene.Error;
}

unint64_t sub_100050F28()
{
  unint64_t result = qword_100099F70;
  if (!qword_100099F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100099F70);
  }
  return result;
}

CGColorSpaceRef sub_100050F80()
{
  CGColorSpaceRef result = CGColorSpaceCreateWithName(kCGColorSpaceDisplayP3);
  qword_10009FA48 = (uint64_t)result;
  return result;
}

uint64_t ShippouRenderer.scene.getter()
{
  return swift_retain();
}

uint64_t ShippouRenderer.scene.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 56) = a1;
  return swift_release();
}

uint64_t (*ToriLight.applyNormal.modify())()
{
  return j__swift_endAccess;
}

void *ToriRenderer.maxFramesInFlight.unsafeMutableAddressor()
{
  return &static ToriRenderer.maxFramesInFlight;
}

uint64_t static ToriRenderer.maxFramesInFlight.getter()
{
  return 3;
}

void *ToriRenderer.multisampleCount.unsafeMutableAddressor()
{
  return &static ToriRenderer.multisampleCount;
}

void sub_1000510A0(char a1)
{
  uint64_t v2 = v1;
  int v4 = *(unsigned __int8 *)(v1 + 184);
  if (v4 != 5)
  {
    if (a1 == 5 || (sub_10004BBB4(v4, a1) & 1) == 0 && (int v4 = *(unsigned __int8 *)(v1 + 184), v4 != 5))
    {
      uint64_t v11 = (char)v4;
      uint64_t v12 = (&off_100081F98)[(char)v4];
      if (v12[2])
      {
        unint64_t v13 = *(void **)(v1 + 80);
        uint64_t v14 = (uint64_t)v12[4];
        size_t v15 = v12[5];
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        int64_t v16 = sub_10005C168(v13, v14, v15, 6711668, 0xE300000000000000, 4);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        *(void *)(v2 + 128) = v16;
        swift_unknownObjectRelease();
        float v17 = (&off_100081F98)[v11];
        if ((unint64_t)v17[2] >= 2)
        {
          float32x4_t v18 = *(void **)(v2 + 80);
          uint64_t v20 = (uint64_t)v17[6];
          float32x4_t v19 = v17[7];
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          int64_t v21 = sub_10005C168(v18, v20, v19, 6711668, 0xE300000000000000, 4);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          *(void *)(v2 + 136) = v21;
          swift_unknownObjectRelease();
          float32x4_t v22 = (&off_100081F98)[v11];
          if ((unint64_t)v22[2] >= 3)
          {
            float32x4_t v23 = *(void **)(v2 + 80);
            uint64_t v25 = (uint64_t)v22[8];
            long long v24 = v22[9];
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
            int64_t v26 = sub_10005C168(v23, v25, v24, 6711668, 0xE300000000000000, 4);
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            *(void *)(v2 + 144) = v26;
            swift_unknownObjectRelease();
            float v27 = (&off_100081F98)[v11];
            if ((unint64_t)v27[2] >= 4)
            {
              double v28 = *(void **)(v2 + 80);
              uint64_t v30 = (uint64_t)v27[10];
              float v29 = v27[11];
              swift_unknownObjectRetain();
              swift_bridgeObjectRetain();
              int64_t v31 = sub_10005C168(v28, v30, v29, 6711668, 0xE300000000000000, 4);
              swift_bridgeObjectRelease();
              swift_unknownObjectRelease();
              *(void *)(v2 + 152) = v31;
              swift_unknownObjectRelease();
              swift_beginAccess();
              float v33 = *(void **)(v2 + 80);
              double v32 = *(void **)(v2 + 88);
              swift_retain();
              float32x4_t v34 = (void *)swift_unknownObjectRetain();
              sub_100056F54(v34, v11);
              sub_100052ECC(v33, v11, v32);
              swift_release();
              swift_unknownObjectRelease();
              return;
            }
            goto LABEL_22;
          }
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          swift_errorRelease();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          sub_10005E1F8(34);
          swift_bridgeObjectRelease();
          v37._uint64_t countAndFlagsBits = sub_10004CA9C();
          sub_10005DEE8(v37);
          swift_bridgeObjectRelease();
          sub_10005E308();
          __break(1u);
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_21;
    }
  }
  if (qword_1000978E8 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10005DCD8();
  sub_100008DB0(v5, (uint64_t)qword_10009FB68);
  swift_retain_n();
  uint64_t v6 = sub_10005DCB8();
  os_log_type_t v7 = sub_10005E068();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    v36[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    if (*(unsigned char *)(v2 + 184) == 5)
    {
      unint64_t v9 = 0xE400000000000000;
      uint64_t v10 = 1701736302;
    }
    else
    {
      uint64_t v10 = sub_10004CA9C();
      unint64_t v9 = v35;
    }
    v36[3] = sub_100044640(v10, v9, v36);
    sub_10005E138();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Warning: Look is either nil or identical %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t ToriRenderer.__allocating_init(device:identifier:pixelWidth:pixelHeight:commandBuffer:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  ToriRenderer.init(device:identifier:pixelWidth:pixelHeight:commandBuffer:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t ToriRenderer.init(device:identifier:pixelWidth:pixelHeight:commandBuffer:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_WORD *)(v5 + 48) = 0;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(unsigned char *)(v5 + 184) = 5;
  *(void *)(v5 + 160) = 0;
  *(void *)(v5 + 168) = a2;
  *(void *)(v5 + 176) = a3;
  *(void *)(v5 + 80) = a1;
  id v10 = [(id)swift_unknownObjectRetain() newDefaultLibrary];
  uint64_t v11 = v10;
  if (!v10)
  {
    sub_100051CC8();
    swift_allocError();
    unsigned char *v13 = 0;
    swift_willThrow();
    goto LABEL_5;
  }
  *(void *)(v5 + 88) = v10;
  type metadata accessor for ToriScene();
  swift_allocObject();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v12 = ToriScene.init(device:)(a1);
  if (v6)
  {
    swift_unknownObjectRelease();
LABEL_5:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    int v14 = 0;
    int v15 = 0;
    goto LABEL_6;
  }
  *(void *)(v5 + 56) = v12;
  if (a4 >= 0) {
    uint64_t v17 = a4;
  }
  else {
    uint64_t v17 = a4 + 1;
  }
  float32x4_t v18 = sub_100052870(a1, v17 >> 1, a5);
  *(void *)(v5 + 104) = v20;
  *(void *)(v5 + 112) = v19;
  *(void *)(v5 + 96) = v18;
  id v21 = objc_allocWithZone((Class)MTLRenderPipelineDescriptor);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  id v22 = [v21 init];
  NSString v23 = sub_10005DE38();
  id v24 = [v11 newFunctionWithName:v23];

  [v22 setVertexFunction:v24];
  swift_unknownObjectRelease();
  NSString v25 = sub_10005DE38();
  id v26 = [v11 newFunctionWithName:v25];

  [v22 setFragmentFunction:v26];
  swift_unknownObjectRelease();
  id v27 = [v22 colorAttachments];
  id v28 = [v27 objectAtIndexedSubscript:0];

  if (v28)
  {
    [v28 setPixelFormat:81];

    uint64_t v38 = 0;
    id v29 = [a1 newRenderPipelineStateWithDescriptor:v22 error:&v38];
    id v28 = v38;
    if (v29)
    {
      *(void *)(v5 + 72) = v29;
      id v30 = objc_allocWithZone((Class)MTLDepthStencilDescriptor);
      id v31 = v28;
      id v32 = [v30 init];
      [v32 setDepthWriteEnabled:1];
      [v32 setDepthCompareFunction:1];
      id v33 = [a1 newDepthStencilStateWithDescriptor:v32];
      if (v33)
      {
        *(void *)(v5 + 64) = v33;
        swift_unknownObjectRetain();
        *(void *)(v5 + 120) = sub_10005C168(a1, 0xD000000000000011, (void *)0x8000000100065D40, 6778480, 0xE300000000000000, 4);
        sub_10005C908(a1, 0x6C5F63696D6C6966, 0xEA00000000007475, 6711668, 0xE300000000000000, 64, 0x4163696D6C6946, 0xE700000000000000);
        uint64_t v36 = v35;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        *(void *)(v5 + 160) = v36;
        swift_unknownObjectRelease();
        return v5;
      }
      sub_100051CC8();
      swift_allocError();
      *float32x4_t v34 = 0;
      swift_willThrow();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      int v14 = 1;
      int v15 = 1;
LABEL_6:
      sub_100012030(*(void *)(v5 + 16));
      sub_100012030(*(void *)(v5 + 32));
      if (v14) {
        swift_release();
      }
      if (v15) {
        swift_unknownObjectRelease();
      }
      swift_unknownObjectRelease();
      if (v11) {
        swift_unknownObjectRelease();
      }
      if (v15)
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_deallocPartialClassInstance();
      return v5;
    }
  }
  else
  {
    __break(1u);
  }
  id v37 = v28;
  sub_10005D978();

  swift_willThrow();
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

unint64_t sub_100051CC8()
{
  unint64_t result = qword_100099FE0;
  if (!qword_100099FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100099FE0);
  }
  return result;
}

uint64_t sub_100051D1C(double a1, double a2)
{
  sub_100008F4C(&qword_100099BD0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10005F1B0;
  uint64_t v5 = self;
  id v6 = [v5 mainScreen];
  [v6 bounds];
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  CGFloat v14 = v13;

  v41.origin.CGFloat x = v8;
  v41.origin.CGFloat y = v10;
  v41.size.CGFloat width = v12;
  v41.size.CGFloat height = v14;
  float v15 = CGRectGetWidth(v41) * 0.5;
  *(float *)(inited + 32) = v15;
  id v16 = [v5 mainScreen];
  [v16 bounds];
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  CGFloat v22 = v21;
  CGFloat v24 = v23;

  v42.origin.CGFloat x = v18;
  v42.origin.CGFloat y = v20;
  v42.size.CGFloat width = v22;
  v42.size.CGFloat height = v24;
  float v25 = CGRectGetHeight(v42) * 0.5;
  *(float *)(inited + 36) = v25;
  sub_100050C28(inited);
  uint64_t v40 = v26;
  swift_setDeallocating();
  uint64_t v27 = swift_initStackObject();
  *(_OWORD *)(v27 + 16) = xmmword_10005F1B0;
  float v28 = a1;
  float v29 = a2;
  *(float *)(v27 + 32) = v28 - *(float *)&v40;
  *(float *)(v27 + 36) = v29 - *((float *)&v40 + 1);
  sub_100050C28(v27);
  float32x2_t v31 = v30;
  swift_setDeallocating();
  swift_beginAccess();
  uint64_t v32 = swift_initStackObject();
  *(_OWORD *)(v32 + 16) = xmmword_10005F1B0;
  *(void *)(v32 + 32) = v40;
  sub_100050C28(v32);
  float32x2_t v34 = v33;
  swift_setDeallocating();
  swift_retain();
  ToriScene.tap(at:)(COERCE_DOUBLE(vdiv_f32(v31, v34)), v35, v36, v37, v38);
  return swift_release();
}

uint64_t ToriRenderer.deinit()
{
  sub_100012030(*(void *)(v0 + 16));
  sub_100012030(*(void *)(v0 + 32));
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ToriRenderer.__deallocating_deinit()
{
  ToriRenderer.deinit();

  return _swift_deallocClassInstance(v0, 185, 7);
}

uint64_t sub_100051FF8()
{
  if (qword_100097878 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_10009FA48;
  id v1 = (id)qword_10009FA48;
  return v0;
}

uint64_t sub_100052058(uint64_t result)
{
  *(unsigned char *)(v1 + 48) = result;
  return result;
}

uint64_t sub_100052060(uint64_t result)
{
  *(unsigned char *)(v1 + 49) = result;
  return result;
}

uint64_t sub_100052068(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return sub_100012030(v3);
}

uint64_t sub_10005207C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_100014888(v1);
  return v1;
}

void sub_1000520B0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
}

void sub_1000520CC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = v4;
  if ((*(unsigned char *)(a1 + 52) & 1) == 0)
  {
    uint64_t v6 = v3;
    uint64_t v10 = *(void *)(a1 + 16);
    double v11 = *(void **)(a1 + 24);
    swift_bridgeObjectRetain();
    char v12 = sub_10004D370(v10, v11);
    if (v12 == 5)
    {
      if (*(unsigned char *)(v6 + 184) != 5) {
        goto LABEL_9;
      }
      char v13 = sub_10004D0FC();
      char v14 = *(unsigned char *)(v6 + 184);
      *(unsigned char *)(v6 + 184) = v13;
      char v15 = v14;
      goto LABEL_8;
    }
    char v16 = v12;
    uint64_t v17 = sub_10004CA9C();
    uint64_t v19 = v18;
    if (*(unsigned char *)(v6 + 184) == 5)
    {
      swift_bridgeObjectRelease();
LABEL_7:
      char v15 = *(unsigned char *)(v6 + 184);
      *(unsigned char *)(v6 + 184) = v16;
LABEL_8:
      sub_1000510A0(v15);
      goto LABEL_9;
    }
    if (v17 == sub_10004CA9C() && v19 == v43)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v45 = sub_10005E448();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v45 & 1) == 0) {
        goto LABEL_7;
      }
    }
LABEL_9:
    swift_beginAccess();
    swift_retain();
    ToriScene.update(state:size:isSnapshotting:)((float *)a1, *(unsigned char *)(v6 + 49), (double)(uint64_t)[a2 width], (double)(uint64_t)objc_msgSend(a2, "height"));
    swift_release();
    if (v5) {
      return;
    }
    long long v52 = a2;
    id v20 = [objc_allocWithZone((Class)MTLRenderPassDescriptor) init];
    id v21 = [v20 colorAttachments];
    id v22 = [v21 objectAtIndexedSubscript:0];

    if (v22)
    {
      [v22 setTexture:*(void *)(v6 + 104)];
      uint64_t v50 = *(void *)(v6 + 96);
      objc_msgSend(v22, "setResolveTexture:");
      [v22 setLoadAction:2];
      [v22 setStoreAction:2];
      objc_msgSend(v22, "setClearColor:", 0.0, 0.0, 0.0, 1.0);
      id v23 = [v20 depthAttachment];
      if (v23)
      {
        CGFloat v24 = v23;
        [v23 setTexture:*(void *)(v6 + 112)];
        [v24 setLoadAction:2];
        [v24 setStoreAction:0];
        [v24 setClearDepth:1.0];
        id v51 = a3;
        id v25 = [a3 renderCommandEncoderWithDescriptor:v20];
        if (!v25)
        {
          sub_100051CC8();
          swift_allocError();
          unsigned char *v46 = 2;
          swift_willThrow();

          id v32 = v22;
          id v34 = v24;
LABEL_28:

          return;
        }
        uint64_t v26 = v25;
        long long v49 = v24;
        [v25 setDepthClipMode:1];
        [v26 setDepthStencilState:*(void *)(v6 + 64)];
        [v26 setCullMode:2];
        uint64_t v27 = *(void *)(v6 + 56);
        uint64_t v28 = *(void *)(v27 + 32);
        swift_beginAccess();
        [v26 setVertexBuffer:v28 offset:*(void *)(v27 + 40) atIndex:2];
        uint64_t v29 = *(void *)(v6 + 56);
        uint64_t v30 = *(void *)(v29 + 32);
        swift_beginAccess();
        [v26 setFragmentBuffer:v30 offset:*(void *)(v29 + 40) atIndex:2];
        uint64_t v31 = *(void *)(v6 + 56);
        swift_beginAccess();
        [v26 setFragmentBuffer:*(void *)(v31 + 24) offset:0 atIndex:8];
        [v26 setFragmentTexture:*(void *)(v6 + 128) atIndex:0];
        [v26 setFragmentTexture:*(void *)(v6 + 136) atIndex:1];
        [v26 setFragmentTexture:*(void *)(v6 + 144) atIndex:2];
        [v26 setFragmentTexture:*(void *)(v6 + 152) atIndex:3];
        [v26 setFragmentTexture:*(void *)(v6 + 120) atIndex:4];
        swift_retain();
        ToriMesh.draw(renderEncoder:)((uint64_t)v26);
        swift_release();
        [v26 endEncoding];
        id v32 = [objc_allocWithZone((Class)MTLRenderPassDescriptor) init];
        id v33 = [v20 colorAttachments];
        id v34 = [v33 objectAtIndexedSubscript:0];

        if (v34)
        {
          id v48 = v20;
          [v34 setResolveTexture:v52];
          [v34 setStoreAction:2];
          objc_msgSend(v34, "setClearColor:", 0.0, 0.0, 0.0, 0.0);
          id v35 = [v32 colorAttachments];
          id v36 = [v35 objectAtIndexedSubscript:0];

          if (v36)
          {
            [v36 setTexture:v52];

            id v37 = [v32 colorAttachments];
            id v38 = [v37 objectAtIndexedSubscript:0];

            if (v38)
            {
              [v38 setLoadAction:2];

              id v39 = [v32 colorAttachments];
              id v40 = [v39 objectAtIndexedSubscript:0];

              if (v40)
              {
                objc_msgSend(v40, "setClearColor:", 0.0, 0.0, 0.0, 1.0);

                id v41 = [v51 renderCommandEncoderWithDescriptor:v32];
                if (v41)
                {
                  CGRect v42 = v41;
                  [v41 setRenderPipelineState:*(void *)(v6 + 72)];
                  [v42 setFragmentTexture:v50 atIndex:0];
                  [v42 setFragmentTexture:*(void *)(v6 + 160) atIndex:1];
                  [v42 drawPrimitives:3 vertexStart:0 vertexCount:6];
                  [v42 endEncoding];

                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  return;
                }
                sub_100051CC8();
                swift_allocError();
                *id v47 = 2;
                swift_willThrow();

                swift_unknownObjectRelease();
                goto LABEL_28;
              }
LABEL_35:
              __break(1u);
              return;
            }
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
LABEL_33:
          __break(1u);
          goto LABEL_34;
        }
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_32;
  }
}

void *sub_100052870(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = [objc_allocWithZone((Class)MTLTextureDescriptor) init];
  [v6 setWidth:a2];
  [v6 setHeight:a3];
  [v6 setPixelFormat:81];
  [v6 setStorageMode:2];
  [v6 setUsage:4];
  [v6 setTextureType:4];
  [v6 setSampleCount:2];
  if (![a1 newTextureWithDescriptor:v6])
  {
    sub_100051CC8();
    swift_allocError();
    *CGFloat v8 = 0;
    swift_willThrow();

    return a1;
  }
  [v6 setPixelFormat:250];
  if (![a1 newTextureWithDescriptor:v6])
  {
    sub_100051CC8();
    swift_allocError();
    *double v9 = 0;
    swift_willThrow();

LABEL_8:
    swift_unknownObjectRelease();
    return a1;
  }
  [v6 setTextureType:2];
  [v6 setPixelFormat:81];
  [v6 setSampleCount:1];
  [v6 setUsage:1];
  id v7 = [a1 newTextureWithDescriptor:v6];
  if (!v7)
  {
    sub_100051CC8();
    swift_allocError();
    *uint64_t v10 = 0;
    swift_willThrow();

    swift_unknownObjectRelease();
    goto LABEL_8;
  }
  a1 = v7;

  return a1;
}

uint64_t type metadata accessor for ToriRenderer()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for ToriRenderer.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100052BB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ToriRenderer.Error()
{
  return &type metadata for ToriRenderer.Error;
}

unint64_t sub_100052BF0()
{
  unint64_t result = qword_10009A120;
  if (!qword_10009A120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10009A120);
  }
  return result;
}

__n128 ToriMesh.transform.getter()
{
  swift_beginAccess();
  return v0[2];
}

__n128 ToriMesh.transform.setter(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  swift_beginAccess();
  v4[2] = a1;
  v4[3] = a2;
  __n128 result = a4;
  v4[4] = a3;
  v4[5] = a4;
  return result;
}

uint64_t (*ToriLight.scale.modify())()
{
  return j_j__swift_endAccess;
}

simd_float4 *sub_100052D20(uint64_t a1)
{
  v1[1].i64[0] = 0;
  v1[1].i64[1] = 0;
  simd_float4 v4 = matrix_identity_float4x4.columns[1];
  simd_float4 v5 = matrix_identity_float4x4.columns[2];
  simd_float4 v6 = matrix_identity_float4x4.columns[3];
  v1[2] = matrix_identity_float4x4.columns[0];
  v1[3] = v4;
  v1[4] = v5;
  v1[5] = v6;
  if (qword_100097880 != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v7 = (id)static ToriMesh.defaultVertexDescriptor;
  sub_100053D3C(a1, 1769107316, 0xE400000000000000, 6972015, 0xE300000000000000, 1, v7);
  double v9 = v8;

  if (v2)
  {
    swift_release();
  }
  else
  {
    id v15 = 0;
    id v10 = [objc_allocWithZone((Class)MTKMesh) initWithMesh:v9 device:a1 error:&v15];
    id v11 = v15;
    if (v10)
    {

      swift_unknownObjectRelease();
      char v12 = (void *)v1[1].i64[1];
      v1[1].i64[1] = (uint64_t)v10;

      return v1;
    }
    char v14 = v11;
    sub_10005D978();

    swift_willThrow();
    swift_release();
  }
  swift_unknownObjectRelease();
  return v1;
}

void sub_100052ECC(void *a1, char a2, void *a3)
{
  uint64_t v5 = 7305076;
  id v6 = [objc_allocWithZone((Class)MTLRenderPipelineDescriptor) init];
  sub_10005E1F8(21);
  swift_bridgeObjectRelease();
  uint64_t v23 = 0x3A3A69726F74;
  unint64_t v24 = 0xE600000000000000;
  id v7 = (void *)0xE300000000000000;
  v8._uint64_t countAndFlagsBits = 7305076;
  switch(a2)
  {
    case 1:
      id v7 = (void *)0xE400000000000000;
      v8._uint64_t countAndFlagsBits = 1702259046;
      break;
    case 2:
      id v7 = (void *)0xE400000000000000;
      v8._uint64_t countAndFlagsBits = 1920298854;
      break;
    case 3:
      id v7 = (void *)0xE500000000000000;
      v8._uint64_t countAndFlagsBits = 0x6565726874;
      break;
    case 4:
      break;
    default:
      v8._uint64_t countAndFlagsBits = 6647407;
      break;
  }
  v8._object = v7;
  sub_10005DEE8(v8);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 0x567375726F743A3ALL;
  v25._object = (void *)0xED00007865747265;
  sub_10005DEE8(v25);
  NSString v9 = sub_10005DE38();
  swift_bridgeObjectRelease();
  id v10 = [a3 newFunctionWithName:v9];

  [v6 setVertexFunction:v10];
  swift_unknownObjectRelease();
  sub_10005E1F8(23);
  swift_bridgeObjectRelease();
  uint64_t v23 = 0x3A3A69726F74;
  unint64_t v24 = 0xE600000000000000;
  id v11 = (void *)0xE300000000000000;
  switch(a2)
  {
    case 0:
      uint64_t v5 = 6647407;
      break;
    case 1:
      id v11 = (void *)0xE400000000000000;
      uint64_t v5 = 1702259046;
      break;
    case 2:
      id v11 = (void *)0xE400000000000000;
      uint64_t v5 = 1920298854;
      break;
    case 3:
      id v11 = (void *)0xE500000000000000;
      uint64_t v5 = 0x6565726874;
      break;
    case 4:
      break;
    default:
      JUMPOUT(0);
  }
  v26._uint64_t countAndFlagsBits = v5;
  v26._object = v11;
  sub_10005DEE8(v26);
  swift_bridgeObjectRelease();
  v27._uint64_t countAndFlagsBits = 0x467375726F743A3ALL;
  v27._object = (void *)0xEF746E656D676172;
  sub_10005DEE8(v27);
  NSString v12 = sub_10005DE38();
  swift_bridgeObjectRelease();
  id v13 = [a3 newFunctionWithName:v12];

  [v6 setFragmentFunction:v13];
  swift_unknownObjectRelease();
  if (qword_100097880 != -1) {
    swift_once();
  }
  swift_beginAccess();
  char v14 = MTKMetalVertexDescriptorFromModelIO((MDLVertexDescriptor *)static ToriMesh.defaultVertexDescriptor);
  [v6 setVertexDescriptor:v14];

  id v15 = [v6 colorAttachments];
  id v16 = [v15 objectAtIndexedSubscript:0];

  if (!v16) {
    __break(1u);
  }
  [v16 setPixelFormat:81];

  [v6 setDepthAttachmentPixelFormat:250];
  [v6 setRasterSampleCount:2];
  id v22 = 0;
  id v17 = [a1 newRenderPipelineStateWithDescriptor:v6 error:&v22];
  id v18 = v22;
  if (v17)
  {

    *(void *)(v20 + 16) = v17;
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v19 = v18;
    sub_10005D978();

    swift_willThrow();
  }
}

uint64_t *ToriMesh.defaultVertexDescriptor.unsafeMutableAddressor()
{
  if (qword_100097880 != -1) {
    swift_once();
  }
  return &static ToriMesh.defaultVertexDescriptor;
}

uint64_t ToriMesh.draw(renderEncoder:)(uint64_t result)
{
  uint64_t v2 = *(void **)(v1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 16);
    if (v3)
    {
      simd_float4 v4 = (void *)result;
      swift_beginAccess();
      *(_OWORD *)uint64_t v31 = *(_OWORD *)(v1 + 48);
      __n128 v33 = *(__n128 *)(v1 + 32);
      long long v29 = *(_OWORD *)(v1 + 80);
      __n128 v30 = *(__n128 *)(v1 + 64);
      sub_100009EB0(&v37, v33, *(__n128 *)v31, v30);
      simd_float3x3 v38 = __invert_f3(v37);
      int32x4_t v5 = vzip1q_s32((int32x4_t)v38.columns[0], (int32x4_t)v38.columns[2]);
      int32x4_t v6 = vzip1q_s32((int32x4_t)v38.columns[1], (int32x4_t)0);
      int32x4_t v7 = vzip1q_s32(v5, v6);
      int32x4_t v8 = vzip2q_s32(v5, v6);
      v7.i32[2] = vdupq_lane_s32(*(int32x2_t *)(&v38 + 32), 0).i32[2];
      v38.columns[0] = (simd_float3)vzip1q_s32(vdupq_laneq_s32((int32x4_t)v38.columns[0], 2), vdupq_laneq_s32((int32x4_t)v38.columns[1], 2));
      v8.i32[2] = vdupq_lane_s32(*(int32x2_t *)(&v38 + 32), 1).i32[2];
      v38.columns[0].i32[2] = v38.columns[2].i32[2];
      v36[0] = v33;
      v36[1] = *(_OWORD *)v31;
      v36[2] = v30;
      v36[3] = v29;
      uint64_t v36[4] = v7;
      void v36[5] = v8;
      v36[6] = v38.columns[0];
      id v9 = v2;
      swift_unknownObjectRetain();
      [v4 setRenderPipelineState:v3];
      [v4 setVertexBytes:v36 length:112 atIndex:3];
      [v4 setFragmentBytes:v36 length:112 atIndex:3];
      id v32 = v9;
      id v10 = [v9 vertexBuffers];
      sub_10000991C(0, &qword_10009A130);
      unint64_t v11 = sub_10005DFA8();

      if (v11 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v12 = sub_10005E328();
        swift_bridgeObjectRelease();
        if (!v12) {
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v12) {
          goto LABEL_12;
        }
      }
      if (v12 < 1)
      {
        __break(1u);
        goto LABEL_24;
      }
      for (uint64_t i = 0; i != v12; ++i)
      {
        if ((v11 & 0xC000000000000001) != 0) {
          id v14 = (id)sub_10005E218();
        }
        else {
          id v14 = *(id *)(v11 + 8 * i + 32);
        }
        id v15 = v14;
        objc_msgSend(v4, "setVertexBuffer:offset:atIndex:", objc_msgSend(v14, "buffer", v29), objc_msgSend(v14, "offset"), i);

        swift_unknownObjectRelease();
      }
LABEL_12:
      swift_bridgeObjectRelease();
      id v16 = [v9 submeshes];
      sub_10000991C(0, &qword_10009A138);
      unint64_t v17 = sub_10005DFA8();

      id v35 = v4;
      if (v17 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v18 = sub_10005E328();
        swift_bridgeObjectRelease();
        if (v18)
        {
LABEL_14:
          if (v18 >= 1)
          {
            uint64_t v19 = 0;
            unint64_t v34 = v17 & 0xC000000000000001;
            unint64_t v20 = v17;
            do
            {
              if (v34) {
                id v21 = (id)sub_10005E218();
              }
              else {
                id v21 = *(id *)(v17 + 8 * v19 + 32);
              }
              id v22 = v21;
              ++v19;
              id v23 = objc_msgSend(v21, "indexCount", v29);
              id v24 = [v22 indexType];
              id v25 = [v22 indexBuffer];
              id v26 = [v25 buffer];

              id v27 = [v22 indexBuffer];
              id v28 = [v27 offset];

              [v35 drawIndexedPrimitives:3 indexCount:v23 indexType:v24 indexBuffer:v26 indexBufferOffset:v28];
              swift_unknownObjectRelease();
              unint64_t v17 = v20;
            }
            while (v18 != v19);
            goto LABEL_21;
          }
LABEL_24:
          __break(1u);
        }
      }
      else
      {
        uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v18) {
          goto LABEL_14;
        }
      }
LABEL_21:

      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t ToriMesh.deinit()
{
  swift_unknownObjectRelease();

  return v0;
}

uint64_t ToriMesh.__deallocating_deinit()
{
  swift_unknownObjectRelease();

  return _swift_deallocClassInstance(v0, 96, 15);
}

id sub_100053844()
{
  id result = sub_100053864();
  static ToriMesh.defaultVertexDescriptor = (uint64_t)result;
  return result;
}

id sub_100053864()
{
  id v0 = [objc_allocWithZone((Class)MDLVertexDescriptor) init];
  id v1 = [v0 attributes];
  sub_10005DE68();
  id v2 = objc_allocWithZone((Class)MDLVertexAttribute);
  NSString v3 = sub_10005DE38();
  swift_bridgeObjectRelease();
  id v4 = [v2 initWithName:v3 format:786435 offset:0 bufferIndex:0];

  [v1 setObject:v4 atIndexedSubscript:0];
  id v5 = [v0 attributes];
  sub_10005DE68();
  id v6 = objc_allocWithZone((Class)MDLVertexAttribute);
  NSString v7 = sub_10005DE38();
  swift_bridgeObjectRelease();
  id v8 = [v6 initWithName:v7 format:786435 offset:12 bufferIndex:0];

  [v5 setObject:v8 atIndexedSubscript:1];
  id v9 = [v0 attributes];
  sub_10005DE68();
  id v10 = objc_allocWithZone((Class)MDLVertexAttribute);
  NSString v11 = sub_10005DE38();
  swift_bridgeObjectRelease();
  id v12 = [v10 initWithName:v11 format:786434 offset:24 bufferIndex:0];

  [v9 setObject:v12 atIndexedSubscript:2];
  id v13 = [v0 layouts];
  id v14 = [objc_allocWithZone((Class)MDLVertexBufferLayout) initWithStride:32];
  [v13 setObject:v14 atIndexedSubscript:0];

  return v0;
}

id static ToriMesh.defaultVertexDescriptor.getter()
{
  if (qword_100097880 != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v0 = (void *)static ToriMesh.defaultVertexDescriptor;

  return v0;
}

void static ToriMesh.defaultVertexDescriptor.setter(uint64_t a1)
{
  if (qword_100097880 != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v2 = (void *)static ToriMesh.defaultVertexDescriptor;
  static ToriMesh.defaultVertexDescriptor = a1;
}

uint64_t (*static ToriMesh.defaultVertexDescriptor.modify())()
{
  if (qword_100097880 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

__n128 initializeWithCopy for MeshUniforms(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t getEnumTagSinglePayload for MeshUniforms(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MeshUniforms(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 112) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MeshUniforms()
{
  return &type metadata for MeshUniforms;
}

uint64_t type metadata accessor for ToriMesh()
{
  return self;
}

void sub_100053D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, void *a7)
{
  id v45 = a7;
  int v42 = a6;
  uint64_t v43 = a1;
  uint64_t v7 = sub_100008F4C(&qword_1000984A0);
  __chkstk_darwin(v7 - 8);
  unint64_t v44 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  NSString v11 = (char *)&v41 - v10;
  uint64_t v12 = sub_10005DA28();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  unint64_t v46 = (char *)&v41 - v17;
  id v18 = [self mainBundle];
  NSString v19 = sub_10005DE38();
  NSString v20 = sub_10005DE38();
  id v21 = [v18 URLForResource:v19 withExtension:v20];

  if (!v21)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    goto LABEL_6;
  }
  sub_10005D9D8();

  id v22 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v22(v11, v15, v12);
  id v23 = *(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56);
  v23(v11, 0, 1, v12);
  id v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v24(v11, 1, v12) == 1)
  {
LABEL_6:
    sub_10002C65C((uint64_t)v11);
    sub_1000542A8();
    swift_allocError();
    swift_willThrow();
    return;
  }
  id v41 = v23;
  id v25 = v46;
  v22(v46, v11, v12);
  id v26 = objc_allocWithZone((Class)MTKMeshBufferAllocator);
  id v27 = [v26 initWithDevice:v43];
  id v28 = v44;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v44, v25, v12);
  v41(v28, 0, 1, v12);
  unsigned int v29 = v24(v28, 1, v12);
  id v31 = v45;
  if (v29 == 1)
  {
    id v32 = 0;
  }
  else
  {
    sub_10005D9B8(v30);
    id v32 = v33;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v28, v12);
  }
  char v34 = v42;
  id v35 = [objc_allocWithZone((Class)MDLAsset) initWithURL:v32 vertexDescriptor:v31 bufferAllocator:v27];

  if (v34) {
    [v35 loadTextures];
  }
  sub_10000991C(0, &qword_10009A258);
  id v36 = [v35 childObjectsOfClass:swift_getObjCClassFromMetadata()];
  sub_10000991C(0, &qword_10009A260);
  unint64_t v37 = sub_10005DFA8();

  if (!(v37 >> 62))
  {
    if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_12;
    }
LABEL_19:
    swift_bridgeObjectRelease();
LABEL_20:
    sub_1000542A8();
    swift_allocError();
    swift_willThrow();

    (*(void (**)(char *, uint64_t))(v13 + 8))(v46, v12);
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v40 = sub_10005E328();
  swift_bridgeObjectRelease();
  if (!v40) {
    goto LABEL_19;
  }
LABEL_12:
  if ((v37 & 0xC000000000000001) != 0)
  {
    id v38 = (id)sub_10005E218();
    goto LABEL_15;
  }
  if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v38 = *(id *)(v37 + 32);
LABEL_15:
    id v39 = v38;
    swift_bridgeObjectRelease();
    self;
    if (swift_dynamicCastObjCClass())
    {

      (*(void (**)(char *, uint64_t))(v13 + 8))(v46, v12);
      return;
    }

    goto LABEL_20;
  }
  __break(1u);
}

unint64_t sub_1000542A8()
{
  unint64_t result = qword_10009A250;
  if (!qword_10009A250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10009A250);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ToriMesh.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100054398);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ToriMesh.Error()
{
  return &type metadata for ToriMesh.Error;
}

unint64_t sub_1000543D4()
{
  unint64_t result = qword_10009A268;
  if (!qword_10009A268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10009A268);
  }
  return result;
}

__n128 Lens.__allocating_init(translation:aodTranslation:radii:aodRadii:ior:mask:)(unsigned __int8 a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, float a6)
{
  uint64_t v8 = (__n128 *)swift_allocObject();
  v8[1] = a2;
  v8[2] = a4;
  __n128 result = a3;
  v8[3] = a5;
  v8[4] = a3;
  v8[5].n128_f32[0] = a6;
  v8[5].n128_u8[4] = a1;
  return result;
}

__n128 Lens.translation.getter()
{
  swift_beginAccess();
  return v0[1];
}

__n128 Lens.translation.setter(__n128 a1)
{
  swift_beginAccess();
  __n128 result = a1;
  v1[1] = a1;
  return result;
}

__n128 ToriLight.scale.getter()
{
  swift_beginAccess();
  return v0[2];
}

__n128 ToriLight.scale.setter(__n128 a1)
{
  swift_beginAccess();
  __n128 result = a1;
  v1[2] = a1;
  return result;
}

__n128 Lens.aodRadii.getter()
{
  swift_beginAccess();
  return v0[3];
}

__n128 Lens.aodRadii.setter(__n128 a1)
{
  swift_beginAccess();
  __n128 result = a1;
  v1[3] = a1;
  return result;
}

uint64_t (*ToriLight.customDistance.modify())()
{
  return j_j__swift_endAccess;
}

__n128 Lens.aodTranslation.getter()
{
  swift_beginAccess();
  return v0[4];
}

__n128 Lens.aodTranslation.setter(__n128 a1)
{
  swift_beginAccess();
  __n128 result = a1;
  v1[4] = a1;
  return result;
}

float Lens.ior.getter()
{
  swift_beginAccess();
  return *(float *)(v0 + 80);
}

uint64_t Lens.ior.setter(float a1)
{
  uint64_t result = swift_beginAccess();
  *(float *)(v1 + 80) = a1;
  return result;
}

uint64_t (*Lens.ior.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t Lens.mask.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 84);
}

uint64_t Lens.mask.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 84) = a1;
  return result;
}

uint64_t (*Lens.mask.modify())()
{
  return j_j__swift_endAccess;
}

__n128 *Lens.init(translation:aodTranslation:radii:aodRadii:ior:mask:)(unsigned __int8 a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, float a6)
{
  v6[1] = a2;
  v6[2] = a4;
  v6[3] = a5;
  v6[4] = a3;
  v6[5].n128_f32[0] = a6;
  v6[5].n128_u8[4] = a1;
  return v6;
}

__n128 Lens.getEllipsoid(progress:scaleBy:)(float a1)
{
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  long long v4 = *(_OWORD *)(v1 + 64);
  swift_beginAccess();
  *(float32x2_t *)&long long v2 = vadd_f32(*(float32x2_t *)&v4, vmul_n_f32(vsub_f32(*(float32x2_t *)(v1 + 16), *(float32x2_t *)&v4), a1));
  *((float *)&v2 + 2) = *((float *)&v4 + 2) + (float)((float)(*(float *)(v1 + 24) - *((float *)&v4 + 2)) * a1);
  HIDWORD(v2) = 0;
  long long v6 = v2;
  swift_beginAccess();
  return (__n128)v6;
}

uint64_t Lens.deinit()
{
  return v0;
}

uint64_t Lens.__deallocating_deinit()
{
  return _swift_deallocClassInstance(v0, 85, 15);
}

uint64_t type metadata accessor for Lens()
{
  return self;
}

__n128 initializeWithCopy for Lens.Ellipsoid(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for Lens.Ellipsoid(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Lens.Ellipsoid(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 33) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Lens.Ellipsoid()
{
  return &type metadata for Lens.Ellipsoid;
}

CGColorSpaceRef sub_100054A1C()
{
  CGColorSpaceRef result = CGColorSpaceCreateWithName(kCGColorSpaceDisplayP3);
  qword_10009FA58 = (uint64_t)result;
  return result;
}

uint64_t sub_100054A48(char a1)
{
  int v2 = *(unsigned __int8 *)(v1 + 112);
  if (a1 == 4
    || (uint64_t result = sub_10004C078(*(unsigned char *)(v1 + 112), a1), (result & 1) == 0)
    && (int v2 = *(unsigned __int8 *)(v1 + 112), v2 != 4))
  {
    id v4 = [objc_allocWithZone((Class)MTLComputePipelineDescriptor) init];
    uint64_t v5 = *(void **)(v1 + 80);
    uint64_t result = 0xD000000000000017;
    switch(v2)
    {
      case 0:
      case 1:
      case 2:
      case 3:
        NSString v6 = sub_10005DE38();
        swift_bridgeObjectRelease();
        id v7 = [v5 newFunctionWithName:v6];

        [v4 setComputeFunction:v7];
        swift_unknownObjectRelease();
        [v4 setThreadGroupSizeIsMultipleOfThreadExecutionWidth:1];
        uint64_t v8 = *(void **)(v1 + 72);
        id v16 = 0;
        id v9 = [v8 newComputePipelineStateWithDescriptor:v4 options:0 reflection:0 error:&v16];
        if (v9)
        {
          id v10 = v16;
        }
        else
        {
          id v11 = v16;
          sub_10005D978();

          swift_willThrow();
          swift_errorRelease();
        }
        *(void *)(v1 + 64) = v9;
        swift_unknownObjectRelease();
        uint64_t v12 = 0xD000000000000012;
        uint64_t v13 = (void *)0x8000000100066000;
        switch(v2)
        {
          case 0:
            uint64_t v14 = "RampsOne-D93-D94";
            goto LABEL_12;
          case 1:
            uint64_t v12 = 0xD000000000000011;
            uint64_t v13 = (void *)0x8000000100065FC0;
            break;
          case 2:
            uint64_t v14 = "RampsTwo-D93-D94";
LABEL_12:
            uint64_t v13 = (void *)((unint64_t)(v14 - 32) | 0x8000000000000000);
            uint64_t v12 = 0xD000000000000010;
            break;
          case 3:
            break;
          default:
            JUMPOUT(0);
        }
        int64_t v15 = sub_100055204(v8, v12, v13, 6711668, 0xE300000000000000, 4);
        swift_bridgeObjectRelease();

        *(void *)(v1 + 104) = v15;
        uint64_t result = swift_unknownObjectRelease();
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t ShippouRenderer.__allocating_init(device:identifier:pixelWidth:pixelHeight:commandBuffer:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100055D70(a1, a2, a3);
}

uint64_t ShippouRenderer.init(device:identifier:pixelWidth:pixelHeight:commandBuffer:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100055D70(a1, a2, a3);
}

uint64_t sub_100054F08(double a1, double a2)
{
  sub_100008F4C(&qword_100099BD0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10005F1B0;
  uint64_t v5 = self;
  id v6 = [v5 mainScreen];
  [v6 bounds];
  CGFloat v8 = v7;
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  CGFloat v14 = v13;

  v41.origin.CGFloat x = v8;
  v41.origin.CGFloat y = v10;
  v41.size.CGFloat width = v12;
  v41.size.CGFloat height = v14;
  float v15 = CGRectGetWidth(v41) * 0.5;
  *(float *)(inited + 32) = v15;
  id v16 = [v5 mainScreen];
  [v16 bounds];
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  CGFloat v22 = v21;
  CGFloat v24 = v23;

  v42.origin.CGFloat x = v18;
  v42.origin.CGFloat y = v20;
  v42.size.CGFloat width = v22;
  v42.size.CGFloat height = v24;
  float v25 = CGRectGetHeight(v42) * 0.5;
  *(float *)(inited + 36) = v25;
  sub_100050C28(inited);
  float32x2_t v40 = v26;
  swift_setDeallocating();
  uint64_t v27 = swift_initStackObject();
  *(_OWORD *)(v27 + 16) = xmmword_10005F1B0;
  float v28 = a1;
  float v29 = a2;
  *(float *)(v27 + 32) = v28 - v40.f32[0];
  *(float *)(v27 + 36) = v29 - v40.f32[1];
  sub_100050C28(v27);
  float32x2_t v31 = v30;
  swift_setDeallocating();
  swift_beginAccess();
  sub_100050C28((uint64_t)&off_10007F438);
  __asm { FMOV            V1.2S, #1.0 }
  float32x2_t v38 = vminnm_f32(vmaxnm_f32(vdiv_f32(v31, v40), v32), _D1);
  swift_retain();
  ShippouScene.tap(at:)(v38);
  return swift_release();
}

uint64_t ShippouRenderer.deinit()
{
  sub_100012030(*(void *)(v0 + 16));
  sub_100012030(*(void *)(v0 + 32));
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t ShippouRenderer.__deallocating_deinit()
{
  ShippouRenderer.deinit();

  return _swift_deallocClassInstance(v0, 113, 7);
}

uint64_t sub_100055188()
{
  if (qword_100097888 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_10009FA58;
  id v1 = (id)qword_10009FA58;
  return v0;
}

char *sub_1000551E8(char *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  return sub_1000559A4(a1, a2, a5);
}

int64_t sub_100055204(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v60 = a1;
  uint64_t v61 = a6;
  uint64_t v8 = sub_100008F4C(&qword_1000984A0);
  __chkstk_darwin(v8 - 8);
  CGFloat v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10005DA28();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  CGFloat v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  float32x4_t v63 = (char *)&v53 - v16;
  id v17 = [self mainBundle];
  uint64_t v58 = a2;
  id v59 = a3;
  NSString v18 = sub_10005DE38();
  NSString v19 = sub_10005DE38();
  id v20 = [v17 URLForResource:v18 withExtension:v19];

  if (!v20)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
    goto LABEL_19;
  }
  sub_10005D9D8();

  double v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v21(v10, v14, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
LABEL_19:
    sub_10002C65C((uint64_t)v10);
    sub_100055F30();
    swift_allocError();
    *id v47 = 1;
    swift_willThrow();
    return (int64_t)v19;
  }
  CGFloat v22 = v63;
  v21(v63, v10, v11);
  sub_10005D9F8();
  double v23 = (__CFString *)sub_10005DE38();
  swift_bridgeObjectRelease();
  CFURLRef v24 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v23, kCFURLPOSIXPathStyle, 0);
  if (!v24)
  {
LABEL_23:
    sub_100055F30();
    swift_allocError();
    unsigned char *v48 = 1;
    swift_willThrow();

LABEL_30:
    (*(void (**)(char *, uint64_t))(v12 + 8))(v22, v11);
    return (int64_t)v19;
  }
  CFURLRef v25 = v24;
  float32x2_t v26 = CGImageSourceCreateWithURL(v24, 0);
  if (!v26)
  {
    uint64_t v27 = v25;
LABEL_22:

    goto LABEL_23;
  }
  uint64_t v27 = v26;
  ImageAtIndeCGFloat x = CGImageSourceCreateImageAtIndex(v26, 0, 0);
  if (!ImageAtIndex)
  {

    goto LABEL_22;
  }
  NSString v19 = ImageAtIndex;
  CGColorSpaceRef v29 = CGColorSpaceCreateWithName(kCGColorSpaceExtendedLinearSRGB);
  if (!v29)
  {
    sub_100055F30();
    swift_allocError();
    *long long v49 = 1;
    swift_willThrow();

LABEL_27:
    goto LABEL_28;
  }
  float32x2_t v30 = v29;
  float32x4_t v56 = v23;
  size_t Width = CGImageGetWidth((CGImageRef)v19);
  size_t Height = CGImageGetHeight((CGImageRef)v19);
  size_t BitsPerComponent = CGImageGetBitsPerComponent((CGImageRef)v19);
  char v34 = (CGImage *)v19;
  NSString v19 = (NSString)BitsPerComponent;
  CGImageRef v57 = v34;
  int64_t result = CGImageGetWidth(v34);
  if (result + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_34;
  }
  int64_t v36 = 2 * result * v61;
  if ((unsigned __int128)(2 * result * (__int128)v61) >> 64 != v36 >> 63)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  CGContextRef v37 = CGBitmapContextCreate(0, Width, Height, (size_t)v19, v36, v30, 0x1105u);
  if (!v37)
  {
    sub_100055F30();
    swift_allocError();
    unsigned char *v50 = 1;
    swift_willThrow();

LABEL_28:
LABEL_29:

    goto LABEL_30;
  }
  NSString v19 = v37;
  float32x2_t v38 = v57;
  CGImageGetWidth(v57);
  CGImageGetHeight(v38);
  sub_10005E058();
  Data = CGBitmapContextGetData((CGContextRef)v19);
  if (!Data)
  {
    sub_100055F30();
    swift_allocError();
    *id v51 = 1;
    swift_willThrow();

    goto LABEL_27;
  }
  long long v53 = Data;
  id v54 = v19;
  uint64_t v55 = v27;
  id v40 = [objc_allocWithZone((Class)MTLTextureDescriptor) init];
  [v40 setTextureType:2];
  [v40 setPixelFormat:115];
  [v40 setWidth:CGImageGetWidth(v38)];
  [v40 setHeight:CGImageGetHeight(v38)];
  [v40 setUsage:1];
  id v41 = [v60 newTextureWithDescriptor:v40];
  if (!v41)
  {
    sub_100055F30();
    NSString v19 = v30;
    swift_allocError();
    *long long v52 = 1;
    swift_willThrow();

    goto LABEL_29;
  }
  NSString v19 = v41;
  NSString v42 = sub_10005DE38();
  [v19 setLabel:v42];

  id v60 = [v40 width];
  id v59 = [v40 height];
  int64_t result = (int64_t)[v40 width];
  if (result + 0x4000000000000000 < 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v43 = 2 * result * v61;
  if ((unsigned __int128)(2 * result * (__int128)v61) >> 64 != v43 >> 63)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v44 = (uint64_t)[v40 width];
  int64_t result = (int64_t)[v40 height];
  int64_t v45 = v44 * result;
  if ((unsigned __int128)(v44 * (__int128)result) >> 64 != (v44 * result) >> 63)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  unint64_t v46 = v55;
  if (v45 + 0x4000000000000000 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((unsigned __int128)(2 * v45 * (__int128)v61) >> 64 == (2 * v45 * v61) >> 63)
  {
    memset(v62, 0, 24);
    v62[3] = v60;
    v62[4] = v59;
    v62[5] = 1;
    objc_msgSend(v19, "replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:", v62, 0, 0, v53, v43);

    (*(void (**)(char *, uint64_t))(v12 + 8))(v63, v11);
    return (int64_t)v19;
  }
LABEL_39:
  __break(1u);
  return result;
}

char *sub_1000559A4(char *result, void *a2, void *a3)
{
  if (result[52]) {
    return result;
  }
  uint64_t v4 = v3;
  id v6 = (float *)result;
  uint64_t v7 = *((void *)result + 2);
  uint64_t v8 = (void *)*((void *)result + 3);
  swift_bridgeObjectRetain();
  char v9 = sub_10004C8EC(v7, v8);
  if (v9 == 4) {
    goto LABEL_3;
  }
  char v12 = v9;
  uint64_t v13 = sub_10004C1D8();
  uint64_t v15 = v14;
  if (*(unsigned char *)(v4 + 112) == 4)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char v11 = *(unsigned char *)(v4 + 112);
    *(unsigned char *)(v4 + 112) = v12;
    goto LABEL_8;
  }
  if (v13 == sub_10004C1D8() && v15 == v31)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v33 = sub_10005E448();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v33 & 1) == 0) {
      goto LABEL_7;
    }
  }
LABEL_3:
  if (*(unsigned char *)(v4 + 112) != 4) {
    goto LABEL_9;
  }
  char v10 = sub_10004C76C();
  char v11 = *(unsigned char *)(v4 + 112);
  *(unsigned char *)(v4 + 112) = v10;
LABEL_8:
  sub_100054A48(v11);
LABEL_9:
  swift_beginAccess();
  swift_retain();
  ShippouScene.update(state:size:isSnapshotting:)(v6, *(unsigned char *)(v4 + 49), (double)(uint64_t)[a2 width], (double)(uint64_t)objc_msgSend(a2, "height"));
  swift_release();
  sub_100055F20(32, 32, &v42);
  uint64_t v16 = v42;
  uint64_t v17 = v43;
  NSString v18 = v44;
  int64_t result = (char *)[a2 width];
  NSString v19 = &result[v16];
  if (__OFADD__(result, v16))
  {
    __break(1u);
    goto LABEL_33;
  }
  id v20 = v19 - 1;
  if (__OFSUB__(v19, 1))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (!v16)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v19 == (char *)0x8000000000000001 && v16 == -1) {
    goto LABEL_38;
  }
  int64_t result = (char *)[a2 height];
  double v21 = &result[v17];
  if (__OFADD__(result, v17)) {
    goto LABEL_35;
  }
  BOOL v22 = __OFSUB__(v21, 1);
  double v23 = v21 - 1;
  if (v22)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (!v17)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    return result;
  }
  if (v23 == (char *)0x8000000000000000 && v17 == -1) {
    goto LABEL_39;
  }
  sub_100055F20((uint64_t)v20 / v16, (uint64_t)v23 / v17, &v42);
  uint64_t v24 = *(void *)(v4 + 64);
  if (v24)
  {
    uint64_t v25 = v42;
    int64_t v36 = v44;
    uint64_t v37 = v43;
    swift_unknownObjectRetain();
    id v26 = [a3 computeCommandEncoder];
    if (v26)
    {
      uint64_t v27 = v26;
      uint64_t v35 = v25;
      uint64_t v28 = *(void *)(v4 + 56);
      id v39 = v18;
      uint64_t v29 = *(void *)(v28 + 24);
      swift_beginAccess();
      [v27 setBuffer:v29 offset:*(void *)(v28 + 32) atIndex:0];
      uint64_t v30 = *(void *)(v4 + 56);
      swift_beginAccess();
      [v27 setBuffer:*(void *)(v30 + 16) offset:0 atIndex:1];
      [v27 setTexture:a2 atIndex:0];
      [v27 setTexture:*(void *)(v4 + 104) atIndex:1];
      [v27 setComputePipelineState:v24];
      v41[0] = v35;
      v41[1] = v37;
      id v41[2] = v36;
      v40[0] = v16;
      v40[1] = v17;
      v40[2] = v39;
      [v27 dispatchThreadgroups:v41 threadsPerThreadgroup:v40];
      [v27 endEncoding];
      swift_unknownObjectRelease();
      return (char *)swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();
  }
  sub_100055F30();
  swift_allocError();
  *char v34 = 2;
  return (char *)swift_willThrow();
}

uint64_t sub_100055D70(void *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 96) = a3;
  *(void *)(v3 + 104) = 0;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_WORD *)(v3 + 48) = 0;
  *(unsigned char *)(v3 + 112) = 4;
  *(void *)(v3 + 88) = a2;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = a1;
  id v6 = [(id)swift_unknownObjectRetain() newDefaultLibrary];
  id v7 = v6;
  if (v6)
  {
    *(void *)(v3 + 80) = v6;
    type metadata accessor for ShippouScene();
    swift_allocObject();
    swift_unknownObjectRetain();
    uint64_t v8 = ShippouScene.init(device:)(a1);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (!v4)
    {
      *(void *)(v3 + 56) = v8;
      return v3;
    }
  }
  else
  {
    sub_100055F30();
    swift_allocError();
    *char v9 = 0;
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  sub_100012030(*(void *)(v3 + 16));
  sub_100012030(*(void *)(v3 + 32));
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (v7) {
    swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_deallocPartialClassInstance();
  return v3;
}

uint64_t type metadata accessor for ShippouRenderer()
{
  return self;
}

uint64_t sub_100055F20@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  a3[2] = 1;
  return result;
}

unint64_t sub_100055F30()
{
  unint64_t result = qword_10009A4C0;
  if (!qword_10009A4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10009A4C0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ShippouRenderer.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100056050);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ShippouRenderer.Error()
{
  return &type metadata for ShippouRenderer.Error;
}

unint64_t sub_10005608C()
{
  unint64_t result = qword_10009A4C8;
  if (!qword_10009A4C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10009A4C8);
  }
  return result;
}

MercuryPosterExtension::ToriLight::LightType_optional __swiftcall ToriLight.LightType.init(rawValue:)(Swift::Int32 rawValue)
{
  if (rawValue >= 3) {
    LOBYTE(rawValue) = 3;
  }
  return (MercuryPosterExtension::ToriLight::LightType_optional)rawValue;
}

uint64_t ToriLight.LightType.rawValue.getter(uint64_t result)
{
  return result;
}

Swift::Int sub_1000560F8()
{
  Swift::UInt32 v1 = *v0;
  sub_10005E4F8();
  sub_10005E518(v1);
  return sub_10005E528();
}

void sub_100056140()
{
  sub_10005E518(*v0);
}

Swift::Int sub_10005616C()
{
  Swift::UInt32 v1 = *v0;
  sub_10005E4F8();
  sub_10005E518(v1);
  return sub_10005E528();
}

int *sub_1000561B0@<X0>(int *result@<X0>, unsigned char *a2@<X8>)
{
  int v2 = *result;
  if (*result >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

void sub_1000561C8(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t ToriLight.type.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t ToriLight.customDistance.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t ToriLight.customDistance.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 48) = a1;
  return result;
}

float ToriLight.spotBlend.getter()
{
  swift_beginAccess();
  return *(float *)(v0 + 52);
}

uint64_t ToriLight.spotBlend.setter(float a1)
{
  uint64_t result = swift_beginAccess();
  *(float *)(v1 + 52) = a1;
  return result;
}

uint64_t (*ToriLight.spotBlend.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t ToriLight.applyNormal.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t ToriLight.applyNormal.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 56) = a1;
  return result;
}

uint64_t ToriLight.softFalloff.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 57);
}

uint64_t ToriLight.softFalloff.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 57) = a1;
  return result;
}

uint64_t (*ToriLight.softFalloff.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t ToriLight.animationKeys.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ToriLight.animationKeys.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 64) = a1;
  return swift_bridgeObjectRelease();
}

__n128 *sub_1000564D4(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3, __n128 a4, float a5)
{
  v5[3].n128_u8[0] = 0;
  v5[3].n128_u32[1] = 0;
  v5[3].n128_u16[4] = 257;
  v5[4].n128_u64[0] = (unint64_t)_swiftEmptyArrayStorage;
  v5[1].n128_u8[0] = 2;
  v5[2] = a4;
  swift_beginAccess();
  v5[3].n128_u8[0] = a1;
  swift_beginAccess();
  v5[3].n128_f32[1] = a5;
  swift_beginAccess();
  v5[3].n128_u8[8] = a2;
  swift_beginAccess();
  v5[3].n128_u8[9] = a3;
  return v5;
}

uint64_t sub_1000565C4(float a1, float a2, __n128 a3, __n128 a4, float a5, float a6, float a7)
{
  uint64_t v13 = (void *)(v7 + 64);
  swift_beginAccess();
  uint64_t v14 = *(void **)(v7 + 64);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v7 + 64) = v14;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v14 = sub_10002AE2C(0, v14[2] + 1, 1, v14);
    void *v13 = v14;
  }
  unint64_t v17 = v14[2];
  unint64_t v16 = v14[3];
  if (v17 >= v16 >> 1)
  {
    uint64_t v14 = sub_10002AE2C((void *)(v16 > 1), v17 + 1, 1, v14);
    void *v13 = v14;
  }
  _OWORD v14[2] = v17 + 1;
  NSString v18 = (__n128 *)&v14[10 * v17];
  v18[2].n128_f32[0] = a1;
  v18[2].n128_f32[1] = a2;
  v18[3] = a3;
  v18[4].n128_f32[0] = (float)((float)(a5 + 90.0) * 3.1416) / 180.0;
  v18[5] = a4;
  v18[6].n128_f32[0] = a6;
  v18[6].n128_f32[1] = a7;
  return swift_endAccess();
}

uint64_t sub_1000566FC@<X0>(uint64_t a1@<X8>, float a2@<S0>, float a3@<S1>)
{
  sub_100050AD0((uint64_t)&off_10007E758);
  sub_100050AD0((uint64_t)&off_10007E788);
  sub_100050AD0((uint64_t)&off_10007E7B8);
  uint64_t result = swift_beginAccess();
  float32x2_t v7 = v3[8];
  unint64_t v8 = *(void *)(*(void *)&v7 + 16);
  if (!v8)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 == 1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v8 < 3)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  float v9 = 1.0 - a3;
  float v10 = 1.0 - (float)(1.0 - a3);
  float v11 = (float)(*(float *)(*(void *)&v7 + 224) * a2)
      + (float)((float)(1.0 - a2)
              * (float)((float)(v10 * *(float *)(*(void *)&v7 + 64))
                      + (float)((float)(1.0 - a3) * *(float *)(*(void *)&v7 + 144))));
  float32x4_t v55 = *(float32x4_t *)(*(void *)&v7 + 160);
  float32x4_t v56 = *(float32x4_t *)(*(void *)&v7 + 80);
  float32x4_t v57 = *(float32x4_t *)(*(void *)&v7 + 240);
  float v52 = *(float *)(*(void *)&v7 + 116);
  float v53 = *(float *)(*(void *)&v7 + 36);
  float v54 = *(float *)(*(void *)&v7 + 196);
  float v12 = (float)(*(float *)(*(void *)&v7 + 192) * a2)
      + (float)((float)(1.0 - a2)
              * (float)((float)(v10 * *(float *)(*(void *)&v7 + 32))
                      + (float)(v9 * *(float *)(*(void *)&v7 + 112))));
  float v13 = *(float *)(*(void *)&v7 + 56)
      + (float)(v9 * (float)(*(float *)(*(void *)&v7 + 136) - *(float *)(*(void *)&v7 + 56)));
  float32x2_t v14 = vadd_f32(*(float32x2_t *)(*(void *)&v7 + 48), vmul_n_f32(vsub_f32(*(float32x2_t *)(*(void *)&v7 + 128), *(float32x2_t *)(*(void *)&v7 + 48)), v9));
  float v60 = v9;
  float32x2_t v61 = vadd_f32(v14, vmul_n_f32(vsub_f32(*(float32x2_t *)(*(void *)&v7 + 208), v14), a2));
  float v15 = v13 + (float)((float)(*(float *)(*(void *)&v7 + 216) - v13) * a2);
  float v16 = *(float *)(*(void *)&v7 + 256);
  float v17 = *(float *)(*(void *)&v7 + 96);
  float v58 = 1.0 - a2;
  float v59 = v10;
  float v18 = *(float *)(*(void *)&v7 + 176);
  float v19 = (float)(*(float *)(*(void *)&v7 + 260) * a2)
      + (float)((float)(1.0 - a2)
              * (float)((float)(v10 * *(float *)(*(void *)&v7 + 100))
                      + (float)(v9 * *(float *)(*(void *)&v7 + 180))));
  swift_beginAccess();
  float v20 = v61.f32[1];
  if (v61.f32[1] <= v15) {
    float v20 = v15;
  }
  if (v61.f32[0] > v20) {
    float v20 = v61.f32[0];
  }
  float v21 = sqrtf(fmaxf((float)(fabsf(v12 / 100.0) * v20) / 0.01, 1.0e-16));
  if ((v3[6].i8[0] & 1) == 0) {
    float v19 = v21;
  }
  simd_float4 v48 = matrix_identity_float4x4.columns[1];
  float32x4_t v50 = (float32x4_t)matrix_identity_float4x4.columns[0];
  __float2 v22 = __sincosf_stret(v11);
  float32x4_t v23 = (float32x4_t)v48;
  v23.i32[1] = LODWORD(v22.__cosval);
  v23.i32[2] = LODWORD(v22.__sinval);
  int32x4_t v24 = (int32x4_t)vmulq_f32(v23, v23);
  float32x4_t v25 = v23;
  v24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v24, 2), vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1))).u32[0];
  *(float32x2_t *)v23.f32 = vrsqrte_f32((float32x2_t)v24.u32[0]);
  *(float32x2_t *)v23.f32 = vmul_f32(*(float32x2_t *)v23.f32, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32)));
  int8x16_t v26 = (int8x16_t)vmulq_n_f32(v25, vmul_f32(*(float32x2_t *)v23.f32, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32))).f32[0]);
  int32x4_t v27 = (int32x4_t)vmulq_f32(v50, v50);
  v27.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v27, 2), vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1))).u32[0];
  *(float32x2_t *)v23.f32 = vrsqrte_f32((float32x2_t)v27.u32[0]);
  *(float32x2_t *)v23.f32 = vmul_f32(*(float32x2_t *)v23.f32, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32)));
  v28.f32[0] = -matrix_identity_float4x4.columns[2].f32[0];
  v28.i32[1] = LODWORD(v22.__sinval);
  v28.f32[2] = -v22.__cosval;
  int32x4_t v29 = (int32x4_t)vmulq_f32(v28, v28);
  v29.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v29, 2), vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1))).u32[0];
  float32x2_t v30 = vrsqrte_f32((float32x2_t)v29.u32[0]);
  float32x2_t v31 = vmul_f32(v30, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v30, v30)));
  float32x4_t v32 = vmulq_n_f32(v28, vmul_f32(v31, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v31, v31))).f32[0]);
  *(float32x2_t *)v25.f32 = vsub_f32(0, *(float32x2_t *)v32.f32);
  v25.f32[2] = 0.0 - v32.f32[2];
  v25.i32[3] = 0;
  float32x4_t v49 = vmulq_n_f32(v50, vmul_f32(*(float32x2_t *)v23.f32, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32))).f32[0]);
  float32x4_t v51 = v25;
  float32x4_t v33 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL), vnegq_f32(v49)), v25, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL));
  *(float *)v27.i32 = vmulq_lane_f32(v33, *(float32x2_t *)v26.i8, 1).f32[0];
  v28.i32[0] = vextq_s8(v26, v26, 8uLL).u32[0];
  v28.i32[1] = v26.i32[0];
  *(float32x2_t *)v33.f32 = vmul_f32(*(float32x2_t *)v28.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 4uLL));
  if ((float)(v33.f32[0] + (float)(v33.f32[1] + *(float *)v27.i32)) < 0.0)
  {
    *(float32x2_t *)v26.i8 = vsub_f32(0, *(float32x2_t *)v26.i8);
    *(float *)&v26.i32[2] = 0.0 - *(float *)&v26.i32[2];
    v26.i32[3] = 0;
  }
  int8x16_t v47 = v26;
  if ((float)(v19 * v19) < 1.0e-14) {
    float v34 = 1.0e14;
  }
  else {
    float v34 = 1.0 / (float)(v19 * v19);
  }
  float v35 = (float)(v16 * a2) + (float)(v58 * (float)((float)(v59 * v17) + (float)(v60 * v18)));
  float v36 = (float)(v54 * a2) + (float)(v58 * (float)((float)(v59 * v53) + (float)(v60 * v52)));
  *(float32x2_t *)&long long v37 = vadd_f32(vmul_n_f32(*(float32x2_t *)v57.f32, a2), vmul_n_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)v56.f32, v59), vmul_n_f32(*(float32x2_t *)v55.f32, v60)), v58));
  *((void *)&v37 + 1) = COERCE_UNSIGNED_INT(vmuls_lane_f32(a2, v57, 2)+ (float)(v58 * (float)(vmuls_lane_f32(v59, v56, 2) + vmuls_lane_f32(v60, v55, 2))));
  long long v64 = v37;
  swift_beginAccess();
  float v39 = cosf(v36 * 0.5);
  float32x2_t v38 = (const float *)&v3[5];
  float32x2_t v40 = vld1_dup_f32(v38);
  float v41 = fmaxf(v35, 0.001);
  float v42 = v12 * (float)(1.0 / (float)((float)((float)(v41 * v41) * 12.566) * 3.1416));
  *(float32x2_t *)&long long v43 = vmul_n_f32(v61, v42);
  *((float *)&v43 + 2) = v15 * v42;
  HIDWORD(v43) = 0;
  long long v62 = v43;
  float32x2_t v44 = vdiv_f32(v3[4], v40);
  swift_beginAccess();
  float v45 = fminf((float)(1.0 - v39) * v3[6].f32[1], 1.0);
  swift_beginAccess();
  LOBYTE(v38) = v3[7].i8[0];
  uint64_t result = swift_beginAccess();
  __int8 v46 = v3[7].i8[1];
  *(_OWORD *)a1 = v64;
  *(float *)(a1 + 16) = v34;
  *(_OWORD *)(a1 + 32) = v62;
  *(float *)(a1 + 48) = v39;
  *(float *)(a1 + 52) = v45;
  *(float *)(a1 + 56) = v41;
  *(unsigned char *)(a1 + 60) = (_BYTE)v38;
  *(unsigned char *)(a1 + 61) = v46;
  *(float32x4_t *)(a1 + 64) = v49;
  *(float32x2_t *)(a1 + 80) = v44;
  *(int8x16_t *)(a1 + 96) = v47;
  *(float32x4_t *)(a1 + 112) = v51;
  return result;
}

uint64_t ToriLight.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ToriLight.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 72, 15);
}

unint64_t sub_100056CA8()
{
  unint64_t result = qword_10009A4D0;
  if (!qword_10009A4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10009A4D0);
  }
  return result;
}

__n128 initializeWithCopy for LightData(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t getEnumTagSinglePayload for LightData(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for LightData(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 128) = v3;
  return result;
}

ValueMetadata *type metadata accessor for LightData()
{
  return &type metadata for LightData;
}

__n128 initializeWithCopy for ToriLightKey(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ToriLightKey(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ToriLightKey(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 72) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ToriLightKey()
{
  return &type metadata for ToriLightKey;
}

uint64_t type metadata accessor for ToriLight()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for ToriLight.LightType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100056F1CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ToriLight.LightType()
{
  return &type metadata for ToriLight.LightType;
}

uint64_t sub_100056F54(void *a1, char a2)
{
  switch(a2)
  {
    case 1:
      sub_10005A3A4();
      break;
    case 2:
      sub_10005B254();
      break;
    case 3:
      sub_10004D3FC();
      break;
    case 4:
      sub_1000594E0();
      break;
    default:
      sub_100057090();
      break;
  }
  swift_beginAccess();
  unint64_t v4 = *(void *)(v2 + 144);
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_10005E328();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)(v5 - 0x100000000000000) >> 57 != 127)
  {
    __break(1u);
    goto LABEL_14;
  }
  id v6 = [a1 newBufferWithLength:v5 << 7 options:0];
  if (!v6)
  {
LABEL_14:
    __break(1u);
    JUMPOUT(0x10005707CLL);
  }
  id v7 = v6;
  swift_beginAccess();
  *(void *)(v2 + 24) = v7;
  return swift_unknownObjectRelease();
}

uint64_t sub_100057090()
{
  sub_100050AD0((uint64_t)&off_10007BB78);
  __n128 v114 = v0;
  type metadata accessor for ToriLight();
  swift_allocObject();
  __n128 v97 = sub_1000564D4(1u, 0, 1u, v114, 1.0);
  sub_100050AD0((uint64_t)&off_10007BBA8);
  __n128 v115 = v1;
  swift_allocObject();
  __n128 v103 = sub_1000564D4(1u, 0, 1u, v115, 1.0);
  sub_100050AD0((uint64_t)&off_10007BBD8);
  __n128 v116 = v2;
  swift_allocObject();
  __n128 v98 = sub_1000564D4(0, 0, 1u, v116, 1.0);
  sub_100050AD0((uint64_t)&off_10007BC08);
  __n128 v117 = v3;
  swift_allocObject();
  unint64_t v4 = sub_1000564D4(1u, 0, 1u, v117, 1.0);
  sub_100050AD0((uint64_t)&off_10007BC38);
  __n128 v118 = v5;
  swift_allocObject();
  __n128 v101 = sub_1000564D4(0, 0, 1u, v118, 1.0);
  sub_100050AD0((uint64_t)&off_10007BC68);
  __n128 v119 = v6;
  swift_allocObject();
  __n128 v102 = sub_1000564D4(1u, 0, 1u, v119, 1.0);
  sub_100050AD0((uint64_t)&off_10007BC98);
  __n128 v120 = v7;
  swift_allocObject();
  unint64_t v8 = sub_1000564D4(0, 0, 1u, v120, 1.0);
  sub_100050AD0((uint64_t)&off_10007BCC8);
  __n128 v121 = v9;
  swift_allocObject();
  float v10 = sub_1000564D4(1u, 0, 1u, v121, 1.0);
  sub_100050AD0((uint64_t)&off_10007BCF8);
  __n128 v122 = v11;
  swift_allocObject();
  float v12 = sub_1000564D4(0, 0, 1u, v122, 1.0);
  sub_100050AD0((uint64_t)&off_10007BD28);
  __n128 v123 = v13;
  swift_allocObject();
  float32x2_t v14 = sub_1000564D4(1u, 0, 1u, v123, 1.0);
  sub_100050AD0((uint64_t)&off_10007BD58);
  __n128 v124 = v15;
  swift_allocObject();
  float v16 = sub_1000564D4(1u, 0, 1u, v124, 1.0);
  sub_100050AD0((uint64_t)&off_10007BD88);
  __n128 v125 = v17;
  sub_100050AD0((uint64_t)&off_10007BDB8);
  sub_1000565C4(1800.0, 3.1416, v125, v18, 12.0, 0.2, 0.89);
  sub_100050AD0((uint64_t)&off_10007BDE8);
  __n128 v126 = v19;
  sub_100050AD0((uint64_t)&off_10007BE18);
  sub_1000565C4(0.0, 3.1416, v126, v20, 186.81, 0.2, 0.93);
  sub_100050AD0((uint64_t)&off_10007BE48);
  __n128 v110 = v21;
  sub_100050AD0((uint64_t)&off_10007BE78);
  sub_1000565C4(5000.0, 3.0299, v110, v22, 181.33, 0.0, 2.47);
  sub_100050AD0((uint64_t)&off_10007BEA8);
  __n128 v111 = v23;
  sub_100050AD0((uint64_t)&off_10007BED8);
  sub_1000565C4(100.0, 3.1346, v111, v24, 122.59, 0.0, 40.0);
  sub_100050AD0((uint64_t)&off_10007BF08);
  __n128 v112 = v25;
  sub_100050AD0((uint64_t)&off_10007BF38);
  sub_1000565C4(0.0, 2.3981, v112, v26, 83.134, 0.26, 0.79);
  sub_100050AD0((uint64_t)&off_10007BF68);
  __n128 v113 = v27;
  sub_100050AD0((uint64_t)&off_10007BF98);
  sub_1000565C4(0.0, 2.0769, v113, v28, 211.94, 0.38, 1.83);
  sub_100050AD0((uint64_t)&off_10007BFC8);
  __n128 v108 = v29;
  sub_100050AD0((uint64_t)&off_10007BFF8);
  sub_1000565C4(0.0, 0.017453, v108, v30, 82.261, 1.54, 0.898);
  sub_100050AD0((uint64_t)&off_10007C028);
  __n128 v109 = v31;
  sub_100050AD0((uint64_t)&off_10007C058);
  sub_1000565C4(4000.0, 2.7751, v109, v32, 110.0, 1.274, 1.0);
  sub_100050AD0((uint64_t)&off_10007C088);
  __n128 v107 = v33;
  sub_100050AD0((uint64_t)&off_10007C0B8);
  sub_1000565C4(0.0, 0.017453, v107, v34, 97.966, 0.0, 27.61);
  sub_100050AD0((uint64_t)&off_10007C0E8);
  __n128 v106 = v35;
  sub_100050AD0((uint64_t)&off_10007C118);
  sub_1000565C4(0.0, 2.3981, v106, v36, 43.319, 0.36593, 0.79);
  sub_100050AD0((uint64_t)&off_10007C148);
  __n128 v99 = v37;
  sub_100050AD0((uint64_t)&off_10007C178);
  sub_1000565C4(0.0, 2.5272, v99, v38, 196.54, 0.38, 1.85);
  sub_100050AD0((uint64_t)&off_10007C1A8);
  __n128 v92 = v39;
  sub_100050AD0((uint64_t)&off_10007C1D8);
  sub_1000565C4(590.0, 2.3981, v92, v40, 25.134, 0.26, 0.79);
  sub_100050AD0((uint64_t)&off_10007C208);
  __n128 v93 = v41;
  sub_100050AD0((uint64_t)&off_10007C238);
  sub_1000565C4(10000.0, 3.0299, v93, v42, 181.33, 0.0, 2.47);
  sub_100050AD0((uint64_t)&off_10007C268);
  __n128 v94 = v43;
  sub_100050AD0((uint64_t)&off_10007C298);
  sub_1000565C4(1440.0, 1.8692, v94, v44, 144.63, 0.38, 1.83);
  sub_100050AD0((uint64_t)&off_10007C2C8);
  __n128 v95 = v45;
  sub_100050AD0((uint64_t)&off_10007C2F8);
  sub_1000565C4(2700.0, 3.1416, v95, v46, 0.0, 0.2, 0.89);
  sub_100050AD0((uint64_t)&off_10007C328);
  __n128 v96 = v47;
  sub_100050AD0((uint64_t)&off_10007C358);
  sub_1000565C4(1500.0, 3.1416, v96, v48, 186.81, 0.2, 0.93);
  sub_100050AD0((uint64_t)&off_10007C388);
  __n128 v91 = v49;
  sub_100050AD0((uint64_t)&off_10007C3B8);
  sub_1000565C4(3000.0, 3.1416, v91, v50, 51.869, 0.0, 0.898);
  sub_100050AD0((uint64_t)&off_10007C3E8);
  __n128 v87 = v51;
  sub_100050AD0((uint64_t)&off_10007C418);
  sub_1000565C4(18000.0, 3.1416, v87, v52, 55.945, 1.274, 1.02);
  sub_100050AD0((uint64_t)&off_10007C448);
  __n128 v88 = v53;
  sub_100050AD0((uint64_t)&off_10007C478);
  sub_1000565C4(100.0, 3.1346, v88, v54, 122.59, 0.0, 40.0);
  sub_100050AD0((uint64_t)&off_10007C4A8);
  __n128 v85 = v55;
  sub_100050AD0((uint64_t)&off_10007C4D8);
  sub_1000565C4(-50.0, 1.9408, v85, v56, 71.932, 0.0, 27.61);
  sub_100050AD0((uint64_t)&off_10007C508);
  __n128 v86 = v57;
  sub_100050AD0((uint64_t)&off_10007C538);
  sub_1000565C4(0.0, 2.3981, v86, v58, 43.319, 0.36593, 0.79);
  sub_100050AD0((uint64_t)&off_10007C568);
  __n128 v89 = v59;
  sub_100050AD0((uint64_t)&off_10007C598);
  sub_1000565C4(0.0, 2.5272, v89, v60, 196.54, 0.38, 1.85);
  sub_100050AD0((uint64_t)&off_10007C5C8);
  __n128 v90 = v61;
  sub_100050AD0((uint64_t)&off_10007C5F8);
  sub_1000565C4(700.0, 3.1416, v90, v62, 0.0, 0.2, 0.89);
  sub_100050AD0((uint64_t)&off_10007C628);
  __n128 v104 = v63;
  sub_100050AD0((uint64_t)&off_10007C658);
  sub_1000565C4(100.0, 3.1416, v104, v64, 186.81, 0.2, 0.93);
  sub_100050AD0((uint64_t)&off_10007C688);
  __n128 v105 = v65;
  sub_100050AD0((uint64_t)&off_10007C6B8);
  sub_1000565C4(4000.0, 3.0299, v105, v66, 181.33, 0.5, 2.47);
  sub_100050AD0((uint64_t)&off_10007C6E8);
  __n128 v127 = v67;
  sub_100050AD0((uint64_t)&off_10007C718);
  sub_1000565C4(0.0, 3.1346, v127, v68, 122.59, 0.0, 40.0);
  sub_100050AD0((uint64_t)&off_10007C748);
  __n128 v128 = v69;
  sub_100050AD0((uint64_t)&off_10007C778);
  sub_1000565C4(0.0, 3.1416, v128, v70, -71.779, 1.08, 0.79);
  sub_100050AD0((uint64_t)&off_10007C7A8);
  __n128 v129 = v71;
  sub_100050AD0((uint64_t)&off_10007C7D8);
  sub_1000565C4(0.0, 1.9199, v129, v72, 118.76, 0.38, 1.83);
  sub_100050AD0((uint64_t)&off_10007C808);
  __n128 v130 = v73;
  sub_100050AD0((uint64_t)&off_10007C838);
  sub_1000565C4(500.0, 3.1416, v130, v74, 51.869, 0.0, 0.898);
  sub_100050AD0((uint64_t)&off_10007C868);
  __n128 v131 = v75;
  sub_100050AD0((uint64_t)&off_10007C898);
  sub_1000565C4(8000.0, 3.1416, v131, v76, 55.945, 1.274, 1.02);
  sub_100050AD0((uint64_t)&off_10007C8C8);
  __n128 v132 = v77;
  sub_100050AD0((uint64_t)&off_10007C8F8);
  sub_1000565C4(-19.0, 1.9408, v132, v78, 71.932, 0.0, 27.61);
  sub_100050AD0((uint64_t)&off_10007C928);
  __n128 v133 = v79;
  sub_100050AD0((uint64_t)&off_10007C958);
  sub_1000565C4(250.0, 2.3981, v133, v80, 25.134, 0.36593, 0.79);
  sub_100050AD0((uint64_t)&off_10007C988);
  __n128 v134 = v81;
  sub_100050AD0((uint64_t)&off_10007C9B8);
  sub_1000565C4(200.0, 2.0769, v134, v82, 145.94, 0.38, 1.85);
  sub_100008F4C(&qword_1000985E0);
  uint64_t v83 = swift_allocObject();
  *(_OWORD *)(v83 + 16) = xmmword_100063060;
  *(void *)(v83 + 32) = v4;
  *(void *)(v83 + 40) = v14;
  *(void *)(v83 + 48) = v8;
  *(void *)(v83 + 56) = v10;
  *(void *)(v83 + 64) = v102;
  *(void *)(v83 + 72) = v12;
  *(void *)(v83 + 80) = v101;
  *(void *)(v83 + 88) = v16;
  *(void *)(v83 + 96) = v97;
  *(void *)(v83 + 104) = v98;
  *(void *)(v83 + 112) = v103;
  uint64_t v135 = v83;
  sub_10005DFB8();
  swift_beginAccess();
  *(void *)(v100 + 144) = v135;
  return swift_bridgeObjectRelease();
}

uint64_t ToriScene.__allocating_init(device:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  ToriScene.init(device:)(a1);
  return v2;
}

uint64_t ToriScene.mesh.getter()
{
  return swift_retain();
}

uint64_t ToriScene.lightBuffer.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ToriScene.lightBuffer.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return swift_unknownObjectRelease();
}

uint64_t (*ToriScene.lightBuffer.modify())()
{
  return j__swift_endAccess;
}

uint64_t ToriScene.uniformsBuffer.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ToriScene.uniformBufferIndex.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 48);
}

uint64_t ToriScene.lights.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ToriScene.lights.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 144) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ToriScene.lights.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t ToriScene.init(device:)(void *a1)
{
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  _s22MercuryPosterExtension9ToriSceneC9startTimeSdvpfi_0();
  *(void *)(v1 + 56) = v4;
  type metadata accessor for ToriCamera();
  __n128 v5 = (_OWORD *)swift_allocObject();
  simd_float4 v6 = matrix_identity_float4x4.columns[0];
  simd_float4 v7 = matrix_identity_float4x4.columns[1];
  simd_float4 v8 = matrix_identity_float4x4.columns[2];
  simd_float4 v9 = matrix_identity_float4x4.columns[3];
  v5[1] = xmmword_10005F250;
  v5[2] = v6;
  v5[3] = v7;
  v5[4] = v8;
  v5[5] = v9;
  *(void *)(v1 + 64) = v5;
  float32x4_t v29 = (float32x4_t)v6;
  float32x4_t v31 = (float32x4_t)v7;
  *(simd_float4 *)(v1 + 80) = v6;
  *(simd_float4 *)(v1 + 96) = v7;
  float32x4_t v33 = (float32x4_t)v8;
  *(simd_float4 *)(v1 + 112) = v8;
  *(simd_float4 *)(v1 + 128) = v9;
  float32x4_t v35 = (float32x4_t)v9;
  *(void *)(v1 + 144) = _swiftEmptyArrayStorage;
  *(_WORD *)(v1 + 152) = 0;
  id v10 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v11) = 0.5;
  LODWORD(v12) = 1.0;
  LODWORD(v13) = 0.5;
  *(void *)(v1 + 160) = [v10 initWithControlPoints:v11 :0.0 :v12 :v13];
  id v14 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v15) = 1055119114;
  LODWORD(v16) = 1028443341;
  LODWORD(v17) = 1057803469;
  LODWORD(v18) = 1064514355;
  *(void *)(v1 + 168) = [v14 initWithControlPoints:v15 :v16 :v17 :v18];
  *(void *)(v1 + 176) = 0x3FF0000000000000;
  type metadata accessor for ToriMesh();
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_OWORD *)(v1 + 264) = 0u;
  swift_allocObject();
  uint64_t v19 = swift_unknownObjectRetain();
  __n128 v20 = sub_100052D20(v19);
  if (v2)
  {
    swift_unknownObjectRelease();
  }
  else
  {
    __n128 v21 = v20;
    *(void *)(v1 + 16) = v20;
    id v22 = [a1 newBufferWithLength:768 options:0];
    if (v22)
    {
      *(void *)(v1 + 32) = v22;
      sub_100050AD0((uint64_t)&off_10007EDD8);
      v23.i32[3] = 1.0;
      simd_float4 v28 = v23;
      swift_beginAccess();
      v21[2] = (simd_float4)xmmword_10005F200;
      v21[3] = (simd_float4)xmmword_10005F230;
      v21[4] = (simd_float4)xmmword_10005F240;
      v21[5] = v28;
      __n128 v24 = *(_OWORD **)(v1 + 64);
      sub_100050AD0((uint64_t)&off_10007EE08);
      v25.i32[3] = 1.0;
      float32x4_t v30 = vmlaq_laneq_f32(vaddq_f32(vmlaq_lane_f32((float32x4_t)xmmword_100063830, (float32x4_t)xmmword_10005F230, *(float32x2_t *)v29.f32, 1), (float32x4_t)xmmword_100063840), v25, v29, 3);
      float32x4_t v32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_10005F200, v31.f32[0]), (float32x4_t)xmmword_10005F230, *(float32x2_t *)v31.f32, 1), (float32x4_t)xmmword_10005F240, v31, 2), v25, v31, 3);
      float32x4_t v34 = vmlaq_laneq_f32(vaddq_f32(vmlaq_lane_f32((float32x4_t)xmmword_100063850, (float32x4_t)xmmword_10005F230, *(float32x2_t *)v33.f32, 1), (float32x4_t)xmmword_100063860), v25, v33, 3);
      float32x4_t v36 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_10005F200, v35.f32[0]), (float32x4_t)xmmword_10005F230, *(float32x2_t *)v35.f32, 1), (float32x4_t)xmmword_10005F240, v35, 2), v25, v35, 3);
      swift_retain();
      swift_unknownObjectRelease();
      _OWORD v24[2] = v30;
      v24[3] = v32;
      v24[4] = v34;
      v24[5] = v36;
      swift_release();
      return v1;
    }
    sub_1000584D0();
    swift_allocError();
    *__n128 v27 = 0;
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_release();
  }
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  type metadata accessor for ToriScene();
  swift_deallocPartialClassInstance();
  return v1;
}

uint64_t type metadata accessor for ToriCamera()
{
  return self;
}

uint64_t type metadata accessor for ToriScene()
{
  return self;
}

unint64_t sub_1000584D0()
{
  unint64_t result = qword_10009A650;
  if (!qword_10009A650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10009A650);
  }
  return result;
}

uint64_t sub_100058524(float a1, float a2)
{
  swift_beginAccess();
  simd_float4 v6 = *(void **)(v2 + 24);
  if (!v6)
  {
    sub_1000584D0();
    swift_allocError();
    *__n128 v20 = 1;
    return swift_willThrow();
  }
  swift_beginAccess();
  unint64_t v7 = *(void *)(v2 + 144);
  if (!(v7 >> 62))
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_4;
    }
LABEL_15:
    swift_bridgeObjectRelease();
LABEL_16:
    id v21 = [(id)swift_unknownObjectRetain() contents];
    memcpy(v21, &_swiftEmptyArrayStorage[4], (size_t)[v6 length]);
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_10005E328();
  if (!v8) {
    goto LABEL_15;
  }
LABEL_4:
  uint64_t result = sub_10004FCBC(0, v8 & ~(v8 >> 63), 0);
  if ((v8 & 0x8000000000000000) == 0)
  {
    id v22 = v6;
    uint64_t v24 = v3;
    uint64_t v10 = 0;
    do
    {
      if ((v7 & 0xC000000000000001) != 0) {
        sub_10005E218();
      }
      else {
        swift_retain();
      }
      sub_1000566FC((uint64_t)v23, a1, a2);
      swift_release();
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        sub_10004FCBC(v11 > 1, v12 + 1, 1);
      }
      ++v10;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      double v13 = &_swiftEmptyArrayStorage[16 * v12];
      long long v14 = v23[0];
      long long v15 = v23[1];
      long long v16 = v23[3];
      v13[4] = v23[2];
      void v13[5] = v16;
      v13[2] = v14;
      v13[3] = v15;
      long long v17 = v23[4];
      long long v18 = v23[5];
      long long v19 = v23[7];
      _OWORD v13[8] = v23[6];
      v13[9] = v19;
      v13[6] = v17;
      v13[7] = v18;
    }
    while (v8 != v10);
    swift_bridgeObjectRelease();
    simd_float4 v6 = v22;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t ToriScene.update(state:size:isSnapshotting:)(float *a1, char a2, double a3, double a4)
{
  double v9 = a3;
  float v10 = *a1;
  float v11 = a1[1];
  if (*a1 <= 1.0) {
    float v12 = *a1;
  }
  else {
    float v12 = 1.0;
  }
  if (v12 < 0.0) {
    float v13 = 0.0;
  }
  else {
    float v13 = v12;
  }
  if (v11 <= 1.0) {
    *(float *)&a3 = a1[1];
  }
  else {
    *(float *)&a3 = 1.0;
  }
  if (*(float *)&a3 < 0.0) {
    *(float *)&a3 = 0.0;
  }
  [*(id *)(v4 + 160) _solveForInput:a3];
  float v15 = v14;
  *(float *)&double v16 = v13;
  [*(id *)(v4 + 168) _solveForInput:v16];
  float v18 = v17;
  float v19 = v15;
  if (sub_100058B8C())
  {
    float v20 = 1.0 - v11;
    if ((float)(1.0 - v10) < (float)(1.0 - v11)) {
      float v20 = 1.0 - v10;
    }
    float v19 = v15 + (float)((float)(v20 * *(float *)(v4 + 228)) * 0.108);
  }
  uint64_t result = sub_100058524(v18, v15);
  if (!v5)
  {
    id v22 = (uint64_t *)(v4 + 48);
    swift_beginAccess();
    uint64_t v23 = *(void *)(v4 + 48);
    if ((unint64_t)(v23 - 0x80000000000000) >> 56 == 255)
    {
      uint64_t v24 = v23 << 8;
      swift_beginAccess();
      *(void *)(v4 + 40) = v24;
      float32x4_t v25 = *(void **)(v4 + 32);
      __n128 v26 = (char *)[(id)swift_unknownObjectRetain() contents];
      id v27 = v25;
      uint64_t v28 = *(void *)(v4 + 40);
      float32x4_t v29 = *(float32x2_t **)(v4 + 64);
      float32_t v30 = v9 / a4;
      v29[2].f32[1] = v30;
      float32x4_t v31 = *(float32x4_t *)(v4 + 80);
      float32x4_t v32 = *(float32x4_t *)(v4 + 96);
      float32x4_t v33 = *(float32x4_t *)(v4 + 112);
      float32x4_t v34 = *(float32x4_t *)(v4 + 128);
      v42.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v31, COERCE_FLOAT(*(_OWORD *)v29[4].f32)), v32, v29[4], 1), v33, *(float32x4_t *)v29[4].f32, 2), v34, *(float32x4_t *)v29[4].f32, 3);
      v42.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v31, COERCE_FLOAT(*(_OWORD *)v29[6].f32)), v32, v29[6], 1), v33, *(float32x4_t *)v29[6].f32, 2), v34, *(float32x4_t *)v29[6].f32, 3);
      v42.columns[2] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v31, COERCE_FLOAT(*(_OWORD *)v29[8].f32)), v32, v29[8], 1), v33, *(float32x4_t *)v29[8].f32, 2), v34, *(float32x4_t *)v29[8].f32, 3);
      v42.columns[3] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v31, COERCE_FLOAT(*(_OWORD *)v29[10].f32)), v32, v29[10], 1), v33, *(float32x4_t *)v29[10].f32, 2), v34, *(float32x4_t *)v29[10].f32, 3);
      simd_float4 v6 = &v26[v28];
      *(simd_float4x4 *)(v6 + 96) = __invert_f4(v42);
      *((__n128 *)v6 + 2) = sub_1000590A0(1, (float)(*(float *)(*(void *)(v4 + 64) + 16) / 180.0) * 3.1416, *(float *)(*(void *)(v4 + 64) + 24), *(float *)(*(void *)(v4 + 64) + 28), *(float *)(*(void *)(v4 + 64) + 20));
      *((_OWORD *)v6 + 3) = v35;
      *((_OWORD *)v6 + 4) = v36;
      *((_OWORD *)v6 + 5) = v37;
      swift_beginAccess();
      unint64_t v38 = *(void *)(v4 + 144);
      if (!(v38 >> 62))
      {
        unint64_t v39 = *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_20;
      }
    }
    else
    {
      __break(1u);
    }
    swift_bridgeObjectRetain();
    unint64_t v39 = sub_10005E328();
    swift_bridgeObjectRelease();
    if ((v39 & 0x8000000000000000) != 0) {
      goto LABEL_40;
    }
LABEL_20:
    if (HIDWORD(v39))
    {
LABEL_40:
      uint64_t result = sub_10005E2F8();
      __break(1u);
      return result;
    }
    *((_DWORD *)v6 + 3) = v39;
    sub_100050AD0((uint64_t)&off_10007E818);
    *((_OWORD *)v6 + 1) = v40;
    uint64_t result = _s22MercuryPosterExtension9ToriSceneC9startTimeSdvpfi_0();
    *(float *)&double v41 = v41 - *(double *)(v4 + 56);
    *((_DWORD *)v6 + 2) = LODWORD(v41);
    *((float *)v6 + 41) = v18;
    *((float *)v6 + 42) = v19;
    *((_DWORD *)v6 + 40) = 0;
    v6[172] = (a2 & 1) == 0;
    if ((~*(void *)&v9 & 0x7FF0000000000000) != 0)
    {
      if (v9 > -1.0)
      {
        if (v9 < 4294967300.0)
        {
          *(_DWORD *)simd_float4 v6 = v9;
          if ((~*(void *)&a4 & 0x7FF0000000000000) != 0)
          {
            if (a4 > -1.0)
            {
              if (a4 < 4294967300.0)
              {
                *((_DWORD *)v6 + 1) = a4;
                if (!__OFADD__(*v22, 1))
                {
                  *id v22 = (*v22 + 1) % 3;
                  return result;
                }
                goto LABEL_39;
              }
LABEL_38:
              __break(1u);
LABEL_39:
              __break(1u);
              goto LABEL_40;
            }
LABEL_37:
            __break(1u);
            goto LABEL_38;
          }
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_35;
  }
  return result;
}

uint64_t sub_100058B8C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10005DD48();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s22MercuryPosterExtension9ToriSceneC9startTimeSdvpfi_0();
  double v7 = *(double *)(v1 + 184);
  if (v7 <= 0.0 || (double v8 = v6 - v7, v9 = *(double *)(v1 + 176) * 0.16 * 2.8, v6 - v7 >= v9 + 2.8 - v9))
  {
    uint64_t result = 0;
    *(_OWORD *)(v1 + 224) = 0u;
    *(_OWORD *)(v1 + 240) = 0u;
    *(_OWORD *)(v1 + 208) = 0u;
    *(double *)(v1 + 272) = v6;
  }
  else
  {
    float32x4_t v24 = *(float32x4_t *)(v1 + 224);
    sub_10005DD38();
    if (v8 >= v9)
    {
      float v17 = *(float *)(v1 + 200) + *(float *)(v1 + 216);
      int v25 = 0;
      int v26 = 1065353216;
      float32x2_t v18 = vadd_f32(*(float32x2_t *)(v1 + 192), *(float32x2_t *)(v1 + 208));
      sub_10005DD28();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      *(float32x2_t *)v15.f32 = vsub_f32(v18, vmul_n_f32(v18, v27));
      v15.f32[2] = v17 - (float)(v17 * v27);
    }
    else
    {
      float32x4_t v23 = *(float32x4_t *)(v1 + 192);
      sub_100008F4C(&qword_100099BD0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10005FAA0;
      float v11 = *(float *)(v1 + 208);
      int v26 = 1065353216;
      int v25 = *(_DWORD *)(v1 + 256);
      sub_10005DD28();
      *(float *)(inited + 32) = v11 * v27;
      float v12 = *(float *)(v1 + 212);
      int v26 = 1065353216;
      int v25 = *(_DWORD *)(v1 + 260);
      sub_10005DD28();
      *(float *)(inited + 36) = v12 * v27;
      float v13 = *(float *)(v1 + 216);
      int v26 = 1065353216;
      int v25 = *(_DWORD *)(v1 + 264);
      sub_10005DD28();
      *(float *)(inited + 40) = v13 * v27;
      sub_100050AD0(inited);
      float32x4_t v22 = v14;
      swift_setDeallocating();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      float32x4_t v15 = vaddq_f32(v23, v22);
    }
    v15.i32[3] = 0;
    float32x4_t v19 = vsubq_f32(v15, v24);
    float v20 = 1.0 / v8;
    *(float32x2_t *)&long long v21 = vmul_n_f32(*(float32x2_t *)v19.f32, v20);
    *((void *)&v21 + 1) = COERCE_UNSIGNED_INT(vmuls_lane_f32(v20, v19, 2));
    *(float32x4_t *)(v1 + 224) = v15;
    *(_OWORD *)(v1 + 240) = v21;
    return 1;
  }
  return result;
}

uint64_t ToriScene.tap(at:)(double a1, double a2, double a3, int8x16_t a4, int8x16_t a5)
{
  a4.i32[0] = HIDWORD(a1);
  int v25 = LODWORD(a1);
  a5.i32[0] = 1.0;
  v6.i64[0] = 0x8000000080000000;
  v6.i64[1] = 0x8000000080000000;
  LODWORD(v7) = vbslq_s8(v6, a5, a4).u32[0];
  if (*((float *)&a1 + 1) == 0.0) {
    float v7 = 0.0;
  }
  float v8 = v7 * (float)(1.0 - powf(1.0 - fabsf(*((float *)&a1 + 1)), 60.0));
  long long v9 = *(_OWORD *)(v5 + 224);
  *(_OWORD *)(v5 + 256) = *(_OWORD *)(v5 + 240);
  *(_OWORD *)(v5 + 192) = v9;
  sub_100008F4C(&qword_100099BD0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10005FAA0;
  *(_DWORD *)(inited + 32) = v25;
  *(float *)(inited + 36) = v8;
  *(_DWORD *)(inited + 40) = 0;
  sub_100050AD0(inited);
  float32x4_t v26 = v11;
  swift_setDeallocating();
  float v12 = fabsf(*(float *)(v5 + 196));
  if (v12 <= 1.5)
  {
    double v14 = 1.0;
    float v15 = 1.2;
  }
  else
  {
    double v13 = (float)(v12 + -1.5) + (float)(v12 + -1.5);
    double v14 = 1.0 - v13;
    if (v13 >= 0.9) {
      double v14 = 0.1;
    }
    float v15 = 0.16;
  }
  *(double *)(v5 + 176) = v14;
  *(float32x2_t *)v16.f32 = vmul_n_f32(*(float32x2_t *)v26.f32, v15);
  v16.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(v15, v26, 2));
  float32x4_t v27 = v16;
  *(float32x4_t *)(v5 + 208) = v16;
  sub_100050AD0((uint64_t)&off_10007F350);
  float32x4_t v24 = v17;
  sub_100050AD0((uint64_t)&off_10007F380);
  float32x4_t v19 = v24;
  float32x4_t v18 = v27;
  v18.i32[3] = 0;
  v19.i32[3] = 0;
  float32x4_t v20 = vmaxnmq_f32(v18, v19);
  v20.i32[3] = 0;
  v21.i32[3] = 0;
  *(float32x4_t *)(v5 + 208) = vminnmq_f32(v20, v21);
  uint64_t result = _s22MercuryPosterExtension9ToriSceneC9startTimeSdvpfi_0();
  *(void *)(v5 + 184) = v23;
  return result;
}

uint64_t ToriScene.deinit()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t ToriScene.__deallocating_deinit()
{
  ToriScene.deinit();

  return _swift_deallocClassInstance(v0, 280, 15);
}

__n128 sub_1000590A0(char a1, float a2, float a3, float a4, float a5)
{
  float v9 = 1.0 / tanf(a2 * 0.5);
  float v10 = v9 / a5;
  float v11 = a3 - a4;
  if (a1) {
    float v11 = a4 - a3;
  }
  float v12 = a4 / v11;
  sub_100008F4C(&qword_100099BD0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100060F00;
  *(float *)(inited + 32) = v10;
  *(void *)(inited + 36) = 0;
  *(_DWORD *)(inited + 44) = 0;
  sub_100050BB8(inited);
  long long v19 = v14;
  swift_setDeallocating();
  uint64_t v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_100060F00;
  *(_DWORD *)(v15 + 32) = 0;
  *(float *)(v15 + 36) = v9;
  *(void *)(v15 + 40) = 0;
  sub_100050BB8(v15);
  swift_setDeallocating();
  uint64_t v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_100060F00;
  *(void *)(v16 + 32) = 0;
  *(float *)(v16 + 40) = v12;
  if (a1)
  {
    *(_DWORD *)(v16 + 44) = 1065353216;
    sub_100050BB8(v16);
    swift_setDeallocating();
    sub_100050BB8((uint64_t)&off_10007E7E8);
  }
  else
  {
    *(_DWORD *)(v16 + 44) = -1082130432;
    sub_100050BB8(v16);
    swift_setDeallocating();
    uint64_t v17 = swift_initStackObject();
    *(_OWORD *)(v17 + 16) = xmmword_100060F00;
    *(void *)(v17 + 32) = 0;
    *(float *)(v17 + 40) = v12 * a3;
    *(_DWORD *)(v17 + 44) = 0;
    sub_100050BB8(v17);
    swift_setDeallocating();
  }
  return (__n128)v19;
}

uint64_t sub_10005926C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(void *)(v3 + 40);
  return result;
}

uint64_t sub_1000592B4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 40) = v2;
  return result;
}

uint64_t sub_1000592F8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(void *)(v3 + 48);
  return result;
}

uint64_t sub_100059340(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(void *)(v3 + 48) = v2;
  return result;
}

unsigned char *storeEnumTagSinglePayload for ToriScene.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100059450);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ToriScene.Error()
{
  return &type metadata for ToriScene.Error;
}

unint64_t sub_10005948C()
{
  unint64_t result = qword_10009AAA8;
  if (!qword_10009AAA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10009AAA8);
  }
  return result;
}

uint64_t sub_1000594E0()
{
  sub_100050AD0((uint64_t)&off_100079DD8);
  __n128 v121 = v0;
  type metadata accessor for ToriLight();
  swift_allocObject();
  __n128 v110 = sub_1000564D4(1u, 0, 1u, v121, 1.0);
  sub_100050AD0((uint64_t)&off_100079E08);
  __n128 v122 = v1;
  swift_allocObject();
  uint64_t v2 = sub_1000564D4(1u, 1u, 0, v122, 1.0);
  sub_100050AD0((uint64_t)&off_100079E38);
  __n128 v123 = v3;
  swift_allocObject();
  __n128 v103 = sub_1000564D4(1u, 1u, 1u, v123, 1.0);
  sub_100050AD0((uint64_t)&off_100079E68);
  __n128 v124 = v4;
  swift_allocObject();
  uint64_t v5 = sub_1000564D4(0, 1u, 1u, v124, 1.0);
  sub_100050AD0((uint64_t)&off_100079E98);
  __n128 v125 = v6;
  swift_allocObject();
  float v7 = sub_1000564D4(1u, 1u, 1u, v125, 1.0);
  sub_100050AD0((uint64_t)&off_100079EC8);
  __n128 v126 = v8;
  swift_allocObject();
  __n128 v104 = sub_1000564D4(1u, 1u, 1u, v126, 1.0);
  sub_100050AD0((uint64_t)&off_100079EF8);
  __n128 v127 = v9;
  swift_allocObject();
  float v10 = sub_1000564D4(1u, 1u, 1u, v127, 1.0);
  sub_100050AD0((uint64_t)&off_100079F28);
  __n128 v128 = v11;
  swift_allocObject();
  __n128 v101 = sub_1000564D4(1u, 0, 1u, v128, 1.0);
  sub_100050AD0((uint64_t)&off_100079F58);
  __n128 v129 = v12;
  swift_allocObject();
  double v13 = sub_1000564D4(1u, 1u, 1u, v129, 1.0);
  sub_100050AD0((uint64_t)&off_100079F88);
  __n128 v130 = v14;
  swift_allocObject();
  uint64_t v100 = sub_1000564D4(1u, 1u, 1u, v130, 1.0);
  sub_100050AD0((uint64_t)&off_100079FB8);
  __n128 v131 = v15;
  swift_allocObject();
  uint64_t v16 = sub_1000564D4(1u, 1u, 1u, v131, 1.0);
  sub_100050AD0((uint64_t)&off_100079FE8);
  __n128 v132 = v17;
  sub_100050AD0((uint64_t)&off_10007A018);
  sub_1000565C4(0.0, 3.0299, v132, v18, 149.33, 0.0, 2.47);
  sub_100050AD0((uint64_t)&off_10007A048);
  __n128 v133 = v19;
  sub_100050AD0((uint64_t)&off_10007A078);
  sub_1000565C4(0.0, 3.1416, v133, v20, 91.631, 0.0, 0.73);
  sub_100050AD0((uint64_t)&off_10007A0A8);
  __n128 v134 = v21;
  sub_100050AD0((uint64_t)&off_10007A0D8);
  sub_1000565C4(0.0, 0.017453, v134, v22, 85.966, 0.0, 27.61);
  sub_100050AD0((uint64_t)&off_10007A108);
  __n128 v135 = v23;
  sub_100050AD0((uint64_t)&off_10007A138);
  sub_1000565C4(0.0, 2.3981, v135, v24, 83.134, 0.366, 0.79);
  sub_100050AD0((uint64_t)&off_10007A168);
  __n128 v136 = v25;
  sub_100050AD0((uint64_t)&off_10007A198);
  sub_1000565C4(0.0, 2.3981, v136, v26, 43.319, 0.366, 0.79);
  sub_100050AD0((uint64_t)&off_10007A1C8);
  __n128 v113 = v27;
  sub_100050AD0((uint64_t)&off_10007A1F8);
  sub_1000565C4(0.0, 2.0769, v113, v28, 211.94, 0.38, 1.85);
  sub_100050AD0((uint64_t)&off_10007A228);
  __n128 v114 = v29;
  sub_100050AD0((uint64_t)&off_10007A258);
  sub_1000565C4(0.0, 2.5272, v114, v30, 16.544, 0.38, 1.85);
  sub_100050AD0((uint64_t)&off_10007A288);
  __n128 v112 = v31;
  sub_100050AD0((uint64_t)&off_10007A2B8);
  sub_1000565C4(0.0, 3.1416, v112, v32, 12.0, 0.2, 0.89);
  sub_100050AD0((uint64_t)&off_10007A2E8);
  __n128 v111 = v33;
  sub_100050AD0((uint64_t)&off_10007A318);
  sub_1000565C4(0.0, 3.0439, v111, v34, -173.19, 1.037, 1.31);
  sub_100050AD0((uint64_t)&off_10007A348);
  __n128 v108 = v35;
  sub_100050AD0((uint64_t)&off_10007A378);
  sub_1000565C4(16136.0, 2.7786, v108, v36, 290.0, 1.0, 1.02);
  sub_100050AD0((uint64_t)&off_10007A3A8);
  __n128 v102 = v37;
  sub_100050AD0((uint64_t)&off_10007A3D8);
  sub_1000565C4(0.0, 0.017453, v102, v38, 82.261, 0.0, 0.898);
  sub_100050AD0((uint64_t)&off_10007A408);
  __n128 v94 = v39;
  sub_100050AD0((uint64_t)&off_10007A438);
  sub_1000565C4(500.0, 2.3981, v94, v40, 25.134, 0.366, 0.79);
  sub_100050AD0((uint64_t)&off_10007A468);
  __n128 v95 = v41;
  sub_100050AD0((uint64_t)&off_10007A498);
  sub_1000565C4(2800.0, 3.1416, v95, v42, 51.869, 0.0, 0.898);
  sub_100050AD0((uint64_t)&off_10007A4C8);
  __n128 v96 = v43;
  sub_100050AD0((uint64_t)&off_10007A4F8);
  sub_1000565C4(-649.4, 1.9408, v96, v44, 71.932, 0.0, 27.61);
  sub_100050AD0((uint64_t)&off_10007A528);
  __n128 v97 = v45;
  sub_100050AD0((uint64_t)&off_10007A558);
  sub_1000565C4(4999.5, 3.0299, v97, v46, 181.33, 0.0, 2.47);
  sub_100050AD0((uint64_t)&off_10007A588);
  __n128 v98 = v47;
  sub_100050AD0((uint64_t)&off_10007A5B8);
  sub_1000565C4(3500.0, 3.1416, v98, v48, 107.92, 0.0, 0.73);
  sub_100050AD0((uint64_t)&off_10007A5E8);
  float32x4_t v99 = v49;
  sub_100050AD0((uint64_t)&off_10007A618);
  float32x4_t v51 = vaddq_f32(v99, v50);
  v51.i32[3] = 0;
  __n128 v89 = (__n128)v51;
  sub_100050AD0((uint64_t)&off_10007A648);
  sub_1000565C4(1100.0, 2.0769, v89, v52, 145.94, 0.38, 1.85);
  sub_100050AD0((uint64_t)&off_10007A678);
  float32x4_t v90 = v53;
  sub_100050AD0((uint64_t)&off_10007A6A8);
  float32x4_t v55 = vaddq_f32(v90, v54);
  v55.i32[3] = 0;
  __n128 v91 = (__n128)v55;
  sub_100050AD0((uint64_t)&off_10007A6D8);
  sub_1000565C4(4200.0, 3.1416, v91, v56, 0.0, 0.2, 0.89);
  sub_100050AD0((uint64_t)&off_10007A708);
  __n128 v92 = v57;
  sub_100050AD0((uint64_t)&off_10007A738);
  sub_1000565C4(5400.0, 3.0439, v92, v58, -173.19, 1.037, 1.31);
  sub_100050AD0((uint64_t)&off_10007A768);
  __n128 v93 = v59;
  sub_100050AD0((uint64_t)&off_10007A798);
  sub_1000565C4(0.0, 2.3981, v93, v60, 43.319, 0.366, 0.79);
  sub_100050AD0((uint64_t)&off_10007A7C8);
  __n128 v105 = v61;
  sub_100050AD0((uint64_t)&off_10007A7F8);
  sub_1000565C4(0.0, 2.5272, v105, v62, 196.54, 0.38, 1.85);
  sub_100050AD0((uint64_t)&off_10007A828);
  __n128 v106 = v63;
  sub_100050AD0((uint64_t)&off_10007A858);
  sub_1000565C4(25916.0, 3.1416, v106, v64, 55.945, 1.0, 1.02);
  sub_100050AD0((uint64_t)&off_10007A888);
  __n128 v107 = v65;
  sub_100050AD0((uint64_t)&off_10007A8B8);
  sub_1000565C4(3300.0, 3.0299, v107, v66, 181.33, 0.0, 2.47);
  sub_100050AD0((uint64_t)&off_10007A8E8);
  __n128 v115 = v67;
  sub_100050AD0((uint64_t)&off_10007A918);
  sub_1000565C4(300.0, 3.1416, v115, v68, 107.92, 0.0, 0.73);
  sub_100050AD0((uint64_t)&off_10007A948);
  __n128 v116 = v69;
  sub_100050AD0((uint64_t)&off_10007A978);
  sub_1000565C4(-150.0, 1.9408, v116, v70, 71.932, 0.0, 27.61);
  sub_100050AD0((uint64_t)&off_10007A9A8);
  __n128 v117 = v71;
  sub_100050AD0((uint64_t)&off_10007A9D8);
  sub_1000565C4(0.0, 3.1416, v117, v72, -71.779, 0.366, 0.79);
  sub_100050AD0((uint64_t)&off_10007AA08);
  __n128 v118 = v73;
  sub_100050AD0((uint64_t)&off_10007AA38);
  sub_1000565C4(450.0, 2.3981, v118, v74, 25.134, 0.366, 0.79);
  sub_100050AD0((uint64_t)&off_10007AA68);
  __n128 v119 = v75;
  sub_100050AD0((uint64_t)&off_10007AA98);
  sub_1000565C4(0.0, 1.975, v119, v76, 103.95, 0.38, 1.85);
  sub_100050AD0((uint64_t)&off_10007AAC8);
  __n128 v120 = v77;
  sub_100050AD0((uint64_t)&off_10007AAF8);
  sub_1000565C4(200.0, 2.0769, v120, v78, 145.94, 0.38, 1.85);
  sub_100050AD0((uint64_t)&off_10007AB28);
  __n128 v137 = v79;
  sub_100050AD0((uint64_t)&off_10007AB58);
  sub_1000565C4(2210.0, 3.1416, v137, v80, 0.0, 0.2, 0.89);
  sub_100050AD0((uint64_t)&off_10007AB88);
  __n128 v138 = v81;
  sub_100050AD0((uint64_t)&off_10007ABB8);
  sub_1000565C4(650.0, 3.0439, v138, v82, -173.19, 1.037, 1.31);
  sub_100050AD0((uint64_t)&off_10007ABE8);
  __n128 v139 = v83;
  sub_100050AD0((uint64_t)&off_10007AC18);
  sub_1000565C4(8000.0, 3.1416, v139, v84, 55.945, 1.0, 1.02);
  sub_100050AD0((uint64_t)&off_10007AC48);
  __n128 v140 = v85;
  sub_100050AD0((uint64_t)&off_10007AC78);
  sub_1000565C4(800.0, 3.1416, v140, v86, 51.869, 0.0, 0.898);
  sub_100008F4C(&qword_1000985E0);
  uint64_t v87 = swift_allocObject();
  *(_OWORD *)(v87 + 16) = xmmword_100063060;
  *(void *)(v87 + 32) = v110;
  *(void *)(v87 + 40) = v2;
  *(void *)(v87 + 48) = v16;
  *(void *)(v87 + 56) = v100;
  *(void *)(v87 + 64) = v7;
  *(void *)(v87 + 72) = v104;
  *(void *)(v87 + 80) = v13;
  *(void *)(v87 + 88) = v5;
  *(void *)(v87 + 96) = v10;
  *(void *)(v87 + 104) = v101;
  *(void *)(v87 + 112) = v103;
  uint64_t v141 = v87;
  sub_10005DFB8();
  swift_beginAccess();
  *(void *)(v109 + 144) = v141;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10005A3A4()
{
  sub_100050AD0((uint64_t)&off_10007D918);
  __n128 v121 = v0;
  type metadata accessor for ToriLight();
  swift_allocObject();
  __n128 v1 = sub_1000564D4(1u, 0, 1u, v121, 1.0);
  sub_100050AD0((uint64_t)&off_10007D948);
  __n128 v122 = v2;
  swift_allocObject();
  __n128 v103 = sub_1000564D4(1u, 1u, 1u, v122, 1.0);
  sub_100050AD0((uint64_t)&off_10007D978);
  __n128 v123 = v3;
  swift_allocObject();
  __n128 v4 = sub_1000564D4(0, 1u, 1u, v123, 1.0);
  sub_100050AD0((uint64_t)&off_10007D9A8);
  __n128 v124 = v5;
  swift_allocObject();
  __n128 v102 = sub_1000564D4(1u, 1u, 1u, v124, 1.0);
  sub_100050AD0((uint64_t)&off_10007D9D8);
  __n128 v125 = v6;
  swift_allocObject();
  __n128 v91 = sub_1000564D4(0, 1u, 1u, v125, 1.0);
  sub_100050AD0((uint64_t)&off_10007DA08);
  __n128 v126 = v7;
  swift_allocObject();
  __n128 v8 = sub_1000564D4(1u, 1u, 1u, v126, 1.0);
  sub_100050AD0((uint64_t)&off_10007DA38);
  __n128 v127 = v9;
  swift_allocObject();
  float v10 = sub_1000564D4(1u, 1u, 1u, v127, 1.0);
  sub_100050AD0((uint64_t)&off_10007DA68);
  __n128 v128 = v11;
  swift_allocObject();
  __n128 v92 = sub_1000564D4(1u, 1u, 1u, v128, 1.0);
  sub_100050AD0((uint64_t)&off_10007DA98);
  __n128 v129 = v12;
  swift_allocObject();
  double v13 = sub_1000564D4(1u, 1u, 1u, v129, 1.0);
  sub_100050AD0((uint64_t)&off_10007DAC8);
  __n128 v130 = v14;
  swift_allocObject();
  __n128 v94 = sub_1000564D4(1u, 0, 1u, v130, 1.0);
  sub_100050AD0((uint64_t)&off_10007DAF8);
  __n128 v131 = v15;
  swift_allocObject();
  v131.n128_u64[0] = (unint64_t)sub_1000564D4(0, 1u, 1u, v131, 1.0);
  sub_100050AD0((uint64_t)&off_10007DB28);
  __n128 v113 = v16;
  sub_100050AD0((uint64_t)&off_10007DB58);
  sub_1000565C4(1200.0, 3.1416, v113, v17, 12.0, 0.2, 0.89);
  sub_100050AD0((uint64_t)&off_10007DB88);
  __n128 v114 = v18;
  sub_100050AD0((uint64_t)&off_10007DBB8);
  sub_1000565C4(0.0, 3.0439, v114, v19, 186.81, 0.2, 1.31);
  sub_100050AD0((uint64_t)&off_10007DBE8);
  __n128 v115 = v20;
  sub_100050AD0((uint64_t)&off_10007DC18);
  sub_1000565C4(2200.0, 2.4365, v115, v21, 181.33, 0.0, 2.47);
  sub_100050AD0((uint64_t)&off_10007DC48);
  __n128 v116 = v22;
  sub_100050AD0((uint64_t)&off_10007DC78);
  sub_1000565C4(2000.0, 3.1346, v116, v23, 124.03, 0.0, 40.0);
  sub_100050AD0((uint64_t)&off_10007DCA8);
  __n128 v117 = v24;
  sub_100050AD0((uint64_t)&off_10007DCD8);
  sub_1000565C4(453.0, 2.3981, v117, v25, 83.134, 0.26, 3.244);
  sub_100050AD0((uint64_t)&off_10007DD08);
  __n128 v107 = v26;
  sub_100050AD0((uint64_t)&off_10007DD38);
  sub_1000565C4(0.0, 2.0769, v107, v27, 211.94, 0.38, 6.71);
  sub_100050AD0((uint64_t)&off_10007DD68);
  __n128 v106 = v28;
  sub_100050AD0((uint64_t)&off_10007DD98);
  sub_1000565C4(0.0, 2.3981, v106, v29, 43.319, 0.36593, 0.79);
  sub_100050AD0((uint64_t)&off_10007DDC8);
  __n128 v104 = v30;
  sub_100050AD0((uint64_t)&off_10007DDF8);
  sub_1000565C4(0.0, 2.5272, v104, v31, 196.54, 0.38, 1.85);
  sub_100050AD0((uint64_t)&off_10007DE28);
  __n128 v105 = v32;
  sub_100050AD0((uint64_t)&off_10007DE58);
  sub_1000565C4(0.0, 0.017453, v105, v33, 82.261, 1.54, 0.898);
  sub_100050AD0((uint64_t)&off_10007DE88);
  __n128 v100 = v34;
  sub_100050AD0((uint64_t)&off_10007DEB8);
  sub_1000565C4(16136.0, 2.7751, v100, v35, 110.0, 1.17, 1.0);
  sub_100050AD0((uint64_t)&off_10007DEE8);
  __n128 v95 = v36;
  sub_100050AD0((uint64_t)&off_10007DF18);
  sub_1000565C4(704.83, 0.7171, v95, v37, 175.39, 0.0, 27.61);
  sub_100050AD0((uint64_t)&off_10007DF48);
  __n128 v96 = v38;
  sub_100050AD0((uint64_t)&off_10007DF78);
  sub_1000565C4(800.0, 3.1416, v96, v39, 0.0, 0.2, 0.89);
  sub_100050AD0((uint64_t)&off_10007DFA8);
  __n128 v97 = v40;
  sub_100050AD0((uint64_t)&off_10007DFD8);
  sub_1000565C4(700.0, 3.0439, v97, v41, 186.81, 0.2, 1.31);
  sub_100050AD0((uint64_t)&off_10007E008);
  __n128 v98 = v42;
  sub_100050AD0((uint64_t)&off_10007E038);
  sub_1000565C4(2200.0, 2.4365, v98, v43, 181.33, 0.0, 2.47);
  sub_100050AD0((uint64_t)&off_10007E068);
  __n128 v99 = v44;
  sub_100050AD0((uint64_t)&off_10007E098);
  sub_1000565C4(-900.0, 3.1346, v99, v45, 105.63, 0.0, 40.0);
  sub_100050AD0((uint64_t)&off_10007E0C8);
  sub_1000565C4(133.0, 2.3981, (__n128)xmmword_10005F220, v46, 25.134, 0.26, 3.244);
  sub_100050AD0((uint64_t)&off_10007E0F8);
  __n128 v83 = v47;
  sub_100050AD0((uint64_t)&off_10007E128);
  sub_1000565C4(450.0, 2.0769, v83, v48, 145.94, 0.38, 6.71);
  sub_100050AD0((uint64_t)&off_10007E158);
  __n128 v84 = v49;
  sub_100050AD0((uint64_t)&off_10007E188);
  sub_1000565C4(0.0, 2.3981, v84, v50, 43.319, 0.36593, 0.79);
  sub_100050AD0((uint64_t)&off_10007E1B8);
  __n128 v90 = v51;
  sub_100050AD0((uint64_t)&off_10007E1E8);
  sub_1000565C4(0.0, 2.5272, v90, v52, 196.54, 0.38, 1.85);
  sub_100050AD0((uint64_t)&off_10007E218);
  __n128 v89 = v53;
  sub_100050AD0((uint64_t)&off_10007E248);
  sub_1000565C4(2500.0, 3.1416, v89, v54, 29.269, 0.37, 0.898);
  sub_100050AD0((uint64_t)&off_10007E278);
  __n128 v85 = v55;
  sub_100050AD0((uint64_t)&off_10007E2A8);
  sub_1000565C4(23915.0, 3.1416, v85, v56, 55.945, 1.17, 1.02);
  sub_100050AD0((uint64_t)&off_10007E2D8);
  __n128 v86 = v57;
  sub_100050AD0((uint64_t)&off_10007E308);
  sub_1000565C4(-500.0, 2.1817, v86, v58, 71.932, 0.2, 1.0);
  sub_100050AD0((uint64_t)&off_10007E338);
  __n128 v87 = v59;
  sub_100050AD0((uint64_t)&off_10007E368);
  sub_1000565C4(400.0, 3.1416, v87, v60, 0.0, 0.2, 0.89);
  sub_100050AD0((uint64_t)&off_10007E398);
  __n128 v88 = v61;
  sub_100050AD0((uint64_t)&off_10007E3C8);
  sub_1000565C4(90.0, 3.0439, v88, v62, 186.81, 0.2, 1.31);
  sub_100050AD0((uint64_t)&off_10007E3F8);
  __n128 v93 = v63;
  sub_100050AD0((uint64_t)&off_10007E428);
  sub_1000565C4(900.0, 2.4365, v93, v64, 181.33, 0.0, 2.47);
  sub_100050AD0((uint64_t)&off_10007E458);
  __n128 v108 = v65;
  sub_100050AD0((uint64_t)&off_10007E488);
  sub_1000565C4(300.0, 3.1346, v108, v66, 105.63, 0.0, 40.0);
  sub_100050AD0((uint64_t)&off_10007E4B8);
  __n128 v109 = v67;
  sub_100050AD0((uint64_t)&off_10007E4E8);
  sub_1000565C4(0.0, 3.1416, v109, v68, -71.779, 1.08, 3.244);
  sub_100050AD0((uint64_t)&off_10007E518);
  __n128 v110 = v69;
  sub_100050AD0((uint64_t)&off_10007E548);
  sub_1000565C4(0.0, 2.9007, v110, v70, 118.76, 0.92, 6.71);
  sub_100050AD0((uint64_t)&off_10007E578);
  __n128 v111 = v71;
  sub_100050AD0((uint64_t)&off_10007E5A8);
  sub_1000565C4(50.0, 2.3981, v111, v72, 25.134, 0.36593, 0.79);
  sub_100050AD0((uint64_t)&off_10007E5D8);
  __n128 v112 = v73;
  sub_100050AD0((uint64_t)&off_10007E608);
  sub_1000565C4(150.0, 2.0769, v112, v74, 145.94, 0.38, 1.85);
  sub_100050AD0((uint64_t)&off_10007E638);
  __n128 v118 = v75;
  sub_100050AD0((uint64_t)&off_10007E668);
  sub_1000565C4(550.0, 3.1416, v118, v76, 51.869, 0.37, 0.898);
  sub_100050AD0((uint64_t)&off_10007E698);
  __n128 v119 = v77;
  sub_100050AD0((uint64_t)&off_10007E6C8);
  sub_1000565C4(8000.0, 3.1416, v119, v78, 55.945, 1.17, 1.02);
  sub_100050AD0((uint64_t)&off_10007E6F8);
  __n128 v120 = v79;
  sub_100050AD0((uint64_t)&off_10007E728);
  sub_1000565C4(-25.0, 2.0944, v120, v80, 71.932, 0.0, 27.61);
  sub_100008F4C(&qword_1000985E0);
  uint64_t v81 = swift_allocObject();
  *(_OWORD *)(v81 + 16) = xmmword_100063060;
  *(void *)(v81 + 32) = v102;
  *(void *)(v81 + 40) = v10;
  *(void *)(v81 + 48) = v13;
  *(void *)(v81 + 56) = v94;
  *(void *)(v81 + 64) = v8;
  *(void *)(v81 + 72) = v131.n128_u64[0];
  *(void *)(v81 + 80) = v91;
  *(void *)(v81 + 88) = v92;
  *(void *)(v81 + 96) = v1;
  *(void *)(v81 + 104) = v4;
  *(void *)(v81 + 112) = v103;
  uint64_t v132 = v81;
  sub_10005DFB8();
  swift_beginAccess();
  *(void *)(v101 + 144) = v132;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10005B254()
{
  sub_100050AD0((uint64_t)&off_10007C9E8);
  __n128 v127 = v0;
  type metadata accessor for ToriLight();
  swift_allocObject();
  __n128 v1 = sub_1000564D4(1u, 0, 1u, v127, 1.0);
  sub_100050AD0((uint64_t)&off_10007CA18);
  __n128 v128 = v2;
  swift_allocObject();
  __n128 v3 = sub_1000564D4(1u, 0, 1u, v128, 1.0);
  sub_100050AD0((uint64_t)&off_10007CA48);
  __n128 v129 = v4;
  swift_allocObject();
  __n128 v5 = sub_1000564D4(0, 1u, 1u, v129, 1.0);
  sub_100050AD0((uint64_t)&off_10007CA78);
  __n128 v130 = v6;
  swift_allocObject();
  __n128 v7 = sub_1000564D4(1u, 1u, 1u, v130, 1.0);
  sub_100050AD0((uint64_t)&off_10007CAA8);
  __n128 v131 = v8;
  swift_allocObject();
  __n128 v9 = sub_1000564D4(1u, 1u, 1u, v131, 1.0);
  sub_100050AD0((uint64_t)&off_10007CAD8);
  __n128 v132 = v10;
  swift_allocObject();
  __n128 v11 = sub_1000564D4(1u, 1u, 1u, v132, 1.0);
  sub_100050AD0((uint64_t)&off_10007CB08);
  __n128 v133 = v12;
  swift_allocObject();
  double v13 = sub_1000564D4(1u, 1u, 1u, v133, 1.0);
  sub_100050AD0((uint64_t)&off_10007CB38);
  __n128 v134 = v14;
  swift_allocObject();
  __n128 v115 = sub_1000564D4(1u, 1u, 1u, v134, 1.0);
  sub_100050AD0((uint64_t)&off_10007CB68);
  __n128 v135 = v15;
  swift_allocObject();
  __n128 v114 = sub_1000564D4(0, 1u, 1u, v135, 1.0);
  sub_100050AD0((uint64_t)&off_10007CB98);
  __n128 v136 = v16;
  swift_allocObject();
  __n128 v118 = sub_1000564D4(1u, 0, 1u, v136, 1.0);
  sub_100050AD0((uint64_t)&off_10007CBC8);
  __n128 v137 = v17;
  swift_allocObject();
  __n128 v117 = sub_1000564D4(1u, 0, 1u, v137, 1.0);
  sub_100050AD0((uint64_t)&off_10007CBF8);
  __n128 v138 = v18;
  sub_100050AD0((uint64_t)&off_10007CC28);
  sub_1000565C4(4000.0, 3.1416, v138, v19, 12.0, 0.2, 0.89);
  sub_100050AD0((uint64_t)&off_10007CC58);
  __n128 v119 = v20;
  sub_100050AD0((uint64_t)&off_10007CC88);
  sub_1000565C4(0.0, 3.0439, v119, v21, 186.81, 0.2, 1.31);
  sub_100050AD0((uint64_t)&off_10007CCB8);
  __n128 v120 = v22;
  sub_100050AD0((uint64_t)&off_10007CCE8);
  sub_1000565C4(7000.0, 3.0299, v120, v23, 181.33, 0.0, 2.47);
  sub_100050AD0((uint64_t)&off_10007CD18);
  __n128 v121 = v24;
  sub_100050AD0((uint64_t)&off_10007CD48);
  sub_1000565C4(1200.0, 3.1416, v121, v25, 131.28, 0.0, 40.0);
  sub_100050AD0((uint64_t)&off_10007CD78);
  __n128 v122 = v26;
  sub_100050AD0((uint64_t)&off_10007CDA8);
  sub_1000565C4(0.0, 2.3981, v122, v27, 83.134, 0.26, 0.79);
  sub_100050AD0((uint64_t)&off_10007CDD8);
  __n128 v123 = v28;
  sub_100050AD0((uint64_t)&off_10007CE08);
  sub_1000565C4(0.0, 2.0769, v123, v29, 211.94, 0.38, 1.85);
  sub_100050AD0((uint64_t)&off_10007CE38);
  __n128 v124 = v30;
  sub_100050AD0((uint64_t)&off_10007CE68);
  sub_1000565C4(0.0, 0.017453, v124, v31, 82.261, 1.54, 0.898);
  sub_100050AD0((uint64_t)&off_10007CE98);
  __n128 v125 = v32;
  sub_100050AD0((uint64_t)&off_10007CEC8);
  sub_1000565C4(16136.0, 2.7751, v125, v33, 110.0, 1.274, 1.0);
  sub_100050AD0((uint64_t)&off_10007CEF8);
  __n128 v99 = v34;
  sub_100050AD0((uint64_t)&off_10007CF28);
  sub_1000565C4(1000.0, 0.017453, v99, v35, 97.966, 0.0, 27.61);
  sub_100050AD0((uint64_t)&off_10007CF58);
  __n128 v100 = v36;
  sub_100050AD0((uint64_t)&off_10007CF88);
  sub_1000565C4(0.0, 2.3981, v100, v37, 43.319, 0.36593, 0.79);
  sub_100050AD0((uint64_t)&off_10007CFB8);
  __n128 v101 = v38;
  sub_100050AD0((uint64_t)&off_10007CFE8);
  sub_1000565C4(0.0, 2.5272, v101, v39, 196.54, 0.38, 1.85);
  sub_100050AD0((uint64_t)&off_10007D018);
  __n128 v102 = v40;
  sub_100050AD0((uint64_t)&off_10007D048);
  sub_1000565C4(4000.0, 3.1416, v102, v41, 0.0, 0.2, 0.89);
  sub_100050AD0((uint64_t)&off_10007D078);
  __n128 v106 = v42;
  sub_100050AD0((uint64_t)&off_10007D0A8);
  sub_1000565C4(2300.0, 3.0439, v106, v43, 186.81, 0.2, 1.31);
  sub_100050AD0((uint64_t)&off_10007D0D8);
  __n128 v107 = v44;
  sub_100050AD0((uint64_t)&off_10007D108);
  sub_1000565C4(7000.0, 3.0299, v107, v45, 181.33, 0.0, 2.47);
  sub_100050AD0((uint64_t)&off_10007D138);
  float32x4_t v108 = v46;
  sub_100050AD0((uint64_t)&off_10007D168);
  float32x4_t v48 = vaddq_f32(v108, v47);
  v48.i32[3] = 0;
  __n128 v109 = (__n128)v48;
  sub_100050AD0((uint64_t)&off_10007D198);
  sub_1000565C4(1000.0, 3.1416, v109, v49, 131.28, 0.0, 40.0);
  sub_100050AD0((uint64_t)&off_10007D1C8);
  float32x4_t v110 = v50;
  sub_100050AD0((uint64_t)&off_10007D1F8);
  float32x4_t v52 = vaddq_f32(v110, v51);
  v52.i32[3] = 0;
  __n128 v111 = (__n128)v52;
  sub_100050AD0((uint64_t)&off_10007D228);
  sub_1000565C4(550.0, 2.3981, v111, v53, 25.134, 0.26, 0.89);
  sub_100050AD0((uint64_t)&off_10007D258);
  float32x4_t v112 = v54;
  sub_100050AD0((uint64_t)&off_10007D288);
  float32x4_t v56 = vaddq_f32(v112, v55);
  v56.i32[3] = 0;
  __n128 v104 = (__n128)v56;
  sub_100050AD0((uint64_t)&off_10007D2B8);
  sub_1000565C4(1500.0, 2.0769, v104, v57, 145.94, 0.38, 2.05);
  sub_100050AD0((uint64_t)&off_10007D2E8);
  float32x4_t v105 = v58;
  sub_100050AD0((uint64_t)&off_10007D318);
  float32x4_t v60 = vaddq_f32(v105, v59);
  v60.i32[3] = 0;
  __n128 v103 = (__n128)v60;
  sub_100050AD0((uint64_t)&off_10007D348);
  sub_1000565C4(1800.0, 3.1416, v103, v61, 51.869, 0.1, 0.898);
  sub_100050AD0((uint64_t)&off_10007D378);
  __n128 v98 = v62;
  sub_100050AD0((uint64_t)&off_10007D3A8);
  sub_1000565C4(13915.0, 3.1416, v98, v63, 55.945, 1.274, 1.02);
  sub_100050AD0((uint64_t)&off_10007D3D8);
  __n128 v94 = v64;
  sub_100050AD0((uint64_t)&off_10007D408);
  sub_1000565C4(0.0, 1.9408, v94, v65, 71.932, 0.0, 27.61);
  sub_100050AD0((uint64_t)&off_10007D438);
  __n128 v95 = v66;
  sub_100050AD0((uint64_t)&off_10007D468);
  sub_1000565C4(0.0, 2.3981, v95, v67, 43.319, 0.36593, 0.79);
  sub_100050AD0((uint64_t)&off_10007D498);
  __n128 v96 = v68;
  sub_100050AD0((uint64_t)&off_10007D4C8);
  sub_1000565C4(0.0, 2.5272, v96, v69, 196.54, 0.38, 1.85);
  sub_100050AD0((uint64_t)&off_10007D4F8);
  __n128 v97 = v70;
  sub_100050AD0((uint64_t)&off_10007D528);
  sub_1000565C4(10000.0, 3.0299, v97, v71, 181.33, 0.0, 2.47);
  sub_100050AD0((uint64_t)&off_10007D558);
  __n128 v116 = v72;
  sub_100050AD0((uint64_t)&off_10007D588);
  sub_1000565C4(2500.0, 3.1416, v116, v73, 0.0, 0.2, 0.89);
  sub_100050AD0((uint64_t)&off_10007D5B8);
  __n128 v126 = v74;
  sub_100050AD0((uint64_t)&off_10007D5E8);
  sub_1000565C4(700.0, 3.0439, v126, v75, 186.81, 0.2, 1.31);
  sub_100050AD0((uint64_t)&off_10007D618);
  __n128 v139 = v76;
  sub_100050AD0((uint64_t)&off_10007D648);
  sub_1000565C4(350.0, 3.1416, v139, v77, 131.28, 0.0, 40.0);
  sub_100050AD0((uint64_t)&off_10007D678);
  __n128 v140 = v78;
  sub_100050AD0((uint64_t)&off_10007D6A8);
  sub_1000565C4(0.0, 3.1416, v140, v79, -71.779, 1.078, 0.79);
  sub_100050AD0((uint64_t)&off_10007D6D8);
  __n128 v141 = v80;
  sub_100050AD0((uint64_t)&off_10007D708);
  sub_1000565C4(250.0, 2.3981, v141, v81, 25.134, 0.36593, 0.79);
  sub_100050AD0((uint64_t)&off_10007D738);
  __n128 v142 = v82;
  sub_100050AD0((uint64_t)&off_10007D768);
  sub_1000565C4(0.0, 1.928, v142, v83, 118.76, 0.38, 1.85);
  sub_100050AD0((uint64_t)&off_10007D798);
  __n128 v143 = v84;
  sub_100050AD0((uint64_t)&off_10007D7C8);
  sub_1000565C4(200.0, 2.0769, v143, v85, 145.94, 0.38, 1.85);
  sub_100050AD0((uint64_t)&off_10007D7F8);
  __n128 v144 = v86;
  sub_100050AD0((uint64_t)&off_10007D828);
  sub_1000565C4(1600.0, 3.1416, v144, v87, 51.869, 0.0, 0.898);
  sub_100050AD0((uint64_t)&off_10007D858);
  __n128 v145 = v88;
  sub_100050AD0((uint64_t)&off_10007D888);
  sub_1000565C4(8000.0, 3.1416, v145, v89, 55.945, 1.274, 1.02);
  sub_100050AD0((uint64_t)&off_10007D8B8);
  __n128 v146 = v90;
  sub_100050AD0((uint64_t)&off_10007D8E8);
  sub_1000565C4(-150.0, 1.9408, v146, v91, 71.932, 0.0, 27.61);
  sub_100008F4C(&qword_1000985E0);
  uint64_t v92 = swift_allocObject();
  *(_OWORD *)(v92 + 16) = xmmword_100063060;
  *(void *)(v92 + 32) = v7;
  *(void *)(v92 + 40) = v118;
  *(void *)(v92 + 48) = v13;
  *(void *)(v92 + 56) = v115;
  *(void *)(v92 + 64) = v114;
  *(void *)(v92 + 72) = v11;
  *(void *)(v92 + 80) = v117;
  *(void *)(v92 + 88) = v1;
  *(void *)(v92 + 96) = v5;
  *(void *)(v92 + 104) = v3;
  *(void *)(v92 + 112) = v9;
  uint64_t v147 = v92;
  sub_10005DFB8();
  swift_beginAccess();
  *(void *)(v113 + 144) = v147;
  return swift_bridgeObjectRelease();
}

int64_t sub_10005C168(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v60 = a1;
  uint64_t v61 = a6;
  uint64_t v8 = sub_100008F4C(&qword_1000984A0);
  __chkstk_darwin(v8 - 8);
  __n128 v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10005DA28();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  __n128 v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  __n128 v63 = (char *)&v53 - v16;
  id v17 = [self mainBundle];
  uint64_t v58 = a2;
  id v59 = a3;
  NSString v18 = sub_10005DE38();
  NSString v19 = sub_10005DE38();
  id v20 = [v17 URLForResource:v18 withExtension:v19];

  if (!v20)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
    goto LABEL_19;
  }
  sub_10005D9D8();

  __n128 v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v21(v10, v14, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
LABEL_19:
    sub_10002C65C((uint64_t)v10);
    sub_100051CC8();
    swift_allocError();
    *float32x4_t v47 = 1;
    swift_willThrow();
    return (int64_t)v19;
  }
  __n128 v22 = v63;
  v21(v63, v10, v11);
  sub_10005D9F8();
  __n128 v23 = (__CFString *)sub_10005DE38();
  swift_bridgeObjectRelease();
  CFURLRef v24 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v23, kCFURLPOSIXPathStyle, 0);
  if (!v24)
  {
LABEL_23:
    sub_100051CC8();
    swift_allocError();
    unsigned char *v48 = 1;
    swift_willThrow();

LABEL_30:
    (*(void (**)(char *, uint64_t))(v12 + 8))(v22, v11);
    return (int64_t)v19;
  }
  CFURLRef v25 = v24;
  __n128 v26 = CGImageSourceCreateWithURL(v24, 0);
  if (!v26)
  {
    __n128 v27 = v25;
LABEL_22:

    goto LABEL_23;
  }
  __n128 v27 = v26;
  ImageAtIndeCGFloat x = CGImageSourceCreateImageAtIndex(v26, 0, 0);
  if (!ImageAtIndex)
  {

    goto LABEL_22;
  }
  NSString v19 = ImageAtIndex;
  CGColorSpaceRef v29 = CGColorSpaceCreateWithName(kCGColorSpaceExtendedLinearSRGB);
  if (!v29)
  {
    sub_100051CC8();
    swift_allocError();
    *__n128 v49 = 1;
    swift_willThrow();

LABEL_27:
    goto LABEL_28;
  }
  __n128 v30 = v29;
  float32x4_t v56 = v23;
  size_t Width = CGImageGetWidth((CGImageRef)v19);
  size_t Height = CGImageGetHeight((CGImageRef)v19);
  size_t BitsPerComponent = CGImageGetBitsPerComponent((CGImageRef)v19);
  __n128 v34 = (CGImage *)v19;
  NSString v19 = (NSString)BitsPerComponent;
  CGImageRef v57 = v34;
  int64_t result = CGImageGetWidth(v34);
  if (result + 0x4000000000000000 < 0)
  {
    __break(1u);
    goto LABEL_34;
  }
  int64_t v36 = 2 * result * v61;
  if ((unsigned __int128)(2 * result * (__int128)v61) >> 64 != v36 >> 63)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  CGContextRef v37 = CGBitmapContextCreate(0, Width, Height, (size_t)v19, v36, v30, 0x1105u);
  if (!v37)
  {
    sub_100051CC8();
    swift_allocError();
    unsigned char *v50 = 1;
    swift_willThrow();

LABEL_28:
LABEL_29:

    goto LABEL_30;
  }
  NSString v19 = v37;
  __n128 v38 = v57;
  CGImageGetWidth(v57);
  CGImageGetHeight(v38);
  sub_10005E058();
  Data = CGBitmapContextGetData((CGContextRef)v19);
  if (!Data)
  {
    sub_100051CC8();
    swift_allocError();
    *float32x4_t v51 = 1;
    swift_willThrow();

    goto LABEL_27;
  }
  __n128 v53 = Data;
  id v54 = v19;
  float32x4_t v55 = v27;
  id v40 = [objc_allocWithZone((Class)MTLTextureDescriptor) init];
  [v40 setTextureType:2];
  [v40 setPixelFormat:115];
  [v40 setWidth:CGImageGetWidth(v38)];
  [v40 setHeight:CGImageGetHeight(v38)];
  [v40 setUsage:1];
  id v41 = [v60 newTextureWithDescriptor:v40];
  if (!v41)
  {
    sub_100051CC8();
    NSString v19 = v30;
    swift_allocError();
    *float32x4_t v52 = 1;
    swift_willThrow();

    goto LABEL_29;
  }
  NSString v19 = v41;
  NSString v42 = sub_10005DE38();
  [v19 setLabel:v42];

  id v60 = [v40 width];
  id v59 = [v40 height];
  int64_t result = (int64_t)[v40 width];
  if (result + 0x4000000000000000 < 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v43 = 2 * result * v61;
  if ((unsigned __int128)(2 * result * (__int128)v61) >> 64 != v43 >> 63)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v44 = (uint64_t)[v40 width];
  int64_t result = (int64_t)[v40 height];
  int64_t v45 = v44 * result;
  if ((unsigned __int128)(v44 * (__int128)result) >> 64 != (v44 * result) >> 63)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  float32x4_t v46 = v55;
  if (v45 + 0x4000000000000000 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((unsigned __int128)(2 * v45 * (__int128)v61) >> 64 == (2 * v45 * v61) >> 63)
  {
    memset(v62, 0, 24);
    v62[3] = v60;
    v62[4] = v59;
    v62[5] = 1;
    objc_msgSend(v19, "replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:", v62, 0, 0, v53, v43);

    (*(void (**)(char *, uint64_t))(v12 + 8))(v63, v11);
    return (int64_t)v19;
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_10005C908(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v64 = a7;
  uint64_t v65 = a8;
  id v66 = a1;
  uint64_t v67 = a6;
  uint64_t v8 = sub_100008F4C(&qword_1000984A0);
  __chkstk_darwin(v8 - 8);
  __n128 v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10005DA28();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  __n128 v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  __n128 v69 = (char *)&v59 - v16;
  id v17 = [self mainBundle];
  NSString v18 = sub_10005DE38();
  NSString v19 = sub_10005DE38();
  id v20 = [v17 URLForResource:v18 withExtension:v19];

  if (!v20)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
    goto LABEL_22;
  }
  sub_10005D9D8();

  __n128 v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v21(v10, v14, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
LABEL_22:
    sub_10002C65C((uint64_t)v10);
    sub_100051CC8();
    swift_allocError();
    *id v54 = 1;
    swift_willThrow();
    return;
  }
  __n128 v22 = v69;
  v21(v69, v10, v11);
  sub_10005D9F8();
  __n128 v23 = (__CFString *)sub_10005DE38();
  swift_bridgeObjectRelease();
  CFURLRef v24 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v23, kCFURLPOSIXPathStyle, 0);
  if (!v24)
  {
LABEL_27:
    sub_100051CC8();
    swift_allocError();
    *float32x4_t v55 = 1;
    swift_willThrow();

    (*(void (**)(char *, uint64_t))(v12 + 8))(v22, v11);
    return;
  }
  CFURLRef v25 = v24;
  __n128 v26 = CGImageSourceCreateWithURL(v24, 0);
  if (!v26)
  {
LABEL_26:

    goto LABEL_27;
  }
  __n128 v27 = v26;
  ImageAtIndeCGFloat x = CGImageSourceCreateImageAtIndex(v26, 0, 0);
  if (!ImageAtIndex)
  {
    CGColorSpaceRef v29 = v27;
LABEL_25:

    CFURLRef v25 = v29;
    goto LABEL_26;
  }
  CGColorSpaceRef v29 = ImageAtIndex;
  CGColorSpaceRef v63 = CGColorSpaceCreateWithName(kCGColorSpaceExtendedLinearDisplayP3);
  if (!v63)
  {

    CFURLRef v25 = v27;
    goto LABEL_25;
  }
  uint64_t v61 = v27;
  uint64_t v30 = (uint64_t)CGImageGetBitsPerComponent(v29) / 8;
  if (CGImageGetBitsPerComponent(v29) == 16) {
    uint32_t v31 = 4357;
  }
  else {
    uint32_t v31 = 8453;
  }
  size_t Width = CGImageGetWidth(v29);
  size_t Height = CGImageGetHeight(v29);
  size_t BitsPerComponent = CGImageGetBitsPerComponent(v29);
  __n128 v35 = v29;
  size_t v36 = BitsPerComponent;
  CGImageRef v62 = v35;
  int64_t v37 = CGImageGetWidth(v35);
  int64_t v38 = v37 * v30;
  if ((unsigned __int128)(v37 * (__int128)v30) >> 64 != (v37 * v30) >> 63)
  {
    __break(1u);
    goto LABEL_34;
  }
  if ((unint64_t)(v38 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  size_t v39 = v36;
  CGColorSpaceRef v40 = v63;
  CGContextRef v41 = CGBitmapContextCreate(0, Width, Height, v39, 4 * v38, v63, v31);
  if (!v41)
  {
    sub_100051CC8();
    swift_allocError();
    *float32x4_t v56 = 1;
    swift_willThrow();

LABEL_31:
    goto LABEL_32;
  }
  NSString v42 = v41;
  uint64_t v43 = v62;
  CGImageGetWidth(v62);
  CGImageGetHeight(v43);
  sub_10005E058();
  Data = CGBitmapContextGetData(v42);
  if (!Data)
  {
    sub_100051CC8();
    swift_allocError();
    *CGImageRef v57 = 1;
    swift_willThrow();

LABEL_32:
    (*(void (**)(char *, uint64_t))(v12 + 8))(v69, v11);
    return;
  }
  id v59 = Data;
  id v60 = v23;
  id v45 = [objc_allocWithZone((Class)MTLTextureDescriptor) init];
  [v45 setTextureType:7];
  [v45 setPixelFormat:115];
  uint64_t v46 = v67;
  [v45 setWidth:v67];
  [v45 setHeight:v46];
  [v45 setDepth:v46];
  [v45 setUsage:1];
  id v47 = [v66 newTextureWithDescriptor:v45];
  if (!v47)
  {
    sub_100051CC8();
    swift_allocError();
    *uint64_t v58 = 1;
    swift_willThrow();

    goto LABEL_31;
  }
  float32x4_t v48 = v47;
  NSString v49 = sub_10005DE38();
  [v48 setLabel:v49];

  uint64_t v50 = v46 * v30;
  if ((unsigned __int128)(v46 * (__int128)v30) >> 64 != (v46 * v30) >> 63)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if ((unint64_t)(v50 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v51 = v46 * v46;
  if ((unsigned __int128)(v46 * (__int128)v46) >> 64 != (v46 * v46) >> 63)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v52 = v51 * v30;
  if ((unsigned __int128)(v51 * (__int128)v30) >> 64 == (v51 * v30) >> 63)
  {
    if ((unint64_t)(v52 - 0x2000000000000000) >> 62 == 3)
    {
      __n128 v53 = v60;
      memset(v68, 0, 24);
      v68[3] = v46;
      _OWORD v68[4] = v46;
      v68[5] = v46;
      [v48 replaceRegion:v68 mipmapLevel:0 slice:0 withBytes:v59 bytesPerRow:4 * v50 bytesPerImage:4 * v52];

      (*(void (**)(char *, uint64_t))(v12 + 8))(v69, v11);
      return;
    }
    goto LABEL_39;
  }
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

uint64_t sub_10005D064(uint64_t a1)
{
  return sub_10005D204(a1, qword_10009FA60);
}

uint64_t sub_10005D088(uint64_t a1)
{
  return sub_10005D204(a1, qword_10009FA78);
}

uint64_t sub_10005D0AC(uint64_t a1)
{
  return sub_10005D204(a1, qword_10009FA90);
}

uint64_t sub_10005D0D0(uint64_t a1)
{
  return sub_10005D204(a1, qword_10009FAA8);
}

uint64_t sub_10005D0F8(uint64_t a1)
{
  return sub_10005D204(a1, qword_10009FAC0);
}

uint64_t sub_10005D11C(uint64_t a1)
{
  return sub_10005D204(a1, qword_10009FAD8);
}

uint64_t sub_10005D140(uint64_t a1)
{
  return sub_10005D204(a1, qword_10009FAF0);
}

uint64_t sub_10005D164(uint64_t a1)
{
  return sub_10005D204(a1, qword_10009FB08);
}

uint64_t sub_10005D190(uint64_t a1)
{
  return sub_10005D204(a1, qword_10009FB20);
}

uint64_t sub_10005D1AC(uint64_t a1)
{
  return sub_10005D204(a1, qword_10009FB38);
}

uint64_t sub_10005D1CC(uint64_t a1)
{
  return sub_10005D204(a1, qword_10009FB50);
}

uint64_t sub_10005D1EC(uint64_t a1)
{
  return sub_10005D204(a1, qword_10009FB68);
}

uint64_t sub_10005D204(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10005DCD8();
  sub_100008EE8(v3, a2);
  sub_100008DB0(v3, (uint64_t)a2);
  return sub_10005DCC8();
}

uint64_t sub_10005D284@<X0>(uint64_t *a1@<X8>)
{
  sub_10005DDC8();
  swift_allocObject();
  sub_10005DDD8();
  sub_10005DD98();
  swift_allocObject();
  swift_retain();
  sub_10005DDA8();
  sub_100008F4C(&qword_10009AAD0);
  sub_10005DC08();
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10005F1B0;
  sub_10005D714(&qword_10009AAD8, (void (*)(uint64_t))&type metadata accessor for PRRenderingConfiguration);
  swift_retain();
  swift_retain();
  sub_10005DBF8();
  sub_10005D714(&qword_10009AAE0, (void (*)(uint64_t))&type metadata accessor for PREditingConfiguration);
  swift_retain();
  sub_10005DBF8();
  swift_release_n();
  uint64_t result = swift_release_n();
  *a1 = v2;
  return result;
}

id sub_10005D4AC()
{
  return sub_10005D4DC((uint64_t (*)(void))type metadata accessor for DrawingController);
}

id sub_10005D4C4()
{
  return sub_10005D4DC((uint64_t (*)(void))type metadata accessor for EditingController);
}

id sub_10005D4DC(uint64_t (*a1)(void))
{
  id v1 = objc_allocWithZone((Class)a1(0));

  return [v1 init];
}

uint64_t sub_10005D51C()
{
  return swift_release();
}

int main(int argc, const char **argv, const char **envp)
{
  return 0;
}

unint64_t sub_10005D678()
{
  unint64_t result = qword_10009AAB0;
  if (!qword_10009AAB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10009AAB0);
  }
  return result;
}

ValueMetadata *type metadata accessor for MercuryPoster()
{
  return &type metadata for MercuryPoster;
}

uint64_t sub_10005D6DC()
{
  return *(void *)(*(void *)(swift_getOpaqueTypeConformance2() + 8) + 8);
}

uint64_t sub_10005D714(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005D75C()
{
  return sub_10005D790(&qword_10009AAE8);
}

uint64_t sub_10005D790(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100014768(&qword_10009AAC0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005D7D8()
{
  return static FormatStyle<>.byteCount(style:allowedUnits:spellsOutZero:includesActualByteCount:)();
}

uint64_t sub_10005D7E8()
{
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

uint64_t sub_10005D7F8()
{
  return JSONDecoder.init()();
}

uint64_t sub_10005D808()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t sub_10005D818()
{
  return static JSONEncoder.OutputFormatting.sortedKeys.getter();
}

uint64_t sub_10005D828()
{
  return static JSONEncoder.OutputFormatting.prettyPrinted.getter();
}

uint64_t sub_10005D838()
{
  return type metadata accessor for JSONEncoder.OutputFormatting();
}

uint64_t sub_10005D848()
{
  return dispatch thunk of JSONEncoder.outputFormatting.setter();
}

uint64_t sub_10005D858()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t sub_10005D868()
{
  return JSONEncoder.init()();
}

uint64_t sub_10005D878()
{
  return type metadata accessor for JSONEncoder();
}

uint64_t sub_10005D888()
{
  return __DataStorage.init(bytes:length:copy:deallocator:offset:)();
}

uint64_t sub_10005D898()
{
  return __DataStorage.init(bytes:length:)();
}

uint64_t sub_10005D8A8()
{
  return __DataStorage._bytes.getter();
}

uint64_t sub_10005D8B8()
{
  return __DataStorage.init(length:)();
}

uint64_t sub_10005D8C8()
{
  return __DataStorage._length.getter();
}

uint64_t sub_10005D8D8()
{
  return __DataStorage._offset.getter();
}

uint64_t sub_10005D8E8()
{
  return type metadata accessor for __DataStorage();
}

uint64_t sub_10005D8F8()
{
  return LocalizedError.helpAnchor.getter();
}

uint64_t sub_10005D908()
{
  return LocalizedError.failureReason.getter();
}

uint64_t sub_10005D918()
{
  return LocalizedError.errorDescription.getter();
}

uint64_t sub_10005D928()
{
  return LocalizedError.recoverySuggestion.getter();
}

uint64_t sub_10005D938()
{
  return type metadata accessor for ByteCountFormatStyle.Style();
}

uint64_t sub_10005D948()
{
  return static ByteCountFormatStyle.Units.all.getter();
}

uint64_t sub_10005D958()
{
  return type metadata accessor for ByteCountFormatStyle.Units();
}

uint64_t sub_10005D968()
{
  return type metadata accessor for ByteCountFormatStyle();
}

uint64_t sub_10005D978()
{
  return _convertNSErrorToError(_:)();
}

uint64_t sub_10005D988()
{
  return type metadata accessor for URL.DirectoryHint();
}

uint64_t sub_10005D998()
{
  return URL.absoluteString.getter();
}

void sub_10005D9B8(NSURL *retstr@<X8>)
{
}

uint64_t sub_10005D9C8()
{
  return URL.appendingPathComponent(_:conformingTo:)();
}

uint64_t sub_10005D9D8()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10005D9E8(Swift::Bool percentEncoded)
{
  return URL.path(percentEncoded:)(percentEncoded)._countAndFlagsBits;
}

uint64_t sub_10005D9F8()
{
  return URL.path.getter();
}

uint64_t sub_10005DA08()
{
  return URL.init(filePath:directoryHint:relativeTo:)();
}

uint64_t sub_10005DA18()
{
  return URL.appending<A>(path:directoryHint:)();
}

uint64_t sub_10005DA28()
{
  return type metadata accessor for URL();
}

void sub_10005DA38()
{
}

uint64_t sub_10005DA48()
{
  return Data.init(contentsOf:options:)();
}

uint64_t sub_10005DA58()
{
  return type metadata accessor for Data.RangeReference();
}

NSData sub_10005DA68()
{
  return Data._bridgeToObjectiveC()();
}

uint64_t sub_10005DA78()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10005DA88()
{
  return Date.init(timeIntervalSinceReferenceDate:)();
}

uint64_t sub_10005DA98()
{
  return Date.timeIntervalSinceReferenceDate.getter();
}

uint64_t _s22MercuryPosterExtension9ToriSceneC9startTimeSdvpfi_0()
{
  return static Date.timeIntervalSinceReferenceDate.getter();
}

uint64_t sub_10005DAB8()
{
  return Date.timeIntervalSince(_:)();
}

uint64_t sub_10005DAC8()
{
  return Date.addingTimeInterval(_:)();
}

NSDate sub_10005DAD8()
{
  return Date._bridgeToObjectiveC()();
}

uint64_t sub_10005DAE8()
{
  return static Date.> infix(_:_:)();
}

uint64_t sub_10005DAF8()
{
  return static Date.< infix(_:_:)();
}

uint64_t sub_10005DB08()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10005DB18()
{
  return static Date.now.getter();
}

uint64_t sub_10005DB28()
{
  return Date.init()();
}

uint64_t sub_10005DB38()
{
  return type metadata accessor for Date();
}

uint64_t sub_10005DB48()
{
  return static Locale.current.getter();
}

uint64_t sub_10005DB58()
{
  return type metadata accessor for Locale();
}

uint64_t sub_10005DB68()
{
  return type metadata accessor for Calendar.MatchingPolicy();
}

uint64_t sub_10005DB78()
{
  return type metadata accessor for Calendar.SearchDirection();
}

uint64_t sub_10005DB88()
{
  return type metadata accessor for Calendar.RepeatedTimePolicy();
}

uint64_t sub_10005DB98()
{
  return Calendar.date(bySettingHour:minute:second:of:matchingPolicy:repeatedTimePolicy:direction:)();
}

uint64_t sub_10005DBA8()
{
  return static Calendar.current.getter();
}

uint64_t sub_10005DBB8()
{
  return type metadata accessor for Calendar();
}

uint64_t sub_10005DBC8(Swift::Int a1)
{
  return *(_OWORD *)&IndexSet.insert(_:)(a1);
}

BOOL sub_10005DBD8(Swift::Int a1)
{
  return IndexSet.contains(_:)(a1);
}

uint64_t sub_10005DBE8()
{
  return type metadata accessor for IndexSet();
}

uint64_t sub_10005DBF8()
{
  return _AnySceneConfiguration.init<A>(erasing:)();
}

uint64_t sub_10005DC08()
{
  return type metadata accessor for _AnySceneConfiguration();
}

uint64_t sub_10005DC18()
{
  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_10005DC28()
{
  return _CFObject.hash(into:)();
}

uint64_t sub_10005DC38()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_10005DC48()
{
  return static _AppExtension<>.main()();
}

uint64_t sub_10005DC58()
{
  return _AppExtension.hostAuditToken.getter();
}

uint64_t sub_10005DC68()
{
  return static _SceneBuilder.buildBlock<A>(_:)();
}

uint64_t sub_10005DC78()
{
  return UTType.init(filenameExtension:conformingTo:)();
}

uint64_t sub_10005DC88()
{
  return static UTType.png.getter();
}

uint64_t sub_10005DC98()
{
  return static UTType.data.getter();
}

uint64_t sub_10005DCA8()
{
  return type metadata accessor for UTType();
}

uint64_t sub_10005DCB8()
{
  return Logger.logObject.getter();
}

uint64_t sub_10005DCC8()
{
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10005DCD8()
{
  return type metadata accessor for Logger();
}

uint64_t sub_10005DCE8()
{
  return static FileDocument.writableContentTypes.getter();
}

uint64_t sub_10005DCF8()
{
  return FileDocumentReadConfiguration.file.getter();
}

uint64_t sub_10005DD08()
{
  return type metadata accessor for FileDocumentReadConfiguration();
}

uint64_t sub_10005DD18()
{
  return Spring.init(mass:stiffness:damping:allowOverDamping:)();
}

uint64_t sub_10005DD28()
{
  return Spring.value<A>(target:initialVelocity:time:)();
}

uint64_t sub_10005DD38()
{
  return Spring.init(duration:bounce:)();
}

uint64_t sub_10005DD48()
{
  return type metadata accessor for Spring();
}

uint64_t sub_10005DD58()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t sub_10005DD68()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t sub_10005DD78()
{
  return static DispatchQoS.userInitiated.getter();
}

uint64_t sub_10005DD88()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t sub_10005DD98()
{
  return type metadata accessor for PREditingConfiguration();
}

uint64_t sub_10005DDA8()
{
  return PREditingConfiguration.init(_:)();
}

uint64_t sub_10005DDB8()
{
  return PRProviderConfiguration.init(updatingDelegate:content:)();
}

uint64_t sub_10005DDC8()
{
  return type metadata accessor for PRRenderingConfiguration();
}

uint64_t sub_10005DDD8()
{
  return PRRenderingConfiguration.init(_:)();
}

NSDictionary sub_10005DDE8()
{
  return Dictionary._bridgeToObjectiveC()();
}

uint64_t sub_10005DDF8()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10005DE08()
{
  return Dictionary.description.getter();
}

uint64_t sub_10005DE18()
{
  return String.LocalizationValue.init(stringLiteral:)();
}

uint64_t sub_10005DE28()
{
  return type metadata accessor for String.LocalizationValue();
}

NSString sub_10005DE38()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_10005DE48()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t sub_10005DE58()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t sub_10005DE68()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10005DE78()
{
  return String.init(format:_:)();
}

uint64_t sub_10005DE88()
{
  return String.init(localized:table:bundle:locale:comment:)();
}

uint64_t sub_10005DE98()
{
  return String.init<A>(describing:)();
}

uint64_t sub_10005DEB8()
{
  return String.hash(into:)();
}

uint64_t sub_10005DEC8()
{
  return String.count.getter();
}

uint64_t sub_10005DED8()
{
  return String.index(_:offsetBy:limitedBy:)();
}

void sub_10005DEE8(Swift::String a1)
{
}

uint64_t sub_10005DEF8()
{
  return String.init(cString:)();
}

Swift::Int sub_10005DF08()
{
  return String.UTF8View._foreignCount()();
}

BOOL sub_10005DF18(Swift::String a1)
{
  return String.hasPrefix(_:)(a1);
}

uint64_t sub_10005DF28()
{
  return String.subscript.getter();
}

uint64_t sub_10005DF38()
{
  return String.init<A>(_:)();
}

uint64_t sub_10005DF48()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10005DF58()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10005DF68()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10005DF78()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10005DF88()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray sub_10005DF98()
{
  return Array._bridgeToObjectiveC()();
}

uint64_t sub_10005DFA8()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10005DFB8()
{
  return specialized Array._endMutation()();
}

uint64_t sub_10005DFC8()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_10005DFD8()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t sub_10005DFE8()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t sub_10005DFF8()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t sub_10005E008()
{
  return static MainActor.shared.getter();
}

uint64_t sub_10005E018()
{
  return type metadata accessor for MainActor();
}

uint64_t sub_10005E028()
{
  return TaskPriority.rawValue.getter();
}

uint64_t sub_10005E038()
{
  return type metadata accessor for TaskPriority();
}

uint64_t sub_10005E048()
{
  return Float.write<A>(to:)();
}

uint64_t sub_10005E058()
{
  return CGContextRef.draw(_:in:byTiling:)();
}

uint64_t sub_10005E068()
{
  return static os_log_type_t.debug.getter();
}

uint64_t sub_10005E078()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_10005E088()
{
  return static os_log_type_t.default.getter();
}

float sub_10005E098(Swift::Float minimum, Swift::Float maximum, Swift::Float_optional *preferred)
{
  LODWORD(result) = CAFrameRateRange.init(minimum:maximum:preferred:)(minimum, maximum, preferred);
  return result;
}

uint64_t sub_10005E0A8()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t sub_10005E0B8()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t sub_10005E0C8()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t sub_10005E0D8()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t sub_10005E0E8()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t sub_10005E0F8()
{
  return MTLRenderCommandEncoder.setFragmentTextures(_:range:)();
}

Swift::Int sub_10005E108(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t sub_10005E118()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t sub_10005E128()
{
  return type metadata accessor for Optional();
}

uint64_t sub_10005E138()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_10005E148()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t sub_10005E158()
{
  return StringProtocol.components<A>(separatedBy:)();
}

uint64_t sub_10005E168()
{
  return BinaryInteger.formatted<A>(_:)();
}

uint64_t sub_10005E178()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t sub_10005E188()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_10005E198()
{
  return _HashTable.previousHole(before:)();
}

Swift::Int sub_10005E1A8(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t sub_10005E1B8()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t sub_10005E1C8()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t sub_10005E1D8()
{
  return static _SetStorage.copy(original:)();
}

uint64_t sub_10005E1E8()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

void sub_10005E1F8(Swift::Int a1)
{
}

uint64_t sub_10005E208()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t sub_10005E218()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t sub_10005E228()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_10005E238()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t sub_10005E248()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t sub_10005E258()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t sub_10005E268()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t sub_10005E278()
{
  return ContiguousArray.withUnsafeBufferPointer<A>(_:)();
}

uint64_t sub_10005E288()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t sub_10005E298()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t sub_10005E2A8()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t sub_10005E2B8()
{
  return __CocoaDictionary.makeIterator()();
}

uint64_t sub_10005E2C8()
{
  return __CocoaDictionary.count.getter();
}

uint64_t sub_10005E2D8()
{
  return __CocoaDictionary.lookup(_:)();
}

uint64_t sub_10005E2E8()
{
  return __CocoaDictionary.Iterator.next()();
}

uint64_t sub_10005E2F8()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_10005E308()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_10005E318()
{
  return _bridgeCocoaArray<A>(_:)();
}

uint64_t sub_10005E328()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t sub_10005E338()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t sub_10005E348()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t sub_10005E358()
{
  return static _DictionaryStorage.convert(_:capacity:)();
}

uint64_t sub_10005E368()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t sub_10005E378()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int sub_10005E398(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases, string);
}

uint64_t sub_10005E3A8()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_10005E3B8()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_10005E3C8()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_10005E3D8()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_10005E3E8()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_10005E3F8()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_10005E408()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_10005E418()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_10005E428()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_10005E438()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t sub_10005E448()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_10005E458()
{
  return dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
}

uint64_t sub_10005E468()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_10005E478()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_10005E488()
{
  return Error.localizedDescription.getter();
}

uint64_t sub_10005E498()
{
  return Error._getEmbeddedNSError()();
}

uint64_t sub_10005E4A8()
{
  return Error._code.getter();
}

uint64_t sub_10005E4B8()
{
  return Error._domain.getter();
}

uint64_t sub_10005E4C8()
{
  return Error._userInfo.getter();
}

NSNumber sub_10005E4D8()
{
  return Int16._bridgeToObjectiveC()();
}

uint64_t sub_10005E4E8()
{
  return print(_:separator:terminator:)();
}

uint64_t sub_10005E4F8()
{
  return Hasher.init(_seed:)();
}

void sub_10005E508(Swift::UInt a1)
{
}

void sub_10005E518(Swift::UInt32 a1)
{
}

Swift::Int sub_10005E528()
{
  return Hasher._finalize()();
}

uint64_t sub_10005E538()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t sub_10005E548()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

CATransform3D *__cdecl CATransform3DMakeRotation(CATransform3D *__return_ptr retstr, CGFloat angle, CGFloat x, CGFloat y, CGFloat z)
{
  return _CATransform3DMakeRotation(retstr, angle, x, y, z);
}

CATransform3D *__cdecl CATransform3DMakeTranslation(CATransform3D *__return_ptr retstr, CGFloat tx, CGFloat ty, CGFloat tz)
{
  return _CATransform3DMakeTranslation(retstr, tx, ty, tz);
}

CATransform3D *__cdecl CATransform3DRotate(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat angle, CGFloat x, CGFloat y, CGFloat z)
{
  return _CATransform3DRotate(retstr, t, angle, x, y, z);
}

CATransform3D *__cdecl CATransform3DTranslate(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat tx, CGFloat ty, CGFloat tz)
{
  return _CATransform3DTranslate(retstr, t, tx, ty, tz);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return _CFAbsoluteTimeGetCurrent();
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return _CFURLCreateWithFileSystemPath(allocator, filePath, pathStyle, isDirectory);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return _CGBitmapContextCreate(data, width, height, bitsPerComponent, bytesPerRow, space, bitmapInfo);
}

void *__cdecl CGBitmapContextGetData(CGContextRef context)
{
  return _CGBitmapContextGetData(context);
}

CGColorRef CGColorCreateSRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return _CGColorCreateSRGB(red, green, blue, alpha);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return _CGColorSpaceCreateWithName(name);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return _CGDataProviderCreateWithCFData(data);
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return _CGImageCreate(width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, bitmapInfo, provider, decode, shouldInterpolate, intent);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return _CGImageGetBitsPerComponent(image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return _CGImageGetHeight(image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return _CGImageGetWidth(image);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return _CGImageSourceCreateImageAtIndex(isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return _CGImageSourceCreateWithURL(url, options);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return _CGRectEqualToRect(rect1, rect2);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  return _CGRectGetHeight(rect);
}

CGFloat CGRectGetWidth(CGRect rect)
{
  return _CGRectGetWidth(rect);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return _CGRectIsEmpty(rect);
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return _IOSurfaceCreate(properties);
}

uint64_t MGGetProductType()
{
  return _MGGetProductType();
}

MTLVertexDescriptor *__cdecl MTKMetalVertexDescriptorFromModelIO(MDLVertexDescriptor *modelIODescriptor)
{
  return _MTKMetalVertexDescriptorFromModelIO(modelIODescriptor);
}

id MTLCreateSystemDefaultDevice(void)
{
  return _MTLCreateSystemDefaultDevice();
}

uint64_t MobileGestalt_copy_deviceEnclosureColor()
{
  return _MobileGestalt_copy_deviceEnclosureColor();
}

uint64_t MobileGestalt_get_current_device()
{
  return _MobileGestalt_get_current_device();
}

uint64_t NSExtensionMain()
{
  return _NSExtensionMain();
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return _NSSearchPathForDirectoriesInDomains(directory, domainMask, expandTilde);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

simd_float3x3 __invert_f3(simd_float3x3 a1)
{
  return ___invert_f3(a1);
}

simd_float4x4 __invert_f4(simd_float4x4 a1)
{
  return ___invert_f4(a1);
}

__float2 __sincosf_stret(float a1)
{
  __float2 v3 = ___sincosf_stret(a1);
  float cosval = v3.__cosval;
  float sinval = v3.__sinval;
  result.__float cosval = cosval;
  result.__float sinval = sinval;
  return result;
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void bzero(void *a1, size_t a2)
{
}

float cosf(float a1)
{
  return _cosf(a1);
}

float fmodf(float a1, float a2)
{
  return _fmodf(a1, a2);
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

float powf(float a1, float a2)
{
  return _powf(a1, a2);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return _swift_dynamicCastObjCClassUnconditional();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorInMain()
{
  return _swift_errorInMain();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return _swift_getOpaqueTypeConformance2();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_projectBox()
{
  return _swift_projectBox();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unexpectedError()
{
  return _swift_unexpectedError();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakAssign()
{
  return _swift_weakAssign();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

float tanf(float a1)
{
  return _tanf(a1);
}