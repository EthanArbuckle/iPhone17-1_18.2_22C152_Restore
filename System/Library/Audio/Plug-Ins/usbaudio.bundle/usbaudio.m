int main(int argc, const char **argv, const char **envp)
{
  void *v3;

  qword_10012B150 = 0xD000000000000013;
  *(void *)algn_10012B158 = 0x80000001000E06F0;
  sub_1000032B4();
  v3 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  type metadata accessor for DriverPlugin();
  static DriverPlugin.registerActiveDriverInLoop()();
  dispatch_main();
}

unint64_t sub_1000032B4()
{
  unint64_t result = qword_1001268D0;
  if (!qword_1001268D0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001268D0);
  }
  return result;
}

uint64_t AUAGetBootArg(void *a1, uint64_t a2)
{
  id v3 = [a1 cStringUsingEncoding:4];

  return _os_parse_boot_arg_int(v3, a2);
}

void *AudioDeviceRealtimeGetZeroTimestampBlock(void *a1)
{
  id v1 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000034B8;
  v5[3] = &unk_100111E80;
  v5[4] = [v1 timestamps];
  v5[5] = [v1 seed];
  v2 = objc_retainBlock(v5);
  id v3 = objc_retainBlock(v2);

  return v3;
}

void sub_100003498(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000034A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000034B8(uint64_t a1, unint64_t *a2, unint64_t *a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  signed int v5 = atomic_load((unsigned int *)(v4 + 64));
  v6 = (unint64_t *)(v4 + 8 * v5);
  unint64_t v7 = atomic_load(v6 + 4);
  *a3 = v7;
  unint64_t v8 = atomic_load(v6);
  *a2 = v8;
  *a4 = *(void *)(a1 + 40);
  return 0;
}

void *AudioDeviceCreateGenericWillDoBlock(char a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100003584;
  v4[3] = &unk_100111EA0;
  char v5 = a1;
  id v1 = objc_retainBlock(v4);
  v2 = objc_retainBlock(v1);

  return v2;
}

uint64_t sub_100003584(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned char *a4)
{
  uint64_t result = 1970171760;
  if (a3)
  {
    if (a4)
    {
      uint64_t result = 0;
      *a3 = *(unsigned char *)(a1 + 32);
      *a4 = 1;
    }
  }
  return result;
}

NSObject *CreateFixedPriorityDispatchQueue(uint64_t a1)
{
  id v2 = +[NSString stringWithFormat:@"%s.workloop", a1];
  inactive = dispatch_workloop_create_inactive((const char *)[v2 UTF8String]);

  if (inactive)
  {
    dispatch_workloop_set_scheduler_priority();
    dispatch_activate(inactive);
    uint64_t v4 = dispatch_queue_attr_make_initially_inactive(0);
    char v5 = dispatch_queue_attr_make_with_qos_class(v4, QOS_CLASS_USER_INTERACTIVE, 0);

    id v6 = +[NSString stringWithFormat:@"%s.queue", a1];
    unint64_t v7 = dispatch_queue_create((const char *)[v6 UTF8String], v5);

    if (v7)
    {
      dispatch_set_target_queue(v7, inactive);
      dispatch_activate(v7);
      unint64_t v8 = v7;
    }
  }
  else
  {
    unint64_t v7 = 0;
  }

  return v7;
}

void sub_1000036DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000036F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100003708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000371C()
{
  dword_10012B1A0 = 0;
  qword_10012B1A8 = 0;
}

char *AUAPeriodicEventRTImpl::AUAPeriodicEventRTImpl(char *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v10 = a2;
  id v11 = a5;
  *(void *)a1 = off_100111ED0;
  *((_DWORD *)a1 + 2) = 0;
  *((void *)a1 + 2) = a3;
  *((void *)a1 + 3) = a4;
  *((void *)a1 + 4) = 0;
  *((void *)a1 + 20) = 0;
  *((void *)a1 + 21) = &stru_10011CCB8;
  *((void *)a1 + 22) = 0;
  id v12 = [v11 copy];
  v13 = (void *)*((void *)a1 + 4);
  *((void *)a1 + 4) = v12;

  objc_storeStrong((id *)a1 + 21, a2);
  if (pthread_mutex_init((pthread_mutex_t *)(a1 + 40), 0)) {
    __assert_rtn("AUAPeriodicEventRTImpl", "AUAPeriodicEventRT.mm", 102, "!error");
  }
  pthread_cond_init((pthread_cond_t *)(a1 + 112), 0);
  if (pthread_attr_init(&v19))
  {
    v17 = "!error";
    int v18 = 108;
    goto LABEL_10;
  }
  *((_DWORD *)a1 + 2) = 1;
  uint64_t v14 = os_workgroup_interval_create();
  v15 = (void *)*((void *)a1 + 22);
  *((void *)a1 + 22) = v14;

  if (!*((void *)a1 + 22))
  {
    v17 = "_workgroup";
    int v18 = 115;
    goto LABEL_10;
  }
  if (pthread_create((pthread_t *)a1 + 13, &v19, (void *(__cdecl *)(void *))AUAPeriodicEventRTImpl::eventThread, a1))
  {
    v17 = "!error";
    int v18 = 119;
LABEL_10:
    __assert_rtn("AUAPeriodicEventRTImpl", "AUAPeriodicEventRT.mm", v18, v17);
  }
  pthread_attr_destroy(&v19);

  return a1;
}

void sub_100003B28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AUAPeriodicEventRTImpl::eventThread(AUAPeriodicEventRTImpl *this, void *a2)
{
  mach_timebase_info(&info);
  LODWORD(policy_info) = this->var3;
  HIDWORD(policy_info) = 3000000 * (unint64_t)info.denom / info.numer;
  unsigned int v21 = 4000000 * (unint64_t)info.denom / info.numer;
  int v22 = 0;
  thread_act_t v3 = mach_thread_self();
  if (thread_policy_set(v3, 2u, (thread_policy_t)&policy_info, 4u)) {
    sub_100004158();
  }
  if (os_workgroup_join((os_workgroup_t)this->var10, &this->var11)) {
    sub_10000412C();
  }
  pthread_setname_np((const char *)[this->var9 UTF8String]);
  while (1)
  {
    uint64_t result = pthread_mutex_lock(&this->var5);
    int var1 = this->var1;
    if (var1 != 1) {
      break;
    }
    this->unint64_t var8 = 0;
    var6 = this->var6;
    if (var6 == pthread_self()) {
      pthread_cond_wait(&this->var7, &this->var5);
    }
LABEL_6:
    pthread_mutex_unlock(&this->var5);
  }
  if (var1 == 2)
  {
    uint64_t v7 = mach_absolute_time();
    uint64_t v8 = v7;
    unint64_t var8 = this->var8;
    if (!var8)
    {
      uint64_t v18 = this->var2 + v7;
      goto LABEL_29;
    }
    if (this->var4)
    {
      uint64_t v10 = v7 + v21;
      uint64_t v11 = os_workgroup_interval_start((os_workgroup_interval_t)this->var10, v7 - 1, v10, 0);
      if (v11) {
        NSLog(@"Failed to start work interval: %d, start %llu deadline %llu\n", v11, v8, v10, policy_info);
      }
      this->unint64_t var8 = (*((uint64_t (**)(void))this->var4 + 2))();
      if (os_workgroup_interval_finish((os_workgroup_interval_t)this->var10, 0)) {
        sub_100004100();
      }
      uint64_t v12 = this->var8;
      if (v12 < mach_absolute_time())
      {
        do
        {
          unint64_t var8 = this->var2;
          unint64_t var2 = this->var8;
LABEL_28:
          uint64_t v18 = var2 + var8;
LABEL_29:
          this->unint64_t var8 = v18;
        }
        while (v18 < mach_absolute_time());
      }
      unint64_t v13 = this->var8;
      uint64_t v14 = mach_absolute_time();
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10012B2E8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_10012B2E8))
      {
        mach_timebase_info((mach_timebase_info_t)&v24);
        qword_10012B2E0 = v24.tv_sec;
        __cxa_guard_release(&qword_10012B2E8);
      }
      unint64_t v15 = v13 - v14;
      if (qword_10012B2E0 != HIDWORD(qword_10012B2E0)) {
        unint64_t v15 = v15 * qword_10012B2E0 / HIDWORD(qword_10012B2E0);
      }
      v16 = this->var6;
      if (v16 == pthread_self())
      {
        if (v15 >= 0x3B9ACA00)
        {
          __darwin_time_t v17 = v15 / 0x3B9ACA00;
          v15 %= 0x3B9ACA00uLL;
        }
        else
        {
          __darwin_time_t v17 = 0;
        }
        v24.tv_sec = v17;
        v24.tv_nsec = v15;
        pthread_cond_timedwait_relative_np(&this->var7, &this->var5, &v24);
      }
      goto LABEL_6;
    }
    unint64_t var2 = this->var2;
    goto LABEL_28;
  }
  if (var1)
  {
    __break(1u);
  }
  else
  {
    pthread_mutex_unlock(&this->var5);
    os_workgroup_leave((os_workgroup_t)this->var10, &this->var11);
    return 0;
  }
  return result;
}

void sub_100003E00(_Unwind_Exception *a1)
{
}

void AUAPeriodicEventRTImpl::~AUAPeriodicEventRTImpl(AUAPeriodicEventRTImpl *this)
{
  this->var0 = (void **)off_100111ED0;
  p_var5 = &this->var5;
  pthread_mutex_lock(&this->var5);
  this->int var1 = 0;
  pthread_cond_signal(&this->var7);
  pthread_mutex_unlock(p_var5);
  pthread_join(this->var6, 0);
  pthread_cond_destroy(&this->var7);
  pthread_mutex_destroy(p_var5);
}

{
  uint64_t vars8;

  AUAPeriodicEventRTImpl::~AUAPeriodicEventRTImpl(this);

  operator delete();
}

void sub_100003EBC(void *a1)
{
}

void sub_100003FC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100003FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000040D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)AUAPeriodicEventRT;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_100004100()
{
  __assert_rtn("eventThread", "AUAPeriodicEventRT.mm", 201, "rv == 0");
}

void sub_10000412C()
{
  __assert_rtn("eventThread", "AUAPeriodicEventRT.mm", 156, "rv == 0");
}

void sub_100004158()
{
}

void sub_100004290(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10012B320);

  _Unwind_Resume(a1);
}

void sub_1000042B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100004310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)USBFrameTimeCorrelater;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_100004544(_Unwind_Exception *a1)
{
}

void sub_10000455C(_Unwind_Exception *a1)
{
}

void sub_100004574(_Unwind_Exception *a1)
{
}

void sub_10000458C(_Unwind_Exception *a1)
{
}

void sub_1000045A4(_Unwind_Exception *a1)
{
}

void sub_100004858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v30 - 168), 8);
  _Block_object_dispose((const void *)(v30 - 136), 8);
  _Unwind_Resume(a1);
}

__n128 sub_1000048B0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

uint64_t sub_1000048C8(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 72));
  uint64_t v4 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v5 = a1 + 40;
    uint64_t v6 = v2 - *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
    {
      if (v6 > *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
      {
        uint64_t v7 = 644;
LABEL_21:
        ++*(_DWORD *)&v4[v7];
        *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = qword_10012B2F8
                                                                    + *(void *)(*(void *)(*(void *)(a1 + 40) + 8)
                                                                                + 24)
                                                                    - qword_10012B308;
        goto LABEL_22;
      }
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v8 = 2;
    }
    v9 = (char *)[WeakRetained updateTimesWithRetries:v8];
    if (!v9)
    {
      uint64_t v7 = 640;
      goto LABEL_21;
    }
    uint64_t v10 = mach_absolute_time();
    uint64_t v11 = *(uint64x2_t **)(*(void *)(a1 + 64) + 8);
    uint64_t v12 = 10 * qword_10012B308;
    if (10 * qword_10012B308 >= qword_10012B308 + v6) {
      uint64_t v12 = qword_10012B308 + v6;
    }
    uint64_t v13 = v11[5].i64[0];
    v11[3].i64[v13] = v12;
    if ((unint64_t)(v13 + 1) <= 3) {
      uint64_t v14 = v13 + 1;
    }
    else {
      uint64_t v14 = 0;
    }
    v11[5].i64[0] = v14;
    int8x16_t v15 = vbslq_s8((int8x16_t)vcgtq_u64(v11[3], v11[4]), (int8x16_t)v11[3], (int8x16_t)v11[4]);
    unint64_t v16 = vextq_s8(v15, v15, 8uLL).u64[0];
    *(int8x8_t *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = vbsl_s8((int8x8_t)vcgtd_u64(v15.u64[0], v16), *(int8x8_t *)v15.i8, (int8x8_t)v16);
    *((void *)v4 + 76) = *((void *)v4 + 75);
    *((void *)v4 + 75) = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    v15.i64[0] = v6;
    v15.i64[1] = v10 - v2;
    *(int8x16_t *)(v4 + 616) = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v15, *(uint64x2_t *)(v4 + 616)), v15, *(int8x16_t *)(v4 + 616));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                           + 24) > 4uLL;
    int v17 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    uint64_t v19 = qword_10012B2F8;
    uint64_t v18 = qword_10012B300;
    sub_100005138((uint64_t)(v4 + 256), &v25);
    if (v17) {
      unint64_t v20 = v18;
    }
    else {
      unint64_t v20 = v19;
    }
    unint64_t v21 = (unint64_t)(v26 / *(double *)&qword_10012B2F0 * (double)v20)
        - *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
    uint64_t v22 = qword_10012B310;
    if (qword_10012B310 >= v21) {
      uint64_t v22 = v21;
    }
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = &v9[v22];
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = qword_10012B2F8 + mach_absolute_time();
    uint64_t v5 = a1 + 40;
  }
LABEL_22:
  uint64_t v23 = *(void *)(*(void *)(*(void *)v5 + 8) + 24);

  return v23;
}

void sub_100004B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100004B60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100004B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100004B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100004C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100004E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100004E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100004E98(uint64_t a1, double *a2)
{
  uint64_t v4 = (unsigned __int8 *)(a1 + 192);
  sub_100005138(a1 + 192, &v30);
  if (v30.n128_u64[1] == *((void *)a2 + 1)) {
    return;
  }
  if (v30.n128_u64[1]) {
    BOOL v5 = v30.n128_u64[0] == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    double v6 = *a2;
    sub_100005138((uint64_t)v4, &v31);
    int64_t v7 = v31.n128_u64[1] + (uint64_t)(v32 * (double)(uint64_t)(*(void *)&v6 - v31.n128_u64[0]));
    double v9 = *a2;
    int64_t v8 = *((void *)a2 + 1);
    BOOL v10 = v8 < v7;
    uint64_t v11 = v8 - v7;
    if (v10) {
      ++v11;
    }
    int64_t v12 = v7 + (v11 >> 1);
    *((void *)a2 + 1) = v12;
    double v13 = (double)(v12 - v30.n128_u64[1]) / (double)(*(void *)&v9 - v30.n128_u64[0]);
    *(double *)(a1 + 128) = *(double *)(a1 + 128) + v13;
    uint64_t v14 = *(void *)(a1 + 144);
    double v15 = *(double *)(a1 + 8 * v14);
    *(double *)(a1 + 8 * v14) = v13;
    unint64_t v16 = v14 + 1;
    unint64_t v17 = *(void *)(a1 + 136);
    *(void *)(a1 + 136) = v17 + 1;
    *(void *)(a1 + 144) = v16;
    if (v17 > 0xF)
    {
      *(double *)(a1 + 128) = *(double *)(a1 + 128) - v15;
      double v18 = 16.0;
      if (v16 < 0x10)
      {
LABEL_13:
        a2[2] = *(double *)(a1 + 128) / v18;
        goto LABEL_14;
      }
    }
    else
    {
      double v18 = (double)v16;
      if (v16 < 0x10) {
        goto LABEL_13;
      }
    }
    *(void *)(a1 + 144) = 0;
    goto LABEL_13;
  }
LABEL_14:
  unsigned int add = atomic_fetch_add((atomic_uint *volatile)(a1 + 196), 1u);
  unint64_t v20 = a1 + 256 + ((unint64_t)(add & 3) << 6);
  atomic_store(2 * add, (unsigned int *)v20);
  long long v22 = *(_OWORD *)a2;
  *(double *)(v20 + 24) = a2[2];
  *(_OWORD *)(v20 + 8) = v22;
  __dmb(0xBu);
  unsigned int v23 = (2 * add) | 1;
  add *= 2;
  unsigned int v21 = add;
  atomic_compare_exchange_strong((atomic_uint *volatile)v20, &add, v23);
  if (add != v21)
  {
    int v24 = 0;
    do
    {
      if (++v24 == 100)
      {
        sched_yield();
        int v24 = 0;
      }
      unsigned int v25 = atomic_fetch_add((atomic_uint *volatile)(a1 + 196), 1u);
      unint64_t v26 = a1 + 256 + ((unint64_t)(v25 & 3) << 6);
      atomic_store(2 * v25, (unsigned int *)v26);
      long long v28 = *(_OWORD *)a2;
      *(double *)(v26 + 24) = a2[2];
      *(_OWORD *)(v26 + 8) = v28;
      __dmb(0xBu);
      unsigned int v29 = (2 * v25) | 1;
      v25 *= 2;
      unsigned int v27 = v25;
      atomic_compare_exchange_strong((atomic_uint *volatile)v26, &v25, v29);
    }
    while (v25 != v27);
  }
  atomic_store(1u, v4);
}

__n128 sub_100005138@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)a1);
  if (v3)
  {
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)a1);
    if ((v6 & 1) == 0) {
LABEL_14:
    }
      sub_100005230();
    int v7 = 0;
    uint64_t v8 = a1 + 64;
    while (1)
    {
      char explicit = atomic_load_explicit((atomic_uint *volatile)(a1 + 4), memory_order_acquire);
      uint64_t v11 = (explicit - 1) & 3;
      int64_t v12 = (atomic_uint *)(v8 + (v11 << 6));
      unsigned int v13 = atomic_load_explicit(v12, memory_order_acquire);
      if (v13) {
        goto LABEL_11;
      }
      uint64_t v11 = (explicit + 2) & 3;
      int64_t v12 = (atomic_uint *)(v8 + (v11 << 6));
      unsigned int v13 = atomic_load_explicit(v12, memory_order_acquire);
      if ((v13 & 1) != 0
        || (uint64_t v11 = (explicit + 1) & 3,
            int64_t v12 = (atomic_uint *)(v8 + (v11 << 6)),
            unsigned int v13 = atomic_load_explicit(v12, memory_order_acquire),
            (v13 & 1) != 0)
        || (uint64_t v11 = explicit & 3,
            int64_t v12 = (atomic_uint *)(v8 + (v11 << 6)),
            unsigned int v13 = atomic_load_explicit(v12, memory_order_acquire),
            (v13 & 1) != 0))
      {
LABEL_11:
        uint64_t v14 = v8 + (v11 << 6);
        __n128 result = *(__n128 *)(v14 + 8);
        *a2 = result;
        a2[1].n128_u64[0] = *(void *)(v14 + 24);
        __dmb(9u);
        if (v13 == *v12) {
          return result;
        }
        if (++v7 == 100)
        {
          sched_yield();
          int v7 = 0;
        }
      }
      unsigned __int8 v9 = atomic_load((unsigned __int8 *)a1);
      if ((v9 & 1) == 0) {
        goto LABEL_14;
      }
    }
  }
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  result.n128_u64[0] = qword_10012B2F0;
  a2[1].n128_u64[0] = qword_10012B2F0;
  return result;
}

void sub_100005230()
{
}

void sub_10000524C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10012B320, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10012B320))
  {
    mach_timebase_info(&info);
    qword_10012B318 = (uint64_t)info;
    __cxa_guard_release(&qword_10012B320);
  }
  if (qword_10012B318 == HIDWORD(qword_10012B318)) {
    double v1 = 1000000.0;
  }
  else {
    double v1 = (double)(1000000 * (unint64_t)HIDWORD(qword_10012B318) / qword_10012B318);
  }
  qword_10012B2F0 = *(void *)&v1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10012B320, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10012B320))
  {
    mach_timebase_info(&info);
    qword_10012B318 = (uint64_t)info;
    __cxa_guard_release(&qword_10012B320);
  }
  unint64_t v2 = 200000000;
  if (qword_10012B318 != HIDWORD(qword_10012B318)) {
    unint64_t v2 = 200000000 * (unint64_t)HIDWORD(qword_10012B318) / qword_10012B318;
  }
  qword_10012B2F8 = v2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10012B320, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10012B320))
  {
    mach_timebase_info(&info);
    qword_10012B318 = (uint64_t)info;
    __cxa_guard_release(&qword_10012B320);
  }
  unint64_t v3 = 2000000000;
  if (qword_10012B318 != HIDWORD(qword_10012B318)) {
    unint64_t v3 = 2000000000 * (unint64_t)HIDWORD(qword_10012B318) / qword_10012B318;
  }
  qword_10012B300 = v3;
  qword_10012B310 = qword_10012B2F8 + v3;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10012B320, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10012B320))
  {
    mach_timebase_info(&info);
    qword_10012B318 = (uint64_t)info;
    __cxa_guard_release(&qword_10012B320);
  }
  if (qword_10012B318 == HIDWORD(qword_10012B318)) {
    unint64_t v4 = 50000;
  }
  else {
    unint64_t v4 = 50000 * (unint64_t)HIDWORD(qword_10012B318) / qword_10012B318;
  }
  qword_10012B308 = v4;
}

void sub_100005428(_Unwind_Exception *a1)
{
}

void sub_100005440(_Unwind_Exception *a1)
{
}

void sub_100005458(_Unwind_Exception *a1)
{
}

void sub_100005470(_Unwind_Exception *a1)
{
}

uint64_t AUARecordBlockCompletion(uint64_t a1, unsigned int a2, unint64_t a3, unsigned int a4, unsigned int a5)
{
  unsigned int v5 = *(_DWORD *)(a1 + 24);
  if (v5 < a4)
  {
    uint64_t v6 = 0;
LABEL_3:
    *(void *)(a1 + 40) = a3;
    return v6;
  }
  if (a4)
  {
    uint64_t v8 = 0;
    LODWORD(v6) = 0;
    unint64_t v9 = a3 % a2;
    BOOL v10 = *(_DWORD **)(a1 + 16);
    LODWORD(v11) = v5 / a4;
    if (v11 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v11;
    }
    unint64_t v12 = a3 % a2;
    do
    {
      int v13 = 0;
      uint64_t v14 = &v10[7 * a4];
      unsigned int v15 = a4;
      while (!*v10 || *v10 == -536870169)
      {
        unsigned int v17 = v10[3] / a5;
        if (!*(void *)(a1 + 56))
        {
          v9 += v17;
          if (v9 >= a2)
          {
            *(void *)(a1 + 56) = *(void *)(a1 + 32) + v8;
            *(_DWORD *)(a1 + 64) = a2 - v12;
          }
        }
        v13 += v17;
        v10 += 7;
        if (!--v15)
        {
          BOOL v10 = v14;
          break;
        }
      }
      uint64_t v6 = (v13 + v6);
      LODWORD(v12) = v12 + v13;
      ++v8;
    }
    while (v8 != v11);
    goto LABEL_3;
  }
  *(void *)(a1 + 40) = a3;
  return 0;
}

void *AUARealtimeReadInputBlock(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x5810000000;
  v12[3] = &unk_1000F0F21;
  v12[4] = a1;
  int v13 = a2;
  int v14 = a3;
  int v15 = a4;
  int v16 = a5;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100005650;
  v9[3] = &unk_100111F20;
  v9[4] = v12;
  v9[5] = a7;
  int v10 = a2;
  int v11 = a4;
  int v7 = objc_retainBlock(v9);
  _Block_object_dispose(v12, 8);

  return v7;
}

uint64_t sub_100005650(uint64_t a1, int a2, uint64_t a3, char *a4)
{
  uint64_t v4 = 2003329396;
  if (!a2) {
    return v4;
  }
  if (!a3) {
    return v4;
  }
  unsigned int v5 = a4;
  if (!a4) {
    return v4;
  }
  double v6 = *(double *)(a3 + 80);
  unint64_t v7 = (unint64_t)v6;
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v9 = *(void *)(v8 + 56);
  uint64_t v10 = *(unsigned int *)(v8 + 44);
  if (*(void *)(v8 + 80) != *(void *)(v9 + 88 * *(unsigned int *)(v8 + 72) + 40))
  {
    if (v10)
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      unsigned int v13 = 0;
      int v14 = (unint64_t *)(v9 + 40);
      do
      {
        unint64_t v16 = *v14;
        v14 += 11;
        unint64_t v15 = v16;
        if (v16 != -1 && v16 > v12)
        {
          unsigned int v13 = v11;
          unint64_t v12 = v15;
        }
        ++v11;
      }
      while (v10 != v11);
    }
    else
    {
      unsigned int v13 = 0;
      unint64_t v12 = 0;
    }
    *(unsigned char *)(v9 + 88 * v13 + 80) = 1;
    *(void *)(v8 + 80) = v12;
    *(_DWORD *)(v8 + 72) = v13;
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v9 = *(void *)(v8 + 56);
    LODWORD(v10) = *(_DWORD *)(v8 + 44);
  }
  unsigned int v17 = *(_DWORD *)(v8 + 40);
  v80 = *(char **)(v8 + 64);
  unint64_t v18 = *(unsigned int *)(v8 + 48);
  uint64_t v19 = *(unsigned int *)(v8 + 72);
  uint64_t v20 = v9 + 88 * v19;
  unint64_t v21 = *(unsigned int *)(v20 + 72);
  v79 = (_DWORD *)(v20 + 72);
  unint64_t v22 = *(unsigned int *)(v20 + 24);
  v78 = (unsigned int *)(v20 + 24);
  if (v21 >= v22) {
    goto LABEL_50;
  }
  unint64_t v71 = (unint64_t)v6;
  uint64_t v72 = a1;
  int v73 = a2;
  int v70 = a2;
  uint64_t v23 = v9 + 88 * v19;
  uint64_t v24 = *(unsigned int *)(v23 + 68);
  uint64_t v25 = *(void *)(v23 + 40);
  uint64_t v26 = -1;
  uint64_t v76 = v9;
  unsigned int v66 = v10;
  uint64_t v67 = v8;
  while (2)
  {
    unsigned int v27 = 0;
    uint64_t v75 = v19;
    uint64_t v28 = v9 + 88 * v19;
    unsigned int v29 = (_DWORD *)(v28 + 68);
    uint64_t v77 = *(void *)(v28 + 8);
    unint64_t v30 = v24 + v25;
    __n128 v31 = (uint64_t *)(v28 + 16);
    v68 = (unsigned char *)(v28 + 81);
    v69 = (void *)(v28 + 40);
    while (1)
    {
      uint64_t v32 = *v31;
      v33 = (int *)(*v31 + 28 * v21);
      int v34 = *v33;
      if (*v33) {
        BOOL v35 = v34 == -536870169;
      }
      else {
        BOOL v35 = 1;
      }
      if (!v35 || (unsigned int v36 = v33[3], (signed int)v36 > *(_DWORD *)(v32 + 28 * v21 + 4)))
      {
        int v37 = 2 * (v34 == -536870911);
LABEL_41:
        uint64_t v4 = 2003329396;
        unsigned int v5 = a4;
        uint64_t v19 = v75;
        a2 = v73;
        unint64_t v7 = v71;
        a1 = v72;
        uint64_t v9 = v76;
        goto LABEL_42;
      }
      if (v36 >= v17) {
        break;
      }
      ++v27;
      int v37 = 2;
      if (v21 >= v22) {
        goto LABEL_41;
      }
LABEL_36:
      if (v27 >= 2) {
        goto LABEL_41;
      }
    }
    uint64_t v38 = v77 + *(unsigned int *)(v32 + 28 * v21 + 8);
    int v39 = v30 % v18;
    unsigned int v40 = v36 / v17;
    int v41 = v18 - v39;
    if (v36 / v17 + v39 <= v18) {
      int v41 = v36 / v17;
    }
    if (v40 + v39 >= v18) {
      int v42 = v36 / v17 + v39 - v18;
    }
    else {
      int v42 = 0;
    }
    unsigned int v43 = v41 * v17;
    if (v41 * v17) {
      memcpy(&v80[v17 * v39], (const void *)(v77 + *(unsigned int *)(v32 + 28 * v21 + 8)), v41 * v17);
    }
    size_t v44 = v42 * v17;
    if (v44) {
      memcpy(v80, (const void *)(v38 + v43), v44);
    }
    uint64_t v26 = v30 + v40;
    unsigned int v45 = *v29 + v40;
    _DWORD *v29 = v45;
    _DWORD *v79 = ++v21;
    unint64_t v22 = *v78;
    if (v21 != v22)
    {
      unsigned int v27 = 0;
      v30 += v40;
      int v37 = 2;
      if (v21 >= v22) {
        goto LABEL_41;
      }
      goto LABEL_36;
    }
    uint64_t v24 = 0;
    unsigned char *v68 = 1;
    *(void *)(v67 + 80) = *v69 + v45;
    *(_DWORD *)(v67 + 72) = (*(_DWORD *)(v67 + 72) + 1) % v66;
    uint64_t v19 = *(unsigned int *)(v67 + 72);
    uint64_t v9 = v76;
    v46 = (_DWORD *)(v76 + 88 * v19);
    unsigned int v47 = v46[18];
    v46 += 18;
    unint64_t v21 = v47;
    *(v46 - 1) = 0;
    uint64_t v25 = *(void *)(v67 + 80);
    *((void *)v46 - 4) = v25;
    v79 = v46;
    v48 = v46 - 12;
    unint64_t v22 = *(v46 - 12);
    v78 = v48;
    if (v47 < v22) {
      continue;
    }
    break;
  }
  int v37 = 2;
  uint64_t v4 = 2003329396;
  unsigned int v5 = a4;
  a2 = v73;
  unint64_t v7 = v71;
  a1 = v72;
LABEL_42:
  if (v26 != -1)
  {
    int v49 = v26 - (v7 + v70);
    uint64_t v50 = v9 + 88 * v19;
    int v53 = *(_DWORD *)(v50 + 76);
    v51 = (_DWORD *)(v50 + 76);
    int v52 = v53;
    if (v53 > v49 || v52 == 0x7FFFFFFF) {
      _DWORD *v51 = v49;
    }
  }
  if (v37) {
LABEL_50:
  }
    uint64_t v4 = 0;
  v55 = *(char **)(a1 + 40);
  int v56 = *(_DWORD *)(a1 + 48);
  unint64_t v57 = *(unsigned int *)(a1 + 52);
  int v58 = v7 % v57;
  int v59 = v57 - v58;
  BOOL v60 = v58 + a2 >= v57;
  int v61 = v58 + a2 - v57;
  if (v61 != 0 && v60) {
    int v62 = v59;
  }
  else {
    int v62 = a2;
  }
  if (!v60) {
    int v61 = 0;
  }
  size_t v63 = (v62 * v56);
  size_t v64 = (v61 * v56);
  if (v63) {
    memcpy(v5, &v55[v56 * v58], v63);
  }
  if (v64) {
    memcpy(&v5[v63], v55, v64);
  }
  return v4;
}

void *AUARealtimeWriteMixBlock(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x5010000000;
  v8[3] = &unk_1000F0F21;
  v8[4] = a1;
  int v9 = a2;
  int v10 = 0;
  int v11 = a3;
  int v12 = a4;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = a5;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100005B18;
  v7[3] = &unk_100111F48;
  v7[4] = v8;
  unsigned int v5 = objc_retainBlock(v7);
  _Block_object_dispose(v8, 8);

  return v5;
}

uint64_t sub_100005B18(uint64_t a1, int a2, uint64_t a3, char *__src)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  int v6 = *(_DWORD *)(v5 + 40);
  unint64_t v7 = *(char **)(v5 + 72);
  unint64_t v8 = *(unsigned int *)(v5 + 48);
  unsigned int v9 = *(_DWORD *)(v5 + 52);
  int v10 = &v7[(v8 * v6)];
  int v11 = (unint64_t)*(double *)(a3 + 144) % v8;
  BOOL v12 = v11 + a2 >= v8;
  int v13 = v11 + a2 - v8;
  if (v11 + a2 <= v8) {
    int v14 = a2;
  }
  else {
    int v14 = v8 - v11;
  }
  if (!v12) {
    int v13 = 0;
  }
  unsigned int v15 = v14 * v6;
  size_t v16 = (v13 * v6);
  if (v14 * v6)
  {
    uint64_t v17 = (v6 * v11);
    memcpy(&v7[v17], __src, (v14 * v6));
    if (v17 < v9)
    {
      if (v9 - v17 >= v15) {
        size_t v18 = v15;
      }
      else {
        size_t v18 = v9 - v17;
      }
      memcpy(&v10[v17], __src, v18);
    }
  }
  if (v16)
  {
    uint64_t v19 = &__src[v15];
    memcpy(v7, v19, v16);
    if (v16 >= v9) {
      size_t v20 = v9;
    }
    else {
      size_t v20 = v16;
    }
    memcpy(v10, v19, v20);
  }
  return 0;
}

id sub_100005CC8(uint64_t a1, uint64_t a2)
{
  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)AUAPluginTrampoline;
  return objc_msgSendSuper2(&v3, "halInitializeWithPluginHost:", a2);
}

BOOL machServiceExists(char *service_name)
{
  mach_port_t sp = 0;
  return bootstrap_look_up(bootstrap_port, service_name, &sp) == 0;
}

id sub_100005D78(void *a1, uint64_t a2)
{
  id v12 = 0;
  id v2 = [a1 ioDataWithCapacity:a2 error:&v12];
  if (v2)
  {
    id v3 = v12;
  }
  else
  {
    id v4 = v12;
    uint64_t v5 = _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v15 = v5;
    swift_errorRetain();
    sub_10000AC7C(&qword_100127400);
    sub_10000CECC(0, (unint64_t *)&qword_100127408);
    if (swift_dynamicCast())
    {
      swift_errorRelease();
      int v6 = v14;
      sub_10000AC7C(&qword_100127410);
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_1000E8090;
      id v12 = 0;
      unint64_t v13 = 0xE000000000000000;
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      id v12 = (id)0xD00000000000001BLL;
      unint64_t v13 = 0x80000001000E0C60;
      [v6 code];
      v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      id v9 = v12;
      unint64_t v10 = v13;
      *(void *)(v7 + 56) = &type metadata for String;
      *(void *)(v7 + 32) = v9;
      *(void *)(v7 + 40) = v10;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
      swift_willThrow();
    }
    swift_errorRelease();
  }
  return v2;
}

unint64_t sub_100005F78(unint64_t result, unint64_t a2)
{
  if (a2 > 8)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v2 = 96;
    *(void *)(v2 + 8) = 0;
    *(void *)(v2 + 16) = 0xE000000000000000;
    *(void *)(v2 + 24) = 0xD00000000000003FLL;
    *(void *)(v2 + 32) = 0x80000001000E0DE0;
    *(void *)(v2 + 40) = 0xD00000000000001FLL;
    *(void *)(v2 + 48) = 0x80000001000E0CD0;
    *(void *)(v2 + 56) = 30;
    return swift_willThrow();
  }
  if (result >> 61)
  {
    __break(1u);
  }
  else if (a2)
  {
    return 8 * result / a2;
  }
  __break(1u);
  return result;
}

uint64_t sub_100006038()
{
  return swift_deallocClassInstance();
}

void sub_100006078()
{
}

void sub_1000060C4()
{
}

void sub_100006110()
{
}

void sub_10000615C()
{
}

void sub_1000061A8()
{
}

uint64_t sub_1000061F4()
{
  return swift_deallocClassInstance();
}

uint64_t sub_100006204(void *a1, char *a2, void *a3)
{
  uint64_t v5 = v3;
  *(void *)(v3 + 152) = 0;
  swift_retain();
  sub_10002E804(0xD00000000000001CLL, 0x80000001000E0CF0, 0xD000000000000021, (void *)0x80000001000E0D10, 0xD00000000000001FLL, 0x80000001000E0CD0, 204);
  *(void *)(v3 + 176) = a1;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    goto LABEL_24;
  }
  unint64_t v10 = (void *)Strong;
  *(void *)(v5 + 168) = Strong;
  uint64_t v11 = *(void *)&a2[OBJC_IVAR___AUAStreamFormat_altSetting];
  if (!v11)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v23 = 74;
    *(void *)(v23 + 8) = 0;
    *(void *)(v23 + 16) = 0xE000000000000000;
    *(void *)(v23 + 24) = 0xD000000000000021;
    *(void *)(v23 + 32) = 0x80000001000E0D10;
    *(void *)(v23 + 40) = 0xD00000000000001FLL;
    *(void *)(v23 + 48) = 0x80000001000E0CD0;
    *(void *)(v23 + 56) = 209;
    id v24 = a1;
    swift_willThrow();

    goto LABEL_17;
  }
  id v12 = a1;
  swift_retain();
  unint64_t v13 = [v10 timestampPeriod];
  int v14 = *(void **)(v11 + 104);
  *(void *)(v5 + 88) = v14[14];
  *(void *)(v5 + 112) = v14[13];
  *(void *)(v5 + 104) = v14[12];
  *(void *)(v5 + 64) = v13;
  unsigned int v15 = [a2 channelsPerFrame];
  unint64_t v16 = *(void *)(v11 + 40);
  if ((v16 & 0x8000000000000000) == 0)
  {
    if (is_mul_ok(v15, v16))
    {
      *(void *)(v5 + 96) = v15 * v16;
      *(void *)(v5 + 72) = 0;
      *(void *)(v5 + 80) = 0;
      *(void *)(v5 + 128) = 0;
      *(void *)(v5 + 136) = 0;
      *(void *)(v5 + 120) = 0;
      *(unsigned char *)(v5 + 144) = (*(uint64_t (**)(void))((swift_isaMask & *v12) + 0x210))() & 1;
      if (qword_100126938 == -1)
      {
LABEL_6:
        unsigned int v36 = v12;
        int v37 = a2;
        uint64_t v17 = *(void **)(qword_10012B2A8 + 16);
        if (v17)
        {
          id v18 = v17;
          NSString v19 = String._bridgeToObjectiveC()();
          size_t v20 = a3;
          unsigned int v21 = [v18 BOOLForKey:v19];

          BOOL v22 = v21 == 0;
          a3 = v20;
          if (v22) {
            LODWORD(v17) = 0;
          }
          else {
            LODWORD(v17) = 127;
          }
        }
        *(_DWORD *)(v5 + 160) = v17;
        _StringGuts.grow(_:)(31);
        swift_bridgeObjectRelease();
        int v25 = *(_DWORD *)(v5 + 160);
        sub_10000AC7C(&qword_100127420);
        uint64_t v26 = swift_allocObject();
        *(_OWORD *)(v26 + 16) = xmmword_1000E8090;
        *(void *)(v26 + 56) = &type metadata for Int32;
        *(void *)(v26 + 64) = &protocol witness table for Int32;
        *(_DWORD *)(v26 + 32) = v25;
        v27._countAndFlagsBits = String.init(format:_:)();
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
        sub_10002E804(0xD00000000000001DLL, 0x80000001000E0D40, 0xD000000000000021, (void *)0x80000001000E0D10, 0xD00000000000001FLL, 0x80000001000E0CD0, 223);
        swift_bridgeObjectRelease();
        unint64_t v28 = *(void *)(v5 + 96);
        if (is_mul_ok(v13, v28))
        {
          if (((v13 * v28) & 0x8000000000000000) == 0)
          {
            id v29 = [objc_allocWithZone((Class)NSMutableData) initWithLength:v13 * v28];
            if (v29)
            {
              *(void *)(v5 + 48) = v29;
              *(void *)(v5 + 56) = [v29 mutableBytes];
              id v30 = [objc_allocWithZone((Class)NSMutableData) initWithLength:2816];
              if (v30)
              {
                *(void *)(v5 + 16) = v30;
                id v31 = [v30 mutableBytes];
                *(void *)(v5 + 24) = v31;
                *(void *)(v5 + 32) = 32;
                uint64_t v32 = sub_10000B0F0(a3, *(void *)(*(void *)(v11 + 104) + 112), *(void *)(*(void *)(v11 + 104) + 96), *(void *)(*(void *)(v11 + 104) + 104), (uint64_t)v31, 32);
                if (!v4)
                {
                  int v34 = v32;
                  swift_release();

                  *(void *)(v5 + 40) = v34;
                  swift_release();
                  return v5;
                }
                swift_release();

                a3 = *(void **)(v5 + 48);
LABEL_17:

                v33 = *(void **)(v5 + 176);
                swift_release();

                type metadata accessor for AUAInputTransferManager();
                swift_deallocPartialClassInstance();
                return v5;
              }
              goto LABEL_26;
            }
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once();
    goto LABEL_6;
  }
LABEL_27:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100006750()
{
  swift_bridgeObjectRelease();
  double v1 = *(void **)(v0 + 176);
}

id *sub_100006798()
{
  sub_10002E804(0xD00000000000001ELL, 0x80000001000E11B0, 0x74696E696564, (void *)0xE600000000000000, 0xD00000000000001FLL, 0x80000001000E0CD0, 239);

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100006824()
{
  sub_100006798();

  return swift_deallocClassInstance();
}

uint64_t sub_100006858()
{
  return 32;
}

uint64_t sub_100006860(uint64_t a1)
{
  return sub_100009C04(a1, 27, 0xD000000000000019, 0x80000001000E1190, 249);
}

uint64_t sub_100006884()
{
  uint64_t v2 = v0;
  uint64_t v71 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v71 - 8);
  uint64_t v4 = __chkstk_darwin(v71);
  int v6 = (uint64_t *)((char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __chkstk_darwin(v4);
  id v9 = (char *)&v65 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v65 - v10;
  uint64_t v12 = type metadata accessor for OSSignposter();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  int v70 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v65 - v16;
  unint64_t v18 = *(void *)(v2 + 120);
  if ((v18 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v19 = *(void *)(v2 + 40);
  if ((v19 & 0xC000000000000001) != 0)
  {
LABEL_31:
    uint64_t v1 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if (v18 >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v1 = *(void *)(v19 + 8 * v18 + 32);
  swift_retain();
LABEL_5:
  uint64_t v20 = *(void *)(v1 + 16);
  if ((*(unsigned char *)(v20 + 48) & 1) != 0 || (*(unsigned char *)(v20 + 81) & 1) == 0 && *(void *)(v2 + 136) > 0xFuLL)
  {
    swift_release();
    return 0;
  }
  v68 = v6;
  v69 = v9;
  int v6 = &OBJC_IVAR___AUAStream_signpostID;
  if (*(unsigned char *)(v20 + 80) == 1)
  {
    uint64_t v21 = v13;
    uint64_t v22 = v12;
    uint64_t v23 = *(void *)(v20 + 40);
    uint64_t v73 = 0;
    uint64_t v74 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    uint64_t v73 = 0xD000000000000021;
    uint64_t v74 = 0x80000001000E1110;
    uint64_t v66 = v23;
    uint64_t v72 = v23;
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    sub_10002E804(v73, v74, 0xD000000000000012, (void *)0x80000001000E1140, 0xD00000000000001FLL, 0x80000001000E0CD0, 274);
    swift_bridgeObjectRelease();
    if (qword_100126910 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_10000AD60(v22, (uint64_t)qword_10012B220);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v17, v25, v22);
    uint64_t v26 = *(void *)(v2 + 176) + OBJC_IVAR___AUAStream_signpostID;
    uint64_t v67 = v3;
    Swift::String v27 = *(void (**)(void))(v3 + 16);
    ((void (*)(char *, uint64_t, uint64_t))v27)(v11, v26, v71);
    unint64_t v28 = OSSignposter.logHandle.getter();
    LODWORD(v65) = static os_signpost_type_t.event.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      v27();
      id v29 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v29 = 134217984;
      uint64_t v73 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_signpost_id_t v30 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, (os_signpost_type_t)v65, v30, "AUAInputTransferManager_inputResync", "startingSampleNumber %llu", v29, 0xCu);
      swift_slowDealloc();

      uint64_t v3 = v67;
      id v31 = *(void (**)(char *, uint64_t))(v67 + 8);
      uint64_t v32 = v71;
      v31(v11, v71);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v17, v22);
      v31(v69, v32);
    }
    else
    {

      uint64_t v3 = v67;
      (*(void (**)(char *, uint64_t))(v67 + 8))(v11, v71);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v17, v22);
    }
    uint64_t v12 = v22;
    uint64_t v13 = v21;
    int v6 = &OBJC_IVAR___AUAStream_signpostID;
  }
  uint64_t v33 = *(void *)(v1 + 16);
  uint64_t v34 = *(void *)(v2 + 72);
  *(_DWORD *)(v33 + 28) = 0;
  *(unsigned char *)(v33 + 48) = 1;
  *(void *)(v33 + 56) = 0;
  *(_DWORD *)(v33 + 68) = 0;
  *(_DWORD *)(v33 + 72) = 0;
  *(void *)(v33 + 32) = v34;
  *(void *)(v33 + 40) = -1;
  *(_DWORD *)(v33 + 76) = 0x7FFFFFFF;
  *(_WORD *)(v33 + 80) = 0;
  memset([*(id *)(v1 + 24) mutableBytes], *(_DWORD *)(v2 + 160), (size_t)objc_msgSend(*(id *)(v1 + 24), "length"));
  uint64_t v35 = *(void *)(v1 + 16);
  uint64_t v36 = *(unsigned int *)(v35 + 24);
  uint64_t v17 = v70;
  if (!v36)
  {
LABEL_22:
    uint64_t v42 = *(void *)(v2 + 72);
    BOOL v43 = __CFADD__(v42, 8);
    uint64_t v44 = v42 + 8;
    if (!v43)
    {
      *(void *)(v2 + 72) = v44;
      uint64_t v45 = *(void *)(v2 + 120);
      BOOL v43 = __CFADD__(v45, 1);
      char v46 = v45 + 1;
      if (!v43)
      {
        *(void *)(v2 + 120) = v46 & 0x1F;
        uint64_t v47 = *(void *)(v2 + 136);
        BOOL v43 = __CFADD__(v47, 1);
        uint64_t v48 = v47 + 1;
        if (!v43)
        {
          *(void *)(v2 + 136) = v48;
          if (qword_100126910 == -1) {
            goto LABEL_26;
          }
          goto LABEL_36;
        }
LABEL_35:
        __break(1u);
LABEL_36:
        swift_once();
LABEL_26:
        uint64_t v49 = sub_10000AD60(v12, (uint64_t)qword_10012B220);
        (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v17, v49, v12);
        uint64_t v50 = *(void *)(v2 + 176) + *v6;
        uint64_t v67 = v12;
        v51 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16);
        int v52 = v68;
        v51(v68, v50, v71);
        swift_retain_n();
        swift_retain_n();
        int v53 = OSSignposter.logHandle.getter();
        LODWORD(v66) = static os_signpost_type_t.event.getter();
        if (OS_os_log.signpostsEnabled.getter())
        {
          uint64_t v65 = v13;
          v51((uint64_t *)v69, (uint64_t)v52, v71);
          uint64_t v54 = swift_slowAlloc();
          *(_DWORD *)uint64_t v54 = 134218752;
          uint64_t v73 = *(void *)(v2 + 136);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v54 + 12) = 2048;
          uint64_t v55 = v3;
          uint64_t v56 = *(void *)(v2 + 80);
          swift_release();
          uint64_t v73 = v56;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          *(_WORD *)(v54 + 22) = 2048;
          uint64_t v57 = *(void *)(v2 + 72);
          swift_release();
          uint64_t v73 = v57;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          *(_WORD *)(v54 + 32) = 2048;
          uint64_t v58 = **(unsigned int **)(v1 + 16);
          swift_release();
          uint64_t v73 = v58;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          int v59 = v69;
          os_signpost_id_t v60 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v53, (os_signpost_type_t)v66, v60, "AUAInputTransferManager_nextBlockToQueue", "blocksQueued %lu, nextSampleNumber %llu, nextFrameToQueue %llu, transferID %llu", (uint8_t *)v54, 0x2Au);
          swift_slowDealloc();

          int v61 = *(void (**)(uint64_t *, uint64_t))(v55 + 8);
          int v62 = v52;
          uint64_t v63 = v71;
          v61(v62, v71);
          (*(void (**)(char *, uint64_t))(v65 + 8))(v70, v67);
          v61((uint64_t *)v59, v63);
        }
        else
        {

          swift_release_n();
          swift_release_n();
          (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v52, v71);
          (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v67);
        }
        return v1;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v37 = *(void *)(v2 + 88);
  unint64_t v38 = HIDWORD(v37);
  if (!HIDWORD(v37))
  {
    LODWORD(v39) = 0;
    uint64_t v40 = 1;
    while (1)
    {
      unint64_t v41 = *(void *)(v35 + 16) + v38;
      *(_DWORD *)unint64_t v41 = 0;
      *(_DWORD *)(v41 + 4) = v37;
      *(_DWORD *)(v41 + 8) = v39;
      *(void *)(v41 + 20) = 0;
      *(void *)(v41 + 12) = 0;
      if (v36 == v40) {
        goto LABEL_22;
      }
      unint64_t v39 = v40++ * (unint64_t)v37;
      v38 += 28;
      if ((v39 & 0xFFFFFFFF00000000) != 0)
      {
        __break(1u);
        goto LABEL_22;
      }
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100007190(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v31 = a1;
  uint64_t v5 = type metadata accessor for OSSignpostID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OSSignposter();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35[0] = 0;
  v35[1] = 0;
  char v36 = 1;
  char v34 = 0;
  if (qword_100126910 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_10000AD60(v9, (uint64_t)qword_10012B220);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3[22] + OBJC_IVAR___AUAStream_signpostID, v5);
  swift_retain();
  uint64_t v14 = swift_slowAlloc();
  uint64_t v15 = swift_slowAlloc();
  uint64_t v29 = v15;
  *(_DWORD *)uint64_t v14 = 134218498;
  uint64_t v32 = v3[17];
  uint64_t v33 = v15;
  uint64_t v30 = v6;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v14 + 12) = 2048;
  uint64_t v32 = v3[16];
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  *(_WORD *)(v14 + 22) = 2080;
  sub_10000AC7C(&qword_100127420);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1000E8090;
  *(void *)(v16 + 56) = &type metadata for Int32;
  *(void *)(v16 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v16 + 32) = a2;
  uint64_t v17 = String.init(format:_:)();
  uint64_t v28 = v9;
  unint64_t v18 = v8;
  uint64_t v32 = sub_1000192BC(v17, v19, &v33);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  uint64_t v20 = OSSignposter.logHandle.getter();
  os_signpost_type_t v21 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v22 = OSSignpostID.rawValue.getter();
  uint64_t v26 = v5;
  Swift::String v27 = v12;
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, v21, v22, "AUAInputTransferManager_completeBlock", "blocksQueued %lu, nextBlockToBeCompleted %lu, blockStatus %s", (uint8_t *)v14, 0x20u);
  sub_1000075C8(v3, v31, a2, &v34, v35);
  os_signpost_type_t v23 = static os_signpost_type_t.end.getter();
  os_signpost_id_t v24 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, v23, v24, "AUAInputTransferManager_completeBlock", "blocksQueued %lu, nextBlockToBeCompleted %lu, blockStatus %s", (uint8_t *)v14, 0x20u);

  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v18, v26);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v27, v28);
  return v35[0];
}

unint64_t sub_1000075C8(void *a1, uint64_t a2, int a3, char *a4, void *a5)
{
  unint64_t result = a1[16];
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v5 = a5;
  uint64_t v6 = a4;
  int v7 = a3;
  uint64_t v8 = a2;
  uint64_t v11 = a1[5];
  if ((v11 & 0xC000000000000001) != 0)
  {
LABEL_14:
    unint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
    unint64_t v12 = result;
    goto LABEL_5;
  }
  if (result >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v12 = *(void *)(v11 + 8 * result + 32);
  unint64_t result = swift_retain();
LABEL_5:
  uint64_t v13 = *(void *)(v12 + 16);
  if (*(void *)(v13 + 16) != v8) {
    return swift_release();
  }
  uint64_t v14 = a1[17];
  BOOL v15 = v14 != 0;
  uint64_t v16 = v14 - 1;
  if (!v15) {
    goto LABEL_16;
  }
  a1[17] = v16;
  if (v7 != -536870165) {
    sub_1000076E0(v13, (uint64_t)a1, v6, v5);
  }
  *(unsigned char *)(v13 + 48) = 0;
  uint64_t v17 = a1[16];
  unint64_t result = swift_release();
  if (v17 != -1)
  {
    a1[16] = ((_BYTE)v17 + 1) & 0x1F;
    return result;
  }
LABEL_17:
  __break(1u);
  return result;
}

void sub_1000076E0(uint64_t a1, uint64_t a2, char *a3, void *a4)
{
  v131 = a4;
  v134 = a3;
  uint64_t v139 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v139 - 8);
  uint64_t v8 = __chkstk_darwin(v139);
  v138 = &v124[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v12 = (unsigned int *)&v124[-v11];
  uint64_t v13 = __chkstk_darwin(v10);
  v133 = (unsigned int *)&v124[-v14];
  __chkstk_darwin(v13);
  unint64_t v16 = (unint64_t)&v124[-v15];
  uint64_t v17 = (unsigned int *)type metadata accessor for OSSignposter();
  unint64_t v137 = *((void *)v17 - 1);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v19 = __chkstk_darwin(v18);
  os_signpost_type_t v21 = (unsigned int *)&v124[-v20];
  __chkstk_darwin(v19);
  uint64_t v23 = *(unsigned int *)(a1 + 24);
  v135 = v24;
  if (v23)
  {
    unsigned int v25 = 0;
    uint64_t v26 = *(void *)(a1 + 16);
    char v27 = 1;
    int v28 = 1 - v23;
    char v29 = 1;
LABEL_3:
    while (2)
    {
      uint64_t v30 = 0;
      unsigned int v31 = v25;
      if (v25 <= v23) {
        uint64_t v32 = v23;
      }
      else {
        uint64_t v32 = v25;
      }
      uint64_t v33 = v25 - v32;
      uint64_t v34 = v25 - v23;
      uint64_t v35 = (int *)(v26 + 28 * v25);
      while (1)
      {
        if (v33 == v30)
        {
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          __break(1u);
          goto LABEL_103;
        }
        int v36 = *v35;
        unsigned int v37 = v35[3];
        if (*v35 != -536870169 && v36 != 0 && v36 != -536870165)
        {
          unsigned int v25 = v31 - v30 + 1;
          if (v37)
          {
LABEL_29:
            char v29 = 0;
            if (v25 == v23) {
              goto LABEL_93;
            }
          }
          else
          {
            int v45 = v28 + v31;
            if (v27)
            {
              if (v45 == v30) {
                goto LABEL_93;
              }
              char v27 = 0;
              char v29 = 0;
              unsigned int v25 = v31 - v30 + 1;
            }
            else
            {
              if (v45 == v30) {
                goto LABEL_93;
              }
              char v29 = 0;
            }
          }
          goto LABEL_3;
        }
        unint64_t v40 = *(void *)(a2 + 96);
        if (HIDWORD(v40)) {
          goto LABEL_107;
        }
        if (!v40) {
          goto LABEL_100;
        }
        unint64_t v4 = v37 / v40;
        if (v37 % v40) {
          BOOL v41 = 0;
        }
        else {
          BOOL v41 = v35[1] >= v37;
        }
        if (!v41)
        {
          unsigned int v25 = v31 - v30 + 1;
          goto LABEL_29;
        }
        if (v36 == -536870168)
        {
          uint64_t v42 = *(void *)(a2 + 152);
          BOOL v41 = __CFADD__(v42, 1);
          unint64_t v43 = v42 + 1;
          if (v41) {
            goto LABEL_101;
          }
          *(void *)(a2 + 152) = v43;
          if (v43 >= 0x65)
          {
            unsigned int v25 = v31 - v30 + 1;
            int v44 = v28 + v31;
            *(void *)(a2 + 152) = 0;
            if (v37)
            {
              if (v44 == v30) {
                goto LABEL_93;
              }
              char v29 = 0;
            }
            else
            {
              if (v44 == v30) {
                goto LABEL_93;
              }
              char v27 = 0;
              char v29 = 0;
            }
            goto LABEL_3;
          }
        }
        if (v37 == 0 && (v27 & 1) != 0) {
          break;
        }
        --v30;
        v35 += 7;
        if (v34 == v30)
        {
          if (v29)
          {
            unint64_t v46 = *(void *)(a1 + 32);
            v132 = (uint64_t *)(a1 + 32);
            unint64_t v16 = a2 + 168;
            uint64_t v47 = *(void *)(a2 + 168);
            if (v46 < *(void *)(v47 + OBJC_IVAR___AUAAudioDevice_startingUSBFeedbackFrame)) {
              goto LABEL_50;
            }
            if ((v27 & 1) == 0) {
              goto LABEL_47;
            }
            goto LABEL_48;
          }
          goto LABEL_93;
        }
      }
      if (v28 + v31 != v30)
      {
        char v27 = 0;
        unsigned int v25 = v31 - v30 + 1;
        continue;
      }
      break;
    }
    if (v29)
    {
      unint64_t v46 = *(void *)(a1 + 32);
      v132 = (uint64_t *)(a1 + 32);
      unint64_t v16 = a2 + 168;
      uint64_t v47 = *(void *)(a2 + 168);
      if (v46 < *(void *)(v47 + OBJC_IVAR___AUAAudioDevice_startingUSBFeedbackFrame))
      {
LABEL_50:
        uint64_t v51 = a1;
        os_signpost_type_t v21 = v17;
        uint64_t v130 = v7;
        uint64_t v48 = v139;
        unint64_t v16 = (unint64_t)v138;
        *(void *)&long long aBlock = 0;
        *((void *)&aBlock + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(58);
        v52._countAndFlagsBits = 0xD000000000000038;
        v52._object = (void *)0x80000001000E10A0;
        String.append(_:)(v52);
        uint64_t v145 = *v132;
        v53._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v53);
        swift_bridgeObjectRelease();
        sub_10002E804(aBlock, *((uint64_t *)&aBlock + 1), 0xD00000000000002BLL, (void *)0x80000001000E0FA0, 0xD00000000000001FLL, 0x80000001000E0CD0, 387);
        swift_bridgeObjectRelease();
        goto LABEL_76;
      }
LABEL_47:
      if (v46 >= *(void *)(v47 + OBJC_IVAR___AUAAudioDevice_startingUSBDataFrame))
      {
        uint64_t v129 = a1;
        unint64_t v127 = (unint64_t)"nList error, overrunCount";
        v128 = (id *)0xD00000000000001FLL;
        unint64_t v126 = (unint64_t)"rmat:usbInterface:)";
        sub_10002E804(0xD00000000000004BLL, 0x80000001000E0FD0, 0xD00000000000002BLL, (void *)0x80000001000E0FA0, 0xD00000000000001FLL, 0x80000001000E0CD0, 395);
        unint64_t v4 = v137;
        if (qword_100126910 == -1) {
          goto LABEL_83;
        }
        goto LABEL_105;
      }
LABEL_48:
      uint64_t v48 = v139;
      uint64_t v49 = (id *)v16;
      unint64_t v16 = (unint64_t)v138;
      goto LABEL_52;
    }
LABEL_93:
    os_signpost_type_t v21 = (unsigned int *)v16;
    unint64_t v16 = (unint64_t)&v124[-v22];
    *(void *)&long long aBlock = 0;
    *((void *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(75);
    v105._countAndFlagsBits = 0xD000000000000049;
    v105._object = (void *)0x80000001000E0F50;
    String.append(_:)(v105);
    uint64_t v145 = *(void *)(a2 + 152);
    v106._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v106);
    swift_bridgeObjectRelease();
    v135 = "nList error, overrunCount";
    v134 = "rmat:usbInterface:)";
    v138 = (unsigned char *)0xD00000000000001FLL;
    sub_10002E804(aBlock, *((uint64_t *)&aBlock + 1), 0xD00000000000002BLL, (void *)0x80000001000E0FA0, 0xD00000000000001FLL, 0x80000001000E0CD0, 379);
    swift_bridgeObjectRelease();
    if (qword_100126910 == -1) {
      goto LABEL_94;
    }
LABEL_103:
    swift_once();
LABEL_94:
    uint64_t v107 = sub_10000AD60((uint64_t)v17, (uint64_t)qword_10012B220);
    unint64_t v108 = v137;
    v109 = (uint64_t *)v16;
    (*(void (**)(unint64_t, uint64_t, unsigned int *))(v137 + 16))(v16, v107, v17);
    uint64_t v110 = *(void *)(a2 + 176) + OBJC_IVAR___AUAStream_signpostID;
    v136 = v17;
    uint64_t v111 = v7;
    v112 = *(void (**)(unsigned int *, uint64_t, uint64_t))(v7 + 16);
    v113 = v21;
    uint64_t v114 = v139;
    v112(v21, v110, v139);
    swift_retain();
    v132 = v109;
    v115 = OSSignposter.logHandle.getter();
    LODWORD(v131) = static os_signpost_type_t.event.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      v116 = v133;
      v112(v133, (uint64_t)v113, v114);
      v117 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v117 = 134217984;
      *(void *)&long long aBlock = *(void *)(a2 + 152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      os_signpost_id_t v118 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v115, (os_signpost_type_t)v131, v118, "AUAInputTransferManager_completeBlock", "transactionList error, overrunCount%lu", v117, 0xCu);
      swift_slowDealloc();

      v119 = *(void (**)(unsigned int *, uint64_t))(v111 + 8);
      v119(v113, v114);
      (*(void (**)(uint64_t *, unsigned int *))(v108 + 8))(v132, v136);
      v119(v116, v114);
    }
    else
    {
      swift_release();

      (*(void (**)(unsigned int *, uint64_t))(v111 + 8))(v113, v114);
      (*(void (**)(uint64_t *, unsigned int *))(v108 + 8))(v132, v136);
    }
    uint64_t v120 = (uint64_t)v138;
    v122 = v134;
    v121 = v135;
    id v123 = *(id *)(a2 + 168);
    AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)(0xD00000000000002BLL, (unint64_t)v121 | 0x8000000000000000, v120, (unint64_t)v122 | 0x8000000000000000, 381, (uint64_t)ClusterChannelInfo.chNum.getter, 0);
  }
  else
  {
    unint64_t v50 = *(void *)(a1 + 32);
    v132 = (uint64_t *)(a1 + 32);
    uint64_t v49 = (id *)(a2 + 168);
    if (v50 < *(void *)(*(void *)(a2 + 168) + OBJC_IVAR___AUAAudioDevice_startingUSBFeedbackFrame)) {
      goto LABEL_50;
    }
    uint64_t v48 = v139;
    unint64_t v16 = (unint64_t)v138;
    while (1)
    {
LABEL_52:
      int v54 = *(unsigned __int8 *)(a2 + 144);
      uint64_t v130 = v7;
      if (v54 == 1)
      {
        v136 = v17;
        v128 = v49;
        char *v134 = *(void *)(a1 + 32) < *(void *)((char *)*v49 + OBJC_IVAR___AUAAudioDevice_startingUSBDataFrame);
        int64_t v55 = *(unsigned int *)(a1 + 24);
        uint64_t v129 = a1;
        unint64_t v12 = *(unsigned int **)(a1 + 16);
        uint64_t v17 = (unsigned int *)sub_100058C0C(0, v55, 0, _swiftEmptyArrayStorage);
        if (v55)
        {
          uint64_t v7 = 3758097127;
          os_signpost_type_t v21 = v12;
          do
          {
            unsigned int v57 = *v21;
            v21 += 7;
            unsigned int v56 = v57;
            if (v57) {
              BOOL v58 = v56 == -536870169;
            }
            else {
              BOOL v58 = 1;
            }
            if (v58)
            {
              unint64_t v59 = *(void *)(a2 + 96);
              if (!v59) {
                goto LABEL_102;
              }
              unint64_t v16 = v12[3];
              if (v59 <= v16)
              {
                unint64_t v61 = *((void *)v17 + 2);
                unint64_t v60 = *((void *)v17 + 3);
                if (v61 >= v60 >> 1) {
                  uint64_t v17 = (unsigned int *)sub_100058C0C((void *)(v60 > 1), v61 + 1, 1, v17);
                }
                *((void *)v17 + 2) = v61 + 1;
                *(void *)&v17[2 * v61 + 8] = v16 / v59;
              }
            }
            unint64_t v12 = v21;
            --v55;
          }
          while (v55);
        }
        unint64_t v4 = *(void *)((char *)*v128 + OBJC_IVAR___AUAAudioDevice_sampleManager);
        uint64_t v48 = v139;
        if (!v4)
        {
          __break(1u);
LABEL_107:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return;
        }
        uint64_t v62 = *(void *)(a2 + 104);
        uint64_t v63 = *(void *)(a2 + 112);
        swift_retain();
        sub_10000F0D4((uint64_t)v17, v62, v63);
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v17 = v136;
        unint64_t v16 = (unint64_t)v138;
        a1 = v129;
      }
      if (*v134 == 1)
      {
        os_signpost_type_t v21 = v17;
        *(void *)&long long aBlock = 0;
        *((void *)&aBlock + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(45);
        swift_bridgeObjectRelease();
        *(void *)&long long aBlock = 0xD00000000000002BLL;
        *((void *)&aBlock + 1) = 0x80000001000E1020;
        uint64_t v145 = *v132;
        v64._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v64);
        swift_bridgeObjectRelease();
        sub_10002E804(aBlock, *((uint64_t *)&aBlock + 1), 0xD00000000000002BLL, (void *)0x80000001000E0FA0, 0xD00000000000001FLL, 0x80000001000E0CD0, 420);
        swift_bridgeObjectRelease();
        uint64_t v51 = a1;
        goto LABEL_76;
      }
      unint64_t v65 = *(void *)(a2 + 64);
      if (HIDWORD(v65)) {
        goto LABEL_107;
      }
      unint64_t v66 = *(void *)(a2 + 104);
      if (HIDWORD(v66)) {
        goto LABEL_107;
      }
      unint64_t v67 = *(void *)(a2 + 96);
      if (HIDWORD(v67)) {
        goto LABEL_107;
      }
      os_signpost_type_t v21 = v17;
      unsigned int v68 = AUARecordBlockCompletion(a1, v65, *(void *)(a2 + 80), v66, v67);
      uint64_t v69 = *(void *)(a2 + 80);
      BOOL v41 = __CFADD__(v69, v68);
      uint64_t v70 = v69 + v68;
      if (!v41) {
        break;
      }
      __break(1u);
LABEL_105:
      swift_once();
LABEL_83:
      uint64_t v89 = sub_10000AD60((uint64_t)v17, (uint64_t)qword_10012B220);
      (*(void (**)(unsigned int *, uint64_t, unsigned int *))(v4 + 16))(v21, v89, v17);
      uint64_t v90 = *(void *)(a2 + 176) + OBJC_IVAR___AUAStream_signpostID;
      v136 = v17;
      uint64_t v130 = v7;
      v91 = *(void (**)(void))(v7 + 16);
      uint64_t v48 = v139;
      ((void (*)(unsigned int *, uint64_t, uint64_t))v91)(v12, v90, v139);
      v92 = OSSignposter.logHandle.getter();
      int v125 = static os_signpost_type_t.event.getter();
      if (OS_os_log.signpostsEnabled.getter())
      {
        v91();
        v93 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v93 = 0;
        os_signpost_id_t v94 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v92, (os_signpost_type_t)v125, v94, "AUAInputTransferManager_completeBlock", "received unexpected 0 length transfer", v93, 2u);
        swift_slowDealloc();

        uint64_t v7 = v130;
        v95 = *(void (**)(unsigned int *, uint64_t))(v130 + 8);
        v95(v12, v48);
        (*(void (**)(unsigned int *, unsigned int *))(v137 + 8))(v21, v136);
        v95(v133, v48);
      }
      else
      {

        uint64_t v7 = v130;
        (*(void (**)(unsigned int *, uint64_t))(v130 + 8))(v12, v48);
        (*(void (**)(unsigned int *, unsigned int *))(v137 + 8))(v21, v136);
      }
      uint64_t v49 = (id *)v16;
      v96 = (void *)(*(void *)v16 + OBJC_IVAR___AUAAudioDevice_function);
      if (*v96)
      {
        uint64_t v97 = v96[1];
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v99 = v7;
        v100 = *(uint64_t (**)(uint64_t, uint64_t))(v97 + 16);
        swift_unknownObjectRetain();
        uint64_t v101 = v100(ObjectType, v97);
        uint64_t v7 = v99;
        unint64_t v12 = (unsigned int *)v101;
        swift_unknownObjectRelease();
        if (v12)
        {
          NSString v102 = String._bridgeToObjectiveC()();
          uint64_t v103 = swift_allocObject();
          *(void *)(v103 + 16) = v12;
          v143 = sub_10000CEAC;
          uint64_t v144 = v103;
          *(void *)&long long aBlock = _NSConcreteStackBlock;
          *((void *)&aBlock + 1) = 1107296256;
          v141 = sub_1000C4FC8;
          v142 = &unk_1001170E0;
          v104 = _Block_copy(&aBlock);
          unint64_t v12 = v12;
          uint64_t v49 = (id *)v16;
          uint64_t v48 = v139;
          swift_release();
          AnalyticsSendEventLazy();
          _Block_release(v104);
        }
      }
      unint64_t v4 = (unint64_t)*v49;
      AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)(0xD00000000000002BLL, v127 | 0x8000000000000000, (uint64_t)v128, v126 | 0x8000000000000000, 408, (uint64_t)ClusterChannelInfo.chNum.getter, 0);

      uint64_t v17 = v136;
      unint64_t v16 = (unint64_t)v138;
      a1 = v129;
    }
    *(void *)(a2 + 80) = v70;
    uint64_t v71 = *(void *)(a1 + 56);
    uint64_t v51 = a1;
    if (v71)
    {
      uint64_t v72 = *(unsigned int *)(a1 + 64);
      uint64_t v73 = v131;
      void *v131 = v71;
      v73[1] = v72;
      *((unsigned char *)v73 + 16) = 0;
    }
LABEL_76:
    int v74 = *(_DWORD *)(v51 + 76);
    if (v74 < 0)
    {
      unint64_t v75 = v16;
      uint64_t v76 = v48;
      *(void *)&long long aBlock = 0;
      *((void *)&aBlock + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(16);
      swift_bridgeObjectRelease();
      strcpy((char *)&aBlock, "USB underflow ");
      HIBYTE(aBlock) = -18;
      LODWORD(v145) = v74;
      v77._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v77);
      swift_bridgeObjectRelease();
      sub_10002E804(aBlock, *((uint64_t *)&aBlock + 1), 0xD00000000000002BLL, (void *)0x80000001000E0FA0, 0xD00000000000001FLL, 0x80000001000E0CD0, 440);
      swift_bridgeObjectRelease();
      if (qword_100126910 != -1) {
        swift_once();
      }
      uint64_t v78 = sub_10000AD60((uint64_t)v21, (uint64_t)qword_10012B220);
      unint64_t v79 = v137;
      v80 = *(void (**)(char *, uint64_t, unsigned int *))(v137 + 16);
      v136 = v21;
      v80(v135, v78, v21);
      uint64_t v81 = *(void *)(a2 + 176) + OBJC_IVAR___AUAStream_signpostID;
      uint64_t v82 = v130;
      v83 = *(void (**)(unint64_t, uint64_t, uint64_t))(v130 + 16);
      v83(v75, v81, v76);
      v84 = OSSignposter.logHandle.getter();
      LODWORD(v139) = static os_signpost_type_t.event.getter();
      if (OS_os_log.signpostsEnabled.getter())
      {
        v85 = v133;
        v83((unint64_t)v133, v75, v76);
        v86 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v86 = 67109120;
        LODWORD(aBlock) = v74;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        os_signpost_id_t v87 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v84, (os_signpost_type_t)v139, v87, "AUAInputTransferManager_completeBlock", "USB underflow %d", v86, 8u);
        swift_slowDealloc();

        v88 = *(void (**)(unint64_t, uint64_t))(v82 + 8);
        v88(v75, v76);
        (*(void (**)(char *, unsigned int *))(v79 + 8))(v135, v136);
        v88((unint64_t)v85, v76);
      }
      else
      {

        (*(void (**)(unint64_t, uint64_t))(v82 + 8))(v75, v76);
        (*(void (**)(char *, unsigned int *))(v79 + 8))(v135, v136);
      }
    }
  }
}

unint64_t sub_100008860(uint64_t a1)
{
  sub_10000AC7C((uint64_t *)&unk_100129190);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000E80A0;
  *(void *)(inited + 32) = 4475222;
  *(void *)(inited + 40) = 0xE300000000000000;
  sub_10000CECC(0, (unint64_t *)&qword_100127470);
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor);
  *(NSNumber *)(inited + 48) = NSNumber.init(integerLiteral:)(*(unsigned __int16 *)(v3 + 8));
  *(void *)(inited + 56) = 4475216;
  *(void *)(inited + 64) = 0xE300000000000000;
  *(NSNumber *)(inited + 72) = NSNumber.init(integerLiteral:)(*(unsigned __int16 *)(v3 + 10));
  strcpy((char *)(inited + 80), "productString");
  *(_WORD *)(inited + 94) = -4864;
  id v4 = objc_allocWithZone((Class)NSString);
  swift_bridgeObjectRetain();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 initWithString:v5];

  *(void *)(inited + 96) = v6;
  return sub_100008AF4(inited);
}

unint64_t sub_1000089A8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000AC7C(&qword_100127478);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  uint64_t v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000CF08(v4, (uint64_t)&v16, &qword_100127480);
    uint64_t v5 = v16;
    uint64_t v6 = v17;
    unint64_t result = sub_100019914(v16, v17);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v9 = v5;
    v9[1] = v6;
    uint64_t v10 = v2[7] + 40 * result;
    long long v11 = v18;
    long long v12 = v19;
    *(void *)(v10 + 32) = v20;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v2[2] = v15;
    v4 += 56;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100008AF4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000AC7C(&qword_1001273F8);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    id v8 = v7;
    unint64_t result = sub_100019914(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v11 = (uint64_t *)(v2[6] + 16 * result);
    *long long v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100008C10(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000AC7C((uint64_t *)&unk_100127460);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    unint64_t result = sub_10001998C((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100008D1C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000AC7C(&qword_100127428);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000CF08(v6, (uint64_t)&v15, &qword_100127430);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_100019914(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    BOOL v11 = (uint64_t *)(v3[6] + 16 * result);
    *BOOL v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_10000CDA8(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100008E54(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000AC7C(&qword_100127458);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100019914(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v11 = (uint64_t *)(v2[6] + 16 * result);
    *BOOL v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100008F78(uint64_t a1)
{
  return sub_100008F90(a1, &qword_100127450);
}

unint64_t sub_100008F84(uint64_t a1)
{
  return sub_100008F90(a1, &qword_100127448);
}

unint64_t sub_100008F90(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000AC7C(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100019914(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v11 = (uint64_t *)(v3[6] + 16 * result);
    *BOOL v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000090A8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000AC7C(&qword_100127438);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000CF08(v6, (uint64_t)v15, &qword_100127440);
    unint64_t result = sub_1000199D0((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_10000CDA8(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000091EC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000AC7C(&qword_100127488);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000CF08(v6, (uint64_t)&v15, &qword_100127490);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_100019914(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    long long v11 = (uint64_t *)(v3[6] + 16 * result);
    *long long v11 = v7;
    v11[1] = v8;
    unint64_t result = sub_10000CF6C(&v17, v3[7] + 40 * result);
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t (*sub_100009330())()
{
  uint64_t v1 = OSSignpostID.rawValue.getter();
  unint64_t v2 = v0[12];
  if (!HIDWORD(v2))
  {
    unint64_t v3 = v0[8];
    if (!HIDWORD(v3))
    {
      unint64_t v4 = v0[13];
      if (!HIDWORD(v4))
      {
        uint64_t v5 = v0[3];
        if (v5)
        {
          uint64_t v6 = AUARealtimeReadInputBlock(v1, v2, 32, v3, v4, v5, v0[7]);
          *(void *)(swift_allocObject() + 16) = v6;
          return sub_10000D978;
        }
        __break(1u);
      }
    }
  }
  unint64_t result = (uint64_t (*)())_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100009430(void *a1, char *a2, void *a3)
{
  uint64_t v4 = v3;
  swift_retain();
  sub_10002E804(0xD00000000000001DLL, 0x80000001000E0E20, 0xD000000000000021, (void *)0x80000001000E0D10, 0xD00000000000001FLL, 0x80000001000E0CD0, 594);
  type metadata accessor for AUAOutputStream(0);
  uint64_t v7 = swift_dynamicCastClass();
  if (!v7)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v29 = 1;
    *(void *)(v29 + 8) = 0;
    *(void *)(v29 + 16) = 0xE000000000000000;
    *(void *)(v29 + 24) = 0xD000000000000021;
    *(void *)(v29 + 32) = 0x80000001000E0D10;
    *(void *)(v29 + 40) = 0xD00000000000001FLL;
    *(void *)(v29 + 48) = 0x80000001000E0CD0;
    *(void *)(v29 + 56) = 595;
    swift_willThrow();
    swift_release();

    uint64_t v30 = a3;
LABEL_23:

    type metadata accessor for AUAOutputTransferManager();
    swift_deallocPartialClassInstance();
    return v4;
  }
  *(void *)(v4 + 160) = v7;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v31 = 1;
    *(void *)(v31 + 8) = 0;
    *(void *)(v31 + 16) = 0xE000000000000000;
    *(void *)(v31 + 24) = 0xD000000000000021;
    *(void *)(v31 + 32) = 0x80000001000E0D10;
    *(void *)(v31 + 40) = 0xD00000000000001FLL;
    *(void *)(v31 + 48) = 0x80000001000E0CD0;
    *(void *)(v31 + 56) = 597;
    id v32 = a1;
    swift_willThrow();

    uint64_t v33 = a3;
LABEL_22:

    uint64_t v30 = *(void **)(v4 + 160);
    swift_release();
    goto LABEL_23;
  }
  uint64_t v9 = (void *)Strong;
  *(void *)(v4 + 152) = Strong;
  uint64_t v10 = *(void *)&a2[OBJC_IVAR___AUAStreamFormat_altSetting];
  if (!v10)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v34 = 74;
    *(void *)(v34 + 8) = 0;
    *(void *)(v34 + 16) = 0xE000000000000000;
    *(void *)(v34 + 24) = 0xD000000000000021;
    *(void *)(v34 + 32) = 0x80000001000E0D10;
    *(void *)(v34 + 40) = 0xD00000000000001FLL;
    *(void *)(v34 + 48) = 0x80000001000E0CD0;
    *(void *)(v34 + 56) = 600;
    id v35 = a1;
    id v36 = v9;
    swift_willThrow();

    int v28 = a3;
    goto LABEL_21;
  }
  id v11 = a1;
  id v12 = v9;
  swift_retain();
  unint64_t v13 = [v12 timestampPeriod];
  uint64_t v14 = *(void **)(v10 + 104);
  *(void *)(v4 + 88) = v14[14];
  *(void *)(v4 + 112) = v14[13];
  *(void *)(v4 + 104) = v14[12];
  *(void *)(v4 + 64) = v13;
  unsigned int v15 = [a2 channelsPerFrame];
  unint64_t v16 = *(void *)(v10 + 40);
  if ((v16 & 0x8000000000000000) == 0)
  {
    if (is_mul_ok(v15, v16))
    {
      *(void *)(v4 + 96) = v15 * v16;
      *(void *)(v4 + 72) = 0;
      *(void *)(v4 + 80) = 0;
      *(void *)(v4 + 128) = 0;
      *(void *)(v4 + 136) = 0;
      *(void *)(v4 + 120) = 0;
      if (qword_100126938 == -1) {
        goto LABEL_7;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once();
LABEL_7:
    unint64_t v50 = v13;
    uint64_t v51 = a2;
    long long v17 = *(void **)(qword_10012B2A8 + 16);
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = v10;
      id v20 = v12;
      id v21 = v11;
      NSString v22 = String._bridgeToObjectiveC()();
      unsigned int v23 = [v18 BOOLForKey:v22];

      id v11 = v21;
      id v12 = v20;
      uint64_t v10 = v19;
      if (v23) {
        LODWORD(v17) = 63;
      }
      else {
        LODWORD(v17) = 0;
      }
    }
    *(_DWORD *)(v4 + 144) = v17;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    int v24 = *(_DWORD *)(v4 + 144);
    sub_10000AC7C(&qword_100127420);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_1000E8090;
    *(void *)(v25 + 56) = &type metadata for Int32;
    *(void *)(v25 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v25 + 32) = v24;
    v26._countAndFlagsBits = String.init(format:_:)();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    sub_10002E804(0xD00000000000001ELL, 0x80000001000E0E40, 0xD000000000000021, (void *)0x80000001000E0D10, 0xD00000000000001FLL, 0x80000001000E0CD0, 615);
    swift_bridgeObjectRelease();
    unint64_t v27 = sub_100005F78(*(void *)(*(void *)(v10 + 104) + 96), *(void *)(*(void *)(v10 + 104) + 104));
    if (v52)
    {

      swift_release();
      int v28 = a3;
LABEL_21:

      uint64_t v33 = *(void **)(v4 + 152);
      goto LABEL_22;
    }
    unint64_t v37 = *(void *)(v4 + 96);
    if (is_mul_ok(v50, v37))
    {
      unint64_t v38 = v11;
      unint64_t v39 = v50 * v37;
      uint64_t v40 = *(void *)(v4 + 88);
      size_t v41 = v39 + v40;
      if (!__CFADD__(v39, v40))
      {
        if ((v41 & 0x8000000000000000) == 0)
        {
          unint64_t v42 = v27;
          id v43 = sub_100005D78(a3, v39 + v40);
          *(void *)(v4 + 48) = v43;
          id v44 = [v43 mutableBytes];
          *(void *)(v4 + 56) = v44;
          memset(v44, *(_DWORD *)(v4 + 144), v41);
          id v45 = [objc_allocWithZone((Class)NSMutableData) initWithLength:704];
          if (v45)
          {
            *(void *)(v4 + 16) = v45;
            id v46 = [v45 mutableBytes];
            *(void *)(v4 + 24) = v46;
            *(void *)(v4 + 32) = 8;
            id v47 = *(id *)(v4 + 48);
            uint64_t v49 = sub_10000B410(v47, v42, (uint64_t)v46, 8);

            swift_release();
            *(void *)(v4 + 40) = v49;
            swift_release();
            return v4;
          }
          goto LABEL_30;
        }
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_29;
  }
LABEL_31:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100009AD4()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void **)(v0 + 160);
}

id *sub_100009B1C()
{
  sub_10002E804(0xD00000000000001FLL, 0x80000001000E0F00, 0x74696E696564, (void *)0xE600000000000000, 0xD00000000000001FLL, 0x80000001000E0CD0, 636);

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100009BA4()
{
  sub_100009B1C();

  return swift_deallocClassInstance();
}

uint64_t sub_100009BD8()
{
  return 8;
}

uint64_t sub_100009BE0(uint64_t a1)
{
  return sub_100009C04(a1, 28, 0xD00000000000001ALL, 0x80000001000E0EC0, 646);
}

uint64_t sub_100009C04(uint64_t a1, Swift::Int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _StringGuts.grow(_:)(a2);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  sub_10002E804(a3, a4, 0xD000000000000017, (void *)0x80000001000E0EE0, 0xD00000000000001FLL, 0x80000001000E0CD0, a5);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v5 + 72) = a1;
  return result;
}

unint64_t sub_100009CEC()
{
  uint64_t v4 = v0;
  uint64_t v5 = type metadata accessor for OSSignpostID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = &v65[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  id v11 = &v65[-v10];
  uint64_t v12 = type metadata accessor for OSSignposter();
  __chkstk_darwin(v12);
  unint64_t v16 = 0;
  if (v4[17] > 7uLL) {
    return v16;
  }
  unint64_t v17 = v4[15];
  if ((v17 & 0x8000000000000000) != 0) {
    goto LABEL_73;
  }
  unint64_t v67 = v9;
  uint64_t v68 = v6;
  uint64_t v69 = (unsigned char *)v5;
  uint64_t v70 = v11;
  unint64_t v16 = v4[5];
  unint64_t v1 = v16 & 0xC000000000000001;
  uint64_t v71 = v14;
  uint64_t v72 = &v65[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v73 = v15;
  if ((v16 & 0xC000000000000001) != 0) {
    goto LABEL_74;
  }
  if (v17 >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  uint64_t v18 = swift_retain();
LABEL_6:
  uint64_t v19 = *(void *)(v18 + 16);
  unint64_t result = swift_release();
  unint64_t v21 = *(void *)(v4[19] + OBJC_IVAR___AUAAudioDevice_sampleManager);
  if (v21)
  {
    if (*(unsigned char *)(v21 + 112) == 1)
    {
      uint64_t v3 = v65;
      unint64_t v22 = *(unsigned int *)(v19 + 24);
      unint64_t v2 = *(void *)(v21 + 104);
      __chkstk_darwin(result);
      swift_retain();
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v2 + 16));
      id v11 = 0;
      sub_10000CE30(&v74);
      os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 16));
      unint64_t v23 = v74;
      swift_release();
      swift_release();
      if (v23 >= v22) {
        goto LABEL_55;
      }
      return 0;
    }
    id v11 = 0;
    unint64_t result = v4[15];
    if ((result & 0x8000000000000000) != 0)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
    while (1)
    {
      if (v1)
      {
        unint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t v16 = result;
      }
      else
      {
        if (result >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_84;
        }
        unint64_t v16 = *(void *)(v16 + 8 * result + 32);
        unint64_t result = swift_retain();
      }
      uint64_t v24 = *(void *)(v16 + 16);
      *(void *)(v24 + 32) = v4[9];
      *(void *)(v24 + 40) = v4[10];
      *(_DWORD *)(v24 + 28) = 0;
      *(void *)(v16 + 40) = 0;
      *(void *)(v16 + 48) = 0;
      *(unsigned char *)(v16 + 56) = 1;
      if (!*(void *)(v4[19] + OBJC_IVAR___AUAAudioDevice_sampleManager)) {
        goto LABEL_85;
      }
      unint64_t v1 = *(void *)(v24 + 16);
      unint64_t v25 = *(void *)(v24 + 40);
      unint64_t v21 = *(unsigned int *)(v24 + 24);
      swift_retain();
      Swift::String v26 = sub_10000E470(v21);
      swift_release();
      unint64_t v27 = v4[8];
      if (!v27) {
        goto LABEL_76;
      }
      unint64_t v28 = v4[13];
      if (!v28) {
        goto LABEL_77;
      }
      if (v28 > v21) {
        break;
      }
      unint64_t v2 = 0;
      unint64_t v49 = 0;
      uint64_t v50 = 0;
      unint64_t v51 = v25 % v27;
      unint64_t v52 = v28 - 1;
      unint64_t v53 = v21 / v28;
      while (2)
      {
        if (v50 == v53)
        {
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          goto LABEL_6;
        }
        if (v49 >= v26[2]) {
          goto LABEL_68;
        }
        unint64_t v54 = v26[v49 + 4];
        unint64_t v55 = v4[12];
        if (!is_mul_ok(v54, v55)) {
          goto LABEL_69;
        }
        unint64_t v56 = v25 % v27;
        if (!is_mul_ok(v25 % v27, v55)) {
          goto LABEL_70;
        }
        *(_DWORD *)(v1 + 28 * v49) = 0;
        if (!((v54 * v55) >> 32))
        {
          unint64_t v21 = v56 * v55;
          *(_DWORD *)(v1 + 28 * v49 + 4) = v54 * v55;
          if (!((v56 * v55) >> 32))
          {
            uint64_t v57 = 0;
            uint64_t v58 = v50 + 1;
            unint64_t v59 = v49 + 5;
            unint64_t v60 = (_DWORD *)(v1 + 32 + 28 * v49);
            unint64_t v61 = v52;
            while (1)
            {
              *(v60 - 6) = v21;
              *(void *)(v60 - 3) = 0;
              *(void *)(v60 - 5) = 0;
              uint64_t v3 = (unsigned char *)*(unsigned __int8 *)(v16 + 56);
              if (v3 == 1)
              {
                BOOL v30 = __CFADD__(v56, v54);
                unint64_t v62 = v56 + v54;
                if (v30) {
                  goto LABEL_64;
                }
                if (v62 >= v27)
                {
                  uint64_t v63 = v4[9];
                  BOOL v30 = __CFADD__(v63, v50);
                  uint64_t v64 = v63 + v50;
                  if (v30) {
                    goto LABEL_65;
                  }
                  if (v27 < v51) {
                    goto LABEL_66;
                  }
                  *(void *)(v16 + 40) = v64;
                  *(void *)(v16 + 48) = v27 - v51;
                  *(unsigned char *)(v16 + 56) = 0;
                }
              }
              BOOL v30 = __CFADD__(v25, v54);
              v25 += v54;
              if (v30)
              {
                __break(1u);
LABEL_60:
                __break(1u);
LABEL_61:
                __break(1u);
LABEL_62:
                __break(1u);
LABEL_63:
                __break(1u);
LABEL_64:
                __break(1u);
LABEL_65:
                __break(1u);
LABEL_66:
                __break(1u);
                goto LABEL_67;
              }
              BOOL v30 = __CFADD__(v57, v54);
              v57 += v54;
              if (v30) {
                goto LABEL_60;
              }
              unint64_t v49 = v59 - 4;
              if (!v61) {
                break;
              }
              if (v49 >= v26[2]) {
                goto LABEL_61;
              }
              unint64_t v54 = v26[v59];
              if (!is_mul_ok(v54, v55)) {
                goto LABEL_62;
              }
              unint64_t v56 = v25 % v27;
              uint64_t v3 = (unsigned char *)((v25 % v27 * (unsigned __int128)v55) >> 64);
              if (!is_mul_ok(v25 % v27, v55)) {
                goto LABEL_63;
              }
              *(v60 - 1) = 0;
              uint64_t v3 = (unsigned char *)((v54 * v55) >> 32);
              if (!v3)
              {
                unint64_t v21 = v56 * v55;
                *unint64_t v60 = v54 * v55;
                v60 += 7;
                ++v59;
                --v61;
                uint64_t v3 = (unsigned char *)((v56 * v55) >> 32);
                if (!v3) {
                  continue;
                }
              }
              goto LABEL_54;
            }
            BOOL v30 = __CFADD__(v51, v57);
            v51 += v57;
            if (v30) {
              goto LABEL_71;
            }
            BOOL v30 = __CFADD__(v2, v57);
            v2 += v57;
            if (v30) {
              goto LABEL_72;
            }
            ++v50;
            if (v58 != v53) {
              continue;
            }
            swift_bridgeObjectRelease();
            if (!HIDWORD(v2)) {
              goto LABEL_20;
            }
          }
        }
        break;
      }
LABEL_54:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_55:
      unint64_t result = v4[15];
      if ((result & 0x8000000000000000) != 0) {
        goto LABEL_56;
      }
    }
    swift_bridgeObjectRelease();
    LODWORD(v2) = 0;
LABEL_20:
    *(_DWORD *)(v24 + 28) = v2;
    uint64_t v29 = v4[9];
    BOOL v30 = __CFADD__(v29, 8);
    uint64_t v31 = v29 + 8;
    id v11 = v69;
    if (v30) {
      goto LABEL_78;
    }
    v4[9] = v31;
    uint64_t v32 = v4[15];
    BOOL v30 = __CFADD__(v32, 1);
    char v33 = v32 + 1;
    if (!v30)
    {
      v4[15] = v33 & 7;
      uint64_t v34 = *(void *)(v16 + 16);
      uint64_t v35 = *(unsigned int *)(v34 + 28);
      uint64_t v36 = v4[10];
      BOOL v30 = __CFADD__(v36, v35);
      uint64_t v37 = v36 + v35;
      if (v30) {
        goto LABEL_80;
      }
      v4[10] = v37;
      uint64_t v38 = v4[17];
      BOOL v30 = __CFADD__(v38, 1);
      uint64_t v39 = v38 + 1;
      if (!v30)
      {
        v4[17] = v39;
        *(unsigned char *)(v34 + 48) = 1;
        if (qword_100126910 != -1) {
          goto LABEL_82;
        }
        goto LABEL_25;
      }
LABEL_81:
      __break(1u);
LABEL_82:
      swift_once();
LABEL_25:
      unint64_t v21 = v71;
      uint64_t v40 = sub_10000AD60(v71, (uint64_t)qword_10012B220);
      (*(void (**)(unsigned char *, uint64_t, unint64_t))(v73 + 16))(v72, v40, v21);
      uint64_t v3 = (unsigned char *)v68;
      size_t v41 = *(void (**)(void))(v68 + 16);
      unint64_t v1 = (unint64_t)v70;
      v41();
      swift_retain_n();
      swift_retain_n();
      unint64_t v2 = OSSignposter.logHandle.getter();
      int v66 = static os_signpost_type_t.event.getter();
      if (OS_os_log.signpostsEnabled.getter())
      {
        ((void (*)(unsigned char *, unint64_t, unsigned char *))v41)(v67, v1, v11);
        uint64_t v42 = swift_slowAlloc();
        *(_DWORD *)uint64_t v42 = 134218752;
        unint64_t v74 = v4[17];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v42 + 12) = 2048;
        unint64_t v43 = v4[10];
        swift_release();
        unint64_t v74 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        *(_WORD *)(v42 + 22) = 2048;
        unint64_t v44 = v4[9];
        swift_release();
        unint64_t v74 = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        *(_WORD *)(v42 + 32) = 2048;
        unint64_t v45 = **(unsigned int **)(v16 + 16);
        swift_release();
        unint64_t v74 = v45;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        id v46 = v67;
        os_signpost_id_t v47 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, (os_log_t)v2, (os_signpost_type_t)v66, v47, "AUAOutputTransferManager_nextBlockToQueue", "blocksQueued %lu, nextSampleNumber %llu, nextFrameToQueue %llu, transferID %llu", (uint8_t *)v42, 0x2Au);
        swift_slowDealloc();

        uint64_t v48 = (void (*)(unsigned char *, unsigned char *))*((void *)v3 + 1);
        v48(v70, v11);
        (*(void (**)(unsigned char *, uint64_t))(v73 + 8))(v72, v71);
        v48(v46, v11);
        return v16;
      }
LABEL_57:

      swift_release_n();
      swift_release_n();
      (*((void (**)(unint64_t, unsigned char *))v3 + 1))(v1, v11);
      (*(void (**)(unsigned char *, unint64_t))(v73 + 8))(v72, v21);
      return v16;
    }
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
  return result;
}

uint64_t sub_10000A588(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OSSignposter();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37[0] = 0;
  v37[1] = 0;
  char v38 = 1;
  unint64_t v14 = v3[16];
  if ((v14 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v15 = v3[5];
  if ((v15 & 0xC000000000000001) != 0)
  {
LABEL_8:
    char v33 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if (v14 >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_10;
  }
  char v33 = *(char **)(v15 + 8 * v14 + 32);
  swift_retain();
LABEL_5:
  uint64_t v34 = a1;
  if (qword_100126910 != -1) {
LABEL_10:
  }
    swift_once();
  uint64_t v28 = v10;
  uint64_t v16 = sub_10000AD60(v10, (uint64_t)qword_10012B220);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v16, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3[20] + OBJC_IVAR___AUAStream_signpostID, v6);
  swift_retain();
  uint64_t v17 = swift_slowAlloc();
  uint64_t v18 = swift_slowAlloc();
  *(_DWORD *)uint64_t v17 = 134218498;
  uint64_t v35 = v3[17];
  uint64_t v36 = v18;
  uint64_t v31 = v7;
  uint64_t v32 = v11;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v17 + 12) = 2048;
  uint64_t v35 = v3[16];
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  *(_WORD *)(v17 + 22) = 2080;
  uint64_t v29 = v13;
  sub_10000AC7C(&qword_100127420);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1000E8090;
  *(void *)(v19 + 56) = &type metadata for Int32;
  *(void *)(v19 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v19 + 32) = a2;
  uint64_t v20 = String.init(format:_:)();
  uint64_t v30 = v6;
  uint64_t v35 = sub_1000192BC(v20, v21, &v36);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  unint64_t v22 = OSSignposter.logHandle.getter();
  os_signpost_type_t v23 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v24 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, v23, v24, "AUAOutputTransferManager_completeBlock", "blocksQueued %lu, nextBlockToBeCompleted %lu, blockStatus %s", (uint8_t *)v17, 0x20u);
  sub_10000A9F4(v33, v34, (uint64_t)v3, a2, (uint64_t)v37);
  os_signpost_type_t v25 = static os_signpost_type_t.end.getter();
  os_signpost_id_t v26 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, v25, v26, "AUAOutputTransferManager_completeBlock", "blocksQueued %lu, nextBlockToBeCompleted %lu, blockStatus %s", (uint8_t *)v17, 0x20u);

  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();
  swift_release();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v30);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v29, v28);
  return v37[0];
}

char *sub_10000A9F4(char *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5 = *((void *)result + 2);
  if (*(void *)(v5 + 16) == a2)
  {
    uint64_t v7 = *(void *)(a3 + 136);
    BOOL v8 = v7 != 0;
    uint64_t v9 = v7 - 1;
    if (!v8)
    {
      __break(1u);
LABEL_13:
      __break(1u);
      return result;
    }
    uint64_t v10 = result;
    *(void *)(a3 + 136) = v9;
    if (a4 != -536870165)
    {
      char v11 = result[56];
      *(_OWORD *)a5 = *(_OWORD *)(result + 40);
      *(unsigned char *)(a5 + 16) = v11;
      uint64_t v12 = *(unsigned int *)(v5 + 24);
      uint64_t v13 = *(void *)(v5 + 16);
      int v14 = *(_DWORD *)(a3 + 144);
      unint64_t result = (char *)[*((id *)result + 3) mutableBytes];
      if (v12)
      {
        uint64_t v15 = result;
        uint64_t v16 = (unsigned int *)(v13 + 8);
        do
        {
          unint64_t result = (char *)memset(&v15[*v16], v14, *(v16 - 1));
          v16 += 7;
          --v12;
        }
        while (v12);
      }
      if (*(void *)(*(void *)(a3 + 160) + OBJC_IVAR___AUAOutputStream_explicitFeedback))
      {
        swift_retain();
        sub_100099EB0();
        unint64_t result = (char *)swift_release();
      }
    }
    *((void *)v10 + 5) = 0;
    *((void *)v10 + 6) = 0;
    v10[56] = 1;
    *(unsigned char *)(v5 + 48) = 0;
    uint64_t v17 = *(void *)(a3 + 128);
    BOOL v8 = __CFADD__(v17, 1);
    char v18 = v17 + 1;
    if (v8) {
      goto LABEL_13;
    }
    *(void *)(a3 + 128) = v18 & 7;
  }
  return result;
}

uint64_t (*sub_10000AB18())()
{
  uint64_t v1 = OSSignpostID.rawValue.getter();
  unint64_t v2 = v0[12];
  if (HIDWORD(v2) || (unint64_t v3 = v0[8], HIDWORD(v3)) || (v4 = v0[11], HIDWORD(v4)))
  {
    unint64_t result = (uint64_t (*)())_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v5 = AUARealtimeWriteMixBlock(v1, v2, v3, v4, v0[7]);
    *(void *)(swift_allocObject() + 16) = v5;
    return sub_10000CDF0;
  }
  return result;
}

uint64_t variable initialization expression of USBDevice.activeConfig()
{
  return 0;
}

uint64_t variable initialization expression of LockDelay.units()
{
  return 0;
}

uint64_t variable initialization expression of AUAAudioDevice.configChangedHandlers()
{
  sub_10000AC7C(&qword_100126950);
  uint64_t v0 = swift_allocObject();
  sub_10000AC7C(&qword_100126958);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 16) = v1;
  *(void *)(v0 + 24) = _swiftEmptyArrayStorage;
  return v0;
}

uint64_t sub_10000AC7C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t variable initialization expression of AUADSPAudioDevice._transportType()
{
  return 1970496032;
}

uint64_t variable initialization expression of ActiveStreamingInterface.function()
{
  return 0;
}

uint64_t variable initialization expression of ActiveClockSelector.curSelection()
{
  return 1;
}

uint64_t variable initialization expression of ActiveClockSource.signpostID()
{
  if (qword_1001268E8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for OSSignposter();
  sub_10000AD60(v0, (uint64_t)qword_10012B1E0);
  OSSignposter.logHandle.getter();

  return OSSignpostID.init(log:)();
}

uint64_t sub_10000AD60(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t variable initialization expression of ActiveClockSource.cachedSamplingRate()
{
  return 0;
}

uint64_t variable initialization expression of Endpoint.bRefresh()
{
  return 256;
}

double variable initialization expression of ControlInterface.interruptEP@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  return result;
}

void *variable initialization expression of USBDevice.hrlDescriptorData()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of AUAStream.controlScope()
{
  return 1735159650;
}

unint64_t variable initialization expression of ActiveFeatureUnit.volumeOverrides()
{
  return sub_10000B80C((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t variable initialization expression of USBDevice.hrlConfig()
{
  return 0;
}

void sub_10000AE00(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_10000AE08@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_10000AE1C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_10000AE30@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_10000AE44(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_10000AE74@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_10000AEA0@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_10000AEC4(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *sub_10000AED8(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *sub_10000AEEC(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *sub_10000AF00@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10000AF14(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_10000AF28(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_10000AF3C(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_10000AF50()
{
  return *v0 == 0;
}

uint64_t sub_10000AF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_DWORD *sub_10000AF78(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

BOOL static AUAError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL sub_10000AFA0(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

unsigned __int8 *sub_10000AFB4@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_10000AFC4(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

_DWORD *sub_10000AFD0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

Swift::Int sub_10000AFE0()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10000B028()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10000B054()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10000B098@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3 = sub_10000B7D4(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void sub_10000B0D8(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

_DWORD *sub_10000B0E4@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void *sub_10000B0F0(void *a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4 >= 9)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v7 = 96;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0xE000000000000000;
    *(void *)(v7 + 24) = 0xD00000000000003FLL;
    *(void *)(v7 + 32) = 0x80000001000E0DE0;
    *(void *)(v7 + 40) = 0xD00000000000001FLL;
    *(void *)(v7 + 48) = 0x80000001000E0CD0;
    *(void *)(v7 + 56) = 30;
    return (void *)swift_willThrow();
  }
  if (a3 >> 61)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (!a4)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (a6 < 0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t result = _swiftEmptyArrayStorage;
  if (!a6) {
    return result;
  }
  unint64_t v13 = 8 * a3 / a4;
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!is_mul_ok(v13, a2)) {
    goto LABEL_24;
  }
  if (((v13 * a2) & 0x8000000000000000) != 0)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  id v14 = sub_100005D78(a1, v13 * a2);
  if (v6) {
    return (void *)swift_release();
  }
  if (!is_mul_ok(v13, 0x1CuLL)) {
    goto LABEL_26;
  }
  uint64_t v28 = v13 * a2;
  uint64_t v31 = 28 * v13;
  if (((28 * v13) & 0x8000000000000000) == 0)
  {
    id v15 = v14;
    int v16 = 0;
    uint64_t v17 = &_mh_execute_header;
    unint64_t v29 = HIDWORD(v13);
    int v30 = v13;
    uint64_t v18 = 1;
    unint64_t v27 = a1;
    while (1)
    {
      uint64_t v19 = v18;
      id v20 = [objc_allocWithZone((Class)NSMutableData) initWithLength:v31];
      if (!v20) {
        goto LABEL_28;
      }
      if (!v17) {
        goto LABEL_29;
      }
      unint64_t v21 = v20;
      id v22 = v15;
      id v23 = [v22 mutableBytes];
      id v24 = v21;
      id v25 = [v24 mutableBytes];
      if (v29) {
        goto LABEL_29;
      }
      *(_DWORD *)a5 = v16;
      *(void *)(a5 + 8) = v23;
      *(void *)(a5 + 16) = v25;
      *(_DWORD *)(a5 + 24) = v30;
      *(_DWORD *)(a5 + 28) = 0;
      *(_OWORD *)(a5 + 32) = xmmword_1000E80B0;
      *(unsigned char *)(a5 + 48) = 0;
      *(void *)(a5 + 56) = 0;
      *(void *)(a5 + 64) = 0;
      *(void *)(a5 + 72) = 0x7FFFFFFF00000000;
      *(_WORD *)(a5 + 80) = 256;
      type metadata accessor for AUATransferManagerTransferBlock();
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 40) = 0;
      *(void *)(v26 + 48) = 0;
      *(unsigned char *)(v26 + 56) = 1;
      *(void *)(v26 + 16) = a5;
      *(void *)(v26 + 24) = v22;
      *(void *)(v26 + 32) = v24;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v19 == a6) {
        return _swiftEmptyArrayStorage;
      }
      uint64_t v18 = v19 + 1;
      id v15 = sub_100005D78(v27, v28);
      a5 += 88;
      uint64_t v17 = (const mach_header_64 *)((char *)v17 - 1);
      int v16 = v19;
    }
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10000B410(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 < 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t result = _swiftEmptyArrayStorage;
  if (!a4) {
    return result;
  }
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!is_mul_ok(a2, 0x1CuLL)) {
    goto LABEL_15;
  }
  if (((28 * a2) & 0x8000000000000000) != 0)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  id v8 = [objc_allocWithZone((Class)NSMutableData) initWithLength:28 * a2];
  if (v8)
  {
    id v9 = v8;
    int v10 = 0;
    char v11 = &_mh_execute_header;
    uint64_t v12 = 1;
    while (v11)
    {
      uint64_t v13 = v12;
      id v14 = a1;
      id v15 = [v14 mutableBytes];
      id v16 = v9;
      id v17 = [v16 mutableBytes];
      if (HIDWORD(a2)) {
        break;
      }
      *(_DWORD *)a3 = v10;
      *(void *)(a3 + 8) = v15;
      *(void *)(a3 + 16) = v17;
      *(void *)(a3 + 24) = a2;
      *(_OWORD *)(a3 + 32) = xmmword_1000E80B0;
      *(unsigned char *)(a3 + 48) = 0;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 64) = 0;
      *(void *)(a3 + 72) = 0x7FFFFFFF00000000;
      *(_WORD *)(a3 + 80) = 256;
      type metadata accessor for AUATransferManagerTransferBlock();
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 40) = 0;
      *(void *)(v18 + 48) = 0;
      *(unsigned char *)(v18 + 56) = 1;
      *(void *)(v18 + 16) = a3;
      *(void *)(v18 + 24) = v14;
      *(void *)(v18 + 32) = v16;
      id v19 = v14;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v13 == a4) {
        return _swiftEmptyArrayStorage;
      }
      uint64_t v12 = v13 + 1;
      id v9 = [objc_allocWithZone((Class)NSMutableData) initWithLength:28 * a2];
      a3 += 88;
      char v11 = (const mach_header_64 *)((char *)v11 - 1);
      int v10 = v13;
      if (!v9) {
        goto LABEL_11;
      }
    }
    goto LABEL_17;
  }
LABEL_11:
  __break(1u);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10000B65C(id a1, id a2, void *a3)
{
  sub_10002E804(0xD000000000000019, 0x80000001000E0C80, 0xD000000000000023, (void *)0x80000001000E0CA0, 0xD00000000000001FLL, 0x80000001000E0CD0, 80);
  if ([a1 direction] == 1768845428)
  {
    type metadata accessor for AUAInputTransferManager();
    uint64_t v7 = swift_allocObject();
    a1 = a1;
    a2 = a2;
    id v8 = a3;
    a3 = (void *)v7;
    sub_100006204(a1, (char *)a2, v8);
    if (!v3) {
      return v7;
    }
    swift_unexpectedError();
    __break(1u);
  }
  type metadata accessor for AUAOutputTransferManager();
  uint64_t v7 = swift_allocObject();
  sub_100009430(a1, (char *)a2, a3);
  if (!v3) {
    return v7;
  }
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_10000B7D4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = result;
  LODWORD(result) = 0;
  uint64_t v3 = (int *)(v2 + 32);
  do
  {
    int v5 = *v3++;
    int v4 = v5;
    if ((v5 & ~result) == 0) {
      int v4 = 0;
    }
    uint64_t result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

unint64_t sub_10000B80C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10000AC7C(&qword_100127498);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_WORD *)(a1 + 40); ; i += 8)
    {
      uint64_t v5 = *((void *)i - 1);
      __int16 v6 = *i;
      unint64_t result = sub_100019A14(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      *(_WORD *)(v3[7] + 2 * result) = v6;
      uint64_t v9 = v3[2];
      BOOL v10 = __OFADD__(v9, 1);
      uint64_t v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t type metadata accessor for AUATransferManagerTransferBlock()
{
  return self;
}

uint64_t type metadata accessor for AUATransferManager()
{
  return self;
}

uint64_t type metadata accessor for AUAInputTransferManager()
{
  return self;
}

uint64_t type metadata accessor for AUAOutputTransferManager()
{
  return self;
}

uint64_t sub_10000B974(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

void type metadata accessor for IOUSBBOSDescriptor(uint64_t a1)
{
}

__n128 sub_10000B9A0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

void type metadata accessor for IOUSBDeviceDescriptor(uint64_t a1)
{
}

uint64_t sub_10000B9C8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

void type metadata accessor for IOUSBConfigurationDescriptor(uint64_t a1)
{
}

__n128 sub_10000B9F0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10000BA04(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000BA24(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 28) = v3;
  return result;
}

void type metadata accessor for IOUSBHostIsochronousTransaction(uint64_t a1)
{
}

uint64_t sub_10000BA68(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)__n128 result = v2;
  return result;
}

void type metadata accessor for ADC3ASEndpointDescriptor(uint64_t a1)
{
}

uint64_t sub_10000BA90(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 7) = *(_DWORD *)((char *)a2 + 7);
  *(void *)__n128 result = v2;
  return result;
}

void type metadata accessor for ADC3ValidFrequencyRangeDescriptor(uint64_t a1)
{
}

__n128 sub_10000BAB8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 15) = *(void *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10000BACC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 23)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000BAEC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 22) = 0;
    *(_WORD *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 23) = v3;
  return result;
}

void type metadata accessor for ADC3ASInterfaceDescriptor(uint64_t a1)
{
}

void *initializeBufferWithCopyOfBuffer for ADC3ClusterDescriptorSegment(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

void type metadata accessor for ADC2ASEndpointDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC2DecoderDescriptor(uint64_t a1)
{
}

uint64_t sub_10000BB68(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000BB88(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 18) = v3;
  return result;
}

void type metadata accessor for ADC2EncoderDescriptor(uint64_t a1)
{
}

uint64_t sub_10000BBC8(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)__n128 result = v2;
  return result;
}

void type metadata accessor for ADC2FormatTypeIDescriptor(uint64_t a1)
{
}

__n128 sub_10000BBF0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for ADC2AudioStreamingInterfaceDescriptor(uint64_t a1)
{
}

_DWORD *sub_10000BC10(_DWORD *result, int *a2)
{
  int v2 = *a2;
  *(_DWORD *)((char *)result + 3) = *(int *)((char *)a2 + 3);
  *__n128 result = v2;
  return result;
}

void type metadata accessor for ADC1ASEndpointDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC1FormatSpecificHeaderDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC3ConnectorsDescriptor(uint64_t a1)
{
}

uint64_t sub_10000BC60(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000BC80(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 10) = v3;
  return result;
}

void type metadata accessor for ADC3ACInterfaceHeader(uint64_t a1)
{
}

void type metadata accessor for ADC2AudioControlInterfaceHeaderDescriptor(uint64_t a1)
{
}

void type metadata accessor for AudioInterfaceProtocol(uint64_t a1)
{
}

uint64_t sub_10000BCE8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000BD08(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

void type metadata accessor for ADC1ASStdEndpointExt(uint64_t a1)
{
}

void type metadata accessor for IOUSBInterfaceAssociationDescriptor(uint64_t a1)
{
}

void type metadata accessor for AudioFunctionProtocol(uint64_t a1)
{
}

void type metadata accessor for IOUSBInterfaceDescriptor(uint64_t a1)
{
}

void type metadata accessor for IOUSBSuperSpeedPlusIsochronousEndpointCompanionDescriptor(uint64_t a1)
{
}

void type metadata accessor for IOUSBSuperSpeedEndpointCompanionDescriptor(uint64_t a1)
{
}

uint64_t sub_10000BDAC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 7)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000BDCC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 6) = 0;
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 7) = v3;
  return result;
}

void type metadata accessor for IOUSBEndpointDescriptor(uint64_t a1)
{
}

__n128 initializeBufferWithCopyOfBuffer for AUAZTSWrap(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AUAZTSWrap(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AUAZTSWrap(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AUAZTSWrap()
{
  return &type metadata for AUAZTSWrap;
}

__n128 initializeWithTake for MixerUnit(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t sub_10000BE98(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 88)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_10000BEEC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 88) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for AUATransferManagerRTTransferBlock(uint64_t a1)
{
}

void type metadata accessor for ChannelRelationship(uint64_t a1)
{
}

void type metadata accessor for ADC4ClusterChannelDescriptionSegment(uint64_t a1)
{
}

void type metadata accessor for ADC4ClusterChannelAmbisonicSegment(uint64_t a1)
{
}

_DWORD *sub_10000BF94(_DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t sub_10000BFA0(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000BFC0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 4) = v3;
  return result;
}

void type metadata accessor for ADC4ClusterEndBlockSegment(uint64_t a1)
{
}

void type metadata accessor for ADC4AudioStreamingValidFrequencyRangeDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC4AudioStreamingSelfDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC4ClassSpecificAudioStreamingInterfaceDescriptor(uint64_t a1)
{
}

__n128 sub_10000C038(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void type metadata accessor for ADC4ConnectorEntityDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC4TerminalCompanionChannelPositionRThetaPhiSegment(uint64_t a1)
{
}

void type metadata accessor for ADC4TerminalCompanionChannelPositionXYZSegment(uint64_t a1)
{
}

void type metadata accessor for ADC4TerminalCompanionChannelMagnitudePhaseSegmentPoint(uint64_t a1)
{
}

void type metadata accessor for ADC4TerminalCompanionChannelMagnitudePhaseSegment(uint64_t a1)
{
}

void type metadata accessor for ADC4TerminalCompanionChannelMagnitudeSegmentPoint(uint64_t a1)
{
}

void type metadata accessor for ADC4TerminalCompanionChannelMagnitudeSegment(uint64_t a1)
{
}

uint64_t sub_10000C0D8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

void type metadata accessor for ADC4TerminalCompanionChannelBandwidthSegment(uint64_t a1)
{
}

void type metadata accessor for ADC4TerminalCompanionEN50322_2Segment(uint64_t a1)
{
}

void type metadata accessor for ADC4TerminalCompanionDescriptorSegmentHeader(uint64_t a1)
{
}

void *sub_10000C128(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 6) = *(uint64_t *)((char *)a2 + 6);
  *__n128 result = v2;
  return result;
}

void type metadata accessor for ADC4TerminalCompanionDescriptorHeader(uint64_t a1)
{
}

__n128 sub_10000C150(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_10000C164(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 34)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000C184(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 34) = v3;
  return result;
}

void type metadata accessor for ADC4PowerDomainEntityDescriptor(uint64_t a1)
{
}

__n128 sub_10000C1C8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 14) = *(void *)(a2 + 14);
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for ADC4SamplingRateConverterUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC4ClockSelectorDescriptor(uint64_t a1)
{
}

uint64_t sub_10000C204(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 22)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000C224(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 22) = v3;
  return result;
}

void type metadata accessor for ADC4ClockSourceDescriptor(uint64_t a1)
{
}

__n128 sub_10000C268(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_10000C27C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 36)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000C29C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 36) = v3;
  return result;
}

void type metadata accessor for ADC4ExtensionUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC4ProcessingUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC4EffectUnitDescriptor(uint64_t a1)
{
}

uint64_t sub_10000C308(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 14)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000C328(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 14) = v3;
  return result;
}

void type metadata accessor for ADC4FeatureUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC4SelectorUnitDescriptor(uint64_t a1)
{
}

__n128 sub_10000C380(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t sub_10000C394(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000C3B4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 20) = v3;
  return result;
}

void type metadata accessor for ADC4MixerUnitDescriptor(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for ClockRateRange(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ClockRateRange(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void type metadata accessor for ADC4OutputTerminalDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC4InputTerminalDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC4InputTerminalDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC4AudioControlSelfDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC4ClassSpecificAudioControlInterfaceDescriptor(uint64_t a1)
{
}

void type metadata accessor for tIOUSBHostConnectionSpeed(uint64_t a1)
{
}

void type metadata accessor for ADC1ASFormatTypeDescriptorHeader(uint64_t a1)
{
}

void type metadata accessor for ADC1FormatTypeIIIDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC1FormatTypeIDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC1ASInterfaceDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC1ProcessingUnitDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC1ProcessingUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC1ExtensionUnitDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC1ExtensionUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC1FeatureUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC1SelectorUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC1MixerUnitDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC1MixerUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC1OutputTerminalDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC1InputTerminalDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC1ACInterfaceHeaderDescriptor(uint64_t a1)
{
}

uint64_t sub_10000C5E4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000C604(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 5) = v3;
  return result;
}

void type metadata accessor for ADC3ClusterClusterDescriptionSegment(uint64_t a1)
{
}

void type metadata accessor for ADC3PowerDomainDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC3SRConverterUnitDescriptor(uint64_t a1)
{
}

uint64_t sub_10000C66C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 11)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000C68C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 11) = v3;
  return result;
}

void type metadata accessor for ADC3ClockMultiplierDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC3ClockSelectorDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC3ClockSelectorDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC3ClockSourceDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC3ExtensionUnitDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC3ExtensionUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC3ProcessingUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC3EffectUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC3FeatureUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC3SelectorUnitDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC3SelectorUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC3MixerUnitDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC3MixerUnitDescriptor(uint64_t a1)
{
}

__n128 sub_10000C7C0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10000C7D4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 19)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000C7F4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 18) = 0;
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 19) = v3;
  return result;
}

void type metadata accessor for ADC3OutputTerminalDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC3InputTerminalDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC4ClusterChannelInformationSegment(uint64_t a1)
{
}

void type metadata accessor for ADC4ClusterDescriptorSegmentHeader(uint64_t a1)
{
}

void type metadata accessor for ADC4ClusterDescriptorHeader(uint64_t a1)
{
}

void type metadata accessor for ADC4ExtendedDescriptorHeader(uint64_t a1)
{
}

void type metadata accessor for ADC3ClusterChannelDescriptionSegment(uint64_t a1)
{
}

void type metadata accessor for ADC3ClusterChannelAmbiosonicSegment(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for USBDescriptorControl(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)__n128 result = v2;
  return result;
}

void type metadata accessor for ADC3ClusterEndSegment(uint64_t a1)
{
}

void type metadata accessor for ADC3ClusterChannelInformationSegment(uint64_t a1)
{
}

void type metadata accessor for ADC3ClusterDescriptorSegmentHeader(uint64_t a1)
{
}

void type metadata accessor for ADC3ClusterDescriptorHeader(uint64_t a1)
{
}

void type metadata accessor for ADC3HighCapabilityDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADCClassSpecificDescriptorHeader(uint64_t a1)
{
}

_WORD *initializeBufferWithCopyOfBuffer for ErrataKey(_WORD *result, _WORD *a2)
{
  *__n128 result = *a2;
  return result;
}

void type metadata accessor for IOUSBDescriptorHeader(uint64_t a1)
{
}

void type metadata accessor for tIOUSBDescriptorType(uint64_t a1)
{
}

void type metadata accessor for ADC2ClockMultiplierDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC2ClockSelectorDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC2ClockSelectorDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC2ClockSourceDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC2ExtensionUnitDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC2ExtensionUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC2ProcessingUnitDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC2ProcessingUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC2EffectUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC2SRConverterUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC2FeatureUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC2SelectorUnitDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC2SelectorUnitDescriptor(uint64_t a1)
{
}

uint64_t sub_10000CA98(unsigned __int16 *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if ((a2 + 0xFFFF) < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        return 0;
      }
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }
  return 0;
}

uint64_t sub_10000CB08(uint64_t result, int a2, int a3)
{
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if ((a3 + 0xFFFF) < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    unsigned int v6 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)__n128 result = a2 - 1;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        return result;
      case 2:
        *(_WORD *)(result + 2) = v6;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)(result + 2) = v6;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *(unsigned char *)(result + 2) = 0;
      break;
    case 2:
      *(_WORD *)(result + 2) = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10000CBBCLL);
    case 4:
      *(_DWORD *)(result + 2) = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for ADC2MixerUnitDescriptorPart3(uint64_t a1)
{
}

void type metadata accessor for ADC2MixerUnitDescriptorPart2(uint64_t a1)
{
}

void type metadata accessor for ADC2MixerUnitDescriptor(uint64_t a1)
{
}

void type metadata accessor for ADC2OutputTerminalDescriptor(uint64_t a1)
{
}

__n128 initializeBufferWithCopyOfBuffer for ADC4ClusterDescriptorSegment(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t sub_10000CC48(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000CC68(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 17) = v3;
  return result;
}

void type metadata accessor for ADC2InputTerminalDescriptor(uint64_t a1)
{
}

void type metadata accessor for tIOUSBEndpointUsageType(uint64_t a1)
{
}

void type metadata accessor for tIOUSBEndpointSynchronizationType(uint64_t a1)
{
}

void type metadata accessor for tIOUSBEndpointType(uint64_t a1)
{
}

void type metadata accessor for tIOUSBEndpointDirection(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

uint64_t sub_10000CD0C()
{
  return sub_10000D6E0(&qword_1001273F0, type metadata accessor for AudioInterfaceProtocol);
}

unint64_t sub_10000CD54()
{
  unint64_t result = qword_100127418;
  if (!qword_100127418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100127418);
  }
  return result;
}

_OWORD *sub_10000CDA8(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10000CDB8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000CDF0()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_10000CE14@<X0>(void *a1@<X8>)
{
  return sub_10000E414(v1, a1);
}

void *sub_10000CE30@<X0>(void *a1@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_10000CE74()
{
  return _swift_deallocObject(v0, 24, 7);
}

unint64_t sub_10000CEAC()
{
  return sub_100008860(*(void *)(v0 + 16));
}

uint64_t sub_10000CEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000CEC4()
{
  return swift_release();
}

uint64_t sub_10000CECC(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10000CF08(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000AC7C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000CF6C(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t sub_10000CF84(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10000AC7C(&qword_1001274A8);
    long long v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (unsigned char *)(a1 + 40); ; i += 16)
    {
      uint64_t v5 = *((void *)i - 1);
      char v6 = *i;
      unint64_t result = sub_100019A14(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      *(unsigned char *)(v3[7] + result) = v6;
      uint64_t v9 = v3[2];
      BOOL v10 = __OFADD__(v9, 1);
      uint64_t v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_10000D05C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_10000AC7C(&qword_1001274A0);
  long long v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  int v4 = *(unsigned __int8 *)(a1 + 32);
  int v5 = *(unsigned __int8 *)(a1 + 33);
  uint64_t v6 = *(void *)(a1 + 40);
  unint64_t result = sub_100019A58(v4 | (v5 << 8));
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = (unsigned __int8 *)(a1 + 48);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v10 = (unsigned char *)(v3[6] + 2 * result);
    *BOOL v10 = v4;
    v10[1] = v5;
    *(void *)(v3[7] + 8 * result) = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    id v14 = v9 + 16;
    int v4 = *v9;
    int v5 = v9[1];
    uint64_t v15 = *((void *)v9 + 1);
    swift_bridgeObjectRetain();
    unint64_t result = sub_100019A58(v4 | (v5 << 8));
    uint64_t v9 = v14;
    uint64_t v6 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for AudioClassRange32bit(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AudioClassRange32bit(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 12) = v3;
  return result;
}

void type metadata accessor for Layout3SubRange(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for AudioClassRange16bit(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 6)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AudioClassRange16bit(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 6) = v3;
  return result;
}

void type metadata accessor for Layout2SubRange(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for AudioClassRange8bit(unsigned __int16 *a1, int a2)
{
  if (a2)
  {
    if ((a2 + 0x1FFFFFF) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 0xFFFFFF;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 0xFFFFFF;
      }
    }
  }
  return 0;
}

uint64_t storeEnumTagSinglePayload for AudioClassRange8bit(uint64_t result, int a2, int a3)
{
  if ((a3 + 0x1FFFFFF) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (!a3) {
    int v3 = 0;
  }
  if (a2)
  {
    *(_WORD *)unint64_t result = a2 - 1;
    *(unsigned char *)(result + 2) = (a2 - 1) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 1) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else if (v3)
  {
    if (v3 == 2) {
      *(_WORD *)(result + 3) = 0;
    }
    else {
      *(unsigned char *)(result + 3) = 0;
    }
  }
  return result;
}

void type metadata accessor for Layout1SubRange(uint64_t a1)
{
}

void type metadata accessor for ADC3ClockSelectorControl(uint64_t a1)
{
}

void type metadata accessor for ADC3ClockSourceControl(uint64_t a1)
{
}

void type metadata accessor for ADC3ExtensionUnitControl(uint64_t a1)
{
}

void type metadata accessor for ADC3MixerUnitControl(uint64_t a1)
{
}

void type metadata accessor for ADC3OutputTerminalControl(uint64_t a1)
{
}

void type metadata accessor for ADC3InputTerminalControl(uint64_t a1)
{
}

void type metadata accessor for ADC2ClockSelectorControl(uint64_t a1)
{
}

void type metadata accessor for ADC2ClockSourceControl(uint64_t a1)
{
}

void type metadata accessor for ADC2ExtensionUnitControl(uint64_t a1)
{
}

void type metadata accessor for ADC2MixerUnitControl(uint64_t a1)
{
}

void type metadata accessor for ADC2OutputTerminalControl(uint64_t a1)
{
}

void type metadata accessor for ADC2InputTerminalControl(uint64_t a1)
{
}

void type metadata accessor for ADC1ProcessingUnitControl(uint64_t a1)
{
}

__n128 sub_10000D410(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + 176) = v10;
  return result;
}

uint64_t sub_10000D44C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 224)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000D46C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 224) = v3;
  return result;
}

void type metadata accessor for AudioServerPlugInIOCycleInfo(uint64_t a1)
{
}

__n128 sub_10000D4E4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_10000D4F8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

void type metadata accessor for C46L06HVCICommandResponse(uint64_t a1)
{
}

__n128 initializeWithTake for StreamingInterface(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_10000D55C(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10000D5A4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for AudioServerPlugInHostInterface(uint64_t a1)
{
}

uint64_t sub_10000D600(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000D620(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

void type metadata accessor for IOUSBDeviceRequest(uint64_t a1)
{
}

void type metadata accessor for ADC2ClusterControlCURPB(uint64_t a1)
{
}

void type metadata accessor for IOUSBHostIsochronousTransactionOptions(uint64_t a1)
{
}

void type metadata accessor for ADC4PowerDomainEntryExitTime(uint64_t a1)
{
}

uint64_t sub_10000D698()
{
  return sub_10000D6E0(&qword_100127568, type metadata accessor for IOUSBHostIsochronousTransactionOptions);
}

uint64_t sub_10000D6E0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000D728()
{
  return sub_10000D6E0(&qword_100127570, type metadata accessor for IOUSBHostIsochronousTransactionOptions);
}

uint64_t sub_10000D770()
{
  return sub_10000D6E0(&qword_100127578, type metadata accessor for IOUSBHostIsochronousTransactionOptions);
}

uint64_t sub_10000D7B8()
{
  return sub_10000D6E0(&qword_100127580, type metadata accessor for IOUSBHostIsochronousTransactionOptions);
}

void type metadata accessor for CFString(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for AudioClassRange32bit(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t result = v2;
  return result;
}

void type metadata accessor for AudioObjectPropertyAddress(uint64_t a1)
{
}

void type metadata accessor for AudioServerPlugInIOCycleInfo.__Unnamed_union___Anonymous_field5(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for Endpoint(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 initializeWithTake for ClockSource(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_10000D898(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for AudioTimeStamp(uint64_t a1)
{
}

void type metadata accessor for AudioTimeStampFlags(uint64_t a1)
{
}

__n128 sub_10000D8E0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void type metadata accessor for SMPTETime(uint64_t a1)
{
}

void type metadata accessor for SMPTETimeFlags(uint64_t a1)
{
}

void type metadata accessor for SMPTETimeType(uint64_t a1)
{
}

void sub_10000D930(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_10000DA28()
{
  uint64_t v0 = type metadata accessor for OSSignposter();
  sub_10001AC94(v0, qword_10012B1B8);
  sub_10000AD60(v0, (uint64_t)qword_10012B1B8);
  return OSSignposter.init(subsystem:category:)();
}

uint64_t sub_10000DAA4()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_10000DAE4(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v26 = a1;
  uint64_t v5 = type metadata accessor for OSSignpostID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OSSignposter();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  BOOL v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001268E0 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_10000AD60(v9, (uint64_t)qword_10012B1B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  uint64_t v29 = v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3 + OBJC_IVAR____TtC9AUASDCore16AUASampleManager_signpostID, v5);
  swift_retain_n();
  swift_retain_n();
  uint64_t v14 = swift_slowAlloc();
  *(_DWORD *)uint64_t v14 = 134218496;
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  uint64_t v30 = v5;
  uint64_t v27 = v10;
  uint64_t v28 = v9;
  if (Strong)
  {
    char v16 = Strong;
    [Strong samplingRate];
    uint64_t v18 = v17;
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v31 = v18;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  *(_WORD *)(v14 + 12) = 2048;
  uint64_t v19 = *(void *)(a2 + 96);
  swift_release();
  uint64_t v31 = v19;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  *(_WORD *)(v14 + 22) = 2048;
  uint64_t v20 = *(void *)(a2 + 104);
  swift_release();
  uint64_t v31 = v20;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  unint64_t v21 = OSSignposter.logHandle.getter();
  LOBYTE(v19) = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v22 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, (os_signpost_type_t)v19, v22, "AUASampleManager_prepareSampleManager", "samplingRate %f, transfersPerMS %lu, MSPerTransfer %lu", (uint8_t *)v14, 0x20u);
  sub_10000DE9C(v3, (os_unfair_lock_s *)a2, v26);
  LOBYTE(v19) = static os_signpost_type_t.end.getter();
  os_signpost_id_t v23 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, (os_signpost_type_t)v19, v23, "AUASampleManager_prepareSampleManager", "samplingRate %f, transfersPerMS %lu, MSPerTransfer %lu", (uint8_t *)v14, 0x20u);

  swift_slowDealloc();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v12, v28);
}

void sub_10000DE9C(uint64_t a1, os_unfair_lock_s *a2, void *a3)
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    goto LABEL_6;
  }
  long long v8 = Strong;
  [Strong samplingRate];
  double v10 = v9;

  if ((~*(void *)&v10 & 0x7FF0000000000000) == 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (v10 <= -1.0)
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v10 >= 1.84467441e19)
  {
    __break(1u);
LABEL_6:
    double v10 = 0.0;
  }
  unint64_t v11 = (unint64_t)v10;
  unint64_t v12 = *(void *)&a2[26]._os_unfair_lock_opaque;
  if (!is_mul_ok((unint64_t)v10, v12))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  unint64_t v13 = *(void *)&a2[24]._os_unfair_lock_opaque;
  if (!is_mul_ok(v13, 0x3E8uLL))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  unint64_t v14 = 1000 * v13;
  if (!(1000 * v13))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  unint64_t v15 = v11 * v12;
  unint64_t v16 = v11 * v12 / v14;
  *(void *)(a1 + 32) = v16;
  if (!is_mul_ok(v16, v14))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  unint64_t v17 = v16 * v14;
  BOOL v18 = v15 >= v17;
  unint64_t v19 = v15 - v17;
  if (!v18) {
    goto LABEL_38;
  }
  if (HIWORD(v19))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (!v13)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v20 = (v19 << 16) / v13;
  *(void *)(a1 + 40) = v20;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = 8 * v13;
  *(void *)(a1 + 80) = v16;
  *(void *)(a1 + 88) = v20;
  unint64_t v21 = *(const IOUSBEndpointDescriptor **)&a2[4]._os_unfair_lock_opaque;
  int v22 = IOUSBGetEndpointSynchronizationType(v21);
  if (!v22)
  {
    if (IOUSBGetEndpointDirection(v21) == 1) {
      int v22 = 1;
    }
    else {
      int v22 = 3;
    }
  }
  *(unsigned char *)(a1 + 112) = v22 == 1;
  swift_beginAccess();
  *(void *)(a1 + 96) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakAssign();
  os_signpost_id_t v23 = [a3 physicalFormat];
  if (!v23) {
    goto LABEL_28;
  }
  id v24 = v23;
  type metadata accessor for AUAStreamFormat();
  uint64_t v25 = swift_dynamicCastClass();
  if (!v25) {
    goto LABEL_27;
  }
  a2 = *(os_unfair_lock_s **)(v25 + OBJC_IVAR___AUAStreamFormat_altSetting);
  swift_retain();

  if (!a2) {
    goto LABEL_28;
  }
  id v24 = *(void **)&a2[28]._os_unfair_lock_opaque;
  swift_retain();
  os_signpost_id_t v23 = (void *)swift_release();
  if (!v24) {
    goto LABEL_28;
  }
  unint64_t v26 = v24[13];
  os_signpost_id_t v23 = (void *)swift_release();
  unint64_t v27 = *(void *)(a1 + 56);
  if (!v27)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  unint64_t v28 = v26 / v27;
  unint64_t v29 = *(void *)(a1 + 64);
  if (!is_mul_ok(v28, v29))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  unint64_t v30 = v28 * v29;
  if ((v30 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_27:

LABEL_28:
    unint64_t v30 = 0;
  }
  *(void *)(a1 + 120) = v30;
  if (*(unsigned char *)(a1 + 112) == 1)
  {
    uint64_t v31 = *(os_unfair_lock_s **)(a1 + 104);
    __chkstk_darwin(v23);
    a2 = v31 + 4;
    swift_retain();
    os_unfair_lock_lock(v31 + 4);
    sub_10001AD4C();
    if (v3)
    {
LABEL_44:
      os_unfair_lock_unlock(a2);
      __break(1u);
      return;
    }
    os_unfair_lock_unlock(v31 + 4);
    swift_release();
  }
}

void sub_10000E18C(void *a1)
{
  unint64_t v1 = a1[9];
  if (v1 >> 61)
  {
LABEL_30:
    __break(1u);
    return;
  }
  unint64_t v3 = 8 * v1;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    goto LABEL_7;
  }
  uint64_t v5 = (void *)Strong;
  uint64_t v6 = *(void *)(Strong + OBJC_IVAR___AUAAudioDevice_function);
  uint64_t v7 = *(void *)(Strong + OBJC_IVAR___AUAAudioDevice_function + 8);
  swift_unknownObjectRetain();

  if (!v6
    || (uint64_t ObjectType = swift_getObjectType(),
        double v9 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7),
        swift_unknownObjectRelease(),
        !v9))
  {
LABEL_7:
    if (v3) {
      goto LABEL_8;
    }
    return;
  }
  uint64_t v10 = *(void *)&v9[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
  if (v10)
  {
    BOOL v11 = sub_10001925C(29, v10);

    v3 >>= v11;
    goto LABEL_7;
  }

  if (v3)
  {
LABEL_8:
    unint64_t v12 = (void **)(a1 + 12);
    while (1)
    {
      uint64_t v13 = a1[5];
      uint64_t v14 = a1[6];
      BOOL v15 = __CFADD__(v14, v13);
      unint64_t v16 = v14 + v13;
      if (v15) {
        break;
      }
      a1[6] = v16;
      uint64_t v17 = a1[4];
      if (v16 < 0x3E80001)
      {
        swift_beginAccess();
        uint64_t v25 = *v12;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *unint64_t v12 = v25;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v25 = sub_100058C0C(0, v25[2] + 1, 1, v25);
          *unint64_t v12 = v25;
        }
        unint64_t v28 = v25[2];
        unint64_t v27 = v25[3];
        if (v28 >= v27 >> 1)
        {
          uint64_t v25 = sub_100058C0C((void *)(v27 > 1), v28 + 1, 1, v25);
          *unint64_t v12 = v25;
        }
        v25[2] = v28 + 1;
        v25[v28 + 4] = v17;
        swift_endAccess();
        if (!--v3) {
          return;
        }
      }
      else
      {
        BOOL v15 = __CFADD__(v17, 1);
        uint64_t v18 = v17 + 1;
        if (v15) {
          goto LABEL_28;
        }
        swift_beginAccess();
        unint64_t v19 = *v12;
        char v20 = swift_isUniquelyReferenced_nonNull_native();
        *unint64_t v12 = v19;
        if ((v20 & 1) == 0)
        {
          unint64_t v19 = sub_100058C0C(0, v19[2] + 1, 1, v19);
          *unint64_t v12 = v19;
        }
        unint64_t v22 = v19[2];
        unint64_t v21 = v19[3];
        if (v22 >= v21 >> 1)
        {
          unint64_t v19 = sub_100058C0C((void *)(v21 > 1), v22 + 1, 1, v19);
          *unint64_t v12 = v19;
        }
        v19[2] = v22 + 1;
        v19[v22 + 4] = v18;
        swift_endAccess();
        unint64_t v23 = a1[6];
        BOOL v15 = v23 >= 0x3E80000;
        unint64_t v24 = v23 - 65536000;
        if (!v15) {
          goto LABEL_29;
        }
        a1[6] = v24;
        if (!--v3) {
          return;
        }
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
}

uint64_t sub_10000E414@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a2 = *(void *)(*(void *)(a1 + 96) + 16);
  return result;
}

void *sub_10000E470(int64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  size_t v41 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v39 - v9;
  BOOL v11 = _swiftEmptyArrayStorage;
  unint64_t v43 = _swiftEmptyArrayStorage;
  if (*(unsigned char *)(v2 + 112) == 1)
  {
    uint64_t v12 = v4;
    uint64_t v13 = *(os_unfair_lock_s **)(v2 + 104);
    uint64_t v14 = __chkstk_darwin(v8);
    *(&v39 - 2) = (char *)v2;
    *(&v39 - 1) = (char *)a1;
    __chkstk_darwin(v14);
    *(&v39 - 2) = (char *)sub_10001AAF0;
    *(&v39 - 1) = v15;
    swift_retain();
    os_unfair_lock_lock(v13 + 4);
    sub_10000CE30(&v42);
    os_unfair_lock_unlock(v13 + 4);
    BOOL v11 = v42;
    uint64_t v4 = v12;
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v43 = v11;
  }
  uint64_t v16 = v11[2];
  uint64_t v40 = (void *)a1;
  if (!v16)
  {
    if (*(unsigned char *)(v2 + 112) == 1) {
      sub_10002E804(0xD000000000000031, 0x80000001000E1C70, 0xD000000000000021, (void *)0x80000001000E1CB0, 0xD00000000000001BLL, 0x80000001000E1230, 181);
    }
    uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (!result || a1 > v11[3] >> 1)
    {
      if (v11[2] <= a1) {
        int64_t v18 = a1;
      }
      else {
        int64_t v18 = v11[2];
      }
      uint64_t result = sub_100058C0C(result, v18, 0, v11);
      BOOL v11 = result;
    }
    unint64_t v43 = v11;
    if (a1 < 0)
    {
      __break(1u);
      return result;
    }
    if (a1)
    {
      uint64_t v19 = v4;
      uint64_t v39 = v10;
      uint64_t v4 = 65536001;
      while (1)
      {
        uint64_t v22 = *(void *)(v2 + 40);
        uint64_t v23 = *(void *)(v2 + 48);
        BOOL v24 = __CFADD__(v23, v22);
        unint64_t v25 = v23 + v22;
        if (v24) {
          break;
        }
        *(void *)(v2 + 48) = v25;
        uint64_t v10 = *(char **)(v2 + 32);
        if (v25 < 0x3E80001)
        {
          unint64_t v21 = v11[2];
          unint64_t v20 = v11[3];
          if (v21 >= v20 >> 1) {
            BOOL v11 = sub_100058C0C((void *)(v20 > 1), v21 + 1, 1, v11);
          }
          v11[2] = v21 + 1;
          v11[v21 + 4] = v10;
          if (!--a1)
          {
LABEL_26:
            unint64_t v43 = v11;
            uint64_t v10 = v39;
            uint64_t v4 = v19;
            goto LABEL_27;
          }
        }
        else
        {
          BOOL v24 = __CFADD__(v10++, 1);
          if (v24) {
            goto LABEL_33;
          }
          unint64_t v27 = v11[2];
          unint64_t v26 = v11[3];
          if (v27 >= v26 >> 1) {
            BOOL v11 = sub_100058C0C((void *)(v26 > 1), v27 + 1, 1, v11);
          }
          v11[2] = v27 + 1;
          v11[v27 + 4] = v10;
          unint64_t v28 = *(void *)(v2 + 48);
          BOOL v24 = v28 >= 0x3E80000;
          unint64_t v29 = v28 - 65536000;
          if (!v24) {
            goto LABEL_34;
          }
          *(void *)(v2 + 48) = v29;
          if (!--a1) {
            goto LABEL_26;
          }
        }
      }
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
LABEL_27:
  if (qword_1001268E0 != -1) {
LABEL_35:
  }
    swift_once();
  uint64_t v30 = type metadata accessor for OSSignposter();
  sub_10000AD60(v30, (uint64_t)qword_10012B1B8);
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v31(v10, v2 + OBJC_IVAR____TtC9AUASDCore16AUASampleManager_signpostID, v4);
  uint64_t v32 = v43;
  swift_bridgeObjectRetain();
  char v33 = OSSignposter.logHandle.getter();
  os_signpost_type_t v34 = static os_signpost_type_t.event.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v35 = v41;
    v31(v41, (uint64_t)v10, v4);
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 134218240;
    uint64_t v42 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v36 + 12) = 2048;
    uint64_t v42 = (void *)v32[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_signpost_id_t v37 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, v34, v37, "AUASampleManager_getSampleCounts", "requested %ld, returned %ld", (uint8_t *)v36, 0x16u);
    swift_slowDealloc();

    char v38 = *(void (**)(char *, uint64_t))(v5 + 8);
    v38(v10, v4);
    v38(v35, v4);
  }
  else
  {
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  swift_beginAccess();
  return v43;
}

uint64_t sub_10000E998@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a1;
  unint64_t v6 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v7 = (uint64_t *)(a1 + 96);
  uint64_t result = swift_beginAccess();
  uint64_t v9 = *(void *)(v4 + 96);
  if (*(void *)(v9 + 16) >= a2)
  {
    if (a2 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v10 = swift_bridgeObjectRetain();
      sub_1000A6F84(v10, v9 + 32, 0, (2 * a2) | 1);
      swift_bridgeObjectRelease();
      uint64_t v4 = *v7;
      unint64_t v6 = *(void *)(*v7 + 16);
      if (v6 >= a2)
      {
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain_n();
        BOOL v11 = (void *)swift_dynamicCastClass();
        if (!v11)
        {
          swift_bridgeObjectRelease();
          BOOL v11 = _swiftEmptyArrayStorage;
        }
        uint64_t v12 = (void *)v11[2];
        swift_release();
        if (v12 == (void *)(v6 - a2))
        {
          uint64_t v13 = (void *)swift_dynamicCastClass();
          if (!v13)
          {
            swift_bridgeObjectRelease();
            uint64_t v13 = _swiftEmptyArrayStorage;
          }
          goto LABEL_9;
        }
LABEL_13:
        swift_bridgeObjectRelease();
        uint64_t v13 = sub_10005A9D0(v4, v4 + 32, a2, (2 * v6) | 1);
LABEL_9:
        swift_bridgeObjectRelease();
        *uint64_t v7 = (uint64_t)v13;
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
LABEL_10:
  *a3 = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_10000EB24()
{
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_1000A17B8(v0);
  return swift_endAccess();
}

uint64_t sub_10000EB8C(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 120);
  uint64_t v3 = *(void *)(result + 16);
  if ((unsigned __int128)(v2 * (__int128)v3) >> 64 == (v2 * v3) >> 63)
  {
    uint64_t v4 = result;
    uint64_t v5 = (uint64_t)sub_100058C0C(0, (v2 * v3) & ~((v2 * v3) >> 63), 0, _swiftEmptyArrayStorage);
    uint64_t v11 = v5;
    if (v3)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v3; ++i)
      {
        uint64_t v7 = v4 + 16 * i;
        long long v10 = *(_OWORD *)(v7 + 32);
        sub_10000ECF0((uint64_t *)&v10, (char *)v1, &v11);
      }
      uint64_t v5 = swift_bridgeObjectRelease();
    }
    uint64_t v8 = *(os_unfair_lock_s **)(v1 + 104);
    uint64_t v9 = __chkstk_darwin(v5);
    __chkstk_darwin(v9);
    swift_bridgeObjectRetain();
    swift_retain();
    os_unfair_lock_lock(v8 + 4);
    sub_10001AD4C();
    os_unfair_lock_unlock(v8 + 4);
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000ECF0(uint64_t *a1, char *a2, uint64_t *a3)
{
  uint64_t v6 = type metadata accessor for OSSignpostID();
  unint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v31 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t)&v29 - v10;
  uint64_t v12 = a1[1];
  uint64_t v34 = *a1;
  uint64_t v33 = v12;
  if (v34 | v12)
  {
    *((void *)a2 + 10) = v34;
    *((void *)a2 + 11) = v12;
  }
  else
  {
    uint64_t v13 = *((void *)a2 + 11);
    uint64_t v34 = *((void *)a2 + 10);
    uint64_t v33 = v13;
  }
  if (qword_1001268E0 != -1) {
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v14 = type metadata accessor for OSSignposter();
    sub_10000AD60(v14, (uint64_t)qword_10012B1B8);
    BOOL v15 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
    v15(v11, &a2[OBJC_IVAR____TtC9AUASDCore16AUASampleManager_signpostID], v6);
    uint64_t v29 = v34;
    uint64_t v16 = OSSignposter.logHandle.getter();
    int v30 = static os_signpost_type_t.event.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      v15((uint64_t)v31, (char *)v11, v6);
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 134218240;
      uint64_t v32 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 12) = 2048;
      swift_beginAccess();
      uint64_t v32 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      int64_t v18 = v31;
      os_signpost_id_t v19 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, (os_signpost_type_t)v30, v19, "AUASampleManager_addExplicitFeedbackSamples", "whole %lu, fraction %lu", (uint8_t *)v17, 0x16u);
      swift_slowDealloc();

      unint64_t v20 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      v7 += 8;
      v20(v11, v6);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v20)(v18, v6);
    }
    else
    {

      uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
      v7 += 8;
      uint64_t result = v22(v11, v6);
    }
    uint64_t v23 = *((void *)a2 + 15);
    if (v23 < 0) {
      break;
    }
    if (!v23) {
      return result;
    }
    swift_beginAccess();
    swift_beginAccess();
    uint64_t v11 = -65536000;
    while (1)
    {
      uint64_t v24 = *((void *)a2 + 6);
      unint64_t v25 = v24 + v33;
      if (__CFADD__(v24, v33)) {
        break;
      }
      uint64_t v6 = v34;
      *((void *)a2 + 6) = v25;
      if (v25 >= 0x3E80001)
      {
        if (__CFADD__(v6++, 1)) {
          goto LABEL_22;
        }
        *((void *)a2 + 6) = v25 - 65536000;
      }
      unint64_t v27 = (void *)*a3;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *a3 = (uint64_t)v27;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100058C0C(0, v27[2] + 1, 1, v27);
        unint64_t v27 = (void *)result;
        *a3 = result;
      }
      unint64_t v7 = v27[2];
      unint64_t v28 = v27[3];
      if (v7 >= v28 >> 1)
      {
        uint64_t result = (uint64_t)sub_100058C0C((void *)(v28 > 1), v7 + 1, 1, v27);
        unint64_t v27 = (void *)result;
      }
      v27[2] = v7 + 1;
      v27[v7 + 4] = v6;
      *a3 = (uint64_t)v27;
      if (!--v23) {
        return result;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    swift_once();
  }
  __break(1u);
  return result;
}

uint64_t sub_10000F0D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v5 = type metadata accessor for OSSignpostID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v11 = &v25[-v10];
  if (qword_1001268E0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for OSSignposter();
  sub_10000AD60(v12, (uint64_t)qword_10012B1B8);
  unint64_t v27 = v3;
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v13(v11, (char *)v3 + OBJC_IVAR____TtC9AUASDCore16AUASampleManager_signpostID, v5);
  swift_bridgeObjectRetain();
  uint64_t v14 = OSSignposter.logHandle.getter();
  int v15 = static os_signpost_type_t.event.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    v13(v9, v11, v5);
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 134218496;
    uint64_t v30 = *(void *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2048;
    int v26 = v15;
    uint64_t v17 = v28;
    uint64_t v30 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 22) = 2048;
    uint64_t v30 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_signpost_id_t v18 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, (os_signpost_type_t)v26, v18, "AUASampleManager_addImplicitFeedbackSamples", "num %ld, transfersPerMS %lu, MSPerTransfer %lu", (uint8_t *)v16, 0x20u);
    swift_slowDealloc();

    os_signpost_id_t v19 = *(void (**)(char *, uint64_t))(v6 + 8);
    v19(v11, v5);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v19)(v9, v5);
  }
  else
  {
    swift_bridgeObjectRelease();

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    uint64_t v17 = v28;
  }
  if (v27[8] == v17 && v27[7] == v29)
  {
    unint64_t v21 = (os_unfair_lock_s *)v27[13];
    uint64_t v22 = __chkstk_darwin(result);
    *(void *)&v25[-16] = v23;
    *(void *)&v25[-8] = a1;
    __chkstk_darwin(v22);
    *(void *)&v25[-16] = sub_10001AAAC;
    *(void *)&v25[-8] = v24;
    swift_retain();
    os_unfair_lock_lock(v21 + 4);
    sub_10001AAC8();
    os_unfair_lock_unlock(v21 + 4);
    return swift_release();
  }
  return result;
}

uint64_t sub_10000F454()
{
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC9AUASDCore16AUASampleManager_signpostID;
  uint64_t v2 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10000F514()
{
  uint64_t v1 = *(void **)(v0 + 16);
  [v1 stop];

  return swift_deallocClassInstance();
}

uint64_t AUAAudioDevice.function.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t AUAAudioDevice.streamingInterfaces.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AUAAudioDevice.functionProtocol.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR___AUAAudioDevice_function;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR___AUAAudioDevice_function);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType();
    unsigned __int8 v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40))(ObjectType, v3);
  }
  else
  {
    unsigned __int8 v5 = 0;
  }
  return v5 | ((v2 == 0) << 8);
}

void sub_10000F61C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6 = v5;
  unint64_t v132 = a5;
  uint64_t v128 = a4;
  uint64_t v130 = a3;
  uint64_t v9 = type metadata accessor for OSSignposter();
  uint64_t v126 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int v125 = (char *)&v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OSSignpostID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v5[OBJC_IVAR___AUAAudioDevice_lockDelayMS] = 0;
  *(void *)&v5[OBJC_IVAR___AUAAudioDevice_feedbackDelayMS] = 0;
  *(_DWORD *)&v5[OBJC_IVAR___AUAAudioDevice_clientDescriptionKind] = 0;
  *(void *)&v5[OBJC_IVAR___AUAAudioDevice_startingUSBDataFrame] = 0;
  *(void *)&v5[OBJC_IVAR___AUAAudioDevice_startingUSBLockDelayFrame] = 0;
  *(void *)&v5[OBJC_IVAR___AUAAudioDevice_startingUSBFeedbackFrame] = 0;
  *(void *)&v5[OBJC_IVAR___AUAAudioDevice_curZTSSeed] = 0;
  v116 = (void *)OBJC_IVAR___AUAAudioDevice_sampleManager;
  *(void *)&v5[OBJC_IVAR___AUAAudioDevice_sampleManager] = 0;
  uint64_t v118 = OBJC_IVAR___AUAAudioDevice_timeCorrelaterSession;
  *(void *)&v5[OBJC_IVAR___AUAAudioDevice_timeCorrelaterSession] = 0;
  uint64_t v120 = OBJC_IVAR___AUAAudioDevice_timeStampStream;
  *(void *)&v5[OBJC_IVAR___AUAAudioDevice_timeStampStream] = 0;
  uint64_t v15 = OBJC_IVAR___AUAAudioDevice_configChangedHandlers;
  sub_10000AC7C(&qword_100126950);
  uint64_t v16 = swift_allocObject();
  sub_10000AC7C(&qword_100126958);
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 16) = 0;
  *(void *)(v16 + 16) = v17;
  *(void *)(v16 + 24) = _swiftEmptyArrayStorage;
  v124 = (char *)v15;
  *(void *)&v6[v15] = v16;
  *(void *)&v6[OBJC_IVAR___AUAAudioDevice_lastZTSMach] = 0;
  *(void *)&v6[OBJC_IVAR___AUAAudioDevice_lastZTSDeltaNS] = 0;
  uint64_t v18 = qword_1001268E0;
  os_signpost_id_t v19 = v6;
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v127 = v9;
  uint64_t v117 = sub_10000AD60(v9, (uint64_t)qword_10012B1B8);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  unint64_t v20 = &v19[OBJC_IVAR___AUAAudioDevice_signpostID];
  unint64_t v21 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v129 = v14;
  v21(&v19[OBJC_IVAR___AUAAudioDevice_signpostID], v14, v11);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v23 = (*(uint64_t (**)(uint64_t, unint64_t))(a2 + 16))(ObjectType, a2);
  if (!v23)
  {
    swift_bridgeObjectRelease();
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v43 = 7;
    *(void *)(v43 + 8) = 0;
    *(void *)(v43 + 16) = 0xE000000000000000;
    *(void *)(v43 + 24) = 0xD000000000000029;
    *(void *)(v43 + 32) = 0x80000001000E17F0;
    *(void *)(v43 + 40) = 0xD00000000000001BLL;
    *(void *)(v43 + 48) = 0x80000001000E1230;
    *(void *)(v43 + 56) = 313;
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_release();

    swift_release();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);

    type metadata accessor for AUAAudioDevice(0);
    swift_deallocPartialClassInstance();
    return;
  }
  uint64_t v24 = (char *)v23;
  uint64_t v25 = v11;
  uint64_t v123 = v12;
  v124 = v19;
  uint64_t v122 = a1;
  unint64_t v26 = v132;
  if (v132 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v27 = *(void *)((v132 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v28 = v129;
  uint64_t v29 = (void **)_swiftEmptyArrayStorage;
  v131 = v24;
  uint64_t v121 = v25;
  unint64_t v119 = a2;
  if (v27)
  {
    long long aBlock = (void **)_swiftEmptyArrayStorage;
    sub_10007C314(0, v27 & ~(v27 >> 63), 0);
    if (v27 < 0)
    {
      __break(1u);
      goto LABEL_50;
    }
    uint64_t v30 = 0;
    uint64_t v29 = aBlock;
    unint64_t v31 = v26 & 0xC000000000000001;
    do
    {
      if (v31)
      {
        uint64_t v32 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v32 = *(void *)(v26 + 8 * v30 + 32);
        swift_retain();
      }
      char v140 = *(unsigned char *)(*(void *)(v32 + 32) + 2);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v35 = v34;
      swift_release();
      long long aBlock = v29;
      unint64_t v37 = (unint64_t)v29[2];
      unint64_t v36 = (unint64_t)v29[3];
      if (v37 >= v36 >> 1)
      {
        sub_10007C314(v36 > 1, v37 + 1, 1);
        uint64_t v29 = aBlock;
      }
      ++v30;
      v29[2] = (void *)(v37 + 1);
      char v38 = &v29[2 * v37];
      v38[4] = (void *)v33;
      v38[5] = v35;
      unint64_t v26 = v132;
    }
    while (v27 != v30);
    uint64_t v28 = v129;
    a2 = v119;
    uint64_t v24 = v131;
  }
  long long aBlock = v29;
  sub_10000AC7C(&qword_100127B08);
  sub_10001A528();
  v115._countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
  v115._object = v39;
  swift_bridgeObjectRelease();
  id v40 = [v24 serialNumber];
  if (v40)
  {
    size_t v41 = v40;
    v114._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v114._object = v42;
  }
  else
  {
    sub_10000AC7C(&qword_100127420);
    uint64_t v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_1000E8090;
    id v45 = USBDevice.locationID.getter();
    *(void *)(v44 + 56) = &type metadata for UInt;
    *(void *)(v44 + 64) = &protocol witness table for UInt;
    if (v46) {
      id v47 = 0;
    }
    else {
      id v47 = v45;
    }
    *(void *)(v44 + 32) = v47;
    v114._countAndFlagsBits = String.init(format:_:)();
    v114._object = v48;
  }
  uint64_t v49 = v122;
  id v50 = [v24 manufacturerName];
  if (v50)
  {
    unint64_t v51 = v50;
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v54 = v53;
  }
  else
  {
    unint64_t v54 = 0x80000001000E1820;
    uint64_t v52 = 0xD000000000000014;
  }
  v116 = (void *)v54;
  id v55 = [v24 boxName];
  if (v55)
  {
    unint64_t v56 = v55;
    uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v113 = v57;
  }
  else
  {
    uint64_t v113 = 0xEF656D614E786F62;
    uint64_t v112 = 0x206E776F6E6B6E55;
  }
  uint64_t v58 = v124;
  uint64_t v59 = *(void *)&v24[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
  if (v59 && sub_10001925C(18, v59)) {
    uint64_t v60 = 10000;
  }
  else {
    uint64_t v60 = 667000;
  }
  *(void *)&v58[OBJC_IVAR___AUAAudioDevice_formatChangeIOStartDelay_us] = v60;
  unint64_t v61 = (uint64_t *)&v58[OBJC_IVAR___AUAAudioDevice_function];
  *unint64_t v61 = v49;
  v61[1] = a2;
  unint64_t v62 = &v58[OBJC_IVAR___AUAAudioDevice_clock];
  uint64_t v63 = v128;
  *(void *)unint64_t v62 = v130;
  *((void *)v62 + 1) = v63;
  uint64_t v64 = swift_getObjectType();
  unint64_t v65 = *(uint64_t (**)(uint64_t, uint64_t))(v63 + 40);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v120 = v65(v64, v63);
  uint64_t v118 = v52;
  if (v120)
  {
    uint64_t v66 = *(void *)(v120 + 16);
    if (v66)
    {
      unint64_t v67 = (uint64_t *)(v120 + 48);
      id v68 = v131;
      do
      {
        unint64_t v69 = *(v67 - 2);
        unint64_t v70 = *(v67 - 1);
        uint64_t v71 = *v67;
        if (v69 < v70 && v71 != 0)
        {
          NSString v73 = String._bridgeToObjectiveC()();
          unint64_t v74 = (void *)swift_allocObject();
          v74[2] = v68;
          v74[3] = v69;
          v74[4] = v70;
          v74[5] = v71;
          unint64_t v137 = sub_10001A604;
          v138 = v74;
          long long aBlock = _NSConcreteStackBlock;
          unint64_t v134 = 1107296256;
          v135 = sub_1000C4FC8;
          v136 = &unk_100117BC0;
          unint64_t v75 = _Block_copy(&aBlock);
          id v76 = v68;
          swift_release();
          AnalyticsSendEventLazy();
          _Block_release(v75);
        }
        v67 += 3;
        --v66;
      }
      while (v66);
    }
    swift_bridgeObjectRelease();
    uint64_t v28 = v129;
    unint64_t v26 = v132;
    uint64_t v52 = v118;
  }
  id v77 = objc_msgSend(v131, "serialNumber", v112, v113);
  if (v77)
  {
    uint64_t v78 = v77;
    uint64_t v79 = v52;
    uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v82 = v81;
  }
  else
  {
    uint64_t v79 = v52;
    uint64_t v80 = 0;
    unint64_t v82 = 0xE000000000000000;
  }
  uint64_t v83 = v123;
  v84 = v124;
  v85 = (uint64_t *)&v124[OBJC_IVAR___AUAAudioDevice_serialNumber];
  uint64_t *v85 = v80;
  v85[1] = v82;
  v86 = v131;
  os_signpost_id_t v87 = *(void **)&v131[OBJC_IVAR____TtC9AUASDCore9USBDevice_timeCorrelater];
  *(void *)&v84[OBJC_IVAR___AUAAudioDevice_timeCorrelater] = v87;
  id v88 = objc_allocWithZone((Class)AUALocklessTimestamp);
  id v89 = v87;
  id v90 = [v88 init];
  *(void *)&v84[OBJC_IVAR___AUAAudioDevice_timestamp] = v90;
  *(void *)&v84[OBJC_IVAR___AUAAudioDevice_streamingInterfaces] = v26;

  long long aBlock = 0;
  unint64_t v134 = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  long long aBlock = (void **)0xD000000000000014;
  unint64_t v134 = 0x80000001000E1840;
  v91._countAndFlagsBits = v79;
  v91._object = v116;
  uint64_t v92 = (uint64_t)v116;
  String.append(_:)(v91);
  v93._countAndFlagsBits = 58;
  v93._object = (void *)0xE100000000000000;
  String.append(_:)(v93);
  uint64_t v94 = *(void *)&v86[OBJC_IVAR____TtC9AUASDCore9USBDevice_productName];
  v95 = *(void **)&v86[OBJC_IVAR____TtC9AUASDCore9USBDevice_productName + 8];
  swift_bridgeObjectRetain();
  v96._countAndFlagsBits = v94;
  v96._object = v95;
  String.append(_:)(v96);
  swift_bridgeObjectRelease();
  v97._countAndFlagsBits = 58;
  v97._object = (void *)0xE100000000000000;
  String.append(_:)(v97);
  String.append(_:)(v114);
  swift_bridgeObjectRelease();
  v98._countAndFlagsBits = 58;
  v98._object = (void *)0xE100000000000000;
  String.append(_:)(v98);
  String.append(_:)(v115);
  swift_bridgeObjectRelease();
  NSString v99 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v100 = [v86 plugin];
  uint64_t v101 = (objc_class *)type metadata accessor for AUAAudioDevice(0);
  v139.receiver = v84;
  v139.super_class = v101;
  id v102 = objc_msgSendSuper2(&v139, "initWithDeviceUID:withPlugin:", v99, v100);

  if (v102)
  {
    (*(void (**)(void))(v126 + 16))();
    (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v28, (uint64_t)v102 + OBJC_IVAR___AUAAudioDevice_signpostID, v121);
    id v103 = v102;
    unint64_t v132 = (unint64_t)v103;
    v104 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v104 = 0;
    Swift::String v105 = OSSignposter.logHandle.getter();
    Swift::String v106 = v28;
    os_signpost_type_t v107 = static os_signpost_type_t.begin.getter();
    os_signpost_id_t v108 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v105, v107, v108, "AUAAudioDevice_init", "", v104, 2u);
    sub_100010514(v86, v103, v122, v119, v112, v113, v118, v92, v130, v128);
    os_signpost_type_t v109 = static os_signpost_type_t.end.getter();
    os_signpost_id_t v110 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v105, v109, v110, "AUAAudioDevice_init", "", v104, 2u);

    swift_slowDealloc();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v111 = (void *)v132;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v123 + 8))(v106, v121);
    (*(void (**)(char *, uint64_t))(v126 + 8))(v125, v127);
    return;
  }
LABEL_50:
  __break(1u);
}

void *sub_10001034C(uint64_t a1, Swift::Int a2, Swift::Int a3, Swift::Int a4)
{
  sub_10000AC7C((uint64_t *)&unk_100129190);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000E9F10;
  *(void *)(inited + 32) = 4475222;
  *(void *)(inited + 40) = 0xE300000000000000;
  sub_10000CECC(0, (unint64_t *)&qword_100127470);
  uint64_t v9 = *(unsigned __int16 **)(a1 + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor);
  *(NSNumber *)(inited + 48) = NSNumber.init(integerLiteral:)(v9[4]);
  *(void *)(inited + 56) = 4475216;
  *(void *)(inited + 64) = 0xE300000000000000;
  *(NSNumber *)(inited + 72) = NSNumber.init(integerLiteral:)(v9[5]);
  *(void *)(inited + 80) = 0x6E6F6973726556;
  *(void *)(inited + 88) = 0xE700000000000000;
  *(NSNumber *)(inited + 96) = NSNumber.init(integerLiteral:)(v9[6]);
  *(void *)(inited + 104) = 0x4E746375646F7270;
  *(void *)(inited + 112) = 0xEB00000000656D61;
  uint64_t result = String._bridgeToObjectiveC()();
  *(void *)(inited + 120) = result;
  *(void *)(inited + 128) = 0x6E694D65676E6172;
  *(void *)(inited + 136) = 0xE800000000000000;
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = NSNumber.init(integerLiteral:)(a2).super.super.isa;
  *(void *)(inited + 144) = result;
  *(void *)(inited + 152) = 0x78614D65676E6172;
  *(void *)(inited + 160) = 0xE800000000000000;
  if (a3 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t result = NSNumber.init(integerLiteral:)(a3).super.super.isa;
  *(void *)(inited + 168) = result;
  *(void *)(inited + 176) = 0x73655265676E6172;
  *(void *)(inited + 184) = 0xEF6E6F6974756C6FLL;
  if ((a4 & 0x8000000000000000) == 0)
  {
    *(NSNumber *)(inited + 192) = NSNumber.init(integerLiteral:)(a4);
    return (void *)sub_100008AF4(inited);
  }
LABEL_7:
  __break(1u);
  return result;
}

void sub_100010514(char *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void *)&a1[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
  if (v12 && sub_10001925C(27, v12)) {
    usleep(0x30D40u);
  }
  uint64_t v148 = v12;
  type metadata accessor for AUASampleManager(0);
  swift_allocObject();
  uint64_t v13 = a2;
  uint64_t v14 = sub_10001A714();

  *(void *)&v13[OBJC_IVAR___AUAAudioDevice_sampleManager] = v14;
  swift_release();
  AUAAudioDevice.createStreams()();
  id v15 = [v13 inputStreams];
  if (!v15) {
    goto LABEL_138;
  }
  uint64_t v16 = v15;
  sub_10000CECC(0, (unint64_t *)&qword_100127B00);
  unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v17 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t ObjectType = &unk_100127000;
  if (!v18)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    id v20 = [v13 outputStreams];
    if (!v20)
    {
LABEL_148:
      __break(1u);
      return;
    }
    unint64_t v21 = v20;
    unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v17 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v147 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v147) {
        goto LABEL_14;
      }
    }
    else if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_14:
      if ((v17 & 0xC000000000000001) != 0) {
        goto LABEL_53;
      }
      if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_16;
      }
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
      goto LABEL_141;
    }
    swift_bridgeObjectRelease();
    sub_10002E81C(0xD00000000000002ALL, 0x80000001000E18D0, 0xD000000000000029, (void *)0x80000001000E17F0, 0xD00000000000001BLL, 0x80000001000E1230, 382);
    goto LABEL_18;
  }
  if ((v17 & 0xC000000000000001) != 0) {
    goto LABEL_53;
  }
  if (!*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_11;
  }
LABEL_16:
  for (id i = *(id *)(v17 + 32); ; id i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)())
  {
    id v23 = i;
    swift_bridgeObjectRelease();
    uint64_t v24 = ObjectType[336];
    uint64_t v25 = *(void **)&v13[v24];
    *(void *)&v13[v24] = v23;

LABEL_18:
    unint64_t v26 = *(void **)&v13[ObjectType[336]];
    if (v26)
    {
      type metadata accessor for AUAStream(0);
      if (swift_dynamicCastClass())
      {
        id v27 = v26;
        if ((sub_1000906E4() & 0xFE) == 2) {
          uint64_t v28 = AUAAudioDevice.usbControllerClockDomain()();
        }
        else {
          uint64_t v28 = 0;
        }
        objc_msgSend(v13, "setClockDomain:", v28, v148);
      }
    }
    id v156 = v13;
    uint64_t ObjectType = (void *)swift_getObjectType();
    unint64_t v29 = (*(uint64_t (**)(void *, unint64_t))(a4 + 32))(ObjectType, a4);
    if (v29 >> 62) {
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    unint64_t v154 = a4;
    swift_bridgeObjectRelease();
    id v31 = [v13 outputStreams];
    if (!v31) {
      goto LABEL_139;
    }
    uint64_t v32 = v31;
    unint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v33 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    id v35 = [v13 inputStreams];
    if (!v35) {
      goto LABEL_140;
    }
    unint64_t v36 = v35;
    a4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (a4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v37 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v38 = v34 + v37;
    if (!__OFADD__(v34, v37)) {
      break;
    }
    __break(1u);
LABEL_53:
    ;
  }
  v155 = ObjectType;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (v30 == v38)
  {
    size_t v41 = v156;
    if (v38 >= 2)
    {
      uint64_t v42 = (*(uint64_t (**)(void *))(v154 + 24))(v155);
      uint64_t v39 = *(void *)(v42 + 176);
      uint64_t v40 = *(void *)(v42 + 184);
      swift_bridgeObjectRetain();
      swift_release();
    }
  }
  else
  {
    size_t v41 = v156;
  }
  uint64_t v163 = v39;
  uint64_t v164 = v40;
  if (!objc_msgSend(v41, "hasOutput", v148)) {
    goto LABEL_56;
  }
  id v43 = [v41 outputStreams];
  if (!v43) {
    goto LABEL_146;
  }
  uint64_t v44 = v43;
  unint64_t v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v45 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v52) {
      goto LABEL_41;
    }
    goto LABEL_55;
  }
  if (!*(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_55:
    swift_bridgeObjectRelease();
LABEL_56:
    uint64_t v49 = 0;
    uint64_t v51 = 0;
    goto LABEL_57;
  }
LABEL_41:
  if ((v45 & 0xC000000000000001) != 0)
  {
    id v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_136;
    }
    id v46 = *(id *)(v45 + 32);
  }
  id v47 = v46;
  swift_bridgeObjectRelease();
  id v48 = [v47 streamName];

  if (v48)
  {
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v51 = v50;
  }
  else
  {
    uint64_t v49 = 0;
    uint64_t v51 = 0;
  }
  size_t v41 = v156;
LABEL_57:
  uint64_t v165 = v49;
  uint64_t v166 = v51;
  if (![v41 hasInput]) {
    goto LABEL_68;
  }
  id v53 = [v41 inputStreams];
  if (!v53) {
    goto LABEL_147;
  }
  unint64_t v54 = v53;
  unint64_t v55 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v55 >> 62))
  {
    if (*(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_61;
    }
LABEL_67:
    swift_bridgeObjectRelease();
    goto LABEL_68;
  }
  swift_bridgeObjectRetain();
  uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v62) {
    goto LABEL_67;
  }
LABEL_61:
  if ((v55 & 0xC000000000000001) == 0)
  {
    if (*(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v56 = *(id *)(v55 + 32);
      goto LABEL_64;
    }
LABEL_136:
    __break(1u);
    goto LABEL_137;
  }
  id v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_64:
  uint64_t v57 = v56;
  swift_bridgeObjectRelease();
  id v58 = [v57 streamName];

  if (v58)
  {
    uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v61 = v60;

    goto LABEL_69;
  }
LABEL_68:
  uint64_t v59 = 0;
  uint64_t v61 = 0;
LABEL_69:
  uint64_t v167 = v59;
  uint64_t v168 = v61;
  uint64_t v63 = (*(uint64_t (**)(void *))(v154 + 24))(v155);
  uint64_t v65 = *(void *)(v63 + 176);
  uint64_t v64 = *(void *)(v63 + 184);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v169 = v65;
  uint64_t v170 = v64;
  uint64_t v171 = a5;
  uint64_t v172 = a6;
  uint64_t v173 = 0;
  uint64_t v174 = 0;
  if (v40)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v66 = sub_100058D54(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v68 = v66[2];
    unint64_t v67 = v66[3];
    if (v68 >= v67 >> 1) {
      uint64_t v66 = sub_100058D54((void *)(v67 > 1), v68 + 1, 1, v66);
    }
    v66[2] = v68 + 1;
    unint64_t v69 = &v66[2 * v68];
    v69[4] = v39;
    v69[5] = v40;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v66 = _swiftEmptyArrayStorage;
  }
  if (v51)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v66 = sub_100058D54(0, v66[2] + 1, 1, v66);
    }
    unint64_t v71 = v66[2];
    unint64_t v70 = v66[3];
    if (v71 >= v70 >> 1) {
      uint64_t v66 = sub_100058D54((void *)(v70 > 1), v71 + 1, 1, v66);
    }
    v66[2] = v71 + 1;
    uint64_t v72 = &v66[2 * v71];
    v72[4] = v49;
    v72[5] = v51;
    uint64_t v59 = v167;
    uint64_t v61 = v168;
  }
  if (v61)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v66 = sub_100058D54(0, v66[2] + 1, 1, v66);
    }
    unint64_t v74 = v66[2];
    unint64_t v73 = v66[3];
    if (v74 >= v73 >> 1) {
      uint64_t v66 = sub_100058D54((void *)(v73 > 1), v74 + 1, 1, v66);
    }
    v66[2] = v74 + 1;
    unint64_t v75 = &v66[2 * v74];
    v75[4] = v59;
    v75[5] = v61;
  }
  uint64_t v76 = v170;
  if (v170)
  {
    uint64_t v77 = v169;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v66 = sub_100058D54(0, v66[2] + 1, 1, v66);
    }
    unint64_t v79 = v66[2];
    unint64_t v78 = v66[3];
    if (v79 >= v78 >> 1) {
      uint64_t v66 = sub_100058D54((void *)(v78 > 1), v79 + 1, 1, v66);
    }
    v66[2] = v79 + 1;
    uint64_t v80 = &v66[2 * v79];
    v80[4] = v77;
    v80[5] = v76;
  }
  uint64_t v81 = v172;
  if (v172)
  {
    uint64_t v82 = v171;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v66 = sub_100058D54(0, v66[2] + 1, 1, v66);
    }
    unint64_t v84 = v66[2];
    unint64_t v83 = v66[3];
    if (v84 >= v83 >> 1) {
      uint64_t v66 = sub_100058D54((void *)(v83 > 1), v84 + 1, 1, v66);
    }
    v66[2] = v84 + 1;
    v85 = &v66[2 * v84];
    v85[4] = v82;
    v85[5] = v81;
  }
  uint64_t v86 = v174;
  if (v174)
  {
    uint64_t v87 = v173;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v66 = sub_100058D54(0, v66[2] + 1, 1, v66);
    }
    unint64_t v89 = v66[2];
    unint64_t v88 = v66[3];
    if (v89 >= v88 >> 1) {
      uint64_t v66 = sub_100058D54((void *)(v88 > 1), v89 + 1, 1, v66);
    }
    v66[2] = v89 + 1;
    id v90 = &v66[2 * v89];
    v90[4] = v87;
    v90[5] = v86;
  }
  sub_10000AC7C(&qword_100127B18);
  swift_arrayDestroy();
  if (v66[2]) {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  if (qword_100126938 != -1) {
    swift_once();
  }
  Swift::String v91 = *(void **)(qword_10012B2A8 + 16);
  if (v91
    && (id v92 = v91,
        NSString v93 = String._bridgeToObjectiveC()(),
        unsigned __int8 v94 = [v92 BOOLForKey:v93],
        v92,
        v93,
        (v94 & 1) != 0))
  {
    unint64_t v95 = 0xE100000000000000;
    uint64_t v96 = 46;
  }
  else
  {
    uint64_t v96 = 0;
    unint64_t v95 = 0xE000000000000000;
  }
  swift_getObjectType();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v98 = [self bundleForClass:ObjCClassFromMetadata];
  NSString v99 = String._bridgeToObjectiveC()();
  id v100 = [v98 localizedStringForKey:v99 value:0 table:0];

  uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v103 = v102;
  swift_bridgeObjectRelease();

  v161 = (void *)v96;
  unint64_t v162 = v95;
  swift_bridgeObjectRetain();
  v104._countAndFlagsBits = v101;
  v104._object = v103;
  String.append(_:)(v104);
  Swift::String v105 = v156;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  NSString v106 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v156 setDeviceName:v106];

  id v107 = [a1 modelName];
  if (!v107)
  {
LABEL_141:
    __break(1u);
    goto LABEL_142;
  }
  os_signpost_id_t v108 = v107;
  [v156 setModelName:v107];
  [v156 setModelUID:v108];

  NSString v109 = String._bridgeToObjectiveC()();
  [v156 setManufacturerName:v109];

  objc_msgSend(v156, "setCanBeDefaultInputDevice:", objc_msgSend(v156, "hasInput"));
  objc_msgSend(v156, "setCanBeDefaultOutputDevice:", objc_msgSend(v156, "hasOutput"));
  [v156 setCanBeDefaultSystemDevice:1];
  [v156 setCanChangeDeviceName:0];
  uint64_t v152 = swift_getObjectType();
  uint64_t v110 = (*(uint64_t (**)(uint64_t, uint64_t))(a10 + 48))(v152, a10);
  uint64_t v111 = *(void *)(v110 + 16);
  if (v111)
  {
    v161 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v112 = 0;
    do
    {
      uint64_t v113 = v112 + 1;
      [objc_allocWithZone((Class)NSNumber) initWithUnsignedInteger:*(void *)(v110 + 8 * v112 + 32)];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v112 = v113;
    }
    while (v111 != v113);
    swift_bridgeObjectRelease();
    Swift::String v105 = v156;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_10000CECC(0, (unint64_t *)&qword_100127470);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v105 setSamplingRates:isa];

  unint64_t v115 = (*(uint64_t (**)(uint64_t, uint64_t))(a10 + 16))(v152, a10);
  double v116 = 0.0;
  if ((v117 & 1) == 0)
  {
    double v116 = (double)v115;
    if (v149)
    {
      if (v115 == 44100 && sub_10001925C(1, v149)) {
        double v116 = 48000.0;
      }
    }
  }
  AUAAudioDevice.setSamplingRate(_:)(v116);
  [v105 setTransportType:1970496032];
  id v118 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedChar:", (*(unsigned __int8 (**)(void *, unint64_t))(v154 + 40))(v155, v154));
  unint64_t v119 = (objc_class *)type metadata accessor for AUACustomNumberProperty();
  uint64_t v120 = (char *)objc_allocWithZone(v119);
  *(void *)&v120[OBJC_IVAR____TtC9AUASDCore23AUACustomNumberProperty_number] = v118;
  id v121 = objc_allocWithZone((Class)ASDPropertyAddress);
  id v122 = v118;
  id v123 = [v121 initWithSelector:1967211587 scope:1735159650 element:0];
  v160.receiver = v120;
  v160.super_class = v119;
  id v124 = objc_msgSendSuper2(&v160, "initWithAddress:propertyDataType:qualifierDataType:", v123, 1886155636, 0);

  if (!v124)
  {
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
    goto LABEL_148;
  }
  id v125 = v124;
  [v125 setSettable:0];

  [v156 addCustomProperty:v125];
  id v126 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedChar:", (*(unsigned __int8 (**)(void *, unint64_t))(v154 + 48))(v155, v154));
  uint64_t v127 = (char *)objc_allocWithZone(v119);
  *(void *)&v127[OBJC_IVAR____TtC9AUASDCore23AUACustomNumberProperty_number] = v126;
  id v128 = objc_allocWithZone((Class)ASDPropertyAddress);
  id v129 = v126;
  id v130 = [v128 initWithSelector:1967212099 scope:1735159650 element:0];
  v159.receiver = v127;
  v159.super_class = v119;
  id v131 = objc_msgSendSuper2(&v159, "initWithAddress:propertyDataType:qualifierDataType:", v130, 1886155636, 0);

  if (!v131) {
    goto LABEL_143;
  }
  id v132 = v131;
  [v132 setSettable:0];

  [v156 addCustomProperty:v132];
  id v133 = USBDevice.locationID.getter();
  if (v134) {
    id v135 = 0;
  }
  else {
    id v135 = v133;
  }
  id v136 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInteger:v135];
  unint64_t v137 = (char *)objc_allocWithZone(v119);
  *(void *)&v137[OBJC_IVAR____TtC9AUASDCore23AUACustomNumberProperty_number] = v136;
  id v138 = objc_allocWithZone((Class)ASDPropertyAddress);
  id v139 = v136;
  id v140 = [v138 initWithSelector:1818446148 scope:1735159650 element:0];
  v158.receiver = v137;
  v158.super_class = v119;
  id v141 = objc_msgSendSuper2(&v158, "initWithAddress:propertyDataType:qualifierDataType:", v140, 1886155636, 0);

  if (!v141) {
    goto LABEL_144;
  }
  id v142 = v141;
  [v142 setSettable:0];

  [v156 addCustomProperty:v142];
  v143 = (objc_class *)type metadata accessor for AUABooleanProperty();
  uint64_t v144 = objc_allocWithZone(v143);
  v144[OBJC_IVAR____TtC9AUASDCore18AUABooleanProperty_isSet] = 1;
  id v145 = [objc_allocWithZone((Class)ASDPropertyAddress) initWithSelector:1967215440 scope:1735159650 element:0];
  v157.receiver = v144;
  v157.super_class = v143;
  id v146 = objc_msgSendSuper2(&v157, "initWithAddress:propertyDataType:qualifierDataType:", v145, 1886155636, 0);

  if (!v146) {
    goto LABEL_145;
  }
  [v146 setSettable:0];
  [v156 addCustomProperty:v146];
}

uint64_t AUAAudioDevice.clockForOutline.getter()
{
  return swift_unknownObjectRetain();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AUAAudioDevice.publishStreamFormats()()
{
  unint64_t v131 = sub_100008C10((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v1 = *(void *)(v0 + OBJC_IVAR___AUAAudioDevice_streamingInterfaces);
  unint64_t v118 = v1 >> 62;
  if (v1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  char active = 0;
  if (v2)
  {
    while (1)
    {
      uint64_t v4 = 4;
      uint64_t v5 = 0;
      if ((v1 & 0xC000000000000001) == 0) {
        break;
      }
      while (1)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v6 = __OFADD__(v5, 1);
        uint64_t v7 = v5 + 1;
        if (v6) {
          break;
        }
LABEL_8:
        if (active)
        {
          swift_release();
          char active = 1;
          if (v7 == v2) {
            goto LABEL_16;
          }
        }
        else
        {
          char active = ActiveStreamingInterface.hasValidAlternateSettingsControl.getter();
          swift_release();
          if (v7 == v2) {
            goto LABEL_16;
          }
        }
        uint64_t v5 = ++v4 - 4;
        if ((v1 & 0xC000000000000001) == 0) {
          goto LABEL_7;
        }
      }
LABEL_14:
      __break(1u);
LABEL_15:
      swift_bridgeObjectRetain_n();
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      char active = 0;
      if (!v2) {
        goto LABEL_16;
      }
    }
LABEL_7:
    swift_retain();
    BOOL v6 = __OFADD__(v5, 1);
    uint64_t v7 = v5 + 1;
    if (v6) {
      goto LABEL_14;
    }
    goto LABEL_8;
  }
LABEL_16:
  swift_bridgeObjectRelease_n();
  uint64_t v8 = *(void *)(v0 + OBJC_IVAR___AUAAudioDevice_clock + 8);
  uint64_t ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 64))(ObjectType, v8) & 1) == 0
    && *(void *)(v0 + OBJC_IVAR___AUAAudioDevice_function)
    && (uint64_t v9 = *(void *)(v0 + OBJC_IVAR___AUAAudioDevice_function + 8),
        uint64_t v10 = swift_getObjectType(),
        (uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v10, v9)) != 0))
  {
    uint64_t v12 = (void *)v11;
    uint64_t v13 = *(void *)(v11 + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
    if (v13) {
      BOOL v14 = sub_10001925C(0, v13);
    }
    else {
      BOOL v14 = 0;
    }
  }
  else
  {
    BOOL v14 = 0;
  }
  char v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 56))(ObjectType, v8);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 40))(ObjectType, v8);
  if (v16)
  {
    uint64_t v17 = v16;
    Swift::String v114 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 16);
    uint64_t v108 = v114(ObjectType, v8);
    char v107 = v18;
    uint64_t v19 = v17;
    uint64_t v110 = *(void *)(v17 + 16);
    if (v110)
    {
      unint64_t v20 = 0;
      uint64_t v112 = v17 + 32;
      char v106 = v15 ^ 1 | v14;
      uint64_t v109 = v1 & 0xFFFFFFFFFFFFFF8;
      unint64_t v122 = v1 & 0xC000000000000001;
      uint64_t v21 = v127;
      char v120 = active;
      uint64_t v119 = v8;
      uint64_t v123 = v17;
      while (1)
      {
        if (v20 >= *(void *)(v19 + 16)) {
          goto LABEL_157;
        }
        unint64_t v111 = v20;
        uint64_t v22 = (unint64_t *)(v112 + 24 * v20);
        unint64_t v23 = *v22;
        unint64_t v24 = v22[1];
        unint64_t v126 = v22[2];
        uint64_t v128 = v21;
        unint64_t v124 = *v22;
        unint64_t v129 = v24;
        if (v24 == *v22) {
          break;
        }
        if (v23 >= v24) {
          goto LABEL_147;
        }
        if (v126 < 2)
        {
          if (v126 != 1)
          {
LABEL_147:
            swift_bridgeObjectRelease();
            sub_10000CD54();
            swift_allocError();
            *(unsigned char *)uint64_t v105 = 1;
            *(void *)(v105 + 8) = 0;
            *(void *)(v105 + 16) = 0xE000000000000000;
            *(void *)(v105 + 24) = 0xD000000000000016;
            *(void *)(v105 + 32) = 0x80000001000E1BC0;
            *(void *)(v105 + 40) = 0xD00000000000001BLL;
            *(void *)(v105 + 48) = 0x80000001000E1230;
            *(void *)(v105 + 56) = 487;
            swift_willThrow();
LABEL_144:
            swift_bridgeObjectRelease();
            return;
          }
          sub_10000AC7C(&qword_100127B40);
          uint64_t v25 = (void *)swift_allocObject();
          *((_OWORD *)v25 + 1) = xmmword_1000E8090;
          uint64_t v26 = v114(ObjectType, v8);
          if (v37) {
            goto LABEL_159;
          }
          goto LABEL_50;
        }
        if ((v126 & 0x8000000000000000) != 0) {
          goto LABEL_158;
        }
        char v27 = 0;
        unint64_t v28 = 0;
        char v29 = 0;
        unint64_t v30 = *v22;
        uint64_t v25 = _swiftEmptyArrayStorage;
        BOOL v31 = v124 == v24;
        if (v124 < v24)
        {
          do
          {
            uint64_t v33 = v30 + v126;
            if (__CFADD__(v30, v126))
            {
              char v29 = 0;
              unint64_t v28 = 0x8000000000000000;
              uint64_t v33 = -1;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                goto LABEL_42;
              }
            }
            else
            {
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              unint64_t v28 = 0;
              char v29 = 1;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                goto LABEL_42;
              }
            }
LABEL_44:
            unint64_t v36 = v25[2];
            unint64_t v35 = v25[3];
            if (v36 >= v35 >> 1) {
              uint64_t v25 = sub_100058C0C((void *)(v35 > 1), v36 + 1, 1, v25);
            }
            v25[2] = v36 + 1;
            v25[v36 + 4] = v30;
            unint64_t v30 = v33;
            unint64_t v24 = v129;
            BOOL v31 = v30 == v129;
          }
          while (v30 < v129);
        }
        char v32 = !v31;
        if (((v32 | v27) & 1) == 0 && v29 & 1 | (v28 != 0x8000000000000000))
        {
          char v27 = 1;
          uint64_t v33 = v30;
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v33 = v30;
            goto LABEL_44;
          }
LABEL_42:
          uint64_t v25 = sub_100058C0C(0, v25[2] + 1, 1, v25);
          goto LABEL_44;
        }
        char active = v120;
        uint64_t v8 = v119;
        uint64_t v19 = v123;
LABEL_52:
        uint64_t v113 = v25[2];
        if (v113)
        {
          unint64_t v38 = 0;
          unint64_t v115 = v25 + 4;
          id v121 = v25;
          while (1)
          {
            if (v38 >= v25[2]) {
              goto LABEL_156;
            }
            unint64_t v116 = v38;
            unint64_t v125 = v115[v38];
            if ((active & 1) == 0) {
              break;
            }
            uint64_t v39 = swift_getObjectType();
            uint64_t v40 = v114(v39, v8);
            if ((v41 & 1) == 0 && v40 == v125) {
              break;
            }
            if ((v106 & 1) == 0)
            {
              (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v8 + 24))(v125, 0, v39, v8);
              if (v118) {
                goto LABEL_63;
              }
LABEL_59:
              uint64_t v42 = *(void *)(v109 + 16);
              swift_bridgeObjectRetain();
              if (v42) {
                goto LABEL_64;
              }
LABEL_87:
              swift_bridgeObjectRelease();
            }
            unint64_t v38 = v116 + 1;
            if (v116 + 1 == v113) {
              goto LABEL_89;
            }
          }
          if (!v118) {
            goto LABEL_59;
          }
LABEL_63:
          swift_bridgeObjectRetain_n();
          uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v42)
          {
LABEL_64:
            uint64_t v43 = 4;
            while (1)
            {
              if (v122) {
                specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                swift_retain();
              }
              uint64_t v45 = v43 - 3;
              if (__OFADD__(v43 - 4, 1)) {
                break;
              }
              uint64_t v46 = v42;
              ActiveStreamingInterface.auaStream.getter();
              if (!v47)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_10000CD54();
                swift_allocError();
                *(unsigned char *)uint64_t v89 = 1;
                *(void *)(v89 + 8) = 0;
                *(void *)(v89 + 16) = 0xE000000000000000;
                *(void *)(v89 + 24) = 0xD000000000000016;
                *(void *)(v89 + 32) = 0x80000001000E1BC0;
                *(void *)(v89 + 40) = 0xD00000000000001BLL;
                *(void *)(v89 + 48) = 0x80000001000E1230;
                *(void *)(v89 + 56) = 500;
                swift_willThrow();
                swift_bridgeObjectRelease();
                swift_release();
                return;
              }
              id v48 = v47;
              uint64_t v49 = ActiveStreamingInterface.streamFormats(forSamplingRate:inClockRateRange:nonStreamingTerminal:)(v125, v124, v24, v126, &v47[OBJC_IVAR___AUAStream_otherTerminal]);
              if (v128)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_release();
                return;
              }
              unint64_t v50 = (unint64_t)v49;
              if (*(void *)(v131 + 16))
              {
                id v51 = v48;
                unint64_t v52 = sub_10001998C((uint64_t)v51);
                id v53 = _swiftEmptyArrayStorage;
                if (v54)
                {
                  id v53 = *(void **)(*(void *)(v131 + 56) + 8 * v52);
                  swift_bridgeObjectRetain();
                }
              }
              else
              {
                id v53 = _swiftEmptyArrayStorage;
              }
              sub_1000A1918(v50);
              id v55 = v48;
              char v56 = swift_isUniquelyReferenced_nonNull_native();
              unint64_t v58 = sub_10001998C((uint64_t)v55);
              uint64_t v59 = *(void *)(v131 + 16);
              BOOL v60 = (v57 & 1) == 0;
              uint64_t v61 = v59 + v60;
              if (__OFADD__(v59, v60)) {
                goto LABEL_149;
              }
              char v62 = v57;
              if (*(void *)(v131 + 24) >= v61)
              {
                if ((v56 & 1) == 0) {
                  sub_1000A5E4C();
                }
              }
              else
              {
                sub_1000A5334(v61, v56);
                unint64_t v63 = sub_10001998C((uint64_t)v55);
                if ((v62 & 1) != (v64 & 1)) {
                  goto LABEL_160;
                }
                unint64_t v58 = v63;
              }
              if (v62)
              {
                uint64_t v44 = *(void *)(v131 + 56);
                swift_bridgeObjectRelease();
                *(void *)(v44 + 8 * v58) = v53;
              }
              else
              {
                *(void *)(v131 + 8 * (v58 >> 6) + 64) |= 1 << v58;
                uint64_t v65 = 8 * v58;
                *(void *)(*(void *)(v131 + 48) + v65) = v55;
                *(void *)(*(void *)(v131 + 56) + v65) = v53;
                uint64_t v66 = *(void *)(v131 + 16);
                BOOL v6 = __OFADD__(v66, 1);
                uint64_t v67 = v66 + 1;
                if (v6) {
                  goto LABEL_153;
                }
                *(void *)(v131 + 16) = v67;
                id v68 = v55;
              }
              swift_release();

              swift_bridgeObjectRelease();
              ++v43;
              uint64_t v42 = v46;
              BOOL v31 = v45 == v46;
              char active = v120;
              uint64_t v8 = v119;
              uint64_t v19 = v123;
              unint64_t v24 = v129;
              uint64_t v25 = v121;
              if (v31) {
                goto LABEL_87;
              }
            }
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
            goto LABEL_151;
          }
          goto LABEL_87;
        }
LABEL_89:
        swift_bridgeObjectRelease();
        unint64_t v20 = v111 + 1;
        uint64_t v21 = v128;
        if (v111 + 1 == v110) {
          goto LABEL_112;
        }
      }
      sub_10000AC7C(&qword_100127B40);
      uint64_t v25 = (void *)swift_allocObject();
      *((_OWORD *)v25 + 1) = xmmword_1000E8090;
      uint64_t v26 = v23;
LABEL_50:
      unsigned char v25[4] = v26;
      goto LABEL_52;
    }
    uint64_t v21 = v127;
LABEL_112:
    swift_bridgeObjectRelease();
    if (active)
    {
      uint64_t v88 = swift_getObjectType();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 24))(v108, v107 & 1, v88, v8);
    }
    goto LABEL_120;
  }
  if (v118)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v69 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v21 = v127;
    if (v69)
    {
LABEL_93:
      unint64_t v130 = v1 & 0xC000000000000001;
      uint64_t v70 = 4;
      do
      {
        uint64_t v72 = v70 - 4;
        if (v130)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v73 = v70 - 3;
          if (__OFADD__(v72, 1)) {
            goto LABEL_150;
          }
        }
        else
        {
          swift_retain();
          uint64_t v73 = v70 - 3;
          if (__OFADD__(v72, 1)) {
            goto LABEL_150;
          }
        }
        ActiveStreamingInterface.auaStream.getter();
        if (!v74)
        {
          swift_bridgeObjectRelease();
          sub_10000CD54();
          swift_allocError();
          *(unsigned char *)uint64_t v90 = 1;
          *(void *)(v90 + 8) = 0;
          *(void *)(v90 + 16) = 0xE000000000000000;
          *(void *)(v90 + 24) = 0xD000000000000016;
          *(void *)(v90 + 32) = 0x80000001000E1BC0;
          *(void *)(v90 + 40) = 0xD00000000000001BLL;
          *(void *)(v90 + 48) = 0x80000001000E1230;
          *(void *)(v90 + 56) = 516;
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_release();
          return;
        }
        id v75 = v74;
        char v76 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v78 = sub_10001998C((uint64_t)v75);
        uint64_t v79 = *(void *)(v131 + 16);
        BOOL v80 = (v77 & 1) == 0;
        uint64_t v81 = v79 + v80;
        if (__OFADD__(v79, v80))
        {
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
          goto LABEL_155;
        }
        char v82 = v77;
        if (*(void *)(v131 + 24) >= v81)
        {
          if ((v76 & 1) == 0) {
            sub_1000A5E4C();
          }
        }
        else
        {
          sub_1000A5334(v81, v76);
          unint64_t v83 = sub_10001998C((uint64_t)v75);
          if ((v82 & 1) != (v84 & 1)) {
            goto LABEL_160;
          }
          unint64_t v78 = v83;
        }
        if (v82)
        {
          uint64_t v71 = *(void *)(v131 + 56);
          swift_bridgeObjectRelease();
          *(void *)(v71 + 8 * v78) = _swiftEmptyArrayStorage;
        }
        else
        {
          *(void *)(v131 + 8 * (v78 >> 6) + 64) |= 1 << v78;
          *(void *)(*(void *)(v131 + 48) + 8 * v78) = v75;
          *(void *)(*(void *)(v131 + 56) + 8 * v78) = _swiftEmptyArrayStorage;
          uint64_t v85 = *(void *)(v131 + 16);
          BOOL v6 = __OFADD__(v85, 1);
          uint64_t v86 = v85 + 1;
          if (v6) {
            goto LABEL_154;
          }
          *(void *)(v131 + 16) = v86;
          id v87 = v75;
        }
        swift_release();

        swift_bridgeObjectRelease();
        ++v70;
      }
      while (v73 != v69);
      swift_bridgeObjectRelease();
      uint64_t v21 = v127;
      goto LABEL_120;
    }
  }
  else
  {
    uint64_t v69 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v21 = v127;
    if (v69) {
      goto LABEL_93;
    }
  }
  swift_bridgeObjectRelease();
LABEL_120:
  unint64_t v91 = v131 + 64;
  uint64_t v92 = 1 << *(unsigned char *)(v131 + 32);
  uint64_t v93 = -1;
  if (v92 < 64) {
    uint64_t v93 = ~(-1 << v92);
  }
  unint64_t v94 = v93 & *(void *)(v131 + 64);
  int64_t v95 = (unint64_t)(v92 + 63) >> 6;
  uint64_t v96 = swift_bridgeObjectRetain();
  int64_t v97 = 0;
  if (!v94) {
    goto LABEL_124;
  }
LABEL_123:
  unint64_t v98 = __clz(__rbit64(v94));
  v94 &= v94 - 1;
  for (unint64_t i = v98 | (v97 << 6); ; unint64_t i = __clz(__rbit64(v100)) + (v97 << 6))
  {
    uint64_t v102 = v96;
    id v103 = *(id *)(*(void *)(v96 + 48) + 8 * i);
    unint64_t v104 = swift_bridgeObjectRetain();
    sub_100090AB8(v104);
    if (v21)
    {
      swift_bridgeObjectRelease();

      swift_release();
      goto LABEL_144;
    }

    swift_bridgeObjectRelease();
    uint64_t v96 = v102;
    if (v94) {
      goto LABEL_123;
    }
LABEL_124:
    BOOL v6 = __OFADD__(v97++, 1);
    if (v6) {
      goto LABEL_152;
    }
    if (v97 >= v95)
    {
LABEL_143:
      swift_release();
      goto LABEL_144;
    }
    unint64_t v100 = *(void *)(v91 + 8 * v97);
    if (!v100) {
      break;
    }
LABEL_134:
    unint64_t v94 = (v100 - 1) & v100;
  }
  int64_t v101 = v97 + 1;
  if (v97 + 1 >= v95) {
    goto LABEL_143;
  }
  unint64_t v100 = *(void *)(v91 + 8 * v101);
  if (v100) {
    goto LABEL_133;
  }
  int64_t v101 = v97 + 2;
  if (v97 + 2 >= v95) {
    goto LABEL_143;
  }
  unint64_t v100 = *(void *)(v91 + 8 * v101);
  if (v100) {
    goto LABEL_133;
  }
  int64_t v101 = v97 + 3;
  if (v97 + 3 >= v95) {
    goto LABEL_143;
  }
  unint64_t v100 = *(void *)(v91 + 8 * v101);
  if (v100)
  {
LABEL_133:
    int64_t v97 = v101;
    goto LABEL_134;
  }
  while (1)
  {
    int64_t v97 = v101 + 1;
    if (__OFADD__(v101, 1)) {
      break;
    }
    if (v97 >= v95) {
      goto LABEL_143;
    }
    unint64_t v100 = *(void *)(v91 + 8 * v97);
    ++v101;
    if (v100) {
      goto LABEL_134;
    }
  }
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  type metadata accessor for AUAStream(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

Swift::Void __swiftcall AUAAudioDevice.createStreams()()
{
  unint64_t v1 = v0;
  id v2 = [v0 inputStreams];
  if (!v2) {
    goto LABEL_54;
  }
  uint64_t v3 = v2;
  sub_10000CECC(0, (unint64_t *)&qword_100127B00);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (!v5) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v5) {
      goto LABEL_11;
    }
  }
  if (v5 < 1)
  {
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v5; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0) {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v7 = *(id *)(v4 + 8 * i + 32);
    }
    uint64_t v8 = v7;
    [v0 removeInputStream:v7];
  }
LABEL_11:
  swift_bridgeObjectRelease_n();
  id v9 = [v0 outputStreams];
  if (!v9) {
    goto LABEL_55;
  }
  uint64_t v10 = v9;
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    if (v12)
    {
LABEL_14:
      if (v12 >= 1)
      {
        for (uint64_t j = 0; j != v12; ++j)
        {
          if ((v11 & 0xC000000000000001) != 0) {
            id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v14 = *(id *)(v11 + 8 * j + 32);
          }
          char v15 = v14;
          [v1 removeOutputStream:v14];
        }
        goto LABEL_21;
      }
      goto LABEL_53;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v12) {
      goto LABEL_14;
    }
  }
LABEL_21:
  swift_bridgeObjectRelease_n();
  unint64_t v16 = *(void *)&v1[OBJC_IVAR___AUAAudioDevice_streamingInterfaces];
  if (v16 >> 62) {
    goto LABEL_48;
  }
  uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v17; uint64_t v17 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v35 = 1;
    uint64_t v36 = v17;
    uint64_t v18 = 4;
    unint64_t v37 = v16 & 0xC000000000000001;
    unint64_t v33 = v16;
    unint64_t v34 = 1;
    while (1)
    {
      uint64_t v20 = v18 - 4;
      if (!v37) {
        break;
      }
      uint64_t v21 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v22 = v18 - 3;
      if (__OFADD__(v20, 1)) {
        goto LABEL_45;
      }
LABEL_31:
      unint64_t v23 = v16;
      unint64_t v16 = sub_10009C08C(v21, v1);
      if ([(id)v16 direction] == 1768845428)
      {
        if ((v34 & 0x8000000000000000) != 0 || HIDWORD(v34)) {
          goto LABEL_56;
        }
        [(id)v16 setStartingChannel:v34];
        swift_retain();
        Swift::Int active = ActiveStreamingInterface.channelCount()();
        if (v25)
        {

          swift_release();
          unint64_t v16 = v23;
          uint64_t v26 = v36;
LABEL_24:
          _StringGuts.grow(_:)(25);
          v19._countAndFlagsBits = 0xD000000000000017;
          v19._object = (void *)0x80000001000E1BA0;
          String.append(_:)(v19);
          sub_10000AC7C(&qword_100127400);
          _print_unlocked<A, B>(_:_:)();
          sub_10002E81C(0, 0xE000000000000000, 0x7453657461657263, (void *)0xEF2928736D616572, 0xD00000000000001BLL, 0x80000001000E1230, 553);
          swift_bridgeObjectRelease();
          swift_release();
          swift_errorRelease();
          goto LABEL_25;
        }
        Swift::Int v29 = active;
        swift_release();
        if (__OFADD__(v34, v29)) {
          goto LABEL_46;
        }
        v34 += v29;
        id v30 = (id)v16;
        [v1 addInputStream:v30];

        swift_release();
        unint64_t v16 = v23;
        uint64_t v26 = v36;
      }
      else
      {
        if ((v35 & 0x8000000000000000) != 0 || HIDWORD(v35)) {
          goto LABEL_56;
        }
        [(id)v16 setStartingChannel:v35];
        swift_retain();
        Swift::Int v27 = ActiveStreamingInterface.channelCount()();
        if (v28)
        {

          swift_release();
          uint64_t v26 = v36;
          unint64_t v16 = v33;
          goto LABEL_24;
        }
        Swift::Int v31 = v27;
        swift_release();
        if (__OFADD__(v35, v31)) {
          goto LABEL_47;
        }
        v35 += v31;
        id v32 = (id)v16;
        [v1 addOutputStream:v32];

        swift_release();
        uint64_t v26 = v36;
        unint64_t v16 = v33;
      }
LABEL_25:
      ++v18;
      if (v22 == v26) {
        goto LABEL_51;
      }
    }
    uint64_t v21 = *(void **)(v16 + 8 * v18);
    swift_retain();
    uint64_t v22 = v18 - 3;
    if (!__OFADD__(v20, 1)) {
      goto LABEL_31;
    }
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    swift_bridgeObjectRetain();
  }

LABEL_51:
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall AUAAudioDevice.clockChanged()()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___AUAAudioDevice_clock + 8);
  uint64_t ObjectType = swift_getObjectType();
  double v3 = (double)(unint64_t)(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(ObjectType, v1);
  if (v4) {
    double v3 = 0.0;
  }
  AUAAudioDevice.setSamplingRate(_:)(v3);
  AUAAudioDevice.publishStreamFormats()();
  if (v5)
  {
    BOOL v6 = (void *)0xEE00656369766564;
    uint64_t v7 = 0x206E776F6E6B6E55;
    _StringGuts.grow(_:)(57);
    v8._countAndFlagsBits = 0xD00000000000001ALL;
    v8._object = (void *)0x80000001000E1B60;
    String.append(_:)(v8);
    if (*(void *)(v0 + OBJC_IVAR___AUAAudioDevice_function))
    {
      uint64_t v9 = *(void *)(v0 + OBJC_IVAR___AUAAudioDevice_function + 8);
      uint64_t v10 = swift_getObjectType();
      unint64_t v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v10, v9);
      if (v11)
      {
        uint64_t v12 = v11;
        id v13 = [v11 boxName];

        if (v13)
        {
          uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          BOOL v6 = v14;
        }
      }
    }
    v15._countAndFlagsBits = v7;
    v15._object = v6;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._object = (void *)0x80000001000E1B80;
    v16._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v16);
    sub_10000AC7C(&qword_100127400);
    _print_unlocked<A, B>(_:_:)();
    sub_10002E81C(0, 0xE000000000000000, 0x6168436B636F6C63, (void *)0xEE0029286465676ELL, 0xD00000000000001BLL, 0x80000001000E1230, 568);
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
}

Swift::Void __swiftcall AUAAudioDevice.updateSafetyOffsets()()
{
  id v2 = v0;
  if (!*(void *)&v0[OBJC_IVAR___AUAAudioDevice_function]) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)&v0[OBJC_IVAR___AUAAudioDevice_function + 8];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v1 = (char *)*(id *)((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(ObjectType, v3) + 152);
  swift_release();
  id v5 = *(id *)&v1[OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceService];
  BOOL v6 = sub_1000CA048(v5);
  uint64_t v8 = v7;

  if (v6 == (void *)0x49434872657355 && v8 == 0xE700000000000000)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {
      if (os_variant_has_internal_content())
      {
        if (qword_100126938 == -1) {
          goto LABEL_12;
        }
        goto LABEL_46;
      }
      goto LABEL_19;
    }
  }
  LODWORD(v11) = 10;
  for (double i = 10.0; ; double i = (double)v30)
  {
    while (1)
    {
      [v2 samplingRate];
      double v18 = v17 / (double)v11;
      if ((~*(void *)&v18 & 0x7FF0000000000000) == 0)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      if (v18 <= -1.0) {
        goto LABEL_39;
      }
      if (v18 >= 4294967300.0) {
        goto LABEL_40;
      }
      if (v18 >= 0xFFFFFFFE) {
        goto LABEL_41;
      }
      [v2 setInputSafetyOffset:v18 + 2];
      [v2 samplingRate];
      double v20 = v19 / i;
      if ((~*(void *)&v20 & 0x7FF0000000000000) == 0) {
        goto LABEL_42;
      }
      if (v20 <= -1.0) {
        goto LABEL_43;
      }
      if (v20 >= 4294967300.0) {
        goto LABEL_44;
      }
      if (v20 < 0xFFFFFFFE)
      {
        [v2 setOutputSafetyOffset:v20 + 2];
        _StringGuts.grow(_:)(43);
        swift_bridgeObjectRelease();
        [v2 inputSafetyOffset];
        v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        v22._object = (void *)0x80000001000E1A60;
        v22._countAndFlagsBits = 0xD000000000000015;
        String.append(_:)(v22);
        [v2 outputSafetyOffset];
        v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        sub_10002E804(0xD000000000000012, 0x80000001000E1A40, 0xD000000000000015, (void *)0x80000001000E1A80, 0xD00000000000001BLL, 0x80000001000E1230, 628);
        swift_bridgeObjectRelease();
        return;
      }
LABEL_45:
      __break(1u);
LABEL_46:
      swift_once();
LABEL_12:
      uint64_t v13 = qword_10012B2A8;
      if (sub_1000CB9FC() && sub_1000CB9FC()) {
        break;
      }
LABEL_19:

LABEL_20:
      LODWORD(v11) = 666;
LABEL_21:
      double i = 1000.0;
    }
    id v14 = *(void **)(v13 + 16);
    if (v14) {
      break;
    }
LABEL_31:
    _StringGuts.grow(_:)(68);
    v24._countAndFlagsBits = 0xD000000000000026;
    v24._object = (void *)0x80000001000E1B10;
    String.append(_:)(v24);
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 0xD00000000000001CLL;
    v26._object = (void *)0x80000001000E1AD0;
    String.append(_:)(v26);
    sub_10002E804(0, 0xE000000000000000, 0xD000000000000015, (void *)0x80000001000E1A80, 0xD00000000000001BLL, 0x80000001000E1230, 608);
    swift_bridgeObjectRelease();
    LODWORD(v11) = 666;
LABEL_32:
    Swift::Int v27 = *(void **)(qword_10012B2A8 + 16);
    if (!v27) {
      goto LABEL_37;
    }
    id v28 = v27;
    NSString v29 = String._bridgeToObjectiveC()();
    unint64_t v30 = (unint64_t)[v28 integerForKey:v29];

    if ((v30 & 0x8000000000000000) != 0 || HIDWORD(v30)) {
      goto LABEL_47;
    }
    if ((v30 - 8001) < 0xFFFFE1B9)
    {
LABEL_37:
      _StringGuts.grow(_:)(69);
      v31._countAndFlagsBits = 0xD000000000000027;
      v31._object = (void *)0x80000001000E1AA0;
      String.append(_:)(v31);
      v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._countAndFlagsBits = 0xD00000000000001CLL;
      v33._object = (void *)0x80000001000E1AD0;
      String.append(_:)(v33);
      sub_10002E804(0, 0xE000000000000000, 0xD000000000000015, (void *)0x80000001000E1A80, 0xD00000000000001BLL, 0x80000001000E1230, 618);
      swift_bridgeObjectRelease();

      goto LABEL_21;
    }
  }
  id v15 = v14;
  NSString v16 = String._bridgeToObjectiveC()();
  unint64_t v11 = (unint64_t)[v15 integerForKey:v16];

  if ((v11 & 0x8000000000000000) == 0 && !HIDWORD(v11))
  {
    if ((v11 - 8001) > 0xFFFFE1B8) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
LABEL_47:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall AUAAudioDevice.setSamplingRate(_:)(Swift::Double a1)
{
  uint64_t v3 = type metadata accessor for OSSignposter();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001268E0 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_10000AD60(v3, (uint64_t)qword_10012B1B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  uint64_t v8 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)uint64_t v8 = 134217984;
  *(Swift::Double *)&v14[1] = a1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t v9 = OSSignposter.logHandle.getter();
  os_signpost_type_t v10 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v11 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, v10, v11, "AUAAudioDevice_setSamplingRate", "newRate: %f", v8, 0xCu);
  sub_100013724(v1, a1);
  os_signpost_type_t v12 = static os_signpost_type_t.end.getter();
  os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, v12, v13, "AUAAudioDevice_setSamplingRate", "newRate: %f", v8, 0xCu);

  swift_slowDealloc();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

id sub_100013724(char *a1, double a2)
{
  uint64_t v3 = a1;
  if (!*(void *)&a1[OBJC_IVAR___AUAAudioDevice_function]
    || (uint64_t v4 = *(void *)&a1[OBJC_IVAR___AUAAudioDevice_function + 8],
        uint64_t v5 = swift_getObjectType(),
        (*(unsigned __int8 (**)(uint64_t, uint64_t))(v4 + 40))(v5, v4)))
  {
    unint64_t v6 = *(void *)&v3[OBJC_IVAR___AUAAudioDevice_clock];
    uint64_t v7 = *(void *)&v3[OBJC_IVAR___AUAAudioDevice_clock + 8];
    uint64_t ObjectType = swift_getObjectType();
    if ((~*(void *)&a2 & 0x7FF0000000000000) != 0)
    {
      if (a2 > -1.0)
      {
        if (a2 < 1.84467441e19)
        {
          uint64_t v9 = ObjectType;
          (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v7 + 24))((unint64_t)a2, 0, ObjectType, v7);
          unint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v9, v7);
          if (v11) {
            a2 = 0.0;
          }
          else {
            a2 = (double)v10;
          }
          goto LABEL_9;
        }
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_33;
  }
LABEL_9:
  [v3 setSamplingRate:a2];
  id v12 = [v3 inputStreams];
  if (!v12)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  os_signpost_id_t v13 = v12;
  sub_10000CECC(0, (unint64_t *)&qword_100127B00);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v15 = [v3 outputStreams];
  if (v15)
  {
    NSString v16 = v15;
    unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000A1900(v17);
    unint64_t v6 = (unint64_t)sub_10002EDD0(v14);
    swift_bridgeObjectRelease();
    if (!v6)
    {
      sub_10002E81C(0xD00000000000001FLL, 0x80000001000E1A00, 0xD000000000000013, (void *)0x80000001000E1A20, 0xD00000000000001BLL, 0x80000001000E1230, 669);
LABEL_36:
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      goto LABEL_37;
    }
    if (!(v6 >> 62))
    {
      uint64_t v18 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v18)
      {
LABEL_14:
        if (v18 < 1)
        {
LABEL_70:
          __break(1u);
          goto LABEL_71;
        }
        unint64_t v37 = v3;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        do
        {
          if ((v6 & 0xC000000000000001) != 0) {
            Swift::String v22 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            Swift::String v22 = (char *)*(id *)(v6 + 8 * v21 + 32);
          }
          Swift::String v23 = v22;
          ++v21;
          unsigned int v24 = [v22 direction];
          uint64_t v25 = *(void *)&v23[OBJC_IVAR___AUAStream_latencyInMs];

          if (v25 <= v19) {
            uint64_t v26 = v19;
          }
          else {
            uint64_t v26 = v25;
          }
          if (v25 <= v20) {
            uint64_t v27 = v20;
          }
          else {
            uint64_t v27 = v25;
          }
          if (v24 == 1768845428) {
            uint64_t v20 = v27;
          }
          else {
            uint64_t v19 = v26;
          }
        }
        while (v18 != v21);
        swift_bridgeObjectRelease();
        uint64_t v3 = v37;
LABEL_37:
        [v3 samplingRate];
        double v29 = v28 * 0.25;
        if ((~*(void *)&v29 & 0x7FF0000000000000) != 0)
        {
          if (v29 > -1.0)
          {
            if (v29 < 4294967300.0)
            {
              [v3 setTimestampPeriod:v29];
              AUAAudioDevice.updateSafetyOffsets()();
              if (v20 < 1)
              {
                unint64_t v32 = (unint64_t)[v3 inputSafetyOffset];
LABEL_49:
                [v3 setInputLatency:v32];
                if (v19 < 1)
                {
                  unint64_t v35 = (unint64_t)[v3 outputSafetyOffset];
                  return [v3 setOutputLatency:v35];
                }
                [v3 samplingRate];
                if ((~*(void *)&v33 & 0x7FF0000000000000) != 0)
                {
                  if (v33 > -9.22337204e18)
                  {
                    if (v33 < 9.22337204e18)
                    {
                      uint64_t v34 = (uint64_t)v33 / 1000;
                      unint64_t v35 = v19 * v34;
                      if ((unsigned __int128)(v19 * (__int128)v34) >> 64 == (v19 * v34) >> 63)
                      {
                        if ((v35 & 0x8000000000000000) != 0 || HIDWORD(v35)) {
                          goto LABEL_73;
                        }
                        return [v3 setOutputLatency:v35];
                      }
                      goto LABEL_69;
                    }
LABEL_68:
                    __break(1u);
LABEL_69:
                    __break(1u);
                    goto LABEL_70;
                  }
LABEL_67:
                  __break(1u);
                  goto LABEL_68;
                }
                goto LABEL_65;
              }
              [v3 samplingRate];
              if ((~*(void *)&v30 & 0x7FF0000000000000) != 0)
              {
                if (v30 > -9.22337204e18)
                {
                  if (v30 < 9.22337204e18)
                  {
                    uint64_t v31 = (uint64_t)v30 / 1000;
                    unint64_t v32 = v20 * v31;
                    if ((unsigned __int128)(v20 * (__int128)v31) >> 64 != (v20 * v31) >> 63)
                    {
LABEL_66:
                      __break(1u);
                      goto LABEL_67;
                    }
                    if ((v32 & 0x8000000000000000) != 0 || HIDWORD(v32)) {
                      goto LABEL_73;
                    }
                    goto LABEL_49;
                  }
LABEL_64:
                  __break(1u);
LABEL_65:
                  __break(1u);
                  goto LABEL_66;
                }
LABEL_63:
                __break(1u);
                goto LABEL_64;
              }
LABEL_62:
              __break(1u);
              goto LABEL_63;
            }
LABEL_61:
            __break(1u);
            goto LABEL_62;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        goto LABEL_61;
      }
      goto LABEL_35;
    }
LABEL_34:
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18) {
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
LABEL_72:
  __break(1u);
LABEL_73:
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v44 = a7;
  uint64_t v42 = a5;
  uint64_t v43 = a6;
  uint64_t v40 = a1;
  uint64_t v41 = a3;
  uint64_t v9 = type metadata accessor for OSSignpostID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  os_signpost_id_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v15 = (char *)&v38 - v14;
  if (qword_1001268E0 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for OSSignposter();
  sub_10000AD60(v16, (uint64_t)qword_10012B1B8);
  unint64_t v17 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v17(v15, &v45[OBJC_IVAR___AUAAudioDevice_signpostID], v9);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v18 = OSSignposter.logHandle.getter();
  int v39 = static os_signpost_type_t.event.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    unint64_t v38 = v13;
    v17(v13, v15, v9);
    uint64_t v19 = swift_slowAlloc();
    uint64_t aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315650;
    swift_bridgeObjectRetain();
    uint64_t v46 = sub_1000192BC(v40, a2, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v46 = sub_1000192BC(v41, a4, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 22) = 2048;
    uint64_t v46 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v20 = v38;
    os_signpost_id_t v21 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, (os_signpost_type_t)v39, v21, "AUAAudioDevice_requestConfigurationChange", "%s, %s - %ld", (uint8_t *)v19, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    Swift::String v22 = *(void (**)(char *, uint64_t))(v10 + 8);
    v22(v15, v9);
    uint64_t v23 = ((uint64_t (*)(char *, uint64_t))v22)(v20, v9);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  }
  uint64_t v24 = *(void *)&v45[OBJC_IVAR___AUAAudioDevice_configChangedHandlers];
  uint64_t v25 = v43;
  if (v43)
  {
    uint64_t v23 = swift_allocObject();
    uint64_t v26 = v23;
    uint64_t v27 = v44;
    *(void *)(v23 + 16) = v25;
    *(void *)(v23 + 24) = v27;
    double v28 = sub_10001A120;
  }
  else
  {
    double v28 = 0;
    uint64_t v26 = 0;
  }
  uint64_t aBlock = (uint64_t)v28;
  uint64_t v49 = v26;
  double v29 = *(os_unfair_lock_s **)(v24 + 16);
  uint64_t v30 = __chkstk_darwin(v23);
  *(&v38 - 2) = (char *)v24;
  *(&v38 - 1) = (char *)&aBlock;
  __chkstk_darwin(v30);
  *(&v38 - 2) = (char *)sub_10001A000;
  *(&v38 - 1) = v31;
  sub_10001A060(v25);
  swift_retain();
  os_unfair_lock_lock(v29 + 4);
  sub_10001A01C(&v46);
  os_unfair_lock_unlock(v29 + 4);
  int v32 = v46;
  swift_release();
  sub_10001AA54((uint64_t)v28);
  if (v32 == 1)
  {
    uint64_t v33 = swift_allocObject();
    uint64_t v34 = v45;
    *(void *)(v33 + 16) = v45;
    unint64_t v52 = sub_10001A0A8;
    uint64_t v53 = v33;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v49 = 1107296256;
    unint64_t v50 = sub_1000145E0;
    id v51 = &unk_100117A68;
    unint64_t v35 = _Block_copy(&aBlock);
    id v36 = v34;
    swift_release();
    unint64_t v37 = (objc_class *)type metadata accessor for AUAAudioDevice(0);
    v47.receiver = v36;
    v47.super_class = v37;
    objc_msgSendSuper2(&v47, "requestConfigurationChange:", v35);
    _Block_release(v35);
  }
}

uint64_t sub_100014224(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OSSignposter();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1001268E0 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_10000AD60(v6, (uint64_t)qword_10012B1B8);
  uint64_t v26 = v7;
  uint64_t v27 = v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  uint64_t v28 = v3;
  uint64_t v29 = v2;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1 + OBJC_IVAR___AUAAudioDevice_signpostID, v2);
  uint64_t v11 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v11 = 0;
  uint64_t v12 = OSSignposter.logHandle.getter();
  os_signpost_type_t v13 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v14 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, v13, v14, "AUAAudioDevice_dispatchConfigurationChange", "", v11, 2u);
  uint64_t v16 = *(void *)(a1 + OBJC_IVAR___AUAAudioDevice_configChangedHandlers);
  while (1)
  {
    unint64_t v17 = *(os_unfair_lock_s **)(v16 + 16);
    __chkstk_darwin(v15);
    *(&v25 - 2) = (uint64_t)sub_10001AC18;
    *(&v25 - 1) = v16;
    swift_retain();
    os_unfair_lock_lock(v17 + 4);
    sub_10001AC34(&v30);
    os_unfair_lock_unlock(v17 + 4);
    uint64_t v18 = (void (*)(uint64_t))v30;
    uint64_t v19 = swift_release();
    if (!v18) {
      break;
    }
    v18(v19);
    uint64_t v20 = sub_10001AA54((uint64_t)v18);
    os_signpost_id_t v21 = *(os_unfair_lock_s **)(v16 + 16);
    __chkstk_darwin(v20);
    *(&v25 - 2) = (uint64_t)sub_10001AC78;
    *(&v25 - 1) = v16;
    swift_retain();
    os_unfair_lock_lock(v21 + 4);
    sub_10001AC34(&v30);
    os_unfair_lock_unlock(v21 + 4);
    swift_release();
    uint64_t v15 = swift_release();
  }
  os_signpost_type_t v22 = static os_signpost_type_t.end.getter();
  os_signpost_id_t v23 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, v22, v23, "AUAAudioDevice_dispatchConfigurationChange", "", v11, 2u);

  swift_slowDealloc();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v5, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v9, v27);
}

uint64_t sub_1000145E0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

void AUAAudioDevice.requestConfigurationChange(_:)(uint64_t a1, uint64_t a2)
{
}

uint64_t AUAAudioDevice.getLockDelay(_:)(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = &v33[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v10 = &v33[-v9];
  if (!*(void *)(v1 + OBJC_IVAR___AUAAudioDevice_function)) {
    return 0;
  }
  uint64_t v11 = *(void *)(v1 + OBJC_IVAR___AUAAudioDevice_function + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(ObjectType, v11);
  if (result)
  {
    os_signpost_id_t v14 = (void *)result;
    uint64_t v15 = *(void *)(result + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
    if (v15)
    {
      if (sub_10001925C(19, v15))
      {

        return 100;
      }
      if (sub_10001925C(24, v15))
      {

        return 200;
      }
    }
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      if (v16) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v16 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v16)
      {
LABEL_11:
        unint64_t v35 = v8;
        uint64_t v36 = v5;
        uint64_t v37 = v4;
        if (v16 < 1)
        {
          __break(1u);
          goto LABEL_33;
        }
        uint64_t v17 = 0;
        unint64_t v18 = 0;
        do
        {
          if ((a1 & 0xC000000000000001) != 0) {
            id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v19 = *(id *)(a1 + 8 * v17 + 32);
          }
          uint64_t v20 = v19;
          sub_1000908BC();
          unint64_t v22 = v21;

          if (v22 > v18) {
            unint64_t v18 = v22;
          }
          ++v17;
        }
        while (v16 != v17);
        swift_bridgeObjectRelease();
        unint64_t v39 = v18;
        if (v18 > 0x190)
        {
          if (qword_1001268E0 == -1)
          {
LABEL_21:
            uint64_t v23 = type metadata accessor for OSSignposter();
            sub_10000AD60(v23, (uint64_t)qword_10012B1B8);
            uint64_t v25 = v36;
            uint64_t v24 = v37;
            uint64_t v26 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v36 + 16);
            v26(v10, v2 + OBJC_IVAR___AUAAudioDevice_signpostID, v37);
            uint64_t v27 = OSSignposter.logHandle.getter();
            int v28 = static os_signpost_type_t.event.getter();
            if (OS_os_log.signpostsEnabled.getter())
            {
              int v34 = v28;
              uint64_t v29 = v35;
              v26(v35, (uint64_t)v10, v24);
              uint64_t v30 = swift_slowAlloc();
              *(_DWORD *)uint64_t v30 = 134218240;
              swift_beginAccess();
              uint64_t v38 = v39;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v30 + 12) = 2048;
              uint64_t v38 = 400;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              os_signpost_id_t v31 = OSSignpostID.rawValue.getter();
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v27, (os_signpost_type_t)v34, v31, "AUAAudioDevice_getLockDelay", "lockDelayMS %lu is too large. Using %lu", (uint8_t *)v30, 0x16u);
              swift_slowDealloc();

              int v32 = *(void (**)(unsigned char *, uint64_t))(v25 + 8);
              v32(v10, v24);
              v32(v29, v24);
            }
            else
            {

              (*(void (**)(unsigned char *, uint64_t))(v25 + 8))(v10, v24);
            }
            swift_beginAccess();
            unint64_t v18 = 400;
            goto LABEL_28;
          }
LABEL_33:
          swift_once();
          goto LABEL_21;
        }
LABEL_27:

LABEL_28:
        if (v18 <= 0x18) {
          return 24;
        }
        else {
          return v18;
        }
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v18 = 0;
    goto LABEL_27;
  }
  return result;
}

Swift::Int32 __swiftcall AUAAudioDevice.performStartIO()()
{
  uint64_t v1 = type metadata accessor for OSSignposter();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002E804(0x536D726F66726570, 0xEE004F4974726174, 0xD000000000000010, (void *)0x80000001000E1250, 0xD00000000000001BLL, 0x80000001000E1230, 761);
  if (qword_1001268E0 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10000AD60(v1, (uint64_t)qword_10012B1B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, v1);
  id v6 = v0;
  uint64_t v17 = v1;
  id v7 = v6;
  uint64_t v8 = swift_slowAlloc();
  *(_DWORD *)uint64_t v8 = 134218240;
  [v7 samplingRate];
  uint64_t v18 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v8 + 12) = 1024;
  LODWORD(v18) = [v7 timestampPeriod];
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  uint64_t v10 = OSSignposter.logHandle.getter();
  os_signpost_type_t v11 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v12 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, v11, v12, "AUAAudioDevice_performStartIO", "samplingRate %f, timestampPeriod %u", (uint8_t *)v8, 0x12u);
  sub_100014E74((char *)v7, &v18);
  LOBYTE(v7) = static os_signpost_type_t.end.getter();
  os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, (os_signpost_type_t)v7, v13, "AUAAudioDevice_performStartIO", "samplingRate %f, timestampPeriod %u", (uint8_t *)v8, 0x12u);

  Swift::Int32 v14 = v18;
  swift_slowDealloc();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v17);
  return v14;
}

uint64_t sub_100014E74@<X0>(char *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v105 = a2;
  unint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v8 = (unint64_t)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v95 - v9;
  uint64_t v11 = *(void *)&a1[OBJC_IVAR___AUAAudioDevice_curZTSSeed];
  if (v11 == -1)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v104 = v2;
  *(void *)&a1[OBJC_IVAR___AUAAudioDevice_curZTSSeed] = v11 + 1;
  *(void *)&a1[OBJC_IVAR___AUAAudioDevice_lastZTSMach] = 0;
  *(void *)&a1[OBJC_IVAR___AUAAudioDevice_lastZTSDeltaNS] = 0;
  os_signpost_id_t v12 = *(void **)&a1[OBJC_IVAR___AUAAudioDevice_timestamp];
  objc_msgSend(v12, "reset:");
  os_signpost_id_t v13 = AudioDeviceRealtimeGetZeroTimestampBlock(v12);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  uint64_t v112 = sub_10001AB84;
  uint64_t v113 = v14;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v109 = 1107296256;
  uint64_t v110 = sub_100015D8C;
  unint64_t v111 = &unk_100117C60;
  uint64_t v15 = _Block_copy(&aBlock);
  swift_release();
  [a1 setGetZeroTimestampBlock:v15];
  _Block_release(v15);
  uint64_t v16 = AudioDeviceCreateGenericWillDoBlock((char)[a1 hasInput]);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v16;
  uint64_t v112 = sub_10001ABA8;
  uint64_t v113 = v17;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v109 = 1107296256;
  uint64_t v110 = sub_100015E00;
  unint64_t v111 = &unk_100117CB0;
  uint64_t v18 = _Block_copy(&aBlock);
  swift_release();
  [a1 setWillDoReadInputBlock:v18];
  _Block_release(v18);
  id v19 = AudioDeviceCreateGenericWillDoBlock((char)[a1 hasOutput]);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v19;
  uint64_t v112 = sub_10001AD28;
  uint64_t v113 = v20;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v109 = 1107296256;
  uint64_t v110 = sub_100015E00;
  unint64_t v111 = &unk_100117D00;
  unint64_t v21 = _Block_copy(&aBlock);
  swift_release();
  [a1 setWillDoWriteMixBlock:v21];
  _Block_release(v21);
  uint64_t result = (uint64_t)[a1 inputStreams];
  if (result)
  {
    uint64_t v23 = (void *)result;
    unint64_t v102 = v8;
    id v103 = v10;
    sub_10000CECC(0, (unint64_t *)&qword_100127B00);
    uint64_t v24 = (void **)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t result = (uint64_t)[a1 outputStreams];
    if (result)
    {
      uint64_t v25 = (void *)result;
      unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t aBlock = v24;
      sub_1000A1900(v26);
      unint64_t v8 = (unint64_t)sub_10002EDD0((unint64_t)aBlock);
      swift_bridgeObjectRelease();
      if (!v8)
      {
        sub_10000CD54();
        uint64_t v34 = swift_allocError();
        *(unsigned char *)uint64_t v35 = 1;
        *(void *)(v35 + 8) = 0;
        *(void *)(v35 + 16) = 0xE000000000000000;
        *(void *)(v35 + 24) = 0xD000000000000010;
        *(void *)(v35 + 32) = 0x80000001000E1250;
        *(void *)(v35 + 40) = 0xD00000000000001BLL;
        *(void *)(v35 + 48) = 0x80000001000E1230;
        *(void *)(v35 + 56) = 780;
        swift_willThrow();
        goto LABEL_20;
      }
      uint64_t v27 = AUAAudioDevice.getLockDelay(_:)(v8);
      uint64_t v100 = OBJC_IVAR___AUAAudioDevice_lockDelayMS;
      *(void *)&a1[OBJC_IVAR___AUAAudioDevice_lockDelayMS] = v27;
      if (!(v8 >> 62))
      {
        uint64_t v28 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        uint64_t v98 = v5;
        unint64_t v99 = v4;
        if (v28)
        {
LABEL_7:
          if (v28 < 1)
          {
LABEL_53:
            __break(1u);
            goto LABEL_54;
          }
          if ((v8 & 0xC000000000000001) != 0)
          {
            for (uint64_t i = 0; i != v28; ++i)
            {
              specialized _ArrayBuffer._getElementSlowPath(_:)();
              swift_unknownObjectRelease();
            }
          }
          swift_bridgeObjectRelease();
          int64_t v101 = &a1[OBJC_IVAR___AUAAudioDevice_feedbackDelayMS];
          *(void *)&a1[OBJC_IVAR___AUAAudioDevice_feedbackDelayMS] = 0;
          swift_bridgeObjectRetain();
          uint64_t v30 = 0;
          unint64_t v4 = 0;
          do
          {
            if ((v8 & 0xC000000000000001) != 0) {
              os_signpost_id_t v31 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              os_signpost_id_t v31 = *(id *)(v8 + 8 * v30 + 32);
            }
            int v32 = v31;
            unint64_t v33 = (*(uint64_t (**)(void))((swift_isaMask & *v31) + 0x208))();

            if (v33 > v4) {
              unint64_t v4 = v33;
            }
            ++v30;
          }
          while (v28 != v30);
          swift_bridgeObjectRelease();
          goto LABEL_24;
        }
LABEL_23:
        swift_bridgeObjectRelease();
        unint64_t v4 = 0;
        int64_t v101 = &a1[OBJC_IVAR___AUAAudioDevice_feedbackDelayMS];
        *(void *)&a1[OBJC_IVAR___AUAAudioDevice_feedbackDelayMS] = 0;
LABEL_24:
        uint64_t v37 = *(void **)&a1[OBJC_IVAR___AUAAudioDevice_clock];
        uint64_t v38 = *(void (***)(void, void))&a1[OBJC_IVAR___AUAAudioDevice_clock + 8];
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v40 = *(void *)&a1[OBJC_IVAR___AUAAudioDevice_formatChangeIOStartDelay_us];
        uint64_t v41 = v104;
        ((void (*)(uint64_t, uint64_t, void (**)(void, void)))v38[9])(v40, ObjectType, v38);
        uint64_t v34 = (uint64_t)v41;
        if (v41)
        {
          swift_bridgeObjectRelease();
          uint64_t v36 = v105;
          goto LABEL_26;
        }
        uint64_t v95 = v40;
        uint64_t v96 = ObjectType;
        id v97 = v37;
        unint64_t v104 = v38;
        if (v28)
        {
          uint64_t v43 = 4;
          while (1)
          {
            uint64_t v44 = (v8 & 0xC000000000000001) != 0
                ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)()
                : *(id *)(v8 + 8 * v43);
            uint64_t v45 = v44;
            uint64_t v46 = v43 - 3;
            if (__OFADD__(v43 - 4, 1)) {
              break;
            }
            (*(void (**)(void))((swift_isaMask & *v44) + 0x258))();

            ++v43;
            if (v46 == v28) {
              goto LABEL_35;
            }
          }
          __break(1u);
          goto LABEL_53;
        }
LABEL_35:
        swift_bridgeObjectRelease();
        objc_super v47 = *(void **)&a1[OBJC_IVAR___AUAAudioDevice_timeCorrelater];
        type metadata accessor for USBFrameTimeCorrelaterSession();
        uint64_t v48 = swift_allocObject();
        *(void *)(v48 + 16) = v47;
        unsigned __int8 v49 = [v47 start];
        *(unsigned char *)(v48 + 24) = v49;
        if (v49)
        {
          *(void *)&a1[OBJC_IVAR___AUAAudioDevice_timeCorrelaterSession] = v48;
          swift_retain();
          swift_release();
          v104[10](v95, v96);
          if (!*(void *)&a1[OBJC_IVAR___AUAAudioDevice_function]
            || (uint64_t v51 = *(void *)&a1[OBJC_IVAR___AUAAudioDevice_function + 8],
                uint64_t v52 = swift_getObjectType(),
                uint64_t v53 = *(void **)((*(uint64_t (**)(uint64_t, uint64_t))(v51 + 24))(v52, v51) + 200),
                id v54 = v53,
                swift_release(),
                !v53))
          {
            swift_release();
            uint64_t result = 3758097111;
            uint64_t v36 = v105;
            goto LABEL_27;
          }
          id v55 = (char *)[v54 frameNumberWithTime:0];
          char v56 = v55 + 5;
          if ((unint64_t)v55 < 0xFFFFFFFFFFFFFFFBLL)
          {
            char v57 = v101;
            unint64_t v58 = *(void *)&a1[v100];
            BOOL v59 = __CFADD__(v56, v58);
            BOOL v60 = &v56[v58];
            if (!v59)
            {
              BOOL v59 = __CFADD__(v60, v4);
              uint64_t v61 = &v60[v4];
              if (!v59)
              {
                unint64_t v62 = (unint64_t)v61 & ~v4;
                uint64_t v63 = OBJC_IVAR___AUAAudioDevice_startingUSBFeedbackFrame;
                *(void *)&a1[OBJC_IVAR___AUAAudioDevice_startingUSBFeedbackFrame] = v62;
                BOOL v59 = v62 >= v58;
                unint64_t v64 = v62 - v58;
                if (v59)
                {
                  unint64_t v104 = (void (**)(void, void))v55;
                  id v97 = v54;
                  uint64_t v65 = OBJC_IVAR___AUAAudioDevice_startingUSBLockDelayFrame;
                  *(void *)&a1[OBJC_IVAR___AUAAudioDevice_startingUSBLockDelayFrame] = v64;
                  BOOL v59 = __CFADD__(v62, *(void *)v57);
                  unint64_t v66 = v62 + *(void *)v57;
                  int64_t v101 = v57;
                  if (!v59)
                  {
                    uint64_t v67 = OBJC_IVAR___AUAAudioDevice_startingUSBDataFrame;
                    *(void *)&a1[OBJC_IVAR___AUAAudioDevice_startingUSBDataFrame] = v66;
                    uint64_t aBlock = 0;
                    uint64_t v109 = 0xE000000000000000;
                    _StringGuts.grow(_:)(157);
                    v68._countAndFlagsBits = 0xD00000000000001ALL;
                    v68._object = (void *)0x80000001000E1D50;
                    String.append(_:)(v68);
                    char v107 = *(void ***)&a1[v65];
                    v69._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v69);
                    swift_bridgeObjectRelease();
                    v70._object = (void *)0x80000001000E1D70;
                    v70._countAndFlagsBits = 0xD00000000000001BLL;
                    String.append(_:)(v70);
                    char v107 = *(void ***)&a1[v63];
                    v71._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v71);
                    swift_bridgeObjectRelease();
                    v72._countAndFlagsBits = 0xD000000000000017;
                    v72._object = (void *)0x80000001000E1D90;
                    String.append(_:)(v72);
                    uint64_t v96 = v67;
                    char v107 = *(void ***)&a1[v67];
                    v73._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v73);
                    swift_bridgeObjectRelease();
                    v74._countAndFlagsBits = 0x617246727563202CLL;
                    v74._object = (void *)0xEB0000000020656DLL;
                    String.append(_:)(v74);
                    char v107 = (void **)v104;
                    v75._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v75);
                    swift_bridgeObjectRelease();
                    v76._countAndFlagsBits = 0x65446B636F6C202CLL;
                    v76._object = (void *)0xEE0020534D79616CLL;
                    String.append(_:)(v76);
                    char v107 = *(void ***)&a1[v100];
                    v77._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v77);
                    swift_bridgeObjectRelease();
                    v78._countAndFlagsBits = 0xD000000000000012;
                    v78._object = (void *)0x80000001000E1DB0;
                    String.append(_:)(v78);
                    char v107 = *(void ***)v101;
                    v79._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v79);
                    swift_bridgeObjectRelease();
                    v80._countAndFlagsBits = 0xD000000000000018;
                    v80._object = (void *)0x80000001000E1DD0;
                    String.append(_:)(v80);
                    char v107 = (void **)v4;
                    v81._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v81);
                    swift_bridgeObjectRelease();
                    sub_10002E804((uint64_t)aBlock, v109, 0xD000000000000010, (void *)0x80000001000E1250, 0xD00000000000001BLL, 0x80000001000E1230, 807);
                    swift_bridgeObjectRelease();
                    if (qword_1001268E0 == -1)
                    {
LABEL_47:
                      uint64_t v82 = type metadata accessor for OSSignposter();
                      sub_10000AD60(v82, (uint64_t)qword_10012B1B8);
                      uint64_t v83 = v98;
                      char v84 = *(void (**)(char *, char *, unint64_t))(v98 + 16);
                      v84(v103, &a1[OBJC_IVAR___AUAAudioDevice_signpostID], v99);
                      uint64_t v85 = a1;
                      uint64_t v86 = (void (**)(void, void))OSSignposter.logHandle.getter();
                      LODWORD(v95) = static os_signpost_type_t.event.getter();
                      unint64_t v104 = v86;
                      if (OS_os_log.signpostsEnabled.getter())
                      {
                        v84((char *)v102, v103, v99);
                        uint64_t v87 = swift_slowAlloc();
                        *(_DWORD *)uint64_t v87 = 134218752;
                        uint64_t aBlock = *(void ***)&a1[v100];
                        UnsafeMutableRawBufferPointer.copyMemory(from:)();
                        *(_WORD *)(v87 + 12) = 2048;
                        uint64_t aBlock = *(void ***)v101;
                        UnsafeMutableRawBufferPointer.copyMemory(from:)();

                        *(_WORD *)(v87 + 22) = 2048;
                        uint64_t v88 = *(void ***)&a1[v96];

                        uint64_t aBlock = v88;
                        UnsafeMutableRawBufferPointer.copyMemory(from:)();

                        *(_WORD *)(v87 + 32) = 2048;
                        uint64_t aBlock = (void **)v4;
                        UnsafeMutableRawBufferPointer.copyMemory(from:)();
                        unint64_t v89 = v102;
                        os_signpost_id_t v90 = OSSignpostID.rawValue.getter();
                        id v91 = v104;
                        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, (os_log_t)v104, (os_signpost_type_t)v95, v90, "AUAAudioDevice_performStartIO", "lockDelayMS %lu, feedbackDelayMS %lu, startingUSBDataFrame %llu, startingFrameAlignment %llu", (uint8_t *)v87, 0x2Au);
                        swift_slowDealloc();
                        swift_release();

                        uint64_t v92 = *(void (**)(char *, unint64_t))(v83 + 8);
                        unint64_t v93 = v99;
                        v92(v103, v99);
                        v92((char *)v89, v93);
                      }
                      else
                      {
                        swift_release();

                        (*(void (**)(char *, unint64_t))(v83 + 8))(v103, v99);
                      }
                      uint64_t v36 = v105;
                      unint64_t v94 = (objc_class *)type metadata accessor for AUAAudioDevice(0);
                      v106.receiver = v85;
                      v106.super_class = v94;
                      uint64_t result = (uint64_t)objc_msgSendSuper2(&v106, "performStartIO");
                      goto LABEL_27;
                    }
LABEL_59:
                    swift_once();
                    goto LABEL_47;
                  }
LABEL_58:
                  __break(1u);
                  goto LABEL_59;
                }
LABEL_57:
                __break(1u);
                goto LABEL_58;
              }
LABEL_56:
              __break(1u);
              goto LABEL_57;
            }
LABEL_55:
            __break(1u);
            goto LABEL_56;
          }
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        sub_10000CD54();
        uint64_t v34 = swift_allocError();
        *(unsigned char *)uint64_t v50 = 102;
        *(void *)(v50 + 8) = 0;
        *(void *)(v50 + 16) = 0xE000000000000000;
        *(void *)(v50 + 24) = 0xD000000000000010;
        *(void *)(v50 + 32) = 0x80000001000E1250;
        *(void *)(v50 + 40) = 0xD00000000000001BLL;
        *(void *)(v50 + 48) = 0x80000001000E1230;
        *(void *)(v50 + 56) = 795;
        swift_willThrow();
        swift_release();
LABEL_20:
        uint64_t v36 = v105;
LABEL_26:
        uint64_t aBlock = 0;
        uint64_t v109 = 0xE000000000000000;
        _StringGuts.grow(_:)(23);
        v42._countAndFlagsBits = 0xD000000000000015;
        v42._object = (void *)0x80000001000E1D30;
        String.append(_:)(v42);
        char v107 = (void **)v34;
        sub_10000AC7C(&qword_100127400);
        _print_unlocked<A, B>(_:_:)();
        sub_10002E81C((uint64_t)aBlock, v109, 0xD000000000000010, (void *)0x80000001000E1250, 0xD00000000000001BLL, 0x80000001000E1230, 811);
        swift_errorRelease();
        swift_bridgeObjectRelease();
        uint64_t result = 1852990585;
LABEL_27:
        *uint64_t v36 = result;
        return result;
      }
LABEL_22:
      swift_bridgeObjectRetain();
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v98 = v5;
      unint64_t v99 = v4;
      if (v28) {
        goto LABEL_7;
      }
      goto LABEL_23;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100015D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v10 = v9(a2, a3, a4, a5);
  swift_release();
  return v10;
}

uint64_t sub_100015E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v8 = v7(a2, a3, a4);
  swift_release();
  return v8;
}

Swift::Int32 __swiftcall AUAAudioDevice.performStopIO()()
{
  uint64_t v1 = type metadata accessor for OSSignposter();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002E804(0x536D726F66726570, 0xED00004F49706F74, 0x536D726F66726570, (void *)0xEF29284F49706F74, 0xD00000000000001BLL, 0x80000001000E1230, 821);
  if (qword_1001268E0 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10000AD60(v1, (uint64_t)qword_10012B1B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, v1);
  uint64_t v6 = v0;
  uint64_t v7 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)uint64_t v7 = 134217984;
  uint64_t v17 = *(void *)&v6[OBJC_IVAR___AUAAudioDevice_curZTSSeed];
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  uint64_t v8 = OSSignposter.logHandle.getter();
  os_signpost_type_t v9 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v10 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, v9, v10, "AUAAudioDevice_performStopIO", "curZTSeed %llu", v7, 0xCu);
  uint64_t v11 = (objc_class *)type metadata accessor for AUAAudioDevice(0);
  v16.receiver = v6;
  v16.super_class = v11;
  Swift::Int32 v12 = objc_msgSendSuper2(&v16, "performStopIO");
  *(void *)&v6[OBJC_IVAR___AUAAudioDevice_timeCorrelaterSession] = 0;
  swift_release();
  *(void *)&v6[OBJC_IVAR___AUAAudioDevice_startingUSBDataFrame] = 0;
  *(void *)&v6[OBJC_IVAR___AUAAudioDevice_startingUSBLockDelayFrame] = 0;
  *(void *)&v6[OBJC_IVAR___AUAAudioDevice_startingUSBFeedbackFrame] = 0;
  LOBYTE(v6) = static os_signpost_type_t.end.getter();
  os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, (os_signpost_type_t)v6, v13, "AUAAudioDevice_performStopIO", "curZTSeed %llu", v7, 0xCu);

  swift_slowDealloc();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v12;
}

Swift::Bool __swiftcall AUAAudioDevice.changeSamplingRate(_:)(Swift::Double a1)
{
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(Swift::Double *)(v3 + 24) = a1;
  id v4 = v1;
  AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)(0xD000000000000016, 0x80000001000E12B0, 0xD00000000000001BLL, 0x80000001000E1230, 848, (uint64_t)sub_10001A148, v3);
  swift_release();
  return 1;
}

id AUAAudioDevice.updateTimeStamp(hostTime:sampleTime:seed:from:)(NSObject *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for OSSignpostID();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v47 - v13;
  id result = (id)__chkstk_darwin(v12);
  id v19 = (char *)&v47 - v18;
  uint64_t v20 = *(void *)(v5 + OBJC_IVAR___AUAAudioDevice_timeStampStream);
  if (v20) {
    BOOL v21 = v20 == a3;
  }
  else {
    BOOL v21 = 0;
  }
  if (!v21 || *(void *)(v5 + OBJC_IVAR___AUAAudioDevice_curZTSSeed) != a2) {
    return result;
  }
  uint64_t v54 = v17;
  uint64_t v55 = v16;
  id result = [*(id *)(v5 + OBJC_IVAR___AUAAudioDevice_timestamp) write:a1 hostTime:a4];
  uint64_t v22 = OBJC_IVAR___AUAAudioDevice_lastZTSMach;
  unint64_t v23 = *(void *)(v5 + OBJC_IVAR___AUAAudioDevice_lastZTSMach);
  unint64_t v24 = (unint64_t)a1 - v23;
  if ((unint64_t)a1 < v23)
  {
    __break(1u);
  }
  else if (qword_100126948 == -1)
  {
    goto LABEL_9;
  }
  id result = (id)swift_once();
LABEL_9:
  if (qword_10012B2D0 == HIDWORD(qword_10012B2D0)) {
    goto LABEL_13;
  }
  if (!is_mul_ok(v24, qword_10012B2D0))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (!HIDWORD(qword_10012B2D0))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  unint64_t v24 = v24 * qword_10012B2D0 / HIDWORD(qword_10012B2D0);
LABEL_13:
  if ((v24 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v25 = OBJC_IVAR___AUAAudioDevice_lastZTSDeltaNS;
    uint64_t v26 = *(void *)(v5 + OBJC_IVAR___AUAAudioDevice_lastZTSDeltaNS);
    BOOL v27 = __OFSUB__(v24, v26);
    uint64_t v28 = (v24 - v26);
    if (!v27)
    {
      uint64_t v53 = v28;
      *(void *)(v5 + v22) = a1;
      *(void *)(v5 + v25) = v24;
      if (qword_1001268E0 == -1) {
        goto LABEL_16;
      }
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_35:
  swift_once();
LABEL_16:
  uint64_t v29 = type metadata accessor for OSSignposter();
  uint64_t v30 = sub_10000AD60(v29, (uint64_t)qword_10012B1B8);
  uint64_t v31 = v55;
  int v32 = *(void (**)(char *))(v55 + 16);
  uint64_t v50 = v5 + OBJC_IVAR___AUAAudioDevice_signpostID;
  v32(v19);
  uint64_t v51 = v30;
  unint64_t v33 = OSSignposter.logHandle.getter();
  int v52 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {

    uint64_t v36 = *(void (**)(char *, uint64_t))(v31 + 8);
    v36(v19, v10);
    goto LABEL_22;
  }
  ((void (*)(char *, char *, uint64_t))v32)(v14, v19, v10);
  uint64_t v34 = swift_slowAlloc();
  *(_DWORD *)uint64_t v34 = 134218496;
  char v56 = a1;
  id result = (id)UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v34 + 12) = 2048;
  if ((~*(void *)&a4 & 0x7FF0000000000000) == 0) {
    goto LABEL_38;
  }
  if (a4 <= -1.0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  unsigned __int8 v49 = v32;
  if (a4 >= 1.84467441e19)
  {
LABEL_40:
    __break(1u);
    return result;
  }
  char v56 = a4;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v34 + 22) = 2048;
  char v56 = v53;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  os_signpost_id_t v35 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, (os_signpost_type_t)v52, v35, "AUAAudioDevice_updateTimeStamp", "hostTime %llu, sampleTime %llu, jitter ns %lld", (uint8_t *)v34, 0x20u);
  swift_slowDealloc();

  uint64_t v36 = *(void (**)(char *, uint64_t))(v55 + 8);
  v36(v19, v10);
  v36(v14, v10);
  int v32 = v49;
LABEL_22:
  id result = [*(id *)(v5 + OBJC_IVAR___AUAAudioDevice_timeCorrelater) getStatistics];
  uint64_t v37 = v58;
  if (v58)
  {
    uint64_t v38 = v56;
    unint64_t v39 = v59;
    uint64_t v40 = v60;
    if (v60 > 0x4E20 || v59 > 0x186A0 || v61 || v62)
    {
      uint64_t v48 = v57;
      LODWORD(v49) = v61;
      int v52 = v62;
      uint64_t v41 = v54;
      ((void (*)(uint64_t, uint64_t, uint64_t))v32)(v54, v50, v10);
      Swift::String v42 = OSSignposter.logHandle.getter();
      LODWORD(v51) = static os_signpost_type_t.event.getter();
      uint64_t v53 = v42;
      if (OS_os_log.signpostsEnabled.getter())
      {
        ((void (*)(char *, uint64_t, uint64_t))v32)(v14, v41, v10);
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v43 = 134219520;
        char v56 = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v43 + 12) = 2048;
        char v56 = v48;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v43 + 22) = 2048;
        char v56 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v43 + 32) = 2048;
        char v56 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v43 + 42) = 2048;
        char v56 = v40;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v43 + 52) = 1024;
        LODWORD(v56) = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v43 + 58) = 1024;
        LODWORD(v56) = v52;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        os_signpost_id_t v44 = OSSignpostID.rawValue.getter();
        uint64_t v45 = v53;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v53, (os_signpost_type_t)v51, v44, "AUAAudioDevice_timeCorrelater", "machPerFrame %f, wakeOffsetNS %llu, wakeErrorNSMax %llu, measurementDurationNSMax %llu, preemptedTimeNSMax %llu, failedMeasurementCount %u, missedWakeDeadlineCount %u", (uint8_t *)v43, 0x40u);
        swift_slowDealloc();

        uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
        v46(v41, v10);
        return (id)((uint64_t (*)(char *, uint64_t))v46)(v14, v10);
      }
      else
      {

        return (id)((uint64_t (*)(uint64_t, uint64_t))v36)(v41, v10);
      }
    }
  }
  return result;
}

Swift::Bool __swiftcall AUAAudioDevice.hasImplicitFeedbackStream()()
{
  id v1 = [v0 inputStreams];
  if (v1)
  {
    uint64_t v2 = v1;
    sub_10000CECC(0, (unint64_t *)&qword_100127B00);
    unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v3 >> 62) {
      goto LABEL_17;
    }
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v5 = 4;
      uint64_t v6 = 0;
      if ((v3 & 0xC000000000000001) != 0)
      {
LABEL_5:
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        goto LABEL_7;
      }
      while (1)
      {
        id v7 = *(id *)(v3 + 8 * v5);
LABEL_7:
        uint64_t v8 = v7;
        uint64_t v9 = v6 + 1;
        if (__OFADD__(v6, 1)) {
          break;
        }
        type metadata accessor for AUAStream(0);
        uint64_t v10 = (void *)swift_dynamicCastClass();
        if (v10)
        {
          uint64_t v11 = *(uint64_t (**)(void))((swift_isaMask & *v10) + 0x210);
          id v12 = v8;
          char v13 = v11();

          if (v13)
          {
            char v14 = 1;
            goto LABEL_19;
          }

          if (v9 == v4) {
            goto LABEL_18;
          }
        }
        else
        {

          if (v9 == v4) {
            goto LABEL_18;
          }
        }
        uint64_t v6 = ++v5 - 4;
        if ((v3 & 0xC000000000000001) != 0) {
          goto LABEL_5;
        }
      }
      __break(1u);
LABEL_17:
      swift_bridgeObjectRetain();
    }
LABEL_18:
    char v14 = 0;
    id v12 = 0;
LABEL_19:
    swift_bridgeObjectRelease_n();

    LOBYTE(v1) = v14;
  }
  else
  {
    __break(1u);
  }
  return (char)v1;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AUAAudioDevice.addGlobalControls()()
{
  uint64_t v2 = v0;
  if (!*(void *)&v0[OBJC_IVAR___AUAAudioDevice_function])
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v24 = 61;
    *(void *)(v24 + 8) = 0;
    *(void *)(v24 + 16) = 0xE000000000000000;
    *(void *)(v24 + 24) = 0xD000000000000013;
    *(void *)(v24 + 32) = 0x80000001000E1960;
    *(void *)(v24 + 40) = 0xD00000000000001BLL;
    *(void *)(v24 + 48) = 0x80000001000E1230;
    *(void *)(v24 + 56) = 908;
    swift_willThrow();
    return;
  }
  uint64_t v3 = *(void *)&v0[OBJC_IVAR___AUAAudioDevice_function + 8];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 24);
  swift_unknownObjectRetain();
  uint64_t v6 = v5(ObjectType, v3);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(ObjectType, v3);
  if (!v7)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v25 = 7;
    *(void *)(v25 + 8) = 0;
    *(void *)(v25 + 16) = 0xE000000000000000;
    *(void *)(v25 + 24) = 0xD000000000000013;
    *(void *)(v25 + 32) = 0x80000001000E1960;
    *(void *)(v25 + 40) = 0xD00000000000001BLL;
    *(void *)(v25 + 48) = 0x80000001000E1230;
    *(void *)(v25 + 56) = 910;
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_release();
    return;
  }
  uint64_t v8 = (void *)v7;
  uint64_t v32 = v1;
  uint64_t v9 = *(void *)(v6 + 168);
  uint64_t v28 = *(void *)(v9 + 16);
  if (!v28)
  {
    swift_unknownObjectRelease();
    swift_release();

    return;
  }
  uint64_t v26 = v6;
  swift_bridgeObjectRetain();
  unint64_t v10 = 0;
  BOOL v27 = v8;
  while (v10 < *(void *)(v9 + 16))
  {
    sub_10001A9B8(v9 + 32 + 40 * v10, (uint64_t)v29);
    uint64_t v12 = v30;
    uint64_t v11 = v31;
    sub_10001A974(v29, v30);
    id v13 = [v8 plugin];
    if (!v13) {
      goto LABEL_28;
    }
    char v14 = v13;
    uint64_t v15 = v32;
    uint64_t v16 = (*(uint64_t (**)(uint64_t, id, uint64_t, uint64_t))(v11 + 72))(1735159650, v13, v12, v11);
    uint64_t v32 = v15;
    if (v15)
    {
      swift_unknownObjectRelease();
      swift_release();

      swift_bridgeObjectRelease();
      sub_10001ABC4((uint64_t)v29);
      return;
    }
    unint64_t v17 = v16;

    swift_bridgeObjectRelease();
    if (v17)
    {
      if (v17 >> 62)
      {
        id v23 = v2;
        swift_bridgeObjectRetain();
        uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
        if (v18)
        {
LABEL_13:
          if (v18 < 1) {
            goto LABEL_27;
          }
          for (uint64_t i = 0; i != v18; ++i)
          {
            if ((v17 & 0xC000000000000001) != 0) {
              id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v21 = *(id *)(v17 + 8 * i + 32);
            }
            uint64_t v22 = v21;
            objc_msgSend(v2, "addControl:", v21, v26);
          }
        }
      }
      else
      {
        uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
        id v19 = v2;
        swift_bridgeObjectRetain();
        if (v18) {
          goto LABEL_13;
        }
      }

      swift_bridgeObjectRelease_n();
      uint64_t v8 = v27;
    }
    ++v10;
    sub_10001ABC4((uint64_t)v29);
    if (v10 == v28)
    {
      swift_unknownObjectRelease();
      swift_release();

      swift_bridgeObjectRelease();
      return;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AUAAudioDevice.addStreamControls()()
{
  uint64_t v2 = *(void *)&v0[OBJC_IVAR___AUAAudioDevice_function];
  if (!v2)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v15 = 61;
    *(void *)(v15 + 8) = 0;
    *(void *)(v15 + 16) = 0xE000000000000000;
    *(void *)(v15 + 24) = 0xD000000000000013;
    *(void *)(v15 + 32) = 0x80000001000E1920;
    *(void *)(v15 + 40) = 0xD00000000000001BLL;
    *(void *)(v15 + 48) = 0x80000001000E1230;
    *(void *)(v15 + 56) = 926;
    swift_willThrow();
    return;
  }
  uint64_t v3 = v0;
  uint64_t v4 = *(void *)&v0[OBJC_IVAR___AUAAudioDevice_function + 8];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 24);
  swift_unknownObjectRetain();
  uint64_t v7 = v6(ObjectType, v4);
  uint64_t v101 = v4;
  id v102 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(ObjectType, v4);
  if (!v102)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v16 = 7;
    *(void *)(v16 + 8) = 0;
    *(void *)(v16 + 16) = 0xE000000000000000;
    *(void *)(v16 + 24) = 0xD000000000000013;
    *(void *)(v16 + 32) = 0x80000001000E1920;
    *(void *)(v16 + 40) = 0xD00000000000001BLL;
    *(void *)(v16 + 48) = 0x80000001000E1230;
    *(void *)(v16 + 56) = 928;
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_release();
    return;
  }
  uint64_t v100 = v7;
  id v8 = [v0 controls];
  id v98 = v0;
  if (v8)
  {
    uint64_t v9 = v8;
    sub_10000CECC(0, &qword_100127B20);
    unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v105[0] = _swiftEmptyArrayStorage;
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      if (v11) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v11)
      {
LABEL_6:
        if (v11 < 1)
        {
          __break(1u);
          goto LABEL_111;
        }
        for (uint64_t i = 0; i != v11; ++i)
        {
          if ((v10 & 0xC000000000000001) != 0) {
            id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v13 = *(id *)(v10 + 8 * i + 32);
          }
          char v14 = v13;
          if ([v13 controlScope] == 1735159650)
          {
          }
          else
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v105[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v105[0] & 0xFFFFFFFFFFFFFF8)
                                                                                  + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v17 = v105[0];
        uint64_t v3 = v98;
LABEL_22:
        swift_bridgeObjectRelease();
        if (v17 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v18)
          {
LABEL_24:
            if (v18 >= 1)
            {
              for (uint64_t j = 0; j != v18; ++j)
              {
                if ((v17 & 0xC000000000000001) != 0) {
                  id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else {
                  id v20 = *(id *)(v17 + 8 * j + 32);
                }
                id v21 = v20;
                [v3 removeControl:v20];
              }
              goto LABEL_31;
            }
LABEL_111:
            __break(1u);
            goto LABEL_112;
          }
        }
        else
        {
          uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v18) {
            goto LABEL_24;
          }
        }
LABEL_31:
        swift_bridgeObjectRelease();
        goto LABEL_32;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v17 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_22;
  }
LABEL_32:
  unint64_t v107 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v106 = (unint64_t)_swiftEmptyArrayStorage;
  id v22 = [v3 inputStreams];
  if (!v22)
  {
LABEL_114:
    __break(1u);
    goto LABEL_115;
  }
  id v23 = v22;
  sub_10000CECC(0, (unint64_t *)&qword_100127B00);
  unint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v25 = [v3 outputStreams];
  if (!v25)
  {
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
    return;
  }
  uint64_t v26 = v25;
  unint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v105[0] = v24;
  sub_1000A1900(v27);
  unint64_t v28 = v24;
  if (v24 >> 62)
  {
LABEL_89:
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    if (v29) {
      goto LABEL_36;
    }
    goto LABEL_90;
  }
  uint64_t v29 = *(void *)((v105[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v29)
  {
LABEL_90:
    swift_bridgeObjectRelease_n();
    unint64_t v77 = v107;
    if (v107 >> 62)
    {
      swift_bridgeObjectRetain_n();
      Swift::String v79 = v98;
      id v84 = v98;
      uint64_t v78 = _CocoaArrayWrapper.endIndex.getter();
      if (!v78) {
        goto LABEL_99;
      }
    }
    else
    {
      uint64_t v78 = *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      Swift::String v79 = v98;
      id v80 = v98;
      if (!v78) {
        goto LABEL_99;
      }
    }
    if (v78 >= 1)
    {
      for (uint64_t k = 0; k != v78; ++k)
      {
        if ((v77 & 0xC000000000000001) != 0) {
          id v82 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v82 = *(id *)(v77 + 8 * k + 32);
        }
        uint64_t v83 = v82;
        [v79 addControl:v82];
      }
LABEL_99:

      swift_bridgeObjectRelease_n();
      unint64_t v85 = v106;
      if (v106 >> 62)
      {
        id v92 = v79;
        swift_bridgeObjectRetain_n();
        id v93 = v92;
        uint64_t v86 = _CocoaArrayWrapper.endIndex.getter();
        if (v86)
        {
LABEL_101:
          if (v86 >= 1)
          {
            for (uint64_t m = 0; m != v86; ++m)
            {
              if ((v85 & 0xC000000000000001) != 0) {
                id v90 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v90 = *(id *)(v85 + 8 * m + 32);
              }
              id v91 = v90;
              [v79 addCustomProperty:v90];
            }
            goto LABEL_108;
          }
          goto LABEL_113;
        }
      }
      else
      {
        uint64_t v86 = *(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x10);
        id v87 = v79;
        swift_bridgeObjectRetain_n();
        id v88 = v87;
        if (v86) {
          goto LABEL_101;
        }
      }
LABEL_108:

      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease();

      swift_release();
      goto LABEL_109;
    }
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }
LABEL_36:
  uint64_t v30 = 0;
  unint64_t v31 = v28 & 0xC000000000000001;
  unint64_t v95 = v28 + 32;
  unint64_t v99 = v28;
  unint64_t v96 = v28 & 0xC000000000000001;
  uint64_t v97 = v29;
  while (1)
  {
    while (1)
    {
      if (v31) {
        uint64_t v34 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v34 = (char *)*(id *)(v95 + 8 * v30);
      }
      unint64_t v33 = v34;
      if (__OFADD__(v30++, 1))
      {
LABEL_88:
        __break(1u);
        goto LABEL_89;
      }
      type metadata accessor for AUAStream(0);
      uint64_t v36 = swift_dynamicCastClass();
      if (v36) {
        break;
      }
LABEL_39:

      if (v30 == v29) {
        goto LABEL_90;
      }
    }
    uint64_t v37 = (char *)v36;
    uint64_t v38 = *(void *)(v100 + 168);
    uint64_t v39 = *(void *)(v38 + 16);
    if (v39) {
      break;
    }
    Swift::String v42 = v33;
LABEL_51:
    if (qword_100126938 != -1) {
      swift_once();
    }
    uint64_t v43 = *(void **)(qword_10012B2A8 + 16);
    if (v43)
    {
      id v44 = v43;
      NSString v45 = String._bridgeToObjectiveC()();
      unsigned __int8 v46 = [v44 BOOLForKey:v45];

      if (v46) {
        goto LABEL_37;
      }
    }
    uint64_t v47 = *(void *)&v37[OBJC_IVAR___AUAStream_interface];
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (!Strong)
    {
LABEL_37:
      uint64_t v32 = v33;
LABEL_38:

      unint64_t v33 = v32;
      unint64_t v28 = v99;
      unint64_t v31 = v96;
      uint64_t v29 = v97;
      goto LABEL_39;
    }
    uint64_t v32 = (char *)Strong;
    uint64_t v49 = OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor;
    unint64_t v28 = *(void *)(Strong + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor);
    if (qword_100126918 != -1) {
      swift_once();
    }
    unint64_t v50 = *(void *)(qword_10012B238 + 16);
    if (!v50) {
      goto LABEL_85;
    }
    char v51 = 0;
    uint64_t v52 = 0;
    unint64_t v53 = 0;
    uint64_t v54 = *(void *)&v32[v49];
LABEL_60:
    uint64_t v55 = v53 <= v50 ? *(void *)(qword_10012B238 + 16) : v53;
    uint64_t v56 = -v55;
    char v57 = (unsigned int *)(qword_10012B238 + 80 + 56 * v53++);
    do
    {
      if (v56 + v53 == 1)
      {
        __break(1u);
        goto LABEL_88;
      }
      if (*((void *)v57 - 6) == *(unsigned __int16 *)(v54 + 8)
        && *((void *)v57 - 5) == *(unsigned __int16 *)(v54 + 10))
      {
        uint64_t v58 = *((void *)v57 - 2);
        if ((v58 & 0x8000000000000000) == 0
          && v58 == *(void *)&v32[OBJC_IVAR____TtC9AUASDCore9USBDevice_curConfigNum])
        {
          uint64_t v59 = *(unsigned __int16 *)(v28 + 12);
          if (*((void *)v57 - 4) <= v59
            && *((void *)v57 - 3) >= v59
            && *((void *)v57 - 1) == *(unsigned __int8 *)(*(void *)(v47 + 32) + 2))
          {
            uint64_t v52 = *v57;
            char v51 = 1;
            if (v53 != v50) {
              goto LABEL_60;
            }
            uint64_t v60 = *v57;

            goto LABEL_76;
          }
        }
      }
      ++v53;
      v57 += 14;
    }
    while (v53 - v50 != 1);
    uint64_t v60 = v52;
    char v61 = v51;

    if ((v61 & 1) == 0) {
      goto LABEL_37;
    }
LABEL_76:
    [v37 setIsTapStream:1];
    int v62 = v33;
    id v63 = [v98 plugin];
    unint64_t v64 = (objc_class *)type metadata accessor for AUATapControl();
    uint64_t v65 = (char *)objc_allocWithZone(v64);
    *(void *)&v65[OBJC_IVAR____TtC9AUASDCore13AUATapControl_stream] = v37;
    v104.receiver = v65;
    v104.super_class = v64;
    unint64_t v33 = v62;
    id v66 = objc_msgSendSuper2(&v104, "initWithValue:isSettable:forElement:inScope:withPlugin:andObjectClassID:", 0, 1, 0, v60, v63, 1702259059);
    if (!v66) {
      goto LABEL_116;
    }
    uint64_t v67 = v66;

    uint64_t v32 = v67;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    id v68 = [v102 serialNumber];
    if (!v68)
    {
LABEL_85:

      goto LABEL_38;
    }
    Swift::String v69 = v68;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    NSString v70 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unint64_t v94 = (objc_class *)type metadata accessor for AUACustomStringProperty();
    Swift::String v71 = (char *)objc_allocWithZone(v94);
    *(void *)&v71[OBJC_IVAR____TtC9AUASDCore23AUACustomStringProperty_string] = v70;
    id v72 = objc_allocWithZone((Class)ASDPropertyAddress);
    id v73 = v70;
    id v74 = [v72 initWithSelector:2020898165 scope:1735159650 element:0];
    v103.receiver = v71;
    v103.super_class = v94;
    id v75 = objc_msgSendSuper2(&v103, "initWithAddress:propertyDataType:qualifierDataType:", v74, 1886155636, 0);

    if (!v75) {
      goto LABEL_117;
    }
    id v76 = v75;
    [v76 setSettable:0];

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v106 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    unint64_t v31 = v96;
    uint64_t v29 = v97;
    unint64_t v28 = v99;
    if (v30 == v97) {
      goto LABEL_90;
    }
  }
  uint64_t v40 = v38 + 32;
  swift_bridgeObjectRetain_n();
  uint64_t v41 = v33;
  while (1)
  {
    sub_10001A9B8(v40, (uint64_t)v105);
    sub_100017C14((uint64_t)v105, v37, v102, (uint64_t)&v107, (uint64_t)&v106, v2, v101);
    if (v1) {
      break;
    }
    sub_10001ABC4((uint64_t)v105);
    v40 += 40;
    if (!--v39)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_51;
    }
  }
  sub_10001ABC4((uint64_t)v105);

  swift_release();
  swift_bridgeObjectRelease_n();

  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
LABEL_109:
  swift_bridgeObjectRelease();
}

void *sub_100017C14(uint64_t a1, char *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_10001A9B8(a1, (uint64_t)v58);
  sub_10000AC7C(&qword_100127B28);
  sub_10000AC7C(&qword_100127B30);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v57 = 0;
    memset(v56, 0, sizeof(v56));
    return (void *)sub_10001A918((uint64_t)v56, &qword_100127B38);
  }
  uint64_t v64 = a6;
  uint64_t v12 = a7;
  id v55 = a3;
  sub_10000CF6C(v56, (uint64_t)v61);
  unint64_t v53 = &a2[OBJC_IVAR___AUAStream_path];
  uint64_t v13 = *(void *)&a2[OBJC_IVAR___AUAStream_path + 16];
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    uint64_t v15 = (void *)(v13 + 32);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v17 = v62;
      uint64_t v16 = v63;
      sub_10001A974(v61, v62);
      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)(v16 + 8) + 48))(v17);
      uint64_t v20 = v15[3];
      uint64_t v19 = v15[4];
      sub_10001A974(v15, v20);
      if (v18 == (*(uint64_t (**)(uint64_t))(*(void *)(v19 + 8) + 48))(v20)) {
        break;
      }
      v15 += 5;
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v26 = v62;
    uint64_t v27 = v63;
    sub_10001A974(v61, v62);
    unint64_t v28 = &a2[OBJC_IVAR___AUAStream_controlScope];
    swift_beginAccess();
    uint64_t v29 = *(unsigned int *)v28;
    id result = [v55 plugin];
    if (!result)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v30 = result;
    unint64_t v31 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)(v27 + 8) + 72))(v29, result, v26);
    unint64_t v33 = v32;

    uint64_t v21 = v12;
    if (v7) {
      return (void *)sub_10001ABC4((uint64_t)v61);
    }
    if (v31) {
      sub_1000A1930(v31);
    }
    if (v33) {
      sub_1000A1948(v33);
    }
  }
  else
  {
LABEL_7:
    uint64_t v21 = v12;
  }
  if ([a2 direction] != 1768845428) {
    return (void *)sub_10001ABC4((uint64_t)v61);
  }
  uint64_t ObjectType = swift_getObjectType();
  BOOL v23 = sub_10002F11C((uint64_t)v61, ObjectType, v21);
  if (v7 || v23) {
    return (void *)sub_10001ABC4((uint64_t)v61);
  }
  id result = sub_10002F198(*((void *)v53 + 1), ObjectType, v21);
  uint64_t v54 = result[2];
  if (!v54)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    return (void *)sub_10001ABC4((uint64_t)v61);
  }
  unint64_t v25 = 0;
  char v51 = result;
  uint64_t v52 = result + 4;
  while (1)
  {
    if (v25 >= result[2])
    {
      __break(1u);
      goto LABEL_37;
    }
    uint64_t v34 = &v52[3 * v25];
    uint64_t v35 = v34[2];
    uint64_t v36 = *(void *)(v35 + 16);
    if (v36) {
      break;
    }
LABEL_19:
    if (++v25 == v54) {
      goto LABEL_35;
    }
  }
  uint64_t v37 = *v34;
  uint64_t v38 = v35 + 32;
  swift_bridgeObjectRetain_n();
  uint64_t v64 = v37;
  swift_retain();
  swift_retain();
  while (1)
  {
    sub_10001A9B8(v38, (uint64_t)v58);
    uint64_t v40 = v62;
    uint64_t v39 = v63;
    sub_10001A974(v61, v62);
    uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)(v39 + 8) + 48))(v40);
    uint64_t v43 = v59;
    uint64_t v42 = v60;
    sub_10001A974(v58, v59);
    uint64_t v44 = (*(uint64_t (**)(uint64_t))(*(void *)(v42 + 8) + 48))(v43);
    sub_10001ABC4((uint64_t)v58);
    if (v41 == v44) {
      break;
    }
    v38 += 40;
    if (!--v36)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
LABEL_18:
      id result = v51;
      goto LABEL_19;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v46 = v62;
  uint64_t v45 = v63;
  sub_10001A974(v61, v62);
  id result = [v55 plugin];
  if (result)
  {
    uint64_t v47 = result;
    unint64_t v48 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)(v45 + 8) + 72))(1886679669, result, v46);
    unint64_t v50 = v49;

    if (v48) {
      sub_1000A1930(v48);
    }
    if (v50) {
      sub_1000A1948(v50);
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    goto LABEL_18;
  }
LABEL_38:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall AUAAudioDevice.changeClientDescription(_:)(Swift::OpaquePointer_optional a1)
{
  if (!*(void *)(v1 + OBJC_IVAR___AUAAudioDevice_function)) {
    goto LABEL_13;
  }
  rawValue = a1.value._rawValue;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___AUAAudioDevice_function + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(ObjectType, v3);
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    uint64_t v7 = *(void *)(v5 + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
    if (!v7) {
      goto LABEL_12;
    }
    LOBYTE(v5) = sub_10001925C(21, v7);
    if ((v5 & 1) == 0) {
      goto LABEL_12;
    }
    if (rawValue)
    {
      AnyHashable.init<A>(_:)();
      if (rawValue[2] && (unint64_t v8 = sub_1000199D0((uint64_t)&v11), (v9 & 1) != 0))
      {
        sub_10001A1C8(rawValue[7] + 32 * v8, (uint64_t)&v12);
      }
      else
      {
        long long v12 = 0u;
        long long v13 = 0u;
      }
      sub_10001A174((uint64_t)&v11);
      if (!*((void *)&v13 + 1))
      {

        sub_10001A918((uint64_t)&v12, (uint64_t *)&unk_100129170);
        goto LABEL_13;
      }
      swift_dynamicCast();
LABEL_12:

LABEL_13:
      LOBYTE(v5) = 0;
      return v5;
    }
    __break(1u);
  }
  return v5;
}

Swift::UInt32 __swiftcall AUAAudioDevice.usbControllerClockDomain()()
{
  uint64_t v1 = v0 + OBJC_IVAR___AUAAudioDevice_function;
  unint64_t v2 = *(void *)(v0 + OBJC_IVAR___AUAAudioDevice_function);
  if (!v2) {
    return v2;
  }
  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = (uint64_t (*)(uint64_t, void *))v3[2];
  uint64_t v6 = v5(ObjectType, v3);
  if (!v6)
  {
    LODWORD(v2) = 0;
    return v2;
  }
  uint64_t v7 = (void *)v6;
  id v8 = *(id *)(v6 + OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceService);

  NSString v9 = String._bridgeToObjectiveC()();
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v8 searchForPropertyWithKey:v9 inPlane:v10 withOptions:3];

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v24 = 0u;
    long long v25 = 0u;
  }
  sub_10001A8B0((uint64_t)&v24, (uint64_t)v26);
  if (v27)
  {
    if (swift_dynamicCast())
    {
      int v12 = v23;
      goto LABEL_12;
    }
  }
  else
  {
    sub_10001A918((uint64_t)v26, (uint64_t *)&unk_100129170);
  }
  int v12 = 0;
LABEL_12:
  NSString v13 = String._bridgeToObjectiveC()();
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v8 searchForPropertyWithKey:v13 inPlane:v14 withOptions:3];

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v24 = 0u;
    long long v25 = 0u;
  }
  sub_10001A8B0((uint64_t)&v24, (uint64_t)v26);
  if (!v27) {
    goto LABEL_22;
  }
  if (swift_dynamicCast() || v12)
  {
    while (1)
    {
      uint64_t v16 = swift_getObjectType();
      uint64_t v17 = v5(v16, v3);
      if (!v17) {
        break;
      }
      uint64_t v3 = (void *)v17;
      unint64_t v2 = (unint64_t)USBDevice.locationID.getter();
      char v19 = v18;

      if (v19) {
        goto LABEL_31;
      }
      if (!HIDWORD(v2)) {
        goto LABEL_32;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_22:
      sub_10001A918((uint64_t)v26, (uint64_t *)&unk_100129170);
      if (!v12) {
        goto LABEL_23;
      }
    }

LABEL_31:
    LODWORD(v2) = 0;
LABEL_32:
    LODWORD(v2) = v2 & 0xFF000000 | 0x425355;
  }
  else
  {
LABEL_23:
    LODWORD(v2) = 7567731;
    if (sub_1000AA900() == 2)
    {
      int v20 = sub_1000AA91C();

      if (v20 == 2) {
        int v21 = 7567731;
      }
      else {
        int v21 = 1228034925;
      }
      if (v20 == 1) {
        LODWORD(v2) = 1835100526;
      }
      else {
        LODWORD(v2) = v21;
      }
    }
    else
    {
    }
  }
  return v2;
}

id AUAAudioDevice.__allocating_init(deviceUID:with:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a2)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v6 = 0;
  }
  id v7 = [objc_allocWithZone(v4) initWithDeviceUID:v6 withPlugin:a3];

  return v7;
}

void AUAAudioDevice.init(deviceUID:with:)()
{
}

id AUAAudioDevice.__deallocating_deinit()
{
  return sub_100019224(0, (uint64_t (*)(void))type metadata accessor for AUAAudioDevice);
}

char *sub_100018A64(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, int a6)
{
  *(_DWORD *)&v6[OBJC_IVAR___AUADSPAudioDevice__transportType] = 1970496032;
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v64.receiver = v6;
  v64.super_class = (Class)type metadata accessor for AUADSPAudioDevice();
  int v12 = (char *)objc_msgSendSuper2(&v64, "initWithDeviceUID:underlyingDevice:deviceDSPDatabase:plugin:", v11, a3, a4, a5);

  *(_DWORD *)&v12[OBJC_IVAR___AUADSPAudioDevice__transportType] = a6;
  NSString v13 = (void *)0xE000000000000000;
  NSString v14 = v12;
  id v15 = [v14 deviceName];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v13 = v18;
  }
  else
  {
    uint64_t v17 = 0;
  }
  v19._countAndFlagsBits = v17;
  v19._object = v13;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 1347634208;
  v20._object = (void *)0xE400000000000000;
  String.append(_:)(v20);
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 setDeviceName:v21];

  id v22 = [a3 inputStreams];
  if (v22)
  {
    unsigned __int8 v23 = v22;
    sub_10000CECC(0, (unint64_t *)&qword_100127B00);
    unint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    unint64_t v24 = (unint64_t)_swiftEmptyArrayStorage;
  }
  char v61 = a4;
  id v63 = a3;
  if (v24 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v25 < 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    id v26 = objc_allocWithZone((Class)ASDDSPStream);
    sub_10000CECC(0, (unint64_t *)&qword_100127B00);
    uint64_t v27 = v14;
    swift_bridgeObjectRetain();
    unint64_t v28 = a5;
    id v29 = a5;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v31 = [v26 initWithOwningDevice:v27 underlyingStreams:isa direction:1768845428 plugin:v29];

    [v31 setKeepGraphInitialized:1];
    [v31 setTerminalType:1835623282];
    [v31 setStartingChannel:1];
    unint64_t v32 = v24 & 0xC000000000000001;
    if ((v24 & 0xC000000000000001) != 0)
    {
      id v59 = v31;
      id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_35;
      }
      unint64_t v33 = *(void **)(v24 + 32);
      id v34 = v31;
      id v35 = v33;
    }
    uint64_t v36 = v35;
    id v37 = objc_msgSend(v35, "physicalFormats", a4);

    [v31 setPhysicalFormats:v37];
    if (v32) {
      id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v38 = *(id *)(v24 + 32);
    }
    uint64_t v39 = v38;
    a3 = v63;
    swift_bridgeObjectRelease();
    id v40 = [v39 physicalFormat];

    [v31 setPhysicalFormat:v40];
    [v27 addInputStream:v31];
  }
  id v41 = objc_msgSend(a3, "outputStreams", v61);
  if (v41)
  {
    uint64_t v42 = v41;
    sub_10000CECC(0, (unint64_t *)&qword_100127B00);
    unint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v24 >> 62)) {
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v24 = (unint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
LABEL_20:
      if (*(uint64_t *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 1) {
        goto LABEL_21;
      }
LABEL_28:
      swift_bridgeObjectRelease();
      uint64_t v52 = v61;
      id v55 = v63;
LABEL_31:
      uint64_t v58 = v14;
      [v58 updateDeviceDSPConfiguration];

      return v58;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v54 < 1) {
    goto LABEL_28;
  }
LABEL_21:
  id v43 = objc_allocWithZone((Class)ASDDSPStream);
  sub_10000CECC(0, (unint64_t *)&qword_100127B00);
  uint64_t v27 = v14;
  unint64_t v28 = a5;
  id v44 = a5;
  swift_bridgeObjectRetain();
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v31 = [v43 initWithOwningDevice:v27 underlyingStreams:v45 direction:1869968496 plugin:v44];

  [v31 setKeepGraphInitialized:1];
  id result = (char *)[v31 setTerminalType:1936747378];
  unint64_t v32 = v24 & 0xC000000000000001;
  if ((v24 & 0xC000000000000001) != 0)
  {
LABEL_35:
    id v60 = v31;
    id v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_24;
  }
  if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v47 = *(void **)(v24 + 32);
    id v48 = v31;
    id v49 = v47;
LABEL_24:
    unint64_t v50 = v49;
    id v51 = objc_msgSend(v49, "physicalFormats", v61);

    [v31 setPhysicalFormats:v51];
    uint64_t v52 = v62;
    a5 = v28;
    if (v32) {
      id v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v53 = *(id *)(v24 + 32);
    }
    uint64_t v56 = v53;
    id v55 = v63;
    swift_bridgeObjectRelease();
    id v57 = [v56 physicalFormat];

    [v31 setPhysicalFormat:v57];
    [v27 addOutputStream:v31];

    goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t AUADSPAudioDevice.transportType.getter()
{
  return *(unsigned int *)(v0 + OBJC_IVAR___AUADSPAudioDevice__transportType);
}

id AUADSPAudioDevice.__allocating_init(deviceUID:underlyingDevice:deviceDSPDatabase:plugin:)(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9 = objc_allocWithZone(v5);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v9 initWithDeviceUID:v10 underlyingDevice:a3 deviceDSPDatabase:a4 plugin:a5];

  return v11;
}

void AUADSPAudioDevice.init(deviceUID:underlyingDevice:deviceDSPDatabase:plugin:)()
{
}

id AUADSPAudioDevice.__deallocating_deinit(uint64_t a1)
{
  return sub_100019224(a1, type metadata accessor for AUADSPAudioDevice);
}

id sub_100019224(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

BOOL sub_10001925C(BOOL result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  int v3 = result;
  if (*(unsigned char *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 33; ; ++i)
  {
    uint64_t v5 = i - 31;
    if (__OFADD__(i - 32, 1)) {
      break;
    }
    int v6 = *(unsigned __int8 *)(a2 + i);
    id result = v6 == v3;
    if (v6 == v3 || v5 == v2) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000192BC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100019390(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10001A1C8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10001A1C8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10001ABC4((uint64_t)v12);
  return v7;
}

uint64_t sub_100019390(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_10001954C(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_10001954C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1000195E4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000197C4(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000197C4(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1000195E4(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_10001975C(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return _swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_10001975C(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000AC7C(&qword_100127B48);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1000197C4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100127B48);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  NSString v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100019914(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100019AEC(a1, a2, v4);
}

unint64_t sub_10001998C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100019BD0(a1, v4);
}

unint64_t sub_1000199D0(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100019CDC(a1, v4);
}

unint64_t sub_100019A14(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_100019DA4(a1, v2);
}

unint64_t sub_100019A58(unsigned int a1)
{
  __int16 v1 = a1;
  unsigned int v2 = a1 >> 8;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_1000EA0E4[(char)v1]);
  Hasher._combine(_:)(word_1000EA12A[(char)v2]);
  Swift::Int v3 = Hasher._finalize()();

  return sub_100019E40(v1, v3);
}

unint64_t sub_100019AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        NSString v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100019BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for AUAStream(0);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_100019CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_10001AB28(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_10001A174((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100019DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_100019E40(__int16 a1, uint64_t a2)
{
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    char v6 = HIBYTE(a1);
    uint64_t v7 = ~v4;
    uint64_t v8 = *(void *)(v2 + 48);
    int v9 = word_1000EA0E4[(char)a1];
    do
    {
      if (word_1000EA0E4[*(char *)(v8 + 2 * result)] == v9
        && word_1000EA12A[*(char *)(v8 + 2 * result + 1)] == word_1000EA12A[v6])
      {
        break;
      }
      unint64_t result = (result + 1) & v7;
    }
    while (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

uint64_t sub_100019EF0@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v4 = result;
    uint64_t v6 = a2[1];
    uint64_t v7 = (uint64_t *)(result + 24);
    swift_beginAccess();
    uint64_t v8 = *(void **)(v4 + 24);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v4 + 24) = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v8 = sub_100058C18(0, v8[2] + 1, 1, v8);
      *uint64_t v7 = (uint64_t)v8;
    }
    unint64_t v11 = v8[2];
    unint64_t v10 = v8[3];
    if (v11 >= v10 >> 1)
    {
      uint64_t v8 = sub_100058C18((void *)(v10 > 1), v11 + 1, 1, v8);
      *uint64_t v7 = (uint64_t)v8;
    }
    v8[2] = v11 + 1;
    uint64_t v12 = &v8[2 * v11];
    v12[4] = v3;
    void v12[5] = v6;
    uint64_t v13 = *v7;
    unint64_t result = swift_endAccess();
    *a3 = *(void *)(v13 + 16) == 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10001A000@<X0>(BOOL *a1@<X8>)
{
  return sub_100019EF0(*(void *)(v1 + 16), *(uint64_t **)(v1 + 24), a1);
}

void *sub_10001A01C@<X0>(unsigned char *a1@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_10001A060(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10001A070()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001A0A8()
{
  return sub_100014224(*(void *)(v0 + 16));
}

uint64_t sub_10001A0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001A0C0()
{
  return swift_release();
}

uint64_t type metadata accessor for AUAAudioDevice(uint64_t a1)
{
  return sub_10001A2E0(a1, (uint64_t *)&unk_100127AC8);
}

uint64_t sub_10001A0E8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001A120()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_10001A148()
{
  AUAAudioDevice.setSamplingRate(_:)(*(Swift::Double *)(v0 + 24));
}

uint64_t sub_10001A174(uint64_t a1)
{
  return a1;
}

uint64_t sub_10001A1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for AUADSPAudioDevice()
{
  return self;
}

uint64_t sub_10001A24C()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for ThreadSafeFifo()
{
  return sub_10001ACF8();
}

uint64_t sub_10001A2B8()
{
  return type metadata accessor for AUASampleManager(0);
}

uint64_t type metadata accessor for AUASampleManager(uint64_t a1)
{
  return sub_10001A2E0(a1, qword_100127730);
}

uint64_t sub_10001A2E0(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10001A318()
{
  uint64_t result = type metadata accessor for OSSignpostID();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t type metadata accessor for USBFrameTimeCorrelaterSession()
{
  return self;
}

uint64_t sub_10001A418()
{
  return type metadata accessor for AUAAudioDevice(0);
}

uint64_t sub_10001A420()
{
  uint64_t result = type metadata accessor for OSSignpostID();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

unint64_t sub_10001A528()
{
  unint64_t result = qword_100127B10;
  if (!qword_100127B10)
  {
    sub_10001A584(&qword_100127B08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100127B10);
  }
  return result;
}

uint64_t sub_10001A584(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10001A5CC()
{
  return _swift_deallocObject(v0, 48, 7);
}

void *sub_10001A604()
{
  return sub_10001034C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10001A610@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void **)(a1 + 24);
  if (v5[2])
  {
    uint64_t v7 = v5[4];
    uint64_t v6 = v5[5];
    swift_retain();
    sub_1000AA78C(0, 1);
    uint64_t result = swift_endAccess();
    *a2 = v7;
    a2[1] = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10001A6A0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  swift_beginAccess();
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(v4 + 16))
  {
    uint64_t v5 = *(void *)(v4 + 32);
    uint64_t result = swift_retain();
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t result = 0;
  }
  *a2 = v5;
  a2[1] = result;
  return result;
}

uint64_t sub_10001A714()
{
  uint64_t v1 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(void *)(v0 + 96) = _swiftEmptyArrayStorage;
  sub_10000AC7C(&qword_100126958);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(void *)(v0 + 104) = v5;
  *(unsigned char *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = 0;
  if (qword_1001268E0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for OSSignposter();
  sub_10000AD60(v6, (uint64_t)qword_10012B1B8);
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v0 + OBJC_IVAR____TtC9AUASDCore16AUASampleManager_signpostID, v4, v1);
  swift_unknownObjectWeakAssign();
  return v0;
}

uint64_t sub_10001A8B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AC7C((uint64_t *)&unk_100129170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001A918(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10000AC7C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_10001A974(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10001A9B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10001AA1C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001AA54(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_10001AA64()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001AA9C()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_10001AAAC()
{
  return sub_10000EB24();
}

uint64_t sub_10001AAC8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10001AAF0@<X0>(void *a1@<X8>)
{
  return sub_10000E998(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void sub_10001AB0C()
{
  sub_10000E18C(v0);
}

uint64_t sub_10001AB28(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10001AB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 16) + 16))(*(void *)(v4 + 16), a1, a2, a3, a4);
}

uint64_t sub_10001ABA8()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_10001ABC4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10001AC18@<X0>(void *a1@<X8>)
{
  return sub_10001A6A0(v1, a1);
}

double sub_10001AC34@<D0>(_OWORD *a1@<X8>)
{
  (*(void (**)(long long *__return_ptr))(v1 + 16))(&v5);
  if (!v2)
  {
    double result = *(double *)&v5;
    *a1 = v5;
  }
  return result;
}

uint64_t sub_10001AC78@<X0>(void *a1@<X8>)
{
  return sub_10001A610(v1, a1);
}

uint64_t *sub_10001AC94(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_10001ACF8()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10001AD4C()
{
  return sub_10001AAC8();
}

uint64_t sub_10001AD74()
{
  return sub_10001AAAC();
}

unint64_t sub_10001AD90(uint64_t a1)
{
  if (a1) {
    return 0;
  }
  unsigned __int8 v1 = BYTE1(a1) - 1;
  if ((BYTE1(a1) - 1) >= 3u) {
    unsigned __int8 v1 = 5;
  }
  if ((a1 & 2) != 0) {
    return (unsigned __int16)(BYTE4(a1) | (v1 << 8)) | ((unint64_t)BYTE3(a1) << 16);
  }
  if ((a1 & 0xFF0000000000) != 0) {
    return BYTE5(a1);
  }
  return (unsigned __int16)(BYTE4(a1) | (v1 << 8)) | ((unint64_t)BYTE3(a1) << 16);
}

void sub_10001AE28(unsigned int a1, uint64_t a2)
{
  uint64_t v50 = 0;
  int v5 = a1 & 0xFFFFFF;
  uint64_t v6 = USBDescriptorControl.pbLayout()();
  unsigned int v7 = v6;
  __int16 v8 = sub_100086554(v6, 4);
  if (!v2)
  {
    __int16 v10 = v8;
    id v11 = v9;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (!Strong)
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v22 = 7;
      *(void *)(v22 + 8) = 0;
      *(void *)(v22 + 16) = 0xE000000000000000;
      *(void *)(v22 + 24) = 0xD000000000000031;
      *(void *)(v22 + 32) = 0x80000001000E21B0;
      *(void *)(v22 + 40) = 0xD00000000000001CLL;
      *(void *)(v22 + 48) = 0x80000001000E2120;
      *(void *)(v22 + 56) = 65;
      swift_willThrow();
      goto LABEL_11;
    }
    uint64_t v13 = (void *)Strong;
    uint64_t v14 = *(void *)(Strong + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
    if (v14 && sub_10001925C(7, v14))
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v15 = 108;
      *(void *)(v15 + 8) = 0;
      *(void *)(v15 + 16) = 0xE000000000000000;
      *(void *)(v15 + 24) = 0xD000000000000031;
      *(void *)(v15 + 32) = 0x80000001000E21B0;
      *(void *)(v15 + 40) = 0xD00000000000001CLL;
      *(void *)(v15 + 48) = 0x80000001000E2120;
      *(void *)(v15 + 56) = 68;
      swift_willThrow();

LABEL_11:
      return;
    }
    unsigned int v47 = v5;
    id v49 = v13;
    unsigned int v48 = v7;
    uint64_t v16 = *(void *)(a2 + 32);
    uint64_t v17 = 1;
    unsigned int v18 = a1 >> 8;
    while (1)
    {
      Swift::String v20 = v11;
      unsigned __int8 v21 = *(unsigned char *)(v16 + 2);
      id v11 = v11;
      sub_1000C80AC(1u, 1, 1, v18, 0, 0, v21, v20, (uint64_t)&v50);

      if (v17 == 4) {
        break;
      }
      if (__OFADD__(v17++, 1))
      {
        __break(1u);
        goto LABEL_27;
      }
    }
    uint64_t v46 = v50;
    id v23 = v11;
    uint64_t v24 = NSData.startIndex.getter();
    uint64_t v25 = NSData.endIndex.getter();
    uint64_t v26 = NSData.startIndex.getter();
    uint64_t v27 = NSData.endIndex.getter();
    if (v24 < v26 || v27 < v24)
    {
      __break(1u);
    }
    else
    {
      uint64_t v28 = NSData.startIndex.getter();
      uint64_t v29 = NSData.endIndex.getter();

      if (v25 >= v28 && v29 >= v25)
      {
        if (!__OFSUB__(v25, v24))
        {
          if (v25 - v24 < v46)
          {
            sub_10000CD54();
            swift_allocError();
            *(unsigned char *)uint64_t v30 = 28;
            *(void *)(v30 + 8) = 0;
            *(void *)(v30 + 16) = 0xE000000000000000;
            *(void *)(v30 + 24) = 0xD000000000000031;
            *(void *)(v30 + 32) = 0x80000001000E21B0;
            *(void *)(v30 + 40) = 0xD00000000000001CLL;
            *(void *)(v30 + 48) = 0x80000001000E2120;
            *(void *)(v30 + 56) = 106;
            swift_willThrow();

            return;
          }
          if ((v10 & 0x100) != 0) {
            __int16 v31 = 256;
          }
          else {
            __int16 v31 = 0;
          }
          id v32 = v23;
          unsigned __int8 v33 = sub_100072C48(v31 & 0xFF00u | v10, v32);

          if (v33 < 5u) {
            goto LABEL_33;
          }
          sub_100086554(v48, v33);
          id v35 = v34;

          __int16 v36 = sub_100088544(v47);
          unsigned __int8 v37 = *(unsigned char *)(v16 + 2);
          id v11 = v35;
          sub_1000C80AC(1u, 1, 1, v36, 0, 0, v37, v35, (uint64_t)&v50);
LABEL_27:
          uint64_t v38 = v50;
          uint64_t v39 = NSData.startIndex.getter();
          uint64_t v40 = NSData.endIndex.getter();
          uint64_t v41 = NSData.startIndex.getter();
          uint64_t v42 = NSData.endIndex.getter();
          if (v39 < v41 || v42 < v39)
          {
            __break(1u);
          }
          else
          {
            uint64_t v43 = NSData.startIndex.getter();
            uint64_t v44 = NSData.endIndex.getter();

            if (v40 >= v43 && v44 >= v40)
            {
              if (!__OFSUB__(v40, v39))
              {
                if (v38 != v40 - v39)
                {
                  sub_10000CD54();
                  swift_allocError();
                  *(unsigned char *)uint64_t v45 = 28;
                  *(void *)(v45 + 8) = 0;
                  *(void *)(v45 + 16) = 0xE000000000000000;
                  *(void *)(v45 + 24) = 0xD000000000000031;
                  *(void *)(v45 + 32) = 0x80000001000E21B0;
                  *(void *)(v45 + 40) = 0xD00000000000001CLL;
                  *(void *)(v45 + 48) = 0x80000001000E2120;
                  *(void *)(v45 + 56) = 120;
                  swift_willThrow();

                  goto LABEL_11;
                }
LABEL_33:

                return;
              }
              goto LABEL_40;
            }
          }
          __break(1u);
LABEL_40:
          __break(1u);
          return;
        }
LABEL_37:
        __break(1u);
      }
    }
    __break(1u);
    goto LABEL_37;
  }
}

void sub_10001B4D4(int a1, uint64_t a2)
{
  uint64_t v23 = 0;
  unsigned int v4 = a1 & 0xFFFFFF;
  AUASDCore::tADCControlRequestParameterBlockLayout v5 = USBDescriptorControl.pbLayout()();
  sub_1000852E4(v5);
  if (v2) {
    return;
  }
  unsigned int v7 = v6;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v13 = 7;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0xE000000000000000;
    *(void *)(v13 + 24) = 0xD000000000000032;
    *(void *)(v13 + 32) = 0x80000001000E2170;
    *(void *)(v13 + 40) = 0xD00000000000001CLL;
    *(void *)(v13 + 48) = 0x80000001000E2120;
    *(void *)(v13 + 56) = 131;
    swift_willThrow();

    return;
  }
  int v9 = (void *)Strong;
  __int16 v10 = sub_100088544(v4);
  unsigned __int8 v11 = *(unsigned char *)(*(void *)(a2 + 32) + 2);
  id v12 = v7;
  sub_1000C80AC(1u, 1, 1, v10, 0, 0, v11, v7, (uint64_t)&v23);

  uint64_t v22 = v23;
  id v14 = v12;
  uint64_t v15 = NSData.startIndex.getter();
  uint64_t v16 = NSData.endIndex.getter();
  uint64_t v17 = NSData.startIndex.getter();
  uint64_t v18 = NSData.endIndex.getter();
  if (v15 < v17 || v18 < v15)
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  uint64_t v19 = NSData.startIndex.getter();
  uint64_t v20 = NSData.endIndex.getter();

  if (v16 < v19 || v20 < v16) {
    goto LABEL_15;
  }
  if (__OFSUB__(v16, v15)) {
    goto LABEL_16;
  }
  if (v16 - v15 < v22)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v21 = 28;
    *(void *)(v21 + 8) = 0;
    *(void *)(v21 + 16) = 0xE000000000000000;
    *(void *)(v21 + 24) = 0xD000000000000032;
    *(void *)(v21 + 32) = 0x80000001000E2170;
    *(void *)(v21 + 40) = 0xD00000000000001CLL;
    *(void *)(v21 + 48) = 0x80000001000E2120;
    *(void *)(v21 + 56) = 141;
    swift_willThrow();
  }
}

uint64_t sub_10001B788(unsigned int a1, uint64_t a2)
{
  int v3 = (a1 >> 18) & 0x3C | (a1 >> 6);
  if (v3 == 51)
  {
    sub_10001AE28(a1 & 0xFFFFFF, a2);
    if (!v2) {
      return v4 & 0x1FF;
    }
  }
  else
  {
    if (v3 != 52)
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v6 = 28;
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0xE000000000000000;
      *(void *)(v6 + 24) = 0xD000000000000021;
      *(void *)(v6 + 32) = 0x80000001000E2140;
      *(void *)(v6 + 40) = 0xD00000000000001CLL;
      *(void *)(v6 + 48) = 0x80000001000E2120;
      *(void *)(v6 + 56) = 157;
      swift_willThrow();
      return v5;
    }
    sub_10001B4D4(a1 & 0xFFFFFF, a2);
    if (!v2) {
      return v4 & 0x1FF;
    }
  }
  return v5;
}

uint64_t sub_10001B86C()
{
  long long v1 = *(_OWORD *)(v0 + 160);
  v7[8] = *(_OWORD *)(v0 + 144);
  v7[9] = v1;
  uint64_t v8 = *(void *)(v0 + 176);
  long long v2 = *(_OWORD *)(v0 + 96);
  v7[4] = *(_OWORD *)(v0 + 80);
  void v7[5] = v2;
  long long v3 = *(_OWORD *)(v0 + 128);
  v7[6] = *(_OWORD *)(v0 + 112);
  v7[7] = v3;
  long long v4 = *(_OWORD *)(v0 + 32);
  v7[0] = *(_OWORD *)(v0 + 16);
  v7[1] = v4;
  long long v5 = *(_OWORD *)(v0 + 64);
  v7[2] = *(_OWORD *)(v0 + 48);
  v7[3] = v5;
  sub_10001D0D8(v7);
  swift_unknownObjectWeakDestroy();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_10001A918(v0 + 224, &qword_100127CC0);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ADC2Function()
{
  return self;
}

uint64_t sub_10001B92C@<X0>(uint64_t a1@<X8>)
{
  return sub_10001D03C(v1 + 16, a1);
}

uint64_t sub_10001B938()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_10001B940()
{
  return swift_retain();
}

uint64_t sub_10001B948()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10001B950()
{
  return swift_bridgeObjectRetain();
}

void *sub_10001B958()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 216);
  id v2 = v1;
  return v1;
}

void sub_10001B99C(uint64_t a1)
{
  swift_beginAccess();
  long long v3 = *(void **)(v1 + 216);
  *(void *)(v1 + 216) = a1;
}

uint64_t (*sub_10001B9E4())()
{
  return j__swift_endAccess;
}

uint64_t sub_10001BA3C@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return sub_10001CFD4(v1 + 224, a1);
}

uint64_t sub_10001BA88(uint64_t a1)
{
  swift_beginAccess();
  sub_10001CF6C(a1, v1 + 224);
  return swift_endAccess();
}

uint64_t (*sub_10001BADC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_10001BB30()
{
  return 3;
}

unint64_t sub_10001BB38(uint64_t a1, uint64_t a2)
{
  unint64_t result = sub_10001CE84(a2);
  if (v2) {
    return v4;
  }
  return result;
}

uint64_t sub_10001BB64(int a1, uint64_t a2)
{
  return sub_10001B788(a1 & 0xFFFFFF, a2) & 0x1FF;
}

uint64_t sub_10001BB94(unint64_t a1)
{
  if (a1 >= 0x100)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1 == 2)
  {
    return 1;
  }
  else
  {
    return 2 * (a1 != 1);
  }
  return result;
}

uint64_t sub_10001BC18(unint64_t a1)
{
  if (a1 >= 0x100)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1 == 2)
  {
    return 1;
  }
  else
  {
    return 16 * (a1 != 1);
  }
  return result;
}

uint64_t sub_10001BC9C(unint64_t a1)
{
  if (a1 >= 0x100)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a1 == 1) {
      unsigned int v1 = 0;
    }
    else {
      unsigned int v1 = 3;
    }
    if (a1 == 2) {
      return 1;
    }
    else {
      return v1;
    }
  }
  return result;
}

void sub_10001BD20(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = v3;
  unint64_t v111 = a3;
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t ObjectType = (uint64_t *)((char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v108 = *(void *)(a1 + 16);
  if (!v108)
  {
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
    goto LABEL_160;
  }
  uint64_t v13 = *(void *)(a1 + 32);
  unsigned int v14 = *(unsigned __int16 *)(a1 + 40);
  sub_10008854C(v13, *(_WORD *)(a1 + 40));
  if (v3) {
    return;
  }
  unsigned int v105 = v14;
  unint64_t v106 = (void *)v13;
  if (v15[2] != a2)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v17 = 75;
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = 0xE000000000000000;
    *(void *)(v17 + 24) = 0xD000000000000030;
    *(void *)(v17 + 32) = 0x80000001000E21F0;
    *(void *)(v17 + 40) = 0xD00000000000001CLL;
    *(void *)(v17 + 48) = 0x80000001000E2120;
    uint64_t v18 = 216;
    goto LABEL_148;
  }
  if (!v15[3])
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v17 = 74;
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = 0xE000000000000000;
    *(void *)(v17 + 24) = 0xD000000000000030;
    *(void *)(v17 + 32) = 0x80000001000E21F0;
    *(void *)(v17 + 40) = 0xD00000000000001CLL;
    *(void *)(v17 + 48) = 0x80000001000E2120;
    uint64_t v18 = 217;
    goto LABEL_148;
  }
  if (v15[5] != 1)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v17 = 72;
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = 0xE000000000000000;
    *(void *)(v17 + 24) = 0xD000000000000030;
    *(void *)(v17 + 32) = 0x80000001000E21F0;
    *(void *)(v17 + 40) = 0xD00000000000001CLL;
    *(void *)(v17 + 48) = 0x80000001000E2120;
    uint64_t v18 = 218;
    goto LABEL_148;
  }
  if (v15[6] != 2)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v17 = 73;
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = 0xE000000000000000;
    *(void *)(v17 + 24) = 0xD000000000000030;
    *(void *)(v17 + 32) = 0x80000001000E21F0;
    *(void *)(v17 + 40) = 0xD00000000000001CLL;
    *(void *)(v17 + 48) = 0x80000001000E2120;
    uint64_t v18 = 219;
    goto LABEL_148;
  }
  if (v15[7] != 32)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v17 = 76;
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = 0xE000000000000000;
    *(void *)(v17 + 24) = 0xD000000000000030;
    *(void *)(v17 + 32) = 0x80000001000E21F0;
    *(void *)(v17 + 40) = 0xD00000000000001CLL;
    *(void *)(v17 + 48) = 0x80000001000E2120;
    uint64_t v18 = 220;
    goto LABEL_148;
  }
  id v98 = ObjectType;
  uint64_t v92 = v9;
  uint64_t v78 = v15;
  uint64_t v80 = v15[4];
  char v134 = &_swiftEmptySetSingleton;
  id v135 = &_swiftEmptySetSingleton;
  id v88 = &v116;
  id v91 = (void (**)(void *, uint64_t))(v10 + 8);
  swift_bridgeObjectRetain();
  id v102 = 0;
  objc_super v103 = 0;
  int v90 = 0;
  uint64_t wMaxPacketSize_high = 0;
  uint64_t wMaxPacketSize_low = 0;
  unint64_t v82 = 0;
  uint64_t bmAttributes = 0;
  objc_super v104 = 0;
  uint64_t v109 = 0;
  int v86 = 0;
  a2 = 0;
  uint64_t v99 = -(uint64_t)v108;
  uint64_t v81 = a1;
  uint64_t v89 = a1 + 41;
  int v95 = 65280;
  long long v79 = xmmword_1000E80A0;
  uint64_t ObjectType = _swiftEmptyArrayStorage;
  unint64_t v137 = _swiftEmptyArrayStorage;
  id v87 = _swiftEmptyArrayStorage;
  unint64_t v5 = 0;
  uint64_t v97 = 0;
  uint64_t v16 = v111;
  uint64_t v6 = v106;
  unint64_t v4 = v105;
  while (2)
  {
    uint64_t v9 = (uint64_t)v16;
    int v96 = v90 & 1;
    unint64_t v19 = v108;
    uint64_t v20 = v109;
    if (a2 > v108) {
      unint64_t v19 = a2;
    }
    uint64_t v100 = -(uint64_t)v19;
    uint64_t v21 = (unsigned __int8 *)(v89 + 16 * a2++);
    while (1)
    {
      uint64_t v109 = v20;
      if (v100 + a2 == 1) {
        goto LABEL_156;
      }
      int v22 = *v21;
      __int16 v23 = *(v21 - 1) | (unsigned __int16)((_WORD)v22 << 8);
      uint64_t v110 = *(const IOUSBEndpointDescriptor **)(v21 - 9);
      if (_s9AUASDCore13USBDescriptorO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v110, v23, (uint64_t)v6, v4))
      {
        uint64_t v16 = (_OWORD *)v9;
        goto LABEL_15;
      }
      unint64_t v107 = a2;
      if (v22 != 17) {
        break;
      }
      if (v109)
      {
        a2 = (unint64_t)v135;
        uint64_t v6 = (void *)v135[2];
        if (v6)
        {
          uint64_t v101 = ObjectType;
          sub_10000AC7C(&qword_100127CC8);
          uint64_t v24 = (void *)swift_allocObject();
          size_t v25 = j__malloc_size(v24);
          v24[2] = v6;
          v24[3] = 2 * v25 - 64;
          uint64_t v26 = sub_10005CF70(&v115, (unsigned char *)v24 + 32, (uint64_t)v6, a2);
          unint64_t v5 = *((void *)&v115 + 1);
          unint64_t v4 = v115;
          LODWORD(v9) = v116;
          uint64_t ObjectType = (void *)*((void *)&v116 + 1);
          uint64_t v93 = v117;
          unint64_t v94 = v26;
          swift_bridgeObjectRetain_n();
          sub_10001D208();
          if (v94 != v6) {
            goto LABEL_159;
          }
          swift_bridgeObjectRelease();
          unint64_t v5 = (unint64_t)v97;
          uint64_t v9 = (uint64_t)v111;
          uint64_t ObjectType = v101;
          unint64_t v4 = v105;
          if (!v24[2])
          {
LABEL_27:
            swift_release();
            uint64_t v24 = 0;
          }
        }
        else
        {
          uint64_t v24 = _swiftEmptyArrayStorage;
          if (!_swiftEmptyArrayStorage[2]) {
            goto LABEL_27;
          }
        }
        if (!v137[2])
        {
          swift_bridgeObjectRelease();
          unint64_t v137 = 0;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t ObjectType = sub_100058E64(0, ObjectType[2] + 1, 1, ObjectType);
        }
        unint64_t v28 = ObjectType[2];
        unint64_t v27 = ObjectType[3];
        if (v28 >= v27 >> 1) {
          uint64_t ObjectType = sub_100058E64((void *)(v27 > 1), v28 + 1, 1, ObjectType);
        }
        ObjectType[2] = v28 + 1;
        uint64_t v29 = &ObjectType[10 * v28];
        uint64_t v30 = v103;
        v29[4] = v109;
        v29[5] = v30;
        v29[6] = v104;
        *((_WORD *)v29 + 28) = 256;
        *((unsigned char *)v29 + 64) = v96;
        v29[9] = v102;
        *((_WORD *)v29 + 40) = 256;
        v29[11] = v137;
        v29[12] = 0;
        v29[13] = v24;
        uint64_t v6 = v106;
        goto LABEL_36;
      }
      swift_bridgeObjectRelease();
LABEL_36:
      uint64_t v20 = v110;
      BOOL v31 = IOUSBGetEndpointDirection(v110) == 1 && v20->wMaxPacketSize < 9u;
      if (IOUSBGetEndpointType(v20) != 1)
      {
        sub_10005B1DC(&v115, 54);
        uint64_t v20 = v110;
      }
      if (!v31 && !IOUSBGetEndpointSynchronizationType(v20))
      {
        sub_10005B1DC(&v115, 85);
        uint64_t v20 = v110;
      }
      id v102 = 0;
      objc_super v103 = 0;
      objc_super v104 = 0;
      a2 = v107 + 1;
      v21 += 16;
      unint64_t v137 = _swiftEmptyArrayStorage;
      if (v99 + v107 + 1 == 1)
      {
        swift_bridgeObjectRelease();
        unint64_t v4 = 0;
        objc_super v103 = 0;
        objc_super v104 = 0;
        id v63 = _swiftEmptyArrayStorage;
        goto LABEL_119;
      }
    }
    if (v22 <= 65)
    {
      uint64_t v16 = (_OWORD *)v9;
      if (v22 == 19)
      {
        objc_super v103 = v110;
        goto LABEL_15;
      }
      if (v22 == 20)
      {
        objc_super v104 = v110;
        goto LABEL_15;
      }
      goto LABEL_113;
    }
    uint64_t v16 = (_OWORD *)v9;
    if (v22 != 70)
    {
      if (v22 == 67)
      {
        uint64_t wMaxPacketSize_low = LOBYTE(v110->wMaxPacketSize);
        uint64_t wMaxPacketSize_high = HIBYTE(v110->wMaxPacketSize);
        goto LABEL_15;
      }
      if (v22 == 66)
      {
        id v32 = v110;
        char wMaxPacketSize = v110->wMaxPacketSize;
        if (wMaxPacketSize)
        {
          if ((v110->wMaxPacketSize & 2) != 0) {
            int v34 = -3145471;
          }
          else {
            int v34 = -3145472;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v87 = sub_100058F88(0, v87[2] + 1, 1, v87);
          }
          unint64_t v36 = v87[2];
          unint64_t v35 = v87[3];
          if (v36 >= v35 >> 1) {
            id v87 = sub_100058F88((void *)(v35 > 1), v36 + 1, 1, v87);
          }
          unsigned __int8 v37 = v87;
          v87[2] = v36 + 1;
          uint64_t v38 = (char *)v37 + 3 * v36;
          v38[34] = BYTE2(v34);
          *((_WORD *)v38 + 16) = v34;
          if ((wMaxPacketSize & 2) != 0) {
            sub_10005B1DC(&v115, 10);
          }
          uint64_t v6 = v106;
          uint64_t v16 = (_OWORD *)v9;
          id v32 = v110;
        }
        char v39 = v32->wMaxPacketSize;
        if ((v39 & 4) != 0)
        {
          if ((v32->wMaxPacketSize & 8) != 0) {
            int v40 = -3669311;
          }
          else {
            int v40 = -3669312;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v87 = sub_100058F88(0, v87[2] + 1, 1, v87);
          }
          unint64_t v42 = v87[2];
          unint64_t v41 = v87[3];
          if (v42 >= v41 >> 1) {
            id v87 = sub_100058F88((void *)(v41 > 1), v42 + 1, 1, v87);
          }
          uint64_t v43 = v87;
          v87[2] = v42 + 1;
          uint64_t v44 = (char *)v43 + 3 * v42;
          v44[34] = BYTE2(v40);
          *((_WORD *)v44 + 16) = v40;
          if ((v39 & 8) != 0) {
            sub_10005B1DC(&v115, 10);
          }
          uint64_t v6 = v106;
          uint64_t v16 = (_OWORD *)v9;
          id v32 = v110;
        }
        a2 = v107;
        if ((HIBYTE(v32->wMaxPacketSize) | 2) == 3)
        {
          int v45 = *(_DWORD *)&v32->bInterval;
          int v46 = v86;
          if ((v45 & 0x10) != 0) {
            int v46 = 3;
          }
          if ((v45 & 8) != 0) {
            int v46 = 4;
          }
          if ((v45 & 4) != 0) {
            int v46 = 2;
          }
          if ((v45 & 3) != 0) {
            int v47 = 1;
          }
          else {
            int v47 = v46;
          }
          int v86 = v47;
          int bDescriptorType = v32[2].bDescriptorType;
          unint64_t v82 = v32[1].bmAttributes | ((unint64_t)*(unsigned int *)&v32[1].wMaxPacketSize << 32);
          int v95 = bDescriptorType | 0x100;
        }
        uint64_t bmAttributes = v32->bmAttributes;
        goto LABEL_15;
      }
LABEL_113:
      sub_10005B1DC(&v115, 33);
      goto LABEL_15;
    }
    unint64_t v5 = 0;
    long long v119 = v79;
    v120[0] = 513;
    v120[1] = 321;
    char v121 = -64;
    __int16 v122 = 320;
    char v123 = -64;
    __int16 v124 = 2052;
    __int16 v125 = 577;
    char v126 = 22;
    __int16 v127 = 576;
    char v128 = 22;
    __int16 v129 = 8208;
    __int16 v130 = 769;
    char v131 = 16;
    __int16 v132 = 768;
    char v133 = 16;
    int v49 = v95;
    uint64_t v50 = v110;
    uint64_t v101 = ObjectType;
    while (2)
    {
      id v51 = &v118[v5];
      if ((v50->wMaxPacketSize & *((unsigned char *)v120 + v5)) != 0)
      {
        int v52 = *((unsigned __int16 *)v51 + 17) | (v51[36] << 16);
        int v53 = (v51[33] & v50->wMaxPacketSize);
        if ((v51[33] & v50->wMaxPacketSize) != 0) {
          int v54 = *((unsigned __int16 *)v51 + 17) | (v51[36] << 16);
        }
        else {
          int v54 = *(unsigned __int16 *)(v51 + 37) | (v51[39] << 16);
        }
        id v55 = v137;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v55 = sub_100058F88(0, v55[2] + 1, 1, v55);
        }
        unint64_t v57 = v55[2];
        unint64_t v56 = v55[3];
        if (v57 >= v56 >> 1) {
          id v55 = sub_100058F88((void *)(v56 > 1), v57 + 1, 1, v55);
        }
        v55[2] = v57 + 1;
        unint64_t v137 = v55;
        uint64_t v58 = (char *)v55 + 3 * v57;
        v58[34] = BYTE2(v54);
        *((_WORD *)v58 + 16) = v54;
        if (!v53)
        {
          uint64_t v16 = v111;
          int v49 = v95;
          uint64_t ObjectType = v101;
          uint64_t v6 = v106;
          unint64_t v4 = v105;
          goto LABEL_89;
        }
        *((void *)&v116 + 1) = &type metadata for USBDescriptorControl;
        LOWORD(v115) = v52;
        BYTE2(v115) = BYTE2(v52);
        Mirror.init(reflecting:)();
        a2 = Mirror.children.getter();
        uint64_t v6 = *(void **)(a2 + 16);
        unint64_t v4 = *(void *)(a2 + 24);
        uint64_t v9 = *(void *)(a2 + 40);
        uint64_t ObjectType = (void *)swift_getObjectType();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        uint64_t v100 = dispatch thunk of _AnyIndexBox._typeID.getter();
        swift_getObjectType();
        if (v100 != dispatch thunk of _AnyIndexBox._typeID.getter()) {
          goto LABEL_158;
        }
        char v59 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
        swift_unknownObjectRelease();
        if (v59)
        {
          swift_unknownObjectRelease();
          long long v116 = 0u;
          long long v117 = 0u;
          long long v115 = 0u;
        }
        else
        {
          dispatch thunk of _AnyCollectionBox.subscript.getter();
          long long v115 = v112;
          long long v116 = v113;
          long long v117 = v114;
          swift_unknownObjectRelease();
        }
        uint64_t v16 = v111;
        int v49 = v95;
        uint64_t ObjectType = v101;
        unint64_t v4 = v105;
        swift_release();
        (*v91)(v98, v92);
        uint64_t v6 = v106;
        if (!*((void *)&v117 + 1))
        {
          sub_10001A918((uint64_t)&v115, &qword_100127CD0);
          goto LABEL_110;
        }
        long long v60 = v115;
        sub_10001ABC4((uint64_t)v88);
        if (!*((void *)&v60 + 1)) {
          goto LABEL_110;
        }
        if (v60 == __PAIR128__(0xE700000000000000, 0x68637469507065))
        {
          swift_bridgeObjectRelease();
          goto LABEL_89;
        }
        char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v61 & 1) == 0) {
LABEL_110:
        }
          sub_10005B1DC(&v115, 10);
LABEL_89:
        a2 = v107;
        uint64_t v50 = v110;
      }
      v5 += 8;
      if (v5 != 24) {
        continue;
      }
      break;
    }
    int v62 = HIBYTE(v50->wMaxPacketSize);
    int v95 = v49;
    if (v62 == 2)
    {
      id v102 = (const IOUSBEndpointDescriptor *)*(unsigned __int16 *)&v50->bInterval;
      int v90 = 1;
      unint64_t v5 = (unint64_t)v97;
    }
    else
    {
      unint64_t v5 = (unint64_t)v97;
      if (v62 == 1)
      {
        int v90 = 0;
        id v102 = (const IOUSBEndpointDescriptor *)*(unsigned __int16 *)&v50->bInterval;
      }
    }
LABEL_15:
    if (v99 + a2) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  if (v109)
  {
    uint64_t v110 = v109;
    id v63 = v137;
    unint64_t v4 = (unint64_t)v102;
LABEL_119:
    unint64_t v137 = v63;
    swift_bridgeObjectRetain();
    uint64_t v64 = swift_bridgeObjectRetain();
    uint64_t v6 = sub_10005AD1C(v64);
    swift_bridgeObjectRelease();
    if (!v6[2])
    {
      swift_release();
      uint64_t v6 = 0;
    }
    LODWORD(v9) = v95;
    if (v137[2])
    {
      a2 = (unint64_t)v137;
    }
    else
    {
      swift_bridgeObjectRelease();
      a2 = 0;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_125:
      unint64_t v66 = ObjectType[2];
      unint64_t v65 = ObjectType[3];
      unint64_t v67 = v66 + 1;
      if (v66 >= v65 >> 1) {
        uint64_t ObjectType = sub_100058E64((void *)(v65 > 1), v66 + 1, 1, ObjectType);
      }
      ObjectType[2] = v67;
      uint64_t v109 = (const IOUSBEndpointDescriptor *)(ObjectType + 2);
      id v68 = &ObjectType[10 * v66];
      Swift::String v69 = v103;
      v68[4] = v110;
      v68[5] = v69;
      v68[6] = v104;
      *((_WORD *)v68 + 28) = 256;
      *((unsigned char *)v68 + 64) = v90 & 1;
      v68[9] = v4;
      *((_WORD *)v68 + 40) = 256;
      v68[11] = a2;
      v68[12] = 0;
      v68[13] = v6;
      uint64_t v6 = (void *)v5;
      goto LABEL_128;
    }
LABEL_160:
    uint64_t ObjectType = sub_100058E64(0, ObjectType[2] + 1, 1, ObjectType);
    goto LABEL_125;
  }
  unint64_t v67 = ObjectType[2];
  uint64_t v109 = (const IOUSBEndpointDescriptor *)(ObjectType + 2);
  uint64_t v6 = (void *)v5;
  LODWORD(v9) = v95;
  if (!v67)
  {
LABEL_143:
    sub_10005B1DC(&v115, 81);
    goto LABEL_144;
  }
LABEL_128:
  int v95 = v9;
  NSString v70 = ObjectType;
  ObjectType += 13;
  uint64_t v101 = v70;
  swift_bridgeObjectRetain();
  BOOL v71 = 0;
  uint64_t v9 = 1;
  while (2)
  {
    if (v71)
    {
LABEL_130:
      if (v67 == v9)
      {
        uint64_t ObjectType = v101;
        swift_bridgeObjectRelease();
        uint64_t v16 = v111;
        LOWORD(v9) = v95;
        goto LABEL_144;
      }
      BOOL v71 = 1;
      goto LABEL_132;
    }
    unint64_t v5 = (unint64_t)v6;
    unint64_t v4 = *(ObjectType - 9);
    a2 = *(ObjectType - 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!IOUSBGetEndpointUsageType((const IOUSBEndpointDescriptor *)v4) && *(unsigned __int16 *)(v4 + 4) >= 9u)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_130;
    }
    id v73 = (void *)IOUSBGetEndpointUsageType((const IOUSBEndpointDescriptor *)v4);
    if (v73)
    {
      unint64_t v5 = (unint64_t)v73;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v4 = *(unsigned __int16 *)(v4 + 4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v5 = v4 < 9;
    }
    BOOL v71 = v5 == 2;
    if (v67 != v9)
    {
      uint64_t v6 = v97;
LABEL_132:
      ObjectType += 10;
      if (__OFADD__(v9++, 1)) {
        goto LABEL_157;
      }
      continue;
    }
    break;
  }
  uint64_t ObjectType = v101;
  swift_bridgeObjectRelease();
  uint64_t v16 = v111;
  LOWORD(v9) = v95;
  if (v5 != 2) {
    goto LABEL_143;
  }
LABEL_144:
  if (*(void *)&v109->bLength != v80) {
    sub_10005B1DC(&v115, 82);
  }
  if (BYTE1(v9) == 255)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v17 = 1;
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = 0xE000000000000000;
    *(void *)(v17 + 24) = 0xD000000000000030;
    *(void *)(v17 + 32) = 0x80000001000E21F0;
    *(void *)(v17 + 40) = 0xD00000000000001CLL;
    *(void *)(v17 + 48) = 0x80000001000E2120;
    uint64_t v18 = 394;
LABEL_148:
    *(void *)(v17 + 56) = v18;
    swift_willThrow();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v74 = sub_10005AD1C((uint64_t)v134);
    swift_bridgeObjectRelease();
    sub_100060B54((uint64_t)v78, v86, bmAttributes, wMaxPacketSize_low, wMaxPacketSize_high, v82, v9, (uint64_t)ObjectType, (uint64_t)v136, (uint64_t)v87, (uint64_t)v74);
    long long v75 = v136[3];
    v16[2] = v136[2];
    v16[3] = v75;
    v16[4] = v136[4];
    long long v76 = v136[1];
    _OWORD *v16 = v136[0];
    v16[1] = v76;
  }
}

uint64_t sub_10001CDF8(unint64_t a1)
{
  if (a1 >= 0x100)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if ((a1 & 0xF8) != 0)
  {
    return 7;
  }
  else
  {
    return (0x605040302010007uLL >> (8 * a1));
  }
  return result;
}

unint64_t sub_10001CE84(uint64_t a1)
{
  if (a1 == 6 && (swift_beginAccess(), (uint64_t v2 = *(void **)(v1 + 216)) != 0))
  {
    long long v3 = (unsigned __int16 *)[v2 bytes];
    return sub_10001AD90(*v3 | ((unint64_t)*(unsigned int *)(v3 + 1) << 16));
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v5 = 2;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0xE000000000000000;
    *(void *)(v5 + 24) = 0xD000000000000029;
    *(void *)(v5 + 32) = 0x80000001000E20F0;
    *(void *)(v5 + 40) = 0xD00000000000001CLL;
    *(void *)(v5 + 48) = 0x80000001000E2120;
    *(void *)(v5 + 56) = 413;
    return swift_willThrow();
  }
}

uint64_t sub_10001CF6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AC7C(&qword_100127CC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001CFD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AC7C(&qword_100127CC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001D03C(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_10001D098()
{
  unint64_t result = qword_100127408;
  if (!qword_100127408)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100127408);
  }
  return result;
}

void *sub_10001D0D8(void *a1)
{
  uint64_t v9 = a1[6];
  uint64_t v10 = a1[5];
  uint64_t v2 = a1[8];
  uint64_t v3 = a1[9];
  uint64_t v4 = a1[10];
  uint64_t v5 = a1[11];
  uint64_t v7 = a1[12];
  uint64_t v8 = a1[7];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001D1B8(v10, v9, v8, v2, v3, v4, v5, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10001D1B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a8 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10001D208()
{
  return swift_release();
}

Swift::Int *kDeviceCapabilityTypeConfigurationSummary.unsafeMutableAddressor()
{
  return &kDeviceCapabilityTypeConfigurationSummary;
}

Swift::Int *kDeviceCapabilityTypeAudioHigherRevisionLevelFunction.unsafeMutableAddressor()
{
  return &kDeviceCapabilityTypeAudioHigherRevisionLevelFunction;
}

uint64_t ActiveConfiguration.activeFunctions.getter()
{
  return swift_bridgeObjectRetain();
}

void sub_10001D234()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain_n();
    for (unint64_t i = (uint64_t *)(v3 + 40); ; i += 2)
    {
      uint64_t v6 = *i;
      uint64_t ObjectType = swift_getObjectType();
      swift_unknownObjectRetain();
      sub_100030710(ObjectType, v6);
      if (v2) {
        break;
      }
      swift_unknownObjectRelease();
      if (!--v4)
      {
        swift_bridgeObjectRelease_n();
        return;
      }
    }
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
  }
}

void sub_10001D2EC()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = (uint64_t *)(v1 + 40);
    do
    {
      uint64_t v4 = *v3;
      uint64_t ObjectType = swift_getObjectType();
      swift_unknownObjectRetain();
      sub_100031518(ObjectType, v4);
      swift_unknownObjectRelease();
      v3 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
}

uint64_t ActiveConfiguration.configNum.getter()
{
  return *(unsigned __int8 *)(*(void *)(v0 + 16) + 5);
}

uint64_t ActiveConfiguration.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ActiveConfiguration.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ActiveConfiguration()
{
  return self;
}

uint64_t sub_10001D428@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = (uint64_t)(a1 + 2);
  *(void *)&long long v20 = *a1;
  *((void *)&v20 + 1) = v6;
  sub_10001A1C8((uint64_t)(a1 + 2), (uint64_t)&v21);
  if (v6)
  {
    swift_bridgeObjectRetain();
    sub_10001ABC4((uint64_t)&v21);
    if (*(void *)(a2 + 16) && (unint64_t v9 = sub_100019914(v7, v6), (v10 & 1) != 0))
    {
      sub_10001AB28(*(void *)(a2 + 56) + 40 * v9, (uint64_t)&v20);
    }
    else
    {
      uint64_t v22 = 0;
      long long v20 = 0u;
      long long v21 = 0u;
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (*((void *)&v21 + 1))
    {
      long long v23 = v20;
      long long v24 = v21;
      uint64_t v12 = v22;
LABEL_12:
      uint64_t v25 = v12;
      long long v13 = v24;
      *(_OWORD *)a3 = v23;
      *(_OWORD *)(a3 + 16) = v13;
      *(void *)(a3 + 32) = v12;
      return result;
    }
    sub_10001D688((uint64_t)&v20);
  }
  else
  {
    sub_10001ABC4((uint64_t)&v21);
  }
  long long v20 = *(_OWORD *)a1;
  sub_10001A1C8(v8, (uint64_t)&v21);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    long long v23 = v17;
    long long v24 = v18;
    uint64_t v12 = v19;
    goto LABEL_12;
  }
  uint64_t v19 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  sub_10001D688((uint64_t)&v17);
  uint64_t v14 = *a1;
  uint64_t v15 = (void *)a1[1];
  *(void *)&long long v20 = *a1;
  *((void *)&v20 + 1) = v15;
  sub_10001A1C8(v8, (uint64_t)&v21);
  if (v15)
  {
    swift_bridgeObjectRetain();
    sub_10001ABC4((uint64_t)&v21);
    *(void *)&long long v20 = 0;
    *((void *)&v20 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    *(void *)&long long v20 = 0xD000000000000029;
    *((void *)&v20 + 1) = 0x80000001000E22F0;
    v16._countAndFlagsBits = v14;
    v16._object = v15;
    String.append(_:)(v16);
  }
  else
  {
    sub_10001ABC4((uint64_t)&v21);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001D688(uint64_t a1)
{
  uint64_t v2 = sub_10000AC7C(&qword_100127D98);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ActiveFeatureUnit.function.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t ActiveFeatureUnit.function.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*ActiveOutputTerminal.function.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v5 = *(void *)(v1 + 24);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_10001D814;
}

uint64_t ActiveMixerUnit.staticMixerUnit.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10001D824(v1 + 32, a1);
}

uint64_t sub_10001D824(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ActiveStreamingAltInterface.cluster.getter()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ActiveMixerUnit.staticEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_10001D994((uint64_t (*)(void))sub_10001D8D8, a1);
}

unint64_t sub_10001D8D8()
{
  unint64_t result = qword_100127DA0;
  if (!qword_100127DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100127DA0);
  }
  return result;
}

uint64_t sub_10001D92C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t ActiveMixerUnit.staticDataEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_10001D994((uint64_t (*)(void))sub_10001DAAC, a1);
}

uint64_t sub_10001D994@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 32);
  char v5 = *(unsigned char *)(v2 + 40);
  uint64_t v6 = *(void *)(v2 + 48);
  char v7 = *(unsigned char *)(v2 + 58);
  uint64_t v8 = *(void *)(v2 + 64);
  __int16 v17 = *(_WORD *)(v2 + 72);
  __int16 v18 = *(_WORD *)(v2 + 56);
  uint64_t v16 = *(void *)(v2 + 76);
  __int16 v15 = *(_WORD *)(v2 + 84);
  uint64_t v9 = *(void *)(v2 + 88);
  uint64_t v10 = *(void *)(v2 + 96);
  uint64_t v12 = *(void *)(v2 + 104);
  uint64_t v11 = *(void *)(v2 + 112);
  a2[3] = (uint64_t)&type metadata for MixerUnit;
  a2[4] = a1();
  uint64_t v13 = swift_allocObject();
  *a2 = v13;
  *(void *)(v13 + 16) = v4;
  *(unsigned char *)(v13 + 24) = v5;
  *(void *)(v13 + 32) = v6;
  *(unsigned char *)(v13 + 42) = v7;
  *(_WORD *)(v13 + 40) = v18;
  *(void *)(v13 + 48) = v8;
  *(_WORD *)(v13 + 56) = v17;
  *(void *)(v13 + 60) = v16;
  *(_WORD *)(v13 + 68) = v15;
  *(void *)(v13 + 72) = v9;
  *(void *)(v13 + 80) = v10;
  *(void *)(v13 + 88) = v12;
  *(void *)(v13 + 96) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

unint64_t sub_10001DAAC()
{
  unint64_t result = qword_100127DA8;
  if (!qword_100127DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100127DA8);
  }
  return result;
}

uint64_t ActiveMixerUnit.latencyControlSelector.getter()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v2 = *(void *)(v0 + 24);
    uint64_t ObjectType = swift_getObjectType();
    int v4 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v2 + 40))(ObjectType, v2);
    swift_unknownObjectRelease();
    if (v4 == 32) {
      return 5;
    }
    else {
      return 0;
    }
  }
  return result;
}

unint64_t ActiveMixerUnit.pathName.getter()
{
  swift_retain();
  unint64_t v1 = sub_10001DC88();
  uint64_t v3 = v2;
  swift_release();
  if (!v3)
  {
    swift_retain();
    uint64_t v4 = swift_bridgeObjectRetain();
    char v5 = sub_10001E36C(v4, v0);
    swift_bridgeObjectRelease();
    swift_release();
    if (v5[2])
    {
      sub_10000AC7C(&qword_100127B08);
      sub_10001A528();
      unint64_t v1 = BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0xD000000000000012;
    }
  }
  return v1;
}

unint64_t sub_10001DC88()
{
  unint64_t Strong = 0;
  unsigned __int8 v2 = *(unsigned char *)(v0 + 58);
  if (v2 != 255)
  {
    unsigned __int16 v3 = *(_WORD *)(v0 + 56);
    swift_beginAccess();
    unint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v4 = *(void *)(v0 + 24);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v6 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(ObjectType, v4);
      swift_unknownObjectRelease();
      if (v6)
      {
        if (*(void *)&v6[OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject])
        {
          unint64_t Strong = sub_1000C545C(v3 | (v2 << 16) & 0x1FFFFu);

          return Strong;
        }
      }
      return 0;
    }
  }
  return Strong;
}

uint64_t ActiveMixerUnit.deinit()
{
  sub_10001DEAC(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10001DEAC(uint64_t a1)
{
  return a1;
}

uint64_t ActiveMixerUnit.__deallocating_deinit()
{
  sub_10001DEAC(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_10001DF48@<X0>(uint64_t *a1@<X8>)
{
  return sub_10001DFE0((uint64_t (*)(void))sub_10001DAAC, a1);
}

uint64_t sub_10001DF60()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 120);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t sub_10001DFA4()
{
  return ActiveMixerUnit.pathName.getter();
}

uint64_t sub_10001DFC8@<X0>(uint64_t *a1@<X8>)
{
  return sub_10001DFE0((uint64_t (*)(void))sub_10001D8D8, a1);
}

uint64_t sub_10001DFE0@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 32);
  char v6 = *(unsigned char *)(*(void *)v2 + 40);
  uint64_t v7 = *(void *)(*(void *)v2 + 48);
  char v8 = *(unsigned char *)(*(void *)v2 + 58);
  uint64_t v9 = *(void *)(*(void *)v2 + 64);
  __int16 v18 = *(_WORD *)(*(void *)v2 + 72);
  __int16 v19 = *(_WORD *)(*(void *)v2 + 56);
  uint64_t v17 = *(void *)(*(void *)v2 + 76);
  __int16 v16 = *(_WORD *)(*(void *)v2 + 84);
  uint64_t v10 = *(void *)(*(void *)v2 + 88);
  uint64_t v11 = v4[12];
  uint64_t v12 = v4[13];
  uint64_t v13 = v4[14];
  a2[3] = (uint64_t)&type metadata for MixerUnit;
  a2[4] = a1();
  uint64_t v14 = swift_allocObject();
  *a2 = v14;
  *(void *)(v14 + 16) = v5;
  *(unsigned char *)(v14 + 24) = v6;
  *(void *)(v14 + 32) = v7;
  *(unsigned char *)(v14 + 42) = v8;
  *(_WORD *)(v14 + 40) = v19;
  *(void *)(v14 + 48) = v9;
  *(_WORD *)(v14 + 56) = v18;
  *(void *)(v14 + 60) = v17;
  *(_WORD *)(v14 + 68) = v16;
  *(void *)(v14 + 72) = v10;
  *(void *)(v14 + 80) = v11;
  *(void *)(v14 + 88) = v12;
  *(void *)(v14 + 96) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_10001E0FC()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_10001E148(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  swift_beginAccess();
  *(void *)(v4 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*sub_10001E1B0(void *a1))()
{
  unsigned __int16 v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  v3[5] = *v1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v6 = *(void *)(v4 + 24);
  v3[3] = Strong;
  v3[4] = v6;
  return sub_10001D814;
}

void sub_10001E234(uint64_t a1, char a2)
{
  unsigned __int16 v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 24) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t sub_10001E2B8()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v3 = *(void *)(v1 + 24);
    uint64_t ObjectType = swift_getObjectType();
    LODWORD(v3) = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v3 + 40))(ObjectType, v3);
    swift_unknownObjectRelease();
    if (v3 == 32) {
      return 5;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ActiveMixerUnit()
{
  return self;
}

void *sub_10001E36C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  swift_beginAccess();
  uint64_t v5 = 0;
  uint64_t v6 = _swiftEmptyArrayStorage;
  uint64_t v28 = a2;
  do
  {
    uint64_t v7 = *(void *)(a1 + 8 * v5 + 32);
    if (!swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v21 = 0;
      long long v19 = 0u;
      long long v20 = 0u;
LABEL_4:
      sub_10001A918((uint64_t)&v19, &qword_100127E98);
      long long v22 = 0u;
      long long v23 = 0u;
      uint64_t v24 = 0;
LABEL_5:
      sub_10001A918((uint64_t)&v22, &qword_100127B38);
      goto LABEL_6;
    }
    uint64_t v8 = *(void *)(a2 + 24);
    uint64_t ObjectType = swift_getObjectType();
    sub_1000317E8(v7, ObjectType, v8, (uint64_t)&v19);
    swift_unknownObjectRelease();
    if (!*((void *)&v20 + 1)) {
      goto LABEL_4;
    }
    sub_10000AC7C(&qword_100127B28);
    sub_10000AC7C(&qword_100127B30);
    if ((swift_dynamicCast() & 1) == 0)
    {
      uint64_t v24 = 0;
      long long v22 = 0u;
      long long v23 = 0u;
      goto LABEL_5;
    }
    if (!*((void *)&v23 + 1)) {
      goto LABEL_5;
    }
    sub_10000CF6C(&v22, (uint64_t)v25);
    uint64_t v10 = v26;
    uint64_t v11 = v27;
    sub_10001A974(v25, v26);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 56))(v10, v11);
    uint64_t v14 = v13;
    sub_10001ABC4((uint64_t)v25);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v6 = sub_100058D54(0, v6[2] + 1, 1, v6);
    }
    unint64_t v16 = v6[2];
    unint64_t v15 = v6[3];
    if (v16 >= v15 >> 1) {
      uint64_t v6 = sub_100058D54((void *)(v15 > 1), v16 + 1, 1, v6);
    }
    v6[2] = v16 + 1;
    uint64_t v17 = &v6[2 * v16];
    v17[4] = v12;
    v17[5] = v14;
    a2 = v28;
LABEL_6:
    ++v5;
  }
  while (v2 != v5);
  swift_bridgeObjectRelease();
  return v6;
}

void *sub_10001E5A4(void (*a1)(long long *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a3 + 16);
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  v22[4] = a3;
  uint64_t v8 = (uint64_t *)(a3 + 48);
  uint64_t v9 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v11 = *(v8 - 1);
    uint64_t v12 = *v8;
    v22[0] = *(v8 - 2);
    v22[1] = v11;
    v22[2] = v12;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    a1(&v20, v22);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return v9;
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if ((void)v20)
    {
      long long v19 = v20;
      uint64_t v13 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v9 = sub_100058C2C(0, v9[2] + 1, 1, v9);
      }
      unint64_t v15 = v9[2];
      unint64_t v14 = v9[3];
      long long v16 = v19;
      if (v15 >= v14 >> 1)
      {
        uint64_t v17 = sub_100058C2C((void *)(v14 > 1), v15 + 1, 1, v9);
        long long v16 = v19;
        uint64_t v9 = v17;
      }
      v9[2] = v15 + 1;
      uint64_t v10 = &v9[3 * v15];
      *((_OWORD *)v10 + 2) = v16;
      v10[6] = v13;
    }
    v8 += 3;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  return v9;
}

void *sub_10001E758(void (*a1)(long long *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_20;
  }
  uint64_t v5 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
    for (uint64_t i = 4; ; ++i)
    {
      id v8 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a3 + 8 * i);
      uint64_t v9 = v8;
      uint64_t v10 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v18 = v8;
      a1(&v15, &v18);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v6;
      }

      if (v16)
      {
        sub_10000CF6C(&v15, (uint64_t)v17);
        sub_10000CF6C(v17, (uint64_t)&v15);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v6 = sub_1000592F4(0, v6[2] + 1, 1, v6);
        }
        unint64_t v12 = v6[2];
        unint64_t v11 = v6[3];
        if (v12 >= v11 >> 1) {
          uint64_t v6 = sub_1000592F4((void *)(v11 > 1), v12 + 1, 1, v6);
        }
        v6[2] = v12 + 1;
        sub_10000CF6C(&v15, (uint64_t)&v6[5 * v12 + 4]);
      }
      else
      {
        sub_10001A918((uint64_t)&v15, &qword_100128048);
      }
      if (v10 == v5)
      {
        swift_bridgeObjectRelease();
        return v6;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t ActiveSelectorUnit.staticSelectorUnit.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10001E95C(v1 + 16, a1);
}

uint64_t sub_10001E95C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ActiveClockSelector.function.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t ActiveClockSelector.function.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 104) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*ActiveClockSelector.function.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v5 = *(void *)(v1 + 104);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_10001EAE4;
}

uint64_t ActiveSelectorUnit.staticEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_10001EBB4((uint64_t (*)(void))sub_10001EB00, a1);
}

unint64_t sub_10001EB00()
{
  unint64_t result = qword_100127EA0;
  if (!qword_100127EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100127EA0);
  }
  return result;
}

uint64_t sub_10001EB54()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t ActiveSelectorUnit.staticDataEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_10001EBB4((uint64_t (*)(void))sub_10001ECA0, a1);
}

uint64_t sub_10001EBB4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 16);
  char v5 = *(unsigned char *)(v2 + 24);
  uint64_t v6 = *(void *)(v2 + 32);
  __int16 v15 = *(_WORD *)(v2 + 40);
  char v7 = *(unsigned char *)(v2 + 42);
  uint64_t v8 = *(void *)(v2 + 48);
  __int16 v9 = *(_WORD *)(v2 + 56);
  uint64_t v10 = *(void *)(v2 + 64);
  uint64_t v11 = *(void *)(v2 + 72);
  uint64_t v12 = *(void *)(v2 + 80);
  a2[3] = (uint64_t)&type metadata for SelectorUnit;
  a2[4] = a1();
  uint64_t v13 = swift_allocObject();
  *a2 = v13;
  *(void *)(v13 + 16) = v4;
  *(unsigned char *)(v13 + 24) = v5;
  *(void *)(v13 + 32) = v6;
  *(unsigned char *)(v13 + 42) = v7;
  *(_WORD *)(v13 + 40) = v15;
  *(void *)(v13 + 48) = v8;
  *(_WORD *)(v13 + 56) = v9;
  *(void *)(v13 + 64) = v10;
  *(void *)(v13 + 72) = v11;
  *(void *)(v13 + 80) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

unint64_t sub_10001ECA0()
{
  unint64_t result = qword_100127EA8;
  if (!qword_100127EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100127EA8);
  }
  return result;
}

uint64_t MixerUnit.mixerControls.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MixerUnit.controls.getter()
{
  return swift_bridgeObjectRetain();
}

void ActiveSelectorUnit.source.getter(uint64_t a1@<X8>)
{
  uint64_t v42 = type metadata accessor for Mirror();
  __chkstk_darwin(v42);
  char v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1[8];
  if (*(void *)(v6 + 16) == 1)
  {
    swift_beginAccess();
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v7 = v1[13];
      uint64_t ObjectType = swift_getObjectType();
      sub_1000317E8(*(void *)(v6 + 32), ObjectType, v7, (uint64_t)&v47);
      swift_unknownObjectRelease();
      if (*((void *)&v48 + 1))
      {
        sub_10000AC7C(&qword_100127B28);
        sub_10000AC7C(&qword_100127EC0);
        if (swift_dynamicCast()) {
          goto LABEL_23;
        }
        goto LABEL_5;
      }
    }
    else
    {
      *(void *)&long long v49 = 0;
      long long v47 = 0u;
      long long v48 = 0u;
    }
    sub_10001A918((uint64_t)&v47, &qword_100127E98);
    long long v44 = 0u;
    long long v45 = 0u;
    *(void *)&long long v46 = 0;
    goto LABEL_23;
  }
  uint64_t v9 = v1[9];
  if (!v9 || (uint64_t v10 = *(void *)(v9 + 16)) == 0)
  {
LABEL_26:
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return;
  }
  uint64_t v34 = v1[8];
  unint64_t v35 = v1;
  uint64_t v36 = a1;
  unsigned __int8 v37 = &v48;
  unint64_t v41 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = 32;
  uint64_t v40 = v11;
  while (1)
  {
    uint64_t v43 = v10;
    int v13 = *(unsigned __int8 *)(v11 + v12 + 2);
    int v14 = *(unsigned __int16 *)(v11 + v12);
    *((void *)&v48 + 1) = &type metadata for USBDescriptorControl;
    int v39 = v13;
    BYTE2(v47) = v13;
    int v38 = v14;
    LOWORD(v47) = v14;
    Mirror.init(reflecting:)();
    __int16 v15 = v5;
    Mirror.children.getter();
    swift_getObjectType();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v16 = dispatch thunk of _AnyIndexBox._typeID.getter();
    swift_getObjectType();
    if (v16 != dispatch thunk of _AnyIndexBox._typeID.getter())
    {
      __break(1u);
LABEL_39:

      *(void *)&long long v49 = 0;
      long long v47 = 0u;
      long long v48 = 0u;
      a1 = v36;
LABEL_24:
      sub_10001F3EC((uint64_t)&v47, a1);
      return;
    }
    char v17 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_unknownObjectRelease();
    if (v17)
    {
      swift_unknownObjectRelease();
      long long v48 = 0u;
      long long v49 = 0u;
      long long v47 = 0u;
    }
    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter();
      long long v47 = v44;
      long long v48 = v45;
      long long v49 = v46;
      swift_unknownObjectRelease();
    }
    swift_release();
    (*v41)(v5, v42);
    if (!*((void *)&v49 + 1))
    {
      sub_10001A918((uint64_t)&v47, &qword_100127CD0);
      goto LABEL_10;
    }
    long long v18 = v47;
    sub_10001ABC4((uint64_t)v37);
    if (!*((void *)&v18 + 1)) {
      goto LABEL_10;
    }
    if (v18 == __PAIR128__(0xE800000000000000, 0x726F7463656C6573)) {
      break;
    }
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_27;
    }
LABEL_10:
    v12 += 3;
    uint64_t v10 = v43 - 1;
    uint64_t v11 = v40;
    if (v43 == 1)
    {
      swift_bridgeObjectRelease();
      a1 = v36;
      goto LABEL_26;
    }
  }
  swift_bridgeObjectRelease();
LABEL_27:
  swift_bridgeObjectRelease();
  long long v20 = v35;
  swift_beginAccess();
  if (!swift_unknownObjectWeakLoadStrong())
  {
LABEL_29:
    uint64_t v25 = (_OWORD *)v36;
    *(void *)(v36 + 32) = 0;
    *uint64_t v25 = 0u;
    v25[1] = 0u;
    return;
  }
  int v21 = v38 | (v39 << 16);
  uint64_t v22 = v20[13];
  uint64_t v23 = swift_getObjectType();
  *((void *)&v48 + 1) = type metadata accessor for ActiveSelectorUnit();
  *(void *)&long long v49 = &protocol witness table for ActiveSelectorUnit;
  *(void *)&long long v47 = v20;
  uint64_t v24 = *(uint64_t (**)(void, void, uint64_t, long long *, uint64_t, uint64_t))(v22 + 144);
  swift_retain();
  LOWORD(v23) = v24(v21 & 0xFFFFFF, 0, 1, &v47, v23, v22);
  __int16 v15 = v26;
  swift_unknownObjectRelease();
  sub_10001ABC4((uint64_t)&v47);
  ADCControlRequestParameterBlock.getCur()(v15, v23 & 0x1FF, (uint64_t)&v47);
  sub_10000AC7C(&qword_100127EB8);
  char v27 = swift_dynamicCast();
  if ((v27 & 1) == 0)
  {

    goto LABEL_29;
  }
  unint64_t v28 = v44 - 1;
  if ((uint64_t)v44 < 1) {
    goto LABEL_39;
  }
  if (!swift_unknownObjectWeakLoadStrong())
  {

    *(void *)&long long v49 = 0;
    long long v47 = 0u;
    long long v48 = 0u;
    goto LABEL_41;
  }
  uint64_t v29 = v34;
  if (v28 < *(void *)(v34 + 16))
  {
    uint64_t v30 = v35[13];
    uint64_t v31 = swift_getObjectType();
    sub_1000317E8(*(void *)(v29 + 8 * v28 + 32), v31, v30, (uint64_t)&v47);
    swift_unknownObjectRelease();

    if (*((void *)&v48 + 1))
    {
      sub_10000AC7C(&qword_100127B28);
      sub_10000AC7C(&qword_100127EC0);
      char v32 = swift_dynamicCast();
      a1 = v36;
      if (v32)
      {
LABEL_23:
        sub_10001F3EC((uint64_t)&v44, (uint64_t)&v47);
        goto LABEL_24;
      }
LABEL_5:
      *(void *)&long long v46 = 0;
      long long v44 = 0u;
      long long v45 = 0u;
      goto LABEL_23;
    }
LABEL_41:
    sub_10001A918((uint64_t)&v47, &qword_100127E98);
    long long v44 = 0u;
    long long v45 = 0u;
    *(void *)&long long v46 = 0;
    a1 = v36;
    goto LABEL_23;
  }
  __break(1u);
}

uint64_t type metadata accessor for ActiveSelectorUnit()
{
  return self;
}

uint64_t sub_10001F3EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AC7C(&qword_100127EB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ActiveSelectorUnit.latencyControlSelector.getter()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v2 = *(void *)(v0 + 104);
    uint64_t ObjectType = swift_getObjectType();
    BOOL v4 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v2 + 40))(ObjectType, v2) == 32;
    swift_unknownObjectRelease();
    return (2 * v4);
  }
  return result;
}

uint64_t ActiveSelectorUnit.cluster.getter()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))0xD000000000000022;
  uint64_t ObjectType = 0x72657473756C63;
  uint64_t v89 = type metadata accessor for Mirror();
  uint64_t v3 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  char v5 = &v74[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    sub_10000CD54();
    uint64_t v15 = swift_allocError();
    *(unsigned char *)uint64_t v16 = 1;
    *(void *)(v16 + 8) = 0;
    *(void *)(v16 + 16) = 0xE000000000000000;
    *(void *)(v16 + 24) = 0x72657473756C63;
    *(void *)(v16 + 32) = 0xE700000000000000;
    *(void *)(v16 + 40) = 0xD000000000000022;
    *(void *)(v16 + 48) = 0x80000001000E23F0;
    *(void *)(v16 + 56) = 77;
    swift_willThrow();
    goto LABEL_31;
  }
  uint64_t v7 = *(void *)(v0 + 104);
  uint64_t v8 = *(void *)(v0 + 64);
  if (*(void *)(v8 + 16) != 1)
  {
    uint64_t v81 = Strong;
    uint64_t v17 = *(void *)(v0 + 72);
    if (v17)
    {
      long long v18 = *(unsigned char **)(v17 + 16);
      if (v18)
      {
        uint64_t v80 = (unsigned char *)v0;
        uint64_t v82 = v8;
        uint64_t v83 = v7;
        id v84 = &v98;
        id v87 = (unsigned char *)(v3 + 8);
        uint64_t v19 = swift_bridgeObjectRetain();
        uint64_t v20 = 32;
        id v88 = (uint64_t (*)(unsigned char *, uint64_t))v19;
        while (1)
        {
          int v90 = v18;
          int v21 = *(unsigned __int8 *)(v19 + v20 + 2);
          int v22 = *(unsigned __int16 *)(v19 + v20);
          *((void *)&v98 + 1) = &type metadata for USBDescriptorControl;
          LODWORD(v86) = v21;
          BYTE2(v97) = v21;
          LODWORD(v85) = v22;
          LOWORD(v97) = v22;
          Mirror.init(reflecting:)();
          uint64_t v23 = v5;
          uint64_t v24 = *(unsigned char **)(Mirror.children.getter() + 16);
          uint64_t ObjectType = swift_getObjectType();
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          uint64_t v25 = (unsigned char *)dispatch thunk of _AnyIndexBox._typeID.getter();
          swift_getObjectType();
          if (v25 != (unsigned char *)dispatch thunk of _AnyIndexBox._typeID.getter()) {
            break;
          }
          char v26 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
          swift_unknownObjectRelease();
          if (v26)
          {
            swift_unknownObjectRelease();
            long long v98 = 0u;
            long long v99 = 0u;
            long long v97 = 0u;
          }
          else
          {
            dispatch thunk of _AnyCollectionBox.subscript.getter();
            long long v97 = v94;
            long long v98 = v95;
            long long v99 = v96;
            swift_unknownObjectRelease();
          }
          swift_release();
          (*(void (**)(unsigned char *, uint64_t))v87)(v5, v89);
          if (*((void *)&v99 + 1))
          {
            long long v27 = v97;
            sub_10001ABC4((uint64_t)v84);
            if (*((void *)&v27 + 1))
            {
              if (v27 == __PAIR128__(0xE800000000000000, 0x726F7463656C6573))
              {
                swift_bridgeObjectRelease();
LABEL_33:
                unsigned int v34 = v85 | (v86 << 16);
                swift_bridgeObjectRelease();
                uint64_t v35 = swift_getObjectType();
                *((void *)&v98 + 1) = type metadata accessor for ActiveSelectorUnit();
                *(void *)&long long v99 = &protocol witness table for ActiveSelectorUnit;
                *(void *)&long long v97 = v80;
                uint64_t v36 = v83;
                unsigned __int8 v37 = *(uint64_t (**)(void, void, void, long long *, uint64_t, uint64_t))(v83 + 144);
                swift_retain();
                LOWORD(v34) = v37(v34 & 0xFFFFFF, 0, 0, &v97, v35, v36);
                int v39 = v38;
                sub_10001ABC4((uint64_t)&v97);
                ADCControlRequestParameterBlock.getCur()(v39, v34 & 0x1FF, (uint64_t)&v97);
                id v84 = (long long *)v39;
                uint64_t ObjectType = *((void *)&v98 + 1);
                uint64_t v40 = sub_10001A974(&v97, *((uint64_t *)&v98 + 1));
                int v86 = v74;
                unint64_t v41 = *(void **)(ObjectType - 8);
                uint64_t v42 = (unsigned char *)v41[8];
                __chkstk_darwin(v40);
                unint64_t v43 = (unint64_t)(v42 + 15) & 0xFFFFFFFFFFFFFFF0;
                long long v44 = (void (*)(unsigned char *))v41[2];
                v44(&v74[-v43]);
                uint64_t v45 = dispatch thunk of static BinaryInteger.isSigned.getter();
                LOBYTE(v35) = v45;
                unint64_t v85 = v74;
                id v87 = v42;
                __chkstk_darwin(v45);
                long long v46 = &v74[-v43];
                long long v47 = &v74[-v43];
                int v90 = v44;
                ((void (*)(unsigned char *, unsigned char *, uint64_t))v44)(&v74[-v43], &v74[-v43], ObjectType);
                uint64_t v89 = (uint64_t)v41;
                if (v35)
                {
                  uint64_t v48 = dispatch thunk of BinaryInteger.bitWidth.getter();
                  id v88 = (uint64_t (*)(unsigned char *, uint64_t))v41[1];
                  uint64_t v49 = v88(v46, ObjectType);
                  if (v48 > 64)
                  {
                    uint64_t v80 = v74;
                    uint64_t v23 = v87;
                    __chkstk_darwin(v49);
                    uint64_t v24 = &v74[-((unint64_t)(v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
                    uint64_t v25 = &v74[-v43];
                    ((void (*)(unsigned char *, unsigned char *, uint64_t))v90)(v24, v47, ObjectType);
                    *(void *)&long long v94 = 0x8000000000000000;
                    if (dispatch thunk of static BinaryInteger.isSigned.getter())
                    {
                      uint64_t v50 = dispatch thunk of BinaryInteger.bitWidth.getter();
                      id v51 = &v74[-((unint64_t)(v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
                      if (v50 < 64)
                      {
LABEL_48:
                        uint64_t v56 = dispatch thunk of BinaryInteger._lowWord.getter();
                        unint64_t v57 = (void (*)(uint64_t, uint64_t))v88;
                        v88(v51, ObjectType);
                        int v52 = v57;
                        if (v56 < (uint64_t)v94)
                        {
LABEL_49:
                          do
                          {
                            __break(1u);
LABEL_50:
                            uint64_t v78 = v51;
                            uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
                            long long v79 = v74;
                            __chkstk_darwin(AssociatedTypeWitness);
                            swift_getAssociatedConformanceWitness();
                            uint64_t v59 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
                            long long v76 = v74;
                            __chkstk_darwin(v59);
                            unint64_t v77 = (unint64_t)(v23 + 15) & 0xFFFFFFFFFFFFFFF0;
                            long long v60 = &v74[-v77];
                            dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
                            char v61 = v78;
                            int v75 = dispatch thunk of static Comparable.< infix(_:_:)();
                            uint64_t v1 = (void (*)(uint64_t, uint64_t))v88;
                            uint64_t v62 = v88(v60, ObjectType);
                            long long v79 = v74;
                            __chkstk_darwin(v62);
                            uint64_t v0 = (uint64_t)&v74[-v77];
                            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v89 + 32))(&v74[-v77], v61, ObjectType);
                            if (v75) {
                              goto LABEL_69;
                            }
                            id v51 = (unsigned char *)v94;
                            uint64_t v63 = dispatch thunk of BinaryInteger._lowWord.getter();
                            v1(v0, ObjectType);
                            int v52 = v1;
                          }
                          while (v63 < (uint64_t)v51);
                        }
LABEL_52:
                        uint64_t v65 = dispatch thunk of BinaryInteger.bitWidth.getter();
                        __chkstk_darwin(v65);
                        ((void (*)(unsigned char *, unsigned char *, uint64_t))v90)(&v74[-((unint64_t)(v23 + 15) & 0xFFFFFFFFFFFFFFF0)], v25, ObjectType);
                        if (v65 >= 65)
                        {
                          uint64_t v66 = ((uint64_t (*)(unsigned char *, uint64_t))v52)(&v74[-((unint64_t)(v23 + 15) & 0xFFFFFFFFFFFFFFF0)], ObjectType);
                          goto LABEL_54;
                        }
                        uint64_t v70 = dispatch thunk of BinaryInteger.bitWidth.getter();
                        v52((uint64_t)&v74[-((unint64_t)(v23 + 15) & 0xFFFFFFFFFFFFFFF0)], ObjectType);
                        if (v70 == 64)
                        {
                          uint64_t v66 = dispatch thunk of static BinaryInteger.isSigned.getter();
                          if ((v66 & 1) == 0)
                          {
LABEL_54:
                            id v88 = (uint64_t (*)(unsigned char *, uint64_t))v52;
                            __chkstk_darwin(v66);
                            ((void (*)(unsigned char *, unsigned char *, uint64_t))v90)(&v74[-((unint64_t)(v23 + 15) & 0xFFFFFFFFFFFFFFF0)], v25, ObjectType);
                            *(void *)&long long v94 = 0x7FFFFFFFFFFFFFFFLL;
                            char v67 = dispatch thunk of static BinaryInteger.isSigned.getter();
                            uint64_t v68 = dispatch thunk of BinaryInteger.bitWidth.getter();
                            if (v67)
                            {
                              if (v68 > 64)
                              {
                                int v90 = v74;
                                __chkstk_darwin(v68);
                                sub_100020748();
                                dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
                                uint64_t v0 = dispatch thunk of static Comparable.< infix(_:_:)();
                                Swift::String v69 = (void (*)(uint64_t, uint64_t))v88;
                                v88(&v74[-((unint64_t)(v23 + 15) & 0xFFFFFFFFFFFFFFF0)], ObjectType);
                                int v52 = v69;
                                v69((uint64_t)&v74[-((unint64_t)(v23 + 15) & 0xFFFFFFFFFFFFFFF0)], ObjectType);
                                uint64_t v1 = (void (*)(uint64_t, uint64_t))v90;
                                if (v0) {
                                  goto LABEL_68;
                                }
                                goto LABEL_64;
                              }
                            }
                            else if (v68 > 63)
                            {
                              id v87 = v74;
                              v93[0] = 0x7FFFFFFFFFFFFFFFLL;
                              __chkstk_darwin(v68);
                              BOOL v71 = &v74[-((unint64_t)(v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
                              int v90 = v74;
                              uint64_t v72 = (*(uint64_t (**)(unsigned char *, unsigned char *, uint64_t))(v89 + 32))(v71, v71, ObjectType);
                              __chkstk_darwin(v72);
                              sub_100020748();
                              dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
                              uint64_t v0 = dispatch thunk of static Comparable.< infix(_:_:)();
                              id v73 = (void (*)(uint64_t, uint64_t))v88;
                              v88(v71, ObjectType);
                              v73((uint64_t)v71, ObjectType);
                              int v52 = v73;
                              uint64_t v1 = (void (*)(uint64_t, uint64_t))v90;
                              if (v0) {
                                goto LABEL_68;
                              }
                              goto LABEL_64;
                            }
                            dispatch thunk of BinaryInteger._lowWord.getter();
                            int v52 = (void (*)(uint64_t, uint64_t))v88;
                            v88(&v74[-((unint64_t)(v23 + 15) & 0xFFFFFFFFFFFFFFF0)], ObjectType);
                          }
                        }
LABEL_64:
                        uint64_t v0 = (uint64_t)v25;
                        uint64_t v9 = dispatch thunk of BinaryInteger._lowWord.getter();
                        v52((uint64_t)v25, ObjectType);

                        sub_10001ABC4((uint64_t)&v97);
                        uint64_t v1 = (void (*)(uint64_t, uint64_t))0xD000000000000022;
                        goto LABEL_4;
                      }
LABEL_44:
                      __chkstk_darwin(v50);
                      sub_100020748();
                      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
                      char v54 = dispatch thunk of static Comparable.< infix(_:_:)();
                      id v55 = (void (*)(uint64_t, uint64_t))v88;
                      v88(&v74[-((unint64_t)(v23 + 15) & 0xFFFFFFFFFFFFFFF0)], ObjectType);
                      v55((uint64_t)v51, ObjectType);
                      int v52 = v55;
                      if (v54) {
                        goto LABEL_49;
                      }
                      goto LABEL_52;
                    }
LABEL_42:
                    char v53 = dispatch thunk of static BinaryInteger.isSigned.getter();
                    uint64_t v50 = dispatch thunk of BinaryInteger.bitWidth.getter();
                    id v51 = v24;
                    if ((v53 & 1) == 0)
                    {
                      if (v50 < 64) {
                        goto LABEL_48;
                      }
                      uint64_t v64 = (void (*)(uint64_t, uint64_t))v88;
                      v88(v24, ObjectType);
                      int v52 = v64;
                      goto LABEL_52;
                    }
                    if (v50 <= 64) {
                      goto LABEL_50;
                    }
                    goto LABEL_44;
                  }
                  int v52 = (void (*)(uint64_t, uint64_t))v88;
                }
                else
                {
                  int v52 = (void (*)(uint64_t, uint64_t))v41[1];
                  v52((uint64_t)v46, ObjectType);
                }
                uint64_t v25 = v47;
                uint64_t v23 = v87;
                goto LABEL_52;
              }
              char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v28) {
                goto LABEL_33;
              }
            }
          }
          else
          {
            sub_10001A918((uint64_t)&v97, &qword_100127CD0);
          }
          v20 += 3;
          long long v18 = v90 - 1;
          uint64_t v19 = (uint64_t)v88;
          if (v90 == (unsigned char *)1)
          {
            swift_bridgeObjectRelease();
            goto LABEL_29;
          }
        }
        __break(1u);
        goto LABEL_42;
      }
    }
LABEL_29:
    sub_10000CD54();
    uint64_t v15 = swift_allocError();
    *(unsigned char *)uint64_t v31 = 12;
    *(void *)(v31 + 8) = 0;
    *(void *)(v31 + 16) = 0xE000000000000000;
    *(void *)(v31 + 24) = 0x72657473756C63;
    *(void *)(v31 + 32) = 0xE700000000000000;
    *(void *)(v31 + 40) = 0xD000000000000022;
    *(void *)(v31 + 48) = 0x80000001000E23F0;
    *(void *)(v31 + 56) = 86;
    swift_willThrow();
    goto LABEL_30;
  }
  uint64_t v82 = *(void *)(v0 + 64);
  uint64_t v83 = v7;
  uint64_t v9 = 1;
LABEL_4:
  uint64_t v10 = swift_getObjectType();
  unint64_t v11 = v9 - 1;
  if (__OFSUB__(v9, 1))
  {
    __break(1u);
    goto LABEL_66;
  }
  if ((v11 & 0x8000000000000000) != 0)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  if (v11 < *(void *)(v82 + 16))
  {
    sub_1000317E8(*(void *)(v82 + 8 * v11 + 32), v10, v83, (uint64_t)&v94);
    if (*((void *)&v95 + 1))
    {
      sub_10000CF6C(&v94, (uint64_t)&v97);
      sub_10001A9B8((uint64_t)&v97, (uint64_t)v93);
      sub_10000AC7C(&qword_100127B28);
      sub_10000AC7C(&qword_100127B30);
      if (swift_dynamicCast())
      {
        sub_10000CF6C(v91, (uint64_t)&v94);
        uint64_t v12 = *((void *)&v95 + 1);
        uint64_t v13 = v96;
        sub_10001A974(&v94, *((uint64_t *)&v95 + 1));
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 32))(v12, v13);
        swift_unknownObjectRelease();
        sub_10001ABC4((uint64_t)&v97);
        sub_10001ABC4((uint64_t)&v94);
        return v14;
      }
      uint64_t v92 = 0;
      memset(v91, 0, sizeof(v91));
      sub_10001A918((uint64_t)v91, &qword_100127B38);
      sub_10000CD54();
      uint64_t v15 = swift_allocError();
      *(unsigned char *)uint64_t v30 = 1;
      *(void *)(v30 + 8) = 0;
      *(void *)(v30 + 16) = 0xE000000000000000;
      *(void *)(v30 + 24) = 0x72657473756C63;
      *(void *)(v30 + 32) = 0xE700000000000000;
      *(void *)(v30 + 40) = 0xD000000000000022;
      *(void *)(v30 + 48) = 0x80000001000E23F0;
      *(void *)(v30 + 56) = 93;
      swift_willThrow();
      swift_unknownObjectRelease();
      sub_10001ABC4((uint64_t)&v97);
LABEL_31:
      *(void *)&long long v97 = 0;
      *((void *)&v97 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(47);
      v32._countAndFlagsBits = 0xD00000000000002DLL;
      v32._object = (void *)0x80000001000E2420;
      String.append(_:)(v32);
      *(void *)&long long v94 = v15;
      sub_10000AC7C(&qword_100127400);
      _print_unlocked<A, B>(_:_:)();
      sub_10002E81C(v97, *((uint64_t *)&v97 + 1), 0x72657473756C63, (void *)0xE700000000000000, 0xD000000000000022, 0x80000001000E23F0, 97);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      return 0;
    }
    sub_10001A918((uint64_t)&v94, &qword_100127E98);
    sub_10000CD54();
    uint64_t v15 = swift_allocError();
    *(unsigned char *)uint64_t v29 = 1;
    *(void *)(v29 + 8) = 0;
    *(void *)(v29 + 16) = 0xE000000000000000;
    *(void *)(v29 + 24) = 0x72657473756C63;
    *(void *)(v29 + 32) = 0xE700000000000000;
    *(void *)(v29 + 40) = 0xD000000000000022;
    *(void *)(v29 + 48) = 0x80000001000E23F0;
    *(void *)(v29 + 56) = 92;
    swift_willThrow();
LABEL_30:
    swift_unknownObjectRelease();
    goto LABEL_31;
  }
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v1)(v0, ObjectType);
  __break(1u);
  return result;
}

unint64_t sub_100020748()
{
  unint64_t result = qword_100127EC8;
  if (!qword_100127EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100127EC8);
  }
  return result;
}

void (**ActiveSelectorUnit.audioControlsAndProperties(scope:for:)(unsigned int a1, void *a2))(char *, uint64_t)
{
  uint64_t v4 = v2;
  uint64_t v93 = type metadata accessor for Mirror();
  uint64_t v7 = *(void (***)(char *, uint64_t))(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v9 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v30 = 1;
    *(void *)(v30 + 8) = 0;
    *(void *)(v30 + 16) = 0xE000000000000000;
    *(void *)(v30 + 24) = 0xD000000000000026;
    *(void *)(v30 + 32) = 0x80000001000E2450;
    *(void *)(v30 + 40) = 0xD000000000000022;
    *(void *)(v30 + 48) = 0x80000001000E23F0;
    *(void *)(v30 + 56) = 117;
    swift_willThrow();
    return v7;
  }
  uint64_t v11 = Strong;
  uint64_t v12 = v4[8];
  if (*(void *)(v12 + 16) < 2uLL || (uint64_t v13 = v4[9]) == 0)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  id v74 = a2;
  unint64_t v85 = v9;
  unint64_t v77 = v3;
  uint64_t v14 = v4[13];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 24);
  swift_bridgeObjectRetain();
  uint64_t v84 = ObjectType;
  uint64_t v17 = v16(ObjectType, v14);
  uint64_t v18 = *(void *)(v13 + 16);
  if (!v18)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v31 = 12;
    *(void *)(v31 + 8) = 0;
    *(void *)(v31 + 16) = 0xE000000000000000;
    *(void *)(v31 + 24) = 0xD000000000000026;
    *(void *)(v31 + 32) = 0x80000001000E2450;
    *(void *)(v31 + 40) = 0xD000000000000022;
    *(void *)(v31 + 48) = 0x80000001000E23F0;
    *(void *)(v31 + 56) = 121;
    swift_willThrow();
    swift_unknownObjectRelease();
LABEL_23:
    swift_release();
    return v7;
  }
  uint64_t v73 = v14;
  uint64_t v71 = v12;
  uint64_t v72 = v4;
  unsigned int v78 = a1;
  uint64_t v75 = v17;
  uint64_t v76 = v11;
  long long v79 = &v91;
  uint64_t v83 = v7 + 1;
  swift_bridgeObjectRetain();
  uint64_t v19 = 32;
  uint64_t v82 = v13;
  while (1)
  {
    *(void *)&long long v86 = v18;
    int v20 = *(unsigned __int8 *)(v13 + v19 + 2);
    int v21 = *(unsigned __int16 *)(v13 + v19);
    *((void *)&v91 + 1) = &type metadata for USBDescriptorControl;
    int v81 = v20;
    BYTE2(v90) = v20;
    int v80 = v21;
    LOWORD(v90) = v21;
    Mirror.init(reflecting:)();
    uint64_t v22 = Mirror.children.getter();
    uint64_t v7 = *(void (***)(char *, uint64_t))(v22 + 16);
    uint64_t v23 = *(void *)(v22 + 32);
    uint64_t v24 = swift_getObjectType();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v25 = dispatch thunk of _AnyIndexBox._typeID.getter();
    swift_getObjectType();
    if (v25 != dispatch thunk of _AnyIndexBox._typeID.getter())
    {
      __break(1u);
      goto LABEL_50;
    }
    char v26 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_unknownObjectRelease();
    if (v26)
    {
      swift_unknownObjectRelease();
      long long v91 = 0u;
      long long v92 = 0u;
      long long v90 = 0u;
    }
    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter();
      long long v90 = v87;
      long long v91 = v88;
      long long v92 = v89;
      swift_unknownObjectRelease();
    }
    uint64_t v27 = v84;
    uint64_t v13 = v82;
    swift_release();
    (*v83)(v85, v93);
    if (*((void *)&v92 + 1)) {
      break;
    }
    sub_10001A918((uint64_t)&v90, &qword_100127CD0);
LABEL_7:
    v19 += 3;
    uint64_t v18 = v86 - 1;
    if ((void)v86 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
  }
  uint64_t v7 = (void (**)(char *, uint64_t))*((void *)&v90 + 1);
  uint64_t v28 = v90;
  sub_10001ABC4((uint64_t)v79);
  if (!v7) {
    goto LABEL_7;
  }
  if (v28 != 0x726F7463656C6573 || v7 != (void (**)(char *, uint64_t))0xE800000000000000)
  {
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v29) {
      goto LABEL_26;
    }
    goto LABEL_7;
  }
  swift_bridgeObjectRelease();
LABEL_26:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v33 = v73;
  uint64_t v34 = v76;
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 16))(v27, v73);
  uint64_t v7 = v77;
  if (!v35)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v39 = 51;
    *(void *)(v39 + 8) = 0;
    *(void *)(v39 + 16) = 0xE000000000000000;
    *(void *)(v39 + 24) = 0xD000000000000026;
    *(void *)(v39 + 32) = 0x80000001000E2450;
    *(void *)(v39 + 40) = 0xD000000000000022;
    *(void *)(v39 + 48) = 0x80000001000E23F0;
    *(void *)(v39 + 56) = 122;
    swift_willThrow();
    swift_unknownObjectRelease();
    goto LABEL_23;
  }
  uint64_t v36 = (void *)v35;
  uint64_t active = type metadata accessor for ActiveSelectorUnit();
  *((void *)&v91 + 1) = active;
  *(void *)&long long v92 = &protocol witness table for ActiveSelectorUnit;
  *(void *)&long long v90 = v72;
  swift_retain();
  uint64_t v93 = (uint64_t)sub_100031940((uint64_t)&v90, v27, v33);
  int v38 = v7;
  if (v7)
  {
    swift_unknownObjectRelease();
    swift_release();

    sub_10001ABC4((uint64_t)&v90);
    return v7;
  }
  unint64_t v85 = (char *)active;
  uint64_t v83 = (void (**)(char *, uint64_t))v36;
  sub_10001ABC4((uint64_t)&v90);
  uint64_t v40 = *(void *)(v93 + 16);
  unint64_t v41 = _swiftEmptyArrayStorage;
  if (v40)
  {
    unint64_t v77 = 0;
    uint64_t v42 = (void *)(swift_bridgeObjectRetain() + 48);
    while (1)
    {
      uint64_t v44 = *v42;
      if (v78 == 1869968496) {
        break;
      }
      if (v78 == 1768845428)
      {
        uint64_t v45 = *(v42 - 2);
        goto LABEL_38;
      }
LABEL_33:
      v42 += 3;
      if (!--v40)
      {
        swift_bridgeObjectRelease();
        int v38 = v77;
        uint64_t v24 = v76;
        goto LABEL_45;
      }
    }
    uint64_t v45 = *(v42 - 1);
LABEL_38:
    if (*(void *)(v45 + 136) == 257)
    {
      long long v86 = *((_OWORD *)v42 - 1);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v41 = sub_100058C2C(0, v41[2] + 1, 1, v41);
      }
      unint64_t v47 = v41[2];
      unint64_t v46 = v41[3];
      long long v48 = v86;
      if (v47 >= v46 >> 1)
      {
        uint64_t v49 = sub_100058C2C((void *)(v46 > 1), v47 + 1, 1, v41);
        long long v48 = v86;
        unint64_t v41 = v49;
      }
      v41[2] = v47 + 1;
      unint64_t v43 = &v41[3 * v47];
      *((_OWORD *)v43 + 2) = v48;
      v43[6] = v44;
    }
    goto LABEL_33;
  }
  uint64_t v24 = v34;
LABEL_45:
  swift_bridgeObjectRelease();
  uint64_t v7 = (void (**)(char *, uint64_t))v41[2];
  swift_bridgeObjectRelease();
  if (!v7)
  {
LABEL_58:
    swift_unknownObjectRelease();
    swift_release();

    return v7;
  }
  *((void *)&v91 + 1) = v85;
  *(void *)&long long v92 = &protocol witness table for ActiveSelectorUnit;
  *(void *)&long long v90 = v72;
  uint64_t v50 = v73;
  id v51 = *(uint64_t (**)(uint64_t, void, void, long long *, uint64_t, uint64_t))(v73 + 144);
  uint64_t v23 = (v80 | (v81 << 16)) & 0xFFFFFF;
  swift_retain();
  __int16 v52 = v51(v23, 0, 0, &v90, v84, v50);
  if (!v38)
  {
    __int16 v54 = v52;
    uint64_t v7 = v53;
    sub_10001ABC4((uint64_t)&v90);
    ADCControlRequestParameterBlock.getCur()(v7, v54 & 0x1FF, (uint64_t)&v90);
LABEL_50:

    sub_10000AC7C(&qword_100127EB8);
    if (swift_dynamicCast()) {
      *((unsigned char *)v72 + 88) = v87;
    }
    char v57 = v23;
    *(void *)&long long v90 = _swiftEmptyArrayStorage;
    uint64_t v58 = v71;
    uint64_t v59 = *(void *)(v71 + 16);
    if (v59)
    {
      swift_bridgeObjectRetain();
      unint64_t v60 = 0;
      uint64_t v61 = (uint64_t)v72;
      uint64_t v62 = v73;
      do
      {
        unint64_t v63 = v60 + 1;
        sub_100021260(v60, *(void *)(v58 + 8 * v60 + 32), v24, v62, &v90, v61);
        unint64_t v60 = v63;
      }
      while (v59 != v63);
      swift_bridgeObjectRelease();
      uint64_t v64 = (void *)v90;
      char v57 = v23;
    }
    else
    {
      uint64_t v64 = _swiftEmptyArrayStorage;
    }
    char v65 = LockDelay.units.getter(v57);
    uint64_t v66 = (uint64_t)v72;
    int v67 = *((unsigned __int8 *)v72 + 88);
    objc_allocWithZone((Class)type metadata accessor for AUAStreamSelectorControl());
    swift_retain();
    swift_bridgeObjectRetain();
    id v68 = v74;
    Swift::String v69 = sub_100021E8C(v65 & 1, v66, v67, (unint64_t)v64, v78, 1685287523, v68);
    sub_10000AC7C(&qword_100127ED0);
    uint64_t v70 = swift_allocObject();
    *(_OWORD *)(v70 + 16) = xmmword_1000EA2E0;
    *(void *)(v70 + 32) = v69;
    *(void *)&long long v87 = v70;
    specialized Array._endMutation()();
    uint64_t v7 = (void (**)(char *, uint64_t))v87;
    swift_bridgeObjectRelease();
    goto LABEL_58;
  }
  sub_10001ABC4((uint64_t)&v90);
  *(void *)&long long v90 = 0;
  *((void *)&v90 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(61);
  v55._countAndFlagsBits = 0x20726F727245;
  v55._object = (void *)0xE600000000000000;
  String.append(_:)(v55);
  *(void *)&long long v87 = v38;
  sub_10000AC7C(&qword_100127400);
  _print_unlocked<A, B>(_:_:)();
  v56._countAndFlagsBits = 0xD000000000000035;
  v56._object = (void *)0x80000001000E2480;
  String.append(_:)(v56);
  sub_10002E81C(v90, *((uint64_t *)&v90 + 1), 0xD000000000000026, (void *)0x80000001000E2450, 0xD000000000000022, 0x80000001000E23F0, 147);
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_unknownObjectRelease();
  swift_release();

  return 0;
}

uint64_t sub_100021260(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t ObjectType = swift_getObjectType();
  sub_1000317E8(a2, ObjectType, a4, (uint64_t)v19);
  if (!v20)
  {
LABEL_7:
    sub_10001A918((uint64_t)v19, &qword_100127E98);
    long long v21 = 0u;
    long long v22 = 0u;
    uint64_t v23 = 0;
    goto LABEL_9;
  }
  sub_10000AC7C(&qword_100127B28);
  sub_10000AC7C(&qword_100127B30);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v23 = 0;
    long long v21 = 0u;
    long long v22 = 0u;
    goto LABEL_9;
  }
  if (*((void *)&v22 + 1))
  {
    sub_10000CF6C(&v21, (uint64_t)v24);
    uint64_t v12 = v25;
    uint64_t v13 = v26;
    sub_10001A974(v24, v25);
    (*(void (**)(uint64_t, uint64_t))(v13 + 56))(v12, v13);
    sub_10001ABC4((uint64_t)v24);
    BOOL v14 = __OFADD__(a1++, 1);
    if (!v14) {
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_7;
  }
LABEL_9:
  sub_10001A918((uint64_t)&v21, &qword_100127B38);
  v24[0] = 0x726F7463656C6553;
  v24[1] = 0xEA00000000002320;
  BOOL v14 = __OFADD__(a1++, 1);
  if (v14)
  {
    __break(1u);
    goto LABEL_18;
  }
  *(void *)&long long v21 = a1;
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
LABEL_11:
  if ((a1 & 0x8000000000000000) != 0 || HIDWORD(a1)) {
    goto LABEL_19;
  }
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v17 = [self withValue:a1 andName:v16 selected:a1 == *(unsigned __int8 *)(a6 + 88)];

  if (!v17)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t type metadata accessor for AUAStreamSelectorControl()
{
  return self;
}

uint64_t sub_100021564()
{
  uint64_t v2 = v1;
  uint64_t v32 = type metadata accessor for Mirror();
  __chkstk_darwin(v32);
  char v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v0 + 72);
  if (!v6 || (uint64_t v7 = *(void *)(v6 + 16)) == 0)
  {
LABEL_17:
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v17 = 12;
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = 0xE000000000000000;
    *(void *)(v17 + 24) = 0x2928727543746567;
    *(void *)(v17 + 32) = 0xE800000000000000;
    *(void *)(v17 + 40) = 0xD000000000000022;
    *(void *)(v17 + 48) = 0x80000001000E23F0;
    uint64_t v18 = 184;
    goto LABEL_18;
  }
  uint64_t v26 = v0;
  uint64_t v25 = v2;
  uint64_t v27 = &v38;
  uint64_t v31 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = 32;
  uint64_t v30 = v8;
  while (1)
  {
    uint64_t v40 = v7;
    uint64_t v33 = v9;
    uint64_t v10 = (unsigned __int16 *)(v8 + v9);
    int v11 = *((unsigned __int8 *)v10 + 2);
    LODWORD(v10) = *v10;
    *((void *)&v38 + 1) = &type metadata for USBDescriptorControl;
    int v28 = (int)v10;
    int v29 = v11;
    BYTE2(v37) = v11;
    LOWORD(v37) = (_WORD)v10;
    Mirror.init(reflecting:)();
    Mirror.children.getter();
    swift_getObjectType();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v12 = dispatch thunk of _AnyIndexBox._typeID.getter();
    swift_getObjectType();
    uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter();
    if (v12 != result)
    {
      __break(1u);
      return result;
    }
    char v14 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_unknownObjectRelease();
    if (v14)
    {
      swift_unknownObjectRelease();
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
    }
    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter();
      long long v37 = v34;
      long long v38 = v35;
      long long v39 = v36;
      swift_unknownObjectRelease();
    }
    swift_release();
    (*v31)(v5, v32);
    if (!*((void *)&v39 + 1))
    {
      sub_10001A918((uint64_t)&v37, &qword_100127CD0);
      goto LABEL_5;
    }
    long long v15 = v37;
    sub_10001ABC4((uint64_t)v27);
    if (!*((void *)&v15 + 1)) {
      goto LABEL_5;
    }
    if (v15 == __PAIR128__(0xE800000000000000, 0x726F7463656C6573)) {
      break;
    }
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_20;
    }
LABEL_5:
    uint64_t v9 = v33 + 3;
    uint64_t v7 = v40 - 1;
    uint64_t v8 = v30;
    if (v40 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
LABEL_20:
  swift_bridgeObjectRelease();
  uint64_t v19 = v26;
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    int v20 = v28 | (v29 << 16);
    uint64_t v21 = *(void *)(v19 + 104);
    uint64_t ObjectType = swift_getObjectType();
    *((void *)&v35 + 1) = type metadata accessor for ActiveSelectorUnit();
    *(void *)&long long v36 = &protocol witness table for ActiveSelectorUnit;
    *(void *)&long long v34 = v19;
    swift_retain();
    uint64_t v23 = v25;
    ActiveFunction.getRawCur(forControl:onEntity:onChannel:)(v20 & 0xFFFFFF, (uint64_t)&v34, 0, ObjectType, v21, (uint64_t)&v37);
    swift_unknownObjectRelease();
    uint64_t result = sub_10001ABC4((uint64_t)&v34);
    if (v23) {
      return result;
    }
    sub_10000AC7C(&qword_100127EB8);
    if (swift_dynamicCast()) {
      return v34;
    }
  }
  else
  {
    *(void *)&long long v39 = 0;
    long long v37 = 0u;
    long long v38 = 0u;
    sub_10001A918((uint64_t)&v37, &qword_100128040);
  }
  sub_10000CD54();
  swift_allocError();
  *(unsigned char *)uint64_t v17 = 1;
  *(void *)(v17 + 8) = 0;
  *(void *)(v17 + 16) = 0xE000000000000000;
  *(void *)(v17 + 24) = 0x2928727543746567;
  *(void *)(v17 + 32) = 0xE800000000000000;
  *(void *)(v17 + 40) = 0xD000000000000022;
  *(void *)(v17 + 48) = 0x80000001000E23F0;
  uint64_t v18 = 191;
LABEL_18:
  *(void *)(v17 + 56) = v18;
  return swift_willThrow();
}

uint64_t ActiveSelectorUnit.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001DEAC(v0 + 96);
  return v0;
}

uint64_t ActiveSelectorUnit.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001DEAC(v0 + 96);

  return swift_deallocClassInstance();
}

uint64_t sub_100021AD8@<X0>(uint64_t *a1@<X8>)
{
  return sub_100021B2C((uint64_t (*)(void))sub_10001ECA0, a1);
}

uint64_t sub_100021AF0()
{
  return ActiveSelectorUnit.cluster.getter();
}

uint64_t sub_100021B14@<X0>(uint64_t *a1@<X8>)
{
  return sub_100021B2C((uint64_t (*)(void))sub_10001EB00, a1);
}

uint64_t sub_100021B2C@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  char v6 = *(unsigned char *)(*v2 + 24);
  uint64_t v7 = *(void *)(*v2 + 32);
  __int16 v16 = *(_WORD *)(*v2 + 40);
  char v8 = *(unsigned char *)(*v2 + 42);
  uint64_t v9 = *(void *)(*v2 + 48);
  __int16 v10 = *(_WORD *)(*v2 + 56);
  uint64_t v11 = *(void *)(*v2 + 64);
  uint64_t v12 = *(void *)(v4 + 72);
  uint64_t v13 = *(void *)(v4 + 80);
  a2[3] = (uint64_t)&type metadata for SelectorUnit;
  a2[4] = a1();
  uint64_t v14 = swift_allocObject();
  *a2 = v14;
  *(void *)(v14 + 16) = v5;
  *(unsigned char *)(v14 + 24) = v6;
  *(void *)(v14 + 32) = v7;
  *(unsigned char *)(v14 + 42) = v8;
  *(_WORD *)(v14 + 40) = v16;
  *(void *)(v14 + 48) = v9;
  *(_WORD *)(v14 + 56) = v10;
  *(void *)(v14 + 64) = v11;
  *(void *)(v14 + 72) = v12;
  *(void *)(v14 + 80) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_100021C1C()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_100021C68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  swift_beginAccess();
  *(void *)(v4 + 104) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*sub_100021CD0(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  v3[5] = *v1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v6 = *(void *)(v4 + 104);
  v3[3] = Strong;
  v3[4] = v6;
  return sub_10001EAE4;
}

void sub_100021D54(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 104) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t sub_100021DD8()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v3 = *(void *)(v1 + 104);
    uint64_t ObjectType = swift_getObjectType();
    LODWORD(v3) = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v3 + 40))(ObjectType, v3) == 32;
    swift_unknownObjectRelease();
    return (2 * v3);
  }
  return result;
}

void (**sub_100021E68(unsigned int a1, void *a2))(char *, uint64_t)
{
  return ActiveSelectorUnit.audioControlsAndProperties(scope:for:)(a1, a2);
}

char *sub_100021E8C(char a1, uint64_t a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  *(void *)&v7[OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_selectorUnit] = a2;
  *(_DWORD *)&v7[OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_curSelection] = a3;
  v23.receiver = v7;
  v23.super_class = (Class)type metadata accessor for AUAStreamSelectorControl();
  swift_retain();
  uint64_t result = (char *)objc_msgSendSuper2(&v23, "initWithIsSettable:forElement:inScope:withPlugin:andObjectClassID:", a1 & 1, 0, a5, a7, a6);
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v14 = result;
  if (a4 >> 62)
  {
    int v20 = result;
    swift_bridgeObjectRetain();
    uint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v15 = (uint64_t)result;
    if (result) {
      goto LABEL_4;
    }
LABEL_11:
    swift_bridgeObjectRelease_n();
    uint64_t v21 = &v14[OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_curSelection];
    swift_beginAccess();
    long long v22 = v14;
    [v22 setSelectedValues:v21 withCount:1];
    swift_endAccess();

    swift_release();
    return v22;
  }
  uint64_t v15 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  __int16 v16 = result;
  uint64_t result = (char *)swift_bridgeObjectRetain();
  if (!v15) {
    goto LABEL_11;
  }
LABEL_4:
  if (v15 >= 1)
  {
    for (uint64_t i = 0; i != v15; ++i)
    {
      if ((a4 & 0xC000000000000001) != 0) {
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v18 = *(id *)(a4 + 8 * i + 32);
      }
      uint64_t v19 = v18;
      [v14 addValue:v18];
    }
    goto LABEL_11;
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

void sub_100022050(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = *(void *)(a4 + OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_selectorUnit);
  v13[3] = type metadata accessor for ActiveSelectorUnit();
  v13[4] = &protocol witness table for ActiveSelectorUnit;
  v13[0] = v10;
  swift_retain();
  sub_100031A50(a3 & 0xFFFFFF, 0, 0, v13, a5, ObjectType, a2);
  sub_10001ABC4((uint64_t)v13);
  uint64_t v11 = (unsigned int *)(a4 + OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_curSelection);
  swift_beginAccess();
  *uint64_t v11 = a5;
  AUAAudioDevice.publishStreamFormats()();
  if (v12)
  {
    sub_10002E81C(0xD00000000000001ALL, 0x80000001000E2650, 0xD00000000000001ALL, (void *)0x80000001000E2610, 0xD000000000000022, 0x80000001000E23F0, 254);
    swift_errorRelease();
  }
}

uint64_t sub_1000221E0()
{
  uint64_t v2 = v1;
  uint64_t v27 = type metadata accessor for Mirror();
  __chkstk_darwin(v27);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(*(void *)(v0 + OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_selectorUnit) + 72);
  if (!v6 || (uint64_t v7 = *(void *)(v6 + 16)) == 0)
  {
LABEL_17:
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v17 = 12;
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = 0xE000000000000000;
    *(void *)(v17 + 24) = 0xD000000000000015;
    *(void *)(v17 + 32) = 0x80000001000E2580;
    *(void *)(v17 + 40) = 0xD000000000000022;
    *(void *)(v17 + 48) = 0x80000001000E23F0;
    *(void *)(v17 + 56) = 268;
    return swift_willThrow();
  }
  v21[1] = *(void *)(v0 + OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_selectorUnit);
  uint64_t v22 = v2;
  v21[0] = v0;
  objc_super v23 = &v32;
  uint64_t v25 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = 32;
  uint64_t v24 = v8;
  uint64_t v26 = v5;
  while (1)
  {
    uint64_t v34 = v7;
    __int16 v10 = *(_WORD *)(v8 + v9);
    char v11 = *(unsigned char *)(v8 + v9 + 2);
    *((void *)&v32 + 1) = &type metadata for USBDescriptorControl;
    BYTE2(v31) = v11;
    LOWORD(v31) = v10;
    Mirror.init(reflecting:)();
    Mirror.children.getter();
    swift_getObjectType();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v12 = dispatch thunk of _AnyIndexBox._typeID.getter();
    swift_getObjectType();
    uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter();
    if (v12 != result)
    {
      __break(1u);
      return result;
    }
    char v14 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_unknownObjectRelease();
    if (v14)
    {
      swift_unknownObjectRelease();
      long long v32 = 0u;
      long long v33 = 0u;
      long long v31 = 0u;
    }
    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter();
      long long v31 = v28;
      long long v32 = v29;
      long long v33 = v30;
      swift_unknownObjectRelease();
    }
    swift_release();
    (*v25)(v26, v27);
    if (!*((void *)&v33 + 1))
    {
      sub_10001A918((uint64_t)&v31, &qword_100127CD0);
      goto LABEL_5;
    }
    long long v15 = v31;
    sub_10001ABC4((uint64_t)v23);
    if (!*((void *)&v15 + 1)) {
      goto LABEL_5;
    }
    if (v15 == __PAIR128__(0xE800000000000000, 0x726F7463656C6573)) {
      break;
    }
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_19;
    }
LABEL_5:
    v9 += 3;
    uint64_t v7 = v34 - 1;
    uint64_t v8 = v24;
    if (v34 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
LABEL_19:
  swift_bridgeObjectRelease();
  uint64_t v18 = v22;
  uint64_t result = sub_100021564();
  if (!v18)
  {
    int v19 = result;
    int v20 = (_DWORD *)(v21[0] + OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_curSelection);
    uint64_t result = swift_beginAccess();
    *int v20 = v19;
  }
  return result;
}

id sub_1000225AC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AUAStreamSelectorControl();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000225F0()
{
  return *(void *)(*(void *)(*v0 + OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_selectorUnit) + 32);
}

uint64_t sub_100022608()
{
  return sub_1000221E0();
}

void *sub_10002262C(unint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v4 = 0;
    unint64_t v5 = v2 & 0xC000000000000001;
    unint64_t v21 = v2;
    uint64_t v22 = OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_selectorUnit;
    unint64_t v18 = v2 + 32;
    unint64_t v19 = v2 & 0xC000000000000001;
    uint64_t v20 = v3;
    while (1)
    {
      id v6 = v5 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v18 + 8 * v4);
      uint64_t v7 = v6;
      if (__OFADD__(v4++, 1)) {
        break;
      }
      type metadata accessor for AUAStream(0);
      uint64_t v9 = swift_dynamicCastClass();
      if (v9 && (uint64_t v10 = *(void *)(v9 + OBJC_IVAR___AUAStream_path + 16), (v11 = *(void *)(v10 + 16)) != 0))
      {
        uint64_t v12 = (void *)(v10 + 32);
        uint64_t v13 = *(void *)(*(void *)(a2 + v22) + 32);
        id v14 = v7;
        swift_bridgeObjectRetain();
        while (1)
        {
          uint64_t v16 = v12[3];
          uint64_t v15 = v12[4];
          sub_10001A974(v12, v16);
          if ((*(uint64_t (**)(uint64_t))(*(void *)(v15 + 8) + 48))(v16) == v13) {
            break;
          }
          v12 += 5;
          if (!--v11)
          {

            swift_bridgeObjectRelease();
            uint64_t v3 = v20;
            unint64_t v2 = v21;
            goto LABEL_18;
          }
        }

        swift_bridgeObjectRelease();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v3 = v20;
        unint64_t v2 = v21;
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
LABEL_18:
        unint64_t v5 = v19;
        if (v4 == v3) {
          goto LABEL_22;
        }
      }
      else
      {

        if (v4 == v3) {
          goto LABEL_22;
        }
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
  }
LABEL_22:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

char *sub_100022874(unsigned int *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Mirror();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [v2 owner];
  if (!v8) {
    return 0;
  }
  id v9 = v8;
  type metadata accessor for AUAAudioDevice(0);
  uint64_t result = (char *)swift_dynamicCastClass();
  if (!result)
  {
LABEL_28:

    return 0;
  }
  if (!a1)
  {
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  unint64_t v11 = *a1;
  uint64_t v12 = *(void *)&v2[OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_selectorUnit];
  if (*(void *)(*(void *)(v12 + 64) + 16) < v11)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v13 = 63;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0xE000000000000000;
    *(void *)(v13 + 24) = 0xD00000000000001ALL;
    *(void *)(v13 + 32) = 0x80000001000E2610;
    *(void *)(v13 + 40) = 0xD000000000000022;
    *(void *)(v13 + 48) = 0x80000001000E23F0;
    uint64_t v14 = 230;
LABEL_24:
    *(void *)(v13 + 56) = v14;
    swift_willThrow();
LABEL_27:
    sub_10002E81C(0xD00000000000001CLL, 0x80000001000E2630, 0xD00000000000001ALL, (void *)0x80000001000E2610, 0xD000000000000022, 0x80000001000E23F0, 259);
    swift_errorRelease();
    goto LABEL_28;
  }
  uint64_t v15 = *(char **)&result[OBJC_IVAR___AUAAudioDevice_function];
  if (!v15)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v13 = 61;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0xE000000000000000;
    *(void *)(v13 + 24) = 0xD00000000000001ALL;
    *(void *)(v13 + 32) = 0x80000001000E2610;
    *(void *)(v13 + 40) = 0xD000000000000022;
    *(void *)(v13 + 48) = 0x80000001000E23F0;
    uint64_t v14 = 231;
    goto LABEL_24;
  }
  uint64_t v16 = *(void *)(v12 + 72);
  if (!v16 || (uint64_t v17 = *(void *)(v16 + 16)) == 0)
  {
    swift_unknownObjectRetain();
LABEL_26:
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v30 = 12;
    *(void *)(v30 + 8) = 0;
    *(void *)(v30 + 16) = 0xE000000000000000;
    *(void *)(v30 + 24) = 0xD00000000000001ALL;
    *(void *)(v30 + 32) = 0x80000001000E2610;
    *(void *)(v30 + 40) = 0xD000000000000022;
    *(void *)(v30 + 48) = 0x80000001000E23F0;
    *(void *)(v30 + 56) = 232;
    swift_willThrow();
    swift_unknownObjectRelease();
    goto LABEL_27;
  }
  id v47 = v2;
  unint64_t v46 = v11;
  id v48 = result;
  id v49 = v9;
  uint64_t v45 = *(void *)&result[OBJC_IVAR___AUAAudioDevice_function + 8];
  uint64_t v50 = v15;
  id v51 = &v62;
  __int16 v54 = (void (**)(char *, uint64_t))(v5 + 8);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v18 = 32;
  uint64_t v55 = v16;
  uint64_t v56 = v4;
  while (1)
  {
    uint64_t v57 = v17;
    int v20 = *(unsigned __int8 *)(v16 + v18 + 2);
    int v21 = *(unsigned __int16 *)(v16 + v18);
    *((void *)&v62 + 1) = &type metadata for USBDescriptorControl;
    int v52 = v21;
    int v53 = v20;
    BYTE2(v61) = v20;
    LOWORD(v61) = v21;
    Mirror.init(reflecting:)();
    uint64_t v22 = v7;
    unint64_t v23 = *(void *)(Mirror.children.getter() + 32);
    swift_getObjectType();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v24 = dispatch thunk of _AnyIndexBox._typeID.getter();
    swift_getObjectType();
    uint64_t v25 = (char *)v23;
    if (v24 != dispatch thunk of _AnyIndexBox._typeID.getter())
    {
      __break(1u);
      goto LABEL_40;
    }
    char v26 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_unknownObjectRelease();
    if (v26)
    {
      swift_unknownObjectRelease();
      long long v62 = 0u;
      long long v63 = 0u;
      long long v61 = 0u;
    }
    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter();
      long long v61 = v58;
      long long v62 = v59;
      long long v63 = v60;
      swift_unknownObjectRelease();
    }
    uint64_t v27 = v56;
    swift_release();
    (*v54)(v7, v27);
    if (!*((void *)&v63 + 1))
    {
      sub_10001A918((uint64_t)&v61, &qword_100127CD0);
      uint64_t v16 = v55;
      uint64_t v19 = v57;
      goto LABEL_11;
    }
    long long v28 = v61;
    sub_10001ABC4((uint64_t)v51);
    uint64_t v16 = v55;
    uint64_t v19 = v57;
    if (!*((void *)&v28 + 1)) {
      goto LABEL_11;
    }
    if (v28 == __PAIR128__(0xE800000000000000, 0x726F7463656C6573)) {
      break;
    }
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v29) {
      goto LABEL_30;
    }
LABEL_11:
    v18 += 3;
    uint64_t v17 = v19 - 1;
    if (!v17)
    {
      swift_bridgeObjectRelease();
      id v9 = v49;
      goto LABEL_26;
    }
  }
  swift_bridgeObjectRelease();
LABEL_30:
  swift_bridgeObjectRelease();
  uint64_t v18 = (uint64_t)v48;
  uint64_t result = (char *)[v48 inputStreams];
  unint64_t v23 = 0xD00000000000001ALL;
  uint64_t v22 = v50;
  if (!result) {
    goto LABEL_42;
  }
  long long v31 = result;
  sub_100022FEC();
  uint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t result = (char *)[(id)v18 outputStreams];
  if (result)
  {
    long long v33 = result;
    unint64_t v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)&long long v61 = v32;
    sub_1000A1900(v34);
    unint64_t v35 = v61;
    uint64_t v25 = (char *)v47;
    unint64_t v36 = (unint64_t)sub_10002262C(v35, (uint64_t)v25);
    swift_bridgeObjectRelease();

    if (!(v36 >> 62))
    {
      uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_34;
    }
LABEL_40:
    swift_bridgeObjectRetain();
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_34:
    swift_bridgeObjectRelease();
    if (v37 < 1
      || (long long v38 = &v25[OBJC_IVAR____TtC9AUASDCore24AUAStreamSelectorControl_curSelection],
          swift_beginAccess(),
          *(_DWORD *)v38 == v46))
    {
    }
    else
    {
      int v39 = v52 | (v53 << 16);
      int v40 = v46;
      uint64_t v41 = swift_allocObject();
      uint64_t v42 = v45;
      *(void *)(v41 + 16) = v22;
      *(void *)(v41 + 24) = v42;
      *(unsigned char *)(v41 + 34) = BYTE2(v39);
      *(_WORD *)(v41 + 32) = v39;
      *(void *)(v41 + 40) = v25;
      *(_DWORD *)(v41 + 48) = v40;
      *(void *)(v41 + 56) = v18;
      swift_unknownObjectRetain();
      unint64_t v43 = v25;
      id v44 = v49;
      AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)(0xD00000000000001ALL, 0x80000001000E2610, v23 + 8, 0x80000001000E23F0, 245, (uint64_t)sub_100023074, v41);
      swift_release();
    }
    swift_unknownObjectRelease();
    return 0;
  }
LABEL_43:
  __break(1u);
  return result;
}

unint64_t sub_100022FEC()
{
  unint64_t result = qword_100127B00;
  if (!qword_100127B00)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100127B00);
  }
  return result;
}

uint64_t sub_10002302C()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_100023074()
{
  sub_100022050(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int16 *)(v0 + 32) | (*(unsigned __int8 *)(v0 + 34) << 16), *(void *)(v0 + 40), *(_DWORD *)(v0 + 48));
}

uint64_t sub_100023094()
{
  uint64_t v0 = type metadata accessor for OSSignposter();
  sub_10001AC94(v0, qword_10012B1E0);
  sub_10000AD60(v0, (uint64_t)qword_10012B1E0);
  return OSSignposter.init(subsystem:category:)();
}

Swift::Int32 *pipeStall.unsafeMutableAddressor()
{
  return &pipeStall;
}

BOOL static LockDelay.LockDelayUnits.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void LockDelay.LockDelayUnits.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int LockDelay.LockDelayUnits.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_1000231A4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_1000231BC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100023204()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100023230()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t ActiveClockSource.rateRanges.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ActiveClockSource.rateRanges.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ActiveClockSource.rateRanges.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t ActiveClockSource.isSettable.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 25);
}

uint64_t ActiveClockSource.isSettable.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 25) = a1;
  return result;
}

uint64_t (*ActiveClockSource.isSettable.modify())()
{
  return j__swift_endAccess;
}

uint64_t ActiveClockSource.staticClockSource.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10002341C(v1 + 32, a1);
}

uint64_t sub_10002341C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ActiveClockSource.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ActiveClockSource.controls.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ActiveClockSource.isValid.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 120);
}

uint64_t ActiveClockSource.isValid.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 120) = a1;
  return result;
}

uint64_t (*ActiveClockSource.isValid.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t ActiveClockSource.function.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t ActiveClockSource.function.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 136) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*ActiveClockSource.function.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v5 = *(void *)(v1 + 136);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_1000236A4;
}

uint64_t ActiveClockSource.staticClockEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_10002376C((uint64_t (*)(void))sub_1000236C0, a1);
}

unint64_t sub_1000236C0()
{
  unint64_t result = qword_100128050;
  if (!qword_100128050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128050);
  }
  return result;
}

uint64_t sub_100023714()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t ActiveClockSource.staticEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_10002376C((uint64_t (*)(void))sub_100023848, a1);
}

uint64_t sub_10002376C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  __int16 v15 = *(_WORD *)(v2 + 32);
  char v4 = *(unsigned char *)(v2 + 34);
  uint64_t v5 = *(void *)(v2 + 40);
  uint64_t v6 = *(void *)(v2 + 48);
  __int16 v7 = *(_WORD *)(v2 + 56);
  uint64_t v8 = *(void *)(v2 + 64);
  uint64_t v9 = *(void *)(v2 + 72);
  char v10 = *(unsigned char *)(v2 + 80);
  char v11 = *(unsigned char *)(v2 + 81);
  uint64_t v12 = *(void *)(v2 + 88);
  a2[3] = (uint64_t)&type metadata for ClockSource;
  a2[4] = a1();
  uint64_t v13 = swift_allocObject();
  *a2 = v13;
  *(unsigned char *)(v13 + 18) = v4;
  *(_WORD *)(v13 + 16) = v15;
  *(void *)(v13 + 24) = v5;
  *(void *)(v13 + 32) = v6;
  *(_WORD *)(v13 + 40) = v7;
  *(void *)(v13 + 48) = v8;
  *(void *)(v13 + 56) = v9;
  *(unsigned char *)(v13 + 64) = v10;
  *(unsigned char *)(v13 + 65) = v11;
  *(void *)(v13 + 72) = v12;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

unint64_t sub_100023848()
{
  unint64_t result = qword_100128058;
  if (!qword_100128058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128058);
  }
  return result;
}

uint64_t ActiveStreamingAltInterface.subFrameSize.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t ActiveClockSource.isInternal.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t ActiveClockSource.isSynchronizedToSOF.getter()
{
  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t ActiveOutputTerminal.terminalID.getter()
{
  return *(void *)(v0 + 88);
}

uint64_t sub_1000238BC(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  uint64_t v39 = a3;
  uint64_t v37 = a2;
  uint64_t v45 = type metadata accessor for Mirror();
  char v10 = *(void **)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t ObjectType = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v4 + 16) = 0;
  *(unsigned char *)(v4 + 24) = 0;
  *(unsigned char *)(v4 + 120) = 0;
  *(void *)(v4 + 136) = 0;
  uint64_t v38 = v4 + 128;
  swift_unknownObjectWeakInit();
  uint64_t v13 = v4 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_signpostID;
  if (qword_1001268E8 != -1) {
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v14 = type metadata accessor for OSSignposter();
    sub_10000AD60(v14, (uint64_t)qword_10012B1E0);
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:)();
    *(void *)(v7 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_lastSamplingRateChangedTimestamp) = 0;
    uint64_t v15 = v7 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate;
    *(void *)uint64_t v15 = 0;
    *(unsigned char *)(v15 + 8) = 1;
    uint64_t v16 = *(void *)(a4 + 16);
    if (!v16) {
      break;
    }
    unint64_t v35 = a1;
    uint64_t v34 = v13;
    v33[1] = v6;
    uint64_t v36 = v7;
    int v40 = &v51;
    unint64_t v43 = (void (**)(_OWORD *, uint64_t))(v10 + 1);
    swift_bridgeObjectRetain();
    uint64_t v17 = 32;
    uint64_t v44 = a4;
    while (1)
    {
      uint64_t v53 = v16;
      uint64_t v46 = v17;
      uint64_t v18 = (unsigned __int16 *)(a4 + v17);
      int v19 = *((unsigned __int8 *)v18 + 2);
      int v20 = *v18;
      *((void *)&v51 + 1) = &type metadata for USBDescriptorControl;
      int v41 = v20;
      int v42 = v19;
      BYTE2(v50) = v19;
      LOWORD(v50) = v20;
      Mirror.init(reflecting:)();
      a1 = ObjectType;
      char v10 = (void *)Mirror.children.getter();
      uint64_t v6 = v10[2];
      a4 = v10[3];
      uint64_t v7 = v10[4];
      uint64_t v13 = v10[5];
      uint64_t ObjectType = (char *)swift_getObjectType();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v21 = dispatch thunk of _AnyIndexBox._typeID.getter();
      swift_getObjectType();
      if (v21 != dispatch thunk of _AnyIndexBox._typeID.getter()) {
        break;
      }
      char v22 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
      swift_unknownObjectRelease();
      if (v22)
      {
        swift_unknownObjectRelease();
        long long v51 = 0u;
        long long v52 = 0u;
        long long v50 = 0u;
      }
      else
      {
        dispatch thunk of _AnyCollectionBox.subscript.getter();
        long long v50 = v47;
        long long v51 = v48;
        long long v52 = v49;
        swift_unknownObjectRelease();
      }
      a4 = v44;
      uint64_t ObjectType = (char *)a1;
      swift_release();
      (*v43)(a1, v45);
      if (*((void *)&v52 + 1))
      {
        long long v23 = v50;
        sub_10001ABC4((uint64_t)v40);
        if (*((void *)&v23 + 1))
        {
          if (v23 == __PAIR128__(0xE900000000000079, 0x636E657571657266))
          {
            swift_bridgeObjectRelease();
LABEL_19:
            char v27 = v41;
            swift_bridgeObjectRelease();
            char v28 = LockDelay.units.getter(v27);
            uint64_t v7 = v36;
            *(unsigned char *)(v36 + 25) = v28 & 1;
            char v29 = v35;
            long long v30 = v35[1];
            *(_OWORD *)(v7 + 32) = *v35;
            *(_OWORD *)(v7 + 48) = v30;
            long long v31 = v29[3];
            *(_OWORD *)(v7 + 64) = v29[2];
            *(_OWORD *)(v7 + 80) = v31;
            *(void *)(v7 + 96) = v37;
            *(void *)(v7 + 104) = v39;
            *(void *)(v7 + 112) = a4;
            return v7;
          }
          char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v24) {
            goto LABEL_19;
          }
        }
      }
      else
      {
        sub_10001A918((uint64_t)&v50, &qword_100127CD0);
      }
      uint64_t v17 = v46 + 3;
      uint64_t v16 = v53 - 1;
      if (v53 == 1)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        sub_10002D99C((uint64_t)v35);
        uint64_t v7 = v36;
        uint64_t v13 = v34;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_22:
    swift_once();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002D99C((uint64_t)a1);
LABEL_18:
  sub_10000CD54();
  swift_allocError();
  *(unsigned char *)uint64_t v25 = 13;
  *(void *)(v25 + 8) = 0;
  *(void *)(v25 + 16) = 0xE000000000000000;
  *(void *)(v25 + 24) = 0xD000000000000026;
  *(void *)(v25 + 32) = 0x80000001000E2BD0;
  *(void *)(v25 + 40) = 0xD00000000000001BLL;
  *(void *)(v25 + 48) = 0x80000001000E26F0;
  *(void *)(v25 + 56) = 55;
  swift_willThrow();
  swift_bridgeObjectRelease();
  sub_10001DEAC(v38);
  uint64_t v26 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v13, v26);
  type metadata accessor for ActiveClockSource();
  swift_deallocPartialClassInstance();
  return v7;
}

void *sub_100023E1C()
{
  uint64_t v2 = v1;
  uint64_t v41 = type metadata accessor for Mirror();
  __chkstk_darwin(v41);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(*(void *)(v0 + 112) + 16);
  if (v6)
  {
    uint64_t v35 = v0;
    uint64_t v34 = v2;
    uint64_t v36 = &v50;
    uint64_t v39 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v7 = swift_bridgeObjectRetain();
    uint64_t v8 = 32;
    uint64_t v40 = v7;
    while (1)
    {
      uint64_t v42 = v8;
      *(void *)&long long v43 = v6;
      uint64_t v9 = (unsigned __int16 *)(v7 + v8);
      int v10 = *((unsigned __int8 *)v9 + 2);
      LODWORD(v9) = *v9;
      *((void *)&v50 + 1) = &type metadata for USBDescriptorControl;
      int v38 = v10;
      BYTE2(v49) = v10;
      int v37 = (int)v9;
      LOWORD(v49) = (_WORD)v9;
      Mirror.init(reflecting:)();
      uint64_t v11 = Mirror.children.getter();
      swift_getObjectType();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of _AnyIndexBox._typeID.getter();
      swift_getObjectType();
      if (v12 != dispatch thunk of _AnyIndexBox._typeID.getter()) {
        break;
      }
      uint64_t v0 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
      swift_unknownObjectRelease();
      if (v0)
      {
        swift_unknownObjectRelease();
        long long v50 = 0u;
        long long v51 = 0u;
        long long v49 = 0u;
      }
      else
      {
        uint64_t v0 = v11;
        dispatch thunk of _AnyCollectionBox.subscript.getter();
        long long v49 = v46;
        long long v50 = v47;
        long long v51 = v48;
        swift_unknownObjectRelease();
      }
      swift_release();
      (*v39)(v5, v41);
      if (*((void *)&v51 + 1))
      {
        uint64_t v13 = *((void *)&v49 + 1);
        uint64_t v0 = v49;
        sub_10001ABC4((uint64_t)v36);
        if (v13)
        {
          if (v0 == 0x636E657571657266 && v13 == 0xE900000000000079)
          {
            swift_bridgeObjectRelease();
LABEL_19:
            swift_bridgeObjectRelease();
            uint64_t v16 = v35;
            swift_beginAccess();
            uint64_t Strong = swift_unknownObjectWeakLoadStrong();
            if (Strong)
            {
              uint64_t v0 = Strong;
              int v18 = v37 | (v38 << 16);
              uint64_t v19 = *(void *)(v16 + 136);
              uint64_t ObjectType = swift_getObjectType();
              *((void *)&v50 + 1) = type metadata accessor for ActiveClockSource();
              *(void *)&long long v51 = &protocol witness table for ActiveClockSource;
              *(void *)&long long v49 = v16;
              uint64_t v21 = *(uint64_t (**)(void, void, void, long long *, uint64_t, uint64_t))(v19 + 160);
              swift_retain();
              uint64_t v22 = v34;
              __int16 v23 = v21(v18 & 0xFFFFFF, 0, 0, &v49, ObjectType, v19);
              uint64_t v25 = v24;
              swift_unknownObjectRelease();
              sub_10001ABC4((uint64_t)&v49);
              if (!v22)
              {
                if (USBDescriptorControl.pbLayout()() == AUASDCore_tADCControlRequestParameterBlockLayout_Layout3PB)
                {
                  uint64_t v26 = sub_100073364(v23 & 0x1FF, v25);
                  int64_t v27 = *(void *)(v26 + 16);
                  if (v27)
                  {
                    long long v52 = _swiftEmptyArrayStorage;
                    sub_10007C35C(0, v27, 0);
                    uint64_t v42 = v26;
                    uint64_t v28 = v26 + 32;
                    do
                    {
                      sub_10001A9B8(v28, (uint64_t)&v49);
                      sub_100024454(&v49, &v44);
                      sub_10001ABC4((uint64_t)&v49);
                      long long v43 = v44;
                      uint64_t v29 = v45;
                      uint64_t v0 = (uint64_t)v52;
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                      {
                        sub_10007C35C(0, *(void *)(v0 + 16) + 1, 1);
                        uint64_t v0 = (uint64_t)v52;
                      }
                      unint64_t v31 = *(void *)(v0 + 16);
                      unint64_t v30 = *(void *)(v0 + 24);
                      if (v31 >= v30 >> 1)
                      {
                        sub_10007C35C(v30 > 1, v31 + 1, 1);
                        uint64_t v0 = (uint64_t)v52;
                      }
                      *(void *)(v0 + 16) = v31 + 1;
                      uint64_t v32 = v0 + 24 * v31;
                      *(_OWORD *)(v32 + 32) = v43;
                      *(void *)(v32 + 48) = v29;
                      v28 += 40;
                      --v27;
                    }
                    while (v27);
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    swift_bridgeObjectRelease();

                    return _swiftEmptyArrayStorage;
                  }
                }
                else
                {
                  sub_10000CD54();
                  swift_allocError();
                  *(unsigned char *)uint64_t v33 = 30;
                  *(void *)(v33 + 8) = 0;
                  *(void *)(v33 + 16) = 0xE000000000000000;
                  *(void *)(v33 + 24) = 0xD00000000000001ELL;
                  *(void *)(v33 + 32) = 0x80000001000E2DD0;
                  *(void *)(v33 + 40) = 0xD00000000000001BLL;
                  *(void *)(v33 + 48) = 0x80000001000E26F0;
                  *(void *)(v33 + 56) = 71;
                  swift_willThrow();
                }
              }
              return (void *)v0;
            }
LABEL_33:
            __break(1u);
            sub_10001ABC4((uint64_t)&v49);
            unint64_t result = (void *)swift_release();
            __break(1u);
            return result;
          }
          uint64_t v0 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v0) {
            goto LABEL_19;
          }
        }
      }
      else
      {
        sub_10001A918((uint64_t)&v49, &qword_100127CD0);
      }
      uint64_t v8 = v42 + 3;
      uint64_t v6 = v43 - 1;
      uint64_t v7 = v40;
      if ((void)v43 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
    }
    __break(1u);
    goto LABEL_33;
  }
LABEL_16:
  sub_10000CD54();
  swift_allocError();
  *(unsigned char *)uint64_t v14 = 13;
  *(void *)(v14 + 8) = 0;
  *(void *)(v14 + 16) = 0xE000000000000000;
  *(void *)(v14 + 24) = 0xD00000000000001ELL;
  *(void *)(v14 + 32) = 0x80000001000E2DD0;
  *(void *)(v14 + 40) = 0xD00000000000001BLL;
  *(void *)(v14 + 48) = 0x80000001000E26F0;
  *(void *)(v14 + 56) = 67;
  swift_willThrow();
  return (void *)v0;
}

uint64_t sub_100024454@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id v102 = a2;
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  objc_super v103 = a1;
  sub_10001A974(a1, v2);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 8))(v110, v2, v3);
  uint64_t v5 = v111;
  uint64_t v4 = v112;
  uint64_t v6 = sub_10001A974(v110, v111);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  int v10 = &v89[-v9];
  uint64_t v11 = (unsigned char *)(v7 + 16);
  uint64_t v101 = *(void (**)(unsigned char *))(v7 + 16);
  v101(&v89[-v9]);
  uint64_t v12 = *(unsigned char **)(v4 + 8);
  char v13 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v100 = v7;
  if (v13)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    long long v99 = (unsigned char *)(v7 + 16);
    long long v97 = v89;
    __chkstk_darwin(AssociatedTypeWitness);
    long long v98 = v12;
    swift_getAssociatedConformanceWitness();
    uint64_t v15 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    __chkstk_darwin(v15);
    int v10 = &v89[-v9];
    uint64_t v7 = v100;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    char v16 = dispatch thunk of static Comparable.>= infix(_:_:)();
    uint64_t v11 = v99;
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(&v89[-v9], v5);
    if ((v16 & 1) == 0) {
      goto LABEL_47;
    }
  }
  uint64_t v17 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v17 < 64)
  {
LABEL_16:
    uint64_t v101 = (void (*)(unsigned char *))dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v5);
    uint64_t v28 = v103[3];
    uint64_t v29 = v103[4];
    sub_10001A974(v103, v28);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v29 + 24))(v107, v28, v29);
    uint64_t v31 = v108;
    uint64_t v30 = v109;
    uint64_t v32 = sub_10001A974(v107, v108);
    long long v99 = v89;
    uint64_t v33 = *(unsigned char **)(v31 - 8);
    uint64_t v34 = *((void *)v33 + 8);
    __chkstk_darwin(v32);
    unint64_t v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v36 = &v89[-v35];
    int v37 = (void (*)(void))*((void *)v33 + 2);
    uint64_t v100 = (uint64_t)(v33 + 16);
    long long v97 = v37;
    v37(&v89[-v35]);
    uint64_t v38 = *(void *)(v30 + 8);
    char v39 = dispatch thunk of static BinaryInteger.isSigned.getter();
    long long v98 = &v89[-v35];
    if (v39)
    {
      uint64_t v40 = swift_getAssociatedTypeWitness();
      long long v95 = v89;
      __chkstk_darwin(v40);
      long long v96 = v33;
      swift_getAssociatedConformanceWitness();
      uint64_t v41 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      __chkstk_darwin(v41);
      uint64_t v33 = v96;
      uint64_t v36 = v98;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      char v42 = dispatch thunk of static Comparable.>= infix(_:_:)();
      (*((void (**)(unsigned char *, uint64_t))v33 + 1))(&v89[-v35], v31);
      if ((v42 & 1) == 0) {
        goto LABEL_47;
      }
    }
    uint64_t v43 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v43 < 64)
    {
LABEL_30:
      uint64_t v100 = dispatch thunk of BinaryInteger._lowWord.getter();
      (*((void (**)(unsigned char *, uint64_t))v33 + 1))(v36, v31);
      uint64_t v57 = v103[3];
      uint64_t v58 = v103[4];
      sub_10001A974(v103, v57);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v58 + 40))(v104, v57, v58);
      uint64_t v60 = v105;
      uint64_t v59 = v106;
      long long v61 = sub_10001A974(v104, v105);
      objc_super v103 = v89;
      long long v62 = *(unsigned char **)(v60 - 8);
      uint64_t v63 = *((void *)v62 + 8);
      __chkstk_darwin(v61);
      unint64_t v64 = (v63 + 15) & 0xFFFFFFFFFFFFFFF0;
      char v65 = &v89[-v64];
      long long v97 = (unsigned char *)*((void *)v62 + 2);
      ((void (*)(unsigned char *))v97)(&v89[-v64]);
      uint64_t v66 = *(void *)(v59 + 8);
      char v67 = dispatch thunk of static BinaryInteger.isSigned.getter();
      long long v99 = &v89[-v64];
      long long v98 = v62 + 16;
      if (v67)
      {
        uint64_t v68 = swift_getAssociatedTypeWitness();
        long long v95 = v89;
        __chkstk_darwin(v68);
        long long v96 = v62;
        swift_getAssociatedConformanceWitness();
        uint64_t v69 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        __chkstk_darwin(v69);
        long long v62 = v96;
        char v65 = v99;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        char v70 = dispatch thunk of static Comparable.>= infix(_:_:)();
        (*((void (**)(unsigned char *, uint64_t))v62 + 1))(&v89[-v64], v60);
        if ((v70 & 1) == 0) {
          goto LABEL_47;
        }
      }
      uint64_t v71 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v71 < 64)
      {
LABEL_44:
        uint64_t v85 = dispatch thunk of BinaryInteger._lowWord.getter();
        (*((void (**)(unsigned char *, uint64_t))v62 + 1))(v65, v60);
        sub_10001ABC4((uint64_t)v104);
        sub_10001ABC4((uint64_t)v107);
        uint64_t result = sub_10001ABC4((uint64_t)v110);
        long long v87 = v102;
        uint64_t v88 = v100;
        *id v102 = v101;
        v87[1] = v88;
        v87[2] = v85;
        return result;
      }
      __chkstk_darwin(v71);
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v97)(&v89[-((v63 + 15) & 0xFFFFFFFFFFFFFFF0)], v65, v60);
      uint64_t v113 = -1;
      char v72 = dispatch thunk of static BinaryInteger.isSigned.getter();
      long long v96 = &v89[-((v63 + 15) & 0xFFFFFFFFFFFFFFF0)];
      uint64_t v73 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v72)
      {
        long long v95 = v89;
        if (v73 <= 64)
        {
          uint64_t v74 = swift_getAssociatedTypeWitness();
          unint64_t v94 = (unint64_t)v89;
          __chkstk_darwin(v74);
          swift_getAssociatedConformanceWitness();
          uint64_t v75 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          long long v92 = v89;
          __chkstk_darwin(v75);
          unint64_t v93 = (v63 + 15) & 0xFFFFFFFFFFFFFFF0;
          uint64_t v76 = &v89[-v93];
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          unint64_t v77 = v96;
          int v90 = dispatch thunk of static Comparable.> infix(_:_:)();
          uint64_t v91 = v66;
          unsigned int v78 = v62;
          long long v79 = (uint64_t (*)(unsigned char *, uint64_t))*((void *)v62 + 1);
          uint64_t v80 = v79(v76, v60);
          unint64_t v94 = (unint64_t)v89;
          unint64_t v81 = v113;
          __chkstk_darwin(v80);
          uint64_t v82 = &v89[-v93];
          ((void (*)(unsigned char *, unsigned char *, uint64_t))v97)(&v89[-v93], v77, v60);
          if (v90)
          {
            unint64_t v83 = dispatch thunk of BinaryInteger._lowWord.getter();
            v79(v82, v60);
            if (v81 < v83) {
              goto LABEL_47;
            }
          }
          else
          {
            v79(v82, v60);
          }
          goto LABEL_43;
        }
      }
      else
      {
        if (v73 < 65)
        {
          dispatch thunk of BinaryInteger._lowWord.getter();
          unsigned int v78 = v62;
          long long v79 = (uint64_t (*)(unsigned char *, uint64_t))*((void *)v62 + 1);
LABEL_43:
          v79(v96, v60);
          long long v62 = v78;
          char v65 = v99;
          goto LABEL_44;
        }
        long long v95 = v89;
      }
      __chkstk_darwin(v73);
      sub_10002DACC();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v84 = dispatch thunk of static Comparable.< infix(_:_:)();
      unsigned int v78 = v62;
      long long v79 = (uint64_t (*)(unsigned char *, uint64_t))*((void *)v62 + 1);
      v79(&v89[-((v63 + 15) & 0xFFFFFFFFFFFFFFF0)], v60);
      if (v84) {
        goto LABEL_47;
      }
      goto LABEL_43;
    }
    __chkstk_darwin(v43);
    ((void (*)(unsigned char *, unsigned char *, uint64_t))v97)(&v89[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)], v36, v31);
    v104[0] = -1;
    char v44 = dispatch thunk of static BinaryInteger.isSigned.getter();
    long long v96 = &v89[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
    uint64_t v45 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v44)
    {
      long long v95 = v89;
      if (v45 <= 64)
      {
        uint64_t v46 = swift_getAssociatedTypeWitness();
        unint64_t v94 = (unint64_t)v89;
        __chkstk_darwin(v46);
        swift_getAssociatedConformanceWitness();
        uint64_t v47 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        long long v92 = v89;
        __chkstk_darwin(v47);
        unint64_t v93 = (v34 + 15) & 0xFFFFFFFFFFFFFFF0;
        long long v48 = &v89[-v93];
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        long long v49 = v96;
        int v90 = dispatch thunk of static Comparable.> infix(_:_:)();
        uint64_t v91 = v38;
        long long v50 = v33;
        long long v51 = (uint64_t (*)(unsigned char *, uint64_t))*((void *)v33 + 1);
        uint64_t v52 = v51(v48, v31);
        unint64_t v94 = (unint64_t)v89;
        unint64_t v53 = v104[0];
        __chkstk_darwin(v52);
        __int16 v54 = &v89[-v93];
        ((void (*)(unsigned char *, unsigned char *, uint64_t))v97)(&v89[-v93], v49, v31);
        if (v90)
        {
          unint64_t v55 = dispatch thunk of BinaryInteger._lowWord.getter();
          v51(v54, v31);
          if (v53 < v55) {
            goto LABEL_47;
          }
        }
        else
        {
          v51(v54, v31);
        }
        goto LABEL_29;
      }
    }
    else
    {
      if (v45 < 65)
      {
        dispatch thunk of BinaryInteger._lowWord.getter();
        long long v50 = v33;
        long long v51 = (uint64_t (*)(unsigned char *, uint64_t))*((void *)v33 + 1);
LABEL_29:
        v51(v96, v31);
        uint64_t v33 = v50;
        uint64_t v36 = v98;
        goto LABEL_30;
      }
      long long v95 = v89;
    }
    __chkstk_darwin(v45);
    sub_10002DACC();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v56 = dispatch thunk of static Comparable.< infix(_:_:)();
    long long v50 = v33;
    long long v51 = (uint64_t (*)(unsigned char *, uint64_t))*((void *)v33 + 1);
    v51(&v89[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)], v31);
    if (v56) {
      goto LABEL_47;
    }
    goto LABEL_29;
  }
  __chkstk_darwin(v17);
  long long v98 = v10;
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v101)(&v89[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v10, v5);
  v107[0] = -1;
  char v18 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v19 = dispatch thunk of BinaryInteger.bitWidth.getter();
  long long v97 = &v89[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((v18 & 1) == 0)
  {
    if (v19 < 65)
    {
      dispatch thunk of BinaryInteger._lowWord.getter();
      int v10 = v98;
      (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v97, v5);
LABEL_15:
      uint64_t v7 = v100;
      goto LABEL_16;
    }
    goto LABEL_10;
  }
  if (v19 > 64)
  {
LABEL_10:
    __chkstk_darwin(v19);
    sub_10002DACC();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v27 = dispatch thunk of static Comparable.< infix(_:_:)();
    __int16 v23 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
    v23(&v89[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
    int v10 = v98;
    if (v27) {
      goto LABEL_47;
    }
    goto LABEL_14;
  }
  long long v96 = v89;
  uint64_t v20 = swift_getAssociatedTypeWitness();
  long long v95 = v89;
  __chkstk_darwin(v20);
  long long v99 = v11;
  swift_getAssociatedConformanceWitness();
  uint64_t v21 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  unint64_t v93 = (unint64_t)v89;
  __chkstk_darwin(v21);
  unint64_t v94 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v22 = &v89[-v94];
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  LODWORD(v92) = dispatch thunk of static Comparable.> infix(_:_:)();
  __int16 v23 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  uint64_t v24 = ((uint64_t (*)(unsigned char *, uint64_t))v23)(v22, v5);
  long long v95 = (unsigned char *)v107[0];
  __chkstk_darwin(v24);
  uint64_t v25 = &v89[-v94];
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v101)(&v89[-v94], &v89[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
  if ((v92 & 1) == 0)
  {
    v23(v25, v5);
    int v10 = v98;
    goto LABEL_14;
  }
  unint64_t v26 = dispatch thunk of BinaryInteger._lowWord.getter();
  v23(v25, v5);
  int v10 = v98;
  if ((unint64_t)v95 >= v26)
  {
LABEL_14:
    v23(v97, v5);
    goto LABEL_15;
  }
LABEL_47:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000258FC()
{
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = &v80[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  unint64_t v9 = &v80[-v8];
  uint64_t v96 = type metadata accessor for Mirror();
  __chkstk_darwin(v96);
  uint64_t v12 = &v80[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v13 = *(void *)(*(void *)(v0 + 112) + 16);
  if (!v13)
  {
LABEL_16:
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v25 = 13;
    *(void *)(v25 + 8) = 0;
    *(void *)(v25 + 16) = 0xE000000000000000;
    *(void *)(v25 + 24) = 0xD000000000000013;
    *(void *)(v25 + 32) = 0x80000001000E2D30;
    *(void *)(v25 + 40) = 0xD00000000000001BLL;
    *(void *)(v25 + 48) = 0x80000001000E26F0;
    *(void *)(v25 + 56) = 85;
LABEL_17:
    swift_willThrow();
    return (uint64_t)v12;
  }
  long long v89 = v2;
  int v90 = (unsigned char *)v0;
  long long v86 = v9;
  uint64_t v85 = v7;
  uint64_t v87 = v4;
  uint64_t v88 = v3;
  uint64_t v91 = &v103;
  unint64_t v94 = (void (*)(unsigned char *))(v10 + 8);
  uint64_t v14 = swift_bridgeObjectRetain();
  uint64_t v15 = 32;
  long long v95 = (unsigned char *)v14;
  while (1)
  {
    long long v97 = (char *)v15;
    unint64_t v98 = v13;
    char v16 = (unsigned __int16 *)(v14 + v15);
    int v17 = *((unsigned __int8 *)v16 + 2);
    LODWORD(v16) = *v16;
    *((void *)&v103 + 1) = &type metadata for USBDescriptorControl;
    LODWORD(v93) = v17;
    BYTE2(v102) = v17;
    LODWORD(v92) = v16;
    LOWORD(v102) = (_WORD)v16;
    Mirror.init(reflecting:)();
    char v18 = v12;
    uint64_t v19 = Mirror.children.getter();
    uint64_t ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v21 = dispatch thunk of _AnyIndexBox._typeID.getter();
    swift_getObjectType();
    if (v21 != dispatch thunk of _AnyIndexBox._typeID.getter())
    {
      __break(1u);
      goto LABEL_36;
    }
    char v22 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_unknownObjectRelease();
    if (v22)
    {
      swift_unknownObjectRelease();
      long long v103 = 0u;
      long long v104 = 0u;
      long long v102 = 0u;
    }
    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter();
      long long v102 = v99;
      long long v103 = v100;
      long long v104 = v101;
      swift_unknownObjectRelease();
    }
    uint64_t v12 = v18;
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))v94)(v18, v96);
    if (!*((void *)&v104 + 1))
    {
      sub_10001A918((uint64_t)&v102, &qword_100127CD0);
      goto LABEL_4;
    }
    long long v23 = v102;
    sub_10001ABC4((uint64_t)v91);
    if (!*((void *)&v23 + 1)) {
      goto LABEL_4;
    }
    if (v23 == __PAIR128__(0xE900000000000079, 0x636E657571657266)) {
      break;
    }
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v24) {
      goto LABEL_19;
    }
LABEL_4:
    uint64_t v15 = (uint64_t)(v97 + 3);
    unint64_t v13 = v98 - 1;
    uint64_t v14 = (uint64_t)v95;
    if (v98 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRelease();
LABEL_19:
  swift_bridgeObjectRelease();
  uint64_t v12 = v90;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v28 = v89;
  if (!Strong)
  {
    __break(1u);
    goto LABEL_49;
  }
  unsigned int v29 = v92 | (v93 << 16);
  uint64_t v30 = *((void *)v12 + 17);
  uint64_t v31 = swift_getObjectType();
  *((void *)&v103 + 1) = type metadata accessor for ActiveClockSource();
  *(void *)&long long v104 = &protocol witness table for ActiveClockSource;
  *(void *)&long long v102 = v12;
  uint64_t v32 = *(uint64_t (**)(void, void, void, long long *, uint64_t, uint64_t))(v30 + 144);
  swift_retain();
  __int16 v33 = v32(v29 & 0xFFFFFF, 0, 0, &v102, v31, v30);
  if (v28)
  {
    swift_unknownObjectRelease();
    sub_10001ABC4((uint64_t)&v102);
    *(void *)&long long v102 = 0;
    *((void *)&v102 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    v35._countAndFlagsBits = 0xD00000000000001DLL;
    v35._object = (void *)0x80000001000E2D50;
    String.append(_:)(v35);
    uint64_t v105 = (uint64_t)v28;
    sub_10000AC7C(&qword_100127400);
    _print_unlocked<A, B>(_:_:)();
    sub_10002E81C(v102, *((uint64_t *)&v102 + 1), 0xD000000000000013, (void *)0x80000001000E2D30, 0xD00000000000001BLL, 0x80000001000E26F0, 94);
    swift_bridgeObjectRelease();
    uint64_t v36 = (void *)_convertErrorToNSError(_:)();
    id v37 = [v36 code];

    if (v37 != (id)-536850432) {
      goto LABEL_17;
    }
    swift_errorRelease();
    return 0;
  }
  __int16 v38 = v33;
  char v39 = v34;
  swift_unknownObjectRelease();
  sub_10001ABC4((uint64_t)&v102);
  uint64_t v40 = v39;
  ADCControlRequestParameterBlock.getCur()(v40, v38 & 0x1FF, (uint64_t)&v102);
  long long v97 = v40;

  uint64_t v21 = *((void *)&v103 + 1);
  uint64_t v41 = v104;
  char v42 = sub_10001A974(&v102, *((uint64_t *)&v103 + 1));
  uint64_t v43 = v80;
  uint64_t v19 = *(void *)(v21 - 8);
  __chkstk_darwin(v42);
  unint64_t v98 = v44;
  unint64_t v45 = (v44 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v46 = &v80[-v45];
  unint64_t v94 = *(void (**)(unsigned char *))(v19 + 16);
  long long v95 = (unsigned char *)(v19 + 16);
  v94(&v80[-v45]);
  uint64_t ObjectType = *(void *)(v41 + 8);
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    unint64_t v93 = v80;
    uint64_t v91 = (long long *)v80;
    __chkstk_darwin(AssociatedTypeWitness);
    uint64_t v96 = v19;
    swift_getAssociatedConformanceWitness();
    uint64_t v48 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    long long v89 = v80;
    __chkstk_darwin(v48);
    uint64_t v19 = v96;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    char v49 = dispatch thunk of static Comparable.>= infix(_:_:)();
    uint64_t v43 = v93;
    (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(&v80[-v45], v21);
    if ((v49 & 1) == 0)
    {
LABEL_49:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  uint64_t v50 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v50 < 64) {
    goto LABEL_41;
  }
  uint64_t v91 = (long long *)v80;
  __chkstk_darwin(v50);
  uint64_t v52 = &v80[-((v51 + 15) & 0xFFFFFFFFFFFFFFF0)];
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v94)(v52, v46, v21);
  uint64_t v105 = -1;
  char v53 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v96 = (uint64_t)v52;
  uint64_t v54 = dispatch thunk of BinaryInteger.bitWidth.getter();
  long long v92 = v46;
  if ((v53 & 1) == 0)
  {
    if (v54 < 65)
    {
      dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v58 = v19;
      uint64_t v59 = *(void (**)(unsigned char *, uint64_t))(v19 + 8);
    }
    else
    {
      long long v95 = v80;
      __chkstk_darwin(v54);
      long long v61 = &v80[-((v60 + 15) & 0xFFFFFFFFFFFFFFF0)];
      sub_10002DACC();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v62 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v58 = v19;
      uint64_t v59 = *(void (**)(unsigned char *, uint64_t))(v19 + 8);
      v59(v61, v21);
      if (v62) {
        goto LABEL_49;
      }
    }
    goto LABEL_40;
  }
  unint64_t v93 = v43;
  if (v54 <= 64)
  {
LABEL_36:
    uint64_t v63 = swift_getAssociatedTypeWitness();
    char v84 = v80;
    __chkstk_darwin(v63);
    swift_getAssociatedConformanceWitness();
    uint64_t v64 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    uint64_t v82 = v80;
    unint64_t v65 = v98;
    __chkstk_darwin(v64);
    unint64_t v83 = (v65 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v66 = &v80[-v83];
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    long long v89 = (unsigned char *)ObjectType;
    int v81 = dispatch thunk of static Comparable.> infix(_:_:)();
    uint64_t v58 = v19;
    uint64_t v59 = *(void (**)(unsigned char *, uint64_t))(v19 + 8);
    uint64_t v67 = ((uint64_t (*)(unsigned char *, uint64_t))v59)(v66, v21);
    char v84 = (unsigned char *)v105;
    __chkstk_darwin(v67);
    uint64_t v68 = &v80[-v83];
    ((void (*)(unsigned char *, uint64_t, uint64_t))v94)(&v80[-v83], v96, v21);
    if (v81)
    {
      unint64_t v98 = dispatch thunk of BinaryInteger._lowWord.getter();
      v59(v68, v21);
      if ((unint64_t)v84 < v98) {
        goto LABEL_49;
      }
    }
    else
    {
      v59(v68, v21);
    }
    goto LABEL_40;
  }
  __chkstk_darwin(v54);
  char v56 = &v80[-((v55 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10002DACC();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v57 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v58 = v19;
  uint64_t v59 = *(void (**)(unsigned char *, uint64_t))(v19 + 8);
  v59(v56, v21);
  if (v57) {
    goto LABEL_49;
  }
LABEL_40:
  v59((unsigned char *)v96, v21);
  uint64_t v19 = v58;
  uint64_t v46 = v92;
LABEL_41:
  uint64_t v12 = (unsigned char *)dispatch thunk of BinaryInteger._lowWord.getter();
  (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(v46, v21);
  sub_10001ABC4((uint64_t)&v102);
  if (qword_1001268E8 != -1) {
    swift_once();
  }
  uint64_t v69 = type metadata accessor for OSSignposter();
  sub_10000AD60(v69, (uint64_t)qword_10012B1E0);
  uint64_t v70 = v87;
  uint64_t v71 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v87 + 16);
  char v72 = v86;
  uint64_t v73 = v88;
  v71(v86, &v90[OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_signpostID], v88);
  uint64_t v74 = OSSignposter.logHandle.getter();
  LODWORD(v98) = static os_signpost_type_t.event.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v75 = v85;
    v71(v85, v72, v73);
    uint64_t v76 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v76 = 134217984;
    *(void *)&long long v102 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_signpost_id_t v77 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v74, (os_signpost_type_t)v98, v77, "ActiveClockSource_getSamplingRate", "samplingRate %lu", v76, 0xCu);
    swift_slowDealloc();

    unsigned int v78 = *(void (**)(unsigned char *, uint64_t))(v70 + 8);
    v78(v72, v73);
    v78(v75, v73);
  }
  else
  {

    (*(void (**)(unsigned char *, uint64_t))(v70 + 8))(v72, v73);
  }
  *(void *)&long long v102 = 0;
  *((void *)&v102 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  *(void *)&long long v102 = 0xD000000000000023;
  *((void *)&v102 + 1) = 0x80000001000E2D70;
  uint64_t v105 = (uint64_t)v12;
  v79._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v79);
  swift_bridgeObjectRelease();
  sub_10002E804(v102, *((uint64_t *)&v102 + 1), 0xD000000000000013, (void *)0x80000001000E2D30, 0xD00000000000001BLL, 0x80000001000E26F0, 107);
  swift_bridgeObjectRelease();

  return (uint64_t)v12;
}

uint64_t sub_1000268F8()
{
  uint64_t v2 = v1;
  uint64_t v35 = type metadata accessor for Mirror();
  __chkstk_darwin(v35);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(*(void *)(v0 + 112) + 16);
  if (v6)
  {
    uint64_t v28 = v0;
    uint64_t v29 = v2;
    uint64_t v30 = &v41;
    __int16 v33 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v7 = swift_bridgeObjectRetain();
    uint64_t v8 = 32;
    uint64_t v32 = v7;
    uint64_t v34 = v5;
    while (1)
    {
      uint64_t v36 = v6;
      int v9 = *(unsigned __int8 *)(v7 + v8 + 2);
      int v10 = *(unsigned __int16 *)(v7 + v8);
      *((void *)&v41 + 1) = &type metadata for USBDescriptorControl;
      int v43 = v9;
      BYTE2(v40) = v9;
      int v31 = v10;
      LOWORD(v40) = v10;
      Mirror.init(reflecting:)();
      Mirror.children.getter();
      swift_getObjectType();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of _AnyIndexBox._typeID.getter();
      swift_getObjectType();
      uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter();
      if (v11 != result) {
        break;
      }
      char v13 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
      swift_unknownObjectRelease();
      if (v13)
      {
        swift_unknownObjectRelease();
        long long v41 = 0u;
        long long v42 = 0u;
        long long v40 = 0u;
      }
      else
      {
        dispatch thunk of _AnyCollectionBox.subscript.getter();
        long long v40 = v37;
        long long v41 = v38;
        long long v42 = v39;
        swift_unknownObjectRelease();
      }
      swift_release();
      (*v33)(v34, v35);
      if (*((void *)&v42 + 1))
      {
        long long v14 = v40;
        sub_10001ABC4((uint64_t)v30);
        if (*((void *)&v14 + 1))
        {
          if (v14 == __PAIR128__(0xE800000000000000, 0x79746964696C6176))
          {
            swift_bridgeObjectRelease();
LABEL_17:
            swift_bridgeObjectRelease();
            uint64_t v17 = v28;
            swift_beginAccess();
            uint64_t result = swift_unknownObjectWeakLoadStrong();
            if (result)
            {
              int v18 = v31 | (v43 << 16);
              uint64_t v19 = *(void *)(v17 + 136);
              uint64_t ObjectType = swift_getObjectType();
              *((void *)&v41 + 1) = type metadata accessor for ActiveClockSource();
              *(void *)&long long v42 = &protocol witness table for ActiveClockSource;
              *(void *)&long long v40 = v17;
              uint64_t v21 = *(uint64_t (**)(void, void, void, long long *, uint64_t, uint64_t))(v19 + 144);
              swift_retain();
              uint64_t v22 = v29;
              __int16 v23 = v21(v18 & 0xFFFFFF, 0, 0, &v40, ObjectType, v19);
              uint64_t v25 = v24;
              swift_unknownObjectRelease();
              if (v22)
              {
                sub_10001ABC4((uint64_t)&v40);
              }
              else
              {
                sub_10001ABC4((uint64_t)&v40);
                ADCControlRequestParameterBlock.getCur()(v25, v23 & 0x1FF, (uint64_t)&v40);
                sub_10000AC7C(&qword_100127EB8);
                if (swift_dynamicCast())
                {

                  return v44 != 0;
                }
                else
                {
                  sub_10000CD54();
                  swift_allocError();
                  *(unsigned char *)uint64_t v26 = 1;
                  *(void *)(v26 + 8) = 0;
                  *(void *)(v26 + 16) = 0xE000000000000000;
                  *(void *)(v26 + 24) = 0xD000000000000014;
                  *(void *)(v26 + 32) = 0x80000001000E2BB0;
                  *(void *)(v26 + 40) = 0xD00000000000001BLL;
                  *(void *)(v26 + 48) = 0x80000001000E26F0;
                  *(void *)(v26 + 56) = 122;
                  swift_willThrow();
                }
              }
              return v16;
            }
LABEL_25:
            __break(1u);
            return result;
          }
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v15) {
            goto LABEL_17;
          }
        }
      }
      else
      {
        sub_10001A918((uint64_t)&v40, &qword_100127CD0);
      }
      v8 += 3;
      uint64_t v6 = v36 - 1;
      uint64_t v7 = v32;
      if (v36 == 1)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
    }
    __break(1u);
    goto LABEL_25;
  }
  return 1;
}

uint64_t sub_100026D94()
{
  return sub_1000258FC();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveClockSource.refresh()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for OSSignpostID();
  uint64_t v48 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v40 - v7;
  uint64_t v9 = sub_100026D94();
  char v11 = v10;
  if ((v10 & 1) == 0)
  {
    uint64_t v20 = v0 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate;
    *(void *)uint64_t v20 = 0;
    *(unsigned char *)(v20 + 8) = 1;
    swift_beginAccess();
    *(void *)(v0 + 16) = 0;
LABEL_14:
    swift_bridgeObjectRelease();
LABEL_15:
    swift_beginAccess();
    *(unsigned char *)(v2 + 120) = v11 & 1;
    uint64_t v12 = v8;
    if (qword_1001268E8 == -1) {
      goto LABEL_16;
    }
    goto LABEL_30;
  }
  uint64_t v12 = (char *)v9;
  char v13 = sub_100023E1C();
  if (v1) {
    return;
  }
  long long v14 = v13;
  uint64_t v15 = v13[2];
  if (!v15)
  {
LABEL_25:
    long long v42 = v6;
    unint64_t v33 = sub_100027560(0, v13);
    uint64_t v34 = (unint64_t *)(v2 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate);
    *uint64_t v34 = v33;
    *((unsigned char *)v34 + 8) = 0;
    if (v33)
    {
      swift_beginAccess();
      *(void *)(v2 + 16) = v14;
      swift_bridgeObjectRelease();
      uint64_t v46 = 0;
      uint64_t v47 = 0xE000000000000000;
      _StringGuts.grow(_:)(75);
      v35._countAndFlagsBits = 0xD000000000000021;
      v35._object = (void *)0x80000001000E2690;
      String.append(_:)(v35);
      char v36 = *((unsigned char *)v34 + 8);
      char v44 = (char *)*v34;
      char v45 = v36;
      sub_10000AC7C(&qword_100128070);
      v37._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      v38._countAndFlagsBits = 0xD000000000000026;
      v38._object = (void *)0x80000001000E26C0;
      String.append(_:)(v38);
      char v44 = v12;
      v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      sub_10002E804(v46, v47, 0x2868736572666572, (void *)0xE900000000000029, 0xD00000000000001BLL, 0x80000001000E26F0, 172);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_10002E81C(0xD00000000000002CLL, 0x80000001000E2710, 0x2868736572666572, (void *)0xE900000000000029, 0xD00000000000001BLL, 0x80000001000E26F0, 176);
    }
    uint64_t v6 = v42;
    goto LABEL_15;
  }
  BOOL v16 = 0;
  uint64_t v17 = v13 + 5;
  uint64_t v18 = 1;
  do
  {
    if (v16)
    {
      if (v15 == v18) {
        goto LABEL_24;
      }
      BOOL v16 = 1;
    }
    else if ((unint64_t)v12 >= *(v17 - 1))
    {
      BOOL v16 = *v17 >= (unint64_t)v12;
      if (v15 == v18)
      {
        if (*v17 < (unint64_t)v12) {
          goto LABEL_25;
        }
LABEL_24:
        uint64_t v32 = v2 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate;
        *(void *)uint64_t v32 = v12;
        *(unsigned char *)(v32 + 8) = 0;
        swift_beginAccess();
        *(void *)(v2 + 16) = v14;
        goto LABEL_14;
      }
    }
    else
    {
      if (v15 == v18) {
        goto LABEL_25;
      }
      BOOL v16 = 0;
    }
    v17 += 3;
  }
  while (!__OFADD__(v18++, 1));
  __break(1u);
LABEL_30:
  swift_once();
LABEL_16:
  uint64_t v21 = type metadata accessor for OSSignposter();
  sub_10000AD60(v21, (uint64_t)qword_10012B1E0);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
  v22(v12, v2 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_signpostID, v3);
  swift_retain_n();
  __int16 v23 = OSSignposter.logHandle.getter();
  int v43 = static os_signpost_type_t.event.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    long long v42 = v6;
    v22(v6, (uint64_t)v12, v3);
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 67109376;
    LODWORD(v44) = *(unsigned __int8 *)(v2 + 120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 8) = 2048;
    uint64_t v25 = *(char **)(v2 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate);
    uint64_t v26 = v48;
    long long v41 = v12;
    int v27 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate + 8);
    swift_release();
    if (v27) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = v25;
    }
    char v44 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    uint64_t v29 = v42;
    os_signpost_id_t v30 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v23, (os_signpost_type_t)v43, v30, "ActiveClockSource_refresh", "isValid %{BOOL}d, samplingRate %lu", (uint8_t *)v24, 0x12u);
    swift_slowDealloc();

    int v31 = *(void (**)(char *, uint64_t))(v26 + 8);
    v31(v41, v3);
    v31(v29, v3);
  }
  else
  {
    swift_release_n();

    (*(void (**)(char *, uint64_t))(v48 + 8))(v12, v3);
  }
}

unint64_t sub_100027560(unint64_t result, void *a2)
{
  uint64_t v2 = a2[2];
  if (!v2) {
    return 0;
  }
  BOOL v3 = 0;
  uint64_t v4 = a2 + 5;
  uint64_t v5 = 1;
  uint64_t v6 = a2 + 5;
  while (1)
  {
    if (v3)
    {
      if (v2 == v5) {
        return result;
      }
      BOOL v3 = 1;
      goto LABEL_4;
    }
    if (*(v6 - 1) <= result) {
      break;
    }
    if (v2 == v5) {
      goto LABEL_12;
    }
    BOOL v3 = 0;
LABEL_4:
    v6 += 3;
    BOOL v7 = __OFADD__(v5++, 1);
    if (v7)
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      return result;
    }
  }
  BOOL v3 = *v6 >= result;
  if (v2 != v5) {
    goto LABEL_4;
  }
  if (*v6 >= result) {
    return result;
  }
LABEL_12:
  BOOL v8 = 0;
  uint64_t v9 = 1;
  uint64_t result = 48000;
  char v10 = a2 + 5;
  while (2)
  {
    if (v8)
    {
      if (v2 == v9) {
        return result;
      }
      BOOL v8 = 1;
      goto LABEL_14;
    }
    if (*(v10 - 1) >= 0xBB81uLL)
    {
      if (v2 == v9) {
        goto LABEL_23;
      }
      BOOL v8 = 0;
      goto LABEL_14;
    }
    unint64_t v11 = *v10 >> 7;
    BOOL v8 = v11 > 0x176;
    if (v2 != v9)
    {
LABEL_14:
      v10 += 3;
      BOOL v7 = __OFADD__(v9++, 1);
      if (v7) {
        goto LABEL_39;
      }
      continue;
    }
    break;
  }
  if (v11 > 0x176) {
    return 48000;
  }
LABEL_23:
  BOOL v12 = 0;
  uint64_t v13 = 1;
  uint64_t result = 44100;
  while (2)
  {
    if (v12)
    {
      if (v2 == v13) {
        return result;
      }
      BOOL v12 = 1;
      goto LABEL_25;
    }
    if (*(v4 - 1) >= 0xAC45uLL)
    {
      if (v2 == v13) {
        goto LABEL_34;
      }
      BOOL v12 = 0;
      goto LABEL_25;
    }
    BOOL v12 = *v4 > 0xAC43uLL;
    if (v2 != v13)
    {
LABEL_25:
      v4 += 3;
      BOOL v7 = __OFADD__(v13++, 1);
      if (v7) {
        goto LABEL_40;
      }
      continue;
    }
    break;
  }
  if (*v4 > 0xAC43uLL) {
    return 44100;
  }
LABEL_34:
  uint64_t result = a2[4];
  if (result != a2[5])
  {
    sub_10002E81C(0xD000000000000029, 0x80000001000E2C00, 0xD000000000000022, (void *)0x80000001000E2C30, 0xD000000000000015, 0x80000001000E2C60, 118);
    return 0;
  }
  return result;
}

void ActiveClockSource.start(on:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 136) = a2;
  swift_unknownObjectWeakAssign();
  ActiveClockSource.refresh()();
}

void ActiveClockSource.curSamplingRate.setter(char *a1, char a2)
{
  uint64_t v5 = type metadata accessor for OSSignpostID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (uint64_t)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v59 - v10;
  uint64_t v12 = type metadata accessor for Mirror();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    sub_10002E81C(0xD00000000000002ALL, 0x80000001000E2740, 0x6C706D6153727563, (void *)0xEF65746152676E69, 0xD00000000000001BLL, 0x80000001000E26F0, 203);
    return;
  }
  uint64_t v16 = v2 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate;
  if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate + 8) & 1) == 0
    && *(char **)v16 == a1
    && (*(unsigned char *)(v2 + 24) & 1) != 0)
  {
    return;
  }
  if (!a1)
  {
    *(void *)uint64_t v16 = 0;
    *(unsigned char *)(v16 + 8) = 1;
    return;
  }
  swift_beginAccess();
  if ((*(unsigned char *)(v2 + 25) & 1) == 0)
  {
    uint64_t v23 = 0xD00000000000002CLL;
    uint64_t v24 = 0x80000001000E2770;
    uint64_t v25 = 220;
LABEL_42:
    sub_10002E81C(v23, v24, 0x6C706D6153727563, (void *)0xEF65746152676E69, 0xD00000000000001BLL, 0x80000001000E26F0, v25);
    return;
  }
  swift_beginAccess();
  uint64_t v17 = *(void *)(v2 + 16);
  if (!v17)
  {
    uint64_t v23 = 0xD00000000000002ALL;
    uint64_t v24 = 0x80000001000E27A0;
    uint64_t v25 = 225;
    goto LABEL_42;
  }
  uint64_t v18 = *(void *)(v17 + 16);
  if (!v18)
  {
LABEL_39:
    *(void *)&long long v78 = 0;
    *((void *)&v78 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v34._countAndFlagsBits = 0xD00000000000001CLL;
    v34._object = (void *)0x80000001000E28F0;
    String.append(_:)(v34);
    *(void *)&long long v75 = a1;
    v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36._countAndFlagsBits = 0xD000000000000017;
    v36._object = (void *)0x80000001000E2910;
    String.append(_:)(v36);
    sub_10002E81C(v78, *((uint64_t *)&v78 + 1), 0x6C706D6153727563, (void *)0xEF65746152676E69, 0xD00000000000001BLL, 0x80000001000E26F0, 230);
    swift_bridgeObjectRelease();
    return;
  }
  BOOL v19 = 0;
  uint64_t v20 = (void *)(v17 + 40);
  uint64_t v21 = 1;
  while (1)
  {
    if (v19)
    {
      if (v18 == v21) {
        goto LABEL_25;
      }
      BOOL v19 = 1;
      goto LABEL_14;
    }
    if (*(v20 - 1) > (unint64_t)a1)
    {
      if (v18 == v21) {
        goto LABEL_39;
      }
      BOOL v19 = 0;
      goto LABEL_14;
    }
    BOOL v19 = *v20 >= (unint64_t)a1;
    if (v18 == v21) {
      break;
    }
LABEL_14:
    v20 += 3;
    if (__OFADD__(v21++, 1))
    {
      __break(1u);
      goto LABEL_54;
    }
  }
  if (*v20 < (unint64_t)a1) {
    goto LABEL_39;
  }
LABEL_25:
  uint64_t v66 = v11;
  uint64_t v26 = *(void *)(v2 + 112);
  if (!*(void *)(v26 + 16))
  {
LABEL_41:
    uint64_t v23 = 0xD000000000000038;
    uint64_t v24 = 0x80000001000E27D0;
    uint64_t v25 = 235;
    goto LABEL_42;
  }
  uint64_t v73 = *(void *)(v26 + 16);
  uint64_t v61 = v9;
  uint64_t v62 = v6;
  uint64_t v63 = v5;
  uint64_t v60 = (void *)v16;
  uint64_t v64 = v2;
  unint64_t v65 = a1;
  uint64_t v67 = &v79;
  uint64_t v70 = (void (**)(char *, uint64_t))(v13 + 8);
  swift_bridgeObjectRetain();
  uint64_t v9 = 32;
  uint64_t v72 = v12;
  uint64_t v71 = v26;
  while (1)
  {
    int v27 = *(unsigned __int8 *)(v26 + v9 + 2);
    int v28 = *(unsigned __int16 *)(v26 + v9);
    *((void *)&v79 + 1) = &type metadata for USBDescriptorControl;
    int v69 = v27;
    BYTE2(v78) = v27;
    int v68 = v28;
    LOWORD(v78) = v28;
    Mirror.init(reflecting:)();
    uint64_t v29 = v15;
    uint64_t v15 = (char *)Mirror.children.getter();
    uint64_t v12 = *((void *)v15 + 2);
    swift_getObjectType();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v30 = dispatch thunk of _AnyIndexBox._typeID.getter();
    swift_getObjectType();
    if (v30 != dispatch thunk of _AnyIndexBox._typeID.getter()) {
      break;
    }
    char v31 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_unknownObjectRelease();
    if (v31)
    {
      swift_unknownObjectRelease();
      long long v79 = 0u;
      long long v80 = 0u;
      long long v78 = 0u;
    }
    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter();
      long long v78 = v75;
      long long v79 = v76;
      long long v80 = v77;
      swift_unknownObjectRelease();
    }
    swift_release();
    uint64_t v15 = v29;
    (*v70)(v29, v72);
    if (*((void *)&v80 + 1))
    {
      long long v32 = v78;
      sub_10001ABC4((uint64_t)v67);
      uint64_t v26 = v71;
      if (*((void *)&v32 + 1))
      {
        if (v32 == __PAIR128__(0xE900000000000079, 0x636E657571657266))
        {
          swift_bridgeObjectRelease();
LABEL_44:
          swift_bridgeObjectRelease();
          uint64_t v15 = v65;
          uint64_t v12 = v64;
          uint64_t v9 = (uint64_t)v66;
          if (qword_1001268E8 != -1) {
            goto LABEL_55;
          }
          goto LABEL_45;
        }
        char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v33) {
          goto LABEL_44;
        }
      }
    }
    else
    {
      sub_10001A918((uint64_t)&v78, &qword_100127CD0);
      uint64_t v26 = v71;
    }
    v9 += 3;
    if (!--v73)
    {
      swift_bridgeObjectRelease();
      goto LABEL_41;
    }
  }
LABEL_54:
  __break(1u);
LABEL_55:
  swift_once();
LABEL_45:
  uint64_t v37 = type metadata accessor for OSSignposter();
  sub_10000AD60(v37, (uint64_t)qword_10012B1E0);
  uint64_t v38 = v62;
  Swift::String v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16);
  uint64_t v40 = v63;
  v39(v9, v12 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_signpostID, v63);
  long long v41 = OSSignposter.logHandle.getter();
  os_signpost_type_t v42 = static os_signpost_type_t.event.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v43 = v61;
    v39(v61, v9, v40);
    char v44 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)char v44 = 134217984;
    *(void *)&long long v78 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_signpost_id_t v45 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v41, v42, v45, "ActiveClockSource_setCurSampleRate", "samplingRate %lu", v44, 0xCu);
    swift_slowDealloc();

    uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v46(v9, v40);
    uint64_t v47 = v43;
    uint64_t v15 = v65;
    v46(v47, v40);
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v9, v40);
  }
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  *(void *)&long long v78 = 0xD000000000000026;
  *((void *)&v78 + 1) = 0x80000001000E2810;
  *(void *)&long long v75 = v15;
  v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v48);
  swift_bridgeObjectRelease();
  sub_10002E804(v78, *((uint64_t *)&v78 + 1), 0x6C706D6153727563, (void *)0xEF65746152676E69, 0xD00000000000001BLL, 0x80000001000E26F0, 240);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v12 + 24) = 1;
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    int v49 = v68 | (v69 << 16);
    uint64_t v50 = *(void *)(v12 + 136);
    uint64_t ObjectType = swift_getObjectType();
    *((void *)&v79 + 1) = type metadata accessor for ActiveClockSource();
    *(void *)&long long v80 = &protocol witness table for ActiveClockSource;
    *(void *)&long long v78 = v12;
    swift_retain();
    sub_100031A50(v49 & 0xFFFFFF, 0, 0, &v78, (unint64_t)v15, ObjectType, v50);
    swift_unknownObjectRelease();
    sub_10001ABC4((uint64_t)&v78);
    uint64_t v52 = v60;
    *uint64_t v60 = v15;
    *((unsigned char *)v52 + 8) = 0;
    uint64_t v53 = sub_1000258FC();
    uint64_t v54 = v53;
    if ((v52[1] & 1) != 0 || v53 != *v52)
    {
      *(void *)&long long v78 = 0;
      *((void *)&v78 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(66);
      v55._countAndFlagsBits = 0xD000000000000038;
      v55._object = (void *)0x80000001000E2880;
      String.append(_:)(v55);
      v56._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v56);
      swift_bridgeObjectRelease();
      v57._countAndFlagsBits = 0x206461657220;
      v57._object = (void *)0xE600000000000000;
      String.append(_:)(v57);
      uint64_t v74 = v54;
      v58._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v58);
      swift_bridgeObjectRelease();
      sub_10002E81C(v78, *((uint64_t *)&v78 + 1), 0x6C706D6153727563, (void *)0xEF65746152676E69, 0xD00000000000001BLL, 0x80000001000E26F0, 252);
      swift_bridgeObjectRelease();
    }
    *(void *)(v12 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_lastSamplingRateChangedTimestamp) = mach_absolute_time();
  }
  else
  {
    __break(1u);
  }
}

uint64_t ActiveClockSource.curSamplingRate.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate);
}

void (*ActiveClockSource.curSamplingRate.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(unsigned char *)(v1 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate + 8);
  *(void *)a1 = *(void *)(v1 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate);
  *(unsigned char *)(a1 + 8) = v2;
  return sub_100028534;
}

void sub_100028534(uint64_t a1)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveClockSource.processTargetedInterrupt(attribute:controlSelector:channelNumber:)(AUASDCore::AUAInterruptAttribute attribute, Swift::UInt controlSelector, Swift::UInt channelNumber)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveClockSource.prepareClockForIO(_:)(Swift::UInt64 a1)
{
  uint64_t v4 = type metadata accessor for OSSignpostID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v24 - v9;
  uint64_t v11 = mach_absolute_time();
  unint64_t v12 = *(void *)(v1 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_lastSamplingRateChangedTimestamp);
  unint64_t v13 = v11 - v12;
  if (v11 < v12)
  {
    __break(1u);
  }
  else if (qword_100126948 == -1)
  {
    goto LABEL_3;
  }
  swift_once();
LABEL_3:
  if (qword_10012B2D0 != HIDWORD(qword_10012B2D0))
  {
    if (!is_mul_ok(v13, qword_10012B2D0))
    {
      __break(1u);
      goto LABEL_18;
    }
    if (!HIDWORD(qword_10012B2D0))
    {
      __break(1u);
      goto LABEL_20;
    }
    unint64_t v13 = v13 * qword_10012B2D0 / HIDWORD(qword_10012B2D0);
  }
  BOOL v14 = a1 > v13 / 0x3E8;
  a1 -= v13 / 0x3E8;
  if (!v14) {
    return;
  }
  if (HIDWORD(a1))
  {
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v24[1] = v2;
  if (qword_1001268E8 != -1) {
LABEL_18:
  }
    swift_once();
  uint64_t v15 = type metadata accessor for OSSignposter();
  sub_10000AD60(v15, (uint64_t)qword_10012B1E0);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v16(v10, v1 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_signpostID, v4);
  uint64_t v17 = OSSignposter.logHandle.getter();
  int v27 = static os_signpost_type_t.event.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    v16(v8, (uint64_t)v10, v4);
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 67109120;
    LODWORD(v25) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_signpost_id_t v19 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, (os_signpost_type_t)v27, v19, "ActiveClockSource_prepareClock", "delay %u us", v18, 8u);
    swift_slowDealloc();

    uint64_t v20 = *(void (**)(char *, uint64_t))(v5 + 8);
    v20(v10, v4);
    v20(v8, v4);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  uint64_t v25 = 0;
  uint64_t v26 = 0xE000000000000000;
  _StringGuts.grow(_:)(53);
  v21._countAndFlagsBits = 0x676E6979616C6544;
  v21._object = (void *)0xE900000000000020;
  String.append(_:)(v21);
  int v28 = a1;
  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0xD00000000000002ALL;
  v23._object = (void *)0x80000001000E2930;
  String.append(_:)(v23);
  sub_10002E804(v25, v26, 0xD000000000000015, (void *)0x80000001000E2960, 0xD00000000000001BLL, 0x80000001000E26F0, 320);
  swift_bridgeObjectRelease();
  usleep(a1);
}

Swift::Void __swiftcall ActiveClockSource.invalidateSamplingRate()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate;
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
}

uint64_t ActiveClockSource.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001DEAC(v0 + 128);
  uint64_t v1 = v0 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_signpostID;
  uint64_t v2 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ActiveClockSource.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001DEAC(v0 + 128);
  uint64_t v1 = v0 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_signpostID;
  uint64_t v2 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100028B3C@<X0>(uint64_t *a1@<X8>)
{
  __int16 v14 = *(_WORD *)(v1 + 32);
  char v3 = *(unsigned char *)(v1 + 34);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  __int16 v6 = *(_WORD *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  uint64_t v8 = *(void *)(v1 + 72);
  char v9 = *(unsigned char *)(v1 + 80);
  char v10 = *(unsigned char *)(v1 + 81);
  uint64_t v11 = *(void *)(v1 + 88);
  a1[3] = (uint64_t)&type metadata for ClockSource;
  a1[4] = sub_1000236C0();
  uint64_t v12 = swift_allocObject();
  *a1 = v12;
  *(unsigned char *)(v12 + 18) = v3;
  *(_WORD *)(v12 + 16) = v14;
  *(void *)(v12 + 24) = v4;
  *(void *)(v12 + 32) = v5;
  *(_WORD *)(v12 + 40) = v6;
  *(void *)(v12 + 48) = v7;
  *(void *)(v12 + 56) = v8;
  *(unsigned char *)(v12 + 64) = v9;
  *(unsigned char *)(v12 + 65) = v10;
  *(void *)(v12 + 72) = v11;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

void sub_100028C14()
{
}

uint64_t sub_100028C2C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  __int16 v15 = *(_WORD *)(*v1 + 32);
  char v4 = *(unsigned char *)(*v1 + 34);
  uint64_t v5 = *(void *)(*v1 + 40);
  uint64_t v6 = *(void *)(*v1 + 48);
  __int16 v7 = *(_WORD *)(*v1 + 56);
  uint64_t v8 = *(void *)(*v1 + 64);
  uint64_t v9 = *(void *)(v3 + 72);
  char v10 = *(unsigned char *)(v3 + 80);
  char v11 = *(unsigned char *)(v3 + 81);
  uint64_t v12 = *(void *)(v3 + 88);
  a1[3] = (uint64_t)&type metadata for ClockSource;
  a1[4] = sub_100023848();
  uint64_t v13 = swift_allocObject();
  *a1 = v13;
  *(unsigned char *)(v13 + 18) = v4;
  *(_WORD *)(v13 + 16) = v15;
  *(void *)(v13 + 24) = v5;
  *(void *)(v13 + 32) = v6;
  *(_WORD *)(v13 + 40) = v7;
  *(void *)(v13 + 48) = v8;
  *(void *)(v13 + 56) = v9;
  *(unsigned char *)(v13 + 64) = v10;
  *(unsigned char *)(v13 + 65) = v11;
  *(void *)(v13 + 72) = v12;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_100028D08()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_100028D54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  swift_beginAccess();
  *(void *)(v4 + 136) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*sub_100028DBC(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  v3[5] = *v1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v6 = *(void *)(v4 + 136);
  v3[3] = Strong;
  v3[4] = v6;
  return sub_1000236A4;
}

void sub_100028E40(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 136) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t sub_100028EC4()
{
  return *(void *)(*(void *)v0 + 40);
}

uint64_t sub_100028ED0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

void sub_100028F04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  swift_beginAccess();
  *(void *)(v4 + 136) = a2;
  swift_unknownObjectWeakAssign();
  ActiveClockSource.refresh()();
}

void sub_100028F78(unsigned __int8 a1, uint64_t a2)
{
}

void sub_100028F9C(char *a1, char a2)
{
}

void sub_100028FA4(Swift::UInt64 a1)
{
}

uint64_t ActiveClockSelector.staticClockSelector.getter@<X0>(uint64_t a1@<X8>)
{
  __int16 v2 = *(_WORD *)(v1 + 16);
  __int16 v3 = *(_WORD *)(v1 + 40);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = *(void *)(v1 + 64);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(v1 + 18);
  *(_WORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 24);
  *(_WORD *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t ActiveClockSelector.curSelection.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t ActiveClockSelector.curSelection.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 72) = a1;
  return result;
}

uint64_t (*ActiveClockSelector.curSelection.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t ActiveClockSelector.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ActiveClockSelector.staticClockEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_100029158((uint64_t (*)(void))sub_10002D4C0, a1);
}

uint64_t ActiveClockSelector.staticEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_100029158((uint64_t (*)(void))sub_10002D55C, a1);
}

uint64_t sub_100029158@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  __int16 v4 = *(_WORD *)(v2 + 16);
  char v5 = *(unsigned char *)(v2 + 18);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 32);
  __int16 v8 = *(_WORD *)(v2 + 40);
  uint64_t v9 = *(void *)(v2 + 48);
  uint64_t v10 = *(void *)(v2 + 56);
  uint64_t v11 = *(void *)(v2 + 64);
  a2[3] = (uint64_t)&type metadata for ClockSelector;
  a2[4] = a1();
  uint64_t v12 = swift_allocObject();
  *a2 = v12;
  *(unsigned char *)(v12 + 18) = v5;
  *(_WORD *)(v12 + 16) = v4;
  *(void *)(v12 + 24) = v6;
  *(void *)(v12 + 32) = v7;
  *(_WORD *)(v12 + 40) = v8;
  *(void *)(v12 + 48) = v9;
  *(void *)(v12 + 56) = v10;
  *(void *)(v12 + 64) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t MixerUnit.inputSources.getter()
{
  return swift_bridgeObjectRetain();
}

void *ActiveClockSelector.selectorControl.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 112);
  id v2 = v1;
  return v1;
}

void ActiveClockSelector.selectorControl.setter(uint64_t a1)
{
  swift_beginAccess();
  __int16 v3 = *(void **)(v1 + 112);
  *(void *)(v1 + 112) = a1;
}

uint64_t (*ActiveClockSelector.selectorControl.modify())()
{
  return j_j__swift_endAccess;
}

void ActiveClockSelector.start(on:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v43 = type metadata accessor for Mirror();
  uint64_t v7 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v2[13] = a2;
  swift_unknownObjectWeakAssign();
  if (*(void *)(v2[7] + 16) < 2uLL) {
    return;
  }
  uint64_t v10 = v2[8];
  if (!v10) {
    return;
  }
  uint64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
LABEL_18:
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v22 = 12;
    *(void *)(v22 + 8) = 0;
    *(void *)(v22 + 16) = 0xE000000000000000;
    *(void *)(v22 + 24) = 0x6E6F287472617473;
    *(void *)(v22 + 32) = 0xEA0000000000293ALL;
    *(void *)(v22 + 40) = 0xD00000000000001BLL;
    *(void *)(v22 + 48) = 0x80000001000E26F0;
    *(void *)(v22 + 56) = 361;
    swift_willThrow();
    return;
  }
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  Swift::String v36 = v2;
  uint64_t v37 = v4;
  uint64_t v38 = &v49;
  os_signpost_type_t v42 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = 32;
  uint64_t v41 = v12;
  while (1)
  {
    uint64_t v51 = v11;
    uint64_t v44 = v13;
    __int16 v14 = (unsigned __int16 *)(v12 + v13);
    int v15 = *((unsigned __int8 *)v14 + 2);
    int v16 = *v14;
    *((void *)&v49 + 1) = &type metadata for USBDescriptorControl;
    int v39 = v16;
    int v40 = v15;
    BYTE2(v48) = v15;
    LOWORD(v48) = v16;
    Mirror.init(reflecting:)();
    uint64_t v17 = v9;
    Mirror.children.getter();
    swift_getObjectType();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v18 = dispatch thunk of _AnyIndexBox._typeID.getter();
    swift_getObjectType();
    if (v18 != dispatch thunk of _AnyIndexBox._typeID.getter())
    {
      __break(1u);
      return;
    }
    char v19 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_unknownObjectRelease();
    if (v19)
    {
      swift_unknownObjectRelease();
      long long v49 = 0u;
      long long v50 = 0u;
      long long v48 = 0u;
    }
    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter();
      long long v48 = v45;
      long long v49 = v46;
      long long v50 = v47;
      swift_unknownObjectRelease();
    }
    uint64_t v9 = v17;
    swift_release();
    (*v42)(v17, v43);
    if (!*((void *)&v50 + 1))
    {
      sub_10001A918((uint64_t)&v48, &qword_100127CD0);
      goto LABEL_6;
    }
    long long v20 = v48;
    sub_10001ABC4((uint64_t)v38);
    if (!*((void *)&v20 + 1)) {
      goto LABEL_6;
    }
    if (v20 == __PAIR128__(0xE800000000000000, 0x726F7463656C6573)) {
      break;
    }
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_20;
    }
LABEL_6:
    uint64_t v13 = v44 + 3;
    uint64_t v11 = v51 - 1;
    uint64_t v12 = v41;
    if (v51 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease();
LABEL_20:
  int v23 = v39 | (v40 << 16);
  swift_bridgeObjectRelease();
  uint64_t ObjectType = swift_getObjectType();
  *((void *)&v49 + 1) = type metadata accessor for ActiveClockSelector();
  *(void *)&long long v50 = &protocol witness table for ActiveClockSelector;
  uint64_t v25 = v36;
  *(void *)&long long v48 = v36;
  uint64_t v26 = v35;
  int v27 = *(uint64_t (**)(void, void, void, long long *, uint64_t, uint64_t))(v35 + 144);
  swift_retain();
  uint64_t v28 = v37;
  __int16 v29 = v27(v23 & 0xFFFFFF, 0, 0, &v48, ObjectType, v26);
  if (v28)
  {
    sub_10001ABC4((uint64_t)&v48);
  }
  else
  {
    __int16 v31 = v29;
    long long v32 = v30;
    sub_10001ABC4((uint64_t)&v48);
    ADCControlRequestParameterBlock.getCur()(v32, v31 & 0x1FF, (uint64_t)&v48);

    sub_10000AC7C(&qword_100127EB8);
    if (swift_dynamicCast())
    {
      char v33 = v45;
      swift_beginAccess();
      *((unsigned char *)v25 + 72) = v33;
    }
  }
}

id ActiveClockSelector.audioControlsAndProperties(scope:for:)(int a1)
{
  return sub_10002C5AC(a1);
}

uint64_t sub_1000297F4(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  ActiveControlInterface.entity(at:)(a2, (uint64_t)v14);
  if (v14[3])
  {
    sub_10000AC7C(&qword_100127B28);
    type metadata accessor for ActiveClockSource();
    if ((swift_dynamicCast() & 1) == 0 || !*(void *)(v13 + 104)) {
      goto LABEL_10;
    }
    BOOL v6 = __OFADD__(a1++, 1);
    char v7 = v6;
    swift_bridgeObjectRetain();
    if ((v7 & 1) == 0) {
      goto LABEL_12;
    }
    __break(1u);
  }
  sub_10001A918((uint64_t)v14, &qword_100127E98);
LABEL_10:
  v14[0] = 0;
  v14[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v14, "Unknown Clock ");
  HIBYTE(v14[1]) = -18;
  BOOL v6 = __OFADD__(a1++, 1);
  if (v6)
  {
    __break(1u);
    goto LABEL_19;
  }
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_12:
  if ((a1 & 0x8000000000000000) != 0 || HIDWORD(a1)) {
    goto LABEL_20;
  }
  uint64_t v9 = self;
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v9 withValue:a1 andName:v10];

  if (!v11)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_release();
}

uint64_t sub_100029A7C()
{
  unint64_t v83 = (void *)type metadata accessor for Mirror();
  uint64_t v2 = *(v83 - 1);
  __chkstk_darwin(v83);
  uint64_t v4 = &v69[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v5 = 0;
  uint64_t v82 = *(void *)(v0 + 56);
  if (*(void *)(v82 + 16) == 1) {
    goto LABEL_4;
  }
  swift_beginAccess();
  uint64_t v6 = *(void *)(v0 + 112);
  if (v6)
  {
    char v7 = (unsigned int *)(v6 + OBJC_IVAR____TtC9AUASDCore23AUAClockSelectorControl_curSelection);
    swift_beginAccess();
    unint64_t v5 = *v7 - 1;
    goto LABEL_4;
  }
  int v15 = *(unsigned char **)(v0 + 64);
  if (!v15) {
    goto LABEL_28;
  }
  int v16 = (unsigned char *)*((void *)v15 + 2);
  if (!v16) {
    goto LABEL_28;
  }
  uint64_t v76 = v0;
  long long v77 = &v91;
  long long v80 = (unsigned char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t v9 = 32;
  int v81 = v15;
  while (1)
  {
    char v84 = v16;
    int v17 = v15[v9 + 2];
    int v18 = *(unsigned __int16 *)&v15[v9];
    *((void *)&v91 + 1) = &type metadata for USBDescriptorControl;
    LODWORD(v79) = v17;
    BYTE2(v90) = v17;
    LODWORD(v78) = v18;
    LOWORD(v90) = v18;
    Mirror.init(reflecting:)();
    unint64_t v5 = (unint64_t)v4;
    uint64_t v1 = *(unsigned char **)(Mirror.children.getter() + 40);
    swift_getObjectType();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v4 = (unsigned char *)dispatch thunk of _AnyIndexBox._typeID.getter();
    swift_getObjectType();
    if (v4 != (unsigned char *)dispatch thunk of _AnyIndexBox._typeID.getter())
    {
      __break(1u);
      goto LABEL_42;
    }
    char v19 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_unknownObjectRelease();
    if (v19)
    {
      swift_unknownObjectRelease();
      long long v91 = 0u;
      long long v92 = 0u;
      long long v90 = 0u;
    }
    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter();
      long long v90 = v87;
      long long v91 = v88;
      long long v92 = v89;
      swift_unknownObjectRelease();
    }
    uint64_t v4 = (unsigned char *)v5;
    int v15 = v81;
    uint64_t v1 = v84;
    swift_release();
    (*(void (**)(unsigned char *, void *))v80)(v4, v83);
    if (*((void *)&v92 + 1)) {
      break;
    }
    sub_10001A918((uint64_t)&v90, &qword_100127CD0);
LABEL_16:
    v9 += 3;
    int v16 = v1 - 1;
    if (!v16)
    {
      swift_bridgeObjectRelease();
LABEL_28:
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v13 = 12;
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0xE000000000000000;
      strcpy((char *)(v13 + 24), "selectedClock");
      *(_WORD *)(v13 + 38) = -4864;
      *(void *)(v13 + 40) = 0xD00000000000001BLL;
      *(void *)(v13 + 48) = 0x80000001000E26F0;
      uint64_t v14 = 428;
LABEL_29:
      *(void *)(v13 + 56) = v14;
      swift_willThrow();
      sub_10000AC7C(&qword_100127410);
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_1000E8090;
      swift_getErrorValue();
      uint64_t v23 = v93;
      uint64_t v24 = v94;
      *(void *)(v22 + 56) = v94;
      uint64_t v25 = sub_10002D9D4((uint64_t *)(v22 + 32));
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v25, v23, v24);
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      return 0;
    }
  }
  long long v20 = v90;
  sub_10001ABC4((uint64_t)v77);
  if (!*((void *)&v20 + 1)) {
    goto LABEL_16;
  }
  if (v20 != __PAIR128__(0xE800000000000000, 0x726F7463656C6573))
  {
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_30;
    }
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
LABEL_30:
  swift_bridgeObjectRelease();
  uint64_t v0 = v76;
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    unsigned int v26 = v78 | (v79 << 16);
    uint64_t v27 = *(void *)(v0 + 104);
    uint64_t ObjectType = swift_getObjectType();
    *((void *)&v91 + 1) = type metadata accessor for ActiveClockSelector();
    *(void *)&long long v92 = &protocol witness table for ActiveClockSelector;
    *(void *)&long long v90 = v0;
    __int16 v29 = *(uint64_t (**)(void, void, void, long long *, uint64_t, uint64_t))(v27 + 144);
    swift_retain();
    __int16 v30 = v29(v26 & 0xFFFFFF, 0, 0, &v90, ObjectType, v27);
    long long v32 = v31;
    swift_unknownObjectRelease();
    sub_10001ABC4((uint64_t)&v90);
    ADCControlRequestParameterBlock.getCur()(v32, v30 & 0x1FF, (uint64_t)&v90);
    id v78 = v32;
    unint64_t v5 = *((void *)&v91 + 1);
    char v33 = sub_10001A974(&v90, *((uint64_t *)&v91 + 1));
    long long v80 = v69;
    uint64_t v34 = *(long long **)(v5 - 8);
    uint64_t v35 = (unsigned char *)*((void *)v34 + 8);
    __chkstk_darwin(v33);
    unint64_t v36 = (unint64_t)(v35 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v37 = (void (*)(unsigned char *))*((void *)v34 + 2);
    v37(&v69[-v36]);
    uint64_t v38 = dispatch thunk of static BinaryInteger.isSigned.getter();
    char v39 = v38;
    long long v79 = v69;
    int v81 = v35;
    __chkstk_darwin(v38);
    int v40 = &v69[-v36];
    uint64_t v41 = &v69[-v36];
    char v84 = v37;
    ((void (*)(unsigned char *, unsigned char *, unint64_t))v37)(&v69[-v36], &v69[-v36], v5);
    if (v39)
    {
      uint64_t v42 = dispatch thunk of BinaryInteger.bitWidth.getter();
      long long v77 = v34;
      unint64_t v83 = (void *)*((void *)v34 + 1);
      uint64_t v43 = ((uint64_t (*)(unsigned char *, unint64_t))v83)(v40, v5);
      if (v42 > 64)
      {
        long long v75 = v69;
        uint64_t v9 = (uint64_t)v81;
        __chkstk_darwin(v43);
        uint64_t v4 = &v69[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
        uint64_t v1 = &v69[-v36];
        ((void (*)(unsigned char *, unsigned char *, unint64_t))v84)(v4, v41, v5);
        int64_t v86 = 0x8000000000000000;
        if (dispatch thunk of static BinaryInteger.isSigned.getter())
        {
          uint64_t v44 = dispatch thunk of BinaryInteger.bitWidth.getter();
          long long v45 = &v69[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
          if (v44 < 64) {
            goto LABEL_50;
          }
          goto LABEL_46;
        }
        goto LABEL_44;
      }
      uint64_t v4 = v77;
      long long v46 = (void (*)(unsigned char *, unint64_t))v83;
    }
    else
    {
      long long v46 = (void (*)(unsigned char *, unint64_t))*((void *)v34 + 1);
      v46(v40, v5);
      uint64_t v4 = v34;
    }
    uint64_t v1 = v41;
    uint64_t v9 = (uint64_t)v81;
    goto LABEL_55;
  }
  unint64_t v5 = 0;
LABEL_4:
  while (2)
  {
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (!Strong) {
      goto LABEL_70;
    }
    uint64_t v9 = Strong;
    uint64_t v10 = *(void *)(v0 + 104);
    uint64_t v11 = swift_getObjectType();
    if ((v5 & 0x8000000000000000) != 0)
    {
LABEL_42:
      __break(1u);
    }
    else if (v5 < *(void *)(v82 + 16))
    {
      sub_1000317E8(*(void *)(v82 + 8 * v5 + 32), v11, v10, (uint64_t)&v90);
      swift_unknownObjectRelease();
      if (*((void *)&v91 + 1))
      {
        sub_10000AC7C(&qword_100127B28);
        sub_10000AC7C(&qword_1001284E8);
        if (swift_dynamicCast()) {
          return v85;
        }
      }
      else
      {
        sub_10001A918((uint64_t)&v90, &qword_100127E98);
      }
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v13 = 53;
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0xE000000000000000;
      strcpy((char *)(v13 + 24), "selectedClock");
      *(_WORD *)(v13 + 38) = -4864;
      *(void *)(v13 + 40) = 0xD00000000000001BLL;
      *(void *)(v13 + 48) = 0x80000001000E26F0;
      uint64_t v14 = 442;
      goto LABEL_29;
    }
    __break(1u);
LABEL_44:
    char v47 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v44 = dispatch thunk of BinaryInteger.bitWidth.getter();
    long long v45 = v4;
    if (v47)
    {
      if (v44 <= 64) {
        goto LABEL_52;
      }
LABEL_46:
      __chkstk_darwin(v44);
      sub_100020748();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v48 = dispatch thunk of static Comparable.< infix(_:_:)();
      long long v49 = (void (*)(unsigned char *, unint64_t))v83;
      ((void (*)(unsigned char *, unint64_t))v83)(&v69[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
      v49(v45, v5);
      long long v46 = v49;
      if (v48) {
        goto LABEL_51;
      }
    }
    else if (v44 < 64)
    {
LABEL_50:
      uint64_t v50 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v51 = v83;
      ((void (*)(unsigned char *, unint64_t))v83)(v45, v5);
      long long v46 = (void (*)(unsigned char *, unint64_t))v51;
      if (v50 < v86)
      {
        do
        {
LABEL_51:
          __break(1u);
LABEL_52:
          uint64_t v73 = v45;
          uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          uint64_t v74 = v69;
          __chkstk_darwin(AssociatedTypeWitness);
          swift_getAssociatedConformanceWitness();
          uint64_t v53 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
          uint64_t v71 = v69;
          __chkstk_darwin(v53);
          unint64_t v72 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
          uint64_t v54 = &v69[-v72];
          dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
          Swift::String v55 = v73;
          int v70 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v4 = v83;
          uint64_t v56 = ((uint64_t (*)(unsigned char *, unint64_t))v83)(v54, v5);
          uint64_t v74 = v69;
          __chkstk_darwin(v56);
          uint64_t v0 = (uint64_t)&v69[-v72];
          (*((void (**)(unsigned char *, unsigned char *, unint64_t))v77 + 4))(&v69[-v72], v55, v5);
          if (v70) {
            goto LABEL_72;
          }
          long long v45 = (unsigned char *)v86;
          uint64_t v57 = dispatch thunk of BinaryInteger._lowWord.getter();
          ((void (*)(uint64_t, unint64_t))v4)(v0, v5);
          long long v46 = (void (*)(unsigned char *, unint64_t))v4;
        }
        while (v57 < (uint64_t)v45);
      }
    }
    else
    {
      Swift::String v58 = v83;
      ((void (*)(unsigned char *, unint64_t))v83)(v4, v5);
      long long v46 = (void (*)(unsigned char *, unint64_t))v58;
    }
    uint64_t v4 = v77;
LABEL_55:
    uint64_t v59 = dispatch thunk of BinaryInteger.bitWidth.getter();
    __chkstk_darwin(v59);
    ((void (*)(unsigned char *, unsigned char *, unint64_t))v84)(&v69[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v1, v5);
    if (v59 >= 65)
    {
      uint64_t v60 = ((uint64_t (*)(unsigned char *, unint64_t))v46)(&v69[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
      goto LABEL_57;
    }
    uint64_t v64 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v46(&v69[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
    if (v64 == 64)
    {
      uint64_t v60 = dispatch thunk of static BinaryInteger.isSigned.getter();
      if ((v60 & 1) == 0)
      {
LABEL_57:
        unint64_t v83 = v46;
        int v81 = v69;
        __chkstk_darwin(v60);
        ((void (*)(unsigned char *, unsigned char *, unint64_t))v84)(&v69[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v1, v5);
        int64_t v86 = 0x7FFFFFFFFFFFFFFFLL;
        char v61 = dispatch thunk of static BinaryInteger.isSigned.getter();
        uint64_t v62 = dispatch thunk of BinaryInteger.bitWidth.getter();
        if (v61)
        {
          if (v62 > 64)
          {
            __chkstk_darwin(v62);
            sub_100020748();
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
            uint64_t v0 = dispatch thunk of static Comparable.< infix(_:_:)();
            uint64_t v63 = (void (*)(unsigned char *, unint64_t))v83;
            ((void (*)(unsigned char *, unint64_t))v83)(&v69[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
            long long v46 = v63;
            v63(&v69[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
            if (v0) {
              goto LABEL_71;
            }
            goto LABEL_67;
          }
        }
        else if (v62 > 63)
        {
          long long v77 = (long long *)v69;
          uint64_t v85 = 0x7FFFFFFFFFFFFFFFLL;
          __chkstk_darwin(v62);
          unint64_t v65 = &v69[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
          char v84 = v69;
          uint64_t v66 = (*((uint64_t (**)(unsigned char *, unsigned char *, unint64_t))v4 + 4))(v65, v65, v5);
          __chkstk_darwin(v66);
          sub_100020748();
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          uint64_t v0 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v67 = (void (*)(unsigned char *, unint64_t))v83;
          ((void (*)(unsigned char *, unint64_t))v83)(v65, v5);
          v67(v65, v5);
          long long v46 = v67;
          if (v0) {
            goto LABEL_71;
          }
          goto LABEL_67;
        }
        dispatch thunk of BinaryInteger._lowWord.getter();
        long long v46 = (void (*)(unsigned char *, unint64_t))v83;
        ((void (*)(unsigned char *, unint64_t))v83)(&v69[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
      }
    }
LABEL_67:
    uint64_t v0 = (uint64_t)v1;
    uint64_t v68 = dispatch thunk of BinaryInteger._lowWord.getter();
    v46(v1, v5);

    unint64_t v5 = v68 - 1;
    if (!__OFSUB__(v68, 1))
    {
      sub_10001ABC4((uint64_t)&v90);
      uint64_t v0 = v76;
      continue;
    }
    break;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  uint64_t result = ((uint64_t (*)(uint64_t, unint64_t))v4)(v0, v5);
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveClockSelector.refresh()()
{
  if (sub_100029A7C())
  {
    uint64_t v1 = v0;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v1 + 32))(ObjectType, v1);
    swift_unknownObjectRelease();
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v3 = 78;
    *(void *)(v3 + 8) = 0;
    *(void *)(v3 + 16) = 0xE000000000000000;
    *(void *)(v3 + 24) = 0x2868736572666572;
    *(void *)(v3 + 32) = 0xE900000000000029;
    *(void *)(v3 + 40) = 0xD00000000000001BLL;
    *(void *)(v3 + 48) = 0x80000001000E26F0;
    *(void *)(v3 + 56) = 453;
    swift_willThrow();
  }
}

Swift::Void __swiftcall ActiveClockSelector.invalidateSamplingRate()()
{
  if (sub_100029A7C())
  {
    uint64_t v1 = v0;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v1 + 16) + 88))(ObjectType);
    swift_unknownObjectRelease();
  }
}

uint64_t ActiveClockSelector.rateRanges.getter()
{
  uint64_t result = sub_100029A7C();
  if (result)
  {
    uint64_t v2 = v1;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 16) + 40))(ObjectType);
    swift_unknownObjectRelease();
    return v4;
  }
  return result;
}

uint64_t ActiveClockSelector.isValid.getter()
{
  uint64_t result = sub_100029A7C();
  if (result)
  {
    uint64_t v2 = v1;
    uint64_t ObjectType = swift_getObjectType();
    LOBYTE(v2) = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 16) + 8))(ObjectType);
    swift_unknownObjectRelease();
    return v2 & 1;
  }
  return result;
}

uint64_t ActiveClockSelector.isInternal.getter()
{
  uint64_t result = sub_100029A7C();
  if (result)
  {
    uint64_t v2 = v1;
    uint64_t ObjectType = swift_getObjectType();
    LOBYTE(v2) = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 16) + 64))(ObjectType);
    swift_unknownObjectRelease();
    return v2 & 1;
  }
  return result;
}

uint64_t ActiveClockSelector.curSamplingRate.getter()
{
  if (!sub_100029A7C()) {
    return 0;
  }
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(v1 + 16) + 16))(ObjectType);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t ActiveClockSelector.curSamplingRate.setter(uint64_t a1, char a2)
{
  uint64_t result = sub_100029A7C();
  if (result)
  {
    uint64_t v6 = v5;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v6 + 16) + 24))(a1, a2 & 1, ObjectType);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t (*ActiveClockSelector.curSamplingRate.modify(uint64_t a1))(uint64_t *a1)
{
  *(void *)(a1 + 16) = v1;
  if (sub_100029A7C())
  {
    uint64_t v4 = v3;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(v4 + 16) + 16))(ObjectType);
    char v8 = v7;
    swift_unknownObjectRelease();
    char v9 = v8 & 1;
  }
  else
  {
    uint64_t v6 = 0;
    char v9 = 1;
  }
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v9;
  return sub_10002AF64;
}

uint64_t sub_10002AF64(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *((unsigned __int8 *)a1 + 8);
  uint64_t result = sub_100029A7C();
  uint64_t v5 = v4;
  if (result)
  {
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 16) + 24))(v1, v2, ObjectType);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t ActiveClockSelector.isSettable.getter()
{
  uint64_t result = sub_100029A7C();
  if (result)
  {
    uint64_t v2 = v1;
    uint64_t ObjectType = swift_getObjectType();
    LOBYTE(v2) = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 16) + 56))(ObjectType);
    swift_unknownObjectRelease();
    return v2 & 1;
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveClockSelector.prepareClockForIO(_:)(Swift::UInt64 a1)
{
  if (sub_100029A7C())
  {
    uint64_t v3 = v2;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(Swift::UInt64, uint64_t))(*(void *)(v3 + 16) + 72))(a1, ObjectType);
    swift_unknownObjectRelease();
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v5 = 78;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0xE000000000000000;
    *(void *)(v5 + 24) = 0xD000000000000015;
    *(void *)(v5 + 32) = 0x80000001000E2960;
    *(void *)(v5 + 40) = 0xD00000000000001BLL;
    *(void *)(v5 + 48) = 0x80000001000E26F0;
    *(void *)(v5 + 56) = 508;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveClockSelector.finalizeClockForIO(_:)(Swift::UInt64 a1)
{
  if (sub_100029A7C())
  {
    uint64_t v3 = v2;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(Swift::UInt64, uint64_t))(*(void *)(v3 + 16) + 80))(a1, ObjectType);
    swift_unknownObjectRelease();
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v5 = 78;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0xE000000000000000;
    *(void *)(v5 + 24) = 0xD000000000000016;
    *(void *)(v5 + 32) = 0x80000001000E29A0;
    *(void *)(v5 + 40) = 0xD00000000000001BLL;
    *(void *)(v5 + 48) = 0x80000001000E26F0;
    *(void *)(v5 + 56) = 513;
    swift_willThrow();
  }
}

uint64_t ActiveClockSelector.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001DEAC(v0 + 96);

  return v0;
}

uint64_t ActiveClockSelector.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001DEAC(v0 + 96);

  return swift_deallocClassInstance();
}

uint64_t sub_10002B304@<X0>(uint64_t *a1@<X8>)
{
  __int16 v3 = *(_WORD *)(v1 + 16);
  char v4 = *(unsigned char *)(v1 + 18);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  __int16 v7 = *(_WORD *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  uint64_t v10 = *(void *)(v1 + 64);
  a1[3] = (uint64_t)&type metadata for ClockSelector;
  a1[4] = sub_10002D4C0();
  uint64_t v11 = swift_allocObject();
  *a1 = v11;
  *(unsigned char *)(v11 + 18) = v4;
  *(_WORD *)(v11 + 16) = v3;
  *(void *)(v11 + 24) = v5;
  *(void *)(v11 + 32) = v6;
  *(_WORD *)(v11 + 40) = v7;
  *(void *)(v11 + 48) = v8;
  *(void *)(v11 + 56) = v9;
  *(void *)(v11 + 64) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

void sub_10002B3C4()
{
}

uint64_t sub_10002B3DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  __int16 v4 = *(_WORD *)(*v1 + 16);
  char v5 = *(unsigned char *)(*v1 + 18);
  uint64_t v6 = *(void *)(*v1 + 24);
  uint64_t v7 = *(void *)(*v1 + 32);
  __int16 v8 = *(_WORD *)(*v1 + 40);
  uint64_t v9 = *(void *)(*v1 + 48);
  uint64_t v10 = *(void *)(v3 + 56);
  uint64_t v11 = *(void *)(v3 + 64);
  a1[3] = (uint64_t)&type metadata for ClockSelector;
  a1[4] = sub_10002D55C();
  uint64_t v12 = swift_allocObject();
  *a1 = v12;
  *(unsigned char *)(v12 + 18) = v5;
  *(_WORD *)(v12 + 16) = v4;
  *(void *)(v12 + 24) = v6;
  *(void *)(v12 + 32) = v7;
  *(_WORD *)(v12 + 40) = v8;
  *(void *)(v12 + 48) = v9;
  *(void *)(v12 + 56) = v10;
  *(void *)(v12 + 64) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_10002B4A0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

void sub_10002B4D4(uint64_t a1, uint64_t a2)
{
}

id sub_10002B4F8(int a1)
{
  return sub_10002C5AC(a1);
}

void sub_10002B51C(Swift::UInt64 a1)
{
}

void sub_10002B534(Swift::UInt64 a1)
{
}

char *sub_10002B54C(char a1, uint64_t a2, int a3, unint64_t a4, void *a5)
{
  *(void *)&v5[OBJC_IVAR____TtC9AUASDCore23AUAClockSelectorControl_clockSelector] = a2;
  *(_DWORD *)&v5[OBJC_IVAR____TtC9AUASDCore23AUAClockSelectorControl_curSelection] = a3;
  v19.receiver = v5;
  v19.super_class = (Class)type metadata accessor for AUAClockSelectorControl();
  swift_retain();
  uint64_t result = (char *)objc_msgSendSuper2(&v19, "initWithIsSettable:forElement:inScope:withPlugin:andObjectClassID:", a1 & 1, 0, 1735159650, a5, 1668047723);
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v10 = result;
  if (a4 >> 62)
  {
    int v16 = result;
    swift_bridgeObjectRetain();
    uint64_t result = (char *)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v11 = (uint64_t)result;
    if (result) {
      goto LABEL_4;
    }
LABEL_11:
    swift_bridgeObjectRelease_n();
    int v17 = &v10[OBJC_IVAR____TtC9AUASDCore23AUAClockSelectorControl_curSelection];
    swift_beginAccess();
    int v18 = v10;
    [v18 setSelectedValues:v17 withCount:1];
    swift_endAccess();

    swift_release();
    return v18;
  }
  uint64_t v11 = *(void *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v12 = result;
  uint64_t result = (char *)swift_bridgeObjectRetain();
  if (!v11) {
    goto LABEL_11;
  }
LABEL_4:
  if (v11 >= 1)
  {
    for (uint64_t i = 0; i != v11; ++i)
    {
      if ((a4 & 0xC000000000000001) != 0) {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v14 = *(id *)(a4 + 8 * i + 32);
      }
      int v15 = v14;
      [v10 addValue:v14];
    }
    goto LABEL_11;
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

id AUAClockSelectorControl.changeValues(_:withCount:)(uint64_t a1, uint64_t a2)
{
  return [v2 setSelectedValues:a1 withCount:a2];
}

Swift::Void __swiftcall AUAClockSelectorControl.selectionDidChange(_:)(Swift::OpaquePointer_optional a1)
{
  uint64_t v2 = (uint64_t)v1;
  unint64_t rawValue = (unint64_t)a1.value._rawValue;
  uint64_t v4 = type metadata accessor for Mirror();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [v1 owner];
  if (!v8) {
    return;
  }
  id v62 = v8;
  type metadata accessor for AUAAudioDevice(0);
  uint64_t v9 = swift_dynamicCastClass();
  if (!v9 || !rawValue)
  {
    id v15 = v62;

    return;
  }
  uint64_t v10 = v9;
  if (rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v43 > 2) {
      goto LABEL_6;
    }
    *(void *)&long long v66 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    if (v11) {
      goto LABEL_11;
    }
LABEL_53:
    swift_bridgeObjectRelease();
    unint64_t v19 = (unint64_t)_swiftEmptyArrayStorage;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62)) {
      goto LABEL_23;
    }
LABEL_54:
    swift_bridgeObjectRetain();
    uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v44 == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v45)
      {
        swift_bridgeObjectRelease();
        sub_10000CD54();
        uint64_t v13 = swift_allocError();
        *(unsigned char *)uint64_t v12 = 1;
        *(void *)(v12 + 8) = 0;
        *(void *)(v12 + 16) = 0xE000000000000000;
        *(void *)(v12 + 24) = 0xD000000000000016;
        *(void *)(v12 + 32) = 0x80000001000E29C0;
        *(void *)(v12 + 40) = 0xD00000000000001BLL;
        *(void *)(v12 + 48) = 0x80000001000E26F0;
        uint64_t v14 = 559;
        goto LABEL_58;
      }
      goto LABEL_24;
    }
LABEL_57:
    swift_bridgeObjectRelease();
    sub_10000CD54();
    uint64_t v13 = swift_allocError();
    *(unsigned char *)uint64_t v12 = 1;
    *(void *)(v12 + 8) = 0;
    *(void *)(v12 + 16) = 0xE000000000000000;
    *(void *)(v12 + 24) = 0xD000000000000016;
    *(void *)(v12 + 32) = 0x80000001000E29C0;
    *(void *)(v12 + 40) = 0xD00000000000001BLL;
    *(void *)(v12 + 48) = 0x80000001000E26F0;
    uint64_t v14 = 558;
    goto LABEL_58;
  }
  uint64_t v11 = *(void *)((rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
  if ((unint64_t)v11 > 2)
  {
LABEL_6:
    sub_10000CD54();
    uint64_t v13 = swift_allocError();
    *(unsigned char *)uint64_t v12 = 1;
    *(void *)(v12 + 8) = 0;
    *(void *)(v12 + 16) = 0xE000000000000000;
    *(void *)(v12 + 24) = 0xD000000000000016;
    *(void *)(v12 + 32) = 0x80000001000E29C0;
    *(void *)(v12 + 40) = 0xD00000000000001BLL;
    *(void *)(v12 + 48) = 0x80000001000E26F0;
    uint64_t v14 = 556;
LABEL_58:
    *(void *)(v12 + 56) = v14;
    swift_willThrow();
    goto LABEL_59;
  }
  *(void *)&long long v66 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  if (!v11) {
    goto LABEL_53;
  }
LABEL_11:
  uint64_t v61 = v4;
  uint64_t v58 = v10;
  uint64_t v59 = v1;
  if (v11 < 1) {
    goto LABEL_62;
  }
  for (uint64_t i = 0; i != v11; ++i)
  {
    if ((rawValue & 0xC000000000000001) != 0) {
      id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v17 = *(id *)(rawValue + 8 * i + 32);
    }
    int v18 = v17;
    if ([v17 selected])
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v66 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v66 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v19 = v66;
  uint64_t v10 = v58;
  uint64_t v2 = (uint64_t)v59;
  uint64_t v4 = v61;
  if ((unint64_t)v66 >> 62) {
    goto LABEL_54;
  }
LABEL_23:
  if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) != 1) {
    goto LABEL_57;
  }
LABEL_24:
  if ((v19 & 0xC000000000000001) != 0) {
    goto LABEL_63;
  }
  if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    return;
  }
  for (id j = *(id *)(v19 + 32); ; id j = (id)specialized _ArrayBuffer._getElementSlowPath(_:)())
  {
    char v21 = j;
    swift_bridgeObjectRelease();
    unsigned int v22 = [v21 value];
    uint64_t v23 = *(void *)(v2 + OBJC_IVAR____TtC9AUASDCore23AUAClockSelectorControl_clockSelector);
    if (*(void *)(*(void *)(v23 + 56) + 16) < (unint64_t)v22)
    {
      sub_10000CD54();
      uint64_t v13 = swift_allocError();
      *(unsigned char *)uint64_t v24 = 62;
      *(void *)(v24 + 8) = 0;
      *(void *)(v24 + 16) = 0xE000000000000000;
      *(void *)(v24 + 24) = 0xD000000000000016;
      *(void *)(v24 + 32) = 0x80000001000E29C0;
      *(void *)(v24 + 40) = 0xD00000000000001BLL;
      *(void *)(v24 + 48) = 0x80000001000E26F0;
      uint64_t v25 = 561;
LABEL_47:
      *(void *)(v24 + 56) = v25;
      swift_willThrow();

      goto LABEL_59;
    }
    uint64_t v26 = *(void *)(v10 + OBJC_IVAR___AUAAudioDevice_function);
    if (!v26)
    {
      sub_10000CD54();
      uint64_t v13 = swift_allocError();
      *(unsigned char *)uint64_t v24 = 61;
      *(void *)(v24 + 8) = 0;
      *(void *)(v24 + 16) = 0xE000000000000000;
      *(void *)(v24 + 24) = 0xD000000000000016;
      *(void *)(v24 + 32) = 0x80000001000E29C0;
      *(void *)(v24 + 40) = 0xD00000000000001BLL;
      *(void *)(v24 + 48) = 0x80000001000E26F0;
      uint64_t v25 = 562;
      goto LABEL_47;
    }
    uint64_t v27 = *(void *)(v23 + 64);
    id v52 = v21;
    if (!v27) {
      break;
    }
    uint64_t v28 = *(void *)(v27 + 16);
    if (!v28) {
      break;
    }
    unsigned int v50 = v22;
    uint64_t v58 = v10;
    uint64_t v59 = (void *)v2;
    uint64_t v49 = *(void *)(v10 + OBJC_IVAR___AUAAudioDevice_function + 8);
    uint64_t v53 = &v67;
    uint64_t v56 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v51 = v26;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v10 = 32;
    uint64_t v61 = v4;
    uint64_t v57 = v27;
    while (1)
    {
      uint64_t v60 = v28;
      int v29 = *(unsigned __int8 *)(v27 + v10 + 2);
      int v30 = *(unsigned __int16 *)(v27 + v10);
      *((void *)&v67 + 1) = &type metadata for USBDescriptorControl;
      int v54 = v30;
      int v55 = v29;
      BYTE2(v66) = v29;
      LOWORD(v66) = v30;
      Mirror.init(reflecting:)();
      uint64_t v5 = Mirror.children.getter();
      uint64_t v4 = *(void *)(v5 + 32);
      swift_getObjectType();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v2 = dispatch thunk of _AnyIndexBox._typeID.getter();
      swift_getObjectType();
      if (v2 != dispatch thunk of _AnyIndexBox._typeID.getter()) {
        break;
      }
      char v31 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
      swift_unknownObjectRelease();
      if (v31)
      {
        swift_unknownObjectRelease();
        long long v67 = 0u;
        long long v68 = 0u;
        long long v66 = 0u;
      }
      else
      {
        dispatch thunk of _AnyCollectionBox.subscript.getter();
        long long v66 = v63;
        long long v67 = v64;
        long long v68 = v65;
        swift_unknownObjectRelease();
      }
      uint64_t v32 = v61;
      swift_release();
      (*v56)(v7, v32);
      uint64_t v27 = v57;
      if (*((void *)&v68 + 1))
      {
        long long v33 = v66;
        sub_10001ABC4((uint64_t)v53);
        if (*((void *)&v33 + 1))
        {
          if (v33 == __PAIR128__(0xE800000000000000, 0x726F7463656C6573))
          {
            swift_bridgeObjectRelease();
LABEL_50:
            int v36 = v54 | (v55 << 16);
            swift_bridgeObjectRelease();
            uint64_t v37 = swift_allocObject();
            uint64_t v38 = v49;
            *(void *)(v37 + 16) = v51;
            *(void *)(v37 + 24) = v38;
            *(unsigned char *)(v37 + 34) = BYTE2(v36);
            *(_WORD *)(v37 + 32) = v36;
            uint64_t v39 = v58;
            int v40 = v59;
            *(void *)(v37 + 40) = v59;
            *(_DWORD *)(v37 + 48) = v50;
            *(void *)(v37 + 56) = v39;
            swift_unknownObjectRetain();
            id v41 = v40;
            id v42 = v62;
            AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)(0xD000000000000016, 0x80000001000E29C0, 0xD00000000000001BLL, 0x80000001000E26F0, 566, (uint64_t)sub_10002D61C, v37);

            swift_unknownObjectRelease();
            swift_release();
            return;
          }
          char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v34) {
            goto LABEL_50;
          }
        }
      }
      else
      {
        sub_10001A918((uint64_t)&v66, &qword_100127CD0);
      }
      v10 += 3;
      uint64_t v28 = v60 - 1;
      if (v60 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_49;
      }
    }
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    ;
  }
  swift_unknownObjectRetain();
LABEL_49:
  sub_10000CD54();
  uint64_t v13 = swift_allocError();
  *(unsigned char *)uint64_t v35 = 12;
  *(void *)(v35 + 8) = 0;
  *(void *)(v35 + 16) = 0xE000000000000000;
  *(void *)(v35 + 24) = 0xD000000000000016;
  *(void *)(v35 + 32) = 0x80000001000E29C0;
  *(void *)(v35 + 40) = 0xD00000000000001BLL;
  *(void *)(v35 + 48) = 0x80000001000E26F0;
  *(void *)(v35 + 56) = 564;
  swift_willThrow();

  swift_unknownObjectRelease();
LABEL_59:
  sub_10000AC7C(&qword_100127410);
  uint64_t v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_1000E8090;
  *(void *)&long long v66 = 0;
  *((void *)&v66 + 1) = 0xE000000000000000;
  *(void *)&long long v63 = v13;
  sub_10000AC7C(&qword_100127400);
  _print_unlocked<A, B>(_:_:)();
  long long v47 = v66;
  *(void *)(v46 + 56) = &type metadata for String;
  *(_OWORD *)(v46 + 32) = v47;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
}

void sub_10002C188(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = *(void *)(a4 + OBJC_IVAR____TtC9AUASDCore23AUAClockSelectorControl_clockSelector);
  v13[3] = type metadata accessor for ActiveClockSelector();
  v13[4] = &protocol witness table for ActiveClockSelector;
  v13[0] = v10;
  swift_retain();
  sub_100031A50(a3 & 0xFFFFFF, 0, 0, v13, a5, ObjectType, a2);
  sub_10001ABC4((uint64_t)v13);
  uint64_t v11 = (unsigned int *)(a4 + OBJC_IVAR____TtC9AUASDCore23AUAClockSelectorControl_curSelection);
  swift_beginAccess();
  *uint64_t v11 = a5;
  ActiveClockSelector.refresh()();
  if (v12)
  {
    sub_10002E81C(0xD00000000000001ALL, 0x80000001000E2650, 0xD000000000000016, (void *)0x80000001000E29C0, 0xD00000000000001BLL, 0x80000001000E26F0, 576);
    swift_errorRelease();
  }
  else
  {
    AUAAudioDevice.clockChanged()();
  }
}

id AUAClockSelectorControl.__allocating_init(isSettable:forElement:inScope:with:andObjectClassID:)(char a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v7 = [objc_allocWithZone(v5) initWithIsSettable:a1 & 1 forElement:a2 inScope:a3 withPlugin:a4 andObjectClassID:a5];

  return v7;
}

void AUAClockSelectorControl.init(isSettable:forElement:inScope:with:andObjectClassID:)()
{
}

id AUAClockSelectorControl.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AUAClockSelectorControl();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ActiveClockSource()
{
  uint64_t result = qword_1001280C8;
  if (!qword_1001280C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10002C4C4(uint64_t a1)
{
  type metadata accessor for ActiveClockSource();
  uint64_t v2 = swift_dynamicCastClass();
  if (v2)
  {
    return *(void *)(v2 + 40) == *(void *)(a1 + 40);
  }
  else
  {
    type metadata accessor for ActiveClockSelector();
    uint64_t result = swift_dynamicCastClass();
    if (!result) {
      return result;
    }
    swift_unknownObjectRetain();
    if (!sub_100029A7C())
    {
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t v6 = v5;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(v6 + 8) + 48))(ObjectType);
    swift_unknownObjectRelease();
    uint64_t v9 = *(void *)(a1 + 40);
    swift_unknownObjectRelease();
    return v8 == v9;
  }
}

id sub_10002C5AC(int a1)
{
  uint64_t v4 = v2;
  uint64_t v61 = type metadata accessor for Mirror();
  uint64_t v6 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 != 1735159650) {
    return 0;
  }
  uint64_t v9 = *(void *)(v1 + 64);
  if (!v9) {
    return 0;
  }
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return 0;
  }
  uint64_t v11 = *(void *)(v9 + 16);
  if (!v11)
  {
LABEL_19:
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v21 = 12;
    *(void *)(v21 + 8) = 0;
    *(void *)(v21 + 16) = 0xE000000000000000;
    *(void *)(v21 + 24) = 0xD000000000000026;
    *(void *)(v21 + 32) = 0x80000001000E2450;
    *(void *)(v21 + 40) = 0xD00000000000001BLL;
    *(void *)(v21 + 48) = 0x80000001000E26F0;
    *(void *)(v21 + 56) = 380;
    swift_willThrow();
LABEL_20:
    swift_unknownObjectRelease();
    return (id)ObjectType;
  }
  uint64_t v55 = Strong;
  uint64_t v52 = v4;
  uint64_t v53 = v1;
  uint64_t v54 = *(void *)(v1 + 104);
  uint64_t v56 = &v69;
  uint64_t v59 = (void (**)(char *, uint64_t))(v6 + 8);
  swift_bridgeObjectRetain();
  uint64_t v12 = 32;
  uint64_t v60 = v9;
  while (1)
  {
    uint64_t v62 = v12;
    uint64_t v63 = v11;
    uint64_t v13 = (unsigned __int16 *)(v9 + v12);
    int v14 = *((unsigned __int8 *)v13 + 2);
    LODWORD(v13) = *v13;
    *((void *)&v69 + 1) = &type metadata for USBDescriptorControl;
    int v58 = v14;
    BYTE2(v68) = v14;
    int v57 = (int)v13;
    LOWORD(v68) = (_WORD)v13;
    Mirror.init(reflecting:)();
    id v15 = v8;
    Mirror.children.getter();
    uint64_t ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v16 = dispatch thunk of _AnyIndexBox._typeID.getter();
    swift_getObjectType();
    id result = (id)dispatch thunk of _AnyIndexBox._typeID.getter();
    if ((id)v16 != result)
    {
      __break(1u);
      goto LABEL_39;
    }
    char v18 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_unknownObjectRelease();
    if (v18)
    {
      swift_unknownObjectRelease();
      long long v69 = 0u;
      long long v70 = 0u;
      long long v68 = 0u;
    }
    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter();
      long long v68 = v65;
      long long v69 = v66;
      long long v70 = v67;
      swift_unknownObjectRelease();
    }
    uint64_t v8 = v15;
    uint64_t v9 = v60;
    swift_release();
    (*v59)(v8, v61);
    if (!*((void *)&v70 + 1))
    {
      sub_10001A918((uint64_t)&v68, &qword_100127CD0);
      goto LABEL_7;
    }
    long long v19 = v68;
    sub_10001ABC4((uint64_t)v56);
    if (!*((void *)&v19 + 1)) {
      goto LABEL_7;
    }
    if (v19 == __PAIR128__(0xE800000000000000, 0x726F7463656C6573)) {
      break;
    }
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_21;
    }
LABEL_7:
    uint64_t v12 = v62 + 3;
    uint64_t v11 = v63 - 1;
    if (v63 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
  }
  swift_bridgeObjectRelease();
LABEL_21:
  swift_bridgeObjectRelease();
  uint64_t v22 = swift_getObjectType();
  uint64_t v23 = v54;
  uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 16))(v22, v54);
  if (!v24)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v32 = 51;
    *(void *)(v32 + 8) = 0;
    *(void *)(v32 + 16) = 0xE000000000000000;
    *(void *)(v32 + 24) = 0xD000000000000026;
    *(void *)(v32 + 32) = 0x80000001000E2450;
    *(void *)(v32 + 40) = 0xD00000000000001BLL;
    *(void *)(v32 + 48) = 0x80000001000E26F0;
    *(void *)(v32 + 56) = 381;
    swift_willThrow();
    goto LABEL_20;
  }
  uint64_t v25 = (void *)v24;
  int v26 = v57 | (v58 << 16);
  uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 24))(v22, v23);
  *((void *)&v69 + 1) = type metadata accessor for ActiveClockSelector();
  *(void *)&long long v70 = &protocol witness table for ActiveClockSelector;
  *(void *)&long long v68 = v53;
  uint64_t v28 = *(uint64_t (**)(uint64_t, void, void, long long *, uint64_t, uint64_t))(v23 + 144);
  uint64_t ObjectType = v26 & 0xFFFFFF;
  swift_retain();
  uint64_t v29 = v52;
  __int16 v30 = v28(ObjectType, 0, 0, &v68, v22, v23);
  if (v29)
  {
    swift_unknownObjectRelease();

    swift_release();
    sub_10001ABC4((uint64_t)&v68);
    return (id)ObjectType;
  }
  __int16 v33 = v30;
  char v34 = v31;
  sub_10001ABC4((uint64_t)&v68);
  ADCControlRequestParameterBlock.getCur()(v34, v33 & 0x1FF, (uint64_t)&v68);
  sub_10000AC7C(&qword_100127EB8);
  if (swift_dynamicCast())
  {
    char v35 = v65;
    uint64_t v36 = v53;
    swift_beginAccess();
    *(unsigned char *)(v36 + 72) = v35;
  }
  else
  {
    uint64_t v36 = v53;
  }
  uint64_t v37 = _swiftEmptyArrayStorage;
  uint64_t v71 = _swiftEmptyArrayStorage;
  uint64_t v38 = *(void *)(v36 + 56);
  uint64_t v39 = *(void *)(v38 + 16);
  if (v39)
  {
    swift_bridgeObjectRetain();
    unint64_t v40 = 0;
    do
    {
      unint64_t v41 = v40 + 1;
      sub_1000297F4(v40, *(void *)(v38 + 8 * v40 + 32), v27, &v71);
      unint64_t v40 = v41;
    }
    while (v39 != v41);
    swift_bridgeObjectRelease();
    uint64_t v37 = v71;
  }
  char v42 = LockDelay.units.getter(ObjectType);
  uint64_t v43 = v53;
  swift_beginAccess();
  int v44 = *(unsigned __int8 *)(v43 + 72);
  swift_bridgeObjectRetain();
  id result = [v25 plugin];
  if (!result)
  {
LABEL_39:
    __break(1u);
    return result;
  }
  uint64_t v45 = result;
  objc_allocWithZone((Class)type metadata accessor for AUAClockSelectorControl());
  swift_retain();
  uint64_t v46 = sub_10002B54C(v42 & 1, v43, v44, (unint64_t)v37, v45);
  swift_beginAccess();
  long long v47 = *(void **)(v43 + 112);
  *(void *)(v43 + 112) = v46;

  uint64_t v48 = *(void **)(v43 + 112);
  if (v48)
  {
    sub_10000AC7C(&qword_100127ED0);
    uint64_t v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_1000EA2E0;
    *(void *)(v49 + 32) = v48;
    uint64_t v64 = v49;
    specialized Array._endMutation()();
    uint64_t ObjectType = v64;
    id v50 = v48;
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();

    swift_release();
    return (id)ObjectType;
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  swift_release();
  return 0;
}

void sub_10002CD58(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2;
  int v6 = a1;
  uint64_t v7 = type metadata accessor for DispatchTimeInterval();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for DispatchTime();
  uint64_t v12 = __chkstk_darwin(v11);
  int v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  char v18 = (char *)&v48 - v17;
  if (v6)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v19 = 2;
    *(void *)(v19 + 8) = 0;
    *(void *)(v19 + 16) = 0xE000000000000000;
    *(void *)(v19 + 24) = 0xD000000000000042;
    *(void *)(v19 + 32) = 0x80000001000E2C80;
    *(void *)(v19 + 40) = 0xD00000000000001BLL;
    *(void *)(v19 + 48) = 0x80000001000E26F0;
    uint64_t v20 = 274;
LABEL_3:
    *(void *)(v19 + 56) = v20;
    swift_willThrow();
    return;
  }
  uint64_t v58 = v15;
  uint64_t v59 = v16;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v19 = 61;
    *(void *)(v19 + 8) = 0;
    *(void *)(v19 + 16) = 0xE000000000000000;
    *(void *)(v19 + 24) = 0xD000000000000042;
    *(void *)(v19 + 32) = 0x80000001000E2C80;
    *(void *)(v19 + 40) = 0xD00000000000001BLL;
    *(void *)(v19 + 48) = 0x80000001000E26F0;
    uint64_t v20 = 275;
    goto LABEL_3;
  }
  uint64_t v22 = Strong;
  uint64_t v56 = v8;
  uint64_t v23 = *(void *)(v4 + 136);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(ObjectType, v23);
  if (!v25)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v28 = 7;
    *(void *)(v28 + 8) = 0;
    *(void *)(v28 + 16) = 0xE000000000000000;
    *(void *)(v28 + 24) = 0xD000000000000042;
    *(void *)(v28 + 32) = 0x80000001000E2C80;
    *(void *)(v28 + 40) = 0xD00000000000001BLL;
    *(void *)(v28 + 48) = 0x80000001000E26F0;
    *(void *)(v28 + 56) = 276;
    swift_willThrow();
    swift_unknownObjectRelease();
    return;
  }
  dispatch_semaphore_t v26 = (dispatch_semaphore_t)v25;
  uint64_t v57 = v22;
  uint64_t v27 = sub_1000C7728((uint64_t (*)(void, void))v4, (uint64_t)&protocol witness table for ActiveClockSource);
  if (v3)
  {
    swift_unknownObjectRelease();
LABEL_8:

    return;
  }
  uint64_t v55 = v26;
  if (!v27)
  {
LABEL_15:
    swift_unknownObjectRelease();
    dispatch_semaphore_t v26 = v55;
    goto LABEL_8;
  }
  uint64_t v54 = v27;
  if ((sub_10002C4C4(v4) & 1) == 0)
  {
    swift_unknownObjectRelease();

    dispatch_semaphore_t v26 = v54;
    goto LABEL_8;
  }
  uint64_t v53 = (unsigned __int8 *)(v4 + 120);
  swift_beginAccess();
  LODWORD(v52) = *(unsigned __int8 *)(v4 + 120);
  uint64_t v29 = v4 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate;
  uint64_t v51 = *(void *)(v4 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate);
  int v50 = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_cachedSamplingRate + 8);
  ActiveClockSource.refresh()();
  if (!v30)
  {
    uint64_t v49 = v29;
    if (v52 == *v53)
    {
      char v31 = *(unsigned char *)(v49 + 8);
      if (v50)
      {
        if (*(unsigned char *)(v49 + 8))
        {
LABEL_20:

          goto LABEL_15;
        }
      }
      else
      {
        if (v51 != *(void *)v49) {
          char v31 = 1;
        }
        if ((v31 & 1) == 0) {
          goto LABEL_20;
        }
      }
    }
    uint64_t v60 = 0;
    uint64_t v61 = 0xE000000000000000;
    _StringGuts.grow(_:)(54);
    v32._countAndFlagsBits = 0xD000000000000018;
    v32._object = (void *)0x80000001000E2CD0;
    String.append(_:)(v32);
    uint64_t v62 = a2;
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 0x696C61567369203ALL;
    v34._object = (void *)0xEA00000000002064;
    String.append(_:)(v34);
    if (*(unsigned char *)(v4 + 120)) {
      uint64_t v35 = 1702195828;
    }
    else {
      uint64_t v35 = 0x65736C6166;
    }
    if (*(unsigned char *)(v4 + 120)) {
      unint64_t v36 = 0xE400000000000000;
    }
    else {
      unint64_t v36 = 0xE500000000000000;
    }
    unint64_t v37 = v36;
    String.append(_:)(*(Swift::String *)&v35);
    swift_bridgeObjectRelease();
    v38._countAndFlagsBits = 0x6E696C706D617320;
    v38._object = (void *)0xEE00206574615267;
    String.append(_:)(v38);
    uint64_t v39 = *(void *)v49;
    if (*(unsigned char *)(v49 + 8)) {
      uint64_t v39 = 0;
    }
    uint64_t v62 = v39;
    v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    uint64_t v52 = (void *)0x80000001000E2C80;
    uint64_t v53 = (unsigned __int8 *)0xD000000000000042;
    uint64_t v51 = 0x80000001000E26F0;
    sub_10002E804(v60, v61, 0xD000000000000042, (void *)0x80000001000E2C80, 0xD00000000000001BLL, 0x80000001000E26F0, 289);
    swift_bridgeObjectRelease();
    dispatch_semaphore_t v41 = dispatch_semaphore_create(0);
    char v42 = (void *)swift_allocObject();
    uint64_t v43 = v54;
    v42[2] = v4;
    v42[3] = v43;
    v42[4] = v41;
    swift_retain();
    int v44 = v43;
    dispatch_semaphore_t v26 = v41;
    AUAAudioDevice.requestConfigurationChangeWithTrace(function:file:line:_:)((uint64_t)v53, (unint64_t)v52, 0xD00000000000001BLL, v51, 294, (uint64_t)sub_10002DA80, (uint64_t)v42);
    swift_release();
    static DispatchTime.now()();
    *uint64_t v10 = 500;
    uint64_t v45 = v56;
    (*(void (**)(void *, void, uint64_t))(v56 + 104))(v10, enum case for DispatchTimeInterval.milliseconds(_:), v7);
    + infix(_:_:)();
    (*(void (**)(void *, uint64_t))(v45 + 8))(v10, v7);
    uint64_t v46 = v58;
    long long v47 = *(void (**)(char *, uint64_t))(v59 + 8);
    v47(v14, v58);
    OS_dispatch_semaphore.wait(timeout:)();
    v47(v18, v46);
    if (static DispatchTimeoutResult.== infix(_:_:)()) {
      sub_10002E804(0xD000000000000034, 0x80000001000E2CF0, (uint64_t)v53, v52, 0xD00000000000001BLL, v51, 306);
    }
    swift_unknownObjectRelease();

    goto LABEL_8;
  }
  swift_unknownObjectRelease();
}

unint64_t sub_10002D4C0()
{
  unint64_t result = qword_100128080;
  if (!qword_100128080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128080);
  }
  return result;
}

uint64_t sub_10002D514()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

unint64_t sub_10002D55C()
{
  unint64_t result = qword_100128088;
  if (!qword_100128088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128088);
  }
  return result;
}

uint64_t type metadata accessor for ActiveClockSelector()
{
  return self;
}

uint64_t sub_10002D5D4()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_10002D61C()
{
  sub_10002C188(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int16 *)(v0 + 32) | (*(unsigned __int8 *)(v0 + 34) << 16), *(void *)(v0 + 40), *(_DWORD *)(v0 + 48));
}

uint64_t type metadata accessor for AUAClockSelectorControl()
{
  return self;
}

unint64_t sub_10002D664()
{
  unint64_t result = qword_100128098;
  if (!qword_100128098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128098);
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for StreamingInterfaceDataFormat(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for LockDelay.LockDelayUnits(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AUAClockSourceControlSelector(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002D820);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_10002D848(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10002D850(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for AUAClockSourceControlSelector()
{
  return &type metadata for AUAClockSourceControlSelector;
}

uint64_t sub_10002D86C()
{
  return type metadata accessor for ActiveClockSource();
}

uint64_t sub_10002D874()
{
  uint64_t result = type metadata accessor for OSSignpostID();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

unint64_t sub_10002D95C()
{
  unint64_t result = qword_1001284E0;
  if (!qword_1001284E0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1001284E0);
  }
  return result;
}

uint64_t sub_10002D99C(uint64_t a1)
{
  return a1;
}

uint64_t *sub_10002D9D4(uint64_t *a1)
{
  unint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_10002DA38()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

Swift::Int sub_10002DA80()
{
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)(v1 + OBJC_IVAR____TtC9AUASDCore17ActiveClockSource_lastSamplingRateChangedTimestamp) = mach_absolute_time();
  AUAAudioDevice.clockChanged()();
  return OS_dispatch_semaphore.signal()();
}

unint64_t sub_10002DACC()
{
  unint64_t result = qword_1001284F0;
  if (!qword_1001284F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001284F0);
  }
  return result;
}

void __swiftcall AUAError.init(_:message:function:file:line:)(AUASDCore::AUAError *__return_ptr retstr, AUASDCore::AUAErrorCode _, Swift::String message, Swift::String function, Swift::String file, Swift::Int line)
{
  retstr->error = _;
  retstr->message = message;
  retstr->function = function;
  retstr->file = file;
  retstr->line = line;
}

AUASDCore::AUAExceptionLevel_optional __swiftcall AUAExceptionLevel.init(rawValue:)(Swift::UInt rawValue)
{
  if (rawValue >= 3) {
    LOBYTE(rawValue) = 3;
  }
  return (AUASDCore::AUAExceptionLevel_optional)rawValue;
}

uint64_t AUAExceptionLevel.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t *sub_10002DB54@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

void sub_10002DB6C(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL static tADCControlRequestParameterBlockLayout.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void tADCControlRequestParameterBlockLayout.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int tADCControlRequestParameterBlockLayout.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t AUAError.error.getter()
{
  return *v0;
}

uint64_t AUAError.message.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AUAError.function.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AUAError.file.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AUAError.line.getter()
{
  return *(void *)(v0 + 56);
}

Swift::Void __swiftcall AUAError.Log()()
{
  BYTE8(v5) = 0;
  *(void *)&long long v5 = *v0;
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 8250;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  uint64_t v2 = *((void *)v0 + 1);
  int v3 = (void *)*((void *)v0 + 2);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  sub_10002E81C(*(uint64_t *)((char *)&v5 + 1), 0xE000000000000000, *((void *)v0 + 3), *((void **)v0 + 4), *((void *)v0 + 5), *((void *)v0 + 6), *((void *)v0 + 7));
  swift_bridgeObjectRelease();
}

BOOL static AUAError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 a2)
{
  return *a1 == a2;
}

void AUAError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*((void *)v0 + 7));
}

Swift::Int AUAError.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*((void *)v0 + 7));
  return Hasher._finalize()();
}

Swift::Int sub_10002DEE0()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 7);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_10002DFC4()
{
  Swift::UInt v1 = *((void *)v0 + 7);
  Hasher._combine(_:)(*v0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10002E088()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 7);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t sub_10002E16C()
{
  unint64_t result = qword_1001284F8;
  if (!qword_1001284F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001284F8);
  }
  return result;
}

unint64_t sub_10002E1C4()
{
  unint64_t result = qword_100128500;
  if (!qword_100128500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128500);
  }
  return result;
}

unint64_t sub_10002E21C()
{
  unint64_t result = qword_100128508;
  if (!qword_100128508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128508);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AUAFeedbackTransferBlock.FeedbackPacketSize(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AUAExceptionLevel(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002E3CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AUAExceptionLevel()
{
  return &type metadata for AUAExceptionLevel;
}

uint64_t getEnumTagSinglePayload for AUAErrorCode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x94) {
    goto LABEL_17;
  }
  if (a2 + 108 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 108) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 108;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 108;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 108;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x6D;
  int v8 = v6 - 109;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AUAErrorCode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 108 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 108) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x94) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x93)
  {
    unsigned int v6 = ((a2 - 148) >> 8) + 1;
    *unint64_t result = a2 + 108;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002E560);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 108;
        break;
    }
  }
  return result;
}

unsigned char *sub_10002E588(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AUAErrorCode()
{
  return &type metadata for AUAErrorCode;
}

uint64_t destroy for AUAError()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AUAError(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AUAError(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for AUAError(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for AUAError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AUAError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AUAError()
{
  return &type metadata for AUAError;
}

void sub_10002E804(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void sub_10002E81C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

uint64_t sub_10002E834()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001AC94(v0, qword_10012B1F8);
  sub_10000AD60(v0, (uint64_t)qword_10012B1F8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10002E8A0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  sub_10002EC48();
  uint64_t v7 = StringProtocol.components<A>(separatedBy:)();
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = v7 + 16 * v8;
    uint64_t v11 = *(void *)(v9 + 16);
    uint64_t v10 = *(void **)(v9 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = 2128928;
  v12._object = (void *)0xE300000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = a3;
  v13._object = a4;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 2128928;
  v14._object = (void *)0xE300000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = v11;
  v15._object = v10;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 58;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  return a1;
}

void sub_10002E9F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void sub_10002EA0C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  if (qword_1001268F0 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10000AD60(v13, (uint64_t)qword_10012B1F8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  Swift::String v14 = Logger.logObject.getter();
  os_log_type_t v15 = a8();
  if (os_log_type_enabled(v14, v15))
  {
    Swift::String v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)Swift::String v16 = 136446210;
    uint64_t v17 = sub_10002E8A0(a1, a2, a3, a4);
    sub_1000192BC(v17, v18, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

unint64_t sub_10002EC48()
{
  unint64_t result = qword_100128510;
  if (!qword_100128510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128510);
  }
  return result;
}

void *sub_10002EC9C(void (*a1)(uint64_t *__return_ptr, int *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    uint64_t v22 = _swiftEmptyArrayStorage;
    sub_10007C3C4(0, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v9 = (_WORD *)(a3 + 36);
    while (1)
    {
      __int16 v10 = *v9;
      int v18 = *((_DWORD *)v9 - 1);
      __int16 v19 = v10;
      a1(&v20, &v18, &v17);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v11 = v20;
      int v12 = v21;
      uint64_t v22 = v6;
      unint64_t v14 = v6[2];
      unint64_t v13 = v6[3];
      if (v14 >= v13 >> 1)
      {
        sub_10007C3C4(v13 > 1, v14 + 1, 1);
        uint64_t v6 = v22;
      }
      v9 += 3;
      v6[2] = v14 + 1;
      os_log_type_t v15 = (char *)v6 + 12 * v14;
      *((void *)v15 + 4) = v11;
      *((_DWORD *)v15 + 10) = v12;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

void *sub_10002EDD0(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; ; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v4 = i + 1;
        if (__OFADD__(i, 1)) {
          break;
        }
        type metadata accessor for AUAStream(0);
        if (!swift_dynamicCastClass())
        {
          swift_unknownObjectRelease();
          goto LABEL_15;
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v4 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
      __break(1u);
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = v1 + 32;
      while (1)
      {
        uint64_t v7 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          break;
        }
        uint64_t v8 = *(void **)(v6 + 8 * v5);
        type metadata accessor for AUAStream(0);
        uint64_t v9 = swift_dynamicCastClass();
        if (!v9)
        {
LABEL_15:
          swift_release();
          return 0;
        }
        uint64_t v1 = v9;
        id v10 = v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        ++v5;
        if (v7 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    specialized ContiguousArray.reserveCapacity(_:)();
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return _swiftEmptyArrayStorage;
}

void *sub_10002EFB0(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  int v12 = _swiftEmptyArrayStorage;
  sub_10007C3EC(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 40)
    {
      sub_10001A9B8(i, (uint64_t)v11);
      sub_10000AC7C(&qword_100128558);
      if (!swift_dynamicCast()) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10007C3EC(0, v3[2] + 1, 1);
        uint64_t v3 = v12;
      }
      unint64_t v6 = v3[2];
      unint64_t v5 = v3[3];
      if (v6 >= v5 >> 1)
      {
        sub_10007C3EC(v5 > 1, v6 + 1, 1);
        uint64_t v3 = v12;
      }
      v3[2] = v6 + 1;
      uint64_t v7 = (char *)v3 + 6 * v6;
      *((_DWORD *)v7 + 8) = v9;
      *((_WORD *)v7 + 18) = v10;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
    return 0;
  }
  return v3;
}

BOOL sub_10002F11C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = sub_100031940(a1, a2, a3);
  if (!v4)
  {
    uint64_t v6 = v5[2];
    if (v6)
    {
      if (*(void *)(v5[5] + 136) == 257)
      {
        BOOL v3 = 1;
      }
      else
      {
        uint64_t v7 = v5 + 8;
        do
        {
          BOOL v3 = --v6 != 0;
          if (!v6) {
            break;
          }
          uint64_t v8 = *v7;
          v7 += 3;
        }
        while (*(void *)(v8 + 136) != 257);
      }
    }
    else
    {
      BOOL v3 = 0;
    }
    swift_bridgeObjectRelease();
  }
  return v3;
}

void *sub_10002F198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 136) == 257) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3);
  swift_retain();
  uint64_t v6 = sub_100035D80(v5, a1);
  swift_bridgeObjectRelease();
  swift_release();
  return v6;
}

void sub_10002F238(unsigned __int16 a1, void *a2, uint64_t a3, uint64_t (**a4)(void, void))
{
  uint64_t v23 = 0;
  uint64_t v9 = a4[2](a3, a4);
  if (v9)
  {
    __int16 v10 = (void *)v9;
    unsigned __int8 v11 = a4[16](a3, a4);
    unsigned __int8 v12 = *(unsigned char *)(*(void *)(a4[3](a3, a4) + 32) + 2);
    swift_release();
    sub_1000C864C(v11, 0, 1, a1, 0, v12, a2, (uint64_t)&v23);
    if (v4)
    {
LABEL_10:

      return;
    }
    uint64_t v13 = v23;
    id v14 = a2;
    uint64_t v15 = NSData.startIndex.getter();
    uint64_t v16 = NSData.endIndex.getter();
    uint64_t v17 = NSData.startIndex.getter();
    uint64_t v18 = NSData.endIndex.getter();
    if (v15 < v17 || v18 < v15)
    {
      __break(1u);
    }
    else
    {
      uint64_t v19 = NSData.startIndex.getter();
      uint64_t v20 = NSData.endIndex.getter();

      if (v16 >= v19 && v20 >= v16)
      {
        if (!__OFSUB__(v16, v15))
        {
          if (v13 != v16 - v15)
          {
            sub_10000CD54();
            swift_allocError();
            *(unsigned char *)uint64_t v21 = 28;
            *(void *)(v21 + 8) = 0;
            *(void *)(v21 + 16) = 0xE000000000000000;
            *(void *)(v21 + 24) = 0xD00000000000001FLL;
            *(void *)(v21 + 32) = 0x80000001000E32F0;
            *(void *)(v21 + 40) = 0xD00000000000001ELL;
            *(void *)(v21 + 48) = 0x80000001000E2E80;
            *(void *)(v21 + 56) = 811;
            swift_willThrow();
          }
          goto LABEL_10;
        }
LABEL_14:
        __break(1u);
      }
    }
    __break(1u);
    goto LABEL_14;
  }
  sub_10000CD54();
  swift_allocError();
  *(unsigned char *)uint64_t v22 = 51;
  *(void *)(v22 + 8) = 0;
  *(void *)(v22 + 16) = 0xE000000000000000;
  *(void *)(v22 + 24) = 0xD00000000000001FLL;
  *(void *)(v22 + 32) = 0x80000001000E32F0;
  *(void *)(v22 + 40) = 0xD00000000000001ELL;
  *(void *)(v22 + 48) = 0x80000001000E2E80;
  *(void *)(v22 + 56) = 801;
  swift_willThrow();
}

uint64_t ActiveFunction.functionCategory.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)((*(uint64_t (**)(void))(a2 + 24))() + 208);
  swift_release();
  return v2;
}

uint64_t sub_10002F508(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (char *)(*(uint64_t (**)(void))(a2 + 16))();
  if (v2)
  {
    BOOL v3 = v2;
    uint64_t v4 = *(void *)&v2[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
    if (v4)
    {
      BOOL v5 = sub_10001925C(16, v4);

      if (v5) {
        return 1;
      }
    }
    else
    {
    }
  }
  return 0;
}

uint64_t sub_10002F574(int a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000359A8(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, void))sub_10002F5A0);
}

void sub_10002F5A0(int a1, unint64_t a2, char a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v39 = 0;
  unsigned int v12 = a1 & 0xFFFFFF;
  AUASDCore::tADCControlRequestParameterBlockLayout v13 = USBDescriptorControl.pbLayout()();
  sub_1000852E4(v13);
  if (v6) {
    return;
  }
  Swift::String v38 = v14;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a6 + 8))(v43, a5, a6);
  sub_10001D0D8(v43);
  if (v44)
  {
    if (v44 != 48 && v44 != 32)
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v24 = 24;
      *(void *)(v24 + 8) = 0;
      *(void *)(v24 + 16) = 0xE000000000000000;
      *(void *)(v24 + 24) = 0xD000000000000028;
      *(void *)(v24 + 32) = 0x80000001000E2EA0;
      *(void *)(v24 + 40) = 0xD00000000000001ELL;
      *(void *)(v24 + 48) = 0x80000001000E2E80;
      uint64_t v25 = 521;
      goto LABEL_13;
    }
    char v15 = 1;
  }
  else
  {
    char v15 = -127;
  }
  unsigned __int8 v37 = v15;
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
  if (!v16)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v24 = 7;
    *(void *)(v24 + 8) = 0;
    *(void *)(v24 + 16) = 0xE000000000000000;
    *(void *)(v24 + 24) = 0xD000000000000028;
    *(void *)(v24 + 32) = 0x80000001000E2EA0;
    *(void *)(v24 + 40) = 0xD00000000000001ELL;
    *(void *)(v24 + 48) = 0x80000001000E2E80;
    uint64_t v25 = 523;
LABEL_13:
    *(void *)(v24 + 56) = v25;
    swift_willThrow();

    return;
  }
  unint64_t v36 = (void *)v16;
  __int16 v35 = sub_100088544(v12);
  if (a3) {
    a2 = 0;
  }
  uint64_t v18 = a4[3];
  uint64_t v17 = a4[4];
  sub_10001A974(a4, v18);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v17 + 8))(v40, v18, v17);
  uint64_t v19 = v41;
  uint64_t v20 = v42;
  sub_10001A974(v40, v41);
  unint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 16))(v19, v20);
  unsigned __int8 v22 = *(unsigned char *)(*(void *)((*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a5, a6) + 32) + 2);
  swift_release();
  id v23 = v38;
  sub_1000C80AC(v37, 1, 1, v35, a2, v21, v22, v38, (uint64_t)&v39);

  sub_10001ABC4((uint64_t)v40);
  uint64_t v26 = v39;
  id v27 = v23;
  uint64_t v28 = NSData.startIndex.getter();
  uint64_t v29 = NSData.endIndex.getter();
  uint64_t v30 = NSData.startIndex.getter();
  uint64_t v31 = NSData.endIndex.getter();
  if (v28 < v30 || v31 < v28)
  {
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
  uint64_t v32 = NSData.startIndex.getter();
  uint64_t v33 = NSData.endIndex.getter();

  if (v29 < v32 || v33 < v29) {
    goto LABEL_24;
  }
  if (__OFSUB__(v29, v28)) {
    goto LABEL_25;
  }
  if (v26 != v29 - v28)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v34 = 28;
    *(void *)(v34 + 8) = 0;
    *(void *)(v34 + 16) = 0xE000000000000000;
    *(void *)(v34 + 24) = 0xD000000000000028;
    *(void *)(v34 + 32) = 0x80000001000E2EA0;
    *(void *)(v34 + 40) = 0xD00000000000001ELL;
    *(void *)(v34 + 48) = 0x80000001000E2E80;
    *(void *)(v34 + 56) = 533;
    swift_willThrow();
  }
}

uint64_t sub_10002F9E4(int a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000359A8(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, void))sub_10002FA10);
}

void sub_10002FA10(int a1, unint64_t a2, char a3, void *a4, uint64_t a5, uint64_t a6)
{
  void (*v24)(void *__return_ptr, void, void);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  __int16 v57;
  unint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  void (*v62)(void *__return_ptr, void, void);
  uint64_t v63;
  void v64[3];
  uint64_t v65;
  uint64_t v66;
  void v67[10];
  unsigned __int8 v68;
  _OWORD v69[7];
  uint64_t v70;
  _OWORD v71[7];
  uint64_t v72;
  _OWORD v73[7];
  uint64_t v74;
  _OWORD v75[7];
  uint64_t v76;

  uint64_t v63 = 0;
  uint64_t v62 = *(void (**)(void *__return_ptr, void, void))(a6 + 8);
  v62(v67, a5, a6);
  sub_10001D0D8(v67);
  if ((v68 | 0x10) != 0x30)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v30 = 24;
    *(void *)(v30 + 8) = 0;
    *(void *)(v30 + 16) = 0xE000000000000000;
    *(void *)(v30 + 24) = 0xD00000000000002ALL;
    *(void *)(v30 + 32) = 0x80000001000E2E50;
    *(void *)(v30 + 40) = 0xD00000000000001ELL;
    *(void *)(v30 + 48) = 0x80000001000E2E80;
    *(void *)(v30 + 56) = 548;
    swift_willThrow();
    return;
  }
  uint64_t v61 = a6;
  unsigned int v13 = a1 & 0xFFFFFF;
  uint64_t v14 = USBDescriptorControl.pbLayout()();
  unsigned int v15 = v14;
  __int16 v16 = sub_100085EBC(v14, 1);
  if (!v6)
  {
    uint64_t v56 = v16;
    uint64_t v18 = *(uint64_t (**)(void, void))(v61 + 16);
    uint64_t v60 = v17;
    uint64_t v59 = a5;
    uint64_t v19 = v18(a5, v61);
    if (!v19)
    {

      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v31 = 7;
      *(void *)(v31 + 8) = 0;
      *(void *)(v31 + 16) = 0xE000000000000000;
      *(void *)(v31 + 24) = 0xD00000000000002ALL;
      *(void *)(v31 + 32) = 0x80000001000E2E50;
      *(void *)(v31 + 40) = 0xD00000000000001ELL;
      *(void *)(v31 + 48) = 0x80000001000E2E80;
      *(void *)(v31 + 56) = 551;
      swift_willThrow();

      return;
    }
    uint64_t v20 = (void *)v19;
    uint64_t v57 = sub_100088544(v13);
    unint64_t v21 = a2;
    if (a3) {
      unint64_t v21 = 0;
    }
    uint64_t v58 = v21;
    uint64_t v22 = a4[3];
    uint64_t v23 = a4[4];
    sub_10001A974(a4, v22);
    uint64_t v24 = *(void (**)(void *__return_ptr, void, void))(v23 + 8);
    uint64_t v54 = v23;
    uint64_t v55 = v22;
    v24(v64, v22, v23);
    uint64_t v25 = v65;
    uint64_t v26 = v66;
    sub_10001A974(v64, v65);
    id v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 16))(v25, v26);
    v62(v69, a5, v61);
    v75[4] = v69[4];
    v75[5] = v69[5];
    v75[6] = v69[6];
    uint64_t v76 = v70;
    v75[0] = v69[0];
    v75[1] = v69[1];
    v75[2] = v69[2];
    v75[3] = v69[3];
    sub_100035ECC(v75);
    sub_10001D0D8(v69);
    uint64_t v28 = *(unsigned char *)(*(void *)&v75[0] + 2);
    sub_100035FC8(v75);
    uint64_t v29 = v60;
    sub_1000C80AC(2u, 1, 1, v57, v58, v27, v28, v60, (uint64_t)&v63);

    sub_10001ABC4((uint64_t)v64);
    uint64_t v53 = v63;
    uint64_t v32 = NSData.startIndex.getter();
    uint64_t v33 = NSData.endIndex.getter();
    uint64_t v34 = NSData.startIndex.getter();
    __int16 v35 = NSData.endIndex.getter();
    if (v32 < v34 || v35 < v32)
    {
      __break(1u);
    }
    else
    {
      unint64_t v36 = NSData.startIndex.getter();
      unsigned __int8 v37 = NSData.endIndex.getter();

      if (v33 >= v36 && v37 >= v33)
      {
        if (!__OFSUB__(v33, v32))
        {
          if (v53 != v33 - v32)
          {

            sub_10000CD54();
            swift_allocError();
            *(unsigned char *)Swift::String v38 = 28;
            *(void *)(v38 + 8) = 0;
            *(void *)(v38 + 16) = 0xE000000000000000;
            *(void *)(v38 + 24) = 0xD00000000000002ALL;
            *(void *)(v38 + 32) = 0x80000001000E2E50;
            *(void *)(v38 + 40) = 0xD00000000000001ELL;
            *(void *)(v38 + 48) = 0x80000001000E2E80;
            uint64_t v39 = 562;
LABEL_16:
            *(void *)(v38 + 56) = v39;
            swift_willThrow();

            return;
          }
          Swift::String v40 = sub_1000736D8(v56 & 0x1FF, v60);

          if (v40 == 1)
          {
LABEL_19:

            return;
          }
          sub_100085EBC(v15, v40);
          uint64_t v42 = v41;

          uint64_t v29 = v42;
          v24(v64, v55, v54);
          uint64_t v43 = v65;
          char v44 = v66;
          sub_10001A974(v64, v65);
          uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 16))(v43, v44);
          v62(v71, v59, v61);
          v73[4] = v71[4];
          v73[5] = v71[5];
          v73[6] = v71[6];
          uint64_t v74 = v72;
          v73[0] = v71[0];
          v73[1] = v71[1];
          v73[2] = v71[2];
          v73[3] = v71[3];
          sub_100035ECC(v73);
          sub_10001D0D8(v71);
          LOBYTE(v42) = *(unsigned char *)(*(void *)&v73[0] + 2);
          sub_100035FC8(v73);
          sub_1000C80AC(2u, 1, 1, v57, v58, v45, v42, v29, (uint64_t)&v63);

          sub_10001ABC4((uint64_t)v64);
          uint64_t v46 = v63;
          long long v47 = NSData.startIndex.getter();
          uint64_t v48 = NSData.endIndex.getter();
          uint64_t v49 = NSData.startIndex.getter();
          int v50 = NSData.endIndex.getter();
          if (v47 < v49 || v50 < v47)
          {
            __break(1u);
          }
          else
          {
            uint64_t v51 = NSData.startIndex.getter();
            uint64_t v52 = NSData.endIndex.getter();

            if (v48 >= v51 && v52 >= v48)
            {
              if (!__OFSUB__(v48, v47))
              {
                if (v46 != v48 - v47)
                {
                  sub_10000CD54();
                  swift_allocError();
                  *(unsigned char *)Swift::String v38 = 28;
                  *(void *)(v38 + 8) = 0;
                  *(void *)(v38 + 16) = 0xE000000000000000;
                  *(void *)(v38 + 24) = 0xD00000000000002ALL;
                  *(void *)(v38 + 32) = 0x80000001000E2E50;
                  *(void *)(v38 + 40) = 0xD00000000000001ELL;
                  *(void *)(v38 + 48) = 0x80000001000E2E80;
                  uint64_t v39 = 575;
                  goto LABEL_16;
                }
                goto LABEL_19;
              }
LABEL_32:
              __break(1u);
              return;
            }
          }
          __break(1u);
          goto LABEL_32;
        }
LABEL_29:
        __break(1u);
      }
    }
    __break(1u);
    goto LABEL_29;
  }
}

double sub_100030184@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_1000317E8(*(void *)(a1 + 32), a2, a3, (uint64_t)v6);
  if (!v7)
  {
    sub_10001A918((uint64_t)v6, &qword_100127E98);
    goto LABEL_5;
  }
  sub_10000AC7C(&qword_100127B28);
  sub_10000AC7C(&qword_100128530);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    *(void *)(a4 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10003021C(uint64_t a1, uint64_t a2)
{
  void (*v17)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  void v41[5];
  long long v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  uint64_t ObjectType;
  long long v54;
  uint64_t v55;
  void v56[3];
  uint64_t v57;
  uint64_t v58;
  void v59[3];
  uint64_t v60;
  uint64_t v61;
  void v62[3];
  uint64_t v63;
  uint64_t v64;

  long long v47 = a1;
  uint64_t v49 = a2;
  uint64_t result = (uint64_t)sub_100033EA4(a1, a2);
  uint64_t v3 = result;
  uint64_t v46 = *(void *)(result + 16);
  if (v46)
  {
    unint64_t v4 = 0;
    uint64_t v45 = result + 32;
    BOOL v5 = _swiftEmptyArrayStorage;
    uint64_t v43 = result;
    while (v4 < *(void *)(v3 + 16))
    {
      sub_10001A9B8(v45 + 40 * v4, (uint64_t)v62);
      uint64_t v6 = v63;
      uint64_t v7 = v64;
      sub_10001A974(v62, v63);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
      *(void *)&uint64_t v54 = result;
      if (!result) {
        goto LABEL_30;
      }
      uint64_t v9 = v8;
      uint64_t v10 = v5[2];
      if (v10)
      {
        int v50 = v4;
        uint64_t ObjectType = swift_getObjectType();
        char v44 = v9;
        uint64_t v11 = *(void *)(v9 + 8);
        uint64_t v52 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
        swift_bridgeObjectRetain();
        uint64_t v51 = v5;
        unsigned int v12 = v5 + 5;
        do
        {
          uint64_t v14 = *(v12 - 1);
          uint64_t v13 = *v12;
          uint64_t v15 = swift_getObjectType();
          v56[0] = v14;
          uint64_t v16 = *(void *)(v13 + 8);
          uint64_t v17 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v16 + 8);
          swift_unknownObjectRetain();
          v17(v59, v15, v16);
          uint64_t v18 = v60;
          uint64_t v19 = v61;
          sub_10001A974(v59, v60);
          uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(v18, v19);
          uint64_t v55 = v54;
          ((void (*)(void *__return_ptr, uint64_t, uint64_t))v52)(v56, ObjectType, v11);
          uint64_t v22 = v57;
          unint64_t v21 = v58;
          sub_10001A974(v56, v57);
          uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v22, v21);
          sub_10001ABC4((uint64_t)v56);
          sub_10001ABC4((uint64_t)v59);
          swift_unknownObjectRelease();
          if (v20 == v23)
          {
            swift_unknownObjectRelease();
            BOOL v5 = v51;
            swift_bridgeObjectRelease();
            uint64_t v3 = v43;
            unint64_t v4 = v50;
            goto LABEL_4;
          }
          v12 += 2;
          --v10;
        }
        while (v10);
        BOOL v5 = v51;
        swift_bridgeObjectRelease();
        uint64_t v3 = v43;
        unint64_t v4 = v50;
        uint64_t v9 = v44;
      }
      swift_unknownObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v5 = sub_1000591C4(0, v5[2] + 1, 1, v5);
      }
      uint64_t v25 = v5[2];
      uint64_t v24 = v5[3];
      if (v25 >= v24 >> 1) {
        BOOL v5 = sub_1000591C4((void *)(v24 > 1), v25 + 1, 1, v5);
      }
      v5[2] = v25 + 1;
      uint64_t v26 = &v5[2 * v25];
      v26[4] = v54;
      v26[5] = v9;
      swift_unknownObjectRelease();
LABEL_4:
      ++v4;
      uint64_t result = sub_10001ABC4((uint64_t)v62);
      if (v4 == v46)
      {
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    BOOL v5 = _swiftEmptyArrayStorage;
LABEL_19:
    uint64_t ObjectType = v5[2];
    if (ObjectType)
    {
      uint64_t v52 = *(uint64_t (**)(uint64_t, uint64_t))(v49 + 32);
      swift_bridgeObjectRetain();
      id v27 = 0;
      uint64_t v28 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v29 = v5;
        uint64_t v54 = *(_OWORD *)&v5[2 * v27 + 4];
        uint64_t v30 = v54;
        swift_unknownObjectRetain();
        uint64_t v31 = v48;
        uint64_t v32 = v47;
        uint64_t v33 = v49;
        uint64_t v34 = v52(v47, v49);
        __chkstk_darwin(v34);
        v41[2] = v32;
        v41[3] = v33;
        v41[4] = v31;
        uint64_t v42 = v54;
        unint64_t v36 = sub_10003426C((uint64_t (*)(uint64_t *))sub_1000359DC, v41, v35);
        swift_unknownObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v28 = sub_10005909C(0, v28[2] + 1, 1, v28);
        }
        Swift::String v38 = v28[2];
        unsigned __int8 v37 = v28[3];
        BOOL v5 = v29;
        if (v38 >= v37 >> 1) {
          uint64_t v28 = sub_10005909C((void *)(v37 > 1), v38 + 1, 1, v28);
        }
        ++v27;
        uint64_t v39 = *(void *)(*((void *)&v54 + 1) + 16);
        v28[2] = v38 + 1;
        Swift::String v40 = &v28[3 * v38];
        v40[4] = v30;
        v40[5] = v39;
        v40[6] = v36;
        swift_unknownObjectRelease();
      }
      while (ObjectType != v27);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    return (uint64_t)v28;
  }
  return result;
}

uint64_t sub_100030700()
{
  return 5;
}

uint64_t sub_100030708()
{
  return 2;
}

void sub_100030710(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v6 = a2;
  uint64_t v8 = (*(uint64_t (**)(void))(a2 + 16))();
  if (!v8)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v17 = 1;
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = 0xE000000000000000;
    *(void *)(v17 + 24) = 0x6E75467472617473;
    *(void *)(v17 + 32) = 0xEF29286E6F697463;
    *(void *)(v17 + 40) = 0xD00000000000001ELL;
    *(void *)(v17 + 48) = 0x80000001000E2E80;
    *(void *)(v17 + 56) = 297;
    swift_willThrow();
    return;
  }
  uint64_t v9 = (char *)v8;
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 24);
  uint64_t v11 = v10(a1, v6);
  swift_beginAccess();
  *(void *)(v11 + 16) = v2;
  *(void *)(v11 + 24) = v6;
  swift_unknownObjectRetain();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v80 = a1;
  uint64_t v82 = v10;
  uint64_t v12 = *(void *)(v10(a1, v6) + 168);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v13 = *(void *)(v12 + 16);
  long long v79 = v9;
  uint64_t v83 = v6;
  if (v13)
  {
    uint64_t v14 = v12 + 32;
    do
    {
      sub_10001A9B8(v14, (uint64_t)v92);
      uint64_t v15 = v93;
      uint64_t v16 = v94;
      sub_1000360FC((uint64_t)v92, v93);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 64))(v2, v83, v15, v16);
      if (v3)
      {

        swift_bridgeObjectRelease();
        sub_10001ABC4((uint64_t)v92);
        return;
      }
      sub_10001ABC4((uint64_t)v92);
      v14 += 40;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    uint64_t v6 = v83;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  unint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(v80, v6);
  unint64_t v19 = v18;
  if (v18 >> 62)
  {
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    if (!v20) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v20 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v20) {
      goto LABEL_19;
    }
  }
  if (v20 < 1)
  {
    __break(1u);
    goto LABEL_72;
  }
  uint64_t v21 = 0;
  do
  {
    if ((v19 & 0xC000000000000001) != 0)
    {
      uint64_t v22 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v22 = *(void *)(v19 + 8 * v21 + 32);
      swift_retain();
    }
    ++v21;
    swift_beginAccess();
    *(void *)(v22 + 16) = v5;
    *(void *)(v22 + 24) = v83;
    swift_unknownObjectRetain();
    swift_release();
    swift_unknownObjectRelease();
  }
  while (v20 != v21);
LABEL_19:
  swift_bridgeObjectRelease();
  unint64_t v23 = v83;
  uint64_t v24 = *(void *)(v82(v80, v83) + 160);
  swift_retain();
  swift_release();
  if (v24)
  {
    uint64_t v25 = *(void **)(v82(v80, v83) + 200);
    id v26 = v25;
    swift_release();
    if (!v25)
    {
LABEL_27:
      swift_release();
      goto LABEL_28;
    }
    sub_1000DB718(v26, 1);
    if (v3)
    {

      swift_release();
      return;
    }
    if (!*(void *)(v24 + 120))
    {
LABEL_26:

      goto LABEL_27;
    }
    uint64_t v27 = *(void *)(v24 + 112);
    if ((v27 & 0x8000000000000000) == 0)
    {
      id v28 = sub_100005D78(v26, v27);
      (*(void (**)(id, uint64_t, uint64_t))(v83 + 72))(v28, v80, v83);
      sub_100032170(v80, v83);
      goto LABEL_26;
    }
LABEL_72:
    __break(1u);
  }
LABEL_28:
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v83 + 176))(v80, v83);
  uint64_t v30 = *(void *)(v29 + 16);
  if (!v30)
  {

LABEL_70:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v78 = OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList;
  uint64_t v31 = (unint64_t *)(v29 + 48);
  int v81 = (objc_class *)type metadata accessor for AUAAudioDevice(0);
  while (1)
  {
    uint64_t v33 = *(v31 - 1);
    unint64_t v32 = *v31;
    uint64_t v34 = *(v31 - 2);
    objc_allocWithZone(v81);
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v35 = swift_unknownObjectRetain();
    uint64_t v36 = v4;
    sub_10000F61C(v35, v23, v34, v33, v32);
    Swift::String v38 = (uint64_t (**)(void, void))v23;
    uint64_t v39 = v36;
    if (v36) {
      goto LABEL_42;
    }
    Swift::String v40 = v37;
    if (v38[14](v80, v38))
    {
      sub_100086B84(v38, (uint64_t)v90);
      if (!v90[0] && v90[1] == 1)
      {
        sub_10001A918((uint64_t)v90, &qword_100127CC0);
        goto LABEL_35;
      }
      sub_10003614C((uint64_t)v90, (uint64_t)&v86);
      sub_1000361A8((uint64_t)&v86, (uint64_t)v90);
      sub_1000361A8((uint64_t)v90, (uint64_t)&v88);
      (*(void (**)(uint64_t *, uint64_t))(v83 + 96))(&v88, v80);
      if (v91 == 1)
      {
        uint64_t v88 = 0x4B4C4E554D454D48;
        sub_100087E28((uint64_t)&v88, (uint64_t)&v89, (uint64_t)v90, &v84);
      }
      char v60 = sub_100086D50();
      id v61 = (id)MobileGestalt_get_current_device();
      if (!v61) {
        goto LABEL_74;
      }
      uint64_t v62 = v61;
      int deviceClassNumber = MobileGestalt_get_deviceClassNumber();

      if (v60)
      {
        if (deviceClassNumber == 1)
        {
          sub_10002E804(0xD000000000000030, 0x80000001000E3090, 0x6E75467472617473, (void *)0xEF29286E6F697463, 0xD00000000000001ELL, 0x80000001000E2E80, 353);
          goto LABEL_61;
        }
        sub_10002E804(0xD000000000000035, 0x80000001000E3050, 0x6E75467472617473, (void *)0xEF29286E6F697463, 0xD00000000000001ELL, 0x80000001000E2E80, 348);
        sub_100087038(0);
      }
      if (deviceClassNumber == 9)
      {
LABEL_62:
        unsigned int v64 = sub_100087660();
        Class v65 = sub_10005E9A8(v64);
        long long v77 = (objc_class *)type metadata accessor for AUACustomDictionaryProperty();
        long long v66 = (char *)objc_allocWithZone(v77);
        *(void *)&v66[OBJC_IVAR____TtC9AUASDCore27AUACustomDictionaryProperty_dictionary] = v65;
        id v76 = objc_allocWithZone((Class)ASDPropertyAddress);
        long long v67 = v65;
        id v68 = [v76 initWithSelector:1751474532 scope:1735159650 element:0];
        v85.receiver = v66;
        v85.super_class = v77;
        id v69 = objc_msgSendSuper2(&v85, "initWithAddress:propertyDataType:qualifierDataType:", v68, 1886155636, 0);

        if (!v69) {
          goto LABEL_75;
        }
        id v70 = v69;
        [v70 setSettable:0];

        [v40 addCustomProperty:v70];
        sub_100036204((uint64_t)v90);
        sub_100036204((uint64_t)&v86);
        goto LABEL_35;
      }
LABEL_61:
      sub_10002E804(0xD000000000000017, 0x80000001000E3030, 0x6E75467472617473, (void *)0xEF29286E6F697463, 0xD00000000000001ELL, 0x80000001000E2E80, 359);
      sub_100087264();
      goto LABEL_62;
    }
LABEL_35:
    uint64_t v41 = *(void *)&v79[v78];
    if (v41)
    {
      if (sub_10001925C(26, v41)) {
        break;
      }
    }
LABEL_39:
    AUAAudioDevice.addGlobalControls()();
    uint64_t v39 = v48;
    if (v48 || (AUAAudioDevice.addStreamControls()(), (uint64_t v39 = v49) != 0))
    {

LABEL_42:
      uint64_t v4 = 0;
      uint64_t v86 = 0;
      uint64_t v87 = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      v50._countAndFlagsBits = 0x20726F727265;
      v50._object = (void *)0xE600000000000000;
      String.append(_:)(v50);
      v90[0] = v39;
      sub_10000AC7C(&qword_100127400);
      _print_unlocked<A, B>(_:_:)();
      v51._countAndFlagsBits = 0xD000000000000010;
      v51._object = (void *)0x80000001000E2FA0;
      String.append(_:)(v51);
      sub_10002E81C(v86, v87, 0x6E75467472617473, (void *)0xEF29286E6F697463, 0xD00000000000001ELL, 0x80000001000E2E80, 392);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_errorRelease();
      goto LABEL_43;
    }
    sub_100033978(v40, v80, v83);
    uint64_t v4 = 0;
    if (!v52)
    {
      uint64_t v54 = *(void *)&v79[v78];
      if (v54 && sub_10001925C(28, v54))
      {
        uint64_t v86 = 0;
        uint64_t v87 = 0xE000000000000000;
        _StringGuts.grow(_:)(31);
        swift_bridgeObjectRelease();
        uint64_t v86 = 0xD00000000000001DLL;
        uint64_t v87 = 0x80000001000E2FE0;
        id v55 = [v79 boxName];
        if (v55)
        {
          uint64_t v56 = v55;
          uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v59 = v58;
        }
        else
        {
          uint64_t v59 = (void *)0xEE00656369766564;
          uint64_t v57 = 0x206E776F6E6B6E55;
        }
        v71._countAndFlagsBits = v57;
        v71._object = v59;
        String.append(_:)(v71);
        swift_bridgeObjectRelease();
        sub_10002E804(v86, v87, 0x6E75467472617473, (void *)0xEF29286E6F697463, 0xD00000000000001ELL, 0x80000001000E2E80, 380);
        swift_bridgeObjectRelease();
      }
      else
      {
        [v79 addAudioDevice:v40];
      }
      unint64_t v23 = v83;
      AUAAudioDevice.publishStreamFormats()();
      uint64_t v4 = v72;
      if (v72)
      {
        uint64_t v86 = 0;
        uint64_t v87 = 0xE000000000000000;
        _StringGuts.grow(_:)(25);
        v73._countAndFlagsBits = 0x20726F727265;
        v73._object = (void *)0xE600000000000000;
        String.append(_:)(v73);
        v90[0] = v72;
        sub_10000AC7C(&qword_100127400);
        _print_unlocked<A, B>(_:_:)();
        v74._countAndFlagsBits = 0xD000000000000011;
        v74._object = (void *)0x80000001000E2FC0;
        String.append(_:)(v74);
        sub_10002E81C(v86, v87, 0x6E75467472617473, (void *)0xEF29286E6F697463, 0xD00000000000001ELL, 0x80000001000E2E80, 385);
        swift_bridgeObjectRelease();
        id v75 = v40;
        [v79 removeAudioDevice:v75];

        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_errorRelease();
        uint64_t v4 = 0;
      }
      else
      {

        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
      goto LABEL_44;
    }
    id v53 = v52;
    [v79 addAudioDevice:v53];

    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
LABEL_43:
    unint64_t v23 = v83;
LABEL_44:
    v31 += 3;
    if (!--v30)
    {

      goto LABEL_70;
    }
  }
  uint64_t v86 = 0;
  uint64_t v87 = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  uint64_t v86 = 0xD000000000000020;
  uint64_t v87 = 0x80000001000E3000;
  id v42 = [v79 modelName];
  if (v42)
  {
    uint64_t v43 = v42;
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v46 = v45;

    v47._countAndFlagsBits = v44;
    v47._object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    sub_10002E804(v86, v87, 0x6E75467472617473, (void *)0xEF29286E6F697463, 0xD00000000000001ELL, 0x80000001000E2E80, 370);
    swift_bridgeObjectRelease();
    [v40 setWantsDisplayRouting:1];
    goto LABEL_39;
  }
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
}

unint64_t sub_100031518(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(*(uint64_t (**)(void))(a2 + 16))();
  if (v4)
  {
    uint64_t v5 = v4;
    [v4 removeAllAudioDevices];
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
  uint64_t v7 = *(void *)(v6(a1, a2) + 160);
  swift_retain();
  swift_release();
  if (v7)
  {
    if (*(void *)(v7 + 120))
    {
      swift_retain();
      sub_1000DADF0();
      swift_release();
      *(void *)(v7 + 120) = 0;
      swift_release();
    }
    swift_release();
  }
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 32))(a1, a2);
  unint64_t v9 = result;
  if (result >> 62)
  {
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v10 = result;
    uint64_t v21 = v6;
    if (result) {
      goto LABEL_9;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    uint64_t v13 = v6(a1, a2);
    goto LABEL_18;
  }
  uint64_t v10 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v21 = v6;
  if (!v10) {
    goto LABEL_17;
  }
LABEL_9:
  if (v10 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v11 = 0;
  do
  {
    if ((v9 & 0xC000000000000001) != 0)
    {
      uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v12 = *(void *)(v9 + 8 * v11 + 32);
      swift_retain();
    }
    ++v11;
    swift_beginAccess();
    *(void *)(v12 + 16) = 0;
    *(void *)(v12 + 24) = 0;
    swift_release();
    swift_unknownObjectRelease();
  }
  while (v10 != v11);
  swift_bridgeObjectRelease();
  uint64_t v6 = v21;
  uint64_t v13 = v21(a1, a2);
LABEL_18:
  uint64_t v14 = *(void *)(v13 + 168);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    uint64_t v16 = v14 + 32;
    do
    {
      sub_10001A9B8(v16, (uint64_t)v22);
      uint64_t v17 = v23;
      uint64_t v18 = v24;
      sub_1000360FC((uint64_t)v22, v23);
      (*(void (**)(void, void, uint64_t, uint64_t))(v18 + 24))(0, 0, v17, v18);
      sub_10001ABC4((uint64_t)v22);
      v16 += 40;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    uint64_t v19 = v21(a1, a2);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = v6(a1, a2);
  }
  uint64_t v20 = v19;
  swift_beginAccess();
  *(void *)(v20 + 16) = 0;
  *(void *)(v20 + 24) = 0;
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1000317E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = *(void *)((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3) + 168);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = v6 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_10001A9B8(v8, (uint64_t)&v18);
      uint64_t v9 = v19;
      uint64_t v10 = v20;
      sub_10001A974(&v18, v19);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 8))(v15, v9, v10);
      uint64_t v11 = v16;
      uint64_t v12 = v17;
      sub_10001A974(v15, v16);
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(v11, v12);
      sub_10001ABC4((uint64_t)v15);
      if (v13 == a1) {
        break;
      }
      sub_10001ABC4((uint64_t)&v18);
      v8 += 40;
      if (!--v7)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    sub_10000CF6C(&v18, a4);
  }
  else
  {
LABEL_6:
    *(void *)(a4 + 32) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return swift_bridgeObjectRelease();
}

void *sub_100031940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3);
  v7[2] = a1;
  uint64_t v5 = sub_10001E5A4((void (*)(long long *__return_ptr, void *))sub_1000362B8, (uint64_t)v7, v4);
  swift_bridgeObjectRelease();
  return v5;
}

void ActiveFunction.getRawCur(forControl:onEntity:onChannel:)(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int16 v8 = (*(uint64_t (**)(void, uint64_t, void, uint64_t, uint64_t))(a5 + 144))(a1 & 0xFFFFFF, a3, 0, a2, a4);
  if (!v6)
  {
    uint64_t v10 = v9;
    ADCControlRequestParameterBlock.getCur()(v9, v8 & 0x1FF, a6);
  }
}

void sub_100031A50(int a1, unint64_t a2, char a3, void *a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  void (*v45)(_OWORD *__return_ptr, uint64_t, uint64_t);
  void *v46;
  uint64_t v47;
  void v48[3];
  uint64_t v49;
  uint64_t v50;
  void v51[18];
  unsigned __int8 v52;
  _OWORD v53[7];
  uint64_t v54;
  _OWORD v55[7];
  uint64_t v56;

  Swift::String v47 = 0;
  unsigned int v14 = a1 & 0xFFFFFF;
  AUASDCore::tADCControlRequestParameterBlockLayout v15 = USBDescriptorControl.pbLayout()();
  char v16 = sub_1000852E4(v15);
  if (v7) {
    return;
  }
  long long v18 = v17;
  char v19 = v16;
  unint64_t v20 = a5;
  uint64_t v21 = v18;
  sub_10007379C(v20, v19, v18);
  uint64_t v46 = v21;
  uint64_t v45 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(a7 + 8);
  v45(v51, a6, a7);
  sub_10001D0D8(v51);
  if (v52 > 0x30u || ((1 << v52) & 0x1000100000001) == 0)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v32 = 24;
    *(void *)(v32 + 8) = 0;
    *(void *)(v32 + 16) = 0xE000000000000000;
    *(void *)(v32 + 24) = 0xD00000000000002ELL;
    *(void *)(v32 + 32) = 0x80000001000E32C0;
    *(void *)(v32 + 40) = 0xD00000000000001ELL;
    *(void *)(v32 + 48) = 0x80000001000E2E80;
    uint64_t v33 = 594;
    goto LABEL_13;
  }
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 16))(a6, a7);
  if (!v23)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v32 = 7;
    *(void *)(v32 + 8) = 0;
    *(void *)(v32 + 16) = 0xE000000000000000;
    *(void *)(v32 + 24) = 0xD00000000000002ELL;
    *(void *)(v32 + 32) = 0x80000001000E32C0;
    *(void *)(v32 + 40) = 0xD00000000000001ELL;
    *(void *)(v32 + 48) = 0x80000001000E2E80;
    uint64_t v33 = 596;
LABEL_13:
    *(void *)(v32 + 56) = v33;
    swift_willThrow();

    return;
  }
  uint64_t v44 = (void *)v23;
  __int16 v43 = sub_100088544(v14);
  if (a3) {
    unint64_t v24 = 0;
  }
  else {
    unint64_t v24 = a2;
  }
  uint64_t v25 = a4[3];
  uint64_t v26 = a4[4];
  sub_10001A974(a4, v25);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v26 + 8))(v48, v25, v26);
  uint64_t v27 = v49;
  uint64_t v28 = v50;
  sub_10001A974(v48, v49);
  unint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 16))(v27, v28);
  v45(v53, a6, a7);
  v55[4] = v53[4];
  v55[5] = v53[5];
  v55[6] = v53[6];
  uint64_t v56 = v54;
  v55[0] = v53[0];
  v55[1] = v53[1];
  v55[2] = v53[2];
  v55[3] = v53[3];
  sub_100035ECC(v55);
  sub_10001D0D8(v53);
  unsigned __int8 v30 = *(unsigned char *)(*(void *)&v55[0] + 2);
  sub_100035FC8(v55);
  id v31 = v46;
  sub_1000C80AC(1u, 0, 1, v43, v24, v29, v30, v46, (uint64_t)&v47);

  sub_10001ABC4((uint64_t)v48);
  uint64_t v34 = v47;
  id v35 = v31;
  uint64_t v36 = NSData.startIndex.getter();
  uint64_t v37 = NSData.endIndex.getter();
  uint64_t v38 = NSData.startIndex.getter();
  uint64_t v39 = NSData.endIndex.getter();
  if (v36 < v38 || v39 < v36)
  {
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
  }
  uint64_t v40 = NSData.startIndex.getter();
  uint64_t v41 = NSData.endIndex.getter();

  if (v37 < v40 || v41 < v37) {
    goto LABEL_24;
  }
  if (__OFSUB__(v37, v36)) {
    goto LABEL_25;
  }
  if (v34 != v37 - v36)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v42 = 28;
    *(void *)(v42 + 8) = 0;
    *(void *)(v42 + 16) = 0xE000000000000000;
    *(void *)(v42 + 24) = 0xD00000000000002ELL;
    *(void *)(v42 + 32) = 0x80000001000E32C0;
    *(void *)(v42 + 40) = 0xD00000000000001ELL;
    *(void *)(v42 + 48) = 0x80000001000E2E80;
    *(void *)(v42 + 56) = 606;
    swift_willThrow();
  }
}

Swift::Int __swiftcall StringIndex.index()()
{
  if ((v0 & 0x10000) != 0) {
    int v1 = 0xFFFF;
  }
  else {
    int v1 = 255;
  }
  return v1 & v0;
}

void StringIndex.hash(into:)(uint64_t a1, int a2)
{
  __int16 v2 = a2;
  if ((a2 & 0x10000) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v2);
  }
}

BOOL static StringIndex.__derived_enum_equals(_:_:)(int a1, unsigned int a2)
{
  BOOL v2 = a1 == a2;
  if ((a2 & 0x10000) != 0) {
    BOOL v2 = 0;
  }
  if ((a1 & 0x10000) != 0) {
    return ((unsigned __int16)a1 == (unsigned __int16)a2) & HIWORD(a2);
  }
  else {
    return v2;
  }
}

Swift::Int StringIndex.hashValue.getter(unsigned int a1)
{
  if ((a1 & 0x10000) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(a1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(a1);
  }
  return Hasher._finalize()();
}

Swift::Int sub_100031FF8()
{
  __int16 v1 = *v0;
  char v2 = *((unsigned char *)v0 + 2);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void sub_100032070()
{
  __int16 v1 = *v0;
  if (v0[1])
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
}

Swift::Int sub_1000320C4()
{
  __int16 v1 = *v0;
  char v2 = *((unsigned char *)v0 + 2);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

uint64_t sub_100032138(unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v2 = *a2;
  if (*a1 == v2) {
    unsigned int v3 = *((unsigned __int8 *)a2 + 2);
  }
  else {
    unsigned int v3 = 0;
  }
  BOOL v4 = *a1 == v2;
  if (a2[1]) {
    BOOL v4 = 0;
  }
  if (a1[1]) {
    return v3;
  }
  else {
    return v4;
  }
}

void sub_100032170(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)((*(uint64_t (**)(void))(a2 + 24))() + 160);
  swift_retain();
  swift_release();
  if (!v5) {
    return;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 64))(a1, a2);
  if (!v6) {
    goto LABEL_10;
  }
  id v8 = (id)v6;
  if (*(void *)(v5 + 120))
  {
    uint64_t v7 = (void *)swift_allocObject();
    v7[2] = a1;
    v7[3] = a2;
    void v7[4] = v2;
    swift_retain();
    swift_unknownObjectRetain();
    sub_1000DB0F4((uint64_t)v8, (uint64_t)sub_100036290, (uint64_t)v7);
    swift_release();
    swift_release();

LABEL_10:
    swift_release();
    return;
  }
  swift_release();
}

uint64_t sub_100032378(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result != -536870165)
  {
    if (result != -536870163)
    {
      unint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 136))(result, a2, a3, a4);
      uint64_t v18 = v7;
      unsigned __int8 v19 = v9;
      if (v9 > 1u || (v7 & 0xFFFFFFFFFFFE0000) != 0x1FFFFFFFE0000)
      {
        uint64_t v21 = v6;
        if (v9 >> 6)
        {
          if (v9 >> 6 == 1)
          {
            unint64_t v22 = v6 >> 8;
            if ((v21 & 0x1000000) != 0) {
              uint64_t v23 = 0;
            }
            else {
              uint64_t v23 = BYTE2(v21);
            }
            sub_100032868(v22, v23, (v21 & 0x1000000) >> 24, v21, a3, a4);
            return sub_100032170(a3, a4);
          }
          char v29 = BYTE2(v6);
          uint64_t v39 = 0;
          uint64_t v40 = 0xE000000000000000;
          _StringGuts.grow(_:)(54);
          v30._countAndFlagsBits = 0xD000000000000021;
          v30._object = (void *)0x80000001000E3170;
          String.append(_:)(v30);
          LOBYTE(v37) = v21;
          v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v31);
          swift_bridgeObjectRelease();
          v32._countAndFlagsBits = 0xD000000000000011;
          v32._object = (void *)0x80000001000E31A0;
          String.append(_:)(v32);
          if ((v21 & 0x1000000) != 0) {
            char v33 = 0;
          }
          else {
            char v33 = v29;
          }
          LOBYTE(v37) = v33;
          v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v34);
          swift_bridgeObjectRelease();
          sub_10002E81C(v39, v40, 0xD00000000000002ALL, (void *)0x80000001000E3140, 0xD00000000000001ELL, 0x80000001000E2E80, 149);
          swift_bridgeObjectRelease();
          sub_10000CD54();
          swift_allocError();
          *(unsigned char *)uint64_t v35 = 2;
          *(void *)(v35 + 8) = 0;
          *(void *)(v35 + 16) = 0xE000000000000000;
          *(void *)(v35 + 24) = 0xD00000000000002ALL;
          *(void *)(v35 + 32) = 0x80000001000E3140;
          *(void *)(v35 + 40) = 0xD00000000000001ELL;
          *(void *)(v35 + 48) = 0x80000001000E2E80;
          uint64_t v36 = 150;
        }
        else
        {
          uint64_t v24 = v8;
          (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
          ActiveControlInterface.entity(at:)(v21, (uint64_t)&v37);
          swift_release();
          if (v38)
          {
            uint64_t v25 = v19 & 1;
            sub_10000CF6C(&v37, (uint64_t)&v39);
            uint64_t v26 = v41;
            uint64_t v27 = v42;
            sub_10001A974(&v39, v41);
            if ((v18 & 0x10000) != 0) {
              uint64_t v28 = 0;
            }
            else {
              uint64_t v28 = BYTE1(v18);
            }
            (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 80))(v18, v28, (v18 & 0x10000uLL) >> 16, v24, v25, v26, v27);
            sub_10001ABC4((uint64_t)&v39);
            return sub_100032170(a3, a4);
          }
          sub_10001A918((uint64_t)&v37, &qword_100127E98);
          sub_10000CD54();
          swift_allocError();
          *(unsigned char *)uint64_t v35 = 104;
          *(void *)(v35 + 8) = 0;
          *(void *)(v35 + 16) = 0xE000000000000000;
          *(void *)(v35 + 24) = 0xD00000000000002ALL;
          *(void *)(v35 + 32) = 0x80000001000E3140;
          *(void *)(v35 + 40) = 0xD00000000000001ELL;
          *(void *)(v35 + 48) = 0x80000001000E2E80;
          uint64_t v36 = 139;
        }
        *(void *)(v35 + 56) = v36;
        swift_willThrow();
        uint64_t v10 = (void *)0xEE00656369766564;
        uint64_t v11 = 0x206E776F6E6B6E55;
        uint64_t v39 = 0;
        uint64_t v40 = 0xE000000000000000;
        _StringGuts.grow(_:)(29);
        uint64_t v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
        if (v12)
        {
          uint64_t v13 = v12;
          id v14 = [v12 boxName];

          if (v14)
          {
            uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v10 = v15;
          }
        }
        v16._countAndFlagsBits = v11;
        v16._object = v10;
        String.append(_:)(v16);
        swift_bridgeObjectRelease();
        v17._countAndFlagsBits = 0xD00000000000001BLL;
        v17._object = (void *)0x80000001000E3120;
        String.append(_:)(v17);
        sub_10002E81C(v39, v40, 0xD00000000000002ALL, (void *)0x80000001000E3140, 0xD00000000000001ELL, 0x80000001000E2E80, 155);
        swift_bridgeObjectRelease();
        swift_errorRelease();
      }
    }
    return sub_100032170(a3, a4);
  }
  return result;
}

uint64_t sub_100032868(char a1, uint64_t a2, char a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  int v9 = a4;
  sub_10002E804(0xD000000000000022, 0x80000001000E31C0, 0xD00000000000003ELL, (void *)0x80000001000E31F0, 0xD00000000000001ELL, 0x80000001000E2E80, 827);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 24);
  int v11 = *(unsigned __int8 *)(*(void *)(v10(a5, a6) + 32) + 2);
  swift_release();
  if (v11 == v9)
  {
    v10(a5, a6);
    sub_10008F0E4(a1);
    return swift_release();
  }
  unint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 32))(a5, a6);
  unint64_t v13 = v12;
  if (v12 >> 62) {
    goto LABEL_21;
  }
  uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v14)
  {
LABEL_5:
    if ((v13 & 0xC000000000000001) != 0)
    {
      uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v15 = *(void *)(v13 + 32);
      swift_retain();
    }
    if (*(unsigned __int8 *)(*(void *)(v15 + 32) + 2) != v9)
    {
      swift_release();
      if (v14 == 1) {
        goto LABEL_19;
      }
      uint64_t v17 = 5;
      while (1)
      {
        uint64_t v18 = v17 - 4;
        if ((v13 & 0xC000000000000001) != 0)
        {
          uint64_t v19 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v20 = __OFADD__(v18, 1);
          uint64_t v21 = v17 - 3;
          if (v20) {
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v19 = *(void *)(v13 + 8 * v17);
          swift_retain();
          BOOL v20 = __OFADD__(v18, 1);
          uint64_t v21 = v17 - 3;
          if (v20)
          {
LABEL_20:
            __break(1u);
LABEL_21:
            swift_bridgeObjectRetain();
            uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
            if (!v14) {
              goto LABEL_19;
            }
            goto LABEL_5;
          }
        }
        if (*(unsigned __int8 *)(*(void *)(v19 + 32) + 2) == v9) {
          break;
        }
        swift_release();
        ++v17;
        if (v21 == v14) {
          goto LABEL_19;
        }
      }
    }
    swift_bridgeObjectRelease_n();
    sub_1000D9F60(a2, a3 & 1);
    return swift_release();
  }
  else
  {
LABEL_19:
    swift_bridgeObjectRelease_n();
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v22 = 2;
    *(void *)(v22 + 8) = 0;
    *(void *)(v22 + 16) = 0xE000000000000000;
    *(void *)(v22 + 24) = 0xD00000000000003ELL;
    *(void *)(v22 + 32) = 0x80000001000E31F0;
    *(void *)(v22 + 40) = 0xD00000000000001ELL;
    *(void *)(v22 + 48) = 0x80000001000E2E80;
    *(void *)(v22 + 56) = 838;
    return swift_willThrow();
  }
}

void sub_100032B3C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  ActiveFunction.getRawCur(forControl:onEntity:onChannel:)(a1 & 0xFFFFFF, a2, a3, a4, a5, (uint64_t)v7);
  if (!v5)
  {
    sub_10000AC7C(&qword_100127EB8);
    if (!swift_dynamicCast())
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v6 = 1;
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0xE000000000000000;
      *(void *)(v6 + 24) = 0xD00000000000002BLL;
      *(void *)(v6 + 32) = 0x80000001000E2F70;
      *(void *)(v6 + 40) = 0xD00000000000001ELL;
      *(void *)(v6 + 48) = 0x80000001000E2E80;
      *(void *)(v6 + 56) = 218;
      swift_willThrow();
    }
  }
}

uint64_t ActiveFunction.getRawRange(forControl:onEntity:onChannel:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v7 = (*(uint64_t (**)(void, uint64_t, void, uint64_t, uint64_t))(a5 + 160))(a1 & 0xFFFFFF, a3, 0, a2, a4);
  if (!v5)
  {
    int v9 = v8;
    uint64_t v6 = sub_100073364(v7 & 0x1FF, v8);
  }
  return v6;
}

unint64_t sub_100032CD4()
{
  unint64_t result = qword_100128518;
  if (!qword_100128518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128518);
  }
  return result;
}

unint64_t sub_100032D2C()
{
  unint64_t result = qword_100128520;
  if (!qword_100128520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128520);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for StringIndex(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for StringIndex(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
  }
  unsigned int v4 = *((unsigned __int8 *)a1 + 2);
  if (v4 <= 1) {
    int v5 = -1;
  }
  else {
    int v5 = v4 ^ 0xFF;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for StringIndex(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)unint64_t result = a2 - 255;
    *(unsigned char *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)(result + 2) = -(char)a2;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t sub_100032E94(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2);
}

uint64_t sub_100032E9C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 2) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for StringIndex()
{
  return &type metadata for StringIndex;
}

uint64_t destroy for ActiveFunctionDataPath()
{
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

void *_s9AUASDCore22ActiveFunctionDataPathVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ActiveFunctionDataPath(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeBufferWithCopyOfBuffer for ClockRateRange(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ActiveFunctionDataPath(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ActiveFunctionDataPath(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ActiveFunctionDataPath(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActiveFunctionDataPath()
{
  return &type metadata for ActiveFunctionDataPath;
}

uint64_t getEnumTagSinglePayload for AUAInterruptAttribute(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AUAInterruptAttribute(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100033220);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AUAInterruptAttribute()
{
  return &type metadata for AUAInterruptAttribute;
}

void *sub_100033258(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10 = a1 & 0xFFFFFF;
  uint64_t v11 = ActiveFunction.getRawRange(forControl:onEntity:onChannel:)(a1 & 0xFFFFFF, a2, a3, a4, a5);
  if (!v6)
  {
    unint64_t v13 = sub_10002EFB0(v11);
    swift_bridgeObjectRelease();
    if (v13)
    {
      uint64_t v5 = sub_100033378((uint64_t)v13, v10, a2, a4, a5);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v14 = 53;
      *(void *)(v14 + 8) = 0;
      *(void *)(v14 + 16) = 0xE000000000000000;
      *(void *)(v14 + 24) = 0xD00000000000002DLL;
      *(void *)(v14 + 32) = 0x80000001000E2F00;
      *(void *)(v14 + 40) = 0xD00000000000001ELL;
      *(void *)(v14 + 48) = 0x80000001000E2E80;
      *(void *)(v14 + 56) = 256;
      swift_willThrow();
    }
  }
  return v5;
}

void *sub_100033378(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v9[2] = a4;
  v9[3] = a5;
  __int16 v10 = a2;
  char v11 = BYTE2(a2);
  uint64_t v12 = a3;
  BOOL v7 = sub_10002EC9C((void (*)(uint64_t *__return_ptr, int *, uint64_t *))sub_100036074, (uint64_t)v9, a1);
  if (!v5)
  {
    uint64_t v6 = sub_10003382C((uint64_t)v7);
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_100033404@<X0>(uint64_t *a1@<X6>, float *a2@<X8>)
{
  sub_1000360A8();
  sub_10000AC7C(&qword_100128550);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_10000CD54();
    uint64_t v8 = swift_allocError();
    *(unsigned char *)uint64_t v7 = 1;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0xE000000000000000;
    *(void *)(v7 + 24) = 0xD000000000000035;
    *(void *)(v7 + 32) = 0x80000001000E2F30;
    *(void *)(v7 + 40) = 0xD00000000000001ELL;
    *(void *)(v7 + 48) = 0x80000001000E2E80;
    uint64_t v9 = 274;
    goto LABEL_11;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_10000CD54();
    uint64_t v8 = swift_allocError();
    *(unsigned char *)uint64_t v7 = 1;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0xE000000000000000;
    *(void *)(v7 + 24) = 0xD000000000000035;
    *(void *)(v7 + 32) = 0x80000001000E2F30;
    *(void *)(v7 + 40) = 0xD00000000000001ELL;
    *(void *)(v7 + 48) = 0x80000001000E2E80;
    uint64_t v9 = 275;
    goto LABEL_11;
  }
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
    sub_10000CD54();
    uint64_t v8 = swift_allocError();
    *(unsigned char *)uint64_t v7 = 1;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0xE000000000000000;
    *(void *)(v7 + 24) = 0xD000000000000035;
    *(void *)(v7 + 32) = 0x80000001000E2F30;
    *(void *)(v7 + 40) = 0xD00000000000001ELL;
    *(void *)(v7 + 48) = 0x80000001000E2E80;
    uint64_t v9 = 276;
    goto LABEL_11;
  }
  int v5 = (__int16)v12;
  if ((__int16)v12 <= -32767) {
    int v5 = -32767;
  }
  float v6 = (float)v5 * 0.0039062;
  if (v6 == -INFINITY)
  {
    sub_10000CD54();
    uint64_t v8 = swift_allocError();
    *(unsigned char *)uint64_t v7 = 107;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0xE000000000000000;
    *(void *)(v7 + 24) = 0xD000000000000035;
    *(void *)(v7 + 32) = 0x80000001000E2F30;
    *(void *)(v7 + 40) = 0xD00000000000001ELL;
    *(void *)(v7 + 48) = 0x80000001000E2E80;
    uint64_t v9 = 281;
LABEL_11:
    *(void *)(v7 + 56) = v9;
    uint64_t result = swift_willThrow();
    *a1 = v8;
    return result;
  }
  float v10 = (float)(__int16)v12 * 0.0039062;
  if (v12 == 0x8000) {
    float v10 = -INFINITY;
  }
  if (v10 < v6)
  {
    sub_10000CD54();
    uint64_t v8 = swift_allocError();
    *(unsigned char *)uint64_t v7 = 107;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0xE000000000000000;
    *(void *)(v7 + 24) = 0xD000000000000035;
    *(void *)(v7 + 32) = 0x80000001000E2F30;
    *(void *)(v7 + 40) = 0xD00000000000001ELL;
    *(void *)(v7 + 48) = 0x80000001000E2E80;
    uint64_t v9 = 285;
    goto LABEL_11;
  }
  float v11 = (float)(__int16)v12 * 0.0039062;
  if (v12 == 0x8000) {
    float v11 = -INFINITY;
  }
  if (v11 < 0.0)
  {
    sub_10000CD54();
    uint64_t v8 = swift_allocError();
    *(unsigned char *)uint64_t v7 = 107;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0xE000000000000000;
    *(void *)(v7 + 24) = 0xD000000000000035;
    *(void *)(v7 + 32) = 0x80000001000E2F30;
    *(void *)(v7 + 40) = 0xD00000000000001ELL;
    *(void *)(v7 + 48) = 0x80000001000E2E80;
    uint64_t v9 = 289;
    goto LABEL_11;
  }
  *a2 = v6;
  a2[1] = v10;
  a2[2] = v11;
  return result;
}

void *sub_10003382C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10007C39C(0, v1, 0);
    uint64_t v3 = a1 + 40;
    do
    {
      sub_10000AC7C(&qword_100128538);
      sub_10000AC7C(&qword_100128540);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_10007C39C(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v5 = _swiftEmptyArrayStorage[2];
      unint64_t v4 = _swiftEmptyArrayStorage[3];
      if (v5 >= v4 >> 1) {
        sub_10007C39C(v4 > 1, v5 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v5 + 1;
      float v6 = (char *)_swiftEmptyArrayStorage + 12 * v5;
      *((void *)v6 + 4) = v8;
      *((_DWORD *)v6 + 10) = v9;
      v3 += 12;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void sub_100033978(void *a1, uint64_t a2, uint64_t a3)
{
  float v6 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 24);
  uint64_t v7 = (char *)*(id *)(v6(a2, a3) + 152);
  swift_release();
  int v8 = *(__int16 *)(*(void *)&v7[OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor] + 8);

  if (v8 == -1)
  {
    int v9 = (char *)*(id *)(v6(a2, a3) + 152);
    swift_release();
    int v10 = *(__int16 *)(*(void *)&v9[OBJC_IVAR____TtC9AUASDCore9USBDevice_deviceDescriptor] + 10);

    if (v10 == -1)
    {
      id v11 = [self mainBundle];
      id v12 = [v11 resourcePath];

      if (v12)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        sub_10000AC7C(&qword_100128560);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1000E8090;
        AnyHashable.init<A>(_:)();
        sub_10000AC7C(&qword_100128568);
        uint64_t v14 = swift_initStackObject();
        *(_OWORD *)(v14 + 16) = xmmword_1000EA830;
        *(void *)(v14 + 32) = 0xD000000000000013;
        *(void *)(v14 + 40) = 0x80000001000E3250;
        *(void *)(v14 + 48) = _swiftEmptyArrayStorage;
        *(void *)(v14 + 56) = 0xD00000000000001ALL;
        *(void *)(v14 + 64) = 0x80000001000E3270;
        *(void *)(v14 + 72) = _swiftEmptyArrayStorage;
        *(void *)(v14 + 80) = 0x7475706E49;
        *(void *)(v14 + 88) = 0xE500000000000000;
        sub_10000AC7C(&qword_100128570);
        uint64_t v15 = swift_allocObject();
        *(_OWORD *)(v15 + 16) = xmmword_1000E8090;
        sub_10000AC7C(&qword_100128578);
        uint64_t v16 = swift_initStackObject();
        *(_OWORD *)(v16 + 16) = xmmword_1000E8090;
        *(void *)(v16 + 32) = 0x6572617764726148;
        *(void *)(v16 + 40) = 0xE800000000000000;
        sub_10000AC7C(&qword_100128580);
        uint64_t v17 = swift_allocObject();
        *(_OWORD *)(v17 + 16) = xmmword_1000EA840;
        *(void *)(v17 + 32) = sub_100008E54((uint64_t)&off_100112228);
        *(void *)(v17 + 40) = sub_100008E54((uint64_t)&off_100112288);
        *(void *)(v16 + 48) = v17;
        *(void *)(v15 + 32) = sub_100008F78(v16);
        *(void *)(v14 + 96) = v15;
        *(void *)(v14 + 104) = 0x74757074754FLL;
        *(void *)(v14 + 112) = 0xE600000000000000;
        uint64_t v18 = swift_allocObject();
        *(_OWORD *)(v18 + 16) = xmmword_1000E8090;
        uint64_t v19 = swift_initStackObject();
        *(_OWORD *)(v19 + 16) = xmmword_1000E8090;
        *(void *)(v19 + 32) = 0x6572617764726148;
        *(void *)(v19 + 40) = 0xE800000000000000;
        uint64_t v20 = swift_allocObject();
        *(_OWORD *)(v20 + 16) = xmmword_1000EA840;
        *(void *)(v20 + 32) = sub_100008E54((uint64_t)&off_1001122E8);
        *(void *)(v20 + 40) = sub_100008E54((uint64_t)&off_100112348);
        *(void *)(v19 + 48) = v20;
        *(void *)(v18 + 32) = sub_100008F78(v19);
        *(void *)(v14 + 120) = v18;
        unint64_t v21 = sub_100008F84(v14);
        *(void *)(inited + 96) = sub_10000AC7C(&qword_100128588);
        *(void *)(inited + 72) = v21;
        sub_1000090A8(inited);
        id v22 = [a1 deviceUID];
        if (v22)
        {
          uint64_t v23 = v22;
          uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v26 = v25;

          v27._countAndFlagsBits = v24;
          v27._object = v26;
          String.append(_:)(v27);
          swift_bridgeObjectRelease();
          v28._countAndFlagsBits = 1347634208;
          v28._object = (void *)0xE400000000000000;
          String.append(_:)(v28);
          id v29 = objc_allocWithZone((Class)ASDAudioDeviceDSPDatabase);
          swift_bridgeObjectRetain();
          Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          NSString v31 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          NSString v32 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v33 = [v29 initWithDictionary:isa resourcePath:v31 deviceUID:v32];

          id v34 = [a1 plugin];
          objc_allocWithZone((Class)type metadata accessor for AUADSPAudioDevice());
          sub_100018A64(0, 0xE000000000000000, a1, v33, v34, 1667463012);
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
    }
  }
}

void *sub_100033EA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((*(uint64_t (**)(void))(a2 + 24))() + 168);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = v2 + 32;
    swift_bridgeObjectRetain();
    unint64_t v5 = _swiftEmptyArrayStorage;
    do
    {
      sub_10001A9B8(v4, (uint64_t)v11);
      sub_10000AC7C(&qword_100127B28);
      sub_10000AC7C(&qword_100128530);
      if (swift_dynamicCast())
      {
        sub_10000CF6C(v9, (uint64_t)v12);
        sub_10001A9B8((uint64_t)v12, (uint64_t)v11);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v5 = sub_100059308(0, v5[2] + 1, 1, v5);
        }
        unint64_t v7 = v5[2];
        unint64_t v6 = v5[3];
        if (v7 >= v6 >> 1) {
          unint64_t v5 = sub_100059308((void *)(v6 > 1), v7 + 1, 1, v5);
        }
        v5[2] = v7 + 1;
        sub_10000CF6C(v11, (uint64_t)&v5[5 * v7 + 4]);
        sub_10001ABC4((uint64_t)v12);
      }
      else
      {
        uint64_t v10 = 0;
        memset(v9, 0, sizeof(v9));
        sub_10001A918((uint64_t)v9, &qword_100128528);
      }
      v4 += 40;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return v5;
}

uint64_t sub_100034068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v9 = *(void *)(*(void *)a1 + 72);
  if (!(v9 >> 62))
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_17;
  }
LABEL_3:
  if ((v9 & 0xC000000000000001) != 0)
  {
LABEL_18:
    uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_6;
  }
  if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    return result;
  }
  uint64_t v12 = *(void *)(v9 + 32);
  swift_retain();
LABEL_6:
  swift_bridgeObjectRelease();
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t))(a6 + 168))(v25, v12, a5, a6);
  swift_release();
  sub_100035C10((uint64_t)v25, (uint64_t)v22);
  uint64_t v13 = v23;
  if (v23)
  {
    uint64_t v14 = v24;
    sub_10001A974(v22, v23);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
    sub_10001ABC4((uint64_t)v22);
  }
  else
  {
    sub_10001A918((uint64_t)v22, &qword_100128528);
    uint64_t v15 = 0;
  }
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 24))(v22, ObjectType, a4);
  uint64_t v18 = v23;
  uint64_t v17 = v24;
  sub_10001A974(v22, v23);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)(v17 + 8) + 16))(v18);
  sub_10001A918((uint64_t)v25, &qword_100128528);
  if (v13) {
    BOOL v20 = v15 == v19;
  }
  else {
    BOOL v20 = 0;
  }
  uint64_t v21 = v20;
  sub_10001ABC4((uint64_t)v22);
  return v21;
}

void *sub_10003426C(uint64_t (*a1)(uint64_t *), void *a2, unint64_t a3)
{
  unint64_t v5 = a3;
  uint64_t v18 = _swiftEmptyArrayStorage;
  if (a3 >> 62)
  {
LABEL_18:
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_3:
      unint64_t v9 = 0;
      uint64_t v15 = v5 & 0xFFFFFFFFFFFFFF8;
      unint64_t v16 = v5 & 0xC000000000000001;
      unint64_t v14 = v5;
      while (1)
      {
        if (v16)
        {
          uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v11 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
LABEL_14:
            __break(1u);
LABEL_15:
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            return v3;
          }
        }
        else
        {
          if (v9 >= *(void *)(v15 + 16))
          {
            __break(1u);
            goto LABEL_18;
          }
          uint64_t v10 = *(void *)(v5 + 8 * v9 + 32);
          swift_retain();
          unint64_t v11 = v9 + 1;
          if (__OFADD__(v9, 1)) {
            goto LABEL_14;
          }
        }
        uint64_t v17 = v10;
        uint64_t v3 = a2;
        char v12 = a1(&v17);
        if (v4) {
          goto LABEL_15;
        }
        if (v12)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          unint64_t v5 = v14;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          uint64_t v3 = &v18;
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          swift_release();
        }
        ++v9;
        if (v11 == v8)
        {
          uint64_t v3 = v18;
          goto LABEL_20;
        }
      }
    }
  }
  uint64_t v3 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return v3;
}

void sub_100034428(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = v3;
  unint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  if (!v5
    || (v6 = v5, id v7 = [v5 audioDevices], v6, !v7))
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v12 = 51;
    *(void *)(v12 + 8) = 0;
    *(void *)(v12 + 16) = 0xE000000000000000;
    *(void *)(v12 + 24) = 0xD000000000000020;
    *(void *)(v12 + 32) = 0x80000001000E3290;
    *(void *)(v12 + 40) = 0xD00000000000001ELL;
    *(void *)(v12 + 48) = 0x80000001000E2E80;
    *(void *)(v12 + 56) = 493;
    swift_willThrow();
    return;
  }
  sub_10000CECC(0, &qword_100128590);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62)
  {
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_5;
    }
LABEL_37:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v9) {
    goto LABEL_37;
  }
LABEL_5:
  unint64_t v10 = 0;
  unint64_t v11 = v8 & 0xC000000000000001;
  unint64_t v44 = v8 + 32;
  uint64_t v45 = v8 & 0xFFFFFFFFFFFFFF8;
  unint64_t v48 = v4;
  unint64_t v49 = v8;
  unint64_t v46 = v8 & 0xC000000000000001;
  uint64_t v47 = v9;
  while (1)
  {
    if (v11)
    {
      id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_12;
    }
    if (v10 >= *(void *)(v45 + 16)) {
      break;
    }
    id v13 = *(id *)(v44 + 8 * v10);
LABEL_12:
    unint64_t v14 = v13;
    BOOL v15 = __OFADD__(v10, 1);
    unint64_t v16 = v10 + 1;
    if (v15) {
      goto LABEL_35;
    }
    id v17 = [v13 inputStreams];
    if (!v17) {
      goto LABEL_39;
    }
    uint64_t v18 = v17;
    sub_10000CECC(0, (unint64_t *)&qword_100127B00);
    unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v20 = [v14 outputStreams];
    if (!v20) {
      goto LABEL_40;
    }
    uint64_t v21 = v20;
    unint64_t v50 = v16;
    unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000A1900(v22);
    unint64_t v4 = v19;
    if (v19 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v23)
      {
LABEL_17:
        unint64_t v55 = v19 & 0xC000000000000001;
        uint64_t v24 = 4;
        uint64_t v52 = v14;
        unint64_t v53 = v19;
        uint64_t v51 = v23;
        while (1)
        {
          id v25 = v55 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v4 + 8 * v24);
          uint64_t v26 = v25;
          unint64_t v8 = v24 - 3;
          if (__OFADD__(v24 - 4, 1)) {
            break;
          }
          type metadata accessor for AUAStream(0);
          uint64_t v27 = swift_dynamicCastClass();
          if (v27)
          {
            uint64_t v28 = v27;
            type metadata accessor for AUAAudioDevice(0);
            if (!swift_dynamicCastClass())
            {
              id v42 = v26;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_10000CD54();
              swift_allocError();
              *(unsigned char *)uint64_t v43 = 1;
              *(void *)(v43 + 8) = 0;
              *(void *)(v43 + 16) = 0xE000000000000000;
              *(void *)(v43 + 24) = 0xD000000000000020;
              *(void *)(v43 + 32) = 0x80000001000E3290;
              *(void *)(v43 + 40) = 0xD00000000000001ELL;
              *(void *)(v43 + 48) = 0x80000001000E2E80;
              *(void *)(v43 + 56) = 500;
              swift_willThrow();

              return;
            }
            uint64_t v29 = *(void *)(v28 + OBJC_IVAR___AUAStream_streamingTerminal + 24);
            uint64_t v30 = *(void *)(v28 + OBJC_IVAR___AUAStream_streamingTerminal + 32);
            sub_10001A974((void *)(v28 + OBJC_IVAR___AUAStream_streamingTerminal), v29);
            NSString v31 = *(uint64_t (**)(uint64_t, uint64_t))(v30 + 48);
            id v57 = v26;
            id v56 = v14;
            uint64_t v32 = v31(v29, v30);
            uint64_t v33 = a1[3];
            uint64_t v34 = a1[4];
            sub_10001A974(a1, v33);
            uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t))(v34 + 48);
            if (v32 == v35(v33, v34))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              return;
            }
            uint64_t v36 = (void *)(v28 + OBJC_IVAR___AUAStream_otherTerminal);
            uint64_t v37 = *(void *)(v28 + OBJC_IVAR___AUAStream_otherTerminal + 24);
            uint64_t v38 = v36[4];
            sub_10001A974(v36, v37);
            uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 48))(v37, v38);
            uint64_t v40 = v35(v33, v34);

            BOOL v41 = v39 == v40;
            unint64_t v14 = v52;
            unint64_t v4 = v53;
            uint64_t v23 = v51;
            unint64_t v8 = v24 - 3;
            if (v41)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return;
            }
          }
          else
          {
          }
          ++v24;
          if (v8 == v23) {
            goto LABEL_7;
          }
        }
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v23 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v23) {
        goto LABEL_17;
      }
    }
LABEL_7:

    swift_bridgeObjectRelease();
    unint64_t v4 = v48;
    unint64_t v8 = v49;
    unint64_t v10 = v50;
    unint64_t v11 = v46;
    if (v50 == v47) {
      goto LABEL_37;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
}

void sub_1000349A0(int a1, unsigned __int8 a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = 0;
  unsigned int v10 = a1 & 0xFFFFFF;
  AUASDCore::tADCControlRequestParameterBlockLayout v11 = USBDescriptorControl.pbLayout()();
  char v12 = sub_1000852E4(v11);
  if (v5) {
    return;
  }
  unint64_t v14 = v13;
  sub_10007379C(a3, v12, v13);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a5 + 8))(v32, a4, a5);
  sub_10001D0D8(v32);
  if (v33 > 0x30u || ((1 << v33) & 0x1000100000001) == 0)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v20 = 24;
    *(void *)(v20 + 8) = 0;
    *(void *)(v20 + 16) = 0xE000000000000000;
    *(void *)(v20 + 24) = 0xD000000000000028;
    *(void *)(v20 + 32) = 0x80000001000E2ED0;
    *(void *)(v20 + 40) = 0xD00000000000001ELL;
    *(void *)(v20 + 48) = 0x80000001000E2E80;
    uint64_t v21 = 642;
    goto LABEL_10;
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 16))(a4, a5);
  if (!v16)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v20 = 7;
    *(void *)(v20 + 8) = 0;
    *(void *)(v20 + 16) = 0xE000000000000000;
    *(void *)(v20 + 24) = 0xD000000000000028;
    *(void *)(v20 + 32) = 0x80000001000E2ED0;
    *(void *)(v20 + 40) = 0xD00000000000001ELL;
    *(void *)(v20 + 48) = 0x80000001000E2E80;
    uint64_t v21 = 644;
LABEL_10:
    *(void *)(v20 + 56) = v21;
    swift_willThrow();

    return;
  }
  id v17 = (void *)v16;
  __int16 v18 = sub_100088544(v10);
  id v19 = v14;
  sub_1000C80AC(1u, 0, 2, v18, 0, 0, a2, v14, (uint64_t)&v31);

  uint64_t v22 = v31;
  id v23 = v19;
  uint64_t v24 = NSData.startIndex.getter();
  uint64_t v25 = NSData.endIndex.getter();
  uint64_t v26 = NSData.startIndex.getter();
  uint64_t v27 = NSData.endIndex.getter();
  if (v24 < v26 || v27 < v24)
  {
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  uint64_t v28 = NSData.startIndex.getter();
  uint64_t v29 = NSData.endIndex.getter();

  if (v25 < v28 || v29 < v25) {
    goto LABEL_21;
  }
  if (__OFSUB__(v25, v24)) {
    goto LABEL_22;
  }
  if (v22 != v25 - v24)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v30 = 28;
    *(void *)(v30 + 8) = 0;
    *(void *)(v30 + 16) = 0xE000000000000000;
    *(void *)(v30 + 24) = 0xD000000000000028;
    *(void *)(v30 + 32) = 0x80000001000E2ED0;
    *(void *)(v30 + 40) = 0xD00000000000001ELL;
    *(void *)(v30 + 48) = 0x80000001000E2E80;
    *(void *)(v30 + 56) = 654;
    swift_willThrow();
  }
}

uint64_t *sub_100034D24@<X0>(uint64_t *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = result[2];
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v7 = result[1];
    uint64_t v15 = *result;
    unint64_t v8 = (void *)(v4 + 32);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v10 = v8[3];
      uint64_t v9 = v8[4];
      sub_10001A974(v8, v10);
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)(v9 + 8) + 48))(v10);
      uint64_t v12 = a2[3];
      uint64_t v13 = a2[4];
      sub_10001A974(a2, v12);
      if (v11 == (*(uint64_t (**)(uint64_t))(*(void *)(v13 + 8) + 48))(v12)) {
        break;
      }
      v8 += 5;
      if (!--v5)
      {
        uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
        uint64_t v14 = 0;
        uint64_t v7 = 0;
        uint64_t v4 = 0;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v14 = v15;
    swift_retain();
    uint64_t result = (uint64_t *)swift_retain();
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v7 = 0;
    uint64_t v4 = 0;
  }
LABEL_8:
  *a3 = v14;
  a3[1] = v7;
  a3[2] = v4;
  return result;
}

void sub_100034E64(unsigned __int16 a1@<W0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t (**a4)(void, void)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v33 = 0;
  uint64_t v11 = a4[2](a2, a4);
  if (!v11)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v18 = 51;
    *(void *)(v18 + 8) = 0;
    *(void *)(v18 + 16) = 0xE000000000000000;
    *(void *)(v18 + 24) = 0xD00000000000001DLL;
    *(void *)(v18 + 32) = 0x80000001000E3230;
    *(void *)(v18 + 40) = 0xD00000000000001ELL;
    *(void *)(v18 + 48) = 0x80000001000E2E80;
    *(void *)(v18 + 56) = 781;
    swift_willThrow();
    return;
  }
  uint64_t v12 = (void *)v11;
  uint64_t v32 = *(void *)(a3 - 8);
  id v13 = [objc_allocWithZone((Class)NSMutableData) initWithLength:*(void *)(v32 + 64)];
  if (!v13)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v19 = 1;
    *(void *)(v19 + 8) = 0;
    *(void *)(v19 + 16) = 0xE000000000000000;
    *(void *)(v19 + 24) = 0xD00000000000001DLL;
    *(void *)(v19 + 32) = 0x80000001000E3230;
    *(void *)(v19 + 40) = 0xD00000000000001ELL;
    *(void *)(v19 + 48) = 0x80000001000E2E80;
    *(void *)(v19 + 56) = 783;
    swift_willThrow();

    return;
  }
  uint64_t v14 = v13;
  uint64_t v31 = a5;
  unsigned __int8 v15 = a4[15](a2, a4);
  unsigned __int8 v16 = *(unsigned char *)(*(void *)(a4[3](a2, a4) + 32) + 2);
  swift_release();
  id v17 = v14;
  sub_1000C864C(v15, 1, 1, a1, 0, v16, v14, (uint64_t)&v33);
  if (v5)
  {

    return;
  }

  uint64_t v20 = v33;
  id v21 = v17;
  uint64_t v22 = NSData.startIndex.getter();
  uint64_t v23 = NSData.endIndex.getter();
  uint64_t v24 = NSData.startIndex.getter();
  uint64_t v25 = NSData.endIndex.getter();
  if (v22 < v24 || v25 < v22)
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  uint64_t v27 = NSData.startIndex.getter();
  uint64_t v28 = NSData.endIndex.getter();

  if (v23 < v27 || v28 < v23) {
    goto LABEL_18;
  }
  if (__OFSUB__(v23, v22)) {
    goto LABEL_19;
  }
  if (v20 == v23 - v22)
  {
    id v29 = v21;
    (*(void (**)(uint64_t, id, uint64_t))(v32 + 16))(v31, [v29 bytes], a3);

    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v31, 0, 1, a3);
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v30 = 28;
    *(void *)(v30 + 8) = 0;
    *(void *)(v30 + 16) = 0xE000000000000000;
    *(void *)(v30 + 24) = 0xD00000000000001DLL;
    *(void *)(v30 + 32) = 0x80000001000E3230;
    *(void *)(v30 + 40) = 0xD00000000000001ELL;
    *(void *)(v30 + 48) = 0x80000001000E2E80;
    *(void *)(v30 + 56) = 793;
    swift_willThrow();
  }
}

void *sub_10003526C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = v9;
  id v11 = [v9 audioDevices];

  if (!v11) {
    return 0;
  }
  sub_10000CECC(0, &qword_100128590);
  unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v13 = sub_10003570C(v12, a1, a2, a3);
  swift_bridgeObjectRelease();
  return v13;
}

id sub_100035354@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v42 = a2;
  id result = [*a1 controls];
  if (!result)
  {
LABEL_31:
    __break(1u);
    return result;
  }
  uint64_t v7 = result;
  uint64_t v8 = sub_10000CECC(0, &qword_100127B20);
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v28 = a5;
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    id result = (id)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v10 = (uint64_t)result;
    if (result) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id result = (id)swift_bridgeObjectRetain();
    if (v10)
    {
LABEL_4:
      if (v10 >= 1)
      {
        uint64_t v11 = 0;
        unint64_t v12 = v9 & 0xC000000000000001;
        id v13 = _swiftEmptyArrayStorage;
        unint64_t v31 = v9;
        while (1)
        {
          if (v12) {
            id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v14 = *(id *)(v9 + 8 * v11 + 32);
          }
          v32[0] = v14;
          id v15 = v14;
          sub_10000AC7C(&qword_100128598);
          if (!swift_dynamicCast())
          {
            uint64_t v35 = 0;
            long long v33 = 0u;
            long long v34 = 0u;
            sub_10001A918((uint64_t)&v33, &qword_100128048);
            goto LABEL_21;
          }
          uint64_t v16 = v10;
          unint64_t v17 = v12;
          uint64_t v18 = v8;
          sub_10000CF6C(&v33, (uint64_t)&v39);
          uint64_t v20 = v40;
          uint64_t v19 = v41;
          sub_10001A974(&v39, v40);
          uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v20, v19);
          sub_10001A9B8((uint64_t)&v39, (uint64_t)&v33);
          if (v21 == v42)
          {
            uint64_t v22 = *((void *)&v34 + 1);
            uint64_t v23 = v35;
            sub_10001A974(&v33, *((uint64_t *)&v34 + 1));
            uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v22, v23);
            sub_10001ABC4((uint64_t)&v33);
            sub_10001A9B8((uint64_t)&v39, (uint64_t)v32);
            if (v24 == a3)
            {
              sub_10001A974(v32, v32[3]);
              uint64_t DynamicType = swift_getDynamicType();
              sub_10001ABC4((uint64_t)v32);
              uint64_t v8 = v18;
              if (DynamicType == a4)
              {
                sub_10001A9B8((uint64_t)&v39, (uint64_t)&v36);
                sub_10001ABC4((uint64_t)&v39);

                unint64_t v12 = v17;
                uint64_t v10 = v16;
                unint64_t v9 = v31;
                if (*((void *)&v37 + 1)) {
                  goto LABEL_22;
                }
                goto LABEL_6;
              }
              goto LABEL_20;
            }
          }
          else
          {
            sub_10001ABC4((uint64_t)&v33);
            sub_10001A9B8((uint64_t)&v39, (uint64_t)v32);
          }
          sub_10001ABC4((uint64_t)v32);
          uint64_t v8 = v18;
LABEL_20:
          sub_10001ABC4((uint64_t)&v39);
          unint64_t v12 = v17;
          uint64_t v10 = v16;
          unint64_t v9 = v31;
LABEL_21:
          long long v36 = 0u;
          long long v37 = 0u;
          uint64_t v38 = 0;

          if (*((void *)&v37 + 1))
          {
LABEL_22:
            sub_10000CF6C(&v36, (uint64_t)&v39);
            sub_10000CF6C(&v39, (uint64_t)&v36);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              id v13 = sub_1000592F4(0, v13[2] + 1, 1, v13);
            }
            unint64_t v27 = v13[2];
            unint64_t v26 = v13[3];
            if (v27 >= v26 >> 1) {
              id v13 = sub_1000592F4((void *)(v26 > 1), v27 + 1, 1, v13);
            }
            v13[2] = v27 + 1;
            sub_10000CF6C(&v36, (uint64_t)&v13[5 * v27 + 4]);
            goto LABEL_7;
          }
LABEL_6:
          sub_10001A918((uint64_t)&v36, &qword_100128048);
LABEL_7:
          if (v10 == ++v11) {
            goto LABEL_29;
          }
        }
      }
      __break(1u);
      goto LABEL_31;
    }
  }
  id v13 = _swiftEmptyArrayStorage;
LABEL_29:
  id result = (id)swift_bridgeObjectRelease_n();
  *uint64_t v28 = v13;
  return result;
}

void *sub_10003570C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_36;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v24 = v5 & 0xC000000000000001;
    uint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v8 = 4;
    uint64_t v23 = v5;
    while (1)
    {
      id v9 = v24 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v5 + 8 * v8);
      uint64_t v5 = (uint64_t)v9;
      uint64_t v10 = v8 - 3;
      if (__OFADD__(v8 - 4, 1)) {
        break;
      }
      id v29 = v9;
      sub_100035354(&v29, a2, a3, a4, &v28);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v7;
      }

      uint64_t v11 = v28;
      uint64_t v5 = *(void *)(v28 + 16);
      int64_t v12 = v7[2];
      id v13 = (char *)(v12 + v5);
      if (__OFADD__(v12, v5)) {
        goto LABEL_32;
      }
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) != 0 && (uint64_t)v13 <= v7[3] >> 1)
      {
        if (*(void *)(v11 + 16)) {
          goto LABEL_20;
        }
      }
      else
      {
        if (v12 <= (uint64_t)v13) {
          int64_t v15 = v12 + v5;
        }
        else {
          int64_t v15 = v12;
        }
        uint64_t v7 = sub_1000592F4((void *)isUniquelyReferenced_nonNull_native, v15, 1, v7);
        if (*(void *)(v11 + 16))
        {
LABEL_20:
          uint64_t v16 = v7[2];
          if ((v7[3] >> 1) - v16 < v5) {
            goto LABEL_34;
          }
          unint64_t v17 = (unint64_t)&v7[5 * v16 + 4];
          if (v11 + 32 < v17 + 40 * v5 && v17 < v11 + 32 + 40 * v5)
          {
            id result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          sub_10000AC7C(&qword_100128598);
          swift_arrayInitWithCopy();
          if (v5)
          {
            uint64_t v19 = v7[2];
            BOOL v20 = __OFADD__(v19, v5);
            uint64_t v21 = (char *)(v19 + v5);
            if (v20) {
              goto LABEL_35;
            }
            v7[2] = v21;
          }
          goto LABEL_5;
        }
      }
      if (v5) {
        goto LABEL_33;
      }
LABEL_5:
      swift_bridgeObjectRelease();
      ++v8;
      uint64_t v5 = v23;
      if (v10 == v6)
      {
        swift_bridgeObjectRelease();
        return v7;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100035998()
{
  return 7;
}

uint64_t sub_1000359A0()
{
  return 16;
}

uint64_t sub_1000359A8(int a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void, uint64_t, void))
{
  return a7(a1 & 0xFFFFFF, a2, a3 & 1) & 0x1FF;
}

uint64_t sub_1000359DC(uint64_t a1)
{
  return sub_100034068(a1, v1[4], v1[5], v1[6], v1[2], v1[3]) & 1;
}

uint64_t (*sub_100035A04(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_100035B88(v6, a2, a3);
  return sub_100035A6C;
}

uint64_t (*sub_100035A70(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_100035C78(v6, a2, a3);
  return sub_100035A6C;
}

uint64_t (*sub_100035AD8(void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_100035CF8(v6, a2, a3);
  return sub_100035A6C;
}

void sub_100035B40(void *a1)
{
  int64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*sub_100035B88(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  unint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *unint64_t v3 = v4;
    return sub_100035C08;
  }
  __break(1u);
  return result;
}

uint64_t sub_100035C08()
{
  return swift_release();
}

uint64_t sub_100035C10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AC7C(&qword_100128528);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_100035C78(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  unint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)unint64_t v3 = v4;
    return sub_1000362D4;
  }
  __break(1u);
  return result;
}

void (*sub_100035CF8(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  unint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)unint64_t v3 = v4;
    return sub_100035D78;
  }
  __break(1u);
  return result;
}

void sub_100035D78(id *a1)
{
}

void *sub_100035D80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = *(void *)(a2 + 72);
  id v4 = (void *)(swift_bridgeObjectRetain() + 48);
  uint64_t v5 = _swiftEmptyArrayStorage;
  do
  {
    if (*(void *)(*(v4 - 1) + 72) == v3 && *(void *)(*(v4 - 2) + 136) != 257)
    {
      long long v13 = *((_OWORD *)v4 - 1);
      uint64_t v7 = *v4;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = sub_100058C2C(0, v5[2] + 1, 1, v5);
      }
      unint64_t v9 = v5[2];
      unint64_t v8 = v5[3];
      long long v10 = v13;
      if (v9 >= v8 >> 1)
      {
        uint64_t v11 = sub_100058C2C((void *)(v8 > 1), v9 + 1, 1, v5);
        long long v10 = v13;
        uint64_t v5 = v11;
      }
      v5[2] = v9 + 1;
      uint64_t v6 = &v5[3 * v9];
      *((_OWORD *)v6 + 2) = v10;
      v6[6] = v7;
    }
    v4 += 3;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v5;
}

void *sub_100035ECC(void *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v9 = a1[6];
  uint64_t v10 = a1[5];
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[9];
  uint64_t v5 = a1[10];
  uint64_t v6 = a1[11];
  uint64_t v8 = a1[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100035F78(v10, v9, v2, v3, v4, v5, v6, v8);
  return a1;
}

uint64_t sub_100035F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a8 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void *sub_100035FC8(void *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v9 = a1[6];
  uint64_t v10 = a1[5];
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[9];
  uint64_t v5 = a1[10];
  uint64_t v6 = a1[11];
  uint64_t v8 = a1[12];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001D1B8(v10, v9, v2, v3, v4, v5, v6, v8);
  return a1;
}

uint64_t sub_100036074@<X0>(uint64_t *a1@<X1>, float *a2@<X8>)
{
  return sub_100033404(a1, a2);
}

unint64_t sub_1000360A8()
{
  unint64_t result = qword_100128548;
  if (!qword_100128548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128548);
  }
  return result;
}

uint64_t sub_1000360FC(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_10003614C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000361A8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100036204(uint64_t a1)
{
  return a1;
}

uint64_t sub_100036258()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100036290(uint64_t a1, uint64_t a2)
{
  return sub_100032378(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t *sub_1000362B8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_100034D24(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_1000362D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(v2 + 192) + 168);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v6 = v3 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_10001A9B8(v6, (uint64_t)&v16);
      sub_10001A9B8((uint64_t)&v16, (uint64_t)v13);
      sub_10000AC7C(&qword_100127B28);
      sub_10000AC7C(&qword_100128530);
      if ((swift_dynamicCast() & 1) == 0) {
        break;
      }
      if (!*((void *)&v19 + 1)) {
        goto LABEL_4;
      }
      uint64_t result = sub_10000CF08((uint64_t)&v18, (uint64_t)v13, &qword_100128528);
      uint64_t v8 = v14;
      if (!v14)
      {
        __break(1u);
        return result;
      }
      uint64_t v9 = v15;
      sub_10001A974(v13, v14);
      unsigned __int8 v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 40))(v8, v9);
      int v11 = *(unsigned __int8 *)(*(void *)(a1 + 16) + 2);
      sub_10001ABC4((uint64_t)v13);
      sub_10001A918((uint64_t)&v18, &qword_100128528);
      if (v11 == v10)
      {
        sub_10000CF6C(&v16, (uint64_t)&v18);
        goto LABEL_13;
      }
LABEL_5:
      sub_10001ABC4((uint64_t)&v16);
      v6 += 40;
      if (!--v4) {
        goto LABEL_12;
      }
    }
    uint64_t v20 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
LABEL_4:
    sub_10001A918((uint64_t)&v18, &qword_100128528);
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
LABEL_12:
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
LABEL_13:
  swift_bridgeObjectRelease();
  sub_100038620((uint64_t)&v18, (uint64_t)&v16);
  if (v17)
  {
    sub_10000AC7C(&qword_100127B28);
    sub_10000AC7C(&qword_100128530);
    uint64_t result = swift_dynamicCast();
    if (result) {
      return result;
    }
  }
  else
  {
    uint64_t result = sub_10001A918((uint64_t)&v16, &qword_100127E98);
  }
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t sub_1000364E8(uint64_t result, _WORD *a2)
{
  *(_WORD *)uint64_t result = 521;
  if (*a2)
  {
    *(_WORD *)(result + 2) = *a2 - 1;
    *(unsigned char *)(result + 4) = 3;
    *(_DWORD *)(result + 5) = 0;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for ADC4Function()
{
  return self;
}

uint64_t sub_100036594()
{
  return 64;
}

uint64_t sub_10003659C@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  return sub_10000CF08(v1 + 224, a1, &qword_100127CC0);
}

uint64_t sub_1000365F0()
{
  sub_10000CD54();
  swift_allocError();
  *(unsigned char *)uint64_t v0 = 2;
  *(void *)(v0 + 8) = 0;
  *(void *)(v0 + 16) = 0xE000000000000000;
  *(void *)(v0 + 24) = 0xD000000000000029;
  *(void *)(v0 + 32) = 0x80000001000E20F0;
  *(void *)(v0 + 40) = 0xD00000000000001CLL;
  *(void *)(v0 + 48) = 0x80000001000E3330;
  *(void *)(v0 + 56) = 386;
  return swift_willThrow();
}

uint64_t sub_100036684(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100036770(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t))sub_10003743C);
}

uint64_t sub_1000366B0()
{
  sub_10000CD54();
  swift_allocError();
  *(unsigned char *)uint64_t v0 = 1;
  *(void *)(v0 + 8) = 0;
  *(void *)(v0 + 16) = 0xE000000000000000;
  *(void *)(v0 + 24) = 0xD000000000000021;
  *(void *)(v0 + 32) = 0x80000001000E2140;
  *(void *)(v0 + 40) = 0xD00000000000001CLL;
  *(void *)(v0 + 48) = 0x80000001000E3330;
  *(void *)(v0 + 56) = 119;
  return swift_willThrow();
}

uint64_t sub_100036744(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100036770(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t))sub_100037D4C);
}

uint64_t sub_100036770(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void, uint64_t))
{
  return a7(a1 & 0xFFFFFF, a4) & 0x1FF;
}

void sub_1000367A8(uint64_t a1, unsigned __int8 a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    __int16 v8 = *(_WORD *)(a1 + 40);
    sub_10008854C(v7, v8);
    if (v2) {
      return;
    }
    if (v9[2] != a2)
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v20 = 75;
      *(void *)(v20 + 8) = 0;
      *(void *)(v20 + 16) = 0xE000000000000000;
      *(void *)(v20 + 24) = 0xD000000000000030;
      *(void *)(v20 + 32) = 0x80000001000E21F0;
      *(void *)(v20 + 40) = 0xD00000000000001CLL;
      *(void *)(v20 + 48) = 0x80000001000E3330;
      uint64_t v21 = 285;
      goto LABEL_70;
    }
    if (!v9[3])
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v20 = 74;
      *(void *)(v20 + 8) = 0;
      *(void *)(v20 + 16) = 0xE000000000000000;
      *(void *)(v20 + 24) = 0xD000000000000030;
      *(void *)(v20 + 32) = 0x80000001000E21F0;
      *(void *)(v20 + 40) = 0xD00000000000001CLL;
      *(void *)(v20 + 48) = 0x80000001000E3330;
      uint64_t v21 = 286;
      goto LABEL_70;
    }
    if (v9[5] != 1)
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v20 = 72;
      *(void *)(v20 + 8) = 0;
      *(void *)(v20 + 16) = 0xE000000000000000;
      *(void *)(v20 + 24) = 0xD000000000000030;
      *(void *)(v20 + 32) = 0x80000001000E21F0;
      *(void *)(v20 + 40) = 0xD00000000000001CLL;
      *(void *)(v20 + 48) = 0x80000001000E3330;
      uint64_t v21 = 287;
      goto LABEL_70;
    }
    if (v9[6] != 2)
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v20 = 73;
      *(void *)(v20 + 8) = 0;
      *(void *)(v20 + 16) = 0xE000000000000000;
      *(void *)(v20 + 24) = 0xD000000000000030;
      *(void *)(v20 + 32) = 0x80000001000E21F0;
      *(void *)(v20 + 40) = 0xD00000000000001CLL;
      *(void *)(v20 + 48) = 0x80000001000E3330;
      uint64_t v21 = 288;
      goto LABEL_70;
    }
    if (v9[7] != 64)
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v20 = 76;
      *(void *)(v20 + 8) = 0;
      *(void *)(v20 + 16) = 0xE000000000000000;
      *(void *)(v20 + 24) = 0xD000000000000030;
      *(void *)(v20 + 32) = 0x80000001000E21F0;
      *(void *)(v20 + 40) = 0xD00000000000001CLL;
      *(void *)(v20 + 48) = 0x80000001000E3330;
      uint64_t v21 = 289;
      goto LABEL_70;
    }
    uint64_t v37 = v9[4];
    uint64_t v47 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
    unint64_t v10 = 0;
    uint64_t v11 = a1 + 41;
    long long v39 = _swiftEmptyArrayStorage;
LABEL_9:
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v38 = v3;
    if (v10 <= v4) {
      unint64_t v12 = v4;
    }
    else {
      unint64_t v12 = v10;
    }
    uint64_t v42 = -(uint64_t)v12;
    long long v13 = (unsigned __int8 *)(v11 + 16 * v10++);
    while (1)
    {
      if (v42 + v10 == 1) {
        goto LABEL_73;
      }
      int v14 = *v13;
      int v15 = *(v13 - 1);
      uint64_t v3 = (void *)(v15 | (v14 << 8));
      uint64_t v43 = *(unsigned char **)(v13 - 9);
      if (!_s9AUASDCore13USBDescriptorO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v43, v15 | ((_WORD)v14 << 8), v7, v8))
      {
        if (v14 <= 19)
        {
          if (v14 == 19)
          {
            uint64_t v40 = v43;
            goto LABEL_15;
          }
          if (v14 == 17)
          {
            if (v38)
            {
              long long v16 = _swiftEmptyArrayStorage;
              if (!_swiftEmptyArrayStorage[2])
              {
                swift_bridgeObjectRelease();
                long long v16 = 0;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                long long v39 = sub_100058E64(0, v39[2] + 1, 1, v39);
              }
              unint64_t v18 = v39[2];
              unint64_t v17 = v39[3];
              if (v18 >= v17 >> 1) {
                long long v39 = sub_100058E64((void *)(v17 > 1), v18 + 1, 1, v39);
              }
              v39[2] = v18 + 1;
              long long v19 = &v39[10 * v18];
              v19[4] = v38;
              v19[5] = v40;
              v19[6] = v41;
              *((_WORD *)v19 + 28) = 256;
              *((unsigned char *)v19 + 64) = 0;
              v19[9] = 0;
              *((_WORD *)v19 + 40) = 256;
              v19[12] = 0;
              v19[13] = 0;
              v19[11] = v16;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            uint64_t v3 = v43;
            uint64_t v11 = a1 + 41;
            if (v10 != v4) {
              goto LABEL_9;
            }
            goto LABEL_75;
          }
        }
        else
        {
          if (v14 == 20)
          {
            uint64_t v41 = v43;
            goto LABEL_15;
          }
          if (v14 == 76)
          {
            sub_1000D1A8C(v43, (__int16)v3);
            swift_bridgeObjectRelease();
            goto LABEL_15;
          }
        }
        sub_10005B1DC(&v46, 33);
      }
LABEL_15:
      ++v10;
      v13 += 16;
      if (v10 - v4 == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v38;
        if (v38) {
          goto LABEL_42;
        }
        swift_bridgeObjectRelease();
        uint64_t v22 = v39;
        uint64_t v28 = v39 + 2;
        unint64_t v27 = v39[2];
        if (!v27) {
          goto LABEL_66;
        }
        goto LABEL_52;
      }
    }
  }
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  swift_bridgeObjectRelease();
  uint64_t v40 = 0;
  uint64_t v41 = 0;
LABEL_42:
  uint64_t v22 = v39;
  uint64_t v23 = sub_10005AD1C((uint64_t)&_swiftEmptySetSingleton);
  unint64_t v24 = _swiftEmptyArrayStorage;
  if (!v23[2])
  {
    swift_release();
    uint64_t v23 = 0;
  }
  if (!_swiftEmptyArrayStorage[2])
  {
    swift_bridgeObjectRelease();
    unint64_t v24 = 0;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v22 = sub_100058E64(0, v39[2] + 1, 1, v39);
  }
  unint64_t v26 = v22[2];
  unint64_t v25 = v22[3];
  unint64_t v27 = v26 + 1;
  if (v26 >= v25 >> 1) {
    uint64_t v22 = sub_100058E64((void *)(v25 > 1), v26 + 1, 1, v22);
  }
  v22[2] = v27;
  uint64_t v28 = v22 + 2;
  id v29 = &v22[10 * v26];
  v29[4] = v3;
  v29[5] = v40;
  v29[6] = v41;
  *((_WORD *)v29 + 28) = 256;
  *((unsigned char *)v29 + 64) = 0;
  v29[9] = 0;
  *((_WORD *)v29 + 40) = 256;
  v29[11] = v24;
  v29[12] = 0;
  v29[13] = v23;
LABEL_52:
  uint64_t v3 = v22 + 13;
  long long v39 = v22;
  swift_bridgeObjectRetain();
  BOOL v30 = 0;
  uint64_t v31 = 1;
  while (v30)
  {
    if (v27 == v31) {
      goto LABEL_64;
    }
LABEL_58:
    BOOL v30 = 1;
LABEL_55:
    v3 += 10;
    if (__OFADD__(v31++, 1)) {
      goto LABEL_74;
    }
  }
  uint64_t v35 = (const IOUSBEndpointDescriptor *)*(v3 - 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!IOUSBGetEndpointUsageType(v35) && v35->wMaxPacketSize >= 9u)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v27 == v31)
    {
LABEL_64:
      swift_bridgeObjectRelease();
      goto LABEL_67;
    }
    goto LABEL_58;
  }
  int v36 = IOUSBGetEndpointUsageType(v35);
  if (v36)
  {
    int v33 = v36;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    unsigned int wMaxPacketSize = v35->wMaxPacketSize;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v33 = wMaxPacketSize < 9;
  }
  BOOL v30 = v33 == 2;
  if (v27 != v31) {
    goto LABEL_55;
  }
  swift_bridgeObjectRelease();
  if (v33 != 2) {
LABEL_66:
  }
    sub_10005B1DC(&v45, 81);
LABEL_67:
  if (*v28 != v37) {
    sub_10005B1DC(&v44, 82);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000CD54();
  swift_allocError();
  *(unsigned char *)uint64_t v20 = 1;
  *(void *)(v20 + 8) = 0;
  *(void *)(v20 + 16) = 0xE000000000000000;
  *(void *)(v20 + 24) = 0xD000000000000030;
  *(void *)(v20 + 32) = 0x80000001000E21F0;
  *(void *)(v20 + 40) = 0xD00000000000001CLL;
  *(void *)(v20 + 48) = 0x80000001000E3330;
  uint64_t v21 = 372;
LABEL_70:
  *(void *)(v20 + 56) = v21;
  swift_willThrow();
}

void sub_100036FB8(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6, __int16 a7, __int16 a8)
{
  uint64_t v19 = 0;
  id v15 = [objc_allocWithZone((Class)NSMutableData) initWithLength:12];
  if (!v15) {
    __break(1u);
  }
  long long v16 = v15;
  id v17 = v15;
  unint64_t v18 = [v17 mutableBytes];
  *unint64_t v18 = a3;
  v18[1] = a4;
  v18[2] = a5;
  v18[3] = a6;
  v18[4] = a7;
  v18[5] = a8;
  sub_1000C80AC(2u, 0, 1, 0, 0, 0, *(unsigned char *)(*(void *)a2 + 2), v16, (uint64_t)&v19);
}

void sub_1000370E0(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = 0;
  sub_100036FB8(a2, a3, a1, 0, 6, 0, 0, 0);
  if (!v3)
  {
    id v7 = [objc_allocWithZone((Class)NSMutableData) initWithLength:10];
    uint64_t v8 = *(void *)a3;
    sub_1000C80AC(2u, 1, 1, 0, 0, 0, *(unsigned char *)(*(void *)a3 + 2), v7, (uint64_t)&v15);
    if (v15 == 10)
    {
      if (!v7)
      {
        __break(1u);
LABEL_15:
        __break(1u);
        return;
      }
      id v7 = v7;
      uint64_t v9 = (unsigned __int16 *)[v7 mutableBytes];
      if (v9[3] == a1)
      {
        unint64_t v10 = v9;
        int v14 = v7;
        id v7 = [objc_allocWithZone((Class)NSMutableData) initWithLength:*v9];
        sub_100036FB8(a2, a3, a1, 0, 6, 0, 0, 0);
        sub_1000C80AC(2u, 1, 1, 0, 0, 0, *(unsigned char *)(v8 + 2), v7, (uint64_t)&v15);
        if (v15 == *v10)
        {
          if (v7)
          {

            return;
          }
          goto LABEL_15;
        }
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v13 = 28;
        *(void *)(v13 + 8) = 0;
        *(void *)(v13 + 16) = 0xE000000000000000;
        *(void *)(v13 + 24) = 0xD00000000000002FLL;
        *(void *)(v13 + 32) = 0x80000001000E33A0;
        *(void *)(v13 + 40) = 0xD00000000000001CLL;
        *(void *)(v13 + 48) = 0x80000001000E3330;
        *(void *)(v13 + 56) = 216;
        swift_willThrow();

        goto LABEL_12;
      }
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v11 = 28;
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 16) = 0xE000000000000000;
      *(void *)(v11 + 24) = 0xD00000000000002FLL;
      *(void *)(v11 + 32) = 0x80000001000E33A0;
      *(void *)(v11 + 40) = 0xD00000000000001CLL;
      *(void *)(v11 + 48) = 0x80000001000E3330;
      uint64_t v12 = 203;
    }
    else
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v11 = 28;
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 16) = 0xE000000000000000;
      *(void *)(v11 + 24) = 0xD00000000000002FLL;
      *(void *)(v11 + 32) = 0x80000001000E33A0;
      *(void *)(v11 + 40) = 0xD00000000000001CLL;
      *(void *)(v11 + 48) = 0x80000001000E3330;
      uint64_t v12 = 199;
    }
    *(void *)(v11 + 56) = v12;
    swift_willThrow();
LABEL_12:
  }
}

void sub_10003743C(int a1, void *a2)
{
  void (*v19)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int16 v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void v48[3];
  uint64_t v49;
  uint64_t v50;
  _OWORD v51[7];
  uint64_t v52;

  uint64_t v47 = 0;
  unsigned int v5 = a1 & 0xFFFFFF;
  AUASDCore::tADCControlRequestParameterBlockLayout v6 = USBDescriptorControl.pbLayout()();
  sub_1000852E4(v6);
  if (v3) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)unint64_t v25 = 7;
    *(void *)(v25 + 8) = 0;
    *(void *)(v25 + 16) = 0xE000000000000000;
    *(void *)(v25 + 24) = 0xD000000000000028;
    *(void *)(v25 + 32) = 0x80000001000E2EA0;
    *(void *)(v25 + 40) = 0xD00000000000001CLL;
    *(void *)(v25 + 48) = 0x80000001000E3330;
    *(void *)(v25 + 56) = 45;
    swift_willThrow();

    return;
  }
  char v45 = v8;
  char v46 = (void *)Strong;
  uint64_t v10 = *(void *)(v2 + 192);
  long long v12 = *(_OWORD *)(v10 + 32);
  long long v11 = *(_OWORD *)(v10 + 48);
  long long v13 = *(_OWORD *)(v10 + 80);
  v51[2] = *(_OWORD *)(v10 + 64);
  v51[3] = v13;
  long long v15 = *(_OWORD *)(v10 + 96);
  long long v14 = *(_OWORD *)(v10 + 112);
  uint64_t v52 = *(void *)(v10 + 144);
  long long v16 = *(_OWORD *)(v10 + 128);
  v51[5] = v14;
  v51[6] = v16;
  v51[4] = v15;
  v51[0] = v12;
  v51[1] = v11;
  uint64_t v18 = a2[3];
  uint64_t v17 = a2[4];
  sub_10001A974(a2, v18);
  uint64_t v19 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v17 + 8);
  sub_100035ECC(v51);
  v19(v48, v18, v17);
  uint64_t v20 = v49;
  uint64_t v21 = v50;
  sub_10001A974(v48, v49);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
  if (v22 >= 0x10000)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  uint64_t v23 = v22;
  sub_10001ABC4((uint64_t)v48);
  unint64_t v24 = sub_100088544(v5);
  sub_100036FB8((uint64_t)v46, (uint64_t)v51, v23, v24, 1, 0, 0, 0);
  sub_100035FC8(v51);
  unint64_t v26 = *(void *)(v10 + 88);
  uint64_t v43 = *(void *)(v10 + 80);
  char v44 = *(void *)(v10 + 72);
  unint64_t v27 = *(void *)(v10 + 96);
  uint64_t v28 = *(void *)(v10 + 120);
  uint64_t v40 = *(void *)(v10 + 112);
  uint64_t v41 = *(void *)(v10 + 104);
  id v29 = *(void *)(v10 + 128);
  uint64_t v42 = *(unsigned char *)(*(void *)(v10 + 32) + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100035F78(v44, v43, v26, v27, v41, v40, v28, v29);
  BOOL v30 = v45;
  sub_1000C80AC(2u, 1, 1, 0, 0, 0, v42, v45, (uint64_t)&v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_10001D1B8(v44, v43, v26, v27, v41, v40, v28, v29);
  uint64_t v31 = v47;
  uint64_t v32 = v30;
  int v33 = NSData.startIndex.getter();
  long long v34 = NSData.endIndex.getter();
  uint64_t v35 = NSData.startIndex.getter();
  int v36 = NSData.endIndex.getter();
  if (v33 < v35 || v36 < v33)
  {
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  uint64_t v37 = NSData.startIndex.getter();
  uint64_t v38 = NSData.endIndex.getter();

  if (v34 < v37 || v38 < v34) {
    goto LABEL_16;
  }
  if (__OFSUB__(v34, v33)) {
    goto LABEL_17;
  }
  if (v31 != v34 - v33)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)long long v39 = 28;
    *(void *)(v39 + 8) = 0;
    *(void *)(v39 + 16) = 0xE000000000000000;
    *(void *)(v39 + 24) = 0xD000000000000028;
    *(void *)(v39 + 32) = 0x80000001000E2EA0;
    *(void *)(v39 + 40) = 0xD00000000000001CLL;
    *(void *)(v39 + 48) = 0x80000001000E3330;
    *(void *)(v39 + 56) = 59;
    swift_willThrow();
  }
}

uint64_t sub_10003792C(unint64_t a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = 0;
  id v9 = [objc_allocWithZone((Class)NSMutableData) initWithLength:1];
  if (a1 >= 0x10000) {
    goto LABEL_10;
  }
  uint64_t v10 = v9;
  sub_100036FB8(a3, a4, a1, a2, 4, 0, 0, 0);
  if (v4)
  {
LABEL_7:

    return a3;
  }
  sub_1000C80AC(2u, 1, 1, 0, 0, 0, *(unsigned char *)(*(void *)a4 + 2), v10, (uint64_t)&v17);
  if (v17 != 1)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v15 = 28;
    *(void *)(v15 + 8) = 0;
    *(void *)(v15 + 16) = 0xE000000000000000;
    *(void *)(v15 + 24) = 0xD000000000000049;
    *(void *)(v15 + 32) = 0x80000001000E3350;
    *(void *)(v15 + 40) = 0xD00000000000001CLL;
    *(void *)(v15 + 48) = 0x80000001000E3330;
    *(void *)(v15 + 56) = 275;
    swift_willThrow();
    goto LABEL_7;
  }
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;

    a3 = Data.subscript.getter();
    sub_100038688(v12, v14);

    return a3;
  }
  __break(1u);
LABEL_10:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100037B58(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  sub_1000370E0(a1, a2, a3);
  if (!v3)
  {
    id v6 = v5;
    id v7 = (unsigned __int16 *)[v6 bytes];
    if (v7[3] == a1)
    {
      uint64_t v8 = v7;
      if (v7[2] == 255)
      {
        uint64_t v9 = sub_1000823F8((unsigned char *)v7 + 10, *v7 - 10);
        unint64_t v11 = v10;
        id v12 = [objc_allocWithZone((Class)NSMutableData) initWithLength:9];
        if (v12)
        {
          id v13 = v12;
          sub_1000364E8((uint64_t)[v13 mutableBytes], v8);
          id v14 = v13;
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          [v14 appendData:isa];

          id v16 = v14;
          static Data._unconditionallyBridgeFromObjectiveC(_:)();

          sub_100038688(v9, v11);
        }
        else
        {
          __break(1u);
        }
        return;
      }
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v17 = 33;
      uint64_t v18 = 233;
    }
    else
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v17 = 28;
      uint64_t v18 = 230;
    }
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = 0xE000000000000000;
    *(void *)(v17 + 24) = 0xD00000000000002CLL;
    *(void *)(v17 + 32) = 0x80000001000E33D0;
    *(void *)(v17 + 40) = 0xD00000000000001CLL;
    *(void *)(v17 + 48) = 0x80000001000E3330;
    *(void *)(v17 + 56) = v18;
    swift_willThrow();
  }
}

void sub_100037D4C(int a1, void *a2)
{
  void (*v21)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int16 v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  long long v44;
  long long v45;
  long long v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 v70;
  void (*v71)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void v82[3];
  uint64_t v83;
  uint64_t v84;
  _OWORD v85[7];
  uint64_t v86;
  _OWORD v87[7];
  uint64_t v88;

  int v81 = 0;
  unsigned int v5 = a1 & 0xFFFFFF;
  uint64_t v6 = USBDescriptorControl.pbLayout()();
  __int16 v7 = sub_100085EBC(v6, 1);
  if (!v3)
  {
    __int16 v9 = v7;
    unint64_t v10 = v8;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v80 = Strong;
      Swift::String v73 = v9;
      uint64_t v12 = *(void *)(v2 + 192);
      long long v14 = *(_OWORD *)(v12 + 32);
      long long v13 = *(_OWORD *)(v12 + 48);
      long long v15 = *(_OWORD *)(v12 + 80);
      v87[2] = *(_OWORD *)(v12 + 64);
      v87[3] = v15;
      long long v17 = *(_OWORD *)(v12 + 96);
      long long v16 = *(_OWORD *)(v12 + 112);
      uint64_t v88 = *(void *)(v12 + 144);
      long long v18 = *(_OWORD *)(v12 + 128);
      v87[5] = v16;
      v87[6] = v18;
      v87[4] = v17;
      v87[0] = v14;
      v87[1] = v13;
      uint64_t v20 = a2[3];
      uint64_t v19 = a2[4];
      sub_10001A974(a2, v20);
      uint64_t v21 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v19 + 8);
      id v76 = v10;
      sub_100035ECC(v87);
      Swift::String v71 = v21;
      uint64_t v72 = v20;
      v21(v82, v20, v19);
      uint64_t v22 = v83;
      uint64_t v23 = v84;
      sub_10001A974(v82, v83);
      unint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v22, v23);
      if (v24 >> 16)
      {
LABEL_31:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
      unint64_t v25 = v24;
      sub_10001ABC4((uint64_t)v82);
      unint64_t v26 = sub_100088544(v5);
      sub_100036FB8(v80, (uint64_t)v87, v25, v26, 3, 0, 0, 0);
      id v61 = v26;
      sub_100035FC8(v87);
      long long v77 = *(void *)(v12 + 72);
      uint64_t v62 = *(void *)(v12 + 96);
      uint64_t v63 = *(void *)(v12 + 88);
      uint64_t v28 = *(void *)(v12 + 112);
      Swift::String v74 = *(void *)(v12 + 104);
      id v75 = *(void *)(v12 + 80);
      id v29 = *(void *)(v12 + 120);
      BOOL v30 = *(void *)(v12 + 128);
      unsigned int v64 = *(unsigned char *)(*(void *)(v12 + 32) + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v68 = v28;
      sub_100035F78(v77, v75, v63, v62, v74, v28, v29, v30);
      uint64_t v31 = v76;
      sub_1000C80AC(2u, 1, 1, 0, 0, 0, v64, v76, (uint64_t)&v81);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001D1B8(v77, v75, v63, v62, v74, v68, v29, v30);
      uint64_t v78 = v81;
      uint64_t v32 = NSData.startIndex.getter();
      int v33 = NSData.endIndex.getter();
      long long v34 = NSData.startIndex.getter();
      uint64_t v35 = NSData.endIndex.getter();
      if (v32 < v34 || v35 < v32)
      {
        __break(1u);
      }
      else
      {
        int v36 = NSData.startIndex.getter();
        uint64_t v37 = NSData.endIndex.getter();

        if (v33 >= v36 && v37 >= v33)
        {
          uint64_t v38 = (void *)v80;
          if (!__OFSUB__(v33, v32))
          {
            if (v78 != v33 - v32)
            {

              sub_10000CD54();
              swift_allocError();
              *(unsigned char *)long long v39 = 28;
              *(void *)(v39 + 8) = 0;
              *(void *)(v39 + 16) = 0xE000000000000000;
              *(void *)(v39 + 24) = 0xD00000000000002ALL;
              *(void *)(v39 + 32) = 0x80000001000E2E50;
              *(void *)(v39 + 40) = 0xD00000000000001CLL;
              *(void *)(v39 + 48) = 0x80000001000E3330;
              uint64_t v40 = 82;
LABEL_14:
              *(void *)(v39 + 56) = v40;
              swift_willThrow();

              return;
            }
            uint64_t v41 = sub_1000736D8(v73 & 0x1FF, v76);

            if (v41 == 1) {
              goto LABEL_16;
            }
            sub_100085EBC(v6, v41);
            uint64_t v43 = v42;

            char v44 = *(_OWORD *)(v12 + 112);
            v85[4] = *(_OWORD *)(v12 + 96);
            v85[5] = v44;
            v85[6] = *(_OWORD *)(v12 + 128);
            uint64_t v86 = *(void *)(v12 + 144);
            char v45 = *(_OWORD *)(v12 + 48);
            v85[0] = *(_OWORD *)(v12 + 32);
            v85[1] = v45;
            char v46 = *(_OWORD *)(v12 + 80);
            v85[2] = *(_OWORD *)(v12 + 64);
            v85[3] = v46;
            uint64_t v31 = v43;
            sub_100035ECC(v85);
            v71(v82, v72, v19);
            uint64_t v47 = v83;
            unint64_t v48 = v84;
            sub_10001A974(v82, v83);
            unint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 16))(v47, v48);
            if (v49 >> 16) {
              goto LABEL_31;
            }
            unint64_t v50 = v49;
            sub_10001ABC4((uint64_t)v82);
            sub_100036FB8(v80, (uint64_t)v85, v50, v61, 3, 0, 0, 0);
            sub_100035FC8(v85);
            uint64_t v51 = *(void *)(v12 + 80);
            long long v79 = *(void *)(v12 + 72);
            long long v67 = *(void *)(v12 + 96);
            id v69 = *(void *)(v12 + 88);
            uint64_t v52 = *(void *)(v12 + 120);
            Class v65 = *(void *)(v12 + 112);
            long long v66 = *(void *)(v12 + 104);
            unint64_t v53 = *(void *)(v12 + 128);
            id v70 = *(unsigned char *)(*(void *)(v12 + 32) + 2);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_100035F78(v79, v51, v69, v67, v66, v65, v52, v53);
            sub_1000C80AC(2u, 1, 1, 0, 0, 0, v70, v31, (uint64_t)&v81);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_10001D1B8(v79, v51, v69, v67, v66, v65, v52, v53);
            uint64_t v54 = v81;
            unint64_t v55 = NSData.startIndex.getter();
            id v56 = NSData.endIndex.getter();
            id v57 = NSData.startIndex.getter();
            uint64_t v58 = NSData.endIndex.getter();
            if (v55 < v57 || v58 < v55)
            {
              __break(1u);
            }
            else
            {
              uint64_t v59 = NSData.startIndex.getter();
              char v60 = NSData.endIndex.getter();

              if (v56 >= v59 && v60 >= v56)
              {
                uint64_t v38 = (void *)v80;
                if (!__OFSUB__(v56, v55))
                {
                  if (v54 != v56 - v55)
                  {
                    sub_10000CD54();
                    swift_allocError();
                    *(unsigned char *)long long v39 = 28;
                    *(void *)(v39 + 8) = 0;
                    *(void *)(v39 + 16) = 0xE000000000000000;
                    *(void *)(v39 + 24) = 0xD00000000000002ALL;
                    *(void *)(v39 + 32) = 0x80000001000E2E50;
                    *(void *)(v39 + 40) = 0xD00000000000001CLL;
                    *(void *)(v39 + 48) = 0x80000001000E3330;
                    uint64_t v40 = 98;
                    goto LABEL_14;
                  }
LABEL_16:

                  return;
                }
                goto LABEL_30;
              }
            }
            __break(1u);
LABEL_30:
            __break(1u);
            goto LABEL_31;
          }
LABEL_27:
          __break(1u);
        }
      }
      __break(1u);
      goto LABEL_27;
    }
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)unint64_t v27 = 7;
    *(void *)(v27 + 8) = 0;
    *(void *)(v27 + 16) = 0xE000000000000000;
    *(void *)(v27 + 24) = 0xD00000000000002ALL;
    *(void *)(v27 + 32) = 0x80000001000E2E50;
    *(void *)(v27 + 40) = 0xD00000000000001CLL;
    *(void *)(v27 + 48) = 0x80000001000E3330;
    *(void *)(v27 + 56) = 69;
    swift_willThrow();
  }
}

uint64_t sub_100038620(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AC7C(&qword_100127E98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100038688(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

id sub_1000386E0(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  *(void *)&v5[OBJC_IVAR___AUAStreamFormat_altSetting] = a2;
  __int16 v7 = (unint64_t *)&v5[OBJC_IVAR___AUAStreamFormat_rateRange];
  *__int16 v7 = a3;
  v7[1] = a4;
  v7[2] = a5;
  if (a4 == a3)
  {
    v11.receiver = v5;
    v11.super_class = (Class)type metadata accessor for AUAStreamFormat();
    unsigned int v5 = "initWithAudioStreamBasicDescription:";
    swift_retain();
    id result = objc_msgSendSuper2(&v11, "initWithAudioStreamBasicDescription:", a1);
    if (result)
    {
LABEL_5:
      id v10 = result;
      swift_release();
      return v10;
    }
    __break(1u);
  }
  *(void *)a1 = 0;
  uint64_t v13 = 0;
  long long v14 = *(_OWORD *)(a1 + 8);
  long long v15 = *(_OWORD *)(a1 + 24);
  double v16 = (double)a3;
  double v17 = (double)a4;
  __int16 v9 = (objc_class *)type metadata accessor for AUAStreamFormat();
  v12.receiver = v5;
  v12.super_class = v9;
  swift_retain();
  id result = objc_msgSendSuper2(&v12, "initWithAudioStreamRangedDescription:", &v13);
  if (result) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

BOOL sub_100038900(uint64_t a1)
{
  sub_100038EBC(a1, (uint64_t)v26);
  uint64_t v3 = v27;
  if (v27)
  {
    uint64_t v4 = sub_10001A974(v26, v27);
    uint64_t v5 = *(void *)(v3 - 8);
    __chkstk_darwin(v4);
    __int16 v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v5 + 16))(v7);
    uint64_t v8 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v3);
    sub_10001ABC4((uint64_t)v26);
  }
  else
  {
    uint64_t v8 = 0;
  }
  __int16 v9 = (objc_class *)type metadata accessor for AUAStreamFormat();
  v25.receiver = v1;
  v25.super_class = v9;
  objc_msgSendSuper2(&v25, "isEqual:", v8);
  swift_unknownObjectRelease();
  sub_100038EBC(a1, (uint64_t)v26);
  uint64_t v10 = v27;
  if (v27)
  {
    objc_super v11 = sub_10001A974(v26, v27);
    uint64_t v12 = *(void *)(v10 - 8);
    __chkstk_darwin(v11);
    long long v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v12 + 16))(v14);
    uint64_t v15 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v10);
    sub_10001ABC4((uint64_t)v26);
  }
  else
  {
    uint64_t v15 = 0;
  }
  v24.receiver = v1;
  v24.super_class = v9;
  unsigned int v16 = objc_msgSendSuper2(&v24, "isEqual:", v15);
  swift_unknownObjectRelease();
  if (v16)
  {
    sub_100038EBC(a1, (uint64_t)v26);
    if (v27)
    {
      if (swift_dynamicCast())
      {
        uint64_t v17 = *(void *)&v23[OBJC_IVAR___AUAStreamFormat_altSetting];
        if (v17)
        {
          uint64_t v18 = *(void *)&v1[OBJC_IVAR___AUAStreamFormat_altSetting];
          if (v18)
          {
            int v19 = *(unsigned __int8 *)(*(void *)(v17 + 16) + 3);
            int v20 = *(unsigned __int8 *)(*(void *)(v18 + 16) + 3);

            return v19 == v20;
          }
        }
      }
    }
    else
    {
      sub_100038E5C((uint64_t)v26);
    }
  }
  return 0;
}

BOOL sub_100038C68(uint64_t a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for AUAStreamFormat();
  if (objc_msgSendSuper2(&v5, "isCompatible:", a1)) {
    BOOL v3 = a1 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  return !v3 && swift_dynamicCastClass() != 0;
}

id sub_100038DF4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AUAStreamFormat();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AUAStreamFormat()
{
  return self;
}

uint64_t sub_100038E5C(uint64_t a1)
{
  uint64_t v2 = sub_10000AC7C((uint64_t *)&unk_100129170);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100038EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AC7C((uint64_t *)&unk_100129170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Endpoint.synchronizationType.getter()
{
  uint64_t v1 = *v0;
  uint64_t result = IOUSBGetEndpointSynchronizationType(*v0);
  if (!result)
  {
    if (IOUSBGetEndpointDirection(v1) == 1) {
      return 1;
    }
    else {
      return 3;
    }
  }
  return result;
}

uint64_t Endpoint.usageType.getter()
{
  uint64_t v1 = *v0;
  uint64_t result = IOUSBGetEndpointUsageType(*v0);
  if (!result) {
    return v1->wMaxPacketSize < 9u;
  }
  return result;
}

void sub_100038FA4()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100038FD0()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_100039018()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t LockDelay.units.getter(char a1)
{
  return a1 & 1;
}

uint64_t LockDelay.units.setter(uint64_t result)
{
  *Swift::UInt32 v1 = result & 1;
  return result;
}

uint64_t (*LockDelay.units.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

uint64_t LockDelay.value.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t LockDelay.value.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*LockDelay.value.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

void LockDelay.hash(into:)(uint64_t a1, char a2, Swift::UInt a3)
{
}

uint64_t static LockDelay.__derived_struct_equals(_:_:)(char a1, uint64_t a2, int a3, uint64_t a4)
{
  return (((a1 & 1) == 0) ^ a3) & (a2 == a4);
}

Swift::Int LockDelay.hashValue.getter(char a1, Swift::UInt a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_100039168()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1000391C8()
{
  Swift::UInt v1 = *((void *)v0 + 1);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_100039208()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL sub_100039264(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
}

uint64_t Endpoint.epDesc.getter()
{
  return *(void *)v0;
}

uint64_t Endpoint.ssEpDesc.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t MixerUnit.entityID.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t Endpoint.address.getter()
{
  return IOUSBGetEndpointAddress(*v0);
}

uint64_t Endpoint.direction.getter()
{
  return IOUSBGetEndpointDirection(*v0);
}

uint64_t Endpoint.transferType.getter()
{
  return IOUSBGetEndpointType(*v0);
}

uint64_t Endpoint.bRefresh.getter()
{
  return *(unsigned __int8 *)(v0 + 24) | (*(unsigned __int8 *)(v0 + 25) << 8);
}

uint64_t Endpoint.bRefresh.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 24) = result;
  *(unsigned char *)(v1 + 25) = BYTE1(result) & 1;
  return result;
}

uint64_t (*Endpoint.bRefresh.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

uint64_t Endpoint.lockDelay.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t Endpoint.feedbackAddress.getter()
{
  return *(unsigned __int8 *)(v0 + 48) | (*(unsigned __int8 *)(v0 + 49) << 8);
}

uint64_t Endpoint.exceptionList.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 72) = a1;
  return result;
}

uint64_t (*Endpoint.exceptionList.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

void Endpoint.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(void *)v2);
  Swift::UInt v4 = *(void *)(v2 + 8);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
    Swift::UInt v5 = *(void *)(v2 + 16);
    if (v5) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if (*(unsigned char *)(v2 + 25)) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  Hasher._combine(_:)(0);
  Swift::UInt v5 = *(void *)(v2 + 16);
  if (!v5) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v5);
  if (*(unsigned char *)(v2 + 25))
  {
LABEL_4:
    Swift::UInt8 v6 = 0;
    goto LABEL_8;
  }
LABEL_7:
  Swift::UInt8 v6 = *(unsigned char *)(v2 + 24);
  Hasher._combine(_:)(1u);
LABEL_8:
  Hasher._combine(_:)(v6);
  Swift::UInt v7 = *(void *)(v2 + 40);
  Hasher._combine(_:)(*(unsigned char *)(v2 + 32) & 1);
  Hasher._combine(_:)(v7);
  if (*(unsigned char *)(v2 + 49))
  {
    Swift::UInt8 v8 = 0;
  }
  else
  {
    Swift::UInt8 v8 = *(unsigned char *)(v2 + 48);
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v8);
  uint64_t v9 = *(void *)(v2 + 56);
  if (v9)
  {
    Hasher._combine(_:)(1u);
    Swift::UInt v10 = *(void *)(v9 + 16);
    Hasher._combine(_:)(v10);
    if (v10)
    {
      objc_super v11 = (unsigned __int16 *)(v9 + 32);
      do
      {
        int v12 = *((unsigned __int8 *)v11 + 2);
        int v13 = *v11;
        objc_super v11 = (unsigned __int16 *)((char *)v11 + 3);
        USBDescriptorControl.hash(into:)(a1, v13 | (v12 << 16));
        --v10;
      }
      while (v10);
    }
    uint64_t v14 = *(void *)(v2 + 64);
    if (v14)
    {
LABEL_16:
      Hasher._combine(_:)(1u);
      Swift::UInt v15 = *(void *)(v14 + 16);
      Hasher._combine(_:)(v15);
      if (v15)
      {
        unsigned int v16 = (Swift::UInt *)(v14 + 48);
        do
        {
          Swift::UInt v17 = *(v16 - 2);
          Swift::UInt v18 = *(v16 - 1);
          Swift::UInt v19 = *v16;
          v16 += 3;
          Hasher._combine(_:)(v17);
          Hasher._combine(_:)(v18);
          Hasher._combine(_:)(v19);
          --v15;
        }
        while (v15);
      }
      uint64_t v20 = *(void *)(v2 + 72);
      if (v20) {
        goto LABEL_20;
      }
LABEL_26:
      Hasher._combine(_:)(0);
      return;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v14 = *(void *)(v2 + 64);
    if (v14) {
      goto LABEL_16;
    }
  }
  Hasher._combine(_:)(0);
  uint64_t v20 = *(void *)(v2 + 72);
  if (!v20) {
    goto LABEL_26;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  Swift::UInt v21 = *(void *)(v20 + 16);
  Hasher._combine(_:)(v21);
  if (v21)
  {
    uint64_t v22 = (unsigned __int8 *)(v20 + 32);
    do
    {
      unsigned int v23 = *v22++;
      Hasher._combine(_:)(v23);
      --v21;
    }
    while (v21);
  }
}

Swift::Int Endpoint.hashValue.getter()
{
  Hasher.init(_seed:)();
  Endpoint.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000395D0()
{
  Hasher.init(_seed:)();
  Endpoint.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_10003960C(_OWORD *a1, long long *a2)
{
  long long v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  long long v3 = a1[4];
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a2[3];
  long long v9[2] = a2[2];
  v9[3] = v5;
  void v9[4] = a2[4];
  long long v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return _s9AUASDCore8EndpointV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v8, (uint64_t)v9) & 1;
}

uint64_t _s9AUASDCore8EndpointV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v5)
  {
    if (v6) {
      BOOL v7 = v5 == v6;
    }
    else {
      BOOL v7 = 0;
    }
    if (!v7) {
      return 0;
    }
  }
  else if (v6)
  {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a2 + 16);
  if (!v8)
  {
    if (v9) {
      return 0;
    }
    goto LABEL_17;
  }
  uint64_t result = 0;
  if (v9 && v8 == v9)
  {
LABEL_17:
    char v10 = *(unsigned char *)(a2 + 25);
    if (*(unsigned char *)(a1 + 25))
    {
      if (!*(unsigned char *)(a2 + 25)) {
        return 0;
      }
    }
    else
    {
      if (*(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24)) {
        char v10 = 1;
      }
      if (v10) {
        return 0;
      }
    }
    uint64_t result = 0;
    if (((*(unsigned __int8 *)(a1 + 32) ^ *(unsigned __int8 *)(a2 + 32)) & 1) != 0
      || *(void *)(a1 + 40) != *(void *)(a2 + 40))
    {
      return result;
    }
    char v11 = *(unsigned char *)(a2 + 49);
    if (*(unsigned char *)(a1 + 49))
    {
      if (!*(unsigned char *)(a2 + 49)) {
        return 0;
      }
    }
    else
    {
      if (*(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48)) {
        char v11 = 1;
      }
      if (v11) {
        return 0;
      }
    }
    uint64_t v12 = *(void *)(a1 + 56);
    uint64_t v13 = *(void *)(a2 + 56);
    if (v12)
    {
      if (!v13 || (sub_1000B5C34(v12, v13) & 1) == 0) {
        return 0;
      }
    }
    else if (v13)
    {
      return 0;
    }
    uint64_t v14 = *(int64x2_t **)(a1 + 64);
    Swift::UInt v15 = *(int64x2_t **)(a2 + 64);
    if (v14)
    {
      if (!v15 || !sub_1000B5CF4(v14, v15)) {
        return 0;
      }
    }
    else if (v15)
    {
      return 0;
    }
    uint64_t v16 = *(void *)(a1 + 72);
    uint64_t v17 = *(void *)(a2 + 72);
    if (v16)
    {
      if (v17 && sub_1000B5D90(v16, v17)) {
        return 1;
      }
    }
    else if (!v17)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1000397C0()
{
  return sub_1000398E0(&qword_100128738, type metadata accessor for tIOUSBEndpointDirection);
}

uint64_t sub_100039808()
{
  return sub_1000398E0(&qword_100128740, type metadata accessor for tIOUSBEndpointType);
}

uint64_t sub_100039850()
{
  return sub_1000398E0(&qword_100128748, type metadata accessor for tIOUSBEndpointSynchronizationType);
}

uint64_t sub_100039898()
{
  return sub_1000398E0(&qword_100128750, type metadata accessor for tIOUSBEndpointUsageType);
}

uint64_t sub_1000398E0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10003992C()
{
  unint64_t result = qword_100128758;
  if (!qword_100128758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128758);
  }
  return result;
}

unint64_t sub_100039984()
{
  unint64_t result = qword_100128760;
  if (!qword_100128760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128760);
  }
  return result;
}

unint64_t sub_1000399DC()
{
  unint64_t result = qword_100128768;
  if (!qword_100128768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128768);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LockDelay(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[16]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for LockDelay(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LockDelay()
{
  return &type metadata for LockDelay;
}

unsigned char *storeEnumTagSinglePayload for LockDelay.LockDelayUnits(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100039B90);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LockDelay.LockDelayUnits()
{
  return &type metadata for LockDelay.LockDelayUnits;
}

uint64_t destroy for Endpoint()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Endpoint(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Endpoint(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for Endpoint(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for Endpoint(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Endpoint(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Endpoint(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(void *)(result + 56) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Endpoint()
{
  return &type metadata for Endpoint;
}

unint64_t sub_100039EA8(uint64_t a1)
{
  if (a1) {
    return 0;
  }
  if ((BYTE1(a1) - 1) > 5u) {
    uint64_t v1 = 5;
  }
  else {
    uint64_t v1 = qword_1000EACD0[(char)(BYTE1(a1) - 1)];
  }
  unint64_t v3 = BYTE4(a1) | (unint64_t)(v1 << 8) | ((unint64_t)BYTE3(a1) << 16);
  if ((a1 & 0xFF0000000000) != 0) {
    unint64_t v3 = BYTE5(a1);
  }
  if ((a1 & 2) != 0) {
    return BYTE4(a1) | (unint64_t)(v1 << 8) | ((unint64_t)BYTE3(a1) << 16);
  }
  else {
    return v3;
  }
}

uint64_t sub_100039F58()
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (!result)
  {
LABEL_12:
    int v6 = *(unsigned __int8 *)(*(void *)(v0 + 192) + 208);
    return v6 == 4 || v6 == 15;
  }
  uint64_t v2 = *(void *)(result + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
  if (!v2) {
    goto LABEL_11;
  }
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    goto LABEL_11;
  }
  if (*(unsigned char *)(v2 + 32) == 16)
  {
LABEL_5:

    return 1;
  }
  if (v3 == 1)
  {
LABEL_11:

    goto LABEL_12;
  }
  uint64_t v4 = 33;
  while (1)
  {
    uint64_t v5 = v4 - 31;
    if (__OFADD__(v4 - 32, 1)) {
      break;
    }
    if (*(unsigned char *)(v2 + v4) == 16) {
      goto LABEL_5;
    }
    ++v4;
    if (v5 == v3) {
      goto LABEL_11;
    }
  }
  __break(1u);
  return result;
}

void sub_100039FF8(unsigned int a1, uint64_t a2)
{
  uint64_t v50 = 0;
  int v5 = a1 & 0xFFFFFF;
  uint64_t v6 = USBDescriptorControl.pbLayout()();
  unsigned int v7 = v6;
  __int16 v8 = sub_100086554(v6, 4);
  if (!v2)
  {
    __int16 v10 = v8;
    id v11 = v9;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (!Strong)
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v22 = 7;
      *(void *)(v22 + 8) = 0;
      *(void *)(v22 + 16) = 0xE000000000000000;
      *(void *)(v22 + 24) = 0xD000000000000031;
      *(void *)(v22 + 32) = 0x80000001000E21B0;
      *(void *)(v22 + 40) = 0xD00000000000001CLL;
      *(void *)(v22 + 48) = 0x80000001000E35F0;
      *(void *)(v22 + 56) = 77;
      swift_willThrow();
      goto LABEL_11;
    }
    uint64_t v13 = (void *)Strong;
    uint64_t v14 = *(void *)(Strong + OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList);
    if (v14 && sub_10001925C(7, v14))
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v15 = 108;
      *(void *)(v15 + 8) = 0;
      *(void *)(v15 + 16) = 0xE000000000000000;
      *(void *)(v15 + 24) = 0xD000000000000031;
      *(void *)(v15 + 32) = 0x80000001000E21B0;
      *(void *)(v15 + 40) = 0xD00000000000001CLL;
      *(void *)(v15 + 48) = 0x80000001000E35F0;
      *(void *)(v15 + 56) = 80;
      swift_willThrow();

LABEL_11:
      return;
    }
    unsigned int v47 = v5;
    unint64_t v49 = v13;
    unsigned int v48 = v7;
    uint64_t v16 = *(void *)(a2 + 32);
    uint64_t v17 = 1;
    unsigned int v18 = a1 >> 8;
    while (1)
    {
      uint64_t v20 = v11;
      unsigned __int8 v21 = *(unsigned char *)(v16 + 2);
      id v11 = v11;
      sub_1000C80AC(1u, 1, 1, v18, 0, 0, v21, v20, (uint64_t)&v50);

      if (v17 == 4) {
        break;
      }
      if (__OFADD__(v17++, 1))
      {
        __break(1u);
        goto LABEL_27;
      }
    }
    uint64_t v46 = v50;
    id v23 = v11;
    uint64_t v24 = NSData.startIndex.getter();
    uint64_t v25 = NSData.endIndex.getter();
    uint64_t v26 = NSData.startIndex.getter();
    uint64_t v27 = NSData.endIndex.getter();
    if (v24 < v26 || v27 < v24)
    {
      __break(1u);
    }
    else
    {
      uint64_t v28 = NSData.startIndex.getter();
      uint64_t v29 = NSData.endIndex.getter();

      if (v25 >= v28 && v29 >= v25)
      {
        if (!__OFSUB__(v25, v24))
        {
          if (v25 - v24 < v46)
          {
            sub_10000CD54();
            swift_allocError();
            *(unsigned char *)uint64_t v30 = 28;
            *(void *)(v30 + 8) = 0;
            *(void *)(v30 + 16) = 0xE000000000000000;
            *(void *)(v30 + 24) = 0xD000000000000031;
            *(void *)(v30 + 32) = 0x80000001000E21B0;
            *(void *)(v30 + 40) = 0xD00000000000001CLL;
            *(void *)(v30 + 48) = 0x80000001000E35F0;
            *(void *)(v30 + 56) = 118;
            swift_willThrow();

            return;
          }
          if ((v10 & 0x100) != 0) {
            __int16 v31 = 256;
          }
          else {
            __int16 v31 = 0;
          }
          id v32 = v23;
          unsigned __int8 v33 = sub_100072C48(v31 & 0xFF00u | v10, v32);

          if (v33 < 5u) {
            goto LABEL_33;
          }
          sub_100086554(v48, v33);
          uint64_t v35 = v34;

          __int16 v36 = sub_100088544(v47);
          unsigned __int8 v37 = *(unsigned char *)(v16 + 2);
          id v11 = v35;
          sub_1000C80AC(1u, 1, 1, v36, 0, 0, v37, v35, (uint64_t)&v50);
LABEL_27:
          uint64_t v38 = v50;
          uint64_t v39 = NSData.startIndex.getter();
          uint64_t v40 = NSData.endIndex.getter();
          uint64_t v41 = NSData.startIndex.getter();
          uint64_t v42 = NSData.endIndex.getter();
          if (v39 < v41 || v42 < v39)
          {
            __break(1u);
          }
          else
          {
            uint64_t v43 = NSData.startIndex.getter();
            uint64_t v44 = NSData.endIndex.getter();

            if (v40 >= v43 && v44 >= v40)
            {
              if (!__OFSUB__(v40, v39))
              {
                if (v38 != v40 - v39)
                {
                  sub_10000CD54();
                  swift_allocError();
                  *(unsigned char *)uint64_t v45 = 28;
                  *(void *)(v45 + 8) = 0;
                  *(void *)(v45 + 16) = 0xE000000000000000;
                  *(void *)(v45 + 24) = 0xD000000000000031;
                  *(void *)(v45 + 32) = 0x80000001000E21B0;
                  *(void *)(v45 + 40) = 0xD00000000000001CLL;
                  *(void *)(v45 + 48) = 0x80000001000E35F0;
                  *(void *)(v45 + 56) = 132;
                  swift_willThrow();

                  goto LABEL_11;
                }
LABEL_33:

                return;
              }
              goto LABEL_40;
            }
          }
          __break(1u);
LABEL_40:
          __break(1u);
          return;
        }
LABEL_37:
        __break(1u);
      }
    }
    __break(1u);
    goto LABEL_37;
  }
}

void sub_10003A6A4(int a1, uint64_t a2)
{
  uint64_t v23 = 0;
  unsigned int v4 = a1 & 0xFFFFFF;
  AUASDCore::tADCControlRequestParameterBlockLayout v5 = USBDescriptorControl.pbLayout()();
  sub_1000852E4(v5);
  if (v2) {
    return;
  }
  unsigned int v7 = v6;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v13 = 7;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0xE000000000000000;
    *(void *)(v13 + 24) = 0xD000000000000032;
    *(void *)(v13 + 32) = 0x80000001000E2170;
    *(void *)(v13 + 40) = 0xD00000000000001CLL;
    *(void *)(v13 + 48) = 0x80000001000E35F0;
    *(void *)(v13 + 56) = 143;
    swift_willThrow();

    return;
  }
  uint64_t v9 = (void *)Strong;
  __int16 v10 = sub_100088544(v4);
  unsigned __int8 v11 = *(unsigned char *)(*(void *)(a2 + 32) + 2);
  id v12 = v7;
  sub_1000C80AC(1u, 1, 1, v10, 0, 0, v11, v7, (uint64_t)&v23);

  uint64_t v22 = v23;
  id v14 = v12;
  uint64_t v15 = NSData.startIndex.getter();
  uint64_t v16 = NSData.endIndex.getter();
  uint64_t v17 = NSData.startIndex.getter();
  uint64_t v18 = NSData.endIndex.getter();
  if (v15 < v17 || v18 < v15)
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  uint64_t v19 = NSData.startIndex.getter();
  uint64_t v20 = NSData.endIndex.getter();

  if (v16 < v19 || v20 < v16) {
    goto LABEL_15;
  }
  if (__OFSUB__(v16, v15)) {
    goto LABEL_16;
  }
  if (v16 - v15 < v22)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v21 = 28;
    *(void *)(v21 + 8) = 0;
    *(void *)(v21 + 16) = 0xE000000000000000;
    *(void *)(v21 + 24) = 0xD000000000000032;
    *(void *)(v21 + 32) = 0x80000001000E2170;
    *(void *)(v21 + 40) = 0xD00000000000001CLL;
    *(void *)(v21 + 48) = 0x80000001000E35F0;
    *(void *)(v21 + 56) = 153;
    swift_willThrow();
  }
}

uint64_t sub_10003A958(unsigned int a1, uint64_t a2)
{
  int v3 = (a1 >> 18) & 0x3C | (a1 >> 6);
  if (v3 == 51)
  {
    sub_100039FF8(a1 & 0xFFFFFF, a2);
    if (!v2) {
      return v4 & 0x1FF;
    }
  }
  else
  {
    if (v3 != 52)
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v6 = 28;
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0xE000000000000000;
      *(void *)(v6 + 24) = 0xD000000000000021;
      *(void *)(v6 + 32) = 0x80000001000E2140;
      *(void *)(v6 + 40) = 0xD00000000000001CLL;
      *(void *)(v6 + 48) = 0x80000001000E35F0;
      *(void *)(v6 + 56) = 169;
      swift_willThrow();
      return v5;
    }
    sub_10003A6A4(a1 & 0xFFFFFF, a2);
    if (!v2) {
      return v4 & 0x1FF;
    }
  }
  return v5;
}

uint64_t type metadata accessor for ADC3Function()
{
  return self;
}

uint64_t sub_10003AA60()
{
  return 48;
}

unint64_t sub_10003AA6C(uint64_t a1, uint64_t a2)
{
  unint64_t result = sub_10003C26C(a2);
  if (v2) {
    return v4;
  }
  return result;
}

uint64_t sub_10003AA98(int a1, uint64_t a2)
{
  return sub_10003A958(a1 & 0xFFFFFF, a2) & 0x1FF;
}

uint64_t sub_10003AAC4(unsigned __int8 a1)
{
  if (a1 <= 5u) {
    return (0x30502010005uLL >> (8 * a1));
  }
  else {
    return 5;
  }
}

void sub_10003AAF0(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Mirror();
  __chkstk_darwin(v8);
  uint64_t ObjectType = (uint64_t)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12)
  {
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
    goto LABEL_163;
  }
  long long v115 = (void *)v9;
  long long v116 = a3;
  uint64_t v13 = *(void *)(a1 + 32);
  unsigned int v14 = *(unsigned __int16 *)(a1 + 40);
  sub_10008854C(v13, *(_WORD *)(a1 + 40));
  if (v3) {
    return;
  }
  unsigned int v113 = v14;
  uint64_t v112 = v13;
  if (v15[2] != a2)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v17 = 75;
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = 0xE000000000000000;
    *(void *)(v17 + 24) = 0xD000000000000030;
    *(void *)(v17 + 32) = 0x80000001000E21F0;
    *(void *)(v17 + 40) = 0xD00000000000001CLL;
    *(void *)(v17 + 48) = 0x80000001000E35F0;
    uint64_t v18 = 238;
LABEL_14:
    *(void *)(v17 + 56) = v18;
    swift_willThrow();
    return;
  }
  if (!v15[3])
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v17 = 74;
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = 0xE000000000000000;
    *(void *)(v17 + 24) = 0xD000000000000030;
    *(void *)(v17 + 32) = 0x80000001000E21F0;
    *(void *)(v17 + 40) = 0xD00000000000001CLL;
    *(void *)(v17 + 48) = 0x80000001000E35F0;
    uint64_t v18 = 239;
    goto LABEL_14;
  }
  if (v15[5] != 1)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v17 = 72;
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = 0xE000000000000000;
    *(void *)(v17 + 24) = 0xD000000000000030;
    *(void *)(v17 + 32) = 0x80000001000E21F0;
    *(void *)(v17 + 40) = 0xD00000000000001CLL;
    *(void *)(v17 + 48) = 0x80000001000E35F0;
    uint64_t v18 = 240;
    goto LABEL_14;
  }
  if (v15[6] != 2)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v17 = 73;
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = 0xE000000000000000;
    *(void *)(v17 + 24) = 0xD000000000000030;
    *(void *)(v17 + 32) = 0x80000001000E21F0;
    *(void *)(v17 + 40) = 0xD00000000000001CLL;
    *(void *)(v17 + 48) = 0x80000001000E35F0;
    uint64_t v18 = 241;
    goto LABEL_14;
  }
  if (v15[7] != 48)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v17 = 76;
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = 0xE000000000000000;
    *(void *)(v17 + 24) = 0xD000000000000030;
    *(void *)(v17 + 32) = 0x80000001000E21F0;
    *(void *)(v17 + 40) = 0xD00000000000001CLL;
    *(void *)(v17 + 48) = 0x80000001000E35F0;
    uint64_t v18 = 242;
    goto LABEL_14;
  }
  uint64_t v102 = ObjectType;
  uint64_t v99 = v8;
  uint64_t v85 = 0;
  uint64_t v83 = v15[4];
  uint64_t v84 = v15;
  id v140 = &_swiftEmptySetSingleton;
  id v141 = &_swiftEmptySetSingleton;
  uint64_t v94 = &v121;
  unint64_t v98 = (void (**)(uint64_t, uint64_t))(v115 + 1);
  swift_bridgeObjectRetain();
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  int v97 = 0;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  uint64_t v88 = 0;
  uint64_t v89 = 0;
  uint64_t v110 = 0;
  long long v114 = 0;
  int v92 = 0;
  unint64_t v4 = 0;
  uint64_t v104 = -v12;
  uint64_t v86 = a1;
  uint64_t v95 = a1 + 41;
  uint64_t v96 = (void *)v12;
  int v87 = 65280;
  long long v82 = xmmword_1000E80A0;
  uint64_t ObjectType = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v12 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v93 = _swiftEmptyArrayStorage;
  a3 = v116;
  uint64_t v16 = v112;
  a2 = v113;
  do
  {
    int v103 = v97 & 1;
    unint64_t v19 = (unint64_t)v96;
    if (v4 > (unint64_t)v96) {
      unint64_t v19 = v4;
    }
    uint64_t v105 = -(uint64_t)v19;
    uint64_t v20 = (unsigned __int8 *)(v95 + 16 * v4++);
    while (1)
    {
      if (v105 + v4 == 1) {
        goto LABEL_159;
      }
      int v21 = *v20;
      __int16 v22 = *(v20 - 1) | (unsigned __int16)((_WORD)v21 << 8);
      long long v115 = *(void **)(v20 - 9);
      if (_s9AUASDCore13USBDescriptorO21__derived_enum_equalsySbAC_ACtFZ_0((uint64_t)v115, v22, v16, a2)) {
        goto LABEL_17;
      }
      if (v21 != 17) {
        break;
      }
      if (v114)
      {
        unint64_t v111 = v4;
        a2 = (uint64_t)v141;
        unint64_t v4 = v141[2];
        if (v4)
        {
          uint64_t v106 = ObjectType;
          unint64_t v107 = (void *)v12;
          sub_10000AC7C(&qword_100127CC8);
          uint64_t v23 = (void *)swift_allocObject();
          size_t v24 = j__malloc_size(v23);
          v23[2] = v4;
          v23[3] = 2 * v24 - 64;
          uint64_t v25 = sub_10005CF70(&v120, (unsigned char *)v23 + 32, v4, a2);
          a3 = (_OWORD *)v120;
          uint64_t v12 = *((void *)&v121 + 1);
          uint64_t ObjectType = v121;
          uint64_t v100 = v122;
          long long v101 = v25;
          swift_bridgeObjectRetain_n();
          sub_10001D208();
          if (v101 != (void *)v4) {
            goto LABEL_162;
          }
          swift_bridgeObjectRelease();
          a3 = v116;
          uint64_t ObjectType = v106;
          uint64_t v12 = (uint64_t)v107;
          uint64_t v16 = v112;
          if (!v23[2])
          {
LABEL_30:
            swift_release();
            uint64_t v23 = 0;
          }
        }
        else
        {
          uint64_t v23 = _swiftEmptyArrayStorage;
          if (!_swiftEmptyArrayStorage[2]) {
            goto LABEL_30;
          }
        }
        if (!*(void *)(v12 + 16))
        {
          swift_bridgeObjectRelease();
          uint64_t v12 = 0;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t ObjectType = (uint64_t)sub_100058E64(0, *(void *)(ObjectType + 16) + 1, 1, (void *)ObjectType);
        }
        unint64_t v27 = *(void *)(ObjectType + 16);
        unint64_t v26 = *(void *)(ObjectType + 24);
        if (v27 >= v26 >> 1) {
          uint64_t ObjectType = (uint64_t)sub_100058E64((void *)(v26 > 1), v27 + 1, 1, (void *)ObjectType);
        }
        *(void *)(ObjectType + 16) = v27 + 1;
        uint64_t v28 = ObjectType + 80 * v27;
        uint64_t v29 = v109;
        *(void *)(v28 + 32) = v114;
        *(void *)(v28 + 40) = v29;
        unint64_t v4 = v111;
        *(void *)(v28 + 48) = v110;
        *(_WORD *)(v28 + 56) = 256;
        *(unsigned char *)(v28 + 64) = v103;
        *(void *)(v28 + 72) = v108;
        *(_WORD *)(v28 + 80) = 256;
        *(void *)(v28 + 88) = v12;
        *(void *)(v28 + 96) = 0;
        *(void *)(v28 + 104) = v23;
        a2 = v113;
        goto LABEL_22;
      }
      swift_bridgeObjectRelease();
LABEL_22:
      uint64_t v108 = 0;
      uint64_t v109 = 0;
      uint64_t v110 = 0;
      ++v4;
      v20 += 16;
      long long v114 = v115;
      uint64_t v12 = (uint64_t)_swiftEmptyArrayStorage;
      if (v104 + v4 == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t v108 = 0;
        uint64_t v109 = 0;
        uint64_t v110 = 0;
        goto LABEL_121;
      }
    }
    if (v21 <= 19)
    {
      if (v21 == 14) {
        continue;
      }
      if (v21 == 19)
      {
        uint64_t v109 = (uint64_t)v115;
        continue;
      }
      goto LABEL_75;
    }
    if (v21 == 20)
    {
      uint64_t v110 = (uint64_t)v115;
      continue;
    }
    if (v21 != 73)
    {
      if (v21 == 71)
      {
        uint64_t v30 = (uint64_t)v115;
        int v31 = *((_DWORD *)v115 + 1);
        unint64_t v111 = v4;
        if (v31)
        {
          if ((v31 & 2) != 0) {
            int v47 = -3145471;
          }
          else {
            int v47 = -3145472;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v93 = sub_100058F88(0, v93[2] + 1, 1, v93);
          }
          unint64_t v49 = v93[2];
          unint64_t v48 = v93[3];
          if (v49 >= v48 >> 1) {
            uint64_t v93 = sub_100058F88((void *)(v48 > 1), v49 + 1, 1, v93);
          }
          uint64_t v50 = v93;
          v93[2] = v49 + 1;
          uint64_t v51 = (char *)v50 + 3 * v49;
          v51[34] = BYTE2(v47);
          *((_WORD *)v51 + 16) = v47;
          if ((v31 & 2) != 0) {
            sub_10005B1DC(&v120, 10);
          }
          unint64_t v4 = v111;
          uint64_t v30 = (uint64_t)v115;
          int v32 = *((_DWORD *)v115 + 1);
          if ((v32 & 4) != 0) {
            goto LABEL_89;
          }
LABEL_46:
          int v33 = *(_DWORD *)(v30 + 4);
          if ((v33 & 0x10) != 0)
          {
LABEL_99:
            if ((v33 & 0x20) != 0) {
              int v57 = -3013823;
            }
            else {
              int v57 = -3013824;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v93 = sub_100058F88(0, v93[2] + 1, 1, v93);
            }
            unint64_t v59 = v93[2];
            unint64_t v58 = v93[3];
            if (v59 >= v58 >> 1) {
              uint64_t v93 = sub_100058F88((void *)(v58 > 1), v59 + 1, 1, v93);
            }
            char v60 = v93;
            v93[2] = v59 + 1;
            id v61 = (char *)v60 + 3 * v59;
            v61[34] = BYTE2(v57);
            *((_WORD *)v61 + 16) = v57;
            if ((v33 & 0x20) != 0) {
              sub_10005B1DC(&v120, 10);
            }
            unint64_t v4 = v111;
            uint64_t v30 = (uint64_t)v115;
          }
        }
        else
        {
          int v32 = *((_DWORD *)v115 + 1);
          if ((v32 & 4) == 0) {
            goto LABEL_46;
          }
LABEL_89:
          if ((v32 & 8) != 0) {
            int v52 = -3669311;
          }
          else {
            int v52 = -3669312;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v93 = sub_100058F88(0, v93[2] + 1, 1, v93);
          }
          unint64_t v54 = v93[2];
          unint64_t v53 = v93[3];
          if (v54 >= v53 >> 1) {
            uint64_t v93 = sub_100058F88((void *)(v53 > 1), v54 + 1, 1, v93);
          }
          unint64_t v55 = v93;
          v93[2] = v54 + 1;
          id v56 = (char *)v55 + 3 * v54;
          v56[34] = BYTE2(v52);
          *((_WORD *)v56 + 16) = v52;
          if ((v32 & 8) != 0) {
            sub_10005B1DC(&v120, 10);
          }
          unint64_t v4 = v111;
          uint64_t v30 = (uint64_t)v115;
          int v33 = *((_DWORD *)v115 + 1);
          if ((v33 & 0x10) != 0) {
            goto LABEL_99;
          }
        }
        uint64_t v62 = *(void *)(v30 + 10);
        int v63 = v92;
        if ((v62 & 0x10) != 0) {
          int v63 = 3;
        }
        if ((v62 & 8) != 0) {
          int v63 = 4;
        }
        if ((v62 & 4) != 0) {
          int v63 = 2;
        }
        if ((v62 & 3) != 0) {
          int v64 = 1;
        }
        else {
          int v64 = v63;
        }
        int v92 = v64;
        uint64_t v88 = *(unsigned __int16 *)(v30 + 8);
        uint64_t v90 = *(unsigned __int8 *)(v30 + 3);
        uint64_t v91 = *(unsigned __int8 *)(v30 + 19);
        uint64_t v89 = *(unsigned __int8 *)(v30 + 18);
        int v87 = 512;
        a2 = v113;
        continue;
      }
LABEL_75:
      sub_10005B1DC(&v120, 33);
      continue;
    }
    a3 = 0;
    long long v124 = v82;
    uint64_t v125 = 0x200000001;
    __int16 v126 = 321;
    char v127 = -64;
    __int16 v128 = 320;
    char v129 = -64;
    uint64_t v130 = 0x800000004;
    __int16 v131 = 577;
    char v132 = 22;
    __int16 v133 = 576;
    char v134 = 22;
    uint64_t v135 = 0x2000000010;
    __int16 v136 = 769;
    char v137 = 16;
    __int16 v138 = 768;
    char v139 = 16;
    uint64_t v34 = (uint64_t)v115;
    uint64_t v106 = ObjectType;
    unint64_t v111 = v4;
    while (2)
    {
      uint64_t v35 = &v123[(void)a3];
      int v36 = *(_DWORD *)(v34 + 3);
      if ((v36 & *(_DWORD *)((unsigned char *)&v125 + (void)a3)) != 0)
      {
        int v37 = *((unsigned __int16 *)v35 + 20) | (v35[42] << 16);
        int v38 = *((_DWORD *)v35 + 9) & v36;
        if (v38) {
          int v39 = *((unsigned __int16 *)v35 + 20) | (v35[42] << 16);
        }
        else {
          int v39 = *(unsigned __int16 *)(v35 + 43) | (v35[45] << 16);
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v12 = (uint64_t)sub_100058F88(0, *(void *)(v12 + 16) + 1, 1, (void *)v12);
        }
        unint64_t v41 = *(void *)(v12 + 16);
        unint64_t v40 = *(void *)(v12 + 24);
        if (v41 >= v40 >> 1) {
          uint64_t v12 = (uint64_t)sub_100058F88((void *)(v40 > 1), v41 + 1, 1, (void *)v12);
        }
        *(void *)(v12 + 16) = v41 + 1;
        uint64_t v42 = (char *)(v12 + 3 * v41);
        v42[34] = BYTE2(v39);
        *((_WORD *)v42 + 16) = v39;
        if (!v38)
        {
          uint64_t ObjectType = v106;
          unint64_t v4 = v111;
          uint64_t v16 = v112;
          goto LABEL_53;
        }
        unint64_t v107 = (void *)v12;
        *((void *)&v121 + 1) = &type metadata for USBDescriptorControl;
        LOWORD(v120) = v37;
        BYTE2(v120) = BYTE2(v37);
        Mirror.init(reflecting:)();
        a2 = Mirror.children.getter();
        unint64_t v4 = *(void *)(a2 + 16);
        uint64_t v12 = *(void *)(a2 + 40);
        uint64_t ObjectType = swift_getObjectType();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        uint64_t v105 = dispatch thunk of _AnyIndexBox._typeID.getter();
        swift_getObjectType();
        if (v105 != dispatch thunk of _AnyIndexBox._typeID.getter()) {
          goto LABEL_161;
        }
        char v43 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
        swift_unknownObjectRelease();
        if (v43)
        {
          swift_unknownObjectRelease();
          long long v121 = 0u;
          long long v122 = 0u;
          long long v120 = 0u;
        }
        else
        {
          dispatch thunk of _AnyCollectionBox.subscript.getter();
          long long v120 = v117;
          long long v121 = v118;
          long long v122 = v119;
          swift_unknownObjectRelease();
        }
        uint64_t ObjectType = v106;
        uint64_t v12 = (uint64_t)v107;
        uint64_t v16 = v112;
        swift_release();
        (*v98)(v102, v99);
        unint64_t v4 = v111;
        if (!*((void *)&v122 + 1))
        {
          sub_10001A918((uint64_t)&v120, &qword_100127CD0);
          goto LABEL_74;
        }
        long long v44 = v120;
        sub_10001ABC4((uint64_t)v94);
        if (!*((void *)&v44 + 1)) {
          goto LABEL_74;
        }
        if (v44 == __PAIR128__(0xE700000000000000, 0x68637469507065))
        {
          swift_bridgeObjectRelease();
          goto LABEL_53;
        }
        char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v45 & 1) == 0) {
LABEL_74:
        }
          sub_10005B1DC(&v120, 10);
LABEL_53:
        a2 = v113;
        uint64_t v34 = (uint64_t)v115;
      }
      if (++a3 != (_OWORD *)48) {
        continue;
      }
      break;
    }
    int v46 = *(unsigned __int8 *)(v34 + 7);
    if (v46 == 2)
    {
      uint64_t v108 = *(unsigned __int16 *)(v34 + 8);
      int v97 = 1;
      a3 = v116;
    }
    else
    {
      a3 = v116;
      if (v46 == 1)
      {
        int v97 = 0;
        uint64_t v108 = *(unsigned __int16 *)(v34 + 8);
      }
    }
LABEL_17:
    ;
  }
  while (v104 + v4);
  swift_bridgeObjectRelease();
  if (v114)
  {
    long long v115 = v114;
LABEL_121:
    swift_bridgeObjectRetain();
    uint64_t v65 = swift_bridgeObjectRetain();
    unint64_t v4 = (unint64_t)sub_10005AD1C(v65);
    swift_bridgeObjectRelease();
    if (!*(void *)(v4 + 16))
    {
      swift_release();
      unint64_t v4 = 0;
    }
    if (*(void *)(v12 + 16))
    {
      a2 = v12;
    }
    else
    {
      swift_bridgeObjectRelease();
      a2 = 0;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
LABEL_127:
      unint64_t v67 = *(void *)(ObjectType + 16);
      unint64_t v66 = *(void *)(ObjectType + 24);
      unint64_t v68 = v67 + 1;
      if (v67 >= v66 >> 1) {
        uint64_t ObjectType = (uint64_t)sub_100058E64((void *)(v66 > 1), v67 + 1, 1, (void *)ObjectType);
      }
      *(void *)(ObjectType + 16) = v68;
      long long v114 = (void *)(ObjectType + 16);
      uint64_t v69 = ObjectType + 80 * v67;
      uint64_t v70 = v109;
      *(void *)(v69 + 32) = v115;
      *(void *)(v69 + 40) = v70;
      *(void *)(v69 + 48) = v110;
      *(_WORD *)(v69 + 56) = 256;
      *(unsigned char *)(v69 + 64) = v97 & 1;
      *(void *)(v69 + 72) = v108;
      *(_WORD *)(v69 + 80) = 256;
      *(void *)(v69 + 88) = a2;
      *(void *)(v69 + 96) = 0;
      *(void *)(v69 + 104) = v4;
      goto LABEL_130;
    }
LABEL_163:
    uint64_t ObjectType = (uint64_t)sub_100058E64(0, *(void *)(ObjectType + 16) + 1, 1, (void *)ObjectType);
    goto LABEL_127;
  }
  unint64_t v68 = *(void *)(ObjectType + 16);
  long long v114 = (void *)(ObjectType + 16);
  if (!v68)
  {
LABEL_144:
    sub_10005B1DC(&v120, 81);
    goto LABEL_145;
  }
LABEL_130:
  uint64_t v106 = ObjectType;
  unint64_t v107 = (void *)v12;
  uint64_t v12 = ObjectType + 104;
  swift_bridgeObjectRetain();
  BOOL v71 = 0;
  uint64_t ObjectType = 1;
  while (2)
  {
    if (v71)
    {
      if (v68 == ObjectType) {
        goto LABEL_142;
      }
      goto LABEL_136;
    }
    Swift::String v74 = *(const IOUSBEndpointDescriptor **)(v12 - 72);
    a2 = *(void *)(v12 - 16);
    unint64_t v4 = *(void *)(v12 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!IOUSBGetEndpointUsageType(v74) && v74->wMaxPacketSize >= 9u)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a3 = v116;
      if (v68 == ObjectType)
      {
LABEL_142:
        uint64_t ObjectType = v106;
        swift_bridgeObjectRelease();
        goto LABEL_145;
      }
LABEL_136:
      BOOL v71 = 1;
LABEL_133:
      v12 += 80;
      if (__OFADD__(ObjectType++, 1)) {
        goto LABEL_160;
      }
      continue;
    }
    break;
  }
  int v75 = IOUSBGetEndpointUsageType(v74);
  if (v75)
  {
    int v72 = v75;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    unsigned int wMaxPacketSize = v74->wMaxPacketSize;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v72 = wMaxPacketSize < 9;
  }
  a3 = v116;
  BOOL v71 = v72 == 2;
  if (v68 != ObjectType) {
    goto LABEL_133;
  }
  uint64_t ObjectType = v106;
  swift_bridgeObjectRelease();
  if (v72 != 2) {
    goto LABEL_144;
  }
LABEL_145:
  if (*v114 != v83) {
    sub_10005B1DC(&v120, 82);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v77 = sub_10005AD1C((uint64_t)v140);
  swift_bridgeObjectRelease();
  if (BYTE1(v87) == 255) {
    uint64_t v78 = 0;
  }
  else {
    uint64_t v78 = v88;
  }
  if (BYTE1(v87) == 255) {
    __int16 v79 = 512;
  }
  else {
    __int16 v79 = v87;
  }
  sub_100060B54((uint64_t)v84, v92, v90, v89, v91, v78, v79, ObjectType, (uint64_t)v142, (uint64_t)v93, (uint64_t)v77);
  long long v80 = v142[3];
  a3[2] = v142[2];
  a3[3] = v80;
  a3[4] = v142[4];
  long long v81 = v142[1];
  *a3 = v142[0];
  a3[1] = v81;
}

uint64_t sub_10003BB14(unsigned __int16 a1, uint64_t a2, id a3)
{
  uint64_t v48 = 0;
  id v6 = [objc_allocWithZone((Class)NSMutableData) initWithLength:6];
  if (!v6)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v24 = 1;
    *(void *)(v24 + 8) = 0;
    *(void *)(v24 + 16) = 0xE000000000000000;
    *(void *)(v24 + 24) = 0xD000000000000043;
    *(void *)(v24 + 32) = 0x80000001000E3610;
    *(void *)(v24 + 40) = 0xD00000000000001CLL;
    *(void *)(v24 + 48) = 0x80000001000E35F0;
    *(void *)(v24 + 56) = 187;
    swift_willThrow();
    return (uint64_t)a3;
  }
  uint64_t v7 = (uint64_t)v6;
  id v8 = v6;
  uint64_t v9 = NSData.startIndex.getter();
  uint64_t v10 = NSData.endIndex.getter();
  uint64_t v11 = NSData.startIndex.getter();
  uint64_t v12 = NSData.endIndex.getter();
  if (v9 < v11 || v12 < v9)
  {
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v14 = NSData.startIndex.getter();
  uint64_t v15 = NSData.endIndex.getter();

  if (v10 < v14 || v15 < v10) {
    goto LABEL_36;
  }
  unint64_t v17 = v10 - v9;
  if (__OFSUB__(v10, v9))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if ((v17 & 0x8000000000000000) != 0 || v17 >= 0x10000) {
    goto LABEL_45;
  }
  unint64_t v18 = (unint64_t)a3 << 32;
  sub_1000C90C4(v18 | (v17 << 48) | ((unint64_t)a1 << 16) | 0x6A1, v7, (uint64_t)&v48);
  if (v3)
  {
    unint64_t v19 = (void *)_convertErrorToNSError(_:)();
    id v20 = [v19 code];

    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    sub_10000AC7C(&qword_100127420);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1000E8090;
    *(void *)(v21 + 56) = &type metadata for Int;
    *(void *)(v21 + 64) = &protocol witness table for Int;
    *(void *)(v21 + 32) = v20;
    v22._countAndFlagsBits = String.init(format:_:)();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 0xD000000000000015;
    v23._object = (void *)0x80000001000E3660;
    String.append(_:)(v23);
    sub_10002E81C(0x20726F727245, 0xE600000000000000, 0xD000000000000043, (void *)0x80000001000E3610, 0xD00000000000001CLL, 0x80000001000E35F0, 204);
    swift_bridgeObjectRelease();
    swift_willThrow();

    return (uint64_t)a3;
  }
  uint64_t v25 = v48;
  id v26 = v8;
  uint64_t v27 = NSData.startIndex.getter();
  a3 = (id)NSData.endIndex.getter();
  uint64_t v28 = NSData.startIndex.getter();
  uint64_t v29 = NSData.endIndex.getter();
  if (v27 < v28 || v29 < v27) {
    goto LABEL_38;
  }
  uint64_t v30 = NSData.startIndex.getter();
  uint64_t v31 = NSData.endIndex.getter();

  if ((uint64_t)a3 < v30 || v31 < (uint64_t)a3) {
    goto LABEL_39;
  }
  if (__OFSUB__(a3, v27))
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
  }
  if ((uint64_t)a3 - v27 < v25)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v32 = 28;
    *(void *)(v32 + 8) = 0;
    *(void *)(v32 + 16) = 0xE000000000000000;
    *(void *)(v32 + 24) = 0xD000000000000043;
    *(void *)(v32 + 32) = 0x80000001000E3610;
    *(void *)(v32 + 40) = 0xD00000000000001CLL;
    *(void *)(v32 + 48) = 0x80000001000E35F0;
    *(void *)(v32 + 56) = 208;
    swift_willThrow();

    return (uint64_t)a3;
  }
  id v33 = v26;
  uint64_t v34 = (unsigned __int16 *)[v33 mutableBytes];
  uint64_t v35 = *v34;
  if ((uint64_t)[v33 length] >= v35)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v45 = 33;
    *(void *)(v45 + 8) = 0;
    *(void *)(v45 + 16) = 0xE000000000000000;
    *(void *)(v45 + 24) = 0xD000000000000043;
    *(void *)(v45 + 32) = 0x80000001000E3610;
    *(void *)(v45 + 40) = 0xD00000000000001CLL;
    *(void *)(v45 + 48) = 0x80000001000E35F0;
    *(void *)(v45 + 56) = 231;
    swift_willThrow();

    return (uint64_t)a3;
  }
  int v47 = v33;
  id v36 = [objc_allocWithZone((Class)NSMutableData) initWithLength:*v34];
  if (!v36)
  {
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v37 = (uint64_t)v36;
  a3 = v36;
  uint64_t v38 = NSData.startIndex.getter();
  uint64_t v39 = NSData.endIndex.getter();
  uint64_t v40 = NSData.startIndex.getter();
  uint64_t v41 = NSData.endIndex.getter();
  if (v38 < v40 || v41 < v38) {
    goto LABEL_41;
  }
  uint64_t v42 = NSData.startIndex.getter();
  uint64_t v43 = NSData.endIndex.getter();

  if (v39 < v42 || v43 < v39) {
    goto LABEL_42;
  }
  unint64_t v44 = v39 - v38;
  if (__OFSUB__(v39, v38)) {
    goto LABEL_43;
  }
  if ((v44 & 0x8000000000000000) == 0 && v44 < 0x10000)
  {
    sub_1000C90C4(v18 | (v44 << 48) | ((unint64_t)a1 << 16) | 0x6A1, v37, (uint64_t)&v48);

    return (uint64_t)a3;
  }
LABEL_45:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_10003C26C(uint64_t a1)
{
  if (a1 == 6 && (swift_beginAccess(), (uint64_t v2 = *(void **)(v1 + 216)) != 0))
  {
    uint64_t v3 = (unsigned __int16 *)[v2 bytes];
    return sub_100039EA8(*v3 | ((unint64_t)*(unsigned int *)(v3 + 1) << 16));
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v5 = 2;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0xE000000000000000;
    *(void *)(v5 + 24) = 0xD000000000000029;
    *(void *)(v5 + 32) = 0x80000001000E20F0;
    *(void *)(v5 + 40) = 0xD00000000000001CLL;
    *(void *)(v5 + 48) = 0x80000001000E35F0;
    *(void *)(v5 + 56) = 454;
    return swift_willThrow();
  }
}

uint64_t sub_10003C354(unint64_t a1, unint64_t a2)
{
  int v2 = a2;
  int v3 = a1;
  unint64_t v4 = HIDWORD(a1);
  unint64_t v5 = HIWORD(a1);
  unint64_t v20 = HIDWORD(a2);
  unint64_t v21 = HIWORD(a2);
  uint64_t v6 = type metadata accessor for Mirror();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4TerminalCompanionChannelMagnitudePhaseSegmentPoint(0);
  uint64_t v12 = v11;
  uint64_t v25 = v11;
  int v22 = v3;
  __int16 v23 = v4;
  __int16 v24 = v5;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  swift_bridgeObjectRetain();
  unint64_t v19 = sub_1000532F4(v13, v10);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v25 = v12;
  int v22 = v2;
  __int16 v23 = v20;
  __int16 v24 = v21;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  v14(v9, v6);
  swift_bridgeObjectRetain();
  unint64_t v17 = sub_1000532F4(v16, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v9) = sub_100046910((uint64_t)v19, (uint64_t)v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_10003C558(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return sub_10003C870(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionChannelPositionRThetaPhiSegment);
}

uint64_t sub_10003C570(unsigned int a1, unsigned int a2)
{
  return sub_10003E5E8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4ClassSpecificAudioStreamingInterfaceDescriptor);
}

uint64_t sub_10003C588(unint64_t a1, unint64_t a2)
{
  return sub_10004020C(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionChannelMagnitudeSegmentPoint);
}

uint64_t sub_10003C5A0(unsigned int a1, unsigned int a2)
{
  return sub_100042750(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionChannelMagnitudePhaseSegment);
}

uint64_t sub_10003C5B8(unsigned int a1, unsigned int a2)
{
  return sub_10003E5E8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4ClassSpecificAudioControlInterfaceDescriptor);
}

uint64_t sub_10003C5D0(unint64_t a1, unint64_t a2, __int16 a3, unint64_t a4, unint64_t a5, __int16 a6)
{
  __int16 v6 = a5;
  __int16 v7 = a4;
  __int16 v8 = a2;
  __int16 v9 = a1;
  *(_WORD *)&v35[6] = HIWORD(a2);
  *(_WORD *)&v35[8] = a3;
  unint64_t v10 = a1 >> 16;
  unint64_t v25 = HIDWORD(a1);
  unint64_t v26 = HIWORD(a1);
  int v27 = *(_DWORD *)&v35[6];
  *(void *)uint64_t v35 = a5;
  *(_WORD *)&v35[8] = a6;
  uint64_t v29 = (void *)(a2 >> 16);
  unint64_t v30 = a4 >> 16;
  unint64_t v31 = HIDWORD(a4);
  unint64_t v32 = HIWORD(a4);
  unint64_t v34 = a5 >> 16;
  int v33 = *(_DWORD *)&v35[6];
  uint64_t v11 = type metadata accessor for Mirror();
  uint64_t v28 = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4AudioStreamingValidFrequencyRangeDescriptor(0);
  uint64_t v17 = v16;
  uint64_t v38 = v16;
  *(_WORD *)uint64_t v35 = v9;
  *(_WORD *)&void v35[2] = v10;
  *(_WORD *)&v35[4] = v25;
  *(_WORD *)&v35[6] = v26;
  *(_WORD *)&v35[8] = v8;
  int v36 = (int)v29;
  int v37 = v27;
  Mirror.init(reflecting:)();
  uint64_t v18 = Mirror.children.getter();
  unint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v14, v11);
  swift_bridgeObjectRetain();
  uint64_t v29 = sub_1000532F4(v18, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v20 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v38 = v17;
  *(_WORD *)uint64_t v35 = v7;
  *(_WORD *)&void v35[2] = v30;
  *(_WORD *)&v35[4] = v31;
  *(_WORD *)&v35[6] = v32;
  *(_WORD *)&v35[8] = v6;
  int v36 = v34;
  int v37 = v33;
  Mirror.init(reflecting:)();
  uint64_t v21 = Mirror.children.getter();
  v19(v14, v28);
  swift_bridgeObjectRetain();
  int v22 = sub_1000532F4(v21, v20);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v21) = sub_100046910((uint64_t)v29, (uint64_t)v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v21 & 1;
}

uint64_t sub_10003C858(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return sub_10003C870(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionChannelPositionXYZSegment);
}

uint64_t sub_10003C870(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t (*a5)(void))
{
  __int16 v6 = a3;
  int v7 = a2;
  __int16 v8 = a1;
  unint64_t v9 = a1 >> 16;
  unint64_t v22 = HIDWORD(a1);
  uint64_t v24 = (void *)HIDWORD(a2);
  unint64_t v25 = a3 >> 16;
  unint64_t v26 = HIDWORD(a3);
  unint64_t v27 = a4;
  unint64_t v28 = HIDWORD(a4);
  uint64_t v10 = type metadata accessor for Mirror();
  uint64_t v23 = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v15 = a5(0);
  uint64_t v34 = v15;
  __int16 v29 = v8;
  __int16 v30 = v9;
  int v31 = v22;
  int v32 = v7;
  int v33 = (int)v24;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v11 + 8);
  v17(v13, v10);
  swift_bridgeObjectRetain();
  uint64_t v24 = sub_1000532F4(v16, v14);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v18 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v34 = v15;
  __int16 v29 = v6;
  __int16 v30 = v25;
  int v31 = v26;
  int v32 = v27;
  int v33 = v28;
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  v17(v13, v23);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v19, v18);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v19) = sub_100046910((uint64_t)v24, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19 & 1;
}

uint64_t sub_10003CAB0(unsigned int a1, unsigned int a2)
{
  return sub_100042750(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionDescriptorSegmentHeader);
}

uint64_t sub_10003CAC8(unsigned int a1, unsigned int a2)
{
  return sub_100042750(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionChannelMagnitudeSegment);
}

uint64_t sub_10003CAE0(unint64_t a1, int a2, unint64_t a3, int a4)
{
  int v26 = a4;
  __int16 v4 = a3;
  __int16 v6 = a1;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = HIDWORD(a1);
  unint64_t v24 = a3 >> 16;
  unint64_t v25 = HIDWORD(a3);
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v22 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4TerminalCompanionChannelBandwidthSegment(0);
  uint64_t v15 = v14;
  uint64_t v31 = v14;
  __int16 v27 = v6;
  __int16 v28 = v7;
  int v29 = v8;
  int v30 = a2;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v23 = sub_1000532F4(v16, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v18 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v31 = v15;
  __int16 v27 = v4;
  __int16 v28 = v24;
  int v29 = v25;
  int v30 = v26;
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  v17(v12, v22);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v19, v18);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v19) = sub_100046910((uint64_t)v23, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19 & 1;
}

uint64_t sub_10003CCF4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v38 = a6;
  __int16 v6 = a5;
  __int16 v7 = a4;
  __int16 v8 = a3;
  __int16 v9 = a2;
  __int16 v10 = a1;
  unint64_t v24 = a1 >> 16;
  unint64_t v25 = HIDWORD(a1);
  unint64_t v26 = HIWORD(a1);
  unint64_t v27 = a2 >> 16;
  unint64_t v28 = HIDWORD(a2);
  unint64_t v29 = HIWORD(a2);
  uint64_t v31 = (void *)(a3 >> 16);
  unint64_t v32 = a4 >> 16;
  unint64_t v33 = HIDWORD(a4);
  unint64_t v34 = HIWORD(a4);
  unint64_t v35 = a5 >> 16;
  unint64_t v36 = HIDWORD(a5);
  unint64_t v37 = HIWORD(a5);
  unint64_t v39 = a6 >> 16;
  uint64_t v11 = type metadata accessor for Mirror();
  uint64_t v30 = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4SamplingRateConverterUnitDescriptor(0);
  uint64_t v17 = v16;
  uint64_t v50 = v16;
  __int16 v40 = v10;
  __int16 v41 = v24;
  __int16 v42 = v25;
  __int16 v43 = v26;
  __int16 v44 = v9;
  __int16 v45 = v27;
  __int16 v46 = v28;
  __int16 v47 = v29;
  __int16 v48 = v8;
  int v49 = (int)v31;
  Mirror.init(reflecting:)();
  uint64_t v18 = Mirror.children.getter();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v14, v11);
  swift_bridgeObjectRetain();
  uint64_t v31 = sub_1000532F4(v18, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v20 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v50 = v17;
  __int16 v40 = v7;
  __int16 v41 = v32;
  __int16 v42 = v33;
  __int16 v43 = v34;
  __int16 v44 = v6;
  __int16 v45 = v35;
  __int16 v46 = v36;
  __int16 v47 = v37;
  __int16 v48 = v38;
  int v49 = v39;
  Mirror.init(reflecting:)();
  uint64_t v21 = Mirror.children.getter();
  v19(v14, v30);
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_1000532F4(v21, v20);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v21) = sub_100046910((uint64_t)v31, (uint64_t)v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v21 & 1;
}

uint64_t sub_10003CFBC(unint64_t a1, unint64_t a2)
{
  return sub_10003D01C(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionEN50322_2Segment);
}

uint64_t sub_10003CFD4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return sub_1000429A8(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionDescriptorHeader);
}

uint64_t sub_10003CFEC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return sub_1000429A8(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for ADC4ClusterChannelInformationSegment);
}

uint64_t sub_10003D004(unint64_t a1, unint64_t a2)
{
  return sub_10003D01C(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4ClusterChannelDescriptionSegment);
}

uint64_t sub_10003D01C(unint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  __int16 v4 = a2;
  __int16 v5 = a1;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v21 = a2 >> 16;
  unint64_t v22 = HIDWORD(a2);
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = a3(0);
  uint64_t v26 = v13;
  __int16 v23 = v5;
  __int16 v24 = v6;
  __int16 v25 = v7;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  unint64_t v15 = *(void (**)(char *, uint64_t))(v9 + 8);
  v15(v11, v8);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v14, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v16 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v26 = v13;
  __int16 v23 = v4;
  __int16 v24 = v21;
  __int16 v25 = v22;
  Mirror.init(reflecting:)();
  uint64_t v17 = Mirror.children.getter();
  v15(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_1000532F4(v17, v16);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v11) = sub_100046910((uint64_t)v20, (uint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

uint64_t sub_10003D228(unint64_t a1, unint64_t a2)
{
  __int16 v2 = a2;
  __int16 v3 = a1;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v20 = (void *)(a1 >> 40);
  unint64_t v21 = a2 >> 16;
  unint64_t v22 = a2 >> 24;
  unint64_t v23 = HIDWORD(a2);
  unint64_t v24 = a2 >> 40;
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ClusterChannelInformationSegment(0);
  uint64_t v13 = v12;
  uint64_t v30 = v12;
  __int16 v25 = v3;
  char v26 = v4;
  char v27 = v5;
  char v28 = v6;
  char v29 = (char)v20;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  unint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v14, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v16 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v30 = v13;
  __int16 v25 = v2;
  char v26 = v21;
  char v27 = v22;
  char v28 = v23;
  char v29 = v24;
  Mirror.init(reflecting:)();
  uint64_t v17 = Mirror.children.getter();
  v15(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_1000532F4(v17, v16);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v10) = sub_100046910((uint64_t)v20, (uint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_10003D460(unint64_t a1, unint64_t a2)
{
  return sub_100044A54(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ClusterChannelDescriptionSegment);
}

uint64_t sub_10003D478(unint64_t a1, unint64_t a2)
{
  __int16 v2 = a2;
  __int16 v3 = a1;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v20 = a1 >> 40;
  unint64_t v21 = (void *)HIWORD(a1);
  unint64_t v22 = a2 >> 16;
  unint64_t v23 = a2 >> 24;
  unint64_t v24 = HIDWORD(a2);
  unint64_t v25 = a2 >> 40;
  unint64_t v26 = HIWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ClusterChannelAmbiosonicSegment(0);
  uint64_t v13 = v12;
  uint64_t v33 = v12;
  __int16 v27 = v3;
  char v28 = v4;
  char v29 = v5;
  char v30 = v6;
  char v31 = v20;
  char v32 = (char)v21;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  unint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  swift_bridgeObjectRetain();
  unint64_t v21 = sub_1000532F4(v14, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v16 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v33 = v13;
  __int16 v27 = v2;
  char v28 = v22;
  char v29 = v23;
  char v30 = v24;
  char v31 = v25;
  char v32 = v26;
  Mirror.init(reflecting:)();
  uint64_t v17 = Mirror.children.getter();
  v15(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_1000532F4(v17, v16);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v10) = sub_100046910((uint64_t)v21, (uint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_10003D6CC(unsigned int a1, unsigned int a2)
{
  return sub_100042750(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4ClusterDescriptorSegmentHeader);
}

uint64_t sub_10003D6E4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return sub_100043BB8(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for ADC4ClusterChannelAmbisonicSegment);
}

uint64_t sub_10003D6FC(unsigned int a1, unsigned int a2)
{
  return sub_100044844(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ClusterDescriptorSegmentHeader);
}

uint64_t sub_10003D714(unint64_t a1, unsigned int a2, unint64_t a3, unsigned int a4)
{
  char v4 = a3;
  char v5 = a1;
  v30[7] = HIBYTE(a1);
  v30[8] = a2;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 40;
  unint64_t v8 = HIWORD(a1);
  unsigned int v23 = a2 >> 8;
  LODWORD(v24) = *(unsigned __int16 *)&v30[7];
  *(void *)char v30 = a3;
  *(_WORD *)&v30[8] = a4;
  unint64_t v25 = a3 >> 8;
  unint64_t v26 = a3 >> 40;
  unint64_t v29 = HIWORD(a3);
  unsigned int v27 = a4 >> 8;
  int v28 = *(unsigned __int16 *)&v30[7];
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2ProcessingUnitDescriptorPart2(0);
  uint64_t v15 = v14;
  uint64_t v31 = v14;
  v30[0] = v5;
  *(_DWORD *)&v30[1] = v6;
  v30[5] = v7;
  v30[6] = v8;
  *(_WORD *)&v30[7] = (_WORD)v24;
  v30[9] = v23;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  swift_bridgeObjectRetain();
  unint64_t v24 = sub_1000532F4(v16, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v18 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v31 = v15;
  v30[0] = v4;
  *(_DWORD *)&v30[1] = v25;
  v30[5] = v26;
  v30[6] = v29;
  *(_WORD *)&v30[7] = v28;
  v30[9] = v27;
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  v17(v12, v9);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v19, v18);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v19) = sub_100046910((uint64_t)v24, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19 & 1;
}

uint64_t sub_10003D978(unint64_t a1, unint64_t a2)
{
  return sub_10003E3A8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1ProcessingUnitDescriptorPart2);
}

uint64_t sub_10003D990(unsigned int a1, unsigned int a2)
{
  char v2 = a2;
  char v3 = a1;
  unsigned int v4 = a1 >> 8;
  unsigned int v5 = HIWORD(a1);
  unsigned int v21 = HIWORD(a2);
  unsigned int v22 = a2 >> 8;
  uint64_t v6 = type metadata accessor for Mirror();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADCClassSpecificDescriptorHeader(0);
  uint64_t v12 = v11;
  uint64_t v26 = v11;
  char v23 = v3;
  char v24 = v4;
  char v25 = v5;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v13, v10);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v26 = v12;
  char v23 = v2;
  char v24 = v22;
  char v25 = v21;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  v14(v9, v6);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_1000532F4(v16, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v9) = sub_100046910((uint64_t)v20, (uint64_t)v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_10003DB94(unsigned int a1, unsigned int a2)
{
  return sub_100042750(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4InputTerminalDescriptorPart2);
}

unint64_t sub_10003DBAC(unint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4, unint64_t a5, unint64_t a6, unint64_t a7, unsigned int a8)
{
  unsigned int v48 = a8;
  __int16 v8 = a7;
  __int16 v9 = a5;
  __int16 v10 = a4;
  __int16 v11 = a3;
  __int16 v12 = a2;
  __int16 v13 = a1;
  unint64_t v30 = a1 >> 16;
  unint64_t v31 = HIDWORD(a1);
  unint64_t v32 = HIWORD(a1);
  unint64_t v33 = a2 >> 16;
  unint64_t v34 = HIWORD(a2);
  unint64_t v35 = a3 >> 16;
  unint64_t v36 = HIDWORD(a3);
  unint64_t v37 = HIWORD(a3);
  LODWORD(v39) = HIWORD(a4);
  unint64_t v40 = a5 >> 16;
  unint64_t v41 = HIDWORD(a5);
  unint64_t v42 = a6;
  unint64_t v43 = HIWORD(a5);
  unint64_t v44 = a6 >> 16;
  unint64_t v45 = HIWORD(a6);
  unint64_t v46 = a7 >> 16;
  unint64_t v47 = HIDWORD(a7);
  unint64_t v49 = HIWORD(a7);
  unsigned int v50 = HIWORD(a8);
  uint64_t v38 = type metadata accessor for Mirror();
  uint64_t v14 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4AudioStreamingSelfDescriptor(0);
  uint64_t v19 = v18;
  uint64_t v52 = v18;
  uint64_t v20 = swift_allocObject();
  uint64_t v51 = v20;
  *(_WORD *)(v20 + 16) = v13;
  *(_WORD *)(v20 + 18) = v30;
  *(_WORD *)(v20 + 20) = v31;
  *(_WORD *)(v20 + 22) = v32;
  *(_WORD *)(v20 + 24) = v12;
  *(_DWORD *)(v20 + 26) = v33;
  *(_WORD *)(v20 + 30) = v34;
  *(_WORD *)(v20 + 32) = v11;
  *(_WORD *)(v20 + 34) = v35;
  *(_WORD *)(v20 + 36) = v36;
  *(_WORD *)(v20 + 38) = v37;
  *(_WORD *)(v20 + 40) = v10;
  *(_WORD *)(v20 + 42) = (_WORD)v39;
  Mirror.init(reflecting:)();
  uint64_t v21 = Mirror.children.getter();
  unsigned int v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v23 = v38;
  v22(v16, v38);
  swift_bridgeObjectRetain();
  unint64_t v39 = sub_1000532F4(v21, v17);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v24 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v52 = v19;
  uint64_t v25 = swift_allocObject();
  uint64_t v51 = v25;
  *(_WORD *)(v25 + 16) = v9;
  *(_WORD *)(v25 + 18) = v40;
  *(_WORD *)(v25 + 20) = v41;
  *(_WORD *)(v25 + 22) = v43;
  *(_WORD *)(v25 + 24) = v42;
  *(_DWORD *)(v25 + 26) = v44;
  *(_WORD *)(v25 + 30) = v45;
  *(_WORD *)(v25 + 32) = v8;
  *(_WORD *)(v25 + 34) = v46;
  *(_WORD *)(v25 + 36) = v47;
  *(_WORD *)(v25 + 38) = v49;
  *(_WORD *)(v25 + 40) = v48;
  *(_WORD *)(v25 + 42) = v50;
  Mirror.init(reflecting:)();
  uint64_t v26 = Mirror.children.getter();
  v22(v16, v23);
  swift_bridgeObjectRetain();
  unsigned int v27 = sub_1000532F4(v26, v24);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v24) = sub_100046910((uint64_t)v39, (uint64_t)v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v24 & 1;
}

uint64_t sub_10003DF24(unint64_t a1, unint64_t a2)
{
  __int16 v2 = a2;
  __int16 v3 = a1;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = HIWORD(a1);
  unint64_t v20 = a2 >> 16;
  unint64_t v21 = HIWORD(a2);
  uint64_t v6 = type metadata accessor for Mirror();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  __int16 v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ExtensionUnitDescriptorPart2(0);
  uint64_t v12 = v11;
  uint64_t v25 = v11;
  __int16 v22 = v3;
  int v23 = v4;
  __int16 v24 = v5;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_1000532F4(v13, v10);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v25 = v12;
  __int16 v22 = v2;
  int v23 = v20;
  __int16 v24 = v21;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  v14(v9, v6);
  swift_bridgeObjectRetain();
  unint64_t v17 = sub_1000532F4(v16, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v9) = sub_100046910((uint64_t)v19, (uint64_t)v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_10003E128(unint64_t a1, unint64_t a2)
{
  return sub_10004020C(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ClockSelectorDescriptorPart2);
}

uint64_t sub_10003E140(unint64_t a1, unint64_t a2)
{
  char v2 = a2;
  char v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 40;
  unint64_t v6 = HIWORD(a1);
  unint64_t v20 = (void *)HIBYTE(a1);
  unint64_t v21 = a2 >> 8;
  unint64_t v22 = a2 >> 40;
  unint64_t v23 = HIWORD(a2);
  unint64_t v24 = HIBYTE(a2);
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2ExtensionUnitDescriptorPart2(0);
  uint64_t v13 = v12;
  uint64_t v30 = v12;
  char v25 = v3;
  int v26 = v4;
  char v27 = v5;
  char v28 = v6;
  char v29 = (char)v20;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  unint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v14, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v16 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v30 = v13;
  char v25 = v2;
  int v26 = v21;
  char v27 = v22;
  char v28 = v23;
  char v29 = v24;
  Mirror.init(reflecting:)();
  uint64_t v17 = Mirror.children.getter();
  v15(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_1000532F4(v17, v16);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v10) = sub_100046910((uint64_t)v20, (uint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_10003E378(unsigned int a1, unsigned int a2)
{
  return sub_100044634(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2ClockSelectorDescriptorPart2);
}

uint64_t sub_10003E390(unint64_t a1, unint64_t a2)
{
  return sub_10003E3A8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1ExtensionUnitDescriptorPart2);
}

uint64_t sub_10003E3A8(unint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  char v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 24;
  unint64_t v21 = (void *)HIDWORD(a1);
  unint64_t v22 = a2 >> 8;
  unint64_t v23 = a2 >> 24;
  unint64_t v24 = HIDWORD(a2);
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = a3(0);
  uint64_t v29 = v13;
  char v25 = v5;
  __int16 v26 = v6;
  char v27 = v7;
  char v28 = (char)v21;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  unint64_t v15 = *(void (**)(char *, uint64_t))(v9 + 8);
  v15(v11, v8);
  swift_bridgeObjectRetain();
  unint64_t v21 = sub_1000532F4(v14, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v16 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v29 = v13;
  char v25 = v4;
  __int16 v26 = v22;
  char v27 = v23;
  char v28 = v24;
  Mirror.init(reflecting:)();
  uint64_t v17 = Mirror.children.getter();
  v15(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_1000532F4(v17, v16);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v11) = sub_100046910((uint64_t)v21, (uint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

uint64_t sub_10003E5D0(unsigned int a1, unsigned int a2)
{
  return sub_10003E5E8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1ASFormatTypeDescriptorHeader);
}

uint64_t sub_10003E5E8(unsigned int a1, unsigned int a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  char v5 = a1;
  unsigned int v6 = a1 >> 8;
  unsigned int v7 = HIWORD(a1);
  LODWORD(v20) = HIBYTE(a1);
  unsigned int v22 = HIWORD(a2);
  unsigned int v23 = a2 >> 8;
  unsigned int v21 = HIBYTE(a2);
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = a3(0);
  uint64_t v28 = v13;
  char v24 = v5;
  char v25 = v6;
  char v26 = v7;
  char v27 = (char)v20;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  unint64_t v15 = *(void (**)(char *, uint64_t))(v9 + 8);
  v15(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_1000532F4(v14, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v16 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v28 = v13;
  char v24 = v4;
  char v25 = v23;
  char v26 = v22;
  char v27 = v21;
  Mirror.init(reflecting:)();
  uint64_t v17 = Mirror.children.getter();
  v15(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_1000532F4(v17, v16);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v11) = sub_100046910((uint64_t)v20, (uint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

uint64_t sub_10003E814(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror();
  uint64_t v22 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unsigned int v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4PowerDomainEntityDescriptor(0);
  uint64_t v10 = v9;
  uint64_t v24 = v9;
  uint64_t v11 = swift_allocObject();
  uint64_t v23 = v11;
  long long v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v11 + 32) = v12;
  *(_WORD *)(v11 + 48) = *(_WORD *)(a1 + 32);
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, v4);
  swift_bridgeObjectRetain();
  unint64_t v15 = sub_1000532F4(v13, v8);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v16 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v24 = v10;
  uint64_t v17 = swift_allocObject();
  uint64_t v23 = v17;
  long long v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v17 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v17 + 32) = v18;
  *(_WORD *)(v17 + 48) = *(_WORD *)(a2 + 32);
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  v14(v7, v22);
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_1000532F4(v19, v16);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v7) = sub_100046910((uint64_t)v15, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10003EA34(unint64_t a1, unint64_t a2)
{
  return sub_10004020C(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3SelectorUnitDescriptorPart2);
}

uint64_t sub_10003EA4C(unsigned int a1, unsigned int a2)
{
  return sub_100044634(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2SelectorUnitDescriptorPart2);
}

uint64_t sub_10003EA64(unint64_t a1, unint64_t a2)
{
  char v2 = a2;
  char v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v20 = a1 >> 40;
  unsigned int v21 = (void *)HIBYTE(a1);
  unint64_t v22 = a2 >> 8;
  unint64_t v23 = a2 >> 16;
  unint64_t v24 = a2 >> 24;
  unint64_t v25 = a2 >> 40;
  unint64_t v26 = HIBYTE(a2);
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1ACInterfaceHeaderDescriptor(0);
  uint64_t v13 = v12;
  uint64_t v33 = v12;
  char v27 = v3;
  char v28 = v4;
  char v29 = v5;
  __int16 v30 = v6;
  __int16 v31 = v20;
  char v32 = (char)v21;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  unint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  swift_bridgeObjectRetain();
  unsigned int v21 = sub_1000532F4(v14, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v16 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v33 = v13;
  char v27 = v2;
  char v28 = v22;
  char v29 = v23;
  __int16 v30 = v24;
  __int16 v31 = v25;
  char v32 = v26;
  Mirror.init(reflecting:)();
  uint64_t v17 = Mirror.children.getter();
  v15(v10, v7);
  swift_bridgeObjectRetain();
  long long v18 = sub_1000532F4(v17, v16);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v10) = sub_100046910((uint64_t)v21, (uint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_10003ECB8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  __int16 v4 = a3;
  __int16 v5 = a2;
  __int16 v6 = a1;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = HIDWORD(a1);
  unint64_t v23 = HIWORD(a1);
  unint64_t v25 = (void *)(a2 >> 16);
  unint64_t v26 = a3 >> 16;
  unint64_t v27 = HIDWORD(a3);
  unint64_t v28 = HIWORD(a3);
  unint64_t v29 = a4;
  unint64_t v30 = a4 >> 16;
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v24 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4AudioControlSelfDescriptor(0);
  uint64_t v15 = v14;
  uint64_t v37 = v14;
  __int16 v31 = v6;
  __int16 v32 = v7;
  __int16 v33 = v8;
  __int16 v34 = v23;
  __int16 v35 = v5;
  int v36 = (int)v25;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  swift_bridgeObjectRetain();
  unint64_t v25 = sub_1000532F4(v16, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v18 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v37 = v15;
  __int16 v31 = v4;
  __int16 v32 = v26;
  __int16 v33 = v27;
  __int16 v34 = v28;
  __int16 v35 = v29;
  int v36 = v30;
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  v17(v12, v24);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v19, v18);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v19) = sub_100046910((uint64_t)v25, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19 & 1;
}

uint64_t sub_10003EF10(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  __int16 v6 = a4;
  __int16 v7 = a3;
  __int16 v8 = a2;
  __int16 v9 = a1;
  unint64_t v10 = a1 >> 16;
  unint64_t v25 = HIDWORD(a1);
  unint64_t v26 = HIWORD(a1);
  unint64_t v27 = a2 >> 16;
  unint64_t v28 = HIDWORD(a2);
  unint64_t v29 = a3 >> 16;
  unint64_t v30 = HIDWORD(a3);
  unint64_t v32 = a4 >> 16;
  unint64_t v33 = HIDWORD(a4);
  unint64_t v34 = a5;
  unint64_t v35 = HIWORD(a4);
  unint64_t v36 = a5 >> 16;
  unint64_t v37 = a6;
  unint64_t v38 = HIDWORD(a5);
  unint64_t v39 = a6 >> 16;
  unint64_t v40 = HIDWORD(a6);
  uint64_t v11 = type metadata accessor for Mirror();
  uint64_t v31 = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4ConnectorEntityDescriptor(0);
  uint64_t v17 = v16;
  uint64_t v51 = v16;
  __int16 v41 = v9;
  __int16 v42 = v10;
  __int16 v43 = v25;
  __int16 v44 = v26;
  __int16 v45 = v8;
  __int16 v46 = v27;
  int v47 = v28;
  __int16 v48 = v7;
  __int16 v49 = v29;
  int v50 = v30;
  Mirror.init(reflecting:)();
  uint64_t v18 = Mirror.children.getter();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v14, v11);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v18, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v21 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v51 = v17;
  __int16 v41 = v6;
  __int16 v42 = v32;
  __int16 v43 = v33;
  __int16 v44 = v35;
  __int16 v45 = v34;
  __int16 v46 = v36;
  int v47 = v38;
  __int16 v48 = v37;
  __int16 v49 = v39;
  int v50 = v40;
  Mirror.init(reflecting:)();
  uint64_t v22 = Mirror.children.getter();
  v19(v14, v31);
  swift_bridgeObjectRetain();
  unint64_t v23 = sub_1000532F4(v22, v21);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v22) = sub_100046910((uint64_t)v20, (uint64_t)v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v22 & 1;
}

uint64_t sub_10003F1CC(unint64_t a1, char a2, unint64_t a3, char a4)
{
  char v4 = a3;
  char v5 = a1;
  v33[7] = HIBYTE(a1);
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  v33[8] = a2;
  unint64_t v8 = a1 >> 24;
  unint64_t v22 = HIDWORD(a1);
  unint64_t v23 = a1 >> 40;
  int v24 = *(unsigned __int16 *)&v33[7];
  *(void *)unint64_t v33 = a3;
  v33[8] = a4;
  unint64_t v25 = (void *)HIWORD(a1);
  unint64_t v26 = a3 >> 8;
  unint64_t v27 = a3 >> 16;
  unint64_t v28 = a3 >> 24;
  unint64_t v31 = a3 >> 40;
  int v32 = *(unsigned __int16 *)&v33[7];
  unint64_t v29 = HIDWORD(a3);
  unint64_t v30 = HIWORD(a3);
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3SRConverterUnitDescriptor(0);
  uint64_t v15 = v14;
  uint64_t v34 = v14;
  v33[0] = v5;
  v33[1] = v6;
  void v33[2] = v7;
  v33[3] = v8;
  v33[4] = v22;
  v33[5] = v23;
  v33[6] = (_BYTE)v25;
  *(_WORD *)&v33[7] = v24;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  swift_bridgeObjectRetain();
  unint64_t v25 = sub_1000532F4(v16, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v18 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v34 = v15;
  v33[0] = v4;
  v33[1] = v26;
  void v33[2] = v27;
  v33[3] = v28;
  v33[4] = v29;
  v33[5] = v31;
  v33[6] = v30;
  *(_WORD *)&v33[7] = v32;
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  v17(v12, v9);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v19, v18);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v19) = sub_100046910((uint64_t)v25, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19 & 1;
}

uint64_t sub_10003F46C(unint64_t a1, unsigned int a2, unint64_t a3, unsigned int a4)
{
  char v4 = a3;
  char v5 = a1;
  *(_DWORD *)&v31[4] = HIDWORD(a1);
  v31[8] = a2;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = a1 >> 24;
  unsigned int v22 = a2 >> 8;
  int v23 = *(_DWORD *)&v31[5];
  *(void *)unint64_t v31 = a3;
  *(_DWORD *)&v31[8] = a4;
  int v24 = (void *)HIDWORD(a1);
  unint64_t v25 = a3 >> 8;
  unint64_t v26 = a3 >> 16;
  unint64_t v27 = a3 >> 24;
  unint64_t v30 = HIDWORD(a3);
  unsigned int v28 = a4 >> 8;
  int v29 = *(_DWORD *)&v31[5];
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ClockMultiplierDescriptor(0);
  uint64_t v15 = v14;
  uint64_t v32 = v14;
  v31[0] = v5;
  v31[1] = v6;
  v31[2] = v7;
  v31[3] = v8;
  v31[4] = (_BYTE)v24;
  *(_DWORD *)&v31[5] = v23;
  *(_WORD *)&v31[9] = v22;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  swift_bridgeObjectRetain();
  int v24 = sub_1000532F4(v16, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v18 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v32 = v15;
  v31[0] = v4;
  v31[1] = v25;
  v31[2] = v26;
  v31[3] = v27;
  v31[4] = v30;
  *(_DWORD *)&v31[5] = v29;
  *(_WORD *)&v31[9] = v28;
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  v17(v12, v9);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v19, v18);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v19) = sub_100046910((uint64_t)v24, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19 & 1;
}

uint64_t sub_10003F6EC(unint64_t a1, unint64_t a2)
{
  return sub_100043460(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2SRConverterUnitDescriptor);
}

uint64_t sub_10003F704(unint64_t a1, unint64_t a2)
{
  char v2 = a2;
  char v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v20 = HIDWORD(a1);
  unint64_t v21 = a1 >> 40;
  unsigned int v22 = (void *)HIWORD(a1);
  unint64_t v23 = a2 >> 8;
  unint64_t v24 = a2 >> 16;
  unint64_t v25 = a2 >> 24;
  unint64_t v26 = HIDWORD(a2);
  unint64_t v27 = a2 >> 40;
  unint64_t v28 = HIWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2ClockMultiplierDescriptor(0);
  uint64_t v13 = v12;
  uint64_t v36 = v12;
  char v29 = v3;
  char v30 = v4;
  char v31 = v5;
  char v32 = v6;
  char v33 = v20;
  char v34 = v21;
  char v35 = (char)v22;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  swift_bridgeObjectRetain();
  unsigned int v22 = sub_1000532F4(v14, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v16 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v36 = v13;
  char v29 = v2;
  char v30 = v23;
  char v31 = v24;
  char v32 = v25;
  char v33 = v26;
  char v34 = v27;
  char v35 = v28;
  Mirror.init(reflecting:)();
  uint64_t v17 = Mirror.children.getter();
  v15(v10, v7);
  swift_bridgeObjectRetain();
  unint64_t v18 = sub_1000532F4(v17, v16);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v10) = sub_100046910((uint64_t)v22, (uint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_10003F974(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  return sub_100040FDC(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))type metadata accessor for ADC4ProcessingUnitDescriptor);
}

uint64_t sub_10003F98C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  __int16 v6 = a5;
  __int16 v7 = a4;
  int v8 = a3;
  __int16 v9 = a2;
  __int16 v10 = a1;
  unint64_t v24 = a1 >> 16;
  unint64_t v25 = HIDWORD(a1);
  unint64_t v26 = HIWORD(a1);
  unint64_t v27 = a2 >> 16;
  unint64_t v28 = HIDWORD(a2);
  unint64_t v29 = HIWORD(a2);
  unint64_t v30 = HIDWORD(a3);
  char v32 = (void *)HIWORD(a3);
  unint64_t v33 = a4 >> 16;
  unint64_t v34 = HIDWORD(a4);
  unint64_t v35 = HIWORD(a4);
  unint64_t v36 = a5 >> 16;
  unint64_t v37 = HIDWORD(a5);
  unint64_t v38 = a6;
  unint64_t v39 = HIWORD(a5);
  unint64_t v40 = HIDWORD(a6);
  unint64_t v41 = HIWORD(a6);
  uint64_t v11 = type metadata accessor for Mirror();
  uint64_t v31 = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4OutputTerminalDescriptor(0);
  uint64_t v17 = v16;
  uint64_t v53 = v16;
  __int16 v42 = v10;
  __int16 v43 = v24;
  __int16 v44 = v25;
  __int16 v45 = v26;
  __int16 v46 = v9;
  __int16 v47 = v27;
  __int16 v48 = v28;
  __int16 v49 = v29;
  int v50 = v8;
  __int16 v51 = v30;
  __int16 v52 = (__int16)v32;
  Mirror.init(reflecting:)();
  uint64_t v18 = Mirror.children.getter();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v14, v11);
  swift_bridgeObjectRetain();
  char v32 = sub_1000532F4(v18, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v20 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v53 = v17;
  __int16 v42 = v7;
  __int16 v43 = v33;
  __int16 v44 = v34;
  __int16 v45 = v35;
  __int16 v46 = v6;
  __int16 v47 = v36;
  __int16 v48 = v37;
  __int16 v49 = v39;
  int v50 = v38;
  __int16 v51 = v40;
  __int16 v52 = v41;
  Mirror.init(reflecting:)();
  uint64_t v21 = Mirror.children.getter();
  v19(v14, v31);
  swift_bridgeObjectRetain();
  unsigned int v22 = sub_1000532F4(v21, v20);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v21) = sub_100046910((uint64_t)v32, (uint64_t)v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v21 & 1;
}

uint64_t sub_10003FC80(unint64_t a1, int a2, unint64_t a3, int a4)
{
  int v28 = a4;
  __int16 v4 = a3;
  LODWORD(v24) = a2;
  __int16 v5 = a1;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = HIDWORD(a1);
  unint64_t v8 = HIWORD(a1);
  unint64_t v25 = a3 >> 16;
  unint64_t v26 = HIDWORD(a3);
  unint64_t v27 = HIWORD(a3);
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v23 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4ExtendedDescriptorHeader(0);
  uint64_t v15 = v14;
  uint64_t v34 = v14;
  __int16 v29 = v5;
  __int16 v30 = v6;
  __int16 v31 = v7;
  __int16 v32 = v8;
  __int16 v33 = (__int16)v24;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  swift_bridgeObjectRetain();
  unint64_t v24 = sub_1000532F4(v16, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v18 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v34 = v15;
  __int16 v29 = v4;
  __int16 v30 = v25;
  __int16 v31 = v26;
  __int16 v32 = v27;
  __int16 v33 = v28;
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  v17(v12, v23);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v19, v18);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v19) = sub_100046910((uint64_t)v24, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19 & 1;
}

uint64_t sub_10003FEB8(unint64_t a1, unint64_t a2)
{
  return sub_100043E88(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ProcessingUnitDescriptor);
}

uint64_t sub_10003FED0(unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  char v6 = a5;
  char v7 = a4;
  char v8 = a2;
  char v9 = a1;
  unint64_t v10 = a1 >> 8;
  unint64_t v24 = a1 >> 16;
  unint64_t v25 = a1 >> 24;
  unint64_t v26 = HIDWORD(a1);
  unint64_t v27 = HIWORD(a1);
  v44[7] = HIBYTE(a2);
  v44[8] = a3;
  unint64_t v28 = HIBYTE(a1);
  unint64_t v29 = a2 >> 8;
  unsigned int v31 = a3 >> 8;
  int v32 = *(unsigned __int16 *)&v44[7];
  *(void *)__int16 v44 = a5;
  *(_DWORD *)&v44[8] = a6;
  __int16 v33 = (void *)(a2 >> 40);
  unint64_t v34 = a4 >> 8;
  unint64_t v35 = a4 >> 16;
  unint64_t v36 = a4 >> 24;
  unint64_t v37 = HIDWORD(a4);
  unint64_t v38 = HIWORD(a4);
  unint64_t v39 = HIBYTE(a4);
  unint64_t v40 = a5 >> 8;
  unint64_t v43 = a5 >> 40;
  unsigned int v41 = a6 >> 8;
  int v42 = *(unsigned __int16 *)&v44[7];
  uint64_t v11 = type metadata accessor for Mirror();
  uint64_t v30 = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3OutputTerminalDescriptor(0);
  uint64_t v17 = v16;
  uint64_t v48 = v16;
  v44[0] = v9;
  v44[1] = v10;
  v44[2] = v24;
  v44[3] = v25;
  *(_WORD *)&v44[4] = v26;
  v44[6] = v27;
  v44[7] = v28;
  v44[8] = v8;
  *(_DWORD *)&v44[9] = v29;
  __int16 v45 = (__int16)v33;
  __int16 v46 = v32;
  __int16 v47 = v31;
  Mirror.init(reflecting:)();
  uint64_t v18 = Mirror.children.getter();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v14, v11);
  swift_bridgeObjectRetain();
  __int16 v33 = sub_1000532F4(v18, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v20 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v48 = v17;
  v44[0] = v7;
  v44[1] = v34;
  v44[2] = v35;
  v44[3] = v36;
  *(_WORD *)&v44[4] = v37;
  v44[6] = v38;
  v44[7] = v39;
  v44[8] = v6;
  *(_DWORD *)&v44[9] = v40;
  __int16 v45 = v43;
  __int16 v46 = v42;
  __int16 v47 = v41;
  Mirror.init(reflecting:)();
  uint64_t v21 = Mirror.children.getter();
  v19(v14, v30);
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_1000532F4(v21, v20);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v21) = sub_100046910((uint64_t)v33, (uint64_t)v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v21 & 1;
}

uint64_t sub_1000401F4(unint64_t a1, unint64_t a2)
{
  return sub_10004020C(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3MixerUnitDescriptorPart2);
}

uint64_t sub_10004020C(unint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  int v4 = a2;
  int v5 = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v21 = HIDWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v12 = a3(0);
  uint64_t v24 = v12;
  int v22 = v5;
  __int16 v23 = v6;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v8 + 8);
  v14(v10, v7);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v13, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v24 = v12;
  int v22 = v4;
  __int16 v23 = v21;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  v14(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_1000532F4(v16, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v10) = sub_100046910((uint64_t)v20, (uint64_t)v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_100040404(unint64_t a1, unint64_t a2)
{
  __int16 v2 = a2;
  __int16 v3 = a1;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v22 = a2 >> 16;
  unint64_t v23 = a2 >> 24;
  unint64_t v24 = HIDWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3HighCapabilityDescriptor(0);
  uint64_t v13 = v12;
  uint64_t v29 = v12;
  __int16 v25 = v3;
  char v26 = v4;
  char v27 = v5;
  __int16 v28 = v6;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  unint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  swift_bridgeObjectRetain();
  unint64_t v21 = sub_1000532F4(v14, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v16 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v29 = v13;
  __int16 v25 = v2;
  char v26 = v22;
  char v27 = v23;
  __int16 v28 = v24;
  Mirror.init(reflecting:)();
  uint64_t v17 = Mirror.children.getter();
  v15(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_1000532F4(v17, v16);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v10) = sub_100046910((uint64_t)v21, (uint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_100040620(unint64_t a1, unint64_t a2)
{
  return sub_100043E88(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2ProcessingUnitDescriptor);
}

uint64_t sub_100040638(unint64_t a1, unsigned int a2, unint64_t a3, unsigned int a4)
{
  char v4 = a3;
  char v5 = a2;
  char v6 = a1;
  unint64_t v7 = a1 >> 8;
  unint64_t v8 = a1 >> 16;
  unint64_t v23 = a1 >> 24;
  unint64_t v24 = HIDWORD(a1);
  unint64_t v25 = HIWORD(a1);
  unint64_t v26 = HIBYTE(a1);
  LODWORD(v29) = a2 >> 8;
  unsigned int v27 = HIBYTE(a2);
  unint64_t v30 = a3 >> 8;
  unint64_t v31 = a3 >> 16;
  unint64_t v32 = a3 >> 24;
  unint64_t v33 = HIDWORD(a3);
  unint64_t v35 = HIWORD(a3);
  unint64_t v36 = HIBYTE(a3);
  unsigned int v34 = a4;
  unsigned int v37 = HIBYTE(a4);
  unsigned int v38 = a4 >> 8;
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v28 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2OutputTerminalDescriptor(0);
  uint64_t v15 = v14;
  uint64_t v49 = v14;
  char v39 = v6;
  char v40 = v7;
  char v41 = v8;
  char v42 = v23;
  __int16 v43 = v24;
  char v44 = v25;
  char v45 = v26;
  char v46 = v5;
  __int16 v47 = (__int16)v29;
  char v48 = v27;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v29 = sub_1000532F4(v16, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v18 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v49 = v15;
  char v39 = v4;
  char v40 = v30;
  char v41 = v31;
  char v42 = v32;
  __int16 v43 = v33;
  char v44 = v35;
  char v45 = v36;
  char v46 = v34;
  __int16 v47 = v38;
  char v48 = v37;
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  v17(v12, v28);
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_1000532F4(v19, v18);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v19) = sub_100046910((uint64_t)v29, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19 & 1;
}

uint64_t sub_100040900(unsigned int a1, unsigned int a2)
{
  return sub_100044634(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2MixerUnitDescriptorPart3);
}

uint64_t sub_100040918(unint64_t a1, unint64_t a2)
{
  char v2 = a2;
  char v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 40;
  unint64_t v20 = a2 >> 8;
  unint64_t v21 = a2 >> 40;
  uint64_t v6 = type metadata accessor for Mirror();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2MixerUnitDescriptorPart2(0);
  uint64_t v12 = v11;
  uint64_t v25 = v11;
  char v22 = v3;
  int v23 = v4;
  char v24 = v5;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_1000532F4(v13, v10);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v25 = v12;
  char v22 = v2;
  int v23 = v20;
  char v24 = v21;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  v14(v9, v6);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_1000532F4(v16, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v9) = sub_100046910((uint64_t)v19, (uint64_t)v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_100040B1C(unint64_t a1, unint64_t a2)
{
  return sub_100043E88(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1ProcessingUnitDescriptor);
}

uint64_t sub_100040B34(unint64_t a1, int a2, unint64_t a3, int a4)
{
  int v34 = a4;
  char v4 = a3;
  LODWORD(v27) = a2;
  char v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = a1 >> 24;
  unint64_t v23 = HIDWORD(a1);
  unint64_t v24 = HIWORD(a1);
  unint64_t v25 = HIBYTE(a1);
  unint64_t v28 = a3 >> 8;
  unint64_t v29 = a3 >> 16;
  unint64_t v30 = a3 >> 24;
  unint64_t v31 = HIDWORD(a3);
  unint64_t v32 = HIWORD(a3);
  unint64_t v33 = HIBYTE(a3);
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v26 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1OutputTerminalDescriptor(0);
  uint64_t v15 = v14;
  uint64_t v43 = v14;
  char v35 = v5;
  char v36 = v6;
  char v37 = v7;
  char v38 = v8;
  __int16 v39 = v23;
  char v40 = v24;
  char v41 = v25;
  char v42 = (char)v27;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  swift_bridgeObjectRetain();
  unsigned int v27 = sub_1000532F4(v16, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v18 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v43 = v15;
  char v35 = v4;
  char v36 = v28;
  char v37 = v29;
  char v38 = v30;
  __int16 v39 = v31;
  char v40 = v32;
  char v41 = v33;
  char v42 = v34;
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  v17(v12, v26);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v19, v18);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v19) = sub_100046910((uint64_t)v27, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19 & 1;
}

uint64_t sub_100040DC0(unsigned int a1, unsigned int a2)
{
  char v2 = a2;
  char v3 = a1;
  unsigned int v4 = a1 >> 8;
  unsigned int v5 = HIBYTE(a1);
  unsigned int v21 = HIBYTE(a2);
  unsigned int v22 = a2 >> 8;
  uint64_t v6 = type metadata accessor for Mirror();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1MixerUnitDescriptorPart2(0);
  uint64_t v12 = v11;
  uint64_t v26 = v11;
  char v23 = v3;
  __int16 v24 = v4;
  char v25 = v5;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v9, v6);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v13, v10);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v26 = v12;
  char v23 = v2;
  __int16 v24 = v22;
  char v25 = v21;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  v14(v9, v6);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_1000532F4(v16, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v9) = sub_100046910((uint64_t)v20, (uint64_t)v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_100040FC4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  return sub_100040FDC(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))type metadata accessor for ADC4InputTerminalDescriptor);
}

uint64_t sub_100040FDC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t (*a7)(void))
{
  __int16 v8 = a5;
  __int16 v9 = a4;
  __int16 v10 = a2;
  __int16 v11 = a1;
  unint64_t v12 = a1 >> 16;
  unint64_t v25 = HIDWORD(a1);
  unint64_t v26 = HIWORD(a1);
  *(_WORD *)&v41[6] = HIWORD(a2);
  *(_WORD *)&v41[8] = a3;
  unint64_t v30 = HIDWORD(a2);
  int v29 = *(_DWORD *)&v41[6];
  *(void *)char v41 = a5;
  *(void *)&v41[8] = a6;
  unint64_t v27 = a2 >> 16;
  unint64_t v28 = HIDWORD(a3);
  unint64_t v32 = (void *)(a3 >> 16);
  unint64_t v33 = a4 >> 16;
  unint64_t v34 = HIDWORD(a4);
  unint64_t v35 = HIWORD(a4);
  unint64_t v36 = a5 >> 16;
  int v37 = *(_DWORD *)&v41[6];
  unint64_t v38 = HIDWORD(a5);
  unint64_t v39 = a6 >> 16;
  unint64_t v40 = HIDWORD(a6);
  uint64_t v13 = type metadata accessor for Mirror();
  uint64_t v31 = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v18 = a7(0);
  uint64_t v44 = v18;
  *(_WORD *)char v41 = v11;
  *(_WORD *)&v41[2] = v12;
  *(_WORD *)&v41[4] = v25;
  *(_WORD *)&v41[6] = v26;
  *(_WORD *)&v41[8] = v10;
  *(_WORD *)&v41[10] = v27;
  *(_WORD *)&v41[12] = v30;
  *(_DWORD *)&v41[14] = v29;
  __int16 v42 = (__int16)v32;
  __int16 v43 = v28;
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  unint64_t v20 = *(void (**)(char *, uint64_t))(v14 + 8);
  v20(v16, v13);
  swift_bridgeObjectRetain();
  unint64_t v32 = sub_1000532F4(v19, v17);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v21 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v44 = v18;
  *(_WORD *)char v41 = v9;
  *(_WORD *)&v41[2] = v33;
  *(_WORD *)&v41[4] = v34;
  *(_WORD *)&v41[6] = v35;
  *(_WORD *)&v41[8] = v8;
  *(_WORD *)&v41[10] = v36;
  *(_WORD *)&v41[12] = v38;
  *(_DWORD *)&v41[14] = v37;
  __int16 v42 = v39;
  __int16 v43 = v40;
  Mirror.init(reflecting:)();
  uint64_t v22 = Mirror.children.getter();
  v20(v16, v31);
  swift_bridgeObjectRetain();
  char v23 = sub_1000532F4(v22, v21);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v22) = sub_100046910((uint64_t)v32, (uint64_t)v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v22 & 1;
}

unint64_t sub_1000412BC(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = type metadata accessor for Mirror();
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  unsigned int v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AC7C(&qword_100128918);
  uint64_t inited = swift_initStackObject();
  long long v23 = xmmword_1000E8090;
  *(_OWORD *)(inited + 16) = xmmword_1000E8090;
  *(void *)(inited + 32) = 0xD000000000000011;
  *(void *)(inited + 40) = 0x80000001000E3680;
  unint64_t v22 = 0x80000001000E3680;
  uint64_t v27 = sub_1000526CC(*(void *)(a1 + 12), *(void *)(a1 + 20), (uint64_t)sub_100052938, 0);
  sub_10000AC7C(&qword_100128920);
  sub_1000534CC();
  AnyHashable.init<A>(_:)();
  unint64_t v7 = sub_1000089A8(inited);
  type metadata accessor for ADC4ExtensionUnitDescriptor(0);
  uint64_t v9 = v8;
  uint64_t v28 = v8;
  uint64_t v10 = swift_allocObject();
  uint64_t v27 = v10;
  long long v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v10 + 32) = v11;
  *(_DWORD *)(v10 + 48) = *(_DWORD *)(a1 + 32);
  Mirror.init(reflecting:)();
  uint64_t v12 = Mirror.children.getter();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v26 + 8);
  v26 += 8;
  v13(v5, v25);
  swift_bridgeObjectRetain();
  __int16 v24 = sub_1000532F4(v12, v7);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v14 = swift_initStackObject();
  *(_OWORD *)(v14 + 16) = v23;
  *(void *)(v14 + 32) = 0xD000000000000011;
  *(void *)(v14 + 40) = v22;
  uint64_t v27 = sub_1000526CC(*(void *)(a2 + 12), *(void *)(a2 + 20), (uint64_t)sub_100052938, 0);
  AnyHashable.init<A>(_:)();
  unint64_t v15 = sub_1000089A8(v14);
  uint64_t v28 = v9;
  uint64_t v16 = swift_allocObject();
  uint64_t v27 = v16;
  long long v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v16 + 32) = v17;
  *(_DWORD *)(v16 + 48) = *(_DWORD *)(a2 + 32);
  Mirror.init(reflecting:)();
  uint64_t v18 = Mirror.children.getter();
  v13(v5, v25);
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_1000532F4(v18, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v15) = sub_100046910((uint64_t)v24, (uint64_t)v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v15 & 1;
}

uint64_t sub_100041648(unint64_t a1, unsigned int a2, unint64_t a3, unsigned int a4)
{
  unsigned int v28 = a4;
  __int16 v4 = a3;
  __int16 v5 = a2;
  __int16 v6 = a1;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = HIDWORD(a1);
  unint64_t v23 = HIWORD(a1);
  LODWORD(v25) = HIWORD(a2);
  unint64_t v26 = a3 >> 16;
  unint64_t v27 = HIDWORD(a3);
  unint64_t v29 = HIWORD(a3);
  unsigned int v30 = HIWORD(a4);
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v24 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4ClusterDescriptorHeader(0);
  uint64_t v15 = v14;
  uint64_t v37 = v14;
  __int16 v31 = v6;
  __int16 v32 = v7;
  __int16 v33 = v8;
  __int16 v34 = v23;
  __int16 v35 = v5;
  __int16 v36 = (__int16)v25;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  long long v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_1000532F4(v16, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v18 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v37 = v15;
  __int16 v31 = v4;
  __int16 v32 = v26;
  __int16 v33 = v27;
  __int16 v34 = v29;
  __int16 v35 = v28;
  __int16 v36 = v30;
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  v17(v12, v24);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v19, v18);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v19) = sub_100046910((uint64_t)v25, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19 & 1;
}

unint64_t sub_1000418A4(unint64_t a1, unint64_t a2, int a3, unint64_t a4, unint64_t a5, int a6)
{
  return sub_1000424AC(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))type metadata accessor for ADC4ClockSelectorDescriptor);
}

uint64_t sub_1000418BC(unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  unsigned int v42 = a6;
  char v6 = a4;
  __int16 v7 = a3;
  int v8 = a2;
  char v9 = a1;
  unint64_t v10 = a1 >> 8;
  unint64_t v25 = a1 >> 16;
  unint64_t v26 = a1 >> 24;
  unint64_t v27 = HIDWORD(a1);
  unint64_t v28 = HIWORD(a1);
  unint64_t v29 = HIBYTE(a1);
  unint64_t v30 = HIDWORD(a2);
  unint64_t v31 = HIWORD(a2);
  unsigned int v32 = HIWORD(a3);
  unint64_t v34 = a4 >> 8;
  unint64_t v35 = a4 >> 16;
  unint64_t v36 = a4 >> 24;
  unint64_t v37 = HIDWORD(a4);
  unint64_t v38 = HIWORD(a4);
  unint64_t v39 = a5;
  unint64_t v40 = HIBYTE(a4);
  unint64_t v41 = HIDWORD(a5);
  unint64_t v43 = HIWORD(a5);
  unsigned int v44 = HIWORD(a6);
  uint64_t v11 = type metadata accessor for Mirror();
  uint64_t v33 = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3InputTerminalDescriptor(0);
  uint64_t v17 = v16;
  uint64_t v57 = v16;
  char v45 = v9;
  char v46 = v10;
  char v47 = v25;
  char v48 = v26;
  __int16 v49 = v27;
  char v50 = v28;
  char v51 = v29;
  int v52 = v8;
  __int16 v53 = v30;
  __int16 v54 = v31;
  __int16 v55 = v7;
  __int16 v56 = v32;
  Mirror.init(reflecting:)();
  uint64_t v18 = Mirror.children.getter();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v14, v11);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v18, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v21 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v57 = v17;
  char v45 = v6;
  char v46 = v34;
  char v47 = v35;
  char v48 = v36;
  __int16 v49 = v37;
  char v50 = v38;
  char v51 = v40;
  int v52 = v39;
  __int16 v53 = v41;
  __int16 v54 = v43;
  __int16 v55 = v42;
  __int16 v56 = v44;
  Mirror.init(reflecting:)();
  uint64_t v22 = Mirror.children.getter();
  v19(v14, v33);
  swift_bridgeObjectRetain();
  unint64_t v23 = sub_1000532F4(v22, v21);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v22) = sub_100046910((uint64_t)v20, (uint64_t)v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v22 & 1;
}

uint64_t sub_100041BE0(unint64_t a1, unint64_t a2)
{
  return sub_100043E88(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ExtensionUnitDescriptor);
}

uint64_t sub_100041BF8(unint64_t a1, unint64_t a2)
{
  __int16 v2 = a2;
  __int16 v3 = a1;
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = a1 >> 24;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v20 = (void *)HIWORD(a1);
  unint64_t v21 = a2 >> 16;
  unint64_t v22 = a2 >> 24;
  unint64_t v23 = HIDWORD(a2);
  unint64_t v24 = HIWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ClusterDescriptorHeader(0);
  uint64_t v13 = v12;
  uint64_t v30 = v12;
  __int16 v25 = v3;
  char v26 = v4;
  char v27 = v5;
  __int16 v28 = v6;
  char v29 = (char)v20;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  unint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v14, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v16 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v30 = v13;
  __int16 v25 = v2;
  char v26 = v21;
  char v27 = v22;
  __int16 v28 = v23;
  char v29 = v24;
  Mirror.init(reflecting:)();
  uint64_t v17 = Mirror.children.getter();
  v15(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_1000532F4(v17, v16);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v10) = sub_100046910((uint64_t)v20, (uint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_100041E30(unint64_t a1, unint64_t a2)
{
  return sub_1000443D8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ClockSelectorDescriptor);
}

uint64_t sub_100041E48(unint64_t a1, unint64_t a2, int a3, unint64_t a4, unint64_t a5, int a6)
{
  int v43 = a6;
  char v6 = a5;
  char v7 = a4;
  LODWORD(v33) = a3;
  char v8 = a2;
  char v9 = a1;
  unint64_t v10 = a1 >> 8;
  unint64_t v24 = a1 >> 16;
  unint64_t v25 = a1 >> 24;
  unint64_t v26 = HIDWORD(a1);
  unint64_t v27 = HIWORD(a1);
  unint64_t v28 = HIBYTE(a1);
  unint64_t v29 = a2 >> 8;
  unint64_t v30 = a2 >> 40;
  unint64_t v31 = HIWORD(a2);
  unint64_t v34 = a4 >> 8;
  unint64_t v35 = a4 >> 16;
  unint64_t v36 = a4 >> 24;
  unint64_t v37 = HIDWORD(a4);
  unint64_t v38 = HIWORD(a4);
  unint64_t v39 = HIBYTE(a4);
  unint64_t v40 = a5 >> 8;
  unint64_t v41 = a5 >> 40;
  unint64_t v42 = HIWORD(a5);
  uint64_t v11 = type metadata accessor for Mirror();
  uint64_t v32 = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2InputTerminalDescriptor(0);
  uint64_t v17 = v16;
  uint64_t v56 = v16;
  char v44 = v9;
  char v45 = v10;
  char v46 = v24;
  char v47 = v25;
  __int16 v48 = v26;
  char v49 = v27;
  char v50 = v28;
  char v51 = v8;
  int v52 = v29;
  char v53 = v30;
  __int16 v54 = v31;
  char v55 = (char)v33;
  Mirror.init(reflecting:)();
  uint64_t v18 = Mirror.children.getter();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v14, v11);
  swift_bridgeObjectRetain();
  uint64_t v33 = sub_1000532F4(v18, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v20 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v56 = v17;
  char v44 = v7;
  char v45 = v34;
  char v46 = v35;
  char v47 = v36;
  __int16 v48 = v37;
  char v49 = v38;
  char v50 = v39;
  char v51 = v6;
  int v52 = v40;
  char v53 = v41;
  __int16 v54 = v42;
  char v55 = v43;
  Mirror.init(reflecting:)();
  uint64_t v21 = Mirror.children.getter();
  v19(v14, v32);
  swift_bridgeObjectRetain();
  unint64_t v22 = sub_1000532F4(v21, v20);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v21) = sub_100046910((uint64_t)v33, (uint64_t)v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v21 & 1;
}

uint64_t sub_10004216C(unint64_t a1, unint64_t a2)
{
  return sub_100043E88(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2ExtensionUnitDescriptor);
}

uint64_t sub_100042184(unint64_t a1, unint64_t a2)
{
  return sub_1000443D8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2ClockSelectorDescriptor);
}

uint64_t sub_10004219C(unint64_t a1, unsigned int a2, unint64_t a3, unsigned int a4)
{
  char v4 = a3;
  __int16 v5 = a2;
  char v6 = a1;
  unint64_t v7 = a1 >> 8;
  unint64_t v8 = a1 >> 16;
  unint64_t v23 = a1 >> 24;
  unint64_t v24 = HIDWORD(a1);
  unint64_t v25 = HIWORD(a1);
  unint64_t v26 = HIBYTE(a1);
  LODWORD(v29) = HIWORD(a2);
  unsigned int v27 = HIBYTE(a2);
  unint64_t v30 = a3 >> 8;
  unint64_t v31 = a3 >> 16;
  unint64_t v32 = a3 >> 24;
  unint64_t v33 = HIDWORD(a3);
  unint64_t v35 = HIWORD(a3);
  unint64_t v36 = HIBYTE(a3);
  unsigned int v34 = a4;
  unsigned int v37 = HIBYTE(a4);
  unsigned int v38 = HIWORD(a4);
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v28 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1InputTerminalDescriptor(0);
  uint64_t v15 = v14;
  uint64_t v49 = v14;
  char v39 = v6;
  char v40 = v7;
  char v41 = v8;
  char v42 = v23;
  __int16 v43 = v24;
  char v44 = v25;
  char v45 = v26;
  __int16 v46 = v5;
  char v47 = (char)v29;
  char v48 = v27;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  swift_bridgeObjectRetain();
  unint64_t v29 = sub_1000532F4(v16, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v18 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v49 = v15;
  char v39 = v4;
  char v40 = v30;
  char v41 = v31;
  char v42 = v32;
  __int16 v43 = v33;
  char v44 = v35;
  char v45 = v36;
  __int16 v46 = v34;
  char v47 = v38;
  char v48 = v37;
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  v17(v12, v28);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v19, v18);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v19) = sub_100046910((uint64_t)v29, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19 & 1;
}

uint64_t sub_100042464(unint64_t a1, unint64_t a2)
{
  return sub_100043460(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1FormatTypeIIIDescriptor);
}

uint64_t sub_10004247C(unint64_t a1, unint64_t a2)
{
  return sub_100043E88(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1ExtensionUnitDescriptor);
}

unint64_t sub_100042494(unint64_t a1, unint64_t a2, int a3, unint64_t a4, unint64_t a5, int a6)
{
  return sub_1000424AC(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))type metadata accessor for ADC4SelectorUnitDescriptor);
}

unint64_t sub_1000424AC(unint64_t a1, unint64_t a2, int a3, unint64_t a4, unint64_t a5, int a6, uint64_t (*a7)(void))
{
  int v35 = a6;
  __int16 v8 = a4;
  LODWORD(v28) = a3;
  __int16 v9 = a2;
  __int16 v10 = a1;
  unint64_t v11 = a1 >> 16;
  unint64_t v12 = HIDWORD(a1);
  unint64_t v25 = HIWORD(a1);
  unint64_t v26 = a2 >> 16;
  unint64_t v27 = HIDWORD(a2);
  unint64_t v29 = a4 >> 16;
  unint64_t v30 = HIDWORD(a4);
  unint64_t v31 = a5;
  unint64_t v32 = HIWORD(a4);
  unint64_t v33 = a5 >> 16;
  unint64_t v34 = HIDWORD(a5);
  uint64_t v13 = type metadata accessor for Mirror();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v18 = a7(0);
  uint64_t v44 = v18;
  __int16 v36 = v10;
  __int16 v37 = v11;
  __int16 v38 = v12;
  __int16 v39 = v25;
  __int16 v40 = v9;
  __int16 v41 = v26;
  int v42 = v27;
  __int16 v43 = (__int16)v28;
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  unint64_t v20 = *(void (**)(char *, uint64_t))(v14 + 8);
  v20(v16, v13);
  swift_bridgeObjectRetain();
  uint64_t v28 = sub_1000532F4(v19, v17);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v21 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v44 = v18;
  __int16 v36 = v8;
  __int16 v37 = v29;
  __int16 v38 = v30;
  __int16 v39 = v32;
  __int16 v40 = v31;
  __int16 v41 = v33;
  int v42 = v34;
  __int16 v43 = v35;
  Mirror.init(reflecting:)();
  uint64_t v22 = Mirror.children.getter();
  v20(v16, v13);
  swift_bridgeObjectRetain();
  unint64_t v23 = sub_1000532F4(v22, v21);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v21) = sub_100046910((uint64_t)v28, (uint64_t)v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v21 & 1;
}

uint64_t sub_100042738(unsigned int a1, unsigned int a2)
{
  return sub_100042750(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4ClusterEndBlockSegment);
}

uint64_t sub_100042750(unsigned int a1, unsigned int a2, uint64_t (*a3)(void))
{
  __int16 v4 = a2;
  __int16 v5 = a1;
  unsigned int v6 = HIWORD(a1);
  unsigned int v21 = HIWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  __int16 v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v12 = a3(0);
  uint64_t v24 = v12;
  __int16 v22 = v5;
  __int16 v23 = v6;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v8 + 8);
  v14(v10, v7);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v13, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v24 = v12;
  __int16 v22 = v4;
  __int16 v23 = v21;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  v14(v10, v7);
  swift_bridgeObjectRetain();
  unint64_t v17 = sub_1000532F4(v16, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v10) = sub_100046910((uint64_t)v20, (uint64_t)v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_100042948(unint64_t a1, unint64_t a2)
{
  return sub_1000443D8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3SelectorUnitDescriptor);
}

uint64_t sub_100042960(unint64_t a1, unint64_t a2)
{
  return sub_1000443D8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2SelectorUnitDescriptor);
}

uint64_t sub_100042978(unint64_t a1, unint64_t a2)
{
  return sub_1000443D8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1SelectorUnitDescriptor);
}

uint64_t sub_100042990(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return sub_1000429A8(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for ADC4FeatureUnitDescriptor);
}

uint64_t sub_1000429A8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t (*a5)(void))
{
  __int16 v6 = a3;
  __int16 v7 = a2;
  __int16 v8 = a1;
  unint64_t v9 = a1 >> 16;
  unint64_t v22 = HIDWORD(a1);
  unint64_t v23 = HIWORD(a1);
  unint64_t v24 = a2 >> 16;
  unint64_t v26 = (void *)HIDWORD(a2);
  unint64_t v27 = a3 >> 16;
  unint64_t v28 = HIDWORD(a3);
  unint64_t v29 = a4;
  unint64_t v30 = HIWORD(a3);
  unint64_t v31 = a4 >> 16;
  unint64_t v32 = HIDWORD(a4);
  uint64_t v10 = type metadata accessor for Mirror();
  uint64_t v25 = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v15 = a5(0);
  uint64_t v40 = v15;
  __int16 v33 = v8;
  __int16 v34 = v9;
  __int16 v35 = v22;
  __int16 v36 = v23;
  __int16 v37 = v7;
  __int16 v38 = v24;
  __int16 v39 = (__int16)v26;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  unint64_t v17 = *(void (**)(char *, uint64_t))(v11 + 8);
  v17(v13, v10);
  swift_bridgeObjectRetain();
  unint64_t v26 = sub_1000532F4(v16, v14);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v18 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v40 = v15;
  __int16 v33 = v6;
  __int16 v34 = v27;
  __int16 v35 = v28;
  __int16 v36 = v30;
  __int16 v37 = v29;
  __int16 v38 = v31;
  __int16 v39 = v32;
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  v17(v13, v25);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v19, v18);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v19) = sub_100046910((uint64_t)v26, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19 & 1;
}

uint64_t sub_100042C28(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v38 = a6;
  __int16 v6 = a5;
  __int16 v7 = a4;
  int v8 = a3;
  __int16 v9 = a2;
  __int16 v10 = a1;
  unint64_t v24 = a1 >> 16;
  unint64_t v25 = HIDWORD(a1);
  unint64_t v26 = HIWORD(a1);
  unint64_t v27 = a2 >> 16;
  unint64_t v28 = HIDWORD(a2);
  unint64_t v29 = HIWORD(a2);
  unint64_t v31 = (void *)HIDWORD(a3);
  unint64_t v32 = a4 >> 16;
  unint64_t v33 = HIDWORD(a4);
  unint64_t v34 = HIWORD(a4);
  unint64_t v35 = a5 >> 16;
  unint64_t v36 = HIDWORD(a5);
  unint64_t v37 = HIWORD(a5);
  unint64_t v39 = HIDWORD(a6);
  uint64_t v11 = type metadata accessor for Mirror();
  uint64_t v30 = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4ClockSourceDescriptor(0);
  uint64_t v17 = v16;
  uint64_t v50 = v16;
  __int16 v40 = v10;
  __int16 v41 = v24;
  __int16 v42 = v25;
  __int16 v43 = v26;
  __int16 v44 = v9;
  __int16 v45 = v27;
  __int16 v46 = v28;
  __int16 v47 = v29;
  int v48 = v8;
  __int16 v49 = (__int16)v31;
  Mirror.init(reflecting:)();
  uint64_t v18 = Mirror.children.getter();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v14, v11);
  swift_bridgeObjectRetain();
  unint64_t v31 = sub_1000532F4(v18, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v20 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v50 = v17;
  __int16 v40 = v7;
  __int16 v41 = v32;
  __int16 v42 = v33;
  __int16 v43 = v34;
  __int16 v44 = v6;
  __int16 v45 = v35;
  __int16 v46 = v36;
  __int16 v47 = v37;
  int v48 = v38;
  __int16 v49 = v39;
  Mirror.init(reflecting:)();
  uint64_t v21 = Mirror.children.getter();
  v19(v14, v30);
  swift_bridgeObjectRetain();
  unint64_t v22 = sub_1000532F4(v21, v20);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v21) = sub_100046910((uint64_t)v31, (uint64_t)v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v21 & 1;
}

uint64_t sub_100042EF0(unint64_t a1, int a2, unint64_t a3, int a4)
{
  int v32 = a4;
  char v4 = a3;
  LODWORD(v26) = a2;
  char v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = a1 >> 24;
  unint64_t v23 = HIDWORD(a1);
  unint64_t v24 = HIWORD(a1);
  unint64_t v27 = a3 >> 8;
  unint64_t v28 = a3 >> 16;
  unint64_t v29 = a3 >> 24;
  unint64_t v30 = HIDWORD(a3);
  unint64_t v31 = HIWORD(a3);
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v25 = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3PowerDomainDescriptor(0);
  uint64_t v15 = v14;
  uint64_t v40 = v14;
  char v33 = v5;
  char v34 = v6;
  char v35 = v7;
  char v36 = v8;
  __int16 v37 = v23;
  __int16 v38 = v24;
  char v39 = (char)v26;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  swift_bridgeObjectRetain();
  unint64_t v26 = sub_1000532F4(v16, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v18 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v40 = v15;
  char v33 = v4;
  char v34 = v27;
  char v35 = v28;
  char v36 = v29;
  __int16 v37 = v30;
  __int16 v38 = v31;
  char v39 = v32;
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  v17(v12, v25);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v19, v18);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v19) = sub_100046910((uint64_t)v26, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19 & 1;
}

uint64_t sub_100043160(unint64_t a1, unint64_t a2)
{
  return sub_1000443D8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3FeatureUnitDescriptor);
}

uint64_t sub_100043178(unint64_t a1, unsigned int a2, unint64_t a3, unsigned int a4)
{
  char v4 = a3;
  char v5 = a1;
  *(_DWORD *)&v33[4] = HIDWORD(a1);
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  v33[8] = a2;
  unint64_t v8 = a1 >> 24;
  unsigned int v23 = a2 >> 8;
  int v24 = *(_DWORD *)&v33[5];
  HIDWORD(v22) = HIWORD(a2);
  *(void *)char v33 = a3;
  *(_DWORD *)&v33[8] = a4;
  uint64_t v25 = (void *)HIDWORD(a1);
  unint64_t v26 = a3 >> 8;
  unint64_t v27 = a3 >> 16;
  unint64_t v28 = a3 >> 24;
  unint64_t v32 = HIDWORD(a3);
  unsigned int v30 = a4 >> 8;
  int v31 = *(_DWORD *)&v33[5];
  unsigned int v29 = HIWORD(a4);
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ClockSourceDescriptor(0);
  uint64_t v15 = v14;
  uint64_t v34 = v14;
  v33[0] = v5;
  v33[1] = v6;
  void v33[2] = v7;
  v33[3] = v8;
  v33[4] = (_BYTE)v25;
  *(_DWORD *)&v33[5] = v24;
  unsigned char v33[9] = v23;
  *(_WORD *)&v33[10] = WORD2(v22);
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_1000532F4(v16, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v18 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v34 = v15;
  v33[0] = v4;
  v33[1] = v26;
  void v33[2] = v27;
  v33[3] = v28;
  v33[4] = v32;
  *(_DWORD *)&v33[5] = v31;
  unsigned char v33[9] = v30;
  *(_WORD *)&v33[10] = v29;
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  v17(v12, v9);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v19, v18);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v19) = sub_100046910((uint64_t)v25, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19 & 1;
}

uint64_t sub_100043418(unint64_t a1, unint64_t a2)
{
  return sub_1000443D8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2FeatureUnitDescriptor);
}

uint64_t sub_100043430(unint64_t a1, unint64_t a2)
{
  return sub_100043460(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2ClockSourceDescriptor);
}

uint64_t sub_100043448(unint64_t a1, unint64_t a2)
{
  return sub_100043460(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1FormatTypeIDescriptor);
}

uint64_t sub_100043460(unint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  char v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v21 = a1 >> 24;
  unint64_t v22 = HIDWORD(a1);
  unint64_t v23 = a1 >> 40;
  unint64_t v24 = HIWORD(a1);
  uint64_t v25 = (void *)HIBYTE(a1);
  unint64_t v26 = a2 >> 8;
  unint64_t v27 = a2 >> 16;
  unint64_t v28 = a2 >> 24;
  unint64_t v29 = HIDWORD(a2);
  unint64_t v30 = a2 >> 40;
  unint64_t v31 = HIWORD(a2);
  unint64_t v32 = HIBYTE(a2);
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = a3(0);
  uint64_t v41 = v13;
  char v33 = v5;
  char v34 = v6;
  char v35 = v7;
  char v36 = v21;
  char v37 = v22;
  char v38 = v23;
  char v39 = v24;
  char v40 = (char)v25;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v9 + 8);
  v15(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_1000532F4(v14, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v16 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v41 = v13;
  char v33 = v4;
  char v34 = v26;
  char v35 = v27;
  char v36 = v28;
  char v37 = v29;
  char v38 = v30;
  char v39 = v31;
  char v40 = v32;
  Mirror.init(reflecting:)();
  uint64_t v17 = Mirror.children.getter();
  v15(v11, v8);
  swift_bridgeObjectRetain();
  unint64_t v18 = sub_1000532F4(v17, v16);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v11) = sub_100046910((uint64_t)v25, (uint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

uint64_t sub_1000436F8(unint64_t a1, unint64_t a2)
{
  char v2 = a2;
  char v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v20 = HIDWORD(a1);
  unint64_t v21 = (void *)(a1 >> 40);
  unint64_t v22 = a2 >> 8;
  unint64_t v23 = a2 >> 16;
  unint64_t v24 = a2 >> 24;
  unint64_t v25 = HIDWORD(a2);
  unint64_t v26 = a2 >> 40;
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1FeatureUnitDescriptor(0);
  uint64_t v13 = v12;
  uint64_t v33 = v12;
  char v27 = v3;
  char v28 = v4;
  char v29 = v5;
  char v30 = v6;
  char v31 = v20;
  char v32 = (char)v21;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  swift_bridgeObjectRetain();
  unint64_t v21 = sub_1000532F4(v14, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v16 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v33 = v13;
  char v27 = v2;
  char v28 = v22;
  char v29 = v23;
  char v30 = v24;
  char v31 = v25;
  char v32 = v26;
  Mirror.init(reflecting:)();
  uint64_t v17 = Mirror.children.getter();
  v15(v10, v7);
  swift_bridgeObjectRetain();
  unint64_t v18 = sub_1000532F4(v17, v16);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v10) = sub_100046910((uint64_t)v21, (uint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_10004394C(unint64_t a1, unint64_t a2)
{
  char v2 = a2;
  char v3 = a1;
  unint64_t v4 = a1 >> 8;
  unint64_t v5 = a1 >> 16;
  unint64_t v6 = a1 >> 24;
  unint64_t v20 = HIDWORD(a1);
  unint64_t v21 = (void *)(a1 >> 40);
  unint64_t v22 = a2 >> 8;
  unint64_t v23 = a2 >> 16;
  unint64_t v24 = a2 >> 24;
  unint64_t v25 = HIDWORD(a2);
  unint64_t v26 = a2 >> 40;
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1ASInterfaceDescriptor(0);
  uint64_t v13 = v12;
  uint64_t v33 = v12;
  char v27 = v3;
  char v28 = v4;
  char v29 = v5;
  char v30 = v6;
  char v31 = v20;
  __int16 v32 = (__int16)v21;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  swift_bridgeObjectRetain();
  unint64_t v21 = sub_1000532F4(v14, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v16 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v33 = v13;
  char v27 = v2;
  char v28 = v22;
  char v29 = v23;
  char v30 = v24;
  char v31 = v25;
  __int16 v32 = v26;
  Mirror.init(reflecting:)();
  uint64_t v17 = Mirror.children.getter();
  v15(v10, v7);
  swift_bridgeObjectRetain();
  unint64_t v18 = sub_1000532F4(v17, v16);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v10) = sub_100046910((uint64_t)v21, (uint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_100043BA0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return sub_100043BB8(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for ADC4EffectUnitDescriptor);
}

uint64_t sub_100043BB8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t (*a5)(void))
{
  __int16 v6 = a4;
  __int16 v7 = a3;
  __int16 v8 = a2;
  __int16 v9 = a1;
  unint64_t v22 = a1 >> 16;
  unint64_t v23 = HIDWORD(a1);
  unint64_t v24 = HIWORD(a1);
  unint64_t v25 = a2 >> 16;
  unint64_t v26 = HIDWORD(a2);
  char v28 = (void *)HIWORD(a2);
  unint64_t v29 = a3 >> 16;
  unint64_t v30 = HIDWORD(a3);
  unint64_t v31 = HIWORD(a3);
  unint64_t v32 = a4 >> 16;
  unint64_t v33 = HIDWORD(a4);
  unint64_t v34 = HIWORD(a4);
  uint64_t v10 = type metadata accessor for Mirror();
  uint64_t v27 = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v15 = a5(0);
  uint64_t v43 = v15;
  __int16 v35 = v9;
  __int16 v36 = v22;
  __int16 v37 = v23;
  __int16 v38 = v24;
  __int16 v39 = v8;
  __int16 v40 = v25;
  __int16 v41 = v26;
  __int16 v42 = (__int16)v28;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v11 + 8);
  v17(v13, v10);
  swift_bridgeObjectRetain();
  char v28 = sub_1000532F4(v16, v14);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v18 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v43 = v15;
  __int16 v35 = v7;
  __int16 v36 = v29;
  __int16 v37 = v30;
  __int16 v38 = v31;
  __int16 v39 = v6;
  __int16 v40 = v32;
  __int16 v41 = v33;
  __int16 v42 = v34;
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  v17(v13, v27);
  swift_bridgeObjectRetain();
  unint64_t v20 = sub_1000532F4(v19, v18);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v19) = sub_100046910((uint64_t)v28, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19 & 1;
}

uint64_t sub_100043E58(unint64_t a1, unint64_t a2)
{
  return sub_100043E88(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3EffectUnitDescriptor);
}

uint64_t sub_100043E70(unint64_t a1, unint64_t a2)
{
  return sub_100043E88(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2EffectUnitDescriptor);
}

uint64_t sub_100043E88(unint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  char v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v21 = a1 >> 24;
  unint64_t v22 = HIDWORD(a1);
  unint64_t v23 = (void *)HIWORD(a1);
  unint64_t v24 = a2 >> 8;
  unint64_t v25 = a2 >> 16;
  unint64_t v26 = a2 >> 24;
  unint64_t v27 = HIDWORD(a2);
  unint64_t v28 = HIWORD(a2);
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = a3(0);
  uint64_t v35 = v13;
  char v29 = v5;
  char v30 = v6;
  char v31 = v7;
  char v32 = v21;
  __int16 v33 = v22;
  char v34 = (char)v23;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v9 + 8);
  v15(v11, v8);
  swift_bridgeObjectRetain();
  unint64_t v23 = sub_1000532F4(v14, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v16 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v35 = v13;
  char v29 = v4;
  char v30 = v24;
  char v31 = v25;
  char v32 = v26;
  __int16 v33 = v27;
  char v34 = v28;
  Mirror.init(reflecting:)();
  uint64_t v17 = Mirror.children.getter();
  v15(v11, v8);
  swift_bridgeObjectRetain();
  unint64_t v18 = sub_1000532F4(v17, v16);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v11) = sub_100046910((uint64_t)v23, (uint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

uint64_t sub_1000440E8(unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  unsigned int v34 = a6;
  __int16 v6 = a4;
  __int16 v7 = a3;
  __int16 v8 = a2;
  __int16 v9 = a1;
  unint64_t v10 = a1 >> 16;
  unint64_t v24 = HIDWORD(a1);
  unint64_t v25 = HIWORD(a1);
  unint64_t v26 = a2 >> 16;
  unint64_t v27 = HIDWORD(a2);
  LODWORD(v28) = HIWORD(a3);
  unint64_t v29 = a4 >> 16;
  unint64_t v30 = HIDWORD(a4);
  unint64_t v31 = a5;
  unint64_t v32 = HIWORD(a4);
  unint64_t v33 = a5 >> 16;
  unint64_t v35 = HIDWORD(a5);
  unsigned int v36 = HIWORD(a6);
  uint64_t v11 = type metadata accessor for Mirror();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4MixerUnitDescriptor(0);
  uint64_t v17 = v16;
  uint64_t v46 = v16;
  __int16 v37 = v9;
  __int16 v38 = v10;
  __int16 v39 = v24;
  __int16 v40 = v25;
  __int16 v41 = v8;
  __int16 v42 = v26;
  int v43 = v27;
  __int16 v44 = v7;
  __int16 v45 = (__int16)v28;
  Mirror.init(reflecting:)();
  uint64_t v18 = Mirror.children.getter();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v14, v11);
  swift_bridgeObjectRetain();
  unint64_t v28 = sub_1000532F4(v18, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v20 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v46 = v17;
  __int16 v37 = v6;
  __int16 v38 = v29;
  __int16 v39 = v30;
  __int16 v40 = v32;
  __int16 v41 = v31;
  __int16 v42 = v33;
  int v43 = v35;
  __int16 v44 = v34;
  __int16 v45 = v36;
  Mirror.init(reflecting:)();
  uint64_t v21 = Mirror.children.getter();
  v19(v14, v11);
  swift_bridgeObjectRetain();
  unint64_t v22 = sub_1000532F4(v21, v20);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v21) = sub_100046910((uint64_t)v28, (uint64_t)v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v21 & 1;
}

uint64_t sub_100044390(unint64_t a1, unint64_t a2)
{
  return sub_1000443D8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3MixerUnitDescriptor);
}

uint64_t sub_1000443A8(unint64_t a1, unint64_t a2)
{
  return sub_1000443D8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2MixerUnitDescriptor);
}

uint64_t sub_1000443C0(unint64_t a1, unint64_t a2)
{
  return sub_1000443D8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1MixerUnitDescriptor);
}

uint64_t sub_1000443D8(unint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  char v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v21 = a1 >> 24;
  unint64_t v22 = (void *)HIDWORD(a1);
  unint64_t v23 = a2 >> 8;
  unint64_t v24 = a2 >> 16;
  unint64_t v25 = a2 >> 24;
  unint64_t v26 = HIDWORD(a2);
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = a3(0);
  uint64_t v32 = v13;
  char v27 = v5;
  char v28 = v6;
  char v29 = v7;
  char v30 = v21;
  char v31 = (char)v22;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  unint64_t v15 = *(void (**)(char *, uint64_t))(v9 + 8);
  v15(v11, v8);
  swift_bridgeObjectRetain();
  unint64_t v22 = sub_1000532F4(v14, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v16 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v32 = v13;
  char v27 = v4;
  char v28 = v23;
  char v29 = v24;
  char v30 = v25;
  char v31 = v26;
  Mirror.init(reflecting:)();
  uint64_t v17 = Mirror.children.getter();
  v15(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_1000532F4(v17, v16);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v11) = sub_100046910((uint64_t)v22, (uint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

uint64_t sub_10004461C(unsigned int a1, unsigned int a2)
{
  return sub_100044634(a1, a2, (uint64_t (*)(void))type metadata accessor for IOUSBDescriptorHeader);
}

uint64_t sub_100044634(unsigned int a1, unsigned int a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  char v5 = a1;
  unsigned int v6 = a1 >> 8;
  unsigned int v21 = a2 >> 8;
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v12 = a3(0);
  uint64_t v24 = v12;
  char v22 = v5;
  char v23 = v6;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v8 + 8);
  v14(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_1000532F4(v13, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v24 = v12;
  char v22 = v4;
  char v23 = v21;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  v14(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_1000532F4(v16, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v10) = sub_100046910((uint64_t)v20, (uint64_t)v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_10004482C(unsigned int a1, unsigned int a2)
{
  return sub_100044844(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ClusterEndSegment);
}

uint64_t sub_100044844(unsigned int a1, unsigned int a2, uint64_t (*a3)(void))
{
  __int16 v4 = a2;
  __int16 v5 = a1;
  unsigned int v6 = HIWORD(a1);
  unsigned int v21 = HIWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v12 = a3(0);
  uint64_t v24 = v12;
  __int16 v22 = v5;
  char v23 = v6;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v8 + 8);
  v14(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_1000532F4(v13, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v24 = v12;
  __int16 v22 = v4;
  char v23 = v21;
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  v14(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_1000532F4(v16, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v10) = sub_100046910((uint64_t)v20, (uint64_t)v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_100044A3C(unint64_t a1, unint64_t a2)
{
  return sub_100044A54(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ClusterClusterDescriptionSegment);
}

uint64_t sub_100044A54(unint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  __int16 v4 = a2;
  __int16 v5 = a1;
  unint64_t v6 = a1 >> 16;
  unint64_t v7 = a1 >> 24;
  unint64_t v21 = a2 >> 16;
  unint64_t v22 = a2 >> 24;
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = a3(0);
  uint64_t v26 = v13;
  __int16 v23 = v5;
  char v24 = v6;
  __int16 v25 = v7;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  unint64_t v15 = *(void (**)(char *, uint64_t))(v9 + 8);
  v15(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_1000532F4(v14, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v16 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v26 = v13;
  __int16 v23 = v4;
  char v24 = v21;
  __int16 v25 = v22;
  Mirror.init(reflecting:)();
  uint64_t v17 = Mirror.children.getter();
  v15(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_1000532F4(v17, v16);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v11) = sub_100046910((uint64_t)v20, (uint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

uint64_t sub_100044C60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  char v24 = &type metadata for MixerUnit;
  uint64_t v9 = swift_allocObject();
  uint64_t v23 = v9;
  long long v10 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v9 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v9 + 64) = v10;
  *(_OWORD *)(v9 + 80) = *(_OWORD *)(a1 + 64);
  *(void *)(v9 + 96) = *(void *)(a1 + 80);
  long long v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 32) = v11;
  sub_100053ED4(a1);
  Mirror.init(reflecting:)();
  uint64_t v12 = Mirror.children.getter();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, v4);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1000532F4(v12, v8);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  char v24 = &type metadata for MixerUnit;
  uint64_t v16 = swift_allocObject();
  uint64_t v23 = v16;
  long long v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v16 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v16 + 64) = v17;
  *(_OWORD *)(v16 + 80) = *(_OWORD *)(a2 + 64);
  *(void *)(v16 + 96) = *(void *)(a2 + 80);
  long long v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v16 + 32) = v18;
  sub_100053ED4(a2);
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  v13(v7, v4);
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_1000532F4(v19, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v7) = sub_100046910((uint64_t)v14, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100044EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  char v24 = &type metadata for SampleRateConverter;
  uint64_t v9 = swift_allocObject();
  uint64_t v23 = v9;
  long long v10 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v9 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v9 + 64) = v10;
  *(void *)(v9 + 80) = *(void *)(a1 + 64);
  long long v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 32) = v11;
  sub_100053CCC(a1);
  Mirror.init(reflecting:)();
  uint64_t v12 = Mirror.children.getter();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, v4);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1000532F4(v12, v8);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  char v24 = &type metadata for SampleRateConverter;
  uint64_t v16 = swift_allocObject();
  uint64_t v23 = v16;
  long long v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v16 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v16 + 64) = v17;
  *(void *)(v16 + 80) = *(void *)(a2 + 64);
  long long v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v16 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v16 + 32) = v18;
  sub_100053CCC(a2);
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  v13(v7, v4);
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_1000532F4(v19, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v7) = sub_100046910((uint64_t)v14, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1000450F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v26 = &type metadata for ControlInterface;
  uint64_t v9 = swift_allocObject();
  uint64_t v25 = v9;
  long long v10 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v9 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v9 + 96) = v10;
  *(_OWORD *)(v9 + 112) = *(_OWORD *)(a1 + 96);
  *(void *)(v9 + 128) = *(void *)(a1 + 112);
  long long v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 32) = v11;
  long long v12 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v9 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v9 + 64) = v12;
  sub_100035ECC((void *)a1);
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, v4);
  swift_bridgeObjectRetain();
  unint64_t v15 = sub_1000532F4(v13, v8);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v16 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v26 = &type metadata for ControlInterface;
  uint64_t v17 = swift_allocObject();
  uint64_t v25 = v17;
  long long v18 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v17 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v17 + 96) = v18;
  *(_OWORD *)(v17 + 112) = *(_OWORD *)(a2 + 96);
  *(void *)(v17 + 128) = *(void *)(a2 + 112);
  long long v19 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v17 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v17 + 32) = v19;
  long long v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v17 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v17 + 64) = v20;
  sub_100035ECC((void *)a2);
  Mirror.init(reflecting:)();
  uint64_t v21 = Mirror.children.getter();
  v14(v7, v4);
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_1000532F4(v21, v16);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v7) = sub_100046910((uint64_t)v15, (uint64_t)v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100045350(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v22 = &type metadata for ClockMultiplier;
  uint64_t v9 = swift_allocObject();
  uint64_t v21 = v9;
  long long v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 32) = v10;
  *(_OWORD *)(v9 + 48) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)(v9 + 64) = *(_DWORD *)(a1 + 48);
  sub_100053B64(a1);
  Mirror.init(reflecting:)();
  uint64_t v11 = Mirror.children.getter();
  long long v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v7, v4);
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_1000532F4(v11, v8);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v14 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v22 = &type metadata for ClockMultiplier;
  uint64_t v15 = swift_allocObject();
  uint64_t v21 = v15;
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v15 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v15 + 32) = v16;
  *(_OWORD *)(v15 + 48) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(v15 + 64) = *(_DWORD *)(a2 + 48);
  sub_100053B64(a2);
  Mirror.init(reflecting:)();
  uint64_t v17 = Mirror.children.getter();
  v12(v7, v4);
  swift_bridgeObjectRetain();
  long long v18 = sub_1000532F4(v17, v14);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v7) = sub_100046910((uint64_t)v13, (uint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100045590(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4 = type metadata accessor for Mirror();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v24 = &type metadata for ProcessingUnit;
  uint64_t v9 = (_OWORD *)swift_allocObject();
  uint64_t v23 = v9;
  long long v10 = a1[3];
  v9[3] = a1[2];
  void v9[4] = v10;
  _OWORD v9[5] = a1[4];
  long long v11 = a1[1];
  v9[1] = *a1;
  long long v9[2] = v11;
  sub_100053D48((uint64_t)a1);
  Mirror.init(reflecting:)();
  uint64_t v12 = Mirror.children.getter();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, v4);
  swift_bridgeObjectRetain();
  unint64_t v14 = sub_1000532F4(v12, v8);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v24 = &type metadata for ProcessingUnit;
  long long v16 = (_OWORD *)swift_allocObject();
  uint64_t v23 = v16;
  long long v17 = a2[3];
  v16[3] = a2[2];
  v16[4] = v17;
  v16[5] = a2[4];
  long long v18 = a2[1];
  v16[1] = *a2;
  v16[2] = v18;
  sub_100053D48((uint64_t)a2);
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  v13(v7, v4);
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_1000532F4(v19, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v7) = sub_100046910((uint64_t)v14, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1000457D0(_OWORD *a1, _OWORD *a2)
{
  return sub_100045A70(a1, a2, (uint64_t)&type metadata for OutputTerminal, (uint64_t)&unk_100118D10, (void (*)(_OWORD *))sub_100053FF8);
}

uint64_t sub_1000457F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v26 = &type metadata for InputTerminal;
  uint64_t v9 = swift_allocObject();
  uint64_t v25 = v9;
  long long v10 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v9 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v9 + 96) = v10;
  *(void *)(v9 + 112) = *(void *)(a1 + 96);
  long long v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 32) = v11;
  long long v12 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v9 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v9 + 64) = v12;
  sub_100054090(a1);
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  unint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, v4);
  swift_bridgeObjectRetain();
  unint64_t v15 = sub_1000532F4(v13, v8);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v16 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v26 = &type metadata for InputTerminal;
  uint64_t v17 = swift_allocObject();
  uint64_t v25 = v17;
  long long v18 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v17 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v17 + 96) = v18;
  *(void *)(v17 + 112) = *(void *)(a2 + 96);
  long long v19 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v17 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v17 + 32) = v19;
  long long v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v17 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v17 + 64) = v20;
  sub_100054090(a2);
  Mirror.init(reflecting:)();
  uint64_t v21 = Mirror.children.getter();
  v14(v7, v4);
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_1000532F4(v21, v16);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v7) = sub_100046910((uint64_t)v15, (uint64_t)v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100045A48(_OWORD *a1, _OWORD *a2)
{
  return sub_100045A70(a1, a2, (uint64_t)&type metadata for ExtensionUnit, (uint64_t)&unk_100118C70, (void (*)(_OWORD *))sub_100053E2C);
}

uint64_t sub_100045A70(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4, void (*a5)(_OWORD *))
{
  v29[1] = a4;
  char v30 = a5;
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  long long v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v32 = a3;
  unint64_t v14 = (_OWORD *)swift_allocObject();
  char v31 = v14;
  long long v15 = a1[3];
  v14[3] = a1[2];
  v14[4] = v15;
  long long v16 = a1[5];
  void v14[5] = a1[4];
  v14[6] = v16;
  long long v17 = a1[1];
  v14[1] = *a1;
  void v14[2] = v17;
  a5(a1);
  Mirror.init(reflecting:)();
  uint64_t v18 = Mirror.children.getter();
  long long v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v12, v9);
  swift_bridgeObjectRetain();
  long long v20 = sub_1000532F4(v18, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v21 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v32 = a3;
  uint64_t v22 = (_OWORD *)swift_allocObject();
  char v31 = v22;
  long long v23 = a2[3];
  void v22[3] = a2[2];
  v22[4] = v23;
  long long v24 = a2[5];
  void v22[5] = a2[4];
  v22[6] = v24;
  long long v25 = a2[1];
  v22[1] = *a2;
  v22[2] = v25;
  v30(a2);
  Mirror.init(reflecting:)();
  uint64_t v26 = Mirror.children.getter();
  v19(v12, v9);
  swift_bridgeObjectRetain();
  char v27 = sub_1000532F4(v26, v21);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v12) = sub_100046910((uint64_t)v20, (uint64_t)v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

uint64_t sub_100045CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v22 = &type metadata for ClockSelector;
  uint64_t v9 = swift_allocObject();
  uint64_t v21 = v9;
  sub_10005415C(a1 + 32, (uint64_t)v28, &qword_1001288F0);
  uint64_t v27 = *(void *)(a1 + 40);
  sub_10005415C(a1 + 48, (uint64_t)v26, &qword_100128938);
  long long v10 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 32) = v10;
  *(_OWORD *)(v9 + 48) = *(_OWORD *)(a1 + 32);
  *(void *)(v9 + 64) = *(void *)(a1 + 48);
  sub_100053BD8((uint64_t)v28);
  sub_100053BD8((uint64_t)&v27);
  sub_100053BD8((uint64_t)v26);
  Mirror.init(reflecting:)();
  uint64_t v11 = Mirror.children.getter();
  long long v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v7, v4);
  swift_bridgeObjectRetain();
  unint64_t v13 = sub_1000532F4(v11, v8);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v14 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v22 = &type metadata for ClockSelector;
  uint64_t v15 = swift_allocObject();
  uint64_t v21 = v15;
  sub_10005415C(a2 + 32, (uint64_t)v25, &qword_1001288F0);
  uint64_t v24 = *(void *)(a2 + 40);
  sub_10005415C(a2 + 48, (uint64_t)v23, &qword_100128938);
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v15 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v15 + 32) = v16;
  *(_OWORD *)(v15 + 48) = *(_OWORD *)(a2 + 32);
  *(void *)(v15 + 64) = *(void *)(a2 + 48);
  sub_100053BD8((uint64_t)v25);
  sub_100053BD8((uint64_t)&v24);
  sub_100053BD8((uint64_t)v23);
  Mirror.init(reflecting:)();
  uint64_t v17 = Mirror.children.getter();
  v12(v7, v4);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_1000532F4(v17, v14);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v7) = sub_100046910((uint64_t)v13, (uint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100045F7C(uint64_t a1, uint64_t a2)
{
  return sub_100045F90(a1, a2, (uint64_t)&type metadata for SelectorUnit, (uint64_t)&unk_100118C98);
}

uint64_t sub_100045F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v25[1] = a4;
  uint64_t v26 = a3;
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  long long v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v28 = a3;
  uint64_t v12 = swift_allocObject();
  uint64_t v27 = v12;
  long long v13 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v12 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v12 + 64) = v13;
  *(void *)(v12 + 80) = *(void *)(a1 + 64);
  long long v14 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v12 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v12 + 32) = v14;
  sub_100053F70(a1);
  Mirror.init(reflecting:)();
  uint64_t v15 = Mirror.children.getter();
  long long v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_1000532F4(v15, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v18 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v28 = v26;
  uint64_t v19 = swift_allocObject();
  uint64_t v27 = v19;
  long long v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v19 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v19 + 64) = v20;
  *(void *)(v19 + 80) = *(void *)(a2 + 64);
  long long v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v19 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v19 + 32) = v21;
  sub_100053F70(a2);
  Mirror.init(reflecting:)();
  uint64_t v22 = Mirror.children.getter();
  v16(v10, v7);
  swift_bridgeObjectRetain();
  long long v23 = sub_1000532F4(v22, v18);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v10) = sub_100046910((uint64_t)v17, (uint64_t)v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_1000461C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror();
  uint64_t v20 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v22 = &type metadata for PowerDomain;
  uint64_t v9 = (_OWORD *)swift_allocObject();
  long long v21 = v9;
  sub_10005415C(a1 + 32, (uint64_t)v26, &qword_1001288F0);
  uint64_t v25 = *(void *)(a1 + 40);
  long long v10 = *(_OWORD *)(a1 + 16);
  v9[1] = *(_OWORD *)a1;
  long long v9[2] = v10;
  v9[3] = *(_OWORD *)(a1 + 32);
  sub_100053BD8((uint64_t)v26);
  sub_100053BD8((uint64_t)&v25);
  Mirror.init(reflecting:)();
  uint64_t v11 = Mirror.children.getter();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v7, v4);
  swift_bridgeObjectRetain();
  long long v13 = sub_1000532F4(v11, v8);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v14 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v22 = &type metadata for PowerDomain;
  uint64_t v15 = (_OWORD *)swift_allocObject();
  long long v21 = v15;
  sub_10005415C(a2 + 32, (uint64_t)v24, &qword_1001288F0);
  uint64_t v23 = *(void *)(a2 + 40);
  long long v16 = *(_OWORD *)(a2 + 16);
  v15[1] = *(_OWORD *)a2;
  _OWORD v15[2] = v16;
  void v15[3] = *(_OWORD *)(a2 + 32);
  sub_100053BD8((uint64_t)v24);
  sub_100053BD8((uint64_t)&v23);
  Mirror.init(reflecting:)();
  uint64_t v17 = Mirror.children.getter();
  v12(v7, v20);
  swift_bridgeObjectRetain();
  unint64_t v18 = sub_1000532F4(v17, v14);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v7) = sub_100046910((uint64_t)v13, (uint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100046448(uint64_t a1, uint64_t a2)
{
  return sub_100045F90(a1, a2, (uint64_t)&type metadata for FeatureUnit, (uint64_t)&unk_100118CE8);
}

uint64_t sub_10004645C(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4 = type metadata accessor for Mirror();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v24 = &type metadata for ClockSource;
  uint64_t v9 = (_OWORD *)swift_allocObject();
  uint64_t v23 = v9;
  long long v10 = a1[1];
  v9[1] = *a1;
  long long v9[2] = v10;
  long long v11 = a1[3];
  v9[3] = a1[2];
  void v9[4] = v11;
  sub_100053C0C((uint64_t)a1);
  Mirror.init(reflecting:)();
  uint64_t v12 = Mirror.children.getter();
  long long v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, v4);
  swift_bridgeObjectRetain();
  unint64_t v14 = sub_1000532F4(v12, v8);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v24 = &type metadata for ClockSource;
  long long v16 = (_OWORD *)swift_allocObject();
  uint64_t v23 = v16;
  long long v17 = a2[1];
  v16[1] = *a2;
  v16[2] = v17;
  long long v18 = a2[3];
  v16[3] = a2[2];
  v16[4] = v18;
  sub_100053C0C((uint64_t)a2);
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  v13(v7, v4);
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_1000532F4(v19, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v7) = sub_100046910((uint64_t)v14, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10004668C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror();
  uint64_t v22 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v24 = &type metadata for EffectUnit;
  uint64_t v9 = (_OWORD *)swift_allocObject();
  uint64_t v23 = v9;
  uint64_t v28 = *(void *)(a1 + 48);
  sub_10005415C(a1 + 56, (uint64_t)v27, &qword_1001288F0);
  long long v10 = *(_OWORD *)(a1 + 16);
  v9[1] = *(_OWORD *)a1;
  long long v9[2] = v10;
  long long v11 = *(_OWORD *)(a1 + 48);
  v9[3] = *(_OWORD *)(a1 + 32);
  void v9[4] = v11;
  sub_100053BD8((uint64_t)&v28);
  sub_100053BD8((uint64_t)v27);
  Mirror.init(reflecting:)();
  uint64_t v12 = Mirror.children.getter();
  long long v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, v4);
  swift_bridgeObjectRetain();
  unint64_t v14 = sub_1000532F4(v12, v8);
  swift_release();
  swift_bridgeObjectRelease_n();
  unint64_t v15 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v24 = &type metadata for EffectUnit;
  long long v16 = (_OWORD *)swift_allocObject();
  uint64_t v23 = v16;
  uint64_t v26 = *(void *)(a2 + 48);
  sub_10005415C(a2 + 56, (uint64_t)v25, &qword_1001288F0);
  long long v17 = *(_OWORD *)(a2 + 16);
  v16[1] = *(_OWORD *)a2;
  v16[2] = v17;
  long long v18 = *(_OWORD *)(a2 + 48);
  v16[3] = *(_OWORD *)(a2 + 32);
  v16[4] = v18;
  sub_100053BD8((uint64_t)&v26);
  sub_100053BD8((uint64_t)v25);
  Mirror.init(reflecting:)();
  uint64_t v19 = Mirror.children.getter();
  v13(v7, v22);
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_1000532F4(v19, v15);
  swift_release();
  swift_bridgeObjectRelease_n();
  LOBYTE(v7) = sub_100046910((uint64_t)v14, (uint64_t)v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100046910(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 32;
    while (1)
    {
      uint64_t result = sub_10001AB28(a1 + v6, (uint64_t)&v10);
      unint64_t v8 = *(void *)(a2 + 16);
      if (v5 == v8)
      {
        sub_10001A174((uint64_t)&v10);
        goto LABEL_9;
      }
      if (v5 >= v8) {
        break;
      }
      long long v15 = v10;
      long long v16 = v11;
      *(void *)&v17[0] = v12;
      sub_10001AB28(a2 + v6, (uint64_t)v17 + 8);
      long long v12 = v17[0];
      long long v13 = v17[1];
      long long v14 = v17[2];
      long long v10 = v15;
      long long v11 = v16;
      char v9 = static AnyHashable.== infix(_:_:)();
      sub_10001A918((uint64_t)&v10, &qword_100128908);
      if ((v9 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
      ++v5;
      v6 += 40;
      if (v4 == v5) {
        goto LABEL_9;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1;
  }
  return result;
}

uint64_t sub_100046A5C(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  unint64_t v3 = HIDWORD(a2);
  unint64_t v4 = HIWORD(a2);
  uint64_t v5 = type metadata accessor for Mirror();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4TerminalCompanionChannelMagnitudePhaseSegmentPoint(0);
  uint64_t v19 = v10;
  int v16 = v2;
  __int16 v17 = v3;
  __int16 v18 = v4;
  Mirror.init(reflecting:)();
  uint64_t v11 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  long long v12 = sub_1000532F4(v11, v9);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v13 = v12[2];
  if (!v13) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v14 = (uint64_t)(v12 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v14, (uint64_t)&v16);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)&v16);
    v14 += 40;
    --v13;
  }
  while (v13);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100046C00(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return sub_100046E70(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionChannelPositionRThetaPhiSegment);
}

uint64_t sub_100046C18(uint64_t a1, unsigned int a2)
{
  return sub_100048580(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4ClassSpecificAudioStreamingInterfaceDescriptor);
}

uint64_t sub_100046C30(uint64_t a1, unint64_t a2)
{
  return sub_100049AAC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionChannelMagnitudeSegmentPoint);
}

uint64_t sub_100046C48(uint64_t a1, unsigned int a2)
{
  return sub_10004B6B0(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionChannelMagnitudePhaseSegment);
}

uint64_t sub_100046C60(uint64_t a1, unsigned int a2)
{
  return sub_100048580(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4ClassSpecificAudioControlInterfaceDescriptor);
}

uint64_t sub_100046C78(uint64_t a1, unint64_t a2, unint64_t a3, __int16 a4)
{
  __int16 v4 = a3;
  __int16 v5 = a2;
  *(_WORD *)&v22[8] = a4;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v8 = HIWORD(a2);
  unint64_t v21 = a3 >> 16;
  *(void *)uint64_t v22 = a3;
  HIDWORD(v20) = *(_DWORD *)&v22[6];
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  long long v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4AudioStreamingValidFrequencyRangeDescriptor(0);
  uint64_t v25 = v14;
  *(_WORD *)uint64_t v22 = v5;
  *(_WORD *)&v22[2] = v6;
  *(_WORD *)&v22[4] = v7;
  *(_WORD *)&v22[6] = v8;
  *(_WORD *)&v22[8] = v4;
  int v23 = v21;
  int v24 = HIDWORD(v20);
  Mirror.init(reflecting:)();
  uint64_t v15 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  int v16 = sub_1000532F4(v15, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v18, (uint64_t)v22);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v22);
    v18 += 40;
    --v17;
  }
  while (v17);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100046E58(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return sub_100046E70(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionChannelPositionXYZSegment);
}

uint64_t sub_100046E70(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t (*a4)(void))
{
  int v5 = a3;
  __int16 v6 = a2;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v20 = HIDWORD(a3);
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  long long v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v25 = a4(0);
  v21[0] = v6;
  v21[1] = v7;
  int v22 = v8;
  int v23 = v5;
  int v24 = v20;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000532F4(v14, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v16 = v15[2];
  if (!v16) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v17 = (uint64_t)(v15 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v17, (uint64_t)v21);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v21);
    v17 += 40;
    --v16;
  }
  while (v16);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100047038(uint64_t a1, unsigned int a2)
{
  return sub_10004B6B0(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionDescriptorSegmentHeader);
}

uint64_t sub_100047050(uint64_t a1, unsigned int a2)
{
  return sub_10004B6B0(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionChannelMagnitudeSegment);
}

uint64_t sub_100047068(uint64_t a1, unint64_t a2, int a3)
{
  __int16 v4 = a2;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = HIDWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4TerminalCompanionChannelBandwidthSegment(0);
  uint64_t v21 = v12;
  v18[0] = v4;
  v18[1] = v5;
  int v19 = v6;
  int v20 = a3;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1000532F4(v13, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v16, (uint64_t)v18);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v18);
    v16 += 40;
    --v15;
  }
  while (v15);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100047218(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  __int16 v4 = a4;
  __int16 v5 = a3;
  __int16 v6 = a2;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v21 = HIWORD(a2);
  unint64_t v22 = a3 >> 16;
  unint64_t v23 = HIDWORD(a3);
  unint64_t v24 = HIWORD(a3);
  unint64_t v25 = a4 >> 16;
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4SamplingRateConverterUnitDescriptor(0);
  uint64_t v28 = v14;
  v26[0] = v6;
  v26[1] = v7;
  v26[2] = v8;
  void v26[3] = v21;
  v26[4] = v5;
  v26[5] = v22;
  v26[6] = v23;
  v26[7] = v24;
  unsigned char v26[8] = v4;
  int v27 = v25;
  Mirror.init(reflecting:)();
  uint64_t v15 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_1000532F4(v15, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v18, (uint64_t)v26);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v26);
    v18 += 40;
    --v17;
  }
  while (v17);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004741C(uint64_t a1, unint64_t a2)
{
  return sub_10004747C(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionEN50322_2Segment);
}

uint64_t sub_100047434(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return sub_10004B8B4(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for ADC4TerminalCompanionDescriptorHeader);
}

uint64_t sub_10004744C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return sub_10004B8B4(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for ADC4ClusterChannelInformationSegment);
}

uint64_t sub_100047464(uint64_t a1, unint64_t a2)
{
  return sub_10004747C(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4ClusterChannelDescriptionSegment);
}

uint64_t sub_10004747C(uint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  __int16 v4 = a2;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = HIDWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v18 = a3(0);
  v17[0] = v4;
  v17[1] = v5;
  long long v17[2] = v6;
  Mirror.init(reflecting:)();
  uint64_t v12 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRetain();
  unint64_t v13 = sub_1000532F4(v12, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v14 = v13[2];
  if (!v14) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v15 = (uint64_t)(v13 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v15, (uint64_t)v17);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v17);
    v15 += 40;
    --v14;
  }
  while (v14);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100047630(uint64_t a1, unint64_t a2)
{
  __int16 v2 = a2;
  unint64_t v3 = a2 >> 16;
  unint64_t v4 = a2 >> 24;
  unint64_t v5 = HIDWORD(a2);
  unint64_t v6 = a2 >> 40;
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ClusterChannelInformationSegment(0);
  uint64_t v23 = v12;
  __int16 v18 = v2;
  char v19 = v3;
  char v20 = v4;
  char v21 = v5;
  char v22 = v6;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1000532F4(v13, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v16, (uint64_t)&v18);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)&v18);
    v16 += 40;
    --v15;
  }
  while (v15);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000477EC(uint64_t a1, unint64_t a2)
{
  return sub_10004D204(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ClusterChannelDescriptionSegment);
}

uint64_t sub_100047804(uint64_t a1, unint64_t a2)
{
  __int16 v2 = a2;
  unint64_t v3 = a2 >> 16;
  unint64_t v4 = a2 >> 24;
  unint64_t v5 = HIDWORD(a2);
  unint64_t v6 = a2 >> 40;
  unint64_t v19 = HIWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ClusterChannelAmbiosonicSegment(0);
  uint64_t v26 = v12;
  __int16 v20 = v2;
  char v21 = v3;
  char v22 = v4;
  char v23 = v5;
  char v24 = v6;
  char v25 = v19;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1000532F4(v13, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v16, (uint64_t)&v20);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)&v20);
    v16 += 40;
    --v15;
  }
  while (v15);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000479D0(uint64_t a1, unsigned int a2)
{
  return sub_10004B6B0(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4ClusterDescriptorSegmentHeader);
}

uint64_t sub_1000479E8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return sub_10004C66C(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for ADC4ClusterChannelAmbisonicSegment);
}

uint64_t sub_100047A00(uint64_t a1, unsigned int a2)
{
  return sub_10004D048(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ClusterDescriptorSegmentHeader);
}

uint64_t sub_100047A18(uint64_t a1, unint64_t a2, unsigned int a3)
{
  char v3 = a2;
  *(_WORD *)&v21[8] = a3;
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = a2 >> 40;
  unint64_t v20 = HIWORD(a2);
  *(void *)char v21 = a2;
  __int16 v6 = *(_WORD *)&v21[7];
  unsigned int v7 = a3 >> 8;
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2ProcessingUnitDescriptorPart2(0);
  uint64_t v22 = v13;
  v21[0] = v3;
  *(_DWORD *)&v21[1] = v4;
  v21[5] = v5;
  v21[6] = v20;
  *(_WORD *)&v21[7] = v6;
  v21[9] = v7;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000532F4(v14, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v16 = v15[2];
  if (!v16) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v17 = (uint64_t)(v15 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v17, (uint64_t)v21);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v21);
    v17 += 40;
    --v16;
  }
  while (v16);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100047BE8(uint64_t a1, unint64_t a2)
{
  return sub_1000483AC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1ProcessingUnitDescriptorPart2);
}

uint64_t sub_100047C00(uint64_t a1, unsigned int a2)
{
  char v2 = a2;
  unsigned int v3 = a2 >> 8;
  unsigned int v4 = HIWORD(a2);
  uint64_t v5 = type metadata accessor for Mirror();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v9 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADCClassSpecificDescriptorHeader(0);
  uint64_t v17 = v10;
  v16[0] = v2;
  v16[1] = v3;
  v16[2] = v4;
  Mirror.init(reflecting:)();
  uint64_t v11 = Mirror.children.getter();
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_1000532F4(v11, v9);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v13 = v12[2];
  if (!v13) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v14 = (uint64_t)(v12 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v14, (uint64_t)v16);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v16);
    v14 += 40;
    --v13;
  }
  while (v13);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100047DA4(uint64_t a1, unsigned int a2)
{
  return sub_10004B6B0(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4InputTerminalDescriptorPart2);
}

uint64_t sub_100047DBC(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unsigned int a5)
{
  __int16 v5 = a5;
  __int16 v6 = a4;
  __int16 v7 = a3;
  __int16 v8 = a2;
  unint64_t v9 = a2 >> 16;
  unint64_t v22 = HIDWORD(a2);
  unint64_t v23 = HIWORD(a2);
  unint64_t v24 = a3 >> 16;
  unint64_t v25 = HIWORD(a3);
  unint64_t v26 = a4 >> 16;
  unint64_t v27 = HIDWORD(a4);
  unint64_t v28 = HIWORD(a4);
  unsigned int v29 = HIWORD(a5);
  uint64_t v10 = type metadata accessor for Mirror();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4AudioStreamingSelfDescriptor(0);
  v30[3] = v15;
  uint64_t v16 = swift_allocObject();
  v30[0] = v16;
  *(_WORD *)(v16 + 16) = v8;
  *(_WORD *)(v16 + 18) = v9;
  *(_WORD *)(v16 + 20) = v22;
  *(_WORD *)(v16 + 22) = v23;
  *(_WORD *)(v16 + 24) = v7;
  *(_DWORD *)(v16 + 26) = v24;
  *(_WORD *)(v16 + 30) = v25;
  *(_WORD *)(v16 + 32) = v6;
  *(_WORD *)(v16 + 34) = v26;
  *(_WORD *)(v16 + 36) = v27;
  *(_WORD *)(v16 + 38) = v28;
  *(_WORD *)(v16 + 40) = v5;
  *(_WORD *)(v16 + 42) = v29;
  Mirror.init(reflecting:)();
  uint64_t v17 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_1000532F4(v17, v14);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v19 = v18[2];
  if (!v19) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v20 = (uint64_t)(v18 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v20, (uint64_t)v30);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v30);
    v20 += 40;
    --v19;
  }
  while (v19);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100048004(uint64_t a1, unint64_t a2)
{
  __int16 v2 = a2;
  unint64_t v3 = a2 >> 16;
  unint64_t v4 = HIWORD(a2);
  uint64_t v5 = type metadata accessor for Mirror();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __int16 v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ExtensionUnitDescriptorPart2(0);
  uint64_t v19 = v10;
  __int16 v16 = v2;
  int v17 = v3;
  __int16 v18 = v4;
  Mirror.init(reflecting:)();
  uint64_t v11 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_1000532F4(v11, v9);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v13 = v12[2];
  if (!v13) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v14 = (uint64_t)(v12 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v14, (uint64_t)&v16);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)&v16);
    v14 += 40;
    --v13;
  }
  while (v13);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000481A8(uint64_t a1, unint64_t a2)
{
  return sub_100049AAC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ClockSelectorDescriptorPart2);
}

uint64_t sub_1000481C0(uint64_t a1, unint64_t a2)
{
  char v2 = a2;
  unint64_t v3 = a2 >> 8;
  unint64_t v4 = a2 >> 40;
  unint64_t v5 = HIWORD(a2);
  unint64_t v6 = HIBYTE(a2);
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2ExtensionUnitDescriptorPart2(0);
  uint64_t v23 = v12;
  char v18 = v2;
  int v19 = v3;
  char v20 = v4;
  char v21 = v5;
  char v22 = v6;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1000532F4(v13, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v16, (uint64_t)&v18);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)&v18);
    v16 += 40;
    --v15;
  }
  while (v15);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004837C(uint64_t a1, unsigned int a2)
{
  return sub_10004CE8C(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2ClockSelectorDescriptorPart2);
}

uint64_t sub_100048394(uint64_t a1, unint64_t a2)
{
  return sub_1000483AC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1ExtensionUnitDescriptorPart2);
}

uint64_t sub_1000483AC(uint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 24;
  unint64_t v7 = HIDWORD(a2);
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = &v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v22 = a3(0);
  char v18 = v4;
  __int16 v19 = v5;
  char v20 = v6;
  char v21 = v7;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1000532F4(v13, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v16, (uint64_t)&v18);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)&v18);
    v16 += 40;
    --v15;
  }
  while (v15);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100048568(uint64_t a1, unsigned int a2)
{
  return sub_100048580(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1ASFormatTypeDescriptorHeader);
}

uint64_t sub_100048580(uint64_t a1, unsigned int a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  unsigned int v5 = a2 >> 8;
  unsigned int v6 = HIWORD(a2);
  unsigned int v7 = HIBYTE(a2);
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v19 = a3(0);
  v18[0] = v4;
  v18[1] = v5;
  _WORD v18[2] = v6;
  v18[3] = v7;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1000532F4(v13, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v16, (uint64_t)v18);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v18);
    v16 += 40;
    --v15;
  }
  while (v15);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004873C()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  char v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4PowerDomainEntityDescriptor(0);
  v14[3] = v6;
  uint64_t v7 = swift_allocObject();
  v14[0] = v7;
  long long v8 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v7 + 32) = v8;
  *(_WORD *)(v7 + 48) = *(_WORD *)(v0 + 32);
  Mirror.init(reflecting:)();
  uint64_t v9 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_1000532F4(v9, v5);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v11 = v10[2];
  if (!v11) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v12 = (uint64_t)(v10 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v12, (uint64_t)v14);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v14);
    v12 += 40;
    --v11;
  }
  while (v11);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000488E8(uint64_t a1, unint64_t a2)
{
  return sub_100049AAC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3SelectorUnitDescriptorPart2);
}

uint64_t sub_100048900(uint64_t a1, unsigned int a2)
{
  return sub_10004CE8C(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2SelectorUnitDescriptorPart2);
}

uint64_t sub_100048918(uint64_t a1, unint64_t a2)
{
  char v2 = a2;
  unint64_t v3 = a2 >> 8;
  unint64_t v4 = a2 >> 16;
  unint64_t v5 = a2 >> 24;
  unint64_t v6 = a2 >> 40;
  unint64_t v19 = HIBYTE(a2);
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1ACInterfaceHeaderDescriptor(0);
  uint64_t v24 = v12;
  v20[0] = v2;
  v20[1] = v3;
  v20[2] = v4;
  __int16 v21 = v5;
  __int16 v22 = v6;
  char v23 = v19;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1000532F4(v13, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v16, (uint64_t)v20);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v20);
    v16 += 40;
    --v15;
  }
  while (v15);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100048AE4(uint64_t a1, unint64_t a2, unint64_t a3)
{
  __int16 v3 = a3;
  __int16 v4 = a2;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = HIDWORD(a2);
  unint64_t v7 = HIWORD(a2);
  unint64_t v20 = a3 >> 16;
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4AudioControlSelfDescriptor(0);
  uint64_t v23 = v13;
  v21[0] = v4;
  v21[1] = v5;
  _WORD v21[2] = v6;
  v21[3] = v7;
  v21[4] = v3;
  int v22 = v20;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000532F4(v14, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v16 = v15[2];
  if (!v16) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v17 = (uint64_t)(v15 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v17, (uint64_t)v21);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v21);
    v17 += 40;
    --v16;
  }
  while (v16);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100048CB0(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  __int16 v4 = a4;
  __int16 v5 = a3;
  __int16 v6 = a2;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v21 = HIWORD(a2);
  unint64_t v22 = a3 >> 16;
  unint64_t v23 = HIDWORD(a3);
  unint64_t v24 = a4 >> 16;
  unint64_t v25 = HIDWORD(a4);
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4ConnectorEntityDescriptor(0);
  uint64_t v31 = v14;
  v26[0] = v6;
  v26[1] = v7;
  v26[2] = v8;
  void v26[3] = v21;
  v26[4] = v5;
  v26[5] = v22;
  int v27 = v23;
  __int16 v28 = v4;
  __int16 v29 = v24;
  int v30 = v25;
  Mirror.init(reflecting:)();
  uint64_t v15 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_1000532F4(v15, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v18, (uint64_t)v26);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v26);
    v18 += 40;
    --v17;
  }
  while (v17);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100048EB4(uint64_t a1, unint64_t a2, char a3)
{
  char v3 = a2;
  unsigned char v23[8] = a3;
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = a2 >> 24;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v20 = a2 >> 40;
  unint64_t v22 = HIWORD(a2);
  *(void *)unint64_t v23 = a2;
  int v21 = *(unsigned __int16 *)&v23[7];
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3SRConverterUnitDescriptor(0);
  uint64_t v24 = v13;
  v23[0] = v3;
  v23[1] = v4;
  v23[2] = v5;
  v23[3] = v6;
  v23[4] = v7;
  v23[5] = v20;
  v23[6] = v22;
  *(_WORD *)&v23[7] = v21;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000532F4(v14, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v16 = v15[2];
  if (!v16) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v17 = (uint64_t)(v15 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v17, (uint64_t)v23);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v23);
    v17 += 40;
    --v16;
  }
  while (v16);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000490A4(uint64_t a1, unint64_t a2, unsigned int a3)
{
  char v3 = a2;
  *(_DWORD *)&v21[8] = a3;
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = a2 >> 24;
  unint64_t v20 = HIDWORD(a2);
  *(void *)int v21 = a2;
  int v7 = *(_DWORD *)&v21[5];
  HIDWORD(v19) = a3 >> 8;
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ClockMultiplierDescriptor(0);
  uint64_t v22 = v13;
  v21[0] = v3;
  v21[1] = v4;
  _WORD v21[2] = v5;
  v21[3] = v6;
  v21[4] = v20;
  *(_DWORD *)&_WORD v21[5] = v7;
  *(_WORD *)&v21[9] = WORD2(v19);
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000532F4(v14, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v16 = v15[2];
  if (!v16) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v17 = (uint64_t)(v15 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v17, (uint64_t)v21);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v21);
    v17 += 40;
    --v16;
  }
  while (v16);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100049284(uint64_t a1, unint64_t a2)
{
  return sub_10004C0C8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2SRConverterUnitDescriptor);
}

uint64_t sub_10004929C(uint64_t a1, unint64_t a2)
{
  char v2 = a2;
  unint64_t v3 = a2 >> 8;
  unint64_t v4 = a2 >> 16;
  unint64_t v5 = a2 >> 24;
  unint64_t v6 = HIDWORD(a2);
  unint64_t v18 = a2 >> 40;
  unint64_t v19 = HIWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2ClockMultiplierDescriptor(0);
  uint64_t v21 = v12;
  v20[0] = v2;
  v20[1] = v3;
  v20[2] = v4;
  unsigned char v20[3] = v5;
  v20[4] = v6;
  v20[5] = v18;
  v20[6] = v19;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1000532F4(v13, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v16, (uint64_t)v20);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v20);
    v16 += 40;
    --v15;
  }
  while (v15);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100049474(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return sub_10004A594(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for ADC4ProcessingUnitDescriptor);
}

uint64_t sub_10004948C(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  int v4 = a4;
  __int16 v5 = a3;
  __int16 v6 = a2;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v20 = HIWORD(a2);
  unint64_t v21 = a3 >> 16;
  unint64_t v22 = HIDWORD(a3);
  unint64_t v23 = HIWORD(a3);
  unint64_t v24 = HIDWORD(a4);
  unint64_t v25 = HIWORD(a4);
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4OutputTerminalDescriptor(0);
  uint64_t v30 = v14;
  v26[0] = v6;
  v26[1] = v7;
  v26[2] = v8;
  void v26[3] = v20;
  v26[4] = v5;
  v26[5] = v21;
  _WORD v26[6] = v22;
  v26[7] = v23;
  int v27 = v4;
  __int16 v28 = v24;
  __int16 v29 = v25;
  Mirror.init(reflecting:)();
  uint64_t v15 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_1000532F4(v15, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v18, (uint64_t)v26);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v26);
    v18 += 40;
    --v17;
  }
  while (v17);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004969C(uint64_t a1, unint64_t a2, __int16 a3)
{
  __int16 v4 = a2;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = HIDWORD(a2);
  unint64_t v7 = HIWORD(a2);
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4ExtendedDescriptorHeader(0);
  uint64_t v20 = v13;
  v19[0] = v4;
  v19[1] = v5;
  v19[2] = v6;
  v19[3] = v7;
  v19[4] = a3;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000532F4(v14, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v16 = v15[2];
  if (!v16) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v17 = (uint64_t)(v15 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v17, (uint64_t)v19);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v19);
    v17 += 40;
    --v16;
  }
  while (v16);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100049858(uint64_t a1, unint64_t a2)
{
  return sub_10004C890(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ProcessingUnitDescriptor);
}

uint64_t sub_100049870(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  char v4 = a3;
  char v5 = a2;
  unint64_t v6 = a2 >> 8;
  *(_DWORD *)&unsigned char v27[8] = a4;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = a2 >> 24;
  unint64_t v20 = HIDWORD(a2);
  unint64_t v21 = HIWORD(a2);
  unint64_t v22 = HIBYTE(a2);
  unint64_t v23 = a3 >> 8;
  unint64_t v26 = a3 >> 40;
  *(void *)int v27 = a3;
  unsigned int v24 = a4 >> 8;
  int v25 = *(unsigned __int16 *)&v27[7];
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3OutputTerminalDescriptor(0);
  uint64_t v31 = v14;
  v27[0] = v5;
  v27[1] = v6;
  v27[2] = v7;
  v27[3] = v8;
  *(_WORD *)&v27[4] = v20;
  v27[6] = v21;
  v27[7] = v22;
  unsigned char v27[8] = v4;
  *(_DWORD *)&v27[9] = v23;
  __int16 v28 = v26;
  __int16 v29 = v25;
  __int16 v30 = v24;
  Mirror.init(reflecting:)();
  uint64_t v15 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_1000532F4(v15, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v18, (uint64_t)v27);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v27);
    v18 += 40;
    --v17;
  }
  while (v17);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100049A94(uint64_t a1, unint64_t a2)
{
  return sub_100049AAC(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3MixerUnitDescriptorPart2);
}

uint64_t sub_100049AAC(uint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  int v4 = a2;
  unint64_t v5 = HIDWORD(a2);
  uint64_t v6 = type metadata accessor for Mirror();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v18 = a3(0);
  int v16 = v4;
  __int16 v17 = v5;
  Mirror.init(reflecting:)();
  uint64_t v11 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_1000532F4(v11, v10);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v13 = v12[2];
  if (!v13) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v14 = (uint64_t)(v12 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v14, (uint64_t)&v16);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)&v16);
    v14 += 40;
    --v13;
  }
  while (v13);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100049C50(uint64_t a1, unint64_t a2)
{
  __int16 v2 = a2;
  unint64_t v3 = a2 >> 16;
  unint64_t v4 = a2 >> 24;
  unint64_t v5 = HIDWORD(a2);
  uint64_t v6 = type metadata accessor for Mirror();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3HighCapabilityDescriptor(0);
  uint64_t v21 = v11;
  __int16 v17 = v2;
  char v18 = v3;
  char v19 = v4;
  __int16 v20 = v5;
  Mirror.init(reflecting:)();
  uint64_t v12 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_1000532F4(v12, v10);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v14 = v13[2];
  if (!v14) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v15 = (uint64_t)(v13 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v15, (uint64_t)&v17);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)&v17);
    v15 += 40;
    --v14;
  }
  while (v14);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100049E04(uint64_t a1, unint64_t a2)
{
  return sub_10004C890(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2ProcessingUnitDescriptor);
}

uint64_t sub_100049E1C(uint64_t a1, unint64_t a2, unsigned int a3)
{
  char v3 = a3;
  char v4 = a2;
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = a2 >> 24;
  unint64_t v19 = HIDWORD(a2);
  unint64_t v20 = HIWORD(a2);
  unint64_t v21 = HIBYTE(a2);
  unsigned int v22 = HIBYTE(a3);
  unsigned int v23 = a3 >> 8;
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2OutputTerminalDescriptor(0);
  uint64_t v31 = v13;
  v24[0] = v4;
  v24[1] = v5;
  void v24[2] = v6;
  void v24[3] = v7;
  __int16 v25 = v19;
  char v26 = v20;
  char v27 = v21;
  char v28 = v3;
  __int16 v29 = v23;
  char v30 = v22;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000532F4(v14, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v16 = v15[2];
  if (!v16) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v17 = (uint64_t)(v15 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v17, (uint64_t)v24);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v24);
    v17 += 40;
    --v16;
  }
  while (v16);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004A020(uint64_t a1, unsigned int a2)
{
  return sub_10004CE8C(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2MixerUnitDescriptorPart3);
}

uint64_t sub_10004A038(uint64_t a1, unint64_t a2)
{
  char v2 = a2;
  unint64_t v3 = a2 >> 8;
  unint64_t v4 = a2 >> 40;
  uint64_t v5 = type metadata accessor for Mirror();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2MixerUnitDescriptorPart2(0);
  uint64_t v19 = v10;
  char v16 = v2;
  int v17 = v3;
  char v18 = v4;
  Mirror.init(reflecting:)();
  uint64_t v11 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_1000532F4(v11, v9);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v13 = v12[2];
  if (!v13) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v14 = (uint64_t)(v12 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v14, (uint64_t)&v16);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)&v16);
    v14 += 40;
    --v13;
  }
  while (v13);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004A1DC(uint64_t a1, unint64_t a2)
{
  return sub_10004C890(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1ProcessingUnitDescriptor);
}

uint64_t sub_10004A1F4(uint64_t a1, unint64_t a2, int a3)
{
  int v22 = a3;
  char v3 = a2;
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = a2 >> 24;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v20 = HIWORD(a2);
  unint64_t v21 = HIBYTE(a2);
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1OutputTerminalDescriptor(0);
  uint64_t v28 = v13;
  v23[0] = v3;
  v23[1] = v4;
  v23[2] = v5;
  v23[3] = v6;
  __int16 v24 = v7;
  char v25 = v20;
  char v26 = v21;
  char v27 = v22;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000532F4(v14, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v16 = v15[2];
  if (!v16) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v17 = (uint64_t)(v15 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v17, (uint64_t)v23);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v23);
    v17 += 40;
    --v16;
  }
  while (v16);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004A3D8(uint64_t a1, unsigned int a2)
{
  char v2 = a2;
  unsigned int v3 = a2 >> 8;
  unsigned int v4 = HIBYTE(a2);
  uint64_t v5 = type metadata accessor for Mirror();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1MixerUnitDescriptorPart2(0);
  uint64_t v19 = v10;
  char v16 = v2;
  __int16 v17 = v3;
  char v18 = v4;
  Mirror.init(reflecting:)();
  uint64_t v11 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_1000532F4(v11, v9);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v13 = v12[2];
  if (!v13) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v14 = (uint64_t)(v12 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v14, (uint64_t)&v16);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)&v16);
    v14 += 40;
    --v13;
  }
  while (v13);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004A57C(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  return sub_10004A594(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for ADC4InputTerminalDescriptor);
}

uint64_t sub_10004A594(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t (*a5)(void))
{
  __int16 v6 = a3;
  __int16 v7 = a2;
  *(void *)char v26 = a3;
  *(void *)&_WORD v26[8] = a4;
  unint64_t v8 = a2 >> 16;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v20 = HIWORD(a2);
  unint64_t v21 = a3 >> 16;
  int v22 = *(_DWORD *)&v26[6];
  unint64_t v23 = HIDWORD(a3);
  unint64_t v24 = a4 >> 16;
  unint64_t v25 = HIDWORD(a4);
  uint64_t v10 = type metadata accessor for Mirror();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v29 = a5(0);
  *(_WORD *)char v26 = v7;
  *(_WORD *)&v26[2] = v8;
  *(_WORD *)&v26[4] = v9;
  *(_WORD *)&_WORD v26[6] = v20;
  *(_WORD *)&_WORD v26[8] = v6;
  *(_WORD *)&v26[10] = v21;
  *(_WORD *)&v26[12] = v23;
  *(_DWORD *)&v26[14] = v22;
  __int16 v27 = v24;
  __int16 v28 = v25;
  Mirror.init(reflecting:)();
  uint64_t v15 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_bridgeObjectRetain();
  char v16 = sub_1000532F4(v15, v14);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v18, (uint64_t)v26);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v26);
    v18 += 40;
    --v17;
  }
  while (v17);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004A7AC()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unsigned int v4 = (char *)&v16[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AC7C(&qword_100128918);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000E8090;
  *(void *)(inited + 32) = 0xD000000000000011;
  *(void *)(inited + 40) = 0x80000001000E3680;
  v16[0] = sub_1000526CC(*(void *)(v0 + 12), *(void *)(v0 + 20), (uint64_t)sub_100052938, 0);
  sub_10000AC7C(&qword_100128920);
  sub_1000534CC();
  AnyHashable.init<A>(_:)();
  unint64_t v6 = sub_1000089A8(inited);
  type metadata accessor for ADC4ExtensionUnitDescriptor(0);
  v16[3] = v7;
  uint64_t v8 = swift_allocObject();
  v16[0] = v8;
  long long v9 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v8 + 32) = v9;
  *(_DWORD *)(v8 + 48) = *(_DWORD *)(v0 + 32);
  Mirror.init(reflecting:)();
  uint64_t v10 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_1000532F4(v10, v6);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v12 = v11[2];
  if (!v12) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v13 = (uint64_t)(v11 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v13, (uint64_t)v16);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v16);
    v13 += 40;
    --v12;
  }
  while (v12);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004AA1C(uint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  __int16 v4 = a2;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = HIDWORD(a2);
  unint64_t v7 = HIWORD(a2);
  unsigned int v20 = HIWORD(a3);
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4ClusterDescriptorHeader(0);
  uint64_t v22 = v13;
  v21[0] = v4;
  v21[1] = v5;
  _WORD v21[2] = v6;
  v21[3] = v7;
  v21[4] = v3;
  _WORD v21[5] = v20;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000532F4(v14, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v16 = v15[2];
  if (!v16) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v17 = (uint64_t)(v15 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v17, (uint64_t)v21);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v21);
    v17 += 40;
    --v16;
  }
  while (v16);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004ABE8(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  return sub_10004B4A4(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for ADC4ClockSelectorDescriptor);
}

uint64_t sub_10004AC00(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  __int16 v4 = a4;
  int v5 = a3;
  char v6 = a2;
  unint64_t v7 = a2 >> 8;
  unint64_t v8 = a2 >> 16;
  unint64_t v21 = a2 >> 24;
  unint64_t v22 = HIDWORD(a2);
  unint64_t v23 = HIWORD(a2);
  unint64_t v24 = HIBYTE(a2);
  unint64_t v25 = HIDWORD(a3);
  unint64_t v26 = HIWORD(a3);
  unsigned int v27 = HIWORD(a4);
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3InputTerminalDescriptor(0);
  uint64_t v37 = v14;
  v28[0] = v6;
  v28[1] = v7;
  v28[2] = v8;
  v28[3] = v21;
  __int16 v29 = v22;
  char v30 = v23;
  char v31 = v24;
  int v32 = v5;
  __int16 v33 = v25;
  __int16 v34 = v26;
  __int16 v35 = v4;
  __int16 v36 = v27;
  Mirror.init(reflecting:)();
  uint64_t v15 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_1000532F4(v15, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v18, (uint64_t)v28);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v28);
    v18 += 40;
    --v17;
  }
  while (v17);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004AE20(uint64_t a1, unint64_t a2)
{
  return sub_10004C890(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ExtensionUnitDescriptor);
}

uint64_t sub_10004AE38(uint64_t a1, unint64_t a2)
{
  __int16 v2 = a2;
  unint64_t v3 = a2 >> 16;
  unint64_t v4 = a2 >> 24;
  unint64_t v5 = HIDWORD(a2);
  unint64_t v6 = HIWORD(a2);
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ClusterDescriptorHeader(0);
  uint64_t v23 = v12;
  __int16 v18 = v2;
  char v19 = v3;
  char v20 = v4;
  __int16 v21 = v5;
  char v22 = v6;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1000532F4(v13, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v16, (uint64_t)&v18);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)&v18);
    v16 += 40;
    --v15;
  }
  while (v15);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004AFF4(uint64_t a1, unint64_t a2)
{
  return sub_10004CCA8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ClockSelectorDescriptor);
}

uint64_t sub_10004B00C(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  int v27 = a4;
  char v4 = a3;
  char v5 = a2;
  unint64_t v6 = a2 >> 8;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = a2 >> 24;
  unint64_t v21 = HIDWORD(a2);
  unint64_t v22 = HIWORD(a2);
  unint64_t v23 = HIBYTE(a2);
  unint64_t v24 = a3 >> 8;
  unint64_t v25 = a3 >> 40;
  unint64_t v26 = HIWORD(a3);
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC2InputTerminalDescriptor(0);
  uint64_t v37 = v14;
  v28[0] = v5;
  v28[1] = v6;
  v28[2] = v7;
  v28[3] = v8;
  __int16 v29 = v21;
  char v30 = v22;
  char v31 = v23;
  char v32 = v4;
  int v33 = v24;
  char v34 = v25;
  __int16 v35 = v26;
  char v36 = v27;
  Mirror.init(reflecting:)();
  uint64_t v15 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_1000532F4(v15, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v18, (uint64_t)v28);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v28);
    v18 += 40;
    --v17;
  }
  while (v17);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004B228(uint64_t a1, unint64_t a2)
{
  return sub_10004C890(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2ExtensionUnitDescriptor);
}

uint64_t sub_10004B240(uint64_t a1, unint64_t a2)
{
  return sub_10004CCA8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2ClockSelectorDescriptor);
}

uint64_t sub_10004B258(uint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  char v4 = a2;
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = a2 >> 24;
  unint64_t v19 = HIDWORD(a2);
  unint64_t v20 = HIWORD(a2);
  unint64_t v21 = HIBYTE(a2);
  unsigned int v22 = HIBYTE(a3);
  unsigned int v23 = HIWORD(a3);
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1InputTerminalDescriptor(0);
  uint64_t v31 = v13;
  v24[0] = v4;
  v24[1] = v5;
  void v24[2] = v6;
  void v24[3] = v7;
  __int16 v25 = v19;
  char v26 = v20;
  char v27 = v21;
  __int16 v28 = v3;
  char v29 = v23;
  char v30 = v22;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000532F4(v14, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v16 = v15[2];
  if (!v16) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v17 = (uint64_t)(v15 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v17, (uint64_t)v24);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v24);
    v17 += 40;
    --v16;
  }
  while (v16);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004B45C(uint64_t a1, unint64_t a2)
{
  return sub_10004C0C8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1FormatTypeIIIDescriptor);
}

uint64_t sub_10004B474(uint64_t a1, unint64_t a2)
{
  return sub_10004C890(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1ExtensionUnitDescriptor);
}

uint64_t sub_10004B48C(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  return sub_10004B4A4(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for ADC4SelectorUnitDescriptor);
}

uint64_t sub_10004B4A4(uint64_t a1, unint64_t a2, unint64_t a3, int a4, uint64_t (*a5)(void))
{
  int v23 = a4;
  __int16 v6 = a3;
  __int16 v7 = a2;
  unint64_t v8 = a2 >> 16;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v20 = HIWORD(a2);
  unint64_t v21 = a3 >> 16;
  unint64_t v22 = HIDWORD(a3);
  uint64_t v10 = type metadata accessor for Mirror();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v27 = a5(0);
  v24[0] = v7;
  v24[1] = v8;
  void v24[2] = v9;
  void v24[3] = v20;
  unsigned char v24[4] = v6;
  v24[5] = v21;
  int v25 = v22;
  __int16 v26 = v23;
  Mirror.init(reflecting:)();
  uint64_t v15 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_1000532F4(v15, v14);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v18, (uint64_t)v24);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v24);
    v18 += 40;
    --v17;
  }
  while (v17);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004B698(uint64_t a1, unsigned int a2)
{
  return sub_10004B6B0(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC4ClusterEndBlockSegment);
}

uint64_t sub_10004B6B0(uint64_t a1, unsigned int a2, uint64_t (*a3)(void))
{
  __int16 v4 = a2;
  unsigned int v5 = HIWORD(a2);
  uint64_t v6 = type metadata accessor for Mirror();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v17 = a3(0);
  v16[0] = v4;
  v16[1] = v5;
  Mirror.init(reflecting:)();
  uint64_t v11 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_1000532F4(v11, v10);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v13 = v12[2];
  if (!v13) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v14 = (uint64_t)(v12 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v14, (uint64_t)v16);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v16);
    v14 += 40;
    --v13;
  }
  while (v13);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004B854(uint64_t a1, unint64_t a2)
{
  return sub_10004CCA8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3SelectorUnitDescriptor);
}

uint64_t sub_10004B86C(uint64_t a1, unint64_t a2)
{
  return sub_10004CCA8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2SelectorUnitDescriptor);
}

uint64_t sub_10004B884(uint64_t a1, unint64_t a2)
{
  return sub_10004CCA8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1SelectorUnitDescriptor);
}

uint64_t sub_10004B89C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return sub_10004B8B4(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for ADC4FeatureUnitDescriptor);
}

uint64_t sub_10004B8B4(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t (*a4)(void))
{
  __int16 v5 = a3;
  __int16 v6 = a2;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v20 = HIWORD(a2);
  unint64_t v21 = a3 >> 16;
  unint64_t v22 = HIDWORD(a3);
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v24 = a4(0);
  v23[0] = v6;
  v23[1] = v7;
  v23[2] = v8;
  v23[3] = v20;
  unsigned char v23[4] = v5;
  v23[5] = v21;
  v23[6] = v22;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000532F4(v14, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v16 = v15[2];
  if (!v16) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v17 = (uint64_t)(v15 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v17, (uint64_t)v23);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v23);
    v17 += 40;
    --v16;
  }
  while (v16);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004BA9C(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  int v4 = a4;
  __int16 v5 = a3;
  __int16 v6 = a2;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v21 = HIWORD(a2);
  unint64_t v22 = a3 >> 16;
  unint64_t v23 = HIDWORD(a3);
  unint64_t v24 = HIWORD(a3);
  unint64_t v25 = HIDWORD(a4);
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4ClockSourceDescriptor(0);
  uint64_t v29 = v14;
  v26[0] = v6;
  v26[1] = v7;
  v26[2] = v8;
  void v26[3] = v21;
  v26[4] = v5;
  v26[5] = v22;
  _WORD v26[6] = v23;
  v26[7] = v24;
  int v27 = v4;
  __int16 v28 = v25;
  Mirror.init(reflecting:)();
  uint64_t v15 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_1000532F4(v15, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v18, (uint64_t)v26);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v26);
    v18 += 40;
    --v17;
  }
  while (v17);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004BCA0(uint64_t a1, unint64_t a2, int a3)
{
  int v20 = a3;
  char v3 = a2;
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = a2 >> 24;
  unint64_t v7 = HIDWORD(a2);
  unint64_t v19 = HIWORD(a2);
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3PowerDomainDescriptor(0);
  uint64_t v25 = v13;
  v21[0] = v3;
  v21[1] = v4;
  _WORD v21[2] = v5;
  v21[3] = v6;
  __int16 v22 = v7;
  __int16 v23 = v19;
  char v24 = v20;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000532F4(v14, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v16 = v15[2];
  if (!v16) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v17 = (uint64_t)(v15 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v17, (uint64_t)v21);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v21);
    v17 += 40;
    --v16;
  }
  while (v16);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004BE78(uint64_t a1, unint64_t a2)
{
  return sub_10004CCA8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3FeatureUnitDescriptor);
}

uint64_t sub_10004BE90(uint64_t a1, unint64_t a2, unsigned int a3)
{
  char v3 = a2;
  *(void *)__int16 v22 = a2;
  *(_DWORD *)&v22[8] = a3;
  unint64_t v4 = a2 >> 8;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = a2 >> 24;
  unint64_t v7 = HIDWORD(a2);
  unsigned int v20 = a3 >> 8;
  int v21 = *(_DWORD *)&v22[5];
  HIDWORD(v19) = HIWORD(a3);
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC3ClockSourceDescriptor(0);
  uint64_t v23 = v13;
  v22[0] = v3;
  v22[1] = v4;
  v22[2] = v5;
  void v22[3] = v6;
  v22[4] = v7;
  *(_DWORD *)&void v22[5] = v21;
  v22[9] = v20;
  *(_WORD *)&unsigned char v22[10] = WORD2(v19);
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000532F4(v14, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v16 = v15[2];
  if (!v16) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v17 = (uint64_t)(v15 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v17, (uint64_t)v22);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v22);
    v17 += 40;
    --v16;
  }
  while (v16);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004C080(uint64_t a1, unint64_t a2)
{
  return sub_10004CCA8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2FeatureUnitDescriptor);
}

uint64_t sub_10004C098(uint64_t a1, unint64_t a2)
{
  return sub_10004C0C8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2ClockSourceDescriptor);
}

uint64_t sub_10004C0B0(uint64_t a1, unint64_t a2)
{
  return sub_10004C0C8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1FormatTypeIDescriptor);
}

uint64_t sub_10004C0C8(uint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = a2 >> 24;
  unint64_t v18 = HIDWORD(a2);
  unint64_t v19 = a2 >> 40;
  unint64_t v20 = HIWORD(a2);
  unint64_t v21 = HIBYTE(a2);
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v23 = a3(0);
  v22[0] = v4;
  v22[1] = v5;
  v22[2] = v6;
  void v22[3] = v7;
  v22[4] = v18;
  void v22[5] = v19;
  v22[6] = v20;
  v22[7] = v21;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1000532F4(v13, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v16, (uint64_t)v22);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v22);
    v16 += 40;
    --v15;
  }
  while (v15);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004C2BC(uint64_t a1, unint64_t a2)
{
  char v2 = a2;
  unint64_t v3 = a2 >> 8;
  unint64_t v4 = a2 >> 16;
  unint64_t v5 = a2 >> 24;
  unint64_t v6 = HIDWORD(a2);
  unint64_t v19 = a2 >> 40;
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1FeatureUnitDescriptor(0);
  uint64_t v21 = v12;
  v20[0] = v2;
  v20[1] = v3;
  v20[2] = v4;
  unsigned char v20[3] = v5;
  v20[4] = v6;
  v20[5] = v19;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1000532F4(v13, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v16, (uint64_t)v20);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v20);
    v16 += 40;
    --v15;
  }
  while (v15);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004C488(uint64_t a1, unint64_t a2)
{
  char v2 = a2;
  unint64_t v3 = a2 >> 8;
  unint64_t v4 = a2 >> 16;
  unint64_t v5 = a2 >> 24;
  unint64_t v6 = HIDWORD(a2);
  unint64_t v19 = a2 >> 40;
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC1ASInterfaceDescriptor(0);
  uint64_t v22 = v12;
  v20[0] = v2;
  v20[1] = v3;
  v20[2] = v4;
  unsigned char v20[3] = v5;
  v20[4] = v6;
  __int16 v21 = v19;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1000532F4(v13, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v16, (uint64_t)v20);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v20);
    v16 += 40;
    --v15;
  }
  while (v15);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004C654(uint64_t a1, unint64_t a2, unint64_t a3)
{
  return sub_10004C66C(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for ADC4EffectUnitDescriptor);
}

uint64_t sub_10004C66C(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t (*a4)(void))
{
  __int16 v5 = a3;
  __int16 v6 = a2;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v19 = HIWORD(a2);
  unint64_t v20 = a3 >> 16;
  unint64_t v21 = HIDWORD(a3);
  unint64_t v22 = HIWORD(a3);
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v24 = a4(0);
  v23[0] = v6;
  v23[1] = v7;
  v23[2] = v8;
  v23[3] = v19;
  unsigned char v23[4] = v5;
  v23[5] = v20;
  v23[6] = v21;
  v23[7] = v22;
  Mirror.init(reflecting:)();
  uint64_t v14 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1000532F4(v14, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v16 = v15[2];
  if (!v16) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v17 = (uint64_t)(v15 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v17, (uint64_t)v23);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v23);
    v17 += 40;
    --v16;
  }
  while (v16);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004C860(uint64_t a1, unint64_t a2)
{
  return sub_10004C890(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3EffectUnitDescriptor);
}

uint64_t sub_10004C878(uint64_t a1, unint64_t a2)
{
  return sub_10004C890(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2EffectUnitDescriptor);
}

uint64_t sub_10004C890(uint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = a2 >> 24;
  unint64_t v18 = HIDWORD(a2);
  unint64_t v19 = HIWORD(a2);
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v23 = a3(0);
  v20[0] = v4;
  v20[1] = v5;
  v20[2] = v6;
  unsigned char v20[3] = v7;
  __int16 v21 = v18;
  char v22 = v19;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1000532F4(v13, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v16, (uint64_t)v20);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v20);
    v16 += 40;
    --v15;
  }
  while (v15);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004CA68(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  __int16 v4 = a4;
  __int16 v5 = a3;
  __int16 v6 = a2;
  unint64_t v7 = a2 >> 16;
  unint64_t v8 = HIDWORD(a2);
  unint64_t v20 = HIWORD(a2);
  unint64_t v21 = a3 >> 16;
  unint64_t v22 = HIDWORD(a3);
  unsigned int v23 = HIWORD(a4);
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  type metadata accessor for ADC4MixerUnitDescriptor(0);
  uint64_t v28 = v14;
  v24[0] = v6;
  v24[1] = v7;
  void v24[2] = v8;
  void v24[3] = v20;
  unsigned char v24[4] = v5;
  v24[5] = v21;
  int v25 = v22;
  __int16 v26 = v4;
  __int16 v27 = v23;
  Mirror.init(reflecting:)();
  uint64_t v15 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_1000532F4(v15, v13);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v17 = v16[2];
  if (!v17) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v18 = (uint64_t)(v16 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v18, (uint64_t)v24);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v24);
    v18 += 40;
    --v17;
  }
  while (v17);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004CC60(uint64_t a1, unint64_t a2)
{
  return sub_10004CCA8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3MixerUnitDescriptor);
}

uint64_t sub_10004CC78(uint64_t a1, unint64_t a2)
{
  return sub_10004CCA8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC2MixerUnitDescriptor);
}

uint64_t sub_10004CC90(uint64_t a1, unint64_t a2)
{
  return sub_10004CCA8(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC1MixerUnitDescriptor);
}

uint64_t sub_10004CCA8(uint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  unint64_t v5 = a2 >> 8;
  unint64_t v6 = a2 >> 16;
  unint64_t v7 = a2 >> 24;
  unint64_t v19 = HIDWORD(a2);
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v21 = a3(0);
  v20[0] = v4;
  v20[1] = v5;
  v20[2] = v6;
  unsigned char v20[3] = v7;
  unsigned char v20[4] = v19;
  Mirror.init(reflecting:)();
  uint64_t v13 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1000532F4(v13, v12);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v15 = v14[2];
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = (uint64_t)(v14 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v16, (uint64_t)v20);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v20);
    v16 += 40;
    --v15;
  }
  while (v15);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004CE74(uint64_t a1, unsigned int a2)
{
  return sub_10004CE8C(a1, a2, (uint64_t (*)(void))type metadata accessor for IOUSBDescriptorHeader);
}

uint64_t sub_10004CE8C(uint64_t a1, unsigned int a2, uint64_t (*a3)(void))
{
  char v4 = a2;
  unsigned int v5 = a2 >> 8;
  uint64_t v6 = type metadata accessor for Mirror();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v10 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v17 = a3(0);
  v16[0] = v4;
  v16[1] = v5;
  Mirror.init(reflecting:)();
  uint64_t v11 = Mirror.children.getter();
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_1000532F4(v11, v10);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v13 = v12[2];
  if (!v13) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v14 = (uint64_t)(v12 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v14, (uint64_t)v16);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v16);
    v14 += 40;
    --v13;
  }
  while (v13);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004D030(uint64_t a1, unsigned int a2)
{
  return sub_10004D048(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ClusterEndSegment);
}

uint64_t sub_10004D048(uint64_t a1, unsigned int a2, uint64_t (*a3)(void))
{
  __int16 v4 = a2;
  unsigned int v5 = HIWORD(a2);
  uint64_t v6 = type metadata accessor for Mirror();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v18 = a3(0);
  __int16 v16 = v4;
  char v17 = v5;
  Mirror.init(reflecting:)();
  uint64_t v11 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_1000532F4(v11, v10);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v13 = v12[2];
  if (!v13) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v14 = (uint64_t)(v12 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v14, (uint64_t)&v16);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)&v16);
    v14 += 40;
    --v13;
  }
  while (v13);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004D1EC(uint64_t a1, unint64_t a2)
{
  return sub_10004D204(a1, a2, (uint64_t (*)(void))type metadata accessor for ADC3ClusterClusterDescriptionSegment);
}

uint64_t sub_10004D204(uint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  __int16 v4 = a2;
  unint64_t v5 = a2 >> 16;
  unint64_t v6 = a2 >> 24;
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v20 = a3(0);
  __int16 v17 = v4;
  char v18 = v5;
  __int16 v19 = v6;
  Mirror.init(reflecting:)();
  uint64_t v12 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_1000532F4(v12, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v14 = v13[2];
  if (!v14) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v15 = (uint64_t)(v13 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v15, (uint64_t)&v17);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)&v17);
    v15 += 40;
    --v14;
  }
  while (v14);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004D3B8()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  __int16 v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  v14[3] = &type metadata for MixerUnit;
  uint64_t v6 = swift_allocObject();
  v14[0] = v6;
  long long v7 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v6 + 64) = v7;
  *(_OWORD *)(v6 + 80) = *(_OWORD *)(v0 + 64);
  *(void *)(v6 + 96) = *(void *)(v0 + 80);
  long long v8 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v6 + 32) = v8;
  sub_100053ED4(v0);
  Mirror.init(reflecting:)();
  uint64_t v9 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_1000532F4(v9, v5);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v11 = v10[2];
  if (!v11) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v12 = (uint64_t)(v10 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v12, (uint64_t)v14);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v14);
    v12 += 40;
    --v11;
  }
  while (v11);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004D57C()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  __int16 v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  v14[3] = &type metadata for SampleRateConverter;
  uint64_t v6 = swift_allocObject();
  v14[0] = v6;
  long long v7 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v6 + 64) = v7;
  *(void *)(v6 + 80) = *(void *)(v0 + 64);
  long long v8 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v6 + 32) = v8;
  sub_100053CCC(v0);
  Mirror.init(reflecting:)();
  uint64_t v9 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_1000532F4(v9, v5);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v11 = v10[2];
  if (!v11) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v12 = (uint64_t)(v10 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v12, (uint64_t)v14);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v14);
    v12 += 40;
    --v11;
  }
  while (v11);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004D738()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  __int16 v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  void v15[3] = &type metadata for ControlInterface;
  uint64_t v6 = swift_allocObject();
  v15[0] = v6;
  long long v7 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v6 + 80) = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v6 + 96) = v7;
  *(_OWORD *)(v6 + 112) = *(_OWORD *)(v0 + 96);
  *(void *)(v6 + 128) = *(void *)(v0 + 112);
  long long v8 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v6 + 32) = v8;
  long long v9 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v6 + 64) = v9;
  sub_100035ECC((void *)v0);
  Mirror.init(reflecting:)();
  uint64_t v10 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_1000532F4(v10, v5);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v12 = v11[2];
  if (!v12) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v13 = (uint64_t)(v11 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v13, (uint64_t)v15);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v15);
    v13 += 40;
    --v12;
  }
  while (v12);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004D904()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  __int16 v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  void v13[3] = &type metadata for ClockMultiplier;
  uint64_t v6 = swift_allocObject();
  v13[0] = v6;
  long long v7 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(v0 + 32);
  *(_DWORD *)(v6 + 64) = *(_DWORD *)(v0 + 48);
  sub_100053B64(v0);
  Mirror.init(reflecting:)();
  uint64_t v8 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_bridgeObjectRetain();
  long long v9 = sub_1000532F4(v8, v5);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v10 = v9[2];
  if (!v10) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v11 = (uint64_t)(v9 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v11, (uint64_t)v13);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v13);
    v11 += 40;
    --v10;
  }
  while (v10);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004DAC0()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  __int16 v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  v14[3] = &type metadata for ProcessingUnit;
  uint64_t v6 = (_OWORD *)swift_allocObject();
  v14[0] = v6;
  long long v7 = v0[3];
  v6[3] = v0[2];
  v6[4] = v7;
  v6[5] = v0[4];
  long long v8 = v0[1];
  v6[1] = *v0;
  v6[2] = v8;
  sub_100053D48((uint64_t)v0);
  Mirror.init(reflecting:)();
  uint64_t v9 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_1000532F4(v9, v5);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v11 = v10[2];
  if (!v11) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v12 = (uint64_t)(v10 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v12, (uint64_t)v14);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v14);
    v12 += 40;
    --v11;
  }
  while (v11);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004DC7C(uint64_t a1)
{
  return sub_10004DE90(a1, (uint64_t)&type metadata for OutputTerminal, (uint64_t)&unk_100118D10, (void (*)(_OWORD *))sub_100053FF8);
}

uint64_t sub_10004DCA4()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  __int16 v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  void v15[3] = &type metadata for InputTerminal;
  uint64_t v6 = swift_allocObject();
  v15[0] = v6;
  long long v7 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v6 + 80) = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v6 + 96) = v7;
  *(void *)(v6 + 112) = *(void *)(v0 + 96);
  long long v8 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v6 + 32) = v8;
  long long v9 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v6 + 64) = v9;
  sub_100054090(v0);
  Mirror.init(reflecting:)();
  uint64_t v10 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_1000532F4(v10, v5);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v12 = v11[2];
  if (!v12) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v13 = (uint64_t)(v11 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v13, (uint64_t)v15);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v15);
    v13 += 40;
    --v12;
  }
  while (v12);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004DE68(uint64_t a1)
{
  return sub_10004DE90(a1, (uint64_t)&type metadata for ExtensionUnit, (uint64_t)&unk_100118C70, (void (*)(_OWORD *))sub_100053E2C);
}

uint64_t sub_10004DE90(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_OWORD *))
{
  uint64_t v7 = type metadata accessor for Mirror();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  v21[3] = a2;
  uint64_t v12 = (_OWORD *)swift_allocObject();
  v21[0] = v12;
  long long v13 = v4[3];
  uint64_t v12[3] = v4[2];
  v12[4] = v13;
  long long v14 = v4[5];
  void v12[5] = v4[4];
  v12[6] = v14;
  long long v15 = v4[1];
  v12[1] = *v4;
  v12[2] = v15;
  a4(v4);
  Mirror.init(reflecting:)();
  uint64_t v16 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRetain();
  __int16 v17 = sub_1000532F4(v16, v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v18 = v17[2];
  if (!v18) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v19 = (uint64_t)(v17 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v19, (uint64_t)v21);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v21);
    v19 += 40;
    --v18;
  }
  while (v18);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004E060()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  __int16 v4 = (char *)&v14[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  v14[3] = &type metadata for ClockSelector;
  uint64_t v6 = swift_allocObject();
  v14[0] = v6;
  sub_10005415C(v0 + 32, (uint64_t)v17, &qword_1001288F0);
  uint64_t v16 = *(void *)(v0 + 40);
  sub_10005415C(v0 + 48, (uint64_t)v15, &qword_100128938);
  long long v7 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(v0 + 32);
  *(void *)(v6 + 64) = *(void *)(v0 + 48);
  sub_100053BD8((uint64_t)v17);
  sub_100053BD8((uint64_t)&v16);
  sub_100053BD8((uint64_t)v15);
  Mirror.init(reflecting:)();
  uint64_t v8 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_1000532F4(v8, v5);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v10 = v9[2];
  if (!v10) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v11 = (uint64_t)(v9 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v11, (uint64_t)v14);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v14);
    v11 += 40;
    --v10;
  }
  while (v10);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004E268(uint64_t a1)
{
  return sub_10004E27C(a1, (uint64_t)&type metadata for SelectorUnit);
}

uint64_t sub_10004E27C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  long long v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  v17[3] = a2;
  uint64_t v9 = swift_allocObject();
  v17[0] = v9;
  long long v10 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v9 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v9 + 64) = v10;
  *(void *)(v9 + 80) = *(void *)(v2 + 64);
  long long v11 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v9 + 32) = v11;
  sub_100053F70(v2);
  Mirror.init(reflecting:)();
  uint64_t v12 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRetain();
  long long v13 = sub_1000532F4(v12, v8);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v14 = v13[2];
  if (!v14) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v15 = (uint64_t)(v13 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v15, (uint64_t)v17);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v17);
    v15 += 40;
    --v14;
  }
  while (v14);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004E43C()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  void v13[3] = &type metadata for PowerDomain;
  uint64_t v6 = (_OWORD *)swift_allocObject();
  v13[0] = v6;
  sub_10005415C(v0 + 32, (uint64_t)v15, &qword_1001288F0);
  uint64_t v14 = *(void *)(v0 + 40);
  long long v7 = *(_OWORD *)(v0 + 16);
  v6[1] = *(_OWORD *)v0;
  v6[2] = v7;
  v6[3] = *(_OWORD *)(v0 + 32);
  sub_100053BD8((uint64_t)v15);
  sub_100053BD8((uint64_t)&v14);
  Mirror.init(reflecting:)();
  uint64_t v8 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_1000532F4(v8, v5);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v10 = v9[2];
  if (!v10) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v11 = (uint64_t)(v9 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v11, (uint64_t)v13);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v13);
    v11 += 40;
    --v10;
  }
  while (v10);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004E620(uint64_t a1)
{
  return sub_10004E27C(a1, (uint64_t)&type metadata for FeatureUnit);
}

uint64_t sub_10004E634()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  v14[3] = &type metadata for ClockSource;
  uint64_t v6 = (_OWORD *)swift_allocObject();
  v14[0] = v6;
  long long v7 = v0[1];
  v6[1] = *v0;
  v6[2] = v7;
  long long v8 = v0[3];
  v6[3] = v0[2];
  v6[4] = v8;
  sub_100053C0C((uint64_t)v0);
  Mirror.init(reflecting:)();
  uint64_t v9 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_1000532F4(v9, v5);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v11 = v10[2];
  if (!v11) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v12 = (uint64_t)(v10 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v12, (uint64_t)v14);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v14);
    v12 += 40;
    --v11;
  }
  while (v11);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10004E7E8()
{
  uint64_t v1 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
  v14[3] = &type metadata for EffectUnit;
  uint64_t v6 = (_OWORD *)swift_allocObject();
  v14[0] = v6;
  uint64_t v16 = *(void *)(v0 + 48);
  sub_10005415C(v0 + 56, (uint64_t)v15, &qword_1001288F0);
  long long v7 = *(_OWORD *)(v0 + 16);
  v6[1] = *(_OWORD *)v0;
  v6[2] = v7;
  long long v8 = *(_OWORD *)(v0 + 48);
  v6[3] = *(_OWORD *)(v0 + 32);
  v6[4] = v8;
  sub_100053BD8((uint64_t)&v16);
  sub_100053BD8((uint64_t)v15);
  Mirror.init(reflecting:)();
  uint64_t v9 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_1000532F4(v9, v5);
  swift_release();
  swift_bridgeObjectRelease_n();
  uint64_t v11 = v10[2];
  if (!v11) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v12 = (uint64_t)(v10 + 4);
  swift_bridgeObjectRetain();
  do
  {
    sub_10001AB28(v12, (uint64_t)v14);
    AnyHashable.hash(into:)();
    sub_10001A174((uint64_t)v14);
    v12 += 40;
    --v11;
  }
  while (v11);
  return swift_bridgeObjectRelease_n();
}

uint64_t StreamingAltInterface.interfaceNumber.getter()
{
  return *(unsigned __int8 *)(*(void *)v0 + 2);
}

uint64_t StreamingInterface.altSettings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StreamingInterface.otherStreamHasImplicit.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t ControlInterface.hasLatencyControl.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t StreamingInterface.exceptionList.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ControlInterface.exceptionList.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*ControlInterface.exceptionList.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

uint64_t ControlInterface.interruptEP.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10000CF08(v1 + 40, a1, &qword_1001288E8);
}

uint64_t ControlInterface.interruptEP.setter(uint64_t a1)
{
  return sub_1000541D4(a1, v1 + 40, &qword_1001288E8);
}

uint64_t (*ControlInterface.interruptEP.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

uint64_t StreamingInterface.interfaceProtocol.getter()
{
  return *(unsigned __int8 *)(*(void *)v0 + 7);
}

uint64_t ControlInterface.highestExceptionLevel.getter()
{
  sub_10005415C(v0 + 32, (uint64_t)v20, &qword_1001288F0);
  sub_10005415C((uint64_t)v20, (uint64_t)&v21, &qword_1001288F0);
  if (v21 && (uint64_t v1 = *(void *)(v21 + 16)) != 0)
  {
    uint64_t v2 = 0;
    uint64_t v3 = (unsigned __int8 *)(v21 + 32);
    do
    {
      int v5 = *v3++;
      int v4 = v5;
      if (v5 == 14 || v4 == 60 || v4 == 59)
      {
        if (!v2) {
          uint64_t v2 = 1;
        }
      }
      else if (v2 < 2)
      {
        if (v4 == 14) {
          uint64_t v2 = 1;
        }
        else {
          uint64_t v2 = 2;
        }
      }
      --v1;
    }
    while (v1);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v6 = *(void *)(v0 + 8);
  uint64_t v19 = v6;
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = v6 + 32;
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v7; ++i)
    {
      uint64_t v10 = (void *)(v8 + 40 * i);
      uint64_t v11 = v10[3];
      uint64_t v12 = v10[4];
      sub_10001A974(v10, v11);
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 40))(v11, v12);
      if (v13)
      {
        uint64_t v14 = *(void *)(v13 + 16);
        if (v14)
        {
          uint64_t v15 = (unsigned __int8 *)(v13 + 32);
          do
          {
            int v17 = *v15++;
            int v16 = v17;
            if (v17 == 14 || v16 == 60 || v16 == 59)
            {
              if (!v2) {
                uint64_t v2 = 1;
              }
            }
            else if (v2 < 2)
            {
              if (v16 == 14) {
                uint64_t v2 = 1;
              }
              else {
                uint64_t v2 = 2;
              }
            }
            --v14;
          }
          while (v14);
        }
        swift_bridgeObjectRelease();
      }
    }
    sub_10004EC5C((uint64_t)&v19);
  }
  return v2;
}

uint64_t sub_10004EC5C(uint64_t a1)
{
  return a1;
}

void *sub_10004EC88(uint64_t a1)
{
  if (*(void *)(*(void *)(v1 + 8) + 16))
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v4 = 26;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0xE000000000000000;
    *(void *)(v4 + 24) = 0xD00000000000001DLL;
    *(void *)(v4 + 32) = 0x80000001000E3700;
    *(void *)(v4 + 40) = 0xD000000000000020;
    *(void *)(v4 + 48) = 0x80000001000E3720;
    uint64_t v5 = 172;
LABEL_3:
    *(void *)(v4 + 56) = v5;
    swift_willThrow();
    return v3;
  }
  uint64_t v7 = v1;
  uint64_t v8 = *(void *)(v1 + 24);
  if (!v8)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v4 = 26;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0xE000000000000000;
    *(void *)(v4 + 24) = 0xD00000000000001DLL;
    *(void *)(v4 + 32) = 0x80000001000E3700;
    *(void *)(v4 + 40) = 0xD000000000000020;
    *(void *)(v4 + 48) = 0x80000001000E3720;
    uint64_t v5 = 173;
    goto LABEL_3;
  }
  uint64_t v9 = v2;
  uint64_t v26 = *(void *)(v8 + 16);
  if (!v26) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v11 = (void *)(a1 + OBJC_IVAR____TtC9AUASDCore9USBDevice_hrlDescriptorData);
  swift_bridgeObjectRetain();
  uint64_t v12 = 0;
  uint64_t v3 = _swiftEmptyArrayStorage;
  uint64_t v21 = v8;
  while (1)
  {
    sub_1000370E0(*(_WORD *)(v8 + 2 * v12 + 32), a1, v7);
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v3;
    }
    uint64_t v14 = v13;
    swift_beginAccess();
    id v15 = v14;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    id v16 = v15;
    int v17 = (unsigned char *)sub_10008DF1C((uint64_t)[v16 bytes]);
    sub_100088794(v17, v18, (uint64_t)v24);
    uint64_t v9 = 0;
    if (v25) {
      break;
    }

    sub_10001A918((uint64_t)v24, &qword_100128940);
LABEL_9:
    if (v26 == ++v12)
    {
      swift_bridgeObjectRelease();
      return v3;
    }
  }
  uint64_t result = (void *)sub_10000CF08((uint64_t)v24, (uint64_t)&v22, &qword_100128940);
  if (v23)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = sub_10005944C(0, v3[2] + 1, 1, v3);
    }
    unint64_t v20 = v3[2];
    unint64_t v19 = v3[3];
    if (v20 >= v19 >> 1) {
      uint64_t v3 = sub_10005944C((void *)(v19 > 1), v20 + 1, 1, v3);
    }
    v3[2] = v20 + 1;
    sub_10000CF6C(&v22, (uint64_t)&v3[5 * v20 + 4]);

    sub_10001A918((uint64_t)v24, &qword_100128940);
    uint64_t v8 = v21;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_10004EFF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v14 = v5;
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = v5 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_10001A9B8(v7, (uint64_t)&v11);
      uint64_t v8 = v12;
      uint64_t v9 = v13;
      sub_10001A974(&v11, v12);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9) == a1) {
        break;
      }
      sub_10001ABC4((uint64_t)&v11);
      v7 += 40;
      if (!--v6) {
        goto LABEL_7;
      }
    }
    sub_10000CF6C(&v11, a2);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return sub_10004EC5C((uint64_t)&v14);
}

uint64_t sub_10004F0D0(uint64_t a1)
{
  sub_10004EFF0(a1, (uint64_t)v6);
  if (!v7)
  {
    sub_10001A918((uint64_t)v6, &qword_100128940);
LABEL_5:
    sub_10004EFF0(a1, (uint64_t)v6);
    if (v7)
    {
      sub_10000AC7C(&qword_100128948);
      if ((swift_dynamicCast() & 1) == 0) {
        return 0;
      }
      if (*(void *)(v5 + 16) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
      sub_10004EFF0(*(void *)(v5 + 32), (uint64_t)v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v7)
      {
        if (swift_dynamicCast()) {
          goto LABEL_3;
        }
        return 0;
      }
    }
    sub_10001A918((uint64_t)v6, &qword_100128940);
    return 0;
  }
  sub_10000AC7C(&qword_100128948);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

void *sub_10004F250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a3;
  uint64_t v295 = *(void *)(a3 + 8);
  uint64_t v296 = v6;
  int v294 = *(unsigned __int8 *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  int v8 = *(unsigned __int8 *)(a3 + 34);
  int v9 = *(unsigned __int16 *)(a3 + 32);
  uint64_t v292 = *(void *)(a3 + 40);
  uint64_t v293 = v7;
  char v10 = *(unsigned char *)(a3 + 48);
  uint64_t v11 = *(void *)(a3 + 56);
  uint64_t v290 = *(void *)(a3 + 64);
  uint64_t v291 = v11;
  uint64_t v289 = *(void *)(a3 + 72);
  LODWORD(v11) = *(unsigned __int8 *)(a3 + 80);
  int v287 = *(unsigned __int8 *)(a3 + 81);
  int v288 = v11;
  uint64_t v311 = a3;
  uint64_t v286 = *(void *)(a3 + 88);
  uint64_t v299 = type metadata accessor for Mirror();
  uint64_t v12 = *(void *)(v299 - 8);
  __chkstk_darwin(v299);
  v298 = (char *)&v274 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9B8(a1, (uint64_t)&v333);
  uint64_t v316 = a2;
  v314 = v3;
  if (*((void *)v3 + 4))
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = swift_bridgeObjectRetain();
    id v15 = (void *)sub_100053280(v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    id v15 = &_swiftEmptySetSingleton;
  }
  v315 = v15;
  sub_10000CF08((uint64_t)&v333, (uint64_t)&v317, &qword_100127EB0);
  if (!*((void *)&v318 + 1))
  {
    v306 = _swiftEmptyArrayStorage;
    goto LABEL_240;
  }
  int v284 = v9 | (v8 << 16);
  v297 = (void (**)(char *, uint64_t))(v12 + 8);
  long long v300 = xmmword_1000E8090;
  unint64_t v304 = (unint64_t)"with a circular reference";
  v277 = (void *)0x80000001000E3780;
  uint64_t v278 = 0x80000001000E3750;
  unint64_t v305 = (unint64_t)"createADC4entities(onDevice:)";
  uint64_t v276 = 0x80000001000E3720;
  v280 = (void *)0x80000001000E3810;
  v302 = (void *)0x80000001000E3860;
  int v283 = v10 & 1;
  uint64_t v274 = 0x80000001000E38B0;
  uint64_t v275 = 0x80000001000E38E0;
  uint64_t v282 = 0x80000001000E3940;
  unint64_t v285 = (unint64_t)"reamEntities:from:)";
  v279 = (void *)0x80000001000E37C0;
  v306 = _swiftEmptyArrayStorage;
  while (1)
  {
    sub_10001A918((uint64_t)&v317, &qword_100127EB0);
    sub_10000CF08((uint64_t)&v333, (uint64_t)&v330, &qword_100127EB0);
    if (*((void *)&v331 + 1))
    {
      uint64_t v16 = sub_10000AC7C(&qword_100127EC0);
      if (swift_dynamicCast())
      {
        v301 = (void *)v16;
        long long v303 = v317;
        LODWORD(v307) = v318;
        uint64_t v17 = *((void *)&v318 + 1);
        LODWORD(v312) = LOWORD(v319[0]);
        char v18 = BYTE2(v319[0]);
        uint64_t v19 = *((void *)&v319[0] + 1);
        int v20 = LOBYTE(v319[1]);
        uint64_t v21 = *(void *)&v320[0];
        *(void *)&long long v310 = *((void *)&v319[1] + 1);
        *(void *)&long long v309 = *((void *)&v320[0] + 1);
        LODWORD(v308) = LOWORD(v320[1]);
        uint64_t v22 = *((void *)&v320[1] + 1);
        unint64_t v23 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
        *((void *)&v318 + 1) = &type metadata for OutputTerminal;
        uint64_t v24 = swift_allocObject();
        *(void *)&long long v317 = v24;
        uint64_t v25 = *((void *)&v303 + 1);
        *(void *)(v24 + 16) = v303;
        *(void *)(v24 + 24) = v25;
        *(unsigned char *)(v24 + 32) = v307;
        *(void *)(v24 + 40) = v17;
        *(unsigned char *)(v24 + 50) = v18;
        *(_WORD *)(v24 + 48) = v312;
        *(void *)(v24 + 56) = v19;
        LODWORD(v312) = v20;
        *(unsigned char *)(v24 + 64) = v20;
        *(void *)(v24 + 72) = v310;
        *(void *)(v24 + 80) = v21;
        *(void *)(v24 + 88) = v309;
        *(_WORD *)(v24 + 96) = v308;
        *(void *)(v24 + 104) = v22;
        *(void *)&long long v309 = v22;
        swift_bridgeObjectRetain();
        *(void *)&long long v310 = v21;
        swift_bridgeObjectRetain();
        uint64_t v26 = v298;
        Mirror.init(reflecting:)();
        uint64_t v27 = Mirror.children.getter();
        uint64_t v28 = *v297;
        uint64_t v29 = v299;
        (*v297)(v26, v299);
        swift_bridgeObjectRetain();
        uint64_t v30 = v313;
        uint64_t v31 = sub_1000532F4(v27, v23);
        uint64_t v313 = v30;
        swift_release();
        swift_bridgeObjectRelease_n();
        unint64_t v32 = sub_1000089A8((uint64_t)_swiftEmptyArrayStorage);
        *((void *)&v318 + 1) = &type metadata for OutputTerminal;
        int v33 = (_OWORD *)swift_allocObject();
        *(void *)&long long v317 = v33;
        char v34 = (_OWORD *)v311;
        long long v35 = *(_OWORD *)(v311 + 48);
        v33[3] = *(_OWORD *)(v311 + 32);
        v33[4] = v35;
        long long v36 = v34[5];
        v33[5] = v34[4];
        v33[6] = v36;
        long long v37 = v34[1];
        v33[1] = *v34;
        void v33[2] = v37;
        sub_100053FF8((uint64_t)v34);
        Mirror.init(reflecting:)();
        uint64_t v38 = Mirror.children.getter();
        v28(v26, v29);
        swift_bridgeObjectRetain();
        uint64_t v39 = v313;
        __int16 v40 = sub_1000532F4(v38, v32);
        swift_release();
        swift_bridgeObjectRelease_n();
        LOBYTE(v38) = sub_100046910((uint64_t)v31, (uint64_t)v40);
        uint64_t v313 = v39;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v38 & 1) == 0) {
          sub_10002E81C(0xD000000000000017, v282, 0xD000000000000033, (void *)(v304 | 0x8000000000000000), 0xD000000000000020, v305 | 0x8000000000000000, 226);
        }
        if (v312) {
          goto LABEL_277;
        }
        uint64_t v41 = *((void *)v314 + 1);
        uint64_t v42 = *(void *)(v41 + 16);
        if (v42)
        {
          uint64_t v43 = v41 + 32;
          swift_bridgeObjectRetain();
          while (1)
          {
            sub_10001A9B8(v43, (uint64_t)&v317);
            uint64_t v44 = *((void *)&v318 + 1);
            uint64_t v45 = *(void *)&v319[0];
            sub_10001A974(&v317, *((uint64_t *)&v318 + 1));
            if ((*(uint64_t (**)(uint64_t, uint64_t))(v45 + 16))(v44, v45) == v19) {
              break;
            }
            sub_10001ABC4((uint64_t)&v317);
            v43 += 40;
            if (!--v42) {
              goto LABEL_119;
            }
          }
          sub_10000CF6C(&v317, (uint64_t)&v330);
        }
        else
        {
          swift_bridgeObjectRetain();
LABEL_119:
          uint64_t v332 = 0;
          long long v330 = 0u;
          long long v331 = 0u;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*((void *)&v331 + 1))
        {
          sub_10000AC7C(&qword_100128948);
          if ((swift_dynamicCast() & 1) == 0)
          {
            *(void *)&v319[0] = 0;
            long long v317 = 0u;
            long long v318 = 0u;
          }
        }
        else
        {
          sub_10001A918((uint64_t)&v330, &qword_100128940);
          long long v317 = 0u;
          long long v318 = 0u;
          *(void *)&v319[0] = 0;
        }
LABEL_7:
        sub_1000541D4((uint64_t)&v317, (uint64_t)&v333, &qword_100127EB0);
        goto LABEL_8;
      }
    }
    else
    {
      sub_10001A918((uint64_t)&v330, &qword_100127EB0);
    }
    sub_10000CF08((uint64_t)&v333, (uint64_t)&v330, &qword_100127EB0);
    if (!*((void *)&v331 + 1)) {
      break;
    }
    sub_10000AC7C(&qword_100127EC0);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_28;
    }
    long long v46 = v317;
    char v47 = v318;
    uint64_t v48 = *((void *)&v318 + 1);
    int v49 = BYTE2(v319[0]);
    int v50 = LOWORD(v319[0]);
    long long v51 = *(_OWORD *)((char *)v319 + 8);
    char v52 = BYTE8(v319[1]);
    char v53 = BYTE9(v319[1]);
    uint64_t v54 = *(void *)&v320[0];
    long long v55 = *(_OWORD *)((char *)v320 + 8);
    long long v56 = *(_OWORD *)((char *)&v320[1] + 8);
    uint64_t v57 = *(void *)(v311 + 24);
    if (*((void *)&v318 + 1) != v57)
    {
      long long v312 = v317;
      long long v309 = *(_OWORD *)((char *)v320 + 8);
      long long v310 = *(_OWORD *)((char *)v319 + 8);
      long long v58 = v314[5];
      long long v340 = v314[4];
      long long v341 = v58;
      long long v342 = v314[6];
      uint64_t v343 = *((void *)v314 + 14);
      long long v59 = v314[1];
      long long v336 = *v314;
      long long v337 = v59;
      long long v60 = v314[3];
      long long v338 = v314[2];
      long long v339 = v60;
      uint64_t v61 = *(void *)&v320[0];
      long long v308 = *(_OWORD *)((char *)&v320[1] + 8);
      char v62 = v318;
      char v63 = BYTE8(v319[1]);
      LODWORD(v307) = BYTE9(v319[1]);
      uint64_t v64 = sub_10004F0D0(*((uint64_t *)&v318 + 1));
      char v53 = v307;
      char v52 = v63;
      char v47 = v62;
      long long v56 = v308;
      long long v55 = v309;
      long long v51 = v310;
      long long v46 = v312;
      uint64_t v54 = v61;
      if ((v65 & 1) == 0)
      {
        uint64_t v66 = v64;
        uint64_t v67 = v57;
        uint64_t v68 = v66;
        uint64_t v69 = sub_10004F0D0(v67);
        char v53 = v307;
        char v52 = v63;
        char v47 = v62;
        long long v56 = v308;
        long long v55 = v309;
        long long v51 = v310;
        long long v46 = v312;
        uint64_t v54 = v61;
        if ((v70 & 1) == 0)
        {
          if (v68 == v69)
          {
            sub_10002E804(0xD000000000000051, v275, 0xD000000000000033, (void *)(v304 | 0x8000000000000000), 0xD000000000000020, v305 | 0x8000000000000000, 240);
            Swift::Int v71 = 59;
          }
          else
          {
            sub_10002E81C(0xD000000000000029, v274, 0xD000000000000033, (void *)(v304 | 0x8000000000000000), 0xD000000000000020, v305 | 0x8000000000000000, 245);
            Swift::Int v71 = 60;
          }
          sub_10005B1DC(&v317, v71);
          uint64_t v54 = v61;
          long long v46 = v312;
          long long v55 = v309;
          long long v51 = v310;
          long long v56 = v308;
          char v47 = v62;
          char v52 = v63;
          char v53 = v307;
        }
      }
    }
    *(void *)&long long v317 = v296;
    *((void *)&v317 + 1) = v295;
    LOBYTE(v318) = v294;
    *((void *)&v318 + 1) = v293;
    LOWORD(v319[0]) = v284;
    BYTE2(v319[0]) = BYTE2(v284);
    *((void *)&v319[0] + 1) = v292;
    LOBYTE(v319[1]) = v283;
    *((void *)&v319[1] + 1) = v291;
    *(void *)&v320[0] = v290;
    *((void *)&v320[0] + 1) = v289;
    LOBYTE(v320[1]) = v288;
    BYTE1(v320[1]) = v287;
    *((void *)&v320[1] + 1) = v286;
    v320[2] = v46;
    LOBYTE(v321) = v47;
    *((void *)&v321 + 1) = v48;
    LOWORD(v322[0]) = v50;
    BYTE2(v322[0]) = (v50 | (v49 << 16)) >> 16;
    *(_OWORD *)((char *)v322 + 8) = v51;
    BYTE8(v322[1]) = v52;
    BYTE9(v322[1]) = v53;
    *(_OWORD *)((char *)v323 + 8) = v55;
    *(_OWORD *)((char *)&v323[1] + 8) = v56;
    *(void *)&v323[0] = v54;
    *((void *)&v323[2] + 1) = v316;
    sub_100053FF8(v311);
    swift_bridgeObjectRetain();
    sub_1000542E0((uint64_t)&v317);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      v306 = sub_100059474(0, v306[2] + 1, 1, v306);
    }
    unint64_t v251 = v306[2];
    unint64_t v250 = v306[3];
    if (v251 >= v250 >> 1) {
      v306 = sub_100059474((void *)(v250 > 1), v251 + 1, 1, v306);
    }
    v252 = v306;
    v306[2] = v251 + 1;
    v253 = &v252[26 * v251];
    v253[2] = v317;
    long long v254 = v318;
    long long v255 = v319[0];
    long long v256 = v320[0];
    v253[5] = v319[1];
    v253[6] = v256;
    v253[3] = v254;
    v253[4] = v255;
    long long v257 = v320[1];
    long long v258 = v320[2];
    long long v259 = v322[0];
    v253[9] = v321;
    v253[10] = v259;
    v253[7] = v257;
    v253[8] = v258;
    long long v260 = v322[1];
    long long v261 = v323[0];
    long long v262 = v323[2];
    v253[13] = v323[1];
    v253[14] = v262;
    v253[11] = v260;
    v253[12] = v261;
    sub_100054368((uint64_t)&v317);
    sub_10001A918((uint64_t)&v333, &qword_100127EB0);
    long long v333 = 0u;
    long long v334 = 0u;
    uint64_t v335 = 0;
LABEL_8:
    sub_10000CF08((uint64_t)&v333, (uint64_t)&v317, &qword_100127EB0);
    if (!*((void *)&v318 + 1))
    {
      id v15 = v315;
LABEL_240:
      sub_10001A918((uint64_t)&v317, &qword_100127EB0);
      swift_bridgeObjectRelease();
      if (v15[2])
      {
        v263 = sub_10005AD1C((uint64_t)v15);
        swift_bridgeObjectRelease();
        v264 = v314;
        swift_bridgeObjectRelease();
        *((void *)v264 + 4) = v263;
      }
      else
      {
LABEL_251:
        swift_bridgeObjectRelease();
      }
      goto LABEL_256;
    }
  }
  sub_10001A918((uint64_t)&v330, &qword_100127EB0);
LABEL_28:
  sub_10000CF08((uint64_t)&v333, (uint64_t)&v330, &qword_100127EB0);
  if (*((void *)&v331 + 1))
  {
    *(void *)&long long v303 = sub_10000AC7C(&qword_100127EC0);
    if (swift_dynamicCast())
    {
      *(void *)&long long v310 = v317;
      LODWORD(v281) = BYTE8(v317);
      uint64_t v72 = v318;
      LODWORD(v312) = WORD4(v318);
      char v73 = BYTE10(v318);
      *(void *)&long long v309 = *(void *)&v319[0];
      LODWORD(v307) = WORD4(v319[0]);
      *((void *)&v303 + 1) = *(void *)((char *)v319 + 12);
      LODWORD(v301) = WORD2(v319[1]);
      uint64_t v74 = *((void *)&v319[1] + 1);
      long long v76 = v320[0];
      uint64_t v75 = *(void *)&v320[1];
      uint64_t v77 = v316;
      sub_10000AC7C(&qword_100128968);
      uint64_t v78 = swift_allocObject();
      *(_OWORD *)(v78 + 16) = v300;
      *(void *)(v78 + 56) = &type metadata for MixerUnit;
      *(void *)(v78 + 64) = sub_10001DAAC();
      uint64_t v79 = swift_allocObject();
      *(void *)(v78 + 32) = v79;
      *(void *)(v79 + 16) = v310;
      *(unsigned char *)(v79 + 24) = v281;
      *(void *)(v79 + 32) = v72;
      *(unsigned char *)(v79 + 42) = v73;
      *(_WORD *)(v79 + 40) = v312;
      *(void *)(v79 + 48) = v309;
      *(_WORD *)(v79 + 56) = v307;
      *(void *)(v79 + 60) = *((void *)&v303 + 1);
      *(_WORD *)(v79 + 68) = (_WORD)v301;
      *(void *)(v79 + 72) = v74;
      *(_OWORD *)(v79 + 80) = v76;
      *(void *)(v79 + 96) = v75;
      *(void *)&long long v317 = v77;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000A1D00(v78);
      uint64_t v80 = v317;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v81 = v74;
      uint64_t v307 = *(void *)(v74 + 16);
      if (v307)
      {
        unint64_t v82 = 0;
        uint64_t v83 = *(void *)(v80 + 16);
        *(void *)&long long v309 = v74 + 32;
        *(void *)&long long v312 = v80;
        v301 = (void *)(v80 + 32);
        *(void *)&long long v310 = v306;
        *((void *)&v303 + 1) = v83;
        *(void *)&long long v308 = v74;
        while (1)
        {
          if (v82 >= *(void *)(v81 + 16)) {
            goto LABEL_258;
          }
          uint64_t v84 = *(void *)(v309 + 8 * v82);
          if (!v83) {
            goto LABEL_41;
          }
          swift_bridgeObjectRetain();
          uint64_t v85 = (uint64_t)v301;
          uint64_t v86 = v83;
          do
          {
            sub_10001A9B8(v85, (uint64_t)&v317);
            uint64_t v88 = *((void *)&v318 + 1);
            uint64_t v87 = *(void *)&v319[0];
            sub_10001A974(&v317, *((uint64_t *)&v318 + 1));
            uint64_t v89 = (*(uint64_t (**)(uint64_t))(*(void *)(v87 + 8) + 16))(v88);
            sub_10001ABC4((uint64_t)&v317);
            if (v89 == v84)
            {
              swift_bridgeObjectRelease();
              *(void *)&long long v317 = 0;
              *((void *)&v317 + 1) = 0xE000000000000000;
              _StringGuts.grow(_:)(66);
              v95._countAndFlagsBits = 0xD000000000000040;
              v95._object = (void *)(v285 | 0x8000000000000000);
              String.append(_:)(v95);
              *(void *)&long long v330 = v84;
              v96._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v96);
              swift_bridgeObjectRelease();
              sub_10002E81C(v317, *((uint64_t *)&v317 + 1), 0xD000000000000033, (void *)(v304 | 0x8000000000000000), 0xD000000000000020, v305 | 0x8000000000000000, 265);
              swift_bridgeObjectRelease();
              sub_10005B1DC(&v317, 95);
              goto LABEL_34;
            }
            v85 += 40;
            --v86;
          }
          while (v86);
          swift_bridgeObjectRelease();
LABEL_41:
          uint64_t v90 = *((void *)v314 + 1);
          uint64_t v91 = *(void *)(v90 + 16);
          if (v91)
          {
            uint64_t v92 = v90 + 32;
            swift_bridgeObjectRetain();
            while (1)
            {
              sub_10001A9B8(v92, (uint64_t)&v324);
              uint64_t v93 = v325;
              uint64_t v94 = v326;
              sub_10001A974(&v324, v325);
              if ((*(uint64_t (**)(uint64_t, uint64_t))(v94 + 16))(v93, v94) == v84) {
                break;
              }
              sub_10001ABC4((uint64_t)&v324);
              v92 += 40;
              if (!--v91) {
                goto LABEL_48;
              }
            }
            sub_10000CF6C(&v324, (uint64_t)&v327);
          }
          else
          {
            swift_bridgeObjectRetain();
LABEL_48:
            uint64_t v329 = 0;
            long long v327 = 0u;
            long long v328 = 0u;
          }
          swift_bridgeObjectRelease();
          int v97 = (void *)v310;
          if (!*((void *)&v328 + 1))
          {
            sub_10001A918((uint64_t)&v327, &qword_100128940);
            long long v330 = 0u;
            long long v331 = 0u;
            uint64_t v332 = 0;
            goto LABEL_246;
          }
          sub_10000AC7C(&qword_100128948);
          if ((swift_dynamicCast() & 1) == 0) {
            break;
          }
          if (!*((void *)&v331 + 1)) {
            goto LABEL_246;
          }
          sub_10000CF6C(&v330, (uint64_t)&v317);
          uint64_t v98 = v313;
          uint64_t v99 = sub_10004F250(&v317, v312, v311);
          uint64_t v313 = v98;
          if (v98) {
            goto LABEL_250;
          }
          uint64_t v100 = v99;
          uint64_t v101 = *(void *)(v99 + 16);
          int64_t v102 = v97[2];
          int64_t v103 = v102 + v101;
          if (__OFADD__(v102, v101)) {
            goto LABEL_259;
          }
          uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
          if (!isUniquelyReferenced_nonNull_native || v103 > v97[3] >> 1)
          {
            if (v102 <= v103) {
              int64_t v105 = v102 + v101;
            }
            else {
              int64_t v105 = v102;
            }
            *(void *)&long long v310 = sub_100059474(isUniquelyReferenced_nonNull_native, v105, 1, v97);
          }
          if (!*(void *)(v100 + 16))
          {
            if (!v101) {
              goto LABEL_33;
            }
            goto LABEL_260;
          }
          uint64_t v106 = *(void *)(v310 + 16);
          if ((*(void *)(v310 + 24) >> 1) - v106 < v101) {
            goto LABEL_262;
          }
          unint64_t v107 = v310 + 208 * v106 + 32;
          if (v100 + 32 < v107 + 208 * v101 && v107 < v100 + 32 + 208 * v101) {
            goto LABEL_281;
          }
          swift_arrayInitWithCopy();
          if (!v101) {
            goto LABEL_33;
          }
          uint64_t v108 = *(void *)(v310 + 16);
          BOOL v109 = __OFADD__(v108, v101);
          uint64_t v110 = v108 + v101;
          if (v109) {
            goto LABEL_268;
          }
          *(void *)(v310 + 16) = v110;
LABEL_33:
          swift_bridgeObjectRelease();
          sub_10001ABC4((uint64_t)&v317);
LABEL_34:
          ++v82;
          uint64_t v81 = v308;
          uint64_t v83 = *((void *)&v303 + 1);
          if (v82 == v307) {
            goto LABEL_211;
          }
        }
        uint64_t v332 = 0;
        long long v330 = 0u;
        long long v331 = 0u;
LABEL_246:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10001A918((uint64_t)&v330, &qword_100127EB0);
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v265 = 45;
        *(void *)(v265 + 8) = 0;
        *(void *)(v265 + 16) = 0xE000000000000000;
        unint64_t v266 = v304 | 0x8000000000000000;
        *(void *)(v265 + 24) = 0xD000000000000033;
        *(void *)(v265 + 32) = v266;
        unint64_t v267 = v305 | 0x8000000000000000;
        *(void *)(v265 + 40) = 0xD000000000000020;
        *(void *)(v265 + 48) = v267;
        uint64_t v268 = 276;
        goto LABEL_255;
      }
      goto LABEL_222;
    }
  }
  else
  {
    sub_10001A918((uint64_t)&v330, &qword_100127EB0);
  }
  sub_10000CF08((uint64_t)&v333, (uint64_t)&v330, &qword_100127EB0);
  if (!*((void *)&v331 + 1))
  {
    sub_10001A918((uint64_t)&v330, &qword_100127EB0);
LABEL_114:
    sub_10000CF08((uint64_t)&v333, (uint64_t)&v330, &qword_100127EB0);
    if (*((void *)&v331 + 1))
    {
      *(void *)&long long v303 = sub_10000AC7C(&qword_100127EC0);
      if (swift_dynamicCast())
      {
        uint64_t v148 = v316;
        *((void *)&v303 + 1) = v317;
        char v149 = BYTE8(v317);
        *(void *)&long long v310 = v318;
        LODWORD(v312) = WORD4(v318);
        char v150 = BYTE10(v318);
        *(void *)&long long v309 = *(void *)&v319[0];
        LODWORD(v307) = WORD4(v319[0]);
        long long v151 = v319[1];
        uint64_t v152 = *(void *)&v320[0];
        sub_10000AC7C(&qword_100128968);
        uint64_t v153 = swift_allocObject();
        *(_OWORD *)(v153 + 16) = v300;
        *(void *)(v153 + 56) = &type metadata for SelectorUnit;
        *(void *)(v153 + 64) = sub_10001ECA0();
        uint64_t v154 = swift_allocObject();
        *(void *)(v153 + 32) = v154;
        *(void *)(v154 + 16) = *((void *)&v303 + 1);
        *(unsigned char *)(v154 + 24) = v149;
        *(void *)(v154 + 32) = v310;
        *(unsigned char *)(v154 + 42) = v150;
        *(_WORD *)(v154 + 40) = v312;
        *(void *)(v154 + 48) = v309;
        *(_WORD *)(v154 + 56) = v307;
        *(_OWORD *)(v154 + 64) = v151;
        *(void *)(v154 + 80) = v152;
        *(void *)&long long v317 = v148;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1000A1D00(v153);
        uint64_t v155 = v317;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v156 = v151;
        uint64_t v307 = *(void *)(v151 + 16);
        if (v307)
        {
          unint64_t v157 = 0;
          uint64_t v158 = *(void *)(v155 + 16);
          *(void *)&long long v309 = v151 + 32;
          *(void *)&long long v312 = v155;
          v301 = (void *)(v155 + 32);
          *(void *)&long long v310 = v306;
          *((void *)&v303 + 1) = v158;
          *(void *)&long long v308 = v151;
          while (1)
          {
            if (v157 >= *(void *)(v156 + 16)) {
              goto LABEL_261;
            }
            uint64_t v159 = *(void *)(v309 + 8 * v157);
            if (!v158) {
              goto LABEL_133;
            }
            swift_bridgeObjectRetain();
            uint64_t v160 = (uint64_t)v301;
            uint64_t v161 = v158;
            do
            {
              sub_10001A9B8(v160, (uint64_t)&v317);
              uint64_t v163 = *((void *)&v318 + 1);
              uint64_t v162 = *(void *)&v319[0];
              sub_10001A974(&v317, *((uint64_t *)&v318 + 1));
              uint64_t v164 = (*(uint64_t (**)(uint64_t))(*(void *)(v162 + 8) + 16))(v163);
              sub_10001ABC4((uint64_t)&v317);
              if (v164 == v159)
              {
                swift_bridgeObjectRelease();
                *(void *)&long long v317 = 0;
                *((void *)&v317 + 1) = 0xE000000000000000;
                _StringGuts.grow(_:)(69);
                v170._countAndFlagsBits = 0xD000000000000043;
                v170._object = v280;
                String.append(_:)(v170);
                *(void *)&long long v330 = v159;
                v171._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v171);
                swift_bridgeObjectRelease();
                sub_10002E81C(v317, *((uint64_t *)&v317 + 1), 0xD000000000000033, (void *)(v304 | 0x8000000000000000), 0xD000000000000020, v305 | 0x8000000000000000, 314);
                swift_bridgeObjectRelease();
                sub_10005B1DC(&v317, 95);
                goto LABEL_126;
              }
              v160 += 40;
              --v161;
            }
            while (v161);
            swift_bridgeObjectRelease();
LABEL_133:
            uint64_t v165 = *((void *)v314 + 1);
            uint64_t v166 = *(void *)(v165 + 16);
            if (v166)
            {
              uint64_t v167 = v165 + 32;
              swift_bridgeObjectRetain();
              while (1)
              {
                sub_10001A9B8(v167, (uint64_t)&v324);
                uint64_t v168 = v325;
                uint64_t v169 = v326;
                sub_10001A974(&v324, v325);
                if ((*(uint64_t (**)(uint64_t, uint64_t))(v169 + 16))(v168, v169) == v159) {
                  break;
                }
                sub_10001ABC4((uint64_t)&v324);
                v167 += 40;
                if (!--v166) {
                  goto LABEL_140;
                }
              }
              sub_10000CF6C(&v324, (uint64_t)&v327);
            }
            else
            {
              swift_bridgeObjectRetain();
LABEL_140:
              uint64_t v329 = 0;
              long long v327 = 0u;
              long long v328 = 0u;
            }
            swift_bridgeObjectRelease();
            uint64_t v172 = v312;
            uint64_t v173 = (void *)v310;
            if (!*((void *)&v328 + 1))
            {
              sub_10001A918((uint64_t)&v327, &qword_100128940);
              long long v330 = 0u;
              long long v331 = 0u;
              uint64_t v332 = 0;
              goto LABEL_249;
            }
            sub_10000AC7C(&qword_100128948);
            if ((swift_dynamicCast() & 1) == 0) {
              break;
            }
            if (!*((void *)&v331 + 1)) {
              goto LABEL_249;
            }
            sub_10000CF6C(&v330, (uint64_t)&v317);
            uint64_t v174 = v313;
            uint64_t v175 = sub_10004F250(&v317, v172, v311);
            uint64_t v313 = v174;
            if (v174) {
              goto LABEL_250;
            }
            uint64_t v176 = v175;
            uint64_t v177 = *(void *)(v175 + 16);
            int64_t v178 = v173[2];
            int64_t v179 = v178 + v177;
            if (__OFADD__(v178, v177)) {
              goto LABEL_264;
            }
            v180 = (void *)swift_isUniquelyReferenced_nonNull_native();
            if (!v180 || v179 > v173[3] >> 1)
            {
              if (v178 <= v179) {
                int64_t v181 = v178 + v177;
              }
              else {
                int64_t v181 = v178;
              }
              *(void *)&long long v310 = sub_100059474(v180, v181, 1, v173);
            }
            if (!*(void *)(v176 + 16))
            {
              if (!v177) {
                goto LABEL_125;
              }
              goto LABEL_265;
            }
            uint64_t v182 = *(void *)(v310 + 16);
            if ((*(void *)(v310 + 24) >> 1) - v182 < v177) {
              goto LABEL_271;
            }
            unint64_t v183 = v310 + 208 * v182 + 32;
            if (v176 + 32 < v183 + 208 * v177 && v183 < v176 + 32 + 208 * v177) {
              goto LABEL_281;
            }
            swift_arrayInitWithCopy();
            if (v177)
            {
              uint64_t v184 = *(void *)(v310 + 16);
              BOOL v109 = __OFADD__(v184, v177);
              uint64_t v185 = v184 + v177;
              if (!v109)
              {
                *(void *)(v310 + 16) = v185;
                goto LABEL_125;
              }
LABEL_274:
              __break(1u);
              goto LABEL_275;
            }
LABEL_125:
            swift_bridgeObjectRelease();
            sub_10001ABC4((uint64_t)&v317);
LABEL_126:
            ++v157;
            uint64_t v156 = v308;
            uint64_t v158 = *((void *)&v303 + 1);
            if (v157 == v307) {
              goto LABEL_211;
            }
          }
          uint64_t v332 = 0;
          long long v330 = 0u;
          long long v331 = 0u;
LABEL_249:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10001A918((uint64_t)&v330, &qword_100127EB0);
          sub_10000CD54();
          swift_allocError();
          *(unsigned char *)uint64_t v265 = 45;
          *(void *)(v265 + 8) = 0;
          *(void *)(v265 + 16) = 0xE000000000000000;
          unint64_t v269 = v304 | 0x8000000000000000;
          *(void *)(v265 + 24) = 0xD000000000000033;
          *(void *)(v265 + 32) = v269;
          unint64_t v270 = v305 | 0x8000000000000000;
          *(void *)(v265 + 40) = 0xD000000000000020;
          *(void *)(v265 + 48) = v270;
          uint64_t v268 = 326;
          goto LABEL_255;
        }
        goto LABEL_222;
      }
    }
    else
    {
      sub_10001A918((uint64_t)&v330, &qword_100127EB0);
    }
    sub_10000CF08((uint64_t)&v333, (uint64_t)&v330, &qword_100127EB0);
    if (!*((void *)&v331 + 1))
    {
      sub_10001A918((uint64_t)&v330, &qword_100127EB0);
LABEL_203:
      uint64_t v222 = *(void *)(v316 + 16);
      if (v222)
      {
        uint64_t v223 = v316 + 32;
        *(void *)&long long v312 = v316;
        swift_bridgeObjectRetain();
        do
        {
          sub_10001A9B8(v223, (uint64_t)&v317);
          uint64_t v225 = *((void *)&v318 + 1);
          uint64_t v224 = *(void *)&v319[0];
          sub_10001A974(&v317, *((uint64_t *)&v318 + 1));
          uint64_t v226 = (*(uint64_t (**)(uint64_t))(*(void *)(v224 + 8) + 16))(v225);
          uint64_t v227 = *((void *)&v334 + 1);
          if (*((void *)&v334 + 1))
          {
            uint64_t v228 = v226;
            uint64_t v229 = v335;
            v230 = sub_10001A974(&v333, *((uint64_t *)&v334 + 1));
            uint64_t v231 = *(void *)(v227 - 8);
            __chkstk_darwin(v230);
            v233 = (char *)&v274 - ((v232 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *))(v231 + 16))(v233);
            uint64_t v234 = (*(uint64_t (**)(uint64_t))(*(void *)(v229 + 8) + 16))(v227);
            (*(void (**)(char *, uint64_t))(v231 + 8))(v233, v227);
            sub_10001ABC4((uint64_t)&v317);
            if (v228 == v234)
            {
              swift_bridgeObjectRelease();
              sub_10002E81C(0xD000000000000029, v278, 0xD000000000000033, v277, 0xD000000000000020, v276, 359);
              sub_10005B1DC(&v317, 95);
              goto LABEL_8;
            }
          }
          else
          {
            sub_10001ABC4((uint64_t)&v317);
          }
          v223 += 40;
          --v222;
        }
        while (v222);
        swift_bridgeObjectRelease();
      }
      sub_10000AC7C(&qword_100128968);
      uint64_t v235 = swift_allocObject();
      *(_OWORD *)(v235 + 16) = v300;
      sub_10000CF08((uint64_t)&v333, (uint64_t)&v317, &qword_100127EB0);
      if (*((void *)&v318 + 1))
      {
        sub_10000CF6C(&v317, v235 + 32);
        sub_1000A1D00(v235);
        uint64_t v236 = *((void *)&v334 + 1);
        if (*((void *)&v334 + 1))
        {
          uint64_t v237 = *((void *)v314 + 1);
          uint64_t v238 = v335;
          v239 = sub_10001A974(&v333, *((uint64_t *)&v334 + 1));
          uint64_t v240 = *(void *)(v236 - 8);
          __chkstk_darwin(v239);
          v242 = (char *)&v274 - ((v241 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *))(v240 + 16))(v242);
          uint64_t v243 = (*(uint64_t (**)(uint64_t, uint64_t))(v238 + 16))(v236, v238);
          char v245 = v244;
          (*(void (**)(char *, uint64_t))(v240 + 8))(v242, v236);
          if ((v245 & 1) == 0)
          {
            uint64_t v246 = *(void *)(v237 + 16);
            if (v246)
            {
              uint64_t v247 = v237 + 32;
              swift_bridgeObjectRetain();
              while (1)
              {
                sub_10001A9B8(v247, (uint64_t)&v317);
                uint64_t v248 = *((void *)&v318 + 1);
                uint64_t v249 = *(void *)&v319[0];
                sub_10001A974(&v317, *((uint64_t *)&v318 + 1));
                if ((*(uint64_t (**)(uint64_t, uint64_t))(v249 + 16))(v248, v249) == v243) {
                  break;
                }
                sub_10001ABC4((uint64_t)&v317);
                v247 += 40;
                if (!--v246) {
                  goto LABEL_224;
                }
              }
              sub_10000CF6C(&v317, (uint64_t)&v330);
            }
            else
            {
              swift_bridgeObjectRetain();
LABEL_224:
              uint64_t v332 = 0;
              long long v330 = 0u;
              long long v331 = 0u;
            }
            swift_bridgeObjectRelease();
            if (*((void *)&v331 + 1))
            {
              sub_10000AC7C(&qword_100128948);
              sub_10000AC7C(&qword_100127EC0);
              if ((swift_dynamicCast() & 1) == 0)
              {
                *(void *)&v319[0] = 0;
                long long v317 = 0u;
                long long v318 = 0u;
              }
            }
            else
            {
              sub_10001A918((uint64_t)&v330, &qword_100128940);
              long long v317 = 0u;
              long long v318 = 0u;
              *(void *)&v319[0] = 0;
            }
            goto LABEL_7;
          }
LABEL_280:
          __break(1u);
          goto LABEL_281;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_280;
    }
    *(void *)&long long v303 = sub_10000AC7C(&qword_100127EC0);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_203;
    }
    uint64_t v186 = v316;
    *(void *)&long long v310 = v317;
    LODWORD(v309) = BYTE8(v317);
    v301 = (void *)v318;
    LODWORD(v312) = WORD4(v318);
    char v187 = BYTE10(v318);
    uint64_t v307 = *(void *)&v319[0];
    DWORD2(v303) = WORD4(v319[0]);
    long long v188 = v319[1];
    long long v189 = v320[0];
    sub_10000AC7C(&qword_100128968);
    uint64_t v190 = swift_allocObject();
    *(_OWORD *)(v190 + 16) = v300;
    *(void *)(v190 + 56) = &type metadata for ProcessingUnit;
    *(void *)(v190 + 64) = sub_100054238();
    uint64_t v191 = swift_allocObject();
    *(void *)(v190 + 32) = v191;
    *(void *)(v191 + 16) = v310;
    *(unsigned char *)(v191 + 24) = v309;
    *(void *)(v191 + 32) = v301;
    *(unsigned char *)(v191 + 42) = v187;
    *(_WORD *)(v191 + 40) = v312;
    *(void *)(v191 + 48) = v307;
    *(_WORD *)(v191 + 56) = WORD4(v303);
    *(_OWORD *)(v191 + 64) = v188;
    *(_OWORD *)(v191 + 80) = v189;
    *(void *)&long long v317 = v186;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000A1D00(v190);
    uint64_t v192 = v317;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v193 = *((void *)&v188 + 1);
    uint64_t v307 = *(void *)(*((void *)&v188 + 1) + 16);
    if (v307)
    {
      unint64_t v194 = 0;
      uint64_t v195 = *(void *)(v192 + 16);
      *(void *)&long long v309 = *((void *)&v188 + 1) + 32;
      *(void *)&long long v312 = v192;
      v301 = (void *)(v192 + 32);
      *(void *)&long long v310 = v306;
      *((void *)&v303 + 1) = v195;
      *(void *)&long long v308 = *((void *)&v188 + 1);
      while (1)
      {
        if (v194 >= *(void *)(v193 + 16)) {
          goto LABEL_263;
        }
        uint64_t v196 = *(void *)(v309 + 8 * v194);
        if (!v195) {
          goto LABEL_175;
        }
        swift_bridgeObjectRetain();
        uint64_t v197 = (uint64_t)v301;
        uint64_t v198 = v195;
        do
        {
          sub_10001A9B8(v197, (uint64_t)&v317);
          uint64_t v200 = *((void *)&v318 + 1);
          uint64_t v199 = *(void *)&v319[0];
          sub_10001A974(&v317, *((uint64_t *)&v318 + 1));
          uint64_t v201 = (*(uint64_t (**)(uint64_t))(*(void *)(v199 + 8) + 16))(v200);
          sub_10001ABC4((uint64_t)&v317);
          if (v201 == v196)
          {
            swift_bridgeObjectRelease();
            *(void *)&long long v317 = 0;
            *((void *)&v317 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(66);
            v207._countAndFlagsBits = 0xD000000000000040;
            v207._object = v279;
            String.append(_:)(v207);
            *(void *)&long long v330 = v196;
            v208._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v208);
            swift_bridgeObjectRelease();
            sub_10002E81C(v317, *((uint64_t *)&v317 + 1), 0xD000000000000033, (void *)(v304 | 0x8000000000000000), 0xD000000000000020, v305 | 0x8000000000000000, 339);
            swift_bridgeObjectRelease();
            sub_10005B1DC(&v317, 95);
            goto LABEL_168;
          }
          v197 += 40;
          --v198;
        }
        while (v198);
        swift_bridgeObjectRelease();
LABEL_175:
        uint64_t v202 = *((void *)v314 + 1);
        uint64_t v203 = *(void *)(v202 + 16);
        if (v203)
        {
          uint64_t v204 = v202 + 32;
          swift_bridgeObjectRetain();
          while (1)
          {
            sub_10001A9B8(v204, (uint64_t)&v324);
            uint64_t v205 = v325;
            uint64_t v206 = v326;
            sub_10001A974(&v324, v325);
            if ((*(uint64_t (**)(uint64_t, uint64_t))(v206 + 16))(v205, v206) == v196) {
              break;
            }
            sub_10001ABC4((uint64_t)&v324);
            v204 += 40;
            if (!--v203) {
              goto LABEL_182;
            }
          }
          sub_10000CF6C(&v324, (uint64_t)&v327);
        }
        else
        {
          swift_bridgeObjectRetain();
LABEL_182:
          uint64_t v329 = 0;
          long long v327 = 0u;
          long long v328 = 0u;
        }
        swift_bridgeObjectRelease();
        v209 = (void *)v310;
        if (!*((void *)&v328 + 1))
        {
          sub_10001A918((uint64_t)&v327, &qword_100128940);
          long long v330 = 0u;
          long long v331 = 0u;
          uint64_t v332 = 0;
          goto LABEL_254;
        }
        sub_10000AC7C(&qword_100128948);
        if ((swift_dynamicCast() & 1) == 0) {
          break;
        }
        if (!*((void *)&v331 + 1)) {
          goto LABEL_254;
        }
        sub_10000CF6C(&v330, (uint64_t)&v317);
        uint64_t v210 = v313;
        uint64_t v211 = sub_10004F250(&v317, v312, v311);
        uint64_t v313 = v210;
        if (v210)
        {
LABEL_250:
          swift_bridgeObjectRelease();
          sub_10001ABC4((uint64_t)&v317);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_251;
        }
        uint64_t v212 = v211;
        uint64_t v213 = *(void *)(v211 + 16);
        int64_t v214 = v209[2];
        int64_t v215 = v214 + v213;
        if (__OFADD__(v214, v213)) {
          goto LABEL_269;
        }
        v216 = (void *)swift_isUniquelyReferenced_nonNull_native();
        if (!v216 || v215 > v209[3] >> 1)
        {
          if (v214 <= v215) {
            int64_t v217 = v214 + v213;
          }
          else {
            int64_t v217 = v214;
          }
          *(void *)&long long v310 = sub_100059474(v216, v217, 1, v209);
        }
        if (!*(void *)(v212 + 16))
        {
          if (!v213) {
            goto LABEL_167;
          }
          goto LABEL_270;
        }
        uint64_t v218 = *(void *)(v310 + 16);
        if ((*(void *)(v310 + 24) >> 1) - v218 < v213) {
          goto LABEL_273;
        }
        unint64_t v219 = v310 + 208 * v218 + 32;
        if (v212 + 32 < v219 + 208 * v213 && v219 < v212 + 32 + 208 * v213) {
          goto LABEL_281;
        }
        swift_arrayInitWithCopy();
        if (v213)
        {
          uint64_t v220 = *(void *)(v310 + 16);
          BOOL v109 = __OFADD__(v220, v213);
          uint64_t v221 = v220 + v213;
          if (v109) {
            goto LABEL_276;
          }
          *(void *)(v310 + 16) = v221;
        }
LABEL_167:
        swift_bridgeObjectRelease();
        sub_10001ABC4((uint64_t)&v317);
LABEL_168:
        ++v194;
        uint64_t v193 = v308;
        uint64_t v195 = *((void *)&v303 + 1);
        if (v194 == v307)
        {
LABEL_211:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v306 = (void *)v310;
          goto LABEL_212;
        }
      }
      uint64_t v332 = 0;
      long long v330 = 0u;
      long long v331 = 0u;
LABEL_254:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001A918((uint64_t)&v330, &qword_100127EB0);
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v265 = 45;
      *(void *)(v265 + 8) = 0;
      *(void *)(v265 + 16) = 0xE000000000000000;
      unint64_t v271 = v304 | 0x8000000000000000;
      *(void *)(v265 + 24) = 0xD000000000000033;
      *(void *)(v265 + 32) = v271;
      unint64_t v272 = v305 | 0x8000000000000000;
      *(void *)(v265 + 40) = 0xD000000000000020;
      *(void *)(v265 + 48) = v272;
      uint64_t v268 = 350;
LABEL_255:
      *(void *)(v265 + 56) = v268;
      swift_willThrow();
LABEL_256:
      sub_10001A918((uint64_t)&v333, &qword_100127EB0);
      return v306;
    }
    goto LABEL_222;
  }
  *(void *)&long long v303 = sub_10000AC7C(&qword_100127EC0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_114;
  }
  *(void *)&long long v310 = v317;
  LODWORD(v309) = BYTE8(v317);
  LODWORD(v312) = WORD4(v318);
  LODWORD(v301) = BYTE10(v318);
  uint64_t v307 = *(void *)&v319[0];
  *(void *)&long long v308 = v318;
  DWORD2(v303) = WORD4(v319[0]);
  uint64_t v281 = *((void *)&v319[1] + 1);
  uint64_t v111 = *(void *)&v319[1];
  uint64_t v112 = *(void *)&v320[0];
  char v113 = BYTE8(v320[0]);
  long long v114 = v320[1];
  uint64_t v115 = v316;
  sub_10000AC7C(&qword_100128968);
  uint64_t v116 = swift_allocObject();
  *(_OWORD *)(v116 + 16) = v300;
  *(void *)(v116 + 56) = &type metadata for ExtensionUnit;
  *(void *)(v116 + 64) = sub_10005428C();
  uint64_t v117 = swift_allocObject();
  *(void *)(v116 + 32) = v117;
  *(void *)(v117 + 16) = v310;
  *(unsigned char *)(v117 + 24) = v309;
  *(void *)(v117 + 32) = v308;
  *(unsigned char *)(v117 + 42) = (_BYTE)v301;
  *(_WORD *)(v117 + 40) = v312;
  *(void *)(v117 + 48) = v307;
  *(_WORD *)(v117 + 56) = WORD4(v303);
  uint64_t v118 = v281;
  *(void *)(v117 + 64) = v111;
  *(void *)(v117 + 72) = v118;
  *(void *)(v117 + 80) = v112;
  *(unsigned char *)(v117 + 88) = v113;
  *(_OWORD *)(v117 + 96) = v114;
  *(void *)&long long v317 = v115;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000A1D00(v116);
  uint64_t v119 = v317;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&long long v308 = *(void *)(v111 + 16);
  if (!(void)v308)
  {
LABEL_222:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_212:
    sub_10001A918((uint64_t)&v333, &qword_100127EB0);
    long long v333 = 0u;
    long long v334 = 0u;
    uint64_t v335 = 0;
    goto LABEL_8;
  }
  unint64_t v120 = 0;
  uint64_t v121 = *(void *)(v119 + 16);
  *(void *)&long long v309 = v111;
  uint64_t v307 = v111 + 32;
  *(void *)&long long v312 = v119;
  *((void *)&v303 + 1) = v119 + 32;
  v301 = v306;
  *(void *)&long long v310 = v121;
LABEL_76:
  if (v120 >= *(void *)(v309 + 16))
  {
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    __break(1u);
LABEL_261:
    __break(1u);
LABEL_262:
    __break(1u);
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
LABEL_268:
    __break(1u);
LABEL_269:
    __break(1u);
LABEL_270:
    __break(1u);
LABEL_271:
    __break(1u);
LABEL_272:
    __break(1u);
LABEL_273:
    __break(1u);
    goto LABEL_274;
  }
  uint64_t v122 = *(void *)(v307 + 8 * v120);
  if (!v121) {
    goto LABEL_82;
  }
  swift_bridgeObjectRetain();
  uint64_t v123 = *((void *)&v303 + 1);
  uint64_t v124 = v121;
  do
  {
    sub_10001A9B8(v123, (uint64_t)&v317);
    uint64_t v126 = *((void *)&v318 + 1);
    uint64_t v125 = *(void *)&v319[0];
    sub_10001A974(&v317, *((uint64_t *)&v318 + 1));
    uint64_t v127 = (*(uint64_t (**)(uint64_t))(*(void *)(v125 + 8) + 16))(v126);
    sub_10001ABC4((uint64_t)&v317);
    if (v127 == v122)
    {
      swift_bridgeObjectRelease();
      *(void *)&long long v317 = 0;
      *((void *)&v317 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(71);
      v133._countAndFlagsBits = 0xD000000000000045;
      v133._object = v302;
      String.append(_:)(v133);
      *(void *)&long long v330 = v122;
      v134._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v134);
      swift_bridgeObjectRelease();
      sub_10002E81C(v317, *((uint64_t *)&v317 + 1), 0xD000000000000033, (void *)(v304 | 0x8000000000000000), 0xD000000000000020, v305 | 0x8000000000000000, 289);
      swift_bridgeObjectRelease();
      sub_10005B1DC(&v317, 95);
LABEL_112:
      uint64_t v121 = v310;
LABEL_75:
      if (++v120 == (void)v308)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v306 = v301;
        goto LABEL_212;
      }
      goto LABEL_76;
    }
    v123 += 40;
    --v124;
  }
  while (v124);
  swift_bridgeObjectRelease();
LABEL_82:
  uint64_t v128 = *((void *)v314 + 1);
  uint64_t v129 = *(void *)(v128 + 16);
  if (v129)
  {
    uint64_t v130 = v128 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_10001A9B8(v130, (uint64_t)&v324);
      uint64_t v131 = v325;
      uint64_t v132 = v326;
      sub_10001A974(&v324, v325);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v132 + 16))(v131, v132) == v122) {
        break;
      }
      sub_10001ABC4((uint64_t)&v324);
      v130 += 40;
      if (!--v129) {
        goto LABEL_89;
      }
    }
    sub_10000CF6C(&v324, (uint64_t)&v327);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_89:
    uint64_t v329 = 0;
    long long v327 = 0u;
    long long v328 = 0u;
  }
  swift_bridgeObjectRelease();
  uint64_t v121 = v310;
  if (!*((void *)&v328 + 1))
  {
    sub_10001A918((uint64_t)&v327, &qword_100128940);
    long long v330 = 0u;
    long long v331 = 0u;
    uint64_t v332 = 0;
LABEL_74:
    sub_10001A918((uint64_t)&v330, &qword_100127EB0);
    goto LABEL_75;
  }
  sub_10000AC7C(&qword_100128948);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v332 = 0;
    long long v330 = 0u;
    long long v331 = 0u;
    goto LABEL_74;
  }
  if (!*((void *)&v331 + 1)) {
    goto LABEL_74;
  }
  sub_10000CF6C(&v330, (uint64_t)&v317);
  uint64_t v135 = v313;
  uint64_t v136 = sub_10004F250(&v317, v312, v311);
  uint64_t v313 = v135;
  if (v135) {
    goto LABEL_250;
  }
  uint64_t v137 = v136;
  uint64_t v138 = *(void *)(v136 + 16);
  char v139 = v301;
  int64_t v140 = v301[2];
  int64_t v141 = v140 + v138;
  if (__OFADD__(v140, v138)) {
    goto LABEL_266;
  }
  id v142 = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!v142 || v141 > v139[3] >> 1)
  {
    if (v140 <= v141) {
      int64_t v143 = v140 + v138;
    }
    else {
      int64_t v143 = v140;
    }
    v301 = sub_100059474(v142, v143, 1, v139);
  }
  if (!*(void *)(v137 + 16))
  {
    if (v138) {
      goto LABEL_267;
    }
LABEL_111:
    swift_bridgeObjectRelease();
    sub_10001ABC4((uint64_t)&v317);
    goto LABEL_112;
  }
  uint64_t v144 = v301[2];
  if ((v301[3] >> 1) - v144 < v138) {
    goto LABEL_272;
  }
  unint64_t v145 = (unint64_t)&v301[26 * v144 + 4];
  if (v137 + 32 >= v145 + 208 * v138 || v145 >= v137 + 32 + 208 * v138)
  {
    swift_arrayInitWithCopy();
    if (!v138) {
      goto LABEL_111;
    }
    uint64_t v146 = v301[2];
    BOOL v109 = __OFADD__(v146, v138);
    uint64_t v147 = v146 + v138;
    if (!v109)
    {
      v301[2] = v147;
      goto LABEL_111;
    }
LABEL_275:
    __break(1u);
LABEL_276:
    __break(1u);
LABEL_277:
    __break(1u);
  }
LABEL_281:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100051B64@<X0>(int a1@<W0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 8);
  v46[0] = v4;
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = v4 + 32;
    swift_bridgeObjectRetain_n();
    uint64_t v7 = _swiftEmptyArrayStorage;
    int v26 = a1;
    while (1)
    {
      sub_10001A9B8(v6, (uint64_t)v45);
      sub_10001A9B8((uint64_t)v45, (uint64_t)v44);
      sub_10000AC7C(&qword_100128948);
      if (swift_dynamicCast())
      {
        if ((((void)v31 != 257) ^ a1))
        {
          sub_10001ABC4((uint64_t)v45);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v7 = sub_1000595A0(0, v7[2] + 1, 1, v7);
          }
          unint64_t v9 = v7[2];
          unint64_t v8 = v7[3];
          char v10 = v7;
          long long v11 = v31;
          if (v9 >= v8 >> 1)
          {
            uint64_t v13 = sub_1000595A0((void *)(v8 > 1), v9 + 1, 1, v7);
            long long v11 = v31;
            char v10 = v13;
          }
          v10[2] = v9 + 1;
          uint64_t v7 = v10;
          uint64_t v12 = &v10[13 * v9];
          *((_OWORD *)v12 + 2) = v11;
          a1 = v26;
          *((unsigned char *)v12 + 48) = v32;
          v12[7] = v33;
          *((unsigned char *)v12 + 66) = v35;
          *((_WORD *)v12 + 32) = v34;
          *(_OWORD *)(v12 + 9) = v36;
          *((unsigned char *)v12 + 88) = v37;
          *((unsigned char *)v12 + 89) = v38;
          v12[12] = v39;
          v12[13] = v40;
          v12[14] = v41;
          v12[15] = v42;
          v12[16] = v43;
          goto LABEL_5;
        }
        swift_bridgeObjectRelease();
        sub_1000541C0(v40, v41);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      sub_10001ABC4((uint64_t)v45);
LABEL_5:
      v6 += 40;
      if (!--v5)
      {
        sub_10004EC5C((uint64_t)v46);
        sub_10004EC5C((uint64_t)v46);
        goto LABEL_15;
      }
    }
  }
  uint64_t v7 = _swiftEmptyArrayStorage;
LABEL_15:
  if (v7[2] == 1)
  {
    uint64_t v30 = v7[4];
    uint64_t v28 = *((unsigned __int8 *)v7 + 48);
    uint64_t v29 = v7[5];
    uint64_t v27 = v7[7];
    unint64_t v14 = *((unsigned __int16 *)v7 + 32) | ((unint64_t)*((unsigned __int8 *)v7 + 66) << 16);
    uint64_t v15 = v7[9];
    uint64_t v16 = v7[10];
    uint64_t v17 = v7;
    uint64_t v18 = v7[12];
    uint64_t v19 = v7[13];
    unint64_t v20 = v17[14];
    uint64_t v21 = v17[15];
    uint64_t v22 = v17[16];
    uint64_t v23 = *((unsigned __int16 *)v17 + 44);
    swift_bridgeObjectRetain();
    sub_1000540F0(v19, v20);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v27 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v23 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v30;
  a2[1] = v29;
  a2[2] = v28;
  a2[3] = v27;
  a2[4] = v14;
  a2[5] = v15;
  a2[6] = v16;
  a2[7] = v23;
  a2[8] = v18;
  a2[9] = v19;
  a2[10] = v20;
  a2[11] = v21;
  a2[12] = v22;
  return result;
}

Swift::Int ControlInterface.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_100051ED8()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ControlInterface()
{
  return sub_10004D738();
}

Swift::Int sub_100051F9C()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ControlInterface(uint64_t a1, long long *a2)
{
  long long v2 = *(_OWORD *)(a1 + 80);
  v12[4] = *(_OWORD *)(a1 + 64);
  void v12[5] = v2;
  v12[6] = *(_OWORD *)(a1 + 96);
  uint64_t v13 = *(void *)(a1 + 112);
  long long v3 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v3;
  long long v4 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  uint64_t v12[3] = v4;
  long long v5 = *a2;
  long long v6 = a2[1];
  long long v7 = a2[3];
  void v14[2] = a2[2];
  v14[3] = v7;
  v14[0] = v5;
  v14[1] = v6;
  long long v8 = a2[4];
  long long v9 = a2[5];
  long long v10 = a2[6];
  uint64_t v15 = *((void *)a2 + 14);
  void v14[5] = v9;
  void v14[6] = v10;
  v14[4] = v8;
  return sub_1000450F0((uint64_t)v12, (uint64_t)v14) & 1;
}

unint64_t sub_10005208C(uint64_t a1)
{
  unint64_t result = sub_1000520B4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000520B4()
{
  unint64_t result = qword_1001288F8;
  if (!qword_1001288F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001288F8);
  }
  return result;
}

unint64_t sub_10005210C()
{
  unint64_t result = qword_100128900;
  if (!qword_100128900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128900);
  }
  return result;
}

uint64_t destroy for ControlInterface(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(a1 + 96);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ControlInterface(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 1)
  {
    long long v7 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v7;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    long long v8 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v8;
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
    uint64_t v10 = *(void *)(a2 + 104);
    uint64_t v9 = *(void *)(a2 + 112);
    *(void *)(a1 + 96) = v6;
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for ControlInterface(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 40);
  uint64_t v5 = (_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96) == 1)
  {
    if (v6 == 1)
    {
      *uint64_t v4 = *v5;
      long long v7 = *(_OWORD *)(a2 + 56);
      long long v8 = *(_OWORD *)(a2 + 72);
      long long v9 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v9;
      *(_OWORD *)(a1 + 56) = v7;
      *(_OWORD *)(a1 + 72) = v8;
    }
    else
    {
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v6 == 1)
  {
    sub_10005248C(a1 + 40);
    *uint64_t v4 = *v5;
    long long v10 = *(_OWORD *)(a2 + 104);
    long long v12 = *(_OWORD *)(a2 + 56);
    long long v11 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v10;
    *(_OWORD *)(a1 + 56) = v12;
    *(_OWORD *)(a1 + 72) = v11;
  }
  else
  {
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_10005248C(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for ControlInterface(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ControlInterface(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 96) != 1)
  {
    uint64_t v4 = *(void *)(a2 + 96);
    if (v4 != 1)
    {
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
      *(void *)(a1 + 96) = v4;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_10005248C(a1 + 40);
  }
  long long v5 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for ControlInterface(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ControlInterface(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ControlInterface()
{
  return &type metadata for ControlInterface;
}

uint64_t sub_1000526CC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a4;
  uint64_t v26 = a3;
  char v4 = a2;
  char v5 = a1;
  unint64_t v6 = a1 >> 8;
  unint64_t v7 = a1 >> 16;
  unint64_t v8 = a1 >> 24;
  unint64_t v9 = HIDWORD(a1);
  unint64_t v10 = a1 >> 40;
  unint64_t v17 = HIWORD(a1);
  unint64_t v18 = HIBYTE(a1);
  unint64_t v19 = a2 >> 8;
  unint64_t v20 = a2 >> 16;
  unint64_t v21 = a2 >> 24;
  unint64_t v22 = HIDWORD(a2);
  unint64_t v23 = a2 >> 40;
  unint64_t v24 = HIWORD(a2);
  unint64_t v25 = HIBYTE(a2);
  uint64_t v44 = type metadata accessor for Mirror();
  uint64_t v11 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_10000AC7C(&qword_100128930);
  LOBYTE(v34) = v5;
  BYTE1(v34) = v6;
  BYTE2(v34) = v7;
  BYTE3(v34) = v8;
  BYTE4(v34) = v9;
  BYTE5(v34) = v10;
  BYTE6(v34) = v17;
  HIBYTE(v34) = v18;
  char v35 = v4;
  char v36 = v19;
  char v37 = v20;
  char v38 = v21;
  char v39 = v22;
  char v40 = v23;
  char v41 = v24;
  char v42 = v25;
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  uint64_t v14 = v28;
  uint64_t v32 = v26;
  uint64_t v33 = v27;
  uint64_t v29 = sub_100053548;
  uint64_t v30 = &v31;
  uint64_t v15 = dispatch thunk of _AnySequenceBox._map<A>(_:)();
  if (v14)
  {
    uint64_t v34 = v14;
    sub_10000AC7C(&qword_100127400);
    swift_willThrowTypedImpl();
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v44);
  swift_release();
  return v15;
}

uint64_t sub_100052938@<X0>(uint64_t a1@<X2>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100053A54(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void *sub_100052968@<X0>(uint64_t a1@<X0>, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = a2(&v9, a1, &v8);
  if (v3)
  {
    uint64_t v6 = v8;
    sub_10000AC7C(&qword_100127400);
    uint64_t result = (void *)swift_allocError();
    *unint64_t v7 = v6;
  }
  else
  {
    *a3 = v9;
  }
  return result;
}

void sub_1000529E4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x100053194);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  __int16 v7 = *(_WORD *)(a1 + 40);
  sub_10008854C(v6, v7);
  if (v2) {
    return;
  }
  if (v8[1] != 4)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v11 = 55;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = 0xE000000000000000;
    *(void *)(v11 + 24) = 0xD000000000000024;
    *(void *)(v11 + 32) = 0x80000001000E3960;
    *(void *)(v11 + 40) = 0xD000000000000020;
    *(void *)(v11 + 48) = 0x80000001000E3720;
    uint64_t v12 = 77;
    goto LABEL_39;
  }
  if (v8[5] != 1)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v11 = 56;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = 0xE000000000000000;
    *(void *)(v11 + 24) = 0xD000000000000024;
    *(void *)(v11 + 32) = 0x80000001000E3960;
    *(void *)(v11 + 40) = 0xD000000000000020;
    *(void *)(v11 + 48) = 0x80000001000E3720;
    uint64_t v12 = 79;
    goto LABEL_39;
  }
  if (v8[6] != 1)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v11 = 57;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = 0xE000000000000000;
    *(void *)(v11 + 24) = 0xD000000000000024;
    *(void *)(v11 + 32) = 0x80000001000E3960;
    *(void *)(v11 + 40) = 0xD000000000000020;
    *(void *)(v11 + 48) = 0x80000001000E3720;
    uint64_t v12 = 81;
    goto LABEL_39;
  }
  uint64_t v32 = v8;
  uint64_t v33 = a2;
  int v31 = v8[7];
  long long v46 = &_swiftEmptySetSingleton;
  uint64_t v45 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRetain();
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v9 = 0;
  uint64_t v41 = 0;
  unsigned __int8 v35 = 0;
  unsigned __int8 v36 = 0;
  uint64_t v39 = 0;
  unint64_t v10 = (unsigned __int8 *)(a1 + 41);
  char v40 = _swiftEmptyArrayStorage;
  uint64_t v34 = 0x100000001;
  while (2)
  {
    uint64_t v13 = v9;
    uint64_t v14 = *(void *)(v10 - 9);
    int v15 = *v10;
    __int16 v16 = *(v10 - 1) | (unsigned __int16)((_WORD)v15 << 8);
    if (_s9AUASDCore13USBDescriptorO21__derived_enum_equalsySbAC_ACtFZ_0(v14, v16, v6, v7)) {
      goto LABEL_10;
    }
    int v17 = v15 - 17;
    uint64_t v9 = v14;
    switch(v17)
    {
      case 0:
        if (IOUSBGetEndpointType((const IOUSBEndpointDescriptor *)v14) != 3)
        {
          sub_10005B1DC(v44, 54);
          goto LABEL_10;
        }
        if (*(unsigned char *)v14 != 7 && v31 != 0) {
          sub_10005B1DC(v44, 31);
        }
        goto LABEL_22;
      case 1:
        if (IOUSBGetEndpointType((const IOUSBEndpointDescriptor *)v14) != 3)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10000CD54();
          swift_allocError();
          *(unsigned char *)uint64_t v11 = 54;
          *(void *)(v11 + 8) = 0;
          *(void *)(v11 + 16) = 0xE000000000000000;
          *(void *)(v11 + 24) = 0xD000000000000024;
          *(void *)(v11 + 32) = 0x80000001000E3960;
          *(void *)(v11 + 40) = 0xD000000000000020;
          *(void *)(v11 + 48) = 0x80000001000E3720;
          uint64_t v12 = 113;
          goto LABEL_39;
        }
        uint64_t v34 = 0;
        unsigned __int8 v35 = *(unsigned char *)(v14 + 7);
        unsigned __int8 v36 = *(unsigned char *)(v14 + 8);
LABEL_22:
        uint64_t v9 = v13;
        uint64_t v38 = v14;
        goto LABEL_11;
      case 2:
        goto LABEL_11;
      case 3:
        uint64_t v37 = v14;
        goto LABEL_10;
      case 7:
        if (*(_WORD *)(v14 + 3) == 256) {
          goto LABEL_10;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v11 = 58;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0xE000000000000000;
        *(void *)(v11 + 24) = 0xD000000000000024;
        *(void *)(v11 + 32) = 0x80000001000E3960;
        *(void *)(v11 + 40) = 0xD000000000000020;
        *(void *)(v11 + 48) = 0x80000001000E3720;
        uint64_t v12 = 97;
        goto LABEL_39;
      case 15:
        if (*(_WORD *)(v14 + 3) == 512)
        {
          LOBYTE(v39) = *(unsigned char *)(v14 + 8) | v39;
          char v21 = *(unsigned char *)(v14 + 5);
LABEL_34:
          BYTE4(v39) = v21;
LABEL_10:
          uint64_t v9 = v13;
LABEL_11:
          v10 += 16;
          if (!--v3)
          {
            swift_bridgeObjectRelease();
            if (v38)
            {
              unint64_t v23 = sub_10005AD1C((uint64_t)v46);
              swift_bridgeObjectRelease();
              if (!v23[2])
              {
                swift_release();
                unint64_t v23 = 0;
              }
              uint64_t v24 = v37;
              uint64_t v25 = 0;
              if ((v34 & 0x100000000) != 0) {
                uint64_t v26 = 256;
              }
              else {
                uint64_t v26 = 0;
              }
              unint64_t v27 = v26 & 0xFFFFFFFFFFFFFF00 | v35;
              if (v34) {
                uint64_t v28 = 256;
              }
              else {
                uint64_t v28 = 0;
              }
              unint64_t v29 = v28 & 0xFFFFFFFFFFFFFF00 | v36;
            }
            else
            {
              swift_bridgeObjectRelease();
              uint64_t v9 = 0;
              uint64_t v24 = 0;
              unint64_t v27 = 0;
              unint64_t v29 = 0;
              unint64_t v23 = 0;
              uint64_t v25 = 1;
            }
            uint64_t v30 = sub_10005AD1C((uint64_t)v45);
            swift_bridgeObjectRelease();
            if (!v30[2])
            {
              swift_release();
              uint64_t v30 = 0;
            }
            *(void *)uint64_t v33 = v32;
            *(void *)(v33 + 8) = v40;
            *(unsigned char *)(v33 + 16) = BYTE4(v39);
            *(unsigned char *)(v33 + 17) = v39 & 1;
            *(void *)(v33 + 24) = v41;
            *(void *)(v33 + 32) = v30;
            *(void *)(v33 + 40) = v38;
            *(void *)(v33 + 48) = v9;
            *(void *)(v33 + 56) = v24;
            *(void *)(v33 + 64) = v27;
            *(void *)(v33 + 72) = 0;
            *(void *)(v33 + 80) = 0;
            *(void *)(v33 + 88) = v29;
            *(void *)(v33 + 96) = v25;
            *(void *)(v33 + 104) = 0;
            *(void *)(v33 + 112) = v23;
            return;
          }
          continue;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v11 = 58;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0xE000000000000000;
        *(void *)(v11 + 24) = 0xD000000000000024;
        *(void *)(v11 + 32) = 0x80000001000E3960;
        *(void *)(v11 + 40) = 0xD000000000000020;
        *(void *)(v11 + 48) = 0x80000001000E3720;
        uint64_t v12 = 99;
LABEL_39:
        *(void *)(v11 + 56) = v12;
        swift_willThrow();
        return;
      case 28:
        char v21 = *(unsigned char *)(v14 + 3);
        goto LABEL_34;
      case 58:
        swift_bridgeObjectRelease();
        sub_1000D04C8((unsigned char *)v14, v16);
        uint64_t v41 = v22;
        goto LABEL_10;
      default:
        sub_100088794((unsigned char *)v14, v16, (uint64_t)&v42);
        if (v43)
        {
          sub_10000CF6C(&v42, (uint64_t)v44);
          sub_10001A9B8((uint64_t)v44, (uint64_t)&v42);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v40 = sub_10005944C(0, v40[2] + 1, 1, v40);
          }
          unint64_t v20 = v40[2];
          unint64_t v19 = v40[3];
          if (v20 >= v19 >> 1) {
            char v40 = sub_10005944C((void *)(v19 > 1), v20 + 1, 1, v40);
          }
          v40[2] = v20 + 1;
          sub_10000CF6C(&v42, (uint64_t)&v40[5 * v20 + 4]);
          sub_10001ABC4((uint64_t)v44);
        }
        else
        {
          sub_10001A918((uint64_t)&v42, &qword_100128940);
          sub_10002E81C(0xD000000000000030, 0x80000001000E3990, 0xD000000000000024, (void *)0x80000001000E3960, 0xD000000000000020, 0x80000001000E3720, 143);
          sub_10005B1DC(v44, 33);
        }
        goto LABEL_10;
    }
  }
}

uint64_t sub_100053280(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_1000543F4();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    char v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      unsigned int v5 = *v4++;
      sub_10005B1DC(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

void *sub_1000532F4(uint64_t a1, uint64_t a2)
{
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (*((void *)&v16 + 1))
  {
    char v4 = _swiftEmptyArrayStorage;
    while (1)
    {
      *(_OWORD *)int v15 = *(_OWORD *)&v15[7];
      *(_OWORD *)&_OWORD v15[2] = *(_OWORD *)&v15[9];
      *(_OWORD *)&v15[4] = v16;
      sub_10001D428(v15, a2, (uint64_t)&v12);
      if (v2) {
        break;
      }
      sub_10001A918((uint64_t)v15, &qword_100128910);
      if (*((void *)&v13 + 1))
      {
        long long v9 = v12;
        long long v10 = v13;
        uint64_t v11 = v14;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v4 = sub_100058AE8(0, v4[2] + 1, 1, v4);
        }
        unint64_t v6 = v4[2];
        unint64_t v5 = v4[3];
        if (v6 >= v5 >> 1) {
          char v4 = sub_100058AE8((void *)(v5 > 1), v6 + 1, 1, v4);
        }
        v4[2] = v6 + 1;
        uint64_t v7 = &v4[5 * v6];
        v7[8] = v11;
        *((_OWORD *)v7 + 2) = v9;
        *((_OWORD *)v7 + 3) = v10;
      }
      else
      {
        sub_10001A918((uint64_t)&v12, &qword_100127D98);
      }
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (!*((void *)&v16 + 1)) {
        goto LABEL_14;
      }
    }
    sub_10001A918((uint64_t)v15, &qword_100128910);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v4 = _swiftEmptyArrayStorage;
  }
LABEL_14:
  swift_release();
  return v4;
}

uint64_t sub_1000534AC()
{
  return _swift_deallocObject(v0, 44, 7);
}

uint64_t sub_1000534BC()
{
  return _swift_deallocObject(v0, 50, 7);
}

unint64_t sub_1000534CC()
{
  unint64_t result = qword_100128928;
  if (!qword_100128928)
  {
    sub_10001A584(&qword_100128920);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128928);
  }
  return result;
}

uint64_t sub_100053538()
{
  return _swift_deallocObject(v0, 52, 7);
}

void *sub_100053548@<X0>(void *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr, void, void, void *))(v3 + 16))(&v8, *a1, a1[1], a1 + 2);
  if (v4) {
    *a2 = v4;
  }
  else {
    *a3 = v8;
  }
  return result;
}

void *sub_1000535A8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100052968(a1, *(void *(**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(v2 + 16), a2);
}

void *sub_1000535C4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v10 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v11 = _swiftEmptyArrayStorage;
    unsigned int v31 = a4 & 1;
    while (1)
    {
      sub_10001A9B8(v10, (uint64_t)v23);
      sub_10000AC7C(&qword_100128948);
      sub_10000AC7C(&qword_100127EC0);
      if (swift_dynamicCast())
      {
        sub_10000CF6C(&v20, (uint64_t)v24);
        uint64_t v12 = v25;
        uint64_t v13 = v26;
        sub_10001A974(v24, v25);
        uint64_t v14 = v5;
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, void, uint64_t, uint64_t))(v13 + 24))(&v27, a2, a3, v31, v12, v13);
      }
      else
      {
        uint64_t v22 = 0;
        long long v20 = 0u;
        long long v21 = 0u;
        sub_10001A918((uint64_t)&v20, &qword_100127EB0);
        sub_10001A9B8(v10, (uint64_t)v23);
        sub_10000AC7C(&qword_100128958);
        if ((swift_dynamicCast() & 1) == 0)
        {
          uint64_t v22 = 0;
          long long v20 = 0u;
          long long v21 = 0u;
          sub_10001A918((uint64_t)&v20, &qword_100128960);
          long long v27 = 0u;
          long long v28 = 0u;
          uint64_t v29 = 0;
          goto LABEL_4;
        }
        sub_10000CF6C(&v20, (uint64_t)v24);
        uint64_t v15 = v25;
        uint64_t v16 = v26;
        sub_10001A974(v24, v25);
        uint64_t v14 = v5;
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 16))(&v27, a2, a3, v15, v16);
      }
      uint64_t v5 = v14;
      if (v14)
      {
        sub_10001ABC4((uint64_t)v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v11;
      }
      sub_10001ABC4((uint64_t)v24);
      if (*((void *)&v28 + 1))
      {
        sub_10000CF6C(&v27, (uint64_t)v30);
        sub_10000CF6C(v30, (uint64_t)&v27);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v11 = sub_1000596CC(0, v11[2] + 1, 1, v11);
        }
        unint64_t v18 = v11[2];
        unint64_t v17 = v11[3];
        if (v18 >= v17 >> 1) {
          uint64_t v11 = sub_1000596CC((void *)(v17 > 1), v18 + 1, 1, v11);
        }
        long long v11[2] = v18 + 1;
        sub_10000CF6C(&v27, (uint64_t)&v11[5 * v18 + 4]);
        goto LABEL_5;
      }
LABEL_4:
      sub_10001A918((uint64_t)&v27, &qword_100127E98);
LABEL_5:
      v10 += 40;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        return v11;
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

void sub_100053894(char *a1, char a2)
{
  uint64_t v4 = v2;
  sub_10005415C(v2 + 24, (uint64_t)v17, &qword_100128950);
  sub_10005415C((uint64_t)v17, (uint64_t)&v18, &qword_100128950);
  if (v18)
  {
    uint64_t v7 = sub_10004EC88((uint64_t)a1);
    if (v3) {
      return;
    }
    uint64_t v8 = (uint64_t)v7;
  }
  else
  {
    uint64_t v8 = *(void *)(v2 + 8);
    swift_bridgeObjectRetain();
  }
  uint64_t v9 = *(void *)&a1[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
  if (v9 && sub_10001925C(22, v9)) {
    char v10 = 0;
  }
  else {
    char v10 = *(unsigned char *)(v4 + 17);
  }
  uint64_t v11 = a1;
  sub_100035ECC((void *)v4);
  uint64_t v12 = sub_1000535C4(v8, (uint64_t)v11, v4, v10);
  sub_100035FC8((void *)v4);
  swift_bridgeObjectRelease();

  if (!v3)
  {
    if (*(unsigned char *)(*(void *)v4 + 8))
    {
      uint64_t v13 = *(char **)&v11[OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject];
      if (v13)
      {
        uint64_t v13 = (char *)sub_1000C545C(*(unsigned __int8 *)(*(void *)v4 + 8));
        unint64_t v15 = v14;
LABEL_15:
        type metadata accessor for ActiveControlInterface();
        swift_allocObject();
        uint64_t v16 = v11;
        sub_100035ECC((void *)v4);
        sub_10008E800(v4, v16, a2 & 1, (uint64_t)v12, v13, v15);
        return;
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    unint64_t v15 = 0;
    goto LABEL_15;
  }
}

uint64_t sub_100053A54(uint64_t a1)
{
  sub_10001A1C8(a1, (uint64_t)v3);
  if (swift_dynamicCast()) {
    return v3[46];
  }
  sub_10000CD54();
  swift_allocError();
  *(unsigned char *)uint64_t v2 = 4;
  *(void *)(v2 + 8) = 0;
  *(void *)(v2 + 16) = 0xE000000000000000;
  *(void *)(v2 + 24) = 0xD000000000000014;
  *(void *)(v2 + 32) = 0x80000001000E36C0;
  *(void *)(v2 + 40) = 0xD00000000000001CLL;
  *(void *)(v2 + 48) = 0x80000001000E36E0;
  *(void *)(v2 + 56) = 58;
  return swift_willThrow();
}

uint64_t sub_100053B2C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 68, 7);
}

uint64_t sub_100053B64(uint64_t a1)
{
  return a1;
}

uint64_t sub_100053B90()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100053BD8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100053C04()
{
  return sub_100053C48(80);
}

uint64_t sub_100053C0C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100053C40()
{
  return sub_100053C48(64);
}

uint64_t sub_100053C48(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100053C94()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_100053CCC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100053CF8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100053D48(uint64_t a1)
{
  return a1;
}

uint64_t sub_100053D9C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100053DDC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100053E2C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100053E84()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_100053ED4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100053F28()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_100053F70(uint64_t a1)
{
  return a1;
}

uint64_t sub_100053FB8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100053FF8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100054030()
{
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 96);
  if (v1 >> 60 != 15) {
    sub_100038688(*(void *)(v0 + 88), v1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t sub_100054090(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  unint64_t v3 = *(void *)(a1 + 80);
  swift_bridgeObjectRetain();
  sub_1000540F0(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000540F0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100054104(a1, a2);
  }
  return a1;
}

uint64_t sub_100054104(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_10005415C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000AC7C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000541C0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100038688(a1, a2);
  }
  return a1;
}

uint64_t sub_1000541D4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10000AC7C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t sub_100054238()
{
  unint64_t result = qword_100128970;
  if (!qword_100128970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128970);
  }
  return result;
}

unint64_t sub_10005428C()
{
  unint64_t result = qword_100128978;
  if (!qword_100128978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128978);
  }
  return result;
}

uint64_t sub_1000542E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 168);
  unint64_t v3 = *(void *)(a1 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000540F0(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100054368(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 168);
  unint64_t v3 = *(void *)(a1 + 176);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000541C0(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1000543F4()
{
  unint64_t result = qword_100128980;
  if (!qword_100128980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128980);
  }
  return result;
}

uint64_t sub_100054448()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 112) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return _swift_deallocObject(v0, 136, 7);
}

unint64_t ActiveEntity.name.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 8))(&v14);
  uint64_t v4 = v15;
  uint64_t v5 = v16;
  sub_10001A974(&v14, v15);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  if (BYTE2(v6) != 255)
  {
    int v8 = v6;
    sub_10001ABC4((uint64_t)&v14);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2))
    {
      uint64_t v10 = v9;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(ObjectType, v10);
      swift_unknownObjectRelease();
      if (!v12) {
        return 0;
      }
      if (*(void *)&v12[OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject])
      {
        unint64_t v7 = sub_1000C545C(v8 & 0x1FFFF);

        return v7;
      }
    }
    return 0;
  }
  sub_10001ABC4((uint64_t)&v14);
  return 0;
}

double ActiveDataEntity.source.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(uint64_t (**)(void))(*(void *)(a2 + 8) + 16))())
  {
    uint64_t v7 = v6;
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a2 + 16))(&v17, a1, a2);
    uint64_t v8 = *((void *)&v18 + 1);
    uint64_t v9 = v19;
    sub_10001A974(&v17, *((uint64_t *)&v18 + 1));
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
    if (v11) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = v10;
    }
    uint64_t ObjectType = swift_getObjectType();
    sub_10001ABC4((uint64_t)&v17);
    sub_1000317E8(v12, ObjectType, v7, (uint64_t)&v17);
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
  }
  sub_100038620((uint64_t)&v17, (uint64_t)v15);
  if (!v16)
  {
    sub_10001A918((uint64_t)v15, &qword_100127E98);
    goto LABEL_11;
  }
  sub_10000AC7C(&qword_100127B28);
  sub_10000AC7C(&qword_100127B30);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t ActiveDataEntity.nameStringIndex.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 16))(v5);
  uint64_t v2 = v6;
  uint64_t v3 = v7;
  sub_10001A974(v5, v6);
  LODWORD(v2) = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 8) + 32))(v2);
  sub_10001ABC4((uint64_t)v5);
  return v2 & 0xFFFFFF;
}

uint64_t sub_1000548C8(uint64_t a1, uint64_t a2)
{
  return ActiveDataEntity.sourceID.getter(a1, a2);
}

uint64_t ActiveDataEntity.sourceID.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 16))(v6);
  uint64_t v2 = v7;
  uint64_t v3 = v8;
  sub_10001A974(v6, v7);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  sub_10001ABC4((uint64_t)v6);
  return v4;
}

uint64_t sub_100054970(uint64_t a1)
{
  return ActiveDataEntity.entityID.getter(a1, (uint64_t)&protocol witness table for ActiveMixerUnit);
}

uint64_t ActiveDataEntity.entityID.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 16))(v6);
  uint64_t v2 = v7;
  uint64_t v3 = v8;
  sub_10001A974(v6, v7);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 8) + 16))(v2);
  sub_10001ABC4((uint64_t)v6);
  return v4;
}

uint64_t sub_1000549FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ActiveEntity.start(on:)(a1, a2, a3, a4);
}

uint64_t ActiveEntity.start(on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 24);
  uint64_t v8 = swift_unknownObjectRetain();
  return v7(v8, a2, a3, a4);
}

void sub_100054A78(AUASDCore::AUAInterruptAttribute_optional a1, Swift::UInt_optional a2, Swift::UInt_optional a3)
{
  a2.is_nil &= 1u;
  a3.is_nil &= 1u;
  ActiveEntity.processInterrupt(attribute:controlSelector:channelNumber:)(a1, a2, a3);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveEntity.processInterrupt(attribute:controlSelector:channelNumber:)(AUASDCore::AUAInterruptAttribute_optional attribute, Swift::UInt_optional controlSelector, Swift::UInt_optional channelNumber)
{
  if (attribute.value == AUASDCore_AUAInterruptAttribute_unknownDefault
    || controlSelector.is_nil
    || channelNumber.is_nil
    || controlSelector.value == 0)
  {
    sub_100055240(v3, v4);
  }
  else
  {
    (*(void (**)(void))(v4 + 88))();
  }
}

void sub_100054B00(AUASDCore::AUAInterruptAttribute a1, Swift::UInt a2, Swift::UInt a3)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActiveEntity.processTargetedInterrupt(attribute:controlSelector:channelNumber:)(AUASDCore::AUAInterruptAttribute attribute, Swift::UInt controlSelector, Swift::UInt channelNumber)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v7 = (void *)0xEE00656369766564;
  uint64_t v23 = 0;
  uint64_t v24 = 0xE000000000000000;
  uint64_t v8 = 0x206E776F6E6B6E55;
  _StringGuts.grow(_:)(91);
  v9._object = (void *)0x80000001000E39D0;
  v9._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v9);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v6, v5))
  {
    uint64_t v11 = v10;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(ObjectType, v11);
    swift_unknownObjectRelease();
    if (v13)
    {
      id v14 = objc_msgSend(v13, "boxName", 0, 0xE000000000000000);

      if (v14)
      {
        uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v7 = v15;
      }
    }
  }
  v16._countAndFlagsBits = v8;
  v16._object = v7;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0xD000000000000019;
  v17._object = (void *)0x80000001000E39F0;
  String.append(_:)(v17);
  _print_unlocked<A, B>(_:_:)();
  v18._countAndFlagsBits = 0xD000000000000010;
  v18._object = (void *)0x80000001000E3A10;
  String.append(_:)(v18);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x6C656E6E61686320;
  v20._object = (void *)0xEE007265626D754ELL;
  String.append(_:)(v20);
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  sub_10002E81C(v23, v24, 0xD000000000000042, (void *)0x80000001000E2C80, 0xD00000000000001CLL, 0x80000001000E23B0, 115);
  swift_bridgeObjectRelease();
  sub_10000CD54();
  swift_allocError();
  *(unsigned char *)uint64_t v22 = 2;
  *(void *)(v22 + 8) = 0;
  *(void *)(v22 + 16) = 0xE000000000000000;
  *(void *)(v22 + 24) = 0xD000000000000042;
  *(void *)(v22 + 32) = 0x80000001000E2C80;
  *(void *)(v22 + 40) = 0xD00000000000001CLL;
  *(void *)(v22 + 48) = 0x80000001000E23B0;
  *(void *)(v22 + 56) = 116;
  swift_willThrow();
}

uint64_t ActiveDataEntity.pathName.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a2 + 8) + 56))();
  if (v5) {
    return v4;
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a2 + 24))(&v10, a1, a2);
  if (v11)
  {
    sub_10000CF6C(&v10, (uint64_t)v12);
    uint64_t v7 = v13;
    uint64_t v8 = v14;
    sub_10001A974(v12, v13);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 56))(v7, v8);
    sub_10001ABC4((uint64_t)v12);
  }
  else
  {
    sub_10001A918((uint64_t)&v10, &qword_100127B38);
    return 0x206E776F6E6B6E55;
  }
  return v6;
}

uint64_t sub_100054F1C(uint64_t a1)
{
  return ActiveDataEntity.entityID.getter(a1, (uint64_t)&protocol witness table for ActiveSelectorUnit);
}

uint64_t ActiveEntity.entityID.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 8))(v6);
  uint64_t v2 = v7;
  uint64_t v3 = v8;
  sub_10001A974(v6, v7);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  sub_10001ABC4((uint64_t)v6);
  return v4;
}

void *sub_100054FB0(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  if (a3 >> 62) {
    goto LABEL_36;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v26 = v5 & 0xC000000000000001;
    uint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v8 = 4;
    uint64_t v25 = v5;
    while (1)
    {
      id v10 = v26 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v5 + 8 * v8);
      uint64_t v11 = v10;
      uint64_t v5 = v8 - 3;
      if (__OFADD__(v8 - 4, 1)) {
        break;
      }
      id v29 = v10;
      a1(&v28, &v29);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v7;
      }

      uint64_t v12 = v28;
      uint64_t v13 = *(void *)(v28 + 16);
      int64_t v14 = v7[2];
      int64_t v15 = v14 + v13;
      if (__OFADD__(v14, v13)) {
        goto LABEL_32;
      }
      uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && v15 <= v7[3] >> 1)
      {
        if (*(void *)(v12 + 16)) {
          goto LABEL_20;
        }
      }
      else
      {
        if (v14 <= v15) {
          int64_t v17 = v14 + v13;
        }
        else {
          int64_t v17 = v14;
        }
        uint64_t v7 = sub_1000592F4(isUniquelyReferenced_nonNull_native, v17, 1, v7);
        if (*(void *)(v12 + 16))
        {
LABEL_20:
          uint64_t v18 = v7[2];
          if ((v7[3] >> 1) - v18 < v13) {
            goto LABEL_34;
          }
          unint64_t v19 = (unint64_t)&v7[5 * v18 + 4];
          if (v12 + 32 < v19 + 40 * v13 && v19 < v12 + 32 + 40 * v13)
          {
            double result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          sub_10000AC7C(&qword_100128598);
          swift_arrayInitWithCopy();
          if (v13)
          {
            uint64_t v21 = v7[2];
            BOOL v22 = __OFADD__(v21, v13);
            uint64_t v23 = v21 + v13;
            if (v22) {
              goto LABEL_35;
            }
            v7[2] = v23;
          }
          goto LABEL_5;
        }
      }
      if (v13) {
        goto LABEL_33;
      }
LABEL_5:
      swift_bridgeObjectRelease();
      ++v8;
      BOOL v9 = v5 == v6;
      uint64_t v5 = v25;
      if (v9)
      {
        swift_bridgeObjectRelease();
        return v7;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void sub_100055240(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v7 = (void *)0xEE00656369766564;
  uint64_t v8 = 0x206E776F6E6B6E55;
  uint64_t v48 = 0;
  uint64_t v49 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  BOOL v9 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 16);
  uint64_t v47 = v2;
  *(void *)&long long v46 = a1;
  if (v9(a1, a2))
  {
    uint64_t v11 = v10;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(ObjectType, v11);
    swift_unknownObjectRelease();
    if (v13)
    {
      id v14 = [v13 boxName];

      if (v14)
      {
        uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v7 = v15;
      }
    }
  }
  v16._countAndFlagsBits = v8;
  v16._object = v7;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0xD00000000000001FLL;
  v17._object = (void *)0x80000001000E3BE0;
  String.append(_:)(v17);
  uint64_t v52 = (*(uint64_t (**)(void, uint64_t))(a2 + 48))(v46, a2);
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  unint64_t v42 = (unint64_t)" retrieving entity name";
  sub_10002E804(v48, v49, 0xD00000000000001BLL, (void *)0x80000001000E3C00, 0xD00000000000001CLL, 0x80000001000E23B0, 124);
  swift_bridgeObjectRelease();
  if (v9(v46, a2))
  {
    uint64_t v20 = v19;
    uint64_t v21 = swift_getObjectType();
    BOOL v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 16))(v21, v20);
    swift_unknownObjectRelease();
    if (v22)
    {
      id v23 = [v22 audioDevices];

      if (v23)
      {
        sub_10000CECC(0, &qword_100128590);
        unint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        __chkstk_darwin(v25);
        v41[2] = v46;
        v41[3] = a2;
        v41[4] = v47;
        unint64_t v26 = sub_100054FB0((void (*)(uint64_t *__return_ptr, id *))sub_1000582C0, (uint64_t)v41, v24);
        swift_bridgeObjectRelease();
        uint64_t v27 = v26[2];
        if (v27)
        {
          uint64_t v28 = v26;
          uint64_t v29 = (uint64_t)(v26 + 4);
          v41[6] = v28;
          swift_bridgeObjectRetain();
          p_ivar_base_size = &AUACustomNumberProperty.ivar_base_size;
          *(void *)&long long v31 = 136446210;
          long long v46 = v31;
          uint64_t v44 = 0x80000001000E3C20;
          uint64_t v45 = 0xD00000000000001ALL;
          v42 |= 0x8000000000000000;
          uint64_t v43 = (void *)0x80000001000E3C00;
          v41[7] = (char *)&type metadata for Any + 8;
          do
          {
            sub_10001A9B8(v29, (uint64_t)&v48);
            uint64_t v32 = v50;
            uint64_t v33 = v51;
            sub_10001A974(&v48, v50);
            (*(void (**)(uint64_t, uint64_t))(v33 + 24))(v32, v33);
            if (v4)
            {
              if (*((void *)p_ivar_base_size + 286) != -1) {
                swift_once();
              }
              uint64_t v4 = 0;
              uint64_t v34 = type metadata accessor for Logger();
              sub_10000AD60(v34, (uint64_t)qword_10012B1F8);
              unsigned __int8 v35 = Logger.logObject.getter();
              os_log_type_t v36 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v35, v36))
              {
                uint64_t v37 = swift_slowAlloc();
                uint64_t v47 = 0;
                uint64_t v38 = v37;
                uint64_t v52 = swift_slowAlloc();
                *(_DWORD *)uint64_t v38 = v46;
                uint64_t v39 = sub_10002E8A0(v45, v44, 0xD00000000000001BLL, v43);
                *(void *)(v38 + 4) = sub_1000192BC(v39, v40, &v52);
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v35, v36, "%{public}s", (uint8_t *)v38, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                p_ivar_base_size = (_DWORD *)(&AUACustomNumberProperty + 8);
                uint64_t v4 = v47;
                swift_slowDealloc();
              }

              swift_errorRelease();
            }
            else
            {
              uint64_t v4 = 0;
            }
            sub_10001ABC4((uint64_t)&v48);
            v29 += 40;
            --v27;
          }
          while (v27);
          swift_bridgeObjectRelease_n();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
    }
  }
}

id sub_100055788@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  id result = [*a1 controls];
  if (result)
  {
    uint64_t v10 = result;
    sub_10000CECC(0, &qword_100127B20);
    unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    __chkstk_darwin(v12);
    void v14[2] = a3;
    v14[3] = a4;
    v14[4] = a2;
    uint64_t v13 = sub_10001E758((void (*)(long long *__return_ptr, id *))sub_1000582E0, (uint64_t)v14, v11);
    id result = (id)swift_bridgeObjectRelease();
    *a5 = v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100055884@<X0>(id *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  id v14 = *a1;
  sub_10000CECC(0, &qword_100127B20);
  id v7 = v14;
  sub_10000AC7C(&qword_100128598);
  if (swift_dynamicCast())
  {
    sub_10000CF6C(v12, (uint64_t)v15);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    sub_10001A974(v15, v16);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
    if (v10 == (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3))
    {
      sub_10001A9B8((uint64_t)v15, a4);
    }
    else
    {
      *(void *)(a4 + 32) = 0;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
    }
    return sub_10001ABC4((uint64_t)v15);
  }
  else
  {
    uint64_t v13 = 0;
    memset(v12, 0, sizeof(v12));
    uint64_t result = sub_10001A918((uint64_t)v12, &qword_100128048);
    *(void *)(a4 + 32) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1000559E0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v6 = (*(uint64_t (**)(void))(a2 + 40))();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  if (!v7)
  {
    uint64_t v75 = 0;
    memset(v74, 0, sizeof(v74));
    sub_10001A918((uint64_t)v74, &qword_100128040);
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v35 = 1;
    *(void *)(v35 + 8) = 0;
    *(void *)(v35 + 16) = 0xE000000000000000;
    *(void *)(v35 + 24) = 0xD000000000000010;
    *(void *)(v35 + 32) = 0x80000001000E3BC0;
    *(void *)(v35 + 40) = 0xD00000000000001CLL;
    *(void *)(v35 + 48) = 0x80000001000E23B0;
    *(void *)(v35 + 56) = 159;
    swift_willThrow();
    return v2;
  }
  uint64_t v9 = v7;
  uint64_t v10 = v8;
  int v11 = (v6 << 8) | 0xC20080;
  uint64_t ObjectType = swift_getObjectType();
  v73[3] = a1;
  v73[4] = a2;
  uint64_t v13 = sub_10002D9D4(v73);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(v13, v2, a1);
  uint64_t v2 = v9;
  ActiveFunction.getRawCur(forControl:onEntity:onChannel:)(v11, (uint64_t)v73, 0, ObjectType, v10, (uint64_t)v74);
  swift_unknownObjectRelease();
  sub_10001ABC4((uint64_t)v73);
  if (v3) {
    return v2;
  }
  uint64_t v67 = 0;
  sub_10000CF6C(v74, (uint64_t)v76);
  uint64_t v14 = v77;
  uint64_t v15 = v78;
  uint64_t v16 = sub_10001A974(v76, v77);
  uint64_t v69 = v59;
  uint64_t v17 = *(void **)(v14 - 8);
  Swift::String v18 = (unsigned char *)v17[8];
  __chkstk_darwin(v16);
  unint64_t v19 = (unint64_t)(v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v20 = (void (*)(unsigned char *))v17[2];
  v20(&v59[-v19]);
  uint64_t v21 = *(void *)(v15 + 8);
  uint64_t v22 = dispatch thunk of static BinaryInteger.isSigned.getter();
  char v23 = v22;
  uint64_t v68 = v59;
  char v70 = v18;
  unint64_t v24 = (void (*)(unsigned char *, unsigned char *, uint64_t))v20;
  uint64_t v25 = v14;
  __chkstk_darwin(v22);
  Swift::Int v71 = &v59[-v19];
  uint64_t v79 = v17 + 2;
  v24(&v59[-v19], &v59[-v19], v14);
  uint64_t v72 = v21;
  if ((v23 & 1) == 0)
  {
    uint64_t v27 = (void (*)(unsigned char *, uint64_t))v17[1];
    v27(&v59[-v19], v14);
    uint64_t v29 = v17;
    goto LABEL_11;
  }
  uint64_t v26 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v27 = (void (*)(unsigned char *, uint64_t))v17[1];
  uint64_t v28 = ((uint64_t (*)(unsigned char *, uint64_t))v27)(&v59[-v19], v14);
  uint64_t v29 = v17;
  if (v26 <= 64)
  {
LABEL_11:
    long long v31 = v70;
    os_log_type_t v36 = v71;
    goto LABEL_26;
  }
  uint64_t v66 = v17 + 1;
  uint64_t v30 = v59;
  long long v31 = v70;
  __chkstk_darwin(v28);
  uint64_t v32 = &v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24(v32, v71, v14);
  *(void *)&v74[0] = 0x8000000000000000;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    uint64_t v33 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v33 >= 64)
    {
      char v63 = v59;
      char v65 = v29;
      __chkstk_darwin(v33);
      sub_100020748();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v34 = dispatch thunk of static Comparable.< infix(_:_:)();
      v27(&v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v25);
      v27(&v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v25);
      uint64_t v29 = v65;
      uint64_t v30 = v63;
      goto LABEL_15;
    }
  }
  else
  {
    char v37 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v64 = &v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
    uint64_t v38 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v37)
    {
      char v65 = v29;
      if (v38 <= 64) {
        goto LABEL_21;
      }
      char v63 = v59;
      __chkstk_darwin(v38);
      sub_100020748();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      uint64_t v39 = v64;
      char v34 = dispatch thunk of static Comparable.< infix(_:_:)();
      v27(&v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v25);
      v27(v39, v25);
      uint64_t v29 = v65;
LABEL_15:
      os_log_type_t v36 = v71;
      if (v34) {
        goto LABEL_20;
      }
      goto LABEL_26;
    }
    if (v38 >= 64)
    {
      v27(v64, v14);
      os_log_type_t v36 = v71;
      goto LABEL_26;
    }
    uint64_t v32 = v64;
  }
  uint64_t v40 = dispatch thunk of BinaryInteger._lowWord.getter();
  v27(v32, v25);
  os_log_type_t v36 = v71;
  if (v40 < *(uint64_t *)&v74[0])
  {
LABEL_20:
    do
    {
      __break(1u);
LABEL_21:
      char v63 = v30;
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      char v62 = v59;
      __chkstk_darwin(AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      uint64_t v42 = dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
      uint64_t v61 = v59;
      __chkstk_darwin(v42);
      unint64_t v43 = (unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
      uint64_t v44 = v64;
      int v60 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v45 = ((uint64_t (*)(unsigned char *, uint64_t))v27)(&v59[-v43], v25);
      char v62 = v59;
      __chkstk_darwin(v45);
      uint64_t v46 = (uint64_t)&v59[-v43];
      ((void (*)(unsigned char *, unsigned char *, uint64_t))v65[4])(&v59[-v43], v44, v25);
      if (v60) {
        goto LABEL_41;
      }
      uint64_t v47 = *(void *)&v74[0];
      uint64_t v48 = dispatch thunk of BinaryInteger._lowWord.getter();
      v27((unsigned char *)v46, v25);
      BOOL v49 = v48 < v47;
      uint64_t v29 = v65;
      os_log_type_t v36 = v71;
      uint64_t v30 = v63;
    }
    while (v49);
  }
LABEL_26:
  uint64_t v50 = dispatch thunk of BinaryInteger.bitWidth.getter();
  char v70 = v59;
  __chkstk_darwin(v50);
  v24(&v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v36, v25);
  if (v50 < 65)
  {
    uint64_t v54 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v27(&v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v25);
    if (v54 != 64) {
      goto LABEL_38;
    }
    uint64_t v51 = dispatch thunk of static BinaryInteger.isSigned.getter();
    if (v51) {
      goto LABEL_38;
    }
  }
  else
  {
    uint64_t v51 = ((uint64_t (*)(unsigned char *, uint64_t))v27)(&v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v25);
  }
  uint64_t v66 = v59;
  __chkstk_darwin(v51);
  v24(&v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v36, v25);
  *(void *)&v74[0] = 0x7FFFFFFFFFFFFFFFLL;
  char v52 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v53 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v52 & 1) == 0)
  {
    if (v53 > 63)
    {
      v73[0] = 0x7FFFFFFFFFFFFFFFLL;
      __chkstk_darwin(v53);
      long long v55 = &v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
      char v65 = v29;
      uint64_t v56 = ((uint64_t (*)(unsigned char *, unsigned char *, uint64_t))v29[4])(v55, v55, v25);
      __chkstk_darwin(v56);
      sub_100020748();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      uint64_t v46 = dispatch thunk of static Comparable.< infix(_:_:)();
      v27(v55, v25);
      os_log_type_t v36 = v71;
      v27(v55, v25);
      goto LABEL_37;
    }
LABEL_35:
    dispatch thunk of BinaryInteger._lowWord.getter();
    v27(&v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v25);
LABEL_38:
    uint64_t v57 = dispatch thunk of BinaryInteger._lowWord.getter();
    v27(v36, v25);
    uint64_t v2 = v57 / 1000000;
    sub_10001ABC4((uint64_t)v76);
    return v2;
  }
  if (v53 <= 64) {
    goto LABEL_35;
  }
  __chkstk_darwin(v53);
  sub_100020748();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  uint64_t v46 = dispatch thunk of static Comparable.< infix(_:_:)();
  v27(&v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v25);
  v27(&v59[-((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF0)], v25);
  os_log_type_t v36 = v71;
LABEL_37:
  if ((v46 & 1) == 0) {
    goto LABEL_38;
  }
  __break(1u);
LABEL_41:
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v27)(v46, v25);
  __break(1u);
  return result;
}

uint64_t ActiveDataEntity.cluster.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 24))(v11);
  sub_100057DA4((uint64_t)v11, (uint64_t)&v6);
  if (v7)
  {
    sub_10000CF6C(&v6, (uint64_t)v8);
    uint64_t v2 = v9;
    uint64_t v3 = v10;
    sub_10001A974(v8, v9);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
    sub_10001A918((uint64_t)v11, &qword_100127B38);
    sub_10001ABC4((uint64_t)v8);
  }
  else
  {
    sub_10001A918((uint64_t)v11, &qword_100127B38);
    sub_10001A918((uint64_t)&v6, &qword_100127B38);
    return 0;
  }
  return v4;
}

uint64_t ActiveExtensionUnit.staticExtensionUnit.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100057E0C(v1 + 16, a1);
}

uint64_t ActiveExtensionUnit.function.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t ActiveExtensionUnit.function.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 120) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*ActiveExtensionUnit.function.modify(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v5 = *(void *)(v1 + 120);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_10005682C;
}

uint64_t ActiveExtensionUnit.staticEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_100056860((uint64_t (*)(void))sub_100057E68, a1);
}

uint64_t ActiveExtensionUnit.staticDataEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_100056860((uint64_t (*)(void))sub_10005428C, a1);
}

uint64_t sub_100056860@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 16);
  char v5 = *(unsigned char *)(v2 + 24);
  uint64_t v6 = *(void *)(v2 + 32);
  char v7 = *(unsigned char *)(v2 + 42);
  uint64_t v8 = *(void *)(v2 + 48);
  __int16 v17 = *(_WORD *)(v2 + 56);
  __int16 v18 = *(_WORD *)(v2 + 40);
  uint64_t v9 = *(void *)(v2 + 64);
  uint64_t v16 = *(void *)(v2 + 72);
  uint64_t v10 = *(void *)(v2 + 80);
  char v15 = *(unsigned char *)(v2 + 88);
  uint64_t v12 = *(void *)(v2 + 96);
  uint64_t v11 = *(void *)(v2 + 104);
  a2[3] = (uint64_t)&type metadata for ExtensionUnit;
  a2[4] = a1();
  uint64_t v13 = swift_allocObject();
  *a2 = v13;
  *(void *)(v13 + 16) = v4;
  *(unsigned char *)(v13 + 24) = v5;
  *(void *)(v13 + 32) = v6;
  *(unsigned char *)(v13 + 42) = v7;
  *(_WORD *)(v13 + 40) = v18;
  *(void *)(v13 + 48) = v8;
  *(_WORD *)(v13 + 56) = v17;
  *(void *)(v13 + 64) = v9;
  *(void *)(v13 + 72) = v16;
  *(void *)(v13 + 80) = v10;
  *(unsigned char *)(v13 + 88) = v15;
  *(void *)(v13 + 96) = v12;
  *(void *)(v13 + 104) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t ActiveExtensionUnit.latencyControlSelector.getter()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v2 = *(void *)(v0 + 120);
    uint64_t ObjectType = swift_getObjectType();
    int v4 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v2 + 40))(ObjectType, v2);
    swift_unknownObjectRelease();
    if (v4 == 32) {
      return 5;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t ActiveExtensionUnit.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001DEAC(v0 + 112);
  return v0;
}

uint64_t ActiveExtensionUnit.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001DEAC(v0 + 112);

  return swift_deallocClassInstance();
}

uint64_t sub_100056AD0@<X0>(uint64_t *a1@<X8>)
{
  return sub_100056B00((uint64_t (*)(void))sub_10005428C, a1);
}

uint64_t sub_100056AE8@<X0>(uint64_t *a1@<X8>)
{
  return sub_100056B00((uint64_t (*)(void))sub_100057E68, a1);
}

uint64_t sub_100056B00@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  char v6 = *(unsigned char *)(*v2 + 24);
  uint64_t v7 = *(void *)(*v2 + 32);
  char v8 = *(unsigned char *)(*v2 + 42);
  uint64_t v9 = *(void *)(*v2 + 48);
  __int16 v18 = *(_WORD *)(*v2 + 56);
  __int16 v19 = *(_WORD *)(*v2 + 40);
  uint64_t v10 = *(void *)(*v2 + 64);
  uint64_t v17 = *(void *)(v4 + 72);
  uint64_t v11 = *(void *)(v4 + 80);
  char v16 = *(unsigned char *)(v4 + 88);
  uint64_t v12 = *(void *)(v4 + 96);
  uint64_t v13 = *(void *)(v4 + 104);
  a2[3] = (uint64_t)&type metadata for ExtensionUnit;
  a2[4] = a1();
  uint64_t v14 = swift_allocObject();
  *a2 = v14;
  *(void *)(v14 + 16) = v5;
  *(unsigned char *)(v14 + 24) = v6;
  *(void *)(v14 + 32) = v7;
  *(unsigned char *)(v14 + 42) = v8;
  *(_WORD *)(v14 + 40) = v19;
  *(void *)(v14 + 48) = v9;
  *(_WORD *)(v14 + 56) = v18;
  *(void *)(v14 + 64) = v10;
  *(void *)(v14 + 72) = v17;
  *(void *)(v14 + 80) = v11;
  *(unsigned char *)(v14 + 88) = v16;
  *(void *)(v14 + 96) = v12;
  *(void *)(v14 + 104) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_100056C1C()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_100056C68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  swift_beginAccess();
  *(void *)(v4 + 120) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*sub_100056CD0(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  v3[5] = *v1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v6 = *(void *)(v4 + 120);
  v3[3] = Strong;
  v3[4] = v6;
  return sub_10005682C;
}

void sub_100056D54(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 120) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t sub_100056DD8()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v3 = *(void *)(v1 + 120);
    uint64_t ObjectType = swift_getObjectType();
    LODWORD(v3) = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v3 + 40))(ObjectType, v3);
    swift_unknownObjectRelease();
    if (v3 == 32) {
      return 5;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100056E68(uint64_t a1)
{
  return ActiveDataEntity.entityID.getter(a1, (uint64_t)&protocol witness table for ActiveExtensionUnit);
}

uint64_t sub_100056E74()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001DEAC(v0 + 96);

  return swift_deallocClassInstance();
}

uint64_t sub_100056EE0@<X0>(uint64_t *a1@<X8>)
{
  return sub_100056F10((uint64_t (*)(void))sub_100054238, a1);
}

uint64_t sub_100056EF8@<X0>(uint64_t *a1@<X8>)
{
  return sub_100056F10((uint64_t (*)(void))sub_100058054, a1);
}

uint64_t sub_100056F10@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 16);
  char v6 = *(unsigned char *)(*(void *)v2 + 24);
  uint64_t v7 = *(void *)(*(void *)v2 + 32);
  char v8 = *(unsigned char *)(*(void *)v2 + 42);
  uint64_t v9 = *(void *)(*(void *)v2 + 48);
  __int16 v16 = *(_WORD *)(*(void *)v2 + 56);
  __int16 v17 = *(_WORD *)(*(void *)v2 + 40);
  uint64_t v10 = *(void *)(*(void *)v2 + 64);
  uint64_t v11 = v4[9];
  uint64_t v12 = v4[10];
  uint64_t v13 = v4[11];
  a2[3] = (uint64_t)&type metadata for ProcessingUnit;
  a2[4] = a1();
  uint64_t v14 = swift_allocObject();
  *a2 = v14;
  *(void *)(v14 + 16) = v5;
  *(unsigned char *)(v14 + 24) = v6;
  *(void *)(v14 + 32) = v7;
  *(unsigned char *)(v14 + 42) = v8;
  *(_WORD *)(v14 + 40) = v17;
  *(void *)(v14 + 48) = v9;
  *(_WORD *)(v14 + 56) = v16;
  *(void *)(v14 + 64) = v10;
  *(void *)(v14 + 72) = v11;
  *(void *)(v14 + 80) = v12;
  *(void *)(v14 + 88) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

void (*sub_10005700C(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  v3[5] = *v1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v6 = *(void *)(v4 + 104);
  v3[3] = Strong;
  v3[4] = v6;
  return sub_100021D54;
}

uint64_t sub_100057090()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v2 = *(void *)(v1 + 104);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 40))(ObjectType, v2);
    swift_unknownObjectRelease();
  }
  return 0;
}

uint64_t sub_100057114(uint64_t a1)
{
  return ActiveDataEntity.entityID.getter(a1, (uint64_t)&off_100119008);
}

uint64_t sub_100057120()
{
  swift_bridgeObjectRelease();
  sub_10001DEAC(v0 + 88);

  return swift_deallocClassInstance();
}

uint64_t sub_100057160@<X0>(uint64_t *a1@<X8>)
{
  return sub_100057190((uint64_t (*)(void))sub_1000580F8, a1);
}

uint64_t sub_100057178@<X0>(uint64_t *a1@<X8>)
{
  return sub_100057190((uint64_t (*)(void))sub_100058184, a1);
}

uint64_t sub_100057190@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  char v6 = *(unsigned char *)(*v2 + 24);
  uint64_t v7 = *(void *)(*v2 + 32);
  __int16 v16 = *(_WORD *)(*v2 + 40);
  char v8 = *(unsigned char *)(*v2 + 42);
  uint64_t v9 = *(void *)(*v2 + 48);
  __int16 v10 = *(_WORD *)(*v2 + 56);
  uint64_t v11 = *(void *)(*v2 + 64);
  uint64_t v12 = *(void *)(v4 + 72);
  uint64_t v13 = *(void *)(v4 + 80);
  a2[3] = (uint64_t)&type metadata for SampleRateConverter;
  a2[4] = a1();
  uint64_t v14 = swift_allocObject();
  *a2 = v14;
  *(void *)(v14 + 16) = v5;
  *(unsigned char *)(v14 + 24) = v6;
  *(void *)(v14 + 32) = v7;
  *(unsigned char *)(v14 + 42) = v8;
  *(_WORD *)(v14 + 40) = v16;
  *(void *)(v14 + 48) = v9;
  *(_WORD *)(v14 + 56) = v10;
  *(void *)(v14 + 64) = v11;
  *(void *)(v14 + 72) = v12;
  *(void *)(v14 + 80) = v13;

  return swift_bridgeObjectRetain();
}

uint64_t sub_100057270()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_1000572BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  swift_beginAccess();
  *(void *)(v4 + 96) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*sub_100057324(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  v3[5] = *v1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v6 = *(void *)(v4 + 96);
  v3[3] = Strong;
  v3[4] = v6;
  return sub_1000573A8;
}

void sub_1000573A8(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 96) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t sub_10005742C()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v2 = *(void *)(v1 + 96);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 40))(ObjectType, v2);
    swift_unknownObjectRelease();
  }
  return 0;
}

uint64_t sub_1000574B0(uint64_t a1)
{
  return ActiveDataEntity.entityID.getter(a1, (uint64_t)&off_100118FC8);
}

uint64_t sub_1000574BC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001DEAC(v0 + 80);

  return swift_deallocClassInstance();
}

uint64_t sub_10005750C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100057540((uint64_t (*)(void))sub_1000581D8, a1);
}

uint64_t sub_100057528@<X0>(uint64_t *a1@<X8>)
{
  return sub_100057540((uint64_t (*)(void))sub_10005826C, a1);
}

uint64_t sub_100057540@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  char v6 = *(unsigned char *)(*v2 + 24);
  uint64_t v7 = *(void *)(*v2 + 32);
  __int16 v8 = *(_WORD *)(*v2 + 40);
  char v9 = *(unsigned char *)(*v2 + 42);
  uint64_t v10 = *(void *)(*v2 + 48);
  __int16 v11 = *(_WORD *)(*v2 + 56);
  uint64_t v12 = *(void *)(*v2 + 64);
  uint64_t v13 = *(void *)(v4 + 72);
  a2[3] = (uint64_t)&type metadata for EffectUnit;
  a2[4] = a1();
  uint64_t v14 = swift_allocObject();
  *a2 = v14;
  *(void *)(v14 + 16) = v5;
  *(unsigned char *)(v14 + 24) = v6;
  *(void *)(v14 + 32) = v7;
  *(unsigned char *)(v14 + 42) = v9;
  *(_WORD *)(v14 + 40) = v8;
  *(void *)(v14 + 48) = v10;
  *(_WORD *)(v14 + 56) = v11;
  *(void *)(v14 + 64) = v12;
  *(void *)(v14 + 72) = v13;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_100057610()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_10005765C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  swift_beginAccess();
  *(void *)(v4 + 88) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*sub_1000576C4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  v3[5] = *v1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v6 = *(void *)(v4 + 88);
  v3[3] = Strong;
  v3[4] = v6;
  return sub_100057748;
}

void sub_100057748(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 88) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t sub_1000577CC()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v2 = *(void *)(v1 + 88);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 40))(ObjectType, v2);
    swift_unknownObjectRelease();
  }
  return 0;
}

uint64_t sub_100057850(uint64_t a1)
{
  return ActiveDataEntity.entityID.getter(a1, (uint64_t)&off_100118F28);
}

uint64_t ActivePowerDomain.staticPowerDomain.getter@<X0>(uint64_t a1@<X8>)
{
  __int16 v2 = *(_WORD *)(v1 + 24);
  char v3 = *(unsigned char *)(v1 + 26);
  uint64_t v4 = *(void *)(v1 + 32);
  __int16 v5 = *(_WORD *)(v1 + 40);
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 56);
  *(void *)a1 = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 10) = v3;
  *(_WORD *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t ActivePowerDomain.function.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t ActivePowerDomain.function.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 72) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*ActivePowerDomain.function.modify(void *a1))()
{
  char v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v5 = *(void *)(v1 + 72);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_1000579EC;
}

uint64_t ActivePowerDomain.staticEntity.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  __int16 v4 = *(_WORD *)(v1 + 24);
  char v5 = *(unsigned char *)(v1 + 26);
  uint64_t v6 = *(void *)(v1 + 32);
  __int16 v7 = *(_WORD *)(v1 + 40);
  uint64_t v9 = *(void *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 56);
  a1[3] = (uint64_t)&type metadata for PowerDomain;
  a1[4] = sub_100057F0C();
  uint64_t v10 = swift_allocObject();
  *a1 = v10;
  *(void *)(v10 + 16) = v3;
  *(unsigned char *)(v10 + 26) = v5;
  *(_WORD *)(v10 + 24) = v4;
  *(void *)(v10 + 32) = v6;
  *(_WORD *)(v10 + 40) = v7;
  *(void *)(v10 + 48) = v9;
  *(void *)(v10 + 56) = v8;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t ActivePowerDomain.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001DEAC(v0 + 64);
  return v0;
}

uint64_t ActivePowerDomain.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001DEAC(v0 + 64);

  return swift_deallocClassInstance();
}

uint64_t sub_100057B28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  __int16 v5 = *(_WORD *)(*v1 + 24);
  char v6 = *(unsigned char *)(*v1 + 26);
  uint64_t v7 = *(void *)(*v1 + 32);
  __int16 v8 = *(_WORD *)(*v1 + 40);
  uint64_t v9 = *(void *)(*v1 + 48);
  uint64_t v10 = *(void *)(v3 + 56);
  a1[3] = (uint64_t)&type metadata for PowerDomain;
  a1[4] = sub_100057F0C();
  uint64_t v11 = swift_allocObject();
  *a1 = v11;
  *(void *)(v11 + 16) = v4;
  *(unsigned char *)(v11 + 26) = v6;
  *(_WORD *)(v11 + 24) = v5;
  *(void *)(v11 + 32) = v7;
  *(_WORD *)(v11 + 40) = v8;
  *(void *)(v11 + 48) = v9;
  *(void *)(v11 + 56) = v10;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_100057BDC()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_100057C28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  swift_beginAccess();
  *(void *)(v4 + 72) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*sub_100057C90(void *a1))()
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  v3[5] = *v1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v6 = *(void *)(v4 + 72);
  v3[3] = Strong;
  v3[4] = v6;
  return sub_1000579EC;
}

void sub_100057D14(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + 72) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t sub_100057D98(uint64_t a1)
{
  return ActiveDataEntity.entityID.getter(a1, (uint64_t)&protocol witness table for ActiveInputTerminal);
}

uint64_t sub_100057DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000AC7C(&qword_100127B38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100057E0C(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_100057E68()
{
  unint64_t result = qword_100128988;
  if (!qword_100128988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128988);
  }
  return result;
}

uint64_t sub_100057EBC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 112, 7);
}

unint64_t sub_100057F0C()
{
  unint64_t result = qword_100128990;
  if (!qword_100128990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128990);
  }
  return result;
}

uint64_t sub_100057F60()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t type metadata accessor for ActiveExtensionUnit()
{
  return self;
}

uint64_t type metadata accessor for ActiveProcessingUnit()
{
  return self;
}

uint64_t type metadata accessor for ActiveSampleRateConverter()
{
  return self;
}

uint64_t type metadata accessor for ActiveEffectUnit()
{
  return self;
}

uint64_t type metadata accessor for ActivePowerDomain()
{
  return self;
}

unint64_t sub_100058054()
{
  unint64_t result = qword_100128DC8;
  if (!qword_100128DC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128DC8);
  }
  return result;
}

uint64_t sub_1000580A8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 96, 7);
}

unint64_t sub_1000580F8()
{
  unint64_t result = qword_100128DD0;
  if (!qword_100128DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128DD0);
  }
  return result;
}

uint64_t sub_10005814C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 88, 7);
}

unint64_t sub_100058184()
{
  unint64_t result = qword_100128DD8;
  if (!qword_100128DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128DD8);
  }
  return result;
}

unint64_t sub_1000581D8()
{
  unint64_t result = qword_100128DE0;
  if (!qword_100128DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128DE0);
  }
  return result;
}

uint64_t sub_10005822C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

unint64_t sub_10005826C()
{
  unint64_t result = qword_100128DE8;
  if (!qword_100128DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128DE8);
  }
  return result;
}

id sub_1000582C0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  return sub_100055788(a1, v2[4], v2[2], v2[3], a2);
}

uint64_t sub_1000582E0@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100055884(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

void sub_100058308(AUASDCore::AUAInterruptAttribute_optional a1, Swift::UInt_optional a2, Swift::UInt_optional a3)
{
}

BOOL ClockRateRange.isMultiRate.getter(unint64_t a1, unint64_t a2, unint64_t a3)
{
  return a1 < a2 && a3 > 1;
}

BOOL ClockRateRange.isContinuousRate.getter(unint64_t a1, unint64_t a2, uint64_t a3)
{
  return a1 < a2 && a3 == 1;
}

BOOL ClockRateRange.isSingleRate.getter(uint64_t a1, uint64_t a2)
{
  return a2 == a1;
}

uint64_t ClockRateRange.samplingRate.getter(uint64_t result, uint64_t a2)
{
  if (result != a2) {
    return 0;
  }
  return result;
}

void *ClockRateRange.multiRangeSamplingRates.getter(void *result, unint64_t a2, unint64_t a3)
{
  uint64_t v3 = _swiftEmptyArrayStorage;
  if ((unint64_t)result >= a2 || a3 < 2) {
    return v3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = (unint64_t)result;
    char v7 = 0;
    unint64_t v8 = 0;
    char v9 = 0;
    BOOL v10 = result == (void *)a2;
    if ((unint64_t)result >= a2) {
      goto LABEL_9;
    }
    while (1)
    {
      unint64_t v11 = v6 + a3;
      if (__CFADD__(v6, a3))
      {
        char v9 = 0;
        unint64_t v8 = 0x8000000000000000;
        unint64_t v11 = -1;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_21;
        }
        goto LABEL_17;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v8 = 0;
      char v9 = 1;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
LABEL_21:
      }
        uint64_t v3 = sub_10005A320(0, v3[2] + 1, 1, v3, &qword_100127B40);
      while (1)
      {
LABEL_17:
        unint64_t v15 = v3[2];
        unint64_t v14 = v3[3];
        if (v15 >= v14 >> 1) {
          uint64_t v3 = sub_10005A320((void *)(v14 > 1), v15 + 1, 1, v3, &qword_100127B40);
        }
        v3[2] = v15 + 1;
        v3[v15 + 4] = v6;
        unint64_t v6 = v11;
        BOOL v10 = v11 == a2;
        if (v11 < a2) {
          break;
        }
LABEL_9:
        char v12 = !v10;
        if (((v12 | v7) & 1) != 0 || !(v9 & 1 | (v8 != 0x8000000000000000))) {
          return v3;
        }
        char v7 = 1;
        unint64_t v11 = v6;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_21;
        }
        unint64_t v11 = v6;
      }
    }
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall ClockRateRange.supportsRate(_:)(Swift::UInt a1)
{
  return a1 >= v1 && v2 >= a1;
}

uint64_t Clock.samplingRates.getter(uint64_t a1, uint64_t a2)
{
  Swift::UInt v2 = &_swiftEmptySetSingleton;
  char v34 = &_swiftEmptySetSingleton;
  uint64_t result = (*(uint64_t (**)(void))(a2 + 40))();
  if (!result) {
    goto LABEL_32;
  }
  uint64_t v4 = result;
  uint64_t v5 = *(void *)(result + 16);
  if (!v5)
  {
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  unint64_t v6 = 0;
  uint64_t v7 = result + 32;
  uint64_t v31 = *(void *)(result + 16);
  uint64_t v32 = result + 32;
  while (1)
  {
    if (v6 >= *(void *)(v4 + 16)) {
      goto LABEL_34;
    }
    unint64_t v8 = (uint64_t *)(v7 + 24 * v6);
    BOOL v10 = (void *)*v8;
    unint64_t v9 = v8[1];
    if (v9 != *v8) {
      break;
    }
    uint64_t result = sub_10005B0E0(&v33, *v8);
LABEL_5:
    if (++v6 == v5)
    {
      swift_bridgeObjectRelease();
      Swift::UInt v2 = v34;
LABEL_32:
      uint64_t v30 = sub_10005AC34((uint64_t)v2);
      swift_bridgeObjectRelease();
      return (uint64_t)v30;
    }
  }
  unint64_t v11 = v8[2];
  if ((unint64_t)v10 >= v9 || v11 < 2) {
    goto LABEL_5;
  }
  if (qword_1001268F0 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10000AD60(v13, (uint64_t)qword_10012B1F8);
  unint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136446210;
    uint64_t v17 = sub_10002E8A0(0xD000000000000018, 0x80000001000E3C40, 0x676E696C706D6173, (void *)0xED00007365746152);
    *(void *)(v16 + 4) = sub_1000192BC(v17, v18, &v33);
    uint64_t v5 = v31;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s", (uint8_t *)v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t result = (uint64_t)ClockRateRange.multiRangeSamplingRates.getter(v10, v9, v11);
  uint64_t v19 = result;
  uint64_t v20 = *(void *)(result + 16);
  if (!v20)
  {
LABEL_29:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v7 = v32;
    goto LABEL_5;
  }
  unint64_t v21 = 0;
  uint64_t v22 = result + 32;
  uint64_t v23 = (uint64_t)v34;
  while (v21 < *(void *)(v19 + 16))
  {
    uint64_t v25 = *(void *)(v22 + 8 * v21);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v26 = -1 << *(unsigned char *)(v23 + 32);
    unint64_t v27 = result & ~v26;
    if ((*(void *)(v23 + 56 + ((v27 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v27))
    {
      uint64_t v28 = *(void *)(v23 + 48);
      if (*(void *)(v28 + 8 * v27) == v25) {
        goto LABEL_20;
      }
      uint64_t v29 = ~v26;
      while (1)
      {
        unint64_t v27 = (v27 + 1) & v29;
        if (((*(void *)(v23 + 56 + ((v27 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v27) & 1) == 0) {
          break;
        }
        if (*(void *)(v28 + 8 * v27) == v25) {
          goto LABEL_20;
        }
      }
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v33 = v23;
    sub_10005BCC8(v25, v27, isUniquelyReferenced_nonNull_native);
    uint64_t v23 = v33;
    uint64_t result = swift_bridgeObjectRelease();
LABEL_20:
    if (++v21 == v20)
    {
      char v34 = (void *)v23;
      goto LABEL_29;
    }
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

BOOL Clock.isEndpointClock.getter()
{
  if (swift_dynamicCastClass()) {
    return 1;
  }
  type metadata accessor for MultiClock();
  return swift_dynamicCastClass() != 0;
}

uint64_t ClockRateRange.resolution.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void ClockRateRange.hash(into:)(int a1, Swift::UInt a2, Swift::UInt a3, Swift::UInt a4)
{
}

BOOL static ClockRateRange.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return a1 == a4 && a2 == a5 && a3 == a6;
}

Swift::Int ClockRateRange.hashValue.getter(Swift::UInt a1, Swift::UInt a2, Swift::UInt a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_10005899C()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_100058A08()
{
  Swift::UInt v1 = v0[1];
  Swift::UInt v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int sub_100058A50()
{
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL sub_100058AB8(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

void *sub_100058AE8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AC7C(&qword_100128E38);
      BOOL v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      char v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      BOOL v10 = _swiftEmptyArrayStorage;
      char v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10005D6A8(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100058C0C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10005A320(a1, a2, a3, a4, &qword_100127B40);
}

void *sub_100058C18(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1000591D8(a1, a2, a3, a4, &qword_100128F50, &qword_100128F58);
}

void *sub_100058C2C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AC7C(&qword_100128F48);
      BOOL v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      char v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      BOOL v10 = _swiftEmptyArrayStorage;
      char v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10005DD3C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100058D54(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AC7C(&qword_100128E30);
      BOOL v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      BOOL v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10005DE34(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100058E64(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AC7C(&qword_100128F38);
      BOOL v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 80);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[10 * v8 + 4]) {
          memmove(v12, a4 + 4, 80 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      BOOL v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10005D3CC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100058F88(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AC7C(&qword_100128E78);
      BOOL v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 3);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= (void *)((char *)a4 + 3 * v8 + 32)) {
          memmove(v12, a4 + 4, 3 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      BOOL v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10005D104(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10005909C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AC7C(&qword_100128DF8);
      BOOL v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      BOOL v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10005E560(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000591C4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1000591D8(a1, a2, a3, a4, &qword_100128E08, &qword_1001284E8);
}

void *sub_1000591D8(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_10000AC7C(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = j__malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 17;
      }
      v13[2] = v11;
      void v13[3] = 2 * (v15 >> 4);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      uint64_t v16 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4]) {
          memmove(v16, a4 + 4, 16 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10005E764(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_1000592F4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10005931C(a1, a2, a3, a4, &qword_100128E90, &qword_100128598);
}

void *sub_100059308(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10005931C(a1, a2, a3, a4, &qword_100128E10, &qword_100128530);
}

void *sub_10005931C(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_10000AC7C(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = j__malloc_size(v13);
      v13[2] = v11;
      void v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      uint64_t v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4]) {
          memmove(v15, a4 + 4, 40 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      uint64_t v15 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10005E454(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_10005944C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10005931C(a1, a2, a3, a4, &qword_100128EC0, &qword_100128948);
}

void *sub_100059460(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10005931C(a1, a2, a3, a4, &qword_100128968, &qword_100127EC0);
}

void *sub_100059474(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AC7C(&qword_100128F28);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 208);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[26 * v8 + 4]) {
          memmove(v12, a4 + 4, 208 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10005D7A0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000595A0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AC7C(&qword_100128F30);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 104);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[13 * v8 + 4]) {
          memmove(v12, a4 + 4, 104 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10005D894(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000596CC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10005931C(a1, a2, a3, a4, &qword_100128ED8, &qword_100127B28);
}

void *sub_1000596E0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AC7C(&qword_100128E80);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10005DF28(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100059804(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AC7C(&qword_100128E40);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10005D988(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100059914(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100059FE0(a1, a2, a3, a4, &qword_100127CC8);
}

void *sub_100059920(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AC7C(&qword_100128F18);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10005D5BC(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100059A30(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AC7C(&qword_100128F20);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10005D4C4(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100059B54(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AC7C(&qword_100128EE0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10005DB68(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100059C64(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AC7C(&qword_100128EF8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10005E238(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100059D74(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10005A550(a1, a2, a3, a4, &qword_100128F08, &qword_100128F10);
}

void *sub_100059D88(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AC7C(&qword_100128EE8);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10005E128(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100059EB0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1000591D8(a1, a2, a3, a4, &qword_100128EB0, &qword_100128EB8);
}

void *sub_100059EC4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AC7C(&qword_100128EA8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10005E670(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100059FD4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100059FE0(a1, a2, a3, a4, &qword_100128EA0);
}

void *sub_100059FE0(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  int64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v8 = a2;
    }
LABEL_8:
    int64_t v9 = a4[2];
    if (v8 <= v9) {
      int64_t v10 = a4[2];
    }
    else {
      int64_t v10 = v8;
    }
    if (v10)
    {
      sub_10000AC7C(a5);
      int64_t v11 = (void *)swift_allocObject();
      size_t v12 = j__malloc_size(v11);
      long long v11[2] = v9;
      v11[3] = 2 * v12 - 64;
      uint64_t v13 = v11 + 4;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (void *)((char *)a4 + v9 + 32)) {
          memmove(v13, a4 + 4, v9);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10005DC54(0, v9, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_10005A0D8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AC7C(&qword_100128E88);
      int64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      size_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      size_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10005E344(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10005A204(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AC7C(&qword_100128E28);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10005DB68(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10005A314(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10005A320(a1, a2, a3, a4, &qword_100128E98);
}

void *sub_10005A320(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      sub_10000AC7C(a5);
      int64_t v11 = (void *)swift_allocObject();
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      long long v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      size_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v11 = _swiftEmptyArrayStorage;
      size_t v14 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4]) {
          memmove(v14, a4 + 4, 8 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10005D5BC(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_10005A42C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AC7C(&qword_100128E58);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10005D5BC(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10005A53C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10005A550(a1, a2, a3, a4, &qword_100128E48, &qword_100128E50);
}

void *sub_10005A550(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_10000AC7C(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = j__malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      v13[2] = v11;
      void v13[3] = 2 * (v15 >> 3);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      uint64_t v16 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4]) {
          memmove(v16, a4 + 4, 8 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10005E020(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_10005A66C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AC7C(&qword_100128EC8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= (void *)((char *)a4 + 4 * v8 + 32)) {
          memmove(v13, a4 + 4, 4 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10005D1F0(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10005A77C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AC7C(&qword_100128E20);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10005D2DC(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10005A8A4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10000AC7C(&qword_100128E70);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 17);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= (void *)((char *)a4 + 17 * v8 + 32)) {
          memmove(v12, a4 + 4, 17 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10005DA7C(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10005A9BC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10005A550(a1, a2, a3, a4, &qword_100128E60, &qword_100128E68);
}

char *sub_10005A9D0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return (char *)_swiftEmptyArrayStorage;
    }
    uint64_t v8 = 8 * v5;
    if (v5 <= 0)
    {
      uint64_t v9 = (char *)_swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        uint64_t v12 = v9 + 32;
        uint64_t v13 = (char *)(a2 + 8 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8]) {
          goto LABEL_19;
        }
        memcpy(v12, v13, 8 * v5);
        return v9;
      }
    }
    else
    {
      sub_10000AC7C(&qword_100127B40);
      uint64_t v9 = (char *)swift_allocObject();
      int64_t v10 = j__malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      *((void *)v9 + 2) = v5;
      *((void *)v9 + 3) = 2 * (v11 >> 3);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10005AB3C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000AC7C(&qword_100128E20);
  Swift::UInt v3 = (void *)swift_allocObject();
  size_t v4 = j__malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  uint64_t v5 = sub_10005CC34(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_10001D208();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_10005AC34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000AC7C(&qword_100127B40);
  Swift::UInt v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  unint64_t v6 = sub_10005CDDC(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_10001D208();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_10005AD1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000AC7C(&qword_100127CC8);
  uint64_t v3 = swift_allocObject();
  size_t v4 = j__malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * v4 - 64;
  uint64_t v5 = sub_10005CF70(&v7, (unsigned char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_10001D208();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (void *)v3;
}

void *sub_10005ADF4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t v8 = v5;
    if (v5 <= 0)
    {
      uint64_t v9 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        type metadata accessor for AUAFeedbackTransferBlock();
        swift_arrayInitWithCopy();
        return v9;
      }
    }
    else
    {
      sub_10000AC7C(&qword_100127ED0);
      uint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = j__malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      long long v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005AF78(Swift::UInt *a1, Swift::UInt a2, Swift::UInt a3, Swift::UInt a4)
{
  uint64_t v9 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(a4);
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v13 = ~v11;
    while (1)
    {
      int64_t v14 = (uint64_t *)(*(void *)(v9 + 48) + 24 * v12);
      uint64_t v15 = *v14;
      uint64_t v16 = v14[1];
      uint64_t v17 = v14[2];
      BOOL v18 = v15 == a2 && v16 == a3;
      if (v18 && v17 == a4) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v13;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        goto LABEL_11;
      }
    }
    uint64_t result = 0;
    uint64_t v22 = (Swift::UInt *)(*(void *)(*v4 + 48) + 24 * v12);
    a2 = *v22;
    a3 = v22[1];
    a4 = v22[2];
  }
  else
  {
LABEL_11:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    sub_10005BB3C(a2, a3, a4, v12, isUniquelyReferenced_nonNull_native);
    *unint64_t v4 = v23;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
  }
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  return result;
}

uint64_t sub_10005B0E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10005BCC8(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_10005B1DC(unsigned char *a1, Swift::Int a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    uint64_t *v2 = 0x8000000000000000;
    sub_10005BE54(a2, v8, isUniquelyReferenced_nonNull_native);
    uint64_t *v2 = v13;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    uint64_t v10 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v10;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  uint64_t result = 0;
  LOBYTE(a2) = *(unsigned char *)(*(void *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_10005B2FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000AC7C(&qword_100128E18);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v30 = (void *)(v2 + 56);
    uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v29 = (unint64_t)(v6 + 63) >> 6;
    uint64_t v9 = result + 56;
    while (1)
    {
      if (v8)
      {
        unint64_t v12 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v13 = v12 | (v5 << 6);
      }
      else
      {
        int64_t v14 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v29) {
          goto LABEL_33;
        }
        unint64_t v15 = v30[v14];
        ++v5;
        if (!v15)
        {
          int64_t v5 = v14 + 1;
          if (v14 + 1 >= v29) {
            goto LABEL_33;
          }
          unint64_t v15 = v30[v5];
          if (!v15)
          {
            int64_t v5 = v14 + 2;
            if (v14 + 2 >= v29) {
              goto LABEL_33;
            }
            unint64_t v15 = v30[v5];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v29)
              {
LABEL_33:
                uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v28;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v30[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v5 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v29) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v30[v5];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v5 << 6);
      }
      uint64_t v17 = (Swift::UInt *)(*(void *)(v2 + 48) + 24 * v13);
      Swift::UInt v18 = *v17;
      Swift::UInt v19 = v17[1];
      Swift::UInt v20 = v17[2];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      Hasher._combine(_:)(v19);
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v9 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v10 = __clz(__rbit64((-1 << v22) & ~*(void *)(v9 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v9 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v10 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v9 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      uint64_t v11 = (Swift::UInt *)(*(void *)(v4 + 48) + 24 * v10);
      *uint64_t v11 = v18;
      v11[1] = v19;
      long long v11[2] = v20;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_10005B60C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000AC7C(&qword_100128F40);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    uint64_t v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  uint64_t *v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_10005B890()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000AC7C(&qword_100128ED0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      Swift::UInt v18 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

Swift::Int sub_10005BB3C(Swift::Int result, Swift::UInt a2, Swift::UInt a3, unint64_t a4, char a5)
{
  Swift::UInt v9 = result;
  unint64_t v10 = *(void *)(*v5 + 16);
  unint64_t v11 = *(void *)(*v5 + 24);
  if (v11 > v10 && (a5 & 1) != 0) {
    goto LABEL_18;
  }
  if (a5)
  {
    sub_10005B2FC();
  }
  else
  {
    if (v11 > v10)
    {
      uint64_t result = (Swift::Int)sub_10005BFA4();
      goto LABEL_18;
    }
    sub_10005C47C();
  }
  uint64_t v12 = *v5;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  uint64_t result = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v12 + 32);
  a4 = result & ~v13;
  if ((*(void *)(v12 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4))
  {
    uint64_t v14 = ~v13;
    do
    {
      int64_t v15 = (uint64_t *)(*(void *)(v12 + 48) + 24 * a4);
      uint64_t v16 = *v15;
      uint64_t v17 = v15[1];
      uint64_t v18 = v15[2];
      BOOL v19 = v16 == v9 && v17 == a2;
      if (v19 && v18 == a3) {
        goto LABEL_21;
      }
      a4 = (a4 + 1) & v14;
    }
    while (((*(void *)(v12 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_18:
  uint64_t v21 = *v5;
  *(void *)(*v5 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  char v22 = (Swift::UInt *)(*(void *)(v21 + 48) + 24 * a4);
  *char v22 = v9;
  v22[1] = a2;
  v22[2] = a3;
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_21:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10005BCC8(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_10005B60C();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_10005C150();
      goto LABEL_14;
    }
    sub_10005C754();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

unint64_t sub_10005BDF0()
{
  unint64_t result = qword_100128DF0;
  if (!qword_100128DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128DF0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ClockRateRange()
{
  return &type metadata for ClockRateRange;
}

Swift::Int sub_10005BE54(Swift::Int result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_10005B890();
  }
  else
  {
    if (v7 > v6)
    {
      unint64_t result = (Swift::Int)sub_10005C2E8();
      goto LABEL_14;
    }
    sub_10005C9B8();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  unint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(unsigned __int8 *)(v10 + a2) == v5)
    {
LABEL_13:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(unsigned __int8 *)(v10 + a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v12 + 48) + a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

void *sub_10005BFA4()
{
  uint64_t v1 = v0;
  sub_10000AC7C(&qword_100128E18);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)(v17 + 16);
    uint64_t v19 = *(void *)(v4 + 48) + v16;
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v17;
    *(void *)(v19 + 16) = v18;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10005C150()
{
  uint64_t v1 = v0;
  sub_10000AC7C(&qword_100128F40);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10005C2E8()
{
  uint64_t v1 = v0;
  sub_10000AC7C(&qword_100128ED0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10005C47C()
{
  uint64_t v1 = *v0;
  sub_10000AC7C(&qword_100128E18);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v3 = result;
  if (!*(void *)(v1 + 16))
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t *v0 = v3;
    return result;
  }
  int64_t v4 = 0;
  uint64_t v27 = v1 + 56;
  uint64_t v5 = 1 << *(unsigned char *)(v1 + 32);
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v1 + 56);
  int64_t v28 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = result + 56;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if (v13 >= v28) {
      goto LABEL_33;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v28) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v28) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_24:
    int64_t v16 = (Swift::UInt *)(*(void *)(v1 + 48) + 24 * v12);
    Swift::UInt v17 = *v16;
    Swift::UInt v18 = v16[1];
    Swift::UInt v19 = v16[2];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v17);
    Hasher._combine(_:)(v18);
    Hasher._combine(_:)(v19);
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_34;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v8 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v8 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = (Swift::UInt *)(*(void *)(v3 + 48) + 24 * v9);
    *uint64_t v10 = v17;
    v10[1] = v18;
    v10[2] = v19;
    ++*(void *)(v3 + 16);
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v28) {
    goto LABEL_33;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v28) {
      goto LABEL_33;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_23;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_10005C754()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000AC7C(&qword_100128F40);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10005C9B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10000AC7C(&qword_100128ED0);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    Swift::UInt v18 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void *sub_10005CC34(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    uint64_t v13 = *(void *)(a4 + 48) + 24 * v12;
    uint64_t v14 = *(void *)(v13 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v13;
    *(void *)(a2 + 16) = v14;
    a2 += 24;
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v15 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v15 >= v10) {
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v15);
  if (v16) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v15 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v15;
    goto LABEL_34;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v8);
  if (v16)
  {
LABEL_15:
    int64_t v15 = v8;
LABEL_19:
    unint64_t v18 = __clz(__rbit64(v16));
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v12 = v18 + (v15 << 6);
    int64_t v8 = v15;
    goto LABEL_8;
  }
  int64_t v17 = v15 + 2;
  if (v15 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v17);
  if (v16)
  {
LABEL_18:
    int64_t v15 = v17;
    goto LABEL_19;
  }
  int64_t v8 = v15 + 3;
  if (v15 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v15 + 2;
    goto LABEL_34;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v8);
  if (v16) {
    goto LABEL_15;
  }
  int64_t v17 = v15 + 4;
  if (v15 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v17);
  if (v16) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v15 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v15 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v16 = *(void *)(v4 + 8 * v15);
    ++v17;
    if (v16) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

void *sub_10005CDDC(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

void *sub_10005CF70(void *result, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(unsigned char *)(*(void *)(a4 + 48) + v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

char *sub_10005D104(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 3 * a1 + 32);
    size_t v6 = 3 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10005D1F0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10005D2DC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 24 * a1 + 32);
    size_t v6 = 24 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005D3CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 80 * a1 + 32;
    unint64_t v6 = a3 + 80 * v4;
    if (v5 >= v6 || v5 + 80 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005D4C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10005D5BC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005D6A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005D7A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 208 * a1 + 32;
    unint64_t v6 = a3 + 208 * v4;
    if (v5 >= v6 || v5 + 208 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005D894(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 104 * a1 + 32;
    unint64_t v6 = a3 + 104 * v4;
    if (v5 >= v6 || v5 + 104 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005D988(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10005DA7C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 17 * a1 + 32);
    size_t v6 = 17 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10005DB68(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10005DC54(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    size_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005DD3C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005DE34(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005DF28(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005E020(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      sub_10000AC7C(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005E128(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_10000AC7C(&qword_100128EF0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005E238(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_10000AC7C(&qword_100128F00);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005E344(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      sub_10000AC7C(&qword_100127490);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005E454(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 40 * a1 + 32;
    unint64_t v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      sub_10000AC7C(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005E560(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_10000AC7C(&qword_100128E00);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005E670(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005E764(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v5;
    if (v6 >= v7 || v6 + 16 * v5 <= a3)
    {
      sub_10000AC7C(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10005E86C(int a1, int a2, int a3, char a4, char a5)
{
  BOOL v6 = a1 == 4 && a2 == 4 && a3 == 4;
  int v7 = v6;
  if (v6)
  {
    if (a4 == 3)
    {
      if (a5) {
        return 1;
      }
    }
    else if (!a4 && (a5 & 1) == 0)
    {
      return 0;
    }
  }
  if (a1 == 2 && a2 == 2 && a3 == 2 && a4 == 3 && (a5 & 1) != 0) {
    return 2;
  }
  if (v7)
  {
    if (a4 == 4)
    {
      if (a5) {
        return 4;
      }
    }
    else if (a4 == 2 && (a5 & 1) != 0)
    {
      return 3;
    }
  }
  else if (a1 == 1)
  {
    if (a2 == 1 && a3 == 1)
    {
      if (a4 == 2)
      {
        if (a5) {
          return 9;
        }
      }
      else if (a4 == 3 && (a5 & 1) != 0)
      {
        return 8;
      }
    }
  }
  else if (a1 == 3 && a2 == 3 && a3 == 3)
  {
    if (a4 == 3)
    {
      if (a5) {
        return 6;
      }
    }
    else if (a4 == 2)
    {
      if (a5) {
        return 7;
      }
    }
    else if (!a4 && (a5 & 1) == 0)
    {
      return 5;
    }
  }
  return 10;
}

Class sub_10005E9A8(unsigned int a1)
{
  unint64_t v2 = sub_100008D1C((uint64_t)_swiftEmptyArrayStorage);
  sub_10000AC7C(&qword_100127ED0);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1000EB030;
  *(void *)(v3 + 32) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:a1 & 7];
  *(void *)(v3 + 40) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:(a1 >> 3) & 7];
  *(void *)(v3 + 48) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:(a1 >> 6) & 7];
  unsigned int v4 = (a1 >> 9) & 7;
  *(void *)(v3 + 56) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedChar:v4];
  sub_10005EF24();
  *(NSNumber *)(v3 + 64) = NSNumber.init(BOOLeanLiteral:)((a1 & 0x1000) != 0);
  specialized Array._endMutation()();
  int64_t v29 = (void *)sub_10000AC7C(&qword_100128F60);
  *(void *)&long long v28 = v3;
  sub_10000CDA8(&v28, v27);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v30 = v2;
  sub_100071030(v27, 0xD000000000000013, 0x80000001000E3CA0, isUniquelyReferenced_nonNull_native);
  unint64_t v6 = v30;
  swift_bridgeObjectRelease();
  int64_t v29 = &type metadata for Bool;
  LOBYTE(v28) = (a1 & 5) == 1;
  sub_10000CDA8(&v28, v27);
  char v7 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v30 = v6;
  sub_100071030(v27, 0x736920646E756F73, 0xEF676E6974616C6FLL, v7);
  unint64_t v8 = v30;
  swift_bridgeObjectRelease();
  BOOL v9 = (a1 & 7) - 1 < 2 && ((a1 >> 9) & 7) == 0;
  int64_t v29 = &type metadata for Bool;
  LOBYTE(v28) = v9;
  sub_10000CDA8(&v28, v27);
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v30 = v8;
  sub_100071030(v27, 0x6170206472696874, 0xEB00000000797472, v10);
  unint64_t v11 = v30;
  swift_bridgeObjectRelease();
  char v12 = sub_10005E86C(a1 & 7, (a1 >> 3) & 7, (a1 >> 6) & 7, v4, (a1 & 0x1000) != 0);
  int v13 = 1;
  int v14 = 1;
  int v15 = 1;
  switch(v12)
  {
    case 1:
      int v13 = 2;
      int v15 = 2;
      goto LABEL_14;
    case 2:
      int v15 = 2;
      int v13 = 3;
      goto LABEL_14;
    case 3:
      int v15 = 2;
      int v13 = 5;
      goto LABEL_14;
    case 4:
      int v14 = 0;
      int v15 = 0;
      int v13 = 2;
      goto LABEL_14;
    case 5:
      int v13 = 4;
      goto LABEL_14;
    case 6:
      int v15 = 2;
      int v13 = 4;
      goto LABEL_14;
    case 7:
      int v15 = 2;
      int v13 = 6;
      goto LABEL_14;
    case 8:
      int v15 = 3;
      int v13 = 7;
      goto LABEL_14;
    case 9:
      int v15 = 3;
      int v13 = 8;
      goto LABEL_14;
    case 10:
      goto LABEL_16;
    default:
LABEL_14:
      int64_t v29 = &type metadata for UInt32;
      LODWORD(v28) = v13;
      sub_10000CDA8(&v28, v27);
      char v16 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v30 = v11;
      sub_100071030(v27, 0x6563656970726165, 0xEF6E676973656420, v16);
      unint64_t v11 = v30;
      swift_bridgeObjectRelease();
      if (v14)
      {
        int64_t v29 = &type metadata for UInt32;
        LODWORD(v28) = v15;
        sub_10000CDA8(&v28, v27);
        char v17 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v30 = v11;
        sub_100071030(v27, 0x697365642063696DLL, 0xEA00000000006E67, v17);
        unint64_t v11 = v30;
        swift_bridgeObjectRelease();
      }
LABEL_16:
      int64_t v29 = &type metadata for Bool;
      LOBYTE(v28) = 1;
      sub_10000CDA8(&v28, v27);
      char v18 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v30 = v11;
      sub_100071030(v27, 0x6F68706F7263696DLL, 0xEA0000000000656ELL, v18);
      unint64_t v19 = v30;
      swift_bridgeObjectRelease();
      int64_t v29 = &type metadata for Bool;
      LOBYTE(v28) = 1;
      sub_10000CDA8(&v28, v27);
      char v20 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v30 = v19;
      sub_100071030(v27, 0x6E6F74747562, 0xE600000000000000, v20);
      unint64_t v21 = v30;
      swift_bridgeObjectRelease();
      int64_t v29 = &type metadata for Bool;
      LOBYTE(v28) = 1;
      sub_10000CDA8(&v28, v27);
      char v22 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v30 = v21;
      sub_100071030(v27, 0xD000000000000010, 0x80000001000E3CC0, v22);
      unint64_t v23 = v30;
      swift_bridgeObjectRelease();
      int64_t v29 = &type metadata for Bool;
      LOBYTE(v28) = 0;
      sub_10000CDA8(&v28, v27);
      char v24 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v30 = v23;
      sub_100071030(v27, 0xD000000000000016, 0x80000001000E3CE0, v24);
      swift_bridgeObjectRelease();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      return isa;
  }
}

unint64_t sub_10005EF24()
{
  unint64_t result = qword_100127470;
  if (!qword_100127470)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100127470);
  }
  return result;
}

uint64_t Cluster.hasException.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t (*Cluster.hasException.modify())()
{
  return ClusterChannelInfo.chNum.getter;
}

unsigned char *(*StreamingInterface.canUseImplicit.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 16);
  return sub_10005EFB8;
}

unsigned char *sub_10005EFB8(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 16) = result[8];
  return result;
}

uint64_t StreamingInterface.highestExceptionLevel.getter()
{
  sub_10005415C(v0 + 24, (uint64_t)&v26, &qword_1001288F0);
  sub_10005415C((uint64_t)&v26, (uint64_t)&v27, &qword_1001288F0);
  if (v27 && (uint64_t v1 = *(void *)(v27 + 16)) != 0)
  {
    uint64_t result = 0;
    uint64_t v3 = (unsigned __int8 *)(v27 + 32);
    do
    {
      int v5 = *v3++;
      int v4 = v5;
      if (v5 == 14 || v4 == 60 || v4 == 59)
      {
        if (!(_BYTE)result) {
          uint64_t result = 1;
        }
      }
      else if (result < 2u)
      {
        if (v4 == 14) {
          uint64_t result = 1;
        }
        else {
          uint64_t result = 2;
        }
      }
      --v1;
    }
    while (v1);
  }
  else
  {
    uint64_t result = 0;
  }
  uint64_t v6 = *(void *)(v0 + 8);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v6 + 32;
    do
    {
      uint64_t v10 = v9 + 80 * v8;
      uint64_t v11 = *(void *)(v10 + 72);
      if (v11 && (uint64_t v12 = *(void *)(v11 + 16)) != 0)
      {
        unsigned __int8 v13 = 0;
        int v14 = (unsigned __int8 *)(v11 + 32);
        do
        {
          int v16 = *v14++;
          int v15 = v16;
          if (v16 == 60 || v15 == 59 || v15 == 14)
          {
            if (!v13) {
              unsigned __int8 v13 = 1;
            }
          }
          else if (v13 < 2u)
          {
            unsigned __int8 v13 = 2;
          }
          --v12;
        }
        while (v12);
      }
      else
      {
        unsigned __int8 v13 = 0;
      }
      uint64_t v17 = *(void *)(v10 + 56);
      uint64_t v18 = *(void *)(v17 + 16);
      if (v18)
      {
        uint64_t v19 = 0;
        uint64_t v20 = v17 + 32;
        do
        {
          uint64_t v21 = *(void *)(v20 + 80 * v19 + 72);
          if (v21)
          {
            uint64_t v22 = *(void *)(v21 + 16);
            if (v22)
            {
              unint64_t v23 = (unsigned __int8 *)(v21 + 32);
              do
              {
                int v25 = *v23++;
                int v24 = v25;
                if (v25 == 60 || v24 == 59 || v24 == 14)
                {
                  if (!v13) {
                    unsigned __int8 v13 = 1;
                  }
                }
                else if (v13 < 2u)
                {
                  unsigned __int8 v13 = 2;
                }
                --v22;
              }
              while (v22);
            }
          }
          ++v19;
        }
        while (v19 != v18);
      }
      ++v8;
      if (result <= v13) {
        uint64_t result = v13;
      }
      else {
        uint64_t result = result;
      }
    }
    while (v8 != v7);
  }
  return result;
}

uint64_t StreamingAltInterface.highestExceptionLevel.getter()
{
  sub_10005415C(v0 + 72, (uint64_t)&v15, &qword_1001288F0);
  sub_10005415C((uint64_t)&v15, (uint64_t)&v16, &qword_1001288F0);
  if (v16 && (uint64_t v1 = *(void *)(v16 + 16)) != 0)
  {
    uint64_t result = 0;
    uint64_t v3 = (unsigned __int8 *)(v16 + 32);
    do
    {
      int v5 = *v3++;
      int v4 = v5;
      if (v5 == 14 || v4 == 60 || v4 == 59)
      {
        if (!result) {
          uint64_t result = 1;
        }
      }
      else if (result < 2)
      {
        if (v4 == 14) {
          uint64_t result = 1;
        }
        else {
          uint64_t result = 2;
        }
      }
      --v1;
    }
    while (v1);
  }
  else
  {
    uint64_t result = 0;
  }
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v6 + 32;
    do
    {
      uint64_t v10 = *(void *)(v9 + 80 * v8 + 72);
      if (v10)
      {
        uint64_t v11 = *(void *)(v10 + 16);
        if (v11)
        {
          uint64_t v12 = (unsigned __int8 *)(v10 + 32);
          do
          {
            int v14 = *v12++;
            int v13 = v14;
            if (v14 == 14 || v13 == 60 || v13 == 59)
            {
              if (!result) {
                uint64_t result = 1;
              }
            }
            else if (result < 2)
            {
              if (v13 == 14) {
                uint64_t result = 1;
              }
              else {
                uint64_t result = 2;
              }
            }
            --v11;
          }
          while (v11);
        }
      }
      ++v8;
    }
    while (v8 != v7);
  }
  return result;
}

unint64_t *sub_10005F2FC(char *a1, uint64_t a2, unsigned __int8 a3, char a4)
{
  uint64_t v6 = v4;
  uint64_t v10 = CreateFixedPriorityDispatchQueue((uint64_t)"com.apple.usbAudio.ActiveStreamingInterface");
  uint64_t v11 = v10;
  if ((a4 & 1) == 0)
  {
    uint64_t v57 = v10;
    uint64_t v22 = 0;
    goto LABEL_10;
  }
  unsigned __int8 v12 = *(unsigned char *)(*v6 + 2);
  int v13 = v10;
  int v14 = sub_1000C5B18(v12, v11, (uint64_t)ClusterChannelInfo.chNum.getter, 0);
  if (!v5)
  {
    uint64_t v22 = v14;

    uint64_t v23 = *(void *)&a1[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList];
    if (v23 && sub_10001925C(17, v23))
    {
      unint64_t v61 = 0;
      uint64_t v18 = v22;
      if (![v18 setIdleTimeout:&v61 error:2000.0])
      {
        id v55 = (id)v61;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        goto LABEL_32;
      }
      uint64_t v57 = v11;
      id v24 = (id)v61;
    }
    else
    {
      uint64_t v57 = v11;
    }
LABEL_10:
    uint64_t v25 = v6[1];
    uint64_t v60 = v25;
    unint64_t v61 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v26 = *(void *)(v25 + 16);
    if (v26)
    {
      uint64_t v56 = v6;
      uint64_t v27 = a1;
      long long v28 = (_OWORD *)(v25 + 32);
      sub_100053BD8((uint64_t)&v60);
      int64_t v29 = v27;
      swift_retain();
      sub_100053BD8((uint64_t)&v60);
      do
      {
        v65[0] = *v28;
        long long v30 = v28[1];
        long long v31 = v28[2];
        long long v32 = v28[4];
        v65[3] = v28[3];
        unsigned char v65[4] = v32;
        v65[1] = v30;
        v65[2] = v31;
        sub_10005FDF4((uint64_t)v65);
        int v13 = v22;
        uint64_t v33 = a2;
        sub_10005F9CC(v29, a2, v22, a3);
        if (v5)
        {

          sub_10005FE3C((uint64_t)v65);
          sub_10004EC5C((uint64_t)&v60);
          uint64_t v18 = (unint64_t *)v61;

          swift_release();
          swift_bridgeObjectRelease();
          sub_10004EC5C((uint64_t)&v60);
          goto LABEL_32;
        }
        uint64_t v35 = v34;

        sub_10005FE3C((uint64_t)v65);
        if (v35)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        v28 += 5;
        --v26;
        a2 = v33;
      }
      while (v26);
      sub_10004EC5C((uint64_t)&v60);
      char v37 = (void *)v61;
      a1 = v27;
      uint64_t v6 = v56;
    }
    else
    {
      os_log_type_t v36 = a1;
      swift_retain();
      sub_100053BD8((uint64_t)&v60);
      char v37 = _swiftEmptyArrayStorage;
    }

    swift_release();
    sub_10004EC5C((uint64_t)&v60);
    int v38 = *(unsigned __int8 *)(*v6 + 8);
    if (!*(unsigned char *)(*v6 + 8)
      || (uint64_t v39 = *(void *)&a1[OBJC_IVAR____TtC9AUASDCore9USBDevice_errataList]) != 0 && sub_10001925C(10, v39))
    {
      uint64_t v59 = (uint64_t)v37;
      uint64_t v40 = a1;
      uint64_t v18 = 0;
      uint64_t v41 = 0;
    }
    else
    {
      uint64_t v40 = a1;
      uint64_t v18 = *(unint64_t **)&a1[OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject];
      if (v18)
      {
        unint64_t v42 = sub_1000C545C(v38);
        if (v5)
        {

          swift_bridgeObjectRelease();
          int v13 = v22;
          goto LABEL_32;
        }
        uint64_t v18 = (unint64_t *)v42;
        uint64_t v41 = v43;
        uint64_t v59 = (uint64_t)v37;
      }
      else
      {
        uint64_t v59 = (uint64_t)v37;
        uint64_t v41 = 0;
      }
    }
    sub_10005415C((uint64_t)(v6 + 3), (uint64_t)v64, &qword_1001288F0);
    sub_10005415C((uint64_t)(v6 + 4), (uint64_t)v63, &qword_100128938);
    type metadata accessor for ActiveStreamingInterface();
    uint64_t v44 = swift_allocObject();
    uint64_t v45 = (uint64_t)v6;
    uint64_t v46 = v57;
    int v13 = v40;
    sub_100053BD8((uint64_t)&v60);
    uint64_t v47 = v22;
    sub_100053BD8((uint64_t)v64);
    sub_100053BD8((uint64_t)v63);
    uint64_t v48 = (uint64_t)v18;
    uint64_t v18 = (unint64_t *)v44;
    uint64_t v49 = sub_1000D8638(v45, v59, (uint64_t)v13, (uint64_t)v22, v48, v41, (uint64_t)v46);
    if (v5)
    {

      goto LABEL_32;
    }
    uint64_t v18 = (unint64_t *)v49;

    unint64_t v51 = v18[9];
    if (v51 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v53 = v47;
      if (v52) {
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v52 = *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      uint64_t v53 = v47;
      if (v52)
      {
LABEL_36:
        if (v52 < 1) {
          __break(1u);
        }
        uint64_t v54 = 0;
        do
        {
          if ((v51 & 0xC000000000000001) != 0) {
            specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            swift_retain();
          }
          ++v54;
          swift_beginAccess();
          swift_weakAssign();
          swift_release();
          uint64_t v53 = v47;
        }
        while (v52 != v54);
      }
    }

    swift_bridgeObjectRelease();
    return v18;
  }

  sub_10000AC7C(&qword_100127410);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1000E8090;
  unint64_t v61 = 0;
  unint64_t v62 = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  v16._countAndFlagsBits = 0x20726F727265;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  sub_10000AC7C(&qword_100127400);
  _print_unlocked<A, B>(_:_:)();
  v17._object = (void *)0x80000001000E3D30;
  uint64_t v18 = &v61;
  v17._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v17);
  unint64_t v19 = v61;
  unint64_t v20 = v62;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 32) = v19;
  *(void *)(v15 + 40) = v20;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  sub_10000CD54();
  swift_allocError();
  *(unsigned char *)uint64_t v21 = 5;
  *(void *)(v21 + 8) = 0;
  *(void *)(v21 + 16) = 0xE000000000000000;
  *(void *)(v21 + 24) = 0xD00000000000004ALL;
  *(void *)(v21 + 32) = 0x80000001000E3D50;
  *(void *)(v21 + 40) = 0xD000000000000022;
  *(void *)(v21 + 48) = 0x80000001000E3DA0;
  *(void *)(v21 + 56) = 158;
  swift_willThrow();
LABEL_32:

  return v18;
}

void sub_10005F9CC(void *a1, uint64_t a2, void *a3, unsigned __int8 a4)
{
  uint64_t v6 = v4;
  if (*(void *)(*(void *)(v4 + 56) + 16))
  {
    id v11 = a1;
    uint64_t v12 = swift_bridgeObjectRetain();
    int v13 = sub_100060A4C(v12, v11, a4);
    swift_bridgeObjectRelease();

    if (!v5)
    {
      uint64_t v14 = *(void *)(v6 + 40);
      long long v15 = *(_OWORD *)(a2 + 112);
      v37[4] = *(_OWORD *)(a2 + 96);
      v37[5] = v15;
      v37[6] = *(_OWORD *)(a2 + 128);
      uint64_t v38 = *(void *)(a2 + 144);
      long long v16 = *(_OWORD *)(a2 + 48);
      v37[0] = *(_OWORD *)(a2 + 32);
      v37[1] = v16;
      long long v17 = *(_OWORD *)(a2 + 80);
      void v37[2] = *(_OWORD *)(a2 + 64);
      v37[3] = v17;
      sub_1000D24B4((uint64_t)v11, (uint64_t)v37, v14, *(_WORD *)(v6 + 48));
      uint64_t v31 = v30;
      uint64_t v33 = v32;
      char v35 = v34;
      type metadata accessor for ActiveStreamingAltInterface();
      swift_allocObject();
      sub_10005FDF4(v6);
      id v36 = a3;
      sub_1000D7FA8((_OWORD *)v6, (unint64_t)v13, v31, v33, v35, a3);
    }
  }
  else
  {
    _StringGuts.grow(_:)(54);
    v18._countAndFlagsBits = 0x203A656369766544;
    v18._object = (void *)0xE800000000000000;
    String.append(_:)(v18);
    id v19 = [a1 boxName];
    if (v19)
    {
      unint64_t v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v23 = v22;
    }
    else
    {
      uint64_t v23 = (void *)0xEE00656369766564;
      uint64_t v21 = 0x206E776F6E6B6E55;
    }
    v24._countAndFlagsBits = v21;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 0x61667265746E6920;
    v25._object = (void *)0xEB00000000206563;
    String.append(_:)(v25);
    v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 0x74746553746C6120;
    v27._object = (void *)0xEC00000020676E69;
    String.append(_:)(v27);
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._object = (void *)0x80000001000E3DD0;
    v29._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v29);
    sub_10002E81C(0, 0xE000000000000000, 0xD000000000000043, (void *)0x80000001000E3DF0, 0xD000000000000022, 0x80000001000E3DA0, 332);
    swift_bridgeObjectRelease();
  }
}

uint64_t (*StreamingInterface.direction.getter())(uint64_t)
{
  return sub_10005FE9C((uint64_t (*)(uint64_t))StreamingAltInterface.direction.getter);
}

uint64_t StreamingAltInterface.direction.getter()
{
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v6 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = swift_bridgeObjectRetain() + 104;
  while (1)
  {
    uint64_t v3 = *(const IOUSBEndpointDescriptor **)(v2 - 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!IOUSBGetEndpointUsageType(v3) && v3->wMaxPacketSize > 8u) {
      break;
    }
    if (IOUSBGetEndpointUsageType(v3) == 2) {
      break;
    }
    v2 += 80;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!--v1)
    {
      sub_10004EC5C((uint64_t)&v6);
      return 0;
    }
  }
  sub_10004EC5C((uint64_t)&v6);
  uint64_t v4 = IOUSBGetEndpointDirection(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10005FDF4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10005FE3C(uint64_t a1)
{
  return a1;
}

uint64_t (*StreamingInterface.synchronizationType.getter())(uint64_t)
{
  return sub_10005FE9C((uint64_t (*)(uint64_t))StreamingAltInterface.synchronizationType.getter);
}

uint64_t (*sub_10005FE9C(uint64_t (*result)(uint64_t)))(uint64_t)
{
  uint64_t v2 = *(void *)(v1 + 8);
  if (*(void *)(v2 + 16))
  {
    uint64_t v3 = result;
    long long v4 = *(_OWORD *)(v2 + 48);
    long long v5 = *(_OWORD *)(v2 + 80);
    long long v6 = *(_OWORD *)(v2 + 96);
    long long v9[2] = *(_OWORD *)(v2 + 64);
    v9[3] = v5;
    void v9[4] = v6;
    v9[0] = *(_OWORD *)(v2 + 32);
    v9[1] = v4;
    uint64_t v7 = sub_10005FDF4((uint64_t)v9);
    uint64_t v8 = v3(v7);
    sub_10005FE3C((uint64_t)v9);
    return (uint64_t (*)(uint64_t))v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t StreamingAltInterface.synchronizationType.getter()
{
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v7 + 16);
  if (v1)
  {
    uint64_t v2 = swift_bridgeObjectRetain() + 104;
    while (1)
    {
      uint64_t v3 = *(const IOUSBEndpointDescriptor **)(v2 - 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!IOUSBGetEndpointUsageType(v3) && v3->wMaxPacketSize > 8u) {
        break;
      }
      if (IOUSBGetEndpointUsageType(v3) == 2) {
        break;
      }
      v2 += 80;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v1)
      {
        sub_10004EC5C((uint64_t)&v7);
        return v1;
      }
    }
    sub_10004EC5C((uint64_t)&v7);
    uint64_t v4 = IOUSBGetEndpointSynchronizationType(v3);
    if (v4)
    {
      uint64_t v1 = v4;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      int v5 = IOUSBGetEndpointDirection(v3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v5 == 1) {
        return 1;
      }
      else {
        return 3;
      }
    }
  }
  return v1;
}

void StreamingInterface.feedbackType.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  if (*(void *)(v1 + 16))
  {
    long long v2 = *(_OWORD *)(v1 + 48);
    long long v3 = *(_OWORD *)(v1 + 80);
    long long v4 = *(_OWORD *)(v1 + 96);
    v8[2] = *(_OWORD *)(v1 + 64);
    void v8[3] = v3;
    v8[4] = v4;
    v8[0] = *(_OWORD *)(v1 + 32);
    v8[1] = v2;
    sub_10005FDF4((uint64_t)v8);
    uint64_t v5 = sub_10006010C();
    unint64_t v7 = v6;
    sub_10005FE3C((uint64_t)v8);
    if (v7) {
      sub_1000602A4(v5, v7);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10006010C()
{
  if (StreamingAltInterface.direction.getter()) {
    return 0x54554F20746F6ELL;
  }
  if (StreamingAltInterface.synchronizationType.getter() != 1) {
    return 0x6E79734120746F6ELL;
  }
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v12 = v2;
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    return 0xD000000000000018;
  }
  uint64_t v4 = v2 + 104;
  uint64_t result = swift_bridgeObjectRetain();
  BOOL v5 = 0;
  uint64_t v6 = 1;
  do
  {
    if (v5)
    {
      if (v3 == v6)
      {
        sub_10004EC5C((uint64_t)&v12);
        return 0;
      }
      BOOL v5 = 1;
    }
    else
    {
      unint64_t v7 = *(const IOUSBEndpointDescriptor **)(v4 - 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v8 = IOUSBGetEndpointUsageType(v7);
      if (v8)
      {
        BOOL v9 = v8;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
      }
      else
      {
        unsigned int wMaxPacketSize = v7->wMaxPacketSize;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        BOOL v9 = wMaxPacketSize < 9;
      }
      BOOL v5 = v9;
      if (v3 == v6)
      {
        sub_10004EC5C((uint64_t)&v12);
        if (!v9) {
          return 0xD000000000000018;
        }
        return 0;
      }
    }
    v4 += 80;
  }
  while (!__OFADD__(v6++, 1));
  __break(1u);
  return result;
}

uint64_t sub_1000602A4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void StreamingInterface.providesImplicitFeedback.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  if (*(void *)(v1 + 16))
  {
    long long v2 = *(_OWORD *)(v1 + 48);
    long long v3 = *(_OWORD *)(v1 + 80);
    long long v4 = *(_OWORD *)(v1 + 96);
    v5[2] = *(_OWORD *)(v1 + 64);
    void v5[3] = v3;
    v5[4] = v4;
    v5[0] = *(_OWORD *)(v1 + 32);
    v5[1] = v2;
    sub_10005FDF4((uint64_t)v5);
    StreamingAltInterface.providesImplicitFeedback.getter();
    sub_10005FE3C((uint64_t)v5);
  }
  else
  {
    __break(1u);
  }
}

uint64_t StreamingAltInterface.providesImplicitFeedback.getter()
{
  if (StreamingAltInterface.direction.getter() == 1
    && (uint64_t v1 = *(void *)(v0 + 56), v12 = v1, (v2 = *(void *)(v1 + 16)) != 0))
  {
    uint64_t v3 = v1 + 104;
    uint64_t result = swift_bridgeObjectRetain();
    LOBYTE(v5) = 0;
    uint64_t v6 = 1;
    do
    {
      if (v5)
      {
        BOOL v5 = 1;
        if (v2 == v6) {
          goto LABEL_11;
        }
      }
      else
      {
        int v8 = *(const IOUSBEndpointDescriptor **)(v3 - 72);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        int v9 = IOUSBGetEndpointUsageType(v8);
        if (v9)
        {
          int v10 = v9;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
        }
        else
        {
          unsigned int wMaxPacketSize = v8->wMaxPacketSize;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          int v10 = wMaxPacketSize < 9;
        }
        BOOL v5 = v10 == 2;
        if (v2 == v6)
        {
LABEL_11:
          sub_10004EC5C((uint64_t)&v12);
          return v5;
        }
      }
      v3 += 80;
    }
    while (!__OFADD__(v6++, 1));
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

void StreamingInterface.hash(into:)(uint64_t a1)
{
  Hasher._combine(_:)(*(void *)v1);
  uint64_t v3 = *(void *)(v1 + 8);
  Swift::UInt v4 = *(void *)(v3 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = v3 + 32;
    do
    {
      v5 += 80;
      StreamingAltInterface.hash(into:)(a1);
      --v4;
    }
    while (v4);
  }
  Hasher._combine(_:)(*(unsigned char *)(v1 + 16) & 1);
  uint64_t v6 = *(void *)(v1 + 24);
  if (v6)
  {
    Hasher._combine(_:)(1u);
    Swift::UInt v7 = *(void *)(v6 + 16);
    Hasher._combine(_:)(v7);
    if (v7)
    {
      int v8 = (unsigned __int8 *)(v6 + 32);
      do
      {
        unsigned int v9 = *v8++;
        Hasher._combine(_:)(v9);
        --v7;
      }
      while (v7);
    }
    uint64_t v10 = *(void *)(v1 + 32);
    if (v10) {
      goto LABEL_9;
    }
LABEL_14:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(0);
  uint64_t v10 = *(void *)(v1 + 32);
  if (!v10) {
    goto LABEL_14;
  }
LABEL_9:
  Hasher._combine(_:)(1u);
  Swift::UInt v11 = *(void *)(v10 + 16);
  Hasher._combine(_:)(v11);
  if (v11)
  {
    uint64_t v12 = (unsigned __int16 *)(v10 + 32);
    do
    {
      int v13 = *((unsigned __int8 *)v12 + 2);
      int v14 = *v12;
      uint64_t v12 = (unsigned __int16 *)((char *)v12 + 3);
      USBDescriptorControl.hash(into:)(a1, v14 | (v13 << 16));
      --v11;
    }
    while (v11);
  }
}

Swift::Int StreamingInterface.hashValue.getter()
{
  Hasher.init(_seed:)();
  StreamingInterface.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000605D8()
{
  Hasher.init(_seed:)();
  StreamingInterface.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

BOOL sub_100060614(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return _s9AUASDCore18StreamingInterfaceV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v5, (uint64_t)v7);
}

uint64_t StreamingAltInterface.format.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t StreamingAltInterface.subFrameSize.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t ActiveStreamingAltInterface.terminalID.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t StreamingAltInterface.cluster.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t StreamingAltInterface.altSetting.getter()
{
  return *(unsigned __int8 *)(*(void *)v0 + 3);
}

void StreamingAltInterface.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Hasher._combine(_:)(*(void *)v1);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + 8));
  Hasher._combine(_:)(*(void *)(v1 + 16));
  Hasher._combine(_:)(*(void *)(v1 + 24));
  Hasher._combine(_:)(*(void *)(v1 + 32));
  sub_100062238(v1 + 40, (uint64_t)v26);
  sub_100062238((uint64_t)v26, (uint64_t)v32);
  switch(v35)
  {
    case 1:
      Swift::UInt32 v9 = v33;
      Swift::UInt8 v10 = v32[0];
      Swift::UInt8 v6 = v34;
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v10);
      Hasher._combine(_:)(v9);
      goto LABEL_7;
    case 2:
      Swift::UInt16 v7 = v32[0];
      Swift::UInt v8 = 2;
      goto LABEL_5;
    case 3:
      Swift::UInt16 v7 = v32[0];
      Swift::UInt v8 = 3;
LABEL_5:
      Hasher._combine(_:)(v8);
      Hasher._combine(_:)(v7);
      break;
    default:
      Swift::UInt8 v4 = v32[0];
      Swift::UInt16 v5 = v32[1];
      Swift::UInt8 v6 = v33;
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v4);
      Hasher._combine(_:)(v5);
LABEL_7:
      Hasher._combine(_:)(v6);
      break;
  }
  uint64_t v11 = *(void *)(v1 + 56);
  Swift::UInt v12 = *(void *)(v11 + 16);
  Hasher._combine(_:)(v12);
  if (v12)
  {
    int v13 = (long long *)(v11 + 32);
    do
    {
      long long v14 = v13[3];
      long long v29 = v13[2];
      long long v30 = v14;
      long long v31 = v13[4];
      long long v16 = *v13;
      long long v15 = v13[1];
      v13 += 5;
      long long v27 = v16;
      long long v28 = v15;
      Endpoint.hash(into:)(a1);
      --v12;
    }
    while (v12);
  }
  uint64_t v17 = *(void *)(v1 + 64);
  if (v17)
  {
    Hasher._combine(_:)(1u);
    Swift::UInt v18 = *(void *)(v17 + 16);
    Hasher._combine(_:)(v18);
    if (v18)
    {
      id v19 = (unsigned __int16 *)(v17 + 32);
      do
      {
        int v20 = *((unsigned __int8 *)v19 + 2);
        int v21 = *v19;
        id v19 = (unsigned __int16 *)((char *)v19 + 3);
        USBDescriptorControl.hash(into:)(a1, v21 | (v20 << 16));
        --v18;
      }
      while (v18);
    }
    uint64_t v22 = *(void *)(v2 + 72);
    if (v22) {
      goto LABEL_16;
    }
LABEL_21:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(0);
  uint64_t v22 = *(void *)(v1 + 72);
  if (!v22) {
    goto LABEL_21;
  }
LABEL_16:
  Hasher._combine(_:)(1u);
  Swift::UInt v23 = *(void *)(v22 + 16);
  Hasher._combine(_:)(v23);
  if (v23)
  {
    Swift::String v24 = (unsigned __int8 *)(v22 + 32);
    do
    {
      unsigned int v25 = *v24++;
      Hasher._combine(_:)(v25);
      --v23;
    }
    while (v23);
  }
}

Swift::Int StreamingAltInterface.hashValue.getter()
{
  Hasher.init(_seed:)();
  StreamingAltInterface.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000608F8()
{
  long long v1 = v0[3];
  long long v7 = v0[2];
  long long v8 = v1;
  long long v9 = v0[4];
  long long v2 = v0[1];
  long long v5 = *v0;
  long long v6 = v2;
  Hasher.init(_seed:)();
  StreamingAltInterface.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

void sub_100060954(uint64_t a1)
{
}

Swift::Int sub_100060998()
{
  long long v1 = v0[3];
  long long v7 = v0[2];
  long long v8 = v1;
  long long v9 = v0[4];
  long long v2 = v0[1];
  long long v5 = *v0;
  long long v6 = v2;
  Hasher.init(_seed:)();
  StreamingAltInterface.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t sub_1000609F0(_OWORD *a1, long long *a2)
{
  long long v2 = a1[3];
  v8[2] = a1[2];
  void v8[3] = v2;
  long long v3 = a1[4];
  long long v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  long long v5 = a2[3];
  long long v9[2] = a2[2];
  v9[3] = v5;
  void v9[4] = a2[4];
  long long v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return _s9AUASDCore21StreamingAltInterfaceV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v8, (uint64_t)v9) & 1;
}

void *sub_100060A4C(uint64_t a1, void *a2, unsigned __int8 a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v4)
  {
    int v13 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    long long v8 = (long long *)(a1 + 32);
    type metadata accessor for ActiveEndpoint();
    do
    {
      long long v9 = v8[3];
      long long v12[2] = v8[2];
      void v12[3] = v9;
      v12[4] = v8[4];
      long long v11 = *v8;
      long long v10 = v8[1];
      v8 += 5;
      v12[0] = v11;
      v12[1] = v10;
      swift_allocObject();
      sub_10005FDF4((uint64_t)v12);
      sub_1000DB544((uint64_t)v12, (char *)a2, a3);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v4;
    }
    while (v4);
    return v13;
  }
  return result;
}

uint64_t sub_100060B54@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int16 a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v18 = a10;
  uint64_t v19 = a11;
  if (!*(void *)(a11 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v19 = 0;
    if (*(void *)(a10 + 16)) {
      goto LABEL_3;
    }
LABEL_5:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v18 = 0;
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  if (!*(void *)(a10 + 16)) {
    goto LABEL_5;
  }
LABEL_3:
  swift_bridgeObjectRetain();
LABEL_6:
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a9 = a1;
  *(unsigned char *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(_WORD *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(void *)(a9 + 64) = v18;
  *(void *)(a9 + 72) = v19;
  return result;
}

void sub_100060C4C(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  LODWORD(v170) = a4;
  Swift::String v171 = a5;
  uint64_t v172 = a3;
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v169 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  long long v11 = (char *)&v145 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  long long v14 = (char *)&v145 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v145 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char **)((char *)&v145 - v18);
  sub_10008854C(a1, a2);
  if (v5) {
    return;
  }
  uint64_t v165 = v19;
  uint64_t v166 = v14;
  uint64_t v167 = v17;
  uint64_t v168 = v11;
  if (v20[3])
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v21 = 74;
    *(void *)(v21 + 8) = 0;
    *(void *)(v21 + 16) = 0xE000000000000000;
    *(void *)(v21 + 24) = 0xD00000000000002BLL;
    *(void *)(v21 + 32) = 0x80000001000E3E40;
    *(void *)(v21 + 40) = 0xD000000000000022;
    *(void *)(v21 + 48) = 0x80000001000E3DA0;
    uint64_t v22 = 84;
LABEL_17:
    *(void *)(v21 + 56) = v22;
    swift_willThrow();
    return;
  }
  if (v20[5] != 1)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v21 = 72;
    *(void *)(v21 + 8) = 0;
    *(void *)(v21 + 16) = 0xE000000000000000;
    *(void *)(v21 + 24) = 0xD00000000000002BLL;
    *(void *)(v21 + 32) = 0x80000001000E3E40;
    *(void *)(v21 + 40) = 0xD000000000000022;
    *(void *)(v21 + 48) = 0x80000001000E3DA0;
    uint64_t v22 = 85;
    goto LABEL_17;
  }
  if (v20[6] != 2)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v21 = 73;
    *(void *)(v21 + 8) = 0;
    *(void *)(v21 + 16) = 0xE000000000000000;
    *(void *)(v21 + 24) = 0xD00000000000002BLL;
    *(void *)(v21 + 32) = 0x80000001000E3E40;
    *(void *)(v21 + 40) = 0xD000000000000022;
    *(void *)(v21 + 48) = 0x80000001000E3DA0;
    uint64_t v22 = 86;
    goto LABEL_17;
  }
  if (v20[7] != v170)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v21 = 76;
    *(void *)(v21 + 8) = 0;
    *(void *)(v21 + 16) = 0xE000000000000000;
    *(void *)(v21 + 24) = 0xD00000000000002BLL;
    *(void *)(v21 + 32) = 0x80000001000E3E40;
    *(void *)(v21 + 40) = 0xD000000000000022;
    *(void *)(v21 + 48) = 0x80000001000E3DA0;
    uint64_t v22 = 87;
    goto LABEL_17;
  }
  int v23 = ((v170 >> 4) | (16 * v170));
  LODWORD(v164) = v20[2];
  uint64_t v155 = v20;
  uint64_t v170 = v8;
  switch(v23)
  {
    case 0:
      int64_t v24 = *(void *)(v172 + 16);
      unsigned int v25 = _swiftEmptyArrayStorage;
      if (v24)
      {
        uint64_t v26 = v172;
        *(void *)&long long v176 = _swiftEmptyArrayStorage;
        sub_10007C6A4(0, v24, 0);
        unsigned int v25 = (void *)v176;
        uint64_t v27 = v26 + 32;
        do
        {
          uint64_t v28 = swift_bridgeObjectRetain();
          sub_1000A92B8(v28, v164, v179);
          swift_bridgeObjectRelease();
          *(void *)&long long v176 = v25;
          unint64_t v30 = v25[2];
          unint64_t v29 = v25[3];
          if (v30 >= v29 >> 1)
          {
            sub_10007C6A4(v29 > 1, v30 + 1, 1);
            unsigned int v25 = (void *)v176;
          }
          void v25[2] = v30 + 1;
          long long v31 = &v25[10 * v30];
          v31[2] = v179[0];
          long long v32 = v179[1];
          long long v33 = v179[2];
          long long v34 = v179[4];
          v31[5] = v179[3];
          v31[6] = v34;
          v31[3] = v32;
          v31[4] = v33;
          v27 += 8;
          --v24;
        }
        while (v24);
      }
      break;
    case 2:
      int64_t v35 = *(void *)(v172 + 16);
      unsigned int v25 = _swiftEmptyArrayStorage;
      if (v35)
      {
        uint64_t v36 = v172;
        *(void *)&long long v176 = _swiftEmptyArrayStorage;
        sub_10007C6A4(0, v35, 0);
        unsigned int v25 = (void *)v176;
        uint64_t v37 = v36 + 32;
        do
        {
          uint64_t v38 = swift_bridgeObjectRetain();
          sub_10001BD20(v38, v164, v180);
          swift_bridgeObjectRelease();
          *(void *)&long long v176 = v25;
          unint64_t v40 = v25[2];
          unint64_t v39 = v25[3];
          if (v40 >= v39 >> 1)
          {
            sub_10007C6A4(v39 > 1, v40 + 1, 1);
            unsigned int v25 = (void *)v176;
          }
          void v25[2] = v40 + 1;
          uint64_t v41 = &v25[10 * v40];
          v41[2] = v180[0];
          long long v42 = v180[1];
          long long v43 = v180[2];
          long long v44 = v180[4];
          v41[5] = v180[3];
          v41[6] = v44;
          v41[3] = v42;
          v41[4] = v43;
          v37 += 8;
          --v35;
        }
        while (v35);
      }
      break;
    case 3:
      int64_t v45 = *(void *)(v172 + 16);
      unsigned int v25 = _swiftEmptyArrayStorage;
      if (v45)
      {
        uint64_t v46 = v172;
        *(void *)&long long v176 = _swiftEmptyArrayStorage;
        sub_10007C6A4(0, v45, 0);
        unsigned int v25 = (void *)v176;
        uint64_t v47 = v46 + 32;
        do
        {
          uint64_t v48 = swift_bridgeObjectRetain();
          sub_10003AAF0(v48, v164, v181);
          swift_bridgeObjectRelease();
          *(void *)&long long v176 = v25;
          unint64_t v50 = v25[2];
          unint64_t v49 = v25[3];
          if (v50 >= v49 >> 1)
          {
            sub_10007C6A4(v49 > 1, v50 + 1, 1);
            unsigned int v25 = (void *)v176;
          }
          void v25[2] = v50 + 1;
          unint64_t v51 = &v25[10 * v50];
          v51[2] = v181[0];
          long long v52 = v181[1];
          long long v53 = v181[2];
          long long v54 = v181[4];
          v51[5] = v181[3];
          v51[6] = v54;
          v51[3] = v52;
          v51[4] = v53;
          v47 += 8;
          --v45;
        }
        while (v45);
      }
      break;
    case 4:
      int64_t v55 = *(void *)(v172 + 16);
      unsigned int v25 = _swiftEmptyArrayStorage;
      if (v55)
      {
        uint64_t v56 = v172;
        *(void *)&long long v176 = _swiftEmptyArrayStorage;
        sub_10007C6A4(0, v55, 0);
        unsigned int v25 = (void *)v176;
        uint64_t v57 = v56 + 32;
        do
        {
          uint64_t v58 = swift_bridgeObjectRetain();
          sub_1000367A8(v58, v164);
          swift_bridgeObjectRelease();
          *(void *)&long long v176 = v25;
          unint64_t v60 = v25[2];
          unint64_t v59 = v25[3];
          if (v60 >= v59 >> 1)
          {
            sub_10007C6A4(v59 > 1, v60 + 1, 1);
            unsigned int v25 = (void *)v176;
          }
          void v25[2] = v60 + 1;
          unint64_t v61 = &v25[10 * v60];
          v61[2] = v181[5];
          long long v62 = v181[6];
          long long v63 = v181[7];
          long long v64 = v181[9];
          v61[5] = v181[8];
          v61[6] = v64;
          void v61[3] = v62;
          v61[4] = v63;
          v57 += 8;
          --v55;
        }
        while (v55);
      }
      break;
    default:
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v21 = 76;
      *(void *)(v21 + 8) = 0;
      *(void *)(v21 + 16) = 0xE000000000000000;
      *(void *)(v21 + 24) = 0xD00000000000002BLL;
      *(void *)(v21 + 32) = 0x80000001000E3E40;
      *(void *)(v21 + 40) = 0xD000000000000022;
      *(void *)(v21 + 48) = 0x80000001000E3DA0;
      uint64_t v22 = 99;
      goto LABEL_17;
  }
  uint64_t v65 = v25[2];
  uint64_t v66 = v171;
  if (!v65)
  {
    swift_bridgeObjectRelease();
    sub_10002E81C(0xD000000000000036, 0x80000001000E3EB0, 0xD00000000000002BLL, (void *)0x80000001000E3E40, 0xD000000000000022, 0x80000001000E3DA0, 103);
    uint64_t v86 = 0;
    unsigned int v25 = 0;
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    goto LABEL_141;
  }
  uint64_t v182 = &_swiftEmptySetSingleton;
  uint64_t v67 = (char **)(v25 + 12);
  uint64_t v68 = (void *)v25[12];
  uint64_t v148 = 0;
  if (!v68)
  {
    uint64_t v89 = _swiftEmptyArrayStorage;
    goto LABEL_137;
  }
  uint64_t v153 = v25 + 4;
  uint64_t v154 = v65;
  uint64_t v69 = (char *)v68[2];
  unint64_t v157 = v25;
  uint64_t v146 = (char **)(v25 + 12);
  if (!v69)
  {
    uint64_t v89 = _swiftEmptyArrayStorage;
    uint64_t v90 = v169;
    goto LABEL_88;
  }
  uint64_t v156 = &v177;
  uint64_t v162 = v169 + 8;
  swift_bridgeObjectRetain_n();
  uint64_t v70 = 32;
  unint64_t v158 = (unint64_t)"activeAlternateSetting";
  unint64_t v152 = 0x80000001000E3E90;
  while (1)
  {
    uint64_t v163 = v70;
    uint64_t v164 = v69;
    unsigned int v25 = v68;
    Swift::Int v71 = (unsigned __int16 *)((char *)v68 + v70);
    int v72 = *((unsigned __int8 *)v68 + v70 + 2);
    int v73 = *v71;
    *((void *)&v177 + 1) = &type metadata for USBDescriptorControl;
    LODWORD(v160) = v72;
    BYTE2(v176) = v72;
    LODWORD(v159) = v73;
    LOWORD(v176) = v73;
    Mirror.init(reflecting:)();
    uint64_t v66 = (void *)Mirror.children.getter();
    uint64_t v74 = (void *)v66[3];
    long long v76 = (uint64_t *)v66[4];
    uint64_t v75 = (unint64_t *)v66[5];
    unint64_t ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v172 = dispatch thunk of _AnyIndexBox._typeID.getter();
    swift_getObjectType();
    uint64_t v78 = v76;
    uint64_t v79 = dispatch thunk of _AnyIndexBox._typeID.getter();
    unint64_t v81 = v172;
    if (v172 != v79)
    {
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
    char v82 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_unknownObjectRelease();
    if (v82)
    {
      swift_unknownObjectRelease();
      long long v177 = 0u;
      long long v178 = 0u;
      long long v176 = 0u;
    }
    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter();
      long long v176 = v173;
      long long v177 = v174;
      long long v178 = v175;
      swift_unknownObjectRelease();
    }
    uint64_t v83 = v170;
    uint64_t v68 = v25;
    swift_release();
    unint64_t v161 = *(void *)v162;
    ((void (*)(char **, uint64_t))v161)(v165, v83);
    unsigned int v25 = v157;
    if (!*((void *)&v178 + 1))
    {
      sub_100062BB0((uint64_t)&v176);
      goto LABEL_42;
    }
    long long v84 = v176;
    sub_10001ABC4((uint64_t)v156);
    if (!*((void *)&v84 + 1)) {
      goto LABEL_42;
    }
    if (v84 == __PAIR128__(v152, 0xD000000000000016)) {
      break;
    }
    char v85 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v85) {
      goto LABEL_57;
    }
LABEL_42:
    uint64_t v70 = v163 + 3;
    uint64_t v69 = v164 - 1;
    if (v164 == (char *)1)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v89 = _swiftEmptyArrayStorage;
      uint64_t v66 = v171;
      uint64_t v90 = v169;
      goto LABEL_87;
    }
  }
  swift_bridgeObjectRelease();
LABEL_57:
  LODWORD(v75) = v159 | (v160 << 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v80 = sub_100058F88(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t ObjectType = v80[2];
  unint64_t v81 = v80[3];
  uint64_t v78 = (uint64_t *)(ObjectType + 1);
  uint64_t v66 = v171;
  uint64_t v74 = v153;
  if (ObjectType < v81 >> 1) {
    goto LABEL_58;
  }
LABEL_148:
  uint64_t v80 = sub_100058F88((void *)(v81 > 1), (int64_t)v78, 1, v80);
LABEL_58:
  v80[2] = v78;
  uint64_t v147 = v80;
  uint64_t v91 = (char *)v80 + 3 * ObjectType;
  v91[34] = BYTE2(v75);
  *((_WORD *)v91 + 16) = (_WORD)v75;
  uint64_t v78 = v25 + 11;
  uint64_t v75 = v25 + 13;
  uint64_t v159 = (uint64_t)&v177;
  swift_bridgeObjectRetain_n();
  uint64_t v92 = 1;
  uint64_t v156 = (long long *)(v158 | 0x8000000000000000);
  unint64_t v81 = (unint64_t)v146;
  BOOL v93 = 1;
  uint64_t v94 = v154;
  while (2)
  {
    uint64_t v97 = *(void *)v81;
    if (*(void *)v81)
    {
      uint64_t v98 = *(void *)(v97 + 16);
      if (v98)
      {
        BOOL v151 = v93;
        unint64_t v152 = v92;
        uint64_t v99 = *v78;
        unint64_t v149 = *v75;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        uint64_t v150 = v99;
        swift_bridgeObjectRetain();
        uint64_t v100 = 32;
        uint64_t v160 = (long long *)v97;
        while (1)
        {
          uint64_t v172 = v98;
          uint64_t v165 = (char **)v100;
          uint64_t v101 = (unsigned __int16 *)(v97 + v100);
          int v102 = *((unsigned __int8 *)v101 + 2);
          int v103 = *v101;
          *((void *)&v177 + 1) = &type metadata for USBDescriptorControl;
          LODWORD(v164) = v102;
          BYTE2(v176) = v102;
          LODWORD(v163) = v103;
          LOWORD(v176) = v103;
          Mirror.init(reflecting:)();
          uint64_t v66 = (void *)Mirror.children.getter();
          uint64_t v74 = (void *)v66[3];
          uint64_t v104 = (uint64_t *)v66[4];
          uint64_t v75 = (unint64_t *)v66[5];
          unint64_t ObjectType = swift_getObjectType();
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          unsigned int v25 = (void *)dispatch thunk of _AnyIndexBox._typeID.getter();
          swift_getObjectType();
          uint64_t v78 = v104;
          if (v25 != (void *)dispatch thunk of _AnyIndexBox._typeID.getter()) {
            break;
          }
          char v105 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
          swift_unknownObjectRelease();
          if (v105)
          {
            swift_unknownObjectRelease();
            long long v177 = 0u;
            long long v178 = 0u;
            long long v176 = 0u;
          }
          else
          {
            dispatch thunk of _AnyCollectionBox.subscript.getter();
            long long v176 = v173;
            long long v177 = v174;
            long long v178 = v175;
            swift_unknownObjectRelease();
          }
          uint64_t v106 = v170;
          unint64_t v107 = v167;
          uint64_t v97 = (uint64_t)v160;
          swift_release();
          ((void (*)(char *, uint64_t))v161)(v107, v106);
          uint64_t v66 = v171;
          if (*((void *)&v178 + 1))
          {
            long long v108 = v176;
            sub_10001ABC4(v159);
            if (*((void *)&v108 + 1))
            {
              unint64_t ObjectType = v163 | (v164 << 16);
              if (v108 == __PAIR128__((unint64_t)v156, 0xD000000000000016))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_79:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                unsigned int v25 = v157;
                uint64_t v74 = v153;
                uint64_t v94 = v154;
                uint64_t v92 = v152;
                LOBYTE(v93) = v151;
                goto LABEL_80;
              }
              char v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v109)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_79;
              }
            }
          }
          else
          {
            sub_100062BB0((uint64_t)&v176);
          }
          uint64_t v100 = (uint64_t)v165 + 3;
          uint64_t v98 = v172 - 1;
          if (v172 == 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t ObjectType = 15728894;
            goto LABEL_79;
          }
        }
        __break(1u);
LABEL_143:
        __break(1u);
        goto LABEL_144;
      }
    }
    unint64_t ObjectType = 15728894;
LABEL_80:
    if (!v93)
    {
      if (v92 == v94)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_85;
      }
      BOOL v93 = 0;
      goto LABEL_61;
    }
    if (v92 != v94)
    {
      BOOL v93 = (~ObjectType & 0xF000FE) != 0;
LABEL_61:
      Swift::String v95 = &v74[10 * v92];
      uint64_t v78 = v95 + 7;
      unint64_t v81 = (unint64_t)(v95 + 8);
      uint64_t v75 = v95 + 9;
      BOOL v96 = __OFADD__(v92++, 1);
      if (v96) {
        goto LABEL_145;
      }
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease_n();
  if ((~ObjectType & 0xF000FE) != 0) {
    goto LABEL_86;
  }
LABEL_85:
  sub_10005B1DC(&v176, 84);
LABEL_86:
  uint64_t v90 = v169;
  uint64_t v89 = v147;
LABEL_87:
  uint64_t v67 = v146;
LABEL_88:
  uint64_t v110 = *v67;
  if (!*v67) {
    goto LABEL_137;
  }
  uint64_t v147 = v89;
  uint64_t v111 = *((void *)v110 + 2);
  if (!v111) {
    goto LABEL_136;
  }
  uint64_t v160 = &v177;
  uint64_t v165 = (char **)(v90 + 8);
  swift_bridgeObjectRetain_n();
  uint64_t v112 = 32;
  unint64_t v161 = (unint64_t)"Descriptors:audioProtocol:)";
  uint64_t v159 = 0x80000001000E3E70;
  uint64_t v167 = v110;
  while (2)
  {
    uint64_t v172 = v111;
    uint64_t v169 = v112;
    char v113 = &v110[v112];
    int v114 = v110[v112 + 2];
    int v115 = *(unsigned __int16 *)v113;
    *((void *)&v177 + 1) = &type metadata for USBDescriptorControl;
    LODWORD(v163) = v114;
    BYTE2(v176) = v114;
    LODWORD(v162) = v115;
    LOWORD(v176) = v115;
    Mirror.init(reflecting:)();
    uint64_t v66 = (void *)Mirror.children.getter();
    uint64_t v74 = (void *)v66[3];
    uint64_t v116 = (uint64_t *)v66[4];
    uint64_t v75 = (unint64_t *)v66[5];
    unsigned int v25 = (void *)swift_getObjectType();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    unint64_t ObjectType = dispatch thunk of _AnyIndexBox._typeID.getter();
    swift_getObjectType();
    uint64_t v78 = v116;
    if (ObjectType != dispatch thunk of _AnyIndexBox._typeID.getter()) {
      goto LABEL_146;
    }
    char v117 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
    swift_unknownObjectRelease();
    if (v117)
    {
      swift_unknownObjectRelease();
      long long v177 = 0u;
      long long v178 = 0u;
      long long v176 = 0u;
    }
    else
    {
      dispatch thunk of _AnyCollectionBox.subscript.getter();
      long long v176 = v173;
      long long v177 = v174;
      long long v178 = v175;
      swift_unknownObjectRelease();
    }
    uint64_t v118 = v170;
    unsigned int v25 = v157;
    uint64_t v110 = v167;
    swift_release();
    uint64_t v164 = *v165;
    ((void (*)(char *, uint64_t))v164)(v166, v118);
    uint64_t v66 = v171;
    if (!*((void *)&v178 + 1))
    {
      sub_100062BB0((uint64_t)&v176);
      goto LABEL_92;
    }
    long long v119 = v176;
    sub_10001ABC4((uint64_t)v160);
    if (!*((void *)&v119 + 1))
    {
LABEL_92:
      uint64_t v112 = v169 + 3;
      uint64_t v111 = v172 - 1;
      if (v172 == 1)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_136;
      }
      continue;
    }
    break;
  }
  if (v119 != __PAIR128__(v159, 0xD000000000000016))
  {
    char v120 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v120) {
      goto LABEL_104;
    }
    goto LABEL_92;
  }
  swift_bridgeObjectRelease();
LABEL_104:
  int v121 = v162 | (v163 << 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v74 = v153;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v147 = sub_100058F88(0, v147[2] + 1, 1, v147);
  }
  uint64_t v123 = v147;
  unint64_t v125 = v147[2];
  unint64_t v124 = v147[3];
  if (v125 >= v124 >> 1) {
    uint64_t v123 = sub_100058F88((void *)(v124 > 1), v125 + 1, 1, v147);
  }
  v123[2] = v125 + 1;
  uint64_t v147 = v123;
  uint64_t v126 = (char *)v123 + 3 * v125;
  v126[34] = BYTE2(v121);
  *((_WORD *)v126 + 16) = v121;
  uint64_t v78 = v25 + 11;
  uint64_t v75 = v25 + 13;
  uint64_t v162 = (uint64_t)&v177;
  swift_bridgeObjectRetain_n();
  uint64_t v127 = 1;
  uint64_t v160 = (long long *)(v161 | 0x8000000000000000);
  BOOL v128 = 1;
  uint64_t v129 = v154;
  uint64_t v130 = (uint64_t *)v146;
  while (2)
  {
    uint64_t v131 = *v130;
    if (*v130)
    {
      uint64_t v132 = *(void *)(v131 + 16);
      if (v132)
      {
        LODWORD(v152) = v128;
        uint64_t v156 = (long long *)v127;
        uint64_t v133 = *v78;
        unint64_t v158 = *v75;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        uint64_t v159 = v133;
        swift_bridgeObjectRetain();
        uint64_t v134 = 32;
        uint64_t v163 = v131;
        while (1)
        {
          uint64_t v172 = v132;
          uint64_t v169 = v134;
          uint64_t v135 = (unsigned __int16 *)(v131 + v134);
          int v136 = *((unsigned __int8 *)v135 + 2);
          int v137 = *v135;
          *((void *)&v177 + 1) = &type metadata for USBDescriptorControl;
          LODWORD(v167) = v136;
          BYTE2(v176) = v136;
          LODWORD(v166) = v137;
          LOWORD(v176) = v137;
          Mirror.init(reflecting:)();
          uint64_t v66 = (void *)Mirror.children.getter();
          uint64_t v74 = (void *)v66[3];
          uint64_t v138 = (uint64_t *)v66[4];
          uint64_t v75 = (unint64_t *)v66[5];
          unint64_t ObjectType = swift_getObjectType();
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          unsigned int v25 = (void *)dispatch thunk of _AnyIndexBox._typeID.getter();
          swift_getObjectType();
          uint64_t v78 = v138;
          if (v25 != (void *)dispatch thunk of _AnyIndexBox._typeID.getter()) {
            goto LABEL_143;
          }
          char v139 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
          swift_unknownObjectRelease();
          if (v139)
          {
            swift_unknownObjectRelease();
            long long v177 = 0u;
            long long v178 = 0u;
            long long v176 = 0u;
          }
          else
          {
            dispatch thunk of _AnyCollectionBox.subscript.getter();
            long long v176 = v173;
            long long v177 = v174;
            long long v178 = v175;
            swift_unknownObjectRelease();
          }
          uint64_t v140 = v170;
          int64_t v141 = v168;
          uint64_t v131 = v163;
          swift_release();
          ((void (*)(char *, uint64_t))v164)(v141, v140);
          uint64_t v66 = v171;
          if (*((void *)&v178 + 1))
          {
            long long v142 = v176;
            sub_10001ABC4(v162);
            if (*((void *)&v142 + 1))
            {
              unint64_t ObjectType = v166 | (v167 << 16);
              if (v142 == __PAIR128__((unint64_t)v160, 0xD000000000000016))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_129:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v127 = (uint64_t)v156;
                unsigned int v25 = v157;
                uint64_t v74 = v153;
                uint64_t v129 = v154;
                LOBYTE(v128) = v152;
                goto LABEL_130;
              }
              char v143 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v143)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_129;
              }
            }
          }
          else
          {
            sub_100062BB0((uint64_t)&v176);
          }
          uint64_t v134 = v169 + 3;
          uint64_t v132 = v172 - 1;
          if (v172 == 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t ObjectType = 15728894;
            goto LABEL_129;
          }
        }
      }
    }
    unint64_t ObjectType = 15728894;
LABEL_130:
    if (!v128)
    {
      if (v127 == v129)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_135;
      }
      BOOL v128 = 0;
      goto LABEL_111;
    }
    if (v127 != v129)
    {
      BOOL v128 = (~ObjectType & 0xF000FE) != 0;
LABEL_111:
      unint64_t v81 = (unint64_t)&v74[10 * v127];
      uint64_t v78 = (uint64_t *)(v81 + 56);
      uint64_t v130 = (uint64_t *)(v81 + 64);
      uint64_t v75 = (unint64_t *)(v81 + 72);
      BOOL v96 = __OFADD__(v127++, 1);
      if (v96) {
        goto LABEL_147;
      }
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease_n();
  if ((~ObjectType & 0xF000FE) != 0) {
    goto LABEL_136;
  }
LABEL_135:
  sub_10005B1DC(&v176, 84);
LABEL_136:
  uint64_t v89 = v147;
LABEL_137:
  uint64_t v87 = sub_10005AD1C((uint64_t)v182);
  swift_bridgeObjectRelease();
  uint64_t v88 = v89;
  if (!v89[2])
  {
    swift_bridgeObjectRelease();
    uint64_t v88 = 0;
  }
  uint64_t v86 = v155;
  if (!v87[2])
  {
    uint64_t v144 = v88;
    swift_release();
    uint64_t v88 = v144;
    uint64_t v86 = v155;
    uint64_t v87 = 0;
  }
LABEL_141:
  *uint64_t v66 = v86;
  v66[1] = v25;
  v66[2] = 0;
  v66[3] = v87;
  v66[4] = v88;
}

BOOL _s9AUASDCore18StreamingInterfaceV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2
    || (sub_1000B632C(*(void *)(a1 + 8), *(void *)(a2 + 8)) & 1) == 0
    || ((*(unsigned __int8 *)(a1 + 16) ^ *(unsigned __int8 *)(a2 + 16)) & 1) != 0)
  {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a2 + 24);
  if (v5)
  {
    if (!v6 || !sub_1000B5D90(v5, v6)) {
      return 0;
    }
  }
  else if (v6)
  {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a2 + 32);
  if (v7) {
    return v8 && (sub_1000B5C34(v7, v8) & 1) != 0;
  }
  return !v8;
}

uint64_t sub_100062238(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _s9AUASDCore21StreamingAltInterfaceV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2
    || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8)
    || *(void *)(a1 + 16) != *(void *)(a2 + 16)
    || *(void *)(a1 + 24) != *(void *)(a2 + 24)
    || *(void *)(a1 + 32) != *(void *)(a2 + 32))
  {
    return 0;
  }
  sub_100062238(a1 + 40, (uint64_t)v16);
  sub_100062238(a2 + 40, (uint64_t)v15);
  sub_100062238((uint64_t)v16, (uint64_t)v17);
  switch(v20)
  {
    case 1:
      int v9 = LOBYTE(v17[0]);
      int v10 = v18;
      int v6 = v19;
      sub_100062238((uint64_t)v15, (uint64_t)v21);
      if (v24 != 1) {
        return 0;
      }
      uint64_t result = 0;
      if (v9 == LOBYTE(v21[0]) && v10 == v22)
      {
        int v8 = v23;
        goto LABEL_19;
      }
      break;
    case 2:
      int v6 = v17[0];
      sub_100062238((uint64_t)v15, (uint64_t)v21);
      uint64_t result = 0;
      if (v24 == 2) {
        goto LABEL_18;
      }
      break;
    case 3:
      int v6 = v17[0];
      sub_100062238((uint64_t)v15, (uint64_t)v21);
      uint64_t result = 0;
      if (v24 == 3)
      {
LABEL_18:
        int v8 = v21[0];
        goto LABEL_19;
      }
      break;
    default:
      int v4 = LOBYTE(v17[0]);
      int v5 = v17[1];
      int v6 = v18;
      sub_100062238((uint64_t)v15, (uint64_t)v21);
      if (v24) {
        return 0;
      }
      uint64_t result = 0;
      if (v4 == LOBYTE(v21[0]) && v5 == v21[1])
      {
        int v8 = v22;
LABEL_19:
        if (v6 == v8)
        {
          if ((sub_1000B5FC0(*(void *)(a1 + 56), *(void *)(a2 + 56)) & 1) == 0) {
            return 0;
          }
          uint64_t v11 = *(void *)(a1 + 64);
          uint64_t v12 = *(void *)(a2 + 64);
          if (v11)
          {
            if (!v12 || (sub_1000B5C34(v11, v12) & 1) == 0) {
              return 0;
            }
          }
          else if (v12)
          {
            return 0;
          }
          uint64_t v13 = *(void *)(a1 + 72);
          uint64_t v14 = *(void *)(a2 + 72);
          if (v13)
          {
            if (!v14 || !sub_1000B5D90(v13, v14)) {
              return 0;
            }
          }
          else if (v14)
          {
            return 0;
          }
          uint64_t result = 1;
        }
      }
      break;
  }
  return result;
}

unint64_t sub_1000624B0()
{
  unint64_t result = qword_100128F68;
  if (!qword_100128F68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128F68);
  }
  return result;
}

unint64_t sub_100062508()
{
  unint64_t result = qword_100128F70;
  if (!qword_100128F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128F70);
  }
  return result;
}

unint64_t sub_100062560()
{
  unint64_t result = qword_100128F78;
  if (!qword_100128F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100128F78);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for StreamingInterfaceDataFormat(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for StreamingInterfaceDataFormat(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100062710);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StreamingInterfaceDataFormat()
{
  return &type metadata for StreamingInterfaceDataFormat;
}

uint64_t destroy for StreamingInterface()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StreamingInterface(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StreamingInterface(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for StreamingInterface(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for StreamingInterface(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StreamingInterface(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StreamingInterface()
{
  return &type metadata for StreamingInterface;
}

uint64_t initializeWithCopy for StreamingAltInterface(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StreamingAltInterface(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for StreamingAltInterface(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for StreamingAltInterface(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StreamingAltInterface(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StreamingAltInterface()
{
  return &type metadata for StreamingAltInterface;
}

uint64_t sub_100062BB0(uint64_t a1)
{
  uint64_t v2 = sub_10000AC7C(&qword_100127CD0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

Swift::Int ADC2InputTerminalDescriptor.hashValue.getter(unint64_t a1, unint64_t a2, int a3)
{
  Hasher.init(_seed:)();
  sub_10004B00C((uint64_t)v7, a1, a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_100062C70()
{
  unint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  sub_10004B00C((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2InputTerminalDescriptor(uint64_t a1)
{
  return sub_10004B00C(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

Swift::Int sub_100062CD8()
{
  unint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  sub_10004B00C((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2InputTerminalDescriptor(uint64_t a1, uint64_t a2)
{
  return sub_100041E48(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned __int8 *)(a2 + 16));
}

Swift::Int ADC2OutputTerminalDescriptor.hashValue.getter(unint64_t a1, unsigned int a2)
{
  Hasher.init(_seed:)();
  sub_100049E1C((uint64_t)v5, a1, a2);
  return Hasher._finalize()();
}

Swift::Int sub_100062D9C()
{
  unint64_t v1 = *(void *)v0;
  unsigned int v2 = *(_DWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  sub_100049E1C((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2OutputTerminalDescriptor(uint64_t a1)
{
  return sub_100049E1C(a1, *(void *)v1, *(_DWORD *)(v1 + 8));
}

Swift::Int sub_100062DF8()
{
  unint64_t v1 = *(void *)v0;
  unsigned int v2 = *(_DWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  sub_100049E1C((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2OutputTerminalDescriptor(uint64_t a1, uint64_t a2)
{
  return sub_100040638(*(void *)a1, *(_DWORD *)(a1 + 8), *(void *)a2, *(_DWORD *)(a2 + 8));
}

Swift::Int ADC2MixerUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_100063920(a1, (void (*)(unsigned char *, uint64_t))sub_10004CC78);
}

Swift::Int sub_100062E78(uint64_t a1, uint64_t a2)
{
  return sub_100063988(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004CC78);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2MixerUnitDescriptor(uint64_t a1)
{
  return sub_10004CC78(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 8));
}

Swift::Int sub_100062EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100063A0C(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004CC78);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2MixerUnitDescriptor(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100063A7C(a1, a2, a3, a4, sub_1000443A8);
}

Swift::Int ADC2MixerUnitDescriptorPart2.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_10004A038((uint64_t)v3, a1 & 0xFFFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_100062F18()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(unsigned int *)(v0 + 1);
  uint64_t v3 = v0[5];
  Hasher.init(_seed:)();
  sub_10004A038((uint64_t)v5, v1 | (v2 << 8) | (v3 << 40));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2MixerUnitDescriptorPart2(uint64_t a1)
{
  return sub_10004A038(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 8) | ((unint64_t)v1[5] << 40));
}

Swift::Int sub_100062F8C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(unsigned int *)(v0 + 1);
  uint64_t v3 = v0[5];
  Hasher.init(_seed:)();
  sub_10004A038((uint64_t)v5, v1 | (v2 << 8) | (v3 << 40));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2MixerUnitDescriptorPart2(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100040918(*a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 8) | ((unint64_t)a1[5] << 40), *a2 | ((unint64_t)*(unsigned int *)(a2 + 1) << 8) | ((unint64_t)a2[5] << 40));
}

Swift::Int ADC2MixerUnitDescriptorPart3.hashValue.getter(uint64_t a1)
{
  return sub_100063AB4(a1, (void (*)(unsigned char *, uint64_t))sub_10004A020);
}

Swift::Int sub_100063028(uint64_t a1, uint64_t a2)
{
  return sub_100063B1C(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004A020);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2MixerUnitDescriptorPart3(uint64_t a1)
{
  return sub_10004A020(a1, *v1);
}

Swift::Int sub_100063048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100063B8C(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004A020);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2MixerUnitDescriptorPart3(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100063BF0(a1, a2, a3, a4, (uint64_t (*)(void, void))sub_100040900);
}

Swift::Int ADC2SelectorUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_100063920(a1, (void (*)(unsigned char *, uint64_t))sub_10004B86C);
}

Swift::Int sub_100063090(uint64_t a1, uint64_t a2)
{
  return sub_100063988(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004B86C);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2SelectorUnitDescriptor(uint64_t a1)
{
  return sub_10004B86C(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 8));
}

Swift::Int sub_1000630B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100063A0C(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004B86C);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2SelectorUnitDescriptor(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100063A7C(a1, a2, a3, a4, sub_100042960);
}

Swift::Int ADC2SelectorUnitDescriptorPart2.hashValue.getter(uint64_t a1)
{
  return sub_100063AB4(a1, (void (*)(unsigned char *, uint64_t))sub_100048900);
}

Swift::Int sub_100063100(uint64_t a1, uint64_t a2)
{
  return sub_100063B1C(a1, a2, (void (*)(unsigned char *, uint64_t))sub_100048900);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2SelectorUnitDescriptorPart2(uint64_t a1)
{
  return sub_100048900(a1, *v1);
}

Swift::Int sub_100063120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100063B8C(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_100048900);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2SelectorUnitDescriptorPart2(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100063BF0(a1, a2, a3, a4, (uint64_t (*)(void, void))sub_10003EA4C);
}

Swift::Int ADC2FeatureUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_100063920(a1, (void (*)(unsigned char *, uint64_t))sub_10004C080);
}

Swift::Int sub_100063168(uint64_t a1, uint64_t a2)
{
  return sub_100063988(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004C080);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2FeatureUnitDescriptor(uint64_t a1)
{
  return sub_10004C080(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 8));
}

Swift::Int sub_100063190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100063A0C(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004C080);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2FeatureUnitDescriptor(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100063A7C(a1, a2, a3, a4, sub_100043418);
}

Swift::Int ADC2SRConverterUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000637D8(a1, (void (*)(unsigned char *, uint64_t))sub_100049284);
}

Swift::Int sub_1000631D8(uint64_t a1, uint64_t a2)
{
  return sub_100063840(a1, a2, (void (*)(unsigned char *, uint64_t))sub_100049284);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2SRConverterUnitDescriptor(uint64_t a1)
{
  return sub_100049284(a1, *v1);
}

Swift::Int sub_1000631F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000638B0(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_100049284);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2SRConverterUnitDescriptor(unint64_t *a1, unint64_t *a2)
{
  return sub_10003F6EC(*a1, *a2);
}

Swift::Int ADC2EffectUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_100063518(a1, (void (*)(unsigned char *, uint64_t))sub_10004C878);
}

Swift::Int sub_100063234(uint64_t a1, uint64_t a2)
{
  return sub_100063580(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004C878);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2EffectUnitDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000635FC(a1, a2, a3, sub_10004C878);
}

Swift::Int sub_100063264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100063630(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004C878);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2EffectUnitDescriptor(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000636A8(a1, a2, a3, a4, sub_100043E70);
}

Swift::Int ADC2ProcessingUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_100063518(a1, (void (*)(unsigned char *, uint64_t))sub_100049E04);
}

Swift::Int sub_1000632AC(uint64_t a1, uint64_t a2)
{
  return sub_100063580(a1, a2, (void (*)(unsigned char *, uint64_t))sub_100049E04);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2ProcessingUnitDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000635FC(a1, a2, a3, sub_100049E04);
}

Swift::Int sub_1000632DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100063630(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_100049E04);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2ProcessingUnitDescriptor(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000636A8(a1, a2, a3, a4, sub_100040620);
}

Swift::Int ADC2ProcessingUnitDescriptorPart2.hashValue.getter(unint64_t a1, unsigned int a2)
{
  char v2 = a1;
  *(void *)int v9 = a1;
  *(_WORD *)&v9[8] = a2;
  unint64_t v3 = a1 >> 8;
  unint64_t v4 = a1 >> 40;
  unint64_t v5 = HIWORD(a1);
  unsigned int v6 = a2 >> 8;
  Hasher.init(_seed:)();
  LOBYTE(v8) = v2;
  *(_DWORD *)((char *)&v8 + 1) = v3;
  BYTE5(v8) = v4;
  BYTE6(v8) = v5;
  *(_WORD *)((char *)&v8 + 7) = *(_WORD *)&v9[7];
  BYTE9(v8) = v6;
  sub_100047A18((uint64_t)v9, v8, WORD4(v8));
  return Hasher._finalize()();
}

Swift::Int sub_10006339C()
{
  char v1 = *v0;
  unsigned int v2 = *(_DWORD *)(v0 + 1);
  unsigned int v3 = *(_DWORD *)(v0 + 5);
  char v4 = v0[9];
  Hasher.init(_seed:)();
  LOBYTE(v6) = v1;
  *(void *)((char *)&v6 + 1) = __PAIR64__(v3, v2);
  BYTE9(v6) = v4;
  sub_100047A18((uint64_t)v7, v6, WORD4(v6));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2ProcessingUnitDescriptorPart2(uint64_t a1)
{
  *(void *)&v3[1] = *(void *)(v1 + 1);
  v3[9] = *(unsigned char *)(v1 + 9);
  return sub_100047A18(a1, *(unint64_t *)v3, *(unsigned __int16 *)&v3[8]);
}

Swift::Int sub_10006343C()
{
  char v1 = *v0;
  unsigned int v2 = *(_DWORD *)(v0 + 1);
  unsigned int v3 = *(_DWORD *)(v0 + 5);
  char v4 = v0[9];
  Hasher.init(_seed:)();
  LOBYTE(v6) = v1;
  *(void *)((char *)&v6 + 1) = __PAIR64__(v3, v2);
  BYTE9(v6) = v4;
  sub_100047A18((uint64_t)v7, v6, WORD4(v6));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2ProcessingUnitDescriptorPart2(uint64_t a1, char *a2)
{
  char v2 = *a2;
  unsigned int v3 = *(_DWORD *)(a2 + 1);
  unsigned int v4 = *(_DWORD *)(a2 + 5);
  char v5 = a2[9];
  *(void *)&v9[1] = *(void *)(a1 + 1);
  v9[9] = *(unsigned char *)(a1 + 9);
  unint64_t v6 = *(void *)v9;
  unsigned int v7 = *(unsigned __int16 *)&v9[8];
  LOBYTE(v10) = v2;
  *(void *)((char *)&v10 + 1) = __PAIR64__(v4, v3);
  BYTE9(v10) = v5;
  return sub_10003D714(v6, v7, v10, WORD4(v10));
}

Swift::Int ADC2ExtensionUnitDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_100063518(a1, (void (*)(unsigned char *, uint64_t))sub_10004B228);
}

Swift::Int sub_100063518(uint64_t a1, void (*a2)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a2(v5, a1 & 0xFFFFFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_100063568(uint64_t a1, uint64_t a2)
{
  return sub_100063580(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004B228);
}

Swift::Int sub_100063580(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t))
{
  uint64_t v5 = *((unsigned __int16 *)v3 + 2);
  uint64_t v6 = *((unsigned __int8 *)v3 + 6);
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  a3(v9, v7 | (v5 << 32) | (v6 << 48));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2ExtensionUnitDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000635FC(a1, a2, a3, sub_10004B228);
}

uint64_t sub_1000635FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, unint64_t))
{
  return a4(a1, *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)v4 + 6) << 48));
}

Swift::Int sub_100063618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100063630(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004B228);
}

Swift::Int sub_100063630(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  uint64_t v6 = *((unsigned __int16 *)v4 + 2);
  uint64_t v7 = *((unsigned __int8 *)v4 + 6);
  uint64_t v8 = *v4;
  Hasher.init(_seed:)();
  a4(v10, v8 | (v6 << 32) | (v7 << 48));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2ExtensionUnitDescriptor(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_1000636A8(a1, a2, a3, a4, sub_10004216C);
}

uint64_t sub_1000636A8(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t, unint64_t))
{
  return a5(*a1 | ((unint64_t)*((unsigned __int16 *)a1 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48), *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48));
}

Swift::Int ADC2ExtensionUnitDescriptorPart2.hashValue.getter(unint64_t a1)
{
  Hasher.init(_seed:)();
  sub_1000481C0((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int sub_100063720()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  sub_1000481C0((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2ExtensionUnitDescriptorPart2(uint64_t a1)
{
  return sub_1000481C0(a1, *v1);
}

Swift::Int sub_100063770()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  sub_1000481C0((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2ExtensionUnitDescriptorPart2(unint64_t *a1, unint64_t *a2)
{
  return sub_10003E140(*a1, *a2);
}

Swift::Int ADC2ClockSourceDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_1000637D8(a1, (void (*)(unsigned char *, uint64_t))sub_10004C098);
}

Swift::Int sub_1000637D8(uint64_t a1, void (*a2)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a2(v5, a1);
  return Hasher._finalize()();
}

Swift::Int sub_100063828(uint64_t a1, uint64_t a2)
{
  return sub_100063840(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004C098);
}

Swift::Int sub_100063840(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v7, v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2ClockSourceDescriptor(uint64_t a1)
{
  return sub_10004C098(a1, *v1);
}

Swift::Int sub_100063898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000638B0(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004C098);
}

Swift::Int sub_1000638B0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v8, v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2ClockSourceDescriptor(unint64_t *a1, unint64_t *a2)
{
  return sub_100043430(*a1, *a2);
}

Swift::Int ADC2ClockSelectorDescriptor.hashValue.getter(uint64_t a1)
{
  return sub_100063920(a1, (void (*)(unsigned char *, uint64_t))sub_10004B240);
}

Swift::Int sub_100063920(uint64_t a1, void (*a2)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a2(v5, a1 & 0xFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_100063970(uint64_t a1, uint64_t a2)
{
  return sub_100063988(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004B240);
}

Swift::Int sub_100063988(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t))
{
  uint64_t v5 = *v3;
  uint64_t v6 = *(unsigned int *)(v3 + 1);
  Hasher.init(_seed:)();
  a3(v8, v5 | (v6 << 8));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2ClockSelectorDescriptor(uint64_t a1)
{
  return sub_10004B240(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 8));
}

Swift::Int sub_1000639F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100063A0C(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004B240);
}

Swift::Int sub_100063A0C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  uint64_t v6 = *v4;
  uint64_t v7 = *(unsigned int *)(v4 + 1);
  Hasher.init(_seed:)();
  a4(v9, v6 | (v7 << 8));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2ClockSelectorDescriptor(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100063A7C(a1, a2, a3, a4, sub_100042184);
}

uint64_t sub_100063A7C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t, unint64_t))
{
  return a5(*a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 8), *a2 | ((unint64_t)*(unsigned int *)(a2 + 1) << 8));
}

Swift::Int ADC2ClockSelectorDescriptorPart2.hashValue.getter(uint64_t a1)
{
  return sub_100063AB4(a1, (void (*)(unsigned char *, uint64_t))sub_10004837C);
}

Swift::Int sub_100063AB4(uint64_t a1, void (*a2)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a2(v5, a1);
  return Hasher._finalize()();
}

Swift::Int sub_100063B04(uint64_t a1, uint64_t a2)
{
  return sub_100063B1C(a1, a2, (void (*)(unsigned char *, uint64_t))sub_10004837C);
}

Swift::Int sub_100063B1C(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)();
  a3(v7, v5);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2ClockSelectorDescriptorPart2(uint64_t a1)
{
  return sub_10004837C(a1, *v1);
}

Swift::Int sub_100063B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100063B8C(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_10004837C);
}

Swift::Int sub_100063B8C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)();
  a4(v8, v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2ClockSelectorDescriptorPart2(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100063BF0(a1, a2, a3, a4, (uint64_t (*)(void, void))sub_10003E378);
}

uint64_t sub_100063BF0(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void))
{
  return a5(*a1, *a2);
}

Swift::Int ADC2ClockMultiplierDescriptor.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_10004929C((uint64_t)v3, a1 & 0xFFFFFFFFFFFFFFLL);
  return Hasher._finalize()();
}

Swift::Int sub_100063C48()
{
  uint64_t v1 = *((unsigned __int8 *)v0 + 2);
  uint64_t v2 = *(unsigned int *)((char *)v0 + 3);
  uint64_t v3 = *v0;
  Hasher.init(_seed:)();
  sub_10004929C((uint64_t)v5, v3 | (v1 << 16) | (v2 << 24));
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ADC2ClockMultiplierDescriptor(uint64_t a1)
{
  return sub_10004929C(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v1 + 3) << 24));
}

Swift::Int sub_100063CBC()
{
  uint64_t v1 = *((unsigned __int8 *)v0 + 2);
  uint64_t v2 = *(unsigned int *)((char *)v0 + 3);
  uint64_t v3 = *v0;
  Hasher.init(_seed:)();
  sub_10004929C((uint64_t)v5, v3 | (v1 << 16) | (v2 << 24));
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ADC2ClockMultiplierDescriptor(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_10003F704(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)a1 + 3) << 24), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)a2 + 3) << 24));
}

uint64_t sub_100063D40(uint64_t a1)
{
  uint64_t result = sub_100064880(&qword_100128F80, type metadata accessor for ADC2InputTerminalDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100063D98()
{
  return sub_100064880(&qword_100128F88, type metadata accessor for ADC2InputTerminalDescriptor);
}

uint64_t sub_100063DE0(uint64_t a1)
{
  uint64_t result = sub_100064880(&qword_100128F90, type metadata accessor for ADC2OutputTerminalDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100063E38()
{
  return sub_100064880(&qword_100128F98, type metadata accessor for ADC2OutputTerminalDescriptor);
}

uint64_t sub_100063E80(uint64_t a1)
{
  uint64_t result = sub_100064880(&qword_100128FA0, type metadata accessor for ADC2MixerUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100063ED8()
{
  return sub_100064880(&qword_100128FA8, type metadata accessor for ADC2MixerUnitDescriptor);
}

uint64_t sub_100063F20(uint64_t a1)
{
  uint64_t result = sub_100064880(&qword_100128FB0, type metadata accessor for ADC2MixerUnitDescriptorPart2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100063F78()
{
  return sub_100064880(&qword_100128FB8, type metadata accessor for ADC2MixerUnitDescriptorPart2);
}

uint64_t sub_100063FC0(uint64_t a1)
{
  uint64_t result = sub_100064880(&qword_100128FC0, type metadata accessor for ADC2MixerUnitDescriptorPart3);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100064018()
{
  return sub_100064880(&qword_100128FC8, type metadata accessor for ADC2MixerUnitDescriptorPart3);
}

uint64_t sub_100064060(uint64_t a1)
{
  uint64_t result = sub_100064880(&qword_100128FD0, type metadata accessor for ADC2SelectorUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000640B8()
{
  return sub_100064880(&qword_100128FD8, type metadata accessor for ADC2SelectorUnitDescriptor);
}

uint64_t sub_100064100(uint64_t a1)
{
  uint64_t result = sub_100064880(&qword_100128FE0, type metadata accessor for ADC2SelectorUnitDescriptorPart2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100064158()
{
  return sub_100064880(&qword_100128FE8, type metadata accessor for ADC2SelectorUnitDescriptorPart2);
}

uint64_t sub_1000641A0(uint64_t a1)
{
  uint64_t result = sub_100064880(&qword_100128FF0, type metadata accessor for ADC2FeatureUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000641F8()
{
  return sub_100064880(&qword_100128FF8, type metadata accessor for ADC2FeatureUnitDescriptor);
}

uint64_t sub_100064240(uint64_t a1)
{
  uint64_t result = sub_100064880(&qword_100129000, type metadata accessor for ADC2SRConverterUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100064298()
{
  return sub_100064880(&qword_100129008, type metadata accessor for ADC2SRConverterUnitDescriptor);
}

uint64_t sub_1000642E0(uint64_t a1)
{
  uint64_t result = sub_100064880(&qword_100129010, type metadata accessor for ADC2EffectUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100064338()
{
  return sub_100064880(&qword_100129018, type metadata accessor for ADC2EffectUnitDescriptor);
}

uint64_t sub_100064380(uint64_t a1)
{
  uint64_t result = sub_100064880(&qword_100129020, type metadata accessor for ADC2ProcessingUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000643D8()
{
  return sub_100064880(&qword_100129028, type metadata accessor for ADC2ProcessingUnitDescriptor);
}

uint64_t sub_100064420(uint64_t a1)
{
  uint64_t result = sub_100064880(&qword_100129030, type metadata accessor for ADC2ProcessingUnitDescriptorPart2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100064478()
{
  return sub_100064880(&qword_100129038, type metadata accessor for ADC2ProcessingUnitDescriptorPart2);
}

uint64_t sub_1000644C0(uint64_t a1)
{
  uint64_t result = sub_100064880(&qword_100129040, type metadata accessor for ADC2ExtensionUnitDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100064518()
{
  return sub_100064880(&qword_100129048, type metadata accessor for ADC2ExtensionUnitDescriptor);
}

uint64_t sub_100064560(uint64_t a1)
{
  uint64_t result = sub_100064880(&qword_100129050, type metadata accessor for ADC2ExtensionUnitDescriptorPart2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000645B8()
{
  return sub_100064880(&qword_100129058, type metadata accessor for ADC2ExtensionUnitDescriptorPart2);
}

uint64_t sub_100064600(uint64_t a1)
{
  uint64_t result = sub_100064880(&qword_100129060, type metadata accessor for ADC2ClockSourceDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100064658()
{
  return sub_100064880(&qword_100129068, type metadata accessor for ADC2ClockSourceDescriptor);
}

uint64_t sub_1000646A0(uint64_t a1)
{
  uint64_t result = sub_100064880(&qword_100129070, type metadata accessor for ADC2ClockSelectorDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000646F8()
{
  return sub_100064880(&qword_100129078, type metadata accessor for ADC2ClockSelectorDescriptor);
}

uint64_t sub_100064740(uint64_t a1)
{
  uint64_t result = sub_100064880(&qword_100129080, type metadata accessor for ADC2ClockSelectorDescriptorPart2);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100064798()
{
  return sub_100064880(&qword_100129088, type metadata accessor for ADC2ClockSelectorDescriptorPart2);
}

uint64_t sub_1000647E0(uint64_t a1)
{
  uint64_t result = sub_100064880(&qword_100129090, type metadata accessor for ADC2ClockMultiplierDescriptor);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100064838()
{
  return sub_100064880(&qword_100129098, type metadata accessor for ADC2ClockMultiplierDescriptor);
}

uint64_t sub_100064880(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000648C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v43 = a1;
  uint64_t v48 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  unsigned int v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AC7C(&qword_1001290A0);
  uint64_t inited = swift_initStackObject();
  uint64_t v6 = 0;
  *(_OWORD *)(inited + 16) = xmmword_1000EB1E0;
  *(_DWORD *)(inited + 32) = 131073;
  *(unsigned char *)(inited + 38) = 0;
  *(_WORD *)(inited + 36) = 257;
  *(unsigned char *)(inited + 41) = 0;
  *(_WORD *)(inited + 39) = 256;
  *(_DWORD *)(inited + 42) = 524292;
  *(unsigned char *)(inited + 48) = 6;
  *(_WORD *)(inited + 46) = 577;
  *(unsigned char *)(inited + 51) = 6;
  *(_WORD *)(inited + 49) = 576;
  *(_DWORD *)(inited + 52) = 2097168;
  *(unsigned char *)(inited + 58) = 0;
  *(_WORD *)(inited + 56) = 897;
  *(unsigned char *)(inited + 61) = 0;
  *(_WORD *)(inited + 59) = 896;
  *(_DWORD *)(inited + 62) = 8388672;
  *(unsigned char *)(inited + 68) = 6;
  *(_WORD *)(inited + 66) = 1217;
  *(unsigned char *)(inited + 71) = 6;
  *(_WORD *)(inited + 69) = 1216;
  *(_DWORD *)(inited + 72) = 33554688;
  *(unsigned char *)(inited + 78) = 16;
  *(_WORD *)(inited + 76) = 1281;
  *(unsigned char *)(inited + 81) = 16;
  *(_WORD *)(inited + 79) = 1280;
  *(_DWORD *)(inited + 82) = 134218752;
  *(unsigned char *)(inited + 88) = 16;
  *(_WORD *)(inited + 86) = 1601;
  *(unsigned char *)(inited + 91) = 16;
  *(_WORD *)(inited + 89) = 1600;
  long long v54 = &_swiftEmptySetSingleton;
  uint64_t v41 = *(unsigned __int8 *)(v1 + 3);
  uint64_t v42 = v1;
  uint64_t v40 = *(unsigned __int16 *)(v1 + 4);
  uint64_t v39 = *(unsigned __int8 *)(v1 + 6);
  uint64_t v38 = *(unsigned __int8 *)(v1 + 7);
  uint64_t v35 = *(unsigned __int8 *)(v1 + 8);
  uint64_t v34 = *(unsigned int *)(v1 + 9);
  int v7 = *(unsigned __int8 *)(v1 + 13);
  int v50 = *(unsigned __int16 *)(v1 + 14);
  int v8 = *(unsigned __int8 *)(v1 + 16);
  int v36 = v7;
  int v37 = v8;
  long long v44 = &v56;
  int64_t v45 = (void (**)(char *, uint64_t))(v2 + 8);
  int v9 = _swiftEmptyArrayStorage;
  uint64_t v46 = inited;
  uint64_t v47 = v4;
  do
  {
    uint64_t v10 = inited + v6;
    int v11 = (unsigned __int16)(*(_WORD *)(inited + v6 + 34) & v50);
    if ((*(_WORD *)(inited + v6 + 32) & (unsigned __int16)v50) != 0)
    {
      uint64_t v62 = v6;
      int v12 = *(unsigned __int16 *)(v10 + 36) | (*(unsigned __int8 *)(v10 + 38) << 16);
      int v13 = *(unsigned __int16 *)(v10 + 39) | (*(unsigned __int8 *)(v10 + 41) << 16);
      if (v11) {
        int v14 = v12;
      }
      else {
        int v14 = v13;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v9 = sub_100058F88(0, v9[2] + 1, 1, v9);
      }
      unint64_t v16 = v9[2];
      unint64_t v15 = v9[3];
      if (v16 >= v15 >> 1) {
        int v9 = sub_100058F88((void *)(v15 > 1), v16 + 1, 1, v9);
      }
      long long v9[2] = v16 + 1;
      uint64_t v17 = (char *)v9 + 3 * v16;
      v17[34] = BYTE2(v14);
      *((_WORD *)v17 + 16) = v14;
      if (!v11)
      {
        uint64_t v6 = v62;
        goto LABEL_3;
      }
      unint64_t v49 = v9;
      *((void *)&v56 + 1) = &type metadata for USBDescriptorControl;
      LOWORD(v55) = v12;
      BYTE2(v55) = BYTE2(v12);
      Mirror.init(reflecting:)();
      Mirror.children.getter();
      swift_getObjectType();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v18 = dispatch thunk of _AnyIndexBox._typeID.getter();
      swift_getObjectType();
      uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter();
      if (v18 != result)
      {
        __break(1u);
        return result;
      }
      char v20 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
      swift_unknownObjectRelease();
      if (v20)
      {
        swift_unknownObjectRelease();
        long long v56 = 0u;
        long long v57 = 0u;
        long long v55 = 0u;
      }
      else
      {
        dispatch thunk of _AnyCollectionBox.subscript.getter();
        long long v55 = v51;
        long long v56 = v52;
        long long v57 = v53;
        swift_unknownObjectRelease();
      }
      uint64_t inited = v46;
      uint64_t v21 = v47;
      int v9 = v49;
      swift_release();
      (*v45)(v21, v48);
      uint64_t v6 = v62;
      if (!*((void *)&v57 + 1))
      {
        sub_100062BB0((uint64_t)&v55);
LABEL_25:
        sub_10005B1DC(&v55, 10);
        goto LABEL_3;
      }
      long long v22 = v55;
      sub_10001ABC4((uint64_t)v44);
      if (!*((void *)&v22 + 1)) {
        goto LABEL_25;
      }
      if (v22 == __PAIR128__(0xEB00000000746365, 0x746F725079706F63))
      {
        swift_bridgeObjectRelease();
        goto LABEL_3;
      }
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v23 & 1) == 0) {
        goto LABEL_25;
      }
    }
    else if ((*(_WORD *)(inited + v6 + 34) & (unsigned __int16)v50) != 0)
    {
      sub_10005B1DC(&v55, 11);
    }
LABEL_3:
    v6 += 10;
  }
  while (v6 != 60);
  swift_bridgeObjectRelease();
  uint64_t v24 = v35 | (v34 << 32);
  sub_10000AC7C(&qword_1001290A8);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1000E8090;
  *(void *)(v25 + 32) = v24;
  *(unsigned char *)(v25 + 40) = v36;
  *(unsigned char *)(v25 + 41) = 1;
  uint64_t v26 = *(void *)(v42 + 24);
  __int16 v27 = *(_WORD *)(v42 + 32);
  uint64_t v28 = sub_10005AD1C((uint64_t)v54);
  swift_bridgeObjectRelease();
  if (v37) {
    int v29 = v37;
  }
  else {
    int v29 = 16711680;
  }
  uint64_t result = sub_1000C0C44(v41, v38, v40, v39, 0, (uint64_t)v9, v29, v25, (uint64_t)&v55, 0, 0xF000000000000000, v26, v27, (uint64_t)v28);
  long long v30 = v60;
  uint64_t v31 = v43;
  *(_OWORD *)(v43 + 64) = v59;
  *(_OWORD *)(v31 + 80) = v30;
  *(void *)(v31 + 96) = v61;
  long long v32 = v56;
  *(_OWORD *)uint64_t v31 = v55;
  *(_OWORD *)(v31 + 16) = v32;
  long long v33 = v58;
  *(_OWORD *)(v31 + 32) = v57;
  *(_OWORD *)(v31 + 48) = v33;
  return result;
}

uint64_t sub_100064EB4@<X0>(unint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, _OWORD *a5@<X8>)
{
  int v41 = a4;
  uint64_t v42 = a3;
  unint64_t v40 = a1;
  uint64_t v43 = a5;
  HIDWORD(v39) = a2;
  int v5 = (unsigned __int16)(a2 >> 8);
  uint64_t v48 = type metadata accessor for Mirror();
  uint64_t v6 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  int v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AC7C(&qword_1001290B0);
  uint64_t inited = swift_initStackObject();
  uint64_t v10 = 0;
  *(_OWORD *)(inited + 16) = xmmword_1000EB1F0;
  *(_DWORD *)(inited + 32) = 131073;
  *(unsigned char *)(inited + 38) = 0;
  *(_WORD *)(inited + 36) = 257;
  *(unsigned char *)(inited + 41) = 0;
  *(_WORD *)(inited + 39) = 256;
  *(_DWORD *)(inited + 42) = 524292;
  *(unsigned char *)(inited + 48) = 6;
  *(_WORD *)(inited + 46) = 577;
  *(unsigned char *)(inited + 51) = 6;
  *(_WORD *)(inited + 49) = 576;
  *(_DWORD *)(inited + 52) = 2097168;
  *(unsigned char *)(inited + 58) = 0;
  *(_WORD *)(inited + 56) = 897;
  *(unsigned char *)(inited + 61) = 0;
  *(_WORD *)(inited + 59) = 896;
  *(_DWORD *)(inited + 62) = 8388672;
  *(unsigned char *)(inited + 68) = 16;
  *(_WORD *)(inited + 66) = 1281;
  *(unsigned char *)(inited + 71) = 16;
  *(_WORD *)(inited + 69) = 1280;
  *(_DWORD *)(inited + 72) = 33554688;
  *(unsigned char *)(inited + 78) = 16;
  *(_WORD *)(inited + 76) = 1601;
  *(unsigned char *)(inited + 81) = 16;
  *(_WORD *)(inited + 79) = 1600;
  long long v60 = &_swiftEmptySetSingleton;
  long long v44 = &v55;
  int64_t v45 = (void (**)(char *, uint64_t))(v6 + 8);
  int v50 = _swiftEmptyArrayStorage;
  int v49 = v5;
  uint64_t v47 = v8;
  uint64_t v46 = inited;
  do
  {
    uint64_t v12 = inited + v10;
    int v13 = (unsigned __int16)(*(_WORD *)(inited + v10 + 34) & v5);
    if ((*(_WORD *)(inited + v10 + 32) & (unsigned __int16)v5) != 0)
    {
      int v14 = *(unsigned __int16 *)(v12 + 36) | (*(unsigned __int8 *)(v12 + 38) << 16);
      int v15 = *(unsigned __int16 *)(v12 + 39) | (*(unsigned __int8 *)(v12 + 41) << 16);
      if ((*(_WORD *)(inited + v10 + 34) & (unsigned __int16)v5) != 0) {
        int v16 = v14;
      }
      else {
        int v16 = v15;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v50 = sub_100058F88(0, v50[2] + 1, 1, v50);
      }
      unint64_t v18 = v50[2];
      unint64_t v17 = v50[3];
      if (v18 >= v17 >> 1) {
        int v50 = sub_100058F88((void *)(v17 > 1), v18 + 1, 1, v50);
      }
      unsigned __int8 v19 = v50;
      v50[2] = v18 + 1;
      char v20 = (char *)v19 + 3 * v18;
      v20[34] = BYTE2(v16);
      *((_WORD *)v20 + 16) = v16;
      if (v13)
      {
        *((void *)&v55 + 1) = &type metadata for USBDescriptorControl;
        LOWORD(v54) = v14;
        BYTE2(v54) = BYTE2(v14);
        Mirror.init(reflecting:)();
        Mirror.children.getter();
        swift_getObjectType();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        uint64_t v21 = dispatch thunk of _AnyIndexBox._typeID.getter();
        swift_getObjectType();
        uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter();
        if (v21 != result)
        {
          __break(1u);
          return result;
        }
        char v23 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
        swift_unknownObjectRelease();
        if (v23)
        {
          swift_unknownObjectRelease();
          long long v55 = 0u;
          long long v56 = 0u;
          long long v54 = 0u;
        }
        else
        {
          dispatch thunk of _AnyCollectionBox.subscript.getter();
          long long v54 = v51;
          long long v55 = v52;
          long long v56 = v53;
          swift_unknownObjectRelease();
        }
        uint64_t v24 = v47;
        uint64_t inited = v46;
        swift_release();
        (*v45)(v24, v48);
        if (!*((void *)&v56 + 1))
        {
          sub_100062BB0((uint64_t)&v54);
          LOWORD(v5) = v49;
LABEL_3:
          Swift::Int v11 = 10;
LABEL_4:
          sub_10005B1DC(&v54, v11);
          goto LABEL_5;
        }
        long long v25 = v54;
        sub_10001ABC4((uint64_t)v44);
        LOWORD(v5) = v49;
        if (!*((void *)&v25 + 1)) {
          goto LABEL_3;
        }
        if (v25 == __PAIR128__(0xEB00000000746365, 0x746F725079706F63))
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v26 & 1) == 0) {
            goto LABEL_3;
          }
        }
      }
    }
    else if ((*(_WORD *)(inited + v10 + 34) & (unsigned __int16)v5) != 0)
    {
      Swift::Int v11 = 11;
      goto LABEL_4;
    }
LABEL_5:
    v10 += 10;
  }
  while (v10 != 50);
  swift_bridgeObjectRelease();
  int v27 = HIBYTE(HIDWORD(v39));
  uint64_t v28 = HIBYTE(v40);
  uint64_t v29 = BYTE3(v40);
  uint64_t v30 = BYTE4(v39);
  uint64_t v31 = WORD2(v40);
  uint64_t v32 = BYTE6(v40);
  long long v33 = sub_10005AD1C((uint64_t)v60);
  swift_bridgeObjectRelease();
  if (v27) {
    int v34 = v27;
  }
  else {
    int v34 = 16711680;
  }
  uint64_t result = sub_1000C0DC8(v29, v30, v28, v31, v32, 0, v34, (uint64_t)v50, (uint64_t)&v54, v42, v41, (uint64_t)v33);
  long long v35 = v57;
  int v36 = v43;
  v43[2] = v56;
  v36[3] = v35;
  long long v37 = v59;
  v36[4] = v58;
  v36[5] = v37;
  long long v38 = v55;
  *int v36 = v54;
  v36[1] = v38;
  return result;
}

uint64_t sub_1000654A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t)sub_1000784BC(1, a1, a2);
  if (!v3)
  {
    if (*(void *)(result + 16))
    {
      int v9 = v7;
      uint64_t v10 = v8;
      v4.i32[0] = *(_DWORD *)(result + 32);
      uint64_t v11 = *(unsigned __int8 *)(result + 36);
      swift_bridgeObjectRelease();
      uint64_t v12 = sub_1000781B8(v11, v9, v10);
      uint64_t result = (uint64_t)sub_100077DCC(1, v13, v14);
      if (*(void *)(result + 16))
      {
        unint64_t v17 = v15;
        uint64_t v18 = v16;
        int16x8_t v26 = (int16x8_t)vmovl_u8(v4);
        char v19 = *(unsigned char *)(result + 32);
        int v20 = *(_DWORD *)(result + 33);
        char v21 = *(unsigned char *)(result + 37);
        uint64_t result = swift_bridgeObjectRelease();
        if (((v26.u16[0] - 13) & 0xFFFFFF00) == 0)
        {
          if ((((v26.i8[0] - 13) - v11) & 0xFFFFFF00) == 0)
          {
            long long v22 = sub_1000781B8((v26.i8[0] - 13 - v11), v17, v18);
            uint64_t result = (uint64_t)sub_100077A34(1, v23, v24);
            if (*(void *)(result + 16))
            {
              __int16 v25 = *(_WORD *)(result + 32);
              uint64_t result = swift_bridgeObjectRelease();
              *(_DWORD *)a3 = vmovn_s16(v26).u32[0];
              *(unsigned char *)(a3 + 4) = v11;
              *(void *)(a3 + 8) = v12;
              *(unsigned char *)(a3 + 16) = v19;
              *(_DWORD *)(a3 + 17) = v20;
              *(unsigned char *)(a3 + 21) = v21;
              *(void *)(a3 + 24) = v22;
              *(_WORD *)(a3 + 32) = v25;
              return result;
            }
            goto LABEL_14;
          }
LABEL_13:
          __break(1u);
LABEL_14:
          __break(1u);
          return result;
        }
LABEL_12:
        __break(1u);
        goto LABEL_13;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

double sub_100065644@<D0>(uint64_t a1@<X8>)
{
  sub_10000AC7C(&qword_1001290B8);
  uint64_t inited = swift_initStackObject();
  uint64_t v3 = 0;
  *(_OWORD *)(inited + 16) = xmmword_1000E80A0;
  *(_WORD *)(inited + 32) = 513;
  *(unsigned char *)(inited + 36) = 6;
  *(_WORD *)(inited + 34) = 705;
  *(unsigned char *)(inited + 39) = 6;
  *(_WORD *)(inited + 37) = 704;
  *(_WORD *)(inited + 40) = 2052;
  *(unsigned char *)(inited + 44) = 16;
  *(_WORD *)(inited + 42) = 769;
  *(unsigned char *)(inited + 47) = 16;
  *(_WORD *)(inited + 45) = 768;
  *(_WORD *)(inited + 48) = 8208;
  *(unsigned char *)(inited + 52) = 16;
  *(_WORD *)(inited + 50) = 1089;
  *(unsigned char *)(inited + 55) = 16;
  *(_WORD *)(inited + 53) = 1088;
  int v34 = &_swiftEmptySetSingleton;
  unsigned __int8 v4 = *(unsigned char *)(v1 + 11);
  uint64_t v30 = v1;
  int v29 = *(unsigned __int8 *)(v1 + 12);
  int v5 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v7 = inited + v3;
    int v8 = (*(unsigned char *)(inited + v3 + 33) & v4);
    if ((*(unsigned char *)(inited + v3 + 32) & v4) == 0)
    {
      if ((*(unsigned char *)(inited + v3 + 33) & v4) == 0) {
        goto LABEL_5;
      }
      Swift::Int v6 = 11;
      goto LABEL_4;
    }
    int v9 = (unsigned __int16 *)(v7 + 37);
    uint64_t v10 = (unsigned __int16 *)(v7 + 34);
    if ((*(unsigned char *)(inited + v3 + 33) & v4) == 0) {
      uint64_t v10 = v9;
    }
    int v11 = *((unsigned __int8 *)v10 + 2);
    int v12 = *v10;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int v5 = sub_100058F88(0, v5[2] + 1, 1, v5);
    }
    unint64_t v14 = v5[2];
    unint64_t v13 = v5[3];
    if (v14 >= v13 >> 1) {
      int v5 = sub_100058F88((void *)(v13 > 1), v14 + 1, 1, v5);
    }
    _OWORD v5[2] = v14 + 1;
    int v15 = (char *)v5 + 3 * v14;
    v15[34] = (v12 | (v11 << 16)) >> 16;
    *((_WORD *)v15 + 16) = v12;
    if (v8)
    {
      Swift::Int v6 = 10;
LABEL_4:
      sub_10005B1DC(v32, v6);
    }
LABEL_5:
    v3 += 8;
  }
  while (v3 != 24);
  swift_bridgeObjectRelease();
  __int16 v16 = *(unsigned __int8 *)(v1 + 10);
  unint64_t v17 = *(unsigned __int8 *)(v1 + 5) | ((unint64_t)*(unsigned int *)(v1 + 6) << 32);
  uint64_t v18 = *(unsigned __int8 *)(v30 + 3);
  uint64_t v19 = *(void *)(v30 + 32);
  uint64_t v20 = *(void *)(v30 + 40);
  uint64_t v28 = *(void *)(v30 + 16);
  uint64_t v21 = (uint64_t)v34;
  __int16 v22 = *(_WORD *)(v30 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v23 = sub_10005AD1C(v21);
  swift_bridgeObjectRelease();
  if (v29) {
    int v24 = v29;
  }
  else {
    int v24 = 16711680;
  }
  sub_1000C0EC4(v18, v17, v16 | 0x100, v19, v20, (uint64_t)v5, v24, v28, (uint64_t)v32, v22, (uint64_t)v23);
  long long v25 = v32[3];
  *(_OWORD *)(a1 + 32) = v32[2];
  *(_OWORD *)(a1 + 48) = v25;
  *(_OWORD *)(a1 + 64) = v32[4];
  *(void *)(a1 + 80) = v33;
  double result = *(double *)v32;
  long long v27 = v32[1];
  *(_OWORD *)a1 = v32[0];
  *(_OWORD *)(a1 + 16) = v27;
  return result;
}

uint64_t sub_1000658E4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned __int8 v8 = BYTE3(a1);
  unint64_t v10 = HIDWORD(a1);
  int v11 = BYTE6(a1);
  int v24 = &_swiftEmptySetSingleton;
  if (((a1 >> 40) & 1) == 0)
  {
    sub_10005B1DC(&v21, 12);
    if (v10 != 1)
    {
      if (!(_BYTE)v10) {
        goto LABEL_15;
      }
      LOWORD(v12) = 1;
      if (!v11) {
        goto LABEL_11;
      }
      goto LABEL_12;
    }
    LOWORD(v12) = 1;
    goto LABEL_9;
  }
  if (BYTE4(a1))
  {
    int v12 = (BYTE5(a1) >> 1) & 1;
    if (BYTE4(a1) != 1)
    {
LABEL_10:
      if (!v11) {
LABEL_11:
      }
        int v11 = 16711680;
LABEL_12:
      uint64_t v13 = v8;
      sub_10000AC7C(&qword_100128E78);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_1000E8090;
      *(unsigned char *)(v14 + 34) = 64;
      *(_WORD *)(v14 + 32) = v12 | 0x1C0;
      uint64_t v15 = (uint64_t)v24;
      swift_bridgeObjectRetain();
      __int16 v16 = sub_10005AD1C(v15);
      swift_bridgeObjectRelease();
      uint64_t result = sub_1000C0FFC(v13, a4, v14, v11, a2, a3, (uint64_t)v16, (uint64_t)v22);
      long long v18 = v22[3];
      *(_OWORD *)(a5 + 32) = v22[2];
      *(_OWORD *)(a5 + 48) = v18;
      *(void *)(a5 + 64) = v23;
      long long v19 = v22[1];
      *(_OWORD *)a5 = v22[0];
      *(_OWORD *)(a5 + 16) = v19;
      return result;
    }
LABEL_9:
    sub_10005B1DC(&v21, 14);
    goto LABEL_10;
  }
LABEL_15:
  swift_bridgeObjectRelease();
  sub_10000CD54();
  swift_allocError();
  *(unsigned char *)uint64_t v20 = 15;
  *(void *)(v20 + 8) = 0;
  *(void *)(v20 + 16) = 0xE000000000000000;
  *(void *)(v20 + 24) = 0x2928797469746E65;
  *(void *)(v20 + 32) = 0xE800000000000000;
  *(void *)(v20 + 40) = 0xD00000000000001FLL;
  *(void *)(v20 + 48) = 0x80000001000E3F10;
  *(void *)(v20 + 56) = 376;
  return swift_willThrow();
}

uint64_t sub_100065AFC@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = 0;
  int v94 = *(_DWORD *)result;
  uint64_t v19 = 0x200000001;
  char v21 = 16;
  __int16 v20 = 385;
  __int16 v22 = 384;
  char v23 = 16;
  uint64_t v24 = 0x800000004;
  char v26 = 17;
  __int16 v25 = 705;
  __int16 v27 = 704;
  char v28 = 17;
  uint64_t v29 = 0x2000000010;
  char v31 = 32;
  __int16 v30 = 769;
  __int16 v32 = 768;
  char v33 = 32;
  uint64_t v34 = 0x8000000040;
  char v36 = 32;
  __int16 v35 = 1089;
  char v38 = 32;
  __int16 v37 = 1088;
  uint64_t v39 = 0x20000000100;
  char v41 = 32;
  __int16 v40 = 1409;
  char v43 = 32;
  __int16 v42 = 1408;
  uint64_t v44 = 0x80000000400;
  char v46 = 32;
  __int16 v45 = 1729;
  char v48 = 32;
  __int16 v47 = 1728;
  uint64_t v49 = 0x200000001000;
  char v51 = 48;
  __int16 v50 = 1793;
  __int16 v52 = 1792;
  char v53 = 48;
  uint64_t v54 = 0x800000004000;
  __int16 v55 = 2113;
  char v56 = 50;
  __int16 v57 = 2112;
  char v58 = 50;
  uint64_t v59 = 0x2000000010000;
  char v61 = 48;
  __int16 v60 = 2433;
  char v63 = 48;
  __int16 v62 = 2432;
  uint64_t v64 = 0x8000000040000;
  char v66 = 48;
  __int16 v65 = 2753;
  char v68 = 48;
  __int16 v67 = 2752;
  uint64_t v69 = 0x20000000100000;
  char v71 = 65;
  __int16 v70 = 2817;
  __int16 v72 = 2816;
  char v73 = 65;
  uint64_t v74 = 0x80000000400000;
  char v76 = 65;
  __int16 v75 = 3137;
  char v78 = 65;
  __int16 v77 = 3136;
  uint64_t v79 = 0x200000001000000;
  char v81 = 64;
  __int16 v80 = 3457;
  __int16 v82 = 3456;
  char v83 = 64;
  uint64_t v84 = 0x800000004000000;
  char v86 = 16;
  __int16 v85 = 3585;
  char v88 = 16;
  __int16 v87 = 3584;
  uint64_t v89 = 0x2000000010000000;
  char v91 = 16;
  __int16 v90 = 3905;
  __int16 v92 = 3904;
  char v93 = 16;
  uint64_t v3 = _swiftEmptyArrayStorage;
  do
  {
    int v5 = &v18[v2 + 1];
    int v6 = *(_DWORD *)((char *)&v19 + v2 + 4);
    int v7 = v6 & v94;
    if ((*(_DWORD *)&v18[v2 + 33] & v94) != 0)
    {
      unsigned __int8 v8 = (unsigned __int16 *)(v5 + 43);
      int v9 = (unsigned __int16 *)(v5 + 40);
      if (!v7) {
        int v9 = v8;
      }
      int v10 = *((unsigned __int8 *)v9 + 2);
      int v11 = *v9;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100058F88(0, v3[2] + 1, 1, v3);
        uint64_t v3 = (void *)result;
      }
      unint64_t v13 = v3[2];
      unint64_t v12 = v3[3];
      if (v13 >= v12 >> 1)
      {
        uint64_t result = (uint64_t)sub_100058F88((void *)(v12 > 1), v13 + 1, 1, v3);
        uint64_t v3 = (void *)result;
      }
      v3[2] = v13 + 1;
      uint64_t v14 = (char *)v3 + 3 * v13;
      v14[34] = (v11 | (v10 << 16)) >> 16;
      *((_WORD *)v14 + 16) = v11;
      BOOL v16 = v6 == 0x8000000 && v7 != 0;
      if (v6 == 0x20000000 || v16)
      {
        Swift::Int v4 = 10;
LABEL_3:
        uint64_t result = sub_10005B1DC(v18, v4);
      }
    }
    else if (v7)
    {
      Swift::Int v4 = 11;
      goto LABEL_3;
    }
    v2 += 16;
  }
  while (v2 != 240);
  *a2 = v3;
  return result;
}

uint64_t sub_100065ECC@<X0>(_OWORD *a1@<X8>)
{
  char v36 = a1;
  uint64_t v41 = type metadata accessor for Mirror();
  uint64_t v2 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  Swift::Int v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AC7C(&qword_1001290C0);
  uint64_t inited = swift_initStackObject();
  uint64_t v6 = 0;
  *(_OWORD *)(inited + 16) = xmmword_1000EA830;
  *(_WORD *)(inited + 32) = 513;
  *(unsigned char *)(inited + 36) = 80;
  *(_WORD *)(inited + 34) = 257;
  *(unsigned char *)(inited + 39) = 80;
  *(_WORD *)(inited + 37) = 256;
  *(_WORD *)(inited + 40) = 2052;
  *(unsigned char *)(inited + 44) = 6;
  *(_WORD *)(inited + 42) = 705;
  *(unsigned char *)(inited + 47) = 6;
  *(_WORD *)(inited + 45) = 704;
  *(_WORD *)(inited + 48) = 8208;
  *(unsigned char *)(inited + 52) = 16;
  *(_WORD *)(inited + 50) = 769;
  *(unsigned char *)(inited + 55) = 16;
  *(_WORD *)(inited + 53) = 768;
  *(_WORD *)(inited + 56) = -32704;
  *(unsigned char *)(inited + 60) = 16;
  *(_WORD *)(inited + 58) = 1089;
  *(unsigned char *)(inited + 63) = 16;
  *(_WORD *)(inited + 61) = 1088;
  char v46 = &_swiftEmptySetSingleton;
  int v54 = *(unsigned __int8 *)(v1 + 13);
  uint64_t v35 = v1;
  int v53 = *(unsigned __int8 *)(v1 + 14);
  __int16 v37 = &v48;
  char v38 = (void (**)(char *, uint64_t))(v2 + 8);
  int v7 = _swiftEmptyArrayStorage;
  __int16 v40 = v4;
  uint64_t v39 = inited;
  do
  {
    uint64_t v9 = inited + v6;
    int v10 = (*(unsigned char *)(inited + v6 + 33) & v54);
    if ((*(unsigned char *)(inited + v6 + 32) & v54) != 0)
    {
      int v11 = *(unsigned __int16 *)(v9 + 34) | (*(unsigned __int8 *)(v9 + 36) << 16);
      int v12 = *(unsigned __int16 *)(v9 + 37) | (*(unsigned __int8 *)(v9 + 39) << 16);
      if ((*(unsigned char *)(inited + v6 + 33) & v54) != 0) {
        int v13 = v11;
      }
      else {
        int v13 = v12;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v7 = sub_100058F88(0, v7[2] + 1, 1, v7);
      }
      unint64_t v15 = v7[2];
      unint64_t v14 = v7[3];
      if (v15 >= v14 >> 1) {
        int v7 = sub_100058F88((void *)(v14 > 1), v15 + 1, 1, v7);
      }
      _OWORD v7[2] = v15 + 1;
      BOOL v16 = (char *)v7 + 3 * v15;
      v16[34] = BYTE2(v13);
      *((_WORD *)v16 + 16) = v13;
      if (v10)
      {
        __int16 v42 = v7;
        *((void *)&v48 + 1) = &type metadata for USBDescriptorControl;
        LOWORD(v47) = v11;
        BYTE2(v47) = BYTE2(v11);
        Mirror.init(reflecting:)();
        Mirror.children.getter();
        swift_getObjectType();
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        uint64_t v17 = dispatch thunk of _AnyIndexBox._typeID.getter();
        swift_getObjectType();
        uint64_t result = dispatch thunk of _AnyIndexBox._typeID.getter();
        if (v17 != result)
        {
          __break(1u);
          return result;
        }
        char v19 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
        swift_unknownObjectRelease();
        if (v19)
        {
          swift_unknownObjectRelease();
          long long v48 = 0u;
          long long v49 = 0u;
          long long v47 = 0u;
        }
        else
        {
          dispatch thunk of _AnyCollectionBox.subscript.getter();
          long long v47 = v43;
          long long v48 = v44;
          long long v49 = v45;
          swift_unknownObjectRelease();
        }
        __int16 v20 = v40;
        uint64_t inited = v39;
        int v7 = v42;
        swift_release();
        (*v38)(v20, v41);
        if (!*((void *)&v49 + 1))
        {
          sub_100062BB0((uint64_t)&v47);
LABEL_3:
          Swift::Int v8 = 10;
LABEL_4:
          sub_10005B1DC(&v47, v8);
          goto LABEL_5;
        }
        long long v21 = v47;
        sub_10001ABC4((uint64_t)v37);
        if (!*((void *)&v21 + 1)) {
          goto LABEL_3;
        }
        if (v21 == __PAIR128__(0xE600000000000000, 0x656C62616E65))
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v22 & 1) == 0) {
            goto LABEL_3;
          }
        }
      }
    }
    else if ((*(unsigned char *)(inited + v6 + 33) & v54) != 0)
    {
      Swift::Int v8 = 11;
      goto LABEL_4;
    }
LABEL_5:
    v6 += 8;
  }
  while (v6 != 32);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(unsigned __int8 *)(v35 + 3);
  uint64_t v24 = *(void *)(v35 + 32);
  uint64_t v25 = *(void *)(v35 + 16);
  uint64_t v26 = (uint64_t)v46;
  __int16 v27 = *(_WORD *)(v35 + 24);
  sub_100053B64(v35);
  char v28 = sub_10005AD1C(v26);
  swift_bridgeObjectRelease();
  if (v53) {
    int v29 = v53;
  }
  else {
    int v29 = 16711680;
  }
  uint64_t result = sub_1000C1210(v23, 0, v24, 0, 0, 0, (uint64_t)v7, v29, (uint64_t)&v47, v25, v27, (uint64_t)v28);
  long long v30 = v50;
  long long v31 = v51;
  long long v32 = v48;
  char v33 = v36;
  v36[2] = v49;
  v33[3] = v30;
  long long v34 = v52;
  v33[4] = v31;
  v33[5] = v34;
  _OWORD *v33 = v47;
  v33[1] = v32;
  return result;
}

uint64_t sub_100066438@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _WORD *a4@<X8>)
{
  int v48 = a3;
  uint64_t v47 = a2;
  long long v50 = a4;
  unint64_t v49 = a1;
  uint64_t v4 = BYTE5(a1);
  uint64_t v57 = type metadata accessor for Mirror();
  uint64_t v5 = *(void *)(v57 - 8);
  uint64_t v6 = __chkstk_darwin(v57);
  __int16 v55 = &v45[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  uint64_t v9 = &v45[-v8];
  sub_10000AC7C(&qword_1001290C8);
  uint64_t inited = swift_initStackObject();
  int v11 = 0;
  uint64_t v12 = 0;
  *(_OWORD *)(inited + 16) = xmmword_1000EA840;
  *(_WORD *)(inited + 32) = 513;
  uint64_t v13 = inited + 32;
  *(unsigned char *)(inited + 36) = 82;
  *(_WORD *)(inited + 34) = 385;
  int v46 = 82;
  *(unsigned char *)(inited + 39) = 82;
  *(_WORD *)(inited + 37) = 384;
  *(_WORD *)(inited + 40) = 2052;
  *(unsigned char *)(inited + 44) = 80;
  *(_WORD *)(inited + 42) = 705;
  *(unsigned char *)(inited + 47) = 80;
  uint64_t v51 = inited;
  *(_WORD *)(inited + 45) = 704;
  char v66 = &_swiftEmptySetSingleton;
  long long v52 = &v64;
  char v56 = (void (**)(unsigned char *, uint64_t))(v5 + 8);
  unint64_t v14 = _swiftEmptyArrayStorage;
  int v54 = (long long *)v4;
  uint64_t v53 = inited + 32;
  do
  {
    int v15 = v11;
    uint64_t v16 = v13 + 8 * v12;
    int v17 = (*(unsigned char *)(v16 + 1) & v4);
    if ((*(unsigned char *)v16 & v4) != 0)
    {
      LODWORD(v59) = v15;
      int v18 = *(unsigned __int16 *)(v16 + 2) | (*(unsigned __int8 *)(v16 + 4) << 16);
      int v19 = *(unsigned __int16 *)(v16 + 5) | (*(unsigned __int8 *)(v16 + 7) << 16);
      if (v17) {
        int v20 = v18;
      }
      else {
        int v20 = v19;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v14 = sub_100058F88(0, v14[2] + 1, 1, v14);
      }
      unint64_t v22 = v14[2];
      unint64_t v21 = v14[3];
      if (v22 >= v21 >> 1) {
        unint64_t v14 = sub_100058F88((void *)(v21 > 1), v22 + 1, 1, v14);
      }
      void v14[2] = v22 + 1;
      uint64_t v23 = (char *)v14 + 3 * v22;
      v23[34] = BYTE2(v20);
      *((_WORD *)v23 + 16) = v20;
      if (!v17) {
        goto LABEL_3;
      }
      char v58 = v14;
      *((void *)&v64 + 1) = &type metadata for USBDescriptorControl;
      LOWORD(v63) = v18;
      BYTE2(v63) = BYTE2(v18);
      Mirror.init(reflecting:)();
      unint64_t v14 = *(void **)(Mirror.children.getter() + 32);
      swift_getObjectType();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v24 = dispatch thunk of _AnyIndexBox._typeID.getter();
      swift_getObjectType();
      if (v24 != dispatch thunk of _AnyIndexBox._typeID.getter())
      {
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
      char v25 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
      swift_unknownObjectRelease();
      if (v25)
      {
        swift_unknownObjectRelease();
        long long v64 = 0u;
        long long v65 = 0u;
        long long v63 = 0u;
      }
      else
      {
        dispatch thunk of _AnyCollectionBox.subscript.getter();
        long long v63 = v60;
        long long v64 = v61;
        long long v65 = v62;
        swift_unknownObjectRelease();
      }
      unint64_t v14 = v58;
      uint64_t v13 = v53;
      swift_release();
      (*v56)(v9, v57);
      LOBYTE(v4) = (_BYTE)v54;
      if (!*((void *)&v65 + 1))
      {
        sub_100062BB0((uint64_t)&v63);
LABEL_3:
        LOBYTE(v15) = v59;
        goto LABEL_4;
      }
      long long v26 = v63;
      sub_10001ABC4((uint64_t)v52);
      if (!*((void *)&v26 + 1)) {
        goto LABEL_3;
      }
      if (v26 == __PAIR128__(0xE800000000000000, 0x79746964696C6176))
      {
        swift_bridgeObjectRelease();
        LOBYTE(v15) = v59;
      }
      else
      {
        char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        LOBYTE(v15) = v59;
        if ((v27 & 1) == 0) {
          goto LABEL_4;
        }
      }
      sub_10005B1DC(&v63, 10);
    }
    else if ((*(unsigned char *)(v16 + 1) & v4) != 0)
    {
      sub_10005B1DC(&v63, 11);
    }
LABEL_4:
    int v11 = 1;
    uint64_t v12 = 1;
  }
  while ((v15 & 1) == 0);
  swift_bridgeObjectRelease();
  uint64_t v28 = v14[2];
  if (v28)
  {
    int v54 = &v64;
    swift_bridgeObjectRetain();
    uint64_t v29 = 32;
    char v58 = v14;
    while (1)
    {
      uint64_t v59 = v28;
      __int16 v30 = *(_WORD *)((char *)v14 + v29);
      char v31 = *((unsigned char *)v14 + v29 + 2);
      *((void *)&v64 + 1) = &type metadata for USBDescriptorControl;
      BYTE2(v63) = v31;
      LOWORD(v63) = v30;
      Mirror.init(reflecting:)();
      unint64_t v14 = *(void **)(Mirror.children.getter() + 32);
      swift_getObjectType();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v32 = dispatch thunk of _AnyIndexBox._typeID.getter();
      swift_getObjectType();
      if (v32 != dispatch thunk of _AnyIndexBox._typeID.getter()) {
        goto LABEL_53;
      }
      char v33 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
      swift_unknownObjectRelease();
      if (v33)
      {
        swift_unknownObjectRelease();
        long long v64 = 0u;
        long long v65 = 0u;
        long long v63 = 0u;
      }
      else
      {
        dispatch thunk of _AnyCollectionBox.subscript.getter();
        long long v63 = v60;
        long long v64 = v61;
        long long v65 = v62;
        swift_unknownObjectRelease();
      }
      unint64_t v14 = v58;
      swift_release();
      (*v56)(v55, v57);
      if (*((void *)&v65 + 1))
      {
        long long v34 = v63;
        sub_10001ABC4((uint64_t)v54);
        if (*((void *)&v34 + 1))
        {
          if (v34 == __PAIR128__(0xE900000000000079, 0x636E657571657266))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_45;
          }
          char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v35)
          {
            swift_bridgeObjectRelease();
            goto LABEL_45;
          }
        }
      }
      else
      {
        sub_100062BB0((uint64_t)&v63);
      }
      v29 += 3;
      uint64_t v28 = v59 - 1;
      if (v59 == 1)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  sub_10005B1DC(&v63, 13);
  if (swift_isUniquelyReferenced_nonNull_native()) {
    goto LABEL_42;
  }
LABEL_54:
  unint64_t v14 = sub_100058F88(0, v14[2] + 1, 1, v14);
LABEL_42:
  unint64_t v37 = v14[2];
  unint64_t v36 = v14[3];
  if (v37 >= v36 >> 1) {
    unint64_t v14 = sub_100058F88((void *)(v36 > 1), v37 + 1, 1, v14);
  }
  void v14[2] = v37 + 1;
  char v38 = (char *)v14 + 3 * v37;
  v38[34] = v46;
  *((_WORD *)v38 + 16) = 384;
LABEL_45:
  uint64_t v39 = sub_10005AD1C((uint64_t)v66);
  uint64_t result = swift_bridgeObjectRelease();
  if (v14[2])
  {
    if (v39[2]) {
      goto LABEL_47;
    }
LABEL_51:
    uint64_t result = swift_release();
    uint64_t v39 = 0;
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v14 = 0;
    if (!v39[2]) {
      goto LABEL_51;
    }
  }
LABEL_47:
  unint64_t v41 = v49;
  unint64_t v42 = HIBYTE(v49);
  if (!HIBYTE(v49)) {
    LODWORD(v42) = -65536;
  }
  long long v43 = v50;
  *long long v50 = v42;
  *((unsigned char *)v43 + 2) = BYTE2(v42);
  uint64_t v44 = v47;
  *((void *)v43 + 1) = BYTE3(v41);
  *((void *)v43 + 2) = v44;
  v43[12] = v48;
  *((void *)v43 + 4) = v39;
  *((void *)v43 + 5) = v14;
  *((unsigned char *)v43 + 48) = (v41 & 0x300000000) != 0;
  *((unsigned char *)v43 + 49) = (v41 & 0x400000000) != 0;
  *((void *)v43 + 7) = BYTE6(v41);
  return result;
}

uint64_t sub_100066C64@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, _WORD *a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v41 = a4;
  int v38 = a3;
  uint64_t v37 = a2;
  uint64_t v39 = a5;
  unint64_t v7 = a1 >> 40;
  unint64_t v40 = a1;
  char v8 = BYTE5(a1);
  uint64_t v45 = type metadata accessor for Mirror();
  uint64_t v9 = *(void **)(v45 - 8);
  __chkstk_darwin(v45);
  int v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AC7C(&qword_1001290D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000E8090;
  *(_WORD *)(inited + 32) = 513;
  *(unsigned char *)(inited + 36) = 64;
  *(_WORD *)(inited + 34) = 449;
  *(unsigned char *)(inited + 39) = 64;
  *(_WORD *)(inited + 37) = 448;
  int v54 = &_swiftEmptySetSingleton;
  if (v7)
  {
    if ((v8 & 2) != 0) {
      int v15 = 4194753;
    }
    else {
      int v15 = 4194752;
    }
    uint64_t v13 = sub_100058F88(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v17 = v13[2];
    unint64_t v16 = v13[3];
    int64_t v18 = v17 + 1;
    if (v17 >= v16 >> 1) {
      goto LABEL_38;
    }
    goto LABEL_10;
  }
  if ((v8 & 2) != 0) {
    sub_10005B1DC(&v51, 11);
  }
  swift_bridgeObjectRelease();
  uint64_t v13 = _swiftEmptyArrayStorage;
  for (uint64_t i = _swiftEmptyArrayStorage[2]; i; uint64_t i = v13[2])
  {
    unint64_t v36 = v6;
    unint64_t v42 = &v52;
    uint64_t v44 = (void (**)(char *, uint64_t))(v9 + 1);
    swift_bridgeObjectRetain();
    uint64_t v20 = 32;
    long long v43 = v13;
    while (1)
    {
      uint64_t v46 = v20;
      uint64_t v47 = i;
      unint64_t v21 = (char *)v13 + v20;
      __int16 v22 = *(_WORD *)v21;
      LOBYTE(v21) = v21[2];
      *((void *)&v52 + 1) = &type metadata for USBDescriptorControl;
      BYTE2(v51) = (_BYTE)v21;
      LOWORD(v51) = v22;
      Mirror.init(reflecting:)();
      uint64_t v6 = v11;
      uint64_t v9 = (void *)Mirror.children.getter();
      int64_t v18 = v9[2];
      uint64_t v13 = (void *)v9[3];
      unint64_t v17 = v9[4];
      swift_getObjectType();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      int v11 = (char *)dispatch thunk of _AnyIndexBox._typeID.getter();
      swift_getObjectType();
      int v15 = v17;
      if (v11 != (char *)dispatch thunk of _AnyIndexBox._typeID.getter()) {
        break;
      }
      char v23 = dispatch thunk of _AnyIndexBox._isEqual(to:)();
      swift_unknownObjectRelease();
      if (v23)
      {
        swift_unknownObjectRelease();
        long long v52 = 0u;
        long long v53 = 0u;
        long long v51 = 0u;
      }
      else
      {
        dispatch thunk of _AnyCollectionBox.subscript.getter();
        long long v51 = v48;
        long long v52 = v49;
        long long v53 = v50;
        swift_unknownObjectRelease();
      }
      uint64_t v13 = v43;
      int v11 = v6;
      swift_release();
      (*v44)(v6, v45);
      if (*((void *)&v53 + 1))
      {
        long long v24 = v51;
        sub_10001ABC4((uint64_t)v42);
        if (*((void *)&v24 + 1))
        {
          if (v24 == __PAIR128__(0xE800000000000000, 0x726F7463656C6573))
          {
            swift_bridgeObjectRelease();
LABEL_26:
            swift_bridgeObjectRelease();
            goto LABEL_27;
          }
          char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v25) {
            goto LABEL_26;
          }
        }
      }
      else
      {
        sub_100062BB0((uint64_t)&v51);
      }
      uint64_t v20 = v46 + 3;
      uint64_t i = v47 - 1;
      if (v47 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_38:
    uint64_t v13 = sub_100058F88((void *)(v16 > 1), v18, 1, v13);
LABEL_10:
    v13[2] = v18;
    int v19 = (char *)v13 + 3 * v17;
    v19[34] = BYTE2(v15);
    *((_WORD *)v19 + 16) = v15;
    swift_bridgeObjectRelease();
  }
LABEL_25:
  sub_10005B1DC(&v51, 12);
LABEL_27:
  unsigned __int8 v26 = BYTE3(v40);
  uint64_t v27 = v41;
  if ((v40 & 0xFF00000000) != 0)
  {
    if ((v40 & 0xFF000000000000) != 0) {
      int v28 = BYTE6(v40);
    }
    else {
      int v28 = -65536;
    }
    uint64_t v29 = (uint64_t)v54;
    swift_bridgeObjectRetain();
    __int16 v30 = sub_10005AD1C(v29);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v13[2])
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v13 = 0;
    }
    if (!v30[2])
    {
      uint64_t result = swift_release();
      __int16 v30 = 0;
    }
    uint64_t v32 = v39;
    *uint64_t v39 = v28;
    *((unsigned char *)v32 + 2) = BYTE2(v28);
    __int16 v33 = v38;
    uint64_t v34 = v37;
    *((void *)v32 + 1) = v26;
    *((void *)v32 + 2) = v34;
    v32[12] = v33;
    *((void *)v32 + 4) = v30;
    *((void *)v32 + 5) = v27;
    *((void *)v32 + 6) = v13;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v35 = 15;
    *(void *)(v35 + 8) = 0;
    *(void *)(v35 + 16) = 0xE000000000000000;
    *(void *)(v35 + 24) = 0x2928797469746E65;
    *(void *)(v35 + 32) = 0xE800000000000000;
    *(void *)(v35 + 40) = 0xD00000000000001FLL;
    *(void *)(v35 + 48) = 0x80000001000E3F10;
    *(void *)(v35 + 56) = 1247;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1000671D4@<X0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1;
  uint64_t v7 = sub_100089F98(a1, a2);
  if (v8 >> 60 == 15) {
    goto LABEL_46;
  }
  unint64_t v9 = v8;
  uint64_t v10 = v7;
  switch(v8 >> 62)
  {
    case 1uLL:
      goto LABEL_6;
    case 2uLL:
      uint64_t v39 = v5;
      uint64_t v25 = *(void *)(v7 + 16);
      uint64_t v24 = *(void *)(v7 + 24);
      swift_retain();
      swift_retain();
      unsigned __int8 v26 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v26) {
        goto LABEL_22;
      }
      uint64_t v27 = __DataStorage._offset.getter();
      if (__OFSUB__(v25, v27)) {
        goto LABEL_42;
      }
      v26 += v25 - v27;
LABEL_22:
      BOOL v28 = __OFSUB__(v24, v25);
      uint64_t v29 = v24 - v25;
      if (v28) {
        goto LABEL_40;
      }
      uint64_t v30 = __DataStorage._length.getter();
      if (v30 >= v29) {
        uint64_t v31 = v29;
      }
      else {
        uint64_t v31 = v30;
      }
      uint64_t v32 = &v26[v31];
      if (v26) {
        uint64_t v33 = (uint64_t)v32;
      }
      else {
        uint64_t v33 = 0;
      }
      uint64_t v34 = sub_100076520(1, v26, v33);
      if (v3)
      {
        swift_release();
        swift_release();
        return sub_1000541C0(v10, v9);
      }
      if (!v34[2]) {
        goto LABEL_45;
      }
      v35.i32[0] = *((_DWORD *)v34 + 8);
      int16x8_t v45 = (int16x8_t)vmovl_u8(v35);
      __int16 v38 = *((_WORD *)v34 + 18);
      char v37 = *((unsigned char *)v34 + 38);
      char v43 = *((unsigned char *)v34 + 40);
      char v44 = *((unsigned char *)v34 + 39);
      char v41 = *((unsigned char *)v34 + 45);
      int v42 = *(_DWORD *)((char *)v34 + 41);
      __int16 v40 = *((_WORD *)v34 + 23);
      char v23 = *((unsigned char *)v34 + 48);
      swift_release();
      swift_release();
      char v22 = v37;
      __int16 v21 = v38;
      goto LABEL_37;
    case 3uLL:
      memset(v46, 0, 14);
      int v11 = sub_100076520(1, v46, (uint64_t)v46);
      if (v3) {
        return sub_1000541C0(v10, v9);
      }
      if (v11[2]) {
        goto LABEL_34;
      }
      goto LABEL_43;
    default:
      v46[0] = v7;
      LOWORD(v46[1]) = v8;
      BYTE2(v46[1]) = BYTE2(v8);
      BYTE3(v46[1]) = BYTE3(v8);
      BYTE4(v46[1]) = BYTE4(v8);
      BYTE5(v46[1]) = BYTE5(v8);
      int v11 = sub_100076520(1, v46, (uint64_t)v46 + BYTE6(v8));
      if (v3) {
        return sub_1000541C0(v10, v9);
      }
      if (v11[2])
      {
LABEL_34:
        v12.i32[0] = *((_DWORD *)v11 + 8);
        int16x8_t v45 = (int16x8_t)vmovl_u8(v12);
        __int16 v21 = *((_WORD *)v11 + 18);
        char v22 = *((unsigned char *)v11 + 38);
        char v43 = *((unsigned char *)v11 + 40);
        char v44 = *((unsigned char *)v11 + 39);
        char v41 = *((unsigned char *)v11 + 45);
        int v42 = *(_DWORD *)((char *)v11 + 41);
        __int16 v40 = *((_WORD *)v11 + 23);
        char v23 = *((unsigned char *)v11 + 48);
        swift_bridgeObjectRelease();
        uint64_t result = sub_1000541C0(v10, v9);
        goto LABEL_38;
      }
      __break(1u);
LABEL_6:
      if (v10 >> 32 < (int)v10)
      {
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      uint64_t v39 = v5;
      uint64_t v13 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_10;
      }
      uint64_t v14 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v10, v14))
      {
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      v13 += (int)v10 - v14;
LABEL_10:
      uint64_t v15 = __DataStorage._length.getter();
      if (v15 >= (v10 >> 32) - (int)v10) {
        uint64_t v16 = (v10 >> 32) - (int)v10;
      }
      else {
        uint64_t v16 = v15;
      }
      unint64_t v17 = &v13[v16];
      if (v13) {
        uint64_t v18 = (uint64_t)v17;
      }
      else {
        uint64_t v18 = 0;
      }
      int v19 = sub_100076520(1, v13, v18);
      if (v3) {
        return sub_1000541C0(v10, v9);
      }
      if (!v19[2])
      {
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
      }
      v20.i32[0] = *((_DWORD *)v19 + 8);
      int16x8_t v45 = (int16x8_t)vmovl_u8(v20);
      __int16 v21 = *((_WORD *)v19 + 18);
      char v22 = *((unsigned char *)v19 + 38);
      char v43 = *((unsigned char *)v19 + 40);
      char v44 = *((unsigned char *)v19 + 39);
      char v41 = *((unsigned char *)v19 + 45);
      int v42 = *(_DWORD *)((char *)v19 + 41);
      __int16 v40 = *((_WORD *)v19 + 23);
      char v23 = *((unsigned char *)v19 + 48);
LABEL_37:
      swift_bridgeObjectRelease();
      uint64_t result = sub_1000541C0(v10, v9);
      uint64_t v5 = v39;
LABEL_38:
      *(_DWORD *)a3 = vmovn_s16(v45).u32[0];
      *(_WORD *)(a3 + 4) = v21;
      *(unsigned char *)(a3 + 6) = v22;
      *(unsigned char *)(a3 + 7) = v44;
      *(unsigned char *)(a3 + 8) = v43;
      *(_DWORD *)(a3 + 9) = v42;
      *(unsigned char *)(a3 + 13) = v41;
      *(_WORD *)(a3 + 14) = v40;
      *(unsigned char *)(a3 + 16) = v23;
      *(void *)(a3 + 24) = v5;
      *(_WORD *)(a3 + 32) = a2;
      return result;
  }
}

unint64_t sub_1000675D8(unsigned char *a1, __int16 a2)
{
  uint64_t v3 = sub_100089F98(a1, a2);
  if (v4 >> 60 == 15) {
LABEL_44:
  }
    __break(1u);
  unint64_t v5 = v4;
  uint64_t v6 = v3;
  switch(v4 >> 62)
  {
    case 1uLL:
      goto LABEL_6;
    case 2uLL:
      goto LABEL_19;
    case 3uLL:
      memset(v34, 0, 14);
      uint64_t v7 = sub_10007683C(1, v34, (uint64_t)v34);
      if (v2) {
        return sub_1000541C0(v6, v5);
      }
      if (*((void *)v7 + 2)) {
        goto LABEL_34;
      }
      goto LABEL_42;
    default:
      v34[0] = v3;
      LOWORD(v34[1]) = v4;
      BYTE2(v34[1]) = BYTE2(v4);
      BYTE3(v34[1]) = BYTE3(v4);
      BYTE4(v34[1]) = BYTE4(v4);
      BYTE5(v34[1]) = BYTE5(v4);
      uint64_t v7 = sub_10007683C(1, v34, (uint64_t)v34 + BYTE6(v4));
      if (v2) {
        return sub_1000541C0(v6, v5);
      }
      if (*((void *)v7 + 2)) {
        goto LABEL_34;
      }
      __break(1u);
LABEL_6:
      if (v6 >> 32 < (int)v6)
      {
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      unint64_t v8 = (unsigned char *)__DataStorage._bytes.getter();
      if (v8)
      {
        uint64_t v9 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v6, v9))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        v8 += (int)v6 - v9;
      }
      uint64_t v10 = __DataStorage._length.getter();
      if (v10 >= (v6 >> 32) - (int)v6) {
        uint64_t v11 = (v6 >> 32) - (int)v6;
      }
      else {
        uint64_t v11 = v10;
      }
      uint8x8_t v12 = &v8[v11];
      if (v8) {
        uint64_t v13 = (uint64_t)v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v7 = sub_10007683C(1, v8, v13);
      if (v2) {
        return sub_1000541C0(v6, v5);
      }
      if (!*((void *)v7 + 2))
      {
        __break(1u);
LABEL_19:
        uint64_t v14 = *(void *)(v6 + 16);
        uint64_t v15 = *(void *)(v6 + 24);
        swift_retain();
        swift_retain();
        uint64_t v16 = (unsigned char *)__DataStorage._bytes.getter();
        if (v16)
        {
          uint64_t v17 = __DataStorage._offset.getter();
          if (__OFSUB__(v14, v17)) {
            goto LABEL_41;
          }
          v16 += v14 - v17;
        }
        BOOL v18 = __OFSUB__(v15, v14);
        uint64_t v19 = v15 - v14;
        if (!v18)
        {
          uint64_t v20 = __DataStorage._length.getter();
          if (v20 >= v19) {
            uint64_t v21 = v19;
          }
          else {
            uint64_t v21 = v20;
          }
          char v22 = &v16[v21];
          if (v16) {
            uint64_t v23 = (uint64_t)v22;
          }
          else {
            uint64_t v23 = 0;
          }
          uint64_t v24 = sub_10007683C(1, v16, v23);
          if (v2)
          {
            swift_release();
            swift_release();
            return sub_1000541C0(v6, v5);
          }
          if (*((void *)v24 + 2))
          {
            unsigned int v32 = *((unsigned __int8 *)v24 + 35);
            unsigned int v33 = *((unsigned __int8 *)v24 + 34);
            uint64_t v31 = *((unsigned __int16 *)v24 + 18);
            uint64_t v30 = *((unsigned __int8 *)v24 + 38);
            uint64_t v29 = *((unsigned __int8 *)v24 + 39);
            unsigned int v28 = *((unsigned __int8 *)v24 + 33);
            unsigned int v26 = *((unsigned __int8 *)v24 + 32);
            swift_release();
            swift_release();
            unsigned int v27 = v28;
            goto LABEL_37;
          }
          goto LABEL_43;
        }
        goto LABEL_39;
      }
LABEL_34:
      unsigned int v26 = *((unsigned __int8 *)v7 + 32);
      unsigned int v27 = *((unsigned __int8 *)v7 + 33);
      unsigned int v32 = *((unsigned __int8 *)v7 + 35);
      unsigned int v33 = *((unsigned __int8 *)v7 + 34);
      uint64_t v31 = *((unsigned __int16 *)v7 + 18);
      uint64_t v30 = *((unsigned __int8 *)v7 + 38);
      uint64_t v29 = *((unsigned __int8 *)v7 + 39);
LABEL_37:
      swift_bridgeObjectRelease();
      sub_1000541C0(v6, v5);
      return v26 | ((unint64_t)v27 << 8) | ((unint64_t)v33 << 16) | ((unint64_t)v32 << 24) | (v31 << 32) | (v30 << 48) | (v29 << 56);
  }
}

uint8x8_t sub_100067984@<D0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  __int16 v4 = a2;
  uint64_t v6 = sub_100089F98(a1, a2);
  if (v7 >> 60 == 15) {
LABEL_42:
  }
    __break(1u);
  unint64_t v8 = v7;
  uint64_t v9 = v6;
  switch(v7 >> 62)
  {
    case 1uLL:
      uint64_t v12 = (v6 >> 32) - (int)v6;
      if (v6 >> 32 < (int)v6)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      uint64_t v13 = __DataStorage._bytes.getter();
      if (v13)
      {
        uint64_t v14 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v9, v14))
        {
          v13 += (int)v9 - v14;
          goto LABEL_8;
        }
        goto LABEL_41;
      }
LABEL_8:
      uint64_t v15 = __DataStorage._length.getter();
      if (v15 >= v12) {
        uint64_t v16 = (v9 >> 32) - (int)v9;
      }
      else {
        uint64_t v16 = v15;
      }
      uint64_t v17 = (char *)(v13 + v16);
      if (v13) {
        uint64_t v10 = v17;
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v11 = (void *)v13;
LABEL_28:
      sub_1000654A4((uint64_t)v11, (uint64_t)v10, (uint64_t)&v48);
      sub_1000541C0(v9, v8);
      if (!v3)
      {
LABEL_29:
        result.i32[0] = (int)v48;
        int16x8_t v41 = (int16x8_t)vmovl_u8(result);
        char v27 = BYTE4(v48);
        uint64_t v28 = v49;
        char v29 = v50;
        char v42 = v52;
        int v43 = v51;
        uint64_t v30 = v53;
        char v39 = v55;
        char v40 = v54;
        int64_t v31 = *(void *)(v49 + 16);
        if (v31)
        {
          char v37 = v50;
          uint64_t v38 = v53;
          __int16 v45 = v4;
          long long v48 = _swiftEmptyArrayStorage;
          sub_10007C4BC(0, v31, 0);
          uint64_t v32 = 0;
          unsigned int v33 = v48;
          unint64_t v34 = v48[2];
          do
          {
            uint64_t v35 = *(unsigned __int8 *)(v28 + v32 + 32);
            long long v48 = v33;
            unint64_t v36 = v33[3];
            if (v34 >= v36 >> 1)
            {
              sub_10007C4BC(v36 > 1, v34 + 1, 1);
              unsigned int v33 = v48;
            }
            ++v32;
            void v33[2] = v34 + 1;
            v33[v34++ + 4] = v35;
          }
          while (v31 != v32);
          swift_bridgeObjectRelease();
          __int16 v4 = v45;
          uint64_t v30 = v38;
          char v29 = v37;
        }
        else
        {
          swift_bridgeObjectRelease();
          unsigned int v33 = _swiftEmptyArrayStorage;
        }
        uint8x8_t result = (uint8x8_t)vmovn_s16(v41);
        *(_DWORD *)a3 = result.i32[0];
        *(unsigned char *)(a3 + 4) = v27;
        *(unsigned char *)(a3 + 5) = v29;
        *(_DWORD *)(a3 + 6) = v43;
        *(unsigned char *)(a3 + 10) = v42;
        *(unsigned char *)(a3 + 11) = v40;
        *(unsigned char *)(a3 + 12) = v39;
        *(void *)(a3 + 16) = a1;
        *(_WORD *)(a3 + 24) = v4;
        *(void *)(a3 + 32) = v33;
        *(void *)(a3 + 40) = v30;
      }
      return result;
    case 2uLL:
      __int16 v44 = v4;
      uint64_t v18 = *(void *)(v6 + 16);
      uint64_t v19 = *(void *)(v6 + 24);
      swift_retain();
      swift_retain();
      uint64_t v20 = __DataStorage._bytes.getter();
      if (!v20) {
        goto LABEL_18;
      }
      uint64_t v21 = __DataStorage._offset.getter();
      if (__OFSUB__(v18, v21)) {
        goto LABEL_40;
      }
      v20 += v18 - v21;
LABEL_18:
      if (__OFSUB__(v19, v18)) {
        goto LABEL_39;
      }
      uint64_t v22 = __DataStorage._length.getter();
      if (v22 >= v19 - v18) {
        uint64_t v23 = v19 - v18;
      }
      else {
        uint64_t v23 = v22;
      }
      uint64_t v24 = v20 + v23;
      if (v20) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      sub_1000654A4(v20, v25, (uint64_t)&v48);
      swift_release();
      swift_release();
      sub_1000541C0(v9, v8);
      __int16 v4 = v44;
      if (!v3) {
        goto LABEL_29;
      }
      return result;
    case 3uLL:
      memset(v47, 0, 14);
      uint64_t v11 = v47;
      uint64_t v10 = (char *)v47;
      goto LABEL_28;
    default:
      v47[0] = v6;
      LOWORD(v47[1]) = v7;
      BYTE2(v47[1]) = BYTE2(v7);
      BYTE3(v47[1]) = BYTE3(v7);
      BYTE4(v47[1]) = BYTE4(v7);
      BYTE5(v47[1]) = BYTE5(v7);
      uint64_t v10 = (char *)v47 + BYTE6(v7);
      uint64_t v11 = v47;
      goto LABEL_28;
  }
}

unint64_t sub_100067D44(unsigned char *a1, __int16 a2)
{
  return sub_100068D28(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100078590, (uint64_t (*)(uint64_t))sub_100078530);
}

uint64_t sub_100067DB8@<X0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  __int16 v4 = v3;
  uint64_t v8 = sub_100089F98(a1, a2);
  if (v9 >> 60 == 15) {
LABEL_53:
  }
    __break(1u);
  unint64_t v10 = v9;
  uint64_t v11 = v8;
  switch(v9 >> 62)
  {
    case 1uLL:
      goto LABEL_7;
    case 2uLL:
      goto LABEL_21;
    case 3uLL:
      memset(v69, 0, 14);
      uint64_t v53 = sub_100078978(1, (uint64_t)v69, (uint64_t)v69);
      if (v3) {
        return sub_1000541C0(v11, v10);
      }
      if (!*((void *)v53 + 2)) {
        goto LABEL_48;
      }
      uint64_t v57 = v54;
      uint64_t v58 = v55;
      v56.i32[0] = *((_DWORD *)v53 + 8);
      int16x8_t v68 = (int16x8_t)vmovl_u8(v56);
      char v18 = v53[36];
      swift_bridgeObjectRelease();
      __int16 v4 = sub_100077634((uint64_t)(int)(v68.u16[0] - 6 + (((v68.u16[0] - 6) & 0xC000u) >> 14)) >> 2, v57, v58);
      uint64_t v21 = sub_1000781B8(1, v59, v60);
      if (*((void *)v21 + 2)) {
        goto LABEL_38;
      }
      goto LABEL_51;
    default:
      v69[0] = v8;
      LOWORD(v69[1]) = v9;
      BYTE2(v69[1]) = BYTE2(v9);
      BYTE3(v69[1]) = BYTE3(v9);
      BYTE4(v69[1]) = BYTE4(v9);
      BYTE5(v69[1]) = BYTE5(v9);
      uint64_t v12 = sub_100078978(1, (uint64_t)v69, (uint64_t)v69 + BYTE6(v9));
      if (v3) {
        return sub_1000541C0(v11, v10);
      }
      if (!*((void *)v12 + 2)) {
        goto LABEL_47;
      }
      uint64_t v16 = v13;
      uint64_t v17 = v14;
      v15.i32[0] = *((_DWORD *)v12 + 8);
      int16x8_t v68 = (int16x8_t)vmovl_u8(v15);
      char v18 = v12[36];
      swift_bridgeObjectRelease();
      __int16 v4 = sub_100077634((uint64_t)(int)(v68.u16[0] - 6 + (((v68.u16[0] - 6) & 0xC000u) >> 14)) >> 2, v16, v17);
      uint64_t v21 = sub_1000781B8(1, v19, v20);
      if (*((void *)v21 + 2)) {
        goto LABEL_38;
      }
      __break(1u);
LABEL_7:
      if (v11 >> 32 < (int)v11)
      {
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      uint64_t v22 = __DataStorage._bytes.getter();
      if (v22)
      {
        uint64_t v23 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v11, v23))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        v22 += (int)v11 - v23;
      }
      uint64_t v24 = __DataStorage._length.getter();
      if (v24 >= (v11 >> 32) - (int)v11) {
        uint64_t v25 = (v11 >> 32) - (int)v11;
      }
      else {
        uint64_t v25 = v24;
      }
      uint64_t v26 = v22 + v25;
      if (v22) {
        uint64_t v27 = v26;
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = sub_100078978(1, v22, v27);
      if (v4) {
        return sub_1000541C0(v11, v10);
      }
      if (!*((void *)v28 + 2))
      {
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      uint64_t v32 = v29;
      uint64_t v33 = v30;
      v31.i32[0] = *((_DWORD *)v28 + 8);
      int16x8_t v68 = (int16x8_t)vmovl_u8(v31);
      char v18 = v28[36];
      swift_bridgeObjectRelease();
      __int16 v4 = sub_100077634((uint64_t)(int)(v68.u16[0] - 6 + (((v68.u16[0] - 6) & 0xC000u) >> 14)) >> 2, v32, v33);
      uint64_t v21 = sub_1000781B8(1, v34, v35);
      if (!*((void *)v21 + 2))
      {
        __break(1u);
LABEL_21:
        uint64_t v67 = a3;
        uint64_t v37 = *(void *)(v11 + 16);
        uint64_t v36 = *(void *)(v11 + 24);
        swift_retain();
        swift_retain();
        uint64_t v38 = __DataStorage._bytes.getter();
        if (v38)
        {
          uint64_t v39 = __DataStorage._offset.getter();
          if (__OFSUB__(v37, v39)) {
            goto LABEL_46;
          }
          v38 += v37 - v39;
        }
        BOOL v40 = __OFSUB__(v36, v37);
        uint64_t v41 = v36 - v37;
        if (!v40)
        {
          uint64_t v42 = __DataStorage._length.getter();
          if (v42 >= v41) {
            uint64_t v43 = v41;
          }
          else {
            uint64_t v43 = v42;
          }
          uint64_t v44 = v38 + v43;
          if (v38) {
            uint64_t v45 = v44;
          }
          else {
            uint64_t v45 = 0;
          }
          uint64_t v46 = sub_100078978(1, v38, v45);
          if (!v4)
          {
            if (*((void *)v46 + 2))
            {
              char v50 = v47;
              uint64_t v51 = v48;
              v49.i32[0] = *((_DWORD *)v46 + 8);
              int16x8_t v68 = (int16x8_t)vmovl_u8(v49);
              char v52 = v46[36];
              swift_bridgeObjectRelease();
              __int16 v4 = sub_100077634((uint64_t)(int)(v68.u16[0] - 6 + (((v68.u16[0] - 6) & 0xC000u) >> 14)) >> 2, v50, v51);
              char v66 = v52;
              long long v65 = sub_1000781B8(1, v63, v64);
              if (*((void *)v65 + 2))
              {
                char v61 = v65[32];
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                uint64_t result = sub_1000541C0(v11, v10);
                a3 = v67;
                char v18 = v66;
                goto LABEL_42;
              }
              goto LABEL_52;
            }
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
            goto LABEL_53;
          }
          swift_release();
          swift_release();
          return sub_1000541C0(v11, v10);
        }
        goto LABEL_44;
      }
LABEL_38:
      char v61 = v21[32];
      swift_bridgeObjectRelease();
      uint64_t result = sub_1000541C0(v11, v10);
LABEL_42:
      *(_DWORD *)a3 = vmovn_s16(v68).u32[0];
      *(unsigned char *)(a3 + 4) = v18;
      *(void *)(a3 + 8) = a1;
      *(_WORD *)(a3 + 16) = a2;
      *(void *)(a3 + 24) = v4;
      *(unsigned char *)(a3 + 32) = v61;
      return result;
  }
}

uint64_t sub_1000682CC@<X0>(unsigned char *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  __int16 v6 = a2;
  unint64_t v7 = a1;
  uint64_t v9 = sub_100089F98(a1, a2);
  if (v10 >> 60 == 15) {
LABEL_62:
  }
    __break(1u);
  unint64_t v11 = v10;
  uint64_t v12 = v9;
  switch(v10 >> 62)
  {
    case 1uLL:
      goto LABEL_7;
    case 2uLL:
      uint64_t v82 = a3;
      __int16 v85 = v7;
      uint64_t v37 = *(void *)(v9 + 16);
      uint64_t v38 = *(void *)(v9 + 24);
      swift_retain();
      swift_retain();
      uint64_t v39 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v39) {
        goto LABEL_24;
      }
      uint64_t v40 = __DataStorage._offset.getter();
      if (__OFSUB__(v37, v40)) {
        goto LABEL_54;
      }
      v39 += v37 - v40;
LABEL_24:
      BOOL v41 = __OFSUB__(v38, v37);
      uint64_t v42 = v38 - v37;
      if (v41) {
        goto LABEL_52;
      }
      uint64_t v43 = __DataStorage._length.getter();
      if (v43 >= v42) {
        uint64_t v44 = v42;
      }
      else {
        uint64_t v44 = v43;
      }
      uint64_t v45 = &v39[v44];
      if (v39) {
        uint64_t v46 = (uint64_t)v45;
      }
      else {
        uint64_t v46 = 0;
      }
      uint64_t v47 = sub_100078D8C(1, v39, v46);
      if (!v3)
      {
        __int16 v80 = v6;
        if (*((void *)v47 + 2))
        {
          char v50 = v48;
          uint64_t v51 = v49;
          v4.i32[0] = *((_DWORD *)v47 + 8);
          __int16 v18 = *((_WORD *)v47 + 18);
          uint64_t v52 = *((unsigned __int8 *)v47 + 38);
          swift_bridgeObjectRelease();
          unint64_t v7 = v85;
          uint64_t v19 = sub_1000781B8(v52, v50, v51);
          long long v65 = sub_1000789EC(1, v63, v64);
          if (*((void *)v65 + 2))
          {
            int16x8_t v79 = (int16x8_t)vmovl_u8(v4);
            int v77 = *(_DWORD *)((char *)v65 + 33);
            char v78 = *((unsigned char *)v65 + 32);
            char v75 = *((unsigned char *)v65 + 38);
            char v76 = *((unsigned char *)v65 + 37);
            char v74 = *((unsigned char *)v65 + 39);
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            sub_1000541C0(v12, v11);
            char v36 = v52;
            a3 = v82;
LABEL_42:
            __int16 v6 = v80;
            goto LABEL_43;
          }
          goto LABEL_61;
        }
        goto LABEL_58;
      }
      swift_release();
      swift_release();
      return sub_1000541C0(v12, v11);
    case 3uLL:
      memset(v86, 0, 14);
      uint64_t v53 = sub_100078D8C(1, v86, (uint64_t)v86);
      if (v3) {
        return sub_1000541C0(v12, v11);
      }
      __int16 v80 = v6;
      if (!*((void *)v53 + 2)) {
        goto LABEL_56;
      }
      uint8x8_t v56 = v54;
      uint64_t v57 = v55;
      v4.i32[0] = *((_DWORD *)v53 + 8);
      __int16 v58 = *((_WORD *)v53 + 18);
      uint64_t v59 = *((unsigned __int8 *)v53 + 38);
      swift_bridgeObjectRelease();
      uint64_t v19 = sub_1000781B8(v59, v56, v57);
      long long v62 = sub_1000789EC(1, v60, v61);
      if (!*((void *)v62 + 2)) {
        goto LABEL_60;
      }
      int16x8_t v79 = (int16x8_t)vmovl_u8(v4);
      int v77 = *(_DWORD *)((char *)v62 + 33);
      char v78 = *((unsigned char *)v62 + 32);
      char v75 = *((unsigned char *)v62 + 38);
      char v76 = *((unsigned char *)v62 + 37);
      char v74 = *((unsigned char *)v62 + 39);
      swift_bridgeObjectRelease();
      sub_1000541C0(v12, v11);
      char v36 = v59;
      __int16 v18 = v58;
      goto LABEL_42;
    default:
      v86[0] = v9;
      LOWORD(v86[1]) = v10;
      BYTE2(v86[1]) = BYTE2(v10);
      BYTE3(v86[1]) = BYTE3(v10);
      BYTE4(v86[1]) = BYTE4(v10);
      BYTE5(v86[1]) = BYTE5(v10);
      uint64_t v13 = sub_100078D8C(1, v86, (uint64_t)v86 + BYTE6(v10));
      if (v3) {
        return sub_1000541C0(v12, v11);
      }
      uint64_t v84 = v7;
      if (!*((void *)v13 + 2)) {
        goto LABEL_55;
      }
      uint64_t v16 = v14;
      uint64_t v17 = v15;
      unint64_t v7 = (unsigned char *)a3;
      v4.i32[0] = *((_DWORD *)v13 + 8);
      __int16 v18 = *((_WORD *)v13 + 18);
      a3 = *((unsigned __int8 *)v13 + 38);
      swift_bridgeObjectRelease();
      uint64_t v19 = sub_1000781B8(a3, v16, v17);
      uint64_t v22 = sub_1000789EC(1, v20, v21);
      uint64_t v5 = 0;
      if (*((void *)v22 + 2)) {
        goto LABEL_20;
      }
      __break(1u);
LABEL_7:
      uint64_t v84 = v7;
      if (v12 >> 32 < (int)v12)
      {
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      uint64_t v23 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v23) {
        goto LABEL_11;
      }
      uint64_t v24 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v12, v24))
      {
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
      v23 += (int)v12 - v24;
LABEL_11:
      uint64_t v25 = __DataStorage._length.getter();
      if (v25 >= (v12 >> 32) - (int)v12) {
        uint64_t v26 = (v12 >> 32) - (int)v12;
      }
      else {
        uint64_t v26 = v25;
      }
      uint64_t v27 = &v23[v26];
      if (v23) {
        uint64_t v28 = (uint64_t)v27;
      }
      else {
        uint64_t v28 = 0;
      }
      char v29 = sub_100078D8C(1, v23, v28);
      if (v5) {
        return sub_1000541C0(v12, v11);
      }
      if (!*((void *)v29 + 2))
      {
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      uint64_t v32 = v30;
      uint64_t v33 = v31;
      unint64_t v7 = (unsigned char *)a3;
      v4.i32[0] = *((_DWORD *)v29 + 8);
      __int16 v18 = *((_WORD *)v29 + 18);
      a3 = *((unsigned __int8 *)v29 + 38);
      swift_bridgeObjectRelease();
      uint64_t v19 = sub_1000781B8(a3, v32, v33);
      uint64_t v22 = sub_1000789EC(1, v34, v35);
      if (!*((void *)v22 + 2)) {
        goto LABEL_59;
      }
LABEL_20:
      int16x8_t v79 = (int16x8_t)vmovl_u8(v4);
      int v77 = *(_DWORD *)((char *)v22 + 33);
      char v78 = *((unsigned char *)v22 + 32);
      char v75 = *((unsigned char *)v22 + 38);
      char v76 = *((unsigned char *)v22 + 37);
      char v74 = *((unsigned char *)v22 + 39);
      swift_bridgeObjectRelease();
      sub_1000541C0(v12, v11);
      char v36 = a3;
      a3 = (uint64_t)v7;
      unint64_t v7 = v84;
LABEL_43:
      int64_t v67 = *((void *)v19 + 2);
      if (v67)
      {
        char v73 = v36;
        __int16 v81 = v18;
        uint64_t v83 = a3;
        v86[0] = _swiftEmptyArrayStorage;
        sub_10007C4BC(0, v67, 0);
        uint64_t v68 = 0;
        uint64_t v69 = (void *)v86[0];
        unint64_t v70 = *(void *)(v86[0] + 16);
        do
        {
          uint64_t v71 = v19[v68 + 32];
          v86[0] = v69;
          unint64_t v72 = v69[3];
          if (v70 >= v72 >> 1)
          {
            sub_10007C4BC(v72 > 1, v70 + 1, 1);
            uint64_t v69 = (void *)v86[0];
          }
          ++v68;
          void v69[2] = v70 + 1;
          v69[v70++ + 4] = v71;
        }
        while (v67 != v68);
        uint64_t result = swift_bridgeObjectRelease();
        a3 = v83;
        __int16 v18 = v81;
        char v36 = v73;
      }
      else
      {
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v69 = _swiftEmptyArrayStorage;
      }
      *(_DWORD *)a3 = vmovn_s16(v79).u32[0];
      *(_WORD *)(a3 + 4) = v18;
      *(unsigned char *)(a3 + 6) = v36;
      *(unsigned char *)(a3 + 7) = v78;
      *(_DWORD *)(a3 + 8) = v77;
      *(unsigned char *)(a3 + 12) = v76;
      *(unsigned char *)(a3 + 13) = v75;
      *(unsigned char *)(a3 + 14) = v74;
      *(void *)(a3 + 16) = v7;
      *(_WORD *)(a3 + 24) = v6;
      *(void *)(a3 + 32) = v69;
      return result;
  }
}

unint64_t sub_10006891C(unsigned char *a1, __int16 a2)
{
  uint64_t v3 = sub_100089F98(a1, a2);
  if (v4 >> 60 == 15) {
LABEL_44:
  }
    __break(1u);
  unint64_t v5 = v4;
  uint64_t v6 = v3;
  switch(v4 >> 62)
  {
    case 1uLL:
      goto LABEL_6;
    case 2uLL:
      goto LABEL_19;
    case 3uLL:
      memset(v32, 0, 14);
      unint64_t v7 = sub_10007689C(1, v32, (uint64_t)v32);
      if (v2) {
        return sub_1000541C0(v6, v5);
      }
      if (*((void *)v7 + 2)) {
        goto LABEL_34;
      }
      goto LABEL_42;
    default:
      v32[0] = v3;
      LOWORD(v32[1]) = v4;
      BYTE2(v32[1]) = BYTE2(v4);
      BYTE3(v32[1]) = BYTE3(v4);
      BYTE4(v32[1]) = BYTE4(v4);
      BYTE5(v32[1]) = BYTE5(v4);
      unint64_t v7 = sub_10007689C(1, v32, (uint64_t)v32 + BYTE6(v4));
      if (v2) {
        return sub_1000541C0(v6, v5);
      }
      if (*((void *)v7 + 2)) {
        goto LABEL_34;
      }
      __break(1u);
LABEL_6:
      if (v6 >> 32 < (int)v6)
      {
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      uint64_t v8 = (unsigned char *)__DataStorage._bytes.getter();
      if (v8)
      {
        uint64_t v9 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v6, v9))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        v8 += (int)v6 - v9;
      }
      uint64_t v10 = __DataStorage._length.getter();
      if (v10 >= (v6 >> 32) - (int)v6) {
        uint64_t v11 = (v6 >> 32) - (int)v6;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = &v8[v11];
      if (v8) {
        uint64_t v13 = (uint64_t)v12;
      }
      else {
        uint64_t v13 = 0;
      }
      unint64_t v7 = sub_10007689C(1, v8, v13);
      if (v2) {
        return sub_1000541C0(v6, v5);
      }
      if (!*((void *)v7 + 2))
      {
        __break(1u);
LABEL_19:
        uint64_t v14 = *(void *)(v6 + 16);
        uint64_t v15 = *(void *)(v6 + 24);
        swift_retain();
        swift_retain();
        uint64_t v16 = (unsigned char *)__DataStorage._bytes.getter();
        if (v16)
        {
          uint64_t v17 = __DataStorage._offset.getter();
          if (__OFSUB__(v14, v17)) {
            goto LABEL_41;
          }
          v16 += v14 - v17;
        }
        BOOL v18 = __OFSUB__(v15, v14);
        uint64_t v19 = v15 - v14;
        if (!v18)
        {
          uint64_t v20 = __DataStorage._length.getter();
          if (v20 >= v19) {
            uint64_t v21 = v19;
          }
          else {
            uint64_t v21 = v20;
          }
          uint64_t v22 = &v16[v21];
          if (v16) {
            uint64_t v23 = (uint64_t)v22;
          }
          else {
            uint64_t v23 = 0;
          }
          uint64_t v24 = sub_10007689C(1, v16, v23);
          if (v2)
          {
            swift_release();
            swift_release();
            return sub_1000541C0(v6, v5);
          }
          if (*((void *)v24 + 2))
          {
            uint64_t v31 = *((void *)v24 + 4);
            swift_release();
            swift_release();
            goto LABEL_37;
          }
          goto LABEL_43;
        }
        goto LABEL_39;
      }
LABEL_34:
      uint64_t v31 = *((void *)v7 + 4);
LABEL_37:
      swift_bridgeObjectRelease();
      sub_1000541C0(v6, v5);
      v26.i64[0] = BYTE1(v31);
      v26.i64[1] = BYTE2(v31);
      v27.i64[0] = 255;
      v27.i64[1] = 255;
      uint64x2_t v28 = (uint64x2_t)vandq_s8(v26, v27);
      v26.i64[0] = BYTE3(v31);
      v26.i64[1] = BYTE4(v31);
      int8x16_t v29 = vorrq_s8((int8x16_t)vshlq_u64(v28, (uint64x2_t)xmmword_1000EB210), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v26, v27), (uint64x2_t)xmmword_1000EB200));
      *(int8x8_t *)v29.i8 = vorr_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
      v26.i64[0] = BYTE5(v31);
      v26.i64[1] = BYTE6(v31);
      v29.i64[1] = (unint64_t)HIBYTE(v31) << 56;
      int64x2_t v30 = (int64x2_t)vorrq_s8(v29, (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v26, v27), (uint64x2_t)xmmword_1000EB220));
      return vorrq_s8((int8x16_t)v30, (int8x16_t)vdupq_laneq_s64(v30, 1)).u64[0] | v31;
  }
}

unint64_t sub_100068CB4(unsigned char *a1, __int16 a2)
{
  return sub_100068D28(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100078E4C, (uint64_t (*)(uint64_t))sub_100078DEC);
}

unint64_t sub_100068D28(unsigned char *a1, __int16 a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), uint64_t (*a4)(uint64_t))
{
  unint64_t v7 = v4;
  uint64_t v8 = sub_100089F98(a1, a2);
  if (v9 >> 60 == 15) {
LABEL_62:
  }
    __break(1u);
  unint64_t v10 = v9;
  uint64_t v11 = v8;
  switch(v9 >> 62)
  {
    case 1uLL:
      goto LABEL_7;
    case 2uLL:
      __int16 v87 = a4;
      uint64_t v39 = *(void *)(v8 + 16);
      uint64_t v38 = *(void *)(v8 + 24);
      swift_retain();
      swift_retain();
      uint64_t v40 = __DataStorage._bytes.getter();
      if (!v40) {
        goto LABEL_24;
      }
      uint64_t v41 = __DataStorage._offset.getter();
      if (__OFSUB__(v39, v41)) {
        goto LABEL_54;
      }
      v40 += v39 - v41;
LABEL_24:
      BOOL v42 = __OFSUB__(v38, v39);
      uint64_t v43 = v38 - v39;
      if (v42) {
        goto LABEL_52;
      }
      uint64_t v44 = __DataStorage._length.getter();
      if (v44 >= v43) {
        uint64_t v45 = v43;
      }
      else {
        uint64_t v45 = v44;
      }
      uint64_t v46 = v40 + v45;
      if (v40) {
        uint64_t v47 = v46;
      }
      else {
        uint64_t v47 = 0;
      }
      uint64_t v48 = a3(1, v40, v47);
      if (!v4)
      {
        if (*(void *)(v48 + 16))
        {
          uint64_t v51 = v49;
          uint64_t v52 = v50;
          unsigned int v76 = *(unsigned __int8 *)(v48 + 33);
          unsigned int v77 = *(unsigned __int8 *)(v48 + 34);
          unsigned int v82 = *(unsigned __int8 *)(v48 + 32);
          unsigned int v53 = *(unsigned __int8 *)(v48 + 35);
          uint64_t v54 = *(unsigned __int8 *)(v48 + 36);
          swift_bridgeObjectRelease();
          unint64_t v7 = sub_1000781B8(v54, v51, v52);
          uint64_t v60 = v54;
          unsigned int v73 = v53;
          uint64_t v61 = v87(1);
          if (*(void *)(v61 + 16))
          {
            uint64_t v63 = *(unsigned __int8 *)(v61 + 32);
            uint64_t v86 = *(unsigned __int8 *)(v61 + 33);
            swift_release();
            swift_release();
            uint64_t v35 = v63;
            swift_bridgeObjectRelease();
            sub_1000541C0(v11, v10);
            uint64_t v72 = v60;
            unsigned int v37 = v82;
            goto LABEL_42;
          }
          goto LABEL_61;
        }
        goto LABEL_58;
      }
      swift_release();
      swift_release();
      return sub_1000541C0(v11, v10);
    case 3uLL:
      memset(v88, 0, 14);
      uint64_t v55 = a3(1, (uint64_t)v88, (uint64_t)v88);
      if (v4) {
        return sub_1000541C0(v11, v10);
      }
      if (!*(void *)(v55 + 16)) {
        goto LABEL_56;
      }
      __int16 v58 = v56;
      uint64_t v59 = v57;
      unsigned int v77 = *(unsigned __int8 *)(v55 + 34);
      unsigned int v83 = *(unsigned __int8 *)(v55 + 32);
      unsigned int v73 = *(unsigned __int8 *)(v55 + 35);
      unsigned int v76 = *(unsigned __int8 *)(v55 + 33);
      uint64_t v17 = *(unsigned __int8 *)(v55 + 36);
      swift_bridgeObjectRelease();
      unint64_t v7 = sub_1000781B8(v17, v58, v59);
      unsigned int v18 = v83;
      uint64_t v19 = a4(1);
      if (*(void *)(v19 + 16)) {
        goto LABEL_38;
      }
      goto LABEL_60;
    default:
      v88[0] = v8;
      LOWORD(v88[1]) = v9;
      BYTE2(v88[1]) = BYTE2(v9);
      BYTE3(v88[1]) = BYTE3(v9);
      BYTE4(v88[1]) = BYTE4(v9);
      BYTE5(v88[1]) = BYTE5(v9);
      uint64_t v12 = a3(1, (uint64_t)v88, (uint64_t)v88 + BYTE6(v9));
      if (v4) {
        return sub_1000541C0(v11, v10);
      }
      if (!*(void *)(v12 + 16)) {
        goto LABEL_55;
      }
      uint64_t v15 = v13;
      uint64_t v16 = v14;
      unsigned int v77 = *(unsigned __int8 *)(v12 + 34);
      unsigned int v80 = *(unsigned __int8 *)(v12 + 32);
      unsigned int v73 = *(unsigned __int8 *)(v12 + 35);
      unsigned int v76 = *(unsigned __int8 *)(v12 + 33);
      uint64_t v17 = *(unsigned __int8 *)(v12 + 36);
      swift_bridgeObjectRelease();
      unint64_t v7 = sub_1000781B8(v17, v15, v16);
      unsigned int v18 = v80;
      uint64_t v19 = a4(1);
      a3 = 0;
      if (*(void *)(v19 + 16))
      {
LABEL_38:
        uint64_t v35 = *(unsigned __int8 *)(v19 + 32);
        uint64_t v86 = *(unsigned __int8 *)(v19 + 33);
        swift_bridgeObjectRelease();
        sub_1000541C0(v11, v10);
        uint64_t v72 = v17;
        unsigned int v37 = v18;
LABEL_42:
        unsigned int v33 = v77;
        unsigned int v36 = v73;
        goto LABEL_43;
      }
      __break(1u);
LABEL_7:
      __int16 v85 = a4;
      if (v11 >> 32 < (int)v11)
      {
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      uint64_t v20 = __DataStorage._bytes.getter();
      if (!v20) {
        goto LABEL_11;
      }
      uint64_t v21 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v11, v21))
      {
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
      v20 += (int)v11 - v21;
LABEL_11:
      uint64_t v22 = __DataStorage._length.getter();
      if (v22 >= (v11 >> 32) - (int)v11) {
        uint64_t v23 = (v11 >> 32) - (int)v11;
      }
      else {
        uint64_t v23 = v22;
      }
      uint64_t v24 = v20 + v23;
      if (v20) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      uint64_t v26 = a3(1, v20, v25);
      if (v7) {
        return sub_1000541C0(v11, v10);
      }
      if (!*(void *)(v26 + 16))
      {
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
      int8x16_t v29 = v27;
      uint64_t v30 = v28;
      unsigned int v76 = *(unsigned __int8 *)(v26 + 33);
      unsigned int v78 = *(unsigned __int8 *)(v26 + 34);
      unsigned int v81 = *(unsigned __int8 *)(v26 + 32);
      unsigned int v31 = *(unsigned __int8 *)(v26 + 35);
      uint64_t v32 = *(unsigned __int8 *)(v26 + 36);
      swift_bridgeObjectRelease();
      unint64_t v7 = sub_1000781B8(v32, v29, v30);
      unsigned int v74 = v31;
      unsigned int v33 = v78;
      uint64_t v34 = v85(1);
      if (!*(void *)(v34 + 16)) {
        goto LABEL_59;
      }
      uint64_t v35 = *(unsigned __int8 *)(v34 + 32);
      uint64_t v86 = *(unsigned __int8 *)(v34 + 33);
      swift_bridgeObjectRelease();
      sub_1000541C0(v11, v10);
      uint64_t v72 = v32;
      unsigned int v36 = v74;
      unsigned int v37 = v81;
LABEL_43:
      int64_t v64 = *((void *)v7 + 2);
      if (v64)
      {
        unsigned int v75 = v36;
        unsigned int v79 = v33;
        unsigned int v84 = v37;
        v88[0] = _swiftEmptyArrayStorage;
        sub_10007C4BC(0, v64, 0);
        uint64_t v65 = 0;
        uint64_t v66 = v88[0];
        unint64_t v67 = *(void *)(v88[0] + 16);
        do
        {
          uint64_t v68 = v7[v65 + 32];
          v88[0] = v66;
          unint64_t v69 = *(void *)(v66 + 24);
          if (v67 >= v69 >> 1)
          {
            sub_10007C4BC(v69 > 1, v67 + 1, 1);
            uint64_t v66 = v88[0];
          }
          ++v65;
          *(void *)(v66 + 16) = v67 + 1;
          *(void *)(v66 + 8 * v67++ + 32) = v68;
        }
        while (v64 != v65);
        swift_bridgeObjectRelease();
        unsigned int v33 = v79;
        unsigned int v70 = v84;
        unsigned int v36 = v75;
      }
      else
      {
        unsigned int v71 = v37;
        swift_bridgeObjectRelease();
        unsigned int v70 = v71;
      }
      return v70 | ((unint64_t)v76 << 8) | ((unint64_t)v33 << 16) | ((unint64_t)v36 << 24) | (v72 << 32) | (v35 << 40) | (v86 << 48);
  }
}

uint64_t Function.controlInterface.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000693AC(v1, a1);
}

uint64_t sub_1000693AC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Function.controlInterface.setter(uint64_t a1)
{
  return sub_100069410(a1, v1);
}

uint64_t sub_100069410(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t Function.streamingInterfaces.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Function.functionDescriptors.getter()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Function.functionProtocol.getter()
{
  return *(unsigned __int8 *)(v0 + 144);
}

uint64_t Function.association.getter()
{
  return *(void *)(v0 + 145);
}

uint64_t Function.highestExceptionLevel.getter()
{
  uint64_t result = ControlInterface.highestExceptionLevel.getter();
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v2 + 32;
    do
    {
      uint64_t v6 = v5 + 40 * v4;
      uint64_t v7 = *(void *)(v6 + 24);
      if (v7 && (uint64_t v8 = *(void *)(v7 + 16)) != 0)
      {
        unsigned __int8 v9 = 0;
        unint64_t v10 = (unsigned __int8 *)(v7 + 32);
        do
        {
          int v12 = *v10++;
          int v11 = v12;
          if (v12 == 60 || v11 == 59 || v11 == 14)
          {
            if (!v9) {
              unsigned __int8 v9 = 1;
            }
          }
          else if (v9 < 2u)
          {
            unsigned __int8 v9 = 2;
          }
          --v8;
        }
        while (v8);
      }
      else
      {
        unsigned __int8 v9 = 0;
      }
      uint64_t v13 = *(void *)(v6 + 8);
      uint64_t v14 = *(void *)(v13 + 16);
      if (v14)
      {
        uint64_t v15 = 0;
        uint64_t v16 = v13 + 32;
        do
        {
          uint64_t v17 = v16 + 80 * v15;
          uint64_t v18 = *(void *)(v17 + 72);
          if (v18 && (uint64_t v19 = *(void *)(v18 + 16)) != 0)
          {
            unsigned __int8 v20 = 0;
            uint64_t v21 = (unsigned __int8 *)(v18 + 32);
            do
            {
              int v23 = *v21++;
              int v22 = v23;
              if (v23 == 60 || v22 == 59 || v22 == 14)
              {
                if (!v20) {
                  unsigned __int8 v20 = 1;
                }
              }
              else if (v20 < 2u)
              {
                unsigned __int8 v20 = 2;
              }
              --v19;
            }
            while (v19);
          }
          else
          {
            unsigned __int8 v20 = 0;
          }
          uint64_t v24 = *(void *)(v17 + 56);
          uint64_t v25 = *(void *)(v24 + 16);
          if (v25)
          {
            uint64_t v26 = 0;
            uint64_t v27 = v24 + 32;
            do
            {
              uint64_t v28 = *(void *)(v27 + 80 * v26 + 72);
              if (v28)
              {
                uint64_t v29 = *(void *)(v28 + 16);
                if (v29)
                {
                  uint64_t v30 = (unsigned __int8 *)(v28 + 32);
                  do
                  {
                    int v32 = *v30++;
                    int v31 = v32;
                    if (v32 == 60 || v31 == 59 || v31 == 14)
                    {
                      if (!v20) {
                        unsigned __int8 v20 = 1;
                      }
                    }
                    else if (v20 < 2u)
                    {
                      unsigned __int8 v20 = 2;
                    }
                    --v29;
                  }
                  while (v29);
                }
              }
              ++v26;
            }
            while (v26 != v25);
          }
          ++v15;
          if (v9 <= v20) {
            unsigned __int8 v9 = v20;
          }
        }
        while (v15 != v14);
      }
      ++v4;
      if (result <= v9) {
        uint64_t result = v9;
      }
      else {
        uint64_t result = result;
      }
    }
    while (v4 != v3);
  }
  return result;
}

__n128 Function.init(_:_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_10006A97C(a1, a2, a3, (uint64_t)v11);
  if (!v4)
  {
    long long v7 = v11[9];
    *(_OWORD *)(a4 + 128) = v11[8];
    *(_OWORD *)(a4 + 144) = v7;
    *(void *)(a4 + 160) = v12;
    long long v8 = v11[5];
    *(_OWORD *)(a4 + 64) = v11[4];
    *(_OWORD *)(a4 + 80) = v8;
    long long v9 = v11[7];
    *(_OWORD *)(a4 + 96) = v11[6];
    *(_OWORD *)(a4 + 112) = v9;
    long long v10 = v11[1];
    *(_OWORD *)a4 = v11[0];
    *(_OWORD *)(a4 + 16) = v10;
    __n128 result = (__n128)v11[3];
    *(_OWORD *)(a4 + 32) = v11[2];
    *(__n128 *)(a4 + 48) = result;
  }
  return result;
}

void sub_10006976C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  sub_10006D580((uint64_t)v56);
  long long v9 = *(const IOUSBBOSDescriptor **)(a2 + OBJC_IVAR____TtC9AUASDCore9USBDevice_bosDescriptor);
  if (!v9) {
    goto LABEL_23;
  }
  uint64_t v57 = a1;
  int v10 = v5[147];
  int v11 = v5[148];
  uint64_t v12 = OBJC_IVAR____TtC9AUASDCore9USBDevice_curConfigNum;
  CapabilityDescriptor = IOUSBGetNextCapabilityDescriptor(v9, 0);
  if (!CapabilityDescriptor) {
    goto LABEL_23;
  }
  uint64_t v14 = CapabilityDescriptor;
  uint64_t v41 = a3;
  unsigned __int16 v15 = 0;
  unsigned __int8 bDevCapabilityType = 32;
  do
  {
    if (v14->bDevCapabilityType == 18 && *(void *)(a2 + v12) == v14[1].bLength)
    {
      BOOL v17 = v14[1].bDescriptorType == v10 && v14[1].bDevCapabilityType == v11;
      BOOL v18 = v17;
      if (v18 && v14[2].bDevCapabilityType > bDevCapabilityType)
      {
        unsigned __int16 v15 = *(_WORD *)&v14[3].bLength;
        unsigned __int8 bDevCapabilityType = v14[2].bDevCapabilityType;
      }
    }
    uint64_t v14 = IOUSBGetNextCapabilityDescriptor(v9, v14);
  }
  while (v14);
  if (bDevCapabilityType == 64)
  {
    uint64_t v19 = v57;
    sub_1000C8BE0(v57);
    if (v4) {
      return;
    }
    if (v5[144] == v20) {
      sub_1000C8F0C(v19, 64);
    }
    sub_1000C8BE0(v19);
    if (v21 != 64)
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v25 = 26;
      *(void *)(v25 + 8) = 0;
      *(void *)(v25 + 16) = 0xE000000000000000;
      *(void *)(v25 + 24) = 0xD00000000000001CLL;
      *(void *)(v25 + 32) = 0x80000001000E3F80;
      *(void *)(v25 + 40) = 0xD000000000000018;
      *(void *)(v25 + 48) = 0x80000001000E3F60;
      uint64_t v26 = 178;
      goto LABEL_27;
    }
    sub_100037B58(v15, a2, v19);
    unint64_t v24 = v23;
    if (v23 >> 60 == 15)
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v25 = 26;
      *(void *)(v25 + 8) = 0;
      *(void *)(v25 + 16) = 0xE000000000000000;
      *(void *)(v25 + 24) = 0xD00000000000001CLL;
      *(void *)(v25 + 32) = 0x80000001000E3F80;
      *(void *)(v25 + 40) = 0xD000000000000018;
      *(void *)(v25 + 48) = 0x80000001000E3F60;
      uint64_t v26 = 184;
LABEL_27:
      *(void *)(v25 + 56) = v26;
      swift_willThrow();
      return;
    }
    uint64_t v27 = v22;
    sub_100054104(v22, v23);
    sub_10000AC7C(&qword_1001290E0);
    type metadata accessor for IOUSBConfigurationDescriptor(0);
    Data.withUnsafeBytes<A, B>(_:)();
    sub_1000541C0(v27, v24);
    uint64_t v28 = sub_10009E694(*(const IOUSBConfigurationDescriptor **)&v53[0]);
    uint64_t v29 = sub_10009EE6C((uint64_t)v28);
    uint64_t v30 = _s9AUASDCore15DescriptorUtilsV27usbAudioFunctionDescriptorsySaySayAA13USBDescriptorOG07controlG0_SayAF15streamInterface_SayAGG0J10AlternatestG0jG0tGAGFZ_0((uint64_t)v28);
    swift_bridgeObjectRelease();
    if (v30[2])
    {
      swift_bridgeObjectRetain();
      int v32 = sub_10006D004((uint64_t)v30, (uint64_t)v29);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      if (v32[2] != 1)
      {
        swift_bridgeObjectRelease();
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v40 = 35;
        *(void *)(v40 + 8) = 0;
        *(void *)(v40 + 16) = 0xE000000000000000;
        *(void *)(v40 + 24) = 0xD00000000000001CLL;
        *(void *)(v40 + 32) = 0x80000001000E3F80;
        *(void *)(v40 + 40) = 0xD000000000000018;
        *(void *)(v40 + 48) = 0x80000001000E3F60;
        *(void *)(v40 + 56) = 195;
        swift_willThrow();
        sub_1000541C0(v27, v24);
        return;
      }
      long long v33 = *((_OWORD *)v32 + 10);
      long long v49 = *((_OWORD *)v32 + 9);
      long long v50 = v33;
      long long v51 = *((_OWORD *)v32 + 11);
      uint64_t v52 = v32[24];
      long long v34 = *((_OWORD *)v32 + 6);
      long long v45 = *((_OWORD *)v32 + 5);
      long long v46 = v34;
      long long v35 = *((_OWORD *)v32 + 8);
      long long v47 = *((_OWORD *)v32 + 7);
      long long v48 = v35;
      long long v36 = *((_OWORD *)v32 + 3);
      long long v42 = *((_OWORD *)v32 + 2);
      long long v43 = v36;
      long long v44 = *((_OWORD *)v32 + 4);
      sub_10006CF24(&v42);
      swift_bridgeObjectRelease();
      v53[8] = v50;
      v53[9] = v51;
      uint64_t v54 = v52;
      v53[4] = v46;
      v53[5] = v47;
      v53[6] = v48;
      v53[7] = v49;
      v53[0] = v42;
      v53[1] = v43;
      v53[2] = v44;
      v53[3] = v45;
      ClusterChannelInfo.chNum.getter(v53);
      unsigned int v37 = (uint64_t *)(a2 + OBJC_IVAR____TtC9AUASDCore9USBDevice_hrlConfig);
      uint64_t v38 = *(void *)(a2 + OBJC_IVAR____TtC9AUASDCore9USBDevice_hrlConfig);
      unint64_t v39 = *(void *)(a2 + OBJC_IVAR____TtC9AUASDCore9USBDevice_hrlConfig + 8);
      *unsigned int v37 = v27;
      v37[1] = v24;
      sub_1000541C0(v38, v39);
      int v31 = v53;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000541C0(v27, v24);
      int v31 = v56;
    }
    sub_10005415C((uint64_t)v31, (uint64_t)v55, &qword_1001290D8);
    a3 = v41;
  }
  else
  {
LABEL_23:
    sub_10005415C((uint64_t)v56, (uint64_t)v55, &qword_1001290D8);
  }
  sub_10005415C((uint64_t)v55, a3, &qword_1001290D8);
}

uint64_t sub_100069CC4@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_100069CCC(char *a1, char a2)
{
  long long v6 = v2[5];
  long long v89 = v2[4];
  long long v90 = v6;
  long long v91 = v2[6];
  uint64_t v92 = *((void *)v2 + 14);
  long long v7 = v2[1];
  long long v85 = *v2;
  long long v86 = v7;
  long long v8 = v2[3];
  long long v87 = v2[2];
  long long v88 = v8;
  sub_10006976C((uint64_t)&v85, (uint64_t)a1, (uint64_t)v83);
  if (!v3)
  {
    char v68 = a2;
    uint64_t v120 = 0;
    sub_10005415C((uint64_t)v83, (uint64_t)v82, &qword_1001290D8);
    sub_10005415C((uint64_t)v83, (uint64_t)v84, &qword_1001290D8);
    if (sub_10006CF0C((uint64_t)v84) == 1)
    {
      uint64_t v67 = *((void *)v2 + 20);
      char v66 = *((unsigned char *)v2 + 152);
      uint64_t v69 = *((void *)v2 + 18);
      long long v71 = *(long long *)((char *)v2 + 120);
      uint64_t v64 = *((void *)&v87 + 1);
      uint64_t v65 = *((void *)v2 + 17);
      uint64_t v62 = *((void *)&v88 + 1);
      uint64_t v63 = v88;
      uint64_t v60 = *((void *)&v89 + 1);
      uint64_t v61 = v89;
      long long v59 = v90;
      uint64_t v57 = *((void *)&v91 + 1);
      uint64_t v58 = v91;
      uint64_t v9 = v92;
      uint64_t v10 = v87;
      uint64_t v11 = *((void *)&v86 + 1);
      char v12 = BYTE1(v86);
      char v13 = v86;
      uint64_t v14 = *((void *)&v85 + 1);
      uint64_t v15 = v85;
      sub_10006CF24(v2);
      uint64_t v17 = v57;
      uint64_t v16 = v58;
      uint64_t v18 = v15;
      uint64_t v20 = *((void *)&v59 + 1);
      uint64_t v19 = v59;
      uint64_t v22 = v60;
      uint64_t v21 = v61;
      uint64_t v24 = v62;
      uint64_t v23 = v63;
      uint64_t v26 = v64;
      uint64_t v25 = v65;
      char v27 = v66;
      uint64_t v28 = v69;
    }
    else
    {
      sub_10005415C((uint64_t)v82, (uint64_t)&v72, &qword_1001290D8);
      uint64_t v67 = v81;
      char v27 = BYTE8(v80);
      uint64_t v28 = v80;
      uint64_t v25 = *(void *)&v79[24];
      long long v71 = *(_OWORD *)&v79[8];
      uint64_t v14 = *((void *)&v72 + 1);
      uint64_t v18 = v72;
      char v13 = v73;
      char v12 = BYTE1(v73);
      uint64_t v11 = *((void *)&v73 + 1);
      uint64_t v26 = *((void *)&v74 + 1);
      uint64_t v10 = v74;
      uint64_t v24 = *((void *)&v75 + 1);
      uint64_t v23 = v75;
      uint64_t v22 = *((void *)&v76 + 1);
      uint64_t v21 = v76;
      uint64_t v20 = *((void *)&v77 + 1);
      uint64_t v19 = v77;
      uint64_t v17 = *((void *)&v78 + 1);
      uint64_t v16 = v78;
      uint64_t v9 = *(void *)v79;
    }
    unsigned __int8 v70 = v28;
    uint64_t v104 = v18;
    uint64_t v105 = v14;
    char v106 = v13;
    char v107 = v12;
    uint64_t v108 = v11;
    uint64_t v109 = v10;
    uint64_t v110 = v26;
    uint64_t v111 = v23;
    uint64_t v112 = v24;
    uint64_t v113 = v21;
    uint64_t v114 = v22;
    uint64_t v115 = v19;
    uint64_t v116 = v20;
    uint64_t v117 = v16;
    uint64_t v118 = v17;
    uint64_t v119 = v9;
    *(void *)&long long v72 = v18;
    *((void *)&v72 + 1) = v14;
    LOBYTE(v73) = v13;
    BYTE1(v73) = v12;
    *((void *)&v73 + 1) = v11;
    *(void *)&long long v74 = v10;
    *((void *)&v74 + 1) = v26;
    *(void *)&long long v75 = v23;
    *((void *)&v75 + 1) = v24;
    *(void *)&long long v76 = v21;
    *((void *)&v76 + 1) = v22;
    *(void *)&long long v77 = v19;
    *((void *)&v77 + 1) = v20;
    *(void *)&long long v78 = v16;
    *((void *)&v78 + 1) = v17;
    *(void *)unsigned int v79 = v9;
    *(_OWORD *)&v79[8] = v71;
    *(void *)&v79[24] = v25;
    *(void *)&long long v80 = v28;
    BYTE8(v80) = v27;
    uint64_t v81 = v67;
    long long v93 = v72;
    long long v94 = v73;
    long long v97 = v76;
    long long v98 = v77;
    long long v95 = v74;
    long long v96 = v75;
    uint64_t v103 = v67;
    long long v102 = v80;
    long long v101 = *(_OWORD *)&v79[16];
    long long v99 = v78;
    long long v100 = *(_OWORD *)v79;
    uint64_t v3 = v120;
    sub_100053894(a1, v68 & 1);
    if (v3)
    {
      sub_10001D0D8(&v72);
    }
    else
    {
      uint64_t v30 = v29;
      int v31 = a1;
      swift_retain();
      sub_10006CF24(&v72);
      uint64_t v32 = swift_bridgeObjectRetain();
      long long v34 = sub_10006D184(v32, v31, v30, (uint64_t)&v93, v68 & 1);
      sub_10001D0D8(&v72);
      swift_bridgeObjectRelease();

      swift_release();
      swift_retain();
      uint64_t v35 = swift_bridgeObjectRetain();
      long long v36 = sub_10006D3D4(v35, v30);
      swift_bridgeObjectRelease();
      swift_release();
      switch((v70 >> 4) | (16 * v70))
      {
        case 0:
          type metadata accessor for ADC1Function();
          uint64_t v3 = swift_allocObject();
          swift_unknownObjectWeakInit();
          *(void *)(v3 + 216) = 0;
          *(void *)(v3 + 224) = 0;
          *(void *)(v3 + 232) = 1;
          *(unsigned char *)(v3 + 240) = 0;
          long long v37 = v102;
          *(_OWORD *)(v3 + 144) = v101;
          *(_OWORD *)(v3 + 160) = v37;
          *(void *)(v3 + 176) = v103;
          long long v38 = v98;
          *(_OWORD *)(v3 + 80) = v97;
          *(_OWORD *)(v3 + 96) = v38;
          long long v39 = v100;
          *(_OWORD *)(v3 + 112) = v99;
          *(_OWORD *)(v3 + 128) = v39;
          long long v40 = v94;
          *(_OWORD *)(v3 + 16) = v93;
          *(_OWORD *)(v3 + 32) = v40;
          long long v41 = v96;
          *(_OWORD *)(v3 + 48) = v95;
          *(_OWORD *)(v3 + 64) = v41;
          swift_unknownObjectWeakAssign();
          *(void *)(v3 + 192) = v30;
          *(void *)(v3 + 200) = v34;
          *(void *)(v3 + 208) = v36;
          break;
        case 2:
          type metadata accessor for ADC2Function();
          uint64_t v3 = swift_allocObject();
          swift_unknownObjectWeakInit();
          *(void *)(v3 + 216) = 0;
          *(void *)(v3 + 224) = 0;
          *(void *)(v3 + 232) = 1;
          *(unsigned char *)(v3 + 240) = 0;
          long long v42 = v102;
          *(_OWORD *)(v3 + 144) = v101;
          *(_OWORD *)(v3 + 160) = v42;
          *(void *)(v3 + 176) = v103;
          long long v43 = v98;
          *(_OWORD *)(v3 + 80) = v97;
          *(_OWORD *)(v3 + 96) = v43;
          long long v44 = v100;
          *(_OWORD *)(v3 + 112) = v99;
          *(_OWORD *)(v3 + 128) = v44;
          long long v45 = v94;
          *(_OWORD *)(v3 + 16) = v93;
          *(_OWORD *)(v3 + 32) = v45;
          long long v46 = v96;
          *(_OWORD *)(v3 + 48) = v95;
          *(_OWORD *)(v3 + 64) = v46;
          swift_unknownObjectWeakAssign();
          *(void *)(v3 + 192) = v30;
          *(void *)(v3 + 200) = v34;
          *(void *)(v3 + 208) = v36;
          break;
        case 3:
          type metadata accessor for ADC3Function();
          uint64_t v3 = swift_allocObject();
          swift_unknownObjectWeakInit();
          *(void *)(v3 + 216) = 0;
          *(void *)(v3 + 224) = 0;
          *(void *)(v3 + 232) = 1;
          *(unsigned char *)(v3 + 240) = 0;
          long long v47 = v102;
          *(_OWORD *)(v3 + 144) = v101;
          *(_OWORD *)(v3 + 160) = v47;
          *(void *)(v3 + 176) = v103;
          long long v48 = v98;
          *(_OWORD *)(v3 + 80) = v97;
          *(_OWORD *)(v3 + 96) = v48;
          long long v49 = v100;
          *(_OWORD *)(v3 + 112) = v99;
          *(_OWORD *)(v3 + 128) = v49;
          long long v50 = v94;
          *(_OWORD *)(v3 + 16) = v93;
          *(_OWORD *)(v3 + 32) = v50;
          long long v51 = v96;
          *(_OWORD *)(v3 + 48) = v95;
          *(_OWORD *)(v3 + 64) = v51;
          swift_unknownObjectWeakAssign();
          *(void *)(v3 + 192) = v30;
          *(void *)(v3 + 200) = v34;
          *(void *)(v3 + 208) = v36;
          break;
        case 4:
          type metadata accessor for ADC4Function();
          uint64_t v3 = swift_allocObject();
          swift_unknownObjectWeakInit();
          *(void *)(v3 + 216) = 0;
          *(void *)(v3 + 224) = 0;
          *(void *)(v3 + 232) = 1;
          *(unsigned char *)(v3 + 240) = 0;
          long long v52 = v102;
          *(_OWORD *)(v3 + 144) = v101;
          *(_OWORD *)(v3 + 160) = v52;
          *(void *)(v3 + 176) = v103;
          long long v53 = v98;
          *(_OWORD *)(v3 + 80) = v97;
          *(_OWORD *)(v3 + 96) = v53;
          long long v54 = v100;
          *(_OWORD *)(v3 + 112) = v99;
          *(_OWORD *)(v3 + 128) = v54;
          long long v55 = v94;
          *(_OWORD *)(v3 + 16) = v93;
          *(_OWORD *)(v3 + 32) = v55;
          long long v56 = v96;
          *(_OWORD *)(v3 + 48) = v95;
          *(_OWORD *)(v3 + 64) = v56;
          swift_unknownObjectWeakAssign();
          *(void *)(v3 + 192) = v30;
          *(void *)(v3 + 200) = v34;
          *(void *)(v3 + 208) = v36;
          break;
        default:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          sub_10001D0D8(&v72);
          uint64_t v3 = 0;
          break;
      }
    }
  }
  return v3;
}

uint64_t sub_10006A2F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a2 + 168);
  uint64_t v7 = *(void *)(v6 + 16);
  long long v41 = a3;
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 136);
    uint64_t v9 = v6 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_10001A9B8(v9, (uint64_t)&v35);
      uint64_t v11 = v36;
      uint64_t v10 = v37;
      sub_10001A974(&v35, v36);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 8))(v32, v11, v10);
      uint64_t v12 = v33;
      uint64_t v13 = v34;
      sub_10001A974(v32, v33);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
      sub_10001ABC4((uint64_t)v32);
      if (v14 == v8) {
        break;
      }
      sub_10001ABC4((uint64_t)&v35);
      v9 += 40;
      if (!--v7) {
        goto LABEL_7;
      }
    }
    sub_10000CF6C(&v35, (uint64_t)&v38);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    uint64_t v40 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v39 + 1))
  {
    sub_10001A918((uint64_t)&v38, &qword_100127E98);
    goto LABEL_17;
  }
  sub_10000AC7C(&qword_100127B28);
  type metadata accessor for ActiveInputTerminal();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_17:
    sub_10000CD54();
    uint64_t v22 = swift_allocError();
    *(unsigned char *)uint64_t v23 = 45;
    *(void *)(v23 + 8) = 0;
    *(void *)(v23 + 16) = 0xE000000000000000;
    *(void *)(v23 + 24) = 0xD000000000000029;
    *(void *)(v23 + 32) = 0x80000001000E3F30;
    *(void *)(v23 + 40) = 0xD000000000000018;
    *(void *)(v23 + 48) = 0x80000001000E3F60;
    *(void *)(v23 + 56) = 221;
    uint64_t result = swift_willThrow();
LABEL_28:
    *long long v41 = v22;
    return result;
  }
  uint64_t v15 = *(void *)(v6 + 16);
  uint64_t v29 = v35;
  if (v15)
  {
    uint64_t v16 = v6 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_10001A9B8(v16, (uint64_t)&v35);
      uint64_t v17 = v36;
      uint64_t v18 = v37;
      sub_10001A974(&v35, v36);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v18 + 8))(v32, v17, v18);
      uint64_t v19 = v33;
      uint64_t v20 = v34;
      sub_10001A974(v32, v33);
      uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 16))(v19, v20);
      sub_10001ABC4((uint64_t)v32);
      if (v21 == v5) {
        break;
      }
      sub_10001ABC4((uint64_t)&v35);
      v16 += 40;
      if (!--v15) {
        goto LABEL_19;
      }
    }
    sub_10000CF6C(&v35, (uint64_t)&v38);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_19:
    uint64_t v40 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v39 + 1))
  {
    sub_10001A918((uint64_t)&v38, &qword_100127E98);
    goto LABEL_26;
  }
  type metadata accessor for ActiveOutputTerminal();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_26:
    sub_10000CD54();
    uint64_t v22 = swift_allocError();
    *(unsigned char *)uint64_t v28 = 45;
    *(void *)(v28 + 8) = 0;
    *(void *)(v28 + 16) = 0xE000000000000000;
    *(void *)(v28 + 24) = 0xD000000000000029;
    *(void *)(v28 + 32) = 0x80000001000E3F30;
    *(void *)(v28 + 40) = 0xD000000000000018;
    *(void *)(v28 + 48) = 0x80000001000E3F60;
    *(void *)(v28 + 56) = 224;
    swift_willThrow();
    goto LABEL_27;
  }
  uint64_t v25 = v35;
  swift_retain();
  uint64_t v26 = swift_bridgeObjectRetain();
  char v27 = sub_10006D2CC(v26, a2);
  uint64_t v22 = v31;
  swift_bridgeObjectRelease();
  if (v31)
  {
    swift_release();
    swift_release();
LABEL_27:
    uint64_t result = swift_release();
    goto LABEL_28;
  }
  uint64_t result = swift_release();
  *a4 = v25;
  a4[1] = v29;
  a4[2] = v27;
  return result;
}

uint64_t sub_10006A708@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v33 = a4;
  uint64_t v7 = a1[3];
  uint64_t v6 = a1[4];
  sub_10001A974(a1, v7);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(v6 + 8) + 16))(v7);
  uint64_t v9 = *(void *)(a2 + 168);
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    uint64_t v11 = v8;
    uint64_t v12 = v9 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_10001A9B8(v12, (uint64_t)&v24);
      uint64_t v13 = v25;
      uint64_t v14 = v26;
      sub_10001A974(&v24, v25);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v14 + 8))(v21, v13, v14);
      uint64_t v15 = v22;
      uint64_t v16 = v23;
      sub_10001A974(v21, v22);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
      sub_10001ABC4((uint64_t)v21);
      if (v17 == v11) {
        break;
      }
      sub_10001ABC4((uint64_t)&v24);
      v12 += 40;
      if (!--v10) {
        goto LABEL_7;
      }
    }
    sub_10000CF6C(&v24, (uint64_t)&v27);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    uint64_t v29 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v28 + 1))
  {
    sub_10000AC7C(&qword_100127B28);
    sub_10000AC7C(&qword_100127B30);
    if (swift_dynamicCast())
    {
      if (*((void *)&v31 + 1)) {
        return sub_10000CF6C(&v30, v33);
      }
    }
    else
    {
      uint64_t v32 = 0;
      long long v30 = 0u;
      long long v31 = 0u;
    }
  }
  else
  {
    sub_10001A918((uint64_t)&v27, &qword_100127E98);
    long long v30 = 0u;
    long long v31 = 0u;
    uint64_t v32 = 0;
  }
  sub_10001A918((uint64_t)&v30, &qword_100127B38);
  sub_10000CD54();
  uint64_t v19 = swift_allocError();
  *(unsigned char *)uint64_t v20 = 45;
  *(void *)(v20 + 8) = 0;
  *(void *)(v20 + 16) = 0xE000000000000000;
  *(void *)(v20 + 24) = 0xD000000000000029;
  *(void *)(v20 + 32) = 0x80000001000E3F30;
  *(void *)(v20 + 40) = 0xD000000000000018;
  *(void *)(v20 + 48) = 0x80000001000E3F60;
  *(void *)(v20 + 56) = 229;
  uint64_t result = swift_willThrow();
  *a3 = v19;
  return result;
}

uint64_t sub_10006A97C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)&long long v200 = a1;
  *((void *)&v200 + 1) = a2;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_155;
  }
  unsigned int v7 = (*(unsigned char *)(a1 + 41) - 2);
  if (v7 >= 4)
  {
    swift_bridgeObjectRelease();
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v9 = 23;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0xE000000000000000;
    *(void *)(v9 + 24) = 0x5F3A5F2874696E69;
    *(void *)(v9 + 32) = 0xEA0000000000293ALL;
    *(void *)(v9 + 40) = 0xD000000000000018;
    *(void *)(v9 + 48) = 0x80000001000E3F60;
    *(void *)(v9 + 56) = 61;
    swift_willThrow();
LABEL_7:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  char v144 = *(unsigned char *)(a1 + 41) - 2;
  LOBYTE(v201) = 0x40302000u >> (8 * v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000529E4(a1, (uint64_t)v203);
  if (v4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v140 = a4;
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v146 = *(void *)&v203[0];
  if (v11)
  {
    int v166 = *(unsigned __int8 *)(*(void *)&v203[0] + 7);
    swift_bridgeObjectRetain();
    uint64_t v12 = (uint64_t *)(a2 + 48);
    Swift::String v171 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v14 = *v12;
      uint64_t v15 = *(v12 - 2);
      __int16 v16 = *((_WORD *)v12 - 4);
      swift_bridgeObjectRetain();
      sub_100060C4C(v15, v16, v14, v166, v205);
      uint64_t v17 = v205[0];
      uint64_t v18 = v205[1];
      char v19 = v206;
      uint64_t v20 = v207;
      uint64_t v21 = v208;
      swift_bridgeObjectRelease();
      sub_10005415C((uint64_t)v205, (uint64_t)v222, &qword_1001290E8);
      if (v223)
      {
        if (swift_isUniquelyReferenced_nonNull_native()) {
          uint64_t v22 = v171;
        }
        else {
          uint64_t v22 = sub_100059A30(0, v171[2] + 1, 1, v171);
        }
        unint64_t v24 = v22[2];
        unint64_t v23 = v22[3];
        if (v24 >= v23 >> 1) {
          uint64_t v22 = sub_100059A30((void *)(v23 > 1), v24 + 1, 1, v22);
        }
        v22[2] = v24 + 1;
        Swift::String v171 = v22;
        uint64_t v13 = &v22[5 * v24];
        v13[4] = v17;
        void v13[5] = v18;
        *((unsigned char *)v13 + 48) = v19 & 1;
        v13[7] = v20;
        v13[8] = v21;
      }
      v12 += 3;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    uint64_t v25 = v171;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v25 = _swiftEmptyArrayStorage;
  }
  uint64_t v150 = v25[2];
  if (!v150) {
    goto LABEL_94;
  }
  uint64_t v163 = v25 + 4;
  uint64_t v26 = (uint64_t)(v25 + 5);
  uint64_t v172 = v25;
  swift_bridgeObjectRetain_n();
  long long v27 = v172;
  BOOL v28 = 0;
  uint64_t v29 = 1;
  while (1)
  {
    if (!*(void *)(*(void *)v26 + 16)) {
      goto LABEL_152;
    }
    uint64_t v31 = *(void *)(*(void *)v26 + 88);
    uint64_t v32 = *(void *)(v31 + 16);
    if (!v32) {
      goto LABEL_45;
    }
    BOOL v159 = v28;
    uint64_t v161 = v29;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v33 = v31 + 104;
    uint64_t v34 = v33;
    uint64_t v35 = v32;
    while (1)
    {
      uint64_t v36 = *(const IOUSBEndpointDescriptor **)(v34 - 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!IOUSBGetEndpointUsageType(v36) && v36->wMaxPacketSize > 8u) {
        break;
      }
      if (IOUSBGetEndpointUsageType(v36) == 2) {
        break;
      }
      v34 += 80;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v35)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_44;
      }
    }
    swift_bridgeObjectRelease();
    int v37 = IOUSBGetEndpointDirection(v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v37 == 1) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_44:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v27 = v172;
    uint64_t v29 = v161;
LABEL_45:
    if (v28)
    {
      if (v29 == v150) {
        goto LABEL_55;
      }
      goto LABEL_23;
    }
    if (v29 == v150)
    {
      swift_bridgeObjectRelease();
      unint64_t v152 = v172;
LABEL_93:
      swift_bridgeObjectRelease();
      uint64_t v25 = v152;
      goto LABEL_94;
    }
    BOOL v28 = 0;
LABEL_24:
    uint64_t v26 = (uint64_t)&v163[5 * v29 + 1];
    BOOL v30 = __OFADD__(v29++, 1);
    if (v30) {
      goto LABEL_153;
    }
  }
  swift_bridgeObjectRetain();
  BOOL v28 = 0;
  uint64_t v38 = 1;
  do
  {
    if (v28)
    {
      if (v32 == v38)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_50;
      }
      BOOL v28 = 1;
    }
    else
    {
      long long v39 = *(const IOUSBEndpointDescriptor **)(v33 - 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v40 = IOUSBGetEndpointUsageType(v39);
      if (v40)
      {
        int v41 = v40;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        unsigned int wMaxPacketSize = v39->wMaxPacketSize;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int v41 = wMaxPacketSize < 9;
      }
      BOOL v28 = v41 == 2;
      if (v32 == v38)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        if (v159)
        {
LABEL_50:
          uint64_t v29 = v161;
          long long v27 = v172;
          if (v161 == v150)
          {
LABEL_55:
            long long v43 = v27;
            swift_bridgeObjectRelease_n();
LABEL_56:
            uint64_t v25 = v43;
            uint64_t v156 = v43[2];
            if (!v156) {
              goto LABEL_94;
            }
            swift_bridgeObjectRetain();
            long long v44 = v172;
            unint64_t v45 = 0;
            unint64_t v152 = v172;
            while (2)
            {
              if (v45 >= v44[2]) {
                goto LABEL_156;
              }
              uint64_t v46 = v163[5 * v45 + 1];
              if (!*(void *)(v46 + 16)) {
                goto LABEL_157;
              }
              uint64_t v47 = *(void *)(v46 + 88);
              uint64_t v48 = *(void *)(v47 + 16);
              if (v48)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain_n();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                uint64_t v49 = v47 + 104;
                while (1)
                {
                  long long v50 = *(const IOUSBEndpointDescriptor **)(v49 - 72);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (!IOUSBGetEndpointUsageType(v50) && v50->wMaxPacketSize > 8u) {
                    break;
                  }
                  if (IOUSBGetEndpointUsageType(v50) == 2) {
                    break;
                  }
                  v49 += 80;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (!--v48)
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease_n();
                    BOOL v51 = 1;
                    goto LABEL_72;
                  }
                }
                swift_bridgeObjectRelease();
                int v52 = IOUSBGetEndpointDirection(v50);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                BOOL v51 = v52 == 0;
              }
              else
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                BOOL v51 = 1;
              }
LABEL_72:
              uint64_t v53 = *(void *)(v46 + 88);
              uint64_t v54 = *(void *)(v53 + 16);
              if (v54)
              {
                BOOL v154 = v51;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain_n();
                swift_bridgeObjectRetain();
                uint64_t v55 = v53 + 104;
                while (1)
                {
                  long long v56 = *(const IOUSBEndpointDescriptor **)(v55 - 72);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (!IOUSBGetEndpointUsageType(v56) && v56->wMaxPacketSize > 8u) {
                    break;
                  }
                  if (IOUSBGetEndpointUsageType(v56) == 2) {
                    break;
                  }
                  v55 += 80;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (!--v54)
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    goto LABEL_58;
                  }
                }
                swift_bridgeObjectRelease();
                int v57 = IOUSBGetEndpointSynchronizationType(v56);
                if (v57)
                {
                  int v58 = v57;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  int v59 = IOUSBGetEndpointDirection(v56);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (v59 == 1) {
                    int v58 = 1;
                  }
                  else {
                    int v58 = 3;
                  }
                }
                swift_bridgeObjectRelease();
                BOOL v60 = v154;
                if (v58 != 1) {
                  BOOL v60 = 0;
                }
                if (v60)
                {
                  if (swift_isUniquelyReferenced_nonNull_native()) {
                    uint64_t v61 = v152;
                  }
                  else {
                    uint64_t v61 = sub_1000AC794(v152);
                  }
                  BOOL v62 = v45 >= v61[2];
                  uint64_t v63 = v61;
                  long long v44 = v172;
                  if (v62) {
                    goto LABEL_158;
                  }
                  unint64_t v152 = v63;
                  LOBYTE(v63[5 * v45 + 6]) = 1;
                  goto LABEL_60;
                }
              }
              else
              {
LABEL_58:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              long long v44 = v172;
LABEL_60:
              if (++v45 == v156) {
                goto LABEL_93;
              }
              continue;
            }
          }
LABEL_23:
          BOOL v28 = 1;
          goto LABEL_24;
        }
        uint64_t v29 = v161;
        long long v27 = v172;
        if (v161 != v150) {
          goto LABEL_24;
        }
        long long v43 = v172;
        swift_bridgeObjectRelease_n();
        if (v41 == 2) {
          goto LABEL_56;
        }
        uint64_t v25 = v172;
LABEL_94:
        long long v173 = v25;
        if ((v144 & 0xF) != 0)
        {
          uint64_t v64 = *(void *)(a3 + 16);
          if (v64)
          {
            sub_100035ECC(v203);
            swift_bridgeObjectRetain();
            uint64_t v67 = v146;
            uint64_t v66 = a3;
            uint64_t v68 = 0;
            uint64_t v69 = _swiftEmptyArrayStorage;
            do
            {
              *(void *)&long long v65 = *(void *)(v66 + 8 * v68 + 32);
              if (*(unsigned __int8 *)(v67 + 2) == BYTE2(v65) && v173[2] < (unint64_t)BYTE3(v65))
              {
                long long v167 = v65;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v69 = sub_100059920(0, v69[2] + 1, 1, v69);
                }
                unint64_t v71 = v69[2];
                unint64_t v70 = v69[3];
                uint64_t v67 = v146;
                uint64_t v66 = a3;
                long long v65 = v167;
                if (v71 >= v70 >> 1)
                {
                  long long v72 = sub_100059920((void *)(v70 > 1), v71 + 1, 1, v69);
                  long long v65 = v167;
                  uint64_t v67 = v146;
                  uint64_t v66 = a3;
                  uint64_t v69 = v72;
                }
                void v69[2] = v71 + 1;
                v69[v71 + 4] = v65;
              }
              ++v68;
            }
            while (v64 != v68);
            swift_bridgeObjectRelease();
            sub_100035FC8(v203);
          }
          else
          {
            uint64_t v69 = _swiftEmptyArrayStorage;
          }
          swift_bridgeObjectRelease();
          if (v69[2] != 1)
          {
            swift_bridgeObjectRelease();
            sub_100035FC8(v203);
            sub_10000CD54();
            swift_allocError();
            *(unsigned char *)uint64_t v112 = 34;
            *(void *)(v112 + 8) = 0;
            *(void *)(v112 + 16) = 0xE000000000000000;
            *(void *)(v112 + 24) = 0x5F3A5F2874696E69;
            *(void *)(v112 + 32) = 0xEA0000000000293ALL;
            *(void *)(v112 + 40) = 0xD000000000000018;
            *(void *)(v112 + 48) = 0x80000001000E3F60;
            *(void *)(v112 + 56) = 101;
            swift_willThrow();
            goto LABEL_5;
          }
          uint64_t v168 = v69[4];
          swift_bridgeObjectRelease();
          uint64_t v75 = v168;
        }
        else
        {
          long long v73 = v25;
          swift_bridgeObjectRelease();
          unint64_t v74 = v73[2];
          if (v74 >= 0xFF) {
            goto LABEL_159;
          }
          LOWORD(v75) = 2824;
          BYTE2(v75) = *(unsigned char *)(v146 + 2);
          BYTE3(v75) = v74 + 1;
          HIDWORD(v75) = 1;
        }
        long long v196 = v203[4];
        long long v197 = v203[5];
        long long v198 = v203[6];
        long long v192 = v203[0];
        long long v193 = v203[1];
        long long v76 = _swiftEmptyArrayStorage;
        long long v194 = v203[2];
        long long v195 = v203[3];
        *(void *)&long long v199 = v204;
        *((void *)&v199 + 1) = v173;
        *(void *)((char *)&v201 + 1) = v75;
        uint64_t v191 = _swiftEmptyArrayStorage;
        uint64_t v190 = &_swiftEmptySetSingleton;
        uint64_t v233 = *((void *)&v203[0] + 1);
        uint64_t v169 = *(void *)(*((void *)&v203[0] + 1) + 16);
        if (v169)
        {
          uint64_t v162 = *((void *)&v203[0] + 1);
          uint64_t v164 = *((void *)&v203[0] + 1) + 32;
          sub_100035ECC(v203);
          uint64_t v77 = v162;
          swift_bridgeObjectRetain();
          sub_100053BD8((uint64_t)&v233);
          unint64_t v78 = 0;
          while (v78 < *(void *)(v77 + 16))
          {
            sub_10001A9B8(v164 + 40 * v78, (uint64_t)&v187);
            sub_10000AC7C(&qword_100128948);
            if (swift_dynamicCast())
            {
              long long v226 = v177;
              long long v227 = v178;
              long long v228 = v179;
              long long v229 = v180;
              long long v224 = v175;
              long long v225 = v176;
              uint64_t v143 = *((void *)&v175 + 1);
              uint64_t v145 = v175;
              char v142 = v176;
              uint64_t v141 = *((void *)&v176 + 1);
              int v79 = BYTE2(v177);
              int v80 = (unsigned __int16)v177;
              uint64_t v160 = *((void *)&v177 + 1);
              char v158 = v178;
              uint64_t v155 = v179;
              uint64_t v157 = *((void *)&v178 + 1);
              uint64_t v153 = *((void *)&v179 + 1);
              char v151 = v180;
              char v149 = BYTE1(v180);
              uint64_t v147 = *((void *)&v180 + 1);
              *((void *)&v176 + 1) = &type metadata for OutputTerminal;
              *(void *)&long long v177 = sub_10006D5A0();
              uint64_t v81 = (_OWORD *)swift_allocObject();
              *(void *)&long long v175 = v81;
              long long v82 = v227;
              v81[3] = v226;
              v81[4] = v82;
              long long v83 = v229;
              v81[5] = v228;
              v81[6] = v83;
              long long v84 = v225;
              v81[1] = v224;
              v81[2] = v84;
              sub_100053FF8((uint64_t)&v224);
              long long v85 = sub_10004F250((uint64_t)&v175, (uint64_t)v76, (uint64_t)&v224);
              sub_10001ABC4((uint64_t)&v175);
              if (v85[2])
              {
                sub_10006D634((uint64_t)&v224);
                if (!v85[2]) {
                  goto LABEL_148;
                }
              }
              else
              {
                sub_10005B1DC(&v175, 93);
                sub_10005415C((uint64_t)&v226 + 8, (uint64_t)v230, &qword_100128070);
                sub_10005415C((uint64_t)v230, (uint64_t)&v231, &qword_100128070);
                if (v232 == 1)
                {
                  sub_10006D634((uint64_t)&v224);
                  sub_10002E81C(0xD000000000000020, 0x80000001000E3FD0, 0x5F3A5F2874696E69, (void *)0xEA0000000000293ALL, 0xD000000000000018, 0x80000001000E3F60, 146);
                  if (!v85[2]) {
                    goto LABEL_148;
                  }
                }
                else
                {
                  long long v86 = v76;
                  int v139 = v80 | (v79 << 16);
                  uint64_t v87 = v231;
                  swift_bridgeObjectRetain();
                  uint64_t v88 = v164;
                  uint64_t v89 = v169;
                  while (1)
                  {
                    sub_10001A9B8(v88, (uint64_t)&v187);
                    uint64_t v90 = v188;
                    uint64_t v91 = v189;
                    sub_10001A974(&v187, v188);
                    if ((*(uint64_t (**)(uint64_t, uint64_t))(v91 + 16))(v90, v91) == v87) {
                      break;
                    }
                    sub_10001ABC4((uint64_t)&v187);
                    v88 += 40;
                    if (!--v89)
                    {
                      *(void *)&long long v177 = 0;
                      long long v175 = 0u;
                      long long v176 = 0u;
                      goto LABEL_128;
                    }
                  }
                  sub_10000CF6C(&v187, (uint64_t)&v175);
LABEL_128:
                  sub_10004EC5C((uint64_t)&v233);
                  long long v76 = v86;
                  uint64_t v77 = v162;
                  if (*((void *)&v176 + 1))
                  {
                    sub_10006D634((uint64_t)&v224);
                    sub_10001A918((uint64_t)&v175, &qword_100128940);
                    sub_10002E81C(0xD00000000000004ALL, 0x80000001000E40B0, 0x5F3A5F2874696E69, (void *)0xEA0000000000293ALL, 0xD000000000000018, 0x80000001000E3F60, 145);
                    if (!v85[2]) {
                      goto LABEL_148;
                    }
                  }
                  else
                  {
                    sub_10001A918((uint64_t)&v175, &qword_100128940);
                    *(void *)&long long v175 = 0;
                    *((void *)&v175 + 1) = 0xE000000000000000;
                    _StringGuts.grow(_:)(101);
                    v92._countAndFlagsBits = 0xD000000000000033;
                    v92._object = (void *)0x80000001000E4000;
                    String.append(_:)(v92);
                    uint64_t v93 = *((void *)&v227 + 1);
                    *(void *)&long long v187 = *((void *)&v227 + 1);
                    v94._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v94);
                    swift_bridgeObjectRelease();
                    v95._countAndFlagsBits = 0xD000000000000030;
                    v95._object = (void *)0x80000001000E4040;
                    String.append(_:)(v95);
                    sub_10002E81C(v175, *((uint64_t *)&v175 + 1), 0x5F3A5F2874696E69, (void *)0xEA0000000000293ALL, 0xD000000000000018, 0x80000001000E3F60, 133);
                    swift_bridgeObjectRelease();
                    sub_100051B64((void)v224 != 257, v209);
                    sub_10005415C((uint64_t)v209, (uint64_t)v210, &qword_1001290F8);
                    if (v218)
                    {
                      uint64_t v133 = v210[1];
                      uint64_t v134 = v210[0];
                      char v132 = v211;
                      __int16 v138 = v213;
                      uint64_t v96 = v215;
                      uint64_t v130 = v216;
                      uint64_t v131 = v212;
                      char v128 = v214;
                      __int16 v129 = v217;
                      long long v137 = v219;
                      uint64_t v135 = v221;
                      uint64_t v136 = v220;
                      *(void *)&long long v175 = 0;
                      *((void *)&v175 + 1) = 0xE000000000000000;
                      uint64_t v127 = v218;
                      _StringGuts.grow(_:)(25);
                      swift_bridgeObjectRelease();
                      strcpy((char *)&v175, "Connecting OT ");
                      HIBYTE(v175) = -18;
                      *(void *)&long long v187 = v93;
                      v97._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                      String.append(_:)(v97);
                      swift_bridgeObjectRelease();
                      v98._countAndFlagsBits = 0x205449206F7420;
                      v98._object = (void *)0xE700000000000000;
                      String.append(_:)(v98);
                      *(void *)&long long v187 = v96;
                      v99._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                      String.append(_:)(v99);
                      swift_bridgeObjectRelease();
                      sub_10002E81C(v175, *((uint64_t *)&v175 + 1), 0x5F3A5F2874696E69, (void *)0xEA0000000000293ALL, 0xD000000000000018, 0x80000001000E3F60, 140);
                      swift_bridgeObjectRelease();
                      *(void *)&long long v175 = v145;
                      *((void *)&v175 + 1) = v143;
                      LOBYTE(v176) = v142;
                      *((void *)&v176 + 1) = v141;
                      BYTE2(v177) = BYTE2(v139);
                      LOWORD(v177) = v139;
                      *((void *)&v177 + 1) = v160;
                      LOBYTE(v178) = v158;
                      *((void *)&v178 + 1) = v157;
                      *(void *)&long long v179 = v155;
                      *((void *)&v179 + 1) = v153;
                      LOBYTE(v180) = v151;
                      BYTE1(v180) = v149;
                      *((void *)&v180 + 1) = v147;
                      *(void *)&long long v181 = v134;
                      *((void *)&v181 + 1) = v133;
                      LOBYTE(v182) = v132;
                      *((void *)&v182 + 1) = v131;
                      BYTE2(v183) = v128;
                      LOWORD(v183) = v138;
                      *((void *)&v183 + 1) = v96;
                      *(void *)&long long v184 = v130;
                      WORD4(v184) = v129;
                      *(void *)uint64_t v185 = v127;
                      *(_OWORD *)&v185[8] = v137;
                      *(void *)&v185[24] = v136;
                      *(void *)&long long v186 = v135;
                      *((void *)&v186 + 1) = v76;
                      sub_10006D6DC(v209, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10006D66C);
                      sub_1000542E0((uint64_t)&v175);
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                        long long v85 = sub_100059474(0, v85[2] + 1, 1, v85);
                      }
                      unint64_t v101 = v85[2];
                      unint64_t v100 = v85[3];
                      if (v101 >= v100 >> 1) {
                        long long v85 = sub_100059474((void *)(v100 > 1), v101 + 1, 1, v85);
                      }
                      v85[2] = v101 + 1;
                      long long v102 = &v85[26 * v101];
                      v102[2] = v175;
                      long long v103 = v176;
                      long long v104 = v177;
                      long long v105 = v179;
                      v102[5] = v178;
                      v102[6] = v105;
                      v102[3] = v103;
                      v102[4] = v104;
                      long long v106 = v180;
                      long long v107 = v181;
                      long long v108 = v183;
                      v102[9] = v182;
                      v102[10] = v108;
                      v102[7] = v106;
                      v102[8] = v107;
                      long long v109 = v184;
                      long long v110 = *(_OWORD *)v185;
                      long long v111 = v186;
                      v102[13] = *(_OWORD *)&v185[16];
                      v102[14] = v111;
                      v102[11] = v109;
                      v102[12] = v110;
                      sub_100054368((uint64_t)&v175);
                      sub_10006D6DC(v209, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10006D738);
                    }
                    else
                    {
                      sub_10006D634((uint64_t)&v224);
                      sub_10002E81C(0xD00000000000002ELL, 0x80000001000E4080, 0x5F3A5F2874696E69, (void *)0xEA0000000000293ALL, 0xD000000000000018, 0x80000001000E3F60, 144);
                    }
                    uint64_t v77 = v162;
                    if (!v85[2])
                    {
LABEL_148:
                      sub_100035FC8(v203);
                      swift_bridgeObjectRelease();
                      sub_10004EC5C((uint64_t)&v233);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_10000CD54();
                      swift_allocError();
                      *(unsigned char *)uint64_t v117 = 93;
                      *(void *)(v117 + 8) = 0;
                      *(void *)(v117 + 16) = 0xE000000000000000;
                      *(void *)(v117 + 24) = 0x5F3A5F2874696E69;
                      *(void *)(v117 + 32) = 0xEA0000000000293ALL;
                      *(void *)(v117 + 40) = 0xD000000000000018;
                      *(void *)(v117 + 48) = 0x80000001000E3F60;
                      *(void *)(v117 + 56) = 153;
                      swift_willThrow();
                      swift_bridgeObjectRelease();
                      uint64_t v174 = *((void *)&v194 + 1);
                      uint64_t v118 = *((void *)&v195 + 1);
                      long long v119 = v196;
                      long long v120 = v197;
                      uint64_t v165 = v198;
                      uint64_t v170 = v195;
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_10001D1B8(v174, v170, v118, v119, *((uint64_t *)&v119 + 1), v120, *((uint64_t *)&v120 + 1), v165);
                      goto LABEL_5;
                    }
                  }
                }
              }
              sub_1000A1E78((uint64_t)v85);
            }
            if (++v78 == v169)
            {
              sub_10004EC5C((uint64_t)&v233);
              sub_100035FC8(v203);
              uint64_t v113 = v191;
              uint64_t v114 = v190;
              goto LABEL_143;
            }
          }
          goto LABEL_154;
        }
        swift_bridgeObjectRetain();
        uint64_t v113 = _swiftEmptyArrayStorage;
        uint64_t v114 = &_swiftEmptySetSingleton;
LABEL_143:
        uint64_t v202 = v113;
        if (v114[2])
        {
          if ((void)v194)
          {
            swift_bridgeObjectRetain();
            uint64_t v115 = swift_bridgeObjectRetain();
            uint64_t v116 = sub_10005AD1C(v115);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            sub_1000A2124((uint64_t)v116);
            goto LABEL_147;
          }
          int v121 = sub_10005AD1C((uint64_t)v114);
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          *(void *)&long long v194 = v121;
        }
        else
        {
          swift_bridgeObjectRelease();
LABEL_147:
          uint64_t result = swift_bridgeObjectRelease();
        }
        long long v122 = v201;
        *(_OWORD *)(v140 + 128) = v200;
        *(_OWORD *)(v140 + 144) = v122;
        *(void *)(v140 + 160) = v202;
        long long v123 = v197;
        *(_OWORD *)(v140 + 64) = v196;
        *(_OWORD *)(v140 + 80) = v123;
        long long v124 = v199;
        *(_OWORD *)(v140 + 96) = v198;
        *(_OWORD *)(v140 + 112) = v124;
        long long v125 = v193;
        *(_OWORD *)uint64_t v140 = v192;
        *(_OWORD *)(v140 + 16) = v125;
        long long v126 = v195;
        *(_OWORD *)(v140 + 32) = v194;
        *(_OWORD *)(v140 + 48) = v126;
        return result;
      }
    }
    v33 += 80;
    BOOL v30 = __OFADD__(v38++, 1);
  }
  while (!v30);
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t destroy for Function(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 96) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Function(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 1)
  {
    long long v7 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v7;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    long long v8 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v8;
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
    uint64_t v9 = *(void *)(a2 + 104);
    uint64_t v10 = *(void *)(a2 + 112);
    *(void *)(a1 + 96) = v6;
    *(void *)(a1 + 104) = v9;
    *(void *)(a1 + 112) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v11 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v11;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 145) = *(void *)(a2 + 145);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Function(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 40);
  uint64_t v5 = (_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96) == 1)
  {
    if (v6 == 1)
    {
      *uint64_t v4 = *v5;
      long long v7 = *(_OWORD *)(a2 + 56);
      long long v8 = *(_OWORD *)(a2 + 72);
      long long v9 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v9;
      *(_OWORD *)(a1 + 56) = v7;
      *(_OWORD *)(a1 + 72) = v8;
    }
    else
    {
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v6 == 1)
  {
    sub_10005248C(a1 + 40);
    *uint64_t v4 = *v5;
    long long v10 = *(_OWORD *)(a2 + 104);
    long long v12 = *(_OWORD *)(a2 + 56);
    long long v11 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v10;
    *(_OWORD *)(a1 + 56) = v12;
    *(_OWORD *)(a1 + 72) = v11;
  }
  else
  {
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
  *(unsigned char *)(a1 + 146) = *(unsigned char *)(a2 + 146);
  *(unsigned char *)(a1 + 147) = *(unsigned char *)(a2 + 147);
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a2 + 148);
  *(unsigned char *)(a1 + 149) = *(unsigned char *)(a2 + 149);
  *(unsigned char *)(a1 + 150) = *(unsigned char *)(a2 + 150);
  *(unsigned char *)(a1 + 151) = *(unsigned char *)(a2 + 151);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for Function(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for Function(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 96) != 1)
  {
    uint64_t v4 = *(void *)(a2 + 96);
    if (v4 != 1)
    {
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
      *(void *)(a1 + 96) = v4;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_10005248C(a1 + 40);
  }
  long long v5 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v6;
LABEL_6:
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Function(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 168)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Function(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 168) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 168) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Function()
{
  return &type metadata for Function;
}

uint64_t destroy for FunctionDataPath(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void *)(a1 + 176);
  if (v2 >> 60 != 15) {
    sub_100038688(*(void *)(a1 + 168), v2);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FunctionDataPath(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  uint64_t v5 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v5;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  long long v6 = (uint64_t *)(a2 + 168);
  unint64_t v7 = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 168) = *(_OWORD *)v6;
  }
  else
  {
    uint64_t v8 = *v6;
    sub_100054104(*v6, v7);
    *(void *)(a1 + 168) = v8;
    *(void *)(a1 + 176) = v7;
  }
  uint64_t v9 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v9;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FunctionDataPath(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  __int16 v4 = *(_WORD *)(a2 + 32);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(_WORD *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  __int16 v7 = *(_WORD *)(a2 + 128);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(_WORD *)(a1 + 128) = v7;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  uint64_t v8 = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  *(void *)(a1 + 144) = v8;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = (uint64_t *)(a2 + 168);
  unint64_t v10 = *(void *)(a2 + 176);
  if (*(void *)(a1 + 176) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v12 = *v9;
      sub_100054104(*v9, *(void *)(a2 + 176));
      uint64_t v13 = *(void *)(a1 + 168);
      unint64_t v14 = *(void *)(a1 + 176);
      *(void *)(a1 + 168) = v12;
      *(void *)(a1 + 176) = v10;
      sub_100038688(v13, v14);
      goto LABEL_8;
    }
    sub_10006CC54(a1 + 168);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 168) = *(_OWORD *)v9;
    goto LABEL_8;
  }
  uint64_t v11 = *v9;
  sub_100054104(*v9, *(void *)(a2 + 176));
  *(void *)(a1 + 168) = v11;
  *(void *)(a1 + 176) = v10;
LABEL_8:
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10006CC54(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for FunctionDataPath(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for FunctionDataPath(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  uint64_t v5 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v5;
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRelease();
  long long v6 = (void *)(a2 + 168);
  unint64_t v7 = *(void *)(a1 + 176);
  if (v7 >> 60 != 15)
  {
    unint64_t v8 = *(void *)(a2 + 176);
    if (v8 >> 60 != 15)
    {
      uint64_t v9 = *(void *)(a1 + 168);
      *(void *)(a1 + 168) = *v6;
      *(void *)(a1 + 176) = v8;
      sub_100038688(v9, v7);
      goto LABEL_6;
    }
    sub_10006CC54(a1 + 168);
  }
  *(_OWORD *)(a1 + 168) = *(_OWORD *)v6;
LABEL_6:
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FunctionDataPath(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 208)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 160);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FunctionDataPath(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 208) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 160) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 208) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FunctionDataPath()
{
  return &type metadata for FunctionDataPath;
}

uint64_t sub_10006CF0C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_10006CF24(void *a1)
{
  uint64_t v2 = a1[7];
  uint64_t v9 = a1[6];
  uint64_t v10 = a1[5];
  uint64_t v3 = a1[8];
  uint64_t v4 = a1[9];
  uint64_t v5 = a1[10];
  uint64_t v6 = a1[11];
  uint64_t v8 = a1[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100035F78(v10, v9, v2, v3, v4, v5, v6, v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10006D004(uint64_t a1, uint64_t a2)
{
  int64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    sub_10007C86C(0, v3, 0);
    for (uint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v7 = *(i - 1);
      uint64_t v8 = *i;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_10006A97C(v7, v8, a2, (uint64_t)v21);
      if (v2) {
        break;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v10 = _swiftEmptyArrayStorage[2];
      unint64_t v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1) {
        sub_10007C86C(v9 > 1, v10 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v10 + 1;
      uint64_t v11 = &_swiftEmptyArrayStorage[21 * v10];
      long long v12 = v21[0];
      long long v13 = v21[2];
      *((_OWORD *)v11 + 3) = v21[1];
      *((_OWORD *)v11 + 4) = v13;
      *((_OWORD *)v11 + 2) = v12;
      long long v14 = v21[3];
      long long v15 = v21[4];
      long long v16 = v21[6];
      *((_OWORD *)v11 + 7) = v21[5];
      *((_OWORD *)v11 + 8) = v16;
      *((_OWORD *)v11 + 5) = v14;
      *((_OWORD *)v11 + 6) = v15;
      long long v17 = v21[7];
      long long v18 = v21[8];
      long long v19 = v21[9];
      v11[24] = v22;
      *((_OWORD *)v11 + 10) = v18;
      *((_OWORD *)v11 + 11) = v19;
      *((_OWORD *)v11 + 9) = v17;
      if (!--v3) {
        return _swiftEmptyArrayStorage;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return _swiftEmptyArrayStorage;
}

void *sub_10006D184(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7 = *(void *)(a1 + 16);
  __n128 result = _swiftEmptyArrayStorage;
  if (v7)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    unsigned __int8 v13 = *(unsigned char *)(a4 + 144);
    uint64_t v11 = a1 + 64;
    char v12 = a5 & 1;
    while (1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10005F2FC(a2, a3, v13, v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v5) {
        break;
      }
      v11 += 40;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (!--v7) {
        return _swiftEmptyArrayStorage;
      }
    }
    return (void *)swift_release();
  }
  return result;
}

void *sub_10006D2CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = _swiftEmptyArrayStorage;
  if (v4)
  {
    long long v14 = _swiftEmptyArrayStorage;
    sub_10007C8AC(0, v4, 0);
    uint64_t v5 = _swiftEmptyArrayStorage;
    for (uint64_t i = (void *)(a1 + 32); ; i += 5)
    {
      sub_10006A708(i, a2, &v12, (uint64_t)v13);
      if (v3) {
        break;
      }
      uint64_t v3 = 0;
      long long v14 = v5;
      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1)
      {
        sub_10007C8AC(v9 > 1, v10 + 1, 1);
        uint64_t v5 = v14;
      }
      _OWORD v5[2] = v10 + 1;
      sub_10000CF6C(v13, (uint64_t)&v5[5 * v10 + 4]);
      if (!--v4) {
        return v5;
      }
    }
    swift_release();
  }
  return v5;
}

void *sub_10006D3D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = _swiftEmptyArrayStorage;
  if (v4)
  {
    unint64_t v45 = _swiftEmptyArrayStorage;
    sub_10007C88C(0, v4, 0);
    uint64_t v5 = _swiftEmptyArrayStorage;
    uint64_t v8 = (_OWORD *)(a1 + 32);
    for (int64_t i = v4 - 1; ; --i)
    {
      long long v10 = v8[9];
      long long v11 = v8[11];
      long long v42 = v8[10];
      long long v43 = v11;
      long long v12 = v8[11];
      long long v44 = v8[12];
      long long v13 = v8[5];
      long long v14 = v8[7];
      long long v38 = v8[6];
      long long v39 = v14;
      long long v15 = v8[7];
      long long v16 = v8[9];
      long long v40 = v8[8];
      long long v41 = v16;
      long long v17 = v8[1];
      long long v18 = v8[3];
      long long v34 = v8[2];
      long long v35 = v18;
      long long v19 = v8[3];
      long long v20 = v8[5];
      long long v36 = v8[4];
      long long v37 = v20;
      long long v21 = v8[1];
      v33[0] = *v8;
      v33[1] = v21;
      unsigned char v30[10] = v42;
      v30[11] = v12;
      v30[12] = v8[12];
      void v30[6] = v38;
      v30[7] = v15;
      v30[8] = v40;
      v30[9] = v10;
      v30[2] = v34;
      long long v30[3] = v19;
      v30[4] = v36;
      v30[5] = v13;
      v30[0] = v33[0];
      v30[1] = v17;
      sub_1000542E0((uint64_t)v33);
      sub_10006A2F8((uint64_t)v30, a2, &v29, &v31);
      if (v3) {
        break;
      }
      uint64_t v3 = 0;
      sub_100054368((uint64_t)v33);
      long long v22 = v31;
      uint64_t v23 = v32;
      unint64_t v45 = v5;
      unint64_t v25 = v5[2];
      unint64_t v24 = v5[3];
      if (v25 >= v24 >> 1)
      {
        long long v28 = v31;
        sub_10007C88C(v24 > 1, v25 + 1, 1);
        long long v22 = v28;
        uint64_t v5 = v45;
      }
      _OWORD v5[2] = v25 + 1;
      uint64_t v26 = &v5[3 * v25];
      *((_OWORD *)v26 + 2) = v22;
      _WORD v26[6] = v23;
      if (!i) {
        return v5;
      }
      v8 += 13;
    }
    sub_100054368((uint64_t)v33);
    swift_release();
  }
  return v5;
}

double sub_10006D580(uint64_t a1)
{
  *(void *)(a1 + 160) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

unint64_t sub_10006D5A0()
{
  unint64_t result = qword_1001290F0;
  if (!qword_1001290F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1001290F0);
  }
  return result;
}

uint64_t sub_10006D5F4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 112, 7);
}

uint64_t sub_10006D634(uint64_t a1)
{
  return a1;
}

uint64_t sub_10006D66C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t result = a9;
  if (a9)
  {
    swift_bridgeObjectRetain();
    sub_1000540F0(a10, a11);
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void *sub_10006D6DC(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_10006D738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t result = a9;
  if (a9)
  {
    swift_bridgeObjectRelease();
    sub_1000541C0(a10, a11);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_10006D7A8()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  id v1 = [objc_allocWithZone((Class)AUAPluginTrampoline) init];
  void v7[4] = sub_100072A78;
  void v7[5] = v0;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  _OWORD v7[2] = sub_10006DA78;
  v7[3] = &unk_100119B50;
  uint64_t v2 = _Block_copy(v7);
  swift_retain();
  swift_release();
  [v1 setFnHALInitializeWithPluginHost:v2];
  _Block_release(v2);
  id v3 = objc_allocWithZone((Class)type metadata accessor for DriverPlugin());
  id v4 = sub_100071324(v1);

  swift_beginAccess();
  uint64_t v5 = *(void **)(v0 + 16);
  *(void *)(v0 + 16) = v4;
  id v6 = v4;
  swift_release();

  qword_100129100 = (uint64_t)v6;
}

void sub_10006D900()
{
  id v0 = [objc_allocWithZone((Class)AUAPluginTrampoline) init];
  void v4[4] = ClusterChannelInfo.chNum.getter;
  v4[5] = 0;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 1107296256;
  v4[2] = sub_10006DA78;
  v4[3] = &unk_1001198D0;
  id v1 = _Block_copy(v4);
  [v0 setFnHALInitializeWithPluginHost:v1];
  _Block_release(v1);
  id v2 = objc_allocWithZone((Class)type metadata accessor for DriverPlugin());
  id v3 = sub_100071324(v0);

  qword_100129108 = (uint64_t)v3;
}

uint64_t (*variable initialization expression of DriverPlugin.cancel())()
{
  return ClusterChannelInfo.chNum.getter;
}

void sub_10006DA00(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t v7 = *(void **)(a4 + 16);
  if (v7)
  {
    id v8 = v7;
    sub_10006E480(a1, a2);
  }
}

uint64_t sub_10006DA78(uint64_t a1, uint64_t a2, void *aBlock)
{
  id v4 = *(void (**)(uint64_t, uint64_t (*)(), uint64_t))(a1 + 32);
  uint64_t v5 = _Block_copy(aBlock);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  swift_retain();
  v4(a2, sub_100072504, v6);
  swift_release();

  return swift_release();
}

uint64_t sub_10006DB1C(uint64_t a1)
{
  uint64_t v2 = sub_10000AC7C(&qword_1001291F0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  sub_10000AC7C(&qword_1001291F8);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 20) = 0;
  *(unsigned char *)(v5 + 16) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  aBlock[4] = sub_100072980;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000145E0;
  aBlock[3] = &unk_100119B00;
  id v8 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  AudioServerPlugInRegisterRemote();
  _Block_release(v8);
  return swift_release();
}

void sub_10006DCF8(os_unfair_lock_s *a1)
{
  id v1 = a1 + 4;
  uint64_t v2 = a1 + 5;
  os_unfair_lock_lock(a1 + 5);
  sub_1000729E8(v1);
  os_unfair_lock_unlock(v2);
}

uint64_t sub_10006DD50(void *a1)
{
  uint64_t v3 = sub_10000AC7C(&qword_1001291D8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  id v8 = (void *)swift_allocObject();
  v8[2] = 0;
  void v8[3] = 0;
  v8[4] = v1;
  _OWORD v8[5] = a1;
  int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  id v10 = a1;
  if (v9 == 1)
  {
    sub_10001A918((uint64_t)v5, &qword_1001291D8);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
    if (v8[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      if (v13 | v11)
      {
        v15[0] = 0;
        v15[1] = 0;
        _OWORD v15[2] = v11;
        void v15[3] = v13;
      }
    }
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_10006DF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a5;
  return _swift_task_switch(sub_10006DF9C, 0, 0);
}

uint64_t sub_10006DF9C()
{
  id v1 = [*(id *)(v0 + 16) driverRef];
  if (v1)
  {
    id v2 = v1;
    uint64_t v3 = swift_task_alloc();
    *(void *)(v0 + 24) = v3;
    *(void *)(v3 + 16) = v2;
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 32) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10006E0A0;
  }
  else
  {
    __break(1u);
  }
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_10006E0A0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_10006E1B8, 0, 0);
}

uint64_t sub_10006E1B8()
{
  if (machServiceExists("com.apple.audio.driver-registrar"))
  {
    return _swift_task_switch(sub_100072C1C, 0, 0);
  }
  else
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 40) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_10006E298;
    return static Task<>.sleep(nanoseconds:)(100000000);
  }
}

uint64_t sub_10006E298()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_100072BF0, 0, 0);
  }
}

uint64_t static DriverPlugin.registerActiveDriverInLoop()()
{
  if (qword_1001268F8 != -1) {
    swift_once();
  }
  uint64_t v0 = *(void **)(qword_100129100 + OBJC_IVAR___AUAPlugin_plugin);

  return sub_10006DD50(v0);
}

uint64_t sub_10006E480(uint64_t a1, void (*a2)(void))
{
  uint64_t v3 = v2;
  a2();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_10007230C;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = *(void **)&v3[OBJC_IVAR___AUAPlugin_notificationQueue];
  uint64_t v7 = (void *)swift_allocObject();
  _OWORD v7[2] = sub_1000707A4;
  v7[3] = v5;
  void v7[4] = v3;
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  int v9 = (void *)swift_allocObject();
  long long v9[2] = sub_100072410;
  v9[3] = v7;
  void v9[4] = v6;
  _OWORD v9[5] = sub_100072468;
  void v9[6] = v8;
  id v10 = v3;
  swift_retain();
  swift_retain_n();
  swift_retain();
  sub_100071778(v6, (uint64_t)sub_10007102C, (uint64_t)v9);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  swift_release();
  swift_release_n();
  swift_release();
  long long v15 = &v10[OBJC_IVAR___AUAPlugin_cancel];
  *(void *)long long v15 = v12;
  *((void *)v15 + 1) = v14;
  swift_release();

  return swift_release();
}

uint64_t (*static AUAPluginUtils.usbHostInterestHandler(terminationHandler:)(uint64_t a1, uint64_t a2))()
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain();
  return sub_1000707A4;
}

void sub_10006E7C8(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSString v10 = String._bridgeToObjectiveC()();
  unsigned int v11 = [a1 conformsToIOClassName:v10];

  if (!v11)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v20 = 6;
    *(void *)(v20 + 8) = 0;
    *(void *)(v20 + 16) = 0xE000000000000000;
    *(void *)(v20 + 24) = 0xD00000000000001BLL;
    *(void *)(v20 + 32) = 0x80000001000E4400;
    *(void *)(v20 + 40) = 0xD00000000000001CLL;
    *(void *)(v20 + 48) = 0x80000001000E41E0;
    uint64_t v21 = 160;
LABEL_7:
    *(void *)(v20 + 56) = v21;
    swift_willThrow();
    return;
  }
  uint64_t aBlock = 0;
  id v12 = [a1 parentEntryInServicePlaneWithError:&aBlock];
  uint64_t v13 = aBlock;
  if (!v12)
  {
    long long v22 = aBlock;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  uint64_t v14 = v12;
  long long v50 = a2;
  self;
  uint64_t v15 = swift_dynamicCastObjCClass();
  if (!v15)
  {
    uint64_t v23 = v13;

    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v20 = 6;
    *(void *)(v20 + 8) = 0;
    *(void *)(v20 + 16) = 0xE000000000000000;
    *(void *)(v20 + 24) = 0xD00000000000001BLL;
    *(void *)(v20 + 32) = 0x80000001000E4400;
    *(void *)(v20 + 40) = 0xD00000000000001CLL;
    *(void *)(v20 + 48) = 0x80000001000E41E0;
    uint64_t v21 = 164;
    goto LABEL_7;
  }
  long long v16 = (void *)v15;
  uint64_t v49 = a5;
  long long v17 = v13;
  NSString v18 = String._bridgeToObjectiveC()();
  id v19 = [v16 propertyForKey:v18];

  if (v19)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v58, 0, sizeof(v58));
  }
  sub_10001A8B0((uint64_t)v58, (uint64_t)&aBlock);
  if (v55)
  {
    sub_10000CECC(0, (unint64_t *)&qword_100127470);
    if (swift_dynamicCast())
    {
      id v48 = [v51 unsignedIntegerValue];

      int v24 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    sub_10001A918((uint64_t)&aBlock, (uint64_t *)&unk_100129170);
  }
  id v48 = 0;
  int v24 = 1;
LABEL_16:
  if (qword_100126908 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v25 = static AUAPluginUtils.checkedDict;
  if (!*(void *)(static AUAPluginUtils.checkedDict + 16)
    || (!v24 ? (uint64_t v26 = (uint64_t)v48) : (uint64_t v26 = 0), v27 = sub_100019A14(v26), (v28 & 1) == 0))
  {
    swift_endAccess();
LABEL_29:
    if (*(unsigned char *)(v49 + OBJC_IVAR___AUAPlugin_analyticsOnly))
    {
      id v36 = [v16 object];
      id v37 = objc_allocWithZone((Class)IOUSBHostDevice);
      uint64_t aBlock = 0;
      id v32 = v50;
      id v38 = [v37 initWithIOService:v36 options:0 queue:v32 error:&aBlock interestHandler:0];
      long long v39 = aBlock;
      if (v38) {
        goto LABEL_33;
      }
    }
    else
    {
      id v40 = [a1 object];
      id v41 = objc_allocWithZone((Class)IOUSBHostInterface);
      uint64_t v56 = a3;
      uint64_t v57 = a4;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v53 = 1107296256;
      uint64_t v54 = sub_1000C9D5C;
      uint64_t v55 = &unk_100119880;
      long long v42 = _Block_copy(&aBlock);
      swift_retain();
      id v32 = v50;
      swift_release();
      uint64_t aBlock = 0;
      id v43 = [v41 initWithIOService:v40 options:0 queue:v32 error:&aBlock interestHandler:v42];
      _Block_release(v42);
      long long v39 = aBlock;
      if (v43)
      {
LABEL_33:
        long long v44 = v39;

        return;
      }
    }
    unint64_t v45 = v39;
LABEL_35:
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  char v29 = *(unsigned char *)(*(void *)(v25 + 56) + v27);
  swift_endAccess();
  if (v29) {
    goto LABEL_29;
  }
  if (![v16 isServiceAuthorizedForOpenAllowInteraction:1])
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v46 = 2;
    *(void *)(v46 + 8) = 0;
    *(void *)(v46 + 16) = 0xE000000000000000;
    *(void *)(v46 + 24) = 0xD00000000000001BLL;
    *(void *)(v46 + 32) = 0x80000001000E4400;
    *(void *)(v46 + 40) = 0xD00000000000001CLL;
    *(void *)(v46 + 48) = 0x80000001000E41E0;
    *(void *)(v46 + 56) = 180;
    swift_willThrow();

    return;
  }
  unsigned int v47 = [v16 object];
  id v30 = objc_allocWithZone((Class)IOUSBHostDevice);
  uint64_t v56 = a3;
  uint64_t v57 = a4;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v53 = 1107296256;
  uint64_t v54 = sub_1000C9D5C;
  uint64_t v55 = &unk_1001198A8;
  long long v31 = _Block_copy(&aBlock);
  swift_retain();
  id v32 = v50;
  swift_release();
  uint64_t aBlock = 0;
  id v33 = [v30 initWithIOService:v47 options:1 queue:v32 error:&aBlock interestHandler:v31];
  _Block_release(v31);
  if (!v33)
  {
    unint64_t v45 = aBlock;
    goto LABEL_35;
  }
  long long v34 = aBlock;

  if (v24)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v58[0] = static AUAPluginUtils.checkedDict;
    static AUAPluginUtils.checkedDict = 0x8000000000000000;
    sub_100071184(1, (uint64_t)v48, isUniquelyReferenced_nonNull_native);
    static AUAPluginUtils.checkedDict = *(void *)&v58[0];
    swift_bridgeObjectRelease();
    swift_endAccess();
    *(unsigned char *)(v49 + OBJC_IVAR___AUAPlugin_analyticsOnly) = 0;
  }
}

uint64_t *AUAPluginUtils.checkedDict.unsafeMutableAddressor()
{
  if (qword_100126908 != -1) {
    swift_once();
  }
  return &static AUAPluginUtils.checkedDict;
}

void sub_10006EF30(void *a1, void *a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    sub_10006F06C(a1, a2);
  }
}

uint64_t static AUAPluginUtils.discoverAudioControlInterfaces(queue:options:interestHandler:usbObjectFactory:deviceHandler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = (void *)swift_allocObject();
  long long v13[2] = a5;
  void v13[3] = a6;
  v13[4] = a1;
  void v13[5] = a7;
  void v13[6] = a8;
  swift_retain();
  id v14 = a1;
  swift_retain();
  sub_100071778(v14, (uint64_t)sub_10007102C, (uint64_t)v13);
  uint64_t v16 = v15;
  swift_release();
  return v16;
}

void sub_10006F06C(void *a1, void *a2)
{
  uint64_t v3 = v2;
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [a2 propertyForKey:v6];

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v46 = 0u;
    long long v47 = 0u;
  }
  sub_10001A8B0((uint64_t)&v46, (uint64_t)&aBlock);
  if (v43)
  {
    sub_10000CECC(0, (unint64_t *)&qword_100127470);
    if (swift_dynamicCast())
    {
      id v34 = [v39 unsignedIntegerValue];

      int v37 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    sub_10001A918((uint64_t)&aBlock, (uint64_t *)&unk_100129170);
  }
  id v34 = 0;
  int v37 = 1;
LABEL_9:
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [a2 propertyForKey:v8];

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v46 = 0u;
    long long v47 = 0u;
  }
  sub_10001A8B0((uint64_t)&v46, (uint64_t)&aBlock);
  if (v43)
  {
    sub_10000CECC(0, (unint64_t *)&qword_100127470);
    if (swift_dynamicCast())
    {
      id v33 = [v39 unsignedIntegerValue];

      int v36 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    sub_10001A918((uint64_t)&aBlock, (uint64_t *)&unk_100129170);
  }
  id v33 = 0;
  int v36 = 1;
LABEL_17:
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [a2 propertyForKey:v10];

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v46 = 0u;
    long long v47 = 0u;
  }
  sub_10001A8B0((uint64_t)&v46, (uint64_t)&aBlock);
  if (v43)
  {
    sub_10000CECC(0, (unint64_t *)&qword_100127470);
    if (swift_dynamicCast())
    {
      id v32 = [v39 unsignedIntegerValue];

      int v35 = 0;
      goto LABEL_25;
    }
  }
  else
  {
    sub_10001A918((uint64_t)&aBlock, (uint64_t *)&unk_100129170);
  }
  id v32 = 0;
  int v35 = 1;
LABEL_25:
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [a2 propertyForKey:v12];

  if (v13)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v46 = 0u;
    long long v47 = 0u;
  }
  sub_10001A8B0((uint64_t)&v46, (uint64_t)&aBlock);
  if (v43)
  {
    sub_10000CECC(0, (unint64_t *)&unk_100129180);
    int v14 = swift_dynamicCast();
    id v15 = v39;
    if (!v14) {
      id v15 = 0;
    }
    id v38 = v15;
  }
  else
  {
    sub_10001A918((uint64_t)&aBlock, (uint64_t *)&unk_100129170);
    id v38 = 0;
  }
  uint64_t v16 = sub_1000CA048(a2);
  NSString v18 = v17;
  uint64_t aBlock = 0;
  uint64_t v41 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  uint64_t aBlock = (void **)0xD00000000000002CLL;
  uint64_t v41 = 0x80000001000E4240;
  v19._countAndFlagsBits = (uint64_t)v16;
  v19._object = v18;
  String.append(_:)(v19);
  sub_10002E804((uint64_t)aBlock, v41, 0x6369766544646461, (void *)0xEF293A5F3A5F2865, 0xD00000000000001CLL, 0x80000001000E41E0, 226);
  swift_bridgeObjectRelease();
  NSString v20 = String._bridgeToObjectiveC()();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v16;
  *(void *)(v21 + 24) = v18;
  long long v44 = sub_100071EB0;
  unint64_t v45 = (void *)v21;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v41 = 1107296256;
  long long v42 = sub_1000C4FC8;
  id v43 = &unk_1001196F0;
  long long v22 = _Block_copy(&aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v22);

  uint64_t v23 = OBJC_IVAR___AUAPlugin_analyticsOnly;
  int v24 = (void *)sub_1000CB040(a1, *(unsigned char *)(v3 + OBJC_IVAR___AUAPlugin_analyticsOnly) ^ 1u, *(unsigned char *)(v3 + OBJC_IVAR___AUAPlugin_analyticsOnly), a2, *(void **)(v3 + OBJC_IVAR___AUAPlugin_plugin));
  if (((v37 | v36 | v35) & 1) == 0)
  {
    NSString v25 = String._bridgeToObjectiveC()();
    uint64_t v26 = (void *)swift_allocObject();
    v26[2] = v38;
    void v26[3] = v34;
    v26[4] = v33;
    v26[5] = v32;
    long long v44 = sub_100072300;
    unint64_t v45 = v26;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v41 = 1107296256;
    long long v42 = sub_1000C4FC8;
    id v43 = &unk_100119790;
    unint64_t v27 = _Block_copy(&aBlock);
    id v28 = v38;
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v27);
  }
  if (*(unsigned char *)(v3 + v23))
  {

    goto LABEL_43;
  }
  char v29 = (void *)(v3 + OBJC_IVAR___AUAPlugin_usbDeviceList);
  swift_beginAccess();
  if (*v29 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v31) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  if (!*(void *)((*v29 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_39:
    *(void *)(v3 + OBJC_IVAR___AUAPlugin_pressuredExitHold) = os_transaction_create();
    swift_unknownObjectRelease();
  }
LABEL_40:
  swift_beginAccess();
  id v30 = v24;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  [v30 addDevicesToPlugin];

LABEL_43:
}

unint64_t sub_10006FD2C()
{
  sub_10000AC7C((uint64_t *)&unk_100129190);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000E8090;
  strcpy((char *)(inited + 32), "HostController");
  *(unsigned char *)(inited + 47) = -18;
  *(void *)(inited + 48) = String._bridgeToObjectiveC()();
  return sub_100008AF4(inited);
}

unint64_t sub_10006FDC0(void *a1, Swift::Int a2, Swift::Int a3, Swift::Int a4)
{
  if (a1)
  {
    uint64_t v8 = (uint64_t)a1;
  }
  else
  {
    sub_10000CECC(0, (unint64_t *)&unk_100129180);
    uint64_t v8 = NSString.init(stringLiteral:)();
  }
  sub_10000AC7C((uint64_t *)&unk_100129190);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000EA830;
  *(void *)(inited + 32) = 4475222;
  *(void *)(inited + 40) = 0xE300000000000000;
  unint64_t result = sub_10000CECC(0, (unint64_t *)&qword_100127470);
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  id v11 = a1;
  unint64_t result = (unint64_t)NSNumber.init(integerLiteral:)(a2).super.super.isa;
  *(void *)(inited + 48) = result;
  *(void *)(inited + 56) = 4475216;
  *(void *)(inited + 64) = 0xE300000000000000;
  if (a3 < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t result = (unint64_t)NSNumber.init(integerLiteral:)(a3).super.super.isa;
  *(void *)(inited + 72) = result;
  *(void *)(inited + 80) = 0x6E6F6973726556;
  *(void *)(inited + 88) = 0xE700000000000000;
  if ((a4 & 0x8000000000000000) == 0)
  {
    *(NSNumber *)(inited + 96) = NSNumber.init(integerLiteral:)(a4);
    strcpy((char *)(inited + 104), "productString");
    *(_WORD *)(inited + 118) = -4864;
    *(void *)(inited + 120) = v8;
    return sub_100008AF4(inited);
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_10006FF2C(void *a1, Swift::Int a2, Swift::Int a3, Swift::Int a4)
{
  if (a1)
  {
    uint64_t v8 = a1;
  }
  else
  {
    sub_10000CECC(0, (unint64_t *)&unk_100129180);
    uint64_t v8 = NSString.init(stringLiteral:)();
  }
  sub_10000AC7C((uint64_t *)&unk_100129190);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000E9F10;
  *(void *)(inited + 32) = 4475222;
  *(void *)(inited + 40) = 0xE300000000000000;
  uint64_t result = sub_10000CECC(0, (unint64_t *)&qword_100127470);
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  id v11 = a1;
  uint64_t result = (uint64_t)NSNumber.init(integerLiteral:)(a2).super.super.isa;
  *(void *)(inited + 48) = result;
  *(void *)(inited + 56) = 4475216;
  *(void *)(inited + 64) = 0xE300000000000000;
  if (a3 < 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t result = (uint64_t)NSNumber.init(integerLiteral:)(a3).super.super.isa;
  *(void *)(inited + 72) = result;
  *(void *)(inited + 80) = 0x6E6F6973726556;
  *(void *)(inited + 88) = 0xE700000000000000;
  if ((a4 & 0x8000000000000000) == 0)
  {
    *(NSNumber *)(inited + 96) = NSNumber.init(integerLiteral:)(a4);
    strcpy((char *)(inited + 104), "productString");
    *(_WORD *)(inited + 118) = -4864;
    *(void *)(inited + 120) = v8;
    *(void *)(inited + 128) = 0x65446769666E6F63;
    *(void *)(inited + 136) = 0xEA00000000006373;
    id v12 = objc_allocWithZone((Class)NSString);
    id v13 = v8;
    swift_bridgeObjectRetain();
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v15 = [v12 initWithString:v14];

    *(void *)(inited + 144) = v15;
    *(void *)(inited + 152) = 0x6544656369766564;
    *(void *)(inited + 160) = 0xEA00000000006373;
    id v16 = objc_allocWithZone((Class)NSString);
    swift_bridgeObjectRetain();
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v18 = [v16 initWithString:v17];

    *(void *)(inited + 168) = v18;
    *(void *)(inited + 176) = 0x726F727265;
    *(void *)(inited + 184) = 0xE500000000000000;
    swift_errorRetain();
    sub_10000AC7C(&qword_100127400);
    String.init<A>(describing:)();
    id v19 = objc_allocWithZone((Class)NSString);
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v21 = [v19 initWithString:v20];

    *(void *)(inited + 192) = v21;
    unint64_t v22 = sub_100008AF4(inited);

    return v22;
  }
LABEL_10:
  __break(1u);
  return result;
}

void sub_100070208(void *a1)
{
  uint64_t v2 = (uint64_t)_swiftEmptyArrayStorage;
  unint64_t v22 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v3 = (uint64_t *)((char *)v1 + OBJC_IVAR___AUAPlugin_usbDeviceList);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if ((unint64_t)*v3 >> 62)
  {
LABEL_34:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    *uint64_t v3 = v2;
    swift_bridgeObjectRelease();
LABEL_27:
    sub_10002E81C(0xD00000000000001ALL, 0x80000001000E41A0, 0xD000000000000010, (void *)0x80000001000E41C0, 0xD00000000000001CLL, 0x80000001000E41E0, 352);
    goto LABEL_28;
  }
  id v19 = v3;
  NSString v20 = v1;
  uint64_t v2 = 0;
  unint64_t v6 = 0;
LABEL_5:
  unint64_t v7 = v6;
  do
  {
    if ((v4 & 0xC000000000000001) != 0)
    {
      uint64_t v8 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v7 >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_33;
      }
      uint64_t v8 = (char *)*(id *)(v4 + 8 * v7 + 32);
    }
    id v9 = v8;
    unint64_t v6 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    uint64_t v3 = *(uint64_t **)&v8[OBJC_IVAR____TtC9AUASDCore9USBDevice_usbHostObject];
    if (v3)
    {
      sub_10000CECC(0, &qword_100129168);
      id v10 = a1;
      uint64_t v3 = v3;
      char v11 = static NSObject.== infix(_:_:)();

      if (v11)
      {
        sub_10002E804(0xD000000000000012, 0x80000001000E4200, 0xD000000000000010, (void *)0x80000001000E41C0, 0xD00000000000001CLL, 0x80000001000E41E0, 338);
        [v9 removeDevicesFromPlugin];
        uint64_t v1 = (unint64_t *)&v9[OBJC_IVAR____TtC9AUASDCore9USBDevice_activeConfig];
        swift_beginAccess();
        uint64_t v3 = (uint64_t *)*v1;
        if (*v1)
        {
          uint64_t v13 = v3[4];
          uint64_t v14 = *(void *)(v13 + 16);
          if (v14)
          {
            swift_bridgeObjectRetain();
            swift_retain();
            id v15 = (uint64_t *)(v13 + 40);
            do
            {
              uint64_t v16 = *v15;
              uint64_t ObjectType = swift_getObjectType();
              swift_unknownObjectRetain();
              sub_100031518(ObjectType, v16);
              swift_unknownObjectRelease();
              v15 += 2;
              --v14;
            }
            while (v14);
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v3 = (uint64_t *)*v1;
          }
        }
        *uint64_t v1 = 0;

        swift_release();
        uint64_t v2 = 1;
        if (v6 == v5)
        {
          swift_bridgeObjectRelease();
          uint64_t v3 = v19;
          *id v19 = v22;
          swift_bridgeObjectRelease();
          uint64_t v1 = v20;
          goto LABEL_28;
        }
        goto LABEL_5;
      }
    }
    id v12 = v9;
    uint64_t v1 = &v22;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    ++v7;
  }
  while (v6 != v5);
  swift_bridgeObjectRelease();
  uint64_t v3 = v19;
  *id v19 = v22;
  swift_bridgeObjectRelease();
  uint64_t v1 = v20;
  if ((v2 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_28:
  if (!((unint64_t)*v3 >> 62))
  {
    if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      return;
    }
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v18)
  {
LABEL_30:
    *(unint64_t *)((char *)v1 + OBJC_IVAR___AUAPlugin_pressuredExitHold) = 0;
    swift_unknownObjectRelease();
  }
}

id DriverPlugin.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

void DriverPlugin.init()()
{
}

id DriverPlugin.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DriverPlugin();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10007076C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000707A8(void *a1, uint64_t a2, void (*a3)(uint64_t))
{
  self;
  uint64_t v7 = swift_dynamicCastObjCClass();
  if (v7)
  {
    uint64_t v8 = v7;
    swift_beginAccess();
    if ((*(unsigned char *)(a2 + 16) & 1) == 0)
    {
      id v9 = a1;
      a3(v8);
    }
  }
}

void sub_100070850(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_1000708B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v18[0] = a1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = (void *)swift_allocObject();
  _OWORD v15[2] = a2;
  void v15[3] = a3;
  void v15[4] = a4;
  aBlock[4] = sub_1000726C0;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000145E0;
  aBlock[3] = &unk_100119A88;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v18[1] = _swiftEmptyArrayStorage;
  sub_100072584(&qword_1001291C0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000AC7C(&qword_1001291C8);
  sub_1000725CC(&qword_1001291D0, &qword_1001291C8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

void sub_100070B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  *(unsigned char *)(a1 + 16) = 1;
  swift_beginAccess();
  unint64_t v6 = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = 0;

  swift_beginAccess();
  uint64_t v7 = *(void **)(a3 + 16);
  *(void *)(a3 + 16) = 0;
}

char *AUAPluginUtils.checked.unsafeMutableAddressor()
{
  return &static AUAPluginUtils.checked;
}

uint64_t static AUAPluginUtils.checked.getter()
{
  return static AUAPluginUtils.checked;
}

uint64_t static AUAPluginUtils.checked.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static AUAPluginUtils.checked = a1;
  return result;
}

uint64_t (*static AUAPluginUtils.checked.modify())()
{
  return j_j__swift_endAccess;
}

unint64_t sub_100070D10()
{
  unint64_t result = sub_10000CF84((uint64_t)_swiftEmptyArrayStorage);
  static AUAPluginUtils.checkedDict = result;
  return result;
}

uint64_t static AUAPluginUtils.checkedDict.getter()
{
  if (qword_100126908 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static AUAPluginUtils.checkedDict.setter(uint64_t a1)
{
  if (qword_100126908 != -1) {
    swift_once();
  }
  swift_beginAccess();
  static AUAPluginUtils.checkedDict = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static AUAPluginUtils.checkedDict.modify())()
{
  if (qword_100126908 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

void sub_100070EB8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, void (*a5)(void))
{
  unint64_t v6 = (void *)a2(a1, a4);
  id v8 = v7;
  a5();
}

_OWORD *sub_100071030(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  id v10 = (void *)*v4;
  unint64_t v12 = sub_100019914(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1000A618C();
      goto LABEL_7;
    }
    sub_1000A58AC(v15, a4 & 1);
    unint64_t v21 = sub_100019914(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    id v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_10001ABC4((uint64_t)v19);
    return sub_10000CDA8(a1, v19);
  }
LABEL_13:
  sub_1000712B8(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t sub_100071184(char a1, uint64_t a2, char a3)
{
  id v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100019A14(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000A6374();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      *(unsigned char *)(v16[7] + v10) = a1 & 1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(void *)(v16[6] + 8 * v10) = a2;
    *(unsigned char *)(v16[7] + v10) = a1 & 1;
    uint64_t v18 = v16[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (!v19)
    {
      v16[2] = v20;
      return result;
    }
    goto LABEL_14;
  }
  sub_1000A5BAC(result, a3 & 1);
  uint64_t result = sub_100019A14(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    unint64_t v10 = result;
    char v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_OWORD *sub_1000712B8(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_10000CDA8(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

id sub_100071324(void *a1)
{
  objc_super v2 = v1;
  uint64_t v23 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  unint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  *(void *)&v1[OBJC_IVAR___AUAPlugin_usbDeviceList] = _swiftEmptyArrayStorage;
  *(void *)&v1[OBJC_IVAR___AUAPlugin_pressuredExitHold] = 0;
  BOOL v9 = &v1[OBJC_IVAR___AUAPlugin_cancel];
  void *v9 = ClusterChannelInfo.chNum.getter;
  v9[1] = 0;
  v22[0] = OBJC_IVAR___AUAPlugin_analyticsOnly;
  v1[OBJC_IVAR___AUAPlugin_analyticsOnly] = 0;
  uint64_t v28 = 0;
  *(void *)&v1[OBJC_IVAR___AUAPlugin_plugin] = a1;
  v22[1] = sub_10000CECC(0, (unint64_t *)&qword_1001291A0);
  uint64_t v10 = v1;
  id v11 = a1;
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = _swiftEmptyArrayStorage;
  sub_100072584(&qword_1001291A8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000AC7C(&qword_1001291B0);
  sub_1000725CC((unint64_t *)&qword_1001291B8, &qword_1001291B0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v23);
  *(void *)&v10[OBJC_IVAR___AUAPlugin_notificationQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  NSString v12 = String._bridgeToObjectiveC()();
  int v13 = AUAGetBootArg(v12, (uint64_t)&v28);

  uint64_t v26 = 0;
  uint64_t v27 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  uint64_t v26 = (void *)0xD000000000000022;
  uint64_t v27 = 0x80000001000E4560;
  if (v13) {
    uint64_t v14 = 1702195828;
  }
  else {
    uint64_t v14 = 0x65736C6166;
  }
  if (v13) {
    unint64_t v15 = 0xE400000000000000;
  }
  else {
    unint64_t v15 = 0xE500000000000000;
  }
  unint64_t v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0x203A65756C617620;
  v17._object = (void *)0xE800000000000000;
  String.append(_:)(v17);
  uint64_t v18 = v28;
  uint64_t v25 = v28;
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  sub_10002E804((uint64_t)v26, v27, 0x756C702874696E69, (void *)0xED0000293A6E6967, 0xD00000000000001CLL, 0x80000001000E41E0, 129);
  swift_bridgeObjectRelease();
  if (!v13 || !v18) {
    v2[v22[0]] = 1;
  }

  uint64_t v20 = (objc_class *)type metadata accessor for DriverPlugin();
  v24.receiver = v10;
  v24.super_class = v20;
  return objc_msgSendSuper2(&v24, "init");
}

void sub_100071778(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v51 = a2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  BOOL v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v50 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  NSString v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = [objc_allocWithZone((Class)IOKNotificationPort) initOnDispatchQueue:a1];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v45 = v10;
    uint64_t v46 = v7;
    uint64_t v47 = v6;
    id v48 = a1;
    uint64_t v49 = v3;
    unint64_t v15 = self;
    Class isa = UInt8._bridgeToObjectiveC()().super.super.isa;
    Class v17 = UInt8._bridgeToObjectiveC()().super.super.isa;
    id v18 = [v15 createMatchingDictionaryWithVendorID:0 productID:0 bcdDevice:0 interfaceNumber:0 configurationValue:0 interfaceClass:isa interfaceSubclass:v17 interfaceProtocol:0 speed:0 productIDArray:0];

    id v19 = v15;
    uint64_t aBlock = 0;
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

    if (aBlock)
    {
      id v43 = v9;
      uint64_t v20 = swift_allocObject();
      *(unsigned char *)(v20 + 16) = 0;
      id v44 = self;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      Class v22 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v23 = (void *)swift_allocObject();
      uint64_t v24 = v51;
      v23[2] = v20;
      v23[3] = v24;
      unsigned char v23[4] = a3;
      uint64_t v57 = sub_100072568;
      int v58 = v23;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v54 = 1107296256;
      uint64_t v55 = sub_100070850;
      uint64_t v56 = &unk_100119970;
      uint64_t v25 = _Block_copy(&aBlock);
      uint64_t v51 = v20;
      swift_retain();
      swift_retain();
      swift_release();
      uint64_t aBlock = 0;
      id v26 = [v44 addNotificationOfType:v21 forMatching:v22 usingNotificationPort:v14 error:&aBlock withEnumerationBlock:v25];
      _Block_release(v25);

      uint64_t v27 = aBlock;
      if (v26)
      {
        uint64_t v28 = swift_allocObject();
        *(void *)(v28 + 16) = v26;
        uint64_t v57 = sub_100072574;
        int v58 = (void *)v28;
        uint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v54 = 1107296256;
        uint64_t v55 = sub_1000145E0;
        uint64_t v56 = &unk_1001199C0;
        char v29 = _Block_copy(&aBlock);
        id v30 = v26;
        static DispatchQoS.unspecified.getter();
        int v52 = _swiftEmptyArrayStorage;
        sub_100072584(&qword_1001291C0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000AC7C(&qword_1001291C8);
        sub_1000725CC(&qword_1001291D0, &qword_1001291C8);
        uint64_t v31 = v43;
        uint64_t v32 = v47;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        id v33 = v48;
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v29);
        (*(void (**)(char *, uint64_t))(v46 + 8))(v31, v32);
        (*(void (**)(char *, uint64_t))(v50 + 8))(v12, v45);
        swift_release();
        uint64_t v34 = swift_allocObject();
        *(void *)(v34 + 16) = v14;
        uint64_t v35 = swift_allocObject();
        *(void *)(v35 + 16) = v26;
        int v36 = (void *)swift_allocObject();
        uint64_t v37 = v51;
        v36[2] = v33;
        v36[3] = v37;
        v36[4] = v35;
        v36[5] = v34;
        id v38 = v33;
        return;
      }
      uint64_t v41 = v27;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_release();
    }
    else
    {
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v40 = 1;
      *(void *)(v40 + 8) = 0;
      *(void *)(v40 + 16) = 0xE000000000000000;
      *(void *)(v40 + 24) = 0xD00000000000003CLL;
      *(void *)(v40 + 32) = 0x80000001000E45D0;
      *(void *)(v40 + 40) = 0xD00000000000001CLL;
      *(void *)(v40 + 48) = 0x80000001000E41E0;
      *(void *)(v40 + 56) = 392;
      swift_willThrow();
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v39 = 0;
    *(void *)(v39 + 8) = 0;
    *(void *)(v39 + 16) = 0xE000000000000000;
    *(void *)(v39 + 24) = 0xD00000000000003CLL;
    *(void *)(v39 + 32) = 0x80000001000E45D0;
    *(void *)(v39 + 40) = 0xD00000000000001CLL;
    *(void *)(v39 + 48) = 0x80000001000E41E0;
    *(void *)(v39 + 56) = 380;
    swift_willThrow();
  }
}

uint64_t type metadata accessor for DriverPlugin()
{
  return self;
}

ValueMetadata *type metadata accessor for AUAPluginUtils()
{
  return &type metadata for AUAPluginUtils;
}

uint64_t sub_100071E78()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100071EB0()
{
  return sub_10006FD2C();
}

uint64_t sub_100071EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100071EC8()
{
  return swift_release();
}

id sub_100071ED0()
{
  __int16 v0 = sub_1000C4C50();
  byte_10012B210 = (v0 & 0x101) == 257;
  if ((v0 & 0x101) == 0x101)
  {
    if (qword_1001268F8 != -1) {
      swift_once();
    }
    id v1 = &qword_100129100;
    int v2 = 1;
  }
  else
  {
    if (qword_100126900 != -1) {
      swift_once();
    }
    int v2 = 0;
    id v1 = &qword_100129108;
  }
  id v3 = *(id *)(*v1 + OBJC_IVAR___AUAPlugin_plugin);
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  if (v2) {
    uint64_t v4 = 1702195828;
  }
  else {
    uint64_t v4 = 0x65736C6166;
  }
  if (v2) {
    unint64_t v5 = 0xE400000000000000;
  }
  else {
    unint64_t v5 = 0xE500000000000000;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  sub_10002E804(0xD000000000000016, 0x80000001000E4590, 0xD000000000000014, (void *)0x80000001000E45B0, 0xD00000000000001CLL, 0x80000001000E41E0, 110);
  swift_bridgeObjectRelease();
  return v3;
}

id sub_10007208C()
{
  __int16 v0 = sub_1000C4C50();
  byte_10012B210 = (v0 & 0x101) == 1;
  if ((v0 & 0x101) == 1)
  {
    if (qword_1001268F8 != -1) {
      swift_once();
    }
    id v1 = &qword_100129100;
    int v2 = 1;
  }
  else
  {
    if (qword_100126900 != -1) {
      swift_once();
    }
    int v2 = 0;
    id v1 = &qword_100129108;
  }
  id v3 = *(id *)(*v1 + OBJC_IVAR___AUAPlugin_plugin);
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  if (v2) {
    uint64_t v4 = 1702195828;
  }
  else {
    uint64_t v4 = 0x65736C6166;
  }
  if (v2) {
    unint64_t v5 = 0xE400000000000000;
  }
  else {
    unint64_t v5 = 0xE500000000000000;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  sub_10002E804(0xD000000000000016, 0x80000001000E4450, 0xD000000000000017, (void *)0x80000001000E4470, 0xD00000000000001CLL, 0x80000001000E41E0, 119);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_100072240()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_errorRelease();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_100072290()
{
  return sub_10006FF2C(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1000722C8()
{
  return _swift_deallocObject(v0, 48, 7);
}

unint64_t sub_100072300()
{
  return sub_10006FDC0(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

void sub_10007230C(void *a1)
{
}

uint64_t sub_100072330(uint64_t result, int a2)
{
  if (a2 == -536870896)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(uint64_t (**)(uint64_t))(v2 + 16);
    sub_10002E804(0xD00000000000001ALL, 0x80000001000E46B0, 0xD00000000000002BLL, (void *)0x80000001000E46D0, 0xD00000000000001CLL, 0x80000001000E41E0, 370);
    return v4(v3);
  }
  return result;
}

uint64_t sub_1000723D0()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100072410(void *a1, void *a2)
{
  sub_10006E7C8(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_100072430()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100072468(void *a1, void *a2)
{
}

uint64_t sub_100072474()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1000724BC(uint64_t a1)
{
  sub_100070EB8(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void (**)(void))(v1 + 40));
}

uint64_t sub_1000724CC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100072504()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_100072518()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100072528()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100072568(void *a1)
{
  sub_1000707A8(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

id sub_100072574()
{
  return [*(id *)(v0 + 16) primeNotification];
}

uint64_t sub_100072584(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000725CC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001A584(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10007261C()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10007266C()
{
  return sub_1000708B8(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100072678()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000726C0()
{
  sub_100070B7C(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000726CC()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10007270C()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000727B4;
  v3[2] = v2;
  return _swift_task_switch(sub_10006DF9C, 0, 0);
}

uint64_t sub_1000727B4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000728A8(uint64_t a1)
{
  return sub_10006DB1C(a1);
}

uint64_t sub_1000728B0()
{
  uint64_t v1 = sub_10000AC7C(&qword_1001291F0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_100072980()
{
  sub_10000AC7C(&qword_1001291F0);
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);

  sub_10006DCF8(v1);
}

unsigned char *sub_1000729E8(unsigned char *result)
{
  if ((*result & 1) == 0)
  {
    uint64_t v1 = result;
    sub_10000AC7C(&qword_1001291F0);
    uint64_t result = (unsigned char *)CheckedContinuation.resume(returning:)();
    *uint64_t v1 = 1;
  }
  return result;
}

uint64_t sub_100072A40()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100072A78(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  sub_10006DA00(a1, a2, a3, v3);
}

unsigned char *storeEnumTagSinglePayload for DriverPlugin.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100072B4CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DriverPlugin.State()
{
  return &type metadata for DriverPlugin.State;
}

unint64_t sub_100072B88()
{
  unint64_t result = qword_100129200;
  if (!qword_100129200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129200);
  }
  return result;
}

uint64_t sub_100072C48(__int16 a1, id a2)
{
  if ((a1 & 0x100) != 0)
  {
    uint64_t v3 = 462;
  }
  else
  {
    if (a1 == 8) {
      return *(unsigned __int8 *)[a2 bytes];
    }
    uint64_t v3 = 463;
  }
  sub_10000CD54();
  swift_allocError();
  *(unsigned char *)uint64_t v4 = 30;
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0xE000000000000000;
  *(void *)(v4 + 24) = 0xD000000000000010;
  *(void *)(v4 + 32) = 0x80000001000E4870;
  *(void *)(v4 + 40) = 0xD00000000000001ELL;
  *(void *)(v4 + 48) = 0x80000001000E4750;
  *(void *)(v4 + 56) = v3;
  return swift_willThrow();
}

uint64_t ADCControlRequestParameterBlock.getCur()@<X0>(id a1@<X1>, __int16 a2@<W0>, uint64_t a3@<X8>)
{
  if ((a2 & 0x100) != 0)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v6 = 30;
    *(void *)(v6 + 8) = 0;
    *(void *)(v6 + 16) = 0xE000000000000000;
    *(void *)(v6 + 24) = 0x2928727543746567;
    *(void *)(v6 + 32) = 0xE800000000000000;
    *(void *)(v6 + 40) = 0xD00000000000001ELL;
    *(void *)(v6 + 48) = 0x80000001000E4750;
    uint64_t v7 = 390;
LABEL_5:
    *(void *)(v6 + 56) = v7;
    return swift_willThrow();
  }
  switch((char)a2)
  {
    case 0:
      uint64_t v5 = [a1 bytes];
      uint64_t v56 = &type metadata for UInt8;
      unint64_t v57 = sub_100074F88();
      LOBYTE(v55) = *v5;
      return sub_10000CF6C(&v55, a3);
    case 1:
      BOOL v9 = [a1 bytes];
      uint64_t v56 = &type metadata for UInt16;
      unint64_t v57 = sub_100074F34();
      LOWORD(v55) = *v9;
      return sub_10000CF6C(&v55, a3);
    case 2:
      uint64_t v10 = [a1 bytes];
      uint64_t v56 = &type metadata for UInt32;
      unint64_t v57 = sub_100074EE0();
      LODWORD(v55) = *v10;
      return sub_10000CF6C(&v55, a3);
    case 3:
      uint64_t v11 = sub_1000747B8(a1);
      uint64_t v13 = v11;
      unint64_t v14 = v12;
      switch(v12 >> 62)
      {
        case 1uLL:
          uint64_t v21 = (v11 >> 32) - (int)v11;
          if (v11 >> 32 < (int)v11)
          {
            __break(1u);
LABEL_72:
            __break(1u);
LABEL_73:
            __break(1u);
LABEL_74:
            __break(1u);
            goto LABEL_75;
          }
          uint64_t v22 = __DataStorage._bytes.getter();
          if (!v22) {
            goto LABEL_17;
          }
          uint64_t v23 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v13, v23))
          {
LABEL_75:
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
          }
          v22 += (int)v13 - v23;
LABEL_17:
          uint64_t v24 = __DataStorage._length.getter();
          if (v24 >= v21) {
            uint64_t v25 = (v13 >> 32) - (int)v13;
          }
          else {
            uint64_t v25 = v24;
          }
          id v26 = (char *)(v22 + v25);
          if (v22) {
            unint64_t v15 = v26;
          }
          else {
            unint64_t v15 = 0;
          }
          unint64_t v16 = (unsigned char *)v22;
LABEL_24:
          sub_100074BD8(v16, (uint64_t)v15, (uint64_t)&v55);
LABEL_36:
          uint64_t result = sub_100038688(v13, v14);
          if (!v3) {
            return sub_10000CF6C(&v55, a3);
          }
          return result;
        case 2uLL:
          uint64_t v27 = *(void *)(v11 + 16);
          uint64_t v28 = *(void *)(v11 + 24);
          swift_retain();
          swift_retain();
          char v29 = (unsigned char *)__DataStorage._bytes.getter();
          if (!v29) {
            goto LABEL_28;
          }
          uint64_t v30 = __DataStorage._offset.getter();
          if (__OFSUB__(v27, v30)) {
            goto LABEL_76;
          }
          v29 += v27 - v30;
LABEL_28:
          BOOL v31 = __OFSUB__(v28, v27);
          uint64_t v32 = v28 - v27;
          if (v31) {
            goto LABEL_72;
          }
          uint64_t v33 = __DataStorage._length.getter();
          if (v33 >= v32) {
            uint64_t v34 = v32;
          }
          else {
            uint64_t v34 = v33;
          }
          uint64_t v35 = &v29[v34];
          if (v29) {
            uint64_t v36 = (uint64_t)v35;
          }
          else {
            uint64_t v36 = 0;
          }
          sub_100074BD8(v29, v36, (uint64_t)&v55);
          swift_release();
          swift_release();
          goto LABEL_36;
        case 3uLL:
          memset(v54, 0, 14);
          sub_100074BD8(v54, (uint64_t)v54, (uint64_t)&v55);
          uint64_t v37 = v13;
          unint64_t v38 = v14;
          if (v3) {
            return sub_100038688(v13, v14);
          }
          goto LABEL_68;
        default:
          v54[0] = v11;
          LOWORD(v54[1]) = v12;
          BYTE2(v54[1]) = BYTE2(v12);
          BYTE3(v54[1]) = BYTE3(v12);
          BYTE4(v54[1]) = BYTE4(v12);
          BYTE5(v54[1]) = BYTE5(v12);
          unint64_t v15 = (char *)v54 + BYTE6(v12);
          unint64_t v16 = v54;
          goto LABEL_24;
      }
    case 8:
      uint64_t v17 = sub_1000747B8(a1);
      uint64_t v13 = v17;
      unint64_t v14 = v18;
      switch(v18 >> 62)
      {
        case 1uLL:
          uint64_t v39 = (v17 >> 32) - (int)v17;
          if (v17 >> 32 < (int)v17) {
            goto LABEL_73;
          }
          uint64_t v40 = __DataStorage._bytes.getter();
          if (!v40) {
            goto LABEL_44;
          }
          uint64_t v41 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v13, v41)) {
            goto LABEL_77;
          }
          v40 += (int)v13 - v41;
LABEL_44:
          uint64_t v42 = __DataStorage._length.getter();
          if (v42 >= v39) {
            uint64_t v43 = (v13 >> 32) - (int)v13;
          }
          else {
            uint64_t v43 = v42;
          }
          id v44 = (char *)(v40 + v43);
          if (v40) {
            id v19 = v44;
          }
          else {
            id v19 = 0;
          }
          uint64_t v20 = (unsigned char *)v40;
LABEL_64:
          sub_100074CD8(v20, (uint64_t)v19, (uint64_t)&v55);
          if (v3) {
            return sub_100038688(v13, v14);
          }
          goto LABEL_67;
        case 2uLL:
          uint64_t v45 = *(void *)(v17 + 16);
          uint64_t v46 = *(void *)(v17 + 24);
          swift_retain();
          swift_retain();
          uint64_t v47 = (unsigned char *)__DataStorage._bytes.getter();
          if (!v47) {
            goto LABEL_54;
          }
          uint64_t v48 = __DataStorage._offset.getter();
          if (__OFSUB__(v45, v48)) {
            goto LABEL_78;
          }
          v47 += v45 - v48;
LABEL_54:
          BOOL v31 = __OFSUB__(v46, v45);
          uint64_t v49 = v46 - v45;
          if (v31) {
            goto LABEL_74;
          }
          uint64_t v50 = __DataStorage._length.getter();
          if (v50 >= v49) {
            uint64_t v51 = v49;
          }
          else {
            uint64_t v51 = v50;
          }
          int v52 = &v47[v51];
          if (v47) {
            uint64_t v53 = (uint64_t)v52;
          }
          else {
            uint64_t v53 = 0;
          }
          sub_100074CD8(v47, v53, (uint64_t)&v55);
          if (v3)
          {
            swift_release();
            swift_release();
            return sub_100038688(v13, v14);
          }
          swift_release();
          swift_release();
LABEL_67:
          uint64_t v37 = v13;
          unint64_t v38 = v14;
LABEL_68:
          sub_100038688(v37, v38);
          break;
        case 3uLL:
          memset(v54, 0, 14);
          uint64_t v20 = v54;
          id v19 = (char *)v54;
          goto LABEL_64;
        default:
          v54[0] = v17;
          LOWORD(v54[1]) = v18;
          BYTE2(v54[1]) = BYTE2(v18);
          BYTE3(v54[1]) = BYTE3(v18);
          BYTE4(v54[1]) = BYTE4(v18);
          BYTE5(v54[1]) = BYTE5(v18);
          id v19 = (char *)v54 + BYTE6(v18);
          uint64_t v20 = v54;
          goto LABEL_64;
      }
      return sub_10000CF6C(&v55, a3);
    default:
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v6 = 30;
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0xE000000000000000;
      *(void *)(v6 + 24) = 0x2928727543746567;
      *(void *)(v6 + 32) = 0xE800000000000000;
      *(void *)(v6 + 40) = 0xD00000000000001ELL;
      *(void *)(v6 + 48) = 0x80000001000E4750;
      uint64_t v7 = 441;
      goto LABEL_5;
  }
}

uint64_t sub_100073364(__int16 a1, void *a2)
{
  if ((a1 & 0x100) == 0)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v3 = 30;
    *(void *)(v3 + 8) = 0;
    *(void *)(v3 + 16) = 0xE000000000000000;
    *(void *)(v3 + 24) = 0x65676E6152746567;
    *(void *)(v3 + 32) = 0xEA00000000002928;
    *(void *)(v3 + 40) = 0xD00000000000001ELL;
    *(void *)(v3 + 48) = 0x80000001000E4750;
    *(void *)(v3 + 56) = 470;
    return swift_willThrow();
  }
  char v6 = a1;
  uint64_t result = sub_1000736D8(a1 | 0x100u, a2);
  if (!v2)
  {
    uint64_t v7 = result;
    uint64_t v8 = sub_1000747B8(a2);
    uint64_t v10 = v8;
    unint64_t v11 = v9;
    switch(v9 >> 62)
    {
      case 1uLL:
        uint64_t v28 = (v8 >> 32) - (int)v8;
        if (v8 >> 32 < (int)v8)
        {
          __break(1u);
LABEL_32:
          __break(1u);
        }
        else
        {
          uint64_t v13 = (unsigned char *)__DataStorage._bytes.getter();
          if (!v13)
          {
LABEL_10:
            uint64_t v15 = __DataStorage._length.getter();
            uint64_t v16 = v28;
            if (v15 < v28) {
              uint64_t v16 = v15;
            }
            uint64_t v17 = &v13[v16];
            if (v13) {
              uint64_t v18 = (uint64_t)v17;
            }
            else {
              uint64_t v18 = 0;
            }
            sub_1000758B8(v13, v18, v7, v6, v31);
            goto LABEL_30;
          }
          uint64_t v14 = __DataStorage._offset.getter();
          if (!__OFSUB__((int)v10, v14))
          {
            v13 += (int)v10 - v14;
            goto LABEL_10;
          }
        }
        __break(1u);
LABEL_34:
        __break(1u);
        return result;
      case 2uLL:
        uint64_t v27 = *(void *)(v8 + 24);
        uint64_t v29 = *(void *)(v8 + 16);
        swift_retain();
        swift_retain();
        id v19 = (unsigned char *)__DataStorage._bytes.getter();
        if (v19)
        {
          uint64_t v20 = __DataStorage._offset.getter();
          uint64_t v21 = v29;
          if (__OFSUB__(v29, v20)) {
            goto LABEL_34;
          }
          v19 += v29 - v20;
        }
        else
        {
          uint64_t v21 = v29;
        }
        uint64_t v22 = v27 - v21;
        if (!__OFSUB__(v27, v21))
        {
          uint64_t v23 = __DataStorage._length.getter();
          if (v23 >= v22) {
            uint64_t v24 = v22;
          }
          else {
            uint64_t v24 = v23;
          }
          uint64_t v25 = &v19[v24];
          if (v19) {
            uint64_t v26 = (uint64_t)v25;
          }
          else {
            uint64_t v26 = 0;
          }
          sub_1000758B8(v19, v26, v7, v6, v31);
          swift_release();
          swift_release();
LABEL_30:
          sub_100038688(v10, v11);
          return v31[0];
        }
        goto LABEL_32;
      case 3uLL:
        memset(v31, 0, 14);
        unint64_t v12 = (char *)v31;
        goto LABEL_20;
      default:
        v31[0] = v8;
        LOWORD(v31[1]) = v9;
        BYTE2(v31[1]) = BYTE2(v9);
        BYTE3(v31[1]) = BYTE3(v9);
        BYTE4(v31[1]) = BYTE4(v9);
        BYTE5(v31[1]) = BYTE5(v9);
        unint64_t v12 = (char *)v31 + BYTE6(v9);
LABEL_20:
        sub_1000758B8(v31, (uint64_t)v12, v7, v6, &v30);
        sub_100038688(v10, v11);
        return v30;
    }
  }
  return result;
}

uint64_t sub_1000736D8(__int16 a1, id a2)
{
  if ((a1 & 0x100) != 0) {
    return *(unsigned __int16 *)[a2 bytes];
  }
  sub_10000CD54();
  swift_allocError();
  *(unsigned char *)uint64_t v2 = 30;
  *(void *)(v2 + 8) = 0;
  *(void *)(v2 + 16) = 0xE000000000000000;
  *(void *)(v2 + 24) = 0x526275536D754E77;
  *(void *)(v2 + 32) = 0xEF29287365676E61;
  *(void *)(v2 + 40) = 0xD00000000000001ELL;
  *(void *)(v2 + 48) = 0x80000001000E4750;
  *(void *)(v2 + 56) = 380;
  return swift_willThrow();
}

unsigned char *sub_10007379C(unint64_t a1, char a2, id a3)
{
  switch(a2)
  {
    case 0:
      uint64_t result = [a3 bytes];
      if (a1 >= 0x100) {
        goto LABEL_11;
      }
      *uint64_t result = a1;
      break;
    case 1:
      uint64_t result = [a3 bytes];
      if (a1 >= 0x10000) {
        goto LABEL_11;
      }
      *(_WORD *)uint64_t result = a1;
      break;
    case 2:
      uint64_t result = [a3 bytes];
      if (HIDWORD(a1))
      {
LABEL_11:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x100073954);
      }
      *(_DWORD *)uint64_t result = a1;
      break;
    case 3:
      uint64_t result = [a3 bytes];
      *(_WORD *)uint64_t result = a1;
      result[2] = BYTE2(a1);
      break;
    default:
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v5 = 30;
      *(void *)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0xE000000000000000;
      *(void *)(v5 + 24) = 0x5F28727543746573;
      *(void *)(v5 + 32) = 0xEA0000000000293ALL;
      *(void *)(v5 + 40) = 0xD00000000000001ELL;
      *(void *)(v5 + 48) = 0x80000001000E4750;
      *(void *)(v5 + 56) = 535;
      uint64_t result = (unsigned char *)swift_willThrow();
      break;
  }
  return result;
}

unint64_t sub_100073964@<X0>(uint64_t a1@<X8>)
{
  char v3 = *v1;
  *(void *)(a1 + 24) = &type metadata for UInt8;
  unint64_t result = sub_100086B30();
  *(void *)(a1 + 32) = result;
  *(unsigned char *)a1 = v3;
  return result;
}

unint64_t sub_1000739A0@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  *(void *)(a1 + 24) = &type metadata for Int8;
  unint64_t result = sub_100086ADC();
  *(void *)(a1 + 32) = result;
  if (v3 < 0) {
    __break(1u);
  }
  else {
    *(unsigned char *)a1 = v3;
  }
  return result;
}

unint64_t sub_1000739E4@<X0>(uint64_t a1@<X8>)
{
  char v3 = *(unsigned char *)(v1 + 1);
  *(void *)(a1 + 24) = &type metadata for UInt8;
  unint64_t result = sub_100086B30();
  *(void *)(a1 + 32) = result;
  *(unsigned char *)a1 = v3;
  return result;
}

unint64_t sub_100073A20@<X0>(uint64_t a1@<X8>)
{
  int v3 = *(char *)(v1 + 1);
  *(void *)(a1 + 24) = &type metadata for Int8;
  unint64_t result = sub_100086ADC();
  *(void *)(a1 + 32) = result;
  if (v3 < 0) {
    __break(1u);
  }
  else {
    *(unsigned char *)a1 = v3;
  }
  return result;
}

unint64_t sub_100073A64@<X0>(uint64_t a1@<X8>)
{
  char v3 = *(unsigned char *)(v1 + 2);
  *(void *)(a1 + 24) = &type metadata for UInt8;
  unint64_t result = sub_100086B30();
  *(void *)(a1 + 32) = result;
  *(unsigned char *)a1 = v3;
  return result;
}

unint64_t sub_100073AA0@<X0>(uint64_t a1@<X8>)
{
  int v3 = *(char *)(v1 + 2);
  *(void *)(a1 + 24) = &type metadata for Int8;
  unint64_t result = sub_100086ADC();
  *(void *)(a1 + 32) = result;
  if (v3 < 0) {
    __break(1u);
  }
  else {
    *(unsigned char *)a1 = v3;
  }
  return result;
}

Swift::Int sub_100073AE4()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_100073B54()
{
  Swift::UInt8 v1 = v0[1];
  Swift::UInt8 v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int sub_100073BA0()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Swift::UInt8 v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL sub_100073C0C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

unint64_t sub_100073C44@<X0>(uint64_t a1@<X8>)
{
  __int16 v3 = *v1;
  *(void *)(a1 + 24) = &type metadata for UInt16;
  unint64_t result = sub_1000360A8();
  *(void *)(a1 + 32) = result;
  *(_WORD *)a1 = v3;
  return result;
}

unint64_t sub_100073C80@<X0>(uint64_t a1@<X8>)
{
  __int16 v3 = *v1;
  *(void *)(a1 + 24) = &type metadata for Int16;
  unint64_t result = sub_100086A88();
  *(void *)(a1 + 32) = result;
  *(_WORD *)a1 = v3;
  return result;
}

unint64_t sub_100073CBC@<X0>(uint64_t a1@<X8>)
{
  __int16 v3 = *(_WORD *)(v1 + 2);
  *(void *)(a1 + 24) = &type metadata for UInt16;
  unint64_t result = sub_1000360A8();
  *(void *)(a1 + 32) = result;
  *(_WORD *)a1 = v3;
  return result;
}

unint64_t sub_100073CF8@<X0>(uint64_t a1@<X8>)
{
  __int16 v3 = *(_WORD *)(v1 + 2);
  *(void *)(a1 + 24) = &type metadata for Int16;
  unint64_t result = sub_100086A88();
  *(void *)(a1 + 32) = result;
  *(_WORD *)a1 = v3;
  return result;
}

unint64_t sub_100073D34@<X0>(uint64_t a1@<X8>)
{
  __int16 v3 = *(_WORD *)(v1 + 4);
  *(void *)(a1 + 24) = &type metadata for UInt16;
  unint64_t result = sub_1000360A8();
  *(void *)(a1 + 32) = result;
  *(_WORD *)a1 = v3;
  return result;
}

unint64_t sub_100073D70@<X0>(uint64_t a1@<X8>)
{
  __int16 v3 = *(_WORD *)(v1 + 4);
  *(void *)(a1 + 24) = &type metadata for Int16;
  unint64_t result = sub_100086A88();
  *(void *)(a1 + 32) = result;
  *(_WORD *)a1 = v3;
  return result;
}

Swift::Int sub_100073DAC()
{
  Swift::UInt16 v1 = *v0;
  Swift::UInt16 v2 = v0[1];
  Swift::UInt16 v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_100073E1C()
{
  Swift::UInt16 v1 = v0[1];
  Swift::UInt16 v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int sub_100073E68()
{
  Swift::UInt16 v1 = *v0;
  Swift::UInt16 v2 = v0[1];
  Swift::UInt16 v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL sub_100073ED4(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

unint64_t sub_100073F0C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = &type metadata for UInt;
  unint64_t result = sub_100086A34();
  a1[4] = result;
  if ((v3 & 0x80000000) != 0)
  {
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a1 = v3;
  }
  return result;
}

unint64_t sub_100073F9C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = &type metadata for Int;
  unint64_t result = sub_1000869E0();
  a1[4] = result;
  *a1 = v3;
  return result;
}

unint64_t sub_100073FD8@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(unsigned int *)(v1 + 4);
  a1[3] = &type metadata for UInt;
  unint64_t result = sub_100086A34();
  a1[4] = result;
  if ((v3 & 0x80000000) != 0)
  {
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a1 = v3;
  }
  return result;
}

unint64_t sub_100074068@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(int *)(v1 + 4);
  a1[3] = &type metadata for Int;
  unint64_t result = sub_1000869E0();
  a1[4] = result;
  *a1 = v3;
  return result;
}

unint64_t sub_1000740A4@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(unsigned int *)(v1 + 8);
  a1[3] = &type metadata for UInt;
  unint64_t result = sub_100086A34();
  a1[4] = result;
  if ((v3 & 0x80000000) != 0)
  {
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a1 = v3;
  }
  return result;
}

unint64_t sub_100074134@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(int *)(v1 + 8);
  a1[3] = &type metadata for Int;
  unint64_t result = sub_1000869E0();
  a1[4] = result;
  *a1 = v3;
  return result;
}

Swift::Int sub_100074170()
{
  Swift::UInt32 v1 = *v0;
  Swift::UInt32 v2 = v0[1];
  Swift::UInt32 v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1000741DC()
{
  Swift::UInt32 v1 = v0[1];
  Swift::UInt32 v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int sub_100074224()
{
  Swift::UInt32 v1 = *v0;
  Swift::UInt32 v2 = v0[1];
  Swift::UInt32 v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL sub_10007428C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t ADCControlRequestParameterBlock.init(blockLayout:data:)(unsigned __int8 a1, uint64_t a2, unint64_t a3)
{
  switch(a1)
  {
    case 0u:
      switch(a3 >> 62)
      {
        case 1uLL:
          LODWORD(v6) = HIDWORD(a2) - a2;
          if (__OFSUB__(HIDWORD(a2), a2))
          {
            __break(1u);
LABEL_41:
            __break(1u);
LABEL_42:
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
            JUMPOUT(0x10007474CLL);
          }
          uint64_t v6 = (int)v6;
LABEL_16:
          if (v6 == 1) {
            goto LABEL_37;
          }
LABEL_17:
          sub_10000CD54();
          swift_allocError();
          uint64_t v12 = 256;
          break;
        case 2uLL:
          uint64_t v15 = *(void *)(a2 + 16);
          uint64_t v14 = *(void *)(a2 + 24);
          BOOL v16 = __OFSUB__(v14, v15);
          uint64_t v6 = v14 - v15;
          if (!v16) {
            goto LABEL_16;
          }
          goto LABEL_41;
        case 3uLL:
          goto LABEL_17;
        default:
          uint64_t v6 = BYTE6(a3);
          goto LABEL_16;
      }
      break;
    case 1u:
      switch(a3 >> 62)
      {
        case 1uLL:
          LODWORD(v7) = HIDWORD(a2) - a2;
          if (__OFSUB__(HIDWORD(a2), a2)) {
            goto LABEL_42;
          }
          uint64_t v7 = (int)v7;
LABEL_21:
          if (v7 == 2) {
            goto LABEL_37;
          }
LABEL_22:
          sub_10000CD54();
          swift_allocError();
          uint64_t v12 = 257;
          break;
        case 2uLL:
          uint64_t v18 = *(void *)(a2 + 16);
          uint64_t v17 = *(void *)(a2 + 24);
          BOOL v16 = __OFSUB__(v17, v18);
          uint64_t v7 = v17 - v18;
          if (!v16) {
            goto LABEL_21;
          }
          goto LABEL_43;
        case 3uLL:
          goto LABEL_22;
        default:
          uint64_t v7 = BYTE6(a3);
          goto LABEL_21;
      }
      break;
    case 2u:
      switch(a3 >> 62)
      {
        case 1uLL:
          LODWORD(v8) = HIDWORD(a2) - a2;
          if (__OFSUB__(HIDWORD(a2), a2)) {
            goto LABEL_44;
          }
          uint64_t v8 = (int)v8;
LABEL_26:
          if (v8 == 4) {
            goto LABEL_37;
          }
LABEL_27:
          sub_10000CD54();
          swift_allocError();
          uint64_t v12 = 258;
          break;
        case 2uLL:
          uint64_t v20 = *(void *)(a2 + 16);
          uint64_t v19 = *(void *)(a2 + 24);
          BOOL v16 = __OFSUB__(v19, v20);
          uint64_t v8 = v19 - v20;
          if (!v16) {
            goto LABEL_26;
          }
          goto LABEL_45;
        case 3uLL:
          goto LABEL_27;
        default:
          uint64_t v8 = BYTE6(a3);
          goto LABEL_26;
      }
      break;
    case 3u:
      switch(a3 >> 62)
      {
        case 1uLL:
          LODWORD(v9) = HIDWORD(a2) - a2;
          if (__OFSUB__(HIDWORD(a2), a2)) {
            goto LABEL_46;
          }
          uint64_t v9 = (int)v9;
LABEL_31:
          if (v9 == 3) {
            goto LABEL_37;
          }
LABEL_32:
          sub_10000CD54();
          swift_allocError();
          uint64_t v12 = 259;
          break;
        case 2uLL:
          uint64_t v22 = *(void *)(a2 + 16);
          uint64_t v21 = *(void *)(a2 + 24);
          BOOL v16 = __OFSUB__(v21, v22);
          uint64_t v9 = v21 - v22;
          if (!v16) {
            goto LABEL_31;
          }
          goto LABEL_47;
        case 3uLL:
          goto LABEL_32;
        default:
          uint64_t v9 = BYTE6(a3);
          goto LABEL_31;
      }
      break;
    case 6u:
      switch(a3 >> 62)
      {
        case 1uLL:
          LODWORD(v13) = HIDWORD(a2) - a2;
          if (__OFSUB__(HIDWORD(a2), a2)) {
            goto LABEL_48;
          }
          uint64_t v13 = (int)v13;
LABEL_36:
          if (v13 == 6)
          {
LABEL_37:
            id v25 = objc_allocWithZone((Class)NSMutableData);
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            [v25 initWithData:isa];
            sub_100038688(a2, a3);

            return a1;
          }
LABEL_38:
          sub_10000CD54();
          swift_allocError();
          uint64_t v12 = 260;
          break;
        case 2uLL:
          uint64_t v24 = *(void *)(a2 + 16);
          uint64_t v23 = *(void *)(a2 + 24);
          BOOL v16 = __OFSUB__(v23, v24);
          uint64_t v13 = v23 - v24;
          if (!v16) {
            goto LABEL_36;
          }
          goto LABEL_49;
        case 3uLL:
          goto LABEL_38;
        default:
          uint64_t v13 = BYTE6(a3);
          goto LABEL_36;
      }
      break;
    default:
      _StringGuts.grow(_:)(20);
      v10._countAndFlagsBits = 0xD000000000000012;
      v10._object = (void *)0x80000001000E4770;
      String.append(_:)(v10);
      _print_unlocked<A, B>(_:_:)();
      sub_10002E81C(0, 0xE000000000000000, 0xD000000000000017, (void *)0x80000001000E4790, 0xD00000000000001ELL, 0x80000001000E4750, 262);
      swift_bridgeObjectRelease();
      sub_10000CD54();
      swift_allocError();
      uint64_t v12 = 263;
      break;
  }
  *(unsigned char *)uint64_t v11 = 27;
  *(void *)(v11 + 8) = 0;
  *(void *)(v11 + 16) = 0xE000000000000000;
  *(void *)(v11 + 24) = 0xD000000000000017;
  *(void *)(v11 + 32) = 0x80000001000E4790;
  *(void *)(v11 + 40) = 0xD00000000000001ELL;
  *(void *)(v11 + 48) = 0x80000001000E4750;
  *(void *)(v11 + 56) = v12;
  swift_willThrow();
  return sub_100038688(a2, a3);
}

uint64_t sub_1000747B8(void *a1)
{
  *(void *)&long long v33 = a1;
  sub_100086714();
  id v2 = a1;
  sub_10000AC7C(&qword_1001294B8);
  if (swift_dynamicCast())
  {
    sub_10000CF6C(v34, (uint64_t)v36);
    sub_10001A974(v36, v36[3]);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();

    v34[0] = v33;
    sub_10001ABC4((uint64_t)v36);
    return *(void *)&v34[0];
  }
  uint64_t v35 = 0;
  memset(v34, 0, sizeof(v34));
  sub_100086754((uint64_t)v34);
  uint64_t v3 = NSData.startIndex.getter();
  uint64_t v4 = NSData.endIndex.getter();
  uint64_t v5 = NSData.startIndex.getter();
  uint64_t v6 = NSData.endIndex.getter();
  if (v3 < v5 || v6 < v3) {
    goto LABEL_39;
  }
  uint64_t v7 = NSData.startIndex.getter();
  uint64_t v8 = NSData.endIndex.getter();
  if (v4 < v7 || v8 < v4) {
    goto LABEL_40;
  }
  if (__OFSUB__(v4, v3))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  *(void *)&v34[0] = sub_10008557C(v4 - v3);
  *((void *)&v34[0] + 1) = v9;
  __chkstk_darwin(*(void *)&v34[0]);
  Swift::String v10 = sub_100081D08((void *(*)(uint64_t *__return_ptr, char *, char *))sub_1000867B4);
  unsigned __int8 v13 = BYTE14(v34[0]);
  uint64_t v14 = *((void *)&v34[0] + 1) >> 62;
  uint64_t v15 = v10;
  uint64_t v16 = v11;
  switch(*((void *)&v34[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v17) = DWORD1(v34[0]) - LODWORD(v34[0]);
      if (__OFSUB__(DWORD1(v34[0]), v34[0])) {
        goto LABEL_43;
      }
      uint64_t v17 = (int)v17;
LABEL_13:
      if (v12 != v17)
      {
        if (v14)
        {
          if (v14 == 1) {
            uint64_t v21 = *(uint64_t *)&v34[0] >> 32;
          }
          else {
            uint64_t v21 = *(void *)(*(void *)&v34[0] + 24);
          }
LABEL_33:
          if (v21 >= v12)
          {
            Data._Representation.replaceSubrange(_:with:count:)();
            goto LABEL_35;
          }
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
        }
LABEL_31:
        uint64_t v21 = v13;
        goto LABEL_33;
      }
LABEL_19:
      memset(v36, 0, 15);
      if (v11 == NSData.endIndex.getter()) {
        goto LABEL_35;
      }
      char v22 = NSData.subscript.getter();
      uint64_t v15 = v15;
      uint64_t v23 = NSData.startIndex.getter();
      uint64_t v24 = NSData.endIndex.getter();

      if (v16 < v23 || v16 >= v24)
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      LOBYTE(v25) = 0;
      uint64_t v26 = v16 + 1;
      break;
    case 2:
      uint64_t v19 = *(void *)(*(void *)&v34[0] + 16);
      uint64_t v18 = *(void *)(*(void *)&v34[0] + 24);
      BOOL v20 = __OFSUB__(v18, v19);
      uint64_t v17 = v18 - v19;
      if (!v20) {
        goto LABEL_13;
      }
      goto LABEL_44;
    case 3:
      if (!v12) {
        goto LABEL_19;
      }
      uint64_t v21 = 0;
      goto LABEL_33;
    default:
      uint64_t v17 = BYTE14(v34[0]);
      goto LABEL_13;
  }
  while (1)
  {
    *((unsigned char *)v36 + v25) = v22;
    unsigned int v25 = v25 + 1;
    if ((v25 >> 8))
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v25 == 14)
    {
      Data._Representation.append(contentsOf:)();
      if (v26 == NSData.endIndex.getter()) {
        goto LABEL_35;
      }
      LOBYTE(v25) = 0;
      goto LABEL_28;
    }
    if (v26 == NSData.endIndex.getter()) {
      break;
    }
LABEL_28:
    char v22 = NSData.subscript.getter();
    uint64_t v27 = v15;
    uint64_t v28 = NSData.startIndex.getter();
    uint64_t v29 = NSData.endIndex.getter();

    if (v26 >= v28 && v26++ < v29) {
      continue;
    }
    goto LABEL_30;
  }
  Data._Representation.append(contentsOf:)();
LABEL_35:

  return *(void *)&v34[0];
}

uint64_t sub_100074BD8@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t)sub_1000781B8(3, a1, a2);
  if (!v3)
  {
    if (*(void *)(result + 16) == 3)
    {
      int v6 = (*(unsigned __int8 *)(result + 34) << 16) | (*(unsigned __int8 *)(result + 33) << 8);
      int v7 = *(unsigned __int8 *)(result + 32);
      swift_bridgeObjectRelease();
      *(void *)(a3 + 24) = &type metadata for UInt32;
      uint64_t result = sub_100074EE0();
      *(void *)(a3 + 32) = result;
      *(_DWORD *)a3 = v6 | v7;
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v8 = 30;
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0xE000000000000000;
      *(void *)(v8 + 24) = 0x2928727543746567;
      *(void *)(v8 + 32) = 0xE800000000000000;
      *(void *)(v8 + 40) = 0xD00000000000001ELL;
      *(void *)(v8 + 48) = 0x80000001000E4750;
      *(void *)(v8 + 56) = 415;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_100074CD8@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (uint64_t)sub_1000781B8(1, a1, a2);
  if (!v3)
  {
    if (*(void *)(result + 16))
    {
      uint64_t v8 = v6;
      uint64_t v9 = v7;
      int v10 = *(unsigned __int8 *)(result + 32);
      swift_bridgeObjectRelease();
      if (v10 == 4)
      {
        unsigned __int8 v13 = sub_100077694(1, v8, v9, (uint64_t (*)(uint64_t, uint64_t))sub_100082EC4);
        *(void *)(a3 + 24) = &type metadata for UInt32;
        uint64_t result = sub_100074EE0();
        *(void *)(a3 + 32) = result;
        if (*((void *)v13 + 2))
        {
          int v14 = *((_DWORD *)v13 + 8);
          uint64_t result = swift_bridgeObjectRelease();
          *(_DWORD *)a3 = v14;
          return result;
        }
        goto LABEL_15;
      }
      if (v10 == 2)
      {
        uint64_t v15 = sub_100075CE8((__int16 *)1, v8, v9);
        *(void *)(a3 + 24) = &type metadata for UInt16;
        uint64_t result = sub_100074F34();
        *(void *)(a3 + 32) = result;
        if (*((void *)v15 + 2))
        {
          __int16 v16 = v15[16];
          uint64_t result = swift_bridgeObjectRelease();
          *(_WORD *)a3 = v16;
          return result;
        }
        goto LABEL_16;
      }
      if (v10 != 1)
      {
        sub_10000CD54();
        swift_allocError();
        *(unsigned char *)uint64_t v17 = 1;
        *(void *)(v17 + 8) = 0;
        *(void *)(v17 + 16) = 0xE000000000000000;
        *(void *)(v17 + 24) = 0x2928727543746567;
        *(void *)(v17 + 32) = 0xE800000000000000;
        *(void *)(v17 + 40) = 0xD00000000000001ELL;
        *(void *)(v17 + 48) = 0x80000001000E4750;
        *(void *)(v17 + 56) = 437;
        return swift_willThrow();
      }
      uint64_t v11 = sub_1000781B8(1, v8, v9);
      *(void *)(a3 + 24) = &type metadata for UInt8;
      uint64_t result = sub_100074F88();
      *(void *)(a3 + 32) = result;
      if (*((void *)v11 + 2))
      {
        char v12 = v11[32];
        uint64_t result = swift_bridgeObjectRelease();
        *(unsigned char *)a3 = v12;
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  return result;
}

unint64_t sub_100074EE0()
{
  unint64_t result = qword_100129210;
  if (!qword_100129210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129210);
  }
  return result;
}

unint64_t sub_100074F34()
{
  unint64_t result = qword_100129218;
  if (!qword_100129218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129218);
  }
  return result;
}

unint64_t sub_100074F88()
{
  unint64_t result = qword_100129220;
  if (!qword_100129220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129220);
  }
  return result;
}

unint64_t sub_100074FE0()
{
  unint64_t result = qword_100129228;
  if (!qword_100129228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129228);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for tADCControlRequestParameterBlockLayout(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for tADCControlRequestParameterBlockLayout(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100075190);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for tADCControlRequestParameterBlockLayout()
{
  return &type metadata for tADCControlRequestParameterBlockLayout;
}

void destroy for ADCControlRequestParameterBlock(uint64_t a1)
{
}

uint64_t _s9AUASDCore31ADCControlRequestParameterBlockVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  int v3 = *(void **)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for ADCControlRequestParameterBlock(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v4 = *(void **)(a2 + 8);
  id v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ADCControlRequestParameterBlock(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ADCControlRequestParameterBlock(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ADCControlRequestParameterBlock(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ADCControlRequestParameterBlock()
{
  return &type metadata for ADCControlRequestParameterBlock;
}

unsigned char *storeEnumTagSinglePayload for tADCControlRequestParameterBlockType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100075424);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for tADCControlRequestParameterBlockType()
{
  return &type metadata for tADCControlRequestParameterBlockType;
}

unint64_t sub_100075460()
{
  unint64_t result = qword_100129230;
  if (!qword_100129230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100129230);
  }
  return result;
}

unint64_t sub_1000754B4(__int16 a1, void *a2)
{
  if ((a1 & 0x100) != 0)
  {
LABEL_6:
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v8 = 30;
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0xE000000000000000;
    *(void *)(v8 + 24) = 0xD000000000000015;
    *(void *)(v8 + 32) = 0x80000001000E47F0;
    *(void *)(v8 + 40) = 0xD00000000000001ELL;
    *(void *)(v8 + 48) = 0x80000001000E4750;
    *(void *)(v8 + 56) = 448;
    return swift_willThrow();
  }
  uint64_t v3 = sub_1000747B8(a2);
  uint64_t v5 = v3;
  unint64_t v6 = v4;
  switch(v4 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (v3 >> 32) - (int)v3;
      if (v3 >> 32 < (int)v3)
      {
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      uint64_t v11 = __DataStorage._bytes.getter();
      if (v11)
      {
        uint64_t v12 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v5, v12))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        v11 += (int)v5 - v12;
      }
      uint64_t v13 = __DataStorage._length.getter();
      if (v13 >= v10) {
        uint64_t v14 = (v5 >> 32) - (int)v5;
      }
      else {
        uint64_t v14 = v13;
      }
      uint64_t v15 = v11 + v14;
      if (v11) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      BOOL v7 = sub_100077E40(1, v11, v16, (uint64_t)sub_10007C334, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100086438);
      if (v2) {
        return sub_100038688(v5, v6);
      }
      if (!*((void *)v7 + 2))
      {
        __break(1u);
LABEL_20:
        uint64_t v17 = *(void *)(v5 + 16);
        uint64_t v18 = *(void *)(v5 + 24);
        swift_retain();
        swift_retain();
        uint64_t v19 = __DataStorage._bytes.getter();
        if (v19)
        {
          uint64_t v20 = __DataStorage._offset.getter();
          if (__OFSUB__(v17, v20)) {
            goto LABEL_42;
          }
          v19 += v17 - v20;
        }
        BOOL v21 = __OFSUB__(v18, v17);
        uint64_t v22 = v18 - v17;
        if (!v21)
        {
          uint64_t v23 = __DataStorage._length.getter();
          if (v23 >= v22) {
            uint64_t v24 = v22;
          }
          else {
            uint64_t v24 = v23;
          }
          uint64_t v25 = v19 + v24;
          if (v19) {
            uint64_t v26 = v25;
          }
          else {
            uint64_t v26 = 0;
          }
          uint64_t v27 = sub_100077E40(1, v19, v26, (uint64_t)sub_10007C334, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100086438);
          if (v2)
          {
            swift_release();
            swift_release();
            return sub_100038688(v5, v6);
          }
          if (*((void *)v27 + 2))
          {
            unsigned int v28 = v27[32];
            unsigned int v29 = *(_DWORD *)(v27 + 33);
            uint64_t v30 = v27[37];
            swift_release();
            swift_release();
            goto LABEL_38;
          }
LABEL_44:
          __break(1u);
        }
        goto LABEL_40;
      }
LABEL_35:
      unsigned int v28 = v7[32];
      unsigned int v29 = *(_DWORD *)(v7 + 33);
      uint64_t v30 = v7[37];
LABEL_38:
      swift_bridgeObjectRelease();
      sub_100038688(v5, v6);
      return ((unint64_t)v29 << 8) | (v30 << 40) | v28;
    case 2uLL:
      goto LABEL_20;
    case 3uLL:
      memset(v31, 0, 14);
      BOOL v7 = sub_100077E40(1, (uint64_t)v31, (uint64_t)v31, (uint64_t)sub_10007C334, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100086438);
      if (v2) {
        return sub_100038688(v5, v6);
      }
      if (*((void *)v7 + 2)) {
        goto LABEL_35;
      }
      goto LABEL_43;
    default:
      v31[0] = v3;
      LOWORD(v31[1]) = v4;
      BYTE2(v31[1]) = BYTE2(v4);
      BYTE3(v31[1]) = BYTE3(v4);
      BYTE4(v31[1]) = BYTE4(v4);
      BYTE5(v31[1]) = BYTE5(v4);
      BOOL v7 = sub_100077E40(1, (uint64_t)v31, (uint64_t)v31 + BYTE6(v4), (uint64_t)sub_10007C334, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100086438);
      if (v2) {
        return sub_100038688(v5, v6);
      }
      if (*((void *)v7 + 2)) {
        goto LABEL_35;
      }
      __break(1u);
      goto LABEL_6;
  }
}

uint64_t sub_1000758B8@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  uint64_t result = (uint64_t)sub_100075CE8((__int16 *)1, a1, a2);
  if (!v5)
  {
    if (*(void *)(result + 16))
    {
      uint64_t v12 = v10;
      uint64_t v13 = v11;
      uint64_t v14 = *(unsigned __int16 *)(result + 32);
      swift_bridgeObjectRelease();
      if (v14 == a3)
      {
        switch(a4)
        {
          case 2:
            uint64_t v25 = sub_10007BFD4(a3, v12, v13, (uint64_t (*)(uint64_t, uint64_t))sub_100086338);
            int64_t v26 = *((void *)v25 + 2);
            if (v26)
            {
              uint64_t v41 = a5;
              uint64_t v45 = _swiftEmptyArrayStorage;
              sub_10007C904(0, v26, 0);
              uint64_t v17 = _swiftEmptyArrayStorage;
              uint64_t v27 = (_DWORD *)((char *)v25 + 40);
              do
              {
                uint64_t v28 = *((void *)v27 - 1);
                int v29 = *v27;
                uint64_t v45 = v17;
                unint64_t v31 = v17[2];
                unint64_t v30 = v17[3];
                if (v31 >= v30 >> 1)
                {
                  sub_10007C904(v30 > 1, v31 + 1, 1);
                  uint64_t v17 = v45;
                }
                v27 += 3;
                uint64_t v43 = &type metadata for AudioClassRange32bit;
                id v44 = &off_100119FB8;
                *(void *)&long long v42 = v28;
                DWORD2(v42) = v29;
                _WORD v17[2] = v31 + 1;
                sub_10000CF6C(&v42, (uint64_t)&v17[5 * v31 + 4]);
                --v26;
              }
              while (v26);
              goto LABEL_29;
            }
LABEL_30:
            uint64_t result = swift_bridgeObjectRelease();
            *a5 = _swiftEmptyArrayStorage;
            return result;
          case 1:
            uint64_t v32 = sub_100078EC0(a3, v12, v13, (uint64_t (*)(uint64_t, uint64_t))sub_100086238);
            int64_t v33 = *((void *)v32 + 2);
            if (v33)
            {
              uint64_t v41 = a5;
              uint64_t v45 = _swiftEmptyArrayStorage;
              sub_10007C904(0, v33, 0);
              uint64_t v17 = _swiftEmptyArrayStorage;
              uint64_t v34 = (__int16 *)((char *)v32 + 36);
              do
              {
                __int16 v35 = *(v34 - 2);
                __int16 v36 = *(v34 - 1);
                __int16 v37 = *v34;
                uint64_t v45 = v17;
                unint64_t v39 = v17[2];
                unint64_t v38 = v17[3];
                if (v39 >= v38 >> 1)
                {
                  sub_10007C904(v38 > 1, v39 + 1, 1);
                  uint64_t v17 = v45;
                }
                v34 += 3;
                uint64_t v43 = &type metadata for AudioClassRange16bit;
                id v44 = &off_100119F80;
                LOWORD(v42) = v35;
                WORD1(v42) = v36;
                WORD2(v42) = v37;
                _WORD v17[2] = v39 + 1;
                sub_10000CF6C(&v42, (uint64_t)&v17[5 * v39 + 4]);
                --v33;
              }
              while (v33);
              goto LABEL_29;
            }
            goto LABEL_30;
          case 0:
            uint64_t v15 = sub_1000799DC(a3, v12, v13, (uint64_t (*)(uint64_t, uint64_t))sub_10008613C);
            int64_t v16 = *((void *)v15 + 2);
            if (v16)
            {
              uint64_t v41 = a5;
              uint64_t v45 = _swiftEmptyArrayStorage;
              sub_10007C904(0, v16, 0);
              uint64_t v17 = _swiftEmptyArrayStorage;
              uint64_t v18 = (char *)v15 + 34;
              do
              {
                char v19 = *(v18 - 2);
                char v20 = *(v18 - 1);
                char v21 = *v18;
                uint64_t v45 = v17;
                unint64_t v23 = v17[2];
                unint64_t v22 = v17[3];
                if (v23 >= v22 >> 1)
                {
                  sub_10007C904(v22 > 1, v23 + 1, 1);
                  uint64_t v17 = v45;
                }
                v18 += 3;
                uint64_t v43 = &type metadata for AudioClassRange8bit;
                id v44 = &off_100119F48;
                LOBYTE(v42) = v19;
                BYTE1(v42) = v20;
                BYTE2(v42) = v21;
                _WORD v17[2] = v23 + 1;
                sub_10000CF6C(&v42, (uint64_t)&v17[5 * v23 + 4]);
                --v16;
              }
              while (v16);
LABEL_29:
              uint64_t result = swift_bridgeObjectRelease();
              *uint64_t v41 = v17;
              return result;
            }
            goto LABEL_30;
        }
        uint64_t v24 = 499;
      }
      else
      {
        uint64_t v24 = 478;
      }
      sub_10000CD54();
      swift_allocError();
      *(unsigned char *)uint64_t v40 = 30;
      *(void *)(v40 + 8) = 0;
      *(void *)(v40 + 16) = 0xE000000000000000;
      *(void *)(v40 + 24) = 0x65676E6152746567;
      *(void *)(v40 + 32) = 0xEA00000000002928;
      *(void *)(v40 + 40) = 0xD00000000000001ELL;
      *(void *)(v40 + 48) = 0x80000001000E4750;
      *(void *)(v40 + 56) = v24;
      return swift_willThrow();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

__int16 *sub_100075CE8(__int16 *a1, unsigned char *a2, uint64_t a3)
{
  if ((uint64_t)(a1 + 0x2000000000000000) < 0)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (a2)
  {
    unint64_t v4 = a1;
    uint64_t v6 = 2 * (void)a1;
    sub_1000AC7BC((uint64_t)a2, a3, 2 * (void)a1);
    if (!v3)
    {
      uint64_t v7 = sub_1000823F8(a2, v6);
      uint64_t v9 = v7;
      unint64_t v10 = v8;
      switch(v8 >> 62)
      {
        case 1uLL:
          if ((int)v7 > v7 >> 32) {
            goto LABEL_22;
          }
          sub_100054104(v7, v8);
          uint64_t v15 = (__int16 *)__DataStorage._bytes.getter();
          if (!v15) {
            goto LABEL_18;
          }
          uint64_t v16 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v9, v16)) {
            goto LABEL_24;
          }
          uint64_t v15 = (__int16 *)((char *)v15 + (int)v9 - v16);
LABEL_18:
          __DataStorage._length.getter();
          unint64_t v4 = sub_1000824AC(v15, (int64_t)v4);
          sub_100038688(v9, v10);
LABEL_19:
          sub_100038688(v9, v10);
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v7 + 16);
          swift_retain();
          swift_retain();
          uint64_t v13 = (__int16 *)__DataStorage._bytes.getter();
          if (!v13) {
            goto LABEL_11;
          }
          uint64_t v14 = __DataStorage._offset.getter();
          if (__OFSUB__(v12, v14)) {
            goto LABEL_23;
          }
          uint64_t v13 = (__int16 *)((char *)v13 + v12 - v14);
LABEL_11:
          __DataStorage._length.getter();
          unint64_t v4 = sub_1000824AC(v13, (int64_t)v4);
          swift_release();
          swift_release();
          goto LABEL_19;
        case 3uLL:
          memset(v18, 0, 14);
          goto LABEL_13;
        default:
          v18[0] = v7;
          LOWORD(v18[1]) = v8;
          BYTE2(v18[1]) = BYTE2(v8);
          BYTE3(v18[1]) = BYTE3(v8);
          BYTE4(v18[1]) = BYTE4(v8);
          BYTE5(v18[1]) = BYTE5(v8);
LABEL_13:
          unint64_t v4 = sub_1000824AC((__int16 *)v18, (int64_t)v4);
          goto LABEL_19;
      }
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v11 = 50;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = 0xE000000000000000;
    *(void *)(v11 + 24) = 0xD00000000000001BLL;
    *(void *)(v11 + 32) = 0x80000001000E4810;
    *(void *)(v11 + 40) = 0xD00000000000001FLL;
    *(void *)(v11 + 48) = 0x80000001000E4830;
    *(void *)(v11 + 56) = 702;
    swift_willThrow();
  }
  return v4;
}

unsigned char *sub_100076000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000760E8(a1, a2, a3, (uint64_t)sub_10007C42C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000845A8);
}

unsigned char *sub_100076074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000760E8(a1, a2, a3, (uint64_t)sub_10007C454, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000845A8);
}

unsigned char *sub_1000760E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if ((unint64_t)(a1 - 0x2000000000000000) >> 62 != 3)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v6 = (unsigned char *)a2;
  if (!a2)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v15 = 50;
    *(void *)(v15 + 8) = 0;
    *(void *)(v15 + 16) = 0xE000000000000000;
    *(void *)(v15 + 24) = 0xD00000000000001BLL;
    *(void *)(v15 + 32) = 0x80000001000E4810;
    *(void *)(v15 + 40) = 0xD00000000000001FLL;
    *(void *)(v15 + 48) = 0x80000001000E4830;
    *(void *)(v15 + 56) = 702;
    swift_willThrow();
    return v6;
  }
  uint64_t v10 = 4 * a1;
  sub_1000AC7BC(a2, a3, 4 * a1);
  if (!v5)
  {
    uint64_t v11 = sub_1000823F8(v6, v10);
    uint64_t v13 = v11;
    unint64_t v14 = v12;
    switch(v12 >> 62)
    {
      case 1uLL:
        uint64_t v25 = (int)v11;
        if ((int)v11 > v11 >> 32) {
          goto LABEL_24;
        }
        sub_100054104(v11, v12);
        uint64_t v18 = __DataStorage._bytes.getter();
        if (!v18)
        {
          uint64_t v26 = 0;
          goto LABEL_20;
        }
        uint64_t v24 = v18;
        uint64_t v19 = __DataStorage._offset.getter();
        if (!__OFSUB__(v25, v19))
        {
          uint64_t v26 = v24 + v25 - v19;
LABEL_20:
          __DataStorage._length.getter();
          uint64_t v6 = (unsigned char *)a5(v26, a1, a4);
          sub_100038688(v13, v14);
          goto LABEL_21;
        }
        goto LABEL_26;
      case 2uLL:
        uint64_t v22 = *(void *)(v11 + 16);
        swift_retain();
        swift_retain();
        uint64_t v16 = __DataStorage._bytes.getter();
        if (!v16)
        {
          uint64_t v23 = 0;
          goto LABEL_18;
        }
        uint64_t v21 = v16;
        uint64_t v17 = __DataStorage._offset.getter();
        if (!__OFSUB__(v22, v17))
        {
          uint64_t v23 = v21 + v22 - v17;
LABEL_18:
          __DataStorage._length.getter();
          uint64_t v6 = (unsigned char *)a5(v23, a1, a4);
          swift_release();
          swift_release();
LABEL_21:
          sub_100038688(v13, v14);
          return v6;
        }
        break;
      case 3uLL:
        memset(v27, 0, 14);
        goto LABEL_12;
      default:
        v27[0] = v11;
        LOWORD(v27[1]) = v12;
        BYTE2(v27[1]) = BYTE2(v12);
        BYTE3(v27[1]) = BYTE3(v12);
        BYTE4(v27[1]) = BYTE4(v12);
        BYTE5(v27[1]) = BYTE5(v12);
LABEL_12:
        uint64_t v6 = (unsigned char *)a5((uint64_t)v27, a1, a4);
        goto LABEL_21;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return v6;
}

uint64_t (*sub_100076460(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_10007BFD4(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_100082580);
}

uint64_t (*sub_1000764C0(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_10007A5C4(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_1000826CC);
}

void *sub_100076520(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v5 = 17 * a1;
  if ((unsigned __int128)(a1 * (__int128)17) >> 64 != (17 * a1) >> 63)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (a2)
  {
    unint64_t v4 = (void *)a1;
    sub_1000AC7BC((uint64_t)a2, a3, v5);
    if (!v3)
    {
      uint64_t v7 = sub_1000823F8(a2, v5);
      uint64_t v9 = v7;
      unint64_t v10 = v8;
      switch(v8 >> 62)
      {
        case 1uLL:
          if ((int)v7 > v7 >> 32) {
            goto LABEL_22;
          }
          sub_100054104(v7, v8);
          uint64_t v15 = (void *)__DataStorage._bytes.getter();
          if (!v15) {
            goto LABEL_18;
          }
          uint64_t v16 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v9, v16)) {
            goto LABEL_24;
          }
          uint64_t v15 = (void *)((char *)v15 + (int)v9 - v16);
LABEL_18:
          __DataStorage._length.getter();
          unint64_t v4 = sub_100082C18(v15, (int64_t)v4);
          sub_100038688(v9, v10);
LABEL_19:
          sub_100038688(v9, v10);
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v7 + 16);
          swift_retain();
          swift_retain();
          uint64_t v13 = (void *)__DataStorage._bytes.getter();
          if (!v13) {
            goto LABEL_11;
          }
          uint64_t v14 = __DataStorage._offset.getter();
          if (__OFSUB__(v12, v14)) {
            goto LABEL_23;
          }
          uint64_t v13 = (void *)((char *)v13 + v12 - v14);
LABEL_11:
          __DataStorage._length.getter();
          unint64_t v4 = sub_100082C18(v13, (int64_t)v4);
          swift_release();
          swift_release();
          goto LABEL_19;
        case 3uLL:
          memset(v18, 0, 14);
          goto LABEL_13;
        default:
          v18[0] = v7;
          LOWORD(v18[1]) = v8;
          BYTE2(v18[1]) = BYTE2(v8);
          BYTE3(v18[1]) = BYTE3(v8);
          BYTE4(v18[1]) = BYTE4(v8);
          BYTE5(v18[1]) = BYTE5(v8);
LABEL_13:
          unint64_t v4 = sub_100082C18(v18, (int64_t)v4);
          goto LABEL_19;
      }
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v11 = 50;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = 0xE000000000000000;
    *(void *)(v11 + 24) = 0xD00000000000001BLL;
    *(void *)(v11 + 32) = 0x80000001000E4810;
    *(void *)(v11 + 40) = 0xD00000000000001FLL;
    *(void *)(v11 + 48) = 0x80000001000E4830;
    *(void *)(v11 + 56) = 702;
    swift_willThrow();
  }
  return v4;
}

uint64_t (*sub_10007683C(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_10007BFD4(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_100082D78);
}

uint64_t (*sub_10007689C(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_100078A4C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_1000831DC);
}

void *sub_1000768FC(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v5 = 20 * a1;
  if ((unsigned __int128)(a1 * (__int128)20) >> 64 != (20 * a1) >> 63)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (a2)
  {
    unint64_t v4 = (void *)a1;
    sub_1000AC7BC((uint64_t)a2, a3, v5);
    if (!v3)
    {
      uint64_t v7 = sub_1000823F8(a2, v5);
      uint64_t v9 = v7;
      unint64_t v10 = v8;
      switch(v8 >> 62)
      {
        case 1uLL:
          if ((int)v7 > v7 >> 32) {
            goto LABEL_22;
          }
          sub_100054104(v7, v8);
          uint64_t v15 = (void *)__DataStorage._bytes.getter();
          if (!v15) {
            goto LABEL_18;
          }
          uint64_t v16 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v9, v16)) {
            goto LABEL_24;
          }
          uint64_t v15 = (void *)((char *)v15 + (int)v9 - v16);
LABEL_18:
          __DataStorage._length.getter();
          unint64_t v4 = sub_1000834BC(v15, (int64_t)v4);
          sub_100038688(v9, v10);
LABEL_19:
          sub_100038688(v9, v10);
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v7 + 16);
          swift_retain();
          swift_retain();
          uint64_t v13 = (void *)__DataStorage._bytes.getter();
          if (!v13) {
            goto LABEL_11;
          }
          uint64_t v14 = __DataStorage._offset.getter();
          if (__OFSUB__(v12, v14)) {
            goto LABEL_23;
          }
          uint64_t v13 = (void *)((char *)v13 + v12 - v14);
LABEL_11:
          __DataStorage._length.getter();
          unint64_t v4 = sub_1000834BC(v13, (int64_t)v4);
          swift_release();
          swift_release();
          goto LABEL_19;
        case 3uLL:
          memset(v18, 0, 14);
          goto LABEL_13;
        default:
          v18[0] = v7;
          LOWORD(v18[1]) = v8;
          BYTE2(v18[1]) = BYTE2(v8);
          BYTE3(v18[1]) = BYTE3(v8);
          BYTE4(v18[1]) = BYTE4(v8);
          BYTE5(v18[1]) = BYTE5(v8);
LABEL_13:
          unint64_t v4 = sub_1000834BC(v18, (int64_t)v4);
          goto LABEL_19;
      }
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v11 = 50;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = 0xE000000000000000;
    *(void *)(v11 + 24) = 0xD00000000000001BLL;
    *(void *)(v11 + 32) = 0x80000001000E4810;
    *(void *)(v11 + 40) = 0xD00000000000001FLL;
    *(void *)(v11 + 48) = 0x80000001000E4830;
    *(void *)(v11 + 56) = 702;
    swift_willThrow();
  }
  return v4;
}

void *sub_100076C1C(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v5 = 19 * a1;
  if ((unsigned __int128)(a1 * (__int128)19) >> 64 != (19 * a1) >> 63)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (a2)
  {
    unint64_t v4 = (void *)a1;
    sub_1000AC7BC((uint64_t)a2, a3, v5);
    if (!v3)
    {
      uint64_t v7 = sub_1000823F8(a2, v5);
      uint64_t v9 = v7;
      unint64_t v10 = v8;
      switch(v8 >> 62)
      {
        case 1uLL:
          if ((int)v7 > v7 >> 32) {
            goto LABEL_22;
          }
          sub_100054104(v7, v8);
          uint64_t v15 = (void *)__DataStorage._bytes.getter();
          if (!v15) {
            goto LABEL_18;
          }
          uint64_t v16 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v9, v16)) {
            goto LABEL_24;
          }
          uint64_t v15 = (void *)((char *)v15 + (int)v9 - v16);
LABEL_18:
          __DataStorage._length.getter();
          unint64_t v4 = sub_1000835F8(v15, (int64_t)v4);
          sub_100038688(v9, v10);
LABEL_19:
          sub_100038688(v9, v10);
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v7 + 16);
          swift_retain();
          swift_retain();
          uint64_t v13 = (void *)__DataStorage._bytes.getter();
          if (!v13) {
            goto LABEL_11;
          }
          uint64_t v14 = __DataStorage._offset.getter();
          if (__OFSUB__(v12, v14)) {
            goto LABEL_23;
          }
          uint64_t v13 = (void *)((char *)v13 + v12 - v14);
LABEL_11:
          __DataStorage._length.getter();
          unint64_t v4 = sub_1000835F8(v13, (int64_t)v4);
          swift_release();
          swift_release();
          goto LABEL_19;
        case 3uLL:
          memset(v18, 0, 14);
          goto LABEL_13;
        default:
          v18[0] = v7;
          LOWORD(v18[1]) = v8;
          BYTE2(v18[1]) = BYTE2(v8);
          BYTE3(v18[1]) = BYTE3(v8);
          BYTE4(v18[1]) = BYTE4(v8);
          BYTE5(v18[1]) = BYTE5(v8);
LABEL_13:
          unint64_t v4 = sub_1000835F8(v18, (int64_t)v4);
          goto LABEL_19;
      }
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v11 = 50;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = 0xE000000000000000;
    *(void *)(v11 + 24) = 0xD00000000000001BLL;
    *(void *)(v11 + 32) = 0x80000001000E4810;
    *(void *)(v11 + 40) = 0xD00000000000001FLL;
    *(void *)(v11 + 48) = 0x80000001000E4830;
    *(void *)(v11 + 56) = 702;
    swift_willThrow();
  }
  return v4;
}

uint64_t (*sub_100076F38(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_10007BFD4(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_100083990);
}

void *sub_100076F98(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v5 = 11 * a1;
  if ((unsigned __int128)(a1 * (__int128)11) >> 64 != (11 * a1) >> 63)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (a2)
  {
    unint64_t v4 = (void *)a1;
    sub_1000AC7BC((uint64_t)a2, a3, v5);
    if (!v3)
    {
      uint64_t v7 = sub_1000823F8(a2, v5);
      uint64_t v9 = v7;
      unint64_t v10 = v8;
      switch(v8 >> 62)
      {
        case 1uLL:
          if ((int)v7 > v7 >> 32) {
            goto LABEL_22;
          }
          sub_100054104(v7, v8);
          uint64_t v15 = (void *)__DataStorage._bytes.getter();
          if (!v15) {
            goto LABEL_18;
          }
          uint64_t v16 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v9, v16)) {
            goto LABEL_24;
          }
          uint64_t v15 = (void *)((char *)v15 + (int)v9 - v16);
LABEL_18:
          __DataStorage._length.getter();
          unint64_t v4 = sub_100083CC8(v15, (int64_t)v4);
          sub_100038688(v9, v10);
LABEL_19:
          sub_100038688(v9, v10);
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v7 + 16);
          swift_retain();
          swift_retain();
          uint64_t v13 = (void *)__DataStorage._bytes.getter();
          if (!v13) {
            goto LABEL_11;
          }
          uint64_t v14 = __DataStorage._offset.getter();
          if (__OFSUB__(v12, v14)) {
            goto LABEL_23;
          }
          uint64_t v13 = (void *)((char *)v13 + v12 - v14);
LABEL_11:
          __DataStorage._length.getter();
          unint64_t v4 = sub_100083CC8(v13, (int64_t)v4);
          swift_release();
          swift_release();
          goto LABEL_19;
        case 3uLL:
          memset(v18, 0, 14);
          goto LABEL_13;
        default:
          v18[0] = v7;
          LOWORD(v18[1]) = v8;
          BYTE2(v18[1]) = BYTE2(v8);
          BYTE3(v18[1]) = BYTE3(v8);
          BYTE4(v18[1]) = BYTE4(v8);
          BYTE5(v18[1]) = BYTE5(v8);
LABEL_13:
          unint64_t v4 = sub_100083CC8(v18, (int64_t)v4);
          goto LABEL_19;
      }
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v11 = 50;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = 0xE000000000000000;
    *(void *)(v11 + 24) = 0xD00000000000001BLL;
    *(void *)(v11 + 32) = 0x80000001000E4810;
    *(void *)(v11 + 40) = 0xD00000000000001FLL;
    *(void *)(v11 + 48) = 0x80000001000E4830;
    *(void *)(v11 + 56) = 702;
    swift_willThrow();
  }
  return v4;
}

uint64_t (*sub_1000772B4(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_10007B124(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_100083F04);
}

void *sub_100077314(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v5 = 18 * a1;
  if ((unsigned __int128)(a1 * (__int128)18) >> 64 != (18 * a1) >> 63)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (a2)
  {
    unint64_t v4 = (void *)a1;
    sub_1000AC7BC((uint64_t)a2, a3, v5);
    if (!v3)
    {
      uint64_t v7 = sub_1000823F8(a2, v5);
      uint64_t v9 = v7;
      unint64_t v10 = v8;
      switch(v8 >> 62)
      {
        case 1uLL:
          if ((int)v7 > v7 >> 32) {
            goto LABEL_22;
          }
          sub_100054104(v7, v8);
          uint64_t v15 = (void *)__DataStorage._bytes.getter();
          if (!v15) {
            goto LABEL_18;
          }
          uint64_t v16 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v9, v16)) {
            goto LABEL_24;
          }
          uint64_t v15 = (void *)((char *)v15 + (int)v9 - v16);
LABEL_18:
          __DataStorage._length.getter();
          unint64_t v4 = sub_100084018(v15, (int64_t)v4);
          sub_100038688(v9, v10);
LABEL_19:
          sub_100038688(v9, v10);
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v7 + 16);
          swift_retain();
          swift_retain();
          uint64_t v13 = (void *)__DataStorage._bytes.getter();
          if (!v13) {
            goto LABEL_11;
          }
          uint64_t v14 = __DataStorage._offset.getter();
          if (__OFSUB__(v12, v14)) {
            goto LABEL_23;
          }
          uint64_t v13 = (void *)((char *)v13 + v12 - v14);
LABEL_11:
          __DataStorage._length.getter();
          unint64_t v4 = sub_100084018(v13, (int64_t)v4);
          swift_release();
          swift_release();
          goto LABEL_19;
        case 3uLL:
          memset(v18, 0, 14);
          goto LABEL_13;
        default:
          v18[0] = v7;
          LOWORD(v18[1]) = v8;
          BYTE2(v18[1]) = BYTE2(v8);
          BYTE3(v18[1]) = BYTE3(v8);
          BYTE4(v18[1]) = BYTE4(v8);
          BYTE5(v18[1]) = BYTE5(v8);
LABEL_13:
          unint64_t v4 = sub_100084018(v18, (int64_t)v4);
          goto LABEL_19;
      }
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v11 = 50;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = 0xE000000000000000;
    *(void *)(v11 + 24) = 0xD00000000000001BLL;
    *(void *)(v11 + 32) = 0x80000001000E4810;
    *(void *)(v11 + 40) = 0xD00000000000001FLL;
    *(void *)(v11 + 48) = 0x80000001000E4830;
    *(void *)(v11 + 56) = 702;
    swift_willThrow();
  }
  return v4;
}

uint64_t (*sub_100077634(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_100077694(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_100082EC4);
}

uint64_t (*sub_100077694(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t)))(uint64_t, uint64_t)
{
  if ((unint64_t)(a1 - 0x2000000000000000) >> 62 != 3)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (a2)
  {
    uint64_t v5 = a4;
    uint64_t v8 = 4 * a1;
    sub_1000AC7BC((uint64_t)a2, a3, 4 * a1);
    if (!v4)
    {
      uint64_t v9 = sub_1000823F8(a2, v8);
      uint64_t v11 = v9;
      unint64_t v12 = v10;
      switch(v10 >> 62)
      {
        case 1uLL:
          uint64_t v20 = (int)v9;
          if ((int)v9 > v9 >> 32) {
            goto LABEL_22;
          }
          sub_100054104(v9, v10);
          uint64_t v16 = __DataStorage._bytes.getter();
          if (!v16) {
            goto LABEL_18;
          }
          uint64_t v17 = __DataStorage._offset.getter();
          if (__OFSUB__(v20, v17)) {
            goto LABEL_24;
          }
          v16 += v20 - v17;
LABEL_18:
          __DataStorage._length.getter();
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5(v16, a1);
          sub_100038688(v11, v12);
LABEL_19:
          sub_100038688(v11, v12);
          break;
        case 2uLL:
          uint64_t v19 = *(void *)(v9 + 16);
          swift_retain();
          swift_retain();
          uint64_t v14 = __DataStorage._bytes.getter();
          if (!v14) {
            goto LABEL_11;
          }
          uint64_t v15 = __DataStorage._offset.getter();
          if (__OFSUB__(v19, v15)) {
            goto LABEL_23;
          }
          v14 += v19 - v15;
LABEL_11:
          __DataStorage._length.getter();
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5(v14, a1);
          swift_release();
          swift_release();
          goto LABEL_19;
        case 3uLL:
          memset(v21, 0, 14);
          goto LABEL_13;
        default:
          v21[0] = v9;
          LOWORD(v21[1]) = v10;
          BYTE2(v21[1]) = BYTE2(v10);
          BYTE3(v21[1]) = BYTE3(v10);
          BYTE4(v21[1]) = BYTE4(v10);
          BYTE5(v21[1]) = BYTE5(v10);
LABEL_13:
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5((uint64_t)v21, a1);
          goto LABEL_19;
      }
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v13 = 50;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0xE000000000000000;
    *(void *)(v13 + 24) = 0xD00000000000001BLL;
    *(void *)(v13 + 32) = 0x80000001000E4810;
    *(void *)(v13 + 40) = 0xD00000000000001FLL;
    *(void *)(v13 + 48) = 0x80000001000E4830;
    *(void *)(v13 + 56) = 702;
    swift_willThrow();
  }
  return v5;
}

uint64_t (*sub_1000779D4(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_10007BBC0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_10008439C);
}

void (*sub_100077A34(uint64_t a1, unsigned char *a2, uint64_t a3))(BOOL, uint64_t, uint64_t)
{
  return sub_100077A94(a1, a2, a3, (void (*)(BOOL, uint64_t, uint64_t))sub_10007C6C4);
}

void (*sub_100077A94(uint64_t a1, unsigned char *a2, uint64_t a3, void (*a4)(BOOL, uint64_t, uint64_t)))(BOOL, uint64_t, uint64_t)
{
  if (a1 + 0x4000000000000000 < 0)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (a2)
  {
    uint64_t v5 = a4;
    uint64_t v8 = 2 * a1;
    sub_1000AC7BC((uint64_t)a2, a3, 2 * a1);
    if (!v4)
    {
      uint64_t v9 = sub_1000823F8(a2, v8);
      uint64_t v11 = v9;
      unint64_t v12 = v10;
      switch(v10 >> 62)
      {
        case 1uLL:
          uint64_t v20 = (int)v9;
          if ((int)v9 > v9 >> 32) {
            goto LABEL_22;
          }
          sub_100054104(v9, v10);
          uint64_t v16 = (void *)__DataStorage._bytes.getter();
          if (!v16) {
            goto LABEL_18;
          }
          uint64_t v17 = __DataStorage._offset.getter();
          if (__OFSUB__(v20, v17)) {
            goto LABEL_24;
          }
          uint64_t v16 = (void *)((char *)v16 + v20 - v17);
LABEL_18:
          __DataStorage._length.getter();
          uint64_t v5 = (void (*)(BOOL, uint64_t, uint64_t))sub_1000833BC(v16, a1, v5);
          sub_100038688(v11, v12);
LABEL_19:
          sub_100038688(v11, v12);
          break;
        case 2uLL:
          uint64_t v19 = *(void *)(v9 + 16);
          swift_retain();
          swift_retain();
          uint64_t v14 = (void *)__DataStorage._bytes.getter();
          if (!v14) {
            goto LABEL_11;
          }
          uint64_t v15 = __DataStorage._offset.getter();
          if (__OFSUB__(v19, v15)) {
            goto LABEL_23;
          }
          uint64_t v14 = (void *)((char *)v14 + v19 - v15);
LABEL_11:
          __DataStorage._length.getter();
          uint64_t v5 = (void (*)(BOOL, uint64_t, uint64_t))sub_1000833BC(v14, a1, v5);
          swift_release();
          swift_release();
          goto LABEL_19;
        case 3uLL:
          memset(v21, 0, 14);
          goto LABEL_13;
        default:
          v21[0] = v9;
          LOWORD(v21[1]) = v10;
          BYTE2(v21[1]) = BYTE2(v10);
          BYTE3(v21[1]) = BYTE3(v10);
          BYTE4(v21[1]) = BYTE4(v10);
          BYTE5(v21[1]) = BYTE5(v10);
LABEL_13:
          uint64_t v5 = (void (*)(BOOL, uint64_t, uint64_t))sub_1000833BC(v21, a1, v5);
          goto LABEL_19;
      }
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v13 = 50;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0xE000000000000000;
    *(void *)(v13 + 24) = 0xD00000000000001BLL;
    *(void *)(v13 + 32) = 0x80000001000E4810;
    *(void *)(v13 + 40) = 0xD00000000000001FLL;
    *(void *)(v13 + 48) = 0x80000001000E4830;
    *(void *)(v13 + 56) = 702;
    swift_willThrow();
  }
  return v5;
}

unsigned char *sub_100077DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100077E40(a1, a2, a3, (uint64_t)sub_10007C6EC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100086438);
}

unsigned char *sub_100077E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = 6 * a1;
  if ((unsigned __int128)(a1 * (__int128)6) >> 64 != (6 * a1) >> 63)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v7 = (unsigned char *)a2;
  if (!a2)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v15 = 50;
    *(void *)(v15 + 8) = 0;
    *(void *)(v15 + 16) = 0xE000000000000000;
    *(void *)(v15 + 24) = 0xD00000000000001BLL;
    *(void *)(v15 + 32) = 0x80000001000E4810;
    *(void *)(v15 + 40) = 0xD00000000000001FLL;
    *(void *)(v15 + 48) = 0x80000001000E4830;
    *(void *)(v15 + 56) = 702;
    swift_willThrow();
    return v7;
  }
  sub_1000AC7BC(a2, a3, v6);
  if (!v5)
  {
    uint64_t v11 = sub_1000823F8(v7, v6);
    uint64_t v13 = v11;
    unint64_t v14 = v12;
    switch(v12 >> 62)
    {
      case 1uLL:
        uint64_t v25 = (int)v11;
        if ((int)v11 > v11 >> 32) {
          goto LABEL_24;
        }
        sub_100054104(v11, v12);
        uint64_t v18 = __DataStorage._bytes.getter();
        if (!v18)
        {
          uint64_t v26 = 0;
          goto LABEL_20;
        }
        uint64_t v24 = v18;
        uint64_t v19 = __DataStorage._offset.getter();
        if (!__OFSUB__(v25, v19))
        {
          uint64_t v26 = v24 + v25 - v19;
LABEL_20:
          __DataStorage._length.getter();
          uint64_t v7 = (unsigned char *)a5(v26, a1, a4);
          sub_100038688(v13, v14);
          goto LABEL_21;
        }
        goto LABEL_26;
      case 2uLL:
        uint64_t v22 = *(void *)(v11 + 16);
        swift_retain();
        swift_retain();
        uint64_t v16 = __DataStorage._bytes.getter();
        if (!v16)
        {
          uint64_t v23 = 0;
          goto LABEL_18;
        }
        uint64_t v21 = v16;
        uint64_t v17 = __DataStorage._offset.getter();
        if (!__OFSUB__(v22, v17))
        {
          uint64_t v23 = v21 + v22 - v17;
LABEL_18:
          __DataStorage._length.getter();
          uint64_t v7 = (unsigned char *)a5(v23, a1, a4);
          swift_release();
          swift_release();
LABEL_21:
          sub_100038688(v13, v14);
          return v7;
        }
        break;
      case 3uLL:
        memset(v27, 0, 14);
        goto LABEL_12;
      default:
        v27[0] = v11;
        LOWORD(v27[1]) = v12;
        BYTE2(v27[1]) = BYTE2(v12);
        BYTE3(v27[1]) = BYTE3(v12);
        BYTE4(v27[1]) = BYTE4(v12);
        BYTE5(v27[1]) = BYTE5(v12);
LABEL_12:
        uint64_t v7 = (unsigned char *)a5((uint64_t)v27, a1, a4);
        goto LABEL_21;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return v7;
}

char *sub_1000781B8(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  if (!a2)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v10 = 50;
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0xE000000000000000;
    *(void *)(v10 + 24) = 0xD00000000000001BLL;
    *(void *)(v10 + 32) = 0x80000001000E4810;
    *(void *)(v10 + 40) = 0xD00000000000001FLL;
    *(void *)(v10 + 48) = 0x80000001000E4830;
    *(void *)(v10 + 56) = 702;
    swift_willThrow();
    return v4;
  }
  uint64_t v4 = (char *)a1;
  sub_1000AC7BC((uint64_t)a2, a3, a1);
  if (!v3)
  {
    uint64_t v6 = sub_1000823F8(a2, (uint64_t)v4);
    uint64_t v8 = v6;
    unint64_t v9 = v7;
    switch(v7 >> 62)
    {
      case 1uLL:
        if ((int)v6 > v6 >> 32)
        {
          __break(1u);
LABEL_21:
          __break(1u);
        }
        else
        {
          sub_100054104(v6, v7);
          unint64_t v14 = (char *)__DataStorage._bytes.getter();
          if (!v14) {
            goto LABEL_17;
          }
          uint64_t v15 = __DataStorage._offset.getter();
          if (!__OFSUB__((int)v8, v15))
          {
            v14 += (int)v8 - v15;
LABEL_17:
            __DataStorage._length.getter();
            uint64_t v4 = sub_1000827F4(v14, (int64_t)v4);
            sub_100038688(v8, v9);
LABEL_18:
            sub_100038688(v8, v9);
            return v4;
          }
        }
        __break(1u);
        return result;
      case 2uLL:
        uint64_t v11 = *(void *)(v6 + 16);
        swift_retain();
        swift_retain();
        unint64_t v12 = (char *)__DataStorage._bytes.getter();
        if (!v12) {
          goto LABEL_10;
        }
        uint64_t v13 = __DataStorage._offset.getter();
        if (__OFSUB__(v11, v13)) {
          goto LABEL_21;
        }
        v12 += v11 - v13;
LABEL_10:
        __DataStorage._length.getter();
        uint64_t v4 = sub_1000827F4(v12, (int64_t)v4);
        swift_release();
        swift_release();
        goto LABEL_18;
      case 3uLL:
        memset(v17, 0, 14);
        goto LABEL_12;
      default:
        v17[0] = v6;
        LOWORD(v17[1]) = v7;
        BYTE2(v17[1]) = BYTE2(v7);
        BYTE3(v17[1]) = BYTE3(v7);
        BYTE4(v17[1]) = BYTE4(v7);
        BYTE5(v17[1]) = BYTE5(v7);
LABEL_12:
        uint64_t v4 = sub_1000827F4((char *)v17, (int64_t)v4);
        goto LABEL_18;
    }
  }
  return v4;
}

unsigned char *sub_1000784BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100078604(a1, a2, a3, (uint64_t)sub_10007C734, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000832B4);
}

void (*sub_100078530(uint64_t a1, unsigned char *a2, uint64_t a3))(BOOL, uint64_t, uint64_t)
{
  return sub_100077A94(a1, a2, a3, (void (*)(BOOL, uint64_t, uint64_t))sub_10007C75C);
}

unsigned char *sub_100078590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100078604(a1, a2, a3, (uint64_t)sub_10007C784, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000832B4);
}

unsigned char *sub_100078604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = 5 * a1;
  if ((unsigned __int128)(a1 * (__int128)5) >> 64 != (5 * a1) >> 63)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v7 = (unsigned char *)a2;
  if (!a2)
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v15 = 50;
    *(void *)(v15 + 8) = 0;
    *(void *)(v15 + 16) = 0xE000000000000000;
    *(void *)(v15 + 24) = 0xD00000000000001BLL;
    *(void *)(v15 + 32) = 0x80000001000E4810;
    *(void *)(v15 + 40) = 0xD00000000000001FLL;
    *(void *)(v15 + 48) = 0x80000001000E4830;
    *(void *)(v15 + 56) = 702;
    swift_willThrow();
    return v7;
  }
  sub_1000AC7BC(a2, a3, v6);
  if (!v5)
  {
    uint64_t v11 = sub_1000823F8(v7, v6);
    uint64_t v13 = v11;
    unint64_t v14 = v12;
    switch(v12 >> 62)
    {
      case 1uLL:
        uint64_t v25 = (int)v11;
        if ((int)v11 > v11 >> 32) {
          goto LABEL_24;
        }
        sub_100054104(v11, v12);
        uint64_t v18 = __DataStorage._bytes.getter();
        if (!v18)
        {
          uint64_t v26 = 0;
          goto LABEL_20;
        }
        uint64_t v24 = v18;
        uint64_t v19 = __DataStorage._offset.getter();
        if (!__OFSUB__(v25, v19))
        {
          uint64_t v26 = v24 + v25 - v19;
LABEL_20:
          __DataStorage._length.getter();
          unint64_t v7 = (unsigned char *)a5(v26, a1, a4);
          sub_100038688(v13, v14);
          goto LABEL_21;
        }
        goto LABEL_26;
      case 2uLL:
        uint64_t v22 = *(void *)(v11 + 16);
        swift_retain();
        swift_retain();
        uint64_t v16 = __DataStorage._bytes.getter();
        if (!v16)
        {
          uint64_t v23 = 0;
          goto LABEL_18;
        }
        uint64_t v21 = v16;
        uint64_t v17 = __DataStorage._offset.getter();
        if (!__OFSUB__(v22, v17))
        {
          uint64_t v23 = v21 + v22 - v17;
LABEL_18:
          __DataStorage._length.getter();
          unint64_t v7 = (unsigned char *)a5(v23, a1, a4);
          swift_release();
          swift_release();
LABEL_21:
          sub_100038688(v13, v14);
          return v7;
        }
        break;
      case 3uLL:
        memset(v27, 0, 14);
        goto LABEL_12;
      default:
        v27[0] = v11;
        LOWORD(v27[1]) = v12;
        BYTE2(v27[1]) = BYTE2(v12);
        BYTE3(v27[1]) = BYTE3(v12);
        BYTE4(v27[1]) = BYTE4(v12);
        BYTE5(v27[1]) = BYTE5(v12);
LABEL_12:
        unint64_t v7 = (unsigned char *)a5((uint64_t)v27, a1, a4);
        goto LABEL_21;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return v7;
}

unsigned char *sub_100078978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100078604(a1, a2, a3, (uint64_t)sub_10007C7AC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000832B4);
}

uint64_t (*sub_1000789EC(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_100078A4C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_1000830B4);
}

uint64_t (*sub_100078A4C(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t)))(uint64_t, uint64_t)
{
  if ((unint64_t)(a1 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (a2)
  {
    uint64_t v5 = a4;
    uint64_t v8 = 8 * a1;
    sub_1000AC7BC((uint64_t)a2, a3, 8 * a1);
    if (!v4)
    {
      uint64_t v9 = sub_1000823F8(a2, v8);
      uint64_t v11 = v9;
      unint64_t v12 = v10;
      switch(v10 >> 62)
      {
        case 1uLL:
          uint64_t v20 = (int)v9;
          if ((int)v9 > v9 >> 32) {
            goto LABEL_22;
          }
          sub_100054104(v9, v10);
          uint64_t v16 = __DataStorage._bytes.getter();
          if (!v16) {
            goto LABEL_18;
          }
          uint64_t v17 = __DataStorage._offset.getter();
          if (__OFSUB__(v20, v17)) {
            goto LABEL_24;
          }
          v16 += v20 - v17;
LABEL_18:
          __DataStorage._length.getter();
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5(v16, a1);
          sub_100038688(v11, v12);
LABEL_19:
          sub_100038688(v11, v12);
          break;
        case 2uLL:
          uint64_t v19 = *(void *)(v9 + 16);
          swift_retain();
          swift_retain();
          uint64_t v14 = __DataStorage._bytes.getter();
          if (!v14) {
            goto LABEL_11;
          }
          uint64_t v15 = __DataStorage._offset.getter();
          if (__OFSUB__(v19, v15)) {
            goto LABEL_23;
          }
          v14 += v19 - v15;
LABEL_11:
          __DataStorage._length.getter();
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5(v14, a1);
          swift_release();
          swift_release();
          goto LABEL_19;
        case 3uLL:
          memset(v21, 0, 14);
          goto LABEL_13;
        default:
          v21[0] = v9;
          LOWORD(v21[1]) = v10;
          BYTE2(v21[1]) = BYTE2(v10);
          BYTE3(v21[1]) = BYTE3(v10);
          BYTE4(v21[1]) = BYTE4(v10);
          BYTE5(v21[1]) = BYTE5(v10);
LABEL_13:
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5((uint64_t)v21, a1);
          goto LABEL_19;
      }
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v13 = 50;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0xE000000000000000;
    *(void *)(v13 + 24) = 0xD00000000000001BLL;
    *(void *)(v13 + 32) = 0x80000001000E4810;
    *(void *)(v13 + 40) = 0xD00000000000001FLL;
    *(void *)(v13 + 48) = 0x80000001000E4830;
    *(void *)(v13 + 56) = 702;
    swift_willThrow();
  }
  return v5;
}

uint64_t (*sub_100078D8C(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_1000795DC(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_100082F98);
}

void (*sub_100078DEC(uint64_t a1, unsigned char *a2, uint64_t a3))(BOOL, uint64_t, uint64_t)
{
  return sub_100077A94(a1, a2, a3, (void (*)(BOOL, uint64_t, uint64_t))sub_10007C81C);
}

unsigned char *sub_100078E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100078604(a1, a2, a3, (uint64_t)sub_10007C844, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1000832B4);
}

uint64_t (*sub_100078EC0(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t)))(uint64_t, uint64_t)
{
  uint64_t v6 = 6 * a1;
  if ((unsigned __int128)(a1 * (__int128)6) >> 64 != (6 * a1) >> 63)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (a2)
  {
    uint64_t v5 = a4;
    sub_1000AC7BC((uint64_t)a2, a3, v6);
    if (!v4)
    {
      uint64_t v9 = sub_1000823F8(a2, v6);
      uint64_t v11 = v9;
      unint64_t v12 = v10;
      switch(v10 >> 62)
      {
        case 1uLL:
          uint64_t v20 = (int)v9;
          if ((int)v9 > v9 >> 32) {
            goto LABEL_22;
          }
          sub_100054104(v9, v10);
          uint64_t v16 = __DataStorage._bytes.getter();
          if (!v16) {
            goto LABEL_18;
          }
          uint64_t v17 = __DataStorage._offset.getter();
          if (__OFSUB__(v20, v17)) {
            goto LABEL_24;
          }
          v16 += v20 - v17;
LABEL_18:
          __DataStorage._length.getter();
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5(v16, a1);
          sub_100038688(v11, v12);
LABEL_19:
          sub_100038688(v11, v12);
          break;
        case 2uLL:
          uint64_t v19 = *(void *)(v9 + 16);
          swift_retain();
          swift_retain();
          uint64_t v14 = __DataStorage._bytes.getter();
          if (!v14) {
            goto LABEL_11;
          }
          uint64_t v15 = __DataStorage._offset.getter();
          if (__OFSUB__(v19, v15)) {
            goto LABEL_23;
          }
          v14 += v19 - v15;
LABEL_11:
          __DataStorage._length.getter();
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5(v14, a1);
          swift_release();
          swift_release();
          goto LABEL_19;
        case 3uLL:
          memset(v21, 0, 14);
          goto LABEL_13;
        default:
          v21[0] = v9;
          LOWORD(v21[1]) = v10;
          BYTE2(v21[1]) = BYTE2(v10);
          BYTE3(v21[1]) = BYTE3(v10);
          BYTE4(v21[1]) = BYTE4(v10);
          BYTE5(v21[1]) = BYTE5(v10);
LABEL_13:
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5((uint64_t)v21, a1);
          goto LABEL_19;
      }
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v13 = 50;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0xE000000000000000;
    *(void *)(v13 + 24) = 0xD00000000000001BLL;
    *(void *)(v13 + 32) = 0x80000001000E4810;
    *(void *)(v13 + 40) = 0xD00000000000001FLL;
    *(void *)(v13 + 48) = 0x80000001000E4830;
    *(void *)(v13 + 56) = 702;
    swift_willThrow();
  }
  return v5;
}

uint64_t (*sub_100079200(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_1000799DC(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_100084BF0);
}

void *sub_100079260(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v5 = 5 * a1;
  if ((unsigned __int128)(a1 * (__int128)5) >> 64 != (5 * a1) >> 63)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (a2)
  {
    uint64_t v4 = (void *)a1;
    sub_1000AC7BC((uint64_t)a2, a3, v5);
    if (!v3)
    {
      uint64_t v7 = sub_1000823F8(a2, v5);
      uint64_t v9 = v7;
      unint64_t v10 = v8;
      switch(v8 >> 62)
      {
        case 1uLL:
          if ((int)v7 > v7 >> 32) {
            goto LABEL_22;
          }
          sub_100054104(v7, v8);
          uint64_t v15 = (void *)__DataStorage._bytes.getter();
          if (!v15) {
            goto LABEL_18;
          }
          uint64_t v16 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v9, v16)) {
            goto LABEL_24;
          }
          uint64_t v15 = (void *)((char *)v15 + (int)v9 - v16);
LABEL_18:
          __DataStorage._length.getter();
          uint64_t v4 = sub_100084AE8(v15, (int64_t)v4);
          sub_100038688(v9, v10);
LABEL_19:
          sub_100038688(v9, v10);
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v7 + 16);
          swift_retain();
          swift_retain();
          uint64_t v13 = (void *)__DataStorage._bytes.getter();
          if (!v13) {
            goto LABEL_11;
          }
          uint64_t v14 = __DataStorage._offset.getter();
          if (__OFSUB__(v12, v14)) {
            goto LABEL_23;
          }
          uint64_t v13 = (void *)((char *)v13 + v12 - v14);
LABEL_11:
          __DataStorage._length.getter();
          uint64_t v4 = sub_100084AE8(v13, (int64_t)v4);
          swift_release();
          swift_release();
          goto LABEL_19;
        case 3uLL:
          memset(v18, 0, 14);
          goto LABEL_13;
        default:
          v18[0] = v7;
          LOWORD(v18[1]) = v8;
          BYTE2(v18[1]) = BYTE2(v8);
          BYTE3(v18[1]) = BYTE3(v8);
          BYTE4(v18[1]) = BYTE4(v8);
          BYTE5(v18[1]) = BYTE5(v8);
LABEL_13:
          uint64_t v4 = sub_100084AE8(v18, (int64_t)v4);
          goto LABEL_19;
      }
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v11 = 50;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = 0xE000000000000000;
    *(void *)(v11 + 24) = 0xD00000000000001BLL;
    *(void *)(v11 + 32) = 0x80000001000E4810;
    *(void *)(v11 + 40) = 0xD00000000000001FLL;
    *(void *)(v11 + 48) = 0x80000001000E4830;
    *(void *)(v11 + 56) = 702;
    swift_willThrow();
  }
  return v4;
}

uint64_t (*sub_10007957C(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_1000795DC(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_1000849CC);
}

uint64_t (*sub_1000795DC(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t)))(uint64_t, uint64_t)
{
  uint64_t v6 = 7 * a1;
  if ((unsigned __int128)(a1 * (__int128)7) >> 64 != (7 * a1) >> 63)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (a2)
  {
    uint64_t v5 = a4;
    sub_1000AC7BC((uint64_t)a2, a3, v6);
    if (!v4)
    {
      uint64_t v9 = sub_1000823F8(a2, v6);
      uint64_t v11 = v9;
      unint64_t v12 = v10;
      switch(v10 >> 62)
      {
        case 1uLL:
          uint64_t v20 = (int)v9;
          if ((int)v9 > v9 >> 32) {
            goto LABEL_22;
          }
          sub_100054104(v9, v10);
          uint64_t v16 = __DataStorage._bytes.getter();
          if (!v16) {
            goto LABEL_18;
          }
          uint64_t v17 = __DataStorage._offset.getter();
          if (__OFSUB__(v20, v17)) {
            goto LABEL_24;
          }
          v16 += v20 - v17;
LABEL_18:
          __DataStorage._length.getter();
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5(v16, a1);
          sub_100038688(v11, v12);
LABEL_19:
          sub_100038688(v11, v12);
          break;
        case 2uLL:
          uint64_t v19 = *(void *)(v9 + 16);
          swift_retain();
          swift_retain();
          uint64_t v14 = __DataStorage._bytes.getter();
          if (!v14) {
            goto LABEL_11;
          }
          uint64_t v15 = __DataStorage._offset.getter();
          if (__OFSUB__(v19, v15)) {
            goto LABEL_23;
          }
          v14 += v19 - v15;
LABEL_11:
          __DataStorage._length.getter();
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5(v14, a1);
          swift_release();
          swift_release();
          goto LABEL_19;
        case 3uLL:
          memset(v21, 0, 14);
          goto LABEL_13;
        default:
          v21[0] = v9;
          LOWORD(v21[1]) = v10;
          BYTE2(v21[1]) = BYTE2(v10);
          BYTE3(v21[1]) = BYTE3(v10);
          BYTE4(v21[1]) = BYTE4(v10);
          BYTE5(v21[1]) = BYTE5(v10);
LABEL_13:
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5((uint64_t)v21, a1);
          goto LABEL_19;
      }
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v13 = 50;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0xE000000000000000;
    *(void *)(v13 + 24) = 0xD00000000000001BLL;
    *(void *)(v13 + 32) = 0x80000001000E4810;
    *(void *)(v13 + 40) = 0xD00000000000001FLL;
    *(void *)(v13 + 48) = 0x80000001000E4830;
    *(void *)(v13 + 56) = 702;
    swift_willThrow();
  }
  return v5;
}

uint64_t (*sub_10007991C(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_100078EC0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_1000848C4);
}

uint64_t (*sub_10007997C(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_1000799DC(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_1000847D0);
}

uint64_t (*sub_1000799DC(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t)))(uint64_t, uint64_t)
{
  uint64_t v6 = 3 * a1;
  if ((unsigned __int128)(a1 * (__int128)3) >> 64 != (3 * a1) >> 63)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (a2)
  {
    uint64_t v5 = a4;
    sub_1000AC7BC((uint64_t)a2, a3, v6);
    if (!v4)
    {
      uint64_t v9 = sub_1000823F8(a2, v6);
      uint64_t v11 = v9;
      unint64_t v12 = v10;
      switch(v10 >> 62)
      {
        case 1uLL:
          uint64_t v20 = (int)v9;
          if ((int)v9 > v9 >> 32) {
            goto LABEL_22;
          }
          sub_100054104(v9, v10);
          uint64_t v16 = __DataStorage._bytes.getter();
          if (!v16) {
            goto LABEL_18;
          }
          uint64_t v17 = __DataStorage._offset.getter();
          if (__OFSUB__(v20, v17)) {
            goto LABEL_24;
          }
          v16 += v20 - v17;
LABEL_18:
          __DataStorage._length.getter();
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5(v16, a1);
          sub_100038688(v11, v12);
LABEL_19:
          sub_100038688(v11, v12);
          break;
        case 2uLL:
          uint64_t v19 = *(void *)(v9 + 16);
          swift_retain();
          swift_retain();
          uint64_t v14 = __DataStorage._bytes.getter();
          if (!v14) {
            goto LABEL_11;
          }
          uint64_t v15 = __DataStorage._offset.getter();
          if (__OFSUB__(v19, v15)) {
            goto LABEL_23;
          }
          v14 += v19 - v15;
LABEL_11:
          __DataStorage._length.getter();
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5(v14, a1);
          swift_release();
          swift_release();
          goto LABEL_19;
        case 3uLL:
          memset(v21, 0, 14);
          goto LABEL_13;
        default:
          v21[0] = v9;
          LOWORD(v21[1]) = v10;
          BYTE2(v21[1]) = BYTE2(v10);
          BYTE3(v21[1]) = BYTE3(v10);
          BYTE4(v21[1]) = BYTE4(v10);
          BYTE5(v21[1]) = BYTE5(v10);
LABEL_13:
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5((uint64_t)v21, a1);
          goto LABEL_19;
      }
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v13 = 50;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0xE000000000000000;
    *(void *)(v13 + 24) = 0xD00000000000001BLL;
    *(void *)(v13 + 32) = 0x80000001000E4810;
    *(void *)(v13 + 40) = 0xD00000000000001FLL;
    *(void *)(v13 + 48) = 0x80000001000E4830;
    *(void *)(v13 + 56) = 702;
    swift_willThrow();
  }
  return v5;
}

uint64_t (*sub_100079D18(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_1000795DC(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_1000846A4);
}

unsigned char *sub_100079D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100077E40(a1, a2, a3, (uint64_t)sub_10007CA54, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100083BC4);
}

unsigned char *sub_100079DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100078604(a1, a2, a3, (uint64_t)sub_10007CA7C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100083ABC);
}

unsigned char *sub_100079E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100077E40(a1, a2, a3, (uint64_t)sub_10007CAA4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100083BC4);
}

unsigned char *sub_100079ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100078604(a1, a2, a3, (uint64_t)sub_10007CACC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100083ABC);
}

unsigned char *sub_100079F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100078604(a1, a2, a3, (uint64_t)sub_10007CAF4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100083ABC);
}

void (*sub_100079FBC(uint64_t a1, unsigned char *a2, uint64_t a3))(BOOL, uint64_t, uint64_t)
{
  return sub_10007A01C(a1, a2, a3, (void (*)(BOOL, uint64_t, uint64_t))sub_10007CB1C);
}

void (*sub_10007A01C(uint64_t a1, unsigned char *a2, uint64_t a3, void (*a4)(BOOL, uint64_t, uint64_t)))(BOOL, uint64_t, uint64_t)
{
  uint64_t v6 = 7 * a1;
  if ((unsigned __int128)(a1 * (__int128)7) >> 64 != (7 * a1) >> 63)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (a2)
  {
    uint64_t v5 = a4;
    sub_1000AC7BC((uint64_t)a2, a3, v6);
    if (!v4)
    {
      uint64_t v9 = sub_1000823F8(a2, v6);
      uint64_t v11 = v9;
      unint64_t v12 = v10;
      switch(v10 >> 62)
      {
        case 1uLL:
          uint64_t v20 = (int)v9;
          if ((int)v9 > v9 >> 32) {
            goto LABEL_22;
          }
          sub_100054104(v9, v10);
          uint64_t v16 = (void *)__DataStorage._bytes.getter();
          if (!v16) {
            goto LABEL_18;
          }
          uint64_t v17 = __DataStorage._offset.getter();
          if (__OFSUB__(v20, v17)) {
            goto LABEL_24;
          }
          uint64_t v16 = (void *)((char *)v16 + v20 - v17);
LABEL_18:
          __DataStorage._length.getter();
          uint64_t v5 = (void (*)(BOOL, uint64_t, uint64_t))sub_10008375C(v16, a1, v5);
          sub_100038688(v11, v12);
LABEL_19:
          sub_100038688(v11, v12);
          break;
        case 2uLL:
          uint64_t v19 = *(void *)(v9 + 16);
          swift_retain();
          swift_retain();
          uint64_t v14 = (void *)__DataStorage._bytes.getter();
          if (!v14) {
            goto LABEL_11;
          }
          uint64_t v15 = __DataStorage._offset.getter();
          if (__OFSUB__(v19, v15)) {
            goto LABEL_23;
          }
          uint64_t v14 = (void *)((char *)v14 + v19 - v15);
LABEL_11:
          __DataStorage._length.getter();
          uint64_t v5 = (void (*)(BOOL, uint64_t, uint64_t))sub_10008375C(v14, a1, v5);
          swift_release();
          swift_release();
          goto LABEL_19;
        case 3uLL:
          memset(v21, 0, 14);
          goto LABEL_13;
        default:
          v21[0] = v9;
          LOWORD(v21[1]) = v10;
          BYTE2(v21[1]) = BYTE2(v10);
          BYTE3(v21[1]) = BYTE3(v10);
          BYTE4(v21[1]) = BYTE4(v10);
          BYTE5(v21[1]) = BYTE5(v10);
LABEL_13:
          uint64_t v5 = (void (*)(BOOL, uint64_t, uint64_t))sub_10008375C(v21, a1, v5);
          goto LABEL_19;
      }
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v13 = 50;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0xE000000000000000;
    *(void *)(v13 + 24) = 0xD00000000000001BLL;
    *(void *)(v13 + 32) = 0x80000001000E4810;
    *(void *)(v13 + 40) = 0xD00000000000001FLL;
    *(void *)(v13 + 48) = 0x80000001000E4830;
    *(void *)(v13 + 56) = 702;
    swift_willThrow();
  }
  return v5;
}

void (*sub_10007A35C(uint64_t a1, unsigned char *a2, uint64_t a3))(BOOL, uint64_t, uint64_t)
{
  return sub_10007A01C(a1, a2, a3, (void (*)(BOOL, uint64_t, uint64_t))sub_10007CB44);
}

uint64_t (*sub_10007A3BC(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_100078A4C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_100083888);
}

void (*sub_10007A41C(uint64_t a1, unsigned char *a2, uint64_t a3))(BOOL, uint64_t, uint64_t)
{
  return sub_10007A01C(a1, a2, a3, (void (*)(BOOL, uint64_t, uint64_t))sub_10007CB8C);
}

unsigned char *sub_10007A47C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100077E40(a1, a2, a3, (uint64_t)sub_10007CBB4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100083BC4);
}

unsigned char *sub_10007A4F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100078604(a1, a2, a3, (uint64_t)sub_10007CBDC, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100083ABC);
}

uint64_t (*sub_10007A564(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_10007A5C4(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_100083DE8);
}

uint64_t (*sub_10007A5C4(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t)))(uint64_t, uint64_t)
{
  uint64_t v6 = 9 * a1;
  if ((unsigned __int128)(a1 * (__int128)9) >> 64 != (9 * a1) >> 63)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (a2)
  {
    uint64_t v5 = a4;
    sub_1000AC7BC((uint64_t)a2, a3, v6);
    if (!v4)
    {
      uint64_t v9 = sub_1000823F8(a2, v6);
      uint64_t v11 = v9;
      unint64_t v12 = v10;
      switch(v10 >> 62)
      {
        case 1uLL:
          uint64_t v20 = (int)v9;
          if ((int)v9 > v9 >> 32) {
            goto LABEL_22;
          }
          sub_100054104(v9, v10);
          uint64_t v16 = __DataStorage._bytes.getter();
          if (!v16) {
            goto LABEL_18;
          }
          uint64_t v17 = __DataStorage._offset.getter();
          if (__OFSUB__(v20, v17)) {
            goto LABEL_24;
          }
          v16 += v20 - v17;
LABEL_18:
          __DataStorage._length.getter();
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5(v16, a1);
          sub_100038688(v11, v12);
LABEL_19:
          sub_100038688(v11, v12);
          break;
        case 2uLL:
          uint64_t v19 = *(void *)(v9 + 16);
          swift_retain();
          swift_retain();
          uint64_t v14 = __DataStorage._bytes.getter();
          if (!v14) {
            goto LABEL_11;
          }
          uint64_t v15 = __DataStorage._offset.getter();
          if (__OFSUB__(v19, v15)) {
            goto LABEL_23;
          }
          v14 += v19 - v15;
LABEL_11:
          __DataStorage._length.getter();
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5(v14, a1);
          swift_release();
          swift_release();
          goto LABEL_19;
        case 3uLL:
          memset(v21, 0, 14);
          goto LABEL_13;
        default:
          v21[0] = v9;
          LOWORD(v21[1]) = v10;
          BYTE2(v21[1]) = BYTE2(v10);
          BYTE3(v21[1]) = BYTE3(v10);
          BYTE4(v21[1]) = BYTE4(v10);
          BYTE5(v21[1]) = BYTE5(v10);
LABEL_13:
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5((uint64_t)v21, a1);
          goto LABEL_19;
      }
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v13 = 50;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0xE000000000000000;
    *(void *)(v13 + 24) = 0xD00000000000001BLL;
    *(void *)(v13 + 32) = 0x80000001000E4810;
    *(void *)(v13 + 40) = 0xD00000000000001FLL;
    *(void *)(v13 + 48) = 0x80000001000E4830;
    *(void *)(v13 + 56) = 702;
    swift_willThrow();
  }
  return v5;
}

uint64_t (*sub_10007A900(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_100077694(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_1000828C8);
}

unsigned char *sub_10007A960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100078604(a1, a2, a3, (uint64_t)sub_10007CC44, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100083ABC);
}

unsigned char *sub_10007A9D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100078604(a1, a2, a3, (uint64_t)sub_10007CC6C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100083ABC);
}

uint64_t (*sub_10007AA48(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_100078EC0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_1000829D0);
}

unsigned char *sub_10007AAA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100078604(a1, a2, a3, (uint64_t)sub_10007CCB4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100082AEC);
}

void (*sub_10007AB1C(uint64_t a1, unsigned char *a2, uint64_t a3))(BOOL, uint64_t, uint64_t)
{
  return sub_10007A01C(a1, a2, a3, (void (*)(BOOL, uint64_t, uint64_t))sub_10007CCDC);
}

unsigned char *sub_10007AB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100078604(a1, a2, a3, (uint64_t)sub_10007CD04, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100082AEC);
}

void (*sub_10007ABF0(uint64_t a1, unsigned char *a2, uint64_t a3))(BOOL, uint64_t, uint64_t)
{
  return sub_10007A01C(a1, a2, a3, (void (*)(BOOL, uint64_t, uint64_t))sub_10007CD2C);
}

uint64_t *sub_10007AC50(unint64_t a1, unsigned char *a2, uint64_t a3)
{
  return sub_10007ACB0(a1, a2, a3, (uint64_t *)sub_10007CD54);
}

uint64_t *sub_10007ACB0(unint64_t a1, unsigned char *a2, uint64_t a3, uint64_t *a4)
{
  if ((a1 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (a2)
  {
    uint64_t v5 = a4;
    uint64_t v8 = 8 * a1;
    sub_1000AC7BC((uint64_t)a2, a3, 8 * a1);
    if (!v4)
    {
      uint64_t v9 = sub_1000823F8(a2, v8);
      uint64_t v11 = v9;
      unint64_t v12 = v10;
      switch(v10 >> 62)
      {
        case 1uLL:
          uint64_t v20 = (int)v9;
          if ((int)v9 > v9 >> 32) {
            goto LABEL_22;
          }
          sub_100054104(v9, v10);
          uint64_t v16 = (uint64_t *)__DataStorage._bytes.getter();
          if (!v16) {
            goto LABEL_18;
          }
          uint64_t v17 = __DataStorage._offset.getter();
          if (__OFSUB__(v20, v17)) {
            goto LABEL_24;
          }
          uint64_t v16 = (uint64_t *)((char *)v16 + v20 - v17);
LABEL_18:
          __DataStorage._length.getter();
          uint64_t v5 = sub_1000844B4(v16, a1, (void (*)(BOOL, unint64_t, uint64_t))v5);
          sub_100038688(v11, v12);
LABEL_19:
          sub_100038688(v11, v12);
          break;
        case 2uLL:
          uint64_t v19 = *(void *)(v9 + 16);
          swift_retain();
          swift_retain();
          uint64_t v14 = (uint64_t *)__DataStorage._bytes.getter();
          if (!v14) {
            goto LABEL_11;
          }
          uint64_t v15 = __DataStorage._offset.getter();
          if (__OFSUB__(v19, v15)) {
            goto LABEL_23;
          }
          uint64_t v14 = (uint64_t *)((char *)v14 + v19 - v15);
LABEL_11:
          __DataStorage._length.getter();
          uint64_t v5 = sub_1000844B4(v14, a1, (void (*)(BOOL, unint64_t, uint64_t))v5);
          swift_release();
          swift_release();
          goto LABEL_19;
        case 3uLL:
          memset(v21, 0, 14);
          goto LABEL_13;
        default:
          v21[0] = v9;
          LOWORD(v21[1]) = v10;
          BYTE2(v21[1]) = BYTE2(v10);
          BYTE3(v21[1]) = BYTE3(v10);
          BYTE4(v21[1]) = BYTE4(v10);
          BYTE5(v21[1]) = BYTE5(v10);
LABEL_13:
          uint64_t v5 = sub_1000844B4(v21, a1, (void (*)(BOOL, unint64_t, uint64_t))v5);
          goto LABEL_19;
      }
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v13 = 50;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0xE000000000000000;
    *(void *)(v13 + 24) = 0xD00000000000001BLL;
    *(void *)(v13 + 32) = 0x80000001000E4810;
    *(void *)(v13 + 40) = 0xD00000000000001FLL;
    *(void *)(v13 + 48) = 0x80000001000E4830;
    *(void *)(v13 + 56) = 702;
    swift_willThrow();
  }
  return v5;
}

uint64_t *sub_10007AFF0(unint64_t a1, unsigned char *a2, uint64_t a3)
{
  return sub_10007ACB0(a1, a2, a3, (uint64_t *)sub_10007CD7C);
}

unsigned char *sub_10007B050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000760E8(a1, a2, a3, (uint64_t)sub_10007CDA4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100084DF8);
}

uint64_t (*sub_10007B0C4(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_10007B124(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_10008413C);
}

uint64_t (*sub_10007B124(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t)))(uint64_t, uint64_t)
{
  uint64_t v6 = 22 * a1;
  if ((unsigned __int128)(a1 * (__int128)22) >> 64 != (22 * a1) >> 63)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (a2)
  {
    uint64_t v5 = a4;
    sub_1000AC7BC((uint64_t)a2, a3, v6);
    if (!v4)
    {
      uint64_t v9 = sub_1000823F8(a2, v6);
      uint64_t v11 = v9;
      unint64_t v12 = v10;
      switch(v10 >> 62)
      {
        case 1uLL:
          uint64_t v20 = (int)v9;
          if ((int)v9 > v9 >> 32) {
            goto LABEL_22;
          }
          sub_100054104(v9, v10);
          uint64_t v16 = __DataStorage._bytes.getter();
          if (!v16) {
            goto LABEL_18;
          }
          uint64_t v17 = __DataStorage._offset.getter();
          if (__OFSUB__(v20, v17)) {
            goto LABEL_24;
          }
          v16 += v20 - v17;
LABEL_18:
          __DataStorage._length.getter();
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5(v16, a1);
          sub_100038688(v11, v12);
LABEL_19:
          sub_100038688(v11, v12);
          break;
        case 2uLL:
          uint64_t v19 = *(void *)(v9 + 16);
          swift_retain();
          swift_retain();
          uint64_t v14 = __DataStorage._bytes.getter();
          if (!v14) {
            goto LABEL_11;
          }
          uint64_t v15 = __DataStorage._offset.getter();
          if (__OFSUB__(v19, v15)) {
            goto LABEL_23;
          }
          v14 += v19 - v15;
LABEL_11:
          __DataStorage._length.getter();
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5(v14, a1);
          swift_release();
          swift_release();
          goto LABEL_19;
        case 3uLL:
          memset(v21, 0, 14);
          goto LABEL_13;
        default:
          v21[0] = v9;
          LOWORD(v21[1]) = v10;
          BYTE2(v21[1]) = BYTE2(v10);
          BYTE3(v21[1]) = BYTE3(v10);
          BYTE4(v21[1]) = BYTE4(v10);
          BYTE5(v21[1]) = BYTE5(v10);
LABEL_13:
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5((uint64_t)v21, a1);
          goto LABEL_19;
      }
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v13 = 50;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0xE000000000000000;
    *(void *)(v13 + 24) = 0xD00000000000001BLL;
    *(void *)(v13 + 32) = 0x80000001000E4810;
    *(void *)(v13 + 40) = 0xD00000000000001FLL;
    *(void *)(v13 + 48) = 0x80000001000E4830;
    *(void *)(v13 + 56) = 702;
    swift_willThrow();
  }
  return v5;
}

void *sub_10007B460(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v5 = 24 * a1;
  if ((unsigned __int128)(a1 * (__int128)24) >> 64 != (24 * a1) >> 63)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (a2)
  {
    uint64_t v4 = (void *)a1;
    sub_1000AC7BC((uint64_t)a2, a3, v5);
    if (!v3)
    {
      uint64_t v7 = sub_1000823F8(a2, v5);
      uint64_t v9 = v7;
      unint64_t v10 = v8;
      switch(v8 >> 62)
      {
        case 1uLL:
          if ((int)v7 > v7 >> 32) {
            goto LABEL_22;
          }
          sub_100054104(v7, v8);
          uint64_t v15 = (void *)__DataStorage._bytes.getter();
          if (!v15) {
            goto LABEL_18;
          }
          uint64_t v16 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v9, v16)) {
            goto LABEL_24;
          }
          uint64_t v15 = (void *)((char *)v15 + (int)v9 - v16);
LABEL_18:
          __DataStorage._length.getter();
          uint64_t v4 = sub_100084280(v15, (int64_t)v4);
          sub_100038688(v9, v10);
LABEL_19:
          sub_100038688(v9, v10);
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v7 + 16);
          swift_retain();
          swift_retain();
          uint64_t v13 = (void *)__DataStorage._bytes.getter();
          if (!v13) {
            goto LABEL_11;
          }
          uint64_t v14 = __DataStorage._offset.getter();
          if (__OFSUB__(v12, v14)) {
            goto LABEL_23;
          }
          uint64_t v13 = (void *)((char *)v13 + v12 - v14);
LABEL_11:
          __DataStorage._length.getter();
          uint64_t v4 = sub_100084280(v13, (int64_t)v4);
          swift_release();
          swift_release();
          goto LABEL_19;
        case 3uLL:
          memset(v18, 0, 14);
          goto LABEL_13;
        default:
          v18[0] = v7;
          LOWORD(v18[1]) = v8;
          BYTE2(v18[1]) = BYTE2(v8);
          BYTE3(v18[1]) = BYTE3(v8);
          BYTE4(v18[1]) = BYTE4(v8);
          BYTE5(v18[1]) = BYTE5(v8);
LABEL_13:
          uint64_t v4 = sub_100084280(v18, (int64_t)v4);
          goto LABEL_19;
      }
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v11 = 50;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = 0xE000000000000000;
    *(void *)(v11 + 24) = 0xD00000000000001BLL;
    *(void *)(v11 + 32) = 0x80000001000E4810;
    *(void *)(v11 + 40) = 0xD00000000000001FLL;
    *(void *)(v11 + 48) = 0x80000001000E4830;
    *(void *)(v11 + 56) = 702;
    swift_willThrow();
  }
  return v4;
}

uint64_t (*sub_10007B780(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_100077694(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_1000851F0);
}

uint64_t (*sub_10007B7E0(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_100078EC0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_1000850F0);
}

long long *sub_10007B840(long long *a1, unsigned char *a2, uint64_t a3)
{
  if ((unint64_t)(a1 - 0x80000000000000) >> 60 != 15)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (a2)
  {
    uint64_t v4 = a1;
    uint64_t v6 = 16 * (void)a1;
    sub_1000AC7BC((uint64_t)a2, a3, 16 * (void)a1);
    if (!v3)
    {
      uint64_t v7 = sub_1000823F8(a2, v6);
      uint64_t v9 = v7;
      unint64_t v10 = v8;
      switch(v8 >> 62)
      {
        case 1uLL:
          if ((int)v7 > v7 >> 32) {
            goto LABEL_22;
          }
          sub_100054104(v7, v8);
          uint64_t v15 = (long long *)__DataStorage._bytes.getter();
          if (!v15) {
            goto LABEL_18;
          }
          uint64_t v16 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v9, v16)) {
            goto LABEL_24;
          }
          uint64_t v15 = (long long *)((char *)v15 + (int)v9 - v16);
LABEL_18:
          __DataStorage._length.getter();
          uint64_t v4 = sub_100085010(v15, (int64_t)v4);
          sub_100038688(v9, v10);
LABEL_19:
          sub_100038688(v9, v10);
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v7 + 16);
          swift_retain();
          swift_retain();
          uint64_t v13 = (long long *)__DataStorage._bytes.getter();
          if (!v13) {
            goto LABEL_11;
          }
          uint64_t v14 = __DataStorage._offset.getter();
          if (__OFSUB__(v12, v14)) {
            goto LABEL_23;
          }
          uint64_t v13 = (long long *)((char *)v13 + v12 - v14);
LABEL_11:
          __DataStorage._length.getter();
          uint64_t v4 = sub_100085010(v13, (int64_t)v4);
          swift_release();
          swift_release();
          goto LABEL_19;
        case 3uLL:
          *(void *)((char *)&v18 + 6) = 0;
          *(void *)&long long v18 = 0;
          goto LABEL_13;
        default:
          *(void *)&long long v18 = v7;
          WORD4(v18) = v8;
          BYTE10(v18) = BYTE2(v8);
          BYTE11(v18) = BYTE3(v8);
          BYTE12(v18) = BYTE4(v8);
          BYTE13(v18) = BYTE5(v8);
LABEL_13:
          uint64_t v4 = sub_100085010(&v18, (int64_t)v4);
          goto LABEL_19;
      }
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v11 = 50;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = 0xE000000000000000;
    *(void *)(v11 + 24) = 0xD00000000000001BLL;
    *(void *)(v11 + 32) = 0x80000001000E4810;
    *(void *)(v11 + 40) = 0xD00000000000001FLL;
    *(void *)(v11 + 48) = 0x80000001000E4830;
    *(void *)(v11 + 56) = 702;
    swift_willThrow();
  }
  return v4;
}

uint64_t (*sub_10007BB60(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_10007BBC0(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_100084EF8);
}

uint64_t (*sub_10007BBC0(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t)))(uint64_t, uint64_t)
{
  uint64_t v6 = 14 * a1;
  if ((unsigned __int128)(a1 * (__int128)14) >> 64 != (14 * a1) >> 63)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (a2)
  {
    uint64_t v5 = a4;
    sub_1000AC7BC((uint64_t)a2, a3, v6);
    if (!v4)
    {
      uint64_t v9 = sub_1000823F8(a2, v6);
      uint64_t v11 = v9;
      unint64_t v12 = v10;
      switch(v10 >> 62)
      {
        case 1uLL:
          uint64_t v20 = (int)v9;
          if ((int)v9 > v9 >> 32) {
            goto LABEL_22;
          }
          sub_100054104(v9, v10);
          uint64_t v16 = __DataStorage._bytes.getter();
          if (!v16) {
            goto LABEL_18;
          }
          uint64_t v17 = __DataStorage._offset.getter();
          if (__OFSUB__(v20, v17)) {
            goto LABEL_24;
          }
          v16 += v20 - v17;
LABEL_18:
          __DataStorage._length.getter();
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5(v16, a1);
          sub_100038688(v11, v12);
LABEL_19:
          sub_100038688(v11, v12);
          break;
        case 2uLL:
          uint64_t v19 = *(void *)(v9 + 16);
          swift_retain();
          swift_retain();
          uint64_t v14 = __DataStorage._bytes.getter();
          if (!v14) {
            goto LABEL_11;
          }
          uint64_t v15 = __DataStorage._offset.getter();
          if (__OFSUB__(v19, v15)) {
            goto LABEL_23;
          }
          v14 += v19 - v15;
LABEL_11:
          __DataStorage._length.getter();
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5(v14, a1);
          swift_release();
          swift_release();
          goto LABEL_19;
        case 3uLL:
          memset(v21, 0, 14);
          goto LABEL_13;
        default:
          v21[0] = v9;
          LOWORD(v21[1]) = v10;
          BYTE2(v21[1]) = BYTE2(v10);
          BYTE3(v21[1]) = BYTE3(v10);
          BYTE4(v21[1]) = BYTE4(v10);
          BYTE5(v21[1]) = BYTE5(v10);
LABEL_13:
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5((uint64_t)v21, a1);
          goto LABEL_19;
      }
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v13 = 50;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0xE000000000000000;
    *(void *)(v13 + 24) = 0xD00000000000001BLL;
    *(void *)(v13 + 32) = 0x80000001000E4810;
    *(void *)(v13 + 40) = 0xD00000000000001FLL;
    *(void *)(v13 + 48) = 0x80000001000E4830;
    *(void *)(v13 + 56) = 702;
    swift_willThrow();
  }
  return v5;
}

unsigned char *sub_10007BF00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000760E8(a1, a2, a3, (uint64_t)sub_10007CE8C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_100084DF8);
}

uint64_t (*sub_10007BF74(uint64_t a1, unsigned char *a2, uint64_t a3))(uint64_t, uint64_t)
{
  return sub_10007BFD4(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))sub_100084CE4);
}

uint64_t (*sub_10007BFD4(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t)))(uint64_t, uint64_t)
{
  uint64_t v6 = 12 * a1;
  if ((unsigned __int128)(a1 * (__int128)12) >> 64 != (12 * a1) >> 63)
  {
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  if (a2)
  {
    uint64_t v5 = a4;
    sub_1000AC7BC((uint64_t)a2, a3, v6);
    if (!v4)
    {
      uint64_t v9 = sub_1000823F8(a2, v6);
      uint64_t v11 = v9;
      unint64_t v12 = v10;
      switch(v10 >> 62)
      {
        case 1uLL:
          uint64_t v20 = (int)v9;
          if ((int)v9 > v9 >> 32) {
            goto LABEL_22;
          }
          sub_100054104(v9, v10);
          uint64_t v16 = __DataStorage._bytes.getter();
          if (!v16) {
            goto LABEL_18;
          }
          uint64_t v17 = __DataStorage._offset.getter();
          if (__OFSUB__(v20, v17)) {
            goto LABEL_24;
          }
          v16 += v20 - v17;
LABEL_18:
          __DataStorage._length.getter();
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5(v16, a1);
          sub_100038688(v11, v12);
LABEL_19:
          sub_100038688(v11, v12);
          break;
        case 2uLL:
          uint64_t v19 = *(void *)(v9 + 16);
          swift_retain();
          swift_retain();
          uint64_t v14 = __DataStorage._bytes.getter();
          if (!v14) {
            goto LABEL_11;
          }
          uint64_t v15 = __DataStorage._offset.getter();
          if (__OFSUB__(v19, v15)) {
            goto LABEL_23;
          }
          v14 += v19 - v15;
LABEL_11:
          __DataStorage._length.getter();
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5(v14, a1);
          swift_release();
          swift_release();
          goto LABEL_19;
        case 3uLL:
          memset(v21, 0, 14);
          goto LABEL_13;
        default:
          v21[0] = v9;
          LOWORD(v21[1]) = v10;
          BYTE2(v21[1]) = BYTE2(v10);
          BYTE3(v21[1]) = BYTE3(v10);
          BYTE4(v21[1]) = BYTE4(v10);
          BYTE5(v21[1]) = BYTE5(v10);
LABEL_13:
          uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))v5((uint64_t)v21, a1);
          goto LABEL_19;
      }
    }
  }
  else
  {
    sub_10000CD54();
    swift_allocError();
    *(unsigned char *)uint64_t v13 = 50;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 16) = 0xE000000000000000;
    *(void *)(v13 + 24) = 0xD00000000000001BLL;
    *(void *)(v13 + 32) = 0x80000001000E4810;
    *(void *)(v13 + 40) = 0xD00000000000001FLL;
    *(void *)(v13 + 48) = 0x80000001000E4830;
    *(void *)(v13 + 56) = 702;
    swift_willThrow();
  }
  return v5;
}

uint64_t sub_10007C314(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007CED4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C334(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007F1D4(a1, a2, a3, *v3, &qword_100129238);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C35C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007D040(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C37C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007D1BC(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10007C39C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007D348(a1, a2, a3, *v3, &qword_100129260);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C3C4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007D348(a1, a2, a3, *v3, &qword_100129268);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C3EC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007D4C0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C40C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007D638(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C42C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007D794(a1, a2, a3, *v3, &qword_100129478);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C454(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007D794(a1, a2, a3, *v3, &qword_100129488);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C47C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007D8F0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C49C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007DA6C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C4BC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007FA64(a1, a2, a3, *v3, &qword_100127B40);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C4E4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007DBD4(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10007C504(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007DD60(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C524(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007DEC0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C544(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007E024(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C564(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007E1A0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C584(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007E300(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C5A4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007E478(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C5C4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007E5F8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C5E4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007E774(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C604(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007E8F8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C624(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007EA7C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C644(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007EBF8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C664(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007ED78(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C684(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007EEE8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C6A4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007F050(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C6C4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007F5F8(a1, a2, a3, *v3, &qword_100129378);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C6EC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007F1D4(a1, a2, a3, *v3, &qword_100129380);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C714(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007F348(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C734(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100080E80(a1, a2, a3, *v3, &qword_100129388);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C75C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007F5F8(a1, a2, a3, *v3, &qword_100129390);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C784(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100080E80(a1, a2, a3, *v3, &qword_100129398);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C7AC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100080E80(a1, a2, a3, *v3, &qword_1001293A0);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C7D4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007F498(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C7F4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100081158(a1, a2, a3, *v3, &qword_1001293B0);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C81C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007F5F8(a1, a2, a3, *v3, &qword_1001293C0);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C844(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100080E80(a1, a2, a3, *v3, &qword_1001293C8);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C86C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007F750(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C88C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007F8DC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C8AC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007FBC0(a1, a2, a3, (void *)*v3, &qword_100129300, &qword_100127B30);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10007C8DC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007FA64(a1, a2, a3, *v3, &qword_100129468);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C904(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007FBC0(a1, a2, a3, (void *)*v3, &qword_1001294A0, &qword_100128558);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10007C934(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007FD68(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C954(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007FEE4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C974(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10008005C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C994(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000801BC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C9B4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10008031C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C9D4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100080480(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007C9F4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100080600(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CA14(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100080778(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CA34(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000808D8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CA54(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007F1D4(a1, a2, a3, *v3, &qword_1001293E0);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CA7C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100080E80(a1, a2, a3, *v3, &qword_1001293E8);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CAA4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007F1D4(a1, a2, a3, *v3, &qword_1001293F0);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CACC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100080E80(a1, a2, a3, *v3, &qword_1001293F8);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CAF4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100080E80(a1, a2, a3, *v3, &qword_100129400);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CB1C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100081158(a1, a2, a3, *v3, &qword_100129408);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CB44(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100081158(a1, a2, a3, *v3, &qword_100129410);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CB6C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100080A58(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CB8C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100081158(a1, a2, a3, *v3, &qword_100129420);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CBB4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007F1D4(a1, a2, a3, *v3, &qword_100129430);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CBDC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100080E80(a1, a2, a3, *v3, &qword_100129438);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CC04(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100080BB8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CC24(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100080D20(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CC44(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100080E80(a1, a2, a3, *v3, &qword_100129320);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CC6C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100080E80(a1, a2, a3, *v3, &qword_100129328);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CC94(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100080FE0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CCB4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100080E80(a1, a2, a3, *v3, &qword_100129348);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CCDC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100081158(a1, a2, a3, *v3, &qword_100129350);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CD04(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100080E80(a1, a2, a3, *v3, &qword_100129358);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CD2C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100081158(a1, a2, a3, *v3, &qword_100129360);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CD54(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007FA64(a1, a2, a3, *v3, &qword_1001292F0);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CD7C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007FA64(a1, a2, a3, *v3, &qword_100129470);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CDA4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007D794(a1, a2, a3, *v3, &qword_1001292E0);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CDCC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000812D4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CDEC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100081458(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CE0C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000815D4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CE2C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100081734(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CE4C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000818AC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CE6C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100081A0C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CE8C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007D794(a1, a2, a3, *v3, &qword_1001292C8);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CEB4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100081B8C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007CED4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100128E30);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007D040(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100128E20);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    unint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    memcpy(v12, v13, 24 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007D1BC(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129250);
    unint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_10000AC7C(&qword_100129258);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007D348(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_10000AC7C(a5);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 12);
  }
  else
  {
    int64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[12 * v9]) {
      memmove(v13, v14, 12 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[12 * v9] || v13 >= &v14[12 * v9])
  {
    memcpy(v13, v14, 12 * v9);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007D4C0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129270);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 6);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  size_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[6 * v8]) {
      memmove(v12, v13, 6 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[6 * v8] || v12 >= &v13[6 * v8])
  {
    memcpy(v12, v13, 6 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007D638(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129240);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    int64_t v12 = v11 - 32;
    if (v11 < 32) {
      int64_t v12 = v11 - 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[2 * v8]) {
      memmove(v13, v14, 2 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[2 * v8] || v13 >= &v14[2 * v8])
  {
    memcpy(v13, v14, 2 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007D794(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_10000AC7C(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 29;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    int64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[4 * v9]) {
      memmove(v14, v15, 4 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[4 * v9] || v14 >= &v15[4 * v9])
  {
    memcpy(v14, v15, 4 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007D8F0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129308);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 12);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[12 * v8]) {
      memmove(v12, v13, 12 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[12 * v8] || v12 >= &v13[12 * v8])
  {
    memcpy(v12, v13, 12 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007DA6C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129310);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 9);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 9 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007DBD4(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129330);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    sub_10000AC7C(&qword_100129338);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007DD60(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100128EC8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007DEC0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129368);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 17);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  size_t v14 = 17 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007E024(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129370);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 12);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[12 * v8]) {
      memmove(v12, v13, 12 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[12 * v8] || v12 >= &v13[12 * v8])
  {
    memcpy(v12, v13, 12 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007E1A0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_1001293B8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007E300(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_1001293D0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 20);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[20 * v8]) {
      memmove(v12, v13, 20 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[20 * v8] || v12 >= &v13[20 * v8])
  {
    memcpy(v12, v13, 20 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007E478(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_1001293D8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 19);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[19 * v8]) {
      memmove(v12, v13, 19 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[19 * v8] || v12 >= &v13[19 * v8])
  {
    memcpy(v12, v13, 19 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007E5F8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129428);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 12);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[12 * v8]) {
      memmove(v12, v13, 12 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[12 * v8] || v12 >= &v13[12 * v8])
  {
    memcpy(v12, v13, 12 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007E774(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129440);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 11);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[11 * v8]) {
      memmove(v12, v13, 11 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[11 * v8] || v12 >= &v13[11 * v8])
  {
    memcpy(v12, v13, 11 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007E8F8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129450);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 22);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[22 * v8]) {
      memmove(v12, v13, 22 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[22 * v8] || v12 >= &v13[22 * v8])
  {
    memcpy(v12, v13, 22 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007EA7C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129458);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 18);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[18 * v8]) {
      memmove(v12, v13, 18 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[18 * v8] || v12 >= &v13[18 * v8])
  {
    memcpy(v12, v13, 18 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007EBF8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129460);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 14);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[14 * v8]) {
      memmove(v12, v13, 14 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[14 * v8] || v12 >= &v13[14 * v8])
  {
    memcpy(v12, v13, 14 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007ED78(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_1001290A8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 12);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  size_t v14 = 12 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007EEE8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100128E40);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  size_t v15 = 32 * v8;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007F050(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129480);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8]) {
      memmove(v12, v13, 80 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[80 * v8] || v12 >= &v13[80 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007F1D4(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_10000AC7C(a5);
    size_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 6);
  }
  else
  {
    size_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v11 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[6 * v9]) {
      memmove(v13, v14, 6 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[6 * v9] || v13 >= &v14[6 * v9])
  {
    memcpy(v13, v14, 6 * v9);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007F348(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100127B48);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  size_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007F498(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_1001293A8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007F5F8(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_10000AC7C(a5);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    int64_t v13 = v12 - 32;
    if (v12 < 32) {
      int64_t v13 = v12 - 31;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = v13 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    int64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  size_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[2 * v9]) {
      memmove(v14, v15, 2 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[2 * v9] || v14 >= &v15[2 * v9])
  {
    memcpy(v14, v15, 2 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007F750(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_1001292F8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 168);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[168 * v8]) {
      memmove(v12, v13, 168 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[168 * v8] || v12 >= &v13[168 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007F8DC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100128F48);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007FA64(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_10000AC7C(a5);
    size_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    size_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  size_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007FBC0(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_10000AC7C(a5);
    uint64_t v13 = (void *)swift_allocObject();
    size_t v14 = j__malloc_size(v13);
    long long v13[2] = v11;
    void v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
  }
  unint64_t v15 = (unint64_t)(v13 + 4);
  unint64_t v16 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v15 >= v16 + 40 * v11) {
      memmove(v13 + 4, a4 + 4, 40 * v11);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 40 * v11 || v15 >= v16 + 40 * v11)
  {
    sub_10000AC7C(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007FD68(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_1001294A8);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 12);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[12 * v8]) {
      memmove(v12, v13, 12 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[12 * v8] || v12 >= &v13[12 * v8])
  {
    memcpy(v12, v13, 12 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007FEE4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129498);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 6);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[6 * v8]) {
      memmove(v12, v13, 6 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[6 * v8] || v12 >= &v13[6 * v8])
  {
    memcpy(v12, v13, 6 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10008005C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129490);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 3);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 3 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000801BC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129290);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 3);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 3 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10008031C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129288);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 5);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 5 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100080480(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129280);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 7);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[8 * v8 - v8]) {
      memmove(v12, v13, 7 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[7 * v8] || v12 >= &v13[7 * v8])
  {
    memcpy(v12, v13, 7 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100080600(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129278);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 6);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[6 * v8]) {
      memmove(v12, v13, 6 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[6 * v8] || v12 >= &v13[6 * v8])
  {
    memcpy(v12, v13, 6 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100080778(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129298);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 3);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 3 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000808D8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_1001292A0);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 7);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[8 * v8 - v8]) {
      memmove(v12, v13, 7 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[7 * v8] || v12 >= &v13[7 * v8])
  {
    memcpy(v12, v13, 7 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100080A58(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129418);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100080BB8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129448);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 9);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 9 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100080D20(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129318);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100080E80(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_10000AC7C(a5);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 5);
  }
  else
  {
    int64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v11 + 32;
  size_t v14 = a4 + 32;
  size_t v15 = 5 * v9;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100080FE0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_100129340);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 6);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  size_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[6 * v8]) {
      memmove(v12, v13, 6 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[6 * v8] || v12 >= &v13[6 * v8])
  {
    memcpy(v12, v13, 6 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100081158(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_10000AC7C(a5);
    size_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 7);
  }
  else
  {
    size_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v11 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[8 * v9 - v9]) {
      memmove(v13, v14, 7 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[7 * v9] || v13 >= &v14[7 * v9])
  {
    memcpy(v13, v14, 7 * v9);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000812D4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_1001292E8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 22);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  size_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[22 * v8]) {
      memmove(v12, v13, 22 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[22 * v8] || v12 >= &v13[22 * v8])
  {
    memcpy(v12, v13, 22 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100081458(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_1001292D8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  size_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    memcpy(v12, v13, 24 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000815D4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_1001292C0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100081734(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_1001292B8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 6);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[6 * v8]) {
      memmove(v12, v13, 6 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[6 * v8] || v12 >= &v13[6 * v8])
  {
    memcpy(v12, v13, 6 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000818AC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_1001292B0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100081A0C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_1001292A8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 14);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[14 * v8]) {
      memmove(v12, v13, 14 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[14 * v8] || v12 >= &v13[14 * v8])
  {
    memcpy(v12, v13, 14 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100081B8C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10000AC7C(&qword_1001292D0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 12);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[12 * v8]) {
      memmove(v12, v13, 12 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[12 * v8] || v12 >= &v13[12 * v8])
  {
    memcpy(v12, v13, 12 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100081D08(void *(*a1)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)Swift::UInt32 v1 = xmmword_1000EBD40;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_24;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      uint64_t result = sub_1000820F0((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        *uint64_t v5 = v4;
        goto LABEL_19;
      }
      *uint64_t v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v14 = *v1;
      uint64_t v15 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = sub_1000820F0(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = v15 | 0x8000000000000000;
      if (v2)
      {
        *Swift::UInt32 v1 = v14;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        *Swift::UInt32 v1 = v14;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v16, 0, 15);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16);
      if (!v2) {
        return (char *)v14;
      }
      return result;
    default:
      v16[0] = *v1;
      LOWORD(v16[1]) = v3;
      BYTE2(v16[1]) = BYTE2(v3);
      BYTE3(v16[1]) = BYTE3(v3);
      BYTE4(v16[1]) = BYTE4(v3);
      BYTE5(v16[1]) = BYTE5(v3);
      BYTE6(v16[1]) = BYTE6(v3);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16 + BYTE6(v3));
      if (!v2) {
        uint64_t result = (char *)v14;
      }
      unint64_t v8 = LODWORD(v16[1]) | ((unint64_t)BYTE4(v16[1]) << 32) | ((unint64_t)BYTE5(v16[1]) << 40) | ((unint64_t)BYTE6(v16[1]) << 48);
      *Swift::UInt32 v1 = v16[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

unsigned char *sub_100082008@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)sub_100082334(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)sub_10008561C((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)sub_100085698((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

void *sub_100082080(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }
  uint64_t result = a1(&v6, 0, 0);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

char *sub_1000820F0(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

void sub_1000821A4(void *a1, unsigned char *a2, uint64_t a3)
{
  id v7 = v3;
  uint64_t v8 = NSData.startIndex.getter();

  uint64_t v21 = a2;
  if (!a2 || !a3) {
    goto LABEL_5;
  }
  if (a3 < 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v8 == NSData.endIndex.getter())
  {
LABEL_5:
    *a1 = v7;
    a1[1] = v8;
    return;
  }
  char v9 = NSData.subscript.getter();
  id v10 = v7;
  uint64_t v11 = NSData.startIndex.getter();
  uint64_t v12 = NSData.endIndex.getter();

  if (v8 >= v11 && v8 < v12)
  {
    *a2 = v9;
    if (a3 == 1)
    {
      ++v8;
      goto LABEL_5;
    }
    uint64_t v20 = a1;
    uint64_t v13 = 1;
    while (a3 != v13)
    {
      uint64_t v14 = v8 + v13;
      if (v8 + v13 == NSData.endIndex.getter())
      {
        v8 += v13;
        goto LABEL_18;
      }
      char v15 = NSData.subscript.getter();
      id v16 = v10;
      uint64_t v17 = NSData.startIndex.getter();
      uint64_t v18 = NSData.endIndex.getter();

      if (v14 < v17 || v14 >= v18) {
        goto LABEL_20;
      }
      uint64_t v19 = v13 + 1;
      v21[v13] = v15;
      uint64_t v13 = v19;
      if (a3 == v19)
      {
        v8 += v19;
LABEL_18:
        a1 = v20;
        goto LABEL_5;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
}

uint64_t sub_100082334(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_1000823F8(unsigned char *__src, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 <= 14) {
    return sub_100082334(__src, &__src[a2]);
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)();
  if ((unint64_t)a2 < 0x7FFFFFFF) {
    return a2 << 32;
  }
  type metadata accessor for Data.RangeReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  return result;
}

__int16 *sub_1000824AC(__int16 *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v3 = result;
  uint64_t result = (__int16 *)_swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007C40C(0, a2, 0);
    uint64_t result = (__int16 *)_swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    do
    {
      __int16 v6 = *v3++;
      __int16 v5 = v6;
      uint64_t v8 = result;
      unint64_t v7 = *((void *)result + 3);
      if (v4 >= v7 >> 1)
      {
        sub_10007C40C(v7 > 1, v4 + 1, 1);
        uint64_t result = v8;
      }
      *((void *)result + 2) = v4 + 1;
      result[v4++ + 16] = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_100082580(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  unint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    uint64_t v20 = v4;
    sub_10007C47C(0, a2, 0);
    __int16 v5 = v20;
    uint64_t result = _swiftEmptyArrayStorage;
    uint64_t v6 = 0;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    uint64_t v8 = 12 * v7;
    do
    {
      v2.i32[0] = *(_DWORD *)((char *)v5 + v6);
      __int16 v9 = *(_WORD *)((char *)v5 + v6 + 4);
      char v10 = *((unsigned char *)v5 + v6 + 6);
      char v11 = *((unsigned char *)v5 + v6 + 7);
      __int16 v12 = *(_WORD *)((char *)v5 + v6 + 8);
      char v13 = *((unsigned char *)v5 + v6 + 10);
      char v14 = *((unsigned char *)v5 + v6 + 11);
      uint64_t v21 = result;
      unint64_t v15 = result[3];
      unint64_t v16 = v7 + 1;
      if (v7 >= v15 >> 1)
      {
        uint64_t v19 = v8;
        char v18 = *((unsigned char *)v5 + v6 + 11);
        sub_10007C47C(v15 > 1, v7 + 1, 1);
        char v14 = v18;
        uint64_t v8 = v19;
        __int16 v5 = v20;
        uint64_t result = v21;
      }
      result[2] = v16;
      uint64_t v17 = (char *)result + v8 + v6;
      *((_DWORD *)v17 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      *((_WORD *)v17 + 18) = v9;
      v17[38] = v10;
      v17[39] = v11;
      *((_WORD *)v17 + 20) = v12;
      v17[42] = v13;
      v17[43] = v14;
      v6 += 12;
      unint64_t v7 = v16;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *sub_1000826CC(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  unint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    unint64_t v16 = v4;
    sub_10007C49C(0, a2, 0);
    __int16 v5 = v16;
    uint64_t result = _swiftEmptyArrayStorage;
    uint64_t v6 = 0;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    uint64_t v8 = 9 * v7;
    do
    {
      v2.i32[0] = *(_DWORD *)((char *)v5 + v6);
      __int16 v9 = *(_WORD *)((char *)v5 + v6 + 4);
      char v10 = *((unsigned char *)v5 + v6 + 6);
      char v11 = *((unsigned char *)v5 + v6 + 7);
      char v12 = *((unsigned char *)v5 + v6 + 8);
      uint64_t v17 = result;
      unint64_t v13 = result[3];
      unint64_t v14 = v7 + 1;
      if (v7 >= v13 >> 1)
      {
        sub_10007C49C(v13 > 1, v7 + 1, 1);
        __int16 v5 = v16;
        uint64_t result = v17;
      }
      result[2] = v14;
      unint64_t v15 = (char *)result + v8 + v6;
      *((_DWORD *)v15 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      *((_WORD *)v15 + 18) = v9;
      v15[38] = v10;
      v15[39] = v11;
      v15[40] = v12;
      v6 += 9;
      unint64_t v7 = v14;
      --v3;
    }
    while (v3);
  }
  return result;
}

char *sub_1000827F4(char *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  int64_t v3 = result;
  uint64_t result = (char *)_swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007C714(0, a2, 0);
    uint64_t result = (char *)_swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    do
    {
      char v6 = *v3++;
      char v5 = v6;
      uint64_t v8 = result;
      unint64_t v7 = *((void *)result + 3);
      if (v4 >= v7 >> 1)
      {
        sub_10007C714(v7 > 1, v4 + 1, 1);
        uint64_t result = v8;
      }
      *((void *)result + 2) = v4 + 1;
      result[v4++ + 32] = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_1000828C8(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  int64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007CC24(0, a2, 0);
    uint64_t v4 = 0;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v5 = _swiftEmptyArrayStorage[2];
    uint64_t v6 = 4 * v5;
    do
    {
      char v7 = *((unsigned char *)v3 + v4);
      __int16 v8 = *(_WORD *)((char *)v3 + v4 + 1);
      char v9 = *((unsigned char *)v3 + v4 + 3);
      unint64_t v13 = result;
      unint64_t v10 = result[3];
      unint64_t v11 = v5 + 1;
      if (v5 >= v10 >> 1)
      {
        sub_10007CC24(v10 > 1, v5 + 1, 1);
        uint64_t result = v13;
      }
      result[2] = v11;
      char v12 = (char *)result + v6 + v4;
      v12[32] = v7;
      *(_WORD *)(v12 + 33) = v8;
      v12[35] = v9;
      v4 += 4;
      unint64_t v5 = v11;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_1000829D0(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007CC94(0, a2, 0);
    uint64_t v5 = 0;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 6 * v6;
    do
    {
      v2.i32[0] = *(_DWORD *)((char *)v4 + v5);
      char v8 = *((unsigned char *)v4 + v5 + 4);
      char v9 = *((unsigned char *)v4 + v5 + 5);
      unint64_t v13 = result;
      unint64_t v10 = result[3];
      unint64_t v11 = v6 + 1;
      if (v6 >= v10 >> 1)
      {
        sub_10007CC94(v10 > 1, v6 + 1, 1);
        uint64_t result = v13;
      }
      result[2] = v11;
      char v12 = (char *)result + v7 + v5;
      *((_DWORD *)v12 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      v12[36] = v8;
      v12[37] = v9;
      v5 += 6;
      unint64_t v6 = v11;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *sub_100082AEC(void *result, uint64_t a2, void (*a3)(BOOL, uint64_t, uint64_t))
{
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    uint64_t v17 = v4;
    a3(0, a2, 0);
    uint64_t v5 = v17;
    uint64_t v6 = 0;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    uint64_t v8 = 5 * v7;
    do
    {
      char v9 = *((unsigned char *)v5 + v6);
      __int16 v10 = *(_WORD *)((char *)v5 + v6 + 1);
      char v11 = *((unsigned char *)v5 + v6 + 3);
      char v12 = *((unsigned char *)v5 + v6 + 4);
      char v18 = result;
      unint64_t v13 = result[3];
      unint64_t v14 = v7 + 1;
      if (v7 >= v13 >> 1)
      {
        a3(v13 > 1, v7 + 1, 1);
        uint64_t v5 = v17;
        uint64_t result = v18;
      }
      result[2] = v14;
      unint64_t v15 = (char *)result + v8 + v6;
      v15[32] = v9;
      *(_WORD *)(v15 + 33) = v10;
      v15[35] = v11;
      v15[36] = v12;
      v6 += 5;
      unint64_t v7 = v14;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *sub_100082C18(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    uint64_t v24 = v4;
    sub_10007C524(0, a2, 0);
    uint64_t v5 = v24;
    uint64_t result = _swiftEmptyArrayStorage;
    uint64_t v6 = 0;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    uint64_t v8 = 17 * v7;
    do
    {
      v2.i32[0] = *(_DWORD *)((char *)v5 + v6);
      __int16 v9 = *(_WORD *)((char *)v5 + v6 + 4);
      char v10 = *((unsigned char *)v5 + v6 + 6);
      char v11 = *((unsigned char *)v5 + v6 + 7);
      char v12 = *((unsigned char *)v5 + v6 + 8);
      int v13 = *(_DWORD *)((char *)v5 + v6 + 9);
      char v14 = *((unsigned char *)v5 + v6 + 13);
      __int16 v15 = *(_WORD *)((char *)v5 + v6 + 14);
      char v16 = *((unsigned char *)v5 + v6 + 16);
      unint64_t v17 = result[3];
      unint64_t v18 = v7 + 1;
      uint64_t v25 = result;
      if (v7 >= v17 >> 1)
      {
        uint64_t v23 = v8;
        __int16 v21 = *(_WORD *)((char *)v5 + v6 + 14);
        char v22 = *((unsigned char *)v5 + v6 + 13);
        char v20 = *((unsigned char *)v5 + v6 + 16);
        sub_10007C524(v17 > 1, v7 + 1, 1);
        char v16 = v20;
        __int16 v15 = v21;
        char v14 = v22;
        uint64_t v8 = v23;
        uint64_t v5 = v24;
        uint64_t result = v25;
      }
      result[2] = v18;
      uint64_t v19 = (char *)result + v8 + v6;
      *((_DWORD *)v19 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      *((_WORD *)v19 + 18) = v9;
      v19[38] = v10;
      v19[39] = v11;
      v19[40] = v12;
      *(_DWORD *)(v19 + 41) = v13;
      v19[45] = v14;
      *((_WORD *)v19 + 23) = v15;
      v19[48] = v16;
      v6 += 17;
      unint64_t v7 = v18;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *sub_100082D78(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    char v20 = v4;
    sub_10007C544(0, a2, 0);
    uint64_t v5 = v20;
    uint64_t result = _swiftEmptyArrayStorage;
    uint64_t v6 = 0;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    uint64_t v8 = 12 * v7;
    do
    {
      v2.i32[0] = *(_DWORD *)((char *)v5 + v6);
      __int16 v9 = *(_WORD *)((char *)v5 + v6 + 4);
      char v10 = *((unsigned char *)v5 + v6 + 6);
      char v11 = *((unsigned char *)v5 + v6 + 7);
      char v12 = *((unsigned char *)v5 + v6 + 8);
      __int16 v13 = *(_WORD *)((char *)v5 + v6 + 9);
      char v14 = *((unsigned char *)v5 + v6 + 11);
      __int16 v21 = result;
      unint64_t v15 = result[3];
      unint64_t v16 = v7 + 1;
      if (v7 >= v15 >> 1)
      {
        uint64_t v19 = v8;
        char v18 = *((unsigned char *)v5 + v6 + 11);
        sub_10007C544(v15 > 1, v7 + 1, 1);
        char v14 = v18;
        uint64_t v8 = v19;
        uint64_t v5 = v20;
        uint64_t result = v21;
      }
      result[2] = v16;
      unint64_t v17 = (char *)result + v8 + v6;
      *((_DWORD *)v17 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      *((_WORD *)v17 + 18) = v9;
      v17[38] = v10;
      v17[39] = v11;
      v17[40] = v12;
      *(_WORD *)(v17 + 41) = v13;
      v17[43] = v14;
      v6 += 12;
      unint64_t v7 = v16;
      --v3;
    }
    while (v3);
  }
  return result;
}

int *sub_100082EC4(int *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  int64_t v3 = result;
  uint64_t result = (int *)_swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007C504(0, a2, 0);
    uint64_t result = (int *)_swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    do
    {
      int v6 = *v3++;
      int v5 = v6;
      uint64_t v8 = result;
      unint64_t v7 = *((void *)result + 3);
      if (v4 >= v7 >> 1)
      {
        sub_10007C504(v7 > 1, v4 + 1, 1);
        uint64_t result = v8;
      }
      *((void *)result + 2) = v4 + 1;
      result[v4++ + 8] = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_100082F98(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  unint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007C7F4(0, a2, 0);
    uint64_t v5 = 0;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 7 * v6;
    do
    {
      v2.i32[0] = *(_DWORD *)((char *)v4 + v5);
      __int16 v8 = *(_WORD *)((char *)v4 + v5 + 4);
      char v9 = *((unsigned char *)v4 + v5 + 6);
      __int16 v13 = result;
      unint64_t v10 = result[3];
      unint64_t v11 = v6 + 1;
      if (v6 >= v10 >> 1)
      {
        sub_10007C7F4(v10 > 1, v6 + 1, 1);
        uint64_t result = v13;
      }
      result[2] = v11;
      char v12 = (char *)result + v7 + v5;
      *((_DWORD *)v12 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      *((_WORD *)v12 + 18) = v8;
      v12[38] = v9;
      v5 += 7;
      unint64_t v6 = v11;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *sub_1000830B4(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  int64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    unint64_t v17 = v3;
    sub_10007C7D4(0, a2, 0);
    unint64_t v4 = v17;
    uint64_t v5 = 0;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 8 * v6;
    do
    {
      char v8 = v4[v5];
      int v9 = *(_DWORD *)((char *)&v4[v5] + 1);
      char v10 = BYTE5(v4[v5]);
      char v11 = BYTE6(v4[v5]);
      char v12 = HIBYTE(v4[v5]);
      char v18 = result;
      unint64_t v13 = result[3];
      unint64_t v14 = v6 + 1;
      if (v6 >= v13 >> 1)
      {
        uint64_t v16 = v7;
        sub_10007C7D4(v13 > 1, v6 + 1, 1);
        uint64_t v7 = v16;
        unint64_t v4 = v17;
        uint64_t result = v18;
      }
      result[2] = v14;
      unint64_t v15 = (char *)result + v7 + v5 * 8;
      v15[32] = v8;
      *(_DWORD *)(v15 + 33) = v9;
      v15[37] = v10;
      v15[38] = v11;
      v15[39] = v12;
      ++v5;
      unint64_t v6 = v14;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t *sub_1000831DC(uint64_t *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  int64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007C564(0, a2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    do
    {
      uint64_t v5 = *v3;
      uint64_t v7 = result;
      unint64_t v6 = result[3];
      if (v4 >= v6 >> 1)
      {
        sub_10007C564(v6 > 1, v4 + 1, 1);
        uint64_t result = v7;
      }
      result[2] = v4 + 1;
      result[v4 + 4] = v5;
      ++v3;
      ++v4;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_1000832B4(void *result, uint64_t a2, void (*a3)(BOOL, uint64_t, uint64_t))
{
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v4 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v5 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    a3(0, a2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    uint64_t v8 = 5 * v7;
    int v9 = (char *)v5 + 4;
    do
    {
      v3.i32[0] = *((_DWORD *)v9 - 1);
      char v10 = *v9;
      unint64_t v14 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v7 + 1;
      if (v7 >= v11 >> 1)
      {
        a3(v11 > 1, v7 + 1, 1);
        uint64_t result = v14;
      }
      v9 += 5;
      result[2] = v12;
      unint64_t v13 = (char *)result + v8;
      *((_DWORD *)v13 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
      v13[36] = v10;
      v8 += 5;
      unint64_t v7 = v12;
      --v4;
    }
    while (v4);
  }
  return result;
}

void *sub_1000833BC(void *result, uint64_t a2, void (*a3)(BOOL, uint64_t, uint64_t))
{
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    a3(0, a2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 2 * v6;
    uint64_t v8 = (char *)v4 + 1;
    do
    {
      char v9 = *(v8 - 1);
      char v10 = *v8;
      unint64_t v14 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v6 + 1;
      if (v6 >= v11 >> 1)
      {
        a3(v11 > 1, v6 + 1, 1);
        uint64_t result = v14;
      }
      v8 += 2;
      result[2] = v12;
      unint64_t v13 = (char *)result + v7;
      v13[32] = v9;
      v13[33] = v10;
      v7 += 2;
      unint64_t v6 = v12;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *sub_1000834BC(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    unint64_t v17 = v4;
    sub_10007C584(0, a2, 0);
    uint64_t v5 = v17;
    uint64_t v6 = 0;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    uint64_t v8 = 20 * v7;
    do
    {
      v2.i32[0] = *(_DWORD *)((char *)v5 + v6);
      __int16 v9 = *(_WORD *)((char *)v5 + v6 + 4);
      char v10 = *((unsigned char *)v5 + v6 + 6);
      char v11 = *((unsigned char *)v5 + v6 + 7);
      int v12 = *(_DWORD *)((char *)v5 + v6 + 8);
      uint64_t v13 = *(void *)((char *)v5 + v6 + 12);
      char v18 = result;
      unint64_t v14 = result[3];
      unint64_t v15 = v7 + 1;
      if (v7 >= v14 >> 1)
      {
        sub_10007C584(v14 > 1, v7 + 1, 1);
        uint64_t v5 = v17;
        uint64_t result = v18;
      }
      result[2] = v15;
      uint64_t v16 = (char *)result + v8 + v6;
      *((_DWORD *)v16 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      *((_WORD *)v16 + 18) = v9;
      v16[38] = v10;
      v16[39] = v11;
      *((_DWORD *)v16 + 10) = v12;
      *(void *)(v16 + 44) = v13;
      v6 += 20;
      unint64_t v7 = v15;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *sub_1000835F8(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    uint64_t v24 = v4;
    sub_10007C5A4(0, a2, 0);
    uint64_t v5 = v24;
    uint64_t result = _swiftEmptyArrayStorage;
    uint64_t v6 = 0;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    uint64_t v8 = 19 * v7;
    do
    {
      v2.i32[0] = *(_DWORD *)((char *)v5 + v6);
      __int16 v9 = *(_WORD *)((char *)v5 + v6 + 4);
      char v10 = *((unsigned char *)v5 + v6 + 6);
      char v11 = *((unsigned char *)v5 + v6 + 7);
      char v12 = *((unsigned char *)v5 + v6 + 8);
      int v13 = *(_DWORD *)((char *)v5 + v6 + 9);
      __int16 v14 = *(_WORD *)((char *)v5 + v6 + 13);
      __int16 v15 = *(_WORD *)((char *)v5 + v6 + 15);
      __int16 v16 = *(_WORD *)((char *)v5 + v6 + 17);
      unint64_t v17 = result[3];
      unint64_t v18 = v7 + 1;
      uint64_t v25 = result;
      if (v7 >= v17 >> 1)
      {
        uint64_t v23 = v8;
        __int16 v21 = *(_WORD *)((char *)v5 + v6 + 15);
        __int16 v22 = *(_WORD *)((char *)v5 + v6 + 13);
        __int16 v20 = *(_WORD *)((char *)v5 + v6 + 17);
        sub_10007C5A4(v17 > 1, v7 + 1, 1);
        __int16 v16 = v20;
        __int16 v15 = v21;
        __int16 v14 = v22;
        uint64_t v8 = v23;
        uint64_t v5 = v24;
        uint64_t result = v25;
      }
      result[2] = v18;
      uint64_t v19 = (char *)result + v8 + v6;
      *((_DWORD *)v19 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      *((_WORD *)v19 + 18) = v9;
      v19[38] = v10;
      v19[39] = v11;
      v19[40] = v12;
      *(_DWORD *)(v19 + 41) = v13;
      *(_WORD *)(v19 + 45) = v14;
      *(_WORD *)(v19 + 47) = v15;
      *(_WORD *)(v19 + 49) = v16;
      v6 += 19;
      unint64_t v7 = v18;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *sub_10008375C(void *result, uint64_t a2, void (*a3)(BOOL, uint64_t, uint64_t))
{
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v4 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v5 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    a3(0, a2, 0);
    uint64_t v6 = 0;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    uint64_t v8 = 7 * v7;
    do
    {
      v3.i32[0] = *(_DWORD *)((char *)v5 + v6);
      __int16 v9 = *(_WORD *)((char *)v5 + v6 + 4);
      char v10 = *((unsigned char *)v5 + v6 + 6);
      __int16 v15 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v7 + 1;
      if (v7 >= v11 >> 1)
      {
        a3(v11 > 1, v7 + 1, 1);
        uint64_t result = v15;
      }
      result[2] = v12;
      int v13 = (char *)result + v8 + v6;
      *((_DWORD *)v13 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
      *((_WORD *)v13 + 18) = v9;
      v13[38] = v10;
      v6 += 7;
      unint64_t v7 = v12;
      --v4;
    }
    while (v4);
  }
  return result;
}

void *sub_100083888(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint8x8_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007CB6C(0, a2, 0);
    uint64_t v4 = 0;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v5 = _swiftEmptyArrayStorage[2];
    uint64_t v6 = v5;
    do
    {
      __int16 v7 = v3[v4];
      int v8 = *(_DWORD *)((char *)&v3[v4] + 2);
      __int16 v9 = HIWORD(v3[v4]);
      int v13 = result;
      unint64_t v10 = result[3];
      unint64_t v11 = v5 + 1;
      if (v5 >= v10 >> 1)
      {
        sub_10007CB6C(v10 > 1, v5 + 1, 1);
        uint64_t result = v13;
      }
      result[2] = v11;
      unint64_t v12 = &result[v6 + v4];
      *((_WORD *)v12 + 16) = v7;
      *(_DWORD *)((char *)v12 + 34) = v8;
      *((_WORD *)v12 + 19) = v9;
      ++v4;
      unint64_t v5 = v11;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_100083990(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    __int16 v16 = v4;
    sub_10007C5C4(0, a2, 0);
    unint64_t v5 = v16;
    uint64_t result = _swiftEmptyArrayStorage;
    uint64_t v6 = 0;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    uint64_t v8 = 12 * v7;
    do
    {
      v2.i32[0] = *(_DWORD *)((char *)v5 + v6);
      char v9 = *((unsigned char *)v5 + v6 + 4);
      int v10 = *(_DWORD *)((char *)v5 + v6 + 5);
      char v11 = *((unsigned char *)v5 + v6 + 9);
      __int16 v12 = *(_WORD *)((char *)v5 + v6 + 10);
      unint64_t v17 = result;
      unint64_t v13 = result[3];
      unint64_t v14 = v7 + 1;
      if (v7 >= v13 >> 1)
      {
        sub_10007C5C4(v13 > 1, v7 + 1, 1);
        unint64_t v5 = v16;
        uint64_t result = v17;
      }
      result[2] = v14;
      __int16 v15 = (char *)result + v8 + v6;
      *((_DWORD *)v15 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      v15[36] = v9;
      *(_DWORD *)(v15 + 37) = v10;
      v15[41] = v11;
      *((_WORD *)v15 + 21) = v12;
      v6 += 12;
      unint64_t v7 = v14;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *sub_100083ABC(void *result, uint64_t a2, void (*a3)(BOOL, uint64_t, uint64_t))
{
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v4 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  unint64_t v5 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    a3(0, a2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    uint64_t v8 = 5 * v7;
    char v9 = (char *)v5 + 4;
    do
    {
      v3.i32[0] = *((_DWORD *)v9 - 1);
      char v10 = *v9;
      unint64_t v14 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v7 + 1;
      if (v7 >= v11 >> 1)
      {
        a3(v11 > 1, v7 + 1, 1);
        uint64_t result = v14;
      }
      v9 += 5;
      result[2] = v12;
      unint64_t v13 = (char *)result + v8;
      *((_DWORD *)v13 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
      v13[36] = v10;
      v8 += 5;
      unint64_t v7 = v12;
      --v4;
    }
    while (v4);
  }
  return result;
}

void *sub_100083BC4(void *result, uint64_t a2, void (*a3)(BOOL, uint64_t, uint64_t))
{
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    a3(0, a2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 6 * v6;
    uint64_t v8 = (_WORD *)v4 + 2;
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      __int16 v10 = *v8;
      unint64_t v14 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v6 + 1;
      if (v6 >= v11 >> 1)
      {
        a3(v11 > 1, v6 + 1, 1);
        uint64_t result = v14;
      }
      v8 += 3;
      result[2] = v12;
      unint64_t v13 = (char *)result + v7;
      *((_DWORD *)v13 + 8) = v9;
      *((_WORD *)v13 + 18) = v10;
      v7 += 6;
      unint64_t v6 = v12;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *sub_100083CC8(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007C5E4(0, a2, 0);
    uint64_t v5 = 0;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 11 * v6;
    do
    {
      v2.i32[0] = *(_DWORD *)((char *)v4 + v5);
      char v8 = *((unsigned char *)v4 + v5 + 4);
      int v9 = *(_DWORD *)((char *)v4 + v5 + 5);
      __int16 v10 = *(_WORD *)((char *)v4 + v5 + 9);
      unint64_t v14 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v6 + 1;
      if (v6 >= v11 >> 1)
      {
        sub_10007C5E4(v11 > 1, v6 + 1, 1);
        uint64_t result = v14;
      }
      result[2] = v12;
      unint64_t v13 = (char *)result + v7 + v5;
      *((_DWORD *)v13 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      v13[36] = v8;
      *(_DWORD *)(v13 + 37) = v9;
      *(_WORD *)(v13 + 41) = v10;
      v5 += 11;
      unint64_t v6 = v12;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *sub_100083DE8(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007CC04(0, a2, 0);
    uint64_t v5 = 0;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 9 * v6;
    do
    {
      v2.i32[0] = *(_DWORD *)((char *)v4 + v5);
      __int16 v8 = *(_WORD *)((char *)v4 + v5 + 4);
      __int16 v9 = *(_WORD *)((char *)v4 + v5 + 6);
      char v10 = *((unsigned char *)v4 + v5 + 8);
      unint64_t v14 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v6 + 1;
      if (v6 >= v11 >> 1)
      {
        sub_10007CC04(v11 > 1, v6 + 1, 1);
        uint64_t result = v14;
      }
      result[2] = v12;
      unint64_t v13 = (char *)result + v7 + v5;
      *((_DWORD *)v13 + 8) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      *((_WORD *)v13 + 18) = v8;
      *((_WORD *)v13 + 19) = v9;
      v13[40] = v10;
      v5 += 9;
      unint64_t v6 = v12;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *sub_100083F04(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  int64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007C604(0, a2, 0);
    uint64_t v4 = 0;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v5 = _swiftEmptyArrayStorage[2];
    uint64_t v6 = 22 * v5;
    do
    {
      long long v7 = *(_OWORD *)((char *)v3 + v4);
      int v8 = *(_DWORD *)((char *)v3 + v4 + 16);
      __int16 v9 = *(_WORD *)((char *)v3 + v4 + 20);
      unint64_t v14 = result;
      unint64_t v10 = result[3];
      unint64_t v11 = v5 + 1;
      if (v5 >= v10 >> 1)
      {
        long long v13 = *(_OWORD *)((char *)v3 + v4);
        sub_10007C604(v10 > 1, v5 + 1, 1);
        long long v7 = v13;
        uint64_t result = v14;
      }
      result[2] = v11;
      unint64_t v12 = (char *)result + v6 + v4;
      *((_OWORD *)v12 + 2) = v7;
      *((_DWORD *)v12 + 12) = v8;
      *((_WORD *)v12 + 26) = v9;
      v4 += 22;
      unint64_t v5 = v11;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_100084018(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  int64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    __int16 v16 = v3;
    sub_10007C624(0, a2, 0);
    uint64_t v4 = v16;
    uint64_t result = _swiftEmptyArrayStorage;
    uint64_t v5 = 0;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 18 * v6;
    do
    {
      uint64_t v8 = *(void *)((char *)v4 + v5);
      __int16 v9 = *(_WORD *)((char *)v4 + v5 + 8);
      __int16 v10 = *(_WORD *)((char *)v4 + v5 + 10);
      int v11 = *(_DWORD *)((char *)v4 + v5 + 12);
      __int16 v12 = *(_WORD *)((char *)v4 + v5 + 16);
      unint64_t v17 = result;
      unint64_t v13 = result[3];
      unint64_t v14 = v6 + 1;
      if (v6 >= v13 >> 1)
      {
        sub_10007C624(v13 > 1, v6 + 1, 1);
        uint64_t v4 = v16;
        uint64_t result = v17;
      }
      result[2] = v14;
      __int16 v15 = (char *)result + v7 + v5;
      *((void *)v15 + 4) = v8;
      *((_WORD *)v15 + 20) = v9;
      *((_WORD *)v15 + 21) = v10;
      *((_DWORD *)v15 + 11) = v11;
      *((_WORD *)v15 + 24) = v12;
      v5 += 18;
      unint64_t v6 = v14;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_10008413C(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  int64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    __int16 v20 = v3;
    sub_10007CDCC(0, a2, 0);
    uint64_t v4 = v20;
    uint64_t result = _swiftEmptyArrayStorage;
    uint64_t v5 = 0;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 22 * v6;
    do
    {
      uint64_t v8 = *(void *)((char *)v4 + v5);
      __int16 v9 = *(_WORD *)((char *)v4 + v5 + 8);
      __int16 v10 = *(_WORD *)((char *)v4 + v5 + 10);
      __int16 v11 = *(_WORD *)((char *)v4 + v5 + 12);
      int v12 = *(_DWORD *)((char *)v4 + v5 + 14);
      __int16 v13 = *(_WORD *)((char *)v4 + v5 + 18);
      __int16 v14 = *(_WORD *)((char *)v4 + v5 + 20);
      __int16 v21 = result;
      unint64_t v15 = result[3];
      unint64_t v16 = v6 + 1;
      if (v6 >= v15 >> 1)
      {
        uint64_t v19 = v7;
        __int16 v18 = *(_WORD *)((char *)v4 + v5 + 20);
        sub_10007CDCC(v15 > 1, v6 + 1, 1);
        __int16 v14 = v18;
        uint64_t v7 = v19;
        uint64_t v4 = v20;
        uint64_t result = v21;
      }
      result[2] = v16;
      unint64_t v17 = (char *)result + v7 + v5;
      *((void *)v17 + 4) = v8;
      *((_WORD *)v17 + 20) = v9;
      *((_WORD *)v17 + 21) = v10;
      *((_WORD *)v17 + 22) = v11;
      *(_DWORD *)(v17 + 46) = v12;
      *((_WORD *)v17 + 25) = v13;
      v5 += 22;
      unint64_t v6 = v16;
      *((_WORD *)v17 + 26) = v14;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_100084280(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  int64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007CDEC(0, a2, 0);
    uint64_t v4 = 0;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v5 = _swiftEmptyArrayStorage[2];
    uint64_t v6 = 3 * v5;
    do
    {
      long long v7 = *(_OWORD *)&v3[v4];
      int v8 = v3[v4 + 2];
      __int16 v9 = WORD2(v3[v4 + 2]);
      __int16 v10 = HIWORD(v3[v4 + 2]);
      unint64_t v15 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v5 + 1;
      if (v5 >= v11 >> 1)
      {
        long long v14 = *(_OWORD *)&v3[v4];
        sub_10007CDEC(v11 > 1, v5 + 1, 1);
        long long v7 = v14;
        uint64_t result = v15;
      }
      result[2] = v12;
      __int16 v13 = &result[v6 + v4];
      *((_OWORD *)v13 + 2) = v7;
      *((_DWORD *)v13 + 12) = v8;
      *((_WORD *)v13 + 26) = v9;
      *((_WORD *)v13 + 27) = v10;
      v4 += 3;
      unint64_t v5 = v12;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_10008439C(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  int64_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007C644(0, a2, 0);
    uint64_t v4 = 0;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v5 = _swiftEmptyArrayStorage[2];
    uint64_t v6 = 14 * v5;
    do
    {
      uint64_t v7 = *(void *)((char *)v3 + v4);
      __int16 v8 = *(_WORD *)((char *)v3 + v4 + 8);
      __int16 v9 = *(_WORD *)((char *)v3 + v4 + 10);
      __int16 v10 = *(_WORD *)((char *)v3 + v4 + 12);
      long long v14 = result;
      unint64_t v11 = result[3];
      unint64_t v12 = v5 + 1;
      if (v5 >= v11 >> 1)
      {
        sub_10007C644(v11 > 1, v5 + 1, 1);
        uint64_t result = v14;
      }
      result[2] = v12;
      __int16 v13 = (char *)result + v6 + v4;
      *((void *)v13 + 4) = v7;
      *((_WORD *)v13 + 20) = v8;
      *((_WORD *)v13 + 21) = v9;
      *((_WORD *)v13 + 22) = v10;
      v4 += 14;
      unint64_t v5 = v12;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t *sub_1000844B4(uint64_t *result, unint64_t a2, void (*a3)(BOOL, unint64_t, uint64_t))
{
  if (!result) {
    goto LABEL_10;
  }
  unint64_t v3 = a2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    a3(0, a2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    do
    {
      uint64_t v7 = *v4;
      __int16 v9 = result;
      unint64_t v8 = result[3];
      if (v6 >= v8 >> 1)
      {
        a3(v8 > 1, v6 + 1, 1);
        uint64_t result = v9;
      }
      result[2] = v6 + 1;
      result[v6 + 4] = v7;
      ++v4;
      ++v6;
      --v3;
    }
    while (v3);
  }
  return result;
}

__int32 *sub_1000845A8(__int32 *result, uint64_t a2, void (*a3)(BOOL, uint64_t, uint64_t))
{
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v4 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  unint64_t v5 = result;
  uint64_t result = (__int32 *)_swiftEmptyArrayStorage;
  if (a2)
  {
    a3(0, a2, 0);
    uint64_t result = (__int32 *)_swiftEmptyArrayStorage;
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    do
    {
      v3.i32[0] = *v5;
      __int16 v9 = result;
      unint64_t v8 = *((void *)result + 3);
      if (v7 >= v8 >> 1)
      {
        a3(v8 > 1, v7 + 1, 1);
        uint64_t result = v9;
      }
      *((void *)result + 2) = v7 + 1;
      result[v7 + 8] = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
      ++v5;
      ++v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

void *sub_1000846A4(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint8x8_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    unint64_t v17 = v3;
    sub_10007CA34(0, a2, 0);
    uint64_t v4 = v17;
    uint64_t v5 = 0;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 7 * v6;
    do
    {
      __int16 v8 = *(_WORD *)((char *)v4 + v5);
      char v9 = *((unsigned char *)v4 + v5 + 2);
      char v10 = *((unsigned char *)v4 + v5 + 3);
      __int16 v11 = *(_WORD *)((char *)v4 + v5 + 4);
      char v12 = *((unsigned char *)v4 + v5 + 6);
      __int16 v18 = result;
      unint64_t v13 = result[3];
      unint64_t v14 = v6 + 1;
      if (v6 >= v13 >> 1)
      {
        uint64_t v16 = v7;
        sub_10007CA34(v13 > 1, v6 + 1, 1);
        uint64_t v7 = v16;
        uint64_t v4 = v17;
        uint64_t result = v18;
      }
      result[2] = v14;
      unint64_t v15 = (char *)result + v7 + v5;
      *((_WORD *)v15 + 16) = v8;
      v15[34] = v9;
      v15[35] = v10;
      *((_WORD *)v15 + 18) = v11;
      v15[38] = v12;
      v5 += 7;
      unint64_t v6 = v14;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_1000847D0(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v2 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  uint8x8_t v3 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007CA14(0, a2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v4 = _swiftEmptyArrayStorage[2];
    uint64_t v5 = 3 * v4;
    unint64_t v6 = (char *)v3 + 2;
    do
    {
      __int16 v7 = *((_WORD *)v6 - 1);
      char v8 = *v6;
      char v12 = result;
      unint64_t v9 = result[3];
      unint64_t v10 = v4 + 1;
      if (v4 >= v9 >> 1)
      {
        sub_10007CA14(v9 > 1, v4 + 1, 1);
        uint64_t result = v12;
      }
      v6 += 3;
      result[2] = v10;
      __int16 v11 = (char *)result + v5;
      *((_WORD *)v11 + 16) = v7;
      v11[34] = v8;
      v5 += 3;
      unint64_t v4 = v10;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_1000848C4(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  unint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007C9F4(0, a2, 0);
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v5 = _swiftEmptyArrayStorage[2];
    uint64_t v6 = 6 * v5;
    __int16 v7 = (_DWORD *)((char *)v4 + 2);
    do
    {
      __int16 v8 = *((_WORD *)v7 - 1);
      v2.i32[0] = *v7;
      char v12 = result;
      unint64_t v9 = result[3];
      unint64_t v10 = v5 + 1;
      if (v5 >= v9 >> 1)
      {
        sub_10007C9F4(v9 > 1, v5 + 1, 1);
        uint64_t result = v12;
      }
      __int16 v7 = (_DWORD *)((char *)v7 + 6);
      result[2] = v10;
      __int16 v11 = (char *)result + v6;
      *((_WORD *)v11 + 16) = v8;
      *(_DWORD *)(v11 + 34) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      v6 += 6;
      unint64_t v5 = v10;
      --v3;
    }
    while (v3);
  }
  return result;
}

void *sub_1000849CC(void *result, int64_t a2)
{
  if (!result) {
    goto LABEL_10;
  }
  int64_t v3 = a2;
  if (a2 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  unint64_t v4 = result;
  uint64_t result = _swiftEmptyArrayStorage;
  if (a2)
  {
    sub_10007C9D4(0, a2, 0);
    uint64_t v5 = 0;
    uint64_t result = _swiftEmptyArrayStorage;
    unint64_t v6 = _swiftEmptyArrayStorage[2];
    uint64_t v7 = 7 * v6;
    do
    {
      __int16 v8 = *(_WORD *)((char *)v4 + v5);
      v2.i32[0] = *(_DWORD *)((char *)v4 + v5 + 2);
      char v9 = *((unsigned char *)v4 + v5 + 6);
      unint64_t v13 = result;
      unint64_t v10 = result[3];
      unint64_t v11 = v6 + 1;
      if (v6 >= v10 >> 1)
      {
        sub_10007C9D4(v10 > 1, v6 + 1, 1);
        uint64_t result = v13;
      }
      result[2] = v11;
      char v12 = (char *)result + v7 + v5;
      *((_WORD *)v12 + 16) = v8;
      *(_DWORD *)(v12 + 34) = vmovn_s16((int16x8_t)vmovl_u8(v2)).u32[0];
      v12[38] = v9;
      v5 += 7;
      unint64_t v6 = v11;
      --v3;
    }
    while (v3);
  }
  return result;
}